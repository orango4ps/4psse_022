OBJECT Report 11012272 Fill Prognosis from Proj. Act.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Prognose von ProjektplanungsaktivitÑten aus ausfÅllen;
               ENU=Fill Prognosis from Project Planning Activities;
               NLD=Prognose vanuit projectplanningsactiviteiten vullen;
               NOR=Fyll ut Prognose fra prosjektplanleggingsaktiviteter;
               SVE=Fyll i prognos frÜn projektplaneringsaktiviteter];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF ProjectNo <> '' THEN
                    Progn.GET(ProjectNo, PrognosisDate);
                  IF PrognosisDate = 0D THEN
                    ERROR(Text001, Progn.FIELDCAPTION("Prognosis Date"));

                  IF StartingDatePlanning = 0DT THEN
                    StartingDatePlanning := CREATEDATETIME(PrognosisDate, 0T);

                  Window.OPEN(Text000);
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF ProjectNo <> '' THEN
                                 SETRANGE("No.", ProjectNo);
                             END;

               OnAfterGetRecord=VAR
                                  PrognosisManagement@1100409000 : Codeunit 11020217;
                                  CostTypes@1210190001 : 'Cost,Revenue,Both';
                                BEGIN
                                  Window.UPDATE(1, "No.");
                                  IF NOT Progn.GET("No.", PrognosisDate) THEN
                                    CurrReport.SKIP;

                                  Progn.RESET;
                                  Progn.SETRANGE("Project No.", Job."No.");
                                  Progn.SETRANGE("Prognosis Date", PrognosisDate);
                                  IF NOT Progn.FINDFIRST THEN BEGIN
                                    IF AddNew THEN BEGIN
                                      PrognosisManagement.CreatePrognosis(Progn, CostTypes::Both);
                                    END ELSE BEGIN
                                      CurrReport.SKIP;
                                    END;
                                  END ELSE BEGIN
                                    Progn.TESTFIELD(Fixed, FALSE);
                                  END;

                                  PrognLine.RESET;
                                  PrognLine.SETRANGE("Project No.", Job."No.");
                                  PrognLine.SETRANGE("Prognosis Date", PrognosisDate);
                                  PrognLine.SETRANGE("Cost Type", PrognLine."Cost Type"::Labor);
                                  IF NOT PrognLine.FINDFIRST THEN
                                    CurrReport.SKIP;

                                  Window.UPDATE(2, PrognLine."Cost Type");

                                  ProjectPlanningActivity.RESET;
                                  ProjectPlanningActivity.SETCURRENTKEY("Project No.");
                                  ProjectPlanningActivity.SETRANGE("Project No.", Job."No.");
                                  IF ProjectPlanningActivity.ISEMPTY THEN  // Only if there are project planning activities for project.
                                    CurrReport.SKIP;

                                  TmpBudgetTotalByCostObjectAct.RESET;
                                  TmpBudgetTotalByCostObjectAct.DELETEALL;
                                  TmpBudgetTotalByActivity.RESET;
                                  TmpBudgetTotalByActivity.DELETEALL;
                                  TmpHoursPrognByActivity.RESET;
                                  TmpHoursPrognByActivity.DELETEALL;
                                END;
                                 }

    { 2271;1   ;DataItem;                    ;
               DataItemTable=Table11012431;
               DataItemTableView=SORTING(Project No.,Code)
                                 WHERE(Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);
                               SETRANGE(Type, Type::Activity);

                               SETFILTER("Starting Date", '>=%1', StartingDatePlanning);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(3, Code);
                                  UpdTmpHoursPrognByActivity("Project Planning Activity".Code, "Hours Prognosis");
                                END;

               DataItemLinkReference=Job;
               DataItemLink=Project No.=FIELD(No.) }

    { 5115;2   ;DataItem;                    ;
               DataItemTable=Table11012001;
               DataItemTableView=SORTING(Project No.,Project Planning Activity No.,Cost Object);
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);
                               SETRANGE("Cost Type", "Cost Type"::Labor);
                             END;

               OnAfterGetRecord=BEGIN
                                  UpdTmpBudgTotalByCostObjectAct("Cost Type", "Cost Object", Element, "Project Planning Activity".Code, "Amount (LCY)");
                                  UpdTmpBudgetTotalByActivity("Project Planning Activity".Code, "Amount (LCY)");
                                END;

               DataItemLinkReference=Project Planning Activity;
               DataItemLink=Project No.=FIELD(Project No.),
                            Project Planning Activity No.=FIELD(No.) }

    { 5975;1   ;DataItem;                    ;
               DataItemTable=Table11012035;
               DataItemTableView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                 WHERE(Cost Object=FILTER(<>''));
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);
                               SETRANGE("Cost Type", "Cost Type"::Labor);

                               SETRANGE("Prognosis Date", Progn."Prognosis Date"); //call C000619
                             END;

               OnAfterGetRecord=VAR
                                  TotalHours@1100525001 : Decimal;
                                BEGIN
                                  TotalHours := GetTotalHours("Cost Object", Element);
                                  VALIDATE(Quantity, ROUND(TotalHours, 0.00001));
                                  MODIFY(TRUE);
                                END;

               DataItemLinkReference=Job;
               DataItemLink=Project No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   StartingDatePlanning := CREATEDATETIME(PrognosisDate, 0T);
                 END;

    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[DEU=Planungsdatum ab;
                             ENU=Planning Date from;
                             NLD=Planningsdatum vanaf;
                             NOR=Planleggingsdato fra;
                             SVE=Planeringsdatum frÜn];
                  SourceExpr=StartingDatePlanning }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Progn@1100525006 : Record 11012034;
      PrognLine@1100525000 : Record 11012035;
      ProjectPlanningActivity@1100525005 : Record 11012431;
      TmpBudgetTotalByCostObjectAct@1100525009 : TEMPORARY Record 11012217;
      TmpBudgetTotalByActivity@1100525010 : TEMPORARY Record 11012217;
      TmpHoursPrognByActivity@1100525011 : TEMPORARY Record 11012217;
      Window@1100525016 : Dialog;
      StartingDatePlanning@1100525003 : DateTime;
      PrognosisDate@1100525002 : Date;
      ProjectNo@1100525001 : Code[20];
      Text000@1100525017 : TextConst 'DEU=Projekt     #1############\Kostenart #2############\AktivitÑt  #3############\Verarbeiten   #4#########################;ENU=Project   #1############\Cost Type #2############\Activity  #3############\Process   #4#########################;NLD=Project     #1############\Kostensoort #2############\Activiteit  #3############\Verwerken   #4#########################;NOR=Prosjekt #1############\Kostnadstype #2############\Aktivitet #3############\Prosesser #4#########################;SVE=Projekt   #1############\Kostnadstyp #2############\Aktivitet  #3############\Process   #4#########################';
      Text001@1100528400 : TextConst 'DEU=%1 unbekannt.;ENU=%1 unknown.;NLD=%1 onbekend.;NOR=%1 ukjent;SVE=%1 Ñr okÑnd.';
      AddNew@1210190000 : Boolean;

    PROCEDURE SetSelection@1100525001(ProjNo@1100525000 : Code[20];PrognDate@1100525001 : Date);
    BEGIN
      ProjectNo := ProjNo;
      PrognosisDate := PrognDate;
    END;

    PROCEDURE SetAddNew@1210190000();
    BEGIN
      AddNew := TRUE;
    END;

    LOCAL PROCEDURE UpdTmpBudgTotalByCostObjectAct@1100525000(CostType@1100525004 : Option;CostObject@1100525001 : Code[20];ElemCode@1100525002 : Code[20];ActCode@1100525000 : Code[20];BudgetAmount@1100525003 : Decimal);
    BEGIN
      IF ElemCode <> '' THEN BEGIN
        IF NOT PrognLine.GET(Job."No.", Progn."Prognosis Date", CostType, ElemCode, CostObject) THEN
          ElemCode := '';
      END;

      WITH TmpBudgetTotalByCostObjectAct DO BEGIN  //* Total 1: Budget total by CostObject (/ Element) / Activity
        IF NOT GET(CostObject, ElemCode, ActCode) THEN BEGIN
          INIT;
          "Code 1" := CostObject;
          "Code 2" := ElemCode;
          "Code 3" := ActCode;
          Value := BudgetAmount;
          INSERT;
        END ELSE BEGIN
          Value := Value + BudgetAmount;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdTmpBudgetTotalByActivity@1100525002(ActCode@1100525005 : Code[20];BudgetAmount@1100525003 : Decimal);
    BEGIN
      WITH TmpBudgetTotalByActivity DO BEGIN  //* Total 2: Budget total by Activity
        IF NOT GET(ActCode, '', '') THEN BEGIN
          INIT;
          "Code 1" := ActCode;
          "Code 2" := '';
          "Code 3" := '';
          Value := BudgetAmount;
          INSERT;
        END ELSE BEGIN
          Value := Value + BudgetAmount;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdTmpHoursPrognByActivity@1100525004(ActCode@1100525005 : Code[20];HoursPrognosis@1100525003 : Decimal);
    BEGIN
      WITH TmpHoursPrognByActivity DO BEGIN  //* Total 3: Req. Act. Capacity total by Activity / Resource (discipline or plant type)
        IF NOT GET(ActCode, '', '') THEN BEGIN
          INIT;
          "Code 1" := ActCode;
          "Code 2" := '';
          "Code 3" := '';
          Value := HoursPrognosis;
          INSERT;
        END
      END;
    END;

    LOCAL PROCEDURE GetTotalHours@1100528412(CostObject@1100528401 : Code[20];ElemCode@1100528400 : Code[20]) TotalHours : Decimal;
    VAR
      PlanHours@1100528404 : Decimal;
    BEGIN
      TmpBudgetTotalByCostObjectAct.RESET;
      TmpBudgetTotalByCostObjectAct.SETRANGE("Code 1", CostObject);
      TmpBudgetTotalByCostObjectAct.SETRANGE("Code 2", ElemCode);
      IF TmpBudgetTotalByCostObjectAct.FINDSET THEN BEGIN
        TmpHoursPrognByActivity.RESET;
        REPEAT
          IF TmpBudgetTotalByActivity.GET(TmpBudgetTotalByCostObjectAct."Code 3", '', '') THEN BEGIN  //* Activity
            IF TmpBudgetTotalByActivity.Value <> 0 THEN BEGIN
              TmpHoursPrognByActivity.SETRANGE("Code 1", TmpBudgetTotalByCostObjectAct."Code 3");  //* Activity
              IF TmpHoursPrognByActivity.FINDFIRST THEN BEGIN
                  PlanHours :=
                    (TmpBudgetTotalByCostObjectAct.Value / TmpBudgetTotalByActivity.Value) * TmpHoursPrognByActivity.Value;
                  TotalHours := TotalHours + PlanHours;
              END;
            END;
          END;
        UNTIL TmpBudgetTotalByCostObjectAct.NEXT = 0;
      END;
    END;

    BEGIN
    {
      BUDGET
      CostObject  Activity  Amount
      K1          A1        60
      K1          A1        40
      K2          A1        90
      K2          A1        60
      K1          A2        100
      K1          A2        100
      K2          A2        100
      K2          A2        100
      K2          A2        100

      BUDGET TOTALS: CostObject / Activity
      CostObject  Activity  Amount
      K1          A1        100    (T1a)
      K1          A2        200    (T1b)
      K2          A1        150    (T1c)
      K2          A2        300    (T1d)

      BUDGET TOTALS: Activity
      Activity  Amount
      A1        250                (T2a)
      A2        500                (T2b)

      PROJECT PLANNING ACTIVITY HOURS PROGNOSIS: Activity
      Activity  Hours Prognosis
      A1        10
      A2        25

      Example:
      PROGNOSIS: CostObject K1 + K2
      K1
        Read budget totals by CostObject / Activity for K1
          T1a / T2a = 100/250
            Read hours prognosis for activity A1
            100/250 * 10 =  4 hours
          T1b / T2b = 200/500
            Read hours prognosis for activity A2
            200/500 * 25 = 10 hours
      K2
        Read budget totals by CostObject / Activity for K1
          T1c / T2a = 150/250
            Read hours prognosis for activity A1
            150/250 * 10 =  6 hours
          T1d / T2b = 300/500
            Read hours prognosis for activity A2
            300/500 * 25 = 15 hours
      CostObject  Quantity
      K1          14
      K2          21
      When the prognosis is calculated the quantity (=number of hours) of the prognosis line
      is filled with the new number of hours. Then the OnValidate event of the quantity field is executed to recalculate
      the amount of the prognosis line.
    }
    END.
  }
  RDLDATA
  {
  }
}

