OBJECT Table 11020272 Reference Period
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LicenceCu.CheckLicenceDeadline;
               UpdateDatetime;
               CheckRecordType;
               GetNorm(Rec);
               DetermineResult;
             END;

    OnModify=BEGIN
               LicenceCu.CheckLicenceDeadline;
               UpdateDatetime;
               UpdateDocRefFromStandard;
               GetNorm(Rec);
               DetermineResult;
             END;

    OnRename=BEGIN
               CheckRecordType;
               RenameDocRefFromStandard;
             END;

    CaptionML=[ENU=Reference Period;
               NOR=Referanseperiode;
               SVE=Referensperiod];
    LookupPageID=Page11020322;
  }
  FIELDS
  {
    { 10  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Common,,Service Call,Service Order,Work Order;
                                                                    NOR=Vanlig,,Servicesamtale,Serviceordre,Innkj›pstilbud,Innkj›psordre;
                                                                    SVE=Vanlig,,Servicesamtal,Serviceorder,Arbetsorder];
                                                   OptionString=Common,,ServCall,ServOrder,WorkOrder }
    { 20  ;   ;Code                ;Code10        ;OnValidate=VAR
                                                                RefPeriodRec@1100485000 : Record 11020272;
                                                              BEGIN
                                                                IF Type <> Type::Common THEN BEGIN
                                                                  RefPeriodRec.GET(Type::Common, '', Code);
                                                                  Description := RefPeriodRec.Description;
                                                                  Apply := RefPeriodRec.Apply;
                                                                  VALIDATE("Reference Point Start", RefPeriodRec."Reference Point Start");
                                                                  VALIDATE("Reference Point End", RefPeriodRec."Reference Point End");
                                                                  VALIDATE("Second Reference Point End", RefPeriodRec."Second Reference Point End");
                                                                  GetServContractTimeTable;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 40  ;   ;Reference Point Start;Integer      ;TableRelation=IF (Apply=CONST(WorkOrder)) "Reference Point".No. WHERE (Apply=CONST(ServOrder))
                                                                 ELSE "Reference Point".No. WHERE (Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Ref. Point Start");
                                                              END;

                                                   CaptionML=[ENU=Reference Point Start;
                                                              NOR=Referansepunkt Start;
                                                              SVE=Referenspunkt start] }
    { 45  ;   ;Reference Point End ;Integer       ;TableRelation=IF (Apply=CONST(WorkOrder)) "Reference Point".No. WHERE (Apply=CONST(ServOrder))
                                                                 ELSE "Reference Point".No. WHERE (Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Ref. Point End");
                                                              END;

                                                   CaptionML=[ENU=Reference Point End;
                                                              NOR=Referansepunkt Slutt;
                                                              SVE=Referenspunkt slut] }
    { 50  ;   ;Description Ref. Point Start;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point Start)));
                                                   CaptionML=[ENU=Description Reference Point Start;
                                                              NOR=Referansepunkt Start, Beskrivelse;
                                                              SVE=Referenspunkt start, beskrivning];
                                                   Editable=No }
    { 55  ;   ;Description Ref. Point End;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point End)));
                                                   CaptionML=[ENU=Description Reference Point End;
                                                              NOR=Referansepunkt Slutt, Beskrivelse;
                                                              SVE=Referenspunkt slut, beskrivning];
                                                   Editable=No }
    { 60  ;   ;Apply               ;Option        ;CaptionML=[ENU=Apply;
                                                              NOR=Koble;
                                                              SVE=Verkst„ll];
                                                   OptionCaptionML=[ENU=" ,,Service Call,Service Order,Work Order";
                                                                    NOR=" ,,Servicesamtale,Serviceordre,Innkj›pstilbud,Innkj›psordre";
                                                                    SVE=Allm„n,,Servicesamtal,Serviceorder,Arbetsorder];
                                                   OptionString=Common,,ServCall,ServOrder,WorkOrder }
    { 70  ;   ;Second Reference Point End;Integer ;TableRelation=IF (Apply=CONST(WorkOrder)) "Reference Point".No. WHERE (Apply=CONST(ServOrder))
                                                                 ELSE "Reference Point".No. WHERE (Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Sec.Ref. Point End");
                                                              END;

                                                   CaptionML=ENU=Second Reference Point End;
                                                   BlankZero=Yes }
    { 80  ;   ;Description Sec.Ref. Point End;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Second Reference Point End)));
                                                   CaptionML=ENU=Description Second Reference Point End;
                                                   Editable=No }
    { 100 ;   ;Document No.        ;Code20        ;TableRelation=IF (Type=CONST(ServCall)) "Service Call".No.
                                                                 ELSE IF (Type=CONST(ServOrder)) "Service Order".No.
                                                                 ELSE IF (Type=CONST(WorkOrder)) "Work Order".No.;
                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
    { 110 ;   ;Norm                ;Decimal       ;CaptionML=[ENU=Norm (Hours);
                                                              NOR=Norm (Timer);
                                                              SVE=Norm (timmar)];
                                                   DecimalPlaces=0:5 }
    { 115 ;   ;Type Hours          ;Option        ;CaptionML=[ENU=Type Hours;
                                                              NOR=Typetimer;
                                                              SVE=Typtimmar];
                                                   OptionCaptionML=[ENU=Clock Time,Office Time;
                                                                    NOR=Klokketid,Kontortid;
                                                                    SVE=Klocktid,Kontorstid];
                                                   OptionString=ClockTime,OfficeTime }
    { 120 ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 130 ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 140 ;   ;Starting Time       ;Time          ;CaptionML=[ENU=Starting Time;
                                                              NOR=Starttidspunkt;
                                                              SVE=Starttid] }
    { 150 ;   ;Ending Time         ;Time          ;CaptionML=[ENU=Ending Time;
                                                              NOR=Sluttidspunkt;
                                                              SVE=Sluttid] }
    { 160 ;   ;Result              ;Decimal       ;CaptionML=[ENU=Result;
                                                              NOR=Resultat;
                                                              SVE=Resultat];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 175 ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date-Time;
                                                              NOR=Startdato-tidsp.;
                                                              SVE=Startdatum tid];
                                                   Description=W014185 }
    { 185 ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date-Time;
                                                              NOR=Sluttdato-tidsp.;
                                                              SVE=Slutdatum tid];
                                                   Description=W014185 }
    { 190 ;   ;Source              ;Option        ;CaptionML=[ENU=Source;
                                                              NOR=Kilde;
                                                              SVE=K„lla];
                                                   OptionCaptionML=[ENU=Standard,Service Contract,Customer;
                                                                    NOR=Standard,Servicekontrakt,Kunde];
                                                   OptionString=Standard,Service Contract,Customer;
                                                   Editable=No }
    { 200 ;   ;Service Time Table Code;Code20     ;TableRelation="Service Time Table";
                                                   OnValidate=BEGIN
                                                                DetermineResult;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Service Time Table Code;
                                                   Editable=Yes }
    { 300 ;   ;Publish on Service Portal;Boolean  ;CaptionML=[ENU=Publish on Service Portal;
                                                              NOR=Publiser p† Serviceportal;
                                                              SVE=Publicera p† serviceportalen] }
    { 301 ;   ;Pause               ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Pause }
  }
  KEYS
  {
    {    ;Type,Document No.,Code                  ;Clustered=Yes }
    {    ;Type,Code,Document No.                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClockTime@1100485000 : Boolean;
      TmpRefPeriodRec@1100485001 : TEMPORARY Record 11020272;
      DocNo@1100485002 : Code[20];
      DatetimeMgt@1100485003 : Codeunit 11020218;
      LicenceCu@1100485004 : Codeunit 11012137;
      DeadlineDatetimeDec@1100485005 : Decimal;
      DeadlineDatetime@1100527900 : DateTime;
      gCompany@1100529000 : Text[30];

    PROCEDURE CheckRecordType@1100485000();
    BEGIN
      IF Type = Type::Common THEN
        TESTFIELD("Document No.", '')
      ELSE
        TESTFIELD("Document No.");
    END;

    PROCEDURE DetermineResult@11();
    VAR
      lvResult@1100525000 : Decimal;
    BEGIN
      //db, 21-10-08: M13046
      IF "Service Time Table Code" = '' THEN BEGIN
        IF ("Starting Date" = 0D) OR ("Ending Date" = 0D) OR
           ("Starting Time" = 0T) OR ("Ending Time" = 0T) THEN BEGIN
          Result := 0;
          EXIT;
        END
      END ELSE
        IF "Starting Date" = 0D THEN BEGIN
          Result := 0;
          Norm := 0;
          EXIT;
        END;

      TmpRefPeriodRec.DELETEALL;
      TmpRefPeriodRec := Rec;
      IF ClockTime THEN BEGIN
        DocNo:= PADSTR('', MAXSTRLEN("Document No."), '0');
        TmpRefPeriodRec."Document No." := DocNo;
        TmpRefPeriodRec.INSERT;
      END ELSE
        IF "Service Time Table Code" <> '' THEN
          CheckServiceContractTimeTable(TmpRefPeriodRec,
            TmpRefPeriodRec."Starting Date",TmpRefPeriodRec."Starting Time",TmpRefPeriodRec.Norm,FALSE)
        ELSE
          CheckContractTimeTable(TRUE,TmpRefPeriodRec,
            TmpRefPeriodRec."Starting Date",TmpRefPeriodRec."Starting Time",TmpRefPeriodRec.Norm);


      IF TmpRefPeriodRec.FIND('-') THEN BEGIN
        REPEAT
          WITH TmpRefPeriodRec DO BEGIN
            IF "Ending Date-Time" > "Starting Date-Time" THEN
              lvResult := lvResult + ("Ending Date-Time" - "Starting Date-Time")/(3.6 *1000000) - Pause;
          END;
        UNTIL TmpRefPeriodRec.NEXT = 0;
      END;

      Result := ROUND(lvResult);
    END;

    PROCEDURE SetOtherCompanyForCheckRefPeriod@1100529000(Company@1100529000 : Text[30]);
    BEGIN
      IF Company <> COMPANYNAME THEN
        gCompany := Company
      ELSE
        gCompany := '';
    END;

    PROCEDURE CheckRefPeriod@1100485003(lvAction@1100485007 : Integer;lvType@1100485009 : Integer;lvDocument@1100485008 : Code[20];lvRefPeriod@1100485000 : Code[20];lvRefMargin@1100485004 : Decimal) : Text[250];
    VAR
      RefPeriodRec@1100485001 : Record 11020272;
      lvNorm@1100485003 : Decimal;
      lvStartDate@1100485005 : Date;
      lvStartTime@1100485006 : Time;
      HelpDec@1210190000 : Decimal;
      StartDateTime@1210190004 : Decimal;
    BEGIN
      IF lvAction = 0 THEN BEGIN
        lvStartDate := TODAY;
        lvStartTime := TIME;
        lvNorm := lvRefMargin;
        IF lvNorm = 0 THEN EXIT('');
      END ELSE BEGIN
        IF gCompany <> '' THEN
          RefPeriodRec.CHANGECOMPANY(gCompany);
        RefPeriodRec.RESET;
        RefPeriodRec.SETRANGE(Type, lvType);
        RefPeriodRec.SETRANGE(Code, lvRefPeriod);
        RefPeriodRec.SETRANGE("Document No.", lvDocument);
        IF NOT RefPeriodRec.FINDFIRST THEN
          EXIT('');

        lvStartDate := RefPeriodRec."Starting Date";
        lvStartTime := RefPeriodRec."Starting Time";

        IF lvAction = 1 THEN BEGIN
          GetNorm(RefPeriodRec);
          lvNorm := RefPeriodRec.Norm;
          IF lvNorm = 0 THEN
            EXIT('');
          IF NOT ClockTime THEN
            CheckContractTimeTable(FALSE,RefPeriodRec,lvStartDate,lvStartTime,lvNorm)
        END;

        IF lvAction = 3 THEN BEGIN
          lvStartDate := RefPeriodRec."Ending Date";
          lvStartTime := RefPeriodRec."Ending Time";
        END;
      END;

      IF (lvStartDate = 0D) OR (lvStartTime = 0T) THEN
        EXIT('');
      StartDateTime := DatetimeMgt.Datetime(lvStartDate, lvStartTime);
      HelpDec := StartDateTime + (lvNorm * 3.6);
      IF RefPeriodRec."Service Time Table Code" <> '' THEN BEGIN
        DeadlineDatetime := CheckServiceContractTimeTable(RefPeriodRec,lvStartDate,lvStartTime,lvNorm,TRUE);
        HelpDec := DatetimeMgt.Datetime(DT2DATE(DeadlineDatetime),DT2TIME(DeadlineDatetime));
      END;
      DeadlineDatetimeDec := HelpDec;  //* Fill for function 'GetDeadlineDateAndTime'

      EXIT(DatetimeMgt.OLDDatetime2Text(HelpDec));
    END;

    PROCEDURE GetDeadlineDateAndTime@1100485006(IAction@1100485009 : Integer;IType@1100485008 : Integer;IDocument@1100485007 : Code[20];IRefPeriod@1100485006 : Code[20];IRefMargin@1100485005 : Decimal;VAR ODeadLineDate@1100485001 : Date;VAR ODeadLineTime@1100485000 : Time);
    BEGIN
      ODeadLineDate := 0D;
      ODeadLineTime := 0T;
      IF CheckRefPeriod(IAction, IType, IDocument, IRefPeriod, IRefMargin) <> '' THEN BEGIN
        ODeadLineDate := DatetimeMgt.Datetime2Date(DeadlineDatetimeDec);
        ODeadLineTime := DatetimeMgt.Datetime2Time(DeadlineDatetimeDec);
      END;
    END;

    PROCEDURE UpdateDocRefFromStandard@1100485008();
    VAR
      RefPeriodRec@1100485001 : Record 11020272;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      RefPeriodRec.RESET;
      RefPeriodRec.SETFILTER(Type, '<>%1', Type);
      RefPeriodRec.SETRANGE(Code, Code);
      RefPeriodRec.SETFILTER("Document No.", '<>%1', '');
      IF NOT RefPeriodRec.ISEMPTY THEN BEGIN
        IF RefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            RefPeriodRec.Description := Description;
            RefPeriodRec.Apply := Apply;
            RefPeriodRec."Reference Point Start" := "Reference Point Start";
            RefPeriodRec."Reference Point End" := "Reference Point End";
            RefPeriodRec."Second Reference Point End" := "Second Reference Point End";
            RefPeriodRec.MODIFY;
          UNTIL RefPeriodRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE RenameDocRefFromStandard@1100485010();
    VAR
      RefPeriodRec@1100485002 : Record 11020272;
      RefPeriodRec2@1100485003 : Record 11020272;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      RefPeriodRec.RESET;
      RefPeriodRec.SETFILTER(Type, '<>%1', Type);
      RefPeriodRec.SETRANGE(Code, xRec.Code);
      RefPeriodRec.SETFILTER("Document No.", '<>%1', '');
      IF NOT RefPeriodRec.ISEMPTY THEN BEGIN
        IF RefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            RefPeriodRec2.COPY(RefPeriodRec);
            RefPeriodRec2.DELETE;
            RefPeriodRec2.Code := Code;
            RefPeriodRec2.INSERT;
          UNTIL RefPeriodRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateNorm@1100485001(lvType@1100485002 : Integer;lvDocument@1100485000 : Code[20]);
    VAR
      RefPeriodRec@1100485001 : Record 11020272;
      ServOrderRec@1100485003 : Record 11012823;
      ServCallRec@1100485004 : Record 11012822;
    BEGIN
      RefPeriodRec.RESET;
      RefPeriodRec.SETCURRENTKEY(Type, "Document No.");
      RefPeriodRec.SETRANGE(Type, lvType);
      RefPeriodRec.SETRANGE("Document No.", lvDocument);
      IF RefPeriodRec.FIND('-') THEN BEGIN
        REPEAT
          GetNorm(RefPeriodRec);
          RefPeriodRec.MODIFY;
        UNTIL RefPeriodRec.NEXT = 0;
        CASE RefPeriodRec.Type OF
          RefPeriodRec.Type::ServCall:
            BEGIN
              ServCallRec.GET(lvDocument);
              ServCallRec.MODIFY(TRUE);  //UpdateNextDeadline
            END;
          RefPeriodRec.Type::ServOrder:
            BEGIN
              ServOrderRec.GET(lvDocument);
              ServOrderRec.MODIFY(TRUE);  //UpdateNextDeadline
            END;
          RefPeriodRec.Type::WorkOrder:;
            //No DeadLines for WorkOrders
        END;
      END;
    END;

    PROCEDURE GetNorm@1100485002(VAR RefPeriodRec@1100485007 : Record 11020272);
    VAR
      RefNormRec@1100485004 : Record 11012856;
      RefNormRec2@1100485009 : Record 11012856;
      ServOrderRec@1100485002 : Record 11012823;
      ServCallRec@1100485001 : Record 11012822;
      ServObjectRec@1100525003 : Record 11071724;
      WorkOrder@1100528500 : Record 11229279;
      lvServContract@1100485000 : Code[20];
      lvServLoc@1100485008 : Code[20];
      lvObjectNo@1100525002 : Code[20];
      lvCustomerNo@1100409000 : Code[20];
      lvDiscipline@1100485005 : Code[20];
      lvTradeSpec@1210190000 : Code[20];
      lvPriority@1100485006 : Code[20];
      MissNorm@1100485003 : Boolean;
    BEGIN
      IF gCompany <> '' THEN BEGIN
        ServOrderRec.CHANGECOMPANY(gCompany);
        ServObjectRec.CHANGECOMPANY(gCompany);
        ServCallRec.CHANGECOMPANY(gCompany);
        RefNormRec.CHANGECOMPANY(gCompany);
        RefNormRec2.CHANGECOMPANY(gCompany);
      END;

      WITH RefPeriodRec DO BEGIN
        IF "Service Time Table Code" <> '' THEN BEGIN
          InitNormFromTimeTable;
          EXIT;
        END;

        CASE Type OF
          Type::ServOrder:
            BEGIN
              IF ServOrderRec.GET("Document No.") THEN BEGIN
                lvServContract := ServOrderRec."Service Contract No.";
                lvServLoc := ServOrderRec."Service Location No.";
                //db.sn, 30-05-13: C001442
                ServObjectRec.SETRANGE("Service Order No.", ServOrderRec."No.");
                IF ServObjectRec.FINDFIRST THEN
                  lvObjectNo := ServObjectRec."Object No.";
                //db.en, 30-05-13: C001442
                lvCustomerNo := ServOrderRec."Customer No.";
                lvDiscipline := ServOrderRec.Discipline;
                lvTradeSpec := ServOrderRec."Trade Speciality";
                lvPriority := ServOrderRec.Priority;
              END;
            END;
          Type::ServCall:
            BEGIN
              IF ServCallRec.GET("Document No.") THEN BEGIN
                lvServContract := ServCallRec."Service Contract No.";
                lvServLoc := ServCallRec."Service Location No.";
                //db.sn, 30-05-13: C001442
                lvObjectNo := ServCallRec."Object No.";
                //db.en, 30-05-13: C001442
                lvCustomerNo := ServCallRec."Customer No.";
                lvDiscipline := ServCallRec.Discipline;
                lvTradeSpec := ServCallRec."Trade Speciality";
                lvPriority := ServCallRec.Priority;
              END;
            END;
          Type::WorkOrder:
            BEGIN
              IF WorkOrder.GET("Document No.") THEN BEGIN
                lvServContract := WorkOrder."Service Contract No.";
                lvCustomerNo := WorkOrder."Customer No.";
                IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
                   ServOrderRec.CHANGECOMPANY(WorkOrder."Source Company");
                   IF ServOrderRec.GET(WorkOrder."Source No.") THEN BEGIN
                     lvServLoc := ServOrderRec."Service Location No.";
                     ServObjectRec.CHANGECOMPANY(WorkOrder."Source Company");
                     ServObjectRec.SETRANGE("Service Order No.", ServOrderRec."No.");
                     IF ServObjectRec.FINDFIRST THEN
                       lvObjectNo := ServObjectRec."Object No.";
                     lvDiscipline := ServOrderRec.Discipline;
                     lvTradeSpec := ServOrderRec."Trade Speciality";
                     lvPriority := ServOrderRec.Priority;
                  END;
                END;
              END;
            END;
        END;

        IF lvServContract <> '' THEN
          RefNormRec.SETRANGE("Service Contract No.", lvServContract)
        ELSE BEGIN
          RefNormRec.SETFILTER("Service Contract No.", '%1', '');
          IF lvCustomerNo <> '' THEN
            RefNormRec.SETRANGE("Customer No.", lvCustomerNo)
          ELSE
            RefNormRec.SETFILTER("Customer No.", '%1', '');
        END;
        IF lvServLoc <> '' THEN
          RefNormRec.SETRANGE("Service Location No.", lvServLoc)
        ELSE
          RefNormRec.SETFILTER("Service Location No.", '%1', '');
        //db.sn, 30-05-13: C001442
        IF lvObjectNo <> '' THEN
          RefNormRec.SETRANGE("Object No.", lvObjectNo)
        ELSE
          RefNormRec.SETFILTER("Object No.", '%1', '');
        //db.en, 30-05-13: C001442
        IF lvDiscipline <> '' THEN
          RefNormRec.SETRANGE(Discipline, lvDiscipline)
        ELSE
          RefNormRec.SETFILTER(Discipline, '%1', '');
        IF lvTradeSpec <> '' THEN  //db, 04-07-11
          RefNormRec.SETRANGE("Trade Speciality", lvTradeSpec)
        ELSE
          RefNormRec.SETFILTER("Trade Speciality", '%1', '');
        IF lvPriority <> '' THEN
          RefNormRec.SETRANGE(Priority, lvPriority)
        ELSE
          RefNormRec.SETFILTER(Priority, '%1', '');
        RefNormRec.SETRANGE("Reference Period", Code);
        IF NOT RefNormRec.FIND('-') THEN BEGIN
          MissNorm := TRUE;
          //C026191.sn
          IF (lvObjectNo <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETRANGE(Discipline);
            RefNormRec2.SETRANGE("Trade Speciality");
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          //C026191.en
          IF (lvServLoc <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER("Service Location No.", '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
            //db.sn, 30-05-13: C001442
            IF (lvObjectNo <> '') AND (MissNorm = TRUE) THEN BEGIN
              RefNormRec2.COPY(RefNormRec);
              RefNormRec2.SETFILTER("Object No.", '%1', '');
              RefNormRec2.SETRANGE("Service Location No.", lvServLoc);
              IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
              RefNormRec.COPY(RefNormRec2);
            END;
            //db.en, 30-05-13: C001442
            IF (MissNorm = TRUE) THEN BEGIN
              RefNormRec2.COPY(RefNormRec);
              RefNormRec2.SETFILTER("Service Location No.", '%1', '');
              IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
              RefNormRec.COPY(RefNormRec2);
            END;
          END;
          IF (lvTradeSpec <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER("Trade Speciality", '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          IF (lvDiscipline <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER(Discipline, '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          IF (lvPriority <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER(Priority, '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          //db.sn, 22-12-10: M24525
          IF (RefNormRec2."Service Location No." = '') AND
             (RefNormRec2.Discipline = '') AND
             (RefNormRec2."Trade Speciality" = '') AND
             (RefNormRec2.Priority = '') THEN
          BEGIN
            //if norm found on level contract, search on more detailed level without check on priority
            IF (lvServLoc <> '') THEN BEGIN
              RefNormRec2.SETRANGE("Service Location No.", lvServLoc);
              IF RefNormRec2.FIND('-') THEN BEGIN
                MissNorm := FALSE;
                RefNormRec.COPY(RefNormRec2);
              END ELSE BEGIN
                RefNormRec2.SETRANGE("Service Location No.");
              END;
            END;
            IF (lvDiscipline+lvTradeSpec <> '') THEN BEGIN
              IF lvDiscipline <> '' THEN
                RefNormRec2.SETRANGE(Discipline, lvDiscipline);
              IF lvTradeSpec <> '' THEN
                RefNormRec2.SETFILTER("Trade Speciality", lvTradeSpec);
              IF RefNormRec2.FIND('-') THEN BEGIN
                MissNorm := FALSE;
                RefNormRec.COPY(RefNormRec2);
              END ELSE BEGIN
                RefNormRec2.SETRANGE(Discipline);
              END;
            END;
          END;
          //db.en, 22-12-10: M24525
          IF (lvPriority <> '') AND MissNorm THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETRANGE(Priority, lvPriority);
            IF RefNormRec2.ISEMPTY AND (lvTradeSpec <> '') THEN
              RefNormRec2.SETFILTER("Trade Speciality", '%1|%2', '', lvTradeSpec);
            IF RefNormRec2.ISEMPTY AND (lvDiscipline <> '') THEN
              RefNormRec2.SETFILTER(Discipline, '%1|%2', '', lvDiscipline);
            IF RefNormRec2.ISEMPTY AND (lvObjectNo <> '') THEN
              RefNormRec2.SETFILTER("Object No.", '%1|%2', '', lvObjectNo);
            IF RefNormRec2.ISEMPTY AND (lvServLoc <> '') THEN
              RefNormRec2.SETFILTER("Service Location No.", '%1|%2', '', lvServLoc);
            IF RefNormRec2.ISEMPTY AND (lvServContract <> '') THEN
              RefNormRec2.SETFILTER("Service Contract No.", '%1|%2', '', lvServContract);
            IF RefNormRec2.ISEMPTY AND (lvCustomerNo <> '') THEN
              RefNormRec2.SETFILTER("Customer No.", '%1|%2', '', lvCustomerNo);
            IF RefNormRec2.FIND('-') THEN
              MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          IF MissNorm = TRUE THEN
            RefNormRec.INIT;
        END;

        IF Type <> Type::Common THEN BEGIN  //db, 05-05-08: M11844
          Norm := RefNormRec.Norm;
          "Type Hours" := RefNormRec."Type Hours";  //db, 25-02-11: M17637
          ClockTime := (RefNormRec."Type Hours" = RefNormRec."Type Hours"::ClockTime);
          //mg.sn, 19-03-12: M33958
          IF NOT MissNorm THEN BEGIN
            IF RefNormRec."Service Contract No." <> '' THEN
              Source := Source::"Service Contract";
            IF RefNormRec."Customer No." <> '' THEN
              Source := Source::Customer;
          END;
          //mg.en, 19-03-12: M33958
        END;
      END;
    END;

    PROCEDURE CheckContractTimeTable@1100485004(TmpBln@1100485016 : Boolean;VAR RefPeriodRec@1100485007 : Record 11020272;VAR gvStartDate@1100485005 : Date;VAR gvStartTime@1100485006 : Time;VAR gvNorm@1100485010 : Decimal);
    VAR
      CompanyInformation@1100528600 : Record 79;
      ServOrderRec@1100485002 : Record 11012823;
      ServCallRec@1100485001 : Record 11012822;
      TerritoryRec@1100485022 : Record 286;
      DimValRec@1100485023 : Record 349;
      BaseCalendar@1100528601 : Record 11072014;
      WorkOrder@1100528500 : Record 11229279;
      DimMgt@1100485024 : Codeunit 408;
      lvServContract@1100485000 : Code[20];
      lvStartDate@1100485013 : Date;
      lvStartTime@1100485012 : Time;
      lvTimeFrom@1100485014 : Time;
      lvTimeUntil@1100485015 : Time;
      lvNorm@1100485009 : Decimal;
      lvGap@1100485011 : Decimal;
      lvDay@1100485008 : Integer;
      BaseCalendarCode@1100485018 : Code[20];
      lvTerritory@1100485020 : Code[20];
      lvDepartment@1100485021 : Code[20];
    BEGIN
      lvStartDate := gvStartDate;
      lvStartTime := gvStartTime;
      lvNorm := gvNorm;

      IF lvStartDate = 0D THEN EXIT;
      IF lvStartTime = 0T THEN EXIT;

      WITH RefPeriodRec DO BEGIN
        CASE Type OF
          Type::ServOrder:
            BEGIN
              IF ServOrderRec.GET("Document No.") THEN BEGIN
                lvServContract := ServOrderRec."Service Contract No.";
                lvTerritory := ServOrderRec."Territory Code";
                lvDepartment := ServOrderRec."Global Dimension 1 Code";
              END;
            END;
          Type::ServCall:
            BEGIN
              IF ServCallRec.GET("Document No.") THEN BEGIN
                lvServContract := ServCallRec."Service Contract No.";
                lvTerritory := ServCallRec."Territory Code";
                lvDepartment := ServCallRec."Global Dimension 1 Code";
              END;
            END;
          Type::WorkOrder:
            BEGIN
              IF WorkOrder.GET("Document No.") THEN BEGIN
                lvServContract := WorkOrder."Service Contract No.";
                IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
                   ServOrderRec.CHANGECOMPANY(WorkOrder."Source Company");
                   IF ServOrderRec.GET(WorkOrder."Source No.") THEN
                     lvTerritory := ServOrderRec."Territory Code";
                END;
                lvDepartment := WorkOrder."Global Dimension 1 Code";
              END;
            END;
        END;

        CompanyInformation.GET;
        BaseCalendarCode := CompanyInformation."Base Calendar Code";
        DimMgt.GetDimValueRec(1, lvDepartment, DimValRec, FALSE,'');
        IF DimValRec."Base Calendar Code" <> '' THEN
          BaseCalendarCode := DimValRec."Base Calendar Code";
        IF TerritoryRec.GET(lvTerritory) THEN
          IF TerritoryRec."Base Calendar Code" <> '' THEN
            BaseCalendarCode := TerritoryRec."Base Calendar Code";

        IF NOT BaseCalendar.GET(BaseCalendarCode) THEN EXIT;

        REPEAT
          lvDay := DATE2DWY(lvStartDate,1);
          lvGap := 0;
          CASE lvDay OF
            1:
              BEGIN
                lvTimeFrom := BaseCalendar."Monday Work From";
                lvTimeUntil := BaseCalendar."Monday Work Until";
              END;
            2:
              BEGIN
                lvTimeFrom := BaseCalendar."Tuesday Work From";
                lvTimeUntil := BaseCalendar."Tuesday Work Until";
              END;
            3:
              BEGIN
                lvTimeFrom := BaseCalendar."Wednesday Work From";
                lvTimeUntil := BaseCalendar."Wednesday Work Until";
              END;
            4:
              BEGIN
                lvTimeFrom := BaseCalendar."Thursday Work From";
                lvTimeUntil := BaseCalendar."Thursday Work Until";
              END;
            5:
              BEGIN
                lvTimeFrom := BaseCalendar."Friday Work From";
                lvTimeUntil := BaseCalendar."Friday Work Until";
              END;
            6:
              BEGIN
                lvTimeFrom := BaseCalendar."Saturday Work From";
                lvTimeUntil := BaseCalendar."Saturday Work Until";
              END;
            7:
              BEGIN
                lvTimeFrom := BaseCalendar."Sunday Work From";
                lvTimeUntil := BaseCalendar."Sunday Work Until";
              END;
          END;

          IF lvStartTime < lvTimeFrom THEN
            lvStartTime := lvTimeFrom;
          IF lvStartTime > lvTimeUntil THEN
            lvStartTime := lvTimeUntil;
          IF lvTimeUntil <> 0T THEN
            lvGap := (lvTimeUntil - lvStartTime) / (3600*1000);

          IF TmpBln THEN BEGIN
            IF DocNo <> '' THEN
              DocNo := INCSTR(DocNo)
            ELSE
              DocNo:= PADSTR('', MAXSTRLEN("Document No."), '0');

            TmpRefPeriodRec.Type := Type;
            TmpRefPeriodRec.Code := Code;
            TmpRefPeriodRec."Document No." := DocNo;
            TmpRefPeriodRec."Starting Date" := lvStartDate;
            IF lvStartTime = 0T THEN
              TmpRefPeriodRec."Starting Time" := lvTimeFrom
            ELSE
              TmpRefPeriodRec."Starting Time" := lvStartTime;
            TmpRefPeriodRec."Ending Date" := lvStartDate;
            TmpRefPeriodRec."Ending Time" := lvTimeUntil;
            TmpRefPeriodRec.UpdateDatetime; //mg, 20-03-2015: C020322
            IF (TmpRefPeriodRec."Ending Date" > Rec."Ending Date") THEN
              EXIT;
            IF TmpRefPeriodRec.INSERT THEN;
            IF (TmpRefPeriodRec."Ending Date" = Rec."Ending Date") AND
               (TmpRefPeriodRec."Ending Time" > Rec."Ending Time") THEN BEGIN
              TmpRefPeriodRec."Ending Time" := Rec."Ending Time";
              TmpRefPeriodRec.UpdateDatetime; //mg, 20-03-2015: C020322
              TmpRefPeriodRec.MODIFY;
              EXIT;
            END;
          END;

          IF NOT TmpBln AND (lvGap >= lvNorm) THEN BEGIN //mg.c, 20-03-2015: C020322
            gvNorm := lvNorm;
            gvStartDate := lvStartDate;
            gvStartTime := lvStartTime;
            lvNorm := 0;
          END ELSE BEGIN
            lvNorm := lvNorm - lvGap;
            lvStartDate := lvStartDate + 1;
            lvStartTime := 0T;
          END;

          IF (lvStartDate > gvStartDate + 7) AND (gvNorm = lvNorm) THEN EXIT;
        UNTIL (NOT TmpBln AND (lvNorm = 0)) OR
              (TmpBln AND (TmpRefPeriodRec."Ending Date" >= Rec."Ending Date")); //mg.c, 20-03-2015: C020322
      END;
    END;

    PROCEDURE UpdateDatetime@1100485005();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    LOCAL PROCEDURE GetServContractTimeTable@1100527900();
    VAR
      ServiceOrder@1100527900 : Record 11012823;
      ServiceContract@1100527901 : Record 11012812;
    BEGIN
      IF Type <> Type::ServOrder THEN
        EXIT;

      ServiceOrder.GET("Document No.");
      IF ServiceOrder."Service Contract No." <> '' THEN
        IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN
          IF ServiceContract."Service Time Table Code" <> '' THEN
           "Service Time Table Code" := ServiceContract."Service Time Table Code";
    END;

    LOCAL PROCEDURE InitNormFromTimeTable@1100527901();
    BEGIN
      IF "Service Time Table Code" = '' THEN
        EXIT;

      "Type Hours" := "Type Hours"::OfficeTime;
      ClockTime := FALSE;
      Source := Source::"Service Contract";
    END;

    PROCEDURE CheckServiceContractTimeTable@1100527902(RefPeriodRec@1100485007 : Record 11020272;StartDate@1100485005 : Date;StartTime@1100485006 : Time;lvNorm@1100485010 : Decimal;Limit@1100527904 : Boolean) : DateTime;
    VAR
      ServiceTimeTable@1100527900 : Record 11012867;
      TimeFrom@1100485014 : Time;
      TimeUntil@1100485015 : Time;
      PauseFrom@1100527902 : Time;
      PauseUntil@1100527901 : Time;
      Gap@1100485011 : Decimal;
      PauseGap@1100527903 : Decimal;
      Day@1100485008 : Integer;
      StartTimeDec@1100527905 : Decimal;
      EndTimeDec@1100527906 : Decimal;
    BEGIN
      IF StartDate = 0D THEN
        EXIT;

      IF RefPeriodRec."Service Time Table Code" = '' THEN
        EXIT;

      IF NOT Limit THEN BEGIN
        IF Type <> Type::ServOrder THEN
          EXIT;
      END ELSE
        IF RefPeriodRec.Type <> RefPeriodRec.Type::ServOrder THEN
          EXIT;

      Rec.Norm := 0;
      TmpRefPeriodRec.DELETEALL;
      WITH RefPeriodRec DO BEGIN
        ServiceTimeTable.GET("Service Time Table Code");
        REPEAT
          Day := DATE2DWY(StartDate,1);
          Gap := 0;
          PauseGap := 0;
          CASE Day OF
            1:
              BEGIN
                TimeFrom := ServiceTimeTable."Monday Work From";
                TimeUntil := ServiceTimeTable."Monday Work Until";
                PauseFrom := ServiceTimeTable."Monday Pause From";
                PauseUntil := ServiceTimeTable."Monday Pause Until";
              END;
            2:
              BEGIN
                TimeFrom := ServiceTimeTable."Tuesday Work From";
                TimeUntil := ServiceTimeTable."Tuesday Work Until";
                PauseFrom := ServiceTimeTable."Tuesday Pause From";
                PauseUntil := ServiceTimeTable."Tuesday Pause Until";
              END;
            3:
              BEGIN
                TimeFrom := ServiceTimeTable."Wednesday Work From";
                TimeUntil := ServiceTimeTable."Wednesday Work Until";
                PauseFrom := ServiceTimeTable."Wednesday Pause From";
                PauseUntil := ServiceTimeTable."Wednesday Pause Until";
              END;
            4:
              BEGIN
                TimeFrom := ServiceTimeTable."Thursday Work From";
                TimeUntil := ServiceTimeTable."Thursday Work Until";
                PauseFrom := ServiceTimeTable."Thursday Pause From";
                PauseUntil := ServiceTimeTable."Thursday Pause Until";
              END;
            5:
              BEGIN
                TimeFrom := ServiceTimeTable."Friday Work From";
                TimeUntil := ServiceTimeTable."Friday Work Until";
                PauseFrom := ServiceTimeTable."Friday Pause From";
                PauseUntil := ServiceTimeTable."Friday Pause Until";
              END;
            6:
              BEGIN
                TimeFrom := ServiceTimeTable."Saturday Work From";
                TimeUntil := ServiceTimeTable."Saturday Work Until";
                PauseFrom := ServiceTimeTable."Saturday Pause From";
                PauseUntil := ServiceTimeTable."Saturday Pause Until";
              END;
            7:
              BEGIN
                TimeFrom := ServiceTimeTable."Sunday Work From";
                TimeUntil := ServiceTimeTable."Sunday Work Until";
                PauseFrom := ServiceTimeTable."Sunday Pause From";
                PauseUntil := ServiceTimeTable."Sunday Pause Until";
              END;
          END;

          IF TimeUntil <> 0T THEN
            Gap := (TimeUntil - TimeFrom) / (3600*1000);

          IF PauseUntil <> 0T THEN
            PauseGap := (PauseUntil - PauseFrom) / (3600*1000);

          Rec.Norm := Rec.Norm + Gap - PauseGap;

          IF DocNo <> '' THEN
            DocNo := INCSTR(DocNo)
          ELSE
            DocNo:= PADSTR('', MAXSTRLEN("Document No."), '0');

          TmpRefPeriodRec.Type := Type;
          TmpRefPeriodRec.Code := Code;
          TmpRefPeriodRec."Document No." := DocNo;
          TmpRefPeriodRec."Starting Date" := StartDate;
          IF StartTime = 0T THEN
            TmpRefPeriodRec."Starting Time" := TimeFrom
          ELSE
            TmpRefPeriodRec."Starting Time" := StartTime;

          TmpRefPeriodRec."Ending Date" := StartDate;
          TmpRefPeriodRec."Ending Time" := Rec."Ending Time";
          IF (TmpRefPeriodRec."Ending Date" < Rec."Ending Date") THEN
            TmpRefPeriodRec."Ending Time" := TimeUntil;

          IF Limit THEN BEGIN
            StartTimeDec := DatetimeMgt.Datetime(StartDate,StartTime);
            EndTimeDec := StartTimeDec + lvNorm*3.6;
            TmpRefPeriodRec."Ending Date" := DatetimeMgt.Datetime2Date(EndTimeDec);
            TmpRefPeriodRec."Ending Time" := DatetimeMgt.Datetime2Time(EndTimeDec);

            IF (TmpRefPeriodRec."Starting Time" < PauseFrom) AND (TmpRefPeriodRec."Ending Time" > PauseUntil) THEN BEGIN
              EndTimeDec := EndTimeDec + PauseGap*3.6 ;
              TmpRefPeriodRec."Ending Date" := DatetimeMgt.Datetime2Date(EndTimeDec);
              TmpRefPeriodRec."Ending Time" := DatetimeMgt.Datetime2Time(EndTimeDec);
            END;
          END;

          TmpRefPeriodRec.UpdateDatetime;
          TmpRefPeriodRec.Pause := PauseGap;
          TmpRefPeriodRec.INSERT;

          StartTime := 0T;
          StartDate := StartDate + 1;

          IF (StartDate > StartDate + 7) AND (Norm = lvNorm) THEN
            EXIT;

        UNTIL (TmpRefPeriodRec."Ending Date" >= Rec."Ending Date");
      END;

      IF Limit THEN
        EXIT(TmpRefPeriodRec."Ending Date-Time");
    END;

    PROCEDURE MarkLines@1100528500(DocumentType@1100528500 : Integer;DocumentNo@1100528501 : Code[20]);
    BEGIN
      CASE DocumentType OF
        Type::ServCall:
          MarkLinesForServiceCall(DocumentNo);
        Type::ServOrder:
          MarkLinesForServiceOrder(DocumentNo);
        Type::WorkOrder:
          MarkLinesForWorkOrder(DocumentNo);
      END
    END;

    LOCAL PROCEDURE MarkLinesForServiceCall@1100528604(ServiceCallNo@1100528501 : Code[20]);
    VAR
      ReferencePeriod@1100528601 : Record 11020272;
      ServiceCall@1100528602 : Record 11012822;
    BEGIN
      IF ServiceCall.GET(ServiceCallNo) THEN BEGIN
        MarkReferencePeriod(ReferencePeriod.Type::ServCall,ServiceCallNo);
        ReadServiceOrdersForCall(ServiceCallNo,0);
      END;
    END;

    LOCAL PROCEDURE ReadServiceOrdersForCall@1100528502(ServiceCallNo@1100528500 : Code[20];Action@1100528502 : 'MarkLines,DeleteUnnecessary');
    VAR
      ServiceOrder@1100528501 : Record 11012823;
    BEGIN
      ServiceOrder.SETRANGE("Call No.",ServiceCallNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          CASE Action OF
            Action::MarkLines:
              MarkLinesForServiceOrder(ServiceOrder."No.");
            Action::DeleteUnnecessary:
              DeleteUnnecessaryReferencePeriods(Type::ServOrder,ServiceOrder."No.",0);
          END;
        UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE MarkLinesForServiceOrder@1100528601(ServiceOrderNo@1100528500 : Code[20]);
    VAR
      ReferencePeriod@1100528601 : Record 11020272;
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(ServiceOrderNo) THEN BEGIN
        IF ServiceOrder."Call No." <> '' THEN BEGIN
          MarkReferencePeriod(ReferencePeriod.Type::ServOrder,ServiceOrder."No.");
          ReadWorkOrdersForServiceOrder(ServiceOrder."No.",0);
        END;

        IF (ServiceOrder."Base Service Order No." <> '') AND (ServiceOrder."Base Service Order No." <> ServiceOrder."No.") THEN
          ServiceOrder.SETRANGE("Base Service Order No.", ServiceOrder."Base Service Order No.")
        ELSE
          ServiceOrder.SETRANGE("Base Service Order No.", ServiceOrderNo);
        IF ServiceOrder.FINDSET THEN
          REPEAT
            MarkReferencePeriod(ReferencePeriod.Type::ServOrder,ServiceOrder."No.");
            ReadWorkOrdersForServiceOrder(ServiceOrder."No.",0);
          UNTIL ServiceOrder.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReadWorkOrdersForServiceOrder@1100528503(ServiceOrderNo@1100528500 : Code[20];Action@1100528502 : 'MarkLines,DeleteUnnecessary');
    VAR
      WorkOrder@1100528501 : Record 11229279;
    BEGIN
      WorkOrder.SETRANGE("Source Type",WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.",ServiceOrderNo);
      IF WorkOrder.FINDSET THEN
        REPEAT
          CASE Action OF
            Action::MarkLines:
              MarkLinesForWorkOrder(WorkOrder."No.");
            Action::DeleteUnnecessary:
              DeleteUnnecessaryReferencePeriods(Type::WorkOrder,WorkOrder."No.",0);
          END;
        UNTIL WorkOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE MarkLinesForWorkOrder@1100528501(WorkOrderNo@1100528500 : Code[20]);
    VAR
      ReferencePeriod@1100528601 : Record 11020272;
    BEGIN
      MarkReferencePeriod(ReferencePeriod.Type::WorkOrder,WorkOrderNo);
    END;

    LOCAL PROCEDURE MarkReferencePeriod@1100528510(DocumentType@1100528501 : Integer;DocumentNo@1100528502 : Code[20]);
    VAR
      ReferencePeriod@1100528500 : Record 11020272;
    BEGIN
      ReferencePeriod.SETRANGE(Type,DocumentType);
      ReferencePeriod.SETRANGE("Document No.",DocumentNo);
      IF ReferencePeriod.FINDSET THEN
        REPEAT
          Rec := ReferencePeriod;
          MARK(TRUE);
        UNTIL ReferencePeriod.NEXT = 0;
    END;

    PROCEDURE DeleteUnnecessaryReferencePeriods@1100528504(DocumentType@1100528501 : Integer;DocumentNo@1100528500 : Code[20];LastReferencePoint@1100528504 : Integer);
    VAR
      ReferencePeriod@1100528502 : Record 11020272;
      WorkOrder@1100528503 : Record 11229279;
      DocumentReferencePoint@1100528507 : Record 11020296;
      HighestPointEnd@1100528506 : Integer;
    BEGIN
      ReferencePeriod.SETRANGE(Type,DocumentType);
      ReferencePeriod.SETRANGE("Document No.",DocumentNo);
      IF ReferencePeriod.FINDSET THEN
        REPEAT
          IF (ReferencePeriod."Starting Date-Time" = 0DT) OR
             (ReferencePeriod."Ending Date-Time" = 0DT)
          THEN BEGIN
            IF ReferencePeriod."Reference Point End" > ReferencePeriod."Second Reference Point End" THEN
              HighestPointEnd := ReferencePeriod."Reference Point End"
            ELSE
              HighestPointEnd := ReferencePeriod."Second Reference Point End";
            CASE ReferencePeriod.Type OF
              ReferencePeriod.Type::ServCall:
                BEGIN
                  IF LastReferencePoint = 0 THEN BEGIN
                    DocumentReferencePoint.SETRANGE(Type,DocumentReferencePoint.Type::ServCall);
                    DocumentReferencePoint.SETRANGE("Document No.",DocumentNo);
                    IF DocumentReferencePoint.FINDLAST THEN
                      IF DocumentReferencePoint."Reference Point" >= HighestPointEnd THEN
                        ReferencePeriod.DELETE(TRUE);
                  END ELSE
                    IF LastReferencePoint >= HighestPointEnd THEN
                      ReferencePeriod.DELETE(TRUE);
                END;
              ReferencePeriod.Type::ServOrder:
                BEGIN
                  IF LastReferencePoint = 0 THEN BEGIN
                    DocumentReferencePoint.SETRANGE(Type,DocumentReferencePoint.Type::ServOrder);
                    DocumentReferencePoint.SETRANGE("Document No.",DocumentNo);
                    IF DocumentReferencePoint.FINDLAST THEN
                      IF DocumentReferencePoint."Reference Point" >= HighestPointEnd THEN
                        ReferencePeriod.DELETE(TRUE);
                  END ELSE
                    IF LastReferencePoint >= HighestPointEnd THEN
                      ReferencePeriod.DELETE(TRUE);
                END;
              ReferencePeriod.Type::WorkOrder:
                BEGIN
                  IF NOT WorkOrder.GET(ReferencePeriod."Document No.") OR
                    (WorkOrder."Actual Reference Point" >= HighestPointEnd)
                  THEN
                    ReferencePeriod.DELETE(TRUE);
                END;
            END;
          END;
         UNTIL ReferencePeriod.NEXT = 0;

      CASE DocumentType OF
        ReferencePeriod.Type::ServCall:
          ReadServiceOrdersForCall(DocumentNo,1);
        ReferencePeriod.Type::ServOrder:
          ReadWorkOrdersForServiceOrder(DocumentNo,1);
      END;
    END;

    BEGIN
    {
      //db, 23-08-12: W014185 (convert date-time functions; decimal -> datetime)
    }
    END.
  }
}

