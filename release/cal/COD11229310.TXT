OBJECT Codeunit 11229310 Consumed Web Service Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateNAVTestWebServices;
          END;

  }
  CODE
  {
    VAR
      LocalName@1100525000 : TextConst 'ENU=".//*[local-name()=""%1""]"';
      Text000@1100528300 : TextConst 'ENU=Show file: %1?';
      DebugTxt@1100528306 : Text;
      ConsumedWebService@1100528301 : Record 11229797;
      ConsumedWebServiceLine@1100528302 : Record 11229798;
      SOAPInfoString@1100409000 : Text;
      Text001@1100409001 : TextConst 'ENU=Up to 20 namespaces are supported.';
      Text002@1100528303 : TextConst 'ENU=Unknown Web Service Code ''''%1''''.';
      Text003@1100528304 : TextConst 'ENU=" Interface"';
      Text004@1100528305 : TextConst 'ENU=Error occurred in method: %1.\\Faultcode: %2\Details: %3';

    [External]
    PROCEDURE SetConsumedWebService@1100528304(WebServiceCode@1100528300 : Code[20];Active@1100528301 : Boolean;DemoMode@1100528600 : Boolean);
    BEGIN
      CASE WebServiceCode OF
        'FLS': CreateFLSWebServices(WebServiceCode, Active);
        'DISPATCH': CreateDispatchWebServices(WebServiceCode, Active, DemoMode);
        ELSE
          ERROR(Text002, WebServiceCode);
      END;
    END;

    [External]
    PROCEDURE SetNamespaceArrays@1100528305(WebServiceCode@1100528305 : Code[20];SeqNo@1100528304 : Integer;VAR PrefixArr@1100528300 : ARRAY [20] OF Text;VAR NamespaceArr@1100528303 : ARRAY [100] OF Text);
    VAR
      ConsumedWebServiceNamespace@1100528302 : Record 11229838;
      Counter@1100528301 : Integer;
    BEGIN
      CLEAR(PrefixArr);
      CLEAR(NamespaceArr);

      ConsumedWebServiceNamespace.SETRANGE("Web Service Code", WebServiceCode);
      ConsumedWebServiceNamespace.SETFILTER("Seq. No.", '%1|%2', 0, SeqNo);
      IF (NOT ConsumedWebServiceNamespace.FINDSET) THEN
        EXIT;

      REPEAT
        Counter += 1;
        PrefixArr[Counter] := ConsumedWebServiceNamespace.Prefix;
        NamespaceArr[Counter] := ConsumedWebServiceNamespace.Namespace;
      UNTIL (ConsumedWebServiceNamespace.NEXT = 0) OR (Counter = 100);
      IF (Counter = 100) THEN
        MESSAGE(Text001);
    END;

    [External]
    PROCEDURE GetWebServiceUrl@1100528317(URL@1100409000 : Text;CompName@1100528300 : Text) NewUrl : Text;
    VAR
      StringFunctions@1100409002 : Codeunit 11012273;
    BEGIN
      CASE TRUE OF
        (STRPOS(URL, '%1') > 0):
          NewUrl := STRSUBSTNO(URL, CompName);
        (STRPOS(URL, '$1') > 0):
          NewUrl := StringFunctions.ReplaceString(URL, '$1', CompName);
        (STRPOS(URL, '${1}') > 0):
          NewUrl := StringFunctions.ReplaceString(URL, '${1}', CompName);
        (STRPOS(LOWERCASE(URL), '${company}') > 0):
          NewUrl := StringFunctions.ReplaceString2(URL, '${company}', CompName, FALSE);
        (STRPOS(LOWERCASE(URL), '${companyname}') > 0):
          NewUrl := StringFunctions.ReplaceString2(URL, '${companyname}', CompName, FALSE);
        ELSE
          NewUrl := URL;
      END;
      NewUrl := StringFunctions.ReplaceString(NewUrl, ' ', '%20');
    END;

    [External]
    PROCEDURE ShowFile@1100528300(XMLDoc@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";FileName@1100528300 : Text[250];ConfirmShow@1100528303 : Boolean);
    VAR
      FileManagement@1100528304 : Codeunit 419;
    BEGIN
      IF (ConfirmShow) THEN
        IF (NOT CONFIRM(STRSUBSTNO(Text000, FileName))) THEN
          EXIT;

      XMLDoc.Save(STRSUBSTNO('%1%2', TEMPORARYPATH, FileName));
      HYPERLINK(FileManagement.DownloadTempFile(STRSUBSTNO('%1%2', TEMPORARYPATH, FileName)));
    END;

    [External]
    PROCEDURE EditSOAPHeader@1100528313(ConsumedWebService@1100525000 : Record 11229797);
    VAR
      TempBlob@1100528300 : TEMPORARY Record 99008535;
      TextEditor@1100528301 : Codeunit 11012001;
    BEGIN
      ConsumedWebService.CALCFIELDS("Custom SOAP Header XML");
      TempBlob.INIT;
      TempBlob.Blob := ConsumedWebService."Custom SOAP Header XML";
      TextEditor.EditBLOBFieldText(TempBlob, 'xml');
      ConsumedWebService."Custom SOAP Header XML" := TempBlob.Blob;
      ConsumedWebService.MODIFY;
    END;

    [External]
    PROCEDURE EditSOAPBody@1100528314(ConsumedWebServiceLine@1100525000 : Record 11229798);
    VAR
      TempBlob@1100528300 : TEMPORARY Record 99008535;
      TextEditor@1100528301 : Codeunit 11012001;
    BEGIN
      ConsumedWebServiceLine.CALCFIELDS("Custom SOAP Body XML");
      TempBlob.INIT;
      TempBlob.Blob := ConsumedWebServiceLine."Custom SOAP Body XML";
      TextEditor.EditBLOBFieldText(TempBlob, 'xml');
      ConsumedWebServiceLine."Custom SOAP Body XML" := TempBlob.Blob;
      ConsumedWebServiceLine.MODIFY;
    END;

    [External]
    PROCEDURE CreateRequest@1100528303(WebServiceCode@1100528303 : Code[20];SeqNo@1100528302 : Integer;VAR RequestXML@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR RequestNamespaceManager@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager");
    VAR
      TempBlob@1100528307 : TEMPORARY Record 99008535;
      TextLine@1100528304 : Text;
      TextLine1@1100528311 : Text;
      IStream@1100528310 : InStream;
    BEGIN
      ConsumedWebService.GET(WebServiceCode);
      ConsumedWebServiceLine.GET(WebServiceCode, SeqNo);
      TestWebServiceFields;

      TextLine := STRSUBSTNO('<%1:Envelope xmlns:%1="%2"', ConsumedWebService."Prefix Envelope Namespace", ConsumedWebService."Envelope Namespace");
      IF (ConsumedWebServiceLine."Prefix Method Namespace" <> '') THEN
        TextLine += STRSUBSTNO(' xmlns:%1="%2"', ConsumedWebServiceLine."Prefix Method Namespace", ConsumedWebServiceLine."Method Namespace");
      AddAllNamespaces(TextLine);
      TextLine += '>';

      //Add Custom Header
      IF (ConsumedWebService."Use Custom SOAP Header") THEN BEGIN
        ConsumedWebService.CALCFIELDS("Custom SOAP Header XML");
        IF (ConsumedWebService."Custom SOAP Header XML".HASVALUE) THEN BEGIN
          CLEAR(TempBlob);
          TempBlob.INIT;
          TempBlob.Blob := ConsumedWebService."Custom SOAP Header XML";
          TempBlob.Blob.CREATEINSTREAM(IStream);
          IStream.READTEXT(TextLine1);
          TextLine += TextLine1;
        END;
      END;

      //Add (Custom) Body
      IF (ConsumedWebServiceLine."Use Custom SOAP Body") THEN BEGIN
        ConsumedWebServiceLine.CALCFIELDS("Custom SOAP Body XML");
        IF (ConsumedWebServiceLine."Custom SOAP Body XML".HASVALUE) THEN BEGIN
          CLEAR(TempBlob);
          TempBlob.INIT;
          TempBlob.Blob := ConsumedWebServiceLine."Custom SOAP Body XML";
          TempBlob.Blob.CREATEINSTREAM(IStream);
          IStream.READTEXT(TextLine1);
          TextLine += TextLine1;
        END;
      END ELSE BEGIN
        IF (ConsumedWebServiceLine."Prefix Method Namespace" = '') THEN
          TextLine += STRSUBSTNO('<%1:Body><%2/></%1:Body>', ConsumedWebService."Prefix Envelope Namespace",
            ConsumedWebServiceLine."Request Root Tag")
        ELSE
          TextLine += STRSUBSTNO('<%1:Body><%2:%3/></%1:Body>', ConsumedWebService."Prefix Envelope Namespace",
            ConsumedWebServiceLine."Prefix Method Namespace", ConsumedWebServiceLine."Request Root Tag");
      END;

      //End Envelope
      TextLine += STRSUBSTNO('</%1:Envelope>', ConsumedWebService."Prefix Envelope Namespace");

      IF ISNULL(RequestXML) THEN
        RequestXML := RequestXML.XmlDocument;
      CreateAndSetNamespaceManager(RequestXML, RequestNamespaceManager);
      RequestXML.LoadXml(TextLine);
    END;

    LOCAL PROCEDURE AddAllNamespaces@1100528316(VAR TextLine@1100528302 : Text);
    VAR
      RegExpManagement@1100528301 : Codeunit 11012262;
      PrefixArr@1100528304 : ARRAY [100] OF Text;
      NamespaceArr@1100528303 : ARRAY [100] OF Text;
      Counter@1100528300 : Integer;
    BEGIN
      SetNamespaceArrays(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", PrefixArr, NamespaceArr);
      FOR Counter := 1 TO ARRAYLEN(PrefixArr) DO BEGIN
        IF (PrefixArr[Counter] <> '') AND (NamespaceArr[Counter] <> '') AND
          (NOT RegExpManagement.RegExpFindMatches(TextLine, STRSUBSTNO(':%1=', PrefixArr[Counter])))
        THEN
          TextLine += STRSUBSTNO(' xmlns:%1="%2"', PrefixArr[Counter], NamespaceArr[Counter]);
      END;
    END;

    [External]
    PROCEDURE SendCWS@1100528301(WebServiceCode@1100528302 : Code[20];SeqNo@1100528308 : Integer;RequestXML@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ResponseXML@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ResponseNamespaceManager@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";MessageId@1100525000 : Text) : Boolean;
    VAR
      ConsumedWebServiceRuntime@1100528309 : Codeunit 11229309;
      XMLDOMManagement4PS@1100528310 : Codeunit 11020220;
      HTTPWebResponse@1100528305 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      FoundNode@1100528311 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Postaction@1100528303 : ARRAY [10] OF Text;
      SOAPFaultString@1100528000 : Text;
      ErrorString@1100528307 : Text;
      LogEntryNo@1100528312 : Integer;
    BEGIN
      //Consumed Web Service Line Log
      //PostAction[1]: Status String
      //PostAction[2]: Status Code
      //PostAction[3]: Status Details
      //PostAction[4]:
      //PostAction[5]:

      SetGlobalVars;
      ConsumedWebService.GET(WebServiceCode);
      ConsumedWebServiceLine.GET(WebServiceCode, SeqNo);
      IF ISNULL(HTTPWebResponse) THEN
        HTTPWebResponse := HTTPWebResponse.HttpWebResponse();
      IF ISNULL(ResponseXML) THEN
        ResponseXML := ResponseXML.XmlDocument();
      CreateAndSetNamespaceManager(ResponseXML, ResponseNamespaceManager);
      SOAPFaultString := '<Body><Fault><faultcode>%1</faultcode><faultstring>%2</faultstring><detail>%3</detail></Fault></Body>';

      LogEntryNo := 0;
      Postaction[1] := 'Init';
      LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, TRUE, MessageId);
      CLEARLASTERROR();
      COMMIT;

      ConsumedWebServiceRuntime.SetRuntime(ConsumedWebService, ConsumedWebServiceLine, RequestXML);
      IF (NOT ConsumedWebServiceRuntime.RUN) THEN BEGIN
        CreateAndSetNamespaceManager(ResponseXML, ResponseNamespaceManager);
        ConsumedWebServiceRuntime.GetRuntime(ResponseXML, HTTPWebResponse);
        ProcessRuntimeFault(Postaction);
        IF ISNULL(ResponseXML) THEN BEGIN
          Postaction[1] := 'InternalError';
          Postaction[2] := HTTPWebResponse.ToString;
          Postaction[3] := GETLASTERRORTEXT;
          LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, FALSE, MessageId);
          COMMIT;
        END ELSE BEGIN
          Postaction[1] := 'CommunicationError';
          Postaction[2] := HTTPWebResponse.ToString;
          Postaction[3] := STRSUBSTNO('%1: %2', GETLASTERRORTEXT, Postaction[3]);
          ResponseXML.LoadXml(STRSUBSTNO(SOAPFaultString, Postaction[2], Postaction[1], Postaction[3]));
          LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, TRUE, MessageId);
          COMMIT;
        END;
      //  ProcessRuntimeFault(Postaction);
        EXIT(FALSE);
      END;
      CreateAndSetNamespaceManager(ResponseXML, ResponseNamespaceManager);
      ConsumedWebServiceRuntime.GetRuntime(ResponseXML, HTTPWebResponse);

      IF (HTTPWebResponse.StatusCode <> 200) THEN BEGIN
        IF XMLDOMManagement4PS.FindNode(ResponseXML, STRSUBSTNO(LocalName, 'Fault'), FoundNode) THEN
          ErrorString := FoundNode.InnerXml
        ELSE
          ErrorString := GETLASTERRORTEXT;

        ResponseXML.LoadXml(STRSUBSTNO(SOAPInfoString + SOAPFaultString,
          'HTTP_Error (' + FORMAT(HTTPWebResponse.StatusCode) + ')', HTTPWebResponse.StatusDescription + ' (' + ErrorString + ')'));
        Postaction[1] := 'Http_Error';
        Postaction[2] := FORMAT(HTTPWebResponse.StatusCode);
        Postaction[3] := HTTPWebResponse.StatusDescription;
        LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, TRUE, MessageId);
        COMMIT;
        EXIT(FALSE);
      END;

      Postaction[1] := 'OK';
      Postaction[2] := FORMAT(HTTPWebResponse.StatusCode);
      Postaction[3] := HTTPWebResponse.StatusDescription;
      LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, TRUE, MessageId);
      COMMIT;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE SendCwsPullService@1100525000(WebServiceCode@1100528302 : Code[20];SeqNo@1100528308 : Integer;Object2send@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";RequestXML@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ResponseXML@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ResponseNamespaceManager@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";MessageId@1100525000 : Text;VAR ObjectReceived@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Type@1100528305 : Text) : Boolean;
    VAR
      DSPLIPConnector@1100528309 : Codeunit 11126220;
      XMLDOMManagement4PS@1100528310 : Codeunit 11020220;
      FoundNode@1100528311 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Postaction@1100528303 : ARRAY [10] OF Text;
      SOAPFaultString@1100528000 : Text;
      ErrorString@1100528307 : Text;
      LogEntryNo@1100528312 : Integer;
      ServiceVersie@1100525003 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.ServiceVersie";
    BEGIN
      //Consumed Web Service Line Log
      //PostAction[1]: Result
      //PostAction[2]: Status Code
      //PostAction[3]: Status Description
      //PostAction[4]:
      //PostAction[5]:
      SetGlobalVars;
      ConsumedWebService.GET(WebServiceCode);
      ConsumedWebServiceLine.GET(WebServiceCode, SeqNo);

      IF ISNULL(ResponseXML) THEN
        ResponseXML := ResponseXML.XmlDocument();
      CreateAndSetNamespaceManager(ResponseXML, ResponseNamespaceManager);
      SOAPFaultString := '<Body><Fault><faultcode>%1</faultcode><faultstring>%2</faultstring><detail>%3</detail></Fault></Body>';

      LogEntryNo := 0;
      Postaction[1] := 'Init';
      LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, TRUE,MessageId);
      CLEARLASTERROR();
      COMMIT;

      DSPLIPConnector.SetRuntimePUll(Object2send, Type, WebServiceCode);
      IF (NOT DSPLIPConnector.RUN) THEN BEGIN
        LoadException(ResponseXML);
        SerializeToXMLDoc(Object2send,RequestXML);
        LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, TRUE, MessageId);
        COMMIT;
        EXIT(FALSE);
      END;

      CreateAndSetNamespaceManager(ResponseXML, ResponseNamespaceManager);
      //ConsumedWebServiceRuntime.GetRuntime(ResponseXML, HTTPWebResponse);

      DSPLIPConnector.GetRuntimePull(ObjectReceived);
      ServiceVersie := ObjectReceived;

      SerializeToXMLDoc(Object2send,RequestXML);
      SerializeToXMLDoc(ObjectReceived,ResponseXML);
      Postaction[1] := 'OK';
      //Postaction[2] := FORMAT(HTTPWebResponse.StatusCode);
      //Postaction[3] := HTTPWebResponse.StatusDescription;
      LogCWS(LogEntryNo, Postaction, RequestXML, ResponseXML, TRUE, MessageId);
      COMMIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateAndSetNamespaceManager@1100409001(VAR XMLDoc@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR NamespaceManager@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager");
    VAR
      ConsumedWebServiceNamespace@1100528306 : Record 11229838;
    BEGIN
      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.XmlDocument.NameTable);
      NamespaceManager.AddNamespace(ConsumedWebService."Prefix Envelope Namespace", ConsumedWebService."Envelope Namespace");
      IF (ConsumedWebServiceLine."Prefix Method Namespace" <> '') THEN
        NamespaceManager.AddNamespace(ConsumedWebServiceLine."Prefix Method Namespace", ConsumedWebServiceLine."Method Namespace");

      ConsumedWebServiceNamespace.SETRANGE("Web Service Code", ConsumedWebServiceLine."Web Service Code");
      ConsumedWebServiceNamespace.SETRANGE("Seq. No.", ConsumedWebServiceLine."Seq. No.");
      IF (ConsumedWebServiceNamespace.FINDSET) THEN BEGIN
        REPEAT
          NamespaceManager.AddNamespace(ConsumedWebServiceNamespace.Prefix, ConsumedWebServiceNamespace.Namespace);
        UNTIL (ConsumedWebServiceNamespace.NEXT = 0);
      END;
    END;

    [External]
    PROCEDURE LogCWS@1100528302(VAR EntryNo@1100528306 : Integer;PostAction@1100528303 : ARRAY [10] OF Text;RequestXML@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ResponseXML@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";SaveXML@1100528300 : Boolean;MessageId@1100525000 : Text) : Integer;
    VAR
      ConsumedWebServiceLineLog@1100528305 : Record 11229887;
      XMLDOMMgt4PS@1100528308 : Codeunit 11020220;
      RequestWriteStream@1100409000 : OutStream;
      ResponseWriteStream@1100528304 : OutStream;
      FoundNode@1100528307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF (NOT ConsumedWebService."Log Communication") THEN
        EXIT;
      IF (NOT ConsumedWebServiceLine."Log Communication") THEN
        EXIT;

      IF (NOT ConsumedWebServiceLineLog.GET(EntryNo)) THEN BEGIN
        ConsumedWebServiceLineLog.INIT;
        ConsumedWebServiceLineLog.INSERT;
        EntryNo := ConsumedWebServiceLineLog."Entry No.";
      END;

      ConsumedWebServiceLineLog."Web Service Code" := ConsumedWebServiceLine."Web Service Code";
      ConsumedWebServiceLineLog."Seq. No." := ConsumedWebServiceLine."Seq. No.";
      ConsumedWebServiceLineLog."Method Name" := ConsumedWebServiceLine."Method Name";
      IF (ConsumedWebServiceLine."Method Name" = '') THEN
        ConsumedWebServiceLineLog."Method Name" := ConsumedWebServiceLine."Request Root Tag";
      ConsumedWebServiceLineLog."Date Send" := TODAY;
      ConsumedWebServiceLineLog."Time Send" := TIME;
      ConsumedWebServiceLineLog."Status Description" := COPYSTR(PostAction[1], 1, MAXSTRLEN(ConsumedWebServiceLineLog."Status Description"));
      ConsumedWebServiceLineLog."Status Code" := COPYSTR(PostAction[2], 1, MAXSTRLEN(ConsumedWebServiceLineLog."Status Code"));
      ConsumedWebServiceLineLog."Status Details" := COPYSTR(PostAction[3], 1, MAXSTRLEN(ConsumedWebServiceLineLog."Status Details"));
      IF (SaveXML) THEN BEGIN
        ConsumedWebServiceLineLog."Request Message".CREATEOUTSTREAM(RequestWriteStream);
        RequestXML.Save(RequestWriteStream);
        ConsumedWebServiceLineLog."Response Message".CREATEOUTSTREAM(ResponseWriteStream);
        ResponseXML.Save(ResponseWriteStream);

        IF (XMLDOMMgt4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'Body'), FoundNode)) THEN
          ConsumedWebServiceLineLog."Request Message Text" := CleanInnerText(FoundNode)
        ELSE
          ConsumedWebServiceLineLog."Request Message Text" := COPYSTR(RequestXML.InnerXml, 1,
            MAXSTRLEN(ConsumedWebServiceLineLog."Request Message Text"));
        IF (XMLDOMMgt4PS.FindNode(ResponseXML, STRSUBSTNO(LocalName, 'Body'), FoundNode)) THEN
          ConsumedWebServiceLineLog."Response Message Text" := CleanInnerText(FoundNode)
        ELSE
          ConsumedWebServiceLineLog."Response Message Text" := COPYSTR(ResponseXML.InnerXml, 1,
            MAXSTRLEN(ConsumedWebServiceLineLog."Response Message Text"));
      END;
      ConsumedWebServiceLineLog."Message Id" := COPYSTR(MessageId, 1, MAXSTRLEN(ConsumedWebServiceLineLog."Message Id"));
      ConsumedWebServiceLineLog.MODIFY;
    END;

    LOCAL PROCEDURE SetGlobalVars@1100528306();
    BEGIN
      SOAPInfoString := '<?xml version="1.0" encoding="UTF-8" standalone="no"?>';
    END;

    LOCAL PROCEDURE TestWebServiceFields@1100528307();
    BEGIN
      ConsumedWebService.TESTFIELD(Active, TRUE);
      ConsumedWebService.TESTFIELD("Prefix Envelope Namespace");
      ConsumedWebService.TESTFIELD("Envelope Namespace");

      ConsumedWebServiceLine.TESTFIELD(Active, TRUE);
      ConsumedWebServiceLine.TESTFIELD("Request Root Tag");
    END;

    [External]
    PROCEDURE CreateCWS@1100528308(ConsumedWebServiceCode@1100528300 : Code[20];Active@1100528301 : Boolean;WebServiceURL@1100528302 : Text;SOAPAction@1100528303 : Text);
    VAR
      ConsumedWebService@1100528304 : Record 11229797;
    BEGIN
      IF NOT ConsumedWebService.GET(ConsumedWebServiceCode) THEN BEGIN
        ConsumedWebService.INIT;
        ConsumedWebService.Code := ConsumedWebServiceCode;
        ConsumedWebService.Description := ConsumedWebServiceCode + Text003;
        ConsumedWebService."Prefix Envelope Namespace" := 'soapenv';
        ConsumedWebService."Envelope Namespace" := 'http://schemas.xmlsoap.org/soap/envelope/';
        ConsumedWebService."Content Type" := 'text/xml; charset=utf-8';
        ConsumedWebService.INSERT;
      END;
      ConsumedWebService."Web Service URL" := WebServiceURL;
      ConsumedWebService."SOAP Action" := SOAPAction;
      ConsumedWebService.Active := Active;
      ConsumedWebService.MODIFY;
    END;

    [External]
    PROCEDURE CreateCWSLine@1100528309(ConsumedWebServiceCode@1100528300 : Code[20];SeqNo@1100528301 : Integer;Active@1100528302 : Boolean;MethodName@1100528303 : Text;Prefix@1100528304 : Text;Namespace@1100528305 : Text);
    VAR
      ConsumedWebServiceLine@1100528306 : Record 11229798;
    BEGIN
      IF (NOT ConsumedWebServiceLine.GET(ConsumedWebServiceCode, SeqNo)) THEN BEGIN
        ConsumedWebServiceLine.INIT;
        ConsumedWebServiceLine."Web Service Code" := ConsumedWebServiceCode;
        ConsumedWebServiceLine."Seq. No." := SeqNo;
        ConsumedWebServiceLine.Description := ConsumedWebServiceCode + ' - ' + MethodName;
        ConsumedWebServiceLine.VALIDATE("Method Name", MethodName);
        ConsumedWebServiceLine."Prefix Method Namespace" := Prefix;
        ConsumedWebServiceLine."Method Namespace" := Namespace;
        ConsumedWebServiceLine.INSERT;
      END;
      ConsumedWebServiceLine.Active := Active;
      ConsumedWebServiceLine.MODIFY;
    END;

    [External]
    PROCEDURE CreateCWSNamespace@1100528310(ConsumedWebServiceCode@1100528300 : Code[20];SeqNo@1100528301 : Integer;Prefix@1100528302 : Text;Namespace@1100528303 : Text);
    VAR
      ConsumedWebServiceNamespace@1100528304 : Record 11229838;
    BEGIN
      IF (NOT ConsumedWebServiceNamespace.GET(ConsumedWebServiceCode, SeqNo, Prefix)) THEN BEGIN
        ConsumedWebServiceNamespace.INIT;
        ConsumedWebServiceNamespace."Web Service Code" := ConsumedWebServiceCode;
        ConsumedWebServiceNamespace."Seq. No." := SeqNo;
        ConsumedWebServiceNamespace.Prefix := Prefix;
        ConsumedWebServiceNamespace.Namespace := Namespace;
        ConsumedWebServiceNamespace.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateFLSWebServices@1100528311(WebServiceCode@1100528301 : Code[20];Active@1100528300 : Boolean);
    BEGIN
      CreateCWS(WebServiceCode, Active, 'http://<flsVisitourServer>/VTS/WS', 'http://<flsVisitourServer>/VTS/WS/');
      CreateCWSLine(WebServiceCode, 100, Active, 'FieldManager', 'tour', 'http://www.tourenserver.de/');
      CreateCWSLine(WebServiceCode, 200, Active, 'Call', 'tour', 'http://www.tourenserver.de/');
      CreateCWSLine(WebServiceCode, 300, Active, 'ShowCallInfo', 'tour', 'http://www.tourenserver.de/');
      CreateCWSLine(WebServiceCode, 400, Active, 'GetSchedule', 'tour', 'http://www.tourenserver.de/');
      CreateCWSLine(WebServiceCode, 500, Active, 'FixSchedule', 'tour', 'http://www.tourenserver.de/');
      CreateCWSLine(WebServiceCode, 600, Active, 'MobileMessage', 'tour', 'http://www.tourenserver.de/');
    END;

    LOCAL PROCEDURE CreateDispatchWebServices@1100528600(WebServiceCode@1100528301 : Code[20];Active@1100528300 : Boolean;DemoMode@1100528600 : Boolean);
    BEGIN
      IF DemoMode THEN
        CreateCWS(WebServiceCode, Active, 'https://demo-woon.dispatch.nl/soap/dispatch.asp', 'https://demo-woon.dispatch.nl/soap/dispatch.asp')
      ELSE
        CreateCWS(WebServiceCode, Active, 'https://woon.dispatch.nl/soap/dispatch.asp', 'https://woon.dispatch.nl/soap/dispatch.asp');
      CreateCWSLine(WebServiceCode, 100, Active, 'postXML', 'mes', 'http://tempuri.org/message/');
      CreateCWSNamespace(WebServiceCode, 100, 'xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      CreateCWSNamespace(WebServiceCode, 100, 'xsd', 'http://www.w3.org/2001/XMLSchema');
    END;

    LOCAL PROCEDURE CreateNAVTestWebServices@1100528315();
    BEGIN
      CreateCWS('EMPLOYEE NAV', FALSE, 'http://<NAV.Server>:<PortNo>/<ServiceName>/WS/$1/Page/EmployeeCardWS', 'urn:microsoft-dynamics-schemas/page/employeecardws:');
      CreateCWSLine('EMPLOYEE NAV', 100, FALSE, 'ReadMultiple', 'emp', 'urn:microsoft-dynamics-schemas/page/employeecardws');
    END;

    [External]
    PROCEDURE CleanInnerText@1100528312(NodeIn@1100528004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Text;
    VAR
      XMLDOMMgt4PS@1100528000 : Codeunit 11020220;
      RegExpMgt@1100528301 : Codeunit 11012262;
      XMLDocIn@1100528005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100528003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLText@1100528002 : Text;
      Pattern@1100528303 : Text;
    BEGIN
      XMLDocIn := XMLDocIn.XmlDocument;
      //message('NodeIn.InnerXml: %1', NodeIn.InnerXml);
      XMLDocIn.LoadXml(NodeIn.InnerXml);
      XMLDOMMgt4PS.RemoveNamespaces(XMLDocIn, XMLDocOut);
      XMLText := COPYSTR(XMLDocOut.InnerXml, 1, 500);
      Pattern := '<\?xml.*\?>';
      XMLText := RegExpMgt.Replace(XMLText, Pattern, '');
      EXIT(COPYSTR(XMLText, 1, 250));
    END;

    [External]
    PROCEDURE CheckResponseSoapFault@1100528330(VAR IResponseXML@1100528601 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR IRequestNamespaceManager@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager");
    VAR
      XMLDOMManagement4PS@1100528600 : Codeunit 11020220;
      FoundNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FaultCode@1100528301 : Text;
      FaultString@1100528302 : Text;
    BEGIN
      IF (XMLDOMManagement4PS.FindNode(IResponseXML, STRSUBSTNO(LocalName, 'Fault'), FoundNode)) OR
         (XMLDOMManagement4PS.FindNode(IResponseXML, STRSUBSTNO(LocalName, 'Exception'), FoundNode))
      THEN BEGIN
        FaultString := FoundNode.InnerXml;
        IF XMLDOMManagement4PS.FindNode(IResponseXML, STRSUBSTNO(LocalName, 'faultcode'), FoundNode) THEN
          FaultCode := FoundNode.InnerText;
        IF XMLDOMManagement4PS.FindNode(IResponseXML, STRSUBSTNO(LocalName, 'detail'), FoundNode) THEN
          FaultString := FoundNode.InnerXml;
        ERROR(Text004, ConsumedWebServiceLine."Method Name", FaultCode, FaultString);
      END;
    END;

    [External]
    PROCEDURE ProcessRuntimeFault@1100528000(VAR Postaction@1100528008 : ARRAY [10] OF Text);
    VAR
      XMLDOMManagement4PS@1100528000 : Codeunit 11020220;
      DotNetExceptionHandler@1100528001 : Codeunit 1291;
      WebException@1100528002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
      WebExceptionStatus@1100528003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebExceptionStatus";
      XmlDoc@1100528004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      HttpWebResponseError@1100528005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      HttpStatusCode@1100528006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      FoundNode@1100528009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Postaction[1] := 'Runtime_Error';
      Postaction[2] := '999';
      Postaction[3] := '';
      DotNetExceptionHandler.Collect;

      IF (NOT DotNetExceptionHandler.CastToType(WebException, GETDOTNETTYPE(WebException))) THEN
        DotNetExceptionHandler.Rethrow;

      Postaction[3] := WebException.Message;
      IF (NOT WebException.Status.Equals(WebExceptionStatus.ProtocolError)) THEN BEGIN
        Postaction[3] := WebException.Message;
        EXIT;
      END;

      HttpWebResponseError := WebException.Response;
      IF ((NOT HttpWebResponseError.StatusCode.Equals(HttpStatusCode.Found)) OR
         HttpWebResponseError.StatusCode.Equals(HttpStatusCode.InternalServerError))
      THEN BEGIN
        IF (NOT ISNULL(WebException.InnerException)) THEN
          Postaction[3] := WebException.InnerException.Message
        ELSE
          Postaction[3] := WebException.Message;
        EXIT;
      END;

      IF (NOT GetXmlResponse(Postaction, WebException)) THEN BEGIN
        Postaction[3] := FORMAT(WebException.Response.GetResponseStream);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetXmlResponse@1100528322(VAR Postaction@1100528300 : ARRAY [10] OF Text;WebException@1100528301 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException");
    VAR
      XMLDOMManagement4PS@1100528303 : Codeunit 11020220;
      XmlDoc@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      FoundNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.Load(WebException.Response.GetResponseStream);
      Postaction[1] := XMLDOMManagement4PS.FindNodeText(XmlDoc.DocumentElement, STRSUBSTNO(LocalName, 'faultstring'));
      Postaction[2] := XMLDOMManagement4PS.FindNodeText(XmlDoc.DocumentElement, STRSUBSTNO(LocalName, 'faultcode'));
      Postaction[3] := XMLDOMManagement4PS.FindNodeText(XmlDoc.DocumentElement, STRSUBSTNO(LocalName, 'faultstring'));
      IF (XMLDOMManagement4PS.FindNode(XmlDoc.DocumentElement, STRSUBSTNO(LocalName, 'detail'), FoundNode)) THEN
        Postaction[3] := FoundNode.OuterXml;
    END;

    LOCAL PROCEDURE SerializeToXMLDoc@1100525005(Object@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";VAR XmlDoc@1100525007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      xmlSerializer@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Serialization.XmlSerializer";
      StreamWriter@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      File@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      NavInstr@1100525004 : InStream;
      TempFilename@1100525005 : Text;
      XMLreader@1100525006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReader";
      XMLReaderSettings@1100525008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReaderSettings";
      MemoryStream@1100525009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      IF ISNULL(Object) THEN EXIT;

      xmlSerializer := xmlSerializer.XmlSerializer(Object.GetType);
      MemoryStream := MemoryStream.MemoryStream;
      xmlSerializer.Serialize(MemoryStream,Object);
      MemoryStream.Position := 0;
      XMLReaderSettings := XMLReaderSettings.XmlReaderSettings;
      XMLReaderSettings.IgnoreWhitespace := TRUE;
      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.Load(XMLreader.Create(MemoryStream,XMLReaderSettings));
    END;

    LOCAL PROCEDURE LoadException@1100525019(VAR ResponseXML@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      Exception@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Exception";
      HttpUtility@1100525003 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      Exception := GETLASTERROROBJECT;
      HttpUtility := HttpUtility.HttpUtility;
      ResponseXML.LoadXml(STRSUBSTNO('<Root><Exception>%1</Exception></Root>',HttpUtility.HtmlEncode(Exception.ToString)));
    END;

    [External]
    PROCEDURE AddFaultParameters@1100528318(ConsumedWebServiceCode@1100528304 : Code[20];SupportInfo@1100528303 : Text;FaultNode@1100528302 : Text;FaultPrefix@1100528301 : Text;FaultNamespace@1100528300 : Text);
    VAR
      ConsumedWebService@1100528305 : Record 11229797;
    BEGIN
      IF ConsumedWebService.GET(ConsumedWebServiceCode) THEN BEGIN
        ConsumedWebService."Support Info" := SupportInfo;
        ConsumedWebService."Fault Node" := FaultNode;
        ConsumedWebService."Prefix Fault Namespace" := FaultPrefix;
        ConsumedWebService."Fault Namespace" := FaultNamespace;
        ConsumedWebService.MODIFY;
      END;
    END;

    BEGIN
    {
      *** Required variables ***
      Name                    DataType
      RequestXML              DotNetSystem.Xml.XmlDocument.'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
      ResponseXML             DotNetSystem.Xml.XmlDocument.'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
      RequestNamespaceManager DotNetSystem.Xml.XmlNamespaceManager.'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
    }
    END.
  }
}

