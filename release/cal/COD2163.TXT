OBJECT Codeunit 2163 O365 Sales Quote Events
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    TableNo=2160;
    Permissions=TableData 2160=rimd;
    OnRun=BEGIN
            IF NOT IsInvoicing THEN BEGIN
              Result := NotInvoicingErr;
              State := State::Failed;
              EXIT;
            END;

            ParseEvent(Rec);
          END;

  }
  CODE
  {
    VAR
      EstimateSentMsg@1000 : TextConst '@@@="%1=The estimate number";ENU=Estimate %1 is being sent.;NOR=Estimatet %1 blir sendt.';
      EstimateAcceptedMsg@1002 : TextConst '@@@="%1=The estimate number";ENU=Estimate %1 was accepted.;NOR=Estimatet %1 ble godtatt.';
      EstimateExpiringMsg@1003 : TextConst 'ENU=There are expiring estimates.;NOR=Det finnes estimater som utl›per.';
      UnsupportedTypeErr@1001 : TextConst 'ENU=This event type is not supported.;NOR=Denne hendelsestypen st›ttes ikke.';
      NotInvoicingErr@1006 : TextConst 'ENU=This event is only handled for Invoicing.;NOR=Denne hendelsen h†ndteres bare for Invoicing.';

    LOCAL PROCEDURE ParseEvent@1(CalendarEvent@1000 : Record 2160);
    VAR
      O365SalesEvent@1001 : Record 2163;
      O365SalesWebService@1002 : Codeunit 2190;
    BEGIN
      O365SalesEvent.LOCKTABLE;
      O365SalesEvent.GET(CalendarEvent."Record ID to Process");

      CASE O365SalesEvent.Type OF
        O365SalesEvent.Type::"Estimate Accepted":
          O365SalesWebService.SendEstimateAcceptedEvent(O365SalesEvent."Document No.");
        O365SalesEvent.Type::"Estimate Email Failed": // Generated by subscriber in COD2162
          O365SalesWebService.SendEstimateEmailFailedEvent(O365SalesEvent."Document No.");
        O365SalesEvent.Type::"Estimate Expiring":
          O365SalesWebService.SendEstimateExpiryEvent;
        O365SalesEvent.Type::"Estimate Sent":
          O365SalesWebService.SendEstimateSentEvent(O365SalesEvent."Document No.");
        ELSE
          ERROR(UnsupportedTypeErr);
      END;
    END;

    LOCAL PROCEDURE UpdateExpiringEvent@4();
    VAR
      O365C2GraphEventSettings@1000 : Record 2162;
      CalendarEvent@1001 : Record 2160;
      SalesHeader@1003 : Record 36;
      O365SalesEvent@1005 : Record 2163;
      CalendarEventMangement@1004 : Codeunit 2160;
      NewDate@1002 : Date;
      EventNo@1006 : Integer;
    BEGIN
      IF NOT O365C2GraphEventSettings.GET THEN
        O365C2GraphEventSettings.INSERT(TRUE);

      // If there are any unaccepted estimates that are expiring next week
      // Create/update the event
      NewDate := CALCDATE(STRSUBSTNO('<WD%1>',O365C2GraphEventSettings."Est. Expiring Week Start (WD)"),TODAY); // Next start of the week

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      SalesHeader.SETRANGE("Quote Accepted",FALSE);
      SalesHeader.SETRANGE("Quote Valid Until Date",NewDate,CALCDATE('<1W>',NewDate)); // ends some time during next week

      IF CalendarEvent.GET(O365C2GraphEventSettings."Est. Expiring Event") AND (NOT CalendarEvent.Archived) THEN BEGIN
        IF SalesHeader.ISEMPTY THEN
          CalendarEvent.DELETE(TRUE)
        ELSE BEGIN
          CalendarEvent.VALIDATE("Scheduled Date",NewDate);
          CalendarEvent.MODIFY(TRUE);
        END;

        EXIT;
      END;

      IF SalesHeader.ISEMPTY THEN
        EXIT;

      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Estimate Expiring",'');
      EventNo :=
        CalendarEventMangement.CreateCalendarEvent(
          NewDate,EstimateExpiringMsg,CODEUNIT::"O365 Sales Quote Events",O365SalesEvent.RECORDID,
          O365C2GraphEventSettings."Est. Expiring Enabled");

      O365C2GraphEventSettings."Est. Expiring Event" := EventNo;
      O365C2GraphEventSettings.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSendEvent@13(DocNo@1000 : Code[20]);
    VAR
      O365SalesEvent@1001 : Record 2163;
      CalendarEventMangement@1002 : Codeunit 2160;
    BEGIN
      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Estimate Sent",DocNo);
      CalendarEventMangement.CreateCalendarEvent(
        TODAY,STRSUBSTNO(EstimateSentMsg,DocNo),CODEUNIT::"O365 Sales Quote Events",O365SalesEvent.RECORDID,
        O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Estimate Sent"));
    END;

    LOCAL PROCEDURE CreateAcceptedEvent@15(DocNo@1000 : Code[20]);
    VAR
      O365SalesEvent@1002 : Record 2163;
      CalendarEventMangement@1001 : Codeunit 2160;
    BEGIN
      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Estimate Accepted",DocNo);
      CalendarEventMangement.CreateCalendarEvent(
        TODAY,STRSUBSTNO(EstimateAcceptedMsg,DocNo),CODEUNIT::"O365 Sales Quote Events",
        O365SalesEvent.RECORDID,
        O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Estimate Accepted"));
    END;

    LOCAL PROCEDURE CreateEvent@5(VAR O365SalesEvent@1002 : Record 2163;Type@1000 : Integer;DocNo@1001 : Code[20]);
    BEGIN
      O365SalesEvent.INIT;
      O365SalesEvent.Type := Type;
      O365SalesEvent."Document No." := DocNo;
      O365SalesEvent.INSERT;
    END;

    LOCAL PROCEDURE IsQuote@6(VAR SalesHeader@1003 : Record 36) : Boolean;
    BEGIN
      IF SalesHeader.ISTEMPORARY THEN
        EXIT(FALSE);

      EXIT(SalesHeader."Document Type" = SalesHeader."Document Type"::Quote);
    END;

    LOCAL PROCEDURE IsInvoicing@8() : Boolean;
    VAR
      O365SalesInitialSetup@1000 : Record 2110;
      O365C2GraphEventSettings@1002 : Record 2162;
      O365SalesEvent@1001 : Record 2163;
    BEGIN
      IF NOT O365SalesInitialSetup.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT (O365C2GraphEventSettings.READPERMISSION AND O365C2GraphEventSettings.WRITEPERMISSION) THEN
        EXIT(FALSE);

      IF NOT (O365SalesEvent.READPERMISSION AND O365SalesEvent.WRITEPERMISSION) THEN
        EXIT(FALSE);

      IF NOT O365SalesInitialSetup.GET THEN
        EXIT(FALSE);

      EXIT(O365SalesInitialSetup."Is initialized");
    END;

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    PROCEDURE OnAfterSalesHeaderInsert@7(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT IsQuote(Rec) THEN
        EXIT;

      IF NOT IsInvoicing THEN
        EXIT;

      UpdateExpiringEvent;
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    PROCEDURE OnAfterSalesHeaderDelete@10(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT (IsInvoicing AND IsQuote(Rec)) THEN
        EXIT;

      UpdateExpiringEvent;
    END;

    [EventSubscriber(Table,36,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterSalesHeaderModify@2(VAR Rec@1000 : Record 36;VAR xRec@1001 : Record 36;RunTrigger@1002 : Boolean);
    BEGIN
      IF NOT IsQuote(Rec) THEN
        EXIT;

      IF NOT IsInvoicing THEN
        EXIT;

      UpdateExpiringEvent;
    END;

    [EventSubscriber(Table,36,OnAfterSalesQuoteAccepted)]
    LOCAL PROCEDURE OnAfterSalesQuoteAccepted@3(VAR SalesHeader@1000 : Record 36);
    BEGIN
      IF NOT IsQuote(SalesHeader) THEN
        EXIT;

      IF NOT IsInvoicing THEN
        EXIT;

      CreateAcceptedEvent(SalesHeader."No.");
      UpdateExpiringEvent;
    END;

    [EventSubscriber(Table,36,OnAfterSendSalesHeader)]
    LOCAL PROCEDURE OnAfterSendSalesHeader@9(VAR SalesHeader@1000 : Record 36;ShowDialog@1001 : Boolean);
    BEGIN
      IF NOT IsQuote(SalesHeader) THEN
        EXIT;

      IF NOT IsInvoicing THEN
        EXIT;

      IF ShowDialog THEN
        EXIT;

      CreateSendEvent(SalesHeader."No.");
    END;

    BEGIN
    END.
  }
}

