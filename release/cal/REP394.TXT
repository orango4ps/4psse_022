OBJECT Report 394 Suggest Employee Payments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Mitarbeiterzahlung vorschlagen;
               ENU=Suggest Employee Payments;
               NLD=Werknemersbetalingen voorstellen;
               NOR=Betalingsforslag - ansatt;
               SVE=Betalningsfîrslag fîr anstÑlld];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CompanyInformation.GET;
                  TempEmployeeLedgerEntry.DELETEALL;
                  ShowPostingDateWarning := FALSE;
                END;

    OnPostReport=BEGIN
                   COMMIT;
                   IF NOT TempEmployeeLedgerEntry.ISEMPTY THEN
                     IF CONFIRM(UnprocessedEntriesQst) THEN
                       PAGE.RUNMODAL(0,TempEmployeeLedgerEntry);
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table5200;
               DataItemTableView=SORTING(No.)
                                 WHERE(Privacy Blocked=CONST(No));
               OnPreDataItem=BEGIN
                               IF PostingDate = 0D THEN
                                 ERROR(PostingDateRequiredErr);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := FALSE;
                               MessageText := '';

                               IF ((BankPmtType = GenJnlLine2."Bank Payment Type"::" ") OR
                                   SummarizePerEmpl) AND
                                  (NextDocNo = '')
                               THEN
                                 ERROR(StartingDocNoErr);

                               IF ((BankPmtType = GenJnlLine2."Bank Payment Type"::"Manual Check") AND
                                   NOT SummarizePerEmpl AND
                                   NOT DocNoPerLine)
                               THEN
                                 ERROR(ManualCheckErr);

                               Empl2.COPYFILTERS(Employee);

                               OriginalAmtAvailable := AmountAvailable;

                               Window.OPEN(ProcessingEmployeesMsg);

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Employee Payments");
                               SummarizePerDim := SelectedDim.FIND('-') AND SummarizePerEmpl;

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(EmployeeBalance);
                                  CALCFIELDS(Balance);
                                  EmployeeBalance := Balance;

                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  IF EmployeeBalance > 0 THEN BEGIN
                                    GetEmplLedgEntries(TRUE);
                                    GetEmplLedgEntries(FALSE);
                                    CheckAmounts;
                                    ClearNegative;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF FINDSET THEN
                                  REPEAT
                                    ClearNegative;
                                  UNTIL NEXT = 0;

                                DimSetEntry.LOCKTABLE;
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                IF GenJnlLine.FINDLAST THEN BEGIN
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                END;

                                Window2.OPEN(InsertingJournalLinesMsg);

                                TempPayableEmployeeLedgerEntry.RESET;
                                MakeGenJnlLines;
                                TempPayableEmployeeLedgerEntry.RESET;
                                TempPayableEmployeeLedgerEntry.DELETEALL;

                                Window2.CLOSE;
                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               SummarizePerDimTextEnable := TRUE;
               SkipExportedPayments := TRUE;
             END;

      OnOpenPage=BEGIN
                   PostingDate := WORKDATE;
                   ValidatePostingDate;
                   SetDefaults;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 4   ;2   ;Group     ;
                  CaptionML=[DEU=Zahlungen suchen;
                             ENU=Find Payments;
                             NLD=Betalingen zoeken;
                             NOR=Sõk etter betalinger;
                             SVE=Hitta betalningar];
                  GroupType=Group }

      { 11  ;3   ;Field     ;
                  Name=Available Amount (LCY);
                  CaptionML=[DEU=VerfÅgbarer Betrag (MW);
                             ENU=Available Amount (LCY);
                             NLD=Beschikbaar bedrag (LV);
                             NOR=Disponibelt belõp (NOK);
                             SVE=Disponibelt belopp (BVA)];
                  ToolTipML=[DEU=Gibt einen Hîchstbetrag (in MW) an, der fÅr Zahlungen verfÅgbar ist.;
                             ENU=Specifies a maximum amount (in LCY) that is available for payments.;
                             NLD=Hiermee wordt een maximumbedrag (in de lokale valuta) opgegeven dat beschikbaar is voor betalingen.;
                             NOR=Angir et maksimumsbelõp (i NOK) som er tilgjengelig for betalinger.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AmountAvailable;
                  Importance=Additional }

      { 13  ;3   ;Field     ;
                  Name=SkipExportedPayments;
                  CaptionML=[DEU=Exportierte Zahlungen Åberspringen;
                             ENU=Skip Exported Payments;
                             NLD=Geâxporteerde betalingen overslaan;
                             NOR=Hopp over eksporterte betalinger;
                             SVE=Hoppa îver exporterade betalningar];
                  ToolTipML=[DEU=Gibt an, dass die Stapelverarbeitung keine bereits zu einer Bankdatei exportierte Zahlungsausgangs Buch.-Blattzeilen fÅr Zahlungen einfÅgen soll.;
                             ENU=Specifies if you do not want the batch job to insert payment journal lines for documents for which payments have already been exported to a bank file.;
                             NLD=Hiermee wordt opgegeven of u niet wilt dat tijdens de batchverwerking betalingsdagboekregels worden ingevoegd voor documenten waarvoor al betalingen zijn geâxporteerd naar een bankbestand.;
                             NOR=Angir om du ikke vil at kjõrselen skal sette inn utbetalingskladdelinjer for dokumenter der betalinger allerede er eksportert til en bankfil.;
                             SVE=Anger om du inte vill att batch-jobbet ska infoga utbetalningsjournalrader fîr dokument fîr vilka betalningar redan har exporterats till en bankfil.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SkipExportedPayments;
                  Importance=Additional }

      { 7   ;2   ;Group     ;
                  CaptionML=[DEU=Ergebnisse zusammenfassen;
                             ENU=Summarize Results;
                             NLD=Resultaten samenvatten;
                             NOR=Summer resultater;
                             SVE=Sammanfatta resultat];
                  GroupType=Group }

      { 6   ;3   ;Field     ;
                  Name=SummarizePerEmployee;
                  CaptionML=[DEU=Pro Mitarbeiter zusammenfassen;
                             ENU=Summarize per Employee;
                             NLD=Samenvatten per werknemer;
                             NOR=Summer per ansatt];
                  ToolTipML=[DEU=Legt fest, ob die Stapelverarbeitung eine Zeile pro Mitarbeiter erstellen soll.;
                             ENU=Specifies if you want the batch job to make one line per employee;
                             NLD=Hiermee wordt opgegeven of u wilt dat de batchverwerking ÇÇn regel per werknemer maakt;
                             NOR=Angir om du vil at kjõrselen skal opprette Çn linje per ansatt];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SummarizePerEmpl }

      { 17  ;3   ;Field     ;
                  Name=SummarizePerDimText;
                  CaptionML=[DEU=Nach Dimension;
                             ENU=By Dimension;
                             NLD=Per dimensie;
                             NOR=Per dimensjon;
                             SVE=Per dimension];
                  ToolTipML=[DEU=Legt die Dimensionen fest, die die Stapelverarbeitung berÅcksichtigen soll.;
                             ENU=Specifies the dimensions that you want the batch job to consider.;
                             NLD=Hiermee worden de dimensies opgegeven die door de batchverwerking moeten worden meegenomen.;
                             NOR=Angir dimensjonene du vil at kjõrselen skal vurdere.;
                             SVE=Anger de dimensioner som du vill att batch-jobbet ska îvervÑga.];
                  ApplicationArea=#Dimensions;
                  SourceExpr=SummarizePerDimText;
                  Importance=Additional;
                  Enabled=SummarizePerDimTextEnable;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record 368;
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Suggest Employee Payments",SummarizePerDimText);
                               END;
                                }

      { 8   ;2   ;Group     ;
                  CaptionML=[DEU=Buch.-Blattzeilen ausfÅllen;
                             ENU=Fill in Journal Lines;
                             NLD=Journaalregels invullen;
                             NOR=Fyll ut kladdelinjer;
                             SVE=Fyll i journalrader];
                  GroupType=Group }

      { 5   ;3   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[DEU=Buchungsdatum;
                             ENU=Posting Date;
                             NLD=Boekingsdatum;
                             NOR=Bokfõringsdato;
                             SVE=Bokfîringsdatum];
                  ToolTipML=[DEU=Legt das Datum fÅr die Buchung dieser Stapelverarbeitung fest. StandardmÑ·ig wird das Arbeitsdatum eingegeben, Sie kînnen es allerdings Ñndern.;
                             ENU=Specifies the date for the posting of this batch job. By default, the working date is entered, but you can change it.;
                             NLD=Hiermee wordt de datum opgegeven voor de boeking van deze batchverwerking. Standaard wordt de werkdatum ingevuld in dit veld, maar u kunt dit wijzigen.;
                             NOR=Angir datoen for bokfõring av denne kjõrselen. Som standard oppgis arbeidsdatoen, men du kan endre den.;
                             SVE=Anger datumet fîr bokfîringen av detta batch-jobb. Arbetsdatumet anges standard, men du kan Ñndra det.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate;
                  Importance=Promoted;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 9   ;3   ;Field     ;
                  Name=StartingDocumentNo;
                  CaptionML=[DEU=Erste Belegnummer;
                             ENU=Starting Document No.;
                             NLD=Eerste documentnr.;
                             NOR=Startbilagsnr.;
                             SVE=Fr.o.m. dokumentnr];
                  ToolTipML=[DEU=Gibt die nÑchste verfÅgbare Nummer in der Nummernserie fÅr das Buch.-Blatt ein, das mit dem Zahlungsausgangs-Buch.-Blatt verknÅpft ist. Wenn Sie die Stapelverarbeitung ausfÅhren, ist dies die Belegnummer, die in der ersten Buch.-Blattzeile fÅr den Zahlungsausgang erscheint. Sie kînnen dieses Feld auch manuell ausfÅllen.;
                             ENU=Specifies the next available number in the number series for the journal batch that is linked to the payment journal. When you run the batch job, this is the document number that appears on the first payment journal line. You can also fill in this field manually.;
                             NLD=Hiermee wordt het volgende beschikbare nummer opgegeven uit de nummerreeks voor de batchverwerking die is gekoppeld aan het betalingsdagboek. Wanneer u de batchverwerking uitvoert, wordt dit documentnummer weergegeven op de eerste regel van het betalingsdagboek. U kunt dit veld ook handmatig invullen.;
                             NOR=Angir det neste tilgjengelige nummeret i nummerserien for kladden som er knyttet til utbetalingskladden. NÜr du kjõrer kjõrselen, er det dette dokumentnummeret som vises pÜ den fõrste utbetalingskladdelinjen. Du kan ogsÜ fylle ut dette feltet manuelt.;
                             SVE=Anger nÑsta tillgÑngliga nummer i nummerserien fîr den journal som Ñr kopplad till utbetalningsjournalen. NÑr du kîr batch-jobbet visas det hÑr dokumentnumret pÜ den fîrsta utbetalningsjournalraden. Du kan Ñven fylla i fÑltet manuellt.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NextDocNo;
                  OnValidate=VAR
                               TextManagement@1000 : Codeunit 41;
                             BEGIN
                               IF NextDocNo <> '' THEN
                                 TextManagement.EvaluateIncStr(NextDocNo,StartingDocumentNoErr);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=NewDocNoPerLine;
                  CaptionML=[DEU=Neue Belegnr. pro Zeile;
                             ENU=New Doc. No. per Line;
                             NLD=Nieuw documentnr. per regel;
                             NOR=Nytt bilagsnr. per linje;
                             SVE=Nytt ver.nr per rad];
                  ToolTipML=[DEU=Gibt an, ob die Stapelverarbeitung die Buch.-Blattzeilen mit fortlaufenden Belegnummern, beginnend mit der im Feld "Erste Belegnummer" angegebenen, durchnummerieren soll.;
                             ENU=Specifies if you want the batch job to fill in the payment journal lines with consecutive document numbers, starting with the document number specified in the Starting Document No. field.;
                             NLD=Hiermee wordt opgegeven of u wilt dat tijdens de batchverwerking de betalingsdagboekregels met opeenvolgende documentnummers worden ingevuld, te beginnen met het nummer dat is opgegeven in het veld Eerste documentnr.;
                             NOR=Angir om du vil at kjõrselen skal fylle ut betalingskladdelinjene med dokumentnumre i nummerrekkefõlge, med utgangspunkt i nummeret som er angitt i feltet Startbilagsnr.;
                             SVE=Anger om du vill att batch-jobbet ska fylla i utbetalningsjournalraderna med dokumentnummer i nummerordning och bîrja med dokumentnumret som angetts i fÑltet Fr.o.m. dokumentnr.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocNoPerLine;
                  Importance=Additional }

      { 10  ;3   ;Field     ;
                  Name=BalAccountType;
                  CaptionML=[DEU=Gegenkontoart;
                             ENU=Bal. Account Type;
                             NLD=Tegenrekeningsoort;
                             NOR=Motkontotype;
                             SVE=Motkontotyp];
                  ToolTipML=[DEU=Gibt die Art des Gegenkontos an, auf das Zahlungen im Zahlungsausgangs-Buch.-Blatt gebucht werden.;
                             ENU=Specifies the balancing account type that payments on the payment journal are posted to.;
                             NLD=Hiermee wordt het soort tegenrekening opgegeven waarnaar betalingen in het betalingsdagboek worden geboekt.;
                             NOR=Angir motkontotypen som betalinger i utbetalingskladden bokfõres i.;
                             SVE=Anger typen av balanskonto som betalningar i utbetalningsjournalen bokfîrs till.];
                  OptionCaptionML=[DEU=Sachkonto,,,Bankkonto;
                                   ENU=G/L Account,,,Bank Account;
                                   NLD=Grootboekrekening,,,Bankrekening;
                                   NOR=Finanskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               GenJnlLine2."Bal. Account No." := '';
                             END;
                              }

      { 12  ;3   ;Field     ;
                  Name=BalAccountNo;
                  CaptionML=[DEU=Gegenkontonr.;
                             ENU=Bal. Account No.;
                             NLD=Tegenrekeningnr.;
                             NOR=Motkontonr.;
                             SVE=Motkonto];
                  ToolTipML=[DEU=Gibt die Nummer des Gegenkontos an, auf das Zahlungen im Zahlungsausgangs-Buch.-Blatt gebucht werden.;
                             ENU=Specifies the balancing account number that payments on the payment journal are posted to.;
                             NLD=Hiermee wordt het tegenrekeningnummer opgegeven waarnaar betalingen in het betalingsdagboek worden geboekt.;
                             NOR=Angir motkontonummeret som betalinger i utbetalingskladden bokfõres til.;
                             SVE=Anger numret fîr balanskontot som betalningar i utbetalningsjournalen bokfîrs till.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account No.";
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF GenJnlLine2."Bal. Account No." <> '' THEN
                                 CASE GenJnlLine2."Bal. Account Type" OF
                                   GenJnlLine2."Bal. Account Type"::"G/L Account":
                                     GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                   GenJnlLine2."Bal. Account Type"::Customer,
                                   GenJnlLine2."Bal. Account Type"::Vendor,
                                   GenJnlLine2."Bal. Account Type"::Employee:
                                     ERROR(AccountTypeErr,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                                   GenJnlLine2."Bal. Account Type"::"Bank Account":
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                                 END;
                             END;

                  OnLookup=BEGIN
                             CASE GenJnlLine2."Bal. Account Type" OF
                               GenJnlLine2."Bal. Account Type"::"G/L Account":
                                 IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := GLAcc."No.";
                               GenJnlLine2."Bal. Account Type"::Customer,
                               GenJnlLine2."Bal. Account Type"::Vendor,
                               GenJnlLine2."Bal. Account Type"::Employee:
                                 ERROR(AccountTypeErr,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                               GenJnlLine2."Bal. Account Type"::"Bank Account":
                                 IF PAGE.RUNMODAL(0,BankAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := BankAcc."No.";
                             END;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  Name=BankPaymentType;
                  CaptionML=[DEU=Bankkontozahlungsart;
                             ENU=Bank Payment Type;
                             NLD=Betalingssoort;
                             NOR=Bankbetalingstype;
                             SVE=Bankbetalningstyp];
                  ToolTipML=[DEU=Legt die zu verwendende Scheckart fest, falls Sie die Gegenkontoart "Bankkonto" als Ausgleichskonto verwenden.;
                             ENU=Specifies the check type to be used, if you use Bank Account as the balancing account type.;
                             NLD=Hiermee wordt het soort cheque opgegeven dat wordt gebruikt als u Bankrekening kiest als soort tegenrekening.;
                             NOR=Angir sjekktypen som skal brukes hvis du bruker Bankkonto som motkontotype.;
                             SVE=Anger vilken checktyp som ska anvÑndas, om du anvÑnder Bankkonto som balanskontotyp.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bank Payment Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF (GenJnlLine2."Bal. Account Type" <> GenJnlLine2."Bal. Account Type"::"Bank Account") AND
                                  (GenJnlLine2."Bank Payment Type" > 0)
                               THEN
                                 ERROR(BankPaymentTypeErr);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PostingDateRequiredErr@1001 : TextConst 'DEU=Geben Sie im Feld "Buchungsdatum" das Datum an, das als Buchungsdatum fÅr die Buch.-Blattposten verwendet werden soll.;ENU=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.;NLD=Geef in het veld Boekingsdatum de datum op die wordt gebruikt als de boekingsdatum voor de journaalposten.;NOR=I feltet Bokfõringsdato angir du datoen som skal brukes som bokfõringsdato for kladdepostene.;SVE=I fÑltet Bokfîringsdatum anger du datumet som ska anvÑndas som bokfîringsdatum fîr journalposterna.';
      StartingDocNoErr@1002 : TextConst 'DEU=Geben Sie im Feld "Erste Belegnummer" die erste zu verwendende Belegnummer ein.;ENU=In the Starting Document No. field, specify the first document number to be used.;NLD=Geef in het veld Eerste documentnr. het eerste documentnummer op dat moet worden gebruikt.;NOR=I feltet Startbilagsnr. angir du det fõrste bilagsnummeret som skal brukes.;SVE=I fÑltet Fr.o.m. verifikationsnr anger du fîrsta dokumentnumret som ska anvÑndas.';
      ProcessingEmployeesMsg@1006 : TextConst '@@@=#1########## is for the progress dialog. Don''t translate that part of the string;DEU=Verarbeitung der Mitarbeiter                #1##########;ENU=Processing employees     #1##########;NLD=Werknemers verwerken            #1##########;NOR=Behandler ansatte                  #1##########';
      InsertingJournalLinesMsg@1008 : TextConst '@@@=#1########## is for the progress dialog. Don''t translate that part of the string;DEU=FÅge Zahlungsausgangs Buch.-Blattzeilen ein #1##########;ENU=Inserting payment journal lines #1##########;NLD=Betalingsdagboekregels invoegen #1##########;NOR=Setter inn utbetalingskladdelinjer #1##########;SVE=Infogar utbetalningsjnlrader             #1##########';
      AccountTypeErr@1009 : TextConst '@@@=%1 - balancing account type;DEU=%1 muss ein Sachkonto oder Bankkonto sein.;ENU=%1 must be G/L Account or Bank Account.;NLD=%1 moet Grootboekrekening of Bankrekening zijn.;NOR=%1 mÜ vëre en finans- eller bankkonto.;SVE=%1 mÜste vara ett redovisningskonto eller ett bankkonto.';
      BankPaymentTypeErr@1010 : TextConst 'DEU=Das Feld "Bankkontozahlungsart" muss nur ausgefÅllt werden, wenn die Gegenkontoart "Bankkonto" festgelegt ist.;ENU=Bank Payment Type field must be filled only when Bal. Account Type is set to Bank Account.;NLD=Het veld Betalingssoort moet alleen worden ingevuld als Tegenrekeningsoort is ingesteld op Bankrekening.;NOR=Feltet Bankbetalingstype skal bare fylles ut hvis Motkontotype er satt til Bankkonto.';
      ManualCheckErr@1017 : TextConst 'DEU=Wenn die Bankkontozahlungsart auf "Manueller Scheck" festgelegt ist und Sie das Feld "Pro Mitarbeiter zusammenfassen" nicht aktiviert haben,\ mÅssen Sie "Neue Belegnr. pro Zeile" aktivieren.;ENU=If bank payment type is set to Manual Check, and you have not selected the Summarize per Employee field,\ then you must select the New Doc. No. per Line.;NLD=Als Betalingssoort is ingesteld op Handmatige cheque en u het veld Samenvatten per werknemer niet hebt geselecteerd,\ moet u Nieuw documentnr. per regel selecteren.;NOR=NÜr bankbetalingstype er satt til Manuell sjekk og du ikke har valgt feltet Summer per ansatt,\ mÜ du velge Nytt bilagsnr. per linje.';
      EmployeePaymentLinesCreatedTxt@1022 : TextConst 'DEU=Sie haben vorgeschlagene Mitarbeiterzahlungszeilen erstellt.;ENU=You have created suggested employee payment lines.;NLD=U hebt voorgestelde werknemersbetalingsregels gemaakt.;NOR=Du har opprettet foreslÜtte ansattbetalingslinjer.';
      Empl2@1023 : Record 5200;
      GenJnlTemplate@1024 : Record 80;
      GenJnlBatch@1025 : Record 232;
      GenJnlLine@1026 : Record 81;
      DimSetEntry@1027 : Record 480;
      GenJnlLine2@1028 : Record 81;
      EmployeeLedgerEntry@1029 : Record 5222;
      GLAcc@1030 : Record 15;
      BankAcc@1031 : Record 270;
      TempPayableEmployeeLedgerEntry@1032 : TEMPORARY Record 5224;
      CompanyInformation@1062 : Record 79;
      TempEmplPaymentBuffer@1033 : TEMPORARY Record 5225;
      OldTempEmplPaymentBuffer@1034 : TEMPORARY Record 5225;
      SelectedDim@1035 : Record 369;
      TempEmployeeLedgerEntry@1102601000 : TEMPORARY Record 5222;
      NoSeriesMgt@1036 : Codeunit 396;
      DimMgt@1038 : Codeunit 408;
      DimBufMgt@1018 : Codeunit 411;
      Window@1039 : Dialog;
      Window2@1004 : Dialog;
      PostingDate@1041 : Date;
      NextDocNo@1043 : Code[20];
      AmountAvailable@1044 : Decimal;
      OriginalAmtAvailable@1045 : Decimal;
      SummarizePerEmpl@1047 : Boolean;
      SummarizePerDim@1048 : Boolean;
      SummarizePerDimText@1049 : Text[250];
      LastLineNo@1051 : Integer;
      NextEntryNo@1052 : Integer;
      StopPayments@1053 : Boolean;
      DocNoPerLine@1054 : Boolean;
      BankPmtType@1055 : Option;
      BalAccType@1056 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee';
      BalAccNo@1057 : Code[20];
      MessageText@1058 : Text;
      GenJnlLineInserted@1059 : Boolean;
      UnprocessedEntriesQst@1102601001 : TextConst 'DEU=Es ist mindestens ein Eintrag vorhanden, fÅr den keine ZahlungsvorschlÑge gemacht wurden, weil das Buchungsdatum der EintrÑge hinter dem angeforderten Buchungsdatum liegt. Mîchten Sie die betreffenden EintrÑge anzeigen?;ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?;NLD=Voor een of meer items zijn geen betalingsvoorstellen gegeven, omdat de boekingsdatums van de posten later zijn dan de aangevraagde boekingsdatum. Wilt u de items weergeven?;NOR=Det er Çn eller flere poster hvor det ikke er lagt inn betalingsforslag fordi bokfõringsdatoene for postene er senere enn den forespurte bokfõringsdatoen. Vil du se postene?;SVE=Det finns en eller flera poster fîr vilka inga betalningsfîrslag har gjorts, eftersom deras bokfîringsdatum Ñr senare Ñn det begÑrda bokfîringsdatumet. Vill du visa dessa poster?';
      SummarizePerDimTextEnable@19039578 : Boolean INDATASET;
      ShowPostingDateWarning@1119 : Boolean;
      EmployeeBalance@1065 : Decimal;
      ReplacePostingDateMsg@1064 : TextConst 'DEU=FÅr mindestens einen Eintrag liegt das angeforderte Buchungsdatum vor dem Arbeitsdatum.\\Diese Buchungsdaten nutzen das Arbeitsdatum.;ENU=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.;NLD=Voor een of meer posten ligt de aangevraagde boekingsdatum v¢¢r de werkdatum.\\Voor deze boekingsdatums wordt de werkdatum gebruikt.;NOR=Den forespurte bokfõringsdatoen for Çn eller flere poster er tidligere enn arbeidsdatoen.\\Arbeidsdatoen brukes for disse bokfõringsdatoene.;SVE=Det begÑrda bokfîringsdatumet ligger fîre arbetsdatumet fîr en eller flera poster.\\Dessa bokfîringsdatum kommer att anvÑnda arbetsdatumet.';
      SkipExportedPayments@1019 : Boolean;
      StartingDocumentNoErr@1012 : TextConst 'DEU=Erste Belegnummer;ENU=Starting Document No.;NLD=Eerste documentnr.;NOR=Startbilagsnr.;SVE=Fr.o.m. dokumentnr';
      UnsupportedCurrencyErr@1007 : TextConst 'DEU=Das Gegenkonto muss die LandeswÑhrung haben.;ENU=The balancing bank account must have local currency.;NLD=De tegenbankrekening moet de lokale valuta gebruiken.;NOR=Motbankkontoen mÜ vëre i lokal valuta.';

    [External]
    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGenJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    [External]
    PROCEDURE InitializeRequest@3(NewAvailableAmount@1002 : Decimal;NewSkipExportedPayments@1009 : Boolean;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerEmpl@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee';BalAccNo@1007 : Code[20];BankPmtType@1008 : Option);
    BEGIN
      AmountAvailable := NewAvailableAmount;
      SkipExportedPayments := NewSkipExportedPayments;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerEmpl := NewSummarizePerEmpl;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    LOCAL PROCEDURE GetEmplLedgEntries@13(Positive@1000 : Boolean);
    BEGIN
      EmployeeLedgerEntry.RESET;
      EmployeeLedgerEntry.SETCURRENTKEY("Employee No.",Open,Positive);
      EmployeeLedgerEntry.SETRANGE("Employee No.",Employee."No.");
      EmployeeLedgerEntry.SETRANGE(Open,TRUE);
      EmployeeLedgerEntry.SETRANGE(Positive,Positive);
      EmployeeLedgerEntry.SETRANGE("Applies-to ID",'');

      IF SkipExportedPayments THEN
        EmployeeLedgerEntry.SETRANGE("Exported to Payment File",FALSE);
      EmployeeLedgerEntry.SETFILTER("Global Dimension 1 Code",Employee.GETFILTER("Global Dimension 1 Filter"));
      EmployeeLedgerEntry.SETFILTER("Global Dimension 2 Code",Employee.GETFILTER("Global Dimension 2 Filter"));

      IF EmployeeLedgerEntry.FINDSET THEN
        REPEAT
          SaveAmount;
        UNTIL EmployeeLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        VALIDATE("Posting Date",PostingDate);
        "Document Type" := "Document Type"::Payment;
        "Account Type" := "Account Type"::Employee;
        Empl2.GET(EmployeeLedgerEntry."Employee No.");
        Description := COPYSTR(Empl2.FullName,1,MAXSTRLEN(Description));
        "Posting Group" := Empl2."Employee Posting Group";
        "Salespers./Purch. Code" := Empl2."Salespers./Purch. Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Prod. Posting Group" := '';
        "Gen. Bus. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Currency Code",EmployeeLedgerEntry."Currency Code");
        EmployeeLedgerEntry.CALCFIELDS("Remaining Amount");
        Amount := -EmployeeLedgerEntry."Remaining Amount";
        VALIDATE(Amount);
      END;

      TempPayableEmployeeLedgerEntry."Employee No." := EmployeeLedgerEntry."Employee No.";
      TempPayableEmployeeLedgerEntry."Entry No." := NextEntryNo;
      TempPayableEmployeeLedgerEntry."Employee Ledg. Entry No." := EmployeeLedgerEntry."Entry No.";
      TempPayableEmployeeLedgerEntry.Amount := GenJnlLine.Amount;
      TempPayableEmployeeLedgerEntry.Positive := (TempPayableEmployeeLedgerEntry.Amount > 0);
      TempPayableEmployeeLedgerEntry."Currency Code" := EmployeeLedgerEntry."Currency Code";
      TempPayableEmployeeLedgerEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    LOCAL PROCEDURE CheckAmounts@10();
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      TempPayableEmployeeLedgerEntry.SETRANGE("Employee No.",Employee."No.");

      IF TempPayableEmployeeLedgerEntry.FIND('-') THEN BEGIN
        REPEAT
          IF TempPayableEmployeeLedgerEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance > 0 THEN
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := TempPayableEmployeeLedgerEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + TempPayableEmployeeLedgerEntry.Amount)
          THEN
            CurrencyBalance := CurrencyBalance + TempPayableEmployeeLedgerEntry.Amount
          ELSE
            TempPayableEmployeeLedgerEntry.DELETE;
        UNTIL TempPayableEmployeeLedgerEntry.NEXT = 0;
        IF OriginalAmtAvailable > 0 THEN
          AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      TempPayableEmployeeLedgerEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      RemainingAmtAvailable@1008 : Decimal;
    BEGIN
      TempEmplPaymentBuffer.RESET;
      TempEmplPaymentBuffer.DELETEALL;

      IF BalAccType = BalAccType::"Bank Account" THEN
        CheckCurrencies(BalAccType,BalAccNo);

      IF OriginalAmtAvailable <> 0 THEN BEGIN
        RemainingAmtAvailable := OriginalAmtAvailable;
        RemovePaymentsAboveLimit(TempPayableEmployeeLedgerEntry,RemainingAmtAvailable);
      END;

      CopyEmployeeLedgerEntriesToTempEmplPaymentBuffer(RemainingAmtAvailable);
      CopyTempEmpPaymentBuffersToGenJnlLines;
    END;

    LOCAL PROCEDURE CopyEmployeeLedgerEntriesToTempEmplPaymentBuffer@21(RemainingAmtAvailable@1001 : Decimal);
    VAR
      DimBuf@1000 : Record 360;
    BEGIN
      IF TempPayableEmployeeLedgerEntry.FIND('-') THEN
        REPEAT
          TempPayableEmployeeLedgerEntry.SETRANGE("Employee No.",TempPayableEmployeeLedgerEntry."Employee No.");
          TempPayableEmployeeLedgerEntry.FIND('-');
          REPEAT
            EmployeeLedgerEntry.GET(TempPayableEmployeeLedgerEntry."Employee Ledg. Entry No.");

            TempEmplPaymentBuffer."Employee No." := EmployeeLedgerEntry."Employee No.";
            TempEmplPaymentBuffer."Currency Code" := EmployeeLedgerEntry."Currency Code";
            TempEmplPaymentBuffer."Payment Method Code" := EmployeeLedgerEntry."Payment Method Code";
            TempEmplPaymentBuffer."Creditor No." := EmployeeLedgerEntry."Creditor No.";
            TempEmplPaymentBuffer."Payment Reference" := EmployeeLedgerEntry."Payment Reference";
            TempEmplPaymentBuffer."Exported to Payment File" := EmployeeLedgerEntry."Exported to Payment File";

            SetTempEmplPaymentBufferDims(DimBuf);

            EmployeeLedgerEntry.CALCFIELDS("Remaining Amount");

            IF SummarizePerEmpl THEN BEGIN
              TempEmplPaymentBuffer."Employee Ledg. Entry No." := 0;
              IF TempEmplPaymentBuffer.FIND THEN BEGIN
                TempEmplPaymentBuffer.Amount := TempEmplPaymentBuffer.Amount + TempPayableEmployeeLedgerEntry.Amount;
                TempEmplPaymentBuffer.MODIFY;
              END ELSE BEGIN
                TempEmplPaymentBuffer."Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
                TempEmplPaymentBuffer.Amount := TempPayableEmployeeLedgerEntry.Amount;
                Window2.UPDATE(1,EmployeeLedgerEntry."Employee No.");
                TempEmplPaymentBuffer.INSERT;
              END;
              EmployeeLedgerEntry."Applies-to ID" := TempEmplPaymentBuffer."Document No.";
            END ELSE
              IF NOT IsEntryAlreadyApplied(GenJnlLine,EmployeeLedgerEntry) THEN BEGIN
                TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type" := EmployeeLedgerEntry."Document Type";
                TempEmplPaymentBuffer."Employee Ledg. Entry Doc. No." := EmployeeLedgerEntry."Document No.";
                TempEmplPaymentBuffer."Global Dimension 1 Code" := EmployeeLedgerEntry."Global Dimension 1 Code";
                TempEmplPaymentBuffer."Global Dimension 2 Code" := EmployeeLedgerEntry."Global Dimension 2 Code";
                TempEmplPaymentBuffer."Dimension Set ID" := EmployeeLedgerEntry."Dimension Set ID";
                TempEmplPaymentBuffer."Employee Ledg. Entry No." := EmployeeLedgerEntry."Entry No.";
                TempEmplPaymentBuffer.Amount := TempPayableEmployeeLedgerEntry.Amount;
                Window2.UPDATE(1,EmployeeLedgerEntry."Employee No.");
                TempEmplPaymentBuffer.INSERT;
              END;

            EmployeeLedgerEntry."Amount to Apply" := EmployeeLedgerEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",EmployeeLedgerEntry);

            TempPayableEmployeeLedgerEntry.DELETE;
            IF OriginalAmtAvailable <> 0 THEN BEGIN
              RemainingAmtAvailable := RemainingAmtAvailable - TempPayableEmployeeLedgerEntry.Amount;
              RemovePaymentsAboveLimit(TempPayableEmployeeLedgerEntry,RemainingAmtAvailable);
            END;

          UNTIL NOT TempPayableEmployeeLedgerEntry.FINDSET;
          TempPayableEmployeeLedgerEntry.DELETEALL;
          TempPayableEmployeeLedgerEntry.SETRANGE("Employee No.");
        UNTIL NOT TempPayableEmployeeLedgerEntry.FIND('-');
    END;

    LOCAL PROCEDURE CopyTempEmpPaymentBuffersToGenJnlLines@11();
    VAR
      Employee@1000 : Record 5200;
    BEGIN
      CLEAR(OldTempEmplPaymentBuffer);
      TempEmplPaymentBuffer.SETCURRENTKEY("Document No.");
      TempEmplPaymentBuffer.SETFILTER(
        "Employee Ledg. Entry Doc. Type",'<>%1&<>%2',TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type"::Refund,
        TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type"::Payment);
      IF TempEmplPaymentBuffer.FINDSET THEN
        REPEAT
          WITH GenJnlLine DO BEGIN
            INIT;
            Window2.UPDATE(1,TempEmplPaymentBuffer."Employee No.");
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            "Document Type" := "Document Type"::Payment;
            "Posting No. Series" := GenJnlBatch."Posting No. Series";
            IF SummarizePerEmpl THEN
              "Document No." := TempEmplPaymentBuffer."Document No."
            ELSE
              IF DocNoPerLine THEN BEGIN
                IF TempEmplPaymentBuffer.Amount < 0 THEN
                  "Document Type" := "Document Type"::Refund;

                "Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
              END ELSE
                IF (TempEmplPaymentBuffer."Employee No." = OldTempEmplPaymentBuffer."Employee No.") AND
                   (TempEmplPaymentBuffer."Currency Code" = OldTempEmplPaymentBuffer."Currency Code")
                THEN
                  "Document No." := OldTempEmplPaymentBuffer."Document No."
                ELSE BEGIN
                  "Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  OldTempEmplPaymentBuffer := TempEmplPaymentBuffer;
                  OldTempEmplPaymentBuffer."Document No." := "Document No.";
                END;
            "Account Type" := "Account Type"::Employee;
            SetHideValidation(TRUE);
            VALIDATE("Posting Date",PostingDate);
            VALIDATE("Account No.",TempEmplPaymentBuffer."Employee No.");
            VALIDATE("Recipient Bank Account",TempEmplPaymentBuffer."Employee No.");
            Employee.GET(TempEmplPaymentBuffer."Employee No.");

            "Bal. Account Type" := BalAccType;
            VALIDATE("Bal. Account No.",BalAccNo);
            VALIDATE("Currency Code",TempEmplPaymentBuffer."Currency Code");
            "Message to Recipient" := CompanyInformation.Name;
            "Bank Payment Type" := BankPmtType;
            IF SummarizePerEmpl THEN
              "Applies-to ID" := "Document No.";
            Description := COPYSTR(Employee.FullName,1,MAXSTRLEN(Description));
            "Source Line No." := TempEmplPaymentBuffer."Employee Ledg. Entry No.";
            "Shortcut Dimension 1 Code" := TempEmplPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempEmplPaymentBuffer."Global Dimension 2 Code";
            "Dimension Set ID" := TempEmplPaymentBuffer."Dimension Set ID";
            "Source Code" := GenJnlTemplate."Source Code";
            "Reason Code" := GenJnlBatch."Reason Code";
            VALIDATE(Amount,TempEmplPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempEmplPaymentBuffer."Employee Ledg. Entry Doc. No.";
            "Payment Method Code" := TempEmplPaymentBuffer."Payment Method Code";
            "Creditor No." := COPYSTR(TempEmplPaymentBuffer."Creditor No.",1,MAXSTRLEN("Creditor No."));
            "Payment Reference" := COPYSTR(TempEmplPaymentBuffer."Payment Reference",1,MAXSTRLEN("Payment Reference"));
            "Exported to Payment File" := TempEmplPaymentBuffer."Exported to Payment File";
            "Applies-to Ext. Doc. No." := TempEmplPaymentBuffer."Applies-to Ext. Doc. No.";

            UpdateDimensions(GenJnlLine);
            INSERT;
            GenJnlLineInserted := TRUE;
          END;
        UNTIL TempEmplPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateDimensions@17(VAR GenJnlLine@1005 : Record 81);
    VAR
      DimBuf@1002 : Record 360;
      TempDimSetEntry@1001 : TEMPORARY Record 480;
      TempDimSetEntry2@1000 : TEMPORARY Record 480;
      DimVal@1004 : Record 349;
      NewDimensionID@1003 : Integer;
      DimSetIDArr@1006 : ARRAY [10] OF Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        NewDimensionID := "Dimension Set ID";
        IF SummarizePerEmpl THEN BEGIN
          DimBuf.RESET;
          DimBuf.DELETEALL;
          DimBufMgt.GetDimensions(TempEmplPaymentBuffer."Dimension Entry No.",DimBuf);
          IF DimBuf.FINDSET THEN
            REPEAT
              DimVal.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
              TempDimSetEntry."Dimension Code" := DimBuf."Dimension Code";
              TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
              TempDimSetEntry."Dimension Value Code" := DimBuf."Dimension Value Code";
              TempDimSetEntry.INSERT;
            UNTIL DimBuf.NEXT = 0;
          NewDimensionID := DimMgt.GetDimensionSetID(TempDimSetEntry);
          "Dimension Set ID" := NewDimensionID;
        END;
        CreateDim(
          DimMgt.TypeToTableID1("Account Type"),"Account No.",
          DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
          DATABASE::Job,"Job No.",
          DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
          DATABASE::Campaign,"Campaign No.",
          //**4PS.sn
          0,'',
          0,'',
          0,'');
          //**4PS.en
        IF NewDimensionID <> "Dimension Set ID" THEN BEGIN
          DimSetIDArr[2] := NewDimensionID;
          DimSetIDArr[1] := "Dimension Set ID";
          "Dimension Set ID" :=
            DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        END;

        IF SummarizePerEmpl THEN BEGIN
          DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
          IF AdjustAgainstSelectedDim(TempDimSetEntry,TempDimSetEntry2) THEN
            "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
            "Shortcut Dimension 2 Code");
        END;
      END;
    END;

    LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text);
    BEGIN
      IF GenJnlLineInserted THEN BEGIN
        IF ShowPostingDateWarning THEN
          Text += ReplacePostingDateMsg;
        IF Text <> '' THEN
          MESSAGE(Text);
      END;
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee';BalAccNo@1001 : Code[20]);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN
            ERROR(UnsupportedCurrencyErr);

          MessageText := EmployeePaymentLinesCreatedTxt;
        END;
    END;

    LOCAL PROCEDURE ClearNegative@8();
    VAR
      TempCurrency@1000 : TEMPORARY Record 4;
      TempPayableEmplLedgEntry2@1001 : TEMPORARY Record 5224;
      CurrencyBalance@1002 : Decimal;
    BEGIN
      CLEAR(TempPayableEmployeeLedgerEntry);
      TempPayableEmployeeLedgerEntry.SETRANGE("Employee No.",Employee."No.");

      WHILE TempPayableEmployeeLedgerEntry.NEXT <> 0 DO BEGIN
        TempCurrency.Code := TempPayableEmployeeLedgerEntry."Currency Code";
        CurrencyBalance := 0;
        IF TempCurrency.INSERT THEN BEGIN
          TempPayableEmplLedgEntry2 := TempPayableEmployeeLedgerEntry;
          TempPayableEmplLedgEntry2.SETRANGE("Currency Code",TempPayableEmployeeLedgerEntry."Currency Code");
          REPEAT
            CurrencyBalance := CurrencyBalance + TempPayableEmployeeLedgerEntry.Amount
          UNTIL TempPayableEmployeeLedgerEntry.NEXT = 0;
          IF CurrencyBalance < 0 THEN BEGIN
            TempPayableEmployeeLedgerEntry.DELETEALL;
            AmountAvailable += CurrencyBalance;
          END;
          TempPayableEmployeeLedgerEntry.SETRANGE("Currency Code");
          TempPayableEmployeeLedgerEntry := TempPayableEmplLedgEntry2;
        END;
      END;
      TempPayableEmployeeLedgerEntry.RESET;
    END;

    LOCAL PROCEDURE DimCodeIsInDimBuf@1101(DimCode@1111 : Code[20];DimBuf@1112 : Record 360) : Boolean;
    BEGIN
      DimBuf.RESET;
      DimBuf.SETRANGE("Dimension Code",DimCode);
      EXIT(NOT DimBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE RemovePaymentsAboveLimit@5(VAR PayableEmplLedgEntry@1000 : Record 5224;RemainingAmtAvailable@1001 : Decimal);
    BEGIN
      PayableEmplLedgEntry.SETFILTER(Amount,'>%1',RemainingAmtAvailable);
      PayableEmplLedgEntry.DELETEALL;
      PayableEmplLedgEntry.SETRANGE(Amount);
    END;

    LOCAL PROCEDURE InsertDimBuf@9(VAR DimBuf@1004 : Record 360;TableID@1000 : Integer;EntryNo@1001 : Integer;DimCode@1002 : Code[20];DimValue@1003 : Code[20]);
    BEGIN
      DimBuf.INIT;
      DimBuf."Table ID" := TableID;
      DimBuf."Entry No." := EntryNo;
      DimBuf."Dimension Code" := DimCode;
      DimBuf."Dimension Value Code" := DimValue;
      DimBuf.INSERT;
    END;

    LOCAL PROCEDURE AdjustAgainstSelectedDim@16(VAR TempDimSetEntry@1000 : TEMPORARY Record 480;VAR TempDimSetEntry2@1003 : TEMPORARY Record 480) : Boolean;
    BEGIN
      IF SelectedDim.FINDSET THEN BEGIN
        REPEAT
          TempDimSetEntry.SETRANGE("Dimension Code",SelectedDim."Dimension Code");
          IF TempDimSetEntry.FINDFIRST THEN BEGIN
            TempDimSetEntry2.TRANSFERFIELDS(TempDimSetEntry,TRUE);
            TempDimSetEntry2.INSERT;
          END;
        UNTIL SelectedDim.NEXT = 0;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetTempEmplPaymentBufferDims@12(VAR DimBuf@1000 : Record 360);
    VAR
      GLSetup@1003 : Record 98;
      EntryNo@1001 : Integer;
    BEGIN
      IF SummarizePerDim THEN BEGIN
        DimBuf.RESET;
        DimBuf.DELETEALL;
        IF SelectedDim.FIND('-') THEN
          REPEAT
            IF DimSetEntry.GET(
                 EmployeeLedgerEntry."Dimension Set ID",SelectedDim."Dimension Code")
            THEN
              InsertDimBuf(DimBuf,DATABASE::"Dimension Buffer",0,DimSetEntry."Dimension Code",
                DimSetEntry."Dimension Value Code");
          UNTIL SelectedDim.NEXT = 0;
        EntryNo := DimBufMgt.FindDimensions(DimBuf);
        IF EntryNo = 0 THEN
          EntryNo := DimBufMgt.InsertDimensions(DimBuf);
        TempEmplPaymentBuffer."Dimension Entry No." := EntryNo;
        IF TempEmplPaymentBuffer."Dimension Entry No." <> 0 THEN BEGIN
          GLSetup.GET;
          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 1 Code",DimBuf) THEN
            TempEmplPaymentBuffer."Global Dimension 1 Code" := EmployeeLedgerEntry."Global Dimension 1 Code"
          ELSE
            TempEmplPaymentBuffer."Global Dimension 1 Code" := '';
          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 2 Code",DimBuf) THEN
            TempEmplPaymentBuffer."Global Dimension 2 Code" := EmployeeLedgerEntry."Global Dimension 2 Code"
          ELSE
            TempEmplPaymentBuffer."Global Dimension 2 Code" := '';
        END ELSE BEGIN
          TempEmplPaymentBuffer."Global Dimension 1 Code" := '';
          TempEmplPaymentBuffer."Global Dimension 2 Code" := '';
        END;
        TempEmplPaymentBuffer."Dimension Set ID" := EmployeeLedgerEntry."Dimension Set ID";
      END ELSE BEGIN
        TempEmplPaymentBuffer."Dimension Entry No." := 0;
        TempEmplPaymentBuffer."Global Dimension 1 Code" := '';
        TempEmplPaymentBuffer."Global Dimension 2 Code" := '';
        TempEmplPaymentBuffer."Dimension Set ID" := 0;
      END;
    END;

    LOCAL PROCEDURE IsEntryAlreadyApplied@19(GenJnlLine3@1000 : Record 81;EmplLedgEntry2@1001 : Record 5222) : Boolean;
    VAR
      GenJnlLine4@1002 : Record 81;
    BEGIN
      GenJnlLine4.SETRANGE("Journal Template Name",GenJnlLine3."Journal Template Name");
      GenJnlLine4.SETRANGE("Journal Batch Name",GenJnlLine3."Journal Batch Name");
      GenJnlLine4.SETRANGE("Account Type",GenJnlLine4."Account Type"::Employee);
      GenJnlLine4.SETRANGE("Account No.",EmplLedgEntry2."Employee No.");
      GenJnlLine4.SETRANGE("Applies-to Doc. Type",EmplLedgEntry2."Document Type");
      GenJnlLine4.SETRANGE("Applies-to Doc. No.",EmplLedgEntry2."Document No.");
      EXIT(NOT GenJnlLine4.ISEMPTY);
    END;

    LOCAL PROCEDURE SetDefaults@14();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      GenJnlLine2."Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      GenJnlLine2."Bal. Account No." := GenJnlBatch."Bal. Account No.";
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

