OBJECT Codeunit 11128088 Text Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE7.02 (12047967);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PEB001@12047960 : TextConst 'ENU=The UTF-8 encoded text can not be longer than 254 characters. \ Length: %1;SVE=Den UTF-8-kodade texten f†r inte vara l„ngre „n 254 tecken.\L„ngd: %1';
      gStreamWriter@12047966 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      gStreamReader@12047965 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      gFileHelperClient@1100570002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File" RUNONCLIENT;
      gPathHelper@1100570004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      gClientTempPath@1100570008 : Text;
      gFileLenRead@12047964 : Integer;
      gWriteToFilename@12047963 : Text;
      gWriteToClientFilename@12047962 : Text;
      PEB002@1100570001 : TextConst 'ENU=You must specify a source file name.;NOR=Du m† angi en kilde filnavn.;SVE=Du m†ste ange ett k„llfilnamn';
      PEB003@1100570000 : TextConst 'ENU=You must specify a target file name.;NOR=u m† angi et m†l filnavn.;SVE=Du m†ste ange ett m†lfilnamn';
      PEB004@1100570005 : TextConst 'ENU=The file %1 does not exist.;NOR=Filen %1 finnes ikke.;SVE=Filen %1 finns inte.';
      PEB006@1100570006 : TextConst 'ENU=All Files (*.*)|*.*;NOR=Alle filer (*.*)|*.*;SVE=Alla filer (*.*)|*.*';
      PEB007@1100570007 : TextConst 'ENU=The file %1 has not been downloaded.\\"%2";SVE=Filen %1 har inte ”verf”rts till klienten.\\"%2"';
      gAppendToFile@12047958 : Boolean;
      gVPMgt@12047959 : Codeunit 11128061;

    PROCEDURE FindSplitPos@1000000000(pTxt@1000000000 : Text;pMaxLen@1000000001 : Integer) : Integer;
    VAR
      i@1000000002 : Integer;
    BEGIN
      // Returns the appropriate position to split a string on
      // Taking into account the last full word before pMaxlen
      // So that, if possible, do not cut the string in the middle of a word
      // (Words longer than pMaxlen must be cut)
      // Consideration is given to the following delimiter '. -:;)>!? &% / "'

      // Parameters:
      // pTxt = Text processing
      // pMaxLen = max "duration" allowed

      // Example:
      //           1234567890123456789012345678901234567890123456789
      // LongTxt:='En l†ng str„ng med m†nga mycket l†nga konstiga ord';
      // WHILE LongTxt>'' DO BEGIN
      // Find the best pos maximum of 30 chars
      // N = FindSplitPos (LongTxt, 30);
      // Copy up to this item
      // RowToInsert: = COPYSTR (LongTxt, 1, n); => 'En l†ng str„ng med m†nga '
      // And continue with the rest
      // LongTxt: = COPYSTR (LongTxt, n +1) => 'mycket l†nga konstiga ord'
      // END;

      IF STRLEN(pTxt) <= pMaxLen THEN
        EXIT(pMaxLen);

      pTxt := COPYSTR(pTxt,1,pMaxLen);
      FOR i := pMaxLen DOWNTO 1 DO BEGIN
        IF STRPOS(' ,.-:;)>!?&%/"' , FORMAT(pTxt[i]) ) > 0 THEN
          EXIT(i);
      END;
      EXIT(pMaxLen);
    END;

    PROCEDURE RemoveTextBetween@1000000001(pTxt@1000000000 : Text;pLeft@1000000001 : Text[1];pRight@1000000002 : Text[1]) : Text;
    VAR
      LeftPos@1000000003 : Integer;
      RightPos@1000000004 : Integer;
    BEGIN
      // Removes all text between two delimiting characters

      // Parameters:
      // pTxt = Text processing
      // pLeft = Left delimiter
      // pRight = Right delimiter

      // Example:
      // txt := '<HTML><BODY><P><SPAN lang=sv><FONT face=Arial size=2>Hej Bo<BR><BR>Tackar f”r avtalet ';
      // RemoveTextBetween(txt,'<','>');  => 'Hej BoTackar f”r avtalet '

      LeftPos := STRPOS(pTxt,pLeft);
      WHILE LeftPos > 0 DO BEGIN
        RightPos := LeftPos+STRPOS( COPYSTR(pTxt,LeftPos+1),pRight);
        CASE TRUE OF
        RightPos <= LeftPos:
          pTxt := COPYSTR(pTxt,1,LeftPos-1);
        RightPos > LeftPos:
          pTxt := DELSTR(pTxt,LeftPos,RightPos-LeftPos+1);
        END;
        LeftPos := STRPOS(pTxt,pLeft);
      END;

      EXIT(pTxt);
    END;

    PROCEDURE Capitalize@1000000006(pTxt@1000000000 : Text) rLRet : Text;
    VAR
      n@1000000001 : Integer;
      i@1000000002 : Integer;
      Up@1000000003 : Boolean;
      Pos@1000000004 : Integer;
      UpperWords@1000000005 : ARRAY [10] OF Text;
      LowerWords@1000000006 : ARRAY [10] OF Text;
    BEGIN
      // Make a string so that the first letter of each word is uppercase


      // Parameters:


      // pTxt= Text to process

      // Example:
      // Capitalize("nab solutions ab') => Nab Solutions AB

      pTxt := LOWERCASE(pTxt);
      n := STRLEN(pTxt);
      Up := TRUE;

      FOR i := 1 TO n DO BEGIN
        IF Up THEN
          rLRet += UPPERCASE(FORMAT(pTxt[i]))
        ELSE
          rLRet += FORMAT(pTxt[i]);
        Up := (STRPOS(' 0123456789,-./&()?!',FORMAT(pTxt[i])) > 0);
      END;

      // The following words should be uppercase
      UpperWords[1]:='Ab';
      UpperWords[2]:='Hb';
      UpperWords[3]:='Kb';
      UpperWords[4]:='Ii';
      UpperWords[5]:='Iii';
      UpperWords[6]:='Iv';
      UpperWords[7]:='If';

      // The following words should be lowercase
      LowerWords[1]:='C/O';
      LowerWords[2]:='Bv';
      LowerWords[3]:='Och';

      FOR i := 1 TO ARRAYLEN(UpperWords) DO BEGIN
        n := STRLEN(UpperWords[i]);
        IF (n > 0) AND (STRLEN(pTxt) >= n)THEN BEGIN
          Pos := STRPOS(' ' + rLRet + ' ',' ' + UpperWords[i] + ' ');
          WHILE Pos > 0 DO BEGIN
            rLRet := COPYSTR(rLRet,1,Pos-1) +
               UPPERCASE(UpperWords[i]) +
               COPYSTR(rLRet,Pos+n);
            Pos := STRPOS(' ' + rLRet + ' ',' ' + UpperWords[i] + ' ');
          END;
        END;
      END;

      FOR i := 1 TO ARRAYLEN(LowerWords) DO BEGIN
        n := STRLEN(LowerWords[i]);
        IF (n > 0) AND (STRLEN(pTxt) >= n)THEN BEGIN
          Pos := STRPOS(' ' + rLRet + ' ',' ' + LowerWords[i] + ' ');
          WHILE Pos > 0 DO BEGIN
            rLRet := COPYSTR(rLRet,1,Pos-1) +
               LOWERCASE(LowerWords[i]) +
               COPYSTR(rLRet,Pos + n);
            Pos := STRPOS(' ' + rLRet + ' ',' ' + LowerWords[i]+' ');
          END;
        END;
      END;
    END;

    PROCEDURE RemoveText@1000000008(pTxt@1000000000 : Text;pStr@1000000001 : Text) : Text;
    VAR
      Pos@1000000002 : Integer;
    BEGIN
      // A variation on DelChr that removes all strings that is longer than one char
      // Removes all occurrences of the string pSTR from pTxt

      // Parametrar:
      // pTxt=  Text att bearbeta
      // pStr=  Text att ta bort

      // Example
      // RemoveText('alla<BR>balla<BR>killar','<BR>') => 'allaballakillar'

      Pos := STRPOS(pTxt,pStr);
      WHILE Pos > 0 DO BEGIN
        CASE TRUE OF
         STRLEN(pStr) = 1:
           pTxt := DELCHR(pTxt,'=',pStr);
         pTxt = pStr:
           pTxt := '';
         Pos = 1:
           pTxt := COPYSTR(pTxt,STRLEN(pTxt));
         Pos>1:
           pTxt := COPYSTR(pTxt,1,Pos-1)+COPYSTR(pTxt,Pos+STRLEN(pStr));
        END;
        Pos := STRPOS(pTxt,pStr);
      END;
      EXIT(pTxt);
    END;

    PROCEDURE ReplaceText@1000000007(pTxt@1000000000 : Text;pFrom@1000000001 : Text;pTo@1000000002 : Text) : Text;
    VAR
      FromLen@1000000003 : Integer;
      ToLen@1000000005 : Integer;
      Pos@1000000004 : Integer;
    BEGIN
      // A variant of ConvertStr that manages the entire string that is longer than one char
      // Replaces all occurrences of the string pFrom with pTo from

      // Parameters:
      // pTxt = Text processing
      // pFrom= What replaced
      // pTo=   The pFrom is replaced by

      // Expamle:
      // ReplaceText('alla<BR>balla<BR>killar','<BR>',' ') => 'alla balla killar'

      FromLen := STRLEN(pFrom);
      ToLen := STRLEN(pTo);
      CASE TRUE OF
        (FromLen = 0):
          EXIT(pTxt);
        (FromLen = 1)  AND (ToLen <= 1):
          EXIT(CONVERTSTR(pTxt,pFrom,pTo));
        (FromLen = 1):
          pTxt := CONVERTSTR(pTxt,pFrom,'^');
        ELSE BEGIN
          Pos := STRPOS(pTxt,pFrom);
          WHILE Pos > 0 DO BEGIN
            pTxt := COPYSTR(pTxt,1,Pos-1) + '^' + COPYSTR(pTxt,Pos+FromLen);
            Pos := STRPOS(pTxt,pFrom);
          END;
        END;
      END;

      IF ToLen = 1 THEN
        EXIT(CONVERTSTR(pTxt,'^',pTo));

      Pos := STRPOS(pTxt,'^');
      WHILE Pos > 0 DO BEGIN
        pTxt := COPYSTR(pTxt,1,Pos-1) + pTo+COPYSTR(pTxt,Pos+1);
        Pos := STRPOS(pTxt,'^');
      END;

      EXIT(pTxt);
    END;

    PROCEDURE SelectStr2@1000000002(pNo@1000000001 : Integer;pTxt@1000000000 : Text;pDelimiter@1000000002 : Text[1]) : Text;
    VAR
      Counter@1000000003 : Integer;
      Pos@1000000004 : Integer;
      Reverse@1000000005 : Boolean;
    BEGIN
      // Returns a specific "word" from a string (much improved SELECTSTR)
      // If nothing is found '' is returned

      // Parametrar:
      // pTxt=  Text att bearbeta
      // pNo=  Which word do you want (If pNo < 0 retrieved word from right)
      // pDelimiter = The delimiter to be used


      // Example:
      // SelectStr2(1,'C:\path1\path2\fil.txt','\')  => C:
      // SelectStr2(-1,'C:\path1\path2\fil.txt','\') => fil.txt
      // SelectStr2(-1,'C:\path1\path2\fil.txt','.') => txt
      // SelectStr2(-2,'C:\path1\path2\fil.txt','.') => C:\path1\path2\fil
      // SelectStr2(-1,SelectStr2(-2,'C:\path1\path2\fil.txt','.'),'\') => fil

      // SelectStr2( 3,'a123-b31231-c1231-d342','-')  => 'c1231'
      // SelectStr2( 2,'a123--c1231-d342','-')        => ''
      // SelectStr2(12,'a123-b31231-c1231-d342','-')  => ''

      IF pNo=0 THEN
        EXIT('');

      Reverse:=(pNo<0);

      // If you want to get the word from the right
      IF Reverse THEN BEGIN
        pTxt := ReverseStr(pTxt);
        pNo := ABS(pNo);
      END;

      pTxt := pTxt + pDelimiter;

      // find the right word
      Counter := 1;
      WHILE (Counter<pNo) DO BEGIN
        pTxt := COPYSTR(pTxt, STRPOS(pTxt,pDelimiter)+1);
        Counter += 1;
      END;

      //Find next delimiter
      Pos := STRPOS(pTxt, pDelimiter);
      IF (Pos>0) THEN
         pTxt := COPYSTR(pTxt,1,Pos-1)
      ELSE
         EXIT('');

      IF Reverse THEN
        EXIT(ReverseStr(pTxt))
      ELSE
        EXIT(pTxt);
    END;

    PROCEDURE ReverseStr@1000000003(pTxt@1000000000 : Text) rTxt : Text;
    VAR
      i@1000000001 : Integer;
    BEGIN
      // Reversing a string

      // Parameters:
      // pTxt = Text processing

      // Example:
      // ReverseStr('123') => '321'

      FOR i:=STRLEN(pTxt) DOWNTO 1 DO
        rTxt += FORMAT(pTxt[i]);
    END;

    PROCEDURE CleanTxt@12047958(pText@1000000000 : Text) rText : Text;
    BEGIN
      EXIT(gVPMgt.CleanTxt(pText));
    END;

    PROCEDURE WriteFileOpen@12047975(pFileName@12047958 : Text;pFileToClient@12047962 : Boolean;pEncoding@12047959 : Integer;pAppend@1100570001 : Boolean);
    VAR
      Encoding@12047960 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      // Here on this link you can find Encodings like, 1252=ANSI, 437=OEM, 65000=UTF7, 65001=UTF8
      //http://msdn.microsoft.com/en-us/library/system.text.encodinginfo.codepage.aspx

      IF pFileToClient THEN BEGIN
        gWriteToFilename := ServerTempFileName('.txt');
        gWriteToClientFilename := pFileName;
      END ELSE BEGIN
        gWriteToFilename := pFileName;
        gWriteToClientFilename := '';
      END;

      IF pEncoding <> 0 THEN
        gStreamWriter := gStreamWriter.StreamWriter(gWriteToFilename, pAppend, Encoding.GetEncoding(pEncoding))
      ELSE
        gStreamWriter := gStreamWriter.StreamWriter(gWriteToFilename, pAppend, Encoding.GetEncoding(1252)); // Ansi
    END;

    PROCEDURE WriteToFile@12047974(pText@12047958 : Text);
    BEGIN
      gStreamWriter.WriteLine(pText);
    END;

    PROCEDURE WriteFileClose@12047973();
    BEGIN
      gStreamWriter.Close();
      IF gWriteToClientFilename <> '' THEN
        DownloadToFile(gWriteToFilename,gWriteToClientFilename);
    END;

    PROCEDURE ReadFileOpen@12047972(pFileName@12047960 : Text;pFileOnClient@12047959 : Boolean;pEncoding@12047958 : Integer);
    VAR
      Encoding@12047962 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      ServerFileName@12047963 : Text;
      FileRead@1100570000 : File;
    BEGIN
      // Here on this link you can find Encodings like, 1252=ANSI, 437=OEM, 65000=UTF7, 65001=UTF8
      //http://msdn.microsoft.com/en-us/library/system.text.encodinginfo.codepage.aspx

      IF pFileOnClient THEN BEGIN
        ServerFileName := UploadFile(pFileName);
      END ELSE BEGIN
        ServerFileName := pFileName;
      END;
      FileRead.OPEN(ServerFileName);
      gFileLenRead := FileRead.LEN;
      FileRead.CLOSE;

      IF pEncoding <> 0 THEN
        gStreamReader := gStreamReader.StreamReader(ServerFileName,Encoding.GetEncoding(pEncoding))
      ELSE
        gStreamReader := gStreamReader.StreamReader(ServerFileName,Encoding.GetEncoding(1252)); // Ansi
    END;

    PROCEDURE ReadFromFile@12047971(VAR pvText@12047960 : Text) : Boolean;
    VAR
      Encoding@12047958 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      IF gStreamReader.Peek() = -1 THEN BEGIN
        pvText := '';
        EXIT(FALSE);
      END ELSE BEGIN
        pvText := gStreamReader.ReadLine;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ReadFileClose@12047969();
    BEGIN
      gStreamReader.Close;
    END;

    PROCEDURE ReadFileLength@12047966() rLen : Integer;
    BEGIN
      EXIT(gFileLenRead);
    END;

    LOCAL PROCEDURE ReadLongTextLineExample@12047960();
    VAR
      TextLine@12047964 : Text;
      TextMgt@12047960 : Codeunit 11128088;
      i@12047958 : Integer;
      n@12047959 : Integer;
      w@12047961 : Dialog;
    BEGIN
      // This example reads text lines of a file unlimited length

      //Reads from Client, ANSI Encoding
      TextMgt.ReadFileOpen('H:\TEMP\TestWriteRead.TXT',TRUE,0);
      n := TextMgt.ReadFileLength;
      w.OPEN('@1@@@@@@@@@@@@@@@@');

      WHILE TextMgt.ReadFromFile(TextLine) DO BEGIN
        IF (i MOD ((n DIV 100) + (99 DIV n)) = 0) OR (n < 100) THEN
          w.UPDATE(1,ROUND(i/n*10000,1.0));
        i += STRLEN(TextLine);

        IF CONFIRM('Text "%1"',FALSE,TextLine) THEN ERROR('');
      END;

      TextMgt.ReadFileClose;
      w.CLOSE;
    END;

    LOCAL PROCEDURE WriteLongTextLineExample@12047961();
    VAR
      TextLine@12047964 : Text;
      TextMgt@12047960 : Codeunit 11128088;
      i@12047958 : Integer;
      n@12047959 : Integer;
      w@12047961 : Dialog;
      Customer@12047962 : Record 18;
    BEGIN
      // This example write text lines to a file with unlimited records length

      //Write to Client, ANSI Encoding
      TextMgt.WriteFileOpen('H:\TEMP\TestWriteRead.TXT',TRUE,0,FALSE);

      // If you like to Appand the file set this property
      TextMgt.SetAppendToFile := TRUE;

      n := Customer.COUNT;
      w.OPEN('@1@@@@@@@@@@@@@@@@');
      IF Customer.FINDSET THEN REPEAT

        IF (i MOD ((n DIV 100) + (99 DIV n)) = 0) OR (n < 100) THEN
          w.UPDATE(1,ROUND(i/n*10000,1.0));
        i += 1;

        TextMgt.WriteToFile(Customer.Name);
      UNTIL Customer.NEXT = 0;

      TextMgt.WriteFileClose;
      w.CLOSE;
    END;

    LOCAL PROCEDURE CopyTextLineExample@1100570000();
    VAR
      Line@1100570000 : Text;
      TextMgt@12047958 : Codeunit 11128088;
    BEGIN
      TextMgt.ReadFileOpen('H:\TEMP\TestWriteRead.TXT',TRUE,0);
      TextMgt.WriteFileOpen('H:\TEMP\TestWriteReadOut.TXT',TRUE,0,FALSE);
      TextMgt.WriteToFile('======= New Text file Satart =======');
      WHILE TextMgt.ReadFromFile(Line) DO BEGIN

        TextMgt.WriteToFile(Line);
      END;
      TextMgt.WriteToFile('======= New Text file End =======');

      TextMgt.ReadFileClose;
      TextMgt.WriteFileClose;
      MESSAGE('Done');
    END;

    LOCAL PROCEDURE ServerTempFileName@1100570013(FileExtension@1002 : Text) rFileName : Text;
    VAR
      TempFile@1000 : File;
    BEGIN
      TempFile.CREATETEMPFILE;
      rFileName := TempFile.NAME + '.' + FileExtension;
      TempFile.CLOSE;
    END;

    LOCAL PROCEDURE DownloadToFile@1100570007(TempFileName@1002 : Text;FileName@1000 : Text);
    BEGIN
      IF TempFileName = '' THEN
        ERROR(PEB002);

      IF FileName = '' THEN
        ERROR(PEB003);

      TempFileName := DownloadTempFile(TempFileName);
      MoveFile(TempFileName,FileName);
    END;

    LOCAL PROCEDURE UploadFile@1100570011(ClientFilePath@1001 : Text) : Text;
    VAR
      ServerFileName@1006 : Text;
      TempClientFile@1000 : Text;
      FileName@1002 : Text;
      FileExtension@1003 : Text;
    BEGIN
      IF NOT gFileHelperClient.Exists(ClientFilePath) THEN
        ERROR(PEB004,ClientFilePath);
      FileName := gPathHelper.GetFileName(ClientFilePath);
      FileExtension := gPathHelper.GetExtension(FileName);

      // Trim any starting dot from the extension
      IF FileExtension <> '' THEN
        FileExtension := DELCHR(FileExtension,'<','.');

      TempClientFile := ClientTempFileName(FileExtension);
      gFileHelperClient.Copy(ClientFilePath,TempClientFile,TRUE);

      ServerFileName := ServerTempFileName(FileExtension);

      IF NOT UPLOAD('',Magicpath,PEB006,gPathHelper.GetFileName(TempClientFile),ServerFileName) THEN
        ERROR(PEB004,ClientFilePath,GETLASTERRORTEXT);

      gFileHelperClient.Delete(TempClientFile);
      EXIT(ServerFileName);
    END;

    LOCAL PROCEDURE DownloadTempFile@7(ServerFileName@1001 : Text) : Text;
    VAR
      FileName@1102601003 : Text;
      Path@1102601004 : Text;
    BEGIN
      FileName := ServerFileName;
      Path := Magicpath;
      IF NOT DOWNLOAD(ServerFileName,'',Path,PEB006,FileName) THEN
        ERROR(PEB007,ServerFileName,GETLASTERRORTEXT);
      EXIT(FileName);
    END;

    LOCAL PROCEDURE MoveFile@15(SourceFileName@1001 : Text;TargetFileName@1002 : Text);
    BEGIN
      // System.IO.File.Move is not used due to a known issue in KB310316

      IF NOT gFileHelperClient.Exists(SourceFileName) THEN
        ERROR(PEB004,SourceFileName);

      IF NOT gAppendToFile THEN
        DeleteClientFile(TargetFileName);

      gFileHelperClient.Copy(SourceFileName,TargetFileName);
      gFileHelperClient.Delete(SourceFileName);
    END;

    LOCAL PROCEDURE ClientTempFileName@1100570012(FileExtension@1002 : Text) rClientFileName : Text;
    VAR
      TempFile@1004 : File;
    BEGIN
      IF gClientTempPath = '' THEN BEGIN
        TempFile.CREATETEMPFILE;
        rClientFileName := TempFile.NAME + '.' + FileExtension;
        TempFile.CLOSE;
        TempFile.CREATE(rClientFileName);
        TempFile.CLOSE;
        gClientTempPath := GetPathPart(DownloadTempFile(rClientFileName));
      END;
      rClientFileName := gClientTempPath + '\' + FORMAT(CREATEGUID) + '.' + FileExtension;
    END;

    LOCAL PROCEDURE Magicpath@1100570009() : Text;
    BEGIN
      EXIT('<TEMP>');   // MAGIC PATH makes sure we don't get a prompt
    END;

    LOCAL PROCEDURE DeleteClientFile@1100570003(FilePath@1001 : Text) : Boolean;
    BEGIN
      IF NOT gFileHelperClient.Exists(FilePath) THEN
        EXIT(FALSE);

      gFileHelperClient.Delete(FilePath);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPathPart@1100570010(Filename@1102601000 : Text) rPath : Text;
    BEGIN
      Filename := DELCHR(Filename,'<');
      rPath := Filename;
      WHILE STRPOS(Filename,'\')<>0 DO BEGIN
        Filename := COPYSTR(Filename, STRPOS(Filename,'\')+1);
      END;
      IF STRLEN(rPath) > STRLEN(Filename) THEN
        EXIT(COPYSTR(rPath,1,STRLEN(rPath)-STRLEN(Filename)))
      ELSE
        EXIT('');
    END;

    PROCEDURE SetAppendToFile@12047959(pAppendToFile@12047958 : Boolean);
    BEGIN
      gAppendToFile := pAppendToFile
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0000 Miscellaneous
      PEB
      PEB *** End ***
    }
    END.
  }
}

