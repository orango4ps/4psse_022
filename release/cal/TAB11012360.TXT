OBJECT Table 11012360 Site Mngmnt. Hours Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11012361=rimd;
    OnInsert=BEGIN
               Inserted := TODAY;
               "Inserted By" := USERID;
             END;

    OnModify=BEGIN
               SetStatus;
               Modified := CURRENTDATETIME;
               "Modified By" := USERID;
             END;

    OnDelete=VAR
               HoursLine@1100525000 : Record 11012361;
             BEGIN
               HoursLine.RESET;
               HoursLine.SETRANGE(Year,Year);
               HoursLine.SETRANGE(Week,Week);
               HoursLine.SETRANGE("Supplying Company","Supplying Company");
               HoursLine.SETRANGE("Employee No.","Employee No.");
               HoursLine.DELETEALL(TRUE);
             END;

    OnRename=VAR
               HoursLine@1100525000 : Record 11012361;
             BEGIN
               VALIDATE("Employee No.","Employee No.");
               HoursLine.RESET;
               HoursLine.SETRANGE(Year,xRec.Year);
               HoursLine.SETRANGE(Week,xRec.Week);
               HoursLine.SETRANGE("Supplying Company",xRec."Supplying Company");
               HoursLine.SETRANGE("Employee No.",xRec."Employee No.");
               IF NOT HoursLine.ISEMPTY THEN
                 ERROR(Text001);
             END;

    CaptionML=[ENU=Site Mngmnt. Hours Header;
               NOR=Timer for byggeledelse, hode;
               SVE=Byggledning Timmar, rubrik];
    LookupPageID=Page11072229;
  }
  FIELDS
  {
    { 20  ;   ;Year                ;Integer       ;OnValidate=BEGIN
                                                                Date.RESET;
                                                                Date.SETRANGE("Period Type",Date."Period Type"::Year);
                                                                Date.SETRANGE("Period No.",Year);
                                                                IF NOT Date.FINDFIRST THEN
                                                                  FIELDERROR(Year);

                                                                StartDateYear := Date."Period Start";
                                                                YearEndDate := Date."Period End";
                                                              END;

                                                   CaptionML=[ENU=Year;
                                                              NOR=èr;
                                                              SVE=èr];
                                                   MinValue=1 }
    { 30  ;   ;Week                ;Integer       ;OnValidate=VAR
                                                                HumanResourcesSetup@11012000 : Record 5218;
                                                                Period@11012001 : Integer;
                                                              BEGIN
                                                                IF Year = 0 THEN
                                                                  Year := DATE2DMY(TODAY, 3);

                                                                VALIDATE(Year,Year);
                                                                Date.RESET;
                                                                Date.SETRANGE("Period Type",Date."Period Type"::Week);
                                                                Date.SETRANGE("Period No.",Week);
                                                                Date.SETRANGE("Period Start",CALCDATE('<-3D>',StartDateYear),YearEndDate);
                                                                Date.SETRANGE("Period End",StartDateYear,CALCDATE('<+3D>',YearEndDate));
                                                                IF NOT Date.FINDFIRST THEN
                                                                  FIELDERROR(Week);

                                                                GetPostingDate;

                                                                HumanResourcesSetup.GET;
                                                                HumanResourcesSetup.TESTFIELD("Hours Document Nos.");  //* Call 13942
                                                                CASE HumanResourcesSetup."Hour Document No." OF
                                                                  HumanResourcesSetup."Hour Document No."::Week:
                                                                    Period := Week;
                                                                  HumanResourcesSetup."Hour Document No."::"4-Weeks":
                                                                    Period := ((Week-1) DIV 4) + 1;
                                                                  HumanResourcesSetup."Hour Document No."::Month:
                                                                    Period := DATE2DMY(CALCDATE('<-1D>',"Posting Date"),2);
                                                                END;
                                                                "Document No." := STRSUBSTNO('%1 %2-%3', HumanResourcesSetup."Hours Document Nos.", Year, FORMAT(Period,2));

                                                                VALIDATE("Employee No.","Employee No.");
                                                              END;

                                                   OnLookup=VAR
                                                              DateSelectionManagement@1100525500 : Codeunit 11130005;
                                                            BEGIN
                                                              DateSelectionManagement.GetWeekYear(Week, Year);
                                                              VALIDATE(Week);
                                                            END;

                                                   CaptionML=[ENU=Week;
                                                              NOR=Uke;
                                                              SVE=Vecka];
                                                   MinValue=1;
                                                   MaxValue=53 }
    { 39  ;   ;Supplying Company   ;Text50        ;TableRelation="Site Mngmnt. Hours Companies".Company;
                                                   OnValidate=VAR
                                                                EmployeeRec@1100485000 : Record 11012357;
                                                              BEGIN
                                                                IF "Employee No." <> '' THEN
                                                                  EmployeeRec.GET("Supplying Company","Employee No.");
                                                              END;

                                                   CaptionML=[ENU=Supplying Company;
                                                              NOR=Leverende  selskap;
                                                              SVE=Levererande fîretag] }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation="Site Mngmnt. Hours Employee".No. WHERE (Company=FIELD(Supplying Company));
                                                   OnValidate=VAR
                                                                EmployeeRec@1100485000 : Record 11012357;
                                                              BEGIN
                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  // ValidateTableRelation is False, so must be checked if combination SupplyingCompany/Employee exists
                                                                  EmployeeRec.GET("Supplying Company", "Employee No.");
                                                                  IF EmployeeRec."Account Hours" = EmployeeRec."Account Hours"::"Not allowed" THEN
                                                                    EmployeeRec.FIELDERROR("Account Hours");

                                                                  IF Year = 0 THEN Year := DATE2DMY(TODAY, 3);
                                                                  VALIDATE(Year,Year);
                                                                  Date.RESET;
                                                                  Date.SETRANGE("Period Type",Date."Period Type"::Week);
                                                                  Date.SETRANGE("Period No.",Week);
                                                                  Date.SETRANGE("Period Start",CALCDATE('<-3D',StartDateYear),YearEndDate);
                                                                  Date.SETRANGE("Period End",StartDateYear,CALCDATE('<+3D>',YearEndDate));
                                                                  IF Date.FINDFIRST THEN BEGIN
                                                                    IF ((EmployeeRec."Inactive Date" <> 0D) OR (EmployeeRec."Termination Date" <> 0D)) AND (Week <> 0) THEN BEGIN
                                                                      IF (EmployeeRec."Termination Date" < Date."Period Start") AND (EmployeeRec."Termination Date" <> 0D) THEN
                                                                        ERROR(Text002, EmployeeRec."No.", EmployeeRec."Termination Date");
                                                                      IF (EmployeeRec."Inactive Date" < Date."Period Start") AND (EmployeeRec."Inactive Date" <> 0D) THEN
                                                                        ERROR(Text004, EmployeeRec."No.", EmployeeRec."Inactive Date");
                                                                    END;
                                                                    IF (EmployeeRec."Employment Date" > Date."Period End") THEN
                                                                      ERROR(Text003, EmployeeRec."No.", EmployeeRec."Employment Date");
                                                                  END;

                                                                  "Department Code" := EmployeeRec."Department Code";
                                                                  CAO := EmployeeRec.CAO;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=AnstÑllningsnr] }
    { 41  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
    { 42  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokfõringsdato;
                                                              SVE=Bokfîringsdatum];
                                                   Editable=No }
    { 60  ;   ;Inserted            ;Date          ;CaptionML=[ENU=Inserted on;
                                                              NOR=Satt inn den;
                                                              SVE=Infogad den] }
    { 70  ;   ;Modified            ;DateTime      ;CaptionML=[ENU=Modified;
                                                              NOR=Endret;
                                                              SVE=éndrad] }
    { 80  ;   ;Inserted By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Inserted By;
                                                              NOR=Satt inn av;
                                                              SVE=Infogad av] }
    { 90  ;   ;Modified By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified By;
                                                              NOR=Endret av;
                                                              SVE=éndrad av] }
    { 100 ;   ;Generated           ;Boolean       ;CaptionML=[ENU=Generated;
                                                              NOR=Generert;
                                                              SVE=Genererad] }
    { 110 ;   ;Name Employee       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Employee"."Full Name" WHERE (Company=FIELD(Supplying Company),
                                                                                                                       No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Name Employee;
                                                              NOR=Navn pÜ ansatt.;
                                                              SVE=Namn pÜ anstÑlld.];
                                                   Editable=No }
    { 120 ;   ;Shift Code Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Shift (SMF)";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Shift Code Filter;
                                                              NOR=Skiftkodefilter;
                                                              SVE=Skiftkodsfilter];
                                                   Editable=No }
    { 130 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=Open,,,,,Released,Pending Approval,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   OptionString=Open,,,,,Released,Pending Approval,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   Editable=No }
    { 140 ;   ;Norm Hours Employee ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Employee"."Norm Hours" WHERE (Company=FIELD(Supplying Company),
                                                                                                                        No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Norm Hours Employee;
                                                              SVE=AnstÑlld normaltid];
                                                   Editable=No }
    { 150 ;   ;Account Hours Employee;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Employee"."Account Hours" WHERE (Company=FIELD(Supplying Company),
                                                                                                                           No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Account Hours;
                                                              NOR=Kontotimer;
                                                              SVE=Kontotimmar];
                                                   OptionCaptionML=[ENU=Required according to Norm,Optional,Not allowed;
                                                                    NOR=Kreves i henhold til norm,Valgfri,Ikke tillatt;
                                                                    SVE=KrÑvs enligt Norm,Valfri,Inte tillÜten];
                                                   OptionString=Required according to Norm,Optional,Not allowed;
                                                   Editable=No }
    { 200 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Avdelingskode;
                                                              SVE=Avdelningskod];
                                                   CaptionClass='1,1,1' }
    { 210 ;   ;CAO                 ;Code10        ;TableRelation="Site Mngmnt. CAO".Code;
                                                   CaptionML=[ENU=CAO;
                                                              NOR=CAO;
                                                              SVE=KA] }
    { 220 ;   ;Manager No.         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Manager No." WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Manager;
                                                              NOR=Manager;
                                                              SVE=Manager] }
    { 230 ;   ;Manager Name        ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Manager No.)));
                                                   CaptionML=ENU=Manager Name }
  }
  KEYS
  {
    {    ;Year,Week,Supplying Company,Employee No.;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Date@1100485000 : Record 2000000007;
      GenericTempTable@1100525002 : TEMPORARY Record 11020579;
      HourPortalSetup@1100525001 : Record 11020454;
      StartDateYear@1100485002 : Date;
      YearEndDate@1100485001 : Date;
      Text001@1100525000 : TextConst 'ENU=Rename not allowed, already lines present.;NOR=Ikke tillatt Ü gi nytt navn, det finnes allerede rader.;SVE=Det Ñr inte tillÜtet att byta namn, det finns redan rader.';
      SiteMngmntHoursSetup@1100525003 : Record 11012355;
      DPA_Management@1100525004 : Codeunit 11012783;
      Text002@1100527350 : TextConst 'ENU=Employee %1 not employed since %2.';
      Text003@1100527351 : TextConst 'ENU=Employee %1 employed since %2.';
      Text004@1100527352 : TextConst 'ENU=Employee %1 inactive since %2.';

    PROCEDURE GetPostingDate@1210190000();
    VAR
      PostingDateRec@1210190000 : Record 11020202;
    BEGIN
      "Posting Date" := DWY2DATE(5,Week,Year);

      IF PostingDateRec.GET(Year, Week) THEN
        IF PostingDateRec."Posting Date" <> 0D THEN
          "Posting Date" := PostingDateRec."Posting Date";
    END;

    PROCEDURE PostHoursBatch@1100485000();
    VAR
      SiteMngmntHoursCU@1100485000 : Codeunit 11012178;
    BEGIN
      SiteMngmntHoursCU.CreateLines(Rec,FALSE,FALSE,'',FALSE,TRUE);
    END;

    PROCEDURE ReleaseLines@1100528400();
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
      SiteMngmntHours@1100528300 : Codeunit 11012178;
    BEGIN
      CLEARLASTERROR;
      SiteMngmntHoursSetup.GET;
      IF (NOT SiteMngmntHours.CheckNormHours(Rec)) THEN BEGIN
        IF (SiteMngmntHoursSetup."Norm Hours Check Type" = SiteMngmntHoursSetup."Norm Hours Check Type"::Warning)
        THEN
          MESSAGE(GETLASTERRORTEXT)
        ELSE
          ERROR(GETLASTERRORTEXT);
      END;

      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.SETFILTER(Status,'%1|%2',SiteMngmntHoursLine.Status::Open,SiteMngmntHoursLine.Status::Rejected);
      IF SiteMngmntHoursLine.FINDSET THEN
        SiteMngmntHoursLine.Release;
    END;

    PROCEDURE PendingApprovalLines@1100525002();
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.SETFILTER(Status,'%1|%2',SiteMngmntHoursLine.Status::Open,SiteMngmntHoursLine.Status::Rejected);
      IF SiteMngmntHoursLine.FINDSET THEN
        SiteMngmntHoursLine.PendingApproval;
    END;

    PROCEDURE ApproveLines@1100528201();
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::"Pending Approval");
      IF SiteMngmntHoursLine.FINDSET THEN
        SiteMngmntHoursLine.Approve;
    END;

    PROCEDURE RejectLine@1100528202(LineNo@1100528200 : Integer);
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::"Pending Approval");
      SiteMngmntHoursLine.SETRANGE("Line No.", LineNo);
      IF SiteMngmntHoursLine.FINDSET THEN
        SiteMngmntHoursLine.Reject('');
    END;

    PROCEDURE ReopenLines@1100528401();
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
    BEGIN
      SiteMngmntHoursSetup.GET;

      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");

      IF ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(Rec) THEN
        SiteMngmntHoursLine.SETFILTER(Status, '%1|%2', SiteMngmntHoursLine.Status::Released, SiteMngmntHoursLine.Status::"Pending Approval")
      ELSE
        SiteMngmntHoursLine.SETFILTER(Status, '%1|%2', SiteMngmntHoursLine.Status::Released, SiteMngmntHoursLine.Status::Posted);

      IF SiteMngmntHoursLine.FINDSET THEN
        REPEAT
          SiteMngmntHoursLine.Reopen;
        UNTIL SiteMngmntHoursLine.NEXT = 0;
    END;

    PROCEDURE SetStatus@1100528300();
    VAR
      SiteMngmntHoursLine@1100528300 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      IF (SiteMngmntHoursLine.FINDFIRST) THEN BEGIN
        Status := SiteMngmntHoursLine.GetLineStatusForHeader(FALSE,FALSE);
      END;
    END;

    PROCEDURE AddHoursFromWorkOrders@1100528407(AutoFill@1100525000 : Boolean);
    BEGIN
      AddHourLines(TRUE, FALSE, AutoFill);
    END;

    PROCEDURE AddHoursFromEmployeeAbsence@1100528301(AutoFill@1100525000 : Boolean);
    BEGIN
      AddHourLines(FALSE, TRUE, AutoFill);
    END;

    PROCEDURE AddHourLines@1100528403(AddLinesFromWorkOrders@1100528400 : Boolean;AddLinesFromEmployeeAbsence@1100528401 : Boolean;AutoFill@1100525000 : Boolean);
    VAR
      CompanyInformation@1100528302 : Record 79;
      StartDate@1100528303 : Date;
      EndDate@1100528304 : Date;
    BEGIN
      TESTFIELD(Year);
      TESTFIELD(Week);
      TESTFIELD(Status, Status::Open);

      CompanyInformation.GET;
      IF (AutoFill) AND (CompanyInformation."Base Calendar Code" = '') THEN
        EXIT;

      CompanyInformation.TESTFIELD("Base Calendar Code");
      StartDate := DWY2DATE(1, Week, Year);
      EndDate := DWY2DATE(7, Week, Year);
      GenericTempTable.DELETEALL;
      IF (NOT HourPortalSetup.GET) THEN
        HourPortalSetup.INIT;

      IF AddLinesFromWorkOrders THEN
        AddHoursFromWorkOrdersToGenericTempTable(StartDate, EndDate)
      ELSE
        IF AddLinesFromEmployeeAbsence THEN
          AddHoursFromEmployeeAbsenceToGenericTempTable(StartDate, EndDate);

      GenericTempTable.SETCURRENTKEY("Key Code2", Date1, Time1);
      IF (GenericTempTable.FINDSET) THEN BEGIN
        REPEAT
          IF (GenericTempTable.Dec1 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable, 1, GenericTempTable.Dec1);
          IF (GenericTempTable.Dec2 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable, 2, GenericTempTable.Dec2);
          IF (GenericTempTable.Dec3 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable, 3, GenericTempTable.Dec3);
          IF (GenericTempTable.Dec4 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable, 4, GenericTempTable.Dec4);
          IF (GenericTempTable.Dec5 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable, 5, GenericTempTable.Dec5);
          IF (GenericTempTable.Dec6 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable, 6, GenericTempTable.Dec6);
          IF (GenericTempTable.Dec7 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable, 7, GenericTempTable.Dec7);
        UNTIL (GenericTempTable.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE AddHoursFromWorkOrdersToGenericTempTable@1100528421(StartDate@1100528401 : Date;EndDate@1100528400 : Date);
    VAR
      ResourceWOP@1100528402 : Record 11229278;
      WorkOrder@1100528403 : Record 11229279;
    BEGIN
      ResourceWOP.SETCURRENTKEY(Type, Company, "Source No.");
      ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
      ResourceWOP.SETRANGE(Company, COMPANYNAME);
      ResourceWOP.SETRANGE("Source No.", "Employee No.");
      IF NOT ResourceWOP.FINDFIRST THEN
        EXIT;

      WorkOrder.SETCURRENTKEY("Resource No.");
      WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
      WorkOrder.SETRANGE("Resource No.", ResourceWOP."No.");
      WorkOrder.SETFILTER("Starting Date/Time", '<%1', DetermineMaxStartingDateTime);
      WorkOrder.SETFILTER("Ending Date/Time", '>%1', DetermineMinEndingDateTime);
      IF WorkOrder.FINDSET THEN
        REPEAT
          IF WorkOrderIsLinkedToSiteMngmntHoursObject(WorkOrder) THEN
            GetHoursFromWorkOrder(WorkOrder);
        UNTIL WorkOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE DetermineMaxStartingDateTime@1100528408() MaxStartingDateTime : DateTime;
    VAR
      FirstDateOfNextWeek@1100528400 : Date;
    BEGIN
      FirstDateOfNextWeek := DWY2DATE(7, Week, Year) + 1;
      MaxStartingDateTime := CREATEDATETIME(FirstDateOfNextWeek, 0T);
    END;

    LOCAL PROCEDURE DetermineMinEndingDateTime@1100528411() MinEndingDateTime : DateTime;
    VAR
      LastDateOfPreviousWeek@1100528400 : Date;
    BEGIN
      LastDateOfPreviousWeek := DWY2DATE(1, Week, Year) - 1;
      MinEndingDateTime := CREATEDATETIME(LastDateOfPreviousWeek, 235900T);
    END;

    LOCAL PROCEDURE WorkOrderIsLinkedToSiteMngmntHoursObject@1100528405(WorkOrder@1100528400 : Record 11229279) LinkedToSiteMngmntHoursObject : Boolean;
    VAR
      SiteMngmntHoursObjects@1100528401 : Record 11012359;
      SiteMngmntHoursObjectsType@1100528402 : Integer;
    BEGIN
      CASE WorkOrder."Source Type" OF
        WorkOrder."Source Type"::Project:
          SiteMngmntHoursObjectsType := SiteMngmntHoursObjects.Type::Project;
        WorkOrder."Source Type"::ServiceOrder:
          SiteMngmntHoursObjectsType := SiteMngmntHoursObjects.Type::"Service Order";
        ELSE
          EXIT;
      END;
      LinkedToSiteMngmntHoursObject := SiteMngmntHoursObjects.GET(
        WorkOrder."Source Company", SiteMngmntHoursObjectsType, WorkOrder."Source No.");
    END;

    LOCAL PROCEDURE GetHoursFromWorkOrder@1100528409(WorkOrder@1100528400 : Record 11229279);
    VAR
      Weekday@1100528401 : Integer;
    BEGIN
      WorkOrder.TESTFIELD("Starting Date/Time");
      WorkOrder.TESTFIELD("Ending Date/Time");
      FOR Weekday := 1 TO 7 DO BEGIN
        GetHoursFromWorkOrderForWeekDay(WorkOrder, Weekday);
      END;
    END;

    LOCAL PROCEDURE GetHoursFromWorkOrderForWeekDay@1100528404(WorkOrder@1100528400 : Record 11229279;WeekDay@1100528402 : Integer);
    VAR
      HourAccountingLine@1100528404 : Record 11012039;
      HoursQty@1100528403 : Decimal;
      CurrentDate@1100528401 : Date;
    BEGIN
      CurrentDate := DWY2DATE(WeekDay, Week, Year);
      IF (CurrentDate < DT2DATE(WorkOrder."Starting Date/Time")) THEN
        EXIT;
      IF (CurrentDate > DT2DATE(WorkOrder."Ending Date/Time")) THEN
        EXIT;

      HoursQty := HourAccountingLine.CalcWorkingHours(WorkOrder, "Employee No.", CurrentDate, WeekDay);
      IF (HoursQty <> 0) THEN
        CreateGenericTempTableLine(WorkOrder, '', WeekDay, HoursQty);
    END;

    LOCAL PROCEDURE AddHoursFromEmployeeAbsenceToGenericTempTable@1100528402(StartDate@1100528402 : Date;EndDate@1100528401 : Date);
    VAR
      EmployeeAbsence@1100528400 : Record 5207;
    BEGIN
      EmployeeAbsence.SETCURRENTKEY("Employee No.", "From Date");
      EmployeeAbsence.SETRANGE("Employee No.", "Employee No.");
      EmployeeAbsence.SETFILTER(EmployeeAbsence."From Date", '<=%1', EndDate);
      EmployeeAbsence.SETFILTER(EmployeeAbsence."To Date", '>=%1', StartDate);
      EmployeeAbsence.SETFILTER("Cause of Absence Code", '<>%1', '');
      IF EmployeeAbsence.FINDSET THEN
        REPEAT
          GetHoursFromEmployeeAbsenceEntry(EmployeeAbsence);
        UNTIL (EmployeeAbsence.NEXT = 0);
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntry@1100525005(EmployeeAbsence@1100525001 : Record 5207);
    VAR
      WeekDay@1100525002 : Integer;
    BEGIN
      EmployeeAbsence.TESTFIELD("From Date");
      EmployeeAbsence.TESTFIELD("To Date");
      IF (EmployeeAbsence."From Time" = 0T) THEN
        EmployeeAbsence.TESTFIELD("Until Time", 0T);
      IF (EmployeeAbsence."From Time" > 0T) THEN
        EmployeeAbsence.TESTFIELD("Until Time");

      FOR WeekDay := 1 TO 7 DO BEGIN
        GetHoursFromEmployeeAbsenceEntryForWeekDay(EmployeeAbsence, WeekDay);
      END;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntryForWeekDay@1100525006(EmployeeAbsence@1100525001 : Record 5207;WeekDay@1100525003 : Integer);
    VAR
      HourAccountingLine@1100525005 : Record 11012039;
      WorkOrder@1100528400 : Record 11229279;
      HoursQty@1100525000 : Decimal;
      CurrentDate@1100525004 : Date;
    BEGIN
      CurrentDate := DWY2DATE(WeekDay, Week, Year);
      IF (CurrentDate < EmployeeAbsence."From Date") THEN
        EXIT;
      IF (CurrentDate > EmployeeAbsence."To Date") THEN
        EXIT;

      HoursQty := HourAccountingLine.CalcEmployeeAbsenceHours(EmployeeAbsence, CurrentDate, WeekDay);

      WorkOrder."No." := '';
      IF (HoursQty <> 0) THEN
        CreateGenericTempTableLine(WorkOrder, EmployeeAbsence."Cause of Absence Code", WeekDay, HoursQty);
    END;

    LOCAL PROCEDURE GetSiteMngmntHoursLine@1100525003(VAR SiteMngmntHoursLine@1100525000 : Record 11012361) : Boolean;
    VAR
      lvSiteMngmntHoursLine@1100525001 : Record 11012361;
    BEGIN
      lvSiteMngmntHoursLine.SETRANGE(Year, SiteMngmntHoursLine.Year);
      lvSiteMngmntHoursLine.SETRANGE(Week, SiteMngmntHoursLine.Week);
      lvSiteMngmntHoursLine.SETRANGE("Employee No.", SiteMngmntHoursLine."Employee No.");
      lvSiteMngmntHoursLine.SETRANGE("Object No.", SiteMngmntHoursLine."Object No.");
      lvSiteMngmntHoursLine.SETRANGE(Element, SiteMngmntHoursLine.Element);
      lvSiteMngmntHoursLine.SETRANGE("Cost Object", SiteMngmntHoursLine."Cost Object");
      lvSiteMngmntHoursLine.SETRANGE("Wage Component", SiteMngmntHoursLine."Wage Component");
      lvSiteMngmntHoursLine.SETRANGE(Type, SiteMngmntHoursLine.Type);
      IF (lvSiteMngmntHoursLine.FINDFIRST) THEN BEGIN
        SiteMngmntHoursLine := lvSiteMngmntHoursLine;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateGenericTempTableLine@1100525001(WorkOrder@1100528401 : Record 11229279;AbsenceCode@1100525000 : Code[20];WeekDay@1100525001 : Integer;HoursQty@1100525002 : Decimal);
    BEGIN
      IF (NOT GenericTempTable.GET(WorkOrder."No.", AbsenceCode, FORMAT(Week), '', '', '')) THEN BEGIN
        GenericTempTable.INIT;
        GenericTempTable."Key Code1" := WorkOrder."No.";
        GenericTempTable."Key Code2" := AbsenceCode;
        GenericTempTable."Key Code3" := FORMAT(Week);
        GenericTempTable.Date1 := DT2DATE(WorkOrder."Starting Date/Time");
        GenericTempTable.Time1 := DT2TIME(WorkOrder."Starting Date/Time");
        GenericTempTable.INSERT;
      END;

      CASE WeekDay OF
        1: GenericTempTable.Dec1 += HoursQty;
        2: GenericTempTable.Dec2 += HoursQty;
        3: GenericTempTable.Dec3 += HoursQty;
        4: GenericTempTable.Dec4 += HoursQty;
        5: GenericTempTable.Dec5 += HoursQty;
        6: GenericTempTable.Dec6 += HoursQty;
        7: GenericTempTable.Dec7 += HoursQty;
      END;
      GenericTempTable.MODIFY;
    END;

    LOCAL PROCEDURE CreateOrUpdateSiteMgtHoursLine@1100528303(GenericTempTable@1100525002 : Record 11020579;WeekDay@1100525000 : Integer;HoursQty@1100525001 : Decimal);
    VAR
      SiteMngmntHoursLine@1100528301 : Record 11012361;
      CauseofAbsence@1100525003 : Record 5206;
      WorkOrder@1100528401 : Record 11229279;
      CauseofAbsenceCode@1100528400 : Code[20];
      WorkOrderNo@1100528402 : Code[20];
    BEGIN
      IF GenericTempTable."Key Code1" <> '' THEN BEGIN
        WorkOrderNo := GenericTempTable."Key Code1";
        WorkOrder.GET(WorkOrderNo);
      END ELSE
        IF GenericTempTable."Key Code2" <> '' THEN BEGIN
          CauseofAbsenceCode := GenericTempTable."Key Code2";
          CauseofAbsence.GET(CauseofAbsenceCode);
          CauseofAbsence.TESTFIELD("Hour Line Template Code");
        END;

      InitSiteMngmntHoursLine(SiteMngmntHoursLine, WorkOrder, CauseofAbsence."Hour Line Template Code");
      IF (GetSiteMngmntHoursLine(SiteMngmntHoursLine)) THEN BEGIN
        IF (NOT HourPortalSetup."Hour Portal Active") THEN BEGIN
          AddHoursToWeekDay(SiteMngmntHoursLine, WeekDay, HoursQty);
          SiteMngmntHoursLine.MODIFY(TRUE);
        END ELSE BEGIN
          InitSiteMngmntHoursLine(SiteMngmntHoursLine, WorkOrder, CauseofAbsence."Hour Line Template Code");
          SiteMngmntHoursLine."Line No." := SiteMngmntHoursLine.GetLastLineNo + 10000;
          AddHoursToWeekDay(SiteMngmntHoursLine, WeekDay, HoursQty);
          SiteMngmntHoursLine.INSERT(TRUE);
        END;
      END ELSE BEGIN
        InitSiteMngmntHoursLine(SiteMngmntHoursLine, WorkOrder, CauseofAbsence."Hour Line Template Code");
        SiteMngmntHoursLine."Line No." := SiteMngmntHoursLine.GetLastLineNo + 10000;
        AddHoursToWeekDay(SiteMngmntHoursLine, WeekDay, HoursQty);
        SiteMngmntHoursLine.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddHoursToWeekDay@1100525004(VAR SiteMngmntHoursLine@1100525002 : Record 11012361;WeekDay@1100525000 : Integer;HoursQty@1100525001 : Decimal);
    BEGIN
      CASE WeekDay OF
        1: SiteMngmntHoursLine.VALIDATE(Monday, SiteMngmntHoursLine.Monday + HoursQty);
        2: SiteMngmntHoursLine.VALIDATE(Tuesday, SiteMngmntHoursLine.Tuesday + HoursQty);
        3: SiteMngmntHoursLine.VALIDATE(Wednesday, SiteMngmntHoursLine.Wednesday + HoursQty);
        4: SiteMngmntHoursLine.VALIDATE(Thursday, SiteMngmntHoursLine.Thursday + HoursQty);
        5: SiteMngmntHoursLine.VALIDATE(Friday, SiteMngmntHoursLine.Friday + HoursQty);
        6: SiteMngmntHoursLine.VALIDATE(Saturday, SiteMngmntHoursLine.Saturday + HoursQty);
        7: SiteMngmntHoursLine.VALIDATE(Sunday, SiteMngmntHoursLine.Sunday + HoursQty);
      END;
    END;

    LOCAL PROCEDURE InitSiteMngmntHoursLine@1100525000(VAR SiteMngmntHoursLine@1100525000 : Record 11012361;WorkOrder@1100528400 : Record 11229279;LineTemplateCode@1100525002 : Code[20]);
    BEGIN
      SiteMngmntHoursLine.INIT;
      SiteMngmntHoursLine.VALIDATE(Year, Year);
      SiteMngmntHoursLine.VALIDATE(Week, Week);
      SiteMngmntHoursLine.VALIDATE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.VALIDATE("Employee No.", "Employee No.");

      IF WorkOrder."No." <> '' THEN BEGIN
        SiteMngmntHoursLine.VALIDATE("Receiving Company", WorkOrder."Source Company");
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::Project:
            SiteMngmntHoursLine.Type := SiteMngmntHoursLine.Type::Project;
          WorkOrder."Source Type"::ServiceOrder:
            SiteMngmntHoursLine.Type := SiteMngmntHoursLine.Type::Service;
        END;
        SiteMngmntHoursLine.VALIDATE("Object No.", WorkOrder."Source No.");
        SiteMngmntHoursLine.VALIDATE(Element, WorkOrder."Project Element");
        SiteMngmntHoursLine.VALIDATE("Cost Object", WorkOrder."Global Dimension 2 Code");
        SiteMngmntHoursLine."Imported from Work Order" := TRUE;
      END ELSE
        IF LineTemplateCode <> '' THEN BEGIN
          SiteMngmntHoursLine.VALIDATE("Receiving Company", "Supplying Company");
          SiteMngmntHoursLine.VALIDATE("Line Template Code", LineTemplateCode);
        END;
    END;

    PROCEDURE CheckLinesBeforeApproval@1100528200() : Boolean;
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.SETFILTER(Status, '%1|%2|%3', SiteMngmntHoursLine.Status::Open,SiteMngmntHoursLine.Status::Rejected,SiteMngmntHoursLine.Status::Released);
      EXIT(SiteMngmntHoursLine.CheckLinesBeforeApproval);
    END;

    PROCEDURE SendSiteMngmntHoursHeaderForApproval@1100528203();
    VAR
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      ApprovalsMgmt@1100528201 : Codeunit 1535;
      ApprovalsBridge4PSConstruct@1100528202 : Codeunit 11125348;
    BEGIN
      IF ApprovalManagement4PSConstr.CheckSiteMngmntHoursHeaderApprovalsWorkflowEnabled(Rec) THEN BEGIN
        IF CheckLinesBeforeApproval THEN
          IF ApprovalsMgmt.HasOpenOrPendingApprovalEntries(RECORDID) THEN
            ApprovalsBridge4PSConstruct.OnSendSiteMngmntHoursHeaderForApprovalAgain(Rec)
          ELSE
            ApprovalsBridge4PSConstruct.OnSendSiteMngmntHoursHeaderForApproval(Rec);
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012038) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012360');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Hour Accounting", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE GetWeekYearText@1100527000() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1.%2',Week,Year));
    END;

    PROCEDURE GetEmployeeHours@1100527002(EmployeeNo@1100527000 : Code[20]) : Boolean;
    VAR
      PostedHourHeader@1100527003 : Record 11012084;
      SiteMngmntHoursLine@1100527600 : Record 11012361;
    BEGIN
      IF PostedHourHeader.GET(Year, Week, EmployeeNo) THEN
        EXIT(TRUE);
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Employee No.", EmployeeNo);
      IF SiteMngmntHoursLine.FINDFIRST THEN BEGIN
        SiteMngmntHoursLine.CALCFIELDS("Total Hours", "Norm Hours");
        IF SiteMngmntHoursLine."Total Hours" >= SiteMngmntHoursLine."Norm Hours" THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetEmployeeNamesReportingDelay@1100527001() EmployeeNames : Text;
    VAR
      Employee@1100527000 : Record 5200;
    BEGIN
      Employee.SETFILTER("Account Hours",'%1',Employee."Account Hours"::"Required according to Norm");
      Employee.SETRANGE("Manager No.", "Employee No.");
      IF Employee.FINDSET THEN BEGIN
        REPEAT
          IF NOT GetEmployeeHours(Employee."No.") THEN
            EmployeeNames += Employee."Full Name" + '<BR/>';
        UNTIL Employee.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE "***4PSSE***"@1000000000();
    BEGIN
    END;

    PROCEDURE ExplodeLines@1100294000();
    VAR
      HourLine@1100294000 : Record 11012361;
      TempHourLine@1100294001 : TEMPORARY Record 11012361;
      HourCommentLine@1100294005 : Record 11128234;
      TempHourCommentLine@1100294004 : TEMPORARY Record 11128234;
      HoursConsentLine@1100294007 : Record 11020437;
      TempHoursConsentLine@1100294008 : TEMPORARY Record 11020437;
      RecRef@1100294006 : RecordRef;
      LineNo@1100294002 : Integer;
      DayNo@1100294003 : Integer;
      i@1100294009 : Integer;
    BEGIN
      // SESB.I031 ASH 11.07.2013 >>
      HourLine.SETRANGE(Year,Year);
      HourLine.SETRANGE(Week,Week);
      HourLine.SETRANGE("Employee No.","Employee No.");
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);

      IF HourLine.FINDSET THEN
        REPEAT
          //HourLine.CALCFIELDS("Component Type");
          IF TempHourLine.FINDLAST THEN
            LineNo := TempHourLine."Line No." + 10000
          ELSE
            LineNo := 10000;

          HoursConsentLine.SETRANGE("Line No.", HourLine."Line No.");
          IF HoursConsentLine.FINDSET THEN
            REPEAT
              TempHoursConsentLine := HoursConsentLine;
              TempHoursConsentLine."Line No." := LineNo;
              TempHoursConsentLine.INSERT;
            UNTIL HoursConsentLine.NEXT = 0;

          RecRef.GETTABLE(HourLine);
          HourCommentLine.SETRANGE("Table Name", HourCommentLine."Table Name"::"Hour Accounting Line");
          HourCommentLine.SETRANGE("Record ID", RecRef.RECORDID);

          IF HourLine."Component Type" IN [HourLine."Component Type"::Hours] THEN BEGIN
            // SESB.I038 VKO 07.08.2013 >>
            CASE HourLine."Component Type" OF
              HourLine."Component Type"::Hours:
                i := 1;
            END;
            // SESB.I038 VKO 07.08.2013 >>
            FOR DayNo := i TO 7 DO BEGIN
              TempHourLine := HourLine;
              //>>4PSSE, 130919, email from Ward
              // //SESB.I038 VKO 07.08.2013 >>
              //TempHourLine.Quantity := 0;
              //TempHourLine.Amount := 0;
              //TempHourLine."Amount (LCY)" := 0;
              // //SESB.I038 VKO 07.08.2013 <<
              //<<4PSSE, 130919
              TempHourLine.Monday := 0;
              TempHourLine.Tuesday := 0;
              TempHourLine.Wednesday := 0;
              TempHourLine.Thursday := 0;
              TempHourLine.Friday := 0;
              TempHourLine.Saturday := 0;
              TempHourLine.Sunday := 0;
              CASE DayNo OF
                // SESB.I038 VKO 07.08.2013 >>
                0: // For amount in case of "Expense hours"
                  BEGIN
                    TempHourLine.Quantity := HourLine.Quantity;
                    TempHourLine.Amount := HourLine.Amount;
                    //TempHourLine."Amount (LCY)" := HourLine."Amount (LCY)";
                    //TempHourLine."Time From" := 0T;
                    //TempHourLine."Time Until" := 0T;
                    //TempHourLine.Duration := 0;
                  END;
                // SESB.I038 VKO 07.08.2013 <<
                1:
                  TempHourLine.Monday    := HourLine.Monday;
                2:
                  TempHourLine.Tuesday   := HourLine.Tuesday;
                3:
                  TempHourLine.Wednesday := HourLine.Wednesday;
                4:
                  TempHourLine.Thursday  := HourLine.Thursday;
                5:
                  TempHourLine.Friday    := HourLine.Friday;
                6:
                  TempHourLine.Saturday  := HourLine.Saturday;
                7:
                  TempHourLine.Sunday    := HourLine.Sunday;
              END;
              TempHourLine."Total Line" :=
                TempHourLine.Monday + TempHourLine.Tuesday + TempHourLine.Wednesday +
                TempHourLine.Thursday + TempHourLine.Friday + TempHourLine.Saturday + TempHourLine.Sunday;
              // SESB.I038 VKO 07.08.2013 >>

              //>>4PSSE, 130919, email from Ward
              //IF (TempHourLine."Total Line" <> 0) OR (TempHourLine.Quantity <> 0) THEN BEGIN
              IF (TempHourLine."Total Line" <> 0) THEN BEGIN
              //<<4PSSE, 130919, email from Ward

                // SESB.I038 VKO 07.08.2013 >>
                // TempHourLine."Amount (LCY)" := ROUND(TempHourLine."Total Line" * TempHourLine."Unit Cost (LCY)");
                // SESB.I038 VKO 07.08.2013 <<
                //TempHourLine.CheckPostingDate;
                TempHourLine."Line No." := LineNo;
                //>>IME-046
                //TempHourLine.CalcRateAndAmount;
                //<<IME-046
                TempHourLine.INSERT;
                LineNo += 10000;

                RecRef.GETTABLE(TempHourLine);
                IF HourCommentLine.FINDSET THEN
                  REPEAT
                    TempHourCommentLine := HourCommentLine;
                    TempHourCommentLine."Record ID" := RecRef.RECORDID;
                    TempHourCommentLine.INSERT(TRUE);
                  UNTIL HourCommentLine.NEXT = 0;
              END;
            END;

          END ELSE BEGIN
            TempHourLine := HourLine;
            TempHourLine."Line No." := LineNo;
            TempHourLine.INSERT;

            RecRef.GETTABLE(TempHourLine);
            IF HourCommentLine.FINDSET THEN
              REPEAT
                TempHourCommentLine := HourCommentLine;
                TempHourCommentLine."Record ID" := RecRef.RECORDID;
                TempHourCommentLine.INSERT(TRUE);
              UNTIL HourCommentLine.NEXT = 0;
          END;
          //HourLine.DeleteLineComments;
        UNTIL HourLine.NEXT = 0;
      HourLine.DELETEALL;

      IF TempHourLine.FINDSET THEN
        REPEAT
          HourLine := TempHourLine;
          HourLine.INSERT;
        UNTIL TempHourLine.NEXT = 0;

      HoursConsentLine.SETRANGE("Line No.");
      HoursConsentLine.DELETEALL(TRUE);
      IF TempHoursConsentLine.FINDSET THEN
        REPEAT
          HoursConsentLine := TempHoursConsentLine;
          HoursConsentLine.INSERT(TRUE);
          //>>4PS-028
          HoursConsentLine.HourAccountingCheck(HoursConsentLine);
          //<<4PS-028
        UNTIL TempHoursConsentLine.NEXT = 0;

      IF TempHourCommentLine.FINDSET THEN
        REPEAT
          HourCommentLine := TempHourCommentLine;
          HourCommentLine.INSERT;
        UNTIL TempHourCommentLine.NEXT = 0;
      // SESB.I031 ASH 11.07.2013 <<
    END;

    BEGIN
    END.
  }
}

