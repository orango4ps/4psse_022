OBJECT Table 11020206 Holding Structure
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckRedundancy;
               IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN
                 CentrManagementCU.EditHoldingStructure(Rec,1,xRec);
             END;

    OnModify=BEGIN
               IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN
                 CentrManagementCU.EditHoldingStructure(Rec,2,xRec);
             END;

    OnDelete=BEGIN
               IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN
                 CentrManagementCU.EditHoldingStructure(Rec,4,xRec);
             END;

    CaptionML=[ENU=Holding Structure;
               NOR=Konsernstruktur;
               SVE=Koncernstruktur];
    LookupPageID=Page11020215;
    DrillDownPageID=Page11020215;
  }
  FIELDS
  {
    { 10  ;   ;Contact             ;Code20        ;TableRelation=Contact.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS01.sn
                                                                IF Contact <> xRec.Contact THEN
                                                                  IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN BEGIN
                                                                    MainRec := xRec;
                                                                    IF MainRec.FIND THEN
                                                                      CentrManagementCU.EditHoldingStructure(Rec,3,xRec);
                                                                  END;
                                                                //**4PS01.en
                                                              END;

                                                   CaptionML=[ENU=Contact;
                                                              NOR=Kontaktperson;
                                                              SVE=Kontakt] }
    { 15  ;   ;Line No.            ;Integer       ;OnValidate=BEGIN
                                                                //**4PS01.sn
                                                                IF "Line No." <> xRec."Line No." THEN
                                                                  IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN BEGIN
                                                                    MainRec := xRec;
                                                                    IF MainRec.FIND THEN
                                                                      CentrManagementCU.EditHoldingStructure(Rec,3,xRec);
                                                                  END;
                                                                //**4PS01.en
                                                              END;

                                                   CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 20  ;   ;Related Contact     ;Code20        ;TableRelation=Contact.No.;
                                                   OnValidate=BEGIN
                                                                CheckRedundancy;
                                                              END;

                                                   CaptionML=[ENU=Related Contact;
                                                              NOR=Relatert Kontakt;
                                                              SVE=Relaterad kontakt] }
    { 30  ;   ;Indent              ;Integer       ;CaptionML=[ENU=Indent;
                                                              NOR=Rykk inn;
                                                              SVE=Indrag];
                                                   Editable=No }
    { 40  ;   ;Parent Contact      ;Code20        ;TableRelation=Contact.No.;
                                                   CaptionML=[ENU=Parent Contact;
                                                              NOR=Parent Contact;
                                                              SVE=Parent Contact];
                                                   Editable=No }
    { 50  ;   ;Related Contact Name;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Related Contact)));
                                                   CaptionML=[ENU=Related Contact Name;
                                                              NOR=Relatert Kontaktnavn;
                                                              SVE=Relaterat kontaktnamn];
                                                   Editable=No }
    { 55  ;   ;Related Contact City;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.City WHERE (No.=FIELD(Related Contact)));
                                                   CaptionML=[ENU=Related Contact City;
                                                              NOR=Relatert Kontaktort;
                                                              SVE=Relaterad kontaktort];
                                                   Editable=No }
    { 60  ;   ;Participation %     ;Integer       ;CaptionML=[ENU=Participation %;
                                                              NOR=Deltagelse %;
                                                              SVE=Deltagande %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 70  ;   ;Bus. Rel. Code for Customers;Code10;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Marketing Setup"."Bus. Rel. Code for Customers" WHERE (Primary Key=FILTER('')));
                                                   CaptionML=[ENU=Bus. Rel. Code for Customers;
                                                              NOR=Forretningsrelasjonskode for Kunder;
                                                              SVE=Aff„rsrelationskod f”r kunder];
                                                   Editable=No }
    { 80  ;   ;Bus. Rel. Code for Vendors;Code10  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Marketing Setup"."Bus. Rel. Code for Vendors" WHERE (Primary Key=FILTER('')));
                                                   CaptionML=[ENU=Bus. Rel. Code for Vendors;
                                                              NOR=Forretningsrelasjonskode for leverand›rer;
                                                              SVE=Aff„rsrelationskod f”r lev.];
                                                   Editable=No }
    { 90  ;   ;Related Customer    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation".No. WHERE (Contact No.=FIELD(Related Contact),
                                                                                                             Business Relation Code=FIELD(Bus. Rel. Code for Customers),
                                                                                                             Link to Table=CONST(Customer)));
                                                   CaptionML=[ENU=Related Customer;
                                                              NOR=Relatert Kunde;
                                                              SVE=Relaterad kund];
                                                   Editable=No }
    { 100 ;   ;Related Vendor      ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation".No. WHERE (Contact No.=FIELD(Related Contact),
                                                                                                             Business Relation Code=FIELD(Bus. Rel. Code for Vendors),
                                                                                                             Link to Table=CONST(Vendor)));
                                                   CaptionML=[ENU=Related Vendor;
                                                              NOR=Relatert leverand›r;
                                                              SVE=Relaterad leverant”r];
                                                   Editable=No }
    { 110 ;   ;Vendor Balance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(Related Vendor)));
                                                   CaptionML=[ENU=Vendor Balance (LCY);
                                                              NOR=Leverand›rssaldo (NOK);
                                                              SVE=Leverant”rssaldo (BVA)] }
    { 120 ;   ;Customer Balance (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(Related Customer)));
                                                   CaptionML=[ENU=Customer Balance (LCY);
                                                              NOR=Kundesaldo (NOK);
                                                              SVE=Kundsaldo (BVA)];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Contact,Line No.                        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1210190000 : TextConst 'ENU=The relation is already there.;NOR=Relasjonen er allerede der.;SVE=Relationen finns redan d„r.';
      Text001@1210190001 : TextConst 'ENU=The first relation can not be idented;NOR=Den f›rste relasjonen kan ikke rykes inn;SVE=Den f”rsta relationen kan inte identifieras';
      Text002@1210190002 : TextConst 'ENU=The relation has reached it''s maximum ident.;NOR=Relasjonen har n†dd sitt maksimale innrykk.;SVE=Relationen har n†tt sin max. identifikation.';
      CompRelationRec@1100485000 : Record 11012059;
      MainRec@1100485001 : Record 11020206;
      CentrManagementCU@1100485002 : Codeunit 11012010;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE CheckRedundancy@1210190000();
    VAR
      lRelContacts@1210190000 : Record 11020206;
    BEGIN
      lRelContacts.SETRANGE(Contact,Contact);
      lRelContacts.SETRANGE("Related Contact","Related Contact");
      IF lRelContacts.FIND('-') THEN
        ERROR(Text000);
    END;

    PROCEDURE IncreaseIndent@1000000000();
    VAR
      lRelatedContact@1210190000 : Record 11020206;
    BEGIN
      lRelatedContact := Rec;
      lRelatedContact.SETRANGE(Contact,Contact);
      lRelatedContact.SETRANGE(Indent,Indent);
      IF NOT lRelatedContact.FIND('<') THEN
        ERROR(Text001);

      IF Indent + 1 > lRelatedContact.Indent + 1 THEN
        ERROR(Text002);

      Indent := Indent + 1;
      "Parent Contact" := lRelatedContact."Related Contact";
      MODIFY(TRUE);

      UpdateChildLevels(Rec,1);
    END;

    PROCEDURE DecreaseIndent@1000000001();
    VAR
      lRelatedContact@1210190000 : Record 11020206;
    BEGIN
      IF Indent - 1 < 0 THEN
        EXIT;

      lRelatedContact := Rec;
      lRelatedContact.SETRANGE(Contact,Contact);
      lRelatedContact.SETRANGE(Indent,Indent - 2);
      IF lRelatedContact.FIND('<') THEN BEGIN
        Indent := Indent - 1;
        "Parent Contact" := lRelatedContact."Related Contact";
      END ELSE BEGIN
        Indent := 0;
        "Parent Contact" := '';
      END;
      MODIFY(TRUE);

      UpdateChildLevels(Rec,0);
    END;

    PROCEDURE UpdateChildLevels@1210190001(RelCont@1210190002 : Record 11020206;DownOrUp@1210190001 : 'Down,Up');
    VAR
      lRelatedContact@1210190000 : Record 11020206;
    BEGIN
      CLEAR(lRelatedContact);
      lRelatedContact.SETRANGE("Parent Contact",RelCont."Related Contact");
      lRelatedContact.SETFILTER(Indent,'>0');
      IF lRelatedContact.FIND('-') THEN BEGIN
        REPEAT
          CASE DownOrUp OF
            DownOrUp::Down:
              BEGIN
                lRelatedContact.Indent := lRelatedContact.Indent - 1;
                UpdateChildLevels(lRelatedContact,0);
              END;
            DownOrUp::Up:
              BEGIN
                lRelatedContact.Indent := lRelatedContact.Indent + 1;
                UpdateChildLevels(lRelatedContact,1);
              END;
          END;
          lRelatedContact.MODIFY;
        UNTIL lRelatedContact.NEXT = 0;
      END;
    END;

    PROCEDURE DetermineOpenBalance@1210190002(VAR OpenCustBalance@1210190000 : Decimal;VAR OpenVendorBalance@1210190001 : Decimal);
    BEGIN
      CALCFIELDS("Bus. Rel. Code for Customers","Bus. Rel. Code for Vendors","Related Customer","Related Vendor","Vendor Balance (LCY)",
                 "Customer Balance (LCY)");
      OpenCustBalance := "Customer Balance (LCY)";
      OpenVendorBalance := "Vendor Balance (LCY)";
      DetermineOpenBalLevels(Rec,OpenVendorBalance,OpenCustBalance);
    END;

    PROCEDURE DetermineOpenBalLevels@1210190004(RelCont@1210190001 : Record 11020206;VAR VendorBalDec@1210190002 : Decimal;VAR CustomerBalDec@1210190003 : Decimal);
    VAR
      lRelatedContact@1210190000 : Record 11020206;
    BEGIN
      CLEAR(lRelatedContact);
      lRelatedContact.SETRANGE("Parent Contact",RelCont."Related Contact");
      lRelatedContact.SETFILTER(Indent,'>0');
      IF lRelatedContact.FIND('-') THEN BEGIN
        REPEAT
          lRelatedContact.CALCFIELDS("Bus. Rel. Code for Customers",
                                     "Bus. Rel. Code for Vendors",
                                     "Related Customer",
                                     "Related Vendor",
                                     "Vendor Balance (LCY)",
                                     "Customer Balance (LCY)");
          VendorBalDec := VendorBalDec + lRelatedContact."Vendor Balance (LCY)";
          CustomerBalDec := CustomerBalDec + lRelatedContact."Customer Balance (LCY)";

          DetermineOpenBalLevels(lRelatedContact,VendorBalDec,CustomerBalDec);
        UNTIL lRelatedContact.NEXT = 0;
      END;
    END;

    PROCEDURE DetermineTotalBalance@1210190003(ContactCde@1210190000 : Code[20];VAR TotVendorBalanceDec@1210190004 : Decimal;VAR TotCustomerBalanceDec@1210190005 : Decimal);
    VAR
      RelSetupRec@1210190001 : Record 5079;
      BusRelRec@1210190002 : Record 5054;
      CustRec@1210190003 : Record 18;
      VendorRec@1210190006 : Record 23;
      RelatedContact@1210190007 : Record 11020206;
      VendorBalanceDec@1210190008 : Decimal;
      CustomerBalanceDec@1210190009 : Decimal;
    BEGIN
      CLEAR(TotVendorBalanceDec);
      CLEAR(TotCustomerBalanceDec);

      RelSetupRec.GET;
      IF BusRelRec.GET(ContactCde,RelSetupRec."Bus. Rel. Code for Customers") THEN BEGIN
        IF CustRec.GET(BusRelRec."No.") THEN BEGIN
          CustRec.CALCFIELDS("Balance (LCY)");
          TotCustomerBalanceDec := CustRec."Balance (LCY)";
        END;
      END;

      IF BusRelRec.GET(ContactCde,RelSetupRec."Bus. Rel. Code for Vendors") THEN BEGIN
        IF VendorRec.GET(BusRelRec."No.") THEN BEGIN
          VendorRec.CALCFIELDS("Balance (LCY)");
          TotVendorBalanceDec := VendorRec."Balance (LCY)";
        END;
      END;

      RelatedContact.SETRANGE(Contact,ContactCde);
      RelatedContact.SETRANGE(Indent,0);
      IF RelatedContact.FIND('-') THEN BEGIN
        REPEAT
          RelatedContact.DetermineOpenBalance(CustomerBalanceDec,VendorBalanceDec);
          TotCustomerBalanceDec :=  TotCustomerBalanceDec + CustomerBalanceDec;
          TotVendorBalanceDec := TotVendorBalanceDec + VendorBalanceDec;
        UNTIL RelatedContact.NEXT = 0;
      END;
    END;

    PROCEDURE DetermineView@1100528700(ContactNo@1100528701 : Code[20]);
    BEGIN
      //**4PS
      SETRANGE(Contact, ContactNo);
      IF NOT FINDFIRST THEN BEGIN
        SETRANGE("Related Contact", ContactNo);
        SETRANGE(Contact);
        IF FINDFIRST THEN;
        SETRANGE(Contact, Contact);
        SETRANGE("Related Contact");
      END;
    END;

    BEGIN
    END.
  }
}

