OBJECT Codeunit 5510 Production Journal Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MfgSetup@1014 : Record 99000765;
      ItemJnlLine@1000 : Record 83;
      ItemJnlTemplate@1013 : Record 82;
      ItemJnlBatch@1012 : Record 233;
      UOMMgt@1004 : Codeunit 5402;
      PostingDate@1002 : Date;
      CalcBasedOn@1003 : 'Actual Output,Expected Output';
      PresetOutputQuantity@1015 : 'Expected Quantity,Zero on All Operations,Zero on Last Operation';
      ToTemplateName@1006 : Code[10];
      ToBatchName@1005 : Code[10];
      NextLineNo@1001 : Integer;
      Text000@1010 : TextConst 'ENU=%1 journal;NOR=%1 kladd;SVE=%1 journal';
      Text001@1007 : TextConst 'ENU=Do you want to leave the Production Journal?;NOR=Vil du g† ut av produksjonskladden?;SVE=Vill du l„mna produktionsjournalen?';
      Text002@1008 : TextConst 'ENU=Item %1 is blocked and therefore, no journal line is created for this item.;NOR=Vare %1 er sperret, og det opprettes derfor ingen kladdelinje for denne varen.;SVE=Artikel %1 „r sp„rrad och d„rf”r skapas ingen journalrad f”r artikeln.';
      Text003@1009 : TextConst 'ENU=DEFAULT;NOR=STANDARD;SVE=STANDARD';
      Text004@1011 : TextConst 'ENU=Production Journal;NOR=Produksjonskladd;SVE=Produktionsjournal';
      Text005@1016 : TextConst 'ENU=%1 %2 for operation %3 is blocked and therefore, no journal line is created for this operation.;NOR=%1 %2 for operasjon %3 er sperret, og det opprettes derfor ingen kladdelinje for denne operasjonen.;SVE=%1 %2 f”r operation %3 „r sp„rrad och d„rf”r skapas ingen journalrad f”r operationen.';

    [External]
    PROCEDURE Handling@7(ProdOrder@1001 : Record 5405;ActualLineNo@1003 : Integer);
    VAR
      ProductionJnl@1002 : Page 5510;
      LeaveForm@1004 : Boolean;
      IsHandled@1000 : Boolean;
    BEGIN
      MfgSetup.GET;

      SetTemplateAndBatchName;

      InitSetupValues;

      DeleteJnlLines(ToTemplateName,ToBatchName,ProdOrder."No.",ActualLineNo);

      CreateJnlLines(ProdOrder,ActualLineNo);

      IsHandled := FALSE;
      OnBeforeRunProductionJnl(ToTemplateName,ToBatchName,ProdOrder,ActualLineNo,PostingDate,IsHandled);
      IF NOT IsHandled THEN
        REPEAT
          LeaveForm := TRUE;
          CLEAR(ProductionJnl);
          ProductionJnl.Setup(ToTemplateName,ToBatchName,ProdOrder,ActualLineNo,PostingDate);
          ProductionJnl.RUNMODAL;
          IF DataHasChanged(ToTemplateName,ToBatchName,ProdOrder."No.",ActualLineNo) THEN
            LeaveForm := CONFIRM(Text001,TRUE);
        UNTIL LeaveForm;

      DeleteJnlLines(ToTemplateName,ToBatchName,ProdOrder."No.",ActualLineNo);
    END;

    [External]
    PROCEDURE CreateJnlLines@1(ProdOrder@1005 : Record 5405;ProdOrderLineNo@1006 : Integer);
    VAR
      ItemJnlLine@1003 : Record 83;
      ProdOrderLine@1002 : Record 5406;
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderComp@1000 : Record 5407;
      IsHandled@1004 : Boolean;
    BEGIN
      ItemJnlLine.LOCKTABLE;
      ItemJnlLine.RESET;
      ItemJnlLine.SETRANGE("Journal Template Name",ToTemplateName);
      ItemJnlLine.SETRANGE("Journal Batch Name",ToBatchName);
      IF ItemJnlLine.FINDLAST THEN
        NextLineNo := ItemJnlLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
      IF ProdOrderLineNo <> 0 THEN
        ProdOrderLine.SETRANGE("Line No.",ProdOrderLineNo);
      IF ProdOrderLine.FIND('-') THEN
        REPEAT
          OnCreateJnlLinesOnBeforeCheckProdOrderLine(ProdOrderLine);

          ProdOrderRtngLine.RESET;
          ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
          ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
          ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
          ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
          IF ProdOrderRtngLine.FIND('-') THEN BEGIN
            InsertComponents(ProdOrderLine,TRUE,0); // With no Routing Link or illegal Routing Link
            REPEAT
              IsHandled := FALSE;
              OnCreateJnlLinesOnAfterFindProdOrderRtngLine(ProdOrderRtngLine,IsHandled);
              IF NOT IsHandled THEN BEGIN
                InsertOutputJnlLine(ProdOrderRtngLine,ProdOrderLine);
                IF ProdOrderRtngLine."Routing Link Code" <> '' THEN BEGIN
                  ProdOrderComp.RESET;
                  ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Routing Link Code");
                  ProdOrderComp.SETRANGE(Status,ProdOrder.Status);
                  ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
                  ProdOrderComp.SETRANGE("Routing Link Code",ProdOrderRtngLine."Routing Link Code");
                  ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
                  ProdOrderComp.SETFILTER("Item No.",'<>%1','');
                  IF ProdOrderComp.FINDSET THEN
                    REPEAT
                      InsertConsumptionJnlLine(ProdOrderComp,ProdOrderLine,1);
                    UNTIL ProdOrderComp.NEXT = 0;
                END;
              END;
            UNTIL ProdOrderRtngLine.NEXT = 0;
          END ELSE BEGIN
            // Insert All Components - No Routing Link Check
            InsertComponents(ProdOrderLine,FALSE,0);

            // Create line for Output Qty
            CLEAR(ProdOrderRtngLine);
            InsertOutputJnlLine(ProdOrderRtngLine,ProdOrderLine);
          END;
        UNTIL ProdOrderLine.NEXT = 0;

      COMMIT;
    END;

    LOCAL PROCEDURE InsertComponents@10(ProdOrderLine@1001 : Record 5406;CheckRoutingLink@1002 : Boolean;Level@1003 : Integer);
    VAR
      ProdOrderComp@1000 : Record 5407;
    BEGIN
      // Components with no Routing Link or illegal Routing Link
      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      ProdOrderComp.SETFILTER("Item No.",'<>%1','');
      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          IF NOT CheckRoutingLink THEN
            InsertConsumptionJnlLine(ProdOrderComp,ProdOrderLine,Level)
          ELSE
            IF NOT RoutingLinkValid(ProdOrderComp,ProdOrderLine) THEN
              InsertConsumptionJnlLine(ProdOrderComp,ProdOrderLine,Level);
        UNTIL ProdOrderComp.NEXT = 0;
    END;

    [External]
    PROCEDURE RoutingLinkValid@6(ProdOrderComp@1000 : Record 5407;ProdOrderLine@1002 : Record 5406) : Boolean;
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
    BEGIN
      IF ProdOrderComp."Routing Link Code" = '' THEN
        EXIT(FALSE);

      WITH ProdOrderRtngLine DO BEGIN
        RESET;
        SETRANGE(Status,ProdOrderLine.Status);
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
        SETRANGE("Routing No.",ProdOrderLine."Routing No.");
        SETRANGE("Routing Link Code",ProdOrderComp."Routing Link Code");
        EXIT(FINDFIRST);
      END;
    END;

    LOCAL PROCEDURE InsertConsumptionJnlLine@4(ProdOrderComp@1004 : Record 5407;ProdOrderLine@1005 : Record 5406;Level@1000 : Integer);
    VAR
      Item@1014 : Record 27;
      Location@1001 : Record 14;
      ItemTrackingMgt@1003 : Codeunit 6500;
      NeededQty@1002 : Decimal;
      IsHandled@1006 : Boolean;
    BEGIN
      WITH ProdOrderComp DO BEGIN
        Item.GET("Item No.");
        IF Item.Blocked THEN BEGIN
          MESSAGE(Text002,"Item No.");
          EXIT;
        END;

        IsHandled := FALSE;
        OnInsertConsumptionJnlLineOnBeforeCheck(ProdOrderComp,ProdOrderLine,Item,IsHandled);
        IF IsHandled THEN
          EXIT;

        IF "Flushing Method" <> "Flushing Method"::Manual THEN
          NeededQty := 0
        ELSE BEGIN
          NeededQty := GetNeededQty(CalcBasedOn,TRUE);
          IF "Location Code" <> Location.Code THEN
            IF NOT Location.GET("Location Code") THEN
              CLEAR(Location);
          IF Location."Require Shipment" AND Location."Require Pick" THEN
            AdjustQtyToQtyPicked(NeededQty);
        END;

        ItemJnlLine.INIT;
        ItemJnlLine."Journal Template Name" := ToTemplateName;
        ItemJnlLine."Journal Batch Name" := ToBatchName;
        ItemJnlLine."Line No." := NextLineNo;
        ItemJnlLine.VALIDATE("Posting Date",PostingDate);
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Consumption);
        ItemJnlLine.VALIDATE("Order Type",ItemJnlLine."Order Type"::Production);
        ItemJnlLine.VALIDATE("Order No.","Prod. Order No.");
        ItemJnlLine.VALIDATE("Source No.",ProdOrderLine."Item No.");
        ItemJnlLine.VALIDATE("Item No.","Item No.");
        ItemJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
        ItemJnlLine.Description := Description;
        IF NeededQty <> 0 THEN
          IF Item."Rounding Precision" > 0 THEN
            ItemJnlLine.VALIDATE(Quantity,ROUND(NeededQty,Item."Rounding Precision",'>'))
          ELSE
            ItemJnlLine.VALIDATE(Quantity,ROUND(NeededQty,UOMMgt.QtyRndPrecision));

        ItemJnlLine.VALIDATE("Location Code","Location Code");
        IF "Bin Code" <> '' THEN
          ItemJnlLine."Bin Code" := "Bin Code";

        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine.VALIDATE("Order Line No.","Prod. Order Line No.");
        ItemJnlLine.VALIDATE("Prod. Order Comp. Line No.","Line No.");

        ItemJnlLine.Level := Level;
        ItemJnlLine."Flushing Method" := "Flushing Method";
        ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
        ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
        ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";

        OnBeforeInsertConsumptionJnlLine(ItemJnlLine,ProdOrderComp,ProdOrderLine,Level);
        ItemJnlLine.INSERT;
        OnAfterConsumptionJnlLineInsert(ItemJnlLine);

        IF Item."Item Tracking Code" <> '' THEN
          ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
      END;

      NextLineNo += 10000;

      OnAfterInsertConsumptionJnlLine(ItemJnlLine);
    END;

    LOCAL PROCEDURE InsertOutputJnlLine@11(ProdOrderRtngLine@1001 : Record 5409;ProdOrderLine@1000 : Record 5406);
    VAR
      WorkCenter@1005 : Record 99000754;
      MachineCenter@1006 : Record 99000758;
      ItemTrackingMgt@1004 : Codeunit 6500;
      CostCalcMgt@1003 : Codeunit 5836;
      QtyToPost@1002 : Decimal;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        IF ProdOrderRtngLine."Prod. Order No." <> '' THEN // Operation exist
          CASE ProdOrderRtngLine.Type OF
            ProdOrderRtngLine.Type::"Work Center":
              BEGIN
                WorkCenter.GET(ProdOrderRtngLine."No.");
                IF WorkCenter.Blocked THEN BEGIN
                  MESSAGE(Text005,WorkCenter.TABLECAPTION,WorkCenter."No.",ProdOrderRtngLine."Operation No.");
                  EXIT;
                END;
              END;
            ProdOrderRtngLine.Type::"Machine Center":
              BEGIN
                MachineCenter.GET(ProdOrderRtngLine."No.");
                IF MachineCenter.Blocked THEN BEGIN
                  MESSAGE(Text005,MachineCenter.TABLECAPTION,MachineCenter."No.",ProdOrderRtngLine."Operation No.");
                  EXIT;
                END;

                WorkCenter.GET(ProdOrderRtngLine."Work Center No.");
                IF WorkCenter.Blocked THEN BEGIN
                  MESSAGE(Text005,WorkCenter.TABLECAPTION,WorkCenter."No.",ProdOrderRtngLine."Operation No.");
                  EXIT;
                END;
              END;
          END;

        IF (ProdOrderRtngLine."Flushing Method" <> ProdOrderRtngLine."Flushing Method"::Manual) OR
           (PresetOutputQuantity = PresetOutputQuantity::"Zero on All Operations") OR
           ((PresetOutputQuantity = PresetOutputQuantity::"Zero on Last Operation") AND
            IsLastOperation(ProdOrderRtngLine)) OR
           ((ProdOrderRtngLine."Prod. Order No." = '') AND
            (PresetOutputQuantity <> PresetOutputQuantity::"Expected Quantity")) OR
           (ProdOrderRtngLine."Routing Status" = ProdOrderRtngLine."Routing Status"::Finished)
        THEN
          QtyToPost := 0
        ELSE
          IF ProdOrderRtngLine."Prod. Order No." <> '' THEN BEGIN
            QtyToPost :=
              CostCalcMgt.CalcQtyAdjdForRoutingScrap(
                "Quantity (Base)",
                ProdOrderRtngLine."Scrap Factor % (Accumulated)",
                ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)") -
              CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,ProdOrderRtngLine);
            QtyToPost := QtyToPost / "Qty. per Unit of Measure";
          END ELSE // No Routing Line
            QtyToPost := "Remaining Quantity";

        IF QtyToPost < 0 THEN
          QtyToPost := 0;

        ItemJnlLine.INIT;
        ItemJnlLine."Journal Template Name" := ToTemplateName;
        ItemJnlLine."Journal Batch Name" := ToBatchName;
        ItemJnlLine."Line No." := NextLineNo;
        ItemJnlLine.VALIDATE("Posting Date",PostingDate);
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Output);
        ItemJnlLine.VALIDATE("Order Type",ItemJnlLine."Order Type"::Production);
        ItemJnlLine.VALIDATE("Order No.","Prod. Order No.");
        ItemJnlLine.VALIDATE("Order Line No.","Line No.");
        ItemJnlLine.VALIDATE("Item No.","Item No.");
        ItemJnlLine.VALIDATE("Variant Code","Variant Code");
        ItemJnlLine.VALIDATE("Location Code","Location Code");
        IF "Bin Code" <> '' THEN
          ItemJnlLine.VALIDATE("Bin Code","Bin Code");
        ItemJnlLine.VALIDATE("Routing No.","Routing No.");
        ItemJnlLine.VALIDATE("Routing Reference No.","Routing Reference No.");
        IF ProdOrderRtngLine."Prod. Order No." <> '' THEN
          ItemJnlLine.VALIDATE("Operation No.",ProdOrderRtngLine."Operation No.");
        ItemJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
        ItemJnlLine.VALIDATE("Setup Time",0);
        ItemJnlLine.VALIDATE("Run Time",0);
        IF ("Location Code" <> '') AND IsLastOperation(ProdOrderRtngLine) THEN
          ItemJnlLine.CheckWhse("Location Code",QtyToPost);
        IF ItemJnlLine.SubcontractingWorkCenterUsed THEN
          ItemJnlLine.VALIDATE("Output Quantity",0)
        ELSE
          ItemJnlLine.VALIDATE("Output Quantity",QtyToPost);

        IF ProdOrderRtngLine."Routing Status" = ProdOrderRtngLine."Routing Status"::Finished THEN
          ItemJnlLine.Finished := TRUE;
        ItemJnlLine."Flushing Method" := ProdOrderRtngLine."Flushing Method";
        ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
        ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
        ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";

        OnBeforeInsertOutputJnlLine(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine);
        ItemJnlLine.INSERT;
        OnAfterInsertOutputJnlLine(ItemJnlLine);

        IF IsLastOperation(ProdOrderRtngLine) THEN
          ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
      END;

      NextLineNo += 10000;

      RecursiveInsertOutputJnlLine(ProdOrderRtngLine,ProdOrderLine);
    END;

    LOCAL PROCEDURE RecursiveInsertOutputJnlLine@27(ProdOrderRoutingLine@1003 : Record 5409;ProdOrderLine@1002 : Record 5406);
    VAR
      AdditionalProdOrderLine@1001 : Record 5406;
      DoRecursion@1000 : Boolean;
    BEGIN
      DoRecursion := FALSE;
      OnBeforeRecursiveInsertOutputJnlLine(ProdOrderRoutingLine,ProdOrderLine,DoRecursion,AdditionalProdOrderLine);
      IF DoRecursion AND AdditionalProdOrderLine.HASFILTER THEN
        IF AdditionalProdOrderLine.FINDSET THEN BEGIN
          REPEAT
            InsertOutputJnlLine(ProdOrderRoutingLine,AdditionalProdOrderLine);
          UNTIL AdditionalProdOrderLine.NEXT = 0;
        END;
    END;

    [External]
    PROCEDURE InitSetupValues@17();
    BEGIN
      MfgSetup.GET;
      PostingDate := WORKDATE;
      CalcBasedOn := CalcBasedOn::"Expected Output";
      PresetOutputQuantity := MfgSetup."Preset Output Quantity";
    END;

    LOCAL PROCEDURE IsLastOperation@24(ProdOrderRoutingLine@1000 : Record 5409) Result : Boolean;
    BEGIN
      Result := ProdOrderRoutingLine."Next Operation No." = '';
      OnAfterIsLastOperation(ProdOrderRoutingLine,Result);
    END;

    [External]
    PROCEDURE SetTemplateAndBatchName@2();
    VAR
      PageTemplate@1001 : 'Item,Transfer,Phys. Inventory,Revaluation,Consumption,Output,Capacity,Prod. Order';
      User@1000 : Text;
    BEGIN
      ItemJnlTemplate.RESET;
      ItemJnlTemplate.SETRANGE("Page ID",PAGE::"Production Journal");
      ItemJnlTemplate.SETRANGE(Recurring,FALSE);
      ItemJnlTemplate.SETRANGE(Type,PageTemplate::"Prod. Order");
      IF NOT ItemJnlTemplate.FINDFIRST THEN BEGIN
        ItemJnlTemplate.INIT;
        ItemJnlTemplate.Recurring := FALSE;
        ItemJnlTemplate.VALIDATE(Type,PageTemplate::"Prod. Order");
        ItemJnlTemplate.VALIDATE("Page ID");

        ItemJnlTemplate.Name := FORMAT(ItemJnlTemplate.Type,MAXSTRLEN(ItemJnlTemplate.Name));
        ItemJnlTemplate.Description := STRSUBSTNO(Text000,ItemJnlTemplate.Type);
        ItemJnlTemplate.INSERT;
      END;

      ToTemplateName := ItemJnlTemplate.Name;

      ToBatchName := '';
      User := UPPERCASE(USERID); // Uppercase in case of Windows Login

      OnAfterSetTemplateAndBatchName(ItemJnlTemplate,User);

      IF User <> '' THEN
        IF (STRLEN(User) < MAXSTRLEN(ItemJnlLine."Journal Batch Name")) AND (ItemJnlLine."Journal Batch Name" <> '') THEN
          ToBatchName := COPYSTR(ItemJnlLine."Journal Batch Name",1,MAXSTRLEN(ItemJnlLine."Journal Batch Name") - 1) + 'A'
        ELSE
          ToBatchName := DELCHR(COPYSTR(User,1,MAXSTRLEN(ItemJnlLine."Journal Batch Name")),'>','0123456789');

      IF ToBatchName = '' THEN
        ToBatchName := Text003;

      IF NOT ItemJnlBatch.GET(ToTemplateName,ToBatchName) THEN BEGIN
        ItemJnlBatch.INIT;
        ItemJnlBatch."Journal Template Name" := ItemJnlTemplate.Name;
        ItemJnlBatch.SetupNewBatch;
        ItemJnlBatch.Name := ToBatchName;
        ItemJnlBatch.Description := Text004;
        ItemJnlBatch.INSERT(TRUE);
      END;

      COMMIT;
    END;

    [External]
    PROCEDURE DeleteJnlLines@5(TemplateName@1003 : Code[10];BatchName@1002 : Code[10];ProdOrderNo@1001 : Code[20];ProdOrderLineNo@1000 : Integer);
    VAR
      ItemJnlLine2@1005 : Record 83;
      ReservEntry@1004 : Record 337;
    BEGIN
      ItemJnlLine2.RESET;
      ItemJnlLine2.SETRANGE("Journal Template Name",TemplateName);
      ItemJnlLine2.SETRANGE("Journal Batch Name",BatchName);
      ItemJnlLine2.SETRANGE("Order Type",ItemJnlLine2."Order Type"::Production);
      ItemJnlLine2.SETRANGE("Order No.",ProdOrderNo);
      IF ProdOrderLineNo <> 0 THEN
        ItemJnlLine2.SETRANGE("Order Line No.",ProdOrderLineNo);
      IF ItemJnlLine2.FIND('-') THEN BEGIN
        REPEAT
          IF ReservEntryExist(ItemJnlLine2,ReservEntry) THEN
            ReservEntry.DELETEALL(TRUE);
        UNTIL ItemJnlLine2.NEXT = 0;

        OnBeforeDeleteAllItemJnlLine(ItemJnlLine2);
        ItemJnlLine2.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE DataHasChanged@8(TemplateName@1003 : Code[10];BatchName@1002 : Code[10];ProdOrderNo@1001 : Code[20];ProdOrderLineNo@1000 : Integer) : Boolean;
    VAR
      ItemJnlLine2@1004 : Record 83;
      ReservEntry@1005 : Record 337;
      HasChanged@1006 : Boolean;
    BEGIN
      ItemJnlLine2.RESET;
      ItemJnlLine2.SETRANGE("Journal Template Name",TemplateName);
      ItemJnlLine2.SETRANGE("Journal Batch Name",BatchName);
      ItemJnlLine2.SETRANGE("Order Type",ItemJnlLine2."Order Type"::Production);
      ItemJnlLine2.SETRANGE("Order No.",ProdOrderNo);
      IF ProdOrderLineNo <> 0 THEN
        ItemJnlLine2.SETRANGE("Order Line No.",ProdOrderLineNo);
      IF ItemJnlLine2.FIND('-') THEN
        REPEAT
          IF ItemJnlLine2."Changed by User" THEN
            EXIT(TRUE);
          IF ReservEntryExist(ItemJnlLine2,ReservEntry) THEN
            EXIT(TRUE);
        UNTIL ItemJnlLine2.NEXT = 0;

      HasChanged := FALSE;
      OnAfterDataHasChanged(ItemJnlLine2,ProdOrderLineNo,HasChanged);
      EXIT(HasChanged);
    END;

    [External]
    PROCEDURE ReservEntryExist@3(ItemJnlLine2@1001 : Record 83;VAR ReservEntry@1002 : Record 337) : Boolean;
    BEGIN
      WITH ItemJnlLine2 DO BEGIN
        ReservEntry.RESET;
        ReservEntry.SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line");
        ReservEntry.SETRANGE("Source ID","Journal Template Name");
        ReservEntry.SETRANGE("Source Ref. No.","Line No.");
        ReservEntry.SETRANGE("Source Type",DATABASE::"Item Journal Line");
        ReservEntry.SETRANGE("Source Subtype","Entry Type");
        ReservEntry.SETRANGE("Source Batch Name","Journal Batch Name");
        ReservEntry.SETRANGE("Source Prod. Order Line",0);
        IF NOT ReservEntry.ISEMPTY THEN
          EXIT(TRUE);

        EXIT(FALSE);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDataHasChanged@20(VAR ItemJournalLine@1000 : Record 83;ProdOrderLineNo@1002 : Integer;VAR HasChanged@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConsumptionJnlLineInsert@23(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertConsumptionJnlLine@14(VAR ItemJournalLine@1003 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertOutputJnlLine@12(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsLastOperation@25(ProdOrderRoutingLine@1000 : Record 5409;VAR IsLastOperation@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetTemplateAndBatchName@18(VAR ItemJournalTemplate@1001 : Record 82;VAR User@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertConsumptionJnlLine@9(VAR ItemJournalLine@1003 : Record 83;ProdOrderComp@1002 : Record 5407;ProdOrderLine@1001 : Record 5406;Level@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertOutputJnlLine@16(VAR ItemJournalLine@1000 : Record 83;ProdOrderRtngLine@1002 : Record 5409;ProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDeleteAllItemJnlLine@13(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRecursiveInsertOutputJnlLine@26(ProdOrderRoutingLine@1000 : Record 5409;ProdOrderLine@1001 : Record 5406;VAR DoRecursion@1002 : Boolean;VAR AdditionalProdOrderLine@1003 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRunProductionJnl@15(ToTemplateName@1001 : Code[10];ToBatchName@1000 : Code[10];ProdOrder@1002 : Record 5405;ActualLineNo@1003 : Integer;PostingDate@1004 : Date;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateJnlLinesOnAfterFindProdOrderRtngLine@19(VAR ProdOrderRoutingLine@1000 : Record 5409;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateJnlLinesOnBeforeCheckProdOrderLine@21(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertConsumptionJnlLineOnBeforeCheck@22(ProdOrderComponent@1000 : Record 5407;ProdOrderLine@1001 : Record 5406;Item@1002 : Record 27;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

