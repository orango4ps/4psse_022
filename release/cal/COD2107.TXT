OBJECT Codeunit 2107 O365 Sales Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CustomerHasBeenBlockedMsg@1000 : TextConst 'ENU=The customer has been blocked for further business.;NOR=Kunden erÿsperret for all ytterligere virksomhet.';
      IdentityManagement@1009 : Codeunit 9801;
      BlockQst@1004 : TextConst 'ENU=The customer could not be deleted as there are one or more documents for the customer.\ \Do you want to block the customer for further business?;NOR=Kunden kan ikke slettes fordi det finnes ett eller flere dokumenter for kunden.\ \Vil du sperre kunden for ytterligere virksomhet?';
      BlockedErr@1001 : TextConst 'ENU=The customer could not be deleted as there are one or more documents for the customer.;NOR=Kunden kan ikke slettes fordi det finnes ‚n eller flere dokumenter for kunden.';

    [External]
    PROCEDURE BlockOrDeleteCustomerAndDeleteContact@5(VAR Customer@1001 : Record 18);
    VAR
      CustContUpdate@1002 : Codeunit 5056;
    BEGIN
      IF GUIALLOWED THEN
        IF Customer.HasAnyOpenOrPostedDocuments THEN BEGIN
          IF Customer.IsBlocked THEN
            ERROR(BlockedErr);
          IF NOT CONFIRM(BlockQst,FALSE) THEN
            EXIT;
        END;
      CustContUpdate.DeleteCustomerContacts(Customer);
      IF Customer.HasAnyOpenOrPostedDocuments THEN BEGIN
        Customer.VALIDATE(Blocked,Customer.Blocked::All);
        Customer.MODIFY(TRUE);
        IF GUIALLOWED THEN
          MESSAGE(CustomerHasBeenBlockedMsg);
      END ELSE
        Customer.DELETE(TRUE);
    END;

    [External]
    PROCEDURE SetItemDefaultValues@15(VAR Item@1006 : Record 27);
    VAR
      GenProductPostingGroup@1005 : Record 251;
      VATProductPostingGroup@1004 : Record 324;
      TaxSetup@1001 : Record 326;
      TaxGroup@1003 : Record 321;
    BEGIN
      Item.Type := Item.Type::Service;
      Item."Costing Method" := Item."Costing Method"::FIFO;

      IF TaxSetup.GET THEN BEGIN
        IF TaxSetup."Non-Taxable Tax Group Code" <> '' THEN
          TaxGroup.SETFILTER(Code,'<>%1',TaxSetup."Non-Taxable Tax Group Code");
        IF TaxGroup.FINDFIRST THEN
          Item."Tax Group Code" := TaxGroup.Code;
      END;

      IF Item."Gen. Prod. Posting Group" = '' THEN
        IF GenProductPostingGroup.FINDFIRST THEN
          Item."Gen. Prod. Posting Group" := GenProductPostingGroup.Code;

      IF Item."VAT Prod. Posting Group" = '' THEN
        IF VATProductPostingGroup.FINDFIRST THEN
          Item."VAT Prod. Posting Group" := VATProductPostingGroup.Code;

      IF Item.MODIFY THEN;
    END;

    [External]
    PROCEDURE GetO365DocumentBrickStyle@3(O365SalesDocument@1002 : Record 2103;VAR OutStandingStatusStyle@1000 : Text);
    BEGIN
      WITH O365SalesDocument DO BEGIN
        OutStandingStatusStyle := '';

        CASE TRUE OF
          Canceled,"Last Email Sent Status" = "Last Email Sent Status"::Error:
            OutStandingStatusStyle := '';
          IsOverduePostedInvoice:
            OutStandingStatusStyle := 'Unfavorable';
        END;
      END;
    END;

    PROCEDURE GetSalesInvoiceBrickStyleAndStatus@1(SalesInvoiceHeader@1001 : Record 112;VAR OutStandingStatusStyle@1000 : Text;VAR Status@1003 : Text);
    VAR
      O365SalesDocument@1002 : Record 2103;
    BEGIN
      OutStandingStatusStyle := '';
      O365SalesDocument.SETRANGE("No.",SalesInvoiceHeader."No.");
      O365SalesDocument.SETRANGE(Posted,TRUE);
      IF O365SalesDocument.OnFind('+') THEN BEGIN
        Status := O365SalesDocument."Outstanding Status";
        O365SalesDocument.CALCFIELDS("Last Email Sent Status");

        CASE TRUE OF
          O365SalesDocument."Last Email Sent Status" = O365SalesDocument."Last Email Sent Status"::Error:
            OutStandingStatusStyle := 'Attention';
          O365SalesDocument.IsOverduePostedInvoice:
            OutStandingStatusStyle := 'Attention';
          O365SalesDocument.Canceled:
            OutStandingStatusStyle := 'Attention';
          O365SalesDocument.Posted AND (O365SalesDocument."Outstanding Amount" <= 0):
            OutStandingStatusStyle := 'Favorable';
        END;
      END;
    END;

    [External]
    PROCEDURE InsertNewCountryCode@4(VAR O365CountryRegion@1000 : Record 2152) : Boolean;
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      WITH O365CountryRegion DO BEGIN
        IF (Code = '') AND (Name = '') THEN
          EXIT(FALSE);
        IF Name = '' THEN
          VALIDATE(Name,COPYSTR(Code,1,MAXSTRLEN(Name)));
        IF Code = '' THEN
          VALIDATE(Code,COPYSTR(Name,1,MAXSTRLEN(Code)));

        CountryRegion.INIT;
        CountryRegion.VALIDATE(Code,Code);
        CountryRegion.VALIDATE(Name,Name);
        CountryRegion.VALIDATE("VAT Scheme",
          COPYSTR("VAT Scheme",1,MAXSTRLEN(CountryRegion."VAT Scheme"))
          );

        CountryRegion.INSERT(TRUE); // Passing on the error if it fails
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE ModifyCountryCode@22(xO365CountryRegion@1003 : Record 2152;O365CountryRegion@1000 : Record 2152) : Boolean;
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      IF NOT CountryRegion.GET(xO365CountryRegion.Code) THEN
        EXIT(FALSE);

      CountryRegion.VALIDATE(Name,O365CountryRegion.Name);
      CountryRegion.VALIDATE("VAT Scheme",
        COPYSTR(O365CountryRegion."VAT Scheme",1,MAXSTRLEN(CountryRegion."VAT Scheme"))
        );

      CountryRegion.MODIFY(TRUE); // Passing on the error if it fails
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE LookupCountryCodePhone@25() : Code[10];
    VAR
      O365CountryRegion@1001 : Record 2152;
      O365CountryRegionList@1003 : Page 2152;
    BEGIN
      O365CountryRegionList.LOOKUPMODE(TRUE);
      O365CountryRegionList.EDITABLE(FALSE);

      IF O365CountryRegionList.RUNMODAL <> ACTION::LookupOK THEN
        ERROR('');

      O365CountryRegionList.GETRECORD(O365CountryRegion);

      EXIT(O365CountryRegion.Code);
    END;

    [EventSubscriber(Codeunit,9170,OnBeforeOpenSettings)]
    PROCEDURE OpenFullInvoicingSettingsPage@68(VAR Handled@1000 : Boolean);
    BEGIN
      IF Handled THEN
        EXIT;

      IF NOT IdentityManagement.IsInvAppId THEN
        EXIT;

      Handled := TRUE;
      PAGE.RUNMODAL(PAGE::"BC O365 My Settings");
    END;

    [Internal]
    PROCEDURE GetQuickBooksVisible@158() : Boolean;
    VAR
      QboVisible@1000 : Boolean;
      QbdVisible@1001 : Boolean;
    BEGIN
      GetQboQbdVisibility(QboVisible,QbdVisible);
      EXIT(QboVisible OR QbdVisible);
    END;

    [Internal]
    PROCEDURE GetQboQbdVisibility@1056(VAR QbOnlineVisible@1009 : Boolean;VAR QbDesktopVisible@1010 : Boolean);
    VAR
      QBOSyncProxy@1000 : Codeunit 1061;
      QBDSyncProxy@1003 : Codeunit 1062;
      QbOnlineEnabled@1008 : Boolean;
      QbDesktopEnabled@1007 : Boolean;
      QbOnlineTitle@1004 : Text;
      QbOnlineDescription@1005 : Text;
      QbDesktopEmail@1006 : Text;
      QbDesktopTitle@1013 : Text;
      QbDesktopDescription@1012 : Text;
    BEGIN
      // QuickBooks Online should be visible if the extension is installed (i.e. someone replies to the event)
      QBOSyncProxy.GetQBOSyncSettings(QbOnlineTitle,QbOnlineDescription,QbOnlineEnabled);
      QbOnlineVisible := (QbOnlineTitle <> '') OR (QbOnlineDescription <> '');

      // QuickBooks Desktop should be visible if the extension is installed (i.e. someone replies to the event)
      QBDSyncProxy.GetQBDSyncSettings(QbDesktopTitle,QbDesktopDescription,QbDesktopEnabled,QbDesktopEmail);
      QbDesktopVisible := (QbDesktopTitle <> '') OR (QbDesktopDescription <> '');
    END;

    BEGIN
    END.
  }
}

