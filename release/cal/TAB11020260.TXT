OBJECT Table 11020260 General Text
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Created by" := USERID;
             END;

    CaptionML=[ENU=General Text;
               NOR=Generell tekst;
               SVE=Allm„n text];
    LookupPageID=Page11126493;
    DrillDownPageID=Page11126493;
  }
  FIELDS
  {
    { 10  ;   ;Table               ;Option        ;CaptionML=[ENU=Table;
                                                              NOR=Tabell;
                                                              SVE=Tabell];
                                                   OptionCaptionML=[ENU=Job,Customer,Generic CheckList Copy Line,Generic Issue;
                                                                    NOR=Jobb,Kunde];
                                                   OptionString=Job,Customer,GenCheckListCopyLine,GenIssue }
    { 20  ;   ;Code                ;Code20        ;TableRelation=IF (Table=CONST(Job)) Job.No.
                                                                 ELSE IF (Table=CONST(Customer)) Customer.No.
                                                                 ELSE IF (Table=CONST(GenCheckListCopyLine)) "Gen. Checklist Copy Line"."Checklist Copy No.";
                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 30  ;   ;Table Line No.      ;Integer       ;CaptionML=[ENU=Table Line No.;
                                                              NOR=Tabellinjenr.;
                                                              SVE=Tabellradnr] }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 50  ;   ;Text                ;Text80        ;CaptionML=[ENU=Text;
                                                              NOR=Tekst;
                                                              SVE=Ben„mning] }
    { 60  ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              NOR=Dato;
                                                              SVE=Datum] }
    { 70  ;   ;Time Created        ;Time          ;CaptionML=[ENU=Time;
                                                              NOR=Tid;
                                                              SVE=Tid] }
    { 80  ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapad av];
                                                   Editable=No }
    { 11012010;;Line Break         ;Boolean       ;CaptionML=[ENU=Line Break;
                                                              NOR=Radbrytning;
                                                              SVE=Radbrytning];
                                                   Description=jhoek.240511 }
  }
  KEYS
  {
    {    ;Table,Code,Table Line No.,Line No.      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE SetupNewLine@1100525000();
    BEGIN
      Date := WORKDATE;
      "Time Created" := TIME;
    END;

    PROCEDURE GetCustomerText@1100528100(Code@1100528100 : Code[20];ActiveInFSA@1100528102 : Boolean) : Text;
    BEGIN
      EXIT(GetGeneralText(Table::Customer, Code, 0, ActiveInFSA));
    END;

    PROCEDURE GetIssueText@1100528700(No@1100528700 : Code[20];ID@1100528701 : Integer) : Text;
    BEGIN
      EXIT(GetGeneralText(Table::GenIssue, No, ID, FALSE));
    END;

    LOCAL PROCEDURE GetGeneralText@1100528102(TableType@1100528104 : 'Job,Customer,GenCheckListCopyLine,GenIssue';RecordCode@1100526000 : Code[20];TableLineNo@1100528100 : Integer;ActiveInFSA@1100528105 : Boolean) : Text;
    VAR
      Result@1100528101 : Text;
      LineSeparator@1100528102 : Text;
    BEGIN
      Result := '';
      SETRANGE(Table, TableType);
      SETRANGE(Code, RecordCode);
      SETRANGE("Table Line No.", TableLineNo);
      //IF ActiveInFSA THEN
      //  SETRANGE("Active in FSA",TRUE);

      IF FINDSET() THEN
        REPEAT
          Result += LineSeparator + Text;

          IF "Line Break" THEN
            LineSeparator := CRLF
          ELSE
            LineSeparator := ' ';
        UNTIL NEXT = 0;

      EXIT(Result);
    END;

    PROCEDURE InsertGeneralText@1100528010(Buffer@1100528000 : Text;CreatedAt@1100528700 : DateTime;CreatedBy@1100528003 : Code[20];Table@1100528703 : 'Job,Customer,GenCheckListCopyLine,GenIssue';Code@1100528701 : Code[20];TableLineNo@1100528702 : Integer);
    VAR
      TempGeneralText@1100528001 : TEMPORARY Record 11020260;
      IsLastLine@1100528705 : Boolean;
      DummyLineBreak@1100528706 : Boolean;
      TextExtracted@1100528707 : Text;
      StringFunctions@1100528704 : Codeunit 11012273;
    BEGIN
      IF IsStringEmpty(Buffer) THEN
        EXIT;

      WHILE NOT IsLastLine DO BEGIN
        StringFunctions.SplitTextUsingLength(Buffer, TextExtracted, DummyLineBreak, MAXSTRLEN(TempGeneralText.Text));
        IsLastLine := (DELCHR(Buffer) = '');
        AddToTempGeneralText(TextExtracted, DummyLineBreak, CreatedAt, CreatedBy, TempGeneralText);
      END;

      WriteTempGeneralTextToGeneralText(TempGeneralText, Table, Code, TableLineNo);
    END;

    LOCAL PROCEDURE WriteTempGeneralTextToGeneralText@1100528000(VAR TempGeneralText@1100528000 : TEMPORARY Record 11020260;Table@1100528703 : 'Job,Customer,GenCheckListCopyLine,GenIssue';Code@1100528701 : Code[20];TableLineNo@1100528700 : Integer);
    VAR
      GeneralText@1100525003 : Record 11020260;
      NextLineNo@1100529002 : Integer;
    BEGIN
      IF NOT TempGeneralText.FINDSET THEN
        EXIT;

      GeneralText.SETRANGE(Table, Table);
      GeneralText.SETRANGE(Code, Code);
      GeneralText.SETRANGE("Table Line No.", TableLineNo);
      IF NOT GeneralText.FINDLAST THEN
        NextLineNo := 10000
      ELSE
        NextLineNo := GeneralText."Line No." + 10000;
      GeneralText.RESET;

      REPEAT
        GeneralText.INIT;
        GeneralText.Table := Table;
        GeneralText.Code := Code;
        GeneralText."Table Line No." := TableLineNo;
        GeneralText."Line No." := NextLineNo;
        GeneralText.TRANSFERFIELDS(TempGeneralText, FALSE);
        GeneralText.INSERT;
        NextLineNo := NextLineNo + 100;
      UNTIL TempGeneralText.NEXT = 0;
    END;

    LOCAL PROCEDURE SplitGeneralText@1100528009(Buffer@1100528000 : Text;CreatedAt@1100528700 : DateTime;CreatedBy@1100528008 : Code[20];VAR TempGeneralText@1100528002 : TEMPORARY Record 11020260);
    VAR
      Pos@1100528003 : Integer;
      MaxLen@1100528004 : Integer;
      Len@1100528006 : Integer;
      FoundCRLF@1100528005 : Boolean;
      FoundLF@1100528001 : Boolean;
    BEGIN
      MaxLen := MAXSTRLEN(TempGeneralText.Text);

      WHILE (STRLEN(Buffer) > 0) DO BEGIN
        FoundLF := FALSE;
        FoundCRLF := FALSE;

        Pos := STRPOS(Buffer, CRLF);
        FoundCRLF := Pos > 0;
        IF NOT FoundCRLF THEN BEGIN
          Pos := STRPOS(Buffer, LF);
          FoundLF := Pos > 0;
        END;

        IF FoundCRLF OR FoundLF THEN
          Len := Pos - 1
        ELSE
          Len := STRLEN(Buffer);

        IF Len > MaxLen THEN
          Len := MaxLen;

        AddToTempGeneralText(COPYSTR(Buffer, 1, Len), (FoundCRLF OR FoundLF), CreatedAt, CreatedBy, TempGeneralText);

        IF FoundCRLF THEN
          Len := Len + 2
        ELSE
          IF FoundLF THEN
            Len := Len + 1;

        IF (STRLEN(Buffer) > Len) THEN
          Buffer := COPYSTR(Buffer, Len + 1)
        ELSE
          Buffer := '';
      END;
    END;

    LOCAL PROCEDURE AddToTempGeneralText@1100528006(LineToAdd@1100528001 : Text;LineBreak@1100528005 : Boolean;CreatedAt@1100528004 : DateTime;CreatedBy@1100528003 : Code[20];VAR TempGeneralText@1100528000 : TEMPORARY Record 11020260);
    BEGIN
      IF NOT TempGeneralText.FINDLAST THEN
        TempGeneralText."Line No." := 0;

      TempGeneralText."Line No." := TempGeneralText."Line No." + 1;
      TempGeneralText.Text := LineToAdd;
      TempGeneralText.Date := DT2DATE(CreatedAt);
      TempGeneralText."Time Created" := DT2TIME(CreatedAt);
      TempGeneralText."Created by" := CreatedBy;
      TempGeneralText."Line Break" := LineBreak;
      TempGeneralText.INSERT;
    END;

    LOCAL PROCEDURE IsStringEmpty@1100528001(InputString@1100528000 : Text) : Boolean;
    BEGIN
      EXIT(DELCHR(InputString, '<>', ' ') = '');
    END;

    PROCEDURE IsNextLineSameGroup@1100528702() : Boolean;
    VAR
      NextLine@1100528001 : Record 11020260;
    BEGIN
      NextLine.COPY(Rec);

      IF NextLine.NEXT = 0 THEN
        EXIT(FALSE);

      IF (NextLine."Created by" <> "Created by") THEN
        EXIT(FALSE);

      IF (NextLine.Date <> 0D) AND (NextLine.Date <> Date) THEN
        EXIT(FALSE);

      IF (NextLine."Time Created" <> 0T) AND (ABS(NextLine."Time Created" - "Time Created") > 60000) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetCreatedByName@1100526101() : Text;
    VAR
      UserSetup@1100526100 : Record 91;
      Employee@1100526101 : Record 5200;
    BEGIN
      UserSetup.SETRANGE("User ID", "Created by");
      UserSetup.SETFILTER("Employee No.", '<>%1', '');
      IF UserSetup.FINDFIRST THEN
        IF Employee.GET(UserSetup."Employee No.") THEN
          EXIT(Employee.FullName);

      EXIT(USERID);
    END;

    PROCEDURE CRLF@1100528004() ReturnValue : Text[2];
    BEGIN
      ReturnValue[1] := 13;
      ReturnValue[2] := 10;
    END;

    PROCEDURE LF@1100528007() ReturnValue : Text[1];
    BEGIN
      ReturnValue[1] := 10;
    END;

    BEGIN
    END.
  }
}

