OBJECT Codeunit 11128001 SE Payment Import
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountandCurrencyId@1100530605 : Integer;
      TempPaymentImport00@1100530601 : TEMPORARY Record 11128000;
      TempPaymentImport10@1100530602 : TEMPORARY Record 11128000;
      TempPaymentImport20@1100530603 : TEMPORARY Record 11128000;
      Utils@1100530604 : Codeunit 11128000;
      gGenJournalLine@1100530606 : Record 81;
      gGiroMap@1100530607 : Record 11128001;
      PEB006@1101285000 : TextConst 'ENU=Amount Difference with %1;SVE=Beloppsdifferens p† %1';

    LOCAL PROCEDURE ReadBGMaxFile@1100530624(inFileName@1100530600 : Text[250];VAR lp_PaymentImport@1100530604 : Record 11128000);
    VAR
      inLine@1100530601 : Text[120];
      inFile@1100530603 : File;
      lastLineNo@1100530602 : Integer;
    BEGIN
      inFile.TEXTMODE(TRUE);
      inFile.WRITEMODE(FALSE);
      inFile.OPEN(inFileName);

      IF lp_PaymentImport.FINDLAST THEN
        lastLineNo := lp_PaymentImport.LineNo;

      WHILE inFile.READ(inLine)>0 DO BEGIN
        lastLineNo += 1;
        BGMLine(lastLineNo,inLine,lp_PaymentImport);
        IF lp_PaymentImport.FINDLAST THEN
          lastLineNo := lp_PaymentImport.LineNo;
      END;
    END;

    LOCAL PROCEDURE ReadTotalInFile@1100530604(inFileName@1100530600 : Text[250];VAR lp_PaymentImport@1100530604 : Record 11128000);
    VAR
      inLine@1100530601 : Text[120];
      inFile@1100530603 : File;
      lastLineNo@1100530602 : Integer;
    BEGIN
      inFile.TEXTMODE(TRUE);
      inFile.WRITEMODE(FALSE);
      inFile.OPEN(inFileName);

      IF lp_PaymentImport.FINDLAST THEN
        lastLineNo := lp_PaymentImport.LineNo;

      WHILE inFile.READ(inLine)>0 DO BEGIN
        lastLineNo += 1;
        TILine(lastLineNo,inLine,lp_PaymentImport);
        IF lp_PaymentImport.FINDLAST THEN
          lastLineNo := lp_PaymentImport.LineNo;
      END;
    END;

    PROCEDURE "--BGMax"@1100530622();
    BEGIN
    END;

    PROCEDURE BGMLine@1100530623(lineNo@1100530601 : Integer;inLine@1100530600 : Text[120];VAR lp_PaymentImport@1100530605 : Record 11128000);
    VAR
      saveIt@1100530602 : Boolean;
      value@1100530603 : Text[80];
      value2@1100530604 : Text[80];
    BEGIN
      lp_PaymentImport.INIT;
      lp_PaymentImport.LineNo := lineNo;
      lp_PaymentImport."Record type" := COPYSTR(inLine,1,2);
      lp_PaymentImport."Account type" := lp_PaymentImport."Account type"::BG;

      IF lp_PaymentImport."Record type" = '01' THEN
        AccountandCurrencyId := 0;
      IF lp_PaymentImport."Record type" = '05' THEN
        AccountandCurrencyId += 1;

      lp_PaymentImport."Account and Currency group" := AccountandCurrencyId;

      lp_PaymentImport."Message 1" := COPYSTR(inLine,3,35);
      lp_PaymentImport."Message 2" := COPYSTR(inLine,38,35);
      lp_PaymentImport."Message 3" := COPYSTR(inLine,72,8);

      saveIt := TRUE;
      CASE lp_PaymentImport."Record type" OF
        '01': BGMtype01(lp_PaymentImport);
        '70':
          saveIt := FALSE;

        '05': BGMtype05(lp_PaymentImport);
        '15': BGMtype15(lp_PaymentImport);

        '20','21': BGMtype20(lp_PaymentImport);
        '22','23': BGMtype22(lp_PaymentImport);

        '26':
          BEGIN
            lp_PaymentImport."Message 1" := DELCHR(lp_PaymentImport."Message 1",'>',' ');
            value := Utils.Ansi2Ascii(lp_PaymentImport."Message 1");
            IF value<>'' THEN BEGIN
              lp_PaymentImport.GET(TempPaymentImport20.LineNo);
              lp_PaymentImport."Payers name" := value;
              lp_PaymentImport.MODIFY;
            END;
            saveIt := FALSE;
          END;

        '28':
          BEGIN
            lp_PaymentImport."Message 1" := DELCHR(lp_PaymentImport."Message 1",'>',' ');
            value := Utils.Ansi2Ascii(lp_PaymentImport."Message 1");
            IF value<>'' THEN BEGIN
              lp_PaymentImport.GET(TempPaymentImport20.LineNo);
              lp_PaymentImport."Payers city" := value;
              lp_PaymentImport.MODIFY;
            END;
            saveIt := FALSE;
          END;

        '29':
          BEGIN
            lp_PaymentImport."Message 1" := DELCHR(COPYSTR(lp_PaymentImport."Message 1",1,12),'>',' ');
            value := Utils.Ansi2Ascii(lp_PaymentImport."Message 1");
            IF value<>'' THEN BEGIN
              lp_PaymentImport.GET(TempPaymentImport20.LineNo);
              lp_PaymentImport."PayerCorporate identity number" := value;
              lp_PaymentImport.MODIFY;
            END;
            saveIt := FALSE;
          END;

        '25',                 //message
        '27':
          saveIt := FALSE;

      END;

      IF saveIt THEN
        lp_PaymentImport.INSERT;
      AccountandCurrencyId := lp_PaymentImport."Account and Currency group";
    END;

    LOCAL PROCEDURE BGMtype01@1100530606(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';lPaymentImport."Message 3" := '';

      //kontroll Layoutnamn
      IF DELCHR(COPYSTR(value,3,20),'>',' ') <> 'BGMAX' THEN
        ERROR('Unsupported file type');


      lPaymentImport."File Time stamp" := Utils.DMYT2DT(COPYSTR(value,25,20));

      lPaymentImport."File type" := DELCHR(COPYSTR(value,45,1),'>',' ');
      lPaymentImport."Name of the file type"  := DELCHR(COPYSTR(value,3,10),'>',' ');
      TempPaymentImport00 := lPaymentImport;
    END;

    LOCAL PROCEDURE BGMtype05@1100530617(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';
      lPaymentImport."Message 3" := 'start payment by date & currency';

      lPaymentImport."Total IN ID" := TempPaymentImport00."Total IN ID";
      lPaymentImport."File Time stamp" := TempPaymentImport00."File Time stamp";
      lPaymentImport."Delivery number" := TempPaymentImport00."Delivery number";
      lPaymentImport."File type" := TempPaymentImport00."File type";
      lPaymentImport."Name of the file type" := TempPaymentImport00."Name of the file type";


      value2 := DELCHR(COPYSTR(value,13,10),'<',' ');
      value2 := DELCHR(value2,'<','0');
      lPaymentImport."Receiving account"  := value2;

      value2 := DELCHR(COPYSTR(value,3,10),'<',' ');
      value2 := DELCHR(value2,'<','0');
      lPaymentImport."Receiving Bankgiro number"  := value2;

      IF lPaymentImport."Receiving account" = '' THEN
        lPaymentImport."Receiving account"  := value2;

      lPaymentImport.Currency  := DELCHR(COPYSTR(value,23,3),'>',' ');

      IF NOT gGiroMap.GET(gGiroMap."Giro type"::BG,lPaymentImport."Receiving account",lPaymentImport.Currency) THEN
        IF NOT gGiroMap.GET(gGiroMap."Giro type"::BG,lPaymentImport."Receiving account",'') THEN CLEAR(gGiroMap);

      TempPaymentImport10 := lPaymentImport;
    END;

    LOCAL PROCEDURE BGMtype15@1100530619(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';lPaymentImport."Message 3" := '';

      lPaymentImport.GET(TempPaymentImport10.LineNo);
      lPaymentImport.DELETE;


      value2 := COPYSTR(value,51,18);
      IF EVALUATE(lPaymentImport."Receiving Amount",value2) THEN
        lPaymentImport."Receiving Amount" /= 100;
      lPaymentImport."Receiving Amount" *= -1;

      value2 := COPYSTR(value,38,8);
      lPaymentImport."Posting date" := DT2DATE(Utils.DMYT2DT(value2));

      value2 := COPYSTR(value,36,3);
      IF EVALUATE(lPaymentImport."serial number",value2) THEN;

      lPaymentImport."Message 1" := DELCHR(COPYSTR(value,3,35),'<','0');
    END;

    LOCAL PROCEDURE BGMtype20@1100530616(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';
      lPaymentImport."Message 3" := 'payment';

      lPaymentImport.Credit := lPaymentImport."Record type" = '21';

      lPaymentImport."Total IN ID" := TempPaymentImport00."Total IN ID";
      lPaymentImport."File Time stamp" := TempPaymentImport00."File Time stamp";
      lPaymentImport."Delivery number" := TempPaymentImport00."Delivery number";
      lPaymentImport."File type" := TempPaymentImport00."File type";
      lPaymentImport."Name of the file type" := TempPaymentImport00."Name of the file type";

      lPaymentImport."Receiving account"  := TempPaymentImport10."Receiving account";
      lPaymentImport.Currency  := TempPaymentImport10.Currency;
      lPaymentImport."Posting date"  := TempPaymentImport10."Posting date";


      lPaymentImport."Message 1" := DELCHR(COPYSTR(value,3,10),'>',' ');
      lPaymentImport."Message 1" := DELCHR(lPaymentImport."Message 1",'<','0');
      IF lPaymentImport."Message 1" <> '' THEN
        lPaymentImport."Message 1" := 'BG ' + lPaymentImport."Message 1";

      lPaymentImport."Customer reference" := DELCHR(COPYSTR(value,13,25),'<>',' ');

      value2 := COPYSTR(value,38,18);
      IF EVALUATE(lPaymentImport."Receiving Amount",value2) THEN
        lPaymentImport."Receiving Amount" /= 100;


      value2 := COPYSTR(value,56,1);
      IF EVALUATE(lPaymentImport."Reference code",value2) THEN;

      value2 := COPYSTR(value,57,1);
      IF EVALUATE(lPaymentImport."Payment channel code",value2) THEN;

      value2 := COPYSTR(value,70,1);
      IF EVALUATE(lPaymentImport."Slip scan marker",value2) THEN;

      lPaymentImport."Message 2" := DELCHR(COPYSTR(value,58,12),'>',' ');
      lPaymentImport."Message 2" := DELCHR(lPaymentImport."Message 2",'<','0');
      IF lPaymentImport."Message 2" <> '' THEN
        lPaymentImport."Message 2" := 'BGC ' + lPaymentImport."Message 2";


      IF lPaymentImport.Credit THEN BEGIN
        lPaymentImport."Receiving Amount" *= -1;
        value2 := COPYSTR(value,71,1);
        CASE value2 OF
          '0': lPaymentImport."Deduction code" := 1;
          '1': lPaymentImport."Deduction code" := 2;
          '2': lPaymentImport."Deduction code" := 3;
        END;
      END;

      TempPaymentImport20 := lPaymentImport;
    END;

    LOCAL PROCEDURE BGMtype22@1100530651(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';
      lPaymentImport."Message 3" := 'extra reference';

      lPaymentImport."Total IN ID" := TempPaymentImport00."Total IN ID";
      lPaymentImport."File Time stamp" := TempPaymentImport00."File Time stamp";
      lPaymentImport."Delivery number" := TempPaymentImport00."Delivery number";
      lPaymentImport."File type" := TempPaymentImport00."File type";
      lPaymentImport."Name of the file type" := TempPaymentImport00."Name of the file type";

      lPaymentImport."Receiving account"  := TempPaymentImport10."Receiving account";
      lPaymentImport.Currency  := TempPaymentImport10.Currency;
      lPaymentImport."Posting date"  := TempPaymentImport10."Posting date";

      lPaymentImport.PaymentLineNo := TempPaymentImport20.LineNo;



      lPaymentImport.Credit := lPaymentImport."Record type" = '23';

      lPaymentImport."Customer reference" := DELCHR(COPYSTR(value,13,25),'<>',' ');

      value2 := COPYSTR(value,38,18);
      IF EVALUATE(lPaymentImport."Receiving Amount",value2) THEN
        lPaymentImport."Receiving Amount" /= 100;
    END;

    PROCEDURE "--TotalIN"@1100530625();
    BEGIN
    END;

    PROCEDURE TILine@1100530600(lineNo@1100530601 : Integer;inLine@1100530600 : Text[120];VAR lp_PaymentImport@1100530605 : Record 11128000);
    VAR
      saveIt@1100530602 : Boolean;
      value@1100530603 : Text[80];
      value2@1100530604 : Text[80];
    BEGIN
      lp_PaymentImport.INIT;
      lp_PaymentImport.LineNo := lineNo;
      lp_PaymentImport."Record type" := COPYSTR(inLine,1,2);
      lp_PaymentImport."Account type" := lp_PaymentImport."Account type"::PG;

      IF lp_PaymentImport."Record type" = '00' THEN
        AccountandCurrencyId := 0;
      IF lp_PaymentImport."Record type" = '10' THEN
        AccountandCurrencyId += 1;

      lp_PaymentImport."Account and Currency group" := AccountandCurrencyId;

      lp_PaymentImport."Message 1" := COPYSTR(inLine,3,35);
      lp_PaymentImport."Message 2" := COPYSTR(inLine,38,35);
      lp_PaymentImport."Message 3" := COPYSTR(inLine,72,8);

      saveIt := TRUE;
      CASE lp_PaymentImport."Record type" OF
        '00':
          BEGIN
            TItype00(lp_PaymentImport);  //start
            saveIt := TRUE;
          END;
        '99': saveIt := FALSE;  //end

      // ACCOUNTS and CURRENCIES
        '10': TItype10(lp_PaymentImport);  //start
        '90': TItype90(lp_PaymentImport);  //end

      // TRANSACTIONS
        '20','25'
          : TItype20(lp_PaymentImport);
        '30': TItype30(lp_PaymentImport);

        '50','61':
          BEGIN
            lp_PaymentImport."Message 1" := DELCHR(lp_PaymentImport."Message 1",'>',' ');
            value := Utils.Ansi2Ascii(lp_PaymentImport."Message 1");
            IF value <> '' THEN BEGIN
              lp_PaymentImport.GET(TempPaymentImport20.LineNo);
              lp_PaymentImport."Payers name" := value;
              lp_PaymentImport.MODIFY;
            END;
            saveIt := FALSE;
          END;

         '60':
          BEGIN
            lp_PaymentImport."Message 1" := DELCHR(lp_PaymentImport."Message 1",'>',' ');
            lp_PaymentImport."Message 2" := DELCHR(lp_PaymentImport."Message 2",'<>',' ');
            value := Utils.Ansi2Ascii(lp_PaymentImport."Message 1");
            value2 := Utils.Ansi2Ascii(lp_PaymentImport."Message 2");
            lp_PaymentImport.GET(TempPaymentImport20.LineNo);
            IF DELCHR(lp_PaymentImport."Message 1",'>',' ') = '' THEN
              lp_PaymentImport."Message 1" := value;
            IF value2 <> '' THEN
              lp_PaymentImport."PayerCorporate identity number" := value2;
            lp_PaymentImport.MODIFY;
            saveIt := FALSE;
          END;

          '52','63':
            BEGIN
            value := Utils.Ansi2Ascii(lp_PaymentImport."Message 1");
            value2 := Utils.Ansi2Ascii(lp_PaymentImport."Message 2");
            value := COPYSTR(value+value2,10,35);
            value := DELCHR(value,'<>',' ');
              BEGIN
                lp_PaymentImport.GET(TempPaymentImport20.LineNo);
                lp_PaymentImport."Payers city" := value;
                lp_PaymentImport.MODIFY;
              END;
              saveIt := FALSE;
            END;

        '40',                 //message
        '51','52',       //payment sender
        '61','62',  //payment sender account
        '70':                 //international payments
          saveIt := FALSE;

      END;

      IF saveIt THEN
        lp_PaymentImport.INSERT;
      AccountandCurrencyId := lp_PaymentImport."Account and Currency group";
    END;

    LOCAL PROCEDURE TItype00@1100530613(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';lPaymentImport."Message 3" := '';
      lPaymentImport."Message 3" := 'start file';

      lPaymentImport."Total IN ID" := DELCHR(COPYSTR(value,3,12),'>',' ');
      lPaymentImport."File Time stamp" := Utils.DMYT2DT(COPYSTR(value,15,20));

      value2 := COPYSTR(value,35,2);
      IF EVALUATE(lPaymentImport."Delivery number",value2) THEN;

      lPaymentImport."File type" := DELCHR(COPYSTR(value,37,3),'>',' ');
      lPaymentImport."Name of the file type"  := DELCHR(COPYSTR(value,40,10),'>',' ');
      TempPaymentImport00 := lPaymentImport;
    END;

    LOCAL PROCEDURE TItype10@1100530662(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';lPaymentImport."Message 3" := '';
      lPaymentImport."Message 3" := 'start payment by date & currency';

      lPaymentImport."Total IN ID" := TempPaymentImport00."Total IN ID";
      lPaymentImport."File Time stamp" := TempPaymentImport00."File Time stamp";
      lPaymentImport."Delivery number" := TempPaymentImport00."Delivery number";
      lPaymentImport."File type" := TempPaymentImport00."File type";
      lPaymentImport."Name of the file type" := TempPaymentImport00."Name of the file type";

      lPaymentImport."Receiving account"  := DELCHR(COPYSTR(value,3,36),'>',' ');
      lPaymentImport.Currency  := DELCHR(COPYSTR(value,39,3),'>',' ');
      lPaymentImport."Posting date"  := DT2DATE(Utils.DMYT2DT(COPYSTR(value,42,8)));

      IF NOT gGiroMap.GET(gGiroMap."Giro type"::PG,lPaymentImport."Receiving account",lPaymentImport.Currency) THEN
        IF NOT gGiroMap.GET(gGiroMap."Giro type"::PG,lPaymentImport."Receiving account",'') THEN CLEAR(gGiroMap);

      TempPaymentImport10 := lPaymentImport;
    END;

    LOCAL PROCEDURE TItype20@1100530614(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';lPaymentImport."Message 3" := '';
      lPaymentImport."Message 3" := 'payment';

      lPaymentImport.Credit := lPaymentImport."Record type" = '25';

      lPaymentImport."Total IN ID" := TempPaymentImport00."Total IN ID";
      lPaymentImport."File Time stamp" := TempPaymentImport00."File Time stamp";
      lPaymentImport."Delivery number" := TempPaymentImport00."Delivery number";
      lPaymentImport."File type" := TempPaymentImport00."File type";
      lPaymentImport."Name of the file type" := TempPaymentImport00."Name of the file type";

      lPaymentImport."Receiving account"  := TempPaymentImport10."Receiving account";
      lPaymentImport.Currency  := TempPaymentImport10.Currency;
      lPaymentImport."Posting date"  := TempPaymentImport10."Posting date";

      lPaymentImport."Customer reference" := DELCHR(COPYSTR(value,3,35),'>',' ');
      IF lPaymentImport."Customer reference" = '0000000000000000000000000' THEN
        lPaymentImport."Customer reference" := '';

      value2 := COPYSTR(value,38,15);
      IF EVALUATE(lPaymentImport."Receiving Amount",value2) THEN
        lPaymentImport."Receiving Amount" /= 100;

      value2 := COPYSTR(value,53,17);
      IF EVALUATE(lPaymentImport."serial number",value2) THEN;

      IF NOT lPaymentImport.Credit THEN
        lPaymentImport."Receiving Bankgiro number" := DELCHR(COPYSTR(value,70,8),'>',' ');

      value2 := COPYSTR(value,70,1);
      IF lPaymentImport.Credit THEN BEGIN
        lPaymentImport."Receiving Amount" := -lPaymentImport."Receiving Amount";
        CASE value2 OF
          '0': lPaymentImport."Deduction code" := 1;
          '1': lPaymentImport."Deduction code" := 2;
          '2': lPaymentImport."Deduction code" := 3;
        END;
      END;

      TempPaymentImport20 := lPaymentImport;
    END;

    LOCAL PROCEDURE TItype30@1100530601(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';lPaymentImport."Message 3" := '';
      lPaymentImport."Message 3" := 'extra reference';

      lPaymentImport."Total IN ID" := TempPaymentImport00."Total IN ID";
      lPaymentImport."File Time stamp" := TempPaymentImport00."File Time stamp";
      lPaymentImport."Delivery number" := TempPaymentImport00."Delivery number";
      lPaymentImport."File type" := TempPaymentImport00."File type";
      lPaymentImport."Name of the file type" := TempPaymentImport00."Name of the file type";

      lPaymentImport."Receiving account"  := TempPaymentImport10."Receiving account";
      lPaymentImport.Currency  := TempPaymentImport10.Currency;
      lPaymentImport."Posting date"  := TempPaymentImport10."Posting date";

      lPaymentImport.PaymentLineNo := TempPaymentImport20.LineNo;

      lPaymentImport."Customer reference" := DELCHR(COPYSTR(value,3,35),'>',' ');

      value2 := DELCHR(COPYSTR(value,38,35),'>',' ');
      IF value2 <> '' THEN BEGIN
        lPaymentImport.INSERT;
        lPaymentImport.LineNo += 1;
        lPaymentImport."Customer reference" := value2;
      END;
    END;

    LOCAL PROCEDURE TItype90@1100530605(VAR lPaymentImport@1100530600 : Record 11128000);
    VAR
      value@1100530601 : Text[80];
      value2@1100530602 : Text[80];
    BEGIN
      value := '  '+lPaymentImport."Message 1" + lPaymentImport."Message 2" + lPaymentImport."Message 3";
      //lPaymentImport."Message 1" := '';lPaymentImport."Message 2" := '';lPaymentImport."Message 3" := '';
      lPaymentImport."Message 3" := 'end payment by date & currency';



      lPaymentImport.GET(TempPaymentImport10.LineNo);
      lPaymentImport.DELETE;

      value2 := COPYSTR(value,11,17);
      IF EVALUATE(lPaymentImport."Receiving Amount",value2) THEN
        lPaymentImport."Receiving Amount" /= 100;
      lPaymentImport."Receiving Amount" *= -1;

      value2 := COPYSTR(value,28,8);
      lPaymentImport."Posting date" := DT2DATE(Utils.DMYT2DT(value2));
      value2 := COPYSTR(value,36,3);
      IF EVALUATE(lPaymentImport."serial number",value2) THEN;

      lPaymentImport."Message 1" := DELCHR(COPYSTR(value,3,8),'<','0');
    END;

    PROCEDURE "--util"@1100530610();
    BEGIN
    END;

    PROCEDURE TransferToJournal@1100530611(VAR lp_PaymentImport@1100530603 : Record 11128000);
    VAR
      l_GenJournalLine1@1100530600 : Record 81;
      l_GenJournalLine2@1100530601 : Record 81;
      LastLineNo@1100530602 : Integer;
      Balance@1100530605 : Decimal;
      BottomLine@1100530604 : Boolean;
    BEGIN
      gGenJournalLine.TESTFIELD("Journal Template Name");
      gGenJournalLine.TESTFIELD("Journal Batch Name");

      LastLineNo := 0;
      l_GenJournalLine1.SETRANGE("Journal Template Name",gGenJournalLine."Journal Template Name");
      l_GenJournalLine1.SETRANGE("Journal Batch Name",gGenJournalLine."Journal Batch Name");
      IF l_GenJournalLine1.FINDLAST THEN
        LastLineNo := l_GenJournalLine1."Line No.";

      l_GenJournalLine1."Journal Template Name" := gGenJournalLine."Journal Template Name";
      l_GenJournalLine1."Journal Batch Name" := gGenJournalLine."Journal Batch Name";
      l_GenJournalLine2 := l_GenJournalLine1;

      lp_PaymentImport.SETFILTER("Record type",'<>00&<>01');//start file
      IF lp_PaymentImport.FINDSET THEN
      REPEAT
        BottomLine := FALSE;
        CLEAR(l_GenJournalLine1);
        l_GenJournalLine1."Journal Template Name" := gGenJournalLine."Journal Template Name";
        l_GenJournalLine1."Journal Batch Name" := gGenJournalLine."Journal Batch Name";
        l_GenJournalLine1.DPA_SetDefaultDepartment;
        l_GenJournalLine1.SetUpNewLine(l_GenJournalLine2,Balance,BottomLine);
        l_GenJournalLine1."Line No." := LastLineNo + 10000;
        LastLineNo := l_GenJournalLine1."Line No.";
        l_GenJournalLine1."Posting Date" := lp_PaymentImport."Posting date";
        IF l_GenJournalLine1."Posting Date" = 0D THEN
          l_GenJournalLine1."Posting Date" := DT2DATE(lp_PaymentImport."File Time stamp");
        l_GenJournalLine1."Document Type" := l_GenJournalLine1."Document Type"::Payment;
        l_GenJournalLine1."Account Type" := l_GenJournalLine1."Account Type"::Customer;
        l_GenJournalLine1.VALIDATE("Account No.", lp_PaymentImport."Customer No.");

        IF NOT gGiroMap.GET(lp_PaymentImport."Account type",lp_PaymentImport."Receiving account",lp_PaymentImport.Currency) THEN
          IF NOT gGiroMap.GET(lp_PaymentImport."Account type",lp_PaymentImport."Receiving account",'') THEN CLEAR(gGiroMap);
        IF ((lp_PaymentImport."Account type" = lp_PaymentImport."Account type"::PG) AND (lp_PaymentImport."Record type" = '10')) OR
           ((lp_PaymentImport."Account type" = lp_PaymentImport."Account type"::BG) AND (lp_PaymentImport."Record type" = '05')) THEN
        BEGIN
          l_GenJournalLine1."Account Type" := l_GenJournalLine1."Account Type"::"G/L Account";
          l_GenJournalLine1.VALIDATE("Account No.", '');
          IF gGiroMap."Bal. Account No." <> '' THEN BEGIN
            l_GenJournalLine1.VALIDATE("Account Type", gGiroMap."Bal. Account Type");
            l_GenJournalLine1.VALIDATE("Account No.", gGiroMap."Bal. Account No.");
          END;
        END;

        IF lp_PaymentImport."Applies-to Doc. No." <> '' THEN BEGIN
          l_GenJournalLine1."Account Type" := l_GenJournalLine1."Account Type"::Customer;
          l_GenJournalLine1.VALIDATE("Account No.", lp_PaymentImport."Customer No.");
          l_GenJournalLine1.DontWarnValidateAppliesToDocNo;  //<-ENH035
          l_GenJournalLine1."Applies-to Doc. Type" := lp_PaymentImport."Applies-to Doc. Type";
          l_GenJournalLine1.VALIDATE("Applies-to Doc. No.", lp_PaymentImport."Applies-to Doc. No.");
        END;

        l_GenJournalLine1.VALIDATE(Amount, lp_PaymentImport."Amount to apply");
        IF lp_PaymentImport."Posting Description" <> '' THEN
      //>>131206, spill overflow on 'Posting Description'
          //l_GenJournalLine1.Description := lp_PaymentImport."Posting Description";
          l_GenJournalLine1.Description :=
            COPYSTR(lp_PaymentImport."Posting Description",1,MAXSTRLEN(l_GenJournalLine1.Description));
      //<<

      //>>ENH-005
      //Test! discuss with Tony
      //l_GenJournalLine1."External Document No." := lp_PaymentImport."Customer reference";
      //
        IF (l_GenJournalLine1."Account No." = '') OR (l_GenJournalLine1."Applies-to Doc. No." = '') THEN BEGIN
           l_GenJournalLine1."Not Matched" := TRUE;
         END;
      //<<ENH-005
        l_GenJournalLine1."Received amount" := lp_PaymentImport."Receiving Amount"; //IME201
        l_GenJournalLine1.INSERT(TRUE);
        l_GenJournalLine2 := l_GenJournalLine1;
      UNTIL lp_PaymentImport.NEXT=0;
    END;

    PROCEDURE SetJournal@1100530609(JournalTemplateName@1100530601 : Code[10];JournalBatchName@1100530602 : Code[10]);
    VAR
      gnejnlline@1100530600 : Record 81;
    BEGIN
      CLEAR(gGenJournalLine);
      gGenJournalLine."Journal Template Name" := JournalTemplateName;
      gGenJournalLine."Journal Batch Name" := JournalBatchName;
    END;

    PROCEDURE FindAppliedDocFromRef@1100530602(VAR lp_PaymentImport@1100530603 : Record 11128000);
    VAR
      l_CustLedgerEntry@1100530600 : Record 21;
      EntryNo@1100530601 : Integer;
      l_temp_PaymentImport@1100530602 : TEMPORARY Record 11128000;
      BA005@1100530606 : TextConst 'ENU=%1 %2 allowance customer;NOR=%1 %2 avdrag kunde;SVE=%1 %2 avdrag kund';
      BA007@1100530604 : TextConst 'ENU=%1 %2 Customer Payment;NOR=%1 %2 innbetaling kunde;SVE=%1 %2 inbetalning kund';
      appliedSum@1100530605 : Decimal;
      paidSum@1100530607 : Decimal;
    BEGIN
      //make a copy of TEMP-records
      lp_PaymentImport.RESET;
      lp_PaymentImport.SETFILTER("Receiving account",'<>%1','');
      lp_PaymentImport.SETFILTER("Applies-to Doc. No.",'');
      IF lp_PaymentImport.FIND('-') THEN
      REPEAT
        l_temp_PaymentImport := lp_PaymentImport;
        l_temp_PaymentImport.INSERT;
      UNTIL lp_PaymentImport.NEXT=0;

      lp_PaymentImport.RESET;
      l_temp_PaymentImport.RESET;
      IF l_temp_PaymentImport.FIND('-') THEN
      REPEAT
        lp_PaymentImport.GET(l_temp_PaymentImport.LineNo);
        lp_PaymentImport."Amount to apply" := -lp_PaymentImport."Receiving Amount";
        lp_PaymentImport."Posting Description" :=
      //>>131206, spill overflow on 'Posting Description', field extended, extra spaces removed
          //lp_PaymentImport."PayerÉs name" + ' ' + lp_PaymentImport."Customer reference";
          DELCHR(lp_PaymentImport."Payers name",'<>',' ') + ' ' + DELCHR(lp_PaymentImport."Customer reference",'<>',' ');
      //<<131206
        lp_PaymentImport."Posting Description" := DELCHR(lp_PaymentImport."Posting Description",'<>',' ');


        EntryNo := 0;
        EntryNo := FindAppliedDocFromRefExtRef(lp_PaymentImport."Customer reference",lp_PaymentImport);
        IF EntryNo = 0 THEN
          EntryNo := FindAppliedDocFromRefDocNo(lp_PaymentImport."Customer reference",lp_PaymentImport);

        IF l_CustLedgerEntry.GET(EntryNo) THEN BEGIN
          l_CustLedgerEntry.CALCFIELDS("Remaining Amount");
          lp_PaymentImport."Customer No." := l_CustLedgerEntry."Customer No.";
          lp_PaymentImport."Cust.Ledger Entry No." := l_CustLedgerEntry."Entry No.";
          lp_PaymentImport."Applies-to Doc. Type" := l_CustLedgerEntry."Document Type";
          lp_PaymentImport."Applies-to Doc. No." := l_CustLedgerEntry."Document No.";

          IF (l_CustLedgerEntry."Document Type" = l_CustLedgerEntry."Document Type"::Invoice) AND
             (lp_PaymentImport."Posting date" <= l_CustLedgerEntry."Pmt. Discount Date")
          THEN
            lp_PaymentImport."Amount to apply" :=
              -(l_CustLedgerEntry."Remaining Amount" - l_CustLedgerEntry."Original Pmt. Disc. Possible")
          ELSE
            lp_PaymentImport."Amount to apply" :=
              -l_CustLedgerEntry."Remaining Amount";

          IF lp_PaymentImport."Amount to apply" > 0 THEN BEGIN
            lp_PaymentImport."Posting Description" :=
              STRSUBSTNO(BA005,lp_PaymentImport."Applies-to Doc. No.",l_CustLedgerEntry."Document Type");
          END ELSE BEGIN
            lp_PaymentImport."Posting Description" :=
              STRSUBSTNO(BA007,lp_PaymentImport."Applies-to Doc. No.",l_CustLedgerEntry."Document Type");
          END;
      //>>IME137
          //overpay
          IF (lp_PaymentImport."Applies-to Doc. Type" = lp_PaymentImport."Applies-to Doc. Type"::Invoice)
              AND (l_CustLedgerEntry."Remaining Amount" > lp_PaymentImport."Receiving Amount") THEN
              lp_PaymentImport."Amount to apply" := -lp_PaymentImport."Receiving Amount";
      //<<IME137
          lp_PaymentImport.MODIFY;
        END
        ELSE BEGIN
          lp_PaymentImport."Customer No." := FindAppliedDocFromCust(lp_PaymentImport."Payers name");
          lp_PaymentImport.MODIFY;
        END;


        IF l_temp_PaymentImport.PaymentLineNo <> 0 THEN BEGIN
          appliedSum := 0;
          paidSum := 0;
          lp_PaymentImport.SETRANGE(LineNo,l_temp_PaymentImport.PaymentLineNo,l_temp_PaymentImport.LineNo-1);
          IF lp_PaymentImport.FINDSET THEN
          REPEAT
            appliedSum += lp_PaymentImport."Amount to apply";
            paidSum += lp_PaymentImport."Receiving Amount";
          UNTIL lp_PaymentImport.NEXT=0;
          lp_PaymentImport.SETRANGE(LineNo);
          lp_PaymentImport.GET(l_temp_PaymentImport.LineNo);
          IF appliedSum + paidSum < -lp_PaymentImport."Amount to apply" THEN
            lp_PaymentImport."Amount to apply" := -(appliedSum + paidSum);
          lp_PaymentImport.MODIFY;
        END;

      UNTIL l_temp_PaymentImport.NEXT=0;
    END;

    LOCAL PROCEDURE FindAppliedDocFromRefDocNo@1100530603(CustRef@1100530601 : Text[35];VAR lp_PaymentImport@1100530602 : Record 11128000) : Integer;
    VAR
      l_CustLedgerEntry@1100530600 : Record 21;
      CustRef2@1100285500 : Text[35];
      GenericSalesHeader@1100285501 : Record 11071888;
    BEGIN
      IF CustRef = '' THEN
        EXIT(0);

      IF l_CustLedgerEntry.SETCURRENTKEY("Document No.") THEN;
      l_CustLedgerEntry.SETRANGE(Open,TRUE);
      l_CustLedgerEntry.SETRANGE("Document No.", COPYSTR(CustRef,1,MAXSTRLEN(l_CustLedgerEntry."Document No.")));
      IF NOT l_CustLedgerEntry.FINDFIRST THEN
        l_CustLedgerEntry.SETRANGE(Open,FALSE);

      IF l_CustLedgerEntry.FINDFIRST THEN
        EXIT(l_CustLedgerEntry."Entry No.");


      //>>ENH035


      CustRef2 := CustRef;
      IF STRLEN(CustRef) > 2 THEN
        CustRef2 := COPYSTR(CustRef,1,STRLEN(CustRef)-2);
      IF l_CustLedgerEntry.SETCURRENTKEY("Document No.") THEN;
      l_CustLedgerEntry.SETRANGE(Open,TRUE);
      l_CustLedgerEntry.SETRANGE("Document No.",COPYSTR(CustRef2,1,MAXSTRLEN(l_CustLedgerEntry."Document No.")));

      IF NOT l_CustLedgerEntry.FINDFIRST THEN
        l_CustLedgerEntry.SETRANGE(Open,FALSE);

      IF l_CustLedgerEntry.FINDFIRST THEN BEGIN
        GenericSalesHeader."Document Type" := l_CustLedgerEntry."Document Type";
        GenericSalesHeader."No." := l_CustLedgerEntry."Document No.";
        IF GenericSalesHeader.GetOCR = CustRef THEN
          EXIT(l_CustLedgerEntry."Entry No.");
      END;

      //<<ENH035

      EXIT(0);
    END;

    LOCAL PROCEDURE FindAppliedDocFromRefExtRef@1100530607(CustRef@1100530600 : Text[30];VAR lp_PaymentImport@1100530602 : Record 11128000) : Integer;
    VAR
      l_CustLedgerEntry@1100530601 : Record 21;
    BEGIN
      IF CustRef = '' THEN
        EXIT(0);

      IF l_CustLedgerEntry.SETCURRENTKEY("External Document No.") THEN;
      l_CustLedgerEntry.SETRANGE(Open,TRUE);
      l_CustLedgerEntry.SETRANGE("External Document No.",
        COPYSTR(lp_PaymentImport."Customer reference",1,MAXSTRLEN(l_CustLedgerEntry."External Document No.")));
      IF NOT l_CustLedgerEntry.FINDFIRST THEN
        l_CustLedgerEntry.SETRANGE(Open,FALSE);

      IF l_CustLedgerEntry.FINDFIRST THEN
        EXIT(l_CustLedgerEntry."Entry No.");

      EXIT(0);
    END;

    LOCAL PROCEDURE FindAppliedDocFromCust@1100530608(l_CustName@1100530601 : Text[35]) : Code[20];
    VAR
      l_Cust@1100530600 : Record 18;
    BEGIN
      IF l_CustName = '' THEN
        EXIT('');
      //l_Cust.Name,
      l_Cust.SETRANGE("Search Name",l_CustName);
      IF l_Cust.FINDLAST THEN
        EXIT(l_Cust."No.");
      EXIT('');
    END;

    PROCEDURE "--base"@1();
    BEGIN
    END;

    PROCEDURE ValidateAppliesToDocNo@1100570019(VAR pvGenJournalLine@1100570000 : Record 81;CurrFieldNo@1100570002 : Integer;DontWarnValidateAppliesToDocNoBool@1100525000 : Boolean);
    VAR
      CustLedgEntry@1100570001 : Record 21;
      PEB007@1100570013 : TextConst 'ENU=Invoice No. %1 is not for Customer No. %2;SVE=Fakturanr %1 tillh”r inte kundnr %2';
      PEB008@1100570012 : TextConst 'ENU=Invoice No. %1 does not exist, or is paid;SVE=Fakturanr %1 finns inte, eller „r betald';
      PEB009@1100570011 : TextConst 'ENU=Invoice No. %1 is not for Vendor No. %2;SVE=Fakturanr %1 tillh”r inte leverant”rsnr %2';
      PEB010@1100570010 : TextConst 'ENU=Document No. %1 does not exist, or is paid;SVE=Verfikationsnr %1 finns inte, eller „r betald';
      PEB011@1100570009 : TextConst 'ENU=%1 %2 allowance customer;NOR=%1 %2 avdrag kunde;SVE=%1 %2 avdrag kund';
      PEB012@1100570004 : TextConst 'ENU=%1 %2 payment vendor;SVE=%1 %2 betalning lev.';
      PEB013@1100570007 : TextConst 'ENU=%1 %2 Customer Payment;NOR=%1 %2 innbetaling kunde;SVE=%1 %2 inbetalning kund';
      PEB014@1100570006 : TextConst 'ENU=%1 %2 allowance vendor;SVE=%1 %2 avdrag lev.';
      VendLedgEntry@1100570014 : Record 25;
    BEGIN
      // T81
      WITH pvGenJournalLine DO BEGIN
        IF "Applies-to Doc. No." = '' THEN BEGIN
          VALIDATE(Amount,0);
          "Applies-to Doc. Type" := 0;
        END ELSE BEGIN
          IF "Account Type"= "Account Type"::Customer THEN BEGIN
            CustLedgEntry.SETCURRENTKEY("Document No.");
            CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
            CustLedgEntry.SETFILTER("Customer No.", "Account No.");
            IF CustLedgEntry.FIND('-') THEN BEGIN
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              IF CustLedgEntry.COUNT > 1 THEN
                IF CurrFieldNo <> 0 THEN
                  IF PAGE.RUNMODAL(25, CustLedgEntry) = ACTION::LookupCancel THEN BEGIN
                    CLEAR("Applies-to Doc. No.");
                    EXIT;
                  END;
              IF "Account No." = '' THEN
                VALIDATE("Account No.",CustLedgEntry."Customer No.")
              ELSE
                IF CustLedgEntry."Customer No." <> "Account No." THEN
                  ERROR(PEB007,"Applies-to Doc. No.","Account No.");
              IF ("Document Type" = "Document Type"::Payment) AND
                 (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) AND
                 ("Posting Date" <= CustLedgEntry."Pmt. Discount Date")
              THEN
                Amount := -(CustLedgEntry."Remaining Amount" - CustLedgEntry."Original Pmt. Disc. Possible")
              ELSE
                Amount := -CustLedgEntry."Remaining Amount";
              VALIDATE("Currency Code",CustLedgEntry."Currency Code");
              VALIDATE(Amount);
              "Applies-to Doc. Type" := CustLedgEntry."Document Type";
              "Applies-to Doc. No." := CustLedgEntry."Document No.";
              "Applies-to ID" := '';

              "Document Type" := "Document Type"::Payment;
              //4PSSE
              VALIDATE("Shortcut Dimension 1 Code",CustLedgEntry."Global Dimension 1 Code");

            END ELSE
            //>>160504
            BEGIN
              IF NOT DontWarnValidateAppliesToDocNoBool THEN
                ERROR(PEB008,"Applies-to Doc. No.");
            END;
            //<<160504
          END ELSE
          IF "Account Type" = "Account Type"::Vendor THEN BEGIN
            VendLedgEntry.SETCURRENTKEY("Document No.");
            VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
            VendLedgEntry.SETRANGE(Open,TRUE);
            VendLedgEntry.SETFILTER("Vendor No.", "Account No.");
            IF VendLedgEntry.FIND('-') THEN BEGIN
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              IF VendLedgEntry.COUNT > 1 THEN
                IF CurrFieldNo <> 0 THEN
                  IF PAGE.RUNMODAL(29, VendLedgEntry) = ACTION::LookupCancel THEN BEGIN
                    CLEAR("Applies-to Doc. No.");
                    EXIT;
                  END;
              IF "Account No." = '' THEN
                VALIDATE("Account No.",VendLedgEntry."Vendor No.")
              ELSE
                IF VendLedgEntry."Vendor No." <> "Account No." THEN
                  ERROR(PEB009,"Applies-to Doc. No.","Account No.");
              IF ("Document Type" = "Document Type"::Payment) AND
                 (
                 VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice) AND
                 ("Posting Date" <= VendLedgEntry."Pmt. Discount Date")
              THEN
                Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Original Pmt. Disc. Possible")
              ELSE
                Amount := -VendLedgEntry."Remaining Amount";
              VALIDATE("Currency Code",VendLedgEntry."Currency Code");
              VALIDATE(Amount);
              "Applies-to Doc. Type" := VendLedgEntry."Document Type";
              "Applies-to Doc. No." := VendLedgEntry."Document No.";
              "Applies-to ID" := '';
              "External Document No." := VendLedgEntry."External Document No.";
              "Document Type" := "Document Type"::Payment;
            END ELSE
            //>>160504
            BEGIN
               IF NOT DontWarnValidateAppliesToDocNoBool THEN
              ERROR(PEB010,"Applies-to Doc. No.");
            END;
            //<<160504
          END;
          VALIDATE("Payment Terms Code");
          IF ("Account Type"= "Account Type"::Vendor) AND ("Document Type" = "Document Type"::Payment) THEN
            "Due Date" := VendLedgEntry."Due Date";

        END;
        IF Amount > 0 THEN BEGIN
          IF "Account Type" = "Account Type"::Customer THEN
            Description := STRSUBSTNO(PEB011,"Applies-to Doc. No.",CustLedgEntry."Document Type");
          IF "Account Type" = "Account Type"::Vendor THEN
            Description := STRSUBSTNO(PEB012,"Applies-to Doc. No.",VendLedgEntry."Document Type");
        END ELSE BEGIN
          IF "Account Type" = "Account Type"::Customer THEN
            Description := STRSUBSTNO(PEB013,"Applies-to Doc. No.",CustLedgEntry."Document Type");
          IF "Account Type" = "Account Type"::Vendor THEN
            Description := STRSUBSTNO(PEB014,"Applies-to Doc. No.",VendLedgEntry."Document Type");
        END;
        UpdateLineBalance;
        UpdateSource;
      END;
    END;

    LOCAL PROCEDURE VerifySetNotMatched@1100285101(VAR GJLine@1100285100 : Record 81);
    VAR
      Currency@1100285103 : Record 4;
      bel1@1100285102 : Decimal;
      bel2@1100285101 : Decimal;
    BEGIN
      //180918,Support #15413
      IF (GJLine."Account Type"<>GJLine."Account Type"::Customer) OR (GJLine."Account No." = '') THEN EXIT;
      IF (GJLine.Amount = GJLine."Received amount") OR (GJLine."Received amount"=0) THEN EXIT;
      GJLine."Not Matched" := TRUE;
      IF (GJLine."Applies-to Doc. No."='') THEN EXIT;

      IF (GJLine."Account Type"=GJLine."Account Type"::Customer) AND (GJLine."Applies-to Doc. No."<>'') AND
          (GJLine.Amount <> GJLine."Received amount") AND (GJLine."Received amount"<>0) THEN BEGIN
        GJLine."Information Type" := GJLine."Information Type"::Error;
        IF GJLine.Comment = '' THEN
          GJLine.Comment := STRSUBSTNO(PEB006,GJLine.Amount + GJLine."Received amount")
        ELSE
          GJLine.Comment := COPYSTR(STRSUBSTNO(PEB006,GJLine.Amount + GJLine."Received amount") + ' | ' + GJLine.Comment,1,MAXSTRLEN(GJLine.Comment));

        IF (GJLine."Currency Code"='') OR NOT Currency.GET(GJLine."Currency Code") THEN
          Currency.InitRoundingPrecision;
        bel1 := ABS(GJLine."Received amount");
        bel2 := ABS(GJLine.Amount);
        CASE TRUE OF
          bel1 > bel2:
            IF ABS(bel1 - bel2) <= Currency."Invoice Rounding Precision" THEN GJLine."Information Type" := GJLine."Information Type"::" " ;
          ELSE
            IF ABS(bel2 - bel1) <= Currency."Invoice Rounding Precision" THEN GJLine."Information Type" := GJLine."Information Type"::" " ;
        END;

        IF (GJLine."Information Type" = 0) AND (GJLine."Applies-to Doc. No."<>'') THEN
          GJLine."Not Matched" := FALSE;

      END;
    END;

    [EventSubscriber(Table,81,OnAfterValidateAppliestoDocNo)]
    PROCEDURE VerifySetNotMatchedOnAfterValidateAppliestoDocNoTable@1100285102(VAR Rec@1100285100 : Record 81);
    BEGIN
      VerifySetNotMatched(Rec);
    END;

    [EventSubscriber(Page,255,OnAfterValidateAmount)]
    PROCEDURE VerifySetNotMatchedOnAfterValidateAmountPage@1100285100(VAR Rec@1100285100 : Record 81);
    BEGIN
      VerifySetNotMatched(Rec);
    END;

    BEGIN
    {
      131206, spill overflow on 'Posting Description'
      131217, DL, fel tecken i BGtype15
      140114  GHE   ENH-005 : Not Matched
      140409 ITERO.DL IME137 apply paid amount not invoiced amount
      140617 ITERO.DL ENH035 Let the system match Invoice OCR no. stored in "External document No."
      141002 ITERO.DL GiroMap Not mandatory
      141014 ITERO.DL IME201 store payed amount on journal line
      150128 ITERO.DL SS002177 implement ValidateAppliesToDocNo from BASE
      180918 ITERO.DL Support #15413, new EventSubscriber VerifySetNotMatched
      180924 ORANGO.DL use 2 Subscribers to 1 function
    }
    END.
  }
}

