OBJECT Report 11071706 Generate Recording Cross List
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=GrundstÅck-Aufnahmeliste generieren;
               ENU=Generate Plot Recording List;
               NLD=Bouwnummer opnamestaat aanmaken];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  Window.OPEN(Text000 + Text001 + Text002 + Text003);
                  LineCounter := 0;
                  JobsSetup.GET;
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                   IF LineCounter = 0 THEN
                     MESSAGE(Text004)
                   ELSE
                     MESSAGE(Text005,LineCounter);
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               OnPreDataItem=BEGIN
                               LineCounter := 0;
                             END;

               ReqFilterFields=No. }

    { 1100528200;1;DataItem;                 ;
               DataItemTable=Table11072243;
               DataItemTableView=SORTING(Project No.,House Model,Code);
               OnAfterGetRecord=BEGIN
                                  PlotRecordingCrossList.RESET;
                                  PlotRecordingCrossList.SETRANGE("Project No.", Job."No.");
                                  PlotRecordingCrossList.SETRANGE("House Model", "Settlement Quantity"."House Model");
                                  PlotRecordingCrossList.SETFILTER(Unit, '%1', '');
                                  PlotRecordingCrossList.SETRANGE(Type, PlotRecordingCrossList.Type::Settlement);
                                  PlotRecordingCrossList.SETRANGE(Code, "Settlement Quantity".Code);
                                  //PlotRecordingCrossList.SETRANGE(Source,PlotRecordingCrossList.Source::Template);

                                  IF PlotRecordingCrossList.ISEMPTY THEN BEGIN
                                    LineNo := GetFreeLineNo;

                                    LineCounter := LineCounter + 1;
                                    Window.UPDATE(1, Job."No.");
                                    Window.UPDATE(2, "Settlement Quantity"."House Model");
                                    Window.UPDATE(3, LineCounter);

                                    PlotRecordingCrossList.INIT;

                                    PlotRecordingCrossList.VALIDATE("Project No.", Job."No.");
                                    PlotRecordingCrossList."House Model" := "Settlement Quantity"."House Model"; //Do Not Validate, fieldvalue is necessary because of tableview of subpages.
                                    PlotRecordingCrossList.VALIDATE(Unit, '');
                                    PlotRecordingCrossList.VALIDATE("Line No.", LineNo);
                                    PlotRecordingCrossList.VALIDATE(Type, PlotRecordingCrossList.Type::Settlement);
                                    PlotRecordingCrossList.VALIDATE(Code, "Settlement Quantity".Code);
                                    PlotRecordingCrossList.INSERT(TRUE);
                                    PlotRecordingCrossList.VALIDATE(Source, PlotRecordingCrossList.Source::Template);
                                    PlotRecordingCrossList.MODIFY;
                                  END;
                                END;

               DataItemLink=Project No.=FIELD(No.) }

    { 7045;1   ;DataItem;ProjectOption       ;
               DataItemTable=Table11012502;
               DataItemTableView=SORTING(Project No.,House Model,Main Group,Group,Sub Group,Option,Plot No.)
                                 WHERE(Option=FILTER(<>''));
               OnAfterGetRecord=BEGIN
                                  PlotRecordingCrossList.RESET;
                                  PlotRecordingCrossList.SETRANGE("Project No.", Job."No.");
                                  PlotRecordingCrossList.SETRANGE("House Model", ProjectOption."House Model");
                                  PlotRecordingCrossList.SETFILTER(Unit, '%1', '');
                                  PlotRecordingCrossList.SETRANGE(Type, PlotRecordingCrossList.Type::Option);
                                  PlotRecordingCrossList.SETRANGE("Main Group", ProjectOption."Main Group");
                                  PlotRecordingCrossList.SETRANGE(Group, ProjectOption.Group);
                                  PlotRecordingCrossList.SETRANGE("Sub Group", ProjectOption."Sub Group");
                                  PlotRecordingCrossList.SETRANGE(Code, ProjectOption.Option);
                                  //PlotRecordingCrossList.SETRANGE(Source,PlotRecordingCrossList.Source::Template);

                                  IF PlotRecordingCrossList.ISEMPTY THEN BEGIN
                                    LineNo := GetFreeLineNo2;

                                    LineCounter := LineCounter + 1;
                                    Window.UPDATE(1, Job."No.");
                                    Window.UPDATE(2, ProjectOption."House Model");
                                    Window.UPDATE(3, LineCounter);

                                    PlotRecordingCrossList.INIT;
                                    PlotRecordingCrossList.VALIDATE("Project No.", Job."No.");
                                    PlotRecordingCrossList.VALIDATE("House Model", ProjectOption."House Model");
                                    PlotRecordingCrossList.VALIDATE(Unit, '');
                                    PlotRecordingCrossList.VALIDATE("Line No.", LineNo);
                                    PlotRecordingCrossList.VALIDATE(Type, PlotRecordingCrossList.Type::Option);
                                    PlotRecordingCrossList.VALIDATE("Main Group", ProjectOption."Main Group");
                                    PlotRecordingCrossList.VALIDATE(Group, ProjectOption.Group);
                                    PlotRecordingCrossList.VALIDATE("Sub Group", ProjectOption."Sub Group");
                                    PlotRecordingCrossList.VALIDATE(Code, ProjectOption.Option);
                                    PlotRecordingCrossList.INSERT(TRUE);
                                    PlotRecordingCrossList.VALIDATE(Source, PlotRecordingCrossList.Source::Template);
                                    PlotRecordingCrossList.MODIFY;
                                  END;
                                END;

               DataItemLink=Project No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012006 : TextConst 'DEU=Verrechnungsmengen werden aktualisiert...\\;ENU=Updating Settlement Quantities...\\;NLD=Bijwerken verrekenbare hoeveelheden...\\';
      Text001@11012007 : TextConst 'DEU=Projekt          #1##########\;ENU=Project          #1##########\;NLD=Project           #1##########\;NOR=Prosjekt          #1##########\;SVE=Projekt          #1##########\';
      Text002@11012008 : TextConst 'DEU=Modell #2##########\\;ENU=Model            #2##########\\;NLD=Woningmodel #2##########\\';
      Text003@11012010 : TextConst 'DEU=Zeilennr.        #3##########\\;ENU=Line No.        #3##########\\;NLD=Regelnr.         #3##########\\;NOR=Rad No.        #3##########\\;SVE=Radnr.          #3##########\\';
      Text004@11012013 : TextConst 'DEU=Keine Aufnahmeliste aktualisiert;ENU=No Recording List Updated;NLD=Er zijn geen wijzigingen aan de opnamestaat gemaakt';
      Text005@11012014 : TextConst 'DEU=Aufnahmeliste aktualisiert;ENU=Recording List updated;NLD=De opnamestaat is bijgewerkt';
      JobsSetup@1100528200 : Record 315;
      PlotRecordingCrossList@1100528204 : Record 11072253;
      PlotRecordingCrossList2@1100528202 : Record 11072253;
      Window@1100528201 : Dialog;
      LineCounter@1100528203 : Integer;
      LineNo@1100528205 : Integer;

    PROCEDURE GetFreeLineNo@1100528200() NewLine : Integer;
    VAR
      LineBefore@1100528201 : Integer;
      LineAfter@1100528200 : Integer;
      NewLine2@1100528202 : Integer;
      LineBeforeFound@1100528203 : Boolean;
    BEGIN
      //TODO Transfer this code to the table
      NewLine := 0;
      LineBefore := 0;
      LineAfter := 0;
      LineBeforeFound := FALSE;

      PlotRecordingCrossList2.RESET;
      PlotRecordingCrossList2.SETCURRENTKEY("Project No.","House Model",Unit,"Line No.");
      PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
      PlotRecordingCrossList2.SETRANGE("House Model", "Settlement Quantity"."House Model");
      PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
      IF PlotRecordingCrossList2.ISEMPTY THEN
        //No Lines for Project/HouseModel/Unit in Table
        NewLine := 10000
      ELSE BEGIN
        PlotRecordingCrossList2.RESET;
        PlotRecordingCrossList2.SETCURRENTKEY("Project No.", "House Model", Unit, Type, "Main Group", Group, "Sub Group", Code, "Line No.");
        PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
        PlotRecordingCrossList2.SETRANGE("House Model", "Settlement Quantity"."House Model");
        PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
        PlotRecordingCrossList2.SETRANGE(Type, PlotRecordingCrossList2.Type::Settlement);
        PlotRecordingCrossList2.SETFILTER(Code, '<%1', "Settlement Quantity".Code);
        IF PlotRecordingCrossList2.FINDLAST THEN BEGIN
          //Last Line Before Line to insert
          LineBefore := PlotRecordingCrossList2."Line No.";
          LineBeforeFound := TRUE;
        END;

        PlotRecordingCrossList2.SETFILTER(Code, '>%1', "Settlement Quantity".Code);
        IF PlotRecordingCrossList2.FINDFIRST THEN BEGIN
          //First Line After Line to insert
          LineAfter := PlotRecordingCrossList2."Line No.";
        END ELSE BEGIN
          PlotRecordingCrossList2.RESET;
          PlotRecordingCrossList2.SETCURRENTKEY("Project No.","House Model",Unit,"Line No.");
          PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
          PlotRecordingCrossList2.SETRANGE("House Model", "Settlement Quantity"."House Model");
          PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
          PlotRecordingCrossList2.SETFILTER("Line No.", '>%1', LineBefore);
          IF PlotRecordingCrossList2.FINDFIRST THEN
            //First Line After Line to insert Primary Key
            LineAfter := PlotRecordingCrossList2."Line No.";
        END;

        IF (LineAfter < LineBefore) AND (LineAfter <> 0) THEN
          LineAfter := LineBefore;

        IF LineAfter <> 0 THEN BEGIN
          NewLine := ROUND((LineBefore+LineAfter)/2 , 1, '=');
        END ELSE BEGIN
          NewLine := LineBefore + 10000;
          NewLine := ROUND(NewLine, 10000, '>');
        END;

        PlotRecordingCrossList2.RESET;
        PlotRecordingCrossList2.SETCURRENTKEY("Project No.","House Model",Unit,"Line No.");
        PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
        PlotRecordingCrossList2.SETRANGE("House Model", "Settlement Quantity"."House Model");
        PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
        PlotRecordingCrossList2.SETRANGE("Line No.", NewLine);

        IF PlotRecordingCrossList2.FINDFIRST THEN BEGIN
          NewLine2 := NewLine;
          REPEAT
            NewLine2 := NewLine2 - 100;
            IF NewLine2 < LineBefore THEN
              NewLine2 := LineBefore;
            PlotRecordingCrossList2.SETRANGE("Line No.", NewLine2);
          UNTIL (NOT PlotRecordingCrossList2.FINDFIRST) OR (NewLine2 = LineBefore);

          IF (NewLine2 = LineBefore) AND LineBeforeFound THEN BEGIN
            NewLine2 := NewLine;
            REPEAT
              NewLine2 := NewLine + 100;
              PlotRecordingCrossList2.SETRANGE("Line No.", NewLine2);
            UNTIL (NOT PlotRecordingCrossList2.FINDFIRST);
          END;

          NewLine := NewLine2;
        END;

      END;
    END;

    PROCEDURE GetFreeLineNo2@1100528204() NewLine : Integer;
    VAR
      LineBefore@1100528201 : Integer;
      LineAfter@1100528200 : Integer;
      NewLine2@1100528202 : Integer;
      LineBeforeFound@1100528203 : Boolean;
    BEGIN
      //TODO Transfer this code to the table
      NewLine := 0;
      LineBefore := 0;
      LineAfter := 0;
      LineBeforeFound := FALSE;

      PlotRecordingCrossList2.RESET;
      PlotRecordingCrossList2.SETCURRENTKEY("Project No.","House Model",Unit,"Line No.");
      PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
      PlotRecordingCrossList2.SETRANGE("House Model", ProjectOption."House Model");
      PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
      IF PlotRecordingCrossList2.ISEMPTY THEN
        //No Lines for Project/HouseModel/Unit in Table
        NewLine := 10000
      ELSE BEGIN
        PlotRecordingCrossList2.RESET;
        PlotRecordingCrossList2.SETCURRENTKEY("Project No.", "House Model", Unit, Type, "Main Group", Group, "Sub Group", Code, "Line No.");
        PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
        PlotRecordingCrossList2.SETRANGE("House Model", ProjectOption."House Model");
        PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
        PlotRecordingCrossList2.SETRANGE(Type, PlotRecordingCrossList2.Type::Option);
        PlotRecordingCrossList2.SETFILTER(Code, '<%1', ProjectOption.Option);
        IF PlotRecordingCrossList2.FINDLAST THEN BEGIN
          //Last Line Before Line to insert
          LineBefore := PlotRecordingCrossList2."Line No.";
          LineBeforeFound := TRUE;
        END ELSE BEGIN
          PlotRecordingCrossList2.RESET;
          PlotRecordingCrossList2.SETCURRENTKEY("Project No.","House Model",Unit,"Line No.");
          PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
          PlotRecordingCrossList2.SETRANGE("House Model", ProjectOption."House Model");
          PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
          PlotRecordingCrossList2.SETRANGE(Type, PlotRecordingCrossList2.Type::Settlement);
          IF PlotRecordingCrossList2.FINDLAST THEN
            //First Line Before Line to insert Primary Key, previous type
            LineBefore := PlotRecordingCrossList2."Line No.";
            LineBeforeFound := TRUE;
        END;

        PlotRecordingCrossList2.RESET;
        PlotRecordingCrossList2.SETCURRENTKEY("Project No.", "House Model", Unit, Type, "Main Group", Group, "Sub Group", Code, "Line No.");
        PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
        PlotRecordingCrossList2.SETRANGE("House Model", ProjectOption."House Model");
        PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
        PlotRecordingCrossList2.SETRANGE(Type, PlotRecordingCrossList2.Type::Option);
        PlotRecordingCrossList2.SETFILTER(Code, '>%1', ProjectOption.Option);
        IF PlotRecordingCrossList2.FINDFIRST THEN BEGIN
          //First Line After Line to insert
          LineAfter := PlotRecordingCrossList2."Line No.";
        END ELSE BEGIN
          PlotRecordingCrossList2.RESET;
          PlotRecordingCrossList2.SETCURRENTKEY("Project No.","House Model",Unit,"Line No.");
          PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
          PlotRecordingCrossList2.SETRANGE("House Model", ProjectOption."House Model");
          PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
          PlotRecordingCrossList2.SETFILTER("Line No.", '>%1', LineBefore);
          IF PlotRecordingCrossList2.FINDFIRST THEN
            //First Line After Line to insert Primary Key
            LineAfter := PlotRecordingCrossList2."Line No.";
        END;

        IF (LineAfter < LineBefore) AND (LineAfter <> 0)  THEN
          LineAfter := LineBefore;

        IF LineAfter <> 0 THEN BEGIN
          NewLine := ROUND((LineBefore+LineAfter)/2 , 1, '=');
        END ELSE BEGIN
          NewLine := LineBefore + 10000;
          NewLine := ROUND(NewLine, 10000, '>');
        END;

        PlotRecordingCrossList2.RESET;
        PlotRecordingCrossList2.SETCURRENTKEY("Project No.","House Model",Unit,"Line No.");
        PlotRecordingCrossList2.SETRANGE("Project No.", Job."No.");
        PlotRecordingCrossList2.SETRANGE("House Model", ProjectOption."House Model");
        PlotRecordingCrossList2.SETFILTER(Unit, '%1', '');
        PlotRecordingCrossList2.SETRANGE("Line No.", NewLine);

        IF PlotRecordingCrossList2.FINDFIRST THEN BEGIN
          NewLine2 := NewLine;
          REPEAT
            NewLine2 := NewLine2 - 100;
            IF NewLine2 < LineBefore THEN
              NewLine2 := LineBefore;
            PlotRecordingCrossList2.SETRANGE("Line No.", NewLine2);
          UNTIL (NOT PlotRecordingCrossList2.FINDFIRST) OR (NewLine2 = LineBefore);

          IF (NewLine2 = LineBefore) AND LineBeforeFound THEN BEGIN
            NewLine2 := NewLine;
            REPEAT
              NewLine2 := NewLine + 100;
              PlotRecordingCrossList2.SETRANGE("Line No.", NewLine2);
            UNTIL (NOT PlotRecordingCrossList2.FINDFIRST);
          END;

          NewLine := NewLine2;
        END;

      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

