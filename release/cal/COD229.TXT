OBJECT Codeunit 229 Document-Print
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,NAVNO,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11020512=ri;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=%1 is missing for %2 %3.;NOR=%1 mangler for %2 %3.;SVE=%1 saknas f”r %2 %3.';
      Text002@1002 : TextConst 'ENU=%1 for %2 is missing in %3.;NOR=%1 for %2 mangler i %3.;SVE=%1 f”r %2 saknas i %3.';
      SalesSetup@1003 : Record 311;
      PurchSetup@1004 : Record 312;
      PrinterByPlantListRec@1100485001 : Record 11020512;
      ReturnOrderTxt@1100527300 : TextConst 'ENU=Return Order;NOR=Bestillingsretur;SVE=Returorder';
      Text11012001@1100528401 : TextConst 'ENU=List Service Order not Finished;NOR=Liste over serviceordre er ikke ferdig';
      Text11012002@1100528400 : TextConst 'ENU=List Service Orders Invoice not Received;NOR=Liste over serivceordrefakturaer er ikke mottatt';
      Text11012003@1100528402 : TextConst 'ENU=%1 or %2 of %3 %4 must have a value.';
      Text11012004@1100528403 : TextConst 'ENU=E-mail has been sent on %1.\\Do you want to continue?';
      Text11012005@1100525000 : TextConst 'ENU=Purchase Order Receipt;NOR=Innkj›psordre, kvittering;SVE=Ink”psorder, inleverans';
      Text11012006@1100525001 : TextConst 'ENU=Consented Documents;SVE=Godk„nda dokument';
      Text11012007@1100525002 : TextConst 'ENU=Cannot open the document because it is empty or cannot be created.';
      Text11012008@1100525003 : TextConst 'ENU=Hours by Employee %1 and Period %2-%3;NOR=Timer etter ansatt %1 og periode %2-%3;SVE=Timmar efter anst„lld %1 och period %2-%3';
      Text11012009@1100525004 : TextConst 'ENU=Option Quote;NOR=Alternativtilbud;SVE=Alternativoffert';
      Text11012010@1100525005 : TextConst 'ENU=Docket Payment';
      Text11012011@1100527900 : TextConst 'ENU=Posted Purchase Receipt;NOR=Bokf›rt mottak;SVE=Bokf”rd inleverans';
      QuoteTxt@1100525006 : TextConst 'ENU=Quote;SVE=Offert';
      OrderTxt@1100525007 : TextConst 'ENU=Order;SVE=Order';

    [External]
    PROCEDURE EmailSalesHeader@12(SalesHeader@1000 : Record 36);
    BEGIN
      DoPrintSalesHeader(SalesHeader,TRUE);
    END;

    [External]
    PROCEDURE PrintSalesHeader@1(SalesHeader@1000 : Record 36);
    BEGIN
      DoPrintSalesHeader(SalesHeader,FALSE);
    END;

    LOCAL PROCEDURE DoPrintSalesHeader@14(SalesHeader@1000 : Record 36;SendAsEmail@1002 : Boolean);
    VAR
      ReportSelections@1001 : Record 77;
      IsPrinted@1003 : Boolean;
      DocumentMailing@1100525000 : Codeunit 260;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      CalcSalesDisc(SalesHeader);
      OnBeforeDoPrintSalesHeader(SalesHeader,GetSalesDocTypeUsage(SalesHeader),SendAsEmail,IsPrinted);
      IF IsPrinted THEN
        EXIT;

      //IF SendAsEmail THEN //**4PS.o
      //**4PS.sn
      IF SendAsEmail THEN BEGIN
        DocumentMailing.SetGlobalLanguage(SalesHeader."Language Code");
      //**4PS.en
        ReportSelections.SendEmailToCust(
          GetSalesDocTypeUsage(SalesHeader),SalesHeader,SalesHeader."No.",SalesHeader.GetDocTypeTxt,TRUE,SalesHeader.GetBillToNo)
      END ELSE
        ReportSelections.Print(GetSalesDocTypeUsage(SalesHeader),SalesHeader,SalesHeader.FIELDNO("Bill-to Customer No."));
      DocumentMailing.ResetGlobalLanguage; //**4PS.n
    END;

    [External]
    PROCEDURE PrintPurchHeader@5(PurchHeader@1000 : Record 38);
    VAR
      ReportSelections@1001 : Record 77;
      IsPrinted@1002 : Boolean;
      ChangeStatus@1100528401 : 'None,Released,Closed';
      DirectPostOrder@1100528400 : 'According to Vendor,Not';
    BEGIN
      //**4PS.so
      //PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      //PurchHeader.SETRANGE("No.",PurchHeader."No.");
      //CalcPurchDisc(PurchHeader);
      //OnBeforeDoPrintPurchHeader(PurchHeader,GetPurchDocTypeUsage(PurchHeader),IsPrinted);
      //IF IsPrinted THEN
      //  EXIT;
      //
      //ReportSelections.PrintWithGUIYesNoVendor(
      //  GetPurchDocTypeUsage(PurchHeader),PurchHeader,TRUE,PurchHeader.FIELDNO("Buy-from Vendor No."));
      //*4PS.eo

      DoPrintPurchHeader(PurchHeader,FALSE,FALSE,ChangeStatus::None,DirectPostOrder::"Not",FALSE,TRUE); //**4PS.n
    END;

    [External]
    PROCEDURE PrintBankAccStmt@10(BankAccStmt@1000 : Record 275);
    VAR
      ReportSelections@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      BankAccStmt.SETRECFILTER;
      OnBeforePrintBankAccStmt(BankAccStmt,IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelections.Print(ReportSelections.Usage::"B.Stmt",BankAccStmt,0);
    END;

    [External]
    PROCEDURE PrintCheck@11(VAR NewGenJnlLine@1000 : Record 81);
    VAR
      GenJnlLine@1001 : Record 81;
      ReportSelections@1002 : Record 77;
      IsPrinted@1003 : Boolean;
    BEGIN
      GenJnlLine.COPY(NewGenJnlLine);
      GenJnlLine.OnCheckGenJournalLinePrintCheckRestrictions;
      OnBeforePrintCheck(GenJnlLine,IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelections.Print(ReportSelections.Usage::"B.Check",GenJnlLine,0);
    END;

    [External]
    PROCEDURE PrintTransferHeader@2(TransHeader@1000 : Record 5740);
    VAR
      ReportSelections@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      TransHeader.SETRANGE("No.",TransHeader."No.");
      OnBeforePrintTransferHeader(TransHeader,IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelections.Print(ReportSelections.Usage::Inv1,TransHeader,0);
    END;

    [External]
    PROCEDURE PrintServiceContract@3(ServiceContract@1000 : Record 5965);
    VAR
      ReportSelection@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      ServiceContract.SETRANGE("Contract No.",ServiceContract."Contract No.");
      OnBeforePrintServiceContract(ServiceContract,GetServContractTypeUsage(ServiceContract),IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelection.FilterPrintUsage(GetServContractTypeUsage(ServiceContract));
      IF ReportSelection.ISEMPTY THEN
        ERROR(Text001,ReportSelection.TABLECAPTION,FORMAT(ServiceContract."Contract Type"),ServiceContract."Contract No.");

      ReportSelection.Print(
        GetServContractTypeUsage(ServiceContract),ServiceContract,ServiceContract.FIELDNO("Bill-to Customer No."));
    END;

    [External]
    PROCEDURE PrintServiceHeader@4(ServiceHeader@1000 : Record 5900);
    VAR
      ReportSelection@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      CalcServDisc(ServiceHeader);
      OnBeforePrintServiceHeader(ServiceHeader,GetServHeaderDocTypeUsage(ServiceHeader),IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelection.FilterPrintUsage(GetServHeaderDocTypeUsage(ServiceHeader));
      IF ReportSelection.ISEMPTY THEN
        ERROR(Text002,ReportSelection.FIELDCAPTION("Report ID"),ServiceHeader.TABLECAPTION,ReportSelection.TABLECAPTION);

      ReportSelection.Print(GetServHeaderDocTypeUsage(ServiceHeader),ServiceHeader,ServiceHeader.FIELDNO("Customer No."));
    END;

    [External]
    PROCEDURE PrintAsmHeader@9(AsmHeader@1000 : Record 900);
    VAR
      ReportSelections@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      AsmHeader.SETRANGE("Document Type",AsmHeader."Document Type");
      AsmHeader.SETRANGE("No.",AsmHeader."No.");
      OnBeforePrintAsmHeader(AsmHeader,GetAsmHeaderDocTypeUsage(AsmHeader),IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelections.Print(GetAsmHeaderDocTypeUsage(AsmHeader),AsmHeader,0);
    END;

    [External]
    PROCEDURE PrintSalesOrder@6(SalesHeader@1000 : Record 36;Usage@1001 : 'Order Confirmation,Work Order,Pick Instruction,Sales Order Picking List');
    VAR
      ReportSelection@1002 : Record 77;
      IsPrinted@1003 : Boolean;
    BEGIN
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Order THEN
        EXIT;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"); //**4PS.n
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      CalcSalesDisc(SalesHeader);
      OnBeforePrintSalesOrder(SalesHeader,GetSalesOrderUsage(Usage),IsPrinted);
      IF IsPrinted THEN
        EXIT;

      //ReportSelection.PrintWithGUIYesNo(GetSalesOrderUsage(Usage),SalesHeader,GUIALLOWED,SalesHeader.FIELDNO("Bill-to Customer No."); //**4PS.o
      //**4PS.sn
      ReportSelection.PrintWithGUIYesNo(
        GetSalesOrderUsage(Usage),SalesHeader,GUIALLOWED,GUIALLOWED,SalesHeader.FIELDNO("Bill-to Customer No."));
      //**4PS.en
    END;

    [External]
    PROCEDURE PrintSalesHeaderArch@7(SalesHeaderArch@1000 : Record 11072055);
    VAR
      ReportSelection@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      SalesHeaderArch.SETRECFILTER;
      OnBeforePrintSalesHeaderArch(SalesHeaderArch,GetSalesArchDocTypeUsage(SalesHeaderArch),IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelection.Print(GetSalesArchDocTypeUsage(SalesHeaderArch),SalesHeaderArch,SalesHeaderArch.FIELDNO("Bill-to Customer No."));
    END;

    [External]
    PROCEDURE PrintPurchHeaderArch@8(PurchHeaderArch@1000 : Record 11072057);
    VAR
      ReportSelection@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      PurchHeaderArch.SETRECFILTER;
      OnBeforePrintPurchHeaderArch(PurchHeaderArch,GetPurchArchDocTypeUsage(PurchHeaderArch),IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelection.PrintWithGUIYesNoVendor(
      //GetPurchArchDocTypeUsage(PurchHeaderArch),PurchHeaderArch,TRUE,PurchHeaderArch.FIELDNO("Buy-from Vendor No.")); //**4PS.o
        GetPurchArchDocTypeUsage(PurchHeaderArch),PurchHeaderArch,TRUE,GUIALLOWED,PurchHeaderArch.FIELDNO("Buy-from Vendor No.")); //**4PS.n
    END;

    [External]
    PROCEDURE PrintProformaSalesInvoice@15(SalesHeader@1000 : Record 36);
    VAR
      ReportSelections@1001 : Record 77;
      IsPrinted@1002 : Boolean;
    BEGIN
      SalesHeader.SETRECFILTER;
      OnBeforePrintProformaSalesInvoice(SalesHeader,ReportSelections.Usage::"Pro Forma S. Invoice",IsPrinted);
      IF IsPrinted THEN
        EXIT;

      ReportSelections.Print(ReportSelections.Usage::"Pro Forma S. Invoice",SalesHeader,SalesHeader.FIELDNO("Bill-to Customer No."));
    END;

    [External]
    PROCEDURE PrintInvtOrderTest@46(PhysInvtOrderHeader@1000 : Record 5875;ShowRequestForm@1001 : Boolean);
    VAR
      ReportSelections@1002 : Record 77;
    BEGIN
      PhysInvtOrderHeader.SETRANGE("No.",PhysInvtOrderHeader."No.");
      ReportSelections.SETRANGE(Usage,ReportSelections.Usage::"Phys.Invt.Order Test");
      ReportSelections.SETFILTER("Report ID",'<>0');
      IF ReportSelections.FINDSET THEN
        REPEAT
          REPORT.RUNMODAL(ReportSelections."Report ID",ShowRequestForm,FALSE,PhysInvtOrderHeader);
        UNTIL ReportSelections.NEXT = 0;
    END;

    [External]
    PROCEDURE PrintInvtOrder@47(PhysInvtOrderHeader@1000 : Record 5875;ShowRequestForm@1001 : Boolean);
    VAR
      ReportSelections@1002 : Record 77;
    BEGIN
      PhysInvtOrderHeader.SETRANGE("No.",PhysInvtOrderHeader."No.");
      ReportSelections.SETRANGE(Usage,ReportSelections.Usage::"Phys.Invt.Order");
      ReportSelections.SETFILTER("Report ID",'<>0');
      IF ReportSelections.FINDSET THEN
        REPEAT
          REPORT.RUNMODAL(ReportSelections."Report ID",ShowRequestForm,FALSE,PhysInvtOrderHeader);
        UNTIL ReportSelections.NEXT = 0;
    END;

    [External]
    PROCEDURE PrintPostedInvtOrder@48(PstdPhysInvtOrderHdr@1000 : Record 5879;ShowRequestForm@1001 : Boolean);
    VAR
      ReportSelections@1002 : Record 77;
    BEGIN
      PstdPhysInvtOrderHdr.SETRANGE("No.",PstdPhysInvtOrderHdr."No.");
      ReportSelections.SETRANGE(Usage,ReportSelections.Usage::"P.Phys.Invt.Order");
      ReportSelections.SETFILTER("Report ID",'<>0');
      IF ReportSelections.FINDSET THEN
        REPEAT
          REPORT.RUNMODAL(ReportSelections."Report ID",ShowRequestForm,FALSE,PstdPhysInvtOrderHdr);
        UNTIL ReportSelections.NEXT = 0;
    END;

    [External]
    PROCEDURE PrintInvtRecording@49(PhysInvtRecordHeader@1000 : Record 5877;ShowRequestForm@1001 : Boolean);
    VAR
      ReportSelections@1002 : Record 77;
    BEGIN
      PhysInvtRecordHeader.SETRANGE("Order No.",PhysInvtRecordHeader."Order No.");
      PhysInvtRecordHeader.SETRANGE("Recording No.",PhysInvtRecordHeader."Recording No.");
      ReportSelections.SETRANGE(Usage,ReportSelections.Usage::"Phys.Invt.Rec.");
      ReportSelections.SETFILTER("Report ID",'<>0');
      IF ReportSelections.FINDSET THEN
        REPEAT
          REPORT.RUNMODAL(ReportSelections."Report ID",ShowRequestForm,FALSE,PhysInvtRecordHeader);
        UNTIL ReportSelections.NEXT = 0;
    END;

    [External]
    PROCEDURE PrintPostedInvtRecording@50(PstdPhysInvtRecordHdr@1000 : Record 5881;ShowRequestForm@1001 : Boolean);
    VAR
      ReportSelections@1002 : Record 77;
    BEGIN
      PstdPhysInvtRecordHdr.SETRANGE("Order No.",PstdPhysInvtRecordHdr."Order No.");
      PstdPhysInvtRecordHdr.SETRANGE("Recording No.",PstdPhysInvtRecordHdr."Recording No.");
      ReportSelections.SETRANGE(Usage,ReportSelections.Usage::"P.Phys.Invt.Rec.");
      ReportSelections.SETFILTER("Report ID",'<>0');
      IF ReportSelections.FINDSET THEN
        REPEAT
          REPORT.RUNMODAL(ReportSelections."Report ID",ShowRequestForm,FALSE,PstdPhysInvtRecordHdr);
        UNTIL ReportSelections.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSalesDocTypeUsage@23(SalesHeader@1000 : Record 36) : Integer;
    VAR
      ReportSelections@1001 : Record 77;
      TypeUsage@1002 : Integer;
      IsHandled@1003 : Boolean;
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote:
          EXIT(ReportSelections.Usage::"S.Quote");
        SalesHeader."Document Type"::"Blanket Order":
          EXIT(ReportSelections.Usage::"S.Blanket");
        SalesHeader."Document Type"::Order:
          EXIT(ReportSelections.Usage::"S.Order");
        SalesHeader."Document Type"::"Return Order":
          EXIT(ReportSelections.Usage::"S.Return");
        SalesHeader."Document Type"::Invoice:
          EXIT(ReportSelections.Usage::"S.Invoice Draft");
        SalesHeader."Document Type"::"Credit Memo":
          EXIT(ReportSelections.Usage::"S.Cr.Memo");
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetSalesDocTypeUsageElseCase(SalesHeader,TypeUsage,IsHandled);
          IF IsHandled THEN
            EXIT(TypeUsage);
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE GetPurchDocTypeUsage@13(PurchHeader@1000 : Record 38;SendQuoteThanksLetter@1100525000 : Boolean) : Integer;
    VAR
      ReportSelections@1001 : Record 77;
      TypeUsage@1003 : Integer;
      IsHandled@1002 : Boolean;
    BEGIN
      CASE PurchHeader."Document Type" OF
        PurchHeader."Document Type"::Quote:
          //EXIT(ReportSelections.Usage::"P.Quote"); //**4PS.o
          //**4PS.sn
          IF SendQuoteThanksLetter THEN
            EXIT(6004)
          ELSE
            EXIT(ReportSelections.Usage::"P.Quote");
          //**4PS.en
        PurchHeader."Document Type"::"Blanket Order":
          EXIT(ReportSelections.Usage::"P.Blanket");
        PurchHeader."Document Type"::Order:
          EXIT(ReportSelections.Usage::"P.Order");
        PurchHeader."Document Type"::"Return Order":
          EXIT(ReportSelections.Usage::"P.Return");
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetPurchDocTypeUsageElseCase(PurchHeader,TypeUsage,IsHandled);
          IF IsHandled THEN
            EXIT(TypeUsage);
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE GetServContractTypeUsage@21(ServiceContractHeader@1000 : Record 5965) : Integer;
    VAR
      ReportSelections@1001 : Record 77;
      TypeUsage@1003 : Integer;
      IsHandled@1002 : Boolean;
    BEGIN
      CASE ServiceContractHeader."Contract Type" OF
        ServiceContractHeader."Contract Type"::Quote:
          EXIT(ReportSelections.Usage::"SM.Contract Quote");
        ServiceContractHeader."Contract Type"::Contract:
          EXIT(ReportSelections.Usage::"SM.Contract");
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetServContractTypeUsageElseCase(ServiceContractHeader,TypeUsage,IsHandled);
          IF IsHandled THEN
            EXIT(TypeUsage);
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE GetServHeaderDocTypeUsage@22(ServiceHeader@1000 : Record 5900) : Integer;
    VAR
      ReportSelections@1001 : Record 77;
      TypeUsage@1003 : Integer;
      IsHandled@1002 : Boolean;
    BEGIN
      CASE ServiceHeader."Document Type" OF
        ServiceHeader."Document Type"::Quote:
          EXIT(ReportSelections.Usage::"SM.Quote");
        ServiceHeader."Document Type"::Order:
          EXIT(ReportSelections.Usage::"SM.Order");
        ServiceHeader."Document Type"::Invoice:
          EXIT(ReportSelections.Usage::"SM.Invoice");
        ServiceHeader."Document Type"::"Credit Memo":
          EXIT(ReportSelections.Usage::"SM.Credit Memo");
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetServHeaderDocTypeUsageElseCase(ServiceHeader,TypeUsage,IsHandled);
          IF IsHandled THEN
            EXIT(TypeUsage);
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE GetAsmHeaderDocTypeUsage@18(AsmHeader@1000 : Record 900) : Integer;
    VAR
      ReportSelections@1001 : Record 77;
      TypeUsage@1003 : Integer;
      IsHandled@1002 : Boolean;
    BEGIN
      CASE AsmHeader."Document Type" OF
        AsmHeader."Document Type"::Quote,
        AsmHeader."Document Type"::"Blanket Order",
        AsmHeader."Document Type"::Order:
          EXIT(ReportSelections.Usage::"Asm.Order");
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetAsmHeaderTypeUsageElseCase(AsmHeader,TypeUsage,IsHandled);
          IF IsHandled THEN
            EXIT(TypeUsage);
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE GetSalesOrderUsage@24(Usage@1001 : 'Order Confirmation,Work Order,Pick Instruction,Sales Order Picking List') : Integer;
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      CASE Usage OF
        Usage::"Order Confirmation":
          EXIT(ReportSelections.Usage::"S.Order");
        Usage::"Work Order":
          EXIT(ReportSelections.Usage::"S.Work Order");
        Usage::"Pick Instruction":
          EXIT(ReportSelections.Usage::"S.Order Pick Instruction");
        //NAVNO
        Usage::"Sales Order Picking List":
          EXIT(ReportSelections.Usage::"S.Sales Order Picking List");
        ELSE
          ERROR('');
      END;
    END;

    LOCAL PROCEDURE GetSalesArchDocTypeUsage@29(SalesHeaderArchive@1000 : Record 11072055) : Integer;
    VAR
      ReportSelections@1001 : Record 77;
      TypeUsage@1003 : Integer;
      IsHandled@1002 : Boolean;
    BEGIN
      CASE SalesHeaderArchive."Document Type" OF
        SalesHeaderArchive."Document Type"::Quote:
          EXIT(ReportSelections.Usage::"S.Arch.Quote");
        SalesHeaderArchive."Document Type"::Order:
          EXIT(ReportSelections.Usage::"S.Arch.Order");
        SalesHeaderArchive."Document Type"::"Return Order":
          EXIT(ReportSelections.Usage::"S.Arch.Return");
        SalesHeaderArchive."Document Type"::"Blanket Order":
          EXIT(ReportSelections.Usage::"S.Arch.Blanket");
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetSalesArchDocTypeUsageElseCase(SalesHeaderArchive,TypeUsage,IsHandled);
          IF IsHandled THEN
            EXIT(TypeUsage);
          ERROR('');
        END;
      END
    END;

    LOCAL PROCEDURE GetPurchArchDocTypeUsage@35(PurchHeaderArchive@1000 : Record 11072057) : Integer;
    VAR
      ReportSelections@1001 : Record 77;
      TypeUsage@1003 : Integer;
      IsHandled@1002 : Boolean;
    BEGIN
      CASE PurchHeaderArchive."Document Type" OF
        PurchHeaderArchive."Document Type"::Quote:
          EXIT(ReportSelections.Usage::"P.Arch.Quote");
        PurchHeaderArchive."Document Type"::Order:
          EXIT(ReportSelections.Usage::"P.Arch.Order");
        PurchHeaderArchive."Document Type"::"Return Order":
          EXIT(ReportSelections.Usage::"P.Arch.Return");
        PurchHeaderArchive."Document Type"::"Blanket Order":
          EXIT(ReportSelections.Usage::"P.Arch.Blanket");
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetPurchArchDocTypeUsageElseCase(PurchHeaderArchive,TypeUsage,IsHandled);
          IF IsHandled THEN
            EXIT(TypeUsage);
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE CalcSalesDisc@25(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1004 : Record 37;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcSalesDisc(SalesHeader,IsHandled);
      IF IsHandled THEN
        EXIT;

      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
        SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE CalcPurchDisc@28(VAR PurchHeader@1000 : Record 38);
    VAR
      PurchLine@1003 : Record 39;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcPurchDisc(PurchHeader,IsHandled);
      IF IsHandled THEN
        EXIT;

      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchLine);
        PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE CalcServDisc@31(VAR ServHeader@1000 : Record 5900);
    VAR
      ServLine@1002 : Record 5902;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcServDisc(ServHeader,IsHandled);
      IF IsHandled THEN
        EXIT;

      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
        ServLine.RESET;
        ServLine.SETRANGE("Document Type",ServHeader."Document Type");
        ServLine.SETRANGE("Document No.",ServHeader."No.");
        ServLine.FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Service-Calc. Discount",ServLine);
        ServHeader.GET(ServHeader."Document Type",ServHeader."No.");
        COMMIT;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcSalesDisc@20(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcServDisc@17(VAR ServiceHeader@1000 : Record 5900;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcPurchDisc@30(VAR PurchaseHeader@1000 : Record 38;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDoPrintSalesHeader@16(VAR SalesHeader@1000 : Record 36;ReportUsage@1001 : Integer;SendAsEmail@1002 : Boolean;VAR IsPrinted@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDoPrintPurchHeader@19(VAR PurchHeader@1000 : Record 38;ReportUsage@1001 : Integer;VAR IsPrinted@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintBankAccStmt@33(VAR BankAccountStatement@1000 : Record 275;VAR IsPrinted@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintCheck@36(VAR GenJournalLine@1000 : Record 81;VAR IsPrinted@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintTransferHeader@26(VAR TransferHeader@1000 : Record 5740;VAR IsPrinted@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintServiceContract@27(VAR ServiceContractHeader@1000 : Record 5965;ReportUsage@1001 : Integer;VAR IsPrinted@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintServiceHeader@37(VAR ServiceHeader@1000 : Record 5900;ReportUsage@1001 : Integer;VAR IsPrinted@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintAsmHeader@38(VAR AssemblyHeader@1000 : Record 900;ReportUsage@1001 : Integer;VAR IsPrinted@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintSalesOrder@40(VAR SalesHeader@1000 : Record 36;ReportUsage@1001 : Integer;VAR IsPrinted@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintSalesHeaderArch@42(VAR SalesHeaderArchive@1000 : Record 11072055;ReportUsage@1001 : Integer;VAR IsPrinted@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintPurchHeaderArch@43(VAR PurchaseHeaderArchive@1000 : Record 11072057;ReportUsage@1001 : Integer;VAR IsPrinted@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintProformaSalesInvoice@45(VAR SalesHeader@1000 : Record 36;ReportUsage@1002 : Integer;VAR IsPrinted@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetAsmHeaderTypeUsageElseCase@51(AssemblyHeader@1002 : Record 900;VAR TypeUsage@1001 : Integer;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetPurchDocTypeUsageElseCase@32(PurchaseHeader@1000 : Record 38;VAR TypeUsage@1001 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSalesDocTypeUsageElseCase@39(SalesHeader@1000 : Record 36;VAR TypeUsage@1001 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetServHeaderDocTypeUsageElseCase@41(ServiceHeader@1000 : Record 5900;VAR TypeUsage@1001 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetServContractTypeUsageElseCase@44(ServiceContractHeader@1000 : Record 5965;VAR TypeUsage@1001 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSalesArchDocTypeUsageElseCase@52(SalesHeaderArchive@1002 : Record 11072055;VAR TypeUsage@1001 : Integer;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetPurchArchDocTypeUsageElseCase@53(PurchaseHeaderArchive@1002 : Record 11072057;VAR TypeUsage@1001 : Integer;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    PROCEDURE EmailPurchHeader@1100525005(PurchHeader@1100525000 : Record 38;ArchiveOrder@1100528403 : Boolean;ChangeStatus@1100528402 : 'None,Released,Closed';DirectPostOrder@1100528401 : 'According to Vendor,Not';SendQuoteThanksLetter@1100528405 : Boolean;FromBatch@1100528400 : Boolean);
    BEGIN
      //**4PS
      CheckEMailAddressesForPurchHeader(PurchHeader,FALSE);
      IF NOT FromBatch THEN BEGIN
        IF (NOT SendQuoteThanksLetter) AND
           (PurchHeader."E-Mail Sent on" <> 0D) AND
           GUIALLOWED
        THEN
          IF NOT CONFIRM(Text11012004, TRUE, PurchHeader."E-Mail Sent on") THEN
            ERROR('');
      END;
      DoPrintPurchHeader(
        PurchHeader,TRUE,ArchiveOrder,ChangeStatus,DirectPostOrder,SendQuoteThanksLetter,NOT FromBatch);
    END;

    LOCAL PROCEDURE DoPrintPurchHeader@1100525014(PurchHeader@1100525000 : Record 38;SendAsEmail@1100525001 : Boolean;ArchiveOrderAfterMailing@1100528408 : Boolean;ChangeStatusAfterMailing@1100528407 : 'None,Released,Closed';DirectPostOrderBeforeMailing@1100528403 : 'According to Vendor,Not';SendQuoteThanksLetter@1100528402 : Boolean;UserInteractionAllowed@1100528401 : Boolean);
    VAR
      ReportSelections@1100525005 : Record 77;
      Vendor@1100525006 : Record 23;
      DocumentMailing@1100525004 : Codeunit 260;
      DocName@1100525002 : Text[150];
    BEGIN
      //**4PS
      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchHeader.SETRANGE("No.",PurchHeader."No.");
      CalcPurchDisc(PurchHeader);
      IF SendAsEmail THEN BEGIN
        DocumentMailing.SetGlobalLanguage(PurchHeader."Language Code");
        IF PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Return Order" THEN
          DocName := ReturnOrderTxt
        ELSE
          CASE PurchHeader."Document Type" OF
            PurchHeader."Document Type"::Quote:
              DocName := QuoteTxt;
            PurchHeader."Document Type"::Order:
              DocName := OrderTxt;
          END;
        DocumentMailing.ResetGlobalLanguage;
        IF DirectPostOrderBeforeMailing = DirectPostOrderBeforeMailing::"According to Vendor" THEN
          ReportSelections.SetDirectPostOrderBeforeMailingAccordingToVendor(TRUE);
        IF SendQuoteThanksLetter THEN
          ReportSelections.SetSendQuoteThanksLetter(TRUE);
        IF ArchiveOrderAfterMailing THEN
          ReportSelections.SetArchiveOrderAfterMailing(TRUE);
        IF ChangeStatusAfterMailing <> ChangeStatusAfterMailing::None THEN
          ReportSelections.SetChangeStatusAfterMailing(ChangeStatusAfterMailing);
        IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
          IF Vendor.GET(PurchHeader."Buy-from Vendor No.") THEN
            IF Vendor."E-Mail Subject" <> '' THEN
              ReportSelections.SetEMailSubject(Vendor."E-Mail Subject");
        ReportSelections.SendEmailToVendor(
          GetPurchDocTypeUsage(PurchHeader,SendQuoteThanksLetter),PurchHeader,PurchHeader."No.",
          DocName,UserInteractionAllowed,'')
      END ELSE
        ReportSelections.PrintWithGUIYesNo(
          GetPurchDocTypeUsage(PurchHeader,SendQuoteThanksLetter),PurchHeader,
        //UserInteractionAllowed,UserInteractionAllowed,''); //**4PS.o
          UserInteractionAllowed,UserInteractionAllowed,0); //**4PS.n
    END;

    PROCEDURE PrintVendorAssessment@1100528201(VAR VendorAssessment@1210190001 : Record 11012292);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(6008,VendorAssessment,0);
    END;

    PROCEDURE PrintVendorAssessmentNew@1100528206(VAR VendorAssessmentVendor@1210190001 : Record 11012299);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(6009,VendorAssessmentVendor,0);
    END;

    LOCAL PROCEDURE CheckEMailAddressesForPurchHeader@1100528416(PurchaseHeader@1100528401 : Record 38;SendPurchaseOrderReceipt@1100525000 : Boolean);
    VAR
      MailTemplateManagement@1100528300 : Codeunit 11012622;
    BEGIN
      //**4PS
      // For a purchase header these checks are done before it is printed to pdf.
      // This is done because direct posting and a purchase plan action may be done
      // before a commit is done and the the e-mail is sent.
      MailTemplateManagement.CheckMailTemplateFromValues(MailTemplateManagement.GetMailTemplateNoFromPurchHeader(PurchaseHeader, SendPurchaseOrderReceipt),
        PurchaseHeader."Shortcut Dimension 1 Code");
    END;

    LOCAL PROCEDURE CheckEMailToForPurchHeader@1100528421(PurchaseHeader@1100528400 : Record 38);
    VAR
      Vendor@1100528401 : Record 23;
      Contact@1100528402 : Record 5050;
    BEGIN
      //**4PS
      IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order THEN
        PurchaseHeader.TESTFIELD("Buy-from Vendor No.");

      IF PurchaseHeader."Buy-from Vendor No." <> '' THEN BEGIN
        Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
        IF PurchaseHeader.GetEMailOrder = '' THEN
          Vendor.TESTFIELD("E-Mail for Purch. Order");
        EXIT;
      END;

      IF PurchaseHeader."Buy-from Contact No." <> '' THEN BEGIN
        Contact.GET(PurchaseHeader."Buy-from Contact No.");
        IF PurchaseHeader.GetEMailOrder = '' THEN
          Contact.TESTFIELD("E-Mail for Purch. Order");
        EXIT;
      END;

      IF (PurchaseHeader."Buy-from Vendor No." = '') AND
         (PurchaseHeader."Buy-from Contact No." = '')
      THEN
        ERROR(
          Text11012003, PurchaseHeader.FIELDCAPTION("Buy-from Vendor No."),
          PurchaseHeader.FIELDCAPTION("Buy-from Contact No."),
          PurchaseHeader.TABLECAPTION, PurchaseHeader."No.");
    END;

    PROCEDURE EmailPurchOrderReceipt@1100528419(PurchHeader@1000 : Record 38;UseEMailForPurchReceipt@1100529600 : Boolean);
    BEGIN
      //**4PS
      DoPrintPurchOrderReceipt(PurchHeader, TRUE, UseEMailForPurchReceipt);
    END;

    PROCEDURE PrintPurchOrderReceipt@1210190033(PurchHeader@1000 : Record 38);
    BEGIN
      //**4PS
      DoPrintPurchOrderReceipt(PurchHeader, FALSE, FALSE);
    END;

    LOCAL PROCEDURE DoPrintPurchOrderReceipt@1100528418(PurchHeader@1000 : Record 38;SendAsEmail@1100528400 : Boolean;UseEMailForPurchReceipt@1100529601 : Boolean);
    VAR
      ReportSelections@1001 : Record 77;
      Vendor@1100529600 : Record 23;
      DocumentMailing@1100528403 : Codeunit 260;
      DocName@1100525000 : Text[150];
    BEGIN
      //**4PS
      PurchHeader.TESTFIELD("Document Type", PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchHeader.SETRANGE("No.",PurchHeader."No.");
      CalcPurchDisc(PurchHeader);
      IF SendAsEmail THEN BEGIN
        DocumentMailing.SetGlobalLanguage(PurchHeader."Language Code");
        DocName := Text11012005;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SetSendPurchaseOrderReceipt(TRUE);
        IF UseEMailForPurchReceipt THEN
          IF Vendor.GET(PurchHeader."Buy-from Vendor No.") THEN
            IF Vendor."E-Mail Subject Purch. Receipt" <> '' THEN
              ReportSelections.SetEMailSubject(Vendor."E-Mail Subject Purch. Receipt");
        ReportSelections.SetUseEMailForPurchReceipt(UseEMailForPurchReceipt);
        ReportSelections.SendEmailToVendor(
          6003,PurchHeader,PurchHeader."No.",
          DocName,TRUE,'')
      END ELSE
        ReportSelections.Print(6003,PurchHeader,0);
    END;

    PROCEDURE PrintBudget@11012190(BudgetLine@11012000 : Record 11012001);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      BudgetLine.SETRANGE("Project No.", BudgetLine."Project No.");
      BudgetLine.SETRANGE(Adjustment, BudgetLine.Adjustment);
      BudgetLine.SETRANGE("Extension Contract", BudgetLine."Extension Contract");
      BudgetLine.SETRANGE(Option, BudgetLine.Option);

      ReportSelections.Print(1009,BudgetLine,0);
    END;

    PROCEDURE EmailExtensionContract@1100528501(ExtensionContract@1100528500 : Record 11012004);
    BEGIN
      //**4PS
      DoPrintExtensionContract(ExtensionContract,TRUE);
    END;

    PROCEDURE PrintExtensionContract@11012180(ExtensionContract@11012000 : Record 11012004);
    BEGIN
      //**4PS
      DoPrintExtensionContract(ExtensionContract,FALSE);
    END;

    LOCAL PROCEDURE DoPrintExtensionContract@1100528502(ExtensionContract@1100528500 : Record 11012004;SendAsEmail@1100528501 : Boolean);
    VAR
      ReportSelections@1100528502 : Record 77;
      Customer@1100525000 : Record 18;
      DocumentMailing@1100528504 : Codeunit 260;
      DocName@1100525001 : Text[150];
    BEGIN
      //**4PS
      ExtensionContract.SETRANGE("Project No.", ExtensionContract."Project No.");
      ExtensionContract.SETRANGE("Contract No.", ExtensionContract."Contract No.");
      IF SendAsEmail THEN BEGIN
        IF Customer.GET(ExtensionContract.Principal) THEN;
        DocumentMailing.SetGlobalLanguage(Customer."Language Code");
        DocName := ExtensionContract.TABLECAPTION;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SendEmailToCust(
          1011,ExtensionContract,ExtensionContract."Contract No.",DocName,TRUE,'')
      END ELSE
        ReportSelections.Print(1011,ExtensionContract,0);
    END;

    PROCEDURE PrintAdjustment@11012200(BudgetAdjustmentRec@11012000 : Record 11012003);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      BudgetAdjustmentRec.SETRANGE("Project No.", BudgetAdjustmentRec."Project No.");
      BudgetAdjustmentRec.SETRANGE("No.", BudgetAdjustmentRec."No.");

      ReportSelections.Print(1010,BudgetAdjustmentRec,0);
    END;

    PROCEDURE PrintOption@11012060(OptionRec@11012000 : Record 11012502);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      OptionRec.SETRANGE("Project No.", OptionRec."Project No.");
      OptionRec.SETRANGE(Option, OptionRec.Option);
      OptionRec.SETRANGE("Plot No.", OptionRec."Plot No.");       //evdb
      OptionRec.SETRANGE("House Model", OptionRec."House Model"); //evdb
      //dbeekman.sn, 25-03-2010: 17615
      OptionRec.SETRANGE("Main Group",OptionRec."Main Group");
      OptionRec.SETRANGE(Group,OptionRec.Group);
      OptionRec.SETRANGE("Sub Group",OptionRec."Sub Group");
      //dbeekman.en, 25-03-2010: 17615

      ReportSelections.Print(1012,OptionRec,0);
    END;

    PROCEDURE PrintPurchaseAction@11012070(ProjectPurchActRec@11012000 : Record 11012026);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ProjectPurchActRec.SETRANGE("Project No.", ProjectPurchActRec."Project No.");
      ProjectPurchActRec.SETRANGE(Code, ProjectPurchActRec.Code);

      ReportSelections.Print(1013,ProjectPurchActRec,0);
    END;

    PROCEDURE PrintPurchaseRequisition@1100528901(PurchaseRequisition@11012000 : Record 11229330);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      PurchaseRequisition.SETRANGE("No.", PurchaseRequisition."No.");

      ReportSelections.Print(6007,PurchaseRequisition,0);
    END;

    PROCEDURE PrintProjAdvice@11012130(VAR AdviceOrderLine@11012000 : Record 11012055);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      AdviceOrderLine.SETRANGE("Project No.", AdviceOrderLine."Project No.");

      ReportSelections.Print(1014,AdviceOrderLine,0);
    END;

    PROCEDURE PrintProjCostPlus@1210190018(VAR SettlRec@1210190001 : Record 11012021);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1008,SettlRec,0);
    END;

    PROCEDURE PrintProjWorksheet@1210190019(VAR ProjRec@1210190001 : Record 11072003);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1006,ProjRec,0);
    END;

    PROCEDURE PrintProjDeliveryNote@1210190027(IProjectDeliveryNoteHeader@1210190001 : Record 11012672);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PSmg, 14-07-11: M28026
      IProjectDeliveryNoteHeader.SETRANGE("No.", IProjectDeliveryNoteHeader."No.");

      ReportSelections.Print(1027,IProjectDeliveryNoteHeader,0);
    END;

    PROCEDURE PrintProjectElement@1100528801(IProjectElement@1100528800 : Record 11012010);
    VAR
      ReportSelections@1100528801 : Record 77;
    BEGIN
      //**4PSmve, 03-11-2014: DP00686
      IProjectElement.SETRANGE("Project No.", IProjectElement."Project No.");
      IProjectElement.SETRANGE(Element, IProjectElement.Element);

      ReportSelections.Print(1050,IProjectElement,0);
    END;

    PROCEDURE PrintPostedProjDeliveryNote@1210190028(IPostedProjDelNoteHeader@1210190001 : Record 11012674);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PSmg, 14-07-11: M28026
      IPostedProjDelNoteHeader.SETRANGE("No.", IPostedProjDelNoteHeader."No.");

      ReportSelections.Print(1028,IPostedProjDelNoteHeader,0);
    END;

    PROCEDURE PrintAssemblyProjWorksheet@1210190006(VAR ProjRec@1210190001 : Record 11072003);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1500,ProjRec,0);
    END;

    PROCEDURE PrintCustWorksheet@1210190020(VAR CommRec@1210190001 : Record 11012020);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1007,CommRec,0);
    END;

    PROCEDURE PrintProgress@1210190023(ProgressLevelRec@11012000 : Record 11012036);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ProgressLevelRec.SETRANGE("Project No.", ProgressLevelRec."Project No.");
      ProgressLevelRec.SETRANGE("Progress Date", ProgressLevelRec."Progress Date");

      ReportSelections.Print(1015,ProgressLevelRec,0);
    END;

    PROCEDURE PrintPrognosis@1100485101(PrognosisRec@11012000 : Record 11012034);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      PrognosisRec.SETRANGE("Project No.", PrognosisRec."Project No.");
      PrognosisRec.SETRANGE("Prognosis Date", PrognosisRec."Prognosis Date");

      ReportSelections.Print(1016,PrognosisRec,0);
    END;

    PROCEDURE EmailPlot@1100528513(Plot@1000 : Record 11012500);
    BEGIN
      //**4PS
      DoPrintPlot(Plot,TRUE);
    END;

    PROCEDURE PrintPlot@1100485112(Plot@11012000 : Record 11012500);
    BEGIN
      //**4PS
      DoPrintPlot(Plot,FALSE);
    END;

    LOCAL PROCEDURE DoPrintPlot@1100528511(Plot@1000 : Record 11012500;SendAsEmail@1002 : Boolean);
    VAR
      ReportSelections@1001 : Record 77;
      Contact@1100525000 : Record 5050;
      DocumentMailing@1004 : Codeunit 260;
      DocName@1100525001 : Text[150];
    BEGIN
      //**4PS
      Plot.SETRANGE("Project No.", Plot."Project No.");
      Plot.SETRANGE("Plot No.", Plot."Plot No.");
      IF SendAsEmail THEN BEGIN
        IF Contact.GET(Plot.Buyer) THEN;
        DocumentMailing.SetGlobalLanguage(Contact."Language Code");
        DocName := Plot.TABLECAPTION;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SendEmailToCust(
          1017,Plot,Plot."Plot No.",DocName,TRUE,'')
      END ELSE
        ReportSelections.Print(1017,Plot,0);
    END;

    PROCEDURE PrintHouseModel@1100525027(HouseModel@11012000 : Record 11012501);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      HouseModel.SETRANGE("Project No.",HouseModel."Project No.");
      HouseModel.SETRANGE(Model,HouseModel.Model);

      ReportSelections.Print(1600,HouseModel,0);
    END;

    PROCEDURE EmailConsentedDocuments@1100528406(UserSetup@1100528400 : Record 91;FromConsentedDateTime@1100528402 : DateTime;ToConsentedDateTime@1100528401 : DateTime;ShowEmailDialog@1100528404 : Boolean);
    BEGIN
      //**4PS
      DoPrintConsentedDocuments(UserSetup,FromConsentedDateTime,ToConsentedDateTime,TRUE,ShowEmailDialog);
    END;

    LOCAL PROCEDURE DoPrintConsentedDocuments@1100528407(UserSetup@1100528400 : Record 91;FromConsentedDateTime@1100528404 : DateTime;ToConsentedDateTime@1100528403 : DateTime;SendAsEmail@1100528407 : Boolean;ShowEmailDialog@1100528401 : Boolean);
    VAR
      TempEmailAttachment@1100525002 : TEMPORARY Record 11229294;
      DocumentMailing@1100525005 : Codeunit 260;
      DocName@1100525004 : Text[150];
      MailTemplateNo@1100528300 : Integer;
    BEGIN
      //**4PS
      MailTemplateNo := 100;
      UserSetup.SETRANGE("User ID",UserSetup."User ID");
      IF SendAsEmail THEN BEGIN
        SaveConsentedDocumentsAsPdf(UserSetup,FromConsentedDateTime,ToConsentedDateTime,TempEmailAttachment);
        COMMIT;
        DocName := Text11012006;
        DocumentMailing.SetTempEmailAttachments(TempEmailAttachment);
        IF TempEmailAttachment.FINDFIRST THEN;
        DocumentMailing.EmailFile4PS(
          TempEmailAttachment."Attachment Server File Path",
          '',
          '',
          UserSetup.GetEmployeeNoOrSalespersPurchCode,
          UserSetup."E-Mail",
          MailTemplateNo,
          UserSetup."Department Code",
          '',
          UserSetup,
          DocName,
          DocName,
          NOT ShowEmailDialog);
      END;
    END;

    PROCEDURE EmailHoursByEmployee@1100528408(VAR Employee@1100528400 : Record 5200;UseEmailAddress@1100528402 : Integer;ShowEmailDialog@1100528401 : Boolean);
    BEGIN
      //**4PS
      DoPrintHoursByEmployee(Employee,UseEmailAddress,TRUE,ShowEmailDialog);
    END;

    LOCAL PROCEDURE DoPrintHoursByEmployee@1100528409(VAR Employee2@1100528400 : Record 5200;UseEmailAddress@1100525001 : 'E-Mail,Company E-Mail';SendAsEmail@1100528401 : Boolean;ShowEmailDialog@1100528406 : Boolean);
    VAR
      Employee@1100528405 : Record 5200;
      TempEmailAttachment@1100528402 : TEMPORARY Record 11229294;
      TempReportSelections@1100525000 : TEMPORARY Record 77;
      DocumentMailing@1100528403 : Codeunit 260;
    BEGIN
      //**4PS
      Employee.COPY(Employee2);
      Employee.SETRANGE("No.",Employee."No.");
      IF UseEmailAddress = UseEmailAddress::"E-Mail" THEN
        Employee.TESTFIELD("E-Mail")
      ELSE BEGIN
        Employee.TESTFIELD("Company E-Mail");
        TempReportSelections.SetUseCompanyEMailOfEmployee(TRUE);
      END;

      IF SendAsEmail THEN BEGIN
        TempReportSelections."Report ID" := REPORT::"Hours by Employee";
        TempReportSelections."Default Selection" := TRUE;
        TempReportSelections."Use for Email Attachment" := TRUE;
        TempReportSelections.INSERT;
        TempReportSelections.SetEMailSubject(
          STRSUBSTNO(
            Text11012008, Employee."No.", Employee.GETFILTER("Year Filter"),
            Employee.GETFILTER("Week Filter")));
        DocumentMailing.ResetGlobalLanguage;
        TempReportSelections.SendEmailToCust(0,Employee,Employee."No.",Employee."No.",ShowEmailDialog,'');
      END;
    END;

    PROCEDURE PrintSummarySheet@1100485027(SumlineRec@1100485001 : Record 11012171);
    VAR
      SummarySheetLineRec@1100485000 : Record 11012171;
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      SummarySheetLineRec.SETFILTER("Estimate No.",SumlineRec."Estimate No.");
      SummarySheetLineRec.SETFILTER(Summary,SumlineRec.Summary);

      ReportSelections.Print(3500,SummarySheetLineRec,0);
    END;

    PROCEDURE PrintEstimateNEW@1100528900(EstPartRec@11012000 : Record 11072073;Level@11012001 : Integer);
    VAR
      ReportSelections@11012002 : Record 77;
      EstRec@1100485000 : Record 11012151;
      SubEstRec@11012004 : Record 11072074;
      EstLineRec@1100485001 : Record 11072072;
      Usage2@1100485002 : Integer;
    BEGIN
      //**4PS
      //DP00381
      CASE Level OF
        0:
          BEGIN
            EstRec.SETFILTER("No.", EstPartRec."Estimate No.");
            Usage2 := 3501;
          END;
        1:
          BEGIN
            SubEstRec.SETFILTER("Estimate No.", EstPartRec."Estimate No.");
            SubEstRec.SETFILTER("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
            Usage2 := 3502;
          END;
        2:
          BEGIN
            EstPartRec.SETFILTER("Estimate No.", EstPartRec."Estimate No.");
            EstPartRec.SETFILTER("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
            EstPartRec.SETFILTER("Part Group", EstPartRec."Part Group");
            EstPartRec.SETFILTER(Part, EstPartRec.Part);
            Usage2 := 3503;
          END;
        3:
          BEGIN
            EstLineRec.SETFILTER("Estimate No.", EstPartRec."Estimate No.");
            EstLineRec.SETFILTER("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
            EstLineRec.SETFILTER("Part Group", EstPartRec."Part Group");
            EstLineRec.SETFILTER(Part, EstPartRec.Part);
            Usage2 := 3504;
          END;
      //  4:
      //  BEGIN
      //    EstRec.SETFILTER("No.", EstPartRec."Estimate No.");
      //    Usage2 := 3505;  //Estimate RAW
      //  END;
      END;

      CASE Level OF
        0,4: ReportSelections.Print(Usage2,EstRec,0);
        1: ReportSelections.Print(Usage2,SubEstRec,0);
        2: ReportSelections.Print(Usage2,EstPartRec,0);
        3: ReportSelections.Print(Usage2,EstLineRec,0);
      END;
    END;

    PROCEDURE PrintEstimateRAW@1100525017(Estimate@1100525000 : Record 11012151);
    VAR
      ReportSelections@1100525001 : Record 77;
    BEGIN
      //**4PS
      Estimate.SETRANGE("No.", Estimate."No.");

      ReportSelections.Print(3505,Estimate,0);
    END;

    PROCEDURE PrintBidFormRAW@1100525004(Estimate@1100485001 : Record 11012151);
    VAR
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      Estimate.SETRANGE("No.", Estimate."No.");

      ReportSelections.Print(3506,Estimate,0);
    END;

    PROCEDURE PrintBidFormCoverPageRAW@1100525010(Estimate@1100485001 : Record 11012151);
    VAR
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      Estimate.SETRANGE("No.", Estimate."No.");

      ReportSelections.Print(3507,Estimate,0);
    END;

    PROCEDURE PrintTryOutVersionEstimate@1210190012(VAR TryoutQuoteSubEstimateRec@11012000 : Record 11012765);
    VAR
      ReportSelections@11012002 : Record 77;
      EstLineRec@11012006 : Record 11072072;
      SubFilter@1210190001 : Text[250];
    BEGIN
      //**4PS
      TryoutQuoteSubEstimateRec.SETRANGE("Estimate No.", TryoutQuoteSubEstimateRec."Estimate No.");

      SubFilter := '';
      IF TryoutQuoteSubEstimateRec.FINDSET THEN BEGIN
        REPEAT
          IF STRLEN(SubFilter) + STRLEN(TryoutQuoteSubEstimateRec."Sub-Estimate No.") < 249 THEN
            SubFilter := SubFilter + TryoutQuoteSubEstimateRec."Sub-Estimate No." + '|';
        UNTIL TryoutQuoteSubEstimateRec.NEXT = 0;
        IF STRLEN(SubFilter) > 1 THEN
          SubFilter := COPYSTR(SubFilter,1, (STRLEN(SubFilter) - 1 ));
      END;

      EstLineRec.SETRANGE("Estimate No.", TryoutQuoteSubEstimateRec."Estimate No.");
      EstLineRec.SETFILTER("Sub-Estimate No.", SubFilter);

      ReportSelections.Print(2006,EstLineRec,0);
    END;

    PROCEDURE PrintRelation@1100485011(ContRec@1100485002 : Record 5050);
    VAR
      ReportSelections@1100485001 : Record 77;
    BEGIN
      //**4PS
      ContRec.SETRANGE("No.", ContRec."No.");

      ReportSelections.Print(2001,ContRec,0);
    END;

    PROCEDURE PrintProvWork@1100485014(ProvWorkRec@1100485002 : Record 11012774);
    VAR
      ReportSelections@1100485001 : Record 77;
      lvProvWorkRec@1100485003 : Record 11012774;
    BEGIN
      //**4PS
      lvProvWorkRec.SETRANGE("No.", ProvWorkRec."No.");

      ReportSelections.Print(2002,lvProvWorkRec,0);
    END;

    PROCEDURE PrintServOrder@1210190000(ServOrder@11012000 : Record 11012823);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ServOrder.SETRANGE("No.", ServOrder."No.");

      ReportSelections.Print(ReportSelections.Usage::"SM.Order",ServOrder,0);
    END;

    PROCEDURE PrintServOrderTexts@1100525024(ServOrder@11012000 : Record 11012823);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ServOrder.SETRANGE("No.", ServOrder."No.");

      ReportSelections.Print(3008,ServOrder,0);
    END;

    PROCEDURE PrintServContract@1210190002(ServContr@11012000 : Record 11012812);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ServContr.SETRANGE("No.", ServContr."No.");

      ReportSelections.Print(ReportSelections.Usage::"SM.Contract",ServContr,0);
    END;

    PROCEDURE PrintServLocation@1210190009(ServLoc@11012000 : Record 11012801);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ServLoc.SETRANGE("No.", ServLoc."No.");

      ReportSelections.Print(3002,ServLoc,0);
    END;

    PROCEDURE PrintServAdvice@1210190013(VAR ServAdviceOrderLine@11012000 : Record 11012055);
    VAR
      ReportSelections@11012001 : Record 77;
      ServAdviceOrderLine2@1100485000 : Record 11012055;
    BEGIN
      //**4PS
      ServAdviceOrderLine2.COPY(ServAdviceOrderLine);
      //ServAdviceOrderLine2.SETRANGE("Service Order No.", ServAdviceOrderLine2."Service Order No.");

      ReportSelections.Print(3004,ServAdviceOrderLine2,0);
    END;

    PROCEDURE PrintServCostPlus@1210190014(VAR ServOrder@1210190000 : Record 11012823);
    VAR
      ReportSelections@11012001 : Record 77;
      ServOrder2@1100525000 : Record 11012823;
    BEGIN
      //**4PS
      ServOrder2.COPY(ServOrder);

      ReportSelections.Print(3003,ServOrder2,0);
    END;

    PROCEDURE EmailServiceOrderWorksheet@1100528500(ServiceOrder@1100528500 : Record 11012823;Manually@1100528501 : Boolean);
    BEGIN
      //**4PS
      DoPrintServiceOrderWorksheet(ServiceOrder,TRUE,Manually,Manually);
    END;

    PROCEDURE PrintServiceOrderWorksheet@1100485010(ServiceOrder@1100485000 : Record 11012823);
    BEGIN
      //**4PS
      DoPrintServiceOrderWorksheet(ServiceOrder,FALSE,TRUE,TRUE);
    END;

    LOCAL PROCEDURE DoPrintServiceOrderWorksheet@1100528503(ServiceOrder@1100528501 : Record 11012823;SendAsEmail@1100528500 : Boolean;UserInteractionAllowed@1100528510 : Boolean;Manually@1100528503 : Boolean);
    VAR
      Customer@1100525000 : Record 18;
      ReportSelections@1100528502 : Record 77;
      DocumentMailing@1100528504 : Codeunit 260;
      DocName@1100525001 : Text[150];
    BEGIN
      //**4PS
      ServiceOrder.SETRANGE("No.",ServiceOrder."No.");
      IF SendAsEmail THEN BEGIN
        IF Customer.GET(ServiceOrder."Customer No.") THEN;
        DocumentMailing.SetGlobalLanguage(Customer."Language Code");
        DocName := ServiceOrder.TABLECAPTION;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SetServiceWorksheetIsSentManually(Manually);
        ReportSelections.SendEmailToCust(
          3000,ServiceOrder,ServiceOrder."No.",DocName,UserInteractionAllowed,'')
      END ELSE
        ReportSelections.PrintWithGUIYesNo(
          3000,ServiceOrder,UserInteractionAllowed,UserInteractionAllowed,0);
    END;

    PROCEDURE SaveSOAppointmentLettersAsExternalDocuments@1100528404(VAR ServiceOrder@1100528400 : Record 11012823;OnlyMarkedAsResend@1100528405 : Boolean;IExecuteWithin@1100528600 : DateFormula);
    VAR
      ReportSelections@1100528403 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.SaveSOAppointmentLettersAsExternalDocuments(
        3021,ServiceOrder,OnlyMarkedAsResend,IExecuteWithin);
    END;

    PROCEDURE PrintUnitPriceServiceOrder@1210190030(UnitPriceServiceOrder@1100485000 : Record 11071772);
    VAR
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      UnitPriceServiceOrder.SETRANGE("Service Order No.", UnitPriceServiceOrder."Service Order No.");

      ReportSelections.Print(3018,UnitPriceServiceOrder,0);
    END;

    PROCEDURE PrintUnitPriceProdRecording@1210190031(UnitPriceProdRecording@1100485000 : Record 11071773);
    VAR
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      UnitPriceProdRecording.SETRANGE("Service Order No.", UnitPriceProdRecording."Service Order No.");
      UnitPriceProdRecording.SETRANGE("Production Date", UnitPriceProdRecording."Production Date");

      ReportSelections.Print(3019,UnitPriceProdRecording,0);
    END;

    PROCEDURE PrintServCall@1100485016(ServCall@1100485000 : Record 11012822);
    VAR
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      ServCall.SETRANGE("No.", ServCall."No.");

      ReportSelections.Print(3001,ServCall,0);
    END;

    PROCEDURE PrintGlazingServiceCall@1100525018(GlazingServiceCall@1100525000 : Record 11125777);
    VAR
      ReportSelections@1100525001 : Record 77;
    BEGIN
      //**4PS
      GlazingServiceCall.SETRANGE("No.", GlazingServiceCall."No.");

      ReportSelections.Print(3016,GlazingServiceCall,0);
    END;

    PROCEDURE EmailWorkOrderWorksheet@1100528517(WorkOrder@1100528500 : Record 11229279;UserInteractionAllowed@1100528503 : Boolean;Manually@1100528501 : Boolean);
    BEGIN
      //**4PS
      DoPrintWorkOrderWorksheet(WorkOrder,TRUE,UserInteractionAllowed,Manually);
    END;

    PROCEDURE PrintWorkOrderWorksheet@1100528516(WorkOrder@1100485000 : Record 11229279);
    BEGIN
      //**4PS
      DoPrintWorkOrderWorksheet(WorkOrder,FALSE,TRUE,TRUE);
    END;

    LOCAL PROCEDURE DoPrintWorkOrderWorksheet@1100528506(WorkOrder@1100528501 : Record 11229279;SendAsEmail@1100528500 : Boolean;UserInteractionAllowed@1100528510 : Boolean;Manually@1100528503 : Boolean);
    VAR
      Customer@1100525000 : Record 18;
      ReportSelections@1100528502 : Record 77;
      ServiceOrder@1100528511 : Record 11012823;
      DocumentMailing@1100528504 : Codeunit 260;
      DocName@1100525001 : Text[150];
    BEGIN
      //**4PS
      IF WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder THEN
        EXIT;

      IF (WorkOrder."Resource Type" <> WorkOrder."Resource Type"::Employee) AND (WorkOrder."Resource Type" <> WorkOrder."Resource Type"::Subcontractor) THEN
        EXIT;

      WorkOrder.SETRANGE("No.",WorkOrder."No.");
      ServiceOrder.GET(WorkOrder."Source No.");

      IF SendAsEmail THEN BEGIN
        IF Customer.GET(ServiceOrder."Customer No.") THEN;
        DocumentMailing.SetGlobalLanguage(Customer."Language Code");
        DocName := WorkOrder.TABLECAPTION;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SetServiceWorksheetIsSentManually(Manually);
        ReportSelections.SendEmailToCust(
          3040,WorkOrder,WorkOrder."No.",DocName,UserInteractionAllowed,'')
      END ELSE
        ReportSelections.PrintWithGUIYesNo(
          3040,WorkOrder,UserInteractionAllowed,UserInteractionAllowed,0);
    END;

    PROCEDURE EmailSubcontractorServiceOrderList@1100528411(Vendor@1100528500 : Record 23;TypeOfMail@1100528403 : 'Not Finished,Not Invoiced';NoOfDays@1100528402 : Integer;ReportSelectionID@1100528401 : Integer;UserInteractionAllowed@1100528400 : Boolean);
    BEGIN
      //**4PS
      DoPrintSubcontractorServiceOrderList(Vendor,TRUE,TypeOfMail,NoOfDays,ReportSelectionID,UserInteractionAllowed);
    END;

    LOCAL PROCEDURE DoPrintSubcontractorServiceOrderList@1100528410(Vendor@1100528501 : Record 23;SendAsEmail@1100528500 : Boolean;TypeOfMail@1100528402 : 'Not Finished,Not Invoiced';NoOfDays@1100528401 : Integer;ReportSelectionID@1100528400 : Integer;UserInteractionAllowed@1100528509 : Boolean);
    VAR
      ReportSelections@1100528502 : Record 77;
      DocumentMailing@1100528504 : Codeunit 260;
      Subject@1100528404 : Text[250];
    BEGIN
      //**4PS
      Vendor.TESTFIELD("E-Mail for Purch. Order");
      Vendor.SETRANGE("No.",Vendor."No.");
      IF SendAsEmail THEN BEGIN
        DocumentMailing.SetGlobalLanguage(Vendor."Language Code");
        CASE TypeOfMail OF
          TypeOfMail::"Not Finished":
            Subject := Text11012001;
          TypeOfMail::"Not Invoiced":
            Subject := Text11012002;
        END;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SetEMailSubject(Subject);
        ReportSelections.SetSubcontractorTypeOfMail(TypeOfMail);
        ReportSelections.SetSubcontractorNoOfDays(NoOfDays);
        ReportSelections.SendEmailToVendor(
          ReportSelectionID,Vendor,Vendor."No.",'',UserInteractionAllowed,'')
      END;
    END;

    PROCEDURE PrintItemJnl@1210190001(VAR VarItemJnlLine@11012000 : Record 83);
    VAR
      ReportSelections@11012001 : Record 77;
      ItemJnlLine@1100409000 : Record 83;
    BEGIN
      //**4PS
      //db.sn, 05-12-14: C019287
      ItemJnlLine.COPY(VarItemJnlLine);
      ItemJnlLine.SETRANGE("Journal Template Name", VarItemJnlLine."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name", VarItemJnlLine."Journal Batch Name");
      //db.en, 05-12-14: C019287

      ReportSelections.Print(4001,ItemJnlLine,0);
    END;

    PROCEDURE PrintItemInvJnl@1100485012(VAR VarItemJnlLine@11012000 : Record 83);
    VAR
      ReportSelections@11012001 : Record 77;
      ItemJnlLine@1100409000 : Record 83;
    BEGIN
      //**4PS
      //db.sn, 05-12-14: C019287
      ItemJnlLine.COPY(VarItemJnlLine);
      ItemJnlLine.SETRANGE("Journal Template Name", VarItemJnlLine."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name", VarItemJnlLine."Journal Batch Name");
      //db.en, 05-12-14: C019287

      ReportSelections.Print(4000,ItemJnlLine,0);
    END;

    PROCEDURE PrintInventoryMovement@1100528401(VAR ItemJournalLine@1100528400 : Record 83);
    VAR
      ItemJournalLine2@1100528401 : Record 83;
      ReportSelections@1100528402 : Record 77;
    BEGIN
      //**4PS
      ItemJournalLine2.COPY(ItemJournalLine);
      ItemJournalLine2.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
      ItemJournalLine2.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");

      ReportSelections.Print(4005,ItemJournalLine2,0);
    END;

    PROCEDURE PrintProjectDispatchNote@1100528204(VAR ItemJournalLine@1100528400 : Record 83);
    VAR
      ItemJournalLine2@1100528401 : Record 83;
      ReportSelections@1100528402 : Record 77;
    BEGIN
      //**4PS
      ItemJournalLine2.COPY(ItemJournalLine);
      ItemJournalLine2.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
      ItemJournalLine2.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");

      ReportSelections.Print(4011,ItemJournalLine2,0);
    END;

    PROCEDURE PrintPickingList@1100528205(VAR ItemJournalLine@1100528400 : Record 83);
    VAR
      ItemJournalLine2@1100528401 : Record 83;
      ReportSelections@1100528402 : Record 77;
    BEGIN
      //**4PS
      ItemJournalLine2.COPY(ItemJournalLine);
      ItemJournalLine2.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
      ItemJournalLine2.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");

      ReportSelections.Print(4012,ItemJournalLine2,0);
    END;

    PROCEDURE PrintWhseShipment@1100528403(VAR WarehouseShipmentHeader@1100528400 : Record 7320);
    VAR
      WarehouseShipmentHeader2@1100528401 : Record 7320;
      ReportSelections@1100528402 : Record 77;
    BEGIN
      //**4PS
      WarehouseShipmentHeader2.COPY(WarehouseShipmentHeader);

      ReportSelections.Print(4010,WarehouseShipmentHeader2,0);
    END;

    PROCEDURE PrintPlantRequest@1100485007(PlantRequestRec@11012000 : Record 11020520);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      PlantRequestRec.SETRANGE("No.",PlantRequestRec."No.");

      ReportSelections.Print(1550,PlantRequestRec,0);
    END;

    PROCEDURE PrintDispatchNote@11012000(PlantOrderRec@11012000 : Record 11012556);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      PlantOrderRec.SETRANGE("No.",PlantOrderRec."No.");

      ReportSelections.Print(1555,PlantOrderRec,0);
    END;

    PROCEDURE PrintPlantPickingList@1210190010(VAR PlantOrderRec2@11012000 : Record 11012556;UseFilter@1100525002 : Boolean);
    VAR
      PlantOrderRec@1100525001 : Record 11012556;
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      IF UseFilter AND (PlantOrderRec2.GETFILTER("No.") <> '') THEN
        PlantOrderRec.COPY(PlantOrderRec2)
      ELSE
        PlantOrderRec.SETRANGE("No.",PlantOrderRec2."No.");

      ReportSelections.PrintWithPrinterSelection(
        1557,PlantOrderRec,PrinterByPlantListRec."List Type"::"Pick List");
    END;

    PROCEDURE PrintPlantReturnOrder@1210190011(PlantOrderRec@11012000 : Record 11012556);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      PlantOrderRec.SETRANGE("No.",PlantOrderRec."No.");

      ReportSelections.Print(1556,PlantOrderRec,0);
    END;

    PROCEDURE PrintPlantTransportOrder@1100485021(VAR TransOrderRec2@11012000 : Record 11020505;UseFilter@1100525001 : Boolean);
    VAR
      TransOrderRec@1100525002 : Record 11020505;
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      IF UseFilter AND (TransOrderRec2.GETFILTER("No.") <> '') THEN
        TransOrderRec.COPY(TransOrderRec2)
      ELSE
        TransOrderRec.SETRANGE("No.",TransOrderRec2."No.");

      ReportSelections.PrintWithPrinterSelection(
        1551,TransOrderRec,PrinterByPlantListRec."List Type"::"Transport Order");
    END;

    PROCEDURE PrintPostedPlantTransportOrder@1100485022(VAR PostedTransOrderRec2@11012000 : Record 11020507;UseFilter@1100525001 : Boolean);
    VAR
      PostedTransOrderRec@1100525002 : Record 11020507;
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      IF UseFilter AND (PostedTransOrderRec2.GETFILTER("No.") <> '') THEN
        PostedTransOrderRec.COPY(PostedTransOrderRec2)
      ELSE
        PostedTransOrderRec.SETRANGE("No.",PostedTransOrderRec2."No.");

      ReportSelections.PrintWithPrinterSelection(
        1552,PostedTransOrderRec,PrinterByPlantListRec."List Type"::"Transport Order");
    END;

    PROCEDURE PrintPlantTransportRideList@1100485013(PlantTransportRide@11012000 : Record 11020517);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      PlantTransportRide.SETRANGE("No.",PlantTransportRide."No.");

      ReportSelections.Print(1553,PlantTransportRide,0);
    END;

    PROCEDURE PrintPlantTransportRide@1100529400(PlantTransportRide@11012000 : Record 11020517);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS DP01220
      PlantTransportRide.SETRANGE("No.",PlantTransportRide."No.");

      ReportSelections.Print(1554,PlantTransportRide,0);
    END;

    PROCEDURE PrintExitOrder@11012001(ExitOrderRec@11012000 : Record 11012559);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ExitOrderRec.SETRANGE("No.",ExitOrderRec."No.");

      ReportSelections.Print(1558,ExitOrderRec,0);
    END;

    PROCEDURE PrintInvoiceProposal@11012016(SalesHeaderRec@11012000 : Record 36);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      SalesHeaderRec.SETRANGE("Document Type",SalesHeaderRec."Document Type"::"Invoice Proposal");
      SalesHeaderRec.SETRANGE("No.",SalesHeaderRec."No.");
      IF SalesHeaderRec."Plant Invoice" THEN
        ReportSelections.Print(1559,SalesHeaderRec,0);
      IF SalesHeaderRec."Service Invoice" THEN
        ReportSelections.Print(3017,SalesHeaderRec,0);
    END;

    PROCEDURE PrintPlantRentalCorrection@1100409000(PlantRentalCorr@11012000 : Record 11012565);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS DP00241 (20020)
      PlantRentalCorr.SETRANGE("No.",PlantRentalCorr."No.");

      ReportSelections.Print(1560,PlantRentalCorr,0);
    END;

    PROCEDURE PrintPlantInspection@1100529000(VAR PlantInspection@11012000 : Record 11012564);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS DP00241 (27495)
      // Thre is not a Inspection No., so no SETRANGE on No. But the Date Filter must be passed, therfore PlantInspection by VAR.

      ReportSelections.Print(1561,PlantInspection,0);
    END;

    PROCEDURE PrintRentalFreeOrder@1100525026(RentalFreeOrder@11012000 : Record 11020552);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS C001017
      RentalFreeOrder.SETRANGE("No.",RentalFreeOrder."No.");

      ReportSelections.Print(1562,RentalFreeOrder,0);
    END;

    PROCEDURE PrintPlantInventory@1100529001(VAR PlantInventory@11012000 : Record 11012555);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1598, PlantInventory,0);
    END;

    PROCEDURE PrintPlantInventoryCourse@1100529002(VAR PlantInventory@11012000 : Record 11012555);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1599, PlantInventory,0);
    END;

    PROCEDURE PrintDocW@1210190003(VAR DocPropertiesRec@1100525000 : Record 11012746);
    VAR
      DocPropertiesRec2@1100485000 : Record 11012746;
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      DocPropertiesRec2.COPY(DocPropertiesRec);
      IF DocPropertiesRec2.GETFILTERS = '' THEN
        DocPropertiesRec2.SETRANGE("No.", DocPropertiesRec2."No.");

      ReportSelections.Print(2003,DocPropertiesRec2,0);
    END;

    PROCEDURE PrintDocI@1210190004(VAR DocPropertiesRec@11012000 : Record 11012746);
    VAR
      DocPropertiesRec2@1100485000 : Record 11012746;
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      DocPropertiesRec2.COPY(DocPropertiesRec);
      IF DocPropertiesRec2.GETFILTERS = '' THEN
        DocPropertiesRec2.SETRANGE("No.", DocPropertiesRec2."No.");

      ReportSelections.Print(2004,DocPropertiesRec2,0);
    END;

    PROCEDURE PrintSegmentLabel@1210190005(SegmentHeader@11012000 : Record 11072039);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      SegmentHeader.SETRECFILTER;

      ReportSelections.Print(2005,SegmentHeader,0);
    END;

    PROCEDURE PrintHours@1100485001(VAR HourHeader@1210190000 : Record 11012038;ListOrControl@1100485000 : 'List,Control';HourAccountingOnTime@1100485001 : Boolean);
    VAR
      ReportSelections@1210190002 : Record 77;
    BEGIN
      //**4PS
      CASE ListOrControl OF
        ListOrControl::List:
          ReportSelections.Print(1019,HourHeader,0);
        ListOrControl::Control:
          ReportSelections.Print(1018,HourHeader,0);
      END;
    END;

    PROCEDURE PrintHoursProject@1100485015(VAR HourHeader@1210190000 : Record 11020224);
    VAR
      ReportSelections@1210190002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1004,HourHeader,0);
    END;

    PROCEDURE PrintPostedHoursList@1210190008(VAR PostedHourHeader@1210190000 : Record 11012084);
    VAR
      ReportSelections@1210190002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1020,PostedHourHeader,0);
    END;

    PROCEDURE PrintFrostOutRegistration@1210190029(VAR FrostOutRegistration@1210190000 : Record 11020670);
    VAR
      ReportSelections@1210190002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(8200,FrostOutRegistration,0);
    END;

    PROCEDURE PrintFrostOutRequest@1100528300(VAR FrostOutRequest@1210190000 : Record 11020671);
    VAR
      ReportSelections@1210190002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(8210,FrostOutRequest,0);
    END;

    PROCEDURE PrintBlanketScheme@1210190016(VAR PurchHeader@1210190000 : Record 38);
    VAR
      ReportSelections@1210190002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(6001,PurchHeader,0);
    END;

    PROCEDURE PrintReqWksh@1100485018(RequisitionLineRec@1100485000 : Record 246);
    VAR
      lRequisitionLineRec@1100485001 : Record 246;
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      lRequisitionLineRec.COPY(RequisitionLineRec);

      ReportSelections.Print(6000,lRequisitionLineRec,0);
    END;

    PROCEDURE PrintPurchReminder@1210190015(VAR PurchReminder@1210190000 : Record 11020212);
    VAR
      ReportSelections@1210190002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(6002,PurchReminder,0);
    END;

    PROCEDURE EmailOptionQuote@1100528509(OptionQuoteHeader@1000 : Record 11012513);
    BEGIN
      //**4PS
      DoPrintOptionQuote(OptionQuoteHeader,TRUE);
    END;

    PROCEDURE PrintOptionQuote@1210190021(OptionQuoteHeader@11012000 : Record 11012513);
    BEGIN
      //**4PS
      DoPrintOptionQuote(OptionQuoteHeader,FALSE);
    END;

    LOCAL PROCEDURE DoPrintOptionQuote@1100528507(OptionQuoteHeader@1000 : Record 11012513;SendAsEmail@1002 : Boolean);
    VAR
      ReportSelections@1001 : Record 77;
      Contact@1100525000 : Record 5050;
      DocumentMailing@1004 : Codeunit 260;
      DocName@1100525001 : Text[150];
    BEGIN
      //**4PS
      OptionQuoteHeader.SETRANGE("No.",OptionQuoteHeader."No.");
      IF SendAsEmail THEN BEGIN
        IF Contact.GET(OptionQuoteHeader.Buyer) THEN;
        DocumentMailing.SetGlobalLanguage(Contact."Language Code");
        DocName := Text11012009;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SendEmailToCust(
          1021,OptionQuoteHeader,OptionQuoteHeader."No.",DocName,TRUE,'')
      END ELSE
        ReportSelections.PrintWithGUIYesNo(
          1021,OptionQuoteHeader,TRUE,TRUE,0);
    END;

    PROCEDURE PrintProjectInstallments@1100485000(VAR ProjInstallmentRec@1210190000 : Record 11012018);
    VAR
      ReportSelections@1210190002 : Record 77;
      Project@1100294000 : Record 11072003;
      Obj@1000 : Record 2000000001;
      ObjId@1001 : Integer;
      TempReportSelections@1101285000 : TEMPORARY Record 77;
      ReportLayoutSelection@1101285001 : Record 9651;
    BEGIN
      //**4PS

      // SESB.001 ASH 18.07.2013 >>
      Obj.SETRANGE(Type,Obj.Type::Report);
      Obj.SETRANGE(Name,'Import Installments');
      IF Obj.FINDLAST THEN
        ObjId := Obj.ID;
      // SESB.001 ASH 18.07.2013 <<

      //>>4PSSE, upgrade, code copied from tab77
      //ReportSelections.Print(1022,ProjInstallmentRec,0);
      //Print(ReportUsage : Integer;RecordVariant : Variant;CustNo : Code[20])
      //PrintWithGUIYesNo(ReportUsage,RecordVariant,TRUE,TRUE,CustNo); //**4PS.n
      //PrintWithGUIYesNo(ReportUsage : Integer;RecordVariant : Variant;IsGUI : Boolean;AllowReportSelForm : Boolean;CustNo : Code[20])
      ReportSelections.FindPrintUsage(ReportSelections.Usage::"1022",'',TRUE,TempReportSelections); //**4PS.n
      WITH TempReportSelections DO
        REPEAT
          // SESB.001 ASH 18.07.2013 >>
          //IF ReportSelection."Report ID" = REPORT::"Import Installments" THEN BEGIN
          IF (ObjId <> 0) AND ("Report ID" = ObjId) THEN BEGIN
            Project.GET(ProjInstallmentRec."Project No.");
            ProjInstallmentRec.SETFILTER(Principal,Project."Bill-to Customer No.");
            ProjInstallmentRec.SETFILTER("Plot No.",'');
          END;
          // SESB.001 ASH 18.07.2013 <<
          ReportLayoutSelection.SetTempLayoutSelected("Custom Report Layout Code");
          IF "No Request Form" THEN
            REPORT.RUNMODAL("Report ID",FALSE,FALSE,ProjInstallmentRec)
          ELSE
            REPORT.RUNMODAL("Report ID",TRUE,FALSE,ProjInstallmentRec);
        UNTIL NEXT = 0;
      ReportLayoutSelection.SetTempLayoutSelected('');
      //<<4PSSE
    END;

    PROCEDURE PrintProjectControl@1210190022(VAR ProjRec@1210190000 : Record 11072003);
    VAR
      ReportSelections@1210190002 : Record 77;
      ProjRec2@1100485000 : Record 11072003;
    BEGIN
      //**4PS
      ProjRec2.COPY(ProjRec);
      ProjRec2.SETRANGE("No.", ProjRec2."No.");

      ReportSelections.Print(1023,ProjRec2,0);
    END;

    PROCEDURE PrintProjectInventoryDelivery@1100525003(ProjInvDelRec@1100525001 : Record 11012671);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      ProjInvDelRec.SETRANGE("Project No.", ProjInvDelRec."Project No.");

      ReportSelections.Print(1024,ProjInvDelRec,0);
    END;

    PROCEDURE PrintProjectInventory@1100525000(ProjectInventoryEntry@1100525000 : Record 11012670);
    VAR
      ReportSelections@1100525002 : Record 77;
    BEGIN
      //**4PS
      ProjectInventoryEntry.SETRANGE("Project No.", ProjectInventoryEntry."Project No.");

      ReportSelections.Print(1005,ProjectInventoryEntry,0);
    END;

    PROCEDURE PrintTenderParagraphbyPrinc@1210190007(ProjPrincipalRec@1210190002 : Record 11012005);
    VAR
      ReportSelections@1210190001 : Record 77;
    BEGIN
      //**4PS
      ProjPrincipalRec.SETRANGE("Project No.", ProjPrincipalRec."Project No.");
      ProjPrincipalRec.SETRANGE(Principal, ProjPrincipalRec.Principal);

      ReportSelections.Print(1025,ProjPrincipalRec,0);
    END;

    PROCEDURE PrintComplaint@1100485002(VAR ComplaintRec@11012000 : Record 11012450);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1000,ComplaintRec,0);
    END;

    PROCEDURE PrintInstallMotivation@1100485003(VAR InstallMotRec@1100485000 : Record 11012471);
    VAR
      ReportSelections@1100485002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1001,InstallMotRec,0);
    END;

    PROCEDURE PrintInstallOverview@1100485008(VAR InstallOvRec@1100485001 : Record 11012265);
    VAR
      ReportSelections@1100485004 : Record 77;
      NumRec@1100528900 : Integer;
    BEGIN
      //**4PS
      //DP01491.sn
      NumRec := InstallOvRec.COUNT;
      IF NumRec = 1 THEN BEGIN
        //search related overview (Project-ExtensionContract) in same OverviewPeriod with equivalent ProductionDate
        InstallOvRec.FINDFIRST;
        InstallOvRec.SETRANGE("No.");
        InstallOvRec.SETRANGE("Installment Overview Period", InstallOvRec."Installment Overview Period");
        InstallOvRec.SETRANGE("Last Motivation Date", InstallOvRec."Last Motivation Date");
      END;
      //DP01491.en
      ReportSelections.Print(1003,InstallOvRec,0);
    END;

    PROCEDURE PrintProjectAssignment@1100485005(VAR ProjectAssignment@11012000 : Record 11012456);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1002,ProjectAssignment,0);
    END;

    PROCEDURE PrintTryout@1100485006(VAR TryoutRec@1100485000 : Record 11012750);
    VAR
      ReportSelections@1100485005 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(2000,TryoutRec,0);
    END;

    PROCEDURE PrintTryoutQuote@1199197400(VAR TryoutQuoteRec@1100485000 : Record 11012758);
    VAR
      ReportSelections@1100485005 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(2007,TryoutQuoteRec,0);
    END;

    PROCEDURE PrintUnitPriceProdMot@1100485019(VAR ProdMotRec@1100485000 : Record 11020425);
    VAR
      ReportSelections@1100485005 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1400,ProdMotRec,0);
    END;

    PROCEDURE PrintUnitPricePriceList@1100485020(VAR PriceListRec@1100485000 : Record 11020422);
    VAR
      ReportSelections@1100485005 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1401,PriceListRec,0);
    END;

    PROCEDURE PrintUnitPrice@1100485026(VAR UnitPriceRec@1100485000 : Record 11020420);
    VAR
      ReportSelections@1100485005 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1402,UnitPriceRec,0);
    END;

    PROCEDURE PrintPaymentHistoryOverview@1100525006(BankRec@1100525000 : Record 270);
    VAR
      ReportSelections@1100525001 : Record 77;
    BEGIN
      //**4PS
      BankRec.SETRANGE("No.", BankRec."No.");

      ReportSelections.Print(1200,BankRec,0);
    END;

    PROCEDURE PrintProposalOverview@1100525007(BankRec@1100525001 : Record 270);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      BankRec.SETRANGE("No.", BankRec."No.");

      ReportSelections.Print(1201,BankRec,0);
    END;

    PROCEDURE PrintSiteManagerReport@1100525011(ProjRec@1100525001 : Record 11072003);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      ProjRec.SETRANGE("No.", ProjRec."No.");

      ReportSelections.Print(8000,ProjRec,0);
    END;

    PROCEDURE PrintGetOrderSiteManager@1100525009(GetOrderRec@1100525001 : Record 11125531);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      GetOrderRec.SETRANGE("No.", GetOrderRec."No.");

      ReportSelections.Print(8001,GetOrderRec,0);
    END;

    PROCEDURE PrintPlantRequestSiteManager@1100529900(PlantRequestSMF@1100525001 : Record 11125529);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      PlantRequestSMF.SETRANGE("No.", PlantRequestSMF."No.");

      ReportSelections.Print(8002,PlantRequestSMF,0);
    END;

    PROCEDURE PrintSiteManHrAccProject@1100530000(SiteMgtHrAccProjRec@1100525001 : Record 11012362);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      SiteMgtHrAccProjRec.SETRANGE(Year, SiteMgtHrAccProjRec.Year);
      SiteMgtHrAccProjRec.SETRANGE(Week, SiteMgtHrAccProjRec.Week);
      SiteMgtHrAccProjRec.SETRANGE("Receiving Company", SiteMgtHrAccProjRec."Receiving Company");
      SiteMgtHrAccProjRec.SETRANGE("Project No.", SiteMgtHrAccProjRec."Project No.");

      ReportSelections.Print(8020,SiteMgtHrAccProjRec,0);
    END;

    PROCEDURE PrintSiteManHrAccEmployee@1100530001(SiteMgtHrAccEmplRec@1100525001 : Record 11012360);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      SiteMgtHrAccEmplRec.SETRANGE(Year, SiteMgtHrAccEmplRec.Year);
      SiteMgtHrAccEmplRec.SETRANGE(Week, SiteMgtHrAccEmplRec.Week);
      SiteMgtHrAccEmplRec.SETRANGE("Supplying Company", SiteMgtHrAccEmplRec."Supplying Company");
      SiteMgtHrAccEmplRec.SETRANGE("Employee No.", SiteMgtHrAccEmplRec."Employee No.");

      ReportSelections.Print(8021,SiteMgtHrAccEmplRec,0);
    END;

    PROCEDURE PrintSiteManHrAccExtByComp@1100530003(SiteMgtHrAccEmplRec@1100525001 : Record 11012360);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      SiteMgtHrAccEmplRec.SETRANGE(Year, SiteMgtHrAccEmplRec.Year);
      SiteMgtHrAccEmplRec.SETRANGE(Week, SiteMgtHrAccEmplRec.Week);
      SiteMgtHrAccEmplRec.SETRANGE("Supplying Company", SiteMgtHrAccEmplRec."Supplying Company");
      SiteMgtHrAccEmplRec.SETRANGE("Employee No.", SiteMgtHrAccEmplRec."Employee No.");

      ReportSelections.Print(8022,SiteMgtHrAccEmplRec,0);
    END;

    PROCEDURE PrintDeviationReport@1100525020(QADeviation@1100525001 : Record 11125986);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      QADeviation.SETRANGE("No.", QADeviation."No.");

      ReportSelections.Print(8100,QADeviation,0);
    END;

    PROCEDURE PrintAccidentReport@1100525019(Accident@1100525001 : Record 11126005);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      Accident.SETRANGE("No.", Accident."No.");

      ReportSelections.Print(8120,Accident,0);
    END;

    PROCEDURE PrintShippingOrder@1100525022(ShippingOrderHeader@1100525001 : Record 11020623);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      ShippingOrderHeader.SETRANGE("No.", ShippingOrderHeader."No.");

      ReportSelections.Print(9000,ShippingOrderHeader,0);
    END;

    PROCEDURE PrintPostedShippingOrder@1100525021(PostedShippingOrderHeader@1100525001 : Record 11020625);
    BEGIN
      //**4PS
      DoPrintPostedShippingOrder(PostedShippingOrderHeader, FALSE);
    END;

    PROCEDURE PrintJobLedger@1100525029(JobLedgerEntry@1100525001 : Record 11072005);
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1502, JobLedgerEntry, 0);
    END;

    PROCEDURE EmailPostedShippingOrder@1100528202(PostedShippingOrderHeader@1100525001 : Record 11020625);
    BEGIN
      //**4PS
      DoPrintPostedShippingOrder(PostedShippingOrderHeader, TRUE);
    END;

    LOCAL PROCEDURE DoPrintPostedShippingOrder@1100528203(PostedShippingOrderHeader@1100525001 : Record 11020625;SendAsEmail@1100528200 : Boolean);
    VAR
      ReportSelections@1100525000 : Record 77;
      DocumentMailing@1100528208 : Codeunit 260;
      DocName@1100528209 : Text[100];
      Job@1100528201 : Record 11072003;
      ProjectPrincipal@1100528202 : Record 11012005;
      PurchaseHeader@1100528203 : Record 38;
      SalesHeader@1100528204 : Record 36;
      ServiceOrder@1100528205 : Record 11012823;
      Customer@1100528206 : Record 18;
      Vendor@1100528207 : Record 23;
    BEGIN
      //**4PS
      PostedShippingOrderHeader.SETRANGE("No.", PostedShippingOrderHeader."No.");
      IF SendAsEmail THEN BEGIN
        CASE PostedShippingOrderHeader."Source Type" OF
          PostedShippingOrderHeader."Source Type"::Project:
            BEGIN
              DocName := Job.TABLECAPTION;
              IF Job.GET(PostedShippingOrderHeader."Source No.") THEN
                IF ProjectPrincipal.GET(Job."No.",Job."Bill-to Customer No.") THEN
                   IF Customer.GET(ProjectPrincipal.Principal) THEN;
            END;
          PostedShippingOrderHeader."Source Type"::"Purchase Return Order":
            BEGIN
              DocName := ReturnOrderTxt;
              IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, PostedShippingOrderHeader."Source No.") THEN
                IF Vendor.GET(PurchaseHeader."Buy-from Vendor No.") THEN;
            END;
          PostedShippingOrderHeader."Source Type"::"Sales Order":
            BEGIN
              DocName := OrderTxt;
              IF SalesHeader.GET(SalesHeader."Document Type"::Order, PostedShippingOrderHeader."Source No.") THEN
                IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN;
            END;
          PostedShippingOrderHeader."Source Type"::"Service Order":
            BEGIN
              DocName := ServiceOrder.TABLECAPTION;
              IF ServiceOrder.GET(PostedShippingOrderHeader."Source No.") THEN
                IF Customer.GET(ServiceOrder."Customer No.") THEN;
            END;
        END;
        IF PostedShippingOrderHeader."Source Type" <> PostedShippingOrderHeader."Source Type"::"Purchase Return Order" THEN BEGIN
          DocumentMailing.SetGlobalLanguage(Customer."Language Code");
          DocumentMailing.ResetGlobalLanguage;
          ReportSelections.SendEmailToCust(
            9001,PostedShippingOrderHeader,PostedShippingOrderHeader."No.",DocName,TRUE,Customer."No.")
        END ELSE BEGIN
          DocumentMailing.SetGlobalLanguage(Vendor."Language Code");
          DocumentMailing.ResetGlobalLanguage;
          ReportSelections.SendEmailToVendor(
            9001,PostedShippingOrderHeader,PostedShippingOrderHeader."No.",DocName,TRUE,Vendor."No.")
        END;
      END ELSE
        ReportSelections.Print(9001,PostedShippingOrderHeader,0);
    END;

    PROCEDURE PrintProjectResultForecast@1210190026(IProjectResultForecast@1210190001 : Record 11126036);
    VAR
      Job@1210190002 : Record 11072003;
      ReportSelections@1210190000 : Record 77;
    BEGIN
      //**4PS
      Job.SETRANGE("No.", IProjectResultForecast."Project No.");
      //IProjectResultForecast.SETRECFILTER;

      ReportSelections.Print(1026,Job,0);
    END;

    PROCEDURE PrintServiceCollectiveList@1210190032(ServiceCollectiveList@1210190000 : Record 11071730);
    VAR
      ReportSelections@1210190001 : Record 77;
    BEGIN
      ServiceCollectiveList.SETRANGE("No.", ServiceCollectiveList."No.");

      ReportSelections.Print(3020,ServiceCollectiveList,0);
    END;

    PROCEDURE PrintSOAppointmentLetter@1100528601(VAR ServiceOrder@1100528600 : Record 11012823;IExecuteWithin@1100528602 : DateFormula);
    VAR
      ReportSelections@1100528601 : Record 77;
      ReportParameterManagement@1100528603 : Codeunit 11012356;
    BEGIN
      IF NOT ServiceOrder.MARKEDONLY THEN
        ServiceOrder.SETRANGE("No.", ServiceOrder."No.");

      ReportSelections.FilterPrintUsage(3021);
      ReportSelections.SETFILTER("Report ID",'<>0');
      IF ReportSelections.FINDSET THEN
        REPEAT
          ReportParameterManagement.StoreReportParameter(ReportSelections."Report ID", 'ExecuteWithin', IExecuteWithin, 0);
        UNTIL ReportSelections.NEXT = 0;
      COMMIT;
      ReportSelections.Print(3021,ServiceOrder,0);
      IF ReportSelections.FINDSET THEN
        REPEAT
          ReportParameterManagement.FlushReportParameters(ReportSelections."Report ID");
        UNTIL ReportSelections.NEXT = 0;
    END;

    PROCEDURE PrintSurvey@1100528602(IServiceSurvey@1100528600 : Record 11071803);
    VAR
      ReportSelections@1100528601 : Record 77;
    BEGIN
      IServiceSurvey.SETRECFILTER;

      ReportSelections.Print(3025,IServiceSurvey,0);
    END;

    PROCEDURE PrintSurveyLocation@1100528603(IServiceSurveyLocation@1100528600 : Record 11071804);
    VAR
      ReportSelections@1100528601 : Record 77;
    BEGIN
      IServiceSurveyLocation.SETRECFILTER;

      ReportSelections.Print(3026,IServiceSurveyLocation,0);
    END;

    PROCEDURE PrintSurveyObject@1100528604(IServSurvLocationObject@1100528600 : Record 11071813);
    VAR
      ReportSelections@1100528601 : Record 77;
    BEGIN
      IServSurvLocationObject.SETRECFILTER;

      ReportSelections.Print(3027,IServSurvLocationObject,0);
    END;

    PROCEDURE PrintServiceContract_Object@1100528605(IServiceContract@1100528600 : Record 11012812);
    VAR
      ReportSelections@1100528601 : Record 77;
    BEGIN
      IServiceContract.SETRECFILTER;

      ReportSelections.Print(3028,IServiceContract,0);
    END;

    PROCEDURE PrintServiceContractControl@1100528606(IServiceContractControl@1100528600 : Record 11071762);
    VAR
      ReportSelections@1100528601 : Record 77;
    BEGIN
      IServiceContractControl.SETRECFILTER;

      ReportSelections.Print(3029,IServiceContractControl,0);
    END;

    PROCEDURE PrintProjectCollectiveList@1100528200(ProjectCollectiveList@1210190000 : Record 11071875);
    VAR
      ReportSelections@1210190001 : Record 77;
    BEGIN
      ProjectCollectiveList.SETRANGE("No.", ProjectCollectiveList."No.");

      ReportSelections.Print(1029,ProjectCollectiveList,0);
    END;

    PROCEDURE PrintServiceObjectList@1100525023(IServiceObject@1100525000 : Record 11071691);
    VAR
      ReportSelections@1100525001 : Record 77;
    BEGIN
      IServiceObject.SETRECFILTER;

      ReportSelections.Print(3035,IServiceObject,0);
    END;

    PROCEDURE PrintFinalInstallmentDetails@1100525025(VAR IProjectPrincipal@1100525000 : Record 11012005);
    VAR
      ReportSelections@1100525001 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1030,IProjectPrincipal,0);
    END;

    PROCEDURE PrintWorkOrder@1100528400(WorkOrder@1000 : Record 11229279);
    BEGIN
      //**4PS
      WorkOrder.SETRECFILTER;
      PrintWorkOrders(WorkOrder);
    END;

    PROCEDURE PrintWorkOrders@1100528600(VAR IWorkOrder@1000 : Record 11229279);
    VAR
      WorkOrder@1100528600 : Record 11229279;
      ReportSelections@1001 : Record 77;
      ReportUsage@1100528400 : Integer;
      SourceType@1100528601 : Option;
    BEGIN
      //**4PS
      WorkOrder.COPY(IWorkOrder);

      FOR SourceType := WorkOrder."Source Type"::ServiceOrder TO WorkOrder."Source Type"::Request DO BEGIN
        CASE SourceType OF
          WorkOrder."Source Type"::ServiceOrder:
            ReportUsage := 3040;
          WorkOrder."Source Type"::Project:
            ReportUsage := 1040;
          WorkOrder."Source Type"::Request:
            ReportUsage := 8200;
        END;
        WorkOrder.FILTERGROUP(2);
        WorkOrder.SETRANGE("Source Type", SourceType);
        WorkOrder.FILTERGROUP(0);
        IF NOT WorkOrder.ISEMPTY THEN
          ReportSelections.Print(ReportUsage,WorkOrder,0);
      END;
    END;

    PROCEDURE PrintObjectFilterList@1100528607(IObjectFilter@1100528600 : Record 11071716);
    VAR
      ReportSelections@1100528602 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(3041,IObjectFilter,0);
    END;

    PROCEDURE PrintPriceBookInstallmentOverview@1100528608(VAR IPBInstallmentOverview@1100528600 : Record 11072317);
    VAR
      ReportSelections@1100528601 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(3042, IPBInstallmentOverview, 0);
    END;

    PROCEDURE PrintPriceBookCollectInstallmentOverview@1100528609(VAR IPBCollectInstallOverview@1100528600 : Record 11072319);
    VAR
      ReportSelections@1100528601 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(3043, IPBCollectInstallOverview, 0);
    END;

    PROCEDURE GetReportSelectionForPrintUsage@1100525001(ReportUsage@1100525003 : Integer;CustNo@1100525002 : Code[20];AllowReportSelForm@1100525001 : Boolean;VAR TempReportSelections@1100525000 : TEMPORARY Record 77);
    VAR
      ReportSelections@1100525004 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.FindPrintUsage(ReportUsage,CustNo,AllowReportSelForm,TempReportSelections);
    END;

    PROCEDURE GetReportSelectionForEmailAttachmentUsage@1100525012(ReportUsage@1100525003 : Integer;CustNo@1100525002 : Code[20];AllowReportSelForm@1100525001 : Boolean;VAR TempReportSelections@1100525000 : TEMPORARY Record 77);
    VAR
      ReportSelections@1100525004 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.FindEmailAttachmentUsage(ReportUsage,CustNo,AllowReportSelForm,TRUE,TempReportSelections);
    END;

    PROCEDURE GetReportSelectionForPrintUsageVendor@1100525013(ReportUsage@1100525003 : Integer;VendorNo@1100525002 : Code[20];AllowReportSelForm@1100525001 : Boolean;VAR TempReportSelections@1100525000 : TEMPORARY Record 77);
    VAR
      ReportSelections@1100525004 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.FindPrintUsageVendor(ReportUsage,VendorNo,AllowReportSelForm,TempReportSelections);
    END;

    PROCEDURE GetReportSelectionForEmailAttachmentUsageVendor@1100525015(ReportUsage@1100525003 : Integer;VendorNo@1100525002 : Code[20];AllowReportSelForm@1100525001 : Boolean;VAR TempReportSelections@1100525000 : TEMPORARY Record 77);
    VAR
      ReportSelections@1100525004 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.FindEmailAttachmentUsageVendor(ReportUsage,VendorNo,AllowReportSelForm,TRUE,TempReportSelections);
    END;

    PROCEDURE GetDefaultReportSelectionForEmailAttachmentUsage@1100528508(UsageFilter@1100525000 : Integer;VAR TempReportSelections@1100525001 : TEMPORARY Record 77);
    VAR
      ReportSelections@1100525002 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.FindEmailAttachmentUsage(UsageFilter,'',FALSE,FALSE,TempReportSelections);
    END;

    PROCEDURE SaveAnyRecordReportAsPdfOnClient@1100528412(SourceVariant@1100528501 : Variant;MailTemplateNo@1100528404 : Integer;ShortcutDimension1Code@1100528403 : Code[20];ReportId@1005 : Integer;FullClientPDFFileName@1100528400 : Text;DocNo@1100527701 : Code[20];DocName@1100527700 : Text[150]);
    VAR
      TempEmailAttachment@1100528401 : TEMPORARY Record 11229294;
      FileManagement@1100528402 : Codeunit 419;
    BEGIN
      //**4PS
      SaveAnyRecordReportAsPdf(
        SourceVariant, MailTemplateNo, ShortcutDimension1Code, ReportId, TRUE, FALSE, DocNo, DocName, TempEmailAttachment);
      FileManagement.DownloadToFile(TempEmailAttachment."Attachment Server File Path", FullClientPDFFileName);
      IF TempEmailAttachment."Delete Server File" THEN
        ERASE(TempEmailAttachment."Attachment Server File Path");
    END;

    PROCEDURE SaveAnyRecordReportAsPdf@1100528512(RecordVariant@1100528501 : Variant;MailTemplateNo@1100528401 : Integer;ShortcutDimension1Code@1100528400 : Code[20];ReportId@1005 : Integer;ThrowErrorWhenFileNotExists@1100528402 : Boolean;PDFIsPrinted@1100528403 : Boolean;DocNo@1100527701 : Code[20];DocName@1100527700 : Text[150];VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294) FileExists : Boolean;
    VAR
      ReportSelections@1100525000 : Record 77;
    BEGIN
      //**4PS
      FileExists := ReportSelections.SaveAnyRecordReportAsPdf(
        RecordVariant, MailTemplateNo, ShortcutDimension1Code, ReportId, ThrowErrorWhenFileNotExists, PDFIsPrinted,DocNo, DocName, TempEmailAttachment);
    END;

    PROCEDURE SaveConsentedDocumentsAsPdf@1100528413(VAR UserSetup@1100528402 : Record 91;FromConsentedDateTime@1100528401 : DateTime;ToConsentedDateTime@1100528400 : DateTime;VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294) : Text[250];
    VAR
      ConsentedDocuments@1100528403 : Report 11012228;
      FileManagement@1003 : Codeunit 419;
      PDFFileManagement@1100528502 : Codeunit 11020228;
      MailTemplateNo@1100528300 : Integer;
    BEGIN
      //**4PS
      MailTemplateNo := 100;
      TempEmailAttachment."Attachment Server File Path" := COPYSTR(FileManagement.ServerTempFileName('pdf'), 1, 250);
      TempEmailAttachment."Delete Server File" := TRUE;
      ConsentedDocuments.SETTABLEVIEW(UserSetup);
      ConsentedDocuments.SetFromToConsentedDateTime(FromConsentedDateTime, ToConsentedDateTime);
      ConsentedDocuments.SAVEASPDF(TempEmailAttachment."Attachment Server File Path");
      PDFFileManagement.AddBackground(TempEmailAttachment."Attachment Server File Path", MailTemplateNo,
        UserSetup."Department Code", FALSE);
      IF NOT EXISTS(TempEmailAttachment."Attachment Server File Path") THEN
        ERROR(Text11012007);
      TempEmailAttachment.INSERT(TRUE);
    END;

    PROCEDURE PrintPurchQuoteThanksLetter@1100529600(PurchHeader@1000 : Record 38);
    VAR
      ChangeStatus@1100528401 : 'None,Released,Closed';
      DirectPostOrder@1100528400 : 'According to Vendor,Not';
    BEGIN
      //**4PS
      IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Quote THEN
        EXIT;
      DoPrintPurchHeader(PurchHeader,FALSE,FALSE,ChangeStatus::None,DirectPostOrder::"Not",TRUE,TRUE);
    END;

    PROCEDURE EmailPostedPurchReceipt@1100527902(PurchRcptHeader@1000 : Record 120;UseEMailForPurchReceipt@1100529600 : Boolean);
    BEGIN
      //**4PS
      DoPrintPostedPurchReceipt(PurchRcptHeader,TRUE, UseEMailForPurchReceipt);
    END;

    PROCEDURE PrintPostedPurchReceipt@1100527901(PurchRcptHeader@1000 : Record 120);
    BEGIN
      //**4PS
      DoPrintPostedPurchReceipt(PurchRcptHeader,FALSE, FALSE);
    END;

    LOCAL PROCEDURE DoPrintPostedPurchReceipt@1100527900(PurchRcptHeader@1000 : Record 120;SendAsEmail@1100528400 : Boolean;UseEMailForPurchReceipt@1100529601 : Boolean);
    VAR
      ReportSelections@1001 : Record 77;
      Vendor@1100529600 : Record 23;
      DocumentMailing@1100528403 : Codeunit 260;
      DocName@1100525000 : Text[150];
    BEGIN
      //**4PS
      PurchRcptHeader.SETRANGE("No.",PurchRcptHeader."No.");
      IF SendAsEmail THEN BEGIN
        DocumentMailing.SetGlobalLanguage(PurchRcptHeader."Language Code");
        DocName := Text11012011;
        DocumentMailing.ResetGlobalLanguage;
        ReportSelections.SetSendPurchaseOrderReceipt(TRUE);
        IF UseEMailForPurchReceipt THEN
          IF Vendor.GET(PurchRcptHeader."Buy-from Vendor No.") THEN
            IF Vendor."E-Mail Subject Purch. Receipt" <> '' THEN
              ReportSelections.SetEMailSubject(Vendor."E-Mail Subject Purch. Receipt");
        ReportSelections.SetUseEMailForPurchReceipt(UseEMailForPurchReceipt);
        ReportSelections.SendEmailToVendor(
          ReportSelections.Usage::"P.Receipt",PurchRcptHeader,PurchRcptHeader."No.",
          DocName,TRUE,'')
      END ELSE
        ReportSelections.Print(ReportSelections.Usage::"P.Receipt",PurchRcptHeader,0);
    END;

    PROCEDURE PrintPlantQuote@1100528504(PlantQuoteRec@11012000 : Record 11229918);
    VAR
      ReportSelections@11012001 : Record 77;
    BEGIN
      //**4PS
      PlantQuoteRec.SETRANGE("No.",PlantQuoteRec."No.");

      ReportSelections.Print(1563,PlantQuoteRec,0);
    END;

    PROCEDURE PrintProjectMaterialReqLine@1100527650(VAR ProjectMaterialReqLine@1100527650 : Record 11012526);
    VAR
      ReportSelections@1100527651 : Record 77;
    BEGIN
      //**4PS
      ReportSelections.Print(1060,ProjectMaterialReqLine,0);
    END;

    BEGIN
    {
      4PS, dbeekman, 22-10-2008:
        - ReportSelection changed. cod229.GetReportSelection called to select reports to be printed
        - local var ReportSelection is changed to Temporary, name is not changed to Temp[Var] because of the
          high number of occurences that needed to be changed then (however used in NAVW1, it is not common)
        - old filtering outcommented, and new function call added without **4PS tags

      4PS, mvos, 20-05-2010:
        - Changed PrintDocW and PrintDocI (variable document to document properties)

      SESB.001 Importing Instalments
         ASH 18.07.2013 Trigger PrintProjectInstallments changed
    }
    END.
  }
}

