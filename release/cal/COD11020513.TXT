OBJECT Codeunit 11020513 IMOS Job Notice Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'DEU=Es sind keine Zeilen vorhanden, die gesendet werden kînnen.;ENU=There are no lines to send.;NLD=Er zijn geen regels te verzenden.;NOR=Det er ingen rader Ü sende.;SVE=Det finns inga rader att skicka.';
      GLSetup@1000000000 : Record 98;
      IMOSSetup@1000000001 : Record 11020549;
      ItemJnlLine@1100485005 : Record 83;
      OutboundDocMgt@1000000002 : Codeunit 11020511;
      ItemJnlPostBatch@1100485002 : Codeunit 23;
      PlantNoRec@1100485000 : Record 11012552;
      PlantTypeRec@1100485001 : Record 11012551;
      Text002@1100485003 : TextConst 'DEU=Es wurde keine Auftragsscheinzeile erstellt. \Mîchten Sie eine Dummyzeile erstellen?;ENU=No Job Notice Lines Defined\Generate a dummyline?;NLD=Er is geen Werkbonregel aangelegd. \Wilt u een dummyregel invoeren?;NOR=Ingen jobbmeldingsrader er definert.\Vil du generere en dummyrad?;SVE=Inga jobbmeddelanderader har definierats.\Vill du generera en platshÜllarrad?';
      TempItemJnlLine@1100485006 : TEMPORARY Record 83;
      FirstLineNo@1100485008 : Integer;
      LastLineNo@1100485007 : Integer;
      GvInventory@1100485009 : Decimal;

    PROCEDURE OutMgtSendJobNotice@1000000007(JobNoticeRec@1000 : Record 11020536);
    VAR
      OutboundDoc@1100485001 : Record 11020543;
      OutboundJobNoticeDocNo@1000000002 : Integer;
      OutboundDocumentNo@1003 : Integer;
      AgreementCode@1000000001 : Code[10];
      Text50001@1100485000 : TextConst 'DEU=Arbeitsschein %1 ist in den ausgehenden Auftragsscheinen (Nr. %2) erstellt worden.\Sofort in iMOS Åbertragen?;ENU=Job Notice %1 is added to the Outbound Job Notices (No. %2).\Send to iMOS?;NLD=Werkbon %1 is geplaatst in de uitgaande werkbonnen (Nr. %2).\Direct naar iMOS overzetten?;NOR=Jobbmelding %1 er lagt til i utgÜende jobbmeldinger (nr %2).\Sende til iMOS?;SVE=Jobbmeddelandet %1 har lagts till i utgÜende jobbmeddelanden (nr %2).\Skicka till iMOS?';
      Text50002@1100485002 : TextConst 'DEU=Der Aufragszettel ist versendet worden.;ENU=The Job Notice is sent;NLD=De werkbon is verzonden.;NOR=Jobbmeldingen er sendt;SVE=Jobbmeddelandet har skickats';
    BEGIN
      JobNoticeRec.TESTFIELD("Customer No.");
      JobNoticeRec.TESTFIELD("District Code");

      IMOSSetup.GET;
      IMOSSetup.TESTFIELD("Send iMOS Werkbon");

      AgreementCode := IMOSSetup."Send iMOS Werkbon";

      IF OutMgtIsAgreementActive(AgreementCode) THEN
        BEGIN
          OutboundJobNoticeDocNo := OutMgtTransferJobNoticeData(JobNoticeRec);
          IF OutboundJobNoticeDocNo <> 0 THEN BEGIN
            OutboundDocumentNo := OutboundDocMgt.InsertOutboundDocument(AgreementCode,
                                                      DATABASE::"Outbound Job Notice (iMOS)",
                                                      OutboundJobNoticeDocNo);
            IF CONFIRM(Text50001, TRUE, JobNoticeRec."No.", OutboundJobNoticeDocNo) THEN BEGIN
              COMMIT;
              OutboundDoc.SETRANGE("Source Type",DATABASE::"Outbound Job Notice (iMOS)");
              OutboundDoc.SETRANGE("Source No.", OutboundJobNoticeDocNo);
              OutboundDoc.FIND('-');
              OutboundDocMgt.SendDocument(OutboundDoc);
              MESSAGE(Text50002);
            END;
          END;
        END;
    END;

    PROCEDURE OutMgtIsAgreementActive@10(AgreementCode@1001 : Text[30]) : Boolean;
    VAR
      PartnerAgreement@1002 : Record 11020547;
    BEGIN
      PartnerAgreement.GET(AgreementCode);
      PartnerAgreement.TESTFIELD(Active);
      EXIT(PartnerAgreement.Active);
    END;

    PROCEDURE OutMgtTransferJobNoticeData@2(JobNoticeRec@1001 : Record 11020536) : Integer;
    VAR
      OutboundJobNoticeRec@1003 : Record 11020544;
      OutboundJobNoticeLineRec@1004 : Record 11020545;
      JobNoticeLineRec@1005 : Record 11020537;
      ItemRec@1100485000 : Record 27;
    BEGIN
      OutboundJobNoticeLineRec.LOCKTABLE;
      WITH OutboundJobNoticeRec DO BEGIN
        LOCKTABLE;
        IF FIND('+') THEN;
        "Outbound Document No." += 1;
        INIT;
        "No." := JobNoticeRec."No.";
        Description := JobNoticeRec.Description;
        Status := JobNoticeRec.Status;
        "Project No." := JobNoticeRec."Project No.";
        "Job Description" := JobNoticeRec."Job Description";
        Comment := JobNoticeRec.Comment;
        "Call Text" := JobNoticeRec."Call Text";
        "Customer No." := JobNoticeRec."Customer No.";
        "Ship to Address" := JobNoticeRec."Ship to Address";
        Location := JobNoticeRec.Location;
        "Plant Location" := JobNoticeRec."Plant Location";
        "Contact Person" := JobNoticeRec."Contact Person";
        "Contact Phone" := JobNoticeRec."Contact Phone";
        "Contact Fax" := JobNoticeRec."Contact Fax";
        "Contact Email" := JobNoticeRec."Contact Email";
        "District Code" := JobNoticeRec."District Code";
        "Bon Type" := JobNoticeRec."Bon Type";
        "Job Notice Date" := JobNoticeRec."Job Notice Date";
        INSERT;
      END;

      JobNoticeLineRec.SETRANGE("Job Notice No.",JobNoticeRec."No.");
      IF NOT JobNoticeLineRec.FIND('-') THEN
        BEGIN
          IF CONFIRM(Text002) THEN
            BEGIN
              JobNoticeLineRec.INIT;
              JobNoticeLineRec."Job Notice No." := JobNoticeRec."No.";
              JobNoticeLineRec."Line No.":= 10000;
              JobNoticeLineRec."Line Type":= JobNoticeLineRec."Line Type"::Item;
              IMOSSetup.GET;
              JobNoticeLineRec."Plant No." := IMOSSetup."Dummy Item";
              ItemRec.GET(IMOSSetup."Dummy Item");
              JobNoticeLineRec."Plant Description" := ItemRec.Description;
              JobNoticeLineRec.INSERT;
            END ELSE
              EXIT;
        END;

      WITH OutboundJobNoticeLineRec DO BEGIN
        JobNoticeLineRec.SETCURRENTKEY("Job Notice No.");
        JobNoticeLineRec.SETRANGE("Job Notice No.",JobNoticeRec."No.");
        IF JobNoticeLineRec.FIND('-') THEN BEGIN
          REPEAT
            INIT;
            "Outbound Document No." := OutboundJobNoticeRec."Outbound Document No.";
            "Job Notice No." := JobNoticeLineRec."Job Notice No.";
            "Line No." := JobNoticeLineRec."Line No.";
            "Line Type" := JobNoticeLineRec."Line Type";
            "Plant No." := JobNoticeLineRec."Plant No.";
            "Plant Type" := JobNoticeLineRec."Plant Type";
            "Plant Description" := JobNoticeLineRec."Plant Description";
            Counter := JobNoticeLineRec.Counter;
            "Info Planner" := JobNoticeLineRec."Info Planner";
            "Info Engineer" := JobNoticeLineRec."Info Engineer";
            Cause := JobNoticeLineRec.Cause;
            Overtime := JobNoticeLineRec.Overtime;
            "Activities done" := JobNoticeLineRec."Activities done";

            IF JobNoticeLineRec."Line Type" = JobNoticeLineRec."Line Type"::Plant THEN BEGIN
              IF PlantNoRec.GET(JobNoticeLineRec."Plant Type",JobNoticeLineRec."Plant No.") THEN BEGIN
                "CP Plant Number" := PlantNoRec."CP Plant Number";
              END ELSE BEGIN
                IF PlantTypeRec.GET(JobNoticeLineRec."Plant Type") THEN
                  "CP Plant Number" := JobNoticeLineRec."Plant Type";
              END;
            END;

            INSERT;
          UNTIL JobNoticeLineRec.NEXT = 0;
        END;
      END;

      EXIT(OutboundJobNoticeRec."Outbound Document No.");
    END;

    PROCEDURE OutMgtMaintainStatus@1000000002(OutboundDocument@1000000000 : Record 11020543);
    VAR
      OutboundJobNoticeRec@1000000001 : Record 11020544;
      JobNoticeRec@1000000002 : Record 11020536;
    BEGIN
      OutboundJobNoticeRec.GET(OutboundDocument."Source No.");
      JobNoticeRec.GET(OutboundJobNoticeRec."No.");
      CASE OutboundDocument.Status OF
        OutboundDocument.Status::Unsent:
          BEGIN
            OutboundJobNoticeRec.Status := OutboundJobNoticeRec.Status::Unsent;
            JobNoticeRec."Outbound Status" := JobNoticeRec."Outbound Status"::Unsent;
            OutboundJobNoticeRec."No. Resent" += 1;
            JobNoticeRec."No. Resent" += 1;
          END;
        OutboundDocument.Status::Sent:
          BEGIN
            OutboundJobNoticeRec.Status := OutboundJobNoticeRec.Status::Sent;
            JobNoticeRec.Status := JobNoticeRec.Status::"In Process";
            JobNoticeRec."Outbound Status" := JobNoticeRec."Outbound Status"::Sent;
            OutboundJobNoticeRec."Date Sent" := OutboundDocument."Date Sent";
            JobNoticeRec."Date Sent" := OutboundDocument."Date Sent";
            OutboundJobNoticeRec."Time Sent" := OutboundDocument."Time Sent";
            JobNoticeRec."Time Sent" := OutboundDocument."Time Sent";
            OutboundJobNoticeRec."No. Resent" += 1;
            JobNoticeRec."No. Resent" += 1;
          END;
      END;
      OutboundJobNoticeRec.MODIFY;
      JobNoticeRec.MODIFY;
    END;

    PROCEDURE InMgtSendJobNotice@1100485002(VAR InboundJobNoticerec@1000 : Record 11020539;Process@1000000000 : Boolean;iJobNo@1100485003 : Code[20];iPlantType@1100485002 : Code[20];iPlantNo@1100485001 : Code[20]);
    VAR
      JobNoticeRec@1000000002 : Record 11020536;
    BEGIN
      //InMgtSendJobNotice
      GLSetup.GET();

      IF InboundJobNoticerec.Status <> InboundJobNoticerec.Status::Received THEN
        ERROR(Text001);

      IF Process THEN BEGIN
        InMgtTransferJobNoticeData(InboundJobNoticerec);
        InMgtTransferMaterials(InboundJobNoticerec, iJobNo, iPlantType, iPlantNo);
      END ELSE BEGIN
        InboundJobNoticerec.Status := InboundJobNoticerec.Status::Cancelled;
        InboundJobNoticerec.MODIFY;
        IF JobNoticeRec.GET(InboundJobNoticerec."No.") THEN BEGIN
          JobNoticeRec.Status := JobNoticeRec.Status::Cancelled;
          JobNoticeRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE InMgtResetJobNotice@1100485012(VAR InboundJobNoticerec@1000 : Record 11020539);
    VAR
      JobNoticeRec@1000000002 : Record 11020536;
    BEGIN
      //InMgtResetJobNotice
      IF InboundJobNoticerec.Status = InboundJobNoticerec.Status::Cancelled THEN BEGIN
        InboundJobNoticerec.Status := InboundJobNoticerec.Status::Received;
        InboundJobNoticerec.MODIFY;
        IF JobNoticeRec.GET(InboundJobNoticerec."No.") THEN BEGIN
          IF JobNoticeRec.Status=JobNoticeRec.Status::Cancelled THEN BEGIN
            JobNoticeRec.Status := JobNoticeRec.Status::Received;
            JobNoticeRec.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE InMgtTransferJobNoticeData@1100485001(InboundJobNoticeRec@1001 : Record 11020539);
    VAR
      JobNoticeRec@1003 : Record 11020536;
      Exists@1000000001 : Boolean;
    BEGIN
      WITH JobNoticeRec DO BEGIN
        Exists := GET(InboundJobNoticeRec."No.");
        LOCKTABLE;
        IF NOT Exists THEN BEGIN
          INIT;
          "No." := InboundJobNoticeRec."No.";
        END;

        "Project No."      := InboundJobNoticeRec."Project No.";
        Comment              := InboundJobNoticeRec.Comment;
        "Bon Type"           := InboundJobNoticeRec."Bon Type";
        Status               := JobNoticeRec.Status::Approved;
        "Date Completed"     := InboundJobNoticeRec."Date Completed";
        "Time Completed"     := InboundJobNoticeRec."Time Completed";
        "Date Processed"     := TODAY;
        "Time Processed"     := TIME;
        "Processed Engineer" := InboundJobNoticeRec."Processed Engineer";

        IF Exists THEN
          MODIFY
        ELSE
          INSERT;

        InMgtCreateJobNoticeLines(InboundJobNoticeRec);
      END;

      WITH InboundJobNoticeRec DO BEGIN
        "Date Processed" := TODAY;
        "Time Processed" := TIME;
        Status := InboundJobNoticeRec.Status::Approved;
        MODIFY;
      END;
    END;

    PROCEDURE InMgtCreateJobNoticeLines@1000000001(VAR InboundJobNoticeRec@1000000001 : Record 11020539);
    VAR
      JobNoticeLineRec@1000000003 : Record 11020537;
      InboundJobNoticeLineRec@1000000000 : Record 11020540;
      Exists@1000000002 : Boolean;
    BEGIN
      WITH JobNoticeLineRec DO BEGIN
        InboundJobNoticeLineRec.SETCURRENTKEY("Job Notice No.");
        InboundJobNoticeLineRec.SETRANGE("Job Notice No.",InboundJobNoticeRec."No.");

        IF InboundJobNoticeLineRec.FIND('-') THEN BEGIN
          REPEAT
            Exists := GET(InboundJobNoticeRec."No.",InboundJobNoticeLineRec."Job Notice Line No.");
            IF NOT Exists THEN BEGIN
              SETRANGE("Job Notice No.",InboundJobNoticeLineRec."Job Notice No.");
              IF FIND('+') THEN;
              "Line No." += 1;
              RESET;
              INIT;
              "Job Notice No." := InboundJobNoticeLineRec."Job Notice No.";
            END;
            "Info Engineer" := InboundJobNoticeLineRec."Info Engineer";
            Cause := InboundJobNoticeLineRec.Cause;
            Overtime := InboundJobNoticeLineRec.Overtime;
            "Activities done" := InboundJobNoticeLineRec."Activities done";
            IF Exists THEN
              MODIFY
            ELSE
              INSERT;
          UNTIL InboundJobNoticeLineRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InMgtMaintainStatus@1100485000(InboundDocument@1000000000 : Record 11020538);
    VAR
      InboundJobNoticeRec@1000000001 : Record 11020539;
      JobNoticeRec@1000000002 : Record 11020536;
    BEGIN
      IF InboundDocument.Status = InboundDocument.Status::Processed THEN BEGIN

        IF InboundJobNoticeRec.GET(InboundDocument."Source No.") THEN BEGIN
          InboundJobNoticeRec.Status := InboundJobNoticeRec.Status::Received;
          InboundJobNoticeRec."No. Received"  := InboundJobNoticeRec."No. Received" + 1;
          InboundJobNoticeRec."Date Received" := InboundDocument."Date Received";
          InboundJobNoticeRec."Time Received" := InboundDocument."Time Received";
          InboundJobNoticeRec.MODIFY;
        END;

        WITH JobNoticeRec DO BEGIN
          IF GET(InboundJobNoticeRec."No.") THEN BEGIN
            IF Status <> Status::Approved THEN BEGIN
              Status := JobNoticeRec.Status::Received;
              "No. Received"  := "No. Received" + 1;
              "Date Received" := InboundDocument."Date Received";
              "Time Received" := InboundDocument."Time Received";
              MODIFY;
            END;
          END;
        END;

      END;
    END;

    PROCEDURE InMgtTransferMaterials@1000000000(VAR InboundJobNoticeRec@1000000001 : Record 11020539;iJobNo@1100485002 : Code[20];iPlantType@1100485001 : Code[20];iPlantNo@1100485000 : Code[20]);
    VAR
      InboundMaterial@1000000000 : Record 11020541;
      JobNoticeRec@1000000002 : Record 11020536;
    BEGIN
      IMOSSetup.GET;
      JobNoticeRec.GET(InboundJobNoticeRec."No.");
      LastLineNo := 0;

      InboundMaterial.SETRANGE("Job Notice No.",InboundJobNoticeRec."No.");
      IF InboundMaterial.FIND('-') THEN BEGIN
        IF (JobNoticeRec."Project No." = '') AND (iJobNo = '') THEN
          InMgtRegisterConsumption(InboundMaterial,iJobNo, iPlantType, iPlantNo)
        ELSE
          InMgtRegisterSales(InboundMaterial,iJobNo, iPlantType, iPlantNo);
      END;

      COMMIT;

      IF LastLineNo <> 0 THEN
        CheckStatusAndPost;
    END;

    PROCEDURE InMgtRegisterConsumption@1000000006(InboundMaterial@1000000000 : Record 11020541;iJobNo@1100485004 : Code[20];iPlantType@1100485003 : Code[20];iPlantNo@1100485002 : Code[20]);
    VAR
      JobNoticeRec@1000000003 : Record 11020536;
      EmployeeRec@1100485001 : Record 5200;
    BEGIN
      ItemJnlLine.SETRANGE("Journal Template Name", IMOSSetup."Item Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",    IMOSSetup."Item Journal Batch Name");

      IF ItemJnlLine.FIND('+') THEN
        ItemJnlLine."Line No." := ItemJnlLine."Line No." + 10000
      ELSE
        ItemJnlLine."Line No." := 10000;

      FirstLineNo := ItemJnlLine."Line No.";

      InboundMaterial.SETRANGE("Job Notice No.",InboundMaterial."Job Notice No.");
      IF InboundMaterial.FIND('-') THEN BEGIN
        JobNoticeRec.GET(InboundMaterial."Job Notice No.");
        REPEAT
          ItemJnlLine.INIT;
          ItemJnlLine."Journal Template Name" := IMOSSetup."Item Journal Template Name";
          ItemJnlLine."Journal Batch Name" := IMOSSetup."Item Journal Batch Name";
          ItemJnlLine."Source Code"  := IMOSSetup."Source Code Ledger";
          ItemJnlLine."Posting Date" := JobNoticeRec."Date Processed";
          ItemJnlLine."Document Date":= JobNoticeRec."Date Processed";
          ItemJnlLine."Document No." := InboundMaterial."Job Notice No.";
          ItemJnlLine."Entry Type"   := ItemJnlLine."Entry Type"::Sale;
          ItemJnlLine.VALIDATE("Item No.",InboundMaterial."Item No.");

          EmployeeRec.INIT;
          IF NOT EmployeeRec.GET(JobNoticeRec."Processed Engineer") THEN
            IF EmployeeRec.GET(InboundMaterial.Engineer) THEN;
          IF EmployeeRec."Imos Car" <> '' THEN
            ItemJnlLine."Location Code" := EmployeeRec."Imos Car"
           ELSE
            ItemJnlLine."Location Code" := InboundMaterial.Location;

          ItemJnlLine.VALIDATE(Quantity, InboundMaterial.Quantity);

          IF (JobNoticeRec."Plant Type" <> '') THEN BEGIN
            IF (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Maintenance) OR
               (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Check) THEN BEGIN
              ItemJnlLine.VALIDATE("Plant Type", JobNoticeRec."Plant Type");
              ItemJnlLine.VALIDATE("Plant No.", JobNoticeRec."Plant No.");
              ItemJnlLine.VALIDATE("Cost Component Plant", IMOSSetup."Cost Component Other");
            END;
          END ELSE BEGIN
            IF (iPlantType <> '') THEN BEGIN
              IF (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Maintenance) OR
                 (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Check) THEN BEGIN
                ItemJnlLine.VALIDATE("Plant Type", iPlantType);
                ItemJnlLine.VALIDATE("Plant No.", iPlantNo);
                ItemJnlLine.VALIDATE("Cost Component Plant", IMOSSetup."Cost Component Other");
              END;
            END;
          END;

          ItemJnlLine.INSERT(TRUE);

          //TmpJnlLineDimRec.RESET;
          //TmpJnlLineDimRec.DELETEALL;
          //InsertTmpJnlLineDim(GLSetup."Global Dimension 1 Code", ItemJnlLine."Shortcut Dimension 1 Code");
          //InsertTmpJnlLineDim(GLSetup."Global Dimension 2 Code", ItemJnlLine."Shortcut Dimension 2 Code");

          //ItemJnlPostLineCU.RunWithCheck(ItemJnlLine, TmpJnlLineDimRec);
          LastLineNo := ItemJnlLine."Line No.";
          ItemJnlLine."Line No." := ItemJnlLine."Line No." + 10000;
        UNTIL InboundMaterial.NEXT = 0;
      END;
    END;

    PROCEDURE InMgtRegisterSales@1100485003(VAR InboundMaterial@1100485000 : Record 11020541;iJobNo@1100485006 : Code[20];iPlantType@1100485005 : Code[20];iPlantNo@1100485004 : Code[20]);
    VAR
      JobNoticeRec@1100485002 : Record 11020536;
      EmployeeRec@1100485003 : Record 5200;
    BEGIN
      ItemJnlLine.SETRANGE("Journal Template Name", IMOSSetup."Item Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",    IMOSSetup."Item Journal Batch Name");

      IF ItemJnlLine.FIND('+') THEN
        ItemJnlLine."Line No." := ItemJnlLine."Line No." + 10000
      ELSE
        ItemJnlLine."Line No." := 10000;

      FirstLineNo := ItemJnlLine."Line No.";

      InboundMaterial.SETRANGE("Job Notice No.", InboundMaterial."Job Notice No.");
      IF InboundMaterial.FIND('-') THEN BEGIN
        JobNoticeRec.GET(InboundMaterial."Job Notice No.");
        REPEAT
          ItemJnlLine.INIT;
          ItemJnlLine."Journal Template Name" := IMOSSetup."Item Journal Template Name";
          ItemJnlLine."Journal Batch Name" := IMOSSetup."Item Journal Batch Name";
          ItemJnlLine."Source Code"  := IMOSSetup."Source Code Ledger";
          ItemJnlLine."Posting Date" := JobNoticeRec."Date Processed";
          ItemJnlLine."Document Date":= JobNoticeRec."Date Processed";
          ItemJnlLine."Document No." := InboundMaterial."Job Notice No.";
          ItemJnlLine."Entry Type"   := ItemJnlLine."Entry Type"::Sale;
          ItemJnlLine.VALIDATE("Item No.",InboundMaterial."Item No.");
          ItemJnlLine.VALIDATE("Job No.",JobNoticeRec."Project No.");

          EmployeeRec.INIT;
          IF EmployeeRec.GET(JobNoticeRec."Processed Engineer") THEN BEGIN
            IF EmployeeRec."Imos Car" <> '' THEN
              ItemJnlLine."Location Code" := EmployeeRec."Imos Car"
             ELSE
              ItemJnlLine."Location Code" := InboundMaterial.Location;
          END ELSE BEGIN
            IF EmployeeRec.GET(InboundMaterial.Engineer) THEN;
            IF EmployeeRec."Imos Car" <> '' THEN
              ItemJnlLine."Location Code" := EmployeeRec."Imos Car"
             ELSE
              ItemJnlLine."Location Code" := InboundMaterial.Location;
          END;

          ItemJnlLine.VALIDATE(Quantity, InboundMaterial.Quantity);

          ItemJnlLine.INSERT(TRUE);
          LastLineNo := ItemJnlLine."Line No.";

      //    TmpJnlLineDimRec.RESET;
      //    TmpJnlLineDimRec.DELETEALL;
      //    InsertTmpJnlLineDim(GLSetup."Global Dimension 1 Code", ItemJnlLine."Shortcut Dimension 1 Code");
      //    InsertTmpJnlLineDim(GLSetup."Global Dimension 2 Code", ItemJnlLine."Shortcut Dimension 2 Code");
      //    ItemJnlPostLineCU.RunWithCheck(ItemJnlLine, TmpJnlLineDimRec);

          ItemJnlLine."Line No." := ItemJnlLine."Line No." + 10000;
        UNTIL InboundMaterial.NEXT = 0;
      END;
    END;

    PROCEDURE InMgtTestJobNotice@1100485004(VAR InboundJobNoticerec@1000 : Record 11020539;iJobNo@1100485003 : Code[20];iPlantType@1100485002 : Code[20];iPlantNo@1100485001 : Code[20]);
    VAR
      JobNoticeRec@1000000002 : Record 11020536;
    BEGIN
      GLSetup.GET();

      IF NOT JobNoticeRec.GET(InboundJobNoticerec."No.")THEN
        ERROR('Dit kan alleen als de werkbon bestaat (Job Notice (iMOS))');

      InMgtTestMaterials(InboundJobNoticerec, iJobNo, iPlantType, iPlantNo);
    END;

    PROCEDURE InMgtTestMaterials@1100485005(VAR InboundJobNoticeRec@1000000001 : Record 11020539;iJobNo@1100485002 : Code[20];iPlantType@1100485001 : Code[20];iPlantNo@1100485000 : Code[20]);
    VAR
      InboundMaterial@1000000000 : Record 11020541;
      JobNoticeRec@1000000002 : Record 11020536;
    BEGIN
      JobNoticeRec.GET(InboundJobNoticeRec."No.");

      InboundMaterial.SETRANGE("Job Notice No.",InboundJobNoticeRec."No.");
      IF InboundMaterial.FIND('-') THEN BEGIN
        IF (JobNoticeRec."Project No." = '') AND (iJobNo = '') THEN
          InMgtTestConsumption(InboundMaterial,iJobNo, iPlantType, iPlantNo)
        ELSE
          InMgtTestSales(InboundMaterial,iJobNo, iPlantType, iPlantNo);
      END;

      COMMIT;

      TempItemJnlLine.SETRANGE("Journal Template Name", IMOSSetup."Item Journal Template Name");
      TempItemJnlLine.SETRANGE("Journal Batch Name",    IMOSSetup."Item Journal Batch Name");

      IF TempItemJnlLine.FIND('-') THEN BEGIN
        PAGE.RUNMODAL(50130,TempItemJnlLine);
      END;
    END;

    PROCEDURE InMgtTestConsumption@1100485009(InboundMaterial@1000000000 : Record 11020541;iJobNo@1100485004 : Code[20];iPlantType@1100485003 : Code[20];iPlantNo@1100485002 : Code[20]);
    VAR
      JobNoticeRec@1000000003 : Record 11020536;
      EmployeeRec@1100485001 : Record 5200;
    BEGIN
      IMOSSetup.GET;

      TempItemJnlLine.SETRANGE("Journal Template Name", IMOSSetup."Item Journal Template Name");
      TempItemJnlLine.SETRANGE("Journal Batch Name",    IMOSSetup."Item Journal Batch Name");
      IF TempItemJnlLine.FIND('+') THEN
        TempItemJnlLine."Line No." := TempItemJnlLine."Line No." + 10000
      ELSE
        TempItemJnlLine."Line No." := 10000;

      InboundMaterial.SETRANGE("Job Notice No.",InboundMaterial."Job Notice No.");
      IF InboundMaterial.FIND('-') THEN BEGIN
        JobNoticeRec.GET(InboundMaterial."Job Notice No.");
        REPEAT
          TempItemJnlLine.INIT;
          TempItemJnlLine."Journal Template Name" := IMOSSetup."Item Journal Template Name";
          TempItemJnlLine."Journal Batch Name"    := IMOSSetup."Item Journal Batch Name";

          TempItemJnlLine."Source Code"  := IMOSSetup."Source Code Ledger";
          TempItemJnlLine."Posting Date" := TODAY;
          TempItemJnlLine."Document Date":= TODAY;
          TempItemJnlLine."Document No." := InboundMaterial."Job Notice No.";
          TempItemJnlLine."Entry Type"   := TempItemJnlLine."Entry Type"::Sale;
          TempItemJnlLine.VALIDATE("Item No.",InboundMaterial."Item No.");

          EmployeeRec.INIT;
          IF NOT EmployeeRec.GET(JobNoticeRec."Processed Engineer") THEN
            IF EmployeeRec.GET(InboundMaterial.Engineer) THEN;
          IF EmployeeRec."Imos Car" <> '' THEN
            TempItemJnlLine."Location Code" := EmployeeRec."Imos Car"
           ELSE
            TempItemJnlLine."Location Code" := InboundMaterial.Location;

          TempItemJnlLine.VALIDATE(Quantity, InboundMaterial.Quantity);

          IF (JobNoticeRec."Plant Type" <> '') THEN BEGIN
            IF (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Maintenance) OR
               (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Check) THEN BEGIN
              TempItemJnlLine.VALIDATE("Plant Type", JobNoticeRec."Plant Type");
              TempItemJnlLine.VALIDATE("Plant No.", JobNoticeRec."Plant No.");
              TempItemJnlLine.VALIDATE("Cost Component Plant", IMOSSetup."Cost Component Other");
            END;
          END ELSE BEGIN
            IF (iPlantType <> '') THEN BEGIN
              IF (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Maintenance) OR
                 (JobNoticeRec."Bon Type" = JobNoticeRec."Bon Type"::Check) THEN BEGIN
                TempItemJnlLine.VALIDATE("Plant Type", iPlantType);
                TempItemJnlLine.VALIDATE("Plant No.", iPlantNo);
                TempItemJnlLine.VALIDATE("Cost Component Plant", IMOSSetup."Cost Component Other");
              END;
            END;
          END;

          TempItemJnlLine.INSERT;

          TempItemJnlLine."Line No." := TempItemJnlLine."Line No." + 10000;
        UNTIL InboundMaterial.NEXT = 0;
      END;
    END;

    PROCEDURE InMgtTestSales@1100485008(VAR InboundMaterial@1100485000 : Record 11020541;iJobNo@1100485006 : Code[20];iPlantType@1100485005 : Code[20];iPlantNo@1100485004 : Code[20]);
    VAR
      JobNoticeRec@1100485002 : Record 11020536;
      EmployeeRec@1100485003 : Record 5200;
    BEGIN
      IMOSSetup.GET;

      TempItemJnlLine.SETRANGE("Journal Template Name", IMOSSetup."Item Journal Template Name");
      TempItemJnlLine.SETRANGE("Journal Batch Name",    IMOSSetup."Item Journal Batch Name");
      IF TempItemJnlLine.FIND('+') THEN
        TempItemJnlLine."Line No." := TempItemJnlLine."Line No." + 10000
      ELSE
        TempItemJnlLine."Line No." := 10000;

      InboundMaterial.SETRANGE("Job Notice No.",InboundMaterial."Job Notice No.");
      IF InboundMaterial.FIND('-') THEN BEGIN
        JobNoticeRec.GET(InboundMaterial."Job Notice No.");
        REPEAT
          TempItemJnlLine.INIT;
          TempItemJnlLine."Journal Template Name" := IMOSSetup."Item Journal Template Name";

          TempItemJnlLine."Journal Batch Name"    := IMOSSetup."Item Journal Batch Name";

          TempItemJnlLine."Source Code"  := IMOSSetup."Source Code Ledger";
          TempItemJnlLine."Posting Date" := TODAY;
          TempItemJnlLine."Document Date":= TODAY;
          TempItemJnlLine."Document No." := InboundMaterial."Job Notice No.";
          TempItemJnlLine."Entry Type"   := TempItemJnlLine."Entry Type"::Sale;
          TempItemJnlLine.VALIDATE("Item No.",InboundMaterial."Item No.");
          TempItemJnlLine.VALIDATE("Job No.",JobNoticeRec."Project No.");

          EmployeeRec.INIT;
          IF EmployeeRec.GET(JobNoticeRec."Processed Engineer") THEN BEGIN
            IF EmployeeRec."Imos Car" <> '' THEN
              TempItemJnlLine."Location Code" := EmployeeRec."Imos Car"
             ELSE
              TempItemJnlLine."Location Code" := InboundMaterial.Location;
          END ELSE BEGIN
            IF EmployeeRec.GET(InboundMaterial.Engineer) THEN;
            IF EmployeeRec."Imos Car" <> '' THEN
              TempItemJnlLine."Location Code" := EmployeeRec."Imos Car"
             ELSE
              TempItemJnlLine."Location Code" := InboundMaterial.Location;
          END;

          TempItemJnlLine.VALIDATE(Quantity, InboundMaterial.Quantity);

          TempItemJnlLine.INSERT;

          TempItemJnlLine."Line No." := TempItemJnlLine."Line No." + 10000;
        UNTIL InboundMaterial.NEXT = 0;
      END;
    END;

    PROCEDURE CheckStatusAndPost@1100485007();
    VAR
      ItemRec@1100485004 : Record 27;
      BatchRun@1100485003 : Record 83;
      ItemJnlTemplate@1100485002 : Record 233;
      NoSeriesMgt@1100485001 : Codeunit 396;
      BatchRunDocument@1100485000 : Code[20];
    BEGIN
      BatchRun.COPY(ItemJnlLine);

      BatchRun.SETRANGE("Journal Template Name", BatchRun."Journal Template Name");
      BatchRun.SETRANGE("Journal Batch Name", BatchRun."Journal Batch Name");
      BatchRun.SETRANGE("Line No.", FirstLineNo, LastLineNo);

      IF BatchRun.FIND('-') THEN BEGIN
        REPEAT
          ItemRec.GET(BatchRun."Item No.");
          IF ItemRec."Replenishment System" = ItemRec."Replenishment System"::"Prod. Order" THEN BEGIN
            IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::free THEN BEGIN
              DetermineInventory(BatchRun);
              IF GvInventory >= BatchRun.Quantity THEN
                BatchRun."Inventory Status" := BatchRun."Inventory Status"::"on stock";
            END;
            IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::produced THEN
              BatchRun."Inventory Status" := BatchRun."Inventory Status"::"on stock";
          END ELSE BEGIN
            IF BatchRun."Inventory Status" < BatchRun."Inventory Status"::"on stock" THEN
              BatchRun."Inventory Status" := BatchRun."Inventory Status"::"on stock";
          END;
          IF BatchRun."Quantity (Released)" <> 0 THEN BEGIN
            IF BatchRun.Quantity = BatchRun."Quantity (Released)" THEN
              BatchRun."Inventory Status" := BatchRun."Inventory Status"::processed;
            IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::"on stock" THEN BEGIN
              BatchRun.Quantity := BatchRun.Quantity - BatchRun."Quantity (Released)";
              BatchRun."Quantity (Released)" := 0;
              BatchRun.VALIDATE(Quantity);
            END;
          END;

          //when in meanwhile new mutations are added in item journal with more recent document no.,
          //then (standard) posting run complains that document no. doesn't match with last in journal series.

          IF ItemJnlTemplate.GET(BatchRun."Journal Template Name", BatchRun."Journal Batch Name") THEN BEGIN
            IF ItemJnlTemplate."No. Series" <> '' THEN BEGIN
              IF BatchRunDocument = '' THEN BEGIN
                CLEAR(NoSeriesMgt);
                BatchRunDocument := NoSeriesMgt.GetNextNo(ItemJnlTemplate."No. Series", BatchRun."Posting Date", FALSE);
              END;
              BatchRun."Document No." := BatchRunDocument;
            END ELSE BEGIN
              BatchRunDocument  := BatchRun."Document No.";
            END;
          END;

          BatchRun.MODIFY;
          IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::processed THEN
            BatchRun.DELETE(TRUE);

        UNTIL BatchRun.NEXT = 0;
      END;

      BatchRun.SETRANGE("Inventory Status", BatchRun."Inventory Status"::"on stock");
      BatchRun.SETRANGE(Blocked, FALSE);
      COMMIT;

      PostItemJnlLine(BatchRun)
    END;

    PROCEDURE DetermineInventory@1100485010(lvItemJnlLine@1100485001 : Record 83);
    VAR
      lvItemRec@1100485000 : Record 27;
    BEGIN
      //**4PS
      IF NOT lvItemRec.GET(lvItemJnlLine."Item No.") THEN BEGIN
        GvInventory := 0;
        EXIT;
      END;

      lvItemRec.SETRANGE("Location Filter", lvItemJnlLine."Location Code");
      lvItemRec.CALCFIELDS(Inventory);
      GvInventory := lvItemRec.Inventory;
    END;

    PROCEDURE PostItemJnlLine@1100485011(VAR lvItemJnlLine@1100485000 : Record 83);
    VAR
      ItemJnlTemplate@1100485001 : Record 82;
    BEGIN
      WITH lvItemJnlLine DO BEGIN
        ItemJnlTemplate.GET("Journal Template Name");
        ItemJnlTemplate.TESTFIELD("Force Posting Report",FALSE);

        ItemJnlPostBatch.RUN(lvItemJnlLine);
      END;
    END;

    BEGIN
    END.
  }
}

