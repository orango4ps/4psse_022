OBJECT Codeunit 11012883 Service Process Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Serviceprozess: %1 kann nicht ''%2'' sein, aufgrund von Filter ''%3'';ENU=Service Process: %1 Cannot be ''%2'' due to filter ''%3'';NLD=Serviceproces: %1 mag niet ''%2'' zijn volgens filter ''%3''';
      Text001@1100528601 : TextConst 'DEU=Serviceprozess: %1 kann nicht eingefÅgt werden;ENU=Service Process: %1 cannot be inserted;NLD=Serviceproces: %1 mag niet toegevoegd worden';

    PROCEDURE CheckAllowedValues@1100528607(ISource@1100528600 : Variant;IxRecSource@1100528630 : Variant;IInsertMode@1100528614 : Boolean);
    VAR
      ServiceProcessFieldAssignm@1100528603 : Record 11072302;
      Field@1100528604 : Record 2000000041;
      ServiceOrder@1100528608 : Record 11012823;
      TmpServiceOrder@1100528606 : TEMPORARY Record 11012823;
      ServiceOrderExtension@1100528616 : Record 11071727;
      TmpServiceOrderExtension@1100528617 : TEMPORARY Record 11071727;
      WorkOrder@1100528609 : Record 11229279;
      TmpWorkOrder@1100528607 : TEMPORARY Record 11229279;
      AdviceOrderLine@1100528610 : Record 11012055;
      TmpAdviceOrderLine@1100528611 : TEMPORARY Record 11012055;
      ServiceCall@1100528618 : Record 11012822;
      TmpServiceCall@1100528619 : TEMPORARY Record 11012822;
      RecRef@1100528601 : RecordRef;
      xRecRef@1100528631 : RecordRef;
      TmpRecRef@1100528612 : RecordRef;
      TmpConditionRecRef@1100528627 : RecordRef;
      FieldRef@1100528605 : FieldRef;
      xFieldRef@1100528632 : FieldRef;
      ProcessStructureCode@1100528602 : Code[10];
      MessageText@1100528613 : Text;
      CurrentLanguageID@1100528615 : Integer;
    BEGIN
      ProcessStructureCode := GetProcessStructureCode(ISource);
      IF ProcessStructureCode = '' THEN
        EXIT;
      IF ISource.ISRECORD THEN
        RecRef.GETTABLE(ISource);
      IF IxRecSource.ISRECORD THEN
        xRecRef.GETTABLE(IxRecSource);
      ServiceProcessFieldAssignm.SETRANGE(Type, GetProcessStructureType(ISource));
      ServiceProcessFieldAssignm.SETRANGE("Process Structure Code", ProcessStructureCode);
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order":
          BEGIN
            ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Service Order");
            RecRef.SETTABLE(ServiceOrder);
            TmpServiceOrder := ServiceOrder;
            TmpServiceOrder.INSERT;
            TmpRecRef.GETTABLE(TmpServiceOrder);
            TmpConditionRecRef := TmpRecRef.DUPLICATE;
          END;
        DATABASE::"Work Order":
          BEGIN
            ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Work Order");
            RecRef.SETTABLE(WorkOrder);
            TmpWorkOrder := WorkOrder;
            TmpWorkOrder.INSERT;
            TmpRecRef.GETTABLE(TmpWorkOrder);
            TmpConditionRecRef := TmpRecRef.DUPLICATE;
          END;
        DATABASE::"Advice Order Line":
          BEGIN
            ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Advice Order");
            RecRef.SETTABLE(AdviceOrderLine);
            TmpAdviceOrderLine := AdviceOrderLine;
            TmpAdviceOrderLine.INSERT;
            TmpRecRef.GETTABLE(TmpAdviceOrderLine);
            TmpConditionRecRef := TmpRecRef.DUPLICATE;
          END;
        DATABASE::"Service Order Extension":
          BEGIN
            ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Service Order Extension");
            RecRef.SETTABLE(ServiceOrderExtension);
            TmpServiceOrderExtension := ServiceOrderExtension;
            TmpServiceOrderExtension.INSERT;
            TmpRecRef.GETTABLE(TmpServiceOrderExtension);
            TmpConditionRecRef := TmpRecRef.DUPLICATE;
          END;
        DATABASE::"Service Call":
          BEGIN
            ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Service Call");
            RecRef.SETTABLE(ServiceCall);
            TmpServiceCall := ServiceCall;
            TmpServiceCall.INSERT;
            TmpRecRef.GETTABLE(TmpServiceCall);
            TmpConditionRecRef := TmpRecRef.DUPLICATE;
          END;
      ELSE
        EXIT;
      END;
      IF IInsertMode THEN BEGIN
        ServiceProcessFieldAssignm.SETRANGE("Insert Prohibited", TRUE);
        IF ServiceProcessFieldAssignm.FINDFIRST THEN BEGIN
          IF FieldConditionsAreMet(RecRef, ServiceProcessFieldAssignm) THEN BEGIN
            MessageText := STRSUBSTNO(Text001, RecRef.CAPTION);
            CASE ServiceProcessFieldAssignm."Unallowed Value Check" OF
              ServiceProcessFieldAssignm."Unallowed Value Check"::Error:
                ERROR(MessageText);
              ServiceProcessFieldAssignm."Unallowed Value Check"::Warning:
                MESSAGE(MessageText);
            END;
          END;
        END;
        ServiceProcessFieldAssignm.SETRANGE("Insert Prohibited");
      END;
      ServiceProcessFieldAssignm.SETFILTER("Allowed Value Filter", '<>%1', '');
      IF ServiceProcessFieldAssignm.ISEMPTY THEN
        EXIT;
      IF ServiceProcessFieldAssignm.FINDSET THEN BEGIN
        REPEAT
          IF Field.GET(ServiceProcessFieldAssignm."Table No.", ServiceProcessFieldAssignm."Field No.") THEN BEGIN
            IF FieldConditionsAreMet(RecRef, ServiceProcessFieldAssignm) THEN BEGIN
              FieldRef := TmpRecRef.FIELD(ServiceProcessFieldAssignm."Field No.");
              xFieldRef := xRecRef.FIELD(ServiceProcessFieldAssignm."Field No.");
              CASE Field.Type OF
                Field.Type::Decimal:
                  FieldRef.SETFILTER(ConvertDecimalFilterToCurrLanguage(ServiceProcessFieldAssignm."Allowed Value Filter (ENU)"));
                Field.Type::Boolean,
                Field.Type::Option:
                  BEGIN
                    CurrentLanguageID := GLOBALLANGUAGE;
                    GLOBALLANGUAGE(1033);
                    FieldRef.SETFILTER(ServiceProcessFieldAssignm."Allowed Value Filter (ENU)");
                    GLOBALLANGUAGE(CurrentLanguageID);
                  END;
              ELSE
                FieldRef.SETFILTER(ServiceProcessFieldAssignm."Allowed Value Filter");
              END;

              IF TmpRecRef.ISEMPTY THEN BEGIN //AND (FieldRef.VALUE <> xFieldRef.VALUE) THEN BEGIN // Was this code needed
                MessageText := STRSUBSTNO(Text000, FieldRef.CAPTION, FieldRef.VALUE, ServiceProcessFieldAssignm."Allowed Value Filter");
                CASE ServiceProcessFieldAssignm."Unallowed Value Check" OF
                  ServiceProcessFieldAssignm."Unallowed Value Check"::Error:
                    ERROR(MessageText);
                  ServiceProcessFieldAssignm."Unallowed Value Check"::Warning:
                    MESSAGE(MessageText);
                END;
              END;
              FieldRef.SETRANGE;
            END;
          END;
        UNTIL ServiceProcessFieldAssignm.NEXT = 0;
      END;
    END;

    PROCEDURE AssignDefaultValues@1100528600(ISource@1100528600 : Variant;IProcessStructureCode@1100528606 : Code[10];VAR ORecRef@1100528607 : RecordRef) Assigned : Boolean;
    VAR
      ServiceProcessFieldAssignm@1100528603 : Record 11072302;
      Field@1100528605 : Record 2000000041;
      RecRef@1100528601 : RecordRef;
      FieldRef@1100528604 : FieldRef;
      ProcessStructureCode@1100528602 : Code[10];
    BEGIN
      IF IProcessStructureCode <> '' THEN
        ProcessStructureCode := IProcessStructureCode
      ELSE BEGIN
        ProcessStructureCode := GetProcessStructureCode(ISource);
        IF ProcessStructureCode = '' THEN
          EXIT;
      END;
      IF ISource.ISRECORD THEN
        RecRef.GETTABLE(ISource);

      ServiceProcessFieldAssignm.SETRANGE(Type, GetProcessStructureType(ISource));
      ServiceProcessFieldAssignm.SETRANGE("Process Structure Code", ProcessStructureCode);
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order":
          ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Service Order");
        DATABASE::"Work Order":
          ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Work Order");
        DATABASE::"Advice Order Line":
          ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Advice Order");
        DATABASE::"Service Order Extension":
          ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Service Order Extension");
        DATABASE::"Service Call":
          ServiceProcessFieldAssignm.SETRANGE("Table Type", ServiceProcessFieldAssignm."Table Type"::"Service Call");
      ELSE
        EXIT;
      END;
      ServiceProcessFieldAssignm.SETFILTER(Value, '<>%1', '');
      IF ServiceProcessFieldAssignm.ISEMPTY THEN
        EXIT;
      IF ServiceProcessFieldAssignm.FINDSET THEN BEGIN
        REPEAT
          IF Field.GET(ServiceProcessFieldAssignm."Table No.", ServiceProcessFieldAssignm."Field No.") THEN BEGIN
            IF FieldConditionsAreMet(RecRef, ServiceProcessFieldAssignm) THEN BEGIN
              FieldRef := RecRef.FIELD(ServiceProcessFieldAssignm."Field No.");
              CASE Field.Type OF
                Field.Type::Date:
                  FieldRef.VALIDATE(ServiceProcessFieldAssignm."Value (Date)");
                Field.Type::Decimal,
                Field.Type::Integer:
                  FieldRef.VALIDATE(ServiceProcessFieldAssignm."Value (Value)");
                Field.Type::Option:
                  FieldRef.VALIDATE(ServiceProcessFieldAssignm."Value (Option)");
                Field.Type::Boolean:
                  FieldRef.VALIDATE(ServiceProcessFieldAssignm."Value (Boolean)");
                Field.Type::Time:
                  BEGIN
                    EVALUATE(FieldRef, ServiceProcessFieldAssignm.Value);
                    FieldRef.VALIDATE;
                  END;
              ELSE
                FieldRef.VALIDATE(ServiceProcessFieldAssignm.Value);
              END;
              Assigned := TRUE;
            END;
          END;
        UNTIL ServiceProcessFieldAssignm.NEXT = 0;
        ORecRef := RecRef;
      END;
    END;

    LOCAL PROCEDURE FieldConditionsAreMet@1100528618(VAR IRecRef@1100528616 : RecordRef;IServiceProcessFieldAssignm@1100528601 : Record 11072302) : Boolean;
    VAR
      ServiceOrder@1100528603 : Record 11012823;
      WorkOrder@1100528606 : Record 11229279;
      AdviceOrderLine@1100528608 : Record 11012055;
      ServiceOrderExtension@1100528610 : Record 11071727;
      ServiceCall@1100528600 : Record 11012822;
      SProcessFAssignmCondition@1100528400 : Record 11072559;
      ServiceOrderNo@1100528615 : Code[20];
      ServiceCallNo@1100528607 : Code[20];
    BEGIN
      IServiceProcessFieldAssignm.CALCFIELDS("No. of Conditions");
      IF IServiceProcessFieldAssignm."No. of Conditions" = 0 THEN
        EXIT(TRUE);
      CASE IRecRef.NUMBER OF
        DATABASE::"Service Order":
          BEGIN
            IRecRef.SETTABLE(ServiceOrder);
            ServiceOrderNo := ServiceOrder."No.";
          END;
        DATABASE::"Work Order":
          BEGIN
            IRecRef.SETTABLE(WorkOrder);
            ServiceOrderNo := WorkOrder."Source No.";
          END;
        DATABASE::"Advice Order Line":
          BEGIN
            IRecRef.SETTABLE(AdviceOrderLine);
            ServiceOrderNo := AdviceOrderLine."Service Order No.";
          END;
        DATABASE::"Service Order Extension":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderExtension);
            ServiceOrderNo := ServiceOrderExtension."Service Order No.";
          END;
        DATABASE::"Service Call":
          BEGIN
            IRecRef.SETTABLE(ServiceCall);
            ServiceCallNo := ServiceCall."No.";
          END;
      END;
      SProcessFAssignmCondition.SETRANGE(Type, IServiceProcessFieldAssignm.Type);
      SProcessFAssignmCondition.SETRANGE("Process Structure Code", IServiceProcessFieldAssignm."Process Structure Code");
      SProcessFAssignmCondition.SETRANGE("Field Assignm. Table No.", IServiceProcessFieldAssignm."Table No.");
      SProcessFAssignmCondition.SETRANGE("Field Assignm. Seq. No.", IServiceProcessFieldAssignm."Seq. No.");
      IF SProcessFAssignmCondition.FINDSET THEN
        REPEAT
          IF NOT FieldConditionIsMet(
            ServiceOrderNo, ServiceCallNo, ServiceOrder, ServiceOrderExtension, ServiceCall, SProcessFAssignmCondition)
          THEN
            EXIT(FALSE);
        UNTIL SProcessFAssignmCondition.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FieldConditionIsMet@1100528400(ServiceOrderNo@1100528400 : Code[20];ServiceCallNo@1100528403 : Code[20];ServiceOrder@1100528402 : Record 11012823;ServiceOrderExtension@1100528401 : Record 11071727;ServiceCall@1100528404 : Record 11012822;SProcessFAssignmCondition@1100528601 : Record 11072559) : Boolean;
    VAR
      TmpServiceOrder@1100528604 : TEMPORARY Record 11012823;
      TmpServiceOrderExtension@1100528611 : TEMPORARY Record 11071727;
      TmpServiceCall@1100528602 : TEMPORARY Record 11012822;
      ConditionField@1100528612 : Record 2000000041;
      TmpConditionRecRef@1100528605 : RecordRef;
      ConditionFieldRef@1100528613 : FieldRef;
      CurrentLanguageID@1100528614 : Integer;
    BEGIN
      IF SProcessFAssignmCondition."Table Type" = SProcessFAssignmCondition."Table Type"::" " THEN
        EXIT(TRUE);
      CASE SProcessFAssignmCondition."Table Type" OF
        SProcessFAssignmCondition."Table Type"::"Service Order":
          BEGIN
            IF ServiceOrder."No." <> ServiceOrderNo THEN
              ServiceOrder.GET(ServiceOrderNo);
            TmpServiceOrder := ServiceOrder;
            TmpServiceOrder.INSERT;
            TmpConditionRecRef.GETTABLE(TmpServiceOrder);
          END;
        SProcessFAssignmCondition."Table Type"::"Service Order Extension":
          BEGIN
            IF ServiceOrderExtension."Service Order No." <> ServiceOrderNo THEN
              ServiceOrderExtension.GetServOrderExtension(ServiceOrderNo);
            TmpServiceOrderExtension := ServiceOrderExtension;
            TmpServiceOrderExtension.INSERT;
            TmpConditionRecRef.GETTABLE(TmpServiceOrderExtension);
          END;
        SProcessFAssignmCondition."Table Type"::"Service Call":
          BEGIN
            IF ServiceCall."No." <> ServiceCallNo THEN
              ServiceCall.GET(ServiceCallNo);
            TmpServiceCall := ServiceCall;
            TmpServiceCall.INSERT;
            TmpConditionRecRef.GETTABLE(TmpServiceCall);
          END;
      END;
      ConditionFieldRef := TmpConditionRecRef.FIELD(SProcessFAssignmCondition."Field No.");
      ConditionField.GET(SProcessFAssignmCondition."Table No.", SProcessFAssignmCondition."Field No.");
      CASE ConditionField.Type OF
        ConditionField.Type::Decimal:
          ConditionFieldRef.SETFILTER(ConvertDecimalFilterToCurrLanguage(SProcessFAssignmCondition."Field Filter (ENU)"));
        ConditionField.Type::Boolean,
        ConditionField.Type::Option:
          BEGIN
            CurrentLanguageID := GLOBALLANGUAGE;
            GLOBALLANGUAGE(1033);
            ConditionFieldRef.SETFILTER(SProcessFAssignmCondition."Field Filter (ENU)");
            GLOBALLANGUAGE(CurrentLanguageID);
          END;
      ELSE
        ConditionFieldRef.SETFILTER(SProcessFAssignmCondition."Field Filter");
      END;
      EXIT(NOT TmpConditionRecRef.ISEMPTY);
    END;

    LOCAL PROCEDURE GetProcessStructureCode@1100528603(ISource@1100528600 : Variant) : Code[10];
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      WorkOrder@1100528603 : Record 11229279;
      AdviceOrderLine@1100528604 : Record 11012055;
      ServiceOrderExtension@1100528605 : Record 11071727;
      ServiceCall@1100528606 : Record 11012822;
      RecRef@1100528601 : RecordRef;
    BEGIN
      IF ISource.ISRECORD THEN
        RecRef.GETTABLE(ISource);
      IF ISource.ISRECORDREF THEN
        RecRef := ISource;
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order":
          BEGIN
            RecRef.SETTABLE(ServiceOrder);
            EXIT(ServiceOrder."Process Structure Code");
          END;
        DATABASE::"Work Order":
          BEGIN
            RecRef.SETTABLE(WorkOrder);
            IF WorkOrder."Source Company" <> COMPANYNAME THEN
              EXIT;
            IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
              IF NOT ServiceOrder.GET(WorkOrder."Source No.") THEN
                EXIT;
              EXIT(ServiceOrder."Process Structure Code");
            END;
          END;
        DATABASE::"Advice Order Line":
          BEGIN
            RecRef.SETTABLE(AdviceOrderLine);
            IF AdviceOrderLine."Service Order No." = '' THEN
              EXIT;
            IF NOT ServiceOrder.GET(AdviceOrderLine."Service Order No.") THEN
              EXIT;
            EXIT(ServiceOrder."Process Structure Code");
          END;
        DATABASE::"Service Order Extension":
          BEGIN
            RecRef.SETTABLE(ServiceOrderExtension);
            IF NOT ServiceOrder.GET(ServiceOrderExtension."Service Order No.") THEN
              EXIT;
            EXIT(ServiceOrder."Process Structure Code");
          END;
        DATABASE::"Service Call":
          BEGIN
            RecRef.SETTABLE(ServiceCall);
            EXIT(ServiceCall."Process Structure Code");
          END;
      END;
    END;

    PROCEDURE IsProcessStepFinished@1100528601(IType@1100528603 : 'Service Order,Service Call';INo@1100528600 : Code[20];IStepCode@1100528601 : Code[10];VAR ONoOfChecks@1100528606 : Integer;VAR ONoOfPassedChecks@1100528607 : Integer) IsFinished : Boolean;
    VAR
      ServiceProcessStepCheck@1100528602 : Record 11072305;
      Passed@1100528605 : Boolean;
    BEGIN
      IsFinished := TRUE;
      ONoOfChecks := 0;
      ONoOfPassedChecks := 0;
      ServiceProcessStepCheck.SETRANGE(Type, IType);
      ServiceProcessStepCheck.SETRANGE("Step Code", IStepCode);
      IF ServiceProcessStepCheck.FINDSET THEN
        REPEAT
          ONoOfChecks += 1;
          Passed := IsProcessStepCheckPassed(INo, ServiceProcessStepCheck);
          IF Passed THEN
            ONoOfPassedChecks += 1;
          IsFinished := IsFinished AND Passed;
        UNTIL ServiceProcessStepCheck.NEXT = 0;
    END;

    PROCEDURE IsProcessStepCheckPassed@1100528602(INo@1100528602 : Code[20];IServiceProcessStepCheck@1100528601 : Record 11072305) : Boolean;
    BEGIN
      IF IServiceProcessStepCheck."No. of Records Needed" <> IServiceProcessStepCheck."No. of Records Needed"::" " THEN
        EXIT(IsProcessStepNoofRecordsNeededPassed(INo, IServiceProcessStepCheck))
      ELSE
        EXIT(IsProcessStepFieldCheckPassed(INo, IServiceProcessStepCheck));
    END;

    LOCAL PROCEDURE IsProcessStepNoofRecordsNeededPassed@1100528605(INo@1100528603 : Code[20];IServiceProcessStepCheck@1100528602 : Record 11072305) : Boolean;
    VAR
      RecRef@1100528600 : RecordRef;
    BEGIN
      IF GetProcessStepRecRef(INo, IServiceProcessStepCheck, RecRef) THEN BEGIN
        CASE IServiceProcessStepCheck."No. of Records Needed" OF
          IServiceProcessStepCheck."No. of Records Needed"::None:
            EXIT(RecRef.ISEMPTY);
          IServiceProcessStepCheck."No. of Records Needed"::One:
            EXIT(RecRef.FINDSET AND (RecRef.NEXT = 0));
          IServiceProcessStepCheck."No. of Records Needed"::"One Minimal":
            EXIT(NOT RecRef.ISEMPTY);
          IServiceProcessStepCheck."No. of Records Needed"::"More than One":
            EXIT(RecRef.FINDSET AND (RecRef.NEXT <> 0));
        END;
      END;
    END;

    LOCAL PROCEDURE IsProcessStepFieldCheckPassed@1100528615(INo@1100528601 : Code[20];IServiceProcessStepCheck@1100528600 : Record 11072305) Passed : Boolean;
    VAR
      Field@1100528605 : Record 2000000041;
      ServSourceProcStepCheck@1100528609 : Record 11072324;
      RecRef@1100528602 : RecordRef;
      CheckRecRef@1100528606 : RecordRef;
      FieldRef@1100528603 : FieldRef;
    BEGIN
      Passed := TRUE;
      IF IServiceProcessStepCheck."Table Type" = IServiceProcessStepCheck."Table Type"::"Manual Check" THEN BEGIN
        IF NOT ServSourceProcStepCheck.GET(IServiceProcessStepCheck.Type, INo, IServiceProcessStepCheck."Step Code", IServiceProcessStepCheck."Seq. No.") THEN
          ServSourceProcStepCheck.INIT;
        EXIT(ServSourceProcStepCheck.Passed);
      END ELSE BEGIN
        IF GetProcessStepRecRef(INo, IServiceProcessStepCheck, RecRef) THEN BEGIN
          IF RecRef.FINDSET THEN BEGIN
            REPEAT
              CheckRecRef := RecRef.DUPLICATE;
              IF IServiceProcessStepCheck."Records to Check" = IServiceProcessStepCheck."Records to Check"::All THEN
                CheckRecRef.SETRECFILTER;
              CheckRecRef.FILTERGROUP(7);
              FieldRef := CheckRecRef.FIELD(IServiceProcessStepCheck."Field No.");
              IF NOT Field.GET(IServiceProcessStepCheck."Table No.", IServiceProcessStepCheck."Field No.") THEN
                Field.INIT;
              FieldRef.SETFILTER(IServiceProcessStepCheck.GetFieldCheckFilter(IServiceProcessStepCheck.Type, INo));
              CheckRecRef.FILTERGROUP(0);
              Passed := Passed AND NOT CheckRecRef.ISEMPTY;
            UNTIL (RecRef.NEXT = 0) OR (IServiceProcessStepCheck."Records to Check" = IServiceProcessStepCheck."Records to Check"::Some);
          END ELSE
            Passed := NOT IsMinimalOneRecord(IServiceProcessStepCheck);
        END ELSE
          Passed := FALSE;
      END;
    END;

    PROCEDURE IsProcessStepWithinReferencePointFilter@1100528612(IType@1100528604 : 'Service Order,Service Call';ISourceNo@1100528600 : Code[20];IServiceProcessStructStep@1100528602 : Record 11072304) : Boolean;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceCall@1100528603 : Record 11012822;
    BEGIN
      IF IServiceProcessStructStep."Visible at Reference Point" <> '' THEN BEGIN
        CASE IType OF
          IType::"Service Order":
            BEGIN
              ServiceOrder.SETRANGE("No.", ISourceNo);
              ServiceOrder.SETFILTER("Actual Reference Point (Gantt)", IServiceProcessStructStep."Visible at Reference Point");
              IF ServiceOrder.ISEMPTY THEN
                EXIT(FALSE);
            END;
          IType::"Service Call":
            BEGIN
              ServiceCall.SETRANGE("No.", ISourceNo);
              ServiceCall.SETFILTER("Actual Reference Point", IServiceProcessStructStep."Visible at Reference Point");
              IF ServiceCall.ISEMPTY THEN
                EXIT(FALSE);
            END;
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsMinimalOneRecord@1100528608(IServiceProcessStepCheck@1100528600 : Record 11072305) : Boolean;
    VAR
      ServiceProcessStepCheck@1100528601 : Record 11072305;
    BEGIN
      ServiceProcessStepCheck.SETRANGE(Type, IServiceProcessStepCheck.Type);
      ServiceProcessStepCheck.SETRANGE("Step Code", IServiceProcessStepCheck."Step Code");
      ServiceProcessStepCheck.SETRANGE("Table No.", IServiceProcessStepCheck."Table No.");
      ServiceProcessStepCheck.SETFILTER("No. of Records Needed", '>=%1', ServiceProcessStepCheck."No. of Records Needed"::One);
      EXIT(NOT ServiceProcessStepCheck.ISEMPTY);
    END;

    PROCEDURE SaveManualProcessStepCheck@1100528611(IType@1100528604 : 'Service Order,Service Call';ISourceNo@1100528600 : Code[20];IServiceProcessStepCheck@1100528601 : Record 11072305;ICheckPassed@1100528602 : Boolean);
    VAR
      ServSourceProcStepCheck@1100528603 : Record 11072324;
    BEGIN
      IF NOT ServSourceProcStepCheck.GET(IType, ISourceNo, IServiceProcessStepCheck."Step Code", IServiceProcessStepCheck."Seq. No.") THEN BEGIN
        IF ICheckPassed THEN BEGIN
          ServSourceProcStepCheck.Type := IType;
          ServSourceProcStepCheck."Source No." := ISourceNo;
          ServSourceProcStepCheck."Step Code" := IServiceProcessStepCheck."Step Code";
          ServSourceProcStepCheck."Seq. No." := IServiceProcessStepCheck."Seq. No.";
          ServSourceProcStepCheck.Passed := ICheckPassed;
          ServSourceProcStepCheck.INSERT(TRUE);
        END;
      END ELSE
        IF NOT ICheckPassed THEN
          ServSourceProcStepCheck.DELETE(TRUE)
    END;

    PROCEDURE GetProcessStepRecRef@1100528609(INo@1100528602 : Code[20];IServiceProcessStepCheck@1100528601 : Record 11072305;VAR ORecRef@1100528600 : RecordRef) : Boolean;
    VAR
      ServiceOrder@1100528603 : Record 11012823;
      WorkOrder@1100528604 : Record 11229279;
      AdviceOrderLine@1100528605 : Record 11012055;
      PurchaseLine@1100528607 : Record 39;
      ServiceOrderCostPlusEntry@1100528606 : Record 11012825;
      ServiceOrderBudgetLine@1100528608 : Record 11012875;
      ServiceOrderExtension@1100528609 : Record 11071727;
      ItemJournalLine@1100528610 : Record 83;
      ServiceCall@1100528611 : Record 11012822;
      ServiceContract@1100528400 : Record 11012812;
      Customer@1100528401 : Record 18;
      ServiceOrderObject@1100528402 : Record 11071724;
      ServiceOrderInspectionLine@1100528403 : Record 11071753;
      ServiceOrderObjSpecLine@1100528404 : Record 11071782;
      ServiceObject@1100528405 : Record 11071691;
      DebriefText@1100528406 : Record 11012886;
      ServiceText@1100528407 : Record 11012882;
      ServiceContractNo@1100528408 : Code[20];
      CustomerNo@1100528409 : Code[20];
    BEGIN
      CLEAR(ORecRef);
      CASE IServiceProcessStepCheck."Table Type" OF
        IServiceProcessStepCheck."Table Type"::"Service Order":
          BEGIN
            ServiceOrder.SETRANGE("No.", INo);
            ORecRef.GETTABLE(ServiceOrder);
          END;
        IServiceProcessStepCheck."Table Type"::"Work Order":
          BEGIN
            WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
            WorkOrder.SETRANGE("Source Company", COMPANYNAME);
            WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
            WorkOrder.SETRANGE("Source No.", INo);
            ORecRef.GETTABLE(WorkOrder);
          END;
        IServiceProcessStepCheck."Table Type"::"Advice Order":
          BEGIN
            AdviceOrderLine.SETCURRENTKEY("Service Order No.");
            AdviceOrderLine.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(AdviceOrderLine);
          END;
        IServiceProcessStepCheck."Table Type"::"Purchase Line":
          BEGIN
            PurchaseLine.SETCURRENTKEY("Document Type", "Service Order No.");
            PurchaseLine.SETFILTER("Document Type", '%1|%2', PurchaseLine."Document Type"::Order, PurchaseLine."Document Type"::"Return Order");
            PurchaseLine.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(PurchaseLine);
          END;
        IServiceProcessStepCheck."Table Type"::"Cost Plus Entry":
          BEGIN
            ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(ServiceOrderCostPlusEntry);
          END;
        IServiceProcessStepCheck."Table Type"::"Budget Line":
          BEGIN
            ServiceOrderBudgetLine.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(ServiceOrderBudgetLine);
          END;
        IServiceProcessStepCheck."Table Type"::"Service Order Extension":
          BEGIN
            ServiceOrderExtension.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(ServiceOrderExtension);
          END;
        IServiceProcessStepCheck."Table Type"::"Item Journal Line":
          BEGIN
            ItemJournalLine.SETCURRENTKEY("Service Order No.");
            ItemJournalLine.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(ItemJournalLine);
          END;
        IServiceProcessStepCheck."Table Type"::"Service Call":
          BEGIN
            ServiceCall.SETRANGE("No.", INo);
            ORecRef.GETTABLE(ServiceCall);
          END;
        IServiceProcessStepCheck."Table Type"::"Service-Contract":
          BEGIN
            IF IServiceProcessStepCheck.Type = IServiceProcessStepCheck.Type::"Service Order" THEN BEGIN
              IF ServiceOrder.GET(INo) THEN;
              ServiceContractNo := ServiceOrder."Service Contract No.";
            END ELSE BEGIN
              IF ServiceCall.GET(INo) THEN;
              ServiceContractNo := ServiceCall."Service Contract No.";
            END;
            ServiceContract.SETRANGE("No.", ServiceContractNo);
            ORecRef.GETTABLE(ServiceContract);
          END;
        IServiceProcessStepCheck."Table Type"::Customer:
          BEGIN
            IF IServiceProcessStepCheck.Type = IServiceProcessStepCheck.Type::"Service Order" THEN BEGIN
              IF ServiceOrder.GET(INo) THEN;
              CustomerNo := ServiceOrder."Customer No.";
            END ELSE BEGIN
              IF ServiceCall.GET(INo) THEN;
              CustomerNo := ServiceCall."Customer No.";
            END;
            Customer.SETRANGE("No.", CustomerNo);
            ORecRef.GETTABLE(Customer);
          END;
        IServiceProcessStepCheck."Table Type"::"Service Order Object":
          BEGIN
            ServiceOrderObject.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(ServiceOrderObject);
          END;
        IServiceProcessStepCheck."Table Type"::"Service Order Inspection Line":
          BEGIN
            ServiceOrderInspectionLine.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(ServiceOrderInspectionLine);
          END;
        IServiceProcessStepCheck."Table Type"::"Service Order Obj. Spec. Line":
          BEGIN
            ServiceOrderObjSpecLine.SETRANGE("Service Order No.", INo);
            ORecRef.GETTABLE(ServiceOrderObjSpecLine);
          END;
        IServiceProcessStepCheck."Table Type"::"Service-Object":
          BEGIN
            IF IServiceProcessStepCheck.Type = IServiceProcessStepCheck.Type::"Service Order" THEN BEGIN
              ServiceOrderObject.SETRANGE("Service Order No.", INo);
              IF ServiceOrderObject.FINDSET THEN
                REPEAT
                  IF ServiceObject.GET(ServiceOrderObject."Object No.") THEN
                    ServiceObject.MARK(TRUE);
                UNTIL ServiceOrderObject.NEXT = 0;
              ServiceObject.MARKEDONLY(TRUE);
            END ELSE BEGIN
              IF ServiceCall.GET(INo) THEN;
              ServiceObject.SETRANGE("No.", ServiceCall."Object No.");
            END;
            ORecRef.GETTABLE(ServiceObject);
          END;
        IServiceProcessStepCheck."Table Type"::"Debrief Text":
          BEGIN
            DebriefText.SETRANGE(Type, DebriefText.Type::ServiceOrder);
            DebriefText.SETRANGE("No.", INo);
            ORecRef.GETTABLE(DebriefText);
          END;
        IServiceProcessStepCheck."Table Type"::"Problem Text":
          BEGIN
            IF IServiceProcessStepCheck.Type = IServiceProcessStepCheck.Type::"Service Order" THEN BEGIN
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
              ServiceText.SETRANGE("Table Field", 90);
            END ELSE BEGIN
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
              ServiceText.SETRANGE("Table Field", 60);
            END;
            ServiceText.SETRANGE("No.", INo);
            ORecRef.GETTABLE(ServiceText);
          END;
        IServiceProcessStepCheck."Table Type"::"Internal Text":
          BEGIN
            IF IServiceProcessStepCheck.Type = IServiceProcessStepCheck.Type::"Service Order" THEN BEGIN
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
              ServiceText.SETRANGE("Table Field", 91);
            END ELSE BEGIN
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
              ServiceText.SETRANGE("Table Field", 70);
            END;
            ServiceText.SETRANGE("No.", INo);
            ORecRef.GETTABLE(ServiceText);
          END;
        IServiceProcessStepCheck."Table Type"::"Resolve Text":
          BEGIN
            IF IServiceProcessStepCheck.Type = IServiceProcessStepCheck.Type::"Service Order" THEN BEGIN
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
              ServiceText.SETRANGE("Table Field", 92);
            END ELSE BEGIN
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
              ServiceText.SETRANGE("Table Field", 75);
            END;
            ServiceText.SETRANGE("No.", INo);
            ORecRef.GETTABLE(ServiceText);
          END;
        IServiceProcessStepCheck."Table Type"::"Cause Text":
          BEGIN
            ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
            ServiceText.SETRANGE("No.", INo);
            ServiceText.SETRANGE("Table Field", 94);
            ORecRef.GETTABLE(ServiceText);
          END;
        IServiceProcessStepCheck."Table Type"::"Invoice Text":
          BEGIN
            ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
            ServiceText.SETRANGE("No.", INo);
            ServiceText.SETRANGE("Table Field", 93);
            ORecRef.GETTABLE(ServiceText);
          END;
      END;
      EXIT(ORecRef.NUMBER <> 0);
    END;

    PROCEDURE ConvertDecimalFilterToENU@1100528604(IFilterText@1100528600 : Text) : Text;
    BEGIN
      EXIT(CONVERTSTR(IFilterText, GetDecimalSeparator, '.'));
    END;

    PROCEDURE ConvertDecimalFilterToCurrLanguage@1100528610(IFilterText@1100528600 : Text) : Text;
    BEGIN
      EXIT(CONVERTSTR(IFilterText, '.', GetDecimalSeparator));
    END;

    LOCAL PROCEDURE GetDecimalSeparator@1100528606() : Text[1];
    BEGIN
      EXIT(COPYSTR(FORMAT(1.1), 2, 1));
    END;

    LOCAL PROCEDURE GetProcessStructureType@1100528613(ISource@1100528601 : Variant) : Integer;
    VAR
      ServiceProcessStructure@1100528603 : Record 11072300;
      RecRef@1100528602 : RecordRef;
      Type@1100528600 : 'Service Order,Service Call';
    BEGIN
      IF ISource.ISRECORD THEN
        RecRef.GETTABLE(ISource);
      IF RecRef.NUMBER = DATABASE::"Service Call" THEN
        EXIT(ServiceProcessStructure.Type::"Service Call")
      ELSE
        EXIT(ServiceProcessStructure.Type::"Service Order");
    END;

    PROCEDURE DetermineProcessStructure@1100528669(ISource@1100528603 : Variant;VAR OFoundServiceProcessCode@1100528608 : Code[10]) : Boolean;
    VAR
      ServiceProcessSetup@1100528600 : Record 11072301;
      ServiceOrder@1100528605 : Record 11012823;
      ServiceCall@1100528606 : Record 11012822;
      TmpServiceOrder@1100528607 : TEMPORARY Record 11012823;
      TmpServiceCall@1100528602 : TEMPORARY Record 11012822;
      RecRef@1100528604 : RecordRef;
    BEGIN
      IF NOT ISource.ISRECORD THEN
        EXIT;
      RecRef.GETTABLE(ISource);
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order":
          BEGIN
            RecRef.SETTABLE(ServiceOrder);
            TmpServiceOrder := ServiceOrder;
            TmpServiceOrder.INSERT;
            ServiceProcessSetup.SETRANGE(Type, ServiceProcessSetup.Type::"Service Order");
            IF ServiceProcessSetup.FINDSET THEN BEGIN
              REPEAT
                TmpServiceOrder.RESET;
                IF ServiceProcessSetup."Customer No." <> '' THEN
                  TmpServiceOrder.SETRANGE("Customer No.", ServiceProcessSetup."Customer No.");
                IF ServiceProcessSetup."Service Contract No." <> '' THEN
                  TmpServiceOrder.SETRANGE("Service Contract No.", ServiceProcessSetup."Service Contract No.");
                IF ServiceProcessSetup."Service Location Type" <> '' THEN
                  TmpServiceOrder.SETRANGE("Service Location Type", ServiceProcessSetup."Service Location Type");
                IF ServiceProcessSetup."Service Category" <> '' THEN
                  TmpServiceOrder.SETRANGE("Service Category", ServiceProcessSetup."Service Category");
                IF ServiceProcessSetup."Source Type" <> ServiceProcessSetup."Source Type"::" " THEN
                  TmpServiceOrder.SETRANGE("Source Type", ServiceProcessSetup."Source Type" -1);
                IF ServiceProcessSetup."Order Kind" <> '' THEN
                  TmpServiceOrder.SETRANGE("Order Kind", ServiceProcessSetup."Order Kind");
                IF ServiceProcessSetup."Order Type" <> '' THEN
                  TmpServiceOrder.SETRANGE("Order Type", ServiceProcessSetup."Order Type");
                IF ServiceProcessSetup.Discipline <> '' THEN
                  TmpServiceOrder.SETRANGE(Discipline, ServiceProcessSetup.Discipline);
                IF NOT TmpServiceOrder.ISEMPTY THEN
                  OFoundServiceProcessCode := ServiceProcessSetup."Process Structure Code";
              UNTIL (OFoundServiceProcessCode <> '') OR (ServiceProcessSetup.NEXT = 0);
            END;
          END;
        DATABASE::"Service Call":
          BEGIN
            RecRef.SETTABLE(ServiceCall);
            TmpServiceCall := ServiceCall;
            TmpServiceCall.INSERT;
            ServiceProcessSetup.SETRANGE(Type, ServiceProcessSetup.Type::"Service Call");
            IF ServiceProcessSetup.FINDSET THEN BEGIN
              REPEAT
                TmpServiceCall.RESET;
                IF ServiceProcessSetup."Customer No." <> '' THEN
                  TmpServiceCall.SETRANGE("Customer No.", ServiceProcessSetup."Customer No.");
                IF ServiceProcessSetup."Service Contract No." <> '' THEN
                  TmpServiceCall.SETRANGE("Service Contract No.", ServiceProcessSetup."Service Contract No.");
                IF ServiceProcessSetup."Service Location Type" <> '' THEN
                  TmpServiceCall.SETRANGE("Service Location Type", ServiceProcessSetup."Service Location Type");
                IF ServiceProcessSetup."Order Kind" <> '' THEN
                  TmpServiceCall.SETRANGE("Order Kind", ServiceProcessSetup."Order Kind");
                IF ServiceProcessSetup."Order Type" <> '' THEN
                  TmpServiceCall.SETRANGE("Order Type", ServiceProcessSetup."Order Type");
                IF ServiceProcessSetup."Call Kind" <> '' THEN
                  TmpServiceCall.SETRANGE("Call Kind", ServiceProcessSetup."Call Kind");
                IF ServiceProcessSetup."Call Type" <> '' THEN
                  TmpServiceCall.SETRANGE("Call Type", ServiceProcessSetup."Call Type");
                IF ServiceProcessSetup.Discipline <> '' THEN
                  TmpServiceCall.SETRANGE(Discipline, ServiceProcessSetup.Discipline);
                IF NOT TmpServiceCall.ISEMPTY THEN
                  OFoundServiceProcessCode := ServiceProcessSetup."Process Structure Code";
              UNTIL (OFoundServiceProcessCode <> '') OR (ServiceProcessSetup.NEXT = 0);
            END;
          END;
      END;

      EXIT(OFoundServiceProcessCode <> '');
    END;

    BEGIN
    END.
  }
}

