OBJECT Table 11012341 INSBOU Despatch Advice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               INSBOUDespatchAdviceLine@1100528300 : Record 11012342;
               INSBOUDespatchAdviceItem@1100528301 : Record 11012343;
             BEGIN
               IF ("Process Status" = "Process Status"::Processing) THEN
                 FIELDERROR("Process Status");

               INSBOUDespatchAdviceLine.SETRANGE("Vendor No.", "Vendor No.");
               INSBOUDespatchAdviceLine.SETRANGE(MessageNumber, MessageNumber);
               INSBOUDespatchAdviceLine.DELETEALL(TRUE);

               INSBOUDespatchAdviceItem.SETRANGE("Vendor No.", "Vendor No.");
               INSBOUDespatchAdviceItem.SETRANGE(MessageNumber, MessageNumber);
               INSBOUDespatchAdviceItem.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               IF ("Process Status" > "Process Status"::Processing) THEN
                 FIELDERROR("Process Status");
             END;

    CaptionML=ENU=INSBOU Despatch Advice;
  }
  FIELDS
  {
    { 10  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverand›rnr.;
                                                              SVE=Leverant”rsnr];
                                                   NotBlank=Yes }
    { 11  ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rsnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Editable=No }
    { 20  ;   ;MessageNumber       ;Code17        ;CaptionML=ENU=Message Number;
                                                   NotBlank=Yes }
    { 30  ;   ;MessageDate         ;Date          ;CaptionML=ENU=Message Date;
                                                   NotBlank=Yes }
    { 40  ;   ;MessageStructure    ;Code17        ;CaptionML=[ENU=Message Structure;
                                                              NOR=Meldingsstruktur;
                                                              SVE=Meddelandestruktur] }
    { 50  ;   ;EndCustomerOrderNumber;Code20      ;CaptionML=ENU=End Customer Order Number }
    { 60  ;   ;FreeText            ;Text70        ;CaptionML=ENU=FreeText }
    { 70  ;   ;BuyersOrderNumber   ;Code17        ;CaptionML=ENU=Buyers Order Number }
    { 80  ;   ;ProjectNumber       ;Code17        ;CaptionML=ENU=Project Number }
    { 90  ;   ;OrderResponseNumber ;Code17        ;CaptionML=ENU=Order Response Number }
    { 110 ;   ;ScheduledDeliveryDate;Date         ;CaptionML=ENU=Scheduled Delivery Date }
    { 120 ;   ;ScheduledDeliveryTime;Time         ;CaptionML=ENU=Scheduled Delivery Time }
    { 130 ;   ;DeliveryDateEarliest;Date          ;CaptionML=ENU=Delivery Date Earliest }
    { 140 ;   ;DeliveryTimeEarliest;Time          ;CaptionML=ENU=Delivery Time Earliest }
    { 150 ;   ;DeliveryDateLatest  ;Date          ;CaptionML=ENU=Delivery Date Latest }
    { 160 ;   ;DeliveryTimeLatest  ;Time          ;CaptionML=ENU=Delivery Time Latest }
    { 180 ;   ;SupplierGLN         ;Code13        ;CaptionML=[ENU=GLN;
                                                              NOR=GLN;
                                                              SVE=GLN] }
    { 190 ;   ;SupplierName        ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 200 ;   ;SupplierName2       ;Text50        ;CaptionML=ENU=Name2 }
    { 210 ;   ;SupplierStreetAndNumber;Text35     ;CaptionML=ENU=Street And Number }
    { 220 ;   ;SupplierCity        ;Text35        ;CaptionML=[ENU=City;
                                                              NOR=Poststed;
                                                              SVE=Ort] }
    { 230 ;   ;SupplierPostalCode  ;Code9         ;CaptionML=[ENU=Postal Code;
                                                              NOR=Postnummer;
                                                              SVE=Postnummer] }
    { 240 ;   ;SupplierCountry     ;Code2         ;CaptionML=[ENU=Country;
                                                              NOR=Land;
                                                              SVE=Land] }
    { 260 ;   ;SupplierContactPersonName;Text35   ;CaptionML=[ENU=Contact Person Name;
                                                              NOR=Kontaktpersonens navn;
                                                              SVE=Kontaktpersonens namn] }
    { 270 ;   ;SupplierPhoneNumber ;Code20        ;CaptionML=[ENU=Phone Number;
                                                              NOR=Telefon;
                                                              SVE=Telefonnummer] }
    { 290 ;   ;SupplierCertificateName;Text35     ;CaptionML=ENU=Certificate Name }
    { 300 ;   ;SupplierCertificateNumber;Code35   ;CaptionML=[ENU=Certificate Number;
                                                              NOR=Sertifikatnr.;
                                                              SVE=Certifikatnr] }
    { 310 ;   ;SupplierCertificateIssuer;Text35   ;CaptionML=ENU=Certificate Issuer }
    { 320 ;   ;SupplierCertificateSubNumber;Code35;CaptionML=ENU=Certificate Sub Number }
    { 330 ;   ;SupplierCertificateText;Text250    ;CaptionML=ENU=Certificate Text }
    { 340 ;   ;SupplierCertificateDate;Date       ;CaptionML=[ENU=Certificate Date;
                                                              NOR=Sertifikatdato;
                                                              SVE=Certifikatdatum] }
    { 350 ;   ;SupplCertificateExpirationDate;Date;CaptionML=ENU=Certificate Expiration Date }
    { 370 ;   ;BuyerGLN            ;Code13        ;CaptionML=[ENU=GLN;
                                                              NOR=GLN;
                                                              SVE=GLN] }
    { 380 ;   ;BuyerName           ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 390 ;   ;BuyerName2          ;Text50        ;CaptionML=ENU=Name2 }
    { 400 ;   ;BuyerStreetAndNumber;Text35        ;CaptionML=ENU=Street And Number }
    { 410 ;   ;BuyerCity           ;Text35        ;CaptionML=[ENU=City;
                                                              NOR=Poststed;
                                                              SVE=Ort] }
    { 420 ;   ;BuyerPostalCode     ;Code9         ;CaptionML=[ENU=Postal Code;
                                                              NOR=Postnummer;
                                                              SVE=Postnummer] }
    { 430 ;   ;BuyerCountry        ;Code2         ;CaptionML=[ENU=Country;
                                                              NOR=Land;
                                                              SVE=Land] }
    { 450 ;   ;BuyerCertificateName;Text35        ;CaptionML=ENU=Certificate Name }
    { 460 ;   ;BuyerCertificateNumber;Code35      ;CaptionML=[ENU=Certificate Number;
                                                              NOR=Sertifikatnr.;
                                                              SVE=Certifikatnr] }
    { 470 ;   ;BuyerCertificateIssuer;Text35      ;CaptionML=ENU=Certificate Issuer }
    { 480 ;   ;BuyerCertificateSubNumber;Code35   ;CaptionML=ENU=Certificate Sub Number }
    { 490 ;   ;BuyerCertificateText;Text250       ;CaptionML=ENU=Certificate Text }
    { 500 ;   ;BuyerCertificateDate;Date          ;CaptionML=[ENU=Certificate Date;
                                                              NOR=Sertifikatdato;
                                                              SVE=Certifikatdatum] }
    { 510 ;   ;BuyerCertificateExpirationDate;Date;CaptionML=ENU=Certificate Expiration Date }
    { 530 ;   ;ShipFromGLN         ;Code13        ;CaptionML=[ENU=GLN;
                                                              NOR=GLN;
                                                              SVE=GLN] }
    { 540 ;   ;ShipFromName        ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 550 ;   ;ShipFromName2       ;Text50        ;CaptionML=ENU=Name2 }
    { 560 ;   ;ShipFromStreetAndNumber;Text35     ;CaptionML=ENU=Street And Number }
    { 570 ;   ;ShipFromCity        ;Text35        ;CaptionML=[ENU=City;
                                                              NOR=Poststed;
                                                              SVE=Ort] }
    { 580 ;   ;ShipFromPostalCode  ;Code9         ;CaptionML=[ENU=Postal Code;
                                                              NOR=Postnummer;
                                                              SVE=Postnummer] }
    { 590 ;   ;ShipFromCountry     ;Code2         ;CaptionML=[ENU=Country;
                                                              NOR=Land;
                                                              SVE=Land] }
    { 610 ;   ;DeliveryPartyGLN    ;Code13        ;CaptionML=[ENU=GLN;
                                                              NOR=GLN;
                                                              SVE=GLN] }
    { 620 ;   ;DeliveryPartyName   ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 630 ;   ;DeliveryPartyName2  ;Text50        ;CaptionML=ENU=Name2 }
    { 640 ;   ;DeliveryPartyStreetAndNumber;Text35;CaptionML=ENU=Street And Number }
    { 650 ;   ;DeliveryPartyCity   ;Text35        ;CaptionML=[ENU=City;
                                                              NOR=Poststed;
                                                              SVE=Ort] }
    { 660 ;   ;DeliveryPartyPostalCode;Code9      ;CaptionML=[ENU=Postal Code;
                                                              NOR=Postnummer;
                                                              SVE=Postnummer] }
    { 670 ;   ;DeliveryPartyCountry;Code2         ;CaptionML=[ENU=Country;
                                                              NOR=Land;
                                                              SVE=Land] }
    { 690 ;   ;UltimateConsigneeGLN;Code13        ;CaptionML=[ENU=GLN;
                                                              NOR=GLN;
                                                              SVE=GLN] }
    { 700 ;   ;UltimateConsigneeName;Text50       ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 710 ;   ;UltimateConsigneeName2;Text50      ;CaptionML=ENU=Name2 }
    { 720 ;   ;UltimateConsigStreetAndNumber;Text35;
                                                   CaptionML=ENU=Street And Number }
    { 730 ;   ;UltimateConsigneeCity;Text35       ;CaptionML=[ENU=City;
                                                              NOR=Poststed;
                                                              SVE=Ort] }
    { 740 ;   ;UltimateConsigneePostalCode;Code9  ;CaptionML=[ENU=Postal Code;
                                                              NOR=Postnummer;
                                                              SVE=Postnummer] }
    { 750 ;   ;UltimateConsigneeCountry;Code2     ;CaptionML=[ENU=Country;
                                                              NOR=Land;
                                                              SVE=Land] }
    { 1000;   ;Process Status      ;Option        ;CaptionML=[ENU=Process Status;
                                                              NOR=Prosess status;
                                                              SVE=Processtatus];
                                                   OptionCaptionML=ENU=Received,,,Processing,,,Processed;
                                                   OptionString=Received,,,Processing,,,Processed;
                                                   Editable=No }
    { 1010;   ;Message Id          ;Text50        ;CaptionML=[ENU=Message Id;
                                                              SVE=Meddelande-ID];
                                                   Editable=No }
    { 1020;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              NOR=Feilmelding;
                                                              SVE=Felmeddelande];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Vendor No.,MessageNumber                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528301 : TextConst 'ENU=%1 %2 already exsists.';
      Text001@1100528300 : TextConst 'ENU=There is no % or more than 1 %1 found for %2 %3.';

    PROCEDURE ProcessDespatchAdvices@1100528300(VAR INSBOUDespatchAdvice@1100528300 : Record 11012341);
    BEGIN
      INSBOUDespatchAdvice.SETFILTER("Process Status", '<%1', "Process Status"::Processed);
      IF INSBOUDespatchAdvice.FINDSET(TRUE) THEN
        REPEAT
          ProcessDespatchAdvice(INSBOUDespatchAdvice);
        UNTIL INSBOUDespatchAdvice.NEXT = 0;
    END;

    PROCEDURE ProcessDespatchAdvice@1100528401(INSBOUDespatchAdvice@1100528400 : Record 11012341);
    VAR
      INSBOUProcessDespatchAdvice@1100528401 : Codeunit 11072083;
    BEGIN
      CLEARLASTERROR;
      COMMIT;
      INSBOUDespatchAdvice.SETRECFILTER;
      IF (NOT INSBOUProcessDespatchAdvice.RUN(INSBOUDespatchAdvice)) THEN BEGIN
        INSBOUDespatchAdvice.GET(INSBOUDespatchAdvice."Vendor No.", INSBOUDespatchAdvice.MessageNumber);
        INSBOUDespatchAdvice."Error Message" := COPYSTR(GETLASTERRORTEXT, 1, MAXSTRLEN(INSBOUDespatchAdvice."Error Message"));
        INSBOUDespatchAdvice.MODIFY;
      END;
    END;

    PROCEDURE CreatePurchaseOrder@1100528301(VAR INSBOUDespatchAdvice@1100528301 : Record 11012341);
    VAR
      PurchaseHeader@1100528300 : Record 38;
      PurchasesPayablesSetup@1100525000 : Record 312;
      NoSeriesManagement@1100525001 : Codeunit 396;
    BEGIN
      IF (NOT INSBOUDespatchAdvice.FINDSET) THEN
        EXIT;

      REPEAT
        IF (INSBOUDespatchAdvice.BuyersOrderNumber = '') THEN BEGIN
          PurchasesPayablesSetup.GET;
          INSBOUDespatchAdvice.BuyersOrderNumber := NoSeriesManagement.GetNextNo(PurchasesPayablesSetup."Order Nos.", TODAY, TRUE);
          INSBOUDespatchAdvice.MODIFY;
        END;
        INSBOUDespatchAdvice.TESTFIELD(SupplierGLN);
        IF (PurchaseHeader.GET(INSBOUDespatchAdvice.DetermineDocumentType, INSBOUDespatchAdvice.BuyersOrderNumber)) THEN
          ERROR(Text000, PurchaseHeader.TABLECAPTION, INSBOUDespatchAdvice.BuyersOrderNumber);

        PurchaseHeader.INIT;
        PurchaseHeader."Document Type" := INSBOUDespatchAdvice.DetermineDocumentType;
        PurchaseHeader."No." := INSBOUDespatchAdvice.BuyersOrderNumber;
        PurchaseHeader.VALIDATE("Buy-from Vendor No.", GetVendorNo(INSBOUDespatchAdvice.SupplierGLN));
        PurchaseHeader.InitRecord;
        PurchaseHeader.INSERT(TRUE);

        PurchaseHeader."Job No." := INSBOUDespatchAdvice.ProjectNumber;
      //  PurchaseHeader."Vendor Order No." := INSBOUDespatchAdvice.OrderResponsNumber;
      //  PurchaseHeader."Vendor Shipment No." := INSBOUDespatchAdvice.OrderResponsNumber;

        PurchaseHeader."Ship-to Name" := INSBOUDespatchAdvice.DeliveryPartyName;
        PurchaseHeader."Ship-to Name 2" := INSBOUDespatchAdvice.DeliveryPartyName2;
        PurchaseHeader."Ship-to Address" := INSBOUDespatchAdvice.DeliveryPartyStreetAndNumber;
        PurchaseHeader."Ship-to City" := INSBOUDespatchAdvice.DeliveryPartyCity;

      //  PurchaseHeader."Order Date" := INSBOUDespatchAdvice.OrderResponseDate;
      //  PurchaseHeader."Expected Receipt Date" := INSBOUDespatchAdvice.OrderResponseDate;
      //  PurchaseHeader."Due Date" := INSBOUDespatchAdvice.OrderResponseDate;
      //  PurchaseHeader."Document Date" := INSBOUDespatchAdvice.OrderResponseDate;
      //  PurchaseHeader."Posting Date" := INSBOUPurchaseOrderResponse.OrderResponseDate;
        PurchaseHeader.MODIFY(TRUE);

        IF (INSBOUDespatchAdvice.FreeText <> '') THEN
          CreateTextLines(INSBOUDespatchAdvice);

        CreatePurchaseLines(INSBOUDespatchAdvice, PurchaseHeader);
      UNTIL (INSBOUDespatchAdvice.NEXT = 0);
    END;

    LOCAL PROCEDURE CreatePurchaseLines@1100528306(VAR INSBOUDespatchAdvice@1100528306 : Record 11012341;PurchaseHeader@1100528300 : Record 38);
    VAR
      PurchaseLine@1100528301 : Record 39;
      Vendor@1100528304 : Record 23;
      GeneralLedgerSetup@1100528305 : Record 98;
      INSBOUDespatchAdviceLine@1100525000 : Record 11012342;
      INSBOUDespatchAdviceItem@1100525001 : Record 11012343;
    BEGIN
      INSBOUDespatchAdviceItem.SETRANGE("Vendor No.", INSBOUDespatchAdvice."Vendor No.");
      INSBOUDespatchAdviceItem.SETRANGE(MessageNumber, INSBOUDespatchAdvice.MessageNumber);
      IF (NOT INSBOUDespatchAdviceItem.FINDSET) THEN
        EXIT;

      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      GeneralLedgerSetup.GET;
      REPEAT
        INSBOUDespatchAdviceItem.TESTFIELD(OrderLineIdentification);
        INSBOUDespatchAdviceItem.TESTFIELD(TradeItemGTIN);
        INSBOUDespatchAdviceLine.GET(PurchaseHeader."Buy-from Vendor No.", INSBOUDespatchAdviceItem.MessageNumber,
          INSBOUDespatchAdviceItem.LineNumber);

        PurchaseLine.INIT;
        PurchaseLine."Document Type" := PurchaseHeader."Document Type";
        PurchaseLine."Document No." := PurchaseHeader."No.";
        PurchaseLine."Line No." := INSBOUDespatchAdviceItem.OrderLineIdentification;
        PurchaseLine.INSERT(TRUE);

        PurchaseLine.VALIDATE("Job No.", PurchaseHeader."Job No.");
        PurchaseLine.VALIDATE("Vendor (Trade Item)", Vendor."Vendor (Trade Item)");
        PurchaseLine.VALIDATE("Trade Item", GetTradeItem(Vendor."Vendor (Trade Item)", INSBOUDespatchAdviceItem));
        PurchaseLine.VALIDATE(Quantity, INSBOUDespatchAdviceLine.NumberOfDespatchUnits);
        PurchaseLine.VALIDATE("Unit of Measure", INSBOUDespatchAdviceLine.GTINDespatchUnitType);
        PurchaseLine."Unit of Measure Code" := INSBOUDespatchAdviceLine.GTINDespatchUnitType;
        PurchaseLine.MODIFY(TRUE);
      UNTIL (INSBOUDespatchAdviceItem.NEXT = 0);
    END;

    LOCAL PROCEDURE CreateTextLines@1100528308(INSBOUDespatchAdvice@1100528301 : Record 11012341);
    VAR
      PurchaseText@1100528300 : Record 11012067;
      LastLineNo@1100528302 : Integer;
    BEGIN
      LastLineNo := 0;
      PurchaseText.SETRANGE("Line Type", PurchaseText."Line Type"::"Purchase Order");
      PurchaseText.SETRANGE("No.", INSBOUDespatchAdvice.BuyersOrderNumber);
      PurchaseText.SETRANGE("Purchase Action", '');
      IF (PurchaseText.FINDLAST) THEN
        LastLineNo := PurchaseText."Line No.";

      PurchaseText.RESET;
      PurchaseText.INIT;
      PurchaseText."Line Type" := PurchaseText."Line Type"::"Purchase Order";
      PurchaseText."No." := INSBOUDespatchAdvice.BuyersOrderNumber;
      PurchaseText."Line No." := LastLineNo + 10000;
      PurchaseText.Text := COPYSTR(INSBOUDespatchAdvice.FreeText, 1, MAXSTRLEN(PurchaseText.Text));
      PurchaseText."Line Break" := TRUE;
      PurchaseText.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GetVendorNo@1100528302(GLN@1100528300 : Code[13]) : Code[20];
    VAR
      Vendor@1100528301 : Record 23;
    BEGIN
      Vendor.SETRANGE(GLN, GLN);
      IF (Vendor.COUNT <> 1) THEN
        ERROR(Text001, Vendor.TABLECAPTION, Vendor."OLD GLN Code", GLN);
      Vendor.FINDFIRST;
      Vendor.TESTFIELD("Vendor (Trade Item)");
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE GetTradeItem@1100528309(VendorNo@1100528302 : Code[20];INSBOUDespatchAdviceItem@1100528300 : Record 11012343) : Code[20];
    VAR
      TradeItem@1100528301 : Record 11012317;
    BEGIN
      TradeItem.SETRANGE(Vendor, VendorNo);
      TradeItem.SETRANGE("GTIN Code (Item)", INSBOUDespatchAdviceItem.TradeItemGTIN);
      IF (TradeItem.COUNT = 0) THEN
        CreateTradeItem(VendorNo, INSBOUDespatchAdviceItem);
      IF (TradeItem.COUNT <> 1) THEN
        ERROR(Text001, TradeItem.TABLECAPTION, TradeItem."GTIN Code (Item)", INSBOUDespatchAdviceItem.TradeItemGTIN);
      TradeItem.FINDFIRST;
      EXIT(TradeItem."Item Code");
    END;

    PROCEDURE PurchaseHeaderPresent@1100528303() : Boolean;
    VAR
      PurchaseHeader@1100528300 : Record 38;
    BEGIN
      EXIT(PurchaseHeader.GET(DetermineDocumentType, BuyersOrderNumber));
    END;

    PROCEDURE DetermineDocumentType@1100528305() : Integer;
    VAR
      PurchaseHeader@1100528300 : Record 38;
    BEGIN
      IF (BuyersOrderNumber = '') THEN
        EXIT(-1);
      PurchaseHeader.SETRANGE("No.", BuyersOrderNumber);
      IF (PurchaseHeader.COUNT <> 1) THEN BEGIN
        EXIT(PurchaseHeader."Document Type"::Order);
      END;
      PurchaseHeader.FINDFIRST;
      EXIT(PurchaseHeader."Document Type");
    END;

    LOCAL PROCEDURE CreateTradeItem@1100525000(VendorNo@1100525001 : Code[20];INSBOUDespatchAdviceItem@1100525002 : Record 11012343);
    VAR
      ItemSetup@1100525003 : Record 11012300;
      TradeItem@1100525000 : Record 11012317;
      WebshopItemMgt@1100525004 : Codeunit 11012306;
    BEGIN
      IF (TradeItem.GET(VendorNo, INSBOUDespatchAdviceItem.SupplierTradeItemIdentificat)) THEN
        EXIT;

      ItemSetup.GET;
      TradeItem.INIT;
      TradeItem.Vendor := VendorNo;
      TradeItem."Item Code" := INSBOUDespatchAdviceItem.SupplierTradeItemIdentificat;
      TradeItem.INSERT;

      TradeItem."GTIN Code (Item)" := INSBOUDespatchAdviceItem.TradeItemGTIN;
      TradeItem."Item Description" := COPYSTR(INSBOUDespatchAdviceItem.TradeItemDescription, 1, MAXSTRLEN(TradeItem."Item Description"));
      CASE ItemSetup."Adjust Item Description" OF
        ItemSetup."Adjust Item Description"::ToUpper: BEGIN
          TradeItem."Item Description" := UPPERCASE(TradeItem."Item Description");
        END;
        ItemSetup."Adjust Item Description"::ToLower: BEGIN
          TradeItem."Item Description" := LOWERCASE(TradeItem."Item Description");
        END;
      END;
      IF TradeItem."Search Argument" = '' THEN
        TradeItem."Search Argument" := COPYSTR(TradeItem."Item Description", 1, MAXSTRLEN(TradeItem."Search Argument"));

      TradeItem."Application Unit Quantity" := 1;
      TradeItem."Starting Date Price" := TODAY;
      TradeItem."Gross Price" := 0;
      TradeItem."Quantity Per Price" := 1;

      IF (TradeItem."Cost Object" = '') OR (NOT TradeItem."Cost Object changed Manually") THEN
        TradeItem."Cost Object" := TradeItem.GetDefaultCostObject(FALSE);
      TradeItem.Expired := FALSE;
      TradeItem.MODIFY;

      WebshopItemMgt.UpdatePriceHistory(TradeItem);
    END;

    PROCEDURE CheckBuyerGLN@1100528400();
    VAR
      CompanyInformation@1100528400 : Record 79;
    BEGIN
      CompanyInformation.GET;
      TESTFIELD(BuyerGLN, CompanyInformation.GLN);
    END;

    BEGIN
    END.
  }
}

