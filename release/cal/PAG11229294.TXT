OBJECT Page 11229294 Repeat Work Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Arbeitsauftrag wiederholen;
               ENU=Repeat Work Order;
               NLD=Werkorder repeteren];
    SaveValues=Yes;
    SourceTable=Table11229279;
    PageType=StandardDialog;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             RecurrencePerWeek := 1;
             StartingDate := TODAY;
           END;

    OnOpenPage=VAR
                 WorkOrder@1100525000 : Record 11229279;
               BEGIN
                 IF NOT StartedFromNAV THEN BEGIN
                   WorkOrder.GET("No.");
                   SetOriginalWorkOrder(WorkOrder);
                   StartedFromNAV := FALSE;
                   CreateWorkOrdersVisible := TRUE;
                   ProjectElement := GETFILTER("Project Element");
                 END;
               END;

    OnQueryClosePage=BEGIN
                       CloseActionOK := CloseAction IN [ACTION::OK,ACTION::LookupOK];
                       IF CloseActionOK THEN BEGIN
                         IF (EndingDate = 0D) AND (NoOfRecurrences = 0) THEN
                           ERROR(Text000);
                         IF StartingDate = 0D THEN
                           ERROR(Text001);
                         IF EndingDate <> 0D THEN
                           IF CREATEDATETIME(StartingDate, StartingTime) > CREATEDATETIME(EndingDate, EndingTime) THEN
                             ERROR(Text002);
                         IF NOT StartedFromNAV THEN
                           CreateWorkOrders;
                       END;
                     END;

    ActionList=ACTIONS
    {
      { 1100525000;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525001;1 ;Action    ;
                      CaptionML=[DEU=ArbeitsauftrÑge erstellen;
                                 ENU=Create Work Orders;
                                 NLD=Workorders aanmaken];
                      Visible=CreateWorkOrdersVisible;
                      OnAction=BEGIN
                                 CreateWorkOrders;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;;Container;
                ContainerType=ContentArea }

    { 1100528601;1;Group  ;
                CaptionML=[DEU=Arbeitsauftragsdaten;
                           ENU=Work Order Data;
                           NLD=Werkordergegevens];
                GroupType=Group }

    { 1100528602;2;Field  ;
                SourceExpr="Project Planning Activity No." }

    { 1100528300;2;Field  ;
                SourceExpr="Project Element" }

    { 1100528603;2;Field  ;
                SourceExpr=Description }

    { 1100528604;2;Field  ;
                SourceExpr="Resource Type" }

    { 1100529001;2;Field  ;
                SourceExpr="Resource Group No." }

    { 1100529000;2;Field  ;
                SourceExpr="Resource Group Name";
                Visible=FALSE }

    { 1100528605;2;Field  ;
                SourceExpr="Resource No." }

    { 1100528622;2;Field  ;
                CaptionML=[DEU=Startzeit;
                           ENU=Starting Time;
                           NLD=Begintijd;
                           NOR=Starttid;
                           SVE=Starttid];
                SourceExpr=StartingTime }

    { 1100528623;2;Field  ;
                CaptionML=[DEU=Endzeit;
                           ENU=Ending Time;
                           NLD=Eindtijd;
                           NOR=Sluttid;
                           SVE=Sluttid];
                SourceExpr=EndingTime }

    { 1100528606;2;Field  ;
                SourceExpr="Expected Hours" }

    { 1100528607;2;Field  ;
                SourceExpr="Duration Time" }

    { 1100528608;2;Field  ;
                SourceExpr="Schedule Relation" }

    { 1100528609;1;Group  ;
                Name=Herhalingspatroon;
                CaptionML=[DEU=Wiederholungsmuster;
                           ENU=Repeat Pattern;
                           NLD=Herhalingspatroon];
                GroupType=Group }

    { 1100528610;2;Field  ;
                CaptionML=[DEU=Wird alle X Woche/Wochen wiederholt;
                           ENU=Recurs every X week/weeks;
                           NLD=Keert elke X week/weken terug];
                SourceExpr=RecurrencePerWeek }

    { 1100528611;2;Field  ;
                CaptionML=[DEU=Montag;
                           ENU=Monday;
                           NLD=Maandag;
                           NOR=Mandag;
                           SVE=MÜndag];
                SourceExpr=Monday }

    { 1100528612;2;Field  ;
                CaptionML=[DEU=Dienstag;
                           ENU=Tuesday;
                           NLD=Dinsdag;
                           NOR=Tirsdag;
                           SVE=Tisdag];
                SourceExpr=Tuesday }

    { 1100528613;2;Field  ;
                CaptionML=[DEU=Mittwoch;
                           ENU=Wednesday;
                           NLD=Woensdag;
                           NOR=Onsdag;
                           SVE=Onsdag];
                SourceExpr=Wednesday }

    { 1100528614;2;Field  ;
                CaptionML=[DEU=Donnerstag;
                           ENU=Thursday;
                           NLD=Donderdag;
                           NOR=Torsdag;
                           SVE=Torsdag];
                SourceExpr=Thursday }

    { 1100528615;2;Field  ;
                CaptionML=[DEU=Freitag;
                           ENU=Friday;
                           NLD=Vrijdag;
                           NOR=Fredag;
                           SVE=Fredag];
                SourceExpr=Friday }

    { 1100528616;2;Field  ;
                CaptionML=[DEU=Samstag;
                           ENU=Saturday;
                           NLD=Zaterdag;
                           NOR=Lõrdag;
                           SVE=Lîrdag];
                SourceExpr=Saturday }

    { 1100528617;2;Field  ;
                CaptionML=[DEU=Sonntag;
                           ENU=Sunday;
                           NLD=Zondag;
                           NOR=Sõndag;
                           SVE=Sîndag];
                SourceExpr=Sunday }

    { 1100528618;1;Group  ;
                CaptionML=[DEU=Wiederholungsbereich;
                           ENU=Recurrence Range;
                           NLD=Bereik van terugkeerpatroon];
                GroupType=Group }

    { 1100528619;2;Field  ;
                CaptionML=[DEU=Start;
                           ENU=Start;
                           NLD=Begin;
                           NOR=Start;
                           SVE=Starta];
                SourceExpr=StartingDate }

    { 1100528620;2;Field  ;
                CaptionML=[DEU=Endet am;
                           ENU=Ends on;
                           NLD=Eindigt op];
                SourceExpr=EndingDate }

    { 1100528621;2;Field  ;
                CaptionML=[DEU=Endet nach X Wiederholungen;
                           ENU=Ends after X recurrences;
                           NLD=Eindigt na X keer];
                SourceExpr=NoOfRecurrences }

  }
  CODE
  {
    VAR
      Monday@1100528600 : Boolean;
      Tuesday@1100528601 : Boolean;
      Wednesday@1100528602 : Boolean;
      Thursday@1100528603 : Boolean;
      Friday@1100528604 : Boolean;
      Saturday@1100528605 : Boolean;
      Sunday@1100528606 : Boolean;
      RecurrencePerWeek@1100528607 : Integer;
      StartingDate@1100528608 : Date;
      StartingTime@1100528614 : Time;
      EndingDate@1100528609 : Date;
      EndingTime@1100528615 : Time;
      NoOfRecurrences@1100528610 : Integer;
      CloseActionOK@1100528611 : Boolean;
      Text000@1100528612 : TextConst 'DEU=≥Endet am  oder ≥Endet nach  muss angegeben werden;ENU=Ends on or Ends after has to be given;NLD=Eindigt op of Eindigt na dient gevuld te zijn';
      Text001@1100528613 : TextConst 'DEU=≥Start  muss angegeben werden;ENU=Start has to be given;NLD=Begin dient gevuld te zijn';
      Text002@1100528616 : TextConst 'DEU=Endzeitpunkt muss nach dem Startzeitpunkt liegen;ENU=Ending Time must be greater than Starting Time;NLD=Eindtijd moet groter zijn dan begintijd';
      CreateWorkOrdersVisible@1100525000 : Boolean INDATASET;
      StartedFromNAV@1100525001 : Boolean;
      ProjectElement@1100528300 : Code[20];

    PROCEDURE SetOriginalWorkOrder@1100528600(IWorkOrder@1100528600 : Record 11229279);
    BEGIN
      Rec := IWorkOrder;
      StartedFromNAV := TRUE;
      "Duration Time" := 8;
      INSERT;

      InitData;
    END;

    PROCEDURE CreateWorkOrders@1100528601();
    VAR
      WorkOrder@1100528603 : Record 11229279;
      LastWorkOrder@1100528610 : Record 11229279;
      DateRec@1100528600 : Record 2000000007;
      RecurrenceCount@1100528601 : Integer;
      WeekCount@1100528602 : Integer;
      NewStartingDT@1100528604 : DateTime;
      NewEndingDT@1100528605 : DateTime;
      DayNo@1100528607 : Integer;
      DoCreateWorkOrder@1100528608 : Boolean;
      Duration@1100528609 : Duration;
    BEGIN
      DateRec.SETRANGE("Period Type", DateRec."Period Type"::Week);
      DateRec.SETFILTER("Period Start", '<=%1', StartingDate);
      IF NOT DateRec.FINDLAST THEN
        EXIT;
      IF EndingDate <> 0D THEN BEGIN
        DateRec.SETRANGE("Period Start", DateRec."Period Start", EndingDate)
      END ELSE
        DateRec.SETFILTER("Period Start", '>=%1', DateRec."Period Start");
      IF DateRec.FINDSET THEN
        REPEAT
          IF WeekCount MOD RecurrencePerWeek = 0 THEN BEGIN
            FOR DayNo := 1 TO 7 DO BEGIN
              CASE DayNo OF
                1: DoCreateWorkOrder := Monday;
                2: DoCreateWorkOrder := Tuesday;
                3: DoCreateWorkOrder := Wednesday;
                4: DoCreateWorkOrder := Thursday;
                5: DoCreateWorkOrder := Friday;
                6: DoCreateWorkOrder := Saturday;
                7: DoCreateWorkOrder := Sunday;
              END;
              IF DateRec."Period Start" + (DayNo -1) < StartingDate THEN
                DoCreateWorkOrder := FALSE;
              IF (NoOfRecurrences > 0) AND (RecurrenceCount >= NoOfRecurrences) THEN
                DoCreateWorkOrder := FALSE;
              IF DoCreateWorkOrder THEN BEGIN
                NewStartingDT := CREATEDATETIME(DateRec."Period Start" + (DayNo -1), StartingTime);
                IF ("Starting Date/Time" <> 0DT) AND ("Ending Date/Time" >= "Starting Date/Time") THEN
                  Duration := "Ending Date/Time" - "Starting Date/Time"
                ELSE
                  Duration := 0;
                IF EndingTime <> 0T THEN BEGIN
                  IF Duration = 0 THEN
                    Duration := EndingTime - StartingTime;
                END ELSE BEGIN
                  IF Duration = 0 THEN
                    Duration := "Duration Time" * 60 * 60 * 1000;
                  IF Duration = 0 THEN
                    Duration := "Expected Hours" * 60 * 60 * 1000;
                END;
                NewEndingDT := NewStartingDT + Duration;

                CLEAR(WorkOrder);
                WorkOrder.InitRecordOnNew("Source Type", "Source No.", "Source Type", "Project Element");
                CLEAR(WorkOrder."Starting Date/Time");
                CLEAR(WorkOrder."Ending Date/Time");
                WorkOrder.INSERT(TRUE);
                WorkOrder.VALIDATE("Resource Type", "Resource Type");
                WorkOrder.VALIDATE("Resource No.", "Resource No.");
                WorkOrder.VALIDATE(Description, Description);
                WorkOrder.VALIDATE("Starting Date/Time", NewStartingDT);
                WorkOrder.VALIDATE("Ending Date/Time", NewEndingDT);
                WorkOrder.VALIDATE("Expected Hours", "Expected Hours");
                WorkOrder.VALIDATE("Duration Time", "Duration Time");
                WorkOrder.VALIDATE("Project Planning Activity No.", "Project Planning Activity No.");
                WorkOrder.VALIDATE("Schedule Relation", "Schedule Relation");
                IF "Schedule Relation" <> "Schedule Relation"::" " THEN
                  IF LastWorkOrder."No." <> '' THEN BEGIN
                    WorkOrder."Schedule Relation" := "Schedule Relation";
                    WorkOrder."Related Work Order No." := LastWorkOrder."No.";
                  END;
                WorkOrder.MODIFY(TRUE);
                LastWorkOrder := WorkOrder;
                RecurrenceCount += 1;
              END;
            END;
          END;
          WeekCount += 1;
        UNTIL (DateRec.NEXT = 0) OR ((RecurrenceCount >= NoOfRecurrences) AND (NoOfRecurrences > 0));
    END;

    PROCEDURE InitData@1100528604();
    BEGIN
      StartingDate := DT2DATE("Starting Date/Time");
      IF StartingDate = 0D THEN
        StartingDate := TODAY;
      EndingDate := DT2DATE("Ending Date/Time");

      CASE DATE2DWY(StartingDate, 1) OF
        1: Monday := TRUE;
        2: Tuesday := TRUE;
        3: Wednesday := TRUE;
        4: Thursday := TRUE;
        5: Friday := TRUE;
        6: Saturday := TRUE;
        7: Sunday := TRUE;
      END;

      StartingTime := DT2TIME("Starting Date/Time");
      EndingTime := DT2TIME("Ending Date/Time");
    END;

    PROCEDURE "---"@1100528603();
    BEGIN
    END;

    LOCAL PROCEDURE StdDialogConfirm@1100528402() : Boolean;
    BEGIN
      COMMIT;
      CurrPage.RUNMODAL;
      EXIT(CloseActionOK);
    END;

    LOCAL PROCEDURE StdDialogDoAction@1100528401();
    BEGIN
      CreateWorkOrders;
    END;

    PROCEDURE StdDialogRunModal@1100528404();
    BEGIN
      IF StdDialogConfirm THEN
        StdDialogDoAction;
    END;

    BEGIN
    END.
  }
}

