OBJECT Page 6085596 DC Client Addin - Purch.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.5.00.08,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6085780=rimd;
    CaptionML=[DEU=Dokumenterfassung Kunden-Addin;
               ENU=Document Capture Client Addin;
               NLD=Document Capture Client Addin];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table38;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 IF ContiniaUserProp.GET(USERID) AND (ContiniaUserProp."Image Zoom" > 0) THEN
                   CurrZoom := ContiniaUserProp."Image Zoom"
                 ELSE
                   CurrZoom := 50;

                 ShowCaptureUI := NOT WebClientMgt.IsWebClient;
                 ShowCaptureWebUI := WebClientMgt.IsWebClient;

                 CaptureAddinLib.BuildSetAddInWidthCommand(725,CaptureXmlDoc);
               END;

    OnAfterGetRecord=BEGIN
                       IF ("Document Type" <> xRec."Document Type") OR ("No." <> xRec."No.") THEN BEGIN
                         Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
                         //**4PS.sn
                         IF (STRLEN("Ext. Document ID") <= 20) AND (STRLEN("Ext. Document ID") > 0) THEN BEGIN
                           Document.SETRANGE("No.", "Ext. Document ID");
                         END ELSE BEGIN
                         //**4PS.en
                           Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
                           Document.SETRANGE("Created Doc. Subtype","Document Type");
                           Document.SETRANGE("Created Doc. ID","No.");
                           Document.SETRANGE("File Type",Document."File Type"::OCR);
                         END; //**4PS.n

                         IF NOT Document.FINDFIRST THEN
                           CLEAR(Document);
                         UpdateImage;
                         SendCommand(CaptureXmlDoc);
                       END ELSE
                         IF (SendAllPendingCommands AND (NOT CaptureXmlDoc.IsEmpty)) THEN BEGIN
                           SendAllPendingCommands := FALSE;
                           SendCommand(CaptureXmlDoc);
                         END;
                       CLEAR(CaptureXmlDoc);
                     END;

  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=ContentArea;
                ContainerType=ContentArea }

    { 1000000001;1;Field  ;
                Name=CaptureUI;
                SourceExpr=CaptureUISource;
                Visible=SHOWCAPTUREUI;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.UI;PublicKeyToken=0c53e51c0afe7001];
                OnControlAddIn=BEGIN
                                 OnControlAddInEvent(Index,Data);
                               END;

                ShowCaption=No }

    { 1   ;1   ;Field     ;
                Name=CaptureUIWeb;
                SourceExpr=CaptureUISource;
                Visible=ShowCaptureWebUI;
                ControlAddIn=[Continia.DocumentCapture.Dynamics.Nav.Web.UI;PublicKeyToken=0c53e51c0afe7001];
                ShowCaption=No }

  }
  CODE
  {
    VAR
      Document@6085574 : Record 6085590;
      ContiniaUserProp@6085573 : Record 6085780;
      CaptureMgt@1000000014 : Codeunit 6085576;
      CaptureAddinLib@1000000013 : Codeunit 6085660;
      CEDOProxy@1160040000 : Codeunit 6085800;
      WebClientMgt@1001 : Codeunit 6085662;
      TIFFMgt@1002 : Codeunit 6085609;
      CaptureXmlDoc@1000000010 : Codeunit 6192800;
      CaptureUISource@1000000000 : Text;
      Channel@1000000011 : Code[50];
      CurrentPageText@1000000005 : Text[250];
      CurrentZoomText@1000000009 : Text[30];
      HeaderFieldsFormName@1000000008 : Text[50];
      LineFieldsFormName@1000000003 : Text[50];
      MatchQty@1000000007 : Decimal;
      CurrZoom@1000000004 : Decimal;
      CurrentPageNo@1000000006 : Integer;
      Text001@1000000002 : TextConst 'DEU=(%1 Seiten gesamt);ENU=(%1 pages in total);NLD=(%1 pagina''s in totaal)';
      Text002@1000000001 : TextConst 'DEU=Seite %1;ENU=Page %1;NLD=Pagina %1';
      SendAllPendingCommands@1000000012 : Boolean;
      DisableCapture@1000000018 : Boolean;
      ShowCaptureUI@1000000021 : Boolean INDATASET;
      ShowCaptureWebUI@6085575 : Boolean;

    PROCEDURE UpdateImage@1000000006();
    VAR
      TempDocFileInfo@1000 : Record 6085600;
      TempFile@1002 : TEMPORARY Record 6085608;
      FileName@1001 : Text[1024];
    BEGIN
      IF Document."No." = '' THEN BEGIN
        IF CEDOProxy.IsCEDOEnabled THEN
          IF CEDOProxy.GetTempDocFilename(TempDocFileInfo,Rec) THEN
            FileName := 'file://' + TempDocFileInfo."Styled XML Filename";

          IF NOT WebClientMgt.IsWebClient THEN
            CaptureAddinLib.BuildSetImageCommand(FileName,TRUE,CaptureXmlDoc);
      END;

      IF (FileName = '') AND NOT Document.GetTiffFile(TempFile) THEN BEGIN
        CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
        UpdateCurrPageNo(0);
        EXIT;
      END ELSE
        IF (FileName = '') AND NOT WebClientMgt.IsWebClient THEN BEGIN
          FileName := TempFile.GetClientFilePath;
          CaptureAddinLib.BuildSetImageCommand(FileName,TRUE,CaptureXmlDoc);
        END;

      UpdateCurrPageNo(1);

      CaptureAddinLib.BuildScrollTopCommand(CaptureXmlDoc);

      Zoom(CurrZoom,FALSE);

      CaptureAddinLib.BuildTotalNoOfPagesTextCommand(STRSUBSTNO(Text001,Document."No. of Pages"),CaptureXmlDoc);
    END;

    PROCEDURE UpdateCurrPageNo@1000000003(PageNo@1000000000 : Integer);
    VAR
      TempFile@1001 : TEMPORARY Record 6085608;
      ImageDataUrl@1000 : Text;
    BEGIN
      Document.CALCFIELDS("No. of Pages");
      Document.GetTiffFile(TempFile);

      CurrentPageNo := PageNo;
      CurrentPageText := STRSUBSTNO(Text002,CurrentPageNo);

      IF WebClientMgt.IsWebClient THEN BEGIN
        ImageDataUrl := TIFFMgt.GetPageAsDataUrl(TempFile,PageNo);
        CaptureAddinLib.BuildSetImageDataCommand(ImageDataUrl,TRUE,CaptureXmlDoc);
      END;

      CaptureAddinLib.BuildSetActivePageCommand(PageNo,CurrentPageText,CaptureXmlDoc);
    END;

    PROCEDURE ParsePageText@1000000001(PageText@1000000000 : Text[30]);
    VAR
      NewPageNo@1000000001 : Integer;
    BEGIN
      IF STRPOS(PageText,' ') = 0 THEN BEGIN
        IF EVALUATE(NewPageNo,PageText) THEN;
      END ELSE
        IF EVALUATE(NewPageNo,COPYSTR(PageText,STRPOS(PageText,' '))) THEN;

      Document.CALCFIELDS("No. of Pages");
      IF (NewPageNo <= 0) OR (NewPageNo > Document."No. of Pages") THEN
        UpdateCurrPageNo(CurrentPageNo)
      ELSE
        UpdateCurrPageNo(NewPageNo);
    END;

    PROCEDURE Zoom@1000000000(ZoomPct@1000000000 : Decimal;UpdateUserProp@6085573 : Boolean);
    BEGIN
      IF ZoomPct < 1 THEN
        ZoomPct := 1;
      CurrZoom := ZoomPct;
      CurrentZoomText := FORMAT(CurrZoom) + '%';

      IF UpdateUserProp THEN BEGIN
        IF NOT ContiniaUserProp.GET(USERID) THEN BEGIN
          ContiniaUserProp."User ID" := USERID;
          ContiniaUserProp."Image Zoom" := CurrZoom;
          ContiniaUserProp.INSERT;
        END ELSE BEGIN
          IF ContiniaUserProp."Image Zoom" <> CurrZoom THEN BEGIN
            ContiniaUserProp."Image Zoom" := CurrZoom;
            ContiniaUserProp.MODIFY;
          END;
        END;
      END;

      CaptureAddinLib.BuildZoomCommand(CurrZoom,CaptureXmlDoc);
      CaptureAddinLib.BuildZoomTextCommand(CurrentZoomText,CaptureXmlDoc);
    END;

    PROCEDURE SendCommand@1000000002(VAR XmlDoc@1000000000 : Codeunit 6192800);
    VAR
      NewXmlDoc@161024012 : Codeunit 6192800;
    BEGIN
      CaptureAddinLib.XmlToText(XmlDoc,CaptureUISource);
      CaptureAddinLib.TextToXml(NewXmlDoc,CaptureUISource);

      IF WebClientMgt.IsWebClient THEN
        CurrPage.CaptureUIWeb.SourceValueChanged(CaptureUISource);
    END;

    PROCEDURE SetConfig@1000000004(NewHeaderFieldsFormName@1000000001 : Text[50];NewLineFieldsFormName@1000000000 : Text[50];NewChannel@1000000002 : Code[50]);
    BEGIN
      HeaderFieldsFormName := NewHeaderFieldsFormName;
      LineFieldsFormName := NewLineFieldsFormName;
      Channel := NewChannel;
    END;

    PROCEDURE HandleSimpleCommand@1000000011(Command@1000000000 : Text[1024]);
    BEGIN
      CASE Command OF
        'ZoomIn':
          Zoom(CurrZoom + 5,TRUE);

        'ZoomOut':
          Zoom(CurrZoom - 5,TRUE);

        'FirstPage':
          BEGIN
            Document.CALCFIELDS("No. of Pages");
            IF Document."No. of Pages" > 0 THEN
              UpdateCurrPageNo(1);
          END;

        'NextPage':
          BEGIN
            Document.CALCFIELDS("No. of Pages");
            IF CurrentPageNo < Document."No. of Pages" THEN
              UpdateCurrPageNo(CurrentPageNo + 1);
          END;

        'PrevPage':
          BEGIN
            IF CurrentPageNo > 1 THEN
              UpdateCurrPageNo(CurrentPageNo - 1);
          END;

        'LastPage':
          BEGIN
            Document.CALCFIELDS("No. of Pages");
            UpdateCurrPageNo(Document."No. of Pages");
          END;
      END;

      SendCommand(CaptureXmlDoc);
      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE HandleXmlCommand@1000000007(Command@1000000000 : Text[1024];VAR InXmlDoc@1000000001 : Codeunit 6192800);
    VAR
      XmlLib@1000000003 : Codeunit 6085573;
      DocumentElement@1000 : Codeunit 6192801;
    BEGIN
      InXmlDoc.GetDocumentElement(DocumentElement);
      CASE Command OF
        'ZoomTextChanged':
          BEGIN
            CurrentZoomText := XmlLib.GetNodeText(DocumentElement,'Text');
            IF EVALUATE(CurrZoom,DELCHR(CurrentZoomText,'=','%')) THEN;
            Zoom(CurrZoom,TRUE);
          END;

        'PageTextChanged':
          BEGIN
            CurrentPageText := XmlLib.GetNodeText(DocumentElement,'Text');
            ParsePageText(CurrentPageText);
          END;

        'ChangePage':
          UpdateCurrPageNo(XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'NewPageNo')));
      END;

      IF NOT CaptureXmlDoc.IsEmpty THEN
        SendCommand(CaptureXmlDoc);
      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE SetSendAllPendingCommands@1000000005(NewSendAllPendingCommands@1000000000 : Boolean);
    BEGIN
      SendAllPendingCommands := NewSendAllPendingCommands;
    END;

    PROCEDURE SetDisableCapture@1000000010(NewDisableCapture@1000000000 : Boolean);
    BEGIN
      DisableCapture := NewDisableCapture;
    END;

    PROCEDURE ClearImage@1161054000();
    VAR
      TempDocFileInfo@1000 : Record 6085600;
    BEGIN
      IF CEDOProxy.IsCEDOEnabled THEN
        IF CEDOProxy.GetTempDocFilename(TempDocFileInfo,Rec) THEN
          EXIT;

      CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
      UpdateCurrPageNo(0);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdatePage@1161054001();
    BEGIN
      UpdateImage;
      CaptureAddinLib.BuildCaptureEnabledCommand(FALSE,CaptureXmlDoc);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE OnControlAddInEvent@1160040000(Index@1000 : Integer;Data@1001 : Variant);
    VAR
      InXmlDoc@1002 : Codeunit 6192800;
      DocumentElement@1004 : Codeunit 6192801;
      XmlLib@1003 : Codeunit 6085573;
    BEGIN
      CLEAR(CaptureXmlDoc);
      IF Index = 0 THEN
        HandleSimpleCommand(Data)
      ELSE BEGIN
        CaptureAddinLib.TextToXml(InXmlDoc,Data);
        InXmlDoc.GetDocumentElement(DocumentElement);
        IF WebClientMgt.IsWebClient THEN
          HandleXmlCommand(XmlLib.GetNodeText(DocumentElement,'Event'),InXmlDoc)
        ELSE
          HandleXmlCommand(XmlLib.GetNodeText(DocumentElement,'Command'),InXmlDoc);
      END;
    END;

    EVENT CaptureUIWeb@-1::OnControlAddIn@1(index@1001 : Integer;data@1000 : Variant);
    BEGIN
      OnControlAddInEvent(index,data)
    END;

    EVENT CaptureUIWeb@-1::AddInReady@2();
    BEGIN
      UpdatePage;
    END;

    BEGIN
    END.
  }
}

