OBJECT Codeunit 5056 CustCont-Update
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RMSetup@1000 : Record 5079;
      CentralDataMngmnt@1210190001 : Codeunit 11012010;

    [External]
    PROCEDURE OnInsert@3(VAR Cust@1000 : Record 18);
    BEGIN
      RMSetup.GET;
      IF RMSetup."Bus. Rel. Code for Customers" = '' THEN
        EXIT;

      InsertNewContact(Cust,TRUE);
    END;

    PROCEDURE OnInsert2@1100528701(VAR Cust@1100528701 : Record 18;ContactType@1100528700 : 'Company,Person');
    BEGIN
      //**4PS
      RMSetup.GET;
      IF RMSetup."Bus. Rel. Code for Customers" = '' THEN
        EXIT;

      InsertNewContact2(Cust, ContactType, TRUE);
    END;

    [External]
    PROCEDURE OnModify@1(VAR Cust@1000 : Record 18);
    VAR
      ContBusRel@1005 : Record 5054;
      Cont@1001 : Record 5050;
      OldCont@1002 : Record 5050;
      IdentityManagement@1006 : Codeunit 9801;
      ContNo@1003 : Code[20];
      NoSeries@1004 : Code[20];
      CurrencyCode@1100528700 : Code[10];
    BEGIN
      WITH ContBusRel DO BEGIN
        SETCURRENTKEY("Link to Table","No.");
        SETRANGE("Link to Table","Link to Table"::Customer);
        SETRANGE("No.",Cust."No.");
        IF NOT FINDFIRST THEN
          EXIT;
        Cont.GET("Contact No.");
        OldCont := Cont;
      END;

      ContNo := Cont."No.";
      NoSeries := Cont."No. Series";
      CurrencyCode := Cont."Currency Code"; //**4PS.n
      Cont.VALIDATE("E-Mail",Cust."E-Mail");
      Cont.TRANSFERFIELDS(Cust);
      //**4PS.sn
      Cont."Mobile Phone No." := Cust."Mobile Phone No.";
      Cont."Phone No. 2" := Cust."Phone No. 2";
      Cont."COC Registration No." := Cust."COC Registration No.";
      Cont."COC Location No." := Cust."COC Location No.";
      Cont."City COC" := Cust."City COC";
      Cont."Due Date COC Statement" := Cust."Due Date COC Statement";
      IF Cont.Type = Cont.Type::Person THEN
        Cont."VAT Registration No." := '';
      //**4PS.en

      OnAfterTransferFieldsFromCustToCont(Cont,Cust);
      Cont."No." := ContNo ;
      Cont."No. Series" := NoSeries;
      IF NOT IdentityManagement.IsInvAppId THEN
        Cont.Type := OldCont.Type;

      Cont."Currency Code" := CurrencyCode; //**4PS.n

      Cont.VALIDATE(Name);
      //Cont.OnModify(OldCont);  //**4PS.o
      Cont.OnModifyFunc(OldCont,TRUE);  //**4PS.n
      Cont.MODIFY(TRUE);

      Cust.GET(Cust."No.");
    END;

    [External]
    PROCEDURE OnDelete@2(VAR Cust@1000 : Record 18);
    VAR
      ContBusRel@1001 : Record 5054;
    BEGIN
      WITH ContBusRel DO BEGIN
        SETCURRENTKEY("Link to Table","No.");
        SETRANGE("Link to Table","Link to Table"::Customer);
        SETRANGE("No.",Cust."No.");
        DELETEALL(TRUE);
      END;
    END;

    [External]
    PROCEDURE InsertNewContact@5(VAR Cust@1000 : Record 18;LocalCall@1001 : Boolean);
    VAR
      ContBusRel@1004 : Record 5054;
      Cont@1002 : Record 5050;
      NoSeriesMgt@1003 : Codeunit 396;
      CustomerTemplate@1100527550 : Record 5105;
    BEGIN
      //**4PS.so
      //Code moved to InsertContact2
      //IF NOT LocalCall THEN BEGIN
      //  RMSetup.GET;
      //  RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      //END;
      //
      //IF ContBusRel.UpdateEmptyNoForContact(Cust."No.",Cust."Primary Contact No.",ContBusRel."Link to Table"::Customer) THEN
      //  EXIT;
      //
      //WITH Cont DO BEGIN
      //  INIT;
      //  TRANSFERFIELDS(Cust);
      //  OnAfterTransferFieldsFromCustToCont(Cont,Cust);
      //  VALIDATE(Name);
      //  VALIDATE("E-Mail");
      //  "No." := '';
      //  "No. Series" := '';
      //  RMSetup.TESTFIELD("Contact Nos.");
      //  NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",'',0D,"No.","No. Series");
      //  Type := Type::Company;
      //  TypeChange;
      //  SetSkipDefault(FALSE);
      //  OnBeforeContactInsert(Cont,Cust);
      //  INSERT(TRUE);
      //END;
      //
      //WITH ContBusRel DO BEGIN
      //  INIT;
      //  "Contact No." := Cont."No.";
      //  "Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
      //  "Link to Table" := "Link to Table"::Customer;
      //  "No." := Cust."No.";
      //  INSERT(TRUE);
      //END;
      //**4PS.eo

      //**4PS.sn
      IF CustomerTemplate.GET(Cust."Customer Template Code") THEN
        InsertNewContact2(Cust, CustomerTemplate."Create Contact as", LocalCall)
      ELSE
        InsertNewContact2(Cust, 0, LocalCall);
      //**4PS.en
    END;

    LOCAL PROCEDURE InsertNewContact2@1100528700(VAR Cust@1100528700 : Record 18;ContactType@1100528701 : 'Company,Person';LocalCall@1100528702 : Boolean);
    VAR
      Cont@1100525000 : Record 5050;
      ContBusRel@1100525002 : Record 5054;
      NoSeriesMgt@1100525001 : Codeunit 396;
    BEGIN
      //**4PS
      IF ContactType = ContactType::Company THEN
        IF NOT CentralDataMngmnt.InsertingCompanyIsAllowed THEN
          EXIT;

      IF ContactType = ContactType::Person THEN
        IF NOT CentralDataMngmnt.InsertingPersonIsAllowed THEN
          EXIT;

      IF NOT LocalCall THEN BEGIN
        RMSetup.GET;
        RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      END;

      IF ContBusRel.UpdateEmptyNoForContact(Cust."No.",Cust."Primary Contact No.",ContBusRel."Link to Table"::Customer) THEN
        EXIT;

      WITH Cont DO BEGIN
        INIT;
        TRANSFERFIELDS(Cust);
        OnAfterTransferFieldsFromCustToCont(Cont,Cust);

        "Mobile Phone No." := Cust."Mobile Phone No.";
        "Phone No. 2" := Cust."Phone No. 2";
        "COC Registration No." := Cust."COC Registration No.";
        "COC Location No." := Cust."COC Location No.";
        "City COC" := Cust."City COC";
        "Due Date COC Statement" := Cust."Due Date COC Statement";

        VALIDATE(Name);
        VALIDATE("E-Mail");
        "No." := '';
        "No. Series" := '';
        "Currency Code" := '';
        IF ContactType = ContactType::Person THEN
          "VAT Registration No." := '';
        IF ContactType = ContactType::Company THEN BEGIN
          RMSetup.TESTFIELD("Company Nos.");
          NoSeriesMgt.InitSeries(RMSetup."Company Nos.",'',0D,"No.","No. Series");
          Type := Type::Company;
        END ELSE BEGIN
          RMSetup.TESTFIELD("Person Nos.");
          NoSeriesMgt.InitSeries(RMSetup."Person Nos.",'',0D,"No.","No. Series");
          Type := Type::Person;
        END;
        TypeChange;
        SetSkipDefault;
        OnBeforeContactInsert(Cont,Cust);
        INSERT(TRUE);
      END;

      WITH ContBusRel DO BEGIN
        INIT;
        "Contact No." := Cont."No.";
        "Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
        "Link to Table" := "Link to Table"::Customer;
        "No." := Cust."No.";
        INSERT(TRUE);
      END;
    END;

    [External]
    PROCEDURE InsertNewContactPerson@4(VAR Cust@1001 : Record 18;LocalCall@1003 : Boolean);
    VAR
      ContComp@1000 : Record 5050;
      ContBusRel@1002 : Record 5054;
      Cont@1004 : Record 5050;
    BEGIN
      IF NOT CentralDataMngmnt.InsertingPersonIsAllowed THEN //**4PS.n
        EXIT;                                                //**4PS.n

      IF NOT LocalCall THEN BEGIN
        RMSetup.GET;
        RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      END;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.",Cust."No.");
      IF ContBusRel.FINDFIRST THEN
        IF ContComp.GET(ContBusRel."Contact No.") THEN
          WITH Cont DO BEGIN
            INIT;
            "No." := '';
            VALIDATE(Type, Type::Person); //**4PS.n
            INSERT(TRUE);
            GET(CreateContactPerson(ContComp."No.", "No.", '')); //**4PS.n
            "Company No." := ContComp."No.";
            //VALIDATE(Name,Cust.Contact); //**4PS.o
            //InheritCompanyToPersonData(ContComp);  //**4PS.o (25310)
            InheritCompanyToPersonData(ContComp,TRUE);  //**4PS.n (25310)
            MODIFY(TRUE);
            Cust."Primary Contact No." := "No.";
          END
    END;

    [External]
    PROCEDURE DeleteCustomerContacts@6(VAR Customer@1000 : Record 18);
    VAR
      Contact@1002 : Record 5050;
      ContactBusinessRelation@1001 : Record 5054;
    BEGIN
      WITH ContactBusinessRelation DO BEGIN
        SETCURRENTKEY("Link to Table","No.");
        SETRANGE("Link to Table","Link to Table"::Customer);
        SETRANGE("No.",Customer."No.");
        IF FINDSET THEN
          REPEAT
            IF Contact.GET("Contact No.") THEN
              Contact.DELETE(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ContactNameIsBlank@7(CustomerNo@1000 : Code[20]) : Boolean;
    VAR
      Contact@1001 : Record 5050;
      ContactBusinessRelation@1002 : Record 5054;
    BEGIN
      WITH ContactBusinessRelation DO BEGIN
        SETCURRENTKEY("Link to Table","No.");
        SETRANGE("Link to Table","Link to Table"::Customer);
        SETRANGE("No.",CustomerNo);
        IF NOT FINDFIRST THEN
          EXIT(FALSE);
        Contact.GET("Contact No.");
        EXIT(Contact.Name = '');
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFieldsFromCustToCont@8(VAR Contact@1000 : Record 5050;Customer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeContactInsert@9(VAR Contact@1000 : Record 5050;Customer@1001 : Record 18);
    BEGIN
    END;

    BEGIN
    END.
  }
}

