OBJECT Codeunit 11012199 Post Debrief Data (4PS-Mobile)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    TableNo=11012677;
    OnRun=VAR
            Logbook@1100528000 : Record 11012677;
          BEGIN
            Logbook.COPY(Rec);
            WITH Logbook DO BEGIN
              CASE "Debrief Type" OF
                "Debrief Type"::WorkOrder:
                  PostDebriefWorkOrder(gDebriefWorkOrder, Logbook);
                "Debrief Type"::Budget:
                  PostDebriefBudgetLine(gDebriefBudgetLine, Logbook);
                "Debrief Type"::CostPlus:
                  PostDebriefCostPlusEntry(gDebriefCostPlusEntry, Logbook);
                "Debrief Type"::AdviceOrder:
                  PostDebriefAdviceOrderLine(gDebriefAdviceOrderLine, Logbook);
                "Debrief Type"::AdviceOrderText:
                  PostDebriefAdviceOrderLineText(gDebriefAdviceOrderLineText, Logbook);
                "Debrief Type"::CreatePurchOrder:
                  PostDebriefCreatePurchOrder(gDebriefCreatePurchOrder, Logbook);
                "Debrief Type"::Status:
                  PostDebriefStatusFS(gDebriefStatusFS, Logbook);
                "Debrief Type"::Text:
                  PostDebriefTextLine(gDebriefTextLine, Logbook);
                "Debrief Type"::Hours:
                  PostDebriefHourLine(gDebriefHourAccountingLine, Logbook);
                "Debrief Type"::DecentralWO:
                  PostDebriefDecentralWorkOrder(gDebriefDecentralWorkOrder, Logbook);
                "Debrief Type"::InspectionLine:
                  PostDebriefInspectionLine(gDebriefInspectionLine, Logbook);
                "Debrief Type"::ObjectSpecification:
                  PostDebriefObjectSpecLine(gDebriefObjectSpecLine, Logbook);
                "Debrief Type"::OrderText:
                  PostDebriefWorkOrderText(gDebriefWorkOrderText, Logbook);
                "Debrief Type"::RestockItem:
            // C024394.sn
                  IF gDebriefRestockItem.Purchase THEN
                    PostDebriefRestockItemPurchase(gDebriefRestockItem, Logbook)
                  ELSE
            // C024394.en
                    PostDebriefRestockItem(gDebriefRestockItem, Logbook);
                "Debrief Type"::CreateRestockPurchOrder:                                 // C024394.n
                  PostDebriefCreateRestockPurchOrder(gDebriefCreateRestockPO, Logbook);  // C024394.n
                "Debrief Type"::Planning:
                  PostDebriefPlanning(gDebriefPlanning, Logbook);
                "Debrief Type"::SUPProduction:
                  PostDebriefWUPProduction(gDebriefWUPProduction, Logbook);
                "Debrief Type"::ServiceOrderObject: // dp00276
                  PostDebriefServiceOrderObject(gDebriefServiceOrderObject, Logbook);
                "Debrief Type"::ItemJnlLine:
                  PostDebriefItemJnlLine(gDebriefItemJournalLine, Logbook);
                "Debrief Type"::PurchaseOrder:
                  PostDebriefPurchaseOrder(gDebriefPurchaseOrder, Logbook);
                "Debrief Type"::PurchaseOrderLine:
                  PostDebriefPurchaseOrderLine(gDebriefPurchaseOrderLine, Logbook);
                "Debrief Type"::PurchaseReceiptLine:
                  PostDebriefPurchaseReceiptLine(gDebriefPurchaseReceiptLine, Logbook);
                "Debrief Type"::ConditionMeasurementLine:
                  PostDebriefConditionMeasurementLine(gDebriefCondMeasLine, Logbook);
                "Debrief Type"::InventoryMgt:
                  PostDebriefInventoryMgt(gDebriefInventoryMgt, Logbook);
                "Debrief Type"::PostGeneral:
                  PostDebriefPostGeneral(gDebriefPostGeneral, Logbook);
                "Debrief Type"::MapsItem:
                  PostDebriefMapsItem(gDebriefMapsItem, Logbook);
                "Debrief Type"::RelatedWorkOrder:
                  PostDebriefRelatedWorkOrder(gDebriefRelatedWorkOrder, Logbook);
              END;
            END;
          END;

  }
  CODE
  {
    VAR
      ErrorRec@1100485004 : Record 11012678;
      Text000@1100485002 : TextConst 'ENU=%1 ''%2'' not present;NOR=%1 ''%2'' finnes ikke;SVE=%1 ''%2'' finns inte';
      MobileSetupRec@1100485010 : Record 11012676;
      GLSetupRec@1100485009 : Record 98;
      Text001@1100485007 : TextConst 'ENU=%1 must be filled;NOR=%1 m† fylles ut;SVE=%1 m†ste fyllas';
      Text002@1100485000 : TextConst 'ENU=%1 ''%2'' is already present;SVE=%1 ''%2'' finns redan.';
      Text003@1210190000 : TextConst 'ENU=%1 or %2 must be filled;SVE=%1 eller %2 m†ste fyllas i';
      Text004@1100529000 : TextConst 'ENU="%1 ''%2'' of %3 must be ''%4'' "';
      Text005@1100529001 : TextConst 'ENU=%1 ''%2'' not allowed for %3 ''%4''';
      Text006@1100527000 : TextConst 'ENU=%1 %2 in company ''%3'' must be the same as in current company (%4/%5)';
      JobSetup@1100525000 : Record 315;
      gDebriefWorkOrder@1100528001 : Record 11012679;
      gDebriefBudgetLine@1100528002 : Record 11012680;
      gDebriefCostPlusEntry@1100528003 : Record 11012681;
      gDebriefAdviceOrderLine@1100528004 : Record 11012682;
      gDebriefAdviceOrderLineText@1100525002 : Record 11229870;
      gDebriefCreatePurchOrder@1100528005 : Record 11125648;
      gDebriefStatusFS@1100528006 : Record 11012683;
      gDebriefTextLine@1100528009 : Record 11012684;
      gDebriefHourAccountingLine@1100528010 : Record 11012685;
      gDebriefDecentralWorkOrder@1100528011 : Record 11012686;
      gDebriefInspectionLine@1100528012 : Record 11020447;
      gDebriefObjectSpecLine@1100528013 : Record 11020448;
      gDebriefWorkOrderText@1100528014 : Record 11020449;
      gDebriefRestockItem@1100528015 : Record 11125645;
      gDebriefCreateRestockPO@1100525001 : Record 11229869;
      gDebriefPlanning@1100528016 : Record 11125646;
      gDebriefWUPProduction@1100528017 : Record 11125650;
      gDebriefServiceOrderObject@1100528018 : Record 11125652;
      gStatusFS_DocRefPoint@1100528008 : Record 11020296;
      gStatusFS_NewDocRefPoint@1100528007 : Boolean;
      gDebriefItemJournalLine@1100528000 : Record 11126699;
      gDebriefPurchaseOrderLine@1100528019 : Record 11126702;
      gDebriefPurchaseOrder@1100528020 : Record 11126701;
      gDebriefPurchaseReceiptLine@1100528021 : Record 11126704;
      gDebriefCondMeasLine@1100528022 : Record 11126705;
      gDebriefInventoryMgt@1100528024 : Record 11126707;
      gDebriefPostGeneral@1100528023 : Record 11126706;
      Text007@1100528025 : TextConst 'ENU=Can not post receipts of purchase order %1.';
      gDebriefMapsItem@1100525003 : Record 11072380;
      gDebriefRelatedWorkOrder@1100526000 : Record 11072381;

    PROCEDURE SetPostDebriefWorkorder@1100528000(VAR DebriefWorkOrder@1100528001 : Record 11012679);
    BEGIN
      gDebriefWorkOrder.COPY(DebriefWorkOrder);
    END;

    PROCEDURE GetPostDebriefWorkorder@1100525001(VAR DebriefWorkOrder@1100528001 : Record 11012679);
    BEGIN
      DebriefWorkOrder.COPY(gDebriefWorkOrder); // DP00826.n
    END;

    PROCEDURE SetPostDebriefBudgetLine@1100528007(VAR DebriefBudgetLine@1100528001 : Record 11012680);
    BEGIN
      gDebriefBudgetLine.COPY(DebriefBudgetLine);
    END;

    PROCEDURE SetPostDebriefCostPlusEntry@1100528001(VAR DebriefCostPlusEntry@1100528001 : Record 11012681);
    BEGIN
      gDebriefCostPlusEntry.COPY(DebriefCostPlusEntry);
    END;

    PROCEDURE SetPostDebriefAdviceOrderLine@1100528002(VAR DebriefAdviceOrderLine@1100528001 : Record 11012682);
    BEGIN
      gDebriefAdviceOrderLine.COPY(DebriefAdviceOrderLine);
    END;

    PROCEDURE SetPostDebriefAdviceOrderLineText@1100525009(VAR DebriefAdviceOrderLineText@1100528001 : Record 11229870);
    BEGIN
      gDebriefAdviceOrderLineText.COPY(DebriefAdviceOrderLineText);
    END;

    PROCEDURE SetPostDebriefCreatePurchOrder@1100528003(VAR DebriefCreatePurchOrder@1100528001 : Record 11125648);
    BEGIN
      gDebriefCreatePurchOrder.COPY(DebriefCreatePurchOrder);
    END;

    PROCEDURE SetPostDebriefStatusFS@1100528004(VAR DebriefStatusFS@1100528001 : Record 11012683);
    BEGIN
      gDebriefStatusFS.COPY(DebriefStatusFS);
    END;

    PROCEDURE SetPostDebriefTextLine@1100528006(VAR DebriefTextLine@1100528001 : Record 11012684);
    BEGIN
      gDebriefTextLine.COPY(DebriefTextLine);
    END;

    PROCEDURE SetPostDebriefHourAccLine@1100528008(VAR DebriefHourAccountingLine@1100528001 : Record 11012685);
    BEGIN
      gDebriefHourAccountingLine.COPY(DebriefHourAccountingLine);
    END;

    PROCEDURE SetPostDebriefDecentralWorkOrder@1100528009(VAR DebriefDecentralWorkOrder@1100528001 : Record 11012686);
    BEGIN
      gDebriefDecentralWorkOrder.COPY(DebriefDecentralWorkOrder);
    END;

    PROCEDURE SetPostDebriefInspectionLine@1100528010(VAR DebriefInspectionLine@1100528001 : Record 11020447);
    BEGIN
      gDebriefInspectionLine.COPY(DebriefInspectionLine);
    END;

    PROCEDURE SetPostDebriefObjectSpecLine@1100528011(VAR DebriefObjectSpecLine@1100528001 : Record 11020448);
    BEGIN
      gDebriefObjectSpecLine.COPY(DebriefObjectSpecLine);
    END;

    PROCEDURE SetPostDebriefWorkOrderText@1100528013(VAR DebriefWorkOrderText@1100528001 : Record 11020449);
    BEGIN
      gDebriefWorkOrderText.COPY(DebriefWorkOrderText);
    END;

    PROCEDURE SetPostDebriefRestockItem@1100528012(VAR DebriefRestockItem@1100528001 : Record 11125645);
    BEGIN
      gDebriefRestockItem.COPY(DebriefRestockItem);
    END;

    PROCEDURE SetPostDebriefCreateRestockPurchOrder@1100525006(VAR DebriefCreateRestockPO@1100525000 : Record 11229869);
    BEGIN
      gDebriefCreateRestockPO.COPY(DebriefCreateRestockPO); // C024394.n
    END;

    PROCEDURE SetPostDebriefPlanning@1100528014(VAR DebriefPlanning@1100528001 : Record 11125646);
    BEGIN
      gDebriefPlanning.COPY(DebriefPlanning);
    END;

    PROCEDURE SetPostDebriefWUPProduction@1100528015(VAR DebriefWUPProduction@1100528001 : Record 11125650);
    BEGIN
      gDebriefWUPProduction.COPY(DebriefWUPProduction);
    END;

    PROCEDURE SetPostDebriefServiceOrderObject@1100528016(VAR DebriefServiceOrderObject@1100528001 : Record 11125652);
    BEGIN
      gDebriefServiceOrderObject.COPY(DebriefServiceOrderObject);
    END;

    PROCEDURE SetPostDebriefItemJournalLine@1100528019(VAR DebriefItemJournalLine@1100528000 : Record 11126699);
    BEGIN
      gDebriefItemJournalLine.COPY(DebriefItemJournalLine);
    END;

    PROCEDURE SetPostDebriefPurchaseOrderLine@1100528020(VAR DebriefPurchaseOrderLine@1100528000 : Record 11126702);
    BEGIN
      gDebriefPurchaseOrderLine.COPY(DebriefPurchaseOrderLine);
    END;

    PROCEDURE SetPostDebriefPurchaseOrder@1100528021(VAR DebriefPurchaseOrder@1100528000 : Record 11126701);
    BEGIN
      gDebriefPurchaseOrder.COPY(DebriefPurchaseOrder);
    END;

    PROCEDURE SetPostDebriefConditionMeasurementLine@1100528027(VAR DebriefCondMeasLine@1100528000 : Record 11126705);
    BEGIN
      gDebriefCondMeasLine.COPY(DebriefCondMeasLine);
    END;

    PROCEDURE GetPostDebriefServiceOrderObject@1100525002(VAR DebriefServiceOrderObject@1100528000 : Record 11125652);
    BEGIN
      DebriefServiceOrderObject.COPY(gDebriefServiceOrderObject);
    END;

    PROCEDURE SetPostDebriefPurchaseReceiptLine@1100528025(VAR DebriefPurchaseReceiptLine@1100528000 : Record 11126704);
    BEGIN
      gDebriefPurchaseReceiptLine.COPY(DebriefPurchaseReceiptLine);
    END;

    PROCEDURE GetPostDebriefPurchaseReceiptLine@1100528026(VAR DebriefPurchaseReceiptLine@1100528000 : Record 11126704);
    BEGIN
      DebriefPurchaseReceiptLine.COPY(gDebriefPurchaseReceiptLine);
    END;

    PROCEDURE SetPostDebriefInventoryMgt@1100528033(VAR DebriefInventoryMgt@1100528000 : Record 11126707);
    BEGIN
      gDebriefInventoryMgt.COPY(DebriefInventoryMgt);
    END;

    PROCEDURE GetPostDebriefInventoryMgt@1100528032(VAR DebriefInventoryMgt@1100528000 : Record 11126707);
    BEGIN
      DebriefInventoryMgt.COPY(gDebriefInventoryMgt);
    END;

    PROCEDURE SetPostDebriefPostGeneral@1100528030(VAR DebriefPostGeneral@1100528000 : Record 11126706);
    BEGIN
      gDebriefPostGeneral.COPY(DebriefPostGeneral);
    END;

    PROCEDURE GetPostDebriefPostGeneral@1100528029(VAR DebriefPostGeneral@1100528000 : Record 11126706);
    BEGIN
      DebriefPostGeneral.COPY(gDebriefPostGeneral);
    END;

    PROCEDURE SetPostDebriefMapsItem@1100525014(VAR DebriefMapsItem@1100528000 : Record 11072380);
    BEGIN
      gDebriefMapsItem.COPY(DebriefMapsItem);
    END;

    PROCEDURE GetPostDebriefMapsItem@1100525013(VAR DebriefMapsItem@1100528000 : Record 11072380);
    BEGIN
      DebriefMapsItem.COPY(gDebriefMapsItem);
    END;

    PROCEDURE SetPostDebriefRelatedWorkOrder@1100526000(VAR DebriefRelatedWorkOrder@1100528000 : Record 11072381);
    BEGIN
      gDebriefRelatedWorkOrder.COPY(DebriefRelatedWorkOrder);
    END;

    PROCEDURE GetPostDebriefRelatedWorkOrder@1100526001(VAR DebriefRelatedWorkOrder@1100526000 : Record 11072381);
    BEGIN
      DebriefRelatedWorkOrder.COPY(gDebriefRelatedWorkOrder);
    END;

    LOCAL PROCEDURE PostDebriefWorkOrder@1100527000(VAR DebriefWorkOrder@1100485010 : Record 11012679;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527002 : Record 11229279;
      ServOrder@1100527001 : Record 11012823;
      Project@1100527000 : Record 11072003;
      SignatureWO@1100527003 : Record 11229280;
      Stream@1100526000 : InStream;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefWorkOrder."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        IF (DebriefWorkOrder.Signer <> '') AND (DebriefWorkOrder.Signer <> WorkOrder.Signer) THEN BEGIN
          WorkOrder.Signer := DebriefWorkOrder.Signer;
          WorkOrder.UpdateModifiedOnAndBy;
          WorkOrder.MODIFY;
        END;
        DebriefWorkOrder.CALCFIELDS(Signature);
        IF DebriefWorkOrder.Signature.HASVALUE THEN BEGIN
          IF NOT SignatureWO.GET(WorkOrder."No.") THEN BEGIN
            SignatureWO.INIT;
            SignatureWO."Work Order No." := WorkOrder."No.";
            SignatureWO.INSERT;
          END;
          DebriefWorkOrder.Signature.CREATEINSTREAM(Stream);
          SignatureWO.Signature.IMPORTSTREAM(Stream, '');
          SignatureWO.MODIFY;
        END;

        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefWorkOrderSO(DebriefWorkOrder, Logbook, ServOrder));
          WorkOrder."Source Type"::Project:
            EXIT(TRUE);
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefWorkOrder."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefWorkOrderSO@1100485004(VAR VarDebriefServOrderRec@1100485010 : Record 11012679;ILogbookRec@1100485003 : Record 11012677;ServOrder@1100527001 : Record 11012823) : Boolean;
    VAR
      lvServAnalRec@1100485001 : Record 11012842;
      lvServiceOrderIndicationRec@1100485009 : Record 11012837;
      SignatureSO@1100527000 : Record 11020349;
      ServiceLocation@1100528601 : Record 11012801;
      lvError@1100485000 : Boolean;
      lvUpdate@1100485002 : Boolean;
      Stream@1100526000 : InStream;
    BEGIN
      WITH VarDebriefServOrderRec DO BEGIN
        //* Check
        IF ("Order Kind" <> '') THEN BEGIN
          IF lvServiceOrderIndicationRec.GET(lvServiceOrderIndicationRec.Indication::Kind, "Order Kind") THEN BEGIN
            lvUpdate := TRUE;
          END ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Order Kind"),"Order Kind"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Order Type" <> '') THEN BEGIN
          IF lvServiceOrderIndicationRec.GET(lvServiceOrderIndicationRec.Indication::Type, "Order Type") THEN BEGIN
            lvUpdate := TRUE;
          END ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Order Type"),"Order Type"),ILogbookRec,"Line No.");
          END;
        END;
        IF (Problem <> '') AND (Problem <> ServOrder.Problem) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Problem, Problem) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Problem),Problem),ILogbookRec,"Line No.");
          END;
        END;
        IF (Cause <> '') AND (Cause <> ServOrder.Cause) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Cause, Cause) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Cause),Cause),ILogbookRec,"Line No.");
          END;
        END;
        IF (Solution <> '') AND (Solution <> ServOrder.Solution) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Solution, Solution) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Solution),Solution),ILogbookRec,"Line No.");
          END;
        END;
        IF (Signer <> '') AND (Signer <> ServOrder.Signer) THEN
          lvUpdate := TRUE;
        IF ("E-Mail Signer" <> '') AND ("E-Mail Signer" <> ServOrder."E-Mail Signer") THEN
          lvUpdate := TRUE;
        CALCFIELDS(Signature);
        IF Signature.HASVALUE THEN
          lvUpdate := TRUE;
        IF ("Order No. Customer" <> '') AND ("Order No. Customer" <> ServOrder."Order No. Customer") THEN
          lvUpdate := TRUE;
        IF ("Send Report" <> ServOrder."Send Report") THEN
          lvUpdate := TRUE;
        IF("Contact Name" <> ServOrder."Contact Name") THEN
          lvUpdate := TRUE;
        IF("Phone No." <> ServOrder."Phone No.") THEN
          lvUpdate := TRUE;
        IF("Phone No. 2" <> ServOrder."Phone No. 2") THEN
          lvUpdate := TRUE;
        IF("Mobile Phone No." <> ServOrder."Mobile Phone No.") THEN
          lvUpdate := TRUE;
        IF("E-Mail" <> ServOrder."E-Mail") THEN
          lvUpdate := TRUE;
          lvUpdate := TRUE;
        IF ("Room (SUP)" <> '') AND ("Room (SUP)" <> ServOrder."Room (SUP)") THEN
          lvUpdate := TRUE;
        IF ("Part (SUP)" <> '') AND ("Part (SUP)" <> ServOrder."Part (SUP)") THEN
          lvUpdate := TRUE;

        IF lvError THEN
          EXIT(FALSE);
        IF NOT lvUpdate THEN
          EXIT(TRUE);

        //* Post
        IF Signature.HASVALUE THEN BEGIN
          IF NOT SignatureSO.GET(ServOrder."No.") THEN BEGIN
            SignatureSO.INIT;
            SignatureSO."Service Order No." := ServOrder."No.";
            SignatureSO.INSERT;
          END;
          Signature.CREATEINSTREAM(Stream);
          SignatureSO.Signature.IMPORTSTREAM(Stream, '');
          SignatureSO.MODIFY;
        END;

        ServOrder.GET(ServOrder."No.");
        ServOrder.SetSkipUpdateServiceText(TRUE);
        "Old Contact Name" := ServOrder."Contact Name";
        "Old Phone No." := ServOrder."Phone No.";
        "Old Phone No. 2" := ServOrder."Phone No. 2";
        "Old Mobile Phone No." := ServOrder."Mobile Phone No.";
        "Old E-Mail" := ServOrder."E-Mail";
        IF ("Order Kind" <> '') THEN
          ServOrder.VALIDATE("Order Kind", "Order Kind");
        IF ("Order Type" <> '') THEN
          ServOrder.VALIDATE("Order Type", "Order Type");
        IF ("Room (SUP)" <> '') AND ("Room (SUP)" <> ServOrder."Room (SUP)") THEN
          ServOrder.VALIDATE("Room (SUP)", "Room (SUP)");
        IF ("Part (SUP)" <> '') AND ("Part (SUP)" <> ServOrder."Part (SUP)") THEN
          ServOrder.VALIDATE("Part (SUP)", "Part (SUP)");
        IF (Problem <> '') AND (Problem <> ServOrder.Problem) THEN
          ServOrder.VALIDATE(Problem, Problem);
        IF (Cause <> '') AND (Cause <> ServOrder.Cause) THEN
          ServOrder.VALIDATE(Cause, Cause);
        IF (Solution <> '') AND (Solution <> ServOrder.Solution) THEN
          ServOrder.VALIDATE(Solution, Solution);
        IF ("E-Mail Signer" <> '') THEN
          ServOrder."E-Mail Signer" := "E-Mail Signer";
        IF (Signer <> '') THEN
          ServOrder.Signer := Signer;
        IF ("Order No. Customer" <> '') THEN
          ServOrder.VALIDATE("Order No. Customer", "Order No. Customer");
        ServOrder.VALIDATE("Send Report", "Send Report");
        ServOrder.VALIDATE("Contact Name", "Contact Name");
        ServOrder.VALIDATE("Phone No.", "Phone No.");
        ServOrder.VALIDATE("Phone No. 2", "Phone No. 2");
        ServOrder.VALIDATE("Mobile Phone No.", "Mobile Phone No.");
        ServOrder.VALIDATE("E-Mail", "E-Mail");
        ServOrder.MODIFY(TRUE);

        IF ServOrder."Service Location No." <> '' THEN BEGIN
          IF ServiceLocation.GET(ServOrder."Service Location No.") THEN BEGIN
            IF ServiceLocation."Phone No." <> "Phone No." THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("Phone No."), ServiceLocation."Phone No.", "Phone No.");
            IF ServiceLocation."Phone No. 2" <> "Phone No. 2" THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("Phone No. 2"), ServiceLocation."Phone No. 2", "Phone No. 2");
            IF ServiceLocation."Mobile Phone No." <> "Mobile Phone No." THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("Mobile Phone No."), ServiceLocation."Mobile Phone No.", "Mobile Phone No.");
            IF ServiceLocation."E-Mail" <> "E-Mail" THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("E-Mail"), ServiceLocation."E-Mail", "E-Mail");
          END;
        END;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefBudgetLine@1100529002(VAR DebriefBudgetLine@1100485007 : Record 11012680;Logbook@1100485001 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529000 : Record 11229279;
      ServOrder@1100529001 : Record 11012823;
      Project@1100529002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefBudgetLine."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefBudgetLineSO(DebriefBudgetLine, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefBudgetLine."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefBudgetLineSO@1100485009(VAR VarDebriefBudgetLineRec@1100485007 : Record 11012680;ILogbookRec@1100485001 : Record 11012677;WorkOrder@1100529003 : Record 11229279) : Boolean;
    VAR
      lvBudgetRec@1100485004 : Record 11012875;
      lvError@1100485000 : Boolean;
      lvUpdate@1100485002 : Boolean;
      lvExist@1100485006 : Boolean;
    BEGIN
      WITH VarDebriefBudgetLineRec DO BEGIN
        //* Check
        lvBudgetRec.SETRANGE("Budget Type", lvBudgetRec."Budget Type"::Order);
        lvBudgetRec.SETRANGE("Service Order No.", WorkOrder."Source No.");
        lvBudgetRec.SETRANGE("Object No.", "Object No.");
        lvBudgetRec.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
        lvBudgetRec.SETRANGE("Line No.", "Budget Line No.");
        lvExist := lvBudgetRec.FINDFIRST;
        IF (NOT lvExist) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(
            STRSUBSTNO(Text000,
              lvBudgetRec.TABLECAPTION, WorkOrder."Source No." + '-' + "Object No." + '-' +
              "Maintenance Scheme" + '-' + FORMAT("Budget Line No.")),
            ILogbookRec, "Line No.");
          EXIT(FALSE); //*If Budget Line not present, then further testing not needed
        END;
        IF (Finished <> lvBudgetRec.Finished) THEN
          lvUpdate := TRUE;
        IF ("Follow-up Job" <> lvBudgetRec."Follow-up Job") THEN
          lvUpdate := TRUE;

        IF lvError THEN
          EXIT(FALSE);
        IF NOT lvUpdate THEN
          EXIT(TRUE);

        //* Post
        IF (Finished <> lvBudgetRec.Finished) THEN
          lvBudgetRec.VALIDATE(Finished, Finished);
        IF ("Follow-up Job" <> lvBudgetRec."Follow-up Job") THEN
          lvBudgetRec.VALIDATE("Follow-up Job", "Follow-up Job");
        lvBudgetRec.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefCostPlusEntry@1100529003(VAR DebriefCostPlusEntry@1100485013 : Record 11012681;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      GLSetup@1100529302 : Record 98;
      WorkOrder@1100529001 : Record 11229279;
      ServiceOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
      Resource@1100525018 : Record 11229278;
      Employee@1100525017 : Record 5200;
      ServiceOrderCostPlusEntry@1100525016 : Record 11012825;
      Item@1100525012 : Record 27;
      ETIMVendorCentralMgt@1100529300 : Record 11012304;
      TradeItem@1100529301 : Record 11012317;
      DimensionValue@1100525011 : Record 349;
      WageComponent@1100525010 : Record 11012014;
      UnitofMeasure@1100525009 : Record 204;
      HourLineTemplate@1100529400 : Record 11229799;
      Err@1100525003 : Boolean;
      Existing@1100525002 : Boolean;
      PostingIC@1100529003 : Boolean;
      "4PSMobileSetup"@1100525000 : Record 11012676;
      ServiceSetup@1101285000 : Record 11012800;
      DontPostMaterial@1101285001 : Boolean;
    BEGIN
      // If IC then debrief message is present in logbook of both companies. CostPlus is always/only done in the WO-company.
      // If not IC then the ItmJnl posting is also done in the WO-company. IF IC then only the ItmJnl posting is done (
      // (in Resource/empl company)'.
      GLSetup.GET;
      IF "4PSMobileSetup".GET THEN;
      WITH DebriefCostPlusEntry DO BEGIN
        IF Stock THEN BEGIN
          Logbook.CALCFIELDS("Source Company");
          IF (Logbook."Source Company" <> COMPANYNAME) AND (Logbook."Source Company" <> '') THEN
            PostingIC := TRUE;
        END;
        IF NOT CheckWorkorder(Logbook, "Line No.", (NOT PostingIC), WorkOrder, ServiceOrder, Project) THEN
          EXIT(FALSE);

        IF NOT CheckResource(Logbook, "Line No.", PostingIC, Resource, Employee) THEN
          Err := TRUE;

        IF ("Posting Date" = 0D) THEN BEGIN
          Err := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001, FIELDCAPTION("Posting Date")), Logbook, "Line No.");
        END;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT Item.GET("Item No.") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Item No."), "Item No."), Logbook, "Line No.");
          END;
        END;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT ETIMVendorCentralMgt.GET("Vendor (Trade Item)") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Vendor (Trade Item)"), "Vendor (Trade Item)"), Logbook, "Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT TradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
            IF NOT AddTradeItem("Vendor (Trade Item)", "Trade Item") THEN BEGIN
              Err := TRUE;
              ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Trade Item"),
                STRSUBSTNO('%1; %2', "Vendor (Trade Item)", "Trade Item")), Logbook, "Line No.");
            END;
          END;
        END;
        IF ("Hour Line Template Code" <> '') THEN BEGIN
          IF NOT GetHourLineTemplate("Hour Line Template Code", HourLineTemplate) THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Hour Line Template Code"),"Hour Line Template Code"),Logbook,"Line No.");
          END;
        END;
        IF ("Cost Object" <> '') THEN BEGIN
          IF NOT DimensionValue.GET(GLSetup."Shortcut Dimension 2 Code", "Cost Object") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Cost Object"), "Cost Object"), Logbook, "Line No.");
          END;
        END;
        IF ("Wage Component" <> '') THEN BEGIN
          IF NOT WageComponent.GET("Wage Component") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Wage Component"), "Wage Component"), Logbook, "Line No.");
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT UnitofMeasure.GET("Unit of Measure") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Unit of Measure"), "Unit of Measure"), Logbook, "Line No.");
          END;
        END;
        IF Stock AND PostingIC THEN BEGIN
          IF NOT CheckMobSetupReasonReceivComp(WorkOrder."Source Company", Logbook, "Line No.") THEN
            Err := TRUE;
        END;

        IF Err THEN
          EXIT(FALSE);

        IF (WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder) AND ("Cost Plus Line No." <> 0) AND (NOT PostingIC) THEN
          //Update existing record
          Existing := ServiceOrderCostPlusEntry.GET(WorkOrder."Source No.", "Cost Plus Line No.");

      //>>180903
        ServiceSetup.GET;
        IF ServiceSetup."Dont Post Material to CostPlus" THEN BEGIN
          DontPostMaterial := FALSE;
          IF (DebriefCostPlusEntry."Item No."<>'') OR (DebriefCostPlusEntry."Trade Item"<>'') THEN
            DontPostMaterial := TRUE;
          IF ServiceOrderCostPlusEntry."FSA-Created Entry" AND (NOT DontPostMaterial) THEN BEGIN
            ServiceOrderCostPlusEntry.CALCFIELDS("Cost Type");
            IF ServiceOrderCostPlusEntry."Cost Type" = ServiceOrderCostPlusEntry."Cost Type"::Material THEN
              DontPostMaterial := TRUE;
          END;

          IF DontPostMaterial THEN BEGIN
            IF ("Trade Item" = '') AND ("Trade Item" <> "Item No.") THEN BEGIN
              "Trade Item" := "Item No.";
              MODIFY(FALSE);
            END;
            EXIT(FALSE);
          END;
        END;
      //<<180903


        IF Stock AND (NOT Existing) AND (PostingIC OR ((WorkOrder."Source Company" = COMPANYNAME) AND (Resource.Company = COMPANYNAME))) THEN
          PostDebriefCostPlusEntryStock(DebriefCostPlusEntry, WorkOrder, PostingIC);

        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefCostPlusEntrySO(DebriefCostPlusEntry, Logbook, WorkOrder, Resource, ServiceOrderCostPlusEntry, PostingIC, Existing));
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefCostPlusEntryStock@1100529300(VAR DebriefCostPlusEntry@1100529300 : Record 11012681;WorkOrder@1100529305 : Record 11229279;PostingIC@1100529306 : Boolean);
    VAR
      MobileSetup@1100529302 : Record 11012676;
      ItemJournalLine@1100529301 : Record 83;
      ItemJournalLine2@1100529304 : Record 83;
      Location@1100529303 : Record 14;
    BEGIN
      MobileSetup.GET;

      WITH DebriefCostPlusEntry DO BEGIN
        IF ("Location Code" <> '') THEN BEGIN
          IF Location.GET("Location Code") THEN BEGIN
            IF (Location."Inventory Journal Template" <> '') AND (Location."Inventory Journal Batch" <> '') THEN BEGIN
              MobileSetup."Item Journal Template" := Location."Inventory Journal Template";
              MobileSetup."Item Journal Batch" := Location."Inventory Journal Batch";
            END;
          END;
        END;

        MobileSetup.TESTFIELD("Item Journal Template");
        MobileSetup.TESTFIELD("Item Journal Batch");

        ItemJournalLine.INIT;
        ItemJournalLine.VALIDATE("Journal Template Name", MobileSetup."Item Journal Template");
        ItemJournalLine.VALIDATE("Journal Batch Name", MobileSetup."Item Journal Batch");
        ItemJournalLine2.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
        ItemJournalLine2.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");
        IF ItemJournalLine2.FINDLAST THEN
          ItemJournalLine."Line No." := ItemJournalLine2."Line No." + 10000
        ELSE
          ItemJournalLine."Line No." := 10000;
        ItemJournalLine2."Entry Type" := ItemJournalLine."Entry Type"::Sale;
        ItemJournalLine.SetUpNewLine(ItemJournalLine2);
        ItemJournalLine.INSERT(TRUE);
        ItemJournalLine."Document No." := WorkOrder."Source No.";
        IF ("Posting Date" <> 0D) THEN
          ItemJournalLine.VALIDATE("Posting Date", "Posting Date");
        IF PostingIC THEN
          ItemJournalLine.VALIDATE("Receiving Company", WorkOrder."Source Company");
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder : ItemJournalLine.VALIDATE("Service Order No.", WorkOrder."Source No.");
          WorkOrder."Source Type"::Project : ItemJournalLine.VALIDATE("Job No.", WorkOrder."Source No.");
        END;
        IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
          IF WorkOrder."Project Element" <> '' THEN
            ItemJournalLine.VALIDATE(Element, WorkOrder."Project Element");
          IF WorkOrder."Extension Contract" <> '' THEN
            ItemJournalLine.VALIDATE("Extension Contract", WorkOrder."Extension Contract");
          IF WorkOrder."Plot No." <> '' THEN
             ItemJournalLine."Plot No." := WorkOrder."Plot No.";
        END;
        IF ("Item No." <> '') THEN BEGIN
          ItemJournalLine.VALIDATE("Item No.", "Item No.");
          IF ("Location Code" <> '') THEN
            ItemJournalLine.VALIDATE("Location Code", "Location Code");
          IF ("Unit of Measure" <> '') THEN
            ItemJournalLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
          IF (Quantity <> 0) THEN
            ItemJournalLine.VALIDATE(Quantity, ROUND(Quantity, 0.00001));
        END ELSE BEGIN  //because in validation of Location Code a.o. the Item No. is being used.
          IF ("Location Code" <> '') THEN
            ItemJournalLine."Location Code" := "Location Code";
          IF ("Unit of Measure" <> '') THEN
            ItemJournalLine."Unit of Measure Code" := "Unit of Measure";
          IF (Quantity <> 0) THEN
            ItemJournalLine.Quantity := ROUND(Quantity, 0.00001);
        END;
        IF ("Object No." <> '') THEN
          ItemJournalLine.VALIDATE("Service Object No.", "Object No.");
        IF (Description <> '') THEN
          ItemJournalLine.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          ItemJournalLine.VALIDATE("Description 2", "Description 2");
        IF ("Posting Date" <> 0D) THEN
          ItemJournalLine.VALIDATE("Delivery Date", "Posting Date");
        IF (MobileSetup."Reason Code Hours/Material" <> '') THEN
          ItemJournalLine."Reason Code" := MobileSetup."Reason Code Hours/Material";
        ItemJournalLine."Origin Type Line" := ItemJournalLine."Origin Type Line"::FieldService;
        ItemJournalLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefCostPlusEntrySO@1100485000(VAR DebriefCostPlusEntry@1100485013 : Record 11012681;ILogbookRec@1100485003 : Record 11012677;WorkOrder@1100529000 : Record 11229279;Resource@1100529302 : Record 11229278;ServiceOrderCostPlusEntry@1100529400 : Record 11012825;PostingIC@1100529003 : Boolean;Existing@1100529300 : Boolean) : Boolean;
    VAR
      ServiceOrderCostPlusEntry2@1100485002 : Record 11012825;
      DimensionValue@1100529303 : Record 349;
      ServiceSetup@1100525003 : Record 11012800;
      SalesReceivablesSetup@1100529301 : Record 311;
      Employee@1100528500 : Record 5200;
      Price@1100525001 : Decimal;
      DontPostMaterial@1101285000 : Boolean;
      HourLineTemplate@1100525002 : Record 11229799;
      HourLineTemplateLine@1100525000 : Record 11012078;
    BEGIN
      ServiceSetup.GET;

      WITH DebriefCostPlusEntry DO BEGIN
      //>>180209
        IF ServiceSetup."Dont Post Labor to CostPlus" THEN
          IF "Hour Line Template Code" <> '' THEN
            EXIT;
      //<<180209
      //>>180903
        IF ServiceSetup."Dont Post Material to CostPlus" THEN BEGIN
          DontPostMaterial := FALSE;
          IF (DebriefCostPlusEntry."Item No."<>'') OR (DebriefCostPlusEntry."Trade Item"<>'') THEN
            DontPostMaterial := TRUE;
          IF ServiceOrderCostPlusEntry."FSA-Created Entry" AND (NOT DontPostMaterial) THEN BEGIN
            ServiceOrderCostPlusEntry.CALCFIELDS("Cost Type");
            IF ServiceOrderCostPlusEntry."Cost Type" = ServiceOrderCostPlusEntry."Cost Type"::Material THEN
              DontPostMaterial := TRUE;
          END;

          IF DontPostMaterial THEN BEGIN
            IF ("Trade Item" = '') AND ("Trade Item" <> "Item No.") THEN BEGIN
              "Trade Item" := "Item No.";
              MODIFY(FALSE);
            END;
            EXIT;
          END;
        END;
      //<<180903

        IF NOT PostingIC THEN BEGIN
          IF NOT Existing THEN BEGIN
            ServiceOrderCostPlusEntry.INIT;
            ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", WorkOrder."Source No.");
            ServiceOrderCostPlusEntry2.SETRANGE("Service Order No.", ServiceOrderCostPlusEntry."Service Order No.");
            IF ServiceOrderCostPlusEntry2.FINDLAST THEN
              ServiceOrderCostPlusEntry."Line No." := ServiceOrderCostPlusEntry2."Line No." + 10000
            ELSE
              ServiceOrderCostPlusEntry."Line No." := 10000;
            ServiceOrderCostPlusEntry.INSERT(TRUE);
            ServiceOrderCostPlusEntry."Created by Employee No." := Resource."Source No.";
            IF Resource.Company <> COMPANYNAME THEN
              ServiceOrderCostPlusEntry."Created by Employee Company" := Resource.Company;
            IF "Created by Work Order No." <> '' THEN
              ServiceOrderCostPlusEntry."Created by Work Order No." := "Created by Work Order No."
            ELSE
              ServiceOrderCostPlusEntry."Created by Work Order No." := WorkOrder."No.";
          END;

          //Note that the order of below validations is crucial, because
          IF ("Posting Date" <> 0D) THEN
            ServiceOrderCostPlusEntry.VALIDATE("Posting Date", "Posting Date");

      //C033836.so
      //  IF ("Item No." <> '') THEN
      //    ServiceOrderCostPlusEntry.VALIDATE("Item No.", "Item No.");
      //  IF ("Vendor (Trade Item)" <> '') THEN
      //    ServiceOrderCostPlusEntry.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
      //  IF ("Trade Item" <> '') THEN
      //    ServiceOrderCostPlusEntry.VALIDATE("Trade Item", "Trade Item");
      //C033836.eo
      //C035074.sn
      //new fix for C033836 gone bad
          IF ("Object No." <> '') THEN
            ServiceOrderCostPlusEntry.VALIDATE("Object No.", "Object No.");
          IF ("Item No." <> '') THEN
            ServiceOrderCostPlusEntry.VALIDATE("Item No.", "Item No.");
          IF ("Vendor (Trade Item)" <> '') OR ("Trade Item" <> '') THEN BEGIN
            ServiceOrderCostPlusEntry."Vendor (Trade Item)" := '';
            ServiceOrderCostPlusEntry."Trade Item" := '';
            IF ("Vendor (Trade Item)" <> '') THEN
              ServiceOrderCostPlusEntry.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
            IF ("Trade Item" <> '') THEN
              ServiceOrderCostPlusEntry.VALIDATE("Trade Item", "Trade Item");
          END;
      //C035074.sn

          IF ("Hour Line Template Code" <> '') THEN
            ServiceOrderCostPlusEntry.VALIDATE("Hour Line Template Code", "Hour Line Template Code");

          IF ("Cost Object" <> '') AND (ServiceOrderCostPlusEntry."Cost Object" = '') THEN BEGIN
            ServiceOrderCostPlusEntry.SetCostObject;
            ServiceOrderCostPlusEntry.VALIDATE("Cost Object","Cost Object");
          END;
          //C042914.sn
          IF (ServiceOrderCostPlusEntry."Cost Object" = '') AND (Resource."Source No." <> '') THEN BEGIN
            IF Resource.Company <> COMPANYNAME THEN
              Employee.CHANGECOMPANY(Resource.Company);
            IF Employee.GET(Resource."Source No.") THEN BEGIN
              IF Employee."Global Dimension 2 Code" <> '' THEN BEGIN
                ServiceOrderCostPlusEntry.SetCostObject;
                ServiceOrderCostPlusEntry.VALIDATE("Cost Object", Employee."Global Dimension 2 Code");
              END;
            END;
          END;
          //C042914.en

          IF ("Wage Component" <> '') THEN
            ServiceOrderCostPlusEntry.VALIDATE("Wage Component","Wage Component")
          ELSE BEGIN
            IF GetHourLineTemplate("Hour Line Template Code", HourLineTemplate) THEN BEGIN
              GetHourLineTemplateLine(HourLineTemplate, "Posting Date", HourLineTemplateLine);
              IF HourLineTemplateLine."Wage Component" <> '' THEN
                ServiceOrderCostPlusEntry.VALIDATE("Wage Component", HourLineTemplateLine."Wage Component");
            END;
          END;

          IF (NOT Existing) AND (Resource."Source No." <> '')  THEN BEGIN
            ServiceOrderCostPlusEntry.SetValidateHourRateCode(FALSE); //C038717.n
            DimensionValue.SETRANGE(Code, ServiceOrderCostPlusEntry."Cost Object");
            DimensionValue.SETRANGE("Global Dimension No.", 2);
            IF DimensionValue.FINDFIRST THEN
              IF DimensionValue."Cost Type" = DimensionValue."Cost Type"::Labor THEN BEGIN
                IF Resource.Company = COMPANYNAME THEN
                  ServiceOrderCostPlusEntry.VALIDATE("Employee No.", Resource."Source No.");
              END;
            ServiceOrderCostPlusEntry.VALIDATE("Resource No.", Resource."No.");
          END;
          IF ("Unit of Measure" <> '') THEN
            ServiceOrderCostPlusEntry.VALIDATE("Unit of Measure", "Unit of Measure");
          ServiceOrderCostPlusEntry.VALIDATE(Quantity, ROUND(Quantity, 0.00001));
          ServiceOrderCostPlusEntry.VALIDATE("Additional Cost", "Additional Cost");
          ServiceOrderCostPlusEntry.VALIDATE("Extra Cost", "Extra Cost");
          IF (Description <> '') THEN
            ServiceOrderCostPlusEntry.VALIDATE(Description, Description);
          IF ("Description 2" <> '') THEN
            ServiceOrderCostPlusEntry.VALIDATE("Description 2", "Description 2");
          ServiceOrderCostPlusEntry.CALCFIELDS("Cost Type");
          IF (((ServiceSetup."Description Cost Plus Entry" = ServiceSetup."Description Cost Plus Entry"::CostObject) AND (ServiceOrderCostPlusEntry."Cost Object" <> '')) OR
              ((ServiceSetup."Description Cost Plus Entry" = ServiceSetup."Description Cost Plus Entry"::WageComponent) AND (ServiceOrderCostPlusEntry."Wage Component" <> '')) OR
              ((ServiceSetup."Description Cost Plus Entry" = ServiceSetup."Description Cost Plus Entry"::RateCode) AND (ServiceOrderCostPlusEntry."Hour Rate Code" <> ''))) AND
             (ServiceOrderCostPlusEntry."Cost Type" = ServiceOrderCostPlusEntry."Cost Type"::Labor) THEN
            ServiceOrderCostPlusEntry.GetDescription;
          IF "Extra Cost" THEN
            IF Amount <> 0 THEN BEGIN
               IF Quantity <> 0 THEN
                 Price := Amount / Quantity
               ELSE
                 Price := Amount;
              ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", Price);
          END;
          ServiceOrderCostPlusEntry.VALIDATE("FSA-Created Entry", TRUE);

          IF ServiceOrderCostPlusEntry."Cost Type" = ServiceOrderCostPlusEntry."Cost Type"::Labor THEN
            ServiceOrderCostPlusEntry.GetCostPrice;

          IF ((NOT Existing) AND IsSUPOrder(WorkOrder."Source No.")) THEN
            ServiceOrderCostPlusEntry.VALIDATE(Chargeable, FALSE);

          ServiceOrderCostPlusEntry.VALIDATE("From Date", "From Date");
          ServiceOrderCostPlusEntry.VALIDATE("From Time", "From Time");
          ServiceOrderCostPlusEntry.VALIDATE("To Date", "To Date");
          ServiceOrderCostPlusEntry.VALIDATE("To Time", "To Time");

          ServiceOrderCostPlusEntry.MODIFY(TRUE);

          SalesReceivablesSetup.GET;
          IF SalesReceivablesSetup."Charge Removal Contribution" THEN  //CALL C025831 n
            ServiceOrderCostPlusEntry.DetermineRemovalContribLine(ServiceOrderCostPlusEntry, FALSE);
        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefItemJnlLine@1100528017(VAR DebriefItemJournalLine@1100528001 : Record 11126699;Logbook@1100528000 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100528015 : Record 11229279;
      ServiceOrder@1100528014 : Record 11012823;
      Project@1100528013 : Record 11072003;
      Resource@1100528012 : Record 11229278;
      Employee@1100528011 : Record 5200;
      Item@1100528009 : Record 27;
      UnitofMeasure@1100528004 : Record 204;
      PlantWorkOrder@1100527000 : Record 11229279;
      PlantResource@1100527001 : Record 11229278;
      PlantNumber@1100527003 : Record 11012552;
      Err@1100528002 : Boolean;
      MobileSetup@1100528020 : Record 11012676;
      ItemJournalLine@1100528019 : Record 83;
      ItemJournalLine2@1100528018 : Record 83;
      Location@1100528017 : Record 14;
      LocationCode@1100527004 : Code[20];
    BEGIN
      WITH DebriefItemJournalLine DO BEGIN
        IF NOT CheckWorkorder(Logbook, "Line No.", FALSE, WorkOrder, ServiceOrder, Project) THEN //don't have to be in workorder company
          EXIT(FALSE);

        IF NOT CheckResource(Logbook, "Line No.", TRUE, Resource, Employee) THEN //in resource company
          Err := TRUE;

        IF ("Posting Date" = 0D) THEN BEGIN
          Err := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001, FIELDCAPTION("Posting Date")), Logbook, "Line No.");
        END;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT Item.GET("Item No.") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Item No."), "Item No."), Logbook, "Line No.");
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT UnitofMeasure.GET("Unit of Measure") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Unit of Measure"), "Unit of Measure"), Logbook, "Line No.");
          END;
        END;
        IF NOT CheckMobSetupReasonReceivComp(WorkOrder."Source Company", Logbook, "Line No.") THEN
          Err := TRUE;

        IF Err THEN
          EXIT(FALSE);

        LocationCode := "Location Code";
        IF (WorkOrder."Operates Plant (WO)" <> '') THEN BEGIN
            PlantWorkOrder.GET(WorkOrder."Operates Plant (WO)");
            IF (PlantWorkOrder."Resource Type" = PlantWorkOrder."Resource Type"::Plant) AND
               (PlantResource.GET(PlantWorkOrder."Resource No.")) THEN
              IF PlantNumber.GET(PlantResource."Source No.", PlantResource."Source No. 2") THEN
                IF PlantNumber.Location <> '' THEN
                  LocationCode := PlantNumber.Location;
        END;

        MobileSetup.GET;

        IF MobileSetup.IsUnassignedStockMutationItemJournalEnabled THEN BEGIN
          IF Employee."Location Code" <> '' THEN
            LocationCode := Employee."Location Code"
          ELSE BEGIN
            LocationCode := '';
            MobileSetup."Item Journal Template" := MobileSetup."Unass. St. Mt. Item Jnl. Tmpl.";
            MobileSetup."Item Journal Batch" := MobileSetup."Unass. St. Mt. Item Jnl. Batch";
          END;
        END;

        IF (LocationCode <> '') THEN BEGIN
          IF Location.GET(LocationCode) THEN BEGIN
            IF (Location."Inventory Journal Template" <> '') AND (Location."Inventory Journal Batch" <> '') THEN BEGIN
              MobileSetup."Item Journal Template" := Location."Inventory Journal Template";
              MobileSetup."Item Journal Batch" := Location."Inventory Journal Batch";
            END;
          END;
        END;
        MobileSetup.TESTFIELD("Item Journal Template");
        MobileSetup.TESTFIELD("Item Journal Batch");

        ItemJournalLine.INIT;
        ItemJournalLine.VALIDATE("Journal Template Name", MobileSetup."Item Journal Template");
        ItemJournalLine.VALIDATE("Journal Batch Name", MobileSetup."Item Journal Batch");
        ItemJournalLine2.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
        ItemJournalLine2.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");
        IF ItemJournalLine2.FINDLAST THEN
          ItemJournalLine."Line No." := ItemJournalLine2."Line No." + 10000
        ELSE
          ItemJournalLine."Line No." := 10000;
        ItemJournalLine2."Entry Type" := ItemJournalLine."Entry Type"::Sale;
        ItemJournalLine.SetUpNewLine(ItemJournalLine2);
        ItemJournalLine.INSERT(TRUE);
        ItemJournalLine."Document No." := WorkOrder."Source No.";
        IF ("Posting Date" <> 0D) THEN
          ItemJournalLine.VALIDATE("Posting Date", "Posting Date");
        IF WorkOrder."Source Company" <> COMPANYNAME THEN
          ItemJournalLine.VALIDATE("Receiving Company", WorkOrder."Source Company");
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder : ItemJournalLine.VALIDATE("Service Order No.", WorkOrder."Source No.");
          WorkOrder."Source Type"::Project : ItemJournalLine.VALIDATE("Job No.", WorkOrder."Source No.");
        END;
        IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
          IF WorkOrder."Project Element" <> '' THEN
            ItemJournalLine.VALIDATE(Element, WorkOrder."Project Element");
          IF WorkOrder."Extension Contract" <> '' THEN
            ItemJournalLine.VALIDATE("Extension Contract", WorkOrder."Extension Contract");
          IF WorkOrder."Plot No." <> '' THEN
            ItemJournalLine."Plot No." := WorkOrder."Plot No.";
        END;
        IF ("Item No." <> '') THEN BEGIN
          ItemJournalLine.VALIDATE("Item No.", "Item No.");
          IF (LocationCode <> '') THEN
            ItemJournalLine.VALIDATE("Location Code", LocationCode);
          IF ("Unit of Measure" <> '') THEN
            ItemJournalLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
          IF (Quantity <> 0) THEN
            ItemJournalLine.VALIDATE(Quantity, ROUND(Quantity, 0.00001));
        END ELSE BEGIN  //because in validation of Location Code a.o. the Item No. is being used.
          IF (LocationCode <> '') THEN
            ItemJournalLine."Location Code" := LocationCode;
          IF ("Unit of Measure" <> '') THEN
            ItemJournalLine."Unit of Measure Code" := "Unit of Measure";
          IF (Quantity <> 0) THEN
            ItemJournalLine.Quantity := ROUND(Quantity, 0.00001);
        END;
        IF (Description <> '') THEN
          ItemJournalLine.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          ItemJournalLine.VALIDATE("Description 2", "Description 2");
        IF ("Posting Date" <> 0D) THEN
          ItemJournalLine.VALIDATE("Delivery Date", "Posting Date");
        IF (MobileSetup."Reason Code Hours/Material" <> '') THEN
          ItemJournalLine."Reason Code" := MobileSetup."Reason Code Hours/Material";
        IF (Resource.Type = Resource.Type::Employee) AND (Resource."Source No." <> '') THEN BEGIN
          IF (Resource.Company <> COMPANYNAME) THEN
            ItemJournalLine.VALIDATE("Employee Company", Resource.Company);
          ItemJournalLine.VALIDATE("Employee No.", Resource."Source No.");
        END;
        ItemJournalLine."Origin Type Line" := ItemJournalLine."Origin Type Line"::FieldService;
        ItemJournalLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefAdviceOrderLine@1100485007(VAR VarDebriefAdviceOrderRec@1100485001 : Record 11012682;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
      Resource@1100529003 : Record 11229278;
      Empl@1100529004 : Record 5200;
      lvAdvOrderRec@1100485004 : Record 11012055;
      lvAdvOrderRec2@1100485002 : Record 11012055;
      lvTradeItem@1210190000 : Record 11012317;
      lvETIMVendor@1210190001 : Record 11012304;
      lvItemRec@1100485005 : Record 27;
      lvUnitRec@1100485012 : Record 204;
      ETIMVendor@1100528001 : Record 11012304;
      TradeItem@1100528000 : Record 11012317;
      lvError@1100485000 : Boolean;
    BEGIN
      WITH VarDebriefAdviceOrderRec DO BEGIN
        JobSetup.GET;
        //* Check
        IF NOT CheckWorkorder(ILogbookRec, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN
          EXIT(FALSE); //* If not ok then no more testing
        IF NOT CheckResource(ILogbookRec, "Line No.", FALSE, Resource, Empl) THEN
          lvError := TRUE;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT lvItemRec.GET("Item No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Item No."),"Item No."),ILogbookRec,"Line No.");
          END;
        END;
        IF (Quantity = 0) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION(Quantity)),ILogbookRec,"Line No.");
        END;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT ETIMVendor.GET("Vendor (Trade Item)") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Vendor (Trade Item)"), "Vendor (Trade Item)"), ILogbookRec, "Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT TradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
            IF NOT AddTradeItem("Vendor (Trade Item)", "Trade Item") THEN BEGIN
              lvError := TRUE;
              ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Trade Item"),
                STRSUBSTNO('%1; %2', "Vendor (Trade Item)", "Trade Item")), ILogbookRec, "Line No.");
            END;
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT lvUnitRec.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Unit of Measure"),"Unit of Measure"),ILogbookRec,"Line No.");
          END;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvAdvOrderRec.INIT;
        lvAdvOrderRec.SetFrom4PSMobile();
        IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
          lvAdvOrderRec."Record Type" := lvAdvOrderRec."Record Type"::Project;
          lvAdvOrderRec."Service Order No." := '';
          lvAdvOrderRec.VALIDATE("Project No.", WorkOrder."Source No.");
        END ELSE BEGIN
          lvAdvOrderRec."Record Type" := lvAdvOrderRec."Record Type"::ServOrder;
          lvAdvOrderRec."Project No." := '';
          lvAdvOrderRec.VALIDATE("Service Order No.", WorkOrder."Source No.");
        END;
        lvAdvOrderRec2.SETRANGE("Record Type", lvAdvOrderRec."Record Type");
        lvAdvOrderRec2.SETRANGE("Project No.", lvAdvOrderRec."Project No.");
        lvAdvOrderRec2.SETRANGE("Service Order No.", lvAdvOrderRec."Service Order No.");
        IF lvAdvOrderRec2.FINDLAST THEN
          lvAdvOrderRec."Line No." := lvAdvOrderRec2."Line No." + 10000
        ELSE
          lvAdvOrderRec."Line No." := 10000;
        lvAdvOrderRec.INSERT(TRUE);
        lvAdvOrderRec.InitRecord;

        IF ("Item No." <> '') THEN
          lvAdvOrderRec.VALIDATE("Item No.", "Item No.");
        IF (("Vendor (Trade Item)" <> '') AND ("Trade Item" <> '')) THEN BEGIN
          IF lvETIMVendor.GET("Vendor (Trade Item)") THEN BEGIN
            IF lvTradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
              lvAdvOrderRec.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
              lvAdvOrderRec.VALIDATE("Trade Item","Trade Item");
            END;
          END;
        END;
        lvAdvOrderRec."Comments for Logistics" := "Comments for Logistics";
        IF ( lvAdvOrderRec."Cost Object" = '') THEN BEGIN
          MobileSetupRec.GET('');
          lvAdvOrderRec.VALIDATE("Cost Object", MobileSetupRec."Def. Cost Object Items");
        END;
        IF (Description <> '') THEN
          lvAdvOrderRec.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          lvAdvOrderRec.VALIDATE("Description 2", "Description 2");
        IF ("Unit of Measure" <> '') THEN
          lvAdvOrderRec.VALIDATE("Unit of Measure", "Unit of Measure");
        IF (Quantity <> 0) THEN
          lvAdvOrderRec.VALIDATE("Quantity (Advice)", ROUND(Quantity,0.00001));
        lvAdvOrderRec."Created by Employee No." := Resource."Source No.";
        IF Resource.Company <> COMPANYNAME THEN
          lvAdvOrderRec."Created by Employee Company" := Resource.Company;
        lvAdvOrderRec."Created by Work Order No." := WorkOrder."No.";
        lvAdvOrderRec."Decentral Created" := TRUE;
        lvAdvOrderRec.VALIDATE("Decentral Created Guid", VarDebriefAdviceOrderRec."Decentral Created Guid");
        lvAdvOrderRec.VALIDATE("Purchase by Field Service", Purchase);
        IF Purchase THEN BEGIN
      //    lvAdvOrderRec.VALIDATE(Transaction, lvAdvOrderRec.Transaction::Purchase);
          lvAdvOrderRec.VALIDATE(Transaction, JobSetup."Advice Order Purch.Transaction");
          IF ("Vendor No." <> '') THEN
            lvAdvOrderRec.VALIDATE(Vendor, VarDebriefAdviceOrderRec."Vendor No.");
          lvAdvOrderRec."Order Date" := TODAY;
        END;
        lvAdvOrderRec.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefAdviceOrderLineText@1100525007(DebriefAdviceOrderLineText@1100525000 : Record 11229870;Logbook@1100525005 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100525008 : Record 11229279;
      ServiceOrder@1100525007 : Record 11012823;
      Project@1100525006 : Record 11072003;
      AdviceOrderLine@1100525009 : Record 11012055;
      CommentLineJobText@1100525002 : Record 11020634;
      CommentLineJobText2@1100525003 : Record 11020634;
      RecRef@1100525004 : RecordRef;
    BEGIN
      IF NOT CheckWorkorder(Logbook, DebriefAdviceOrderLineText."Line No.", TRUE, WorkOrder, ServiceOrder, Project) THEN
        EXIT(FALSE);

      IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
        AdviceOrderLine.SETFILTER("Service Order No.", '%1', '');
        AdviceOrderLine.SETRANGE("Project No.", WorkOrder."Source No.");
      END ELSE BEGIN
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        AdviceOrderLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
        AdviceOrderLine.SETFILTER("Project No.", '%1', '');
      END;
      AdviceOrderLine.SETRANGE("Decentral Created Guid", DebriefAdviceOrderLineText."Decentral Created Guid");
      AdviceOrderLine.FINDFIRST;
      RecRef.GETTABLE(AdviceOrderLine);
      CommentLineJobText.INIT;
      CommentLineJobText."Table Name" := CommentLineJobText."Table Name"::"Advice Order";
      CommentLineJobText."Record ID" := RecRef.RECORDID;
      CommentLineJobText2.SETRANGE("Table Name", CommentLineJobText."Table Name");
      CommentLineJobText2.SETRANGE("Record ID", CommentLineJobText."Record ID");
      IF CommentLineJobText2.FINDLAST THEN
        CommentLineJobText."Line No." := CommentLineJobText2."Line No." + 10000
      ELSE
        CommentLineJobText."Line No." := 10000;
      CommentLineJobText.Comment := DebriefAdviceOrderLineText.Comment;
      CommentLineJobText.Date := TODAY;
      CommentLineJobText."Time Created" := TIME;
      CommentLineJobText."Line Break" := TRUE;
      CommentLineJobText.INSERT(TRUE);
    END;

    LOCAL PROCEDURE PostDebriefCreatePurchOrder@1100525003(VAR DebriefCreatePurchOrd@1100485007 : Record 11125648;ILogbookRec@1100485001 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527000 : Record 11229279;
      ServOrder@1100527001 : Record 11012823;
      Project@1100527002 : Record 11072003;
      AdviceOrderLine@1100525000 : Record 11012055;
      AdviceOrderToPurchaseOrder@1100528000 : Codeunit 11229162;
    BEGIN
      WITH DebriefCreatePurchOrd DO BEGIN
        JobSetup.GET;
        //* Check
        IF NOT CheckWorkorder(ILogbookRec, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN
          EXIT(TRUE); //* Exit True. If WO not present/not ok then nothing to process (no advice lines of WO).

        //* Post
        IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
          AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
          AdviceOrderLine.SETRANGE("Project No.", WorkOrder."Source No.");
          AdviceOrderLine.SETFILTER("Service Order No.", '%1', '');
        END ELSE BEGIN
          AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
          AdviceOrderLine.SETFILTER("Project No.", '%1', '');
          AdviceOrderLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
        END;
        //AdviceOrderLine.SETRANGE(Transaction, AdviceOrderLine.Transaction::Purchase);
        AdviceOrderLine.SETRANGE(Transaction, JobSetup."Advice Order Purch.Transaction");
        AdviceOrderLine.SETFILTER(Vendor, '<>%1', '');
        AdviceOrderLine.SETRANGE("Created by Work Order No.", "Work Order No.");
        AdviceOrderLine.SETRANGE("Decentral Created", TRUE);
        AdviceOrderLine.SETRANGE(Processed, FALSE);
        AdviceOrderLine.SETRANGE("Purchase by Field Service", TRUE);
        AdviceOrderLine.SETCURRENTKEY("Record Type");
        IF NOT AdviceOrderLine.FINDSET(FALSE, FALSE) THEN
          EXIT(TRUE);  // Nothing to process, so OK
        REPEAT
          AdviceOrderLine.MARK(TRUE);
        UNTIL AdviceOrderLine.NEXT = 0;
        //EXIT(CreatePurchOrderFromAdvOrder(AdviceOrderLine, DebriefCreatePurchOrd, ILogbookRec));
        AdviceOrderToPurchaseOrder.RUN(AdviceOrderLine);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefStatusFS@1100485002(VAR VarDebriefStatusFS@1100485006 : Record 11012683;Logbook@1100485007 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527000 : Record 11229279;
      ServOrder@1100527001 : Record 11012823;
      Project@1100527002 : Record 11072003;
      Resource@1100527005 : Record 11229278;
      Empl@1100527004 : Record 5200;
      FieldServiceStatus@1100527003 : Record 11012274;
      RelatedWorkOrder@1100527006 : Record 11229279;
      WorkOrderReferencePoint@1100525000 : Record 11229282;
      lvError@1100485000 : Boolean;
    BEGIN
      WITH VarDebriefStatusFS DO BEGIN
        //* Check
        IF ("Field Service Status" = '') THEN
          EXIT(TRUE);  //* No action needed
        IF NOT CheckWorkorder(Logbook, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN
          EXIT(FALSE);
        IF NOT CheckResource(Logbook, "Line No.", FALSE, Resource, Empl) THEN
          lvError := TRUE;
        IF NOT FieldServiceStatus.GET(FieldServiceStatus.Type::Status, "Field Service Status") THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Field Service Status"),"Field Service Status"),Logbook,"Line No.");
        END;
        IF ("Date/Time" = 0DT) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION("Date/Time")),Logbook,"Line No.");
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        WorkOrder.GET("Work Order No.");
        WorkOrder.VALIDATE("Actual Field Service Status", "Field Service Status");
        WorkOrder.SetDateTimeRefPointRegistr("Date/Time");
        WorkOrder.SetReferencePointModifiedByEmployee(Resource."Source No.");
        WorkOrder.MODIFY(TRUE);

        WorkOrderReferencePoint.SETRANGE("Work Order No.", WorkOrder."No.");
        WorkOrderReferencePoint.SETRANGE("Field Service Status", WorkOrder."Actual Field Service Status");
        IF WorkOrderReferencePoint.FINDLAST THEN BEGIN
          WorkOrderReferencePoint."Geo Status" := "Geo Status";
          WorkOrderReferencePoint.Longitude := Longitude;
          WorkOrderReferencePoint.Latitude := Latitude;
          WorkOrderReferencePoint."Fld Srv Status Reason Desc." := "Fld Srv Status Reason Desc.";
          WorkOrderReferencePoint.MODIFY(FALSE);
        END;

        IF ("Fld Srv Status Reason Desc." <> '') THEN BEGIN
          WorkOrder.GET("Work Order No.");
          WorkOrder."Fld Srv Status Reason Desc." := "Fld Srv Status Reason Desc.";
          WorkOrder.MODIFY(FALSE);
        END;

        IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
          IF ("Field Service Status" = '20') OR ("Field Service Status" = '25') OR ("Field Service Status" = '500') THEN BEGIN
            IF ServOrder.GET(WorkOrder."Source No.") THEN BEGIN
              IF ServOrder."Export to FSA" THEN BEGIN
                RelatedWorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
                RelatedWorkOrder.SETRANGE("Source Company", WorkOrder."Source Company");
                RelatedWorkOrder.SETRANGE("Source Type", WorkOrder."Source Type");
                RelatedWorkOrder.SETRANGE("Source No.", WorkOrder."Source No.");
                RelatedWorkOrder.SETRANGE("Export to FSA", TRUE);
                IF RelatedWorkOrder.ISEMPTY THEN
                  ServOrder."Export to FSA" := FALSE;
              END;
              IF "Date/Time" > ServOrder."Date/Time Export to FSA" THEN
                ServOrder."Date/Time Export to FSA" := "Date/Time";
              ServOrder.MODIFY(FALSE);
            END;
          END;
          UpdateFLSStatus(ServOrder, VarDebriefStatusFS);
        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefTextLine@1100529006(VAR DebriefTextLine@1100485003 : Record 11012684;Logbook@1100485005 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefTextLine."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefTextLineSO(DebriefTextLine, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefTextLine."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefTextLineSO@1100485003(VAR VarDebriefTextRec@1100485003 : Record 11012684;ILogbookRec@1100485005 : Record 11012677;WorkOrder@1100529001 : Record 11229279) : Boolean;
    VAR
      lvDebriefTextRec@1100485004 : Record 11012886;
      lvDebriefTextRec2@1100485001 : Record 11012886;
      lvError@1100485000 : Boolean;
      lvNextLineNo@1100485006 : Integer;
    BEGIN
      WITH VarDebriefTextRec DO BEGIN
        //* Check
        //* Accept unknown rubric (can be added later on) and employee (is only 'Modified by') here.

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvDebriefTextRec.RESET;
        lvDebriefTextRec.SETRANGE(Type, lvDebriefTextRec.Type::ServiceOrder);
        lvDebriefTextRec.SETRANGE("No.", WorkOrder."Source No.");
        IF lvDebriefTextRec.FINDLAST THEN
          lvNextLineNo := lvDebriefTextRec."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        lvDebriefTextRec.RESET;
        lvDebriefTextRec.INIT;
        lvDebriefTextRec.Type := lvDebriefTextRec.Type::ServiceOrder;
        lvDebriefTextRec.VALIDATE("No.", WorkOrder."Source No.");
        lvDebriefTextRec2.SETRANGE(Type, lvDebriefTextRec.Type);
        lvDebriefTextRec2.SETRANGE("No.", lvDebriefTextRec."No.");
        IF lvDebriefTextRec2.FINDLAST THEN
          lvDebriefTextRec."Line No." := lvDebriefTextRec2."Line No." + 10000
        ELSE
          lvDebriefTextRec."Line No." := 10000;

        IF (Date <> 0D) THEN
          lvDebriefTextRec.Date := Date;
        IF ("Text Rubric" <> '') THEN
          lvDebriefTextRec.Rubric := "Text Rubric";
        lvDebriefTextRec.Comment := Comment;
        lvDebriefTextRec."Work Order No." := "Work Order No."; // dp00563.n

        lvDebriefTextRec.FillModifiedBy();
        IF ("Resource No. (Employee)" <> '') THEN
          lvDebriefTextRec."Modified by Resource" := "Resource No. (Employee)";  // Mod. by Empl is a Resource No.
        lvDebriefTextRec.INSERT(FALSE);  //* FALSE!

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefHourLine@1100528201(VAR VarDebriefHourAccRec@1100528201 : Record 11012685;ILogbookRec@1100528200 : Record 11012677) : Boolean;
    BEGIN
      MobileSetupRec.GET('');
      CASE MobileSetupRec."Hours Destination" OF
        MobileSetupRec."Hours Destination"::"Hour Accounting":
          BEGIN
            EXIT(PostDebriefHourAccLine(gDebriefHourAccountingLine, ILogbookRec));
          END;
        MobileSetupRec."Hours Destination"::"Site Mgnmnt. Hours":
          BEGIN
            EXIT(PostDebriefSiteMngmntHourLine(gDebriefHourAccountingLine, ILogbookRec));
          END;
      END;
    END;

    LOCAL PROCEDURE PostDebriefHourAccLine@1100485005(VAR VarDebriefHourAccRec@1100485016 : Record 11012685;ILogbookRec@1100485017 : Record 11012677) : Boolean;
    VAR
      lvHourAccRec@1100485012 : Record 11012038;
      lvHourAccLineRec@1100485004 : Record 11012039;
      lvHourAccLineRec2@1100485018 : Record 11012039;
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529002 : Record 11012823;
      Project@1100529003 : Record 11072003;
      Resource@1100529000 : Record 11229278;
      lvEmplRec@1100485001 : Record 5200;
      lvCostCodeRec@1100485005 : Record 11012083;
      lvDimValRec@1100485009 : Record 349;
      lvWageCompRec@1100485011 : Record 11012014;
      HourLineTemplate@1100529400 : Record 11229799;
      HourLineTemplateLine@1100528700 : Record 11012078;
      lvError@1100485000 : Boolean;
      lvYear@1100485003 : Integer;
      lvWeek@1100485008 : Integer;
      lvLineQuantity@1100485013 : Decimal;
      DepartmentCodeTemplate@1100528000 : Code[20];
      CountryRegion@1100526000 : Record 9;
    BEGIN
      WITH VarDebriefHourAccRec DO BEGIN
        MobileSetupRec.GET('');
        GLSetupRec.GET;

        //* Check
        IF NOT CheckResource(ILogbookRec, "Line No.", TRUE, Resource, lvEmplRec) THEN
          lvError := TRUE;
        IF (Date = 0D) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION(Date)),ILogbookRec,"Line No.");
        END;
        IF (Type = Type::Indirect) THEN BEGIN
          IF (("Cost Code" = '') AND ("Hour Line Template Code" = '')) OR
             (("Cost Code" <> '') AND (NOT lvCostCodeRec.GET("Cost Code"))) THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Cost Code"),"Cost Code"),ILogbookRec,"Line No.");
          END;
        END;
        IF (Type = Type::Direct) THEN BEGIN
          IF NOT CheckWorkorder(ILogbookRec, "Line No.", FALSE, WorkOrder, ServOrder, Project) THEN
            lvError := TRUE;
          IF WorkOrder."Source Company" <> COMPANYNAME THEN BEGIN
            IF NOT CheckMobSetupReasonReceivComp(WorkOrder."Source Company", ILogbookRec, "Line No.") THEN
              lvError := TRUE;
          END;
        END;
        IF ("Cost Object" <> '') THEN BEGIN
          IF NOT lvDimValRec.GET(GLSetupRec."Shortcut Dimension 2 Code","Cost Object") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Cost Object"),"Cost Object"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Wage Component" <> '') THEN BEGIN
          IF NOT lvWageCompRec.GET("Wage Component") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Wage Component"),"Wage Component"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Hour Line Template Code" <> '') THEN BEGIN
          IF NOT HourLineTemplate.GET(HourLineTemplate.Source::"Hour Accounting", COMPANYNAME, "Hour Line Template Code") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Hour Line Template Code"),"Hour Line Template Code"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Country/Region Code From" <> '') THEN BEGIN
          IF NOT CountryRegion.GET("Country/Region Code From") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Country/Region Code From"),"Country/Region Code From"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Country/Region Code To" <> '') THEN BEGIN
          IF NOT CountryRegion.GET("Country/Region Code To") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Country/Region Code To"),"Country/Region Code To"),ILogbookRec,"Line No.");
          END;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvYear := DATE2DWY(Date, 3);
        lvWeek := DATE2DWY(Date, 2);
        IF NOT lvHourAccRec.GET(lvYear, lvWeek, Resource."Source No.") THEN BEGIN
          lvHourAccRec.INIT;
          lvHourAccRec.SetSuppressMessages(TRUE);
          lvHourAccRec.VALIDATE(Year, lvYear);
          lvHourAccRec.VALIDATE(Week, lvWeek);
          lvHourAccRec.VALIDATE("Employee No.", Resource."Source No.");
          lvHourAccRec.INSERT(TRUE);
        END;

        lvHourAccLineRec.INIT;
        lvHourAccLineRec.VALIDATE(Year, lvYear);
        lvHourAccLineRec.VALIDATE(Week, lvWeek);
        lvHourAccLineRec.VALIDATE("Employee No.", Resource."Source No.");
        lvHourAccLineRec2.SETRANGE(Year, lvHourAccLineRec.Year);
        lvHourAccLineRec2.SETRANGE(Week, lvHourAccLineRec.Week);
        lvHourAccLineRec2.SETRANGE("Employee No.", lvHourAccLineRec."Employee No.");
        IF (VarDebriefHourAccRec.Quantity = 0) AND (VarDebriefHourAccRec."Time From" <> 0T) THEN
          lvHourAccLineRec."Line No." := GetLineNoBasedOnTimeHourAcc(lvHourAccLineRec.Year, lvHourAccLineRec.Week, DATE2DWY(Date, 1), lvHourAccLineRec."Employee No.", VarDebriefHourAccRec."Time From");
        IF lvHourAccLineRec."Line No." = 0 THEN BEGIN
          IF lvHourAccLineRec2.FINDLAST THEN
            lvHourAccLineRec."Line No." := lvHourAccLineRec2."Line No." + 10000
          ELSE
            lvHourAccLineRec."Line No." := 10000;
        END;

        IF (Type = Type::Indirect) THEN
          lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Indirect);

        IF ("Hour Line Template Code" <> '') THEN BEGIN
          lvHourAccLineRec.VALIDATE("Hour Line Template Code", "Hour Line Template Code");
          DepartmentCodeTemplate := lvHourAccLineRec."Department Code";
        END;

        IF (Type = Type::Indirect) AND ("Hour Line Template Code" = '') THEN
          lvHourAccLineRec.VALIDATE("Cost Code", "Cost Code");

        IF (Type = Type::Direct) THEN BEGIN
          IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN
            lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Project)
          ELSE
            lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Service);
          IF WorkOrder."Source Company" <> COMPANYNAME THEN
            lvHourAccLineRec.VALIDATE("Receiving Company", WorkOrder."Source Company");
          IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
            lvHourAccLineRec.VALIDATE("Project No.", WorkOrder."Source No.");
            IF (WorkOrder."Project Element" <> '') THEN
              lvHourAccLineRec.VALIDATE(Element, WorkOrder."Project Element");
            IF (WorkOrder."Extension Contract" <> '') THEN
              lvHourAccLineRec.VALIDATE("Extension Contract", WorkOrder."Extension Contract");
          END ELSE BEGIN
            lvHourAccLineRec.VALIDATE("Service Order No.", WorkOrder."Source No."); //* Serv.location also filled here
            lvHourAccLineRec.VALIDATE("Additional Cost (Service)", "Additional Cost (Service)");
          END;
        END;

        IF ("Hour Line Template Code" = '') THEN BEGIN
          IF "Wage Component" <> '' THEN                                            //** 4PS01.n
            //in code above the wagecomponent of the costobject of the employee is set. Overrule it here because it may not
            //match the cost object below.
            lvHourAccLineRec."Wage Component" := "Wage Component";                  //** 4PS01.n
          IF ("Cost Object" <> '') THEN
            lvHourAccLineRec.VALIDATE("Cost Object", "Cost Object");
          IF ("Wage Component" <> '') THEN
            lvHourAccLineRec.VALIDATE("Wage Component", "Wage Component")
        END ELSE BEGIN
          IF (DepartmentCodeTemplate <> '') THEN
            lvHourAccLineRec.VALIDATE("Department Code", DepartmentCodeTemplate);
          GetHourLineTemplateLine(HourLineTemplate, Date, HourLineTemplateLine);
          IF HourLineTemplateLine."Wage Component" <> '' THEN
            lvHourAccLineRec.VALIDATE("Wage Component", HourLineTemplateLine."Wage Component");
        END;
        lvHourAccLineRec.CALCFIELDS("Component Type");

        IF (Quantity = 0) AND (("Time From" <> 0T) OR ("Time Until" <> 0T)) THEN BEGIN
          //Hour Accounting on Time
          lvHourAccLineRec.Day := DATE2DWY(Date, 1);
          lvHourAccLineRec.VALIDATE("Time From", "Time From");
          lvHourAccLineRec.VALIDATE("Time Until", "Time Until");
        END ELSE BEGIN
          lvLineQuantity := ROUND(Quantity,0.001);
          IF (lvHourAccLineRec."Component Type" = lvHourAccLineRec."Component Type"::Expenses) THEN BEGIN
            IF Amount = 0 THEN BEGIN
              lvHourAccLineRec."Unit Cost (LCY)" := 0;     //* Enforce that rate of expenses is determined
              lvHourAccLineRec.CalcRateAndAmount();
              lvHourAccLineRec.VALIDATE(Quantity, lvLineQuantity);
            END ELSE BEGIN
              lvHourAccLineRec.VALIDATE(Quantity, lvLineQuantity);
              lvHourAccLineRec.VALIDATE("Amount (LCY)", Amount);
            END;
          END ELSE BEGIN
            CASE DATE2DWY(Date, 1) OF
              1: lvHourAccLineRec.VALIDATE(Monday, lvLineQuantity);
              2: lvHourAccLineRec.VALIDATE(Tuesday, lvLineQuantity);
              3: lvHourAccLineRec.VALIDATE(Wednesday, lvLineQuantity);
              4: lvHourAccLineRec.VALIDATE(Thursday, lvLineQuantity);
              5: lvHourAccLineRec.VALIDATE(Friday, lvLineQuantity);
              6: lvHourAccLineRec.VALIDATE(Saturday, lvLineQuantity);
              7: lvHourAccLineRec.VALIDATE(Sunday, lvLineQuantity);
            END;
          END;
          IF "Post Start and End Time" THEN BEGIN
            lvHourAccLineRec.VALIDATE("Start Time", "Start Time");
            lvHourAccLineRec.VALIDATE("End Time", "End Time");
          END;
        END;

        lvHourAccLineRec.VALIDATE("Address From", COPYSTR("Address From",1,MAXSTRLEN(lvHourAccLineRec."Address From")));
        lvHourAccLineRec.VALIDATE("Post Code From", COPYSTR("Post Code From",1,MAXSTRLEN(lvHourAccLineRec."Post Code From")));
        lvHourAccLineRec.VALIDATE("City From", COPYSTR("City From",1,MAXSTRLEN(lvHourAccLineRec."City From")));
        lvHourAccLineRec.VALIDATE("Country/Region Code From", "Country/Region Code From");
        lvHourAccLineRec.VALIDATE("Departure Date", DT2DATE(Departure));
        lvHourAccLineRec.VALIDATE("Departure Time", DT2TIME(Departure));

        lvHourAccLineRec.VALIDATE("Address To", COPYSTR("Address To",1,MAXSTRLEN(lvHourAccLineRec."Address To")));
        lvHourAccLineRec.VALIDATE("Post Code To", COPYSTR("Post Code To",1,MAXSTRLEN(lvHourAccLineRec."Post Code To")));
        lvHourAccLineRec.VALIDATE("City To", COPYSTR("City To",1,MAXSTRLEN(lvHourAccLineRec."City To")));
        lvHourAccLineRec.VALIDATE("Country/Region Code To", "Country/Region Code To");
        lvHourAccLineRec.VALIDATE("Arrival Date", DT2DATE(Arrival));
        lvHourAccLineRec.VALIDATE("Arrival Time", DT2TIME(Arrival));

        IF (Comment <> '') THEN
          lvHourAccLineRec.VALIDATE(Comment, COPYSTR(Comment,1,MAXSTRLEN(lvHourAccLineRec.Comment)));
        lvHourAccLineRec."Posting Date" := Date;
        lvHourAccLineRec.INSERT(TRUE);

        IF (MobileSetupRec."Reason Code Hours/Material" <> '') THEN BEGIN
          lvHourAccLineRec."Reason Code" := MobileSetupRec."Reason Code Hours/Material";
          lvHourAccLineRec.MODIFY(TRUE);
        END;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefSiteMngmntHourLine@1100528200(VAR VarDebriefHourAccRec@1100485016 : Record 11012685;ILogbookRec@1100485017 : Record 11012677) : Boolean;
    VAR
      SiteMngmntHoursHeader@1100485012 : Record 11012360;
      SiteMngmntHoursLine@1100485004 : Record 11012361;
      SiteMngmntHoursLine2@1100485018 : Record 11012361;
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529002 : Record 11012823;
      Project@1100529003 : Record 11072003;
      Resource@1100529000 : Record 11229278;
      lvEmplRec@1100485001 : Record 5200;
      lvCostCodeRec@1100485005 : Record 11012083;
      lvDimValRec@1100485009 : Record 349;
      lvWageCompRec@1100485011 : Record 11012014;
      HourLineTemplate@1100529400 : Record 11229799;
      HourLineTemplateLine@1100528700 : Record 11012078;
      lvError@1100485000 : Boolean;
      lvYear@1100485003 : Integer;
      lvWeek@1100485008 : Integer;
      lvLineQuantity@1100485013 : Decimal;
      CountryRegion@1100526000 : Record 9;
    BEGIN
      WITH VarDebriefHourAccRec DO BEGIN
        MobileSetupRec.GET('');
        GLSetupRec.GET;

        //* Check
        IF NOT CheckResource(ILogbookRec, "Line No.", TRUE, Resource, lvEmplRec) THEN
          lvError := TRUE;
        IF (Date = 0D) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION(Date)),ILogbookRec,"Line No.");
        END;
        IF (Type = Type::Indirect) THEN BEGIN
          IF (("Cost Code" = '') AND ("Hour Line Template Code" = '')) OR
             (("Cost Code" <> '') AND (NOT lvCostCodeRec.GET("Cost Code"))) THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Cost Code"),"Cost Code"),ILogbookRec,"Line No.");
          END;
        END;
        IF (Type = Type::Direct) THEN BEGIN
          IF NOT CheckWorkorder(ILogbookRec, "Line No.", FALSE, WorkOrder, ServOrder, Project) THEN
            lvError := TRUE;
          IF WorkOrder."Source Company" <> COMPANYNAME THEN BEGIN
            IF NOT CheckMobSetupReasonReceivComp(WorkOrder."Source Company", ILogbookRec, "Line No.") THEN
              lvError := TRUE;
          END;
        END;
        IF ("Cost Object" <> '') THEN BEGIN
          IF NOT lvDimValRec.GET(GLSetupRec."Shortcut Dimension 2 Code","Cost Object") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Cost Object"),"Cost Object"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Wage Component" <> '') THEN BEGIN
          IF NOT lvWageCompRec.GET("Wage Component") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Wage Component"),"Wage Component"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Hour Line Template Code" <> '') THEN BEGIN
          IF NOT HourLineTemplate.GET(HourLineTemplate.Source::"Site Mngmnt. Hours", COMPANYNAME, "Hour Line Template Code") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Hour Line Template Code"),"Hour Line Template Code"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Country/Region Code From" <> '') THEN BEGIN
          IF NOT CountryRegion.GET("Country/Region Code From") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Country/Region Code From"),"Country/Region Code From"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Country/Region Code To" <> '') THEN BEGIN
          IF NOT CountryRegion.GET("Country/Region Code To") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Country/Region Code To"),"Country/Region Code To"),ILogbookRec,"Line No.");
          END;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvYear := DATE2DWY(Date, 3);
        lvWeek := DATE2DWY(Date, 2);
        IF NOT SiteMngmntHoursHeader.GET(lvYear, lvWeek, COMPANYNAME, Resource."Source No.") THEN BEGIN
          SiteMngmntHoursHeader.INIT;
          SiteMngmntHoursHeader.VALIDATE(Year, lvYear);
          SiteMngmntHoursHeader.VALIDATE(Week, lvWeek);
          SiteMngmntHoursHeader.VALIDATE("Supplying Company",COMPANYNAME);
          SiteMngmntHoursHeader.VALIDATE("Employee No.", Resource."Source No.");
          SiteMngmntHoursHeader.INSERT(TRUE);
        END;

        SiteMngmntHoursLine.INIT;
        SiteMngmntHoursLine.VALIDATE(Year, lvYear);
        SiteMngmntHoursLine.VALIDATE(Week, lvWeek);
        SiteMngmntHoursLine.VALIDATE("Supplying Company",COMPANYNAME);
        SiteMngmntHoursLine.VALIDATE("Employee No.", Resource."Source No.");
        SiteMngmntHoursLine2.SETRANGE(Year, SiteMngmntHoursLine.Year);
        SiteMngmntHoursLine2.SETRANGE(Week, SiteMngmntHoursLine.Week);
        SiteMngmntHoursLine2.SETRANGE("Supplying Company",SiteMngmntHoursLine."Supplying Company");
        SiteMngmntHoursLine2.SETRANGE("Employee No.", SiteMngmntHoursLine."Employee No.");
        IF (VarDebriefHourAccRec.Quantity = 0) AND (VarDebriefHourAccRec."Time From" <> 0T) THEN
          SiteMngmntHoursLine."Line No." := GetLineNoBasedOnTimeSiteMngmntHour(SiteMngmntHoursLine.Year, SiteMngmntHoursLine.Week,
            SiteMngmntHoursLine."Supplying Company", DATE2DWY(Date, 1), SiteMngmntHoursLine."Employee No.", VarDebriefHourAccRec."Time From");
        IF SiteMngmntHoursLine."Line No." = 0 THEN BEGIN
          IF SiteMngmntHoursLine2.FINDLAST THEN
            SiteMngmntHoursLine."Line No." := SiteMngmntHoursLine2."Line No." + 10000
          ELSE
            SiteMngmntHoursLine."Line No." := 10000;
        END;

        IF WorkOrder."Source Company" <> '' THEN
          SiteMngmntHoursLine.VALIDATE("Receiving Company", WorkOrder."Source Company")
        ELSE
          SiteMngmntHoursLine.VALIDATE("Receiving Company", COMPANYNAME);

        IF ("Hour Line Template Code" <> '') THEN
          SiteMngmntHoursLine.VALIDATE("Line Template Code", "Hour Line Template Code");

        IF (Type = Type::Indirect) THEN BEGIN
          SiteMngmntHoursLine.VALIDATE(Type, SiteMngmntHoursLine.Type::Indirect);
          IF ("Hour Line Template Code" = '') THEN
            SiteMngmntHoursLine.VALIDATE("Object No.", "Cost Code");
        END;
        IF (Type = Type::Direct) THEN BEGIN
          IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN
            SiteMngmntHoursLine.VALIDATE(Type, SiteMngmntHoursLine.Type::Project)
          ELSE
            SiteMngmntHoursLine.VALIDATE(Type, SiteMngmntHoursLine.Type::Service);

          IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
            SiteMngmntHoursLine.VALIDATE("Object No.", WorkOrder."Source No.");
            IF (WorkOrder."Project Element" <> '') THEN
              SiteMngmntHoursLine.VALIDATE(Element, WorkOrder."Project Element");
            IF (WorkOrder."Extension Contract" <> '') THEN
              SiteMngmntHoursLine.VALIDATE("Extension Contract", WorkOrder."Extension Contract");
          END ELSE BEGIN
            SiteMngmntHoursLine.VALIDATE("Object No.", WorkOrder."Source No."); //* Serv.location also filled here
            SiteMngmntHoursLine.VALIDATE("Additional Cost (Service)", "Additional Cost (Service)");
          END;
        END;
        IF ("Hour Line Template Code" = '') THEN BEGIN
          IF "Wage Component" <> '' THEN                                            //** 4PS01.n
            //in code above the wagecomponent of the costobject of the employee is set. Overrule it here because it may not
            //match the cost object below.
            SiteMngmntHoursLine."Wage Component" := "Wage Component";                  //** 4PS01.n
          IF ("Cost Object" <> '') THEN
            SiteMngmntHoursLine.VALIDATE("Cost Object", "Cost Object");
          IF ("Wage Component" <> '') THEN
            SiteMngmntHoursLine.VALIDATE("Wage Component", "Wage Component");
        END ELSE BEGIN
          GetHourLineTemplateLine(HourLineTemplate, Date, HourLineTemplateLine);
          IF HourLineTemplateLine."Wage Component" <> '' THEN
            SiteMngmntHoursLine.VALIDATE("Wage Component", HourLineTemplateLine."Wage Component");
        END;

        IF (Quantity = 0) AND (("Time From" <> 0T) OR ("Time Until" <> 0T)) THEN BEGIN
          //Hour Accounting on Time
          SiteMngmntHoursLine.Day := DATE2DWY(Date, 1);
          SiteMngmntHoursLine.VALIDATE("Time From", "Time From");
          SiteMngmntHoursLine.VALIDATE("Time Until", "Time Until");
        END ELSE BEGIN
          lvLineQuantity := ROUND(Quantity,0.001);
          IF (SiteMngmntHoursLine."Component Type" = SiteMngmntHoursLine."Component Type"::Expenses) THEN BEGIN
            IF SiteMngmntHoursLine.ExpensesPerDay THEN BEGIN
              CASE DATE2DWY(Date, 1) OF
                1:
                  BEGIN
                    SiteMngmntHoursLine.VALIDATE(Monday, lvLineQuantity);
                    IF Amount <> 0 THEN
                      SiteMngmntHoursLine.VALIDATE("Monday Amount", Amount);
                  END;
                2:
                  BEGIN
                    SiteMngmntHoursLine.VALIDATE(Tuesday, lvLineQuantity);
                    IF Amount <> 0 THEN
                      SiteMngmntHoursLine.VALIDATE("Tuesday Amount", Amount);
                  END;
                3:
                  BEGIN
                    SiteMngmntHoursLine.VALIDATE(Wednesday, lvLineQuantity);
                    IF Amount <> 0 THEN
                      SiteMngmntHoursLine.VALIDATE("Wednesday Amount", Amount);
                  END;
                4:
                  BEGIN
                    SiteMngmntHoursLine.VALIDATE(Thursday, lvLineQuantity);
                    IF Amount <> 0 THEN
                      SiteMngmntHoursLine.VALIDATE("Thursday Amount", Amount);
                  END;
                5:
                  BEGIN
                    SiteMngmntHoursLine.VALIDATE(Friday, lvLineQuantity);
                    IF Amount <> 0 THEN
                      SiteMngmntHoursLine.VALIDATE("Friday Amount", Amount);
                  END;
                6:
                  BEGIN
                    SiteMngmntHoursLine.VALIDATE(Saturday, lvLineQuantity);
                    IF Amount <> 0 THEN
                      SiteMngmntHoursLine.VALIDATE("Saturday Amount", Amount);
                  END;
                7:
                  BEGIN
                    SiteMngmntHoursLine.VALIDATE(Sunday, lvLineQuantity);
                    IF Amount <> 0 THEN
                      SiteMngmntHoursLine.VALIDATE("Sunday Amount", Amount);
                  END;
              END;
            END ELSE BEGIN
              IF Amount = 0 THEN BEGIN
                SiteMngmntHoursLine.VALIDATE(Quantity, lvLineQuantity);
              END ELSE BEGIN
                SiteMngmntHoursLine.VALIDATE(Quantity, lvLineQuantity);
                SiteMngmntHoursLine.VALIDATE(Amount, Amount);
              END;
            END;
          END ELSE BEGIN
            CASE DATE2DWY(Date, 1) OF
              1: SiteMngmntHoursLine.VALIDATE(Monday, lvLineQuantity);
              2: SiteMngmntHoursLine.VALIDATE(Tuesday, lvLineQuantity);
              3: SiteMngmntHoursLine.VALIDATE(Wednesday, lvLineQuantity);
              4: SiteMngmntHoursLine.VALIDATE(Thursday, lvLineQuantity);
              5: SiteMngmntHoursLine.VALIDATE(Friday, lvLineQuantity);
              6: SiteMngmntHoursLine.VALIDATE(Saturday, lvLineQuantity);
              7: SiteMngmntHoursLine.VALIDATE(Sunday, lvLineQuantity);
            END;
          END;
          IF "Post Start and End Time" THEN BEGIN
            SiteMngmntHoursLine.VALIDATE("Start Time", "Start Time");
            SiteMngmntHoursLine.VALIDATE("End Time", "End Time");
          END;
        END;

        SiteMngmntHoursLine.VALIDATE("Address From", COPYSTR("Address From",1,MAXSTRLEN(SiteMngmntHoursLine."Address From")));
        SiteMngmntHoursLine.VALIDATE("Post Code From", COPYSTR("Post Code From",1,MAXSTRLEN(SiteMngmntHoursLine."Post Code From")));
        SiteMngmntHoursLine.VALIDATE("City From", COPYSTR("City From",1,MAXSTRLEN(SiteMngmntHoursLine."City From")));
        SiteMngmntHoursLine.VALIDATE("Country/Region Code From", "Country/Region Code From");
        SiteMngmntHoursLine.VALIDATE("Departure Date", DT2DATE(Departure));
        SiteMngmntHoursLine.VALIDATE("Departure Time", DT2TIME(Departure));

        SiteMngmntHoursLine.VALIDATE("Address To", COPYSTR("Address To",1,MAXSTRLEN(SiteMngmntHoursLine."Address To")));
        SiteMngmntHoursLine.VALIDATE("Post Code To", COPYSTR("Post Code To",1,MAXSTRLEN(SiteMngmntHoursLine."Post Code To")));
        SiteMngmntHoursLine.VALIDATE("City To", COPYSTR("City To",1,MAXSTRLEN(SiteMngmntHoursLine."City To")));
        SiteMngmntHoursLine.VALIDATE("Country/Region Code To", "Country/Region Code To");
        SiteMngmntHoursLine.VALIDATE("Arrival Date", DT2DATE(Arrival));
        SiteMngmntHoursLine.VALIDATE("Arrival Time", DT2TIME(Arrival));

        IF (Comment <> '') THEN
          SiteMngmntHoursLine.VALIDATE(Comment, COPYSTR(Comment,1,MAXSTRLEN(SiteMngmntHoursLine.Comment)));
        SiteMngmntHoursLine."Posting Date" := Date;
        SiteMngmntHoursLine.INSERT(TRUE);

        IF (MobileSetupRec."Reason Code Hours/Material" <> '') THEN BEGIN
          SiteMngmntHoursLine."Reason Code" := MobileSetupRec."Reason Code Hours/Material";
          SiteMngmntHoursLine.MODIFY(TRUE);
        END;

        EXIT(TRUE);

      END;
    END;

    LOCAL PROCEDURE PostDebriefDecentralWorkOrder@1100485001(VAR VarDebriefDecentralWORec@1100485010 : Record 11012686;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      Resource@1100527001 : Record 11229278;
      ServOrderRec@1100529000 : Record 11012823;
      Employee@1100485001 : Record 5200;
      ServiceLocation@1100485004 : Record 11012801;
      Customer@1100525004 : Record 18;
      lvServPrioRec@1100485005 : Record 11012829;
      lvServCallRec@1100485006 : Record 11012822;
      lvMobileSetupRec@1100525001 : Record 11012676;
      MobileDecentralWorkOrder@1100525002 : Record 11125649;
      ServOrderExtension@1100527000 : Record 11071727;
      DimensionValue@1100525005 : Record 349;
      lvError@1100485000 : Boolean;
      lvNoSeriesMgt@1100525000 : Codeunit 396;
      lvUserID@1100285300 : Code[50];
      lvUserSetup@1100285301 : Record 91;
      lvGlobDim1Code@1100285302 : Code[20];
    BEGIN
      // Create work order and service order. So never WO and project!
      WITH VarDebriefDecentralWORec DO BEGIN
        //* Check
        IF NOT CheckResource(ILogbookRec, "Line No.", FALSE, Resource, Employee) THEN
          lvError := TRUE;
        IF ("Mobile Work Order No." = '') THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION("Mobile Work Order No.")),ILogbookRec,"Line No.");
        END ELSE BEGIN
          IF MobileDecentralWorkOrder.GET("Resource No. (Employee)", "Mobile Work Order No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text002,FIELDCAPTION("Mobile Work Order No."),
              STRSUBSTNO('%1 (%2)',"Mobile Work Order No.", MobileDecentralWorkOrder."Work Order No.")),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Service Location No." <> '') THEN BEGIN
          IF NOT ServiceLocation.GET("Service Location No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text000,FIELDCAPTION("Service Location No."),"Service Location No."),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Customer No." <> '') THEN BEGIN
          IF NOT Customer.GET("Customer No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text000,FIELDCAPTION("Customer No."), "Customer No."), ILogbookRec, "Line No.");
          END;
        END;
        IF ("Global Dimension 1 Code" <> '') THEN BEGIN
          DimensionValue.SETRANGE(Code, "Global Dimension 1 Code");
          DimensionValue.SETRANGE("Global Dimension No.", 1);
          IF NOT DimensionValue.FINDFIRST THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text000, FIELDCAPTION("Global Dimension 1 Code"), "Global Dimension 1 Code"), ILogbookRec, "Line No.");
          END;
        END;
        IF (Priority <> '') THEN BEGIN
          IF NOT lvServPrioRec.GET(Priority) THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Priority),Priority),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Date/Time" = 0DT) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION("Date/Time")),ILogbookRec,"Line No.");
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        ServOrderRec.INIT;
        IF (Resource.Company = COMPANYNAME) AND (Resource.Type = Resource.Type::Employee) THEN
          ServOrderRec.SetReferencePointModifiedByEmployee(Resource."Source No.");
        lvMobileSetupRec.GET;
        lvMobileSetupRec.TESTFIELD("Service Order Nos. (Decentral)");
      //>>151104
        IF (Resource.Type = Resource.Type::Employee) AND (Employee."No."<>'') THEN BEGIN
        //find usersetup from employee
          IF Resource.Company <> COMPANYNAME THEN
            lvUserSetup.CHANGECOMPANY(Resource.Company);
          lvUserSetup.SETRANGE("Employee No.",Employee."No.");
          IF lvUserSetup.FINDFIRST THEN
            lvUserID := lvUserSetup."User ID";
          lvNoSeriesMgt.InitSeriesAltUser(lvMobileSetupRec."Service Order Nos. (Decentral)",'',0D,ServOrderRec."No.",ServOrderRec."No. Series",lvUserID);
      //>>151229
          IF DPA_OnInsertAltUserID(ServOrderRec."No. Series",lvUserID,lvGlobDim1Code) THEN
            ServOrderRec.VALIDATE("Global Dimension 1 Code",lvGlobDim1Code);
      //<<151229
        END
        ELSE
      //<<151104
          lvNoSeriesMgt.InitSeries(lvMobileSetupRec."Service Order Nos. (Decentral)",'',0D,ServOrderRec."No.",ServOrderRec."No. Series");
        ServOrderRec."Source Type" := ServOrderRec."Source Type"::Call;
        ServOrderRec.SetUseFilledOrderDateTime(TRUE);
        ServOrderRec."Order Date" := DT2DATE("Date/Time");
        ServOrderRec."Order Time" := DT2TIME("Date/Time");
        ServOrderRec."Starting Date" := ServOrderRec."Order Date";
        ServOrderRec."Starting Time" := ServOrderRec."Order Time";
        ServOrderRec.VALIDATE("Contact Name", "Contact Name");
        ServOrderRec.Origin := ServOrderRec.Origin::"4PS Mobile";
        ServOrderRec.INSERT(TRUE);
        ServOrderRec.TESTFIELD("No.");

        ServOrderRec.SetUseFilledOrderDateTime(FALSE);
        ServOrderRec."Date/Time Export to FSA" := CURRENTDATETIME;  //* This is also a indicator that it is a FSA serviceorder.
        ServOrderRec."Decentral Created" := TRUE;
        //ServOrderRec."Plan during Clock Time" := TRUE;
        ServOrderRec.VALIDATE("Employee No.", "Resource No. (Employee)"); // C019480.n
        IF "Service Location No." <> '' THEN BEGIN
          ServOrderRec.VALIDATE("Service Location No.", "Service Location No.");
          ServOrderRec.DetermineContractNo;
        END;
        IF "Customer No." <> '' THEN BEGIN
          ServOrderRec.VALIDATE("Customer No.", "Customer No.");
          IF "Global Dimension 1 Code" <> '' THEN
            ServOrderRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
        END;
        IF (Name <> '') THEN
          ServOrderRec.Name := Name;
        IF (Address <> '') THEN
          ServOrderRec.Address := Address;
        IF ("Post Code" <> '') THEN
          ServOrderRec."Post Code" := "Post Code";
        IF (City <> '') THEN
          ServOrderRec.City := City;
        IF ("Phone No." <> '') THEN
          ServOrderRec.VALIDATE("Phone No.", "Phone No.");
        IF ("Contact Name" <> '') THEN
          ServOrderRec."Contact Name" := "Contact Name";
        IF (Description <> '') THEN
          ServOrderRec.VALIDATE(Description, Description);
        IF (Priority <> '') THEN
          ServOrderRec.VALIDATE(Priority, Priority);
      //  ServOrderRec.VALIDATE("Employee No.", "Resource No. (Employee)"); // C019480.o
        IF ("Order No. Customer" <> '') THEN
          ServOrderRec."Order No. Customer" := "Order No. Customer";
        IF ("Call No." <> '') THEN BEGIN
          IF lvServCallRec.GET("Call No.") THEN BEGIN
            ServOrderRec."Call No." := "Call No.";
            lvServCallRec."Next Step" := lvServCallRec."Next Step"::ServiceOrder;  //call 18915.sn
            IF (lvServCallRec."Service Order No." <> '') THEN BEGIN                                   //DP00132.sn
              ServOrderRec.VALIDATE("Previous Service Order No.", lvServCallRec."Service Order No.");
              ServOrderRec.VALIDATE("Base Service Order", FALSE);
            END ELSE BEGIN
              ServOrderRec.VALIDATE("Base Service Order", TRUE);                                      //DP00132.en

              lvServCallRec."Service Order No." := ServOrderRec."No.";
            END;
            lvServCallRec.Status := lvServCallRec.Status::"In Process";
            lvServCallRec.MODIFY;                                    //call 18915.en
          END;
        END ELSE BEGIN
          CreateDecentralServCall(ServOrderRec, ServOrderExtension, VarDebriefDecentralWORec, Resource);
        END;
        ServOrderRec.MODIFY(TRUE);

        CreateDecentralWorkOrder(VarDebriefDecentralWORec, Resource, ServOrderRec."No.");  // First the SO must be created, then WO

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateDecentralWorkOrder@1100527002(DebriefDecentralWO@1100527000 : Record 11012686;Resource@1100526000 : Record 11229278;ServiceOrderNo@1100527001 : Code[20]);
    VAR
      Workorder@1100527003 : Record 11229279;
      MobileDecentralWorkOrder@1100527002 : Record 11125649;
    BEGIN
      Workorder.INIT;
      Workorder."No." := '';
      Workorder.VALIDATE("Source Company", COMPANYNAME);
      Workorder.VALIDATE("Source Type", Workorder."Source Type"::ServiceOrder);
      Workorder.VALIDATE("Source No.", ServiceOrderNo);
      Workorder.SetDateTimeRefPointRegistr(DebriefDecentralWO."Date/Time"); //mg, 24-02-2015: T005700
      IF (Resource.Company = COMPANYNAME) AND (Resource.Type = Resource.Type::Employee) THEN
        Workorder.SetReferencePointModifiedByEmployee(Resource."Source No.");
      Workorder.INSERT(TRUE);
      Workorder.TESTFIELD("No.");

      Workorder.VALIDATE("Resource Type", Workorder."Resource Type"::Employee);
      Workorder.VALIDATE("Resource No.", DebriefDecentralWO."Resource No. (Employee)");
      //>>181005, already set by 'Workorder.VALIDATE("Source No.", ServiceOrderNo);'
      // IF DebriefDecentralWO.Description <> '' THEN
      IF (DebriefDecentralWO.Description <> '') AND (Workorder.Description='') THEN
      //<<181005
        Workorder.VALIDATE(Description, DebriefDecentralWO.Description);
      Workorder."Plan during Clock Time" := TRUE;
      Workorder."Date/Time Export to FSA" := CURRENTDATETIME;  //* This is also a indicator that it is a FSA serviceorder.
      Workorder.MODIFY(TRUE);
      Workorder.AddLinkedResources('M');

      MobileDecentralWorkOrder.INIT;
      MobileDecentralWorkOrder."Resource No. (Employee)" := Workorder."Resource No.";
      MobileDecentralWorkOrder."Mobile Work Order No." := DebriefDecentralWO."Mobile Work Order No.";
      MobileDecentralWorkOrder."Work Order No." := Workorder."No.";
      MobileDecentralWorkOrder.INSERT;
    END;

    LOCAL PROCEDURE CreateDecentralServCall@1100528103(VAR ServiceOrder@1100528100 : Record 11012823;ServiceOrderExtension@1100528102 : Record 11071727;VarDebriefDecentralSORec@1100528106 : Record 11012686;Resource@1100526000 : Record 11229278);
    VAR
      ServiceCall@1100528101 : Record 11012822;
      ServiceObject@1100525000 : Record 11071691;
      MobileSetup@1100525001 : Record 11012676;
    BEGIN
      ServiceCall.INIT;
      IF (Resource.Company = COMPANYNAME) AND (Resource.Type = Resource.Type::Employee) THEN
        ServiceCall.SetReferencePointModifiedByEmployee(Resource."Source No.");
      ServiceCall."No." := '';
      ServiceCall.Origin := ServiceCall.Origin::"4PS Mobile";
      ServiceCall.INSERT(TRUE);
      ServiceCall.VALIDATE("Expected Date", ServiceOrder."Starting Date");
      ServiceCall.VALIDATE("Expected Time", ServiceOrder."Starting Time");
      ServiceCall.VALIDATE("Contact Name", ServiceOrder."Contact Name");
      ServiceCall.VALIDATE("Decentral Created", TRUE);
      ServiceCall.VALIDATE("Plan during Clock Time", TRUE);
      ServiceCall.VALIDATE("Service Location No.", ServiceOrder."Service Location No.");
      ServiceCall.VALIDATE(Name, ServiceOrder.Name);
      ServiceCall.Address := ServiceOrder.Address;
      ServiceCall.City := ServiceOrder.City;
      ServiceCall."Post Code" := ServiceOrder."Post Code";
      ServiceCall.VALIDATE(Description, ServiceOrder.Description);
      ServiceCall.VALIDATE(Priority, ServiceOrder.Priority);
      ServiceCall.VALIDATE("Employee No.", ServiceOrder."Employee No.");
      ServiceCall.VALIDATE("Order No. Customer", ServiceOrder."Order No. Customer");
      IF VarDebriefDecentralSORec."Object No." <> '' THEN
        IF ServiceObject.GET(VarDebriefDecentralSORec."Object No.") THEN
          IF NOT ServiceObject.Blocked THEN
            ServiceCall.VALIDATE("Object No.", VarDebriefDecentralSORec."Object No.");
      ServiceCall.VALIDATE("Calling Contact", VarDebriefDecentralSORec."Calling Contact");
      ServiceCall.VALIDATE("Calling Phone No.", VarDebriefDecentralSORec."Calling Phone No.");

      ServiceCall."Next Step" := ServiceCall."Next Step"::ServiceOrder;
      ServiceCall.Status := ServiceCall.Status::"In Process";
      ServiceCall."Service Order No." := ServiceOrder."No.";
      // DP01061.sn
      MobileSetup.GET;
      IF MobileSetup."Use Vessel Functionality" THEN
        ServiceCall.VALIDATE("Vessel Service Call", TRUE);
      // DP01061.en
      ServiceCall.MODIFY(TRUE);

      ServiceOrder."Call No." := ServiceCall."No.";
    END;

    LOCAL PROCEDURE PostDebriefInspectionLine@1100529008(VAR DebriefInspection@1100485010 : Record 11020447;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529002 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529001 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefInspection."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefInspectionLineSO(DebriefInspection, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefInspection."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefInspectionLineSO@1100528100(VAR DebriefInspectionLine@1100485010 : Record 11020447;Logbook@1100485003 : Record 11012677;WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      ServiceOrderInspectionLine@1100485002 : Record 11071753;
      WorkOrderInspectionLine@1100526001 : Record 11072558;
      MobileSetup@1100526000 : Record 11012676;
      Exist@1100526002 : Boolean;
    BEGIN
      MobileSetup.GET;

      WITH DebriefInspectionLine DO BEGIN
        //* Check
        IF NOT DebriefInspectionLine."Is Added By User" THEN BEGIN
          IF NOT ServiceOrderInspectionLine.GET(
            WorkOrder."Source No.", "Service Object No.", "Maintenance Scheme Code", "Serv. Ord. Inspection Line No.")
          THEN BEGIN
            ErrorRec.WriteError(STRSUBSTNO(Text000, ServiceOrderInspectionLine.TABLECAPTION,
              WorkOrder."Source No." + '-' + "Service Object No." + '-' + "Maintenance Scheme Code" + '-' + FORMAT("Serv. Ord. Inspection Line No.")), Logbook, "Line No.");
            EXIT(FALSE);
          END;
        END ELSE BEGIN
          ServiceOrderInspectionLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
          ServiceOrderInspectionLine.SETRANGE("Service Object No.", "Service Object No.");
          ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", '');
          ServiceOrderInspectionLine.SETRANGE("Inspection Type", ServiceOrderInspectionLine."Inspection Type"::"Service Order Object");
          ServiceOrderInspectionLine.SETRANGE(Type, Type);
          ServiceOrderInspectionLine.SETRANGE("Inspection Code", "Inspection Code");
          ServiceOrderInspectionLine.SETRANGE("Inspection Group Code", "Inspection Group Code");
          IF NOT ServiceOrderInspectionLine.FINDFIRST THEN BEGIN
            CreateInspectionGroupLineIfNotExist(WorkOrder, DebriefInspectionLine, FALSE);
            ServiceOrderInspectionLine.RESET;
            ServiceOrderInspectionLine.INIT;
            ServiceOrderInspectionLine."Service Order No." := WorkOrder."Source No.";
            ServiceOrderInspectionLine."Service Object No." := "Service Object No.";
            ServiceOrderInspectionLine."Maintenance Scheme Code" := '';
            ServiceOrderInspectionLine."Line No." := ServiceOrderInspectionLine.GetLastLineNo + 10000;
            ServiceOrderInspectionLine."Inspection Type" := ServiceOrderInspectionLine."Inspection Type"::"Service Order Object";
            ServiceOrderInspectionLine.Code := Code;
            ServiceOrderInspectionLine."Index Date" := "Index Date";
            ServiceOrderInspectionLine."Inspection Line No." := "Inspection Line No.";
            ServiceOrderInspectionLine.Type := Type;
            ServiceOrderInspectionLine."Inspection Code" := "Inspection Code";
            ServiceOrderInspectionLine.Description := Description;
            ServiceOrderInspectionLine."Field Type" := "Field Type";
            ServiceOrderInspectionLine."Unit Of Measure" := "Unit Of Measure";
            ServiceOrderInspectionLine."Inspection Group Code" := "Inspection Group Code";
            ServiceOrderInspectionLine.Mandatory := Mandatory;
            ServiceOrderInspectionLine."Lower Value" := "Lower Value";
            ServiceOrderInspectionLine."Upper Value" := "Upper Value";
            ServiceOrderInspectionLine."Depending on Id" := "Depending on Id";
            ServiceOrderInspectionLine.Id := Id;
            ServiceOrderInspectionLine."Dependency Effect" := "Dependency Effect";
            ServiceOrderInspectionLine."Depending Condition" := "Depending Condition";
            ServiceOrderInspectionLine."Dependency Condition Date 1" := "Dependency Condition Date 1";
            ServiceOrderInspectionLine."Dependency Condition Date 2" := "Dependency Condition Date 2";
            ServiceOrderInspectionLine."Dependency Condition Decimal 1" := "Dependency Condition Decimal 1";
            ServiceOrderInspectionLine."Dependency Condition Decimal 2" := "Dependency Condition Decimal 2";
            ServiceOrderInspectionLine."Dependency Condition Operation" := "Dependency Condition Operation";
            ServiceOrderInspectionLine.INSERT;
          END;
        END;

        //* Post
        CASE ServiceOrderInspectionLine."Field Type" OF
          ServiceOrderInspectionLine."Field Type"::Date:
            BEGIN
              ServiceOrderInspectionLine.VALIDATE("Value (Date)", DateValue);
            END;
          ServiceOrderInspectionLine."Field Type"::Value:
            BEGIN
              ServiceOrderInspectionLine.VALIDATE("Value (Value)", NumberValue);
              IF "NumberValue Is Empty" THEN
                ServiceOrderInspectionLine.VALIDATE(Value, '');
            END;
          ServiceOrderInspectionLine."Field Type"::Text:
            BEGIN
              ServiceOrderInspectionLine.VALIDATE(Value, TextValue);
            END;
          ServiceOrderInspectionLine."Field Type"::Option,
          ServiceOrderInspectionLine."Field Type"::"Yes/No":
            BEGIN
              ServiceOrderInspectionLine.VALIDATE(Value, ServiceOrderInspectionLine.GetOptionDescriptionFromCode(OptionValue));
            END;
        END;

        ServiceOrderInspectionLine.VALIDATE(Comment, Comment);
        ServiceOrderInspectionLine.MODIFY;

        IF MobileSetup."Work Order Inspection Lines" THEN BEGIN
          WorkOrderInspectionLine.TRANSFERFIELDS(ServiceOrderInspectionLine);
          WorkOrderInspectionLine."Work Order No." := "Work Order No.";
          WorkOrderInspectionLine.SETRANGE("Work Order No.", WorkOrderInspectionLine."Work Order No.");
          WorkOrderInspectionLine.SETRANGE("Service Object No.", WorkOrderInspectionLine."Service Object No.");
          WorkOrderInspectionLine.SETRANGE("Maintenance Scheme Code", WorkOrderInspectionLine."Maintenance Scheme Code");
          WorkOrderInspectionLine.SETRANGE("Inspection Type", WorkOrderInspectionLine."Inspection Type");
          WorkOrderInspectionLine.SETRANGE(Type, WorkOrderInspectionLine.Type);
          WorkOrderInspectionLine.SETRANGE("Inspection Code", WorkOrderInspectionLine."Inspection Code");
          WorkOrderInspectionLine.SETRANGE("Inspection Group Code", WorkOrderInspectionLine."Inspection Group Code");
          IF NOT WorkOrderInspectionLine.FINDFIRST THEN BEGIN
            CreateInspectionGroupLineIfNotExist(WorkOrder, DebriefInspectionLine, TRUE);
            WorkOrderInspectionLine."Line No." := WorkOrderInspectionLine.GetLastLineNo + 10000;
            WorkOrderInspectionLine.INSERT;
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateInspectionGroupLineIfNotExist@1100528022(WorkOrder@1100528002 : Record 11229279;DebriefInspectionLine@1100528000 : Record 11020447;ForWorkOrderInspectionLine@1100526003 : Boolean);
    VAR
      ServiceOrderInspectionLine@1100528001 : Record 11071753;
      WorkOrderInspectionLine@1100526001 : Record 11072558;
      ServiceInspectionGroup@1100528003 : Record 11071747;
      ServiceInspectionLine@1100528004 : Record 11071751;
      ServiceInspectionLine2@1100528005 : Record 11071751;
      Exist@1100526002 : Boolean;
      RecRef@1100526004 : RecordRef;
      FldRef@1100526005 : FieldRef;
    BEGIN
      IF NOT DebriefInspectionLine."Is Added By User" AND NOT ForWorkOrderInspectionLine THEN
        EXIT;

      WITH DebriefInspectionLine DO BEGIN
        IF ForWorkOrderInspectionLine THEN BEGIN
          RecRef.OPEN(DATABASE::"Work Order Inspection Line");
          RecRefSetRange(RecRef, WorkOrderInspectionLine.FIELDNO("Work Order No."), WorkOrder."No.");
        END ELSE BEGIN
          RecRef.OPEN(DATABASE::"Service Order Inspection Line");
          RecRefSetRange(RecRef, ServiceOrderInspectionLine.FIELDNO("Service Order No."), WorkOrder."Source No.");
        END;
        RecRefSetRange(RecRef, ServiceOrderInspectionLine.FIELDNO("Service Object No."), "Service Object No.");
        RecRefSetRange(RecRef, ServiceOrderInspectionLine.FIELDNO("Maintenance Scheme Code"), '');
        RecRefSetRange(RecRef, ServiceOrderInspectionLine.FIELDNO("Inspection Type"), ServiceOrderInspectionLine."Inspection Type"::"Service Order Object");
        RecRefSetRange(RecRef, ServiceOrderInspectionLine.FIELDNO(Type), ServiceOrderInspectionLine.Type::Group);
        RecRefSetRange(RecRef, ServiceOrderInspectionLine.FIELDNO("Inspection Group Code"), "Inspection Group Code");
        IF NOT RecRef.FINDFIRST THEN BEGIN
          RecRef.RESET;
          RecRef.INIT;
          IF ForWorkOrderInspectionLine THEN
            RecRefSetValue(RecRef, WorkOrderInspectionLine.FIELDNO("Work Order No."), WorkOrder."No.")
          ELSE
            RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Service Order No."), WorkOrder."Source No.");
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Service Object No."), "Service Object No.");
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Maintenance Scheme Code"), '');
          IF ForWorkOrderInspectionLine THEN BEGIN
            RecRef.SETTABLE(WorkOrderInspectionLine);
            RecRefSetValue(RecRef, WorkOrderInspectionLine.FIELDNO("Line No."), WorkOrderInspectionLine.GetLastLineNo + 10000);
          END ELSE BEGIN
            RecRef.SETTABLE(ServiceOrderInspectionLine);
            RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Line No."), ServiceOrderInspectionLine.GetLastLineNo + 10000);
          END;
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Inspection Type"), ServiceOrderInspectionLine."Inspection Type"::"Service Order Object");
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO(Code), Code);
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Index Date"), "Index Date");

          ServiceInspectionLine.SETRANGE("Inspection Type", ServiceInspectionLine."Inspection Type"::"Base Inspection List");
          ServiceInspectionLine.SETRANGE(Code, Code);
          ServiceInspectionLine.SETRANGE("Index Date", "Index Date");
          ServiceInspectionLine.SETRANGE("Line No.", "Inspection Line No.");
          IF ServiceInspectionLine.FINDFIRST THEN BEGIN
            ServiceInspectionLine2.SETRANGE("Inspection Type", ServiceInspectionLine."Inspection Type");
            ServiceInspectionLine2.SETRANGE(Code, ServiceInspectionLine.Code);
            ServiceInspectionLine2.SETRANGE("Index Date", ServiceInspectionLine."Index Date");
            ServiceInspectionLine2.SETRANGE(Type, ServiceInspectionLine2.Type::Group);
            ServiceInspectionLine2.SETFILTER("Line No.", '<%1', ServiceInspectionLine."Line No.");
            IF ServiceInspectionLine2.FINDLAST THEN
              RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Inspection Line No."), ServiceInspectionLine2."Line No.");
          END;

          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO(Type), ServiceOrderInspectionLine.Type::Group);
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Inspection Group Code"), "Inspection Group Code");
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Inspection Code"), "Inspection Group Code");
          IF ServiceInspectionGroup.GET("Inspection Group Code") THEN
            RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO(Description), ServiceInspectionGroup.Description);
          RecRefSetValue(RecRef, ServiceOrderInspectionLine.FIELDNO("Field Type"), ServiceOrderInspectionLine."Field Type"::" ");
          RecRef.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE PostDebriefObjectSpecLine@1100529014(VAR DebriefObjectSpec@1100485010 : Record 11020448;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefObjectSpec."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefObjectSpecLineSO(DebriefObjectSpec, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefObjectSpec."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefObjectSpecLineSO@1210190000(VAR VarDebriefObjSpecRec@1100485010 : Record 11020448;ILogbookRec@1100485003 : Record 11012677;WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      ServiceOrderObjSpecLine@1100485002 : Record 11071782;
      lvError@1100485000 : Boolean;
      Found@1100528000 : Boolean;
    BEGIN
      WITH VarDebriefObjSpecRec DO BEGIN
        //* Check
        ServiceOrderObjSpecLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
        ServiceOrderObjSpecLine.SETRANGE("Service Object No.", "Service Object No.");
        ServiceOrderObjSpecLine.SETRANGE("Line No.", "Specification Line No.");
        Found := ServiceOrderObjSpecLine.FINDFIRST;
        ServiceOrderObjSpecLine.RESET;
        IF NOT Found THEN
          //* Fill "Object Line No." with 0, because no exchange of Plant Stocktaking Lines with MOB.
          Found := ServiceOrderObjSpecLine.GET(WorkOrder."Source No.","Service Object No.",
            "Specification Type",Code, 0, "Specification Line No.");
        IF NOT Found THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text000,ServiceOrderObjSpecLine.TABLECAPTION,
              WorkOrder."Source No."+'-'+"Service Object No."+'-'+FORMAT("Specification Type")+
              '-'+Code+'-'+FORMAT("Specification Line No."))
              ,ILogbookRec,"Line No.");
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        IF ServiceOrderObjSpecLine.BORG THEN
          EXIT(TRUE);

        CASE ServiceOrderObjSpecLine."Field Type" OF
            ServiceOrderObjSpecLine."Field Type"::Date:
              BEGIN
                ServiceOrderObjSpecLine.VALIDATE("New Value (Date)", DateValue);
              END;
            ServiceOrderObjSpecLine."Field Type"::Value:
              BEGIN
                ServiceOrderObjSpecLine.VALIDATE("New Value (Value)", NumberValue);
                IF "NumberValue Is Empty" THEN
                  ServiceOrderObjSpecLine.VALIDATE("New Value", '');
              END;
            ServiceOrderObjSpecLine."Field Type"::Text:
              BEGIN
                ServiceOrderObjSpecLine.VALIDATE("New Value", TextValue);
              END;
            ServiceOrderObjSpecLine."Field Type"::Option:
              BEGIN
                ServiceOrderObjSpecLine.VALIDATE("New Value",
                  ServiceOrderObjSpecLine.GetOptionDescriptionFromCode(OptionValue));
              END;
        END;
        ServiceOrderObjSpecLine.Status := ServiceOrderObjSpecLine.Status::Received;
        ServiceOrderObjSpecLine.MODIFY;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefWorkOrderText@1100529018(VAR DebriefWorkOrderText@1100485010 : Record 11020449;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
      Resource@1100525001 : Record 11229278;
      Employee@1100525000 : Record 5200;
      Err@1100525002 : Boolean;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefWorkOrderText."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        //* Check
        IF NOT CheckResource(Logbook, DebriefWorkOrderText."Line No.", FALSE, Resource, Employee) THEN
          Err := TRUE;

        IF Err THEN
          EXIT(FALSE);

        IF (DebriefWorkOrderText."Table Field" = 1000) THEN
          CreateWorkOrderText(DebriefWorkOrderText, WorkOrder)
        ELSE BEGIN
          IF (WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder) THEN BEGIN
            CreateServiceText(DebriefWorkOrderText, FALSE, WorkOrder, '', Resource);
            IF DebriefWorkOrderText."Add Text To Call" THEN
              CreateServiceText(DebriefWorkOrderText, TRUE, WorkOrder, ServOrder."Call No.", Resource);
          END;
          IF (WorkOrder."Source Type" = WorkOrder."Source Type"::Project) AND (DebriefWorkOrderText."Table Field" = 3000) THEN
            CreateProjectElementText(DebriefWorkOrderText, WorkOrder, Resource);
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateWorkOrderText@1100525010(DebriefWorkOrderText@1100528100 : Record 11020449;WorkOrder@1100529000 : Record 11229279);
    VAR
      WorkOrderText@1100528105 : Record 11229284;
      WorkOrderText2@1100528104 : Record 11229284;
    BEGIN
      WITH DebriefWorkOrderText DO BEGIN
        WorkOrderText2.SETRANGE("Table Name", WorkOrderText2."Table Name"::"Work Order");
        WorkOrderText2.SETRANGE("No.", WorkOrder."No.");
        WorkOrderText2.SETRANGE("Table Field", 0);
        IF "First Line" THEN
          WorkOrderText2.DELETEALL;

        IF WorkOrderText2.FINDLAST THEN
          WorkOrderText."Line No." := WorkOrderText2."Line No." + 10000
        ELSE
          WorkOrderText."Line No." := 10000;

        WorkOrderText."Table Name" := WorkOrderText."Table Name"::"Work Order";
        WorkOrderText."No." := WorkOrder."No.";
        WorkOrderText."Table Field" := 0;
        WorkOrderText.Comment := Comment;
        WorkOrderText."Line Break" := "Line Break";
        WorkOrderText."Active in FSA" := TRUE;
        WorkOrderText.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceText@1100528104(DebriefWorkOrderText@1100528100 : Record 11020449;AddToCall@1100528102 : Boolean;WorkOrder@1100529000 : Record 11229279;ServCallNo@1100529001 : Code[20];Resource@1100525000 : Record 11229278);
    VAR
      ServiceText@1100528105 : Record 11012882;
      ServiceText2@1100528104 : Record 11012882;
      TableFieldNo@1100528106 : Integer;
    BEGIN
      WITH DebriefWorkOrderText DO BEGIN
        IF AddToCall THEN BEGIN
          ServiceText2.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
          ServiceText2.SETRANGE("No.", ServCallNo);
          ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
          ServiceText."No." := ServCallNo;
          TableFieldNo := GetCallFieldNo("Table Field");
          IF TableFieldNo = 0 THEN EXIT;
        END ELSE BEGIN
          ServiceText2.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
          ServiceText2.SETRANGE("No.", WorkOrder."Source No.");
          ServiceText."Table Name" := ServiceText."Table Name"::"Service Order";
          ServiceText."No." := WorkOrder."Source No.";
          TableFieldNo := "Table Field";
          ServiceText2.SETRANGE("Table Field", TableFieldNo);
        END;

        IF ServiceText2.FINDLAST THEN BEGIN
          ServiceText."Line No." := ServiceText2."Line No." + 10000;
          IF DebriefWorkOrderText."First Line" THEN BEGIN
            ServiceText2."Line Break" := TRUE;
            ServiceText2.MODIFY;
          END;
        END ELSE
          ServiceText."Line No." := 10000;
        ServiceText."Table Field" := TableFieldNo;
        ServiceText.Comment := Comment;
        ServiceText.Date := TODAY;
        ServiceText."Time Created" := TIME;
        ServiceText."Line Break" := "Line Break";
        ServiceText."Active in FSA" := TRUE;
        ServiceText.INSERT(TRUE);

        ServiceText."Created by Employee No." := Resource."Source No.";
        IF Resource.Company <> COMPANYNAME THEN
          ServiceText."Created by Employee Company" := Resource.Company;
        ServiceText.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateProjectElementText@1100528703(DebriefWorkOrderText@1100528100 : Record 11020449;WorkOrder@1100529000 : Record 11229279;Resource@1100528700 : Record 11229278);
    VAR
      ProjectElementText@1100528105 : Record 11229796;
      ProjectElementText2@1100528104 : Record 11229796;
    BEGIN
      IF WorkOrder."Project Element" = '' THEN
        EXIT;

      WITH DebriefWorkOrderText DO BEGIN
        ProjectElementText2.SETRANGE("Project No.", WorkOrder."Source No.");
        ProjectElementText2.SETRANGE(Element, WorkOrder."Project Element");
        IF ProjectElementText2.FINDLAST THEN BEGIN
          ProjectElementText."Line No." := ProjectElementText2."Line No." + 10000;
          IF DebriefWorkOrderText."First Line" THEN BEGIN
            ProjectElementText2."Line Break" := TRUE;
            ProjectElementText2.MODIFY;
          END;
        END ELSE
          ProjectElementText."Line No." := 10000;
        ProjectElementText."Project No." := WorkOrder."Source No.";
        ProjectElementText.Element := WorkOrder."Project Element";
        ProjectElementText.Comment := Comment;
        ProjectElementText.Date := TODAY;
        ProjectElementText."Time Created" := TIME;
        ProjectElementText."Line Break" := "Line Break";
        ProjectElementText."Created by Resource No." := Resource."No.";
        ProjectElementText."Active in FSA" := TRUE;
        ProjectElementText.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetCallFieldNo@1100528105(ServiceOrderFieldNo@1100528100 : Integer) : Integer;
    BEGIN
      CASE ServiceOrderFieldNo OF
        90: EXIT(60);    //Problem text
        91: EXIT(70);    //Internal text
        92: EXIT(0);     //Solution text
        94: EXIT(0);     //Cause text
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE PostDebriefRestockItem@1100528101(VAR VarDebriefRestockItemRec@1100485001 : Record 11125645;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      Resource@1100529000 : Record 11229278;
      Empl@1100529001 : Record 5200;
      lvItemRec@1100409007 : Record 27;
      lvUnitRec@1100409006 : Record 204;
      lvLocation@1100409005 : Record 14;
      lvItemJnlLineRec@1100409004 : Record 83;
      lvItemJnlLineRec2@1100409003 : Record 83;
      lvError@1100409001 : Boolean;
    BEGIN
      WITH VarDebriefRestockItemRec DO BEGIN
        MobileSetupRec.GET('');

        //* Check
        // No Workorder for this debrief type, Work Order No is always empty here.
        IF NOT CheckResource(ILogbookRec, "Line No.", TRUE, Resource, Empl) THEN
          lvError := TRUE;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT lvItemRec.GET("Item No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Item No."),"Item No."),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT lvUnitRec.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Unit of Measure"),"Unit of Measure"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("From Location Code" <> '') THEN BEGIN
          IF NOT lvLocation.GET("From Location Code") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("From Location Code"),"From Location Code"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("New Location Code" <> '') THEN BEGIN
          IF NOT lvLocation.GET("New Location Code") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("New Location Code"),"New Location Code"),ILogbookRec,"Line No.");
          END;
          //C019313.sn
          IF (lvLocation."Restock Item Journal Template" <> '') AND (lvLocation."Restock Item Journal Batch" <> '') THEN BEGIN
            MobileSetupRec."Reclass. Jnl. Template Name" := lvLocation."Restock Item Journal Template";
            MobileSetupRec."Reclass. Jnl. Batch Name" := lvLocation."Restock Item Journal Batch";
          END;
          //C019313.en
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        MobileSetupRec.TESTFIELD("Reclass. Jnl. Template Name");
        MobileSetupRec.TESTFIELD("Reclass. Jnl. Batch Name");
        lvItemJnlLineRec.INIT;
        lvItemJnlLineRec.VALIDATE("Journal Template Name", MobileSetupRec."Reclass. Jnl. Template Name");
        lvItemJnlLineRec.VALIDATE("Journal Batch Name", MobileSetupRec."Reclass. Jnl. Batch Name");
        lvItemJnlLineRec2.SETRANGE("Journal Template Name", lvItemJnlLineRec."Journal Template Name");
        lvItemJnlLineRec2.SETRANGE("Journal Batch Name", lvItemJnlLineRec."Journal Batch Name");
        IF lvItemJnlLineRec2.FINDLAST THEN
          lvItemJnlLineRec."Line No." := lvItemJnlLineRec2."Line No." + 10000
        ELSE BEGIN
          lvItemJnlLineRec."Line No." := 10000;
          lvItemJnlLineRec2."Entry Type" := lvItemJnlLineRec."Entry Type"::Transfer;
        END;
        lvItemJnlLineRec.SetUpNewLine(lvItemJnlLineRec2);
        lvItemJnlLineRec.INSERT(TRUE);
        lvItemJnlLineRec.VALIDATE("Posting Date", TODAY);
        IF ("Item No." <> '') THEN
          lvItemJnlLineRec.VALIDATE("Item No.", "Item No.");
        IF ("From Location Code" <> '') THEN
          lvItemJnlLineRec.VALIDATE("Location Code", "From Location Code");
        IF ("New Location Code" <> '') THEN
          lvItemJnlLineRec.VALIDATE("New Location Code", "New Location Code");
        IF ("Item No." <> '') AND ("Unit of Measure" <> '') THEN
          lvItemJnlLineRec.VALIDATE("Unit of Measure Code", "Unit of Measure");
        IF (Quantity <> 0) THEN
          lvItemJnlLineRec.VALIDATE(Quantity, ROUND(Quantity,0.00001));
        IF (Description <> '') THEN
          lvItemJnlLineRec.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          lvItemJnlLineRec.VALIDATE("Description 2", "Description 2");  //db, 25-02-13: C005716
        lvItemJnlLineRec."Comments for Logistics" := COPYSTR(STRSUBSTNO('%1 %2',Resource."Source No.",Resource.Name), 1, MAXSTRLEN(lvItemJnlLineRec."Comments for Logistics"));
        lvItemJnlLineRec.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefRestockItemPurchase@1100525005(VAR DebriefRestockItem@1100525001 : Record 11125645;DebriefLogbook@1100525000 : Record 11012677) : Boolean;
    VAR
      MobileSetup@1100525002 : Record 11012676;
      Resource@1100525006 : Record 11229278;
      Employee@1100525005 : Record 5200;
      Item@1100525007 : Record 27;
      ETIMVendor@1100525011 : Record 11012304;
      TradeItem@1100525010 : Record 11012317;
      UnitofMeasure@1100525009 : Record 204;
      Location@1100525008 : Record 14;
      RequisitionLine@1100525003 : Record 246;
      RequisitionLine2@1100525012 : Record 246;
      Error@1100525004 : Boolean;
    BEGIN
      // C024394
      WITH DebriefRestockItem DO BEGIN
        //* Check
        // No Workorder for this debrief type, Work Order No is always empty here.
        IF NOT CheckResource(DebriefLogbook, "Line No.", TRUE, Resource, Employee) THEN
          Error := TRUE;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT Item.GET("Item No.") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Item No."), "Item No."), DebriefLogbook, "Line No.");
          END;
        END;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT ETIMVendor.GET("Vendor (Trade Item)") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Vendor (Trade Item)"), "Vendor (Trade Item)"), DebriefLogbook, "Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT TradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
            IF NOT AddTradeItem("Vendor (Trade Item)", "Trade Item") THEN BEGIN
              Error := TRUE;
              ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Trade Item"), STRSUBSTNO('%1; %2',"Vendor (Trade Item)", "Trade Item")), DebriefLogbook, "Line No.");
            END;
          END;
        END;
        IF ("Item No." = '') AND ("Trade Item" = '') THEN
          ErrorRec.WriteError(STRSUBSTNO(Text001, STRSUBSTNO('%1/%2', FIELDCAPTION("Item No."), FIELDCAPTION("Trade Item"))), DebriefLogbook, "Line No.");
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT UnitofMeasure.GET("Unit of Measure") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Unit of Measure"), "Unit of Measure"), DebriefLogbook, "Line No.");
          END;
        END;
        IF ("New Location Code" <> '') THEN BEGIN
          IF NOT Location.GET("New Location Code") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("New Location Code"), "New Location Code"), DebriefLogbook, "Line No.");
          END;
        END ELSE
          ErrorRec.WriteError(STRSUBSTNO(Text001, FIELDCAPTION("New Location Code")), DebriefLogbook, "Line No.");

        IF Error THEN
          EXIT(FALSE);

        MobileSetup.GET;
        MobileSetup.TESTFIELD("Requisition Wksh. Templ. Name");
        MobileSetup.TESTFIELD("Requisition Wksh. Name");

        RequisitionLine.INIT;
        RequisitionLine.VALIDATE("Worksheet Template Name", MobileSetup."Requisition Wksh. Templ. Name");
        RequisitionLine.VALIDATE("Journal Batch Name", MobileSetup."Requisition Wksh. Name");
        RequisitionLine2 := RequisitionLine;
        RequisitionLine2.SETRANGE("Worksheet Template Name", RequisitionLine2."Worksheet Template Name");
        RequisitionLine2.SETRANGE("Journal Batch Name", RequisitionLine2."Journal Batch Name");
        IF RequisitionLine2.FINDLAST THEN
          RequisitionLine."Line No." := RequisitionLine2."Line No." + 10000
        ELSE
          RequisitionLine."Line No." := 10000;
        RequisitionLine."Order Date" := WORKDATE;
        RequisitionLine.INSERT(TRUE);
        RequisitionLine.VALIDATE(Type, RequisitionLine.Type::Item);
        IF ("Item No." <> '') THEN
          RequisitionLine.VALIDATE("No.", "Item No.");
        IF ("Vendor (Trade Item)" <> '') AND ("Trade Item" <> '') THEN BEGIN
          RequisitionLine.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
          RequisitionLine.VALIDATE("Trade Item", "Trade Item");
        END;
        IF (Description <> '') THEN
          RequisitionLine.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          RequisitionLine.VALIDATE("Description 2", "Description 2");
        IF ("Unit of Measure" <> '') THEN
          RequisitionLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
        IF (Quantity <> 0) THEN
          RequisitionLine.VALIDATE(Quantity, ROUND(Quantity, 0.00001));
        RequisitionLine.VALIDATE(Deliver, RequisitionLine.Deliver::Location);
        RequisitionLine.VALIDATE("Ship To Location", "New Location Code");
        RequisitionLine."Decentral Created Guid" := "Decentral Created Guid";
        RequisitionLine.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefCreateRestockPurchOrder@1100525008(VAR DebriefCreateRestockPO@1100525000 : Record 11229869;DebriefILogbook@1100525001 : Record 11012677) : Boolean;
    VAR
      RequisitionLine@1100525002 : Record 246;
      ReqWkshMakeOrder@1100525003 : Codeunit 333;
    BEGIN
      // C024394
      WITH DebriefCreateRestockPO DO BEGIN
        RequisitionLine.SETRANGE("Decentral Created Guid", "Decentral Created Guid");
        IF NOT RequisitionLine.FINDSET THEN
          EXIT(TRUE);
        ReqWkshMakeOrder.SetMethod(0); // Collect by Vendor
        ReqWkshMakeOrder.CarryOutBatchAction(RequisitionLine);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefPlanning@1100409000(VAR VarDebriefPlanning@1100485001 : Record 11125646;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527003 : Record 11229279;
      ServOrder@1100527002 : Record 11012823;
      Project@1100527001 : Record 11072003;
      lvError@1100485000 : Boolean;
      StartDateTime@1100527000 : DateTime;
    BEGIN
      WITH VarDebriefPlanning DO BEGIN
        IF NOT CheckWorkorder(ILogbookRec, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
          lvError := TRUE;
          EXIT(FALSE); //* When order not present, no further testing
        END;

        IF lvError THEN
          EXIT(FALSE);

        StartDateTime := CREATEDATETIME("Starting Date", "Starting Time");
        IF StartDateTime <> WorkOrder."Starting Date/Time" THEN BEGIN
          WorkOrder."Ending Date/Time" := 0DT;

          WorkOrder.VALIDATE("Starting Date/Time", StartDateTime);
          WorkOrder.MODIFY(TRUE);
        END;

        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckPermissionRefPoint@1100485010();
    BEGIN
      //db, 03-09-07
      //* Empty function that checks permission of user to write log moment (table 11020296).
      //* For Mobile, just like FSA.
    END;

    PROCEDURE CheckMobSetupReasonReceivComp@1100527001(ReceivingCompany@1100527001 : Text[30];Logbook@1100527004 : Record 11012677;LineNo@1100527005 : Integer) : Boolean;
    VAR
      MobileSetup@1100529300 : Record 11012676;
      MobileSetup2@1100527002 : Record 11012676;
      MaxLen@1100527006 : Integer;
      ErrorText@1100527003 : Text[500];
    BEGIN
      MobileSetup.GET;
      IF (ReceivingCompany <> '') AND (ReceivingCompany <> COMPANYNAME) THEN BEGIN
        MobileSetup2.CHANGECOMPANY(ReceivingCompany);
        IF NOT MobileSetup2.GET THEN
          MobileSetup2.INIT;
        IF MobileSetup."Reason Code Hours/Material" <> MobileSetup2."Reason Code Hours/Material" THEN BEGIN
          ErrorText := STRSUBSTNO(Text006,
            MobileSetup.TABLECAPTION, MobileSetup.FIELDCAPTION("Reason Code Hours/Material"), ReceivingCompany,
            MobileSetup2."Reason Code Hours/Material", MobileSetup."Reason Code Hours/Material");
          MaxLen := MAXSTRLEN(ErrorRec."Error Message");
          ErrorRec.WriteError(COPYSTR(ErrorText, 1, MaxLen), Logbook, LineNo);
          IF STRLEN(ErrorText) > MaxLen THEN
            ErrorRec.WriteError(COPYSTR(ErrorText, MaxLen+1, MaxLen), Logbook, LineNo);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckWorkorder@1100529000(Logbook@1100529000 : Record 11012677;LineNo@1100529001 : Integer;InCurrCompany@1100529005 : Boolean;VAR WorkOrder@1100529002 : Record 11229279;VAR ServOrder@1100529003 : Record 11012823;VAR Project@1100529004 : Record 11072003) : Boolean;
    VAR
      Errors@1100529006 : Boolean;
    BEGIN
      WITH WorkOrder DO BEGIN
        Errors := FALSE;
        CLEAR(WorkOrder);
        CLEAR(ServOrder);
        CLEAR(Project);
        IF (Logbook."Work Order No." = '') OR (NOT GET(Logbook."Work Order No.")) THEN BEGIN
          Errors := TRUE;
          ErrorRec.WriteError(
            STRSUBSTNO(Text000, Logbook.FIELDCAPTION("Work Order No."), Logbook."Work Order No."), Logbook, LineNo);
        END ELSE BEGIN
          IF "Source No." = '' THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text003, FIELDCAPTION("Source No."), Logbook.FIELDCAPTION("Work Order No.")), Logbook, LineNo);
          END;
          IF "Source Company" = '' THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text003, FIELDCAPTION("Source Company"), Logbook.FIELDCAPTION("Work Order No.")), Logbook, LineNo);
          END;
          IF InCurrCompany THEN BEGIN //For most Debrief Types the Source of the workorder must be in de current company
            IF WorkOrder."Source Company" <> COMPANYNAME THEN BEGIN
              Errors := TRUE;
              ErrorRec.WriteError(
                STRSUBSTNO(Text004,FIELDCAPTION("Source Company"),"Source Company",Logbook.FIELDCAPTION("Work Order No."),COMPANYNAME),
                Logbook, LineNo);
            END;
         END;
        END;
        IF NOT Errors THEN BEGIN
          CASE "Source Type" OF
            "Source Type"::ServiceOrder:
              BEGIN
                IF "Source Company" <> COMPANYNAME THEN
                  ServOrder.CHANGECOMPANY("Source Company");
                IF NOT ServOrder.GET("Source No.") THEN BEGIN
                  Errors := TRUE;
                  ErrorRec.WriteError(STRSUBSTNO(Text000, ServOrder.TABLECAPTION, "Source No."), Logbook, LineNo);
                END;
              END;
            "Source Type"::Project:
              BEGIN
                IF "Source Company" <> COMPANYNAME THEN
                  Project.CHANGECOMPANY("Source Company");
                IF NOT Project.GET("Source No.") THEN BEGIN
                  Errors := TRUE;
                  ErrorRec.WriteError(STRSUBSTNO(Text000, Project.TABLECAPTION, "Source No."), Logbook, LineNo);
                END;
              END;
          END;
        END;
      END;
      EXIT(NOT Errors);
    END;

    LOCAL PROCEDURE CheckResource@1100529001(Logbook@1100529000 : Record 11012677;LineNo@1100529003 : Integer;InCurrCompany@1100529004 : Boolean;VAR Resource@1100529001 : Record 11229278;VAR Empl@1100529002 : Record 5200) : Boolean;
    VAR
      WorkOrder@1100529005 : Record 11229279;
      Errors@1100529006 : Boolean;
    BEGIN
      WITH Resource DO BEGIN
        Errors := FALSE;
        CLEAR(Resource);
        CLEAR(Empl);
        IF (Logbook."Resource No. (Employee)" = '') OR (NOT GET(Logbook."Resource No. (Employee)")) THEN BEGIN
          Errors := TRUE;
          ErrorRec.WriteError(
            STRSUBSTNO(Text000, WorkOrder.FIELDCAPTION("Resource No."), Logbook."Resource No. (Employee)"),
            Logbook, LineNo);
        END ELSE BEGIN
          IF Type <> Resource.Type::Employee THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text004, Type, Type, WorkOrder.FIELDCAPTION("Resource No."), FORMAT(Type::Employee)),
              Logbook, LineNo);
          END ELSE BEGIN
            IF "Source No." = '' THEN BEGIN
              Errors := TRUE;
              ErrorRec.WriteError(
                STRSUBSTNO(Text003, FIELDCAPTION("Source No."), WorkOrder.FIELDCAPTION("Resource No.")),
                Logbook, LineNo);
            END;
            IF Company = '' THEN BEGIN
              Errors := TRUE;
              ErrorRec.WriteError(
                STRSUBSTNO(Text003, FIELDCAPTION(Company), WorkOrder.FIELDCAPTION("Resource No.")), Logbook, LineNo);
            END;
            IF InCurrCompany THEN BEGIN //For some Debrief Types the Source of the resource must be in de current company
              IF Company <> COMPANYNAME THEN BEGIN
                Errors := TRUE;
                ErrorRec.WriteError(
                  STRSUBSTNO(Text004, FIELDCAPTION(Company), Company, WorkOrder.FIELDCAPTION("Resource No."), COMPANYNAME),
                  Logbook, LineNo);
              END;
            END;
          END;
        END;
        IF NOT Errors THEN BEGIN
          IF Company <> COMPANYNAME THEN
            Empl.CHANGECOMPANY(Company);
          IF (Resource."Source No." = '') OR (NOT Empl.GET(Resource."Source No.")) THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, Empl.TABLECAPTION, Resource."Source No."), Logbook, LineNo);
          END;
        END;
      END;
      EXIT(NOT Errors);
    END;

    LOCAL PROCEDURE PostDebriefWUPProduction@1100525000(VAR VarDebriefProduction@1100525001 : Record 11125650;ILogbook@1100525000 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100525004 : Record 11229279;
      ServiceOrder@1100525003 : Record 11012823;
      Project@1100525002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(ILogbook, VarDebriefProduction."Line No.", TRUE, WorkOrder, ServiceOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefWUPProductionSO(VarDebriefProduction, ILogbook, WorkOrder, ServiceOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, ILogbook.FIELDCAPTION("Debrief Type"), ILogbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            ILogbook, VarDebriefProduction."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefWUPProductionSO@1100525004(VAR DebriefSUPProduction@1100525001 : Record 11125650;ILogbook@1100525000 : Record 11012677;IWorkOrder@1100525002 : Record 11229279;IServiceOrder@1100525005 : Record 11012823) : Boolean;
    VAR
      ServiceOrderExtension@1100525008 : Record 11071727;
      SUPRecordingLine@1100529400 : Record 11071772;
      SUPRecordingLine2@1100529401 : Record 11071772;
      SUPProduction@1100525006 : Record 11071773;
      SUPProductionLine@1100525004 : Record 11071774;
      MobileSetup@1100528700 : Record 11012676;
      DebriefSUPProduction2@1100525009 : Record 11125650;
      LineNo@1100525007 : Integer;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(IServiceOrder."No.");

      IF (DebriefSUPProduction."Has Been Added by User") AND (DebriefSUPProduction."Recording Line No." < 0) THEN BEGIN
        // Mobile only
        DebriefSUPProduction2.SETRANGE("Work Order No.", DebriefSUPProduction."Work Order No.");
        DebriefSUPProduction2.SETRANGE("Resource No. (Employee)", DebriefSUPProduction."Resource No. (Employee)");
        DebriefSUPProduction2.SETRANGE("Has Been Added by User", TRUE);
        DebriefSUPProduction2.SETRANGE("Decentral Recording Line No.", DebriefSUPProduction."Recording Line No.");
        DebriefSUPProduction2.SETFILTER("Recording Line No.", '>%1', 0);
        IF DebriefSUPProduction2.FINDFIRST THEN BEGIN
          DebriefSUPProduction."Decentral Recording Line No." := DebriefSUPProduction."Recording Line No.";
          DebriefSUPProduction."Recording Line No." := DebriefSUPProduction2."Recording Line No.";
          DebriefSUPProduction.MODIFY;
        END;
      END;

      IF DebriefSUPProduction."Has Been Added by User" THEN BEGIN
        SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
        SUPRecordingLine.SETRANGE("Line No.", DebriefSUPProduction."Recording Line No.");
        IF NOT SUPRecordingLine.FINDFIRST THEN BEGIN
          IF (DebriefSUPProduction."Recording Line No." = 0) AND (DebriefSUPProduction."Decentral Guid" = '') THEN BEGIN
            // Mobile only
            // find again to support old versions (can be removed in future versions)
            SUPRecordingLine.RESET;
            SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
            SUPRecordingLine.SETRANGE("Unit Price Code", DebriefSUPProduction."Unit Price Code");
            SUPRecordingLine.SETRANGE(Room, DebriefSUPProduction.Room);
            SUPRecordingLine.SETRANGE(Part, DebriefSUPProduction.Part);
          END;
          IF NOT SUPRecordingLine.FINDFIRST THEN BEGIN
            SUPRecordingLine.VALIDATE("Service Order No.", IServiceOrder."No.");
            SUPRecordingLine.InitRecord;
            SUPRecordingLine2.SETRANGE("Service Order No.", IServiceOrder."No.");
            IF SUPRecordingLine2.FINDLAST THEN
              SUPRecordingLine."Line No." := SUPRecordingLine2."Line No." + 10000
            ELSE
              SUPRecordingLine."Line No." := 10000;
            SUPRecordingLine.VALIDATE(Room, DebriefSUPProduction.Room);
            SUPRecordingLine.VALIDATE(Part, DebriefSUPProduction.Part);
            SUPRecordingLine.VALIDATE("Unit Price Code", DebriefSUPProduction."Unit Price Code");
            SUPRecordingLine.VALIDATE("Unit of Measure", DebriefSUPProduction."Unit of Measure");
            IF (DebriefSUPProduction."Unit Price" <> 0) THEN
              SUPProductionLine.VALIDATE("Unit Price", DebriefSUPProduction."Unit Price");
            IF (IServiceOrder."Unit Price Status" = IServiceOrder."Unit Price Status"::"Pre-Recording") AND
               (DebriefSUPProduction."Unit Price Status" = DebriefSUPProduction."Unit Price Status"::"Pre-Recording") THEN
              SUPRecordingLine.VALIDATE("Pre-Recording Quantity", DebriefSUPProduction."Pre-Recording Quantity");
            IF (IServiceOrder."Unit Price Status" = IServiceOrder."Unit Price Status"::Recording) AND
               (DebriefSUPProduction."Unit Price Status" = DebriefSUPProduction."Unit Price Status"::Recording) THEN
              SUPRecordingLine.VALIDATE("Recording Quantity", DebriefSUPProduction."Recording Quantity");
            SUPRecordingLine.Description := DebriefSUPProduction.Description;
            SUPRecordingLine."Description 2" := DebriefSUPProduction."Description 2";
            SUPRecordingLine."Description 3" := DebriefSUPProduction."Description 3";
            SUPRecordingLine."Decentral Guid" := DebriefSUPProduction."Decentral Guid";
            SUPRecordingLine.INSERT(FALSE); // Avoid message
            DebriefSUPProduction."Decentral Recording Line No." := DebriefSUPProduction."Recording Line No.";
            DebriefSUPProduction."Recording Line No." := SUPRecordingLine."Line No.";
            DebriefSUPProduction.MODIFY;

            PostDebriefSUPRecordingLineComment(SUPRecordingLine, DebriefSUPProduction);
          END;
        END;
      END ELSE BEGIN
        IF (DebriefSUPProduction."Recording Line No." <> 0) THEN BEGIN
          SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
          SUPRecordingLine.SETRANGE("Line No.", DebriefSUPProduction."Recording Line No.");
          SUPRecordingLine.FINDFIRST;
        END ELSE BEGIN
          // Mobile only
          // find again to support old versions (can be removed in future versions)
          SUPRecordingLine.RESET;
          SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
          SUPRecordingLine.SETRANGE("Unit Price Code", DebriefSUPProduction."Unit Price Code");
          SUPRecordingLine.SETRANGE(Room, DebriefSUPProduction.Room);
          SUPRecordingLine.SETRANGE(Part, DebriefSUPProduction.Part);
          SUPRecordingLine.FINDFIRST;
        END;
      END;

      //* Post
      IF (IServiceOrder."Unit Price Status" = IServiceOrder."Unit Price Status"::"Production Recording") AND
         ((DebriefSUPProduction."Unit Price Status" = DebriefSUPProduction."Unit Price Status"::" ") OR
          (DebriefSUPProduction."Unit Price Status" = DebriefSUPProduction."Unit Price Status"::"Production Recording")) THEN BEGIN
        SUPProductionLine.SETRANGE("Service Order No.", IServiceOrder."No.");
        SUPProductionLine.SETRANGE("Production Date", DebriefSUPProduction."Production Date");
        SUPProductionLine.SETRANGE("Recording Line No.", SUPRecordingLine."Line No.");
        SUPProductionLine.SETRANGE("SUP Production Status", SUPProductionLine."SUP Production Status"::Proposal);
        IF NOT SUPProductionLine.FINDFIRST THEN BEGIN
          SUPProduction.SETRANGE("Service Order No.", IServiceOrder."No.");
          SUPProduction.SETRANGE("Production Date", DebriefSUPProduction."Production Date");
          SUPProduction.SETRANGE(Status, SUPProduction.Status::Proposal);
          IF NOT SUPProduction.FINDFIRST THEN BEGIN
            SUPProduction.INIT;
            SUPProduction.VALIDATE("Service Order No.", IServiceOrder."No.");
            SUPProduction.VALIDATE("Production Date", DebriefSUPProduction."Production Date");
            SUPProduction.INSERT(TRUE);
          END;
          SUPProductionLine.RESET;
          SUPProductionLine.SETRANGE("Service Order No.", IServiceOrder."No.");
          SUPProductionLine.SETRANGE("Production Seq. No.", SUPProduction."Seq. No.");
          IF SUPProductionLine.FINDLAST THEN
            LineNo := SUPProductionLine."Line No.";
          LineNo += 10000;

          SUPProductionLine.INIT;
          SUPProductionLine."Service Order No." := SUPProduction."Service Order No.";
          SUPProductionLine."Production Seq. No." := SUPProduction."Seq. No.";
          SUPProductionLine."Production Date" := SUPProduction."Production Date";
          SUPProductionLine."Production Time" := SUPProduction."Production Time";
          SUPProductionLine."Production Date/Time" := SUPProduction."Production Date/Time";
          IF SUPRecordingLine."Unit Price Code" <> '' THEN BEGIN
            SUPProductionLine."Price Book Type" := IServiceOrder."Price Book Type";
            SUPProductionLine."Price Book Code" := ServiceOrderExtension."Price Book Code";
            SUPProductionLine."Index Date" := ServiceOrderExtension."Price Book Index Date";
          END;
          SUPProductionLine."Line No." := LineNo;
          SUPProductionLine."Unit Price Code" := SUPRecordingLine."Unit Price Code";
          SUPProductionLine."Alternative Unit Price Code" := SUPProductionLine."Unit Price Code";
          SUPProductionLine.Description := SUPRecordingLine.Description;
          SUPProductionLine."Description 2" := SUPRecordingLine."Description 2";
          SUPProductionLine."Description 3" := SUPRecordingLine."Description 3";
          SUPProductionLine."Unit of Measure" := SUPRecordingLine."Unit of Measure";
          SUPProductionLine."Unit Price" := SUPRecordingLine."Unit Price";
          SUPProductionLine."Recording Line No." := SUPRecordingLine."Line No.";
          IF SUPProductionLine.INSERT(TRUE) THEN BEGIN
            SUPProductionLine.SETFILTER("Prev. Prod. Date/Time Filter", '<%1', SUPProduction."Production Date/Time");
            SUPProductionLine.CALCFIELDS("Previous Prod. Cumulative");
            SUPProductionLine.VALIDATE("Production Cumulative", SUPProductionLine."Previous Prod. Cumulative");
            SUPProductionLine.VALIDATE(Production, DebriefSUPProduction.Production);
            SUPProductionLine.Comment := SUPRecordingLine.Comment;
            SUPProductionLine.Room := SUPRecordingLine.Room;
            SUPProductionLine.Part := SUPRecordingLine.Part;
            SUPProductionLine.MODIFY(TRUE);
          END;
        END ELSE BEGIN
          SUPProductionLine.VALIDATE(Production, DebriefSUPProduction.Production);
          SUPProductionLine.MODIFY(TRUE);
        END;

        MobileSetup.GET;
        IF MobileSetup."Create CP Lines for SUP Auto" THEN BEGIN
          SUPProduction.GET(SUPProductionLine."Service Order No.", SUPProductionLine."Production Seq. No.");
          SUPProduction.VALIDATE(Status, SUPProduction.Status::Approved);
          SUPProduction.MODIFY(TRUE);
          SUPProduction.CreateCostPlusEntries;
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDebriefSUPRecordingLineComment@1100528034(SUPRecordingLine@1100528004 : Record 11071772;DebriefWUPProduction@1100528000 : Record 11125650);
    VAR
      DebriefSUPRecLineComment@1100528001 : Record 11126708;
      SUPRecLineCommentLine@1100528003 : Record 11072290;
      LineNo@1100528005 : Integer;
    BEGIN
      DebriefSUPRecLineComment.SETRANGE("Work Order No.", DebriefWUPProduction."Work Order No.");
      DebriefSUPRecLineComment.SETRANGE("Resource No. (Employee)", DebriefWUPProduction."Resource No. (Employee)");
      DebriefSUPRecLineComment.SETRANGE("Decentral Guid", DebriefWUPProduction."Decentral Guid");
      IF DebriefSUPRecLineComment.FINDSET THEN
        REPEAT
          SUPRecLineCommentLine.SETRANGE("Service Order No.", SUPRecordingLine."Service Order No.");
          SUPRecLineCommentLine.SETRANGE("SUP Recording Line No.", SUPRecordingLine."Line No.");
          IF SUPRecLineCommentLine.FINDLAST THEN
            LineNo := SUPRecLineCommentLine."Line No." + 10000
          ELSE
            LineNo := 10000;
          SUPRecLineCommentLine."Service Order No." := SUPRecordingLine."Service Order No.";
          SUPRecLineCommentLine."SUP Recording Line No." := SUPRecordingLine."Line No.";
          SUPRecLineCommentLine."Line No." := LineNo;
          SUPRecLineCommentLine.Comment := DebriefSUPRecLineComment.Comment;
          SUPRecLineCommentLine.Date := TODAY;
          SUPRecLineCommentLine.INSERT(TRUE);
        UNTIL DebriefSUPRecLineComment.NEXT = 0;
    END;

    LOCAL PROCEDURE PostDebriefServiceOrderObject@1100528700(VAR DebriefServiceOrderObject@1100528701 : Record 11125652;Logbook@1100528700 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100528704 : Record 11229279;
      ServiceOrder@1100528703 : Record 11012823;
      Project@1100528702 : Record 11072003;
    BEGIN
      // dp00276
      IF CheckWorkorder(Logbook, DebriefServiceOrderObject."Line No.", TRUE, WorkOrder, ServiceOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefServiceOrderObjectSO(DebriefServiceOrderObject, Logbook, WorkOrder, ServiceOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefServiceOrderObject."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefServiceOrderObjectSO@1100528701(VAR DebriefServiceOrderObject@1100528703 : Record 11125652;Logbook@1100528702 : Record 11012677;WorkOrder@1100528701 : Record 11229279;ServiceOrder@1100528700 : Record 11012823) : Boolean;
    VAR
      MobileSetup@1100527000 : Record 11012676;
      ServiceObject@1100409000 : Record 11071691;
      ServiceOrderObject@1100528704 : Record 11071724;
      StandardObject@1100528708 : Record 11020334;
      MobileDecentralObject@1100525000 : Record 11012688;
      ServiceSetup@1100525001 : Record 11012800;
      ReplacementLine@1100525003 : Record 11071710;
      ServiceObjectReplacement@1100525004 : Record 11071691;
      ServiceInspectionManagement@1100409002 : Codeunit 11012844;
      ObjectInspectionManagement@1100409001 : Codeunit 11012848;
      ReplacementManagement@1100525002 : Codeunit 11012838;
      MaintenanceManagement@1100525005 : Codeunit 11012829;
      ServiceContractNo@1100525007 : Code[20];
      ReferenceDate@1100525006 : Date;
      Descr@1100528100 : Text[100];
      Descr2@1100528101 : Text[50];
    BEGIN
      MobileSetup.GET;

      // dp00276
      WITH DebriefServiceOrderObject DO BEGIN
      // DP00826.sn
        IF ServiceObject.GET("Service Object No.") THEN BEGIN
          "Old Description" := ServiceObject.Description;
          "Old Standard Object No." := ServiceObject."Standard Object No.";
          "Old Brand Code" := ServiceObject."Brand Code";
          "Old Model Code" := ServiceObject."Model Code";
          "Old Type Code" := ServiceObject."Type Code";
          "Old Building" := ServiceObject.Building;
          "Old Floor" := ServiceObject.Floor;
          "Old Room" := ServiceObject.Room;
          "Old Object Customer" := ServiceObject."Object Customer";
          "Old Quantity" := ServiceObject.Quantity;
        END;

        IF "Has Been Deleted by User" AND ("Service Object No." <> '') THEN BEGIN
          ServiceOrderObject.RESET;
          ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
          ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
          IF ServiceOrderObject.FINDFIRST THEN BEGIN
            IF NOT ServiceOrderObject.Finished THEN // avoid message
              ServiceOrderObject.DELETE(TRUE);
          END;

          IF MobileSetup."Serv. Loc. Change in Obj. Debr" THEN BEGIN
            ServiceOrderObject.RESET;
            ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
            IF ServiceOrderObject.ISEMPTY THEN BEGIN
              IF ServiceOrder."Service Location No." <> '' THEN BEGIN
                ServiceOrder.GET(ServiceOrder."No.");
                ServiceOrder.VALIDATE("Service Location No.", '');
                ServiceOrder.MODIFY(TRUE);
              END;
            END;
          END;
          EXIT(TRUE);
        END;
      // DP00826.en

        //* Check
        IF (NOT "Has Been Added by User") AND (NOT "Has Been Created by User") THEN BEGIN
          ServiceOrderObject.RESET;
          ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
          ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
          IF ServiceOrderObject.ISEMPTY THEN BEGIN
            ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceOrderObject.TABLECAPTION, WorkOrder."Source No." + '-' + "Service Object No."),
                Logbook, "Line No.");
            EXIT(FALSE);
          END;
        END;

        IF "Has Been Created by User" THEN BEGIN
          MobileDecentralObject.SETRANGE("Work Order No.", "Work Order No.");
          MobileDecentralObject.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          MobileDecentralObject.SETRANGE("Mobile Service Object No.", "Mobile Service Object No.");
          IF NOT MobileDecentralObject.FINDFIRST THEN BEGIN
            ServiceObject.INIT;
            ServiceObject.INSERT(TRUE);
            ServiceObject.VALIDATE("Standard Object No.", "Standard Object No.");
            ServiceObject.VALIDATE("Service Location No.", ServiceOrder."Service Location No.");
            ServiceObject.MODIFY(TRUE);

            MobileDecentralObject.INIT;
            MobileDecentralObject."Work Order No." := "Work Order No.";
            MobileDecentralObject."Resource No. (Employee)" := "Resource No. (Employee)";
            MobileDecentralObject."Mobile Service Object No." := "Mobile Service Object No.";
            MobileDecentralObject."Service Object No." := ServiceObject."No.";
            MobileDecentralObject.INSERT;
          END;
          "Service Object No." := MobileDecentralObject."Service Object No.";
        END;

        IF "Has Been Modified by User" OR "Has Been Added by User" OR "Has Been Created by User" THEN BEGIN
          IF NOT ServiceObject.GET("Service Object No.") THEN BEGIN
            ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceObject.TABLECAPTION, "Service Object No."),
                Logbook, "Line No.");
            EXIT(FALSE);
          END;
          IF ServiceObject."Standard Object No." <> "Standard Object No." THEN BEGIN
            StandardObject.GET("Standard Object No.");
            Descr := ServiceObject.Description;
            Descr2 := ServiceObject."Description 2";
            ServiceObject.Description := StandardObject.Description; // avoid message
            ServiceObject."Description 2" := StandardObject."Description 2"; // avoid message
            ServiceObject.VALIDATE("Standard Object No.", "Standard Object No.");
            ServiceObject.MODIFY(TRUE);
            ServiceObject.Description := Descr;
            ServiceObject."Description 2" := Descr2;

            ServiceOrderObject.RESET;
            ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
            ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
            IF ServiceOrderObject.FINDFIRST THEN BEGIN
              ServiceInspectionManagement.DeleteSOInspectionLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Object No.",
                ServiceOrderObject."Maintenance Scheme");
              ObjectInspectionManagement.DeleteSOSpecificationLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Object No.");
              ServiceInspectionManagement.CreateSOInspectionLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Service Contract No.",
                ServiceOrderObject."Object No.",
                ServiceOrderObject."Maintenance Scheme",
                ServiceOrderObject.Code);
              ObjectInspectionManagement.CreateSOSpecificationLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Object No.");
            END;
          END;
          ServiceObject.Description := Description;
      // DP00826.sn
          ServiceSetup.GET;
          IF NOT ServiceSetup."Sync. Object Brand/Model/Type" THEN BEGIN
            IF ("Brand Code" <> ServiceObject."Brand Code") THEN
              ServiceObject.VALIDATE("Brand Code", "Brand Code");
            IF ("Model Code" <> ServiceObject."Model Code") THEN
              ServiceObject.VALIDATE("Model Code", "Model Code");
            IF ("Type Code" <> ServiceObject."Type Code") THEN
              ServiceObject.VALIDATE("Type Code", "Type Code");
          END;
      // DP00826.en
          ServiceObject.Building := Building;
          ServiceObject.Floor := Floor;
          ServiceObject.Room := Room;
          ServiceObject."Object Customer" := "Object Customer";
          IF ServiceObject."Quantity Based on" = ServiceObject."Quantity Based on"::"Service Object" THEN
            ServiceObject.Quantity := Quantity;
          ServiceObject.MODIFY(TRUE);
        END;

      // DP00835.sn
        IF "Has Been Replaced by User" THEN BEGIN
          IF NOT ServiceObject.GET("Service Object No.") THEN BEGIN
            ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceObject.TABLECAPTION, "Service Object No."),
                Logbook, "Line No.");
            EXIT(FALSE);
          END;

          ServiceObject."Replace with Standard Object" := "Standard Obj. No. Replacement";
          ReplacementLine.INIT;
          ReplacementManagement.InsertObject(
            ReplacementLine, ServiceObject, ServiceObjectReplacement, "Effective Date Replacement");
          ServiceObjectReplacement.Description := "Description Replacement";
          ServiceObjectReplacement.MODIFY;

          IF ServiceOrder."Service Contract No." <> '' THEN BEGIN
            ReplacementManagement.InsertContractObject(ServiceObjectReplacement, ServiceOrder."Service Contract No.", "Effective Date Replacement");
            ReplacementManagement.CloseContractObject(ServiceObject, ServiceOrder."Service Contract No.", "Effective Date Replacement" - 1);
          END;
        END;
      // DP00835.en

        IF "Has Been Added by User" OR "Has Been Created by User" OR "Has Been Replaced by User" THEN BEGIN
          ServiceOrderObject.RESET;
          ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
          IF "Has Been Replaced by User" THEN
            ServiceOrderObject.SETRANGE("Object No.", ServiceObjectReplacement."No.")
          ELSE
            ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
          IF NOT ServiceOrderObject.FINDFIRST THEN BEGIN
            ServiceOrderObject.INIT;
            ServiceOrderObject.VALIDATE("Service Order No.", WorkOrder."Source No.");
            IF "Has Been Replaced by User" THEN
              ServiceOrderObject.VALIDATE("Object No.", ServiceObjectReplacement."No.")
            ELSE
              ServiceOrderObject.VALIDATE("Object No.", "Service Object No.");
            ServiceOrderObject.INSERT(TRUE);
          END;

          IF ServiceOrder."Service Contract No." = '' THEN BEGIN
            ServiceOrderObject.RESET;
            ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
            IF ServiceOrderObject.COUNT = 1 THEN BEGIN
              ServiceOrder.GET(ServiceOrder."No.");
              IF ServiceOrder."Starting Date" <> 0D THEN
                ReferenceDate := ServiceOrder."Starting Date"
              ELSE
                ReferenceDate := ServiceOrder."Order Date";
              IF MaintenanceManagement.GetNoOfActualContractsForObj(ServiceOrderObject."Object No.", ReferenceDate, ServiceContractNo) = 1 THEN BEGIN
                ServiceOrder.VALIDATE("Service Contract No.", ServiceContractNo);
                ServiceOrder.MODIFY(TRUE);
              END;
            END;
          END;

          IF MobileSetup."Serv. Loc. Change in Obj. Debr" THEN BEGIN
            IF ServiceOrder."Service Location No." = '' THEN BEGIN
              ServiceOrderObject.RESET;
              ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
              IF ServiceOrderObject.COUNT = 1 THEN BEGIN
                ServiceObject.GET(ServiceOrderObject."Object No.");
                ServiceOrder.GET(ServiceOrder."No.");
                ServiceOrder.VALIDATE("Service Location No.", ServiceObject."Service Location No.");
                ServiceOrder.MODIFY(TRUE);
              END;
            END;
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDebriefPurchaseReceiptLine@1100528024(VAR DebriefPurchaseReceiptLine@1100528001 : Record 11126704;Logbook@1100528000 : Record 11012677) : Boolean;
    VAR
      PurchaseLine@1100528006 : Record 39;
    BEGIN
      WITH DebriefPurchaseReceiptLine DO BEGIN
        PurchaseLine.RESET;
        PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
        PurchaseLine.SETRANGE("Document No.", "Purchase Order No.");
        PurchaseLine.SETRANGE("Line No.", "Purchase Order Line No.");
        IF PurchaseLine.FINDFIRST THEN BEGIN
          PurchaseLine.VALIDATE("Allow Exceeding Order Quantity", TRUE);
          PurchaseLine.VALIDATE("Qty. to Receive", "Quantity Received");
          PurchaseLine.MODIFY(TRUE);
        END ELSE BEGIN
          ErrorRec.WriteError(
            STRSUBSTNO(Text000, PurchaseLine.TABLECAPTION, "Purchase Order No."),
            Logbook, "Line No.");
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateFLSStatus@1100528300(ServiceOrder@1100409000 : Record 11012823;DebriefFSStatusMobile@1100528300 : Record 11012683);
    VAR
      FLSVisiTourInterface@1100409003 : Codeunit 11072090;
    BEGIN
      IF (ServiceOrder."FLS VisiTour ID" = 0) THEN
        EXIT;

      CASE DebriefFSStatusMobile."Field Service Status" OF
        '30', '50', '60', '65', '70', '90':
          FLSVisiTourInterface.MobileMessage(ServiceOrder, DebriefFSStatusMobile);
      END;
    END;

    LOCAL PROCEDURE DPA_OnInsertAltUserID@1000000000(ServOrderRecNoSeries@1100285306 : Code[10];lvUserID@1100285302 : Code[50];VAR lvGlobDim1Code@1100285301 : Code[20]) : Boolean;
    VAR
      DepartmentAuthorizObject@1100285300 : Record 11012466;
      DPA_Management@1100285303 : Codeunit 11012783;
      Dimension1Code@1100285304 : Code[20];
    BEGIN
      //4PSSE
      //151229
      //IF NOT DPA_IsActive THEN
      //  EXIT;
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      DPA_Management.SetAlternativeUserID(lvUserID);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);


      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          ServOrderRecNoSeries,
          '',
          DATABASE::"Service Order");
      IF Dimension1Code <> '' THEN BEGIN
        lvGlobDim1Code := Dimension1Code;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSUPOrder@1100528702(ServiceOrderNo@1100528700 : Code[20]) : Boolean;
    VAR
      SUPRecordingLine@1100528701 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrderNo);
      EXIT(NOT SUPRecordingLine.ISEMPTY);
    END;

    LOCAL PROCEDURE InsertOrModifyServLocContactDebrief@1100528601(IServiceOrderNo@1100528600 : Code[20];ITableNo@1100528603 : Integer;IFieldNo@1100528601 : Integer;IOldValue@1100528602 : Text[80];INewValue@1100528604 : Text[80]);
    VAR
      ServiceLocContactDebrief@1100528605 : Record 11072288;
    BEGIN
      IF NOT (ITableNo IN [DATABASE::"Service Location"]) THEN
        EXIT;
      IF NOT ServiceLocContactDebrief.GET(IServiceOrderNo, ITableNo, IFieldNo) THEN BEGIN
        ServiceLocContactDebrief."Service Order No." := IServiceOrderNo;
        CASE ITableNo OF
          DATABASE::"Service Location":
            ServiceLocContactDebrief.VALIDATE("Table Type", ServiceLocContactDebrief."Table Type"::"Service Location");
        END;
        ServiceLocContactDebrief."Field No." := IFieldNo;
        ServiceLocContactDebrief.INSERT(TRUE);
      END;
      IF ServiceLocContactDebrief."Processed Date" = 0D THEN BEGIN
        ServiceLocContactDebrief."Old Value" := IOldValue;
        ServiceLocContactDebrief."New Value" := INewValue;
        ServiceLocContactDebrief.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetLineNoBasedOnTimeHourAcc@1100529400(Year@1100529408 : Integer;Week@1100529409 : Integer;Day@1100529411 : Integer;EmployeeNo@1100529410 : Code[20];TimeFrom@1100529400 : Time) : Integer;
    VAR
      HourAccountingLine@1100529406 : Record 11012039;
      LineNo@1100529401 : Integer;
      LineNo1@1100529402 : Integer;
      LineNo2@1100529403 : Integer;
      Time1@1100529404 : Time;
      Time2@1100529405 : Time;
      Offset@1100529407 : Integer;
    BEGIN
      HourAccountingLine.SETCURRENTKEY(Year,Week,"Employee No.",Day,"Time From");
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", EmployeeNo);
      HourAccountingLine.SETRANGE(Day, Day);
      HourAccountingLine.SETFILTER("Time From", '<%1', TimeFrom);
      IF HourAccountingLine.FINDLAST THEN BEGIN
        LineNo1 := HourAccountingLine."Line No.";
        Time1 := HourAccountingLine."Time From";
      END;
      HourAccountingLine.SETFILTER("Time From", '>%1', TimeFrom);
      IF HourAccountingLine.FINDFIRST THEN BEGIN
        LineNo2 := HourAccountingLine."Line No.";
        Time2 := HourAccountingLine."Time From";
      END;

      IF (LineNo2 <> 0) THEN BEGIN
        IF (LineNo1 <> 0) THEN
          Offset := ROUND((((LineNo2 - LineNo1) / (Time2 - Time1)) * (TimeFrom - Time1)), 1, '>')
        ELSE
          Offset := ROUND((((LineNo2 - LineNo1) / (Time2 - 000000T)) * (TimeFrom - 000000T)), 1, '>');
        IF LineNo1 + Offset < LineNo2 THEN
          LineNo := LineNo1 + Offset;
      END;

      IF (LineNo <> 0) THEN BEGIN
        HourAccountingLine.SETCURRENTKEY(Year,Week,"Employee No.","Line No.");
        HourAccountingLine.SETRANGE(Day);
        HourAccountingLine.SETRANGE("Time From");

        HourAccountingLine.SETRANGE("Line No.", LineNo);
        WHILE (HourAccountingLine.FINDFIRST) DO BEGIN
          LineNo += 1;
          HourAccountingLine.SETRANGE("Line No.", LineNo);
        END;
        EXIT(LineNo);
      END;
    END;

    LOCAL PROCEDURE GetLineNoBasedOnTimeSiteMngmntHour@1100528210(Year@1100529408 : Integer;Week@1100529409 : Integer;CurrCompany@1100528200 : Text[50];Day@1100529411 : Integer;EmployeeNo@1100529410 : Code[20];TimeFrom@1100529400 : Time) : Integer;
    VAR
      SiteMngmntHoursLine@1100529406 : Record 11012361;
      LineNo@1100529401 : Integer;
      LineNo1@1100529402 : Integer;
      LineNo2@1100529403 : Integer;
      Time1@1100529404 : Time;
      Time2@1100529405 : Time;
      Offset@1100529407 : Integer;
    BEGIN
      SiteMngmntHoursLine.SETCURRENTKEY(Year,Week,SiteMngmntHoursLine."Supplying Company","Employee No.",Day,"Time From");
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company",CurrCompany);
      SiteMngmntHoursLine.SETRANGE("Employee No.", EmployeeNo);
      SiteMngmntHoursLine.SETRANGE(Day, Day);
      SiteMngmntHoursLine.SETFILTER("Time From", '<%1', TimeFrom);
      IF SiteMngmntHoursLine.FINDLAST THEN BEGIN
        LineNo1 := SiteMngmntHoursLine."Line No.";
        Time1 := SiteMngmntHoursLine."Time From";
      END;
      SiteMngmntHoursLine.SETFILTER("Time From", '>%1', TimeFrom);
      IF SiteMngmntHoursLine.FINDFIRST THEN BEGIN
        LineNo2 := SiteMngmntHoursLine."Line No.";
        Time2 := SiteMngmntHoursLine."Time From";
      END;

      IF (LineNo2 <> 0) THEN BEGIN
        IF (LineNo1 <> 0) THEN
          Offset := ROUND((((LineNo2 - LineNo1) / (Time2 - Time1)) * (TimeFrom - Time1)), 1, '>')
        ELSE
          Offset := ROUND((((LineNo2 - LineNo1) / (Time2 - 000000T)) * (TimeFrom - 000000T)), 1, '>');
        IF LineNo1 + Offset < LineNo2 THEN
          LineNo := LineNo1 + Offset;
      END;

      IF (LineNo <> 0) THEN BEGIN
        SiteMngmntHoursLine.SETCURRENTKEY(Year,Week,"Employee No.","Line No.");
        SiteMngmntHoursLine.SETRANGE(Day);
        SiteMngmntHoursLine.SETRANGE("Time From");

        SiteMngmntHoursLine.SETRANGE("Line No.", LineNo);
        WHILE (SiteMngmntHoursLine.FINDFIRST) DO BEGIN
          LineNo += 1;
          SiteMngmntHoursLine.SETRANGE("Line No.", LineNo);
        END;
        EXIT(LineNo);
      END;
    END;

    LOCAL PROCEDURE PostDebriefPurchaseOrderLine@1100528018(VAR DebriefPurchaseOrderLine@1100528001 : Record 11126702;Logbook@1100528000 : Record 11012677);
    VAR
      PurchaseHeader@1100528002 : Record 38;
      PurchaseLine@1100528006 : Record 39;
      PurchaseLine1@1100528003 : Record 39;
      PurchaseLineExtension@1100528007 : Record 11020644;
      ETIMVendor@1100528009 : Record 11012304;
      TradeItem@1100528008 : Record 11012317;
      UnitofMeasure@1100528010 : Record 204;
      lvError@1100528004 : Boolean;
      LastLine@1100528005 : Integer;
    BEGIN
      WITH DebriefPurchaseOrderLine DO BEGIN
        IF NOT PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,DebriefPurchaseOrderLine."Purchase Order No.") THEN
          lvError := TRUE;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT ETIMVendor.GET("Vendor (Trade Item)") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Vendor (Trade Item)"), "Vendor (Trade Item)"), Logbook, "Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT TradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
            IF NOT AddTradeItem("Vendor (Trade Item)", "Trade Item") THEN BEGIN
              lvError := TRUE;
              ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Trade Item"),
                STRSUBSTNO('%1; %2', "Vendor (Trade Item)", "Trade Item")), Logbook, "Line No.");
            END;
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT UnitofMeasure.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Unit of Measure"), "Unit of Measure"), Logbook, "Line No.");
          END;
        END;

        IF (lvError) THEN
          EXIT;

        PurchaseLine1.RESET;
        PurchaseLine1.SETRANGE(PurchaseLine1."Document Type",PurchaseHeader."Document Type");
        PurchaseLine1.SETRANGE(PurchaseLine1."Document No.",PurchaseHeader."No.");
        IF PurchaseLine1.FINDLAST THEN
          LastLine := PurchaseLine1."Line No.";

        PurchaseLine.RESET;
        PurchaseLine.INIT;

        PurchaseLine."Document Type" := PurchaseHeader."Document Type";
        PurchaseLine."Document No." := PurchaseHeader."No.";
        PurchaseLine."Line No." := LastLine + 10000;
        PurchaseLine.VALIDATE("Service Order No.",PurchaseHeader."Service Order No.");
        PurchaseLine.InitRecord;

        IF DebriefPurchaseOrderLine."Item No." <> '' THEN
          PurchaseLine.VALIDATE("Item No.", DebriefPurchaseOrderLine."Item No.");
        IF (DebriefPurchaseOrderLine."Vendor (Trade Item)" <> '') AND
           (DebriefPurchaseOrderLine."Trade Item" <> '') THEN BEGIN
          PurchaseLine.VALIDATE("Vendor (Trade Item)", DebriefPurchaseOrderLine."Vendor (Trade Item)");
          PurchaseLine.VALIDATE("Trade Item", DebriefPurchaseOrderLine."Trade Item");
        END;
        IF (DebriefPurchaseOrderLine."Item No." = '') AND
           (DebriefPurchaseOrderLine."Trade Item" = '') AND
           (DebriefPurchaseOrderLine."Cost Object" <> '') THEN
          PurchaseLine.VALIDATE("Shortcut Dimension 2 Code", DebriefPurchaseOrderLine."Cost Object");

        PurchaseLine.VALIDATE(Description, DebriefPurchaseOrderLine.Description);
        PurchaseLine.VALIDATE("Description 2", DebriefPurchaseOrderLine."Description 2");
        PurchaseLine.VALIDATE(Quantity, DebriefPurchaseOrderLine.Quantity);
        PurchaseLine.VALIDATE("Unit of Measure", DebriefPurchaseOrderLine."Unit of Measure");
        PurchaseLine.VALIDATE(PurchaseLine."Qty. to Receive", DebriefPurchaseOrderLine.Quantity);

        PurchaseLineExtension.GetPurchLineExtension(PurchaseLine."Document Type", PurchaseLine."Document No.", PurchaseLine."Line No.");
        PurchaseLineExtension."Source Advice Order" := TRUE;
        PurchaseLineExtension.UpdatePurchLineExtension(PurchaseLine."Document Type", PurchaseLine."Document No.", PurchaseLine."Line No.");

        PurchaseLine.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefPurchaseOrder@1100528023(VAR DebriefPurchaseOrder@1100528003 : Record 11126701;Logbook@1100528002 : Record 11012677);
    VAR
      NoSeriesMgt@1100528001 : Codeunit 396;
      FieldServiceAppSetup@1100528006 : Record 11126700;
      PurchOrderHeader@1100528000 : Record 38;
      NoSeries@1100528004 : Code[20];
      GUIDEntityLink@1100528005 : Record 11126703;
      UserSetup@1100526000 : Record 91;
      Resource@1100526001 : Record 11229278;
      Employee@1100526002 : Record 5200;
    BEGIN
      FieldServiceAppSetup.GET;
      FieldServiceAppSetup.TESTFIELD("Purchase Order Nos.");

      WITH DebriefPurchaseOrder DO BEGIN
        PurchOrderHeader.INIT;
        PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
        NoSeriesMgt.InitSeries(FieldServiceAppSetup."Purchase Order Nos.", '', TODAY, PurchOrderHeader."No.", PurchOrderHeader."No. Series");
        PurchOrderHeader.INSERT(TRUE);
        IF CheckResource(Logbook, DebriefPurchaseOrder."Line No.", TRUE, Resource, Employee) THEN BEGIN
          UserSetup.SETRANGE("Employee No.", Employee."No.");
          IF UserSetup.FINDFIRST THEN
            PurchOrderHeader."Input by" := UserSetup."User ID";
        END;

        PurchOrderHeader."Order Date" := TODAY;
        PurchOrderHeader."Purchaser Code" := '';

        PurchOrderHeader.VALIDATE("Buy-from Vendor No.", "Vendor No.");

        IF "Source Type" = DebriefPurchaseOrder."Source Type"::Job THEN
          PurchOrderHeader.VALIDATE("Ship-to Project", "Source No.")
        ELSE
          PurchOrderHeader.VALIDATE("Service Order No.", "Source No.");
        PurchOrderHeader.MODIFY;

        GUIDEntityLink.INIT;
        GUIDEntityLink.GUID := "Decentral Created Guid";
        GUIDEntityLink."Resource No." := "Resource No. (Employee)";
        GUIDEntityLink."Entity No." := PurchOrderHeader."No.";
        GUIDEntityLink.RecordID := PurchOrderHeader.RECORDID;
        GUIDEntityLink.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefConditionMeasurementLine@1100528028(VAR DebriefCondMeasLine@1100528003 : Record 11126705;Logbook@1100528002 : Record 11012677);
    VAR
      ServiceOrder@1100528000 : Record 11012823;
      WorkOrder@1100528001 : Record 11229279;
      ServiceObject@1100528006 : Record 11071691;
      NEN2767LTMPHeader@1100528004 : Record 11128784;
      NEN2767LTMPLine@1100528005 : Record 11128785;
      GUIDEntityLink@1100528008 : Record 11126703;
    BEGIN
       WITH DebriefCondMeasLine DO BEGIN
          IF NOT WorkOrder.GET("Work Order No.") THEN
             ErrorRec.WriteError(
                STRSUBSTNO(Text000, WorkOrder.TABLECAPTION, "Work Order No."),
                Logbook, "Line No.");

          IF NOT ServiceOrder.GET(WorkOrder."Source No.") THEN
             ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceOrder.TABLECAPTION, WorkOrder."Source No."),
                Logbook, "Line No.");

          IF NOT ServiceObject.GET("Object No.") THEN
             ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceObject.TABLECAPTION, "Object No."),
                Logbook, "Line No.");

          IF "Modification Status" = "Modification Status"::Modified THEN BEGIN
            NEN2767LTMPLine.RESET;
            NEN2767LTMPLine.SETRANGE("Header Entry ID", "Header Entry ID");
            NEN2767LTMPLine.SETRANGE("Structure Line Code", "Structure Line Code");
            NEN2767LTMPLine.SETRANGE("Line No.", "NEN2767/LTMP Line Line No.");
            IF NEN2767LTMPLine.FINDFIRST THEN BEGIN
              NEN2767LTMPLine.TESTFIELD("Object No.", "Object No.");
              NEN2767LTMPLine.TESTFIELD("Defect Code", "Defect Code");
              NEN2767LTMPLine.VALIDATE("Measure Code", "Measure Code");
              NEN2767LTMPLine.VALIDATE(Comment, Comment);
              NEN2767LTMPLine.MODIFY(TRUE);
            END;
          END;

          IF "Modification Status" = "Modification Status"::Added THEN BEGIN
            NEN2767LTMPHeader.SETRANGE("Location Type", NEN2767LTMPHeader."Location Type"::"Service Location");
            NEN2767LTMPHeader.SETRANGE("Location Code", ServiceOrder."Service Location No.");
            NEN2767LTMPHeader.SETRANGE("Survey No.", '');
            NEN2767LTMPHeader.SETRANGE("Measurement Date", "Measurement Date");
            IF NOT NEN2767LTMPHeader.FINDFIRST THEN BEGIN
              CLEAR(NEN2767LTMPHeader);
              NEN2767LTMPHeader.INIT;
              NEN2767LTMPHeader.VALIDATE("Location Type", NEN2767LTMPHeader."Location Type"::"Service Location");
              NEN2767LTMPHeader.VALIDATE("Location Code", ServiceOrder."Service Location No.");
              NEN2767LTMPHeader.VALIDATE("Measurement Date", "Measurement Date");
              NEN2767LTMPHeader.VALIDATE("NEN2767 Version Code", "NEN2767 Version Code");
              NEN2767LTMPHeader.INSERT(TRUE);
            END;

            CLEAR(NEN2767LTMPLine);
            NEN2767LTMPLine.INIT;
            NEN2767LTMPLine.VALIDATE("Header Entry ID", NEN2767LTMPHeader."Entry ID");
            NEN2767LTMPLine.VALIDATE("NEN2767 Version Code", "NEN2767 Version Code");
            NEN2767LTMPLine.VALIDATE("Object No.", "Object No.");
            NEN2767LTMPLine.VALIDATE("Defect Code", "Defect Code");
            NEN2767LTMPLine.VALIDATE("Measure Code", "Measure Code");
            NEN2767LTMPLine.VALIDATE(Comment, Comment);
            NEN2767LTMPLine.VALIDATE("Created by Service Order No.", ServiceOrder."No.");
            NEN2767LTMPLine.INSERT(TRUE);

            GUIDEntityLink.INIT;
            GUIDEntityLink.GUID := "Decentral Created Guid";
            GUIDEntityLink."Resource No." := "Resource No. (Employee)";
            //GUIDEntityLink."Entity No." := ;
            GUIDEntityLink.RecordID := NEN2767LTMPLine.RECORDID;
            GUIDEntityLink.INSERT(TRUE);
          END;
       END;
    END;

    LOCAL PROCEDURE PostDebriefInventoryMgt@1100528036(VAR DebriefInventoryMgt@1100485001 : Record 11126707;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      Resource@1100529000 : Record 11229278;
      Employee@1100529001 : Record 5200;
      Item@1100409007 : Record 27;
      UnitOfMeasure@1100409006 : Record 204;
      Location@1100409005 : Record 14;
      Err@1100409001 : Boolean;
    BEGIN
      WITH DebriefInventoryMgt DO BEGIN
        IF NOT CheckResource(Logbook, "Line No.", TRUE, Resource, Employee) THEN
          Err := TRUE;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT Item.GET("Item No.") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Item No."), "Item No."), Logbook, "Line No.");
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT UnitOfMeasure.GET("Unit of Measure") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Unit of Measure"), "Unit of Measure"), Logbook, "Line No.");
          END;
        END;
        IF ("From Location Code" <> '') THEN BEGIN
          IF NOT Location.GET("From Location Code") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("From Location Code"), "From Location Code"), Logbook, "Line No.");
          END;
        END;
        IF ("To Location Code" <> '') THEN BEGIN
          IF NOT Location.GET("To Location Code") THEN BEGIN
            Err := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("To Location Code"), "To Location Code"), Logbook, "Line No.");
          END;
        END;

        IF Err THEN
          EXIT(FALSE);

        CASE Type OF
          Type::"Requisition Line":
            BEGIN
              EXIT(PostDebriefInventoryMgtRequisitionLine(DebriefInventoryMgt));
            END;
          Type::"Reclass. Jnl. Line":
            BEGIN
              EXIT(PostDebriefInventoryMgtItemJournal(DebriefInventoryMgt, Resource));
            END;
          Type::"Phys. Inventory Jnl. Line":
            BEGIN
              EXIT(PostDebriefInventoryMgtItemJournal(DebriefInventoryMgt, Resource));
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostDebriefInventoryMgtRequisitionLine@1100528035(VAR DebriefInventoryMgt@1100528001 : Record 11126707) : Boolean;
    VAR
      MobileSetup@1100525002 : Record 11012676;
      RequisitionLine@1100525003 : Record 246;
      RequisitionLine2@1100525012 : Record 246;
    BEGIN
      WITH DebriefInventoryMgt DO BEGIN
        MobileSetup.GET;
        MobileSetup.TESTFIELD("Requisition Wksh. Templ. Name");
        MobileSetup.TESTFIELD("Requisition Wksh. Name");

        RequisitionLine.INIT;
        RequisitionLine.VALIDATE("Worksheet Template Name", MobileSetup."Requisition Wksh. Templ. Name");
        RequisitionLine.VALIDATE("Journal Batch Name", MobileSetup."Requisition Wksh. Name");
        RequisitionLine2 := RequisitionLine;
        RequisitionLine2.SETRANGE("Worksheet Template Name", RequisitionLine2."Worksheet Template Name");
        RequisitionLine2.SETRANGE("Journal Batch Name", RequisitionLine2."Journal Batch Name");
        IF RequisitionLine2.FINDLAST THEN
          RequisitionLine."Line No." := RequisitionLine2."Line No." + 10000
        ELSE
          RequisitionLine."Line No." := 10000;
        RequisitionLine."Order Date" := WORKDATE;
        RequisitionLine.INSERT(TRUE);
        RequisitionLine.VALIDATE(Type, RequisitionLine.Type::Item);
        IF ("Item No." <> '') THEN
          RequisitionLine.VALIDATE("No.", "Item No.");
        IF (Description <> '') THEN
          RequisitionLine.VALIDATE(Description, Description);
        IF ("Unit of Measure" <> '') THEN
          RequisitionLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
        IF (Quantity <> 0) THEN
          RequisitionLine.VALIDATE(Quantity, ROUND(Quantity, 0.00001));
        RequisitionLine.VALIDATE(Deliver, RequisitionLine.Deliver::Location);
        RequisitionLine.VALIDATE("Ship To Location", "To Location Code");
        RequisitionLine.VALIDATE("Location Code");
        RequisitionLine."Decentral Created Guid" := Guid;
        RequisitionLine.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefInventoryMgtItemJournal@1100528037(VAR DebriefInventoryMgt@1100528001 : Record 11126707;Resource@1100528000 : Record 11229278) : Boolean;
    VAR
      MobileSetup@1100528002 : Record 11012676;
      ItemJournalLine@1100409004 : Record 83;
      ItemJournalLine2@1100409003 : Record 83;
      Item@1100528006 : Record 27;
      ItemJournalBatch@1100528007 : Record 233;
      TemplateName@1100528003 : Code[20];
      BatchName@1100528004 : Code[20];
      CalcQtyOnHand@1100528005 : Report 790;
    BEGIN
      WITH DebriefInventoryMgt DO BEGIN
        MobileSetup.GET;
        CASE Type OF
          Type::"Reclass. Jnl. Line":
            BEGIN
              MobileSetup.TESTFIELD("Reclass. Jnl. Template Name");
              MobileSetup.TESTFIELD("Reclass. Jnl. Batch Name");
              TemplateName := MobileSetup."Reclass. Jnl. Template Name";
              BatchName := MobileSetup."Reclass. Jnl. Batch Name";
            END;
          Type::"Phys. Inventory Jnl. Line":
            BEGIN
              MobileSetup.TESTFIELD("Phys. Inv. Jnl. Template Name");
              MobileSetup.TESTFIELD("Phys. Inv. Jnl. Batch Name");
              TemplateName := MobileSetup."Phys. Inv. Jnl. Template Name";
              BatchName := MobileSetup."Phys. Inv. Jnl. Batch Name";
            END;
        END;

        ItemJournalBatch.GET(TemplateName, BatchName);
        ItemJournalBatch.TESTFIELD("No. Series");

        ItemJournalLine.INIT;
        ItemJournalLine.VALIDATE("Journal Template Name", TemplateName);
        ItemJournalLine.VALIDATE("Journal Batch Name", BatchName);
        ItemJournalLine2.SETRANGE("Journal Template Name", TemplateName);
        ItemJournalLine2.SETRANGE("Journal Batch Name", BatchName);
        IF ItemJournalLine2.FINDLAST THEN
          ItemJournalLine."Line No." := ItemJournalLine2."Line No." + 10000
        ELSE
          ItemJournalLine."Line No." := 10000;
        CASE Type OF
          Type::"Reclass. Jnl. Line":
            ItemJournalLine2."Entry Type" := ItemJournalLine2."Entry Type"::Transfer;
          Type::"Phys. Inventory Jnl. Line":
            ItemJournalLine2."Entry Type" := ItemJournalLine2."Entry Type"::"Positive Adjmt.";
        END;

        ItemJournalLine.SetUpNewLine(ItemJournalLine2);

        IF Type = Type::"Phys. Inventory Jnl. Line" THEN BEGIN
          Item.SETRANGE("No.", "Item No.");
          Item.SETRANGE("Location Filter", DebriefInventoryMgt."From Location Code");
          CalcQtyOnHand.SetSkipDim(TRUE);
          CalcQtyOnHand.InitializeRequest2(TODAY, ItemJournalLine."Document No.", TRUE, TRUE);
          CalcQtyOnHand.SetItemJnlLine(ItemJournalLine);
          CalcQtyOnHand.SetHideValidationDialog(TRUE);
          CalcQtyOnHand.USEREQUESTPAGE(FALSE);
          CalcQtyOnHand.SETTABLEVIEW(Item);
          CalcQtyOnHand.RUNMODAL;
          CLEAR(CalcQtyOnHand);

          CLEAR(ItemJournalLine2);
          ItemJournalLine2.SETRANGE("Journal Template Name", MobileSetup."Phys. Inv. Jnl. Template Name");
          ItemJournalLine2.SETRANGE("Journal Batch Name", MobileSetup."Phys. Inv. Jnl. Batch Name");
          ItemJournalLine2.SETRANGE("Item No.", "Item No.");
          ItemJournalLine2.SETRANGE("Location Code", "From Location Code");
          IF ItemJournalLine2.FINDLAST THEN BEGIN
            ItemJournalLine2.VALIDATE("Qty. (Phys. Inventory)", Quantity);
            ItemJournalLine2."Decentral Created Guid" := Guid;
            ItemJournalLine2.MODIFY;
          END;
          EXIT(TRUE);
        END;

        ItemJournalLine.INSERT(TRUE);
        ItemJournalLine.VALIDATE("Posting Date", TODAY);
        IF ("Item No." <> '') THEN
          ItemJournalLine.VALIDATE("Item No.", "Item No.");
        IF ("From Location Code" <> '') THEN
          ItemJournalLine.VALIDATE("Location Code", "From Location Code");
        IF ("To Location Code" <> '') THEN
          ItemJournalLine.VALIDATE("New Location Code", "To Location Code");
        IF ("Item No." <> '') AND ("Unit of Measure" <> '') THEN
          ItemJournalLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
        IF (Quantity <> 0) THEN
          ItemJournalLine.VALIDATE(Quantity, ROUND(Quantity, 0.00001));
        IF (Description <> '') THEN
          ItemJournalLine.VALIDATE(Description, Description);
        ItemJournalLine."Comments for Logistics" := COPYSTR(STRSUBSTNO('%1 %2', Resource."Source No.", Resource.Name), 1, MAXSTRLEN(ItemJournalLine."Comments for Logistics"));
        ItemJournalLine."Decentral Created Guid" := Guid;
        ItemJournalLine."Origin Type Line" := ItemJournalLine."Origin Type Line"::FieldService;
        ItemJournalLine.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefPostGeneral@1100528031(VAR DebriefPostGeneral@1100528001 : Record 11126706;Logbook@1100528000 : Record 11012677) : Boolean;
    VAR
      MobileSetup@1100528004 : Record 11012676;
      RequisitionLine@1100528003 : Record 246;
      ItemJournalLine@1100528005 : Record 83;
      ItemJournalBatch@1100528008 : Record 233;
      PurchaseHeader@1100528006 : Record 38;
      NoSeriesMgt@1100528007 : Codeunit 396;
      ReqWkshMakeOrder@1100528002 : Codeunit 333;
      ResourceWOP@1100528010 : Record 11229278;
      WorkOrder@1100528009 : Record 11229279;
      PurchasesPayablesSetup@1100528700 : Record 312;
    BEGIN
      MobileSetup.GET;

      CASE DebriefPostGeneral.Type OF
        DebriefPostGeneral.Type::"Requisition Line":
          BEGIN
            IF NOT MobileSetup."Post Requisition Wksh. Auto" THEN
              EXIT(TRUE);
            RequisitionLine.SETRANGE("Decentral Created Guid", DebriefPostGeneral.Guid);
            IF NOT RequisitionLine.FINDSET THEN
              EXIT(TRUE);
            ReqWkshMakeOrder.SetMethod(0); // Collect by Vendor
            ReqWkshMakeOrder.CarryOutBatchAction(RequisitionLine);
            EXIT(TRUE);
          END;

        DebriefPostGeneral.Type::"Reclass. Jnl. Line",
        DebriefPostGeneral.Type::"Phys. Inventory Jnl. Line":
          BEGIN
            ItemJournalLine.SETRANGE("Decentral Created Guid", DebriefPostGeneral.Guid);
            IF NOT ItemJournalLine.FINDSET THEN
              EXIT(TRUE);
            REPEAT
              IF ItemJournalBatch.GET(ItemJournalLine."Journal Template Name", ItemJournalLine."Journal Batch Name") THEN BEGIN
                ItemJournalLine."Document No." := NoSeriesMgt.GetNextNo(ItemJournalBatch."No. Series", ItemJournalLine."Posting Date", FALSE);
                ItemJournalLine.MODIFY;
              END;
              ItemJournalLine.MARK(TRUE);

            UNTIL ItemJournalLine.NEXT = 0;
            ItemJournalLine.FINDFIRST;
            CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch", ItemJournalLine);
          END;

        DebriefPostGeneral.Type::"Purchase Order":
          BEGIN
            PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, DebriefPostGeneral."Order No.");
            PurchaseHeader.Receive := TRUE;
            PurchasesPayablesSetup.GET;
            IF PurchasesPayablesSetup."Replace Posting Date" THEN
              PurchaseHeader."Posting Date" := TODAY;
            IF NOT PurchaseHeader.IsApprovedForPostingBatch THEN
              ERROR(Text007, PurchaseHeader."No.");
            CODEUNIT.RUN(CODEUNIT::"Purch.-Post", PurchaseHeader);
            EXIT(TRUE);
          END;

        DebriefPostGeneral.Type::"Open Work Order":
          BEGIN
            IF WorkOrder.GET(DebriefPostGeneral."Work Order No.") THEN BEGIN
              IF (WorkOrder."Date/Time Export to FSA" <> CREATEDATETIME(0D, 0T)) OR (WorkOrder."Export to FSA" = TRUE) THEN
                EXIT;
              IF (WorkOrder."Resource No." <> DebriefPostGeneral."Resource No. (Employee)") AND (WorkOrder."Resource No." <> '') THEN
                EXIT;
              IF ResourceWOP.GET(DebriefPostGeneral."Resource No. (Employee)") THEN BEGIN
                WorkOrder.VALIDATE(WorkOrder."Resource Type", ResourceWOP.Type);
                WorkOrder.VALIDATE("Resource No.", ResourceWOP."No.");
                WorkOrder.VALIDATE("Export to FSA", TRUE);
                WorkOrder.MODIFY(TRUE);
                WorkOrder.AddLinkedResources('M');
                EXIT(TRUE);
              END;
            END;
          END;

        DebriefPostGeneral.Type::"Decentral Planning":
          BEGIN
            IF NOT WorkOrder.GET(DebriefPostGeneral."Work Order No.") THEN
              EXIT;

            WorkOrder."Starting Date/Time" := DebriefPostGeneral."Starting Date/Time";
            WorkOrder.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE PostDebriefMapsItem@1100525011(VAR DebriefMapsItem@1100528001 : Record 11072380;Logbook@1100528000 : Record 11012677) : Boolean;
    VAR
      ServiceObject@1100525000 : Record 11071691;
    BEGIN
      WITH DebriefMapsItem DO BEGIN
        IF Type = Type::ServiceObject THEN BEGIN
          ServiceObject.GET(DebriefMapsItem."No.");
          IF Longitude <> '' THEN
            ServiceObject.VALIDATE(Longitude,Longitude);

          IF Latitude <> '' THEN
            ServiceObject.VALIDATE(Latitude,Latitude);

          ServiceObject.MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE PostDebriefRelatedWorkOrder@1100526004(VAR DebriefRelatedWorkOrder@1100528001 : Record 11072381;Logbook@1100528000 : Record 11012677) : Boolean;
    VAR
      Workorder@1100525000 : Record 11229279;
      Resource@1100526000 : Record 11229278;
      WorkOrderSource@1100526001 : Record 11229279;
    BEGIN
      IF NOT WorkOrderSource.GET(DebriefRelatedWorkOrder."Work Order No.") THEN BEGIN
          ErrorRec.WriteError(STRSUBSTNO(Text000, WorkOrderSource.FIELDCAPTION("No."), DebriefRelatedWorkOrder."Work Order No."), Logbook, DebriefRelatedWorkOrder."Line No.");
        EXIT;
      END;

      Workorder.INIT;
      Workorder."No." := '';
      Workorder.VALIDATE("Source Company", WorkOrderSource."Source Company");
      Workorder.VALIDATE("Source Type", WorkOrderSource."Source Type");
      Workorder.VALIDATE("Source No.", WorkOrderSource."Source No.");

      Workorder."Starting Date/Time" := WorkOrderSource."Starting Date/Time";
      Workorder."Ending Date/Time" := WorkOrderSource."Ending Date/Time";
      Workorder."First Possible Start.Date/Time" := WorkOrderSource."First Possible Start.Date/Time";
      Workorder."Last Possible Ending Date/Time" := WorkOrderSource."Last Possible Ending Date/Time";
      Workorder."Expected Hours" := WorkOrderSource."Expected Hours";
      Workorder."Duration Time" := WorkOrderSource."Duration Time";

      Resource.GET(DebriefRelatedWorkOrder."Resource No. Related WorkOrder");

      IF (Resource.Company = COMPANYNAME) AND (Resource.Type = Resource.Type::Employee) THEN
        Workorder.SetReferencePointModifiedByEmployee(Resource."Source No.");

      Workorder.INSERT(TRUE);
      Workorder.TESTFIELD("No.");

      Workorder.VALIDATE("Resource Type", Resource.Type);
      Workorder.VALIDATE("Resource No.", Resource."No.");
      Workorder.VALIDATE("Export to FSA", TRUE);

      Workorder.MODIFY(TRUE);

      DebriefRelatedWorkOrder."Related Work Order No." := Workorder."No.";
    END;

    LOCAL PROCEDURE RecRefSetRange@1100526007(RecRef@1100526002 : RecordRef;FieldNo@1100526000 : Integer;Value@1100526001 : Variant);
    VAR
      FldRef@1100526003 : FieldRef;
    BEGIN
      FldRef := RecRef.FIELD(FieldNo);
      FldRef.SETRANGE(Value);
    END;

    LOCAL PROCEDURE RecRefSetValue@1100526009(RecRef@1100526002 : RecordRef;FieldNo@1100526000 : Integer;Value@1100526001 : Variant);
    VAR
      FldRef@1100526003 : FieldRef;
    BEGIN
      FldRef := RecRef.FIELD(FieldNo);
      FldRef.VALUE := Value;
    END;

    LOCAL PROCEDURE AddTradeItem@1100528704(VAR VendorTradeItem@1100528700 : Code[20];VAR TradeItem@1100528701 : Code[20]) : Boolean;
    VAR
      WebshopItemMgt@1100528702 : Codeunit 11012306;
      LicensePermission@1100528703 : Record 2000000043;
    BEGIN
      IF NOT LicensePermission.GET(LicensePermission."Object Type"::Codeunit, CODEUNIT::"2ba Unifeed License") OR
         (LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ") THEN
        EXIT(FALSE);
      WebshopItemMgt.UpdateTradeItemDataForOneItem(VendorTradeItem, TradeItem, FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetHourLineTemplate@1100528705(HourLineTemplateCode@1100528700 : Code[20];VAR HourLineTemplate@1100528701 : Record 11229799) : Boolean;
    VAR
      MobileSetup@1100528702 : Record 11012676;
    BEGIN
      MobileSetup.GET;

      IF MobileSetup."Hours Destination" = MobileSetup."Hours Destination"::"Hour Accounting" THEN BEGIN
        IF HourLineTemplate.GET(HourLineTemplate.Source::"Hour Accounting", COMPANYNAME, HourLineTemplateCode) THEN
          EXIT(TRUE);
      END ELSE BEGIN
        IF HourLineTemplate.GET(HourLineTemplate.Source::"Site Mngmnt. Hours", COMPANYNAME, HourLineTemplateCode) THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetHourLineTemplateLine@1100528706(HourLineTemplate@1100528701 : Record 11229799;PostingDate@1100528702 : Date;VAR HourLineTemplateLine@1100528700 : Record 11012078);
    BEGIN
      HourLineTemplateLine.RESET;
      HourLineTemplateLine.SETRANGE(Source, HourLineTemplate.Source);
      HourLineTemplateLine.SETRANGE("Receiving Company", HourLineTemplate."Receiving Company");
      HourLineTemplateLine.SETRANGE("Template Code", HourLineTemplate.Code);
      HourLineTemplateLine.SETFILTER("Start Date", '<=%1', PostingDate);
      HourLineTemplateLine.FINDLAST;
    END;

    BEGIN
    {
      Copied from codeunit 'Post Import Data (FSA)' (CU11012158), and changed for Mobile,

      151104 ITERO.DL select NoSeries based on user-departmentcode
      151229 ITERO.DL assign global dimension 1 code from DPA
                      new function  DPA_OnInsertAltUserID()
      180209 ITERO.DL RAD-MOB-002 Don't Post Labor from FSA to CostPlus
      180628 ORANGO.WG #14894 Export to Symbrio
      180903 ORANGO.DL By setup, don't post material from FSA to ServiceCostPlusEntries
      181005 ORANGO.DL #19892,19991 DebriefDecentralWO.Description overwriten
      200114 ORANGO.DL moved Symbrio-calls to Events in cod11127975
    }
    END.
  }
}

