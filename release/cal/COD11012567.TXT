OBJECT Codeunit 11012567 SearchRate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012003 : TextConst 'DEU=Kein %1 bei Werkzeugart %2 festgelegt.;ENU=No %1 present for Plant Type %2.;NLD=Geen %1 vastgelegd bij materieelsoort %2.;NOR=Det finnes ingen %1 for maskintype %2.;SVE=Det finns ingen %1 fîr Maskinstyp %2.';
      PlantSetupRec@1100485000 : Record 11012550;
      RateRec@11012000 : Record 11012567;
      CustomerRec@1100485003 : Record 18;
      "Field Name"@11012001 : Text[250];
      ErrorText@11012002 : Text[250];
      Text001@1100485001 : TextConst 'DEU=Kein %1 beim Mitarbeiter %2 eingerichtet.;ENU=No hour rate found in ''%1'' (Plant) for employee %2;NLD=Geen uurtarief gevonden in ''%1'' (Materieel) voor werknemer %2';
      Text002@1100485002 : TextConst 'DEU=%1 ''%2'' sind nicht vorhanden in der Tabelle ''%3''.\%4 kann nicht fÅr %5 ''%6'' bestimmt werden.;ENU=%1 ''%2'' not present in in the table ''%3''.\%4 can not be determined for %5 ''%6''.;NLD=%1 ''%2'' niet aanwezig in de tabel ''%3''.\%4 kan niet bepaald worden voor %5 ''%6''.;NOR=%1 ''%2'' finnes ikke i tabell ''%3''.\%4 kan ikke fastsettes for %5 ''%6''.;SVE=%1 ''%2'' finns inte i tabell ''%3''.\%4 kan inte faststÑllas for %5 ''%6''.';
      gPlantCompany@1100529400 : Text[30];
      gEmployeeCompany@1100525000 : Text[30];
      gWageComponent@1100529000 : Code[20];
      gEstCustDiscountGroup@1100529001 : Code[20];
      gForceInternalOrExternalRate@1100525001 : ' ,Internal,External';

    PROCEDURE Rate@1(ILocation@1210190000 : Code[20];PlntType@11012000 : Code[20];PlntNo@1210190002 : Code[10];IRateCode@1100485001 : Code[10];ReferenceDate@11012001 : Date;RentalType@11012002 : 'Rental,Sales,Buy Back,Plant Hours';GiveMessage@11012003 : 'Do Not Report,Report,Error Report';IEmployeeNo@1100485004 : Code[20]) : Decimal;
    BEGIN
      EXIT(RateWithCust(ILocation,'',PlntType,PlntNo,IRateCode,ReferenceDate,RentalType,GiveMessage,IEmployeeNo));
    END;

    PROCEDURE RentalRateModifiedInPeriod@1210190000(ILocation@1210190005 : Code[20];IPlantType@11012000 : Code[20];IPlantNo@1210190002 : Code[10];IStartDate@11012001 : Date;IEndDate@1210190000 : Date;VAR ONewRateDate@1210190003 : Date) : Boolean;
    BEGIN
      EXIT(RentalRateModifiedInPeriodCust(ILocation,'',IPlantType,IPlantNo,IStartDate,IEndDate,ONewRateDate));
    END;

    PROCEDURE RentalDiscount@1100485006(ILocation@1100485002 : Code[20];ICustomer@1100485003 : Code[20];IPlantType@1100485001 : Code[20];IPlantNo@1100485000 : Code[10];ReferenceDate@1100525000 : Date) : Decimal;
    VAR
      DummyBool@1100530000 : Boolean;
    BEGIN
      //* Als 'ICustomer' leeg dan wordt deze gevuld met die van de locatie (als ILocation gevuld).
      EXIT(GetRentalDiscount(ILocation,ICustomer,IPlantType,IPlantNo, ReferenceDate,FALSE,0D,DummyBool));
    END;

    PROCEDURE FindRentalQuantityDiscountDates@1100528800(ILocation@1100528800 : Code[20];ICustomer@1100528801 : Code[20];IPlantType@1100528802 : Code[20];IPlantNo@1100528803 : Code[10];InventoryStartRentalDate@1100528806 : Date;VAR TmpGenericTempTable@1100528804 : TEMPORARY Record 11020579);
    VAR
      RentalQuantityDiscount@1100528807 : Record 11072669;
    BEGIN
      GetRentalQuantityDiscounts(ILocation,ICustomer,IPlantType,IPlantNo, RentalQuantityDiscount);
      BuildQuantityDiscountPeriodTable(ILocation,ICustomer,IPlantType,IPlantNo, RentalQuantityDiscount, InventoryStartRentalDate, TmpGenericTempTable);
    END;

    PROCEDURE RentalDiscountModifiedInPeriod@1100530001(Location@1100530003 : Code[20];CustNo@1100530002 : Code[20];PlantType@1100530001 : Code[20];PlantNo@1100530000 : Code[10];StartDate@1100530006 : Date;EndDate@1100530005 : Date;VAR NewDiscountDate@1100530004 : Date) : Boolean;
    BEGIN
      //*C-026618
      EXIT(RentalDiscModifiedInPeri(Location,CustNo,PlantType,PlantNo,StartDate,EndDate,NewDiscountDate));
    END;

    PROCEDURE FindRentalRateRateComponents@1100485000(ILocation@1100485005 : Code[20];IPlantType@1100485004 : Code[20];IPlantNo@1100485003 : Code[10];IRefDate@1100485002 : Date;IRentalType@1100485001 : Option;ISalesAmount@1100485007 : Decimal;ISalesLineRec@1100485011 : Record 37;IErrorMode@1100485009 : Boolean;VAR OTmpRateCompRec@1100485000 : Record 11012584) : Boolean;
    VAR
      lvPlantRateRec@1100485008 : Record 11012567;
      lvText000@1100485010 : TextConst 'DEU=Kein Miettarif mit Tarifkomponenten fÅr Werkzeugart ''%1'', (Werkzeugnr. ''%2'', Standort ''%3'', Stichtag ''%4'') gefunden;ENU=No Rental Rate with Rate Components found for Plant Type ''%1'' (Plant No. ''%2'', Location ''%3'', Reference Date ''%4'');NLD=Geen huurtarief met tariefcomponenten gevonden voor materieelsoort ''%1'' (materieelnr. ''%2'', locatie ''%3'', peildatum ''%4'')';
      lvText001@1100485006 : TextConst 'DEU=Kein Miettarif mit Tarifkomponenten fÅr Werkzeugart ''%1'', (Werkzeugnr. ''%2'', Standort ''%3'', Stichtag ''%4'') gefunden;ENU=No Rental Rate with Rate Components found for Plant Type ''%1'' (Plant No. ''%2'', Location ''%3'', Reference Date ''%4'');NLD=Geen uurtarief met tariefcomponenten gevonden voor materieelsoort ''%1'' (materieelnr. ''%2'', locatie ''%3'', peildatum ''%4'')';
      RateComponent@1100525000 : Record 11012585;
    BEGIN
      //* Rate Components only for Rental Rates and Hours Rental Rates, so use this function only for these Rental Rates.
      //* Search for a Rate, the Rate Components must be on the same level.
      //* April 2007: Eerst was het alleen naar rato verdelen, nu een tweede methode 'Verschil op tariefcomp. resultaat' toegevoegd.
      //* NOTE: In the calling process 'OTmpRateCompRec' must be declared as 'Temporary'

      OTmpRateCompRec.RESET;
      OTmpRateCompRec.DELETEALL;

      IF NOT (IRentalType IN [lvPlantRateRec."Rental Type"::Rental,lvPlantRateRec."Rental Type"::"Plant Hours"]) THEN
        EXIT(FALSE);

      PlantSetupRec.GET;
      IF (PlantSetupRec."Type Division of Rate Comp." = PlantSetupRec."Type Division of Rate Comp."::DiffOnResult) THEN
        PlantSetupRec.TESTFIELD("Rate Component Result");

      //* Location level
      //* Note: At this moment (15-03-2005) Rate Components on Location level are not present

      //* Plant level
      WITH lvPlantRateRec DO BEGIN
        SETRANGE("Rental Type", IRentalType);
        SETRANGE("Plant Type", IPlantType);
        SETRANGE("Plant No.", IPlantNo);
        SETRANGE("Starting Date", 0D, IRefDate);
        IF (IPlantNo <> '') THEN BEGIN
          IF NOT FINDLAST THEN
            SETRANGE("Plant No.", '')
          ELSE BEGIN
            RateComponent.SETRANGE("Rental Type", IRentalType);
            RateComponent.SETRANGE("Plant Type", IPlantType);
            RateComponent.SETRANGE("Plant No.", IPlantNo);
            RateComponent.SETRANGE("Starting Date", "Starting Date");
            IF RateComponent.ISEMPTY THEN
              SETRANGE("Plant No.", '');
          END;
        END;
        IF FINDLAST THEN BEGIN
          IF lvReadRateComponentsRentalRate(
            ILocation,IPlantType,IPlantNo,"Starting Date",IRentalType,CalcfieldRateUnit(),
            ISalesAmount,ISalesLineRec,"Expected Occupation Perc.",IErrorMode,OTmpRateCompRec)
          THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE);
        END;
      END;

      IF IErrorMode THEN BEGIN
        IF (IRentalType <> lvPlantRateRec."Rental Type"::"Plant Hours") THEN
          ERROR(lvText000, IPlantType, IPlantNo, ILocation, IRefDate)
        ELSE
          ERROR(lvText001, IPlantType, IPlantNo, ILocation, IRefDate);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE lvReadRateComponentsRentalRate@1100485001(ILocation@1100485004 : Code[20];IPlantType@1100485003 : Code[20];IPlantNo@1100485002 : Code[10];IStartingDate@1100485001 : Date;IRentalType@1100485011 : Option;IRentalUnit@1100485021 : Code[10];ISalesAmount@1100485014 : Decimal;ISalesLineRec@1100485018 : Record 37;OccupationPerc@1100485017 : Decimal;IErrorMode@1100485006 : Boolean;VAR OTmpRateCompRec@1100485009 : Record 11012584) : Boolean;
    VAR
      lvRateCompRec@1100485000 : Record 11012585;
      lvPlantLocRec@1100485005 : Record 11012554;
      lvStndRateCompRec@1100485016 : Record 11012584;
      lvPlantUnitsRec1@1100485022 : Record 11012599;
      lvPlantUnitsRec2@1100485023 : Record 11012599;
      lvDiffOnResult@1100485013 : Boolean;
      lvTotalAmount@1100485008 : Decimal;
      lvText001@1100485010 : TextConst 'DEU=Keine Tarifkomponenten fÅr Stundentarif (%1), Werkzeugart ''%2'', (Werkzeugnr. ''%3'', Startdatum) ''%4''vorhanden;ENU=No Rate Components present of Rental Rate (%1), Plant Type ''%2'' (Plant No. ''%3'', Starting Date ''%4'');NLD=Geen tariefcomponenten aanwezig bij huurtarief (%1), materieelsoort ''%2'' (materieelnr. ''%3'', begindatum ''%4'')';
      lvText002@1100485012 : TextConst 'DEU=Keine Tarifkomponenten fÅr Stundentarif (%1), Werkzeugart ''%2'', (Werkzeugnr. ''%3'', Startdatum) ''%4''vorhanden;ENU=No Rate Components present of Rental Rate (%1), Plant Type ''%2'' (Plant No. ''%3'', Starting Date ''%4'');NLD=Geen tariefcomponenten aanwezig bij uurtarief (%1), materieelsoort ''%2'' (materieelnr. ''%3'', begindatum ''%4'')';
      lvDiffAmount@1100485015 : Decimal;
      lvText003@1100485019 : TextConst 'DEU=''%1'' ist nicht gestattet. Nur gestattet wenn nur mit Miettarifen pro Tag gearbeitet wird.;ENU="''%1'' not allowed, only allowed when only rental rates by day are used. ";NLD=''%1'' niet toegestaan, alleen toegstaan als alleen met huurtarieven per dag wordt gewerkt.;NOR=%1''er tillatt kun nÜr bare leiepris per dag er brukt.;SVE="''%1'' Ñr endast tillÜtet nÑr endast uthyrningsavgifter efter dag anvÑnds. "';
      lvQuantity@1100485020 : Decimal;
    BEGIN
      //* NOTE: In the calling process 'OTmpRateCompRec' must be declared as 'Temporary'

      lvDiffOnResult := (PlantSetupRec."Type Division of Rate Comp." = PlantSetupRec."Type Division of Rate Comp."::DiffOnResult);
      IF lvDiffOnResult THEN BEGIN
        IF (IRentalType = lvRateCompRec."Rental Type"::Rental) AND (ISalesLineRec."Rate Type" <> ISalesLineRec."Rate Type"::Day) THEN
          PlantSetupRec.FIELDERROR("Type Division of Rate Comp.", STRSUBSTNO(lvText003,PlantSetupRec."Type Division of Rate Comp."));
        lvDiffAmount := ISalesAmount;
        lvQuantity := ISalesLineRec.Quantity * ISalesLineRec."Number of Time Units";
        IF (IRentalType = lvRateCompRec."Rental Type"::Rental) AND (ISalesLineRec."Unit of Measure Code" <> IRentalUnit) THEN BEGIN
          IF lvPlantUnitsRec1.GET(IPlantType, ISalesLineRec."Unit of Measure Code") AND
             lvPlantUnitsRec2.GET(IPlantType, IRentalUnit)
          THEN BEGIN
            IF (lvPlantUnitsRec1."Qty. per Unit of Measure" > 0) AND (lvPlantUnitsRec2."Qty. per Unit of Measure" > 0) THEN
              lvQuantity := lvQuantity * lvPlantUnitsRec1."Qty. per Unit of Measure" / lvPlantUnitsRec2."Qty. per Unit of Measure";
          END;
        END;
        IF (OccupationPerc = 0) OR (IRentalType = lvRateCompRec."Rental Type"::"Plant Hours") THEN
          OccupationPerc := 100;
      END;

      OTmpRateCompRec.RESET;
      OTmpRateCompRec.DELETEALL;

      IF NOT lvPlantLocRec.GET(ILocation) THEN
        lvPlantLocRec."Kind of Rate" := lvPlantLocRec."Kind of Rate"::Extern;

      WITH lvRateCompRec DO BEGIN
        IF IPlantNo = '0' THEN
          IPlantNo := '';
        SETRANGE("Rental Type", IRentalType);
        SETRANGE("Plant Type", IPlantType);
        SETRANGE("Plant No.", IPlantNo);
        SETRANGE("Starting Date", IStartingDate);
        IF IPlantNo <> '' THEN BEGIN
          IF ISEMPTY THEN BEGIN
            IPlantNo := '';
            SETRANGE("Plant No.", IPlantNo);
          END;
        END;
        IF (lvPlantLocRec."Kind of Rate" = lvPlantLocRec."Kind of Rate"::Intern) THEN
          SETRANGE("Internal/External", "Internal/External"::Internal);
        IF lvDiffOnResult THEN
          SETFILTER("Rental Rate Code", '<>%1', PlantSetupRec."Rate Component Result");
        SETFILTER(Amount, '<>%1', 0);  //C024611
        IF FINDFIRST THEN BEGIN
          IF (lvPlantLocRec."Kind of Rate" = lvPlantLocRec."Kind of Rate"::Intern) THEN BEGIN
            CALCFIELDS("Internal Rate Components");
            lvTotalAmount := "Internal Rate Components";
          END ELSE BEGIN
            CALCFIELDS("External Rate Components");
            lvTotalAmount := "External Rate Components";
          END;
          //mg.sc, 04-03-11: M25684
      //    IF IErrorMode AND (lvTotalAmount = 0) THEN
      //      ERROR(lvText000, lvPlantLocRec."Kind of Rate", IPlantType, IPlantNo, IStartingDate);
          //IF lvTotalAmount = 0 THEN // Nothing to divide
          //  EXIT(FALSE);
          //mg.ec, 04-03-11: M25684
          IF lvTotalAmount = 0 THEN BEGIN // Nothing to divide      //C024611
            IF NOT IErrorMode THEN
              EXIT(FALSE);
          END ELSE BEGIN
            REPEAT
              CALCFIELDS(Description);
              OTmpRateCompRec.INIT;
              OTmpRateCompRec.Code := "Rental Rate Code";
              OTmpRateCompRec.Description := Description;
              IF NOT lvDiffOnResult THEN BEGIN
                IF (lvTotalAmount <> 0) THEN
                  OTmpRateCompRec.Percentage := (Amount / lvTotalAmount) * 100;  //* Don't round the percentage
              END ELSE BEGIN
                //* Rekening houden met verwachte bezettings percentage
                //* In 'OTmpRateCompRec.Percentage' staat bij deze methode het bedrag
                OTmpRateCompRec.Percentage := ROUND(lvQuantity * Amount * (100 / OccupationPerc), 0.00001);
                lvDiffAmount := lvDiffAmount - OTmpRateCompRec.Percentage;
              END;
              OTmpRateCompRec.INSERT;
            UNTIL NEXT = 0;
            IF lvDiffOnResult AND (lvDiffAmount <> 0) THEN BEGIN
              lvStndRateCompRec.GET(PlantSetupRec."Rate Component Result");
              OTmpRateCompRec.INIT;
              OTmpRateCompRec.Code := PlantSetupRec."Rate Component Result";
              OTmpRateCompRec.Description := lvStndRateCompRec.Description;
              OTmpRateCompRec.Percentage := lvDiffAmount;  //* In percentage staat bij deze methode het bedrag
              OTmpRateCompRec.INSERT;
            END;
            EXIT(TRUE);
          END;
        END;

        IF IErrorMode THEN BEGIN
          IF (IRentalType <> lvRateCompRec."Rental Type"::"Plant Hours") THEN
            ERROR(lvText001, lvPlantLocRec."Kind of Rate", IPlantType, IPlantNo, IStartingDate)
          ELSE
            ERROR(lvText002, lvPlantLocRec."Kind of Rate", IPlantType, IPlantNo, IStartingDate);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE SetExtraSelectionGetEmplRate@1100525000(IEmployeeCompany@1100525000 : Text[30];WageComponent@1100529000 : Code[20]);
    BEGIN
      gEmployeeCompany := IEmployeeCompany;
      gWageComponent := WageComponent;
    END;

    LOCAL PROCEDURE lvGetEmployeeRate@1100485003(IEmployeeNo@1100485000 : Code[20];IPlantLocation@1100529004 : Code[20];IReferenceDate@1100485005 : Date;IGiveMessage@1100485002 : 'Do Not Report,Report,Error Report') : Decimal;
    VAR
      SalesPriceReadOrderLine@1100529001 : Record 11020376;
      PlantLoc@1100529005 : Record 11012554;
      SalesPriceMgt@1100529000 : Codeunit 11012036;
      SalesPrice@1100529003 : Decimal;
      CustomerNo@1100529006 : Code[20];
      PriceFoundAt@1100529002 : Text;
    BEGIN
      //* Note: If called from Estimate then EmployeeNo always empty.
      IF IEmployeeNo = '' THEN
        EXIT(0);

      //DP00812.so
      //IF gEmployeeCompany <> '' THEN BEGIN
      //  lvEmplRec.CHANGECOMPANY(gEmployeeCompany);
      //  lvTradeAssRec.CHANGECOMPANY(gEmployeeCompany);
      //END;
      //IF lvEmplRec.GET(IEmployeeNo) THEN BEGIN
      //  IF lvEmplRec."Trade Association" <> '' THEN BEGIN
      //    IF lvTradeAssRec.GET(lvEmplRec."Trade Association") THEN BEGIN
      //      lvTradeAssRateRec.SETRANGE("Trade Association", lvEmplRec."Trade Association");
      //      lvTradeAssRateRec.SETRANGE("Starting Date", 0D, IReferenceDate);
      //      lvTradeAssRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, IReferenceDate);
      //      IF lvTradeAssRateRec.FINDLAST THEN
      //        EXIT(lvTradeAssRateRec."Cost Price");
      //    END;
      //  END;
      //END;
      //DP00812.eo

      //DP00812.sn
      IF IPlantLocation <> '' THEN BEGIN
        IF PlantLoc.GET(IPlantLocation) THEN
          CustomerNo := PlantLoc."Customer No.";
      END;
      SalesPrice := SalesPriceMgt.GetSalesPrice(
        SalesPriceReadOrderLine."Price Type"::Plant,
        '', '', '', CustomerNo, '', gWageComponent, gEmployeeCompany, IEmployeeNo,
        '', '', '', IPlantLocation, '', '', IReferenceDate, 0, PriceFoundAt);
      IF PriceFoundAt <> '' THEN
        EXIT(SalesPrice);
      //DP00812.en

      IF IGiveMessage > 0 THEN BEGIN
        ErrorText := STRSUBSTNO(Text001, SalesPriceReadOrderLine.TABLECAPTION, IEmployeeNo);
        IF gEmployeeCompany <> '' THEN
          ErrorText := ErrorText + ' (' + gEmployeeCompany + ')';
        CASE IGiveMessage OF
          IGiveMessage::Report: MESSAGE(ErrorText);
          IGiveMessage::"Error Report": ERROR(ErrorText);
        END;
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE lvRateUnitConvertion@1100485002(IPlantType@1100485000 : Code[20];IPlantUnit@1100485003 : Code[10];IRateUnit@1100485004 : Code[10];IRate@1100485001 : Decimal) : Decimal;
    VAR
      lvPlantUnitsRec@1100485002 : Record 11012599;
    BEGIN
      WITH lvPlantUnitsRec DO BEGIN
        IF (IRateUnit = '') OR (IRateUnit = IPlantUnit) THEN
          EXIT(IRate);

        IF gPlantCompany <> '' THEN
          CHANGECOMPANY(gPlantCompany);
        IF NOT GET(IPlantType, IRateUnit) THEN
          ERROR(Text002, RateRec.FIELDCAPTION("Rate Unit of Measure") , IRateUnit,
            TABLECAPTION, FIELDCAPTION("Qty. per Unit of Measure"), FIELDCAPTION("Plant Type"), IPlantType);
        TESTFIELD("Qty. per Unit of Measure");
        EXIT(IRate / "Qty. per Unit of Measure");
      END;
    END;

    PROCEDURE RateWithCust@1100485004(ILocation@1210190000 : Code[20];ICustomer@1100485005 : Code[20];PlntType@11012000 : Code[20];PlntNo@1210190002 : Code[10];IRateCode@1100485001 : Code[10];ReferenceDate@11012001 : Date;RentalType@11012002 : 'Rental,Sales,Buy Back,Plant Hours';GiveMessage@11012003 : 'Do Not Report,Report,Error Report';IEmployeeNo@1100485004 : Code[20]) : Decimal;
    VAR
      lvPlantLocationRec@1210190001 : Record 11012554;
      lvLocationRateRec@1210190003 : Record 11012583;
      lvCustomerRateRec@1100485006 : Record 11012541;
      lvRateCodeRec@1100485003 : Record 11020502;
      lvFound@1100485000 : Boolean;
      UseExternalRate@1100525000 : Boolean;
      lvRateCodeFactor@1100485002 : Decimal;
      lvRateType@1100485007 : 'Day,Week,,Month';
      lvRentalRate@1100485008 : Decimal;
      CustomerPriceGroup@1100528400 : Code[10];
    BEGIN
      IF gPlantCompany <> '' THEN BEGIN
        lvPlantLocationRec.CHANGECOMPANY(gPlantCompany);
        lvLocationRateRec.CHANGECOMPANY(gPlantCompany);
        lvCustomerRateRec.CHANGECOMPANY(gPlantCompany);
        lvRateCodeRec.CHANGECOMPANY(gPlantCompany);
      END;
      lvRateCodeFactor := 1;
      PlantSetupRec.GET;

      IF (NOT lvPlantLocationRec.GET(ILocation)) OR (ILocation = '') THEN BEGIN
        lvPlantLocationRec.INIT;
        lvRateType := PlantSetupRec."Rate Type";
      END ELSE BEGIN
        lvRateType := lvPlantLocationRec."Rate Type";
        IF ICustomer = '' THEN
          ICustomer := lvPlantLocationRec."Customer No.";
        IF lvPlantLocationRec."Reference Date for Prices" <> 0D THEN
          //fixed price date for location
          ReferenceDate := lvPlantLocationRec."Reference Date for Prices";
      END;

      IF (IRateCode <> '') AND (RentalType IN [RentalType::Rental, RentalType::"Plant Hours"]) THEN BEGIN
        IF PlantSetupRec."Rate Codes" THEN BEGIN
          //lvRateCodeRec.GET(IRateCode);
          lvRateCodeRec.CheckPlantRateCode(ILocation, IRateCode, TRUE, gPlantCompany, 0);
          lvRateCodeRec.ReadPlantRateCode(ILocation, IRateCode, gPlantCompany);
          lvRateCodeFactor := lvRateCodeRec.Percentage / 100;
          IF (RentalType = RentalType::"Plant Hours") AND (IEmployeeNo <> '') AND
             (lvRateCodeRec."Hour Rate from" = lvRateCodeRec."Hour Rate from"::Employee)
          THEN
            EXIT(lvGetEmployeeRate(IEmployeeNo,ILocation,ReferenceDate,GiveMessage) * lvRateCodeFactor);
        END;
      END;

      //* Tarieven per locatie
      WITH lvLocationRateRec DO BEGIN
        IF (ILocation <> '') THEN BEGIN
          SETRANGE(Location,ILocation);
          CASE RentalType OF
            RentalType::Rental:
              SETRANGE("Rental Type","Rental Type"::Rental);
            RentalType::Sales, RentalType::"Buy Back":  //C019107
              SETRANGE("Rental Type","Rental Type"::"Sales / Buy Back");
            RentalType::"Plant Hours":
              SETRANGE("Rental Type","Rental Type"::"Plant Hours");
          END;
          SETRANGE("Plant Type",PlntType);
          SETRANGE("Starting Date",0D,ReferenceDate);
          SETFILTER("Ending Date",'%1|>=%2',0D, ReferenceDate);
          IF (PlntNo <> '') AND (RentalType IN [RentalType::Rental, RentalType::"Plant Hours"]) THEN BEGIN
            SETRANGE("Plant No.",PlntNo);
            lvFound := FINDLAST;
          END;
          IF NOT lvFound THEN BEGIN
            SETRANGE("Plant No.",'');
            lvFound := FINDLAST;
          END;
          IF lvFound THEN
            CASE RentalType OF
              RentalType::Rental:
                BEGIN
                  CALCFIELDS("Plant Unit of Measure", "Rate Unit of Measure");
                  CASE lvRateType OF
                    lvRateType::Day: lvRentalRate := "Rental Rate (Day)";
                    lvRateType::Week: lvRentalRate := "Rental Rate (Week)";
                    lvRateType::Month: lvRentalRate := "Rental Rate (Month)";
                  END;

                  EXIT(lvRateUnitConvertion("Plant Type",
                    "Plant Unit of Measure", "Rate Unit of Measure", (lvRentalRate * lvRateCodeFactor)));
                END;
              RentalType::Sales:  //C019107
                EXIT("Sales Rate");
              RentalType::"Buy Back":  //C019107
                EXIT("Buy Back Rate");
              RentalType::"Plant Hours":
                EXIT("Rental Rate (Hour)" * lvRateCodeFactor);
            END;
        END;
      END;

      //Tarief per klant
      WITH lvCustomerRateRec DO BEGIN
        IF (ICustomer <> '') OR (lvPlantLocationRec."Customer Price Group (Rental)" <> '') THEN BEGIN
          IF ICustomer <> CustomerRec."No." THEN
            CustomerRec.GET(ICustomer);
          IF lvPlantLocationRec."Customer Price Group (Rental)" <> '' THEN
            CustomerPriceGroup := lvPlantLocationRec."Customer Price Group (Rental)"
          ELSE
            CustomerPriceGroup := CustomerRec."Customer Price Group";
          IF CustomerPriceGroup <> '' THEN BEGIN
            SETRANGE("Customer Price Group", CustomerPriceGroup);
             CASE RentalType OF
              RentalType::Rental:
                SETRANGE("Rental Type","Rental Type"::Rental);
              RentalType::Sales, RentalType::"Buy Back":
                SETRANGE("Rental Type","Rental Type"::"Sales / Buy Back");
              RentalType::"Plant Hours":
                SETRANGE("Rental Type","Rental Type"::"Plant Hours");
            END;
            SETRANGE("Plant Type",PlntType);
            SETRANGE("Starting Date",0D,ReferenceDate);
            SETFILTER("Ending Date",'%1|>=%2',0D, ReferenceDate);
            IF (PlntNo <> '') THEN BEGIN
              SETRANGE("Plant No.",PlntNo);
              lvFound := FINDLAST;
            END;
            IF NOT lvFound THEN BEGIN
              SETRANGE("Plant No.",'');
              lvFound := FINDLAST;
            END;
            IF lvFound THEN BEGIN
              CASE RentalType OF
                RentalType::Rental:
                  BEGIN
                    CALCFIELDS("Plant Unit of Measure", "Rate Unit of Measure");
                    CASE lvRateType OF
                      lvRateType::Day: lvRentalRate := "Rental Rate (Days)";
                      lvRateType::Week: lvRentalRate := "Rental Rate (Week)";
                      lvRateType::Month: lvRentalRate := "Rental Rate (Month)";
                    END;
                    EXIT(lvRateUnitConvertion("Plant Type",
                      "Plant Unit of Measure", "Rate Unit of Measure", (lvRentalRate * lvRateCodeFactor)));
                  END;
                RentalType::"Plant Hours":
                  EXIT("Rental Rate (Hours)" * lvRateCodeFactor);
                RentalType::Sales:
                  EXIT("Sales Rate");
                RentalType::"Buy Back":
                  EXIT("Buy Back Rate");
              END;
            END;

          END;
        END;
      END;

      //Tarief per materieelnummer en per materieelsoort
      WITH RateRec DO BEGIN
        //* Algemeen voor materieelsoort en materieelnummer
        RESET;
        CASE RentalType OF
          RentalType::Rental:
            SETRANGE("Rental Type","Rental Type"::Rental);
          RentalType::Sales, RentalType::"Buy Back":
            SETRANGE("Rental Type","Rental Type"::"Sales / Buy Back");
          RentalType::"Plant Hours":
            SETRANGE("Rental Type","Rental Type"::"Plant Hours");
        END;
        SETRANGE("Plant Type",PlntType);
        SETRANGE("Starting Date",0D,ReferenceDate);
        SETFILTER("Ending Date",'%1|>=%2',0D, ReferenceDate);

        //* Tarief per materieelnummer (alleen nog maar beschikbaar voor huurtarieven)
        IF (PlntNo <> '') AND (RentalType IN [RentalType::Rental, RentalType::"Plant Hours"]) THEN BEGIN
          SETRANGE("Plant No.",PlntNo);
          lvFound := FINDLAST;
        END;

        //* Tarief per materieelsoort.
        IF NOT lvFound THEN BEGIN
          SETRANGE("Plant No.",'');
          lvFound := FINDLAST;
        END;

        IF lvFound THEN BEGIN
          UseExternalRate :=
            ((ILocation <> '') AND (lvPlantLocationRec."Kind of Rate" = lvPlantLocationRec."Kind of Rate"::Extern)) OR (ILocation = '');
            //No Location: this happens when Sales and Logistic are separated, also for Sales Rental Contract. Also Estimate and Plant Quote
          //DP01047.sn
          IF (ILocation = '') AND (gForceInternalOrExternalRate <> gForceInternalOrExternalRate::" ") THEN BEGIN
            IF gForceInternalOrExternalRate = gForceInternalOrExternalRate::External THEN
              UseExternalRate := TRUE;
            IF gForceInternalOrExternalRate = gForceInternalOrExternalRate::Internal THEN
              UseExternalRate := FALSE;
          END;
          //DP01047.en
          CASE RentalType OF
            RentalType::Rental:
              BEGIN
                CALCFIELDS("Plant Unit of Measure", "Rate Unit of Measure");
                IF UseExternalRate THEN BEGIN
                  CASE lvRateType OF
                    lvRateType::Day: lvRentalRate := "Rental Rate External (Days)";
                    lvRateType::Week: lvRentalRate := "Rental Rate External (Week)";
                    lvRateType::Month: lvRentalRate := "Rental Rate External (Month)";
                  END;
                END ELSE BEGIN  //Internal Rate
                  CASE lvRateType OF
                    lvRateType::Day: lvRentalRate := "Rental Rate (Days)";
                    lvRateType::Week: lvRentalRate := "Rental Rate (Week)";
                    lvRateType::Month: lvRentalRate := "Rental Rate (Month)";
                  END;
                END;

                EXIT(lvRateUnitConvertion("Plant Type",
                  "Plant Unit of Measure", "Rate Unit of Measure", (lvRentalRate * lvRateCodeFactor)));
              END;
            RentalType::Sales:
              EXIT("Sales Rate");
            RentalType::"Buy Back":
              EXIT("Buy Back Rate");
            RentalType::"Plant Hours":
              BEGIN
                IF UseExternalRate THEN
                  EXIT("Rental Rate External (Hours)" * lvRateCodeFactor)
                ELSE
                  EXIT("Rental Rate (Hours)" * lvRateCodeFactor);
              END;
            ELSE
              EXIT(0);
          END;
        END;

        IF GiveMessage > 0 THEN BEGIN
          CASE RentalType OF
            RentalType::Rental: "Field Name" := FIELDCAPTION("Rental Rate (Days)") ;
            RentalType::Sales: "Field Name" := FIELDCAPTION("Sales Rate") ;
            RentalType::"Buy Back": "Field Name" := FIELDCAPTION("Buy Back Rate") ;
            RentalType::"Plant Hours": "Field Name" := FIELDCAPTION("Rental Rate (Hours)") ;
          END;
          ErrorText := STRSUBSTNO(Text000, "Field Name", PlntType);
          CASE GiveMessage OF
            GiveMessage::Report: MESSAGE(ErrorText);
            GiveMessage::"Error Report": ERROR(ErrorText);
          END;
        END;
        EXIT(0);
      END;
    END;

    LOCAL PROCEDURE RentalRateModifiedInPeriodCust@1100485005(ILocation@1210190005 : Code[20];ICustomer@1100485001 : Code[20];IPlantType@11012000 : Code[20];IPlantNo@1210190002 : Code[10];IStartDate@11012001 : Date;IEndDate@1210190000 : Date;VAR ONewRateDate@1210190003 : Date) : Boolean;
    VAR
      lvRentalRateRec@1210190001 : Record 11012567;
      lvSearchOnNextLevel@1210190004 : Boolean;
      lvLocationRateRec@1210190006 : Record 11012583;
      lvCustomerRateRec@1100485000 : Record 11012541;
      lvPlantLocationRec@1100485002 : Record 11012554;
      CustomerPriceGroup@1100528400 : Code[10];
    BEGIN
      //* Niveau huurtarieven: 1=Locatie/mat.nr., 2=Locatie/mat.soort,
      //*                      3=Klant/mat.nr., 4=Klant/mat.soort,
      //*                      5=materieelnr., 6=materieelsoort
      //* Als t/m de startdatum een tarief aanwezig is op een bepaald niveau dan niet verder zoeken of hierna het tarief nog
      //* wijzigt op een volgend niveau.

      ONewRateDate := 0D;
      lvSearchOnNextLevel := TRUE;
      IF IStartDate = IEndDate THEN
        EXIT(FALSE);

      IF lvPlantLocationRec.GET(ILocation) THEN BEGIN
        IF ICustomer = '' THEN
          ICustomer := lvPlantLocationRec."Customer No.";
      END;

      IF (ILocation <> '') AND lvPlantLocationRec.GET(ILocation) THEN BEGIN
        IF lvPlantLocationRec."Reference Date for Discounts" <> 0D THEN BEGIN
          //Fixed discount date for location
          IStartDate := lvPlantLocationRec."Reference Date for Discounts";
          IEndDate := IStartDate ;
        END;
      END;

      //Rental Rate per Location/Plant No. and Location/Plant Type
      WITH lvLocationRateRec DO BEGIN
        IF (ILocation <> '') THEN BEGIN
          SETRANGE(Location, ILocation);
          SETRANGE("Rental Type",lvLocationRateRec."Rental Type"::Rental);
          SETRANGE("Plant Type", IPlantType);

          IF (IPlantNo <> '') THEN BEGIN
            SETRANGE("Plant No.", IPlantNo);
            IF (ONewRateDate = 0D) THEN BEGIN
              SETRANGE("Starting Date", (IStartDate + 1), IEndDate);
            END ELSE BEGIN
              SETRANGE("Starting Date", (IStartDate + 1), (ONewRateDate - 1));
            END;
            IF FINDFIRST THEN BEGIN
              ONewRateDate := "Starting Date";
              IF (ONewRateDate = (IStartDate + 1)) THEN
                lvSearchOnNextLevel := FALSE;
            END;
            IF lvSearchOnNextLevel THEN BEGIN
              SETRANGE("Starting Date", 0D, IStartDate);
              SETFILTER("Ending Date",'%1|>=%2',0D, IStartDate);
              IF FINDLAST THEN BEGIN
                IF ("Ending Date" <> 0D) AND ("Ending Date" < IEndDate) THEN
                  ONewRateDate := "Ending Date" + 1;
                lvSearchOnNextLevel := FALSE;
              END;
            END;
          END;

          IF lvSearchOnNextLevel THEN BEGIN
            SETRANGE("Plant No.",'');
            IF (ONewRateDate = 0D) THEN
              SETRANGE("Starting Date", (IStartDate + 1), IEndDate)
            ELSE
              SETRANGE("Starting Date", (IStartDate + 1), (ONewRateDate - 1));
            IF FINDFIRST THEN BEGIN
              ONewRateDate := "Starting Date";
              IF (ONewRateDate = (IStartDate + 1)) THEN
                lvSearchOnNextLevel := FALSE;
            END;
            IF lvSearchOnNextLevel THEN BEGIN
              SETRANGE("Starting Date", 0D, IStartDate);
              SETFILTER("Ending Date",'%1|>=%2',0D, IStartDate);
              IF FINDLAST THEN BEGIN
                IF ("Ending Date" <> 0D) AND ("Ending Date" < IEndDate) THEN
                  ONewRateDate := "Ending Date" + 1;
                lvSearchOnNextLevel := FALSE;
              END;
            END;
          END;
        END;
      END;

      //Rental Rate per Customer/Plant No. and Customer/Plant Type
      IF lvSearchOnNextLevel THEN BEGIN
        WITH lvCustomerRateRec DO BEGIN
          IF (ICustomer <> '') OR (lvPlantLocationRec."Customer Price Group (Rental)" <> '') THEN BEGIN
            IF ICustomer <> CustomerRec."No." THEN
              CustomerRec.GET(ICustomer);
            IF lvPlantLocationRec."Customer Price Group (Rental)" <> '' THEN
              CustomerPriceGroup := lvPlantLocationRec."Customer Price Group (Rental)"
            ELSE
              CustomerPriceGroup := CustomerRec."Customer Price Group";

            SETRANGE("Customer Price Group", CustomerPriceGroup);
            SETRANGE("Rental Type",lvCustomerRateRec."Rental Type"::Rental);
            SETRANGE("Plant Type", IPlantType);

            IF (IPlantNo <> '') THEN BEGIN
              SETRANGE("Plant No.", IPlantNo);
              IF (ONewRateDate = 0D) THEN
                SETRANGE("Starting Date", (IStartDate + 1), IEndDate)
              ELSE
                SETRANGE("Starting Date", (IStartDate + 1), (ONewRateDate - 1));
              IF FINDFIRST THEN BEGIN
                ONewRateDate := "Starting Date";
                IF (ONewRateDate = (IStartDate + 1)) THEN
                  lvSearchOnNextLevel := FALSE;
              END;
              IF lvSearchOnNextLevel THEN BEGIN
                SETRANGE("Starting Date", 0D, IStartDate);
                SETFILTER("Ending Date",'%1|>=%2',0D, IStartDate);
                IF FINDLAST THEN BEGIN
                  IF ("Ending Date" <> 0D) AND ("Ending Date" < IEndDate) THEN
                    ONewRateDate := "Ending Date" + 1;
                  lvSearchOnNextLevel := FALSE;
                END;
              END;
            END;

            IF lvSearchOnNextLevel THEN BEGIN
              SETRANGE("Plant No.",'');
              IF (ONewRateDate = 0D) THEN
                SETRANGE("Starting Date", (IStartDate + 1), IEndDate)
              ELSE
                SETRANGE("Starting Date", (IStartDate + 1), (ONewRateDate - 1));
              IF FINDFIRST THEN BEGIN
                ONewRateDate := "Starting Date";
                IF (ONewRateDate = (IStartDate + 1)) THEN
                  lvSearchOnNextLevel := FALSE;
              END;
              IF lvSearchOnNextLevel THEN BEGIN
                SETRANGE("Starting Date", 0D, IStartDate);
                SETFILTER("Ending Date",'%1|>=%2',0D, IStartDate);
                IF FINDLAST THEN BEGIN
                  IF ("Ending Date" <> 0D) AND ("Ending Date" < IEndDate) THEN
                    ONewRateDate := "Ending Date" + 1;
                  lvSearchOnNextLevel := FALSE;
                END;
              END;
            END;
          END;
        END;
      END;

      //Rental Rate per Plant Type And Plant No.
      IF lvSearchOnNextLevel THEN BEGIN
        WITH lvRentalRateRec DO BEGIN
          SETRANGE("Rental Type","Rental Type"::Rental);
          SETRANGE("Plant Type", IPlantType);

          IF (IPlantNo <> '') THEN BEGIN
            SETRANGE("Plant No.", IPlantNo);
            IF (ONewRateDate = 0D) THEN
              SETRANGE("Starting Date", (IStartDate + 1), IEndDate)
            ELSE
              SETRANGE("Starting Date", (IStartDate + 1), (ONewRateDate - 1));
            IF FINDFIRST THEN BEGIN
              ONewRateDate := "Starting Date";
              IF (ONewRateDate = (IStartDate + 1)) THEN
                lvSearchOnNextLevel := FALSE;
            END;
            IF lvSearchOnNextLevel THEN BEGIN
              SETRANGE("Starting Date", 0D, IStartDate);
              SETFILTER("Ending Date",'%1|>=%2',0D, IStartDate);
              IF FINDLAST THEN BEGIN
                IF ("Ending Date" <> 0D) AND ("Ending Date" < IEndDate) THEN
                  ONewRateDate := "Ending Date" + 1;
                lvSearchOnNextLevel := FALSE;
              END;
            END;
          END;

          IF lvSearchOnNextLevel THEN BEGIN
            SETRANGE("Plant No.",'');
            IF (ONewRateDate = 0D) THEN
              SETRANGE("Starting Date", (IStartDate + 1), IEndDate)
            ELSE
              SETRANGE("Starting Date", (IStartDate + 1), (ONewRateDate - 1));
            IF FINDFIRST THEN BEGIN
              ONewRateDate := "Starting Date";
              IF (ONewRateDate = (IStartDate + 1)) THEN
                lvSearchOnNextLevel := FALSE;
            END;
            IF lvSearchOnNextLevel THEN BEGIN
              SETRANGE("Starting Date", 0D, IStartDate);
              SETFILTER("Ending Date",'%1|>=%2',0D, IStartDate);
              IF FINDLAST THEN BEGIN
                IF ("Ending Date" <> 0D) AND ("Ending Date" < IEndDate) THEN
                  ONewRateDate := "Ending Date" + 1;
                lvSearchOnNextLevel := FALSE;
              END;
            END;
          END;
        END;
      END;

      IF (ONewRateDate = 0D) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE RentalAgreementRate@1100529001(RentalAgreement@1100529000 : Record 11229935;ReferenceDate@1100529003 : Date) Rate : Decimal;
    VAR
      RentalAgreementRate@1100529004 : Record 11229936;
    BEGIN
      RentalAgreementRate.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      RentalAgreementRate.SETRANGE("Plant No.", RentalAgreement."Plant No.");
      RentalAgreementRate.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
      RentalAgreementRate.SETFILTER("Starting Date", '<=%1', ReferenceDate);
      IF RentalAgreementRate.FINDLAST THEN
        Rate := RentalAgreementRate."Rental Rate (Days)";
    END;

    PROCEDURE RentalAgreementRateModifiedInPeriod@1100529000(RentalAgreement@1100529000 : Record 11229935;StartDate@1100529003 : Date;EndDate@1100529002 : Date;VAR NewRateDate@1100529001 : Date) : Boolean;
    VAR
      RentalAgreementRate@1100529004 : Record 11229936;
    BEGIN
      NewRateDate := 0D;
      IF StartDate = EndDate THEN
        EXIT(FALSE);
      RentalAgreementRate.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      RentalAgreementRate.SETRANGE("Plant No.", RentalAgreement."Plant No.");
      RentalAgreementRate.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
      RentalAgreementRate.SETRANGE("Starting Date", (StartDate + 1), EndDate);
      IF RentalAgreementRate.FINDFIRST THEN
        NewRateDate := RentalAgreementRate."Starting Date";
      EXIT(NewRateDate <> 0D);
    END;

    LOCAL PROCEDURE GetRentalDiscount@1100485007(ILocation@1100485003 : Code[20];ICustomer@1100485002 : Code[20];IPlantType@1100485001 : Code[20];IPlantNo@1100485000 : Code[10];ReferenceDate@1100525000 : Date;CheckDiscInPeri@1100530000 : Boolean;RefEndDate@1100530001 : Date;VAR DiscInPeri@1100530002 : Boolean) : Decimal;
    VAR
      lvPlantLocRec@1100485004 : Record 11012554;
      lvCustRec@1100485007 : Record 18;
      lvPlantTypeRec@1100485006 : Record 11012551;
      lvRentalDiscRec@1100485005 : Record 11012544;
      CustomerDiscountGroup@1100528400 : Code[20];
    BEGIN
      //* Function to determine the discount percentage for a date (ReferenceDate).
      //* Now function can also be used to check if there is a discount in de period (C-026618):
      //*   If CheckDiscInPeri is True then only check if there is a discount in de period, this is returned in the
      //*   argument DiscInPeri. Then ReferenceDate must be the starting date and RefEndDate the ending date of the period.
      //*   Note: If CheckDiscInPeri then the return value (Discount %) can/may not be used because it has a random value.
      IF gPlantCompany <> '' THEN BEGIN
        lvPlantTypeRec.CHANGECOMPANY(gPlantCompany);
        lvPlantLocRec.CHANGECOMPANY(gPlantCompany);
        lvCustRec.CHANGECOMPANY(gPlantCompany);
        lvRentalDiscRec.CHANGECOMPANY(gPlantCompany);
      END;
      DiscInPeri := FALSE;  //*C-026618.n
      IF IPlantType = '' THEN
        EXIT(0);
      IF NOT lvPlantTypeRec.GET(IPlantType) THEN
        EXIT(0);

      IF (ILocation <> '') AND lvPlantLocRec.GET(ILocation) THEN BEGIN
        IF lvPlantLocRec."Reference Date for Discounts" <> 0D THEN BEGIN
          //Fixed discount date for location
          ReferenceDate := lvPlantLocRec."Reference Date for Discounts";
          RefEndDate := ReferenceDate;
        END;
      END;

      WITH lvRentalDiscRec DO BEGIN
        SETRANGE("Starting Date",0D, ReferenceDate);
        SETFILTER("Ending Date",'%1|>=%2',0D, ReferenceDate);
        IF CheckDiscInPeri THEN BEGIN  //*C-026618.sn
          SETRANGE("Starting Date",0D, RefEndDate);
          DiscInPeri := TRUE;
        END;                           //*C-026618.en
        IF (ILocation <> '') THEN BEGIN
          SETRANGE(Level, Level::LocationPlantNo);
          SETRANGE("Customer Discount Group", '');
          SETRANGE(Location, ILocation);
          SETRANGE("Group Level", '');
          SETRANGE("Plant Type", IPlantType);
          IF (IPlantNo <> '') THEN BEGIN
            SETRANGE("Plant No.", IPlantNo);
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          SETRANGE(Level, Level::LocationPlantType);
          SETRANGE("Plant No.", '');
          IF FINDLAST THEN
            EXIT("Discount %");
          SETRANGE(Level, Level::LocationPlantGroup);
          SETRANGE("Plant Type", '');
          IF (lvPlantTypeRec."Group Level 3" <> '') THEN BEGIN
            SETRANGE("Group Level", lvPlantTypeRec."Group Level 3");
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          IF (lvPlantTypeRec."Group Level 2" <> '') THEN BEGIN
            SETRANGE("Group Level", lvPlantTypeRec."Group Level 2");
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          IF (lvPlantTypeRec."Group Level 1" <> '') THEN BEGIN
            SETRANGE("Group Level", lvPlantTypeRec."Group Level 1");
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          SETRANGE(Level, Level::Location);
          SETRANGE("Group Level", '');
          IF FINDLAST THEN
            EXIT("Discount %");
        END;

        IF (ICustomer = '') AND (ILocation <> '') THEN BEGIN
          IF lvPlantLocRec.GET(ILocation) THEN
            ICustomer := lvPlantLocRec."Customer No.";
        END;
        IF (ICustomer <> '') THEN
          IF lvCustRec.GET(ICustomer) THEN;
        IF lvPlantLocRec."Customer Disc. Group (Rental)" <> '' THEN
          CustomerDiscountGroup := lvPlantLocRec."Customer Disc. Group (Rental)"
        ELSE
          CustomerDiscountGroup := lvCustRec."Customer Disc. Group";
        IF (gEstCustDiscountGroup <> '') AND (gEstCustDiscountGroup <> CustomerDiscountGroup) THEN
          CustomerDiscountGroup := gEstCustDiscountGroup;
        IF (CustomerDiscountGroup <> '') THEN BEGIN
          SETRANGE(Level, Level::CustomerPlantNo);
          SETRANGE("Customer Discount Group", CustomerDiscountGroup);
          SETRANGE(Location, '');
          SETRANGE("Group Level", '');
          SETRANGE("Plant Type", IPlantType);
          IF (IPlantNo <> '') THEN BEGIN
            SETRANGE("Plant No.", IPlantNo);
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          SETRANGE(Level, Level::CustomerPlantType);
          SETRANGE("Plant No.", '');
          IF FINDLAST THEN
            EXIT("Discount %");
          SETRANGE(Level, Level::CustomerPlantGroup);
          SETRANGE("Plant Type", '');
          IF (lvPlantTypeRec."Group Level 3" <> '') THEN BEGIN
            SETRANGE("Group Level", lvPlantTypeRec."Group Level 3");
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          IF (lvPlantTypeRec."Group Level 2" <> '') THEN BEGIN
            SETRANGE("Group Level", lvPlantTypeRec."Group Level 2");
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          IF (lvPlantTypeRec."Group Level 1" <> '') THEN BEGIN
            SETRANGE("Group Level", lvPlantTypeRec."Group Level 1");
            IF FINDLAST THEN
              EXIT("Discount %");
          END;
          SETRANGE(Level, Level::Customer);
          SETRANGE("Group Level", '');
          IF FINDLAST THEN
            EXIT("Discount %");
        END;

        SETRANGE(Level, Level::PlantNo);
        SETRANGE("Customer Discount Group", '');
        SETRANGE(Location, '');
        SETRANGE("Group Level", '');
        SETRANGE("Plant Type", IPlantType);
        IF (IPlantNo <> '') THEN BEGIN
          SETRANGE("Plant No.", IPlantNo);
          IF FINDLAST THEN
            EXIT("Discount %");
        END;
        SETRANGE(Level, Level::PlantType);
        SETRANGE("Plant No.", '');
        IF FINDLAST THEN
          EXIT("Discount %");
        SETRANGE(Level, Level::PlantGroup);
        SETRANGE("Plant Type", '');
        IF (lvPlantTypeRec."Group Level 3" <> '') THEN BEGIN
          SETRANGE("Group Level", lvPlantTypeRec."Group Level 3");
          IF FINDLAST THEN
            EXIT("Discount %");
        END;
        IF (lvPlantTypeRec."Group Level 2" <> '') THEN BEGIN
          SETRANGE("Group Level", lvPlantTypeRec."Group Level 2");
          IF FINDLAST THEN
            EXIT("Discount %");
        END;
        IF (lvPlantTypeRec."Group Level 1" <> '') THEN BEGIN
          SETRANGE("Group Level", lvPlantTypeRec."Group Level 1");
          IF FINDLAST THEN
            EXIT("Discount %");
        END;
      END;
      DiscInPeri := FALSE;  //*C-026618.n
    END;

    PROCEDURE GetRentalQuantityDiscounts@1100528807(ILocation@1100528800 : Code[20];ICustomer@1100528801 : Code[20];IPlantType@1100528802 : Code[20];IPlantNo@1100528803 : Code[10];VAR RentalQuantityDiscount@1100528804 : Record 11072669);
    VAR
      Customer@1100528805 : Record 18;
      PlantType@1100528806 : Record 11012551;
      PlantLocation@1100528807 : Record 11012554;
      CustomerDiscountGroup@1100528400 : Code[20];
    BEGIN
      IF IPlantType = '' THEN
        EXIT;
      IF NOT PlantType.GET(IPlantType) THEN
        EXIT;

      WITH RentalQuantityDiscount DO BEGIN
        IF (ILocation <> '') THEN BEGIN
          SETRANGE(Level, Level::LocationPlantNo);
          SETRANGE("Customer Discount Group", '');
          SETRANGE(Location, ILocation);
          SETRANGE("Group Level", '');
          SETRANGE("Plant Type", IPlantType);
          IF (IPlantNo <> '') THEN BEGIN
            SETRANGE("Plant No.", IPlantNo);
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;

          SETRANGE(Level, Level::LocationPlantType);
          SETRANGE("Plant No.", '');
          IF FINDSET THEN BEGIN
            REPEAT
              MARK(TRUE);
            UNTIL NEXT = 0;
            EXIT;
          END;
          SETRANGE(Level, Level::LocationPlantGroup);
          SETRANGE("Plant Type", '');
          IF (PlantType."Group Level 3" <> '') THEN BEGIN
            SETRANGE("Group Level", PlantType."Group Level 3");
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;
          IF (PlantType."Group Level 2" <> '') THEN BEGIN
            SETRANGE("Group Level", PlantType."Group Level 2");
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;
          IF (PlantType."Group Level 1" <> '') THEN BEGIN
            SETRANGE("Group Level", PlantType."Group Level 1");
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;
          SETRANGE(Level, Level::Location);
          SETRANGE("Group Level", '');
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
        END;

        IF (ICustomer = '') AND (ILocation <> '') THEN BEGIN
          IF PlantLocation.GET(ILocation) THEN
             ICustomer := PlantLocation."Customer No.";
        END;
        IF (ICustomer <> '') THEN
          IF Customer.GET(ICustomer) THEN;
        IF PlantLocation."Customer Disc. Group (Rental)" <> '' THEN
          CustomerDiscountGroup := PlantLocation."Customer Disc. Group (Rental)"
        ELSE
          CustomerDiscountGroup := Customer."Customer Disc. Group";
        IF (CustomerDiscountGroup <> '') THEN BEGIN
          SETRANGE(Level, Level::CustomerPlantNo);
          SETRANGE("Customer Discount Group", CustomerDiscountGroup);
          SETRANGE(Location, '');
          SETRANGE("Group Level", '');
          SETRANGE("Plant Type", IPlantType);
          IF (IPlantNo <> '') THEN BEGIN
            SETRANGE("Plant No.", IPlantNo);
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;
          SETRANGE(Level, Level::CustomerPlantType);
          SETRANGE("Plant No.", '');
           IF FINDSET THEN BEGIN
             REPEAT
               MARK(TRUE);
             UNTIL NEXT = 0;
             EXIT;
           END;
          SETRANGE(Level, Level::CustomerPlantGroup);
          SETRANGE("Plant Type", '');
          IF (PlantType."Group Level 3" <> '') THEN BEGIN
            SETRANGE("Group Level", PlantType."Group Level 3");
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;
          IF (PlantType."Group Level 2" <> '') THEN BEGIN
            SETRANGE("Group Level", PlantType."Group Level 2");
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;
          IF (PlantType."Group Level 1" <> '') THEN BEGIN
            SETRANGE("Group Level", PlantType."Group Level 1");
            IF FINDSET THEN BEGIN
              REPEAT
                MARK(TRUE);
              UNTIL NEXT = 0;
              EXIT;
            END;
          END;
          SETRANGE(Level, Level::Customer);
          SETRANGE("Group Level", '');
          IF FINDSET THEN BEGIN
            REPEAT
              MARK(TRUE);
            UNTIL NEXT = 0;
            EXIT;
          END;
        END;
        SETRANGE(Level, Level::PlantNo);
        SETRANGE("Customer Discount Group", '');
        SETRANGE(Location, '');
        SETRANGE("Group Level", '');
        SETRANGE("Plant Type", IPlantType);
        IF (IPlantNo <> '') THEN BEGIN
          SETRANGE("Plant No.", IPlantNo);
          IF FINDSET THEN BEGIN
            REPEAT
              MARK(TRUE);
            UNTIL NEXT = 0;
            EXIT;
          END;
        END;
        SETRANGE(Level, Level::PlantType);
        SETRANGE("Plant No.", '');
        IF FINDSET THEN BEGIN
          REPEAT
            MARK(TRUE);
          UNTIL NEXT = 0;
          EXIT;
        END;
        SETRANGE(Level, Level::PlantGroup);
        SETRANGE("Plant Type", '');
        IF (PlantType."Group Level 3" <> '') THEN BEGIN
          SETRANGE("Group Level", PlantType."Group Level 3");
          IF FINDSET THEN BEGIN
            REPEAT
              MARK(TRUE);
            UNTIL NEXT = 0;
            EXIT;
          END;
        END;
        IF (PlantType."Group Level 2" <> '') THEN BEGIN
          SETRANGE("Group Level", PlantType."Group Level 2");
          IF FINDSET THEN BEGIN
            REPEAT
              MARK(TRUE);
            UNTIL NEXT = 0;
            EXIT;
          END;
        END;
        IF (PlantType."Group Level 1" <> '') THEN BEGIN
          SETRANGE("Group Level", PlantType."Group Level 1");
          IF FINDSET THEN BEGIN
            REPEAT
              MARK(TRUE);
            UNTIL NEXT = 0;
            EXIT;
          END;
        END;
      END;
    END;

    PROCEDURE BuildQuantityDiscountPeriodTable@1100528809(Ilocation@1100528800 : Code[20];ICustomer@1100528801 : Code[20];IPlantType@1100528802 : Code[20];IPlantNo@1100528803 : Code[10];VAR RentalQuantityDiscount@1100528804 : Record 11072669;InventoryStartRentalDate@1100528807 : Date;VAR TmpGenericTempTable@1100528805 : TEMPORARY Record 11020579);
    VAR
      TmpGenericTempTable2@1100528809 : TEMPORARY Record 11020579;
      StartDateQuantityDiscount@1100528808 : Date;
      NextRentalDiscountDate@1100528810 : Date;
    BEGIN
      RentalQuantityDiscount.SETCURRENTKEY("From Number of Days", Level);
      IF RentalQuantityDiscount.FINDFIRST THEN BEGIN
        REPEAT
          StartDateQuantityDiscount := CalcStartDateQuantityDiscount(Ilocation, IPlantType, IPlantNo, InventoryStartRentalDate, RentalQuantityDiscount."From Number of Days");
          IF NOT TmpGenericTempTable.GET(FORMAT(StartDateQuantityDiscount,0,9)) THEN BEGIN
            TmpGenericTempTable.INIT;
            TmpGenericTempTable."Key Code1" := FORMAT(StartDateQuantityDiscount,0,9);
            TmpGenericTempTable.Int1 := RentalQuantityDiscount."From Number of Days";
            TmpGenericTempTable.Dec1 := RentalQuantityDiscount."% of Unit Price"-100;
            TmpGenericTempTable.Date1 := StartDateQuantityDiscount;
            TmpGenericTempTable.INSERT;
          END;
        UNTIL RentalQuantityDiscount.NEXT = 0;
      END;

      IF TmpGenericTempTable.FINDFIRST THEN
        REPEAT
          TmpGenericTempTable2 := TmpGenericTempTable;
          TmpGenericTempTable2.INSERT;
        UNTIL TmpGenericTempTable.NEXT = 0;

      IF TmpGenericTempTable.FINDFIRST THEN
        REPEAT
          NextRentalDiscountDate := GetNextRentalDiscountDate(TmpGenericTempTable2, TmpGenericTempTable."Key Code1");
          IF NextRentalDiscountDate = 0D THEN
            TmpGenericTempTable.Date2 := NextRentalDiscountDate
          ELSE
            TmpGenericTempTable.Date2 := NextRentalDiscountDate-1;
          TmpGenericTempTable.MODIFY;
        UNTIL TmpGenericTempTable.NEXT = 0;
    END;

    PROCEDURE CalcStartDateQuantityDiscount@1100528805(ILocation@1100528804 : Code[20];IPlantType@1100528806 : Code[20];IPlantNo@1100528807 : Code[10];InventoryStartRentalDate@1100528800 : Date;IFromNumberOfDays@1100528801 : Integer) : Date;
    VAR
      PlantLocation@1100528805 : Record 11012554;
      CalculateRentalPeriods@1100528802 : Codeunit 11012568;
      Counter@1100528803 : Integer;
      RentalQuantityDiscountStartDate@1100528809 : Date;
      IsRentFreeDay@1100528810 : Boolean;
    BEGIN
      IF IFromNumberOfDays = 0 THEN
        EXIT(InventoryStartRentalDate);

      Counter := 1;
      RentalQuantityDiscountStartDate := InventoryStartRentalDate;
      IF NOT PlantLocation.GET(ILocation) THEN
        PlantLocation.INIT;

      WHILE (Counter <= IFromNumberOfDays) DO BEGIN
        IsRentFreeDay := (CalculateRentalPeriods.NumberRentFreeDays(PlantLocation, RentalQuantityDiscountStartDate, RentalQuantityDiscountStartDate, IPlantType, IPlantNo)) = 1;
        IF NOT IsRentFreeDay THEN
          Counter := Counter + 1;
        RentalQuantityDiscountStartDate := RentalQuantityDiscountStartDate +1;
      END;

      EXIT(RentalQuantityDiscountStartDate-1);
    END;

    LOCAL PROCEDURE RentalDiscModifiedInPeri@1100530000(Location@1100530006 : Code[20];CustNo@1100530005 : Code[20];PlantType@1100530004 : Code[20];PlantNo@1100530003 : Code[10];StartDate@1100530002 : Date;EndDate@1100530001 : Date;VAR NewDiscountDate@1100530000 : Date) : Boolean;
    VAR
      RefDate@1100530007 : Date;
      DiscInPeri@1100530009 : Boolean;
      DummyBool@1100530010 : Boolean;
      DiscPerc@1100530008 : Decimal;
    BEGIN
      //*C-026618
      NewDiscountDate := 0D;
      IF (PlantType = '') OR (StartDate = 0D) OR (EndDate <= StartDate)  THEN
        EXIT(FALSE);
      GetRentalDiscount(Location,CustNo,PlantType,PlantNo,StartDate,TRUE, EndDate, DiscInPeri);
      IF NOT DiscInPeri THEN
        EXIT(FALSE);

      DiscPerc := GetRentalDiscount(Location,CustNo,PlantType,PlantNo,StartDate,FALSE,0D,DummyBool);
      FOR RefDate := StartDate+1 TO EndDate DO BEGIN
        IF GetRentalDiscount(Location,CustNo,PlantType,PlantNo,RefDate,FALSE,0D,DummyBool) <> DiscPerc THEN BEGIN
          NewDiscountDate := RefDate;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GetNextRentalDiscountDate@1100528804(VAR TmpGenericTempTable@1100528800 : TEMPORARY Record 11020579;CurrentRentalDiscountCode@1100528801 : Code[20]) : Date;
    BEGIN
      TmpGenericTempTable.SETFILTER("Key Code1", '>%1', CurrentRentalDiscountCode);
      IF TmpGenericTempTable.FINDFIRST THEN
        EXIT(TmpGenericTempTable.Date1);
      EXIT(0D)
    END;

    PROCEDURE CostRateFromEstimate@1100525004(PlantType@1100525000 : Code[20];PlantNo@1100525001 : Code[10];PlantLocation@1100525004 : Code[20];ReferenceDate@1100525003 : Date;PlantCompany@1100529400 : Text[30];VAR RentalType@1100525005 : 'Rental,Sales,,PlantHours';VAR PlantPriceType@1100525006 : ' ,Day,Week,,Month,,,,,Hour') : Decimal;
    VAR
      RateType@1100525002 : Option;
    BEGIN
      //Arguments:
      // - Plant Type (In)
      // - Plant Number (In)   : Optional
      // - Plant Location (In) : Optional (mostly not yet a location in estimate fase)
      // - Reference Date (In)
      // - Plant Company (In)
      // - Rental Type (In/Out): 0=Rental, 1=Sales, (2=Buy Back -> Not allowd for Cost), 3=Hours,
      //                         -1=Will be determind base on Rental Type of the Plant Type (result will/can only be Rental or Sales).
      // - PlantPriceType (Out): Day, Week or Month for rental rates, or Hour for plant hour rates. (Empty for Sales and Buy Back)

      SetPlantCompanyFromOtherCompany(PlantCompany);
      CheckOrDetermineRentalTypeFromEstimate(PlantType, TRUE, RentalType);
      DetermineEstimatePlantPriceType(PlantLocation, RentalType, PlantPriceType, RateType);
      IF RentalType < 0 THEN
        EXIT(0);
      IF ReferenceDate = 0D THEN
        ReferenceDate := TODAY;
      EXIT(GetCostPrice(PlantType, PlantNo, ReferenceDate, RentalType, RateType));
    END;

    PROCEDURE SalesRateFromEstimate@1100525012(PlantType@1100525002 : Code[20];PlantNo@1100525001 : Code[10];PlantLocation@1100525005 : Code[20];CustomerNo@1100525004 : Code[20];ForceInternalOrExternalRate@1100525006 : ' ,Internal,External';ReferenceDate@1100525000 : Date;PlantCompany@1100529400 : Text[30];VAR RentalType@1100525003 : 'Rental,Sales,BuyBack,PlantHours';VAR PlantPriceType@1100525007 : ' ,Day,Week,,Month,,,,,Hour') : Decimal;
    VAR
      RateType@1100525008 : Option;
    BEGIN
      //Arguments:
      // - Plant Type (In)
      // - Plant Number (In)    : Optional
      // - Plant Location (In)  : Optional (mostly not yet a location in estimate fase)
      // - Customer Number (In) : Optional
      // - Force Int./Ext. (In) : Force Internal or External Rental-/Hour Rate, only used as Plant Location is empty
      //                          (if location is filled then always Kind of Rate of the location, then this input argument is ignored)
      // - Reference Date (In)
      // - Plant Company (In)
      // - RentalType (In/Out)  : 0=Rental, 1=Sales, 2=Buy Back, 3=Hours,
      //                          -1=Will be determind base on Rental Type of the Plant Type (result will/can only be Rental or Sales).
      // - PlantPriceType (Out) : Day, Week or Month for rental rates, or Hour for plant hour rates. (Empty for Sales and Buy Back)

      SetPlantCompanyFromOtherCompany(PlantCompany);
      CheckOrDetermineRentalTypeFromEstimate(PlantType, FALSE, RentalType);
      DetermineEstimatePlantPriceType(PlantLocation, RentalType, PlantPriceType, RateType);
      IF RentalType < 0 THEN
        EXIT(0);
      IF ReferenceDate = 0D THEN
        ReferenceDate := TODAY;
      gForceInternalOrExternalRate := gForceInternalOrExternalRate::" ";
      IF (PlantLocation = '') AND (RentalType IN [RentalType::Rental, RentalType::PlantHours]) THEN
        gForceInternalOrExternalRate := ForceInternalOrExternalRate;
      EXIT(RateWithCust(PlantLocation,CustomerNo,PlantType,PlantNo,'',ReferenceDate, RentalType, 0, ''));
    END;

    PROCEDURE SalesDiscountFromEstimate@1100525008(PlantType@1100525002 : Code[20];PlantNo@1100525001 : Code[10];PlantLocation@1100525005 : Code[20];CustomerNo@1100525004 : Code[20];CustDiscountGroup@1100529000 : Code[20];ReferenceDate@1100525000 : Date;PlantCompany@1100529400 : Text[30];RentalType@1100525003 : 'Rental,Sales,BuyBack,PlantHours') : Decimal;
    VAR
      PlantLoc@1100525006 : Record 11012554;
    BEGIN
      //Arguments:
      // - Plant Type (In)
      // - Plant Number (In)    : Optional
      // - Plant Location (In)  : Optional (mostly not yet a location in estimate fase)
      // - Customer Number (In) : Optional
      // - Customer Discount Group (In) : Optional
      // - Reference Date (In)
      // - Plant Company (In)
      // - RentalType (In)      : 0=Rental, 1=Sales, 2=Buy Back, 3=Hours

      gEstCustDiscountGroup := CustDiscountGroup;
      SetPlantCompanyFromOtherCompany(PlantCompany);
      IF ReferenceDate = 0D THEN
        ReferenceDate := TODAY;
      IF RentalType = RentalType::Rental THEN
          EXIT(RentalDiscount(PlantLocation, CustomerNo, PlantType, PlantNo, ReferenceDate))
      ELSE BEGIN
        IF gPlantCompany <> '' THEN
          PlantLoc.CHANGECOMPANY(gPlantCompany);
        IF (PlantLocation <> '') AND PlantLoc.GET(PlantLocation) THEN BEGIN
          PlantSetupRec.GET;
          IF (PlantSetupRec."Discount Plant Hours" AND (RentalType = RentalType::PlantHours)) OR
             (PlantSetupRec."Discount Sales/Buy Back" AND (RentalType IN [RentalType::Sales, RentalType::BuyBack]))
          THEN
            EXIT(PlantLoc."Discount %");
        END;
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE CheckOrDetermineRentalTypeFromEstimate@1100525005(PlntType@1100525000 : Code[20];CostRateMode@1100525003 : Boolean;VAR RentalType@1100525001 : 'Rental,Sales,BuyBack,PlantHours');
    VAR
      PlantType@1100525002 : Record 11012551;
    BEGIN
      IF gPlantCompany <> '' THEN
        PlantType.CHANGECOMPANY(gPlantCompany);
      PlantType.GET(PlntType);
      IF RentalType < 0 THEN BEGIN
        CASE PlantType."Rental Type" OF
          PlantType."Rental Type"::Rental:
            RentalType := RentalType::Rental;
          PlantType."Rental Type"::"Sales/Buy Back":
            RentalType := RentalType::Sales;
          PlantType."Rental Type"::Both:
            RentalType := RentalType::Rental;
        END;
      END ELSE BEGIN
        CASE RentalType OF
          RentalType::Rental:
            IF NOT (PlantType."Rental Type" IN [PlantType."Rental Type"::Rental, PlantType."Rental Type"::Both]) THEN
              RentalType := -1;
          RentalType::Sales:
            IF NOT (PlantType."Rental Type" IN [PlantType."Rental Type"::"Sales/Buy Back", PlantType."Rental Type"::Both]) THEN
              RentalType := -1;
          RentalType::BuyBack:
            IF (NOT (PlantType."Rental Type" IN [PlantType."Rental Type"::"Sales/Buy Back", PlantType."Rental Type"::Both])) OR CostRateMode THEN
              RentalType := -1;
          RentalType::PlantHours:
            IF PlantType."Rental Type" <> PlantType."Rental Type"::Rental THEN
              RentalType := -1;
        ELSE
          RentalType := -1;
        END;
      END;
    END;

    LOCAL PROCEDURE DetermineEstimatePlantPriceType@1100525010(PlantLocation@1100525000 : Code[20];RentalType@1100525003 : 'Rental,Sales,BuyBack,PlantHours';VAR PlantPriceType@1100525001 : ' ,Day,Week,,Month,,,,,Hour';VAR RateType@1100525004 : Option);
    VAR
      PlantLoc@1100525002 : Record 11012554;
    BEGIN
      CASE RentalType OF
        RentalType::Rental:
          BEGIN
            IF gPlantCompany <> '' THEN
              PlantLoc.CHANGECOMPANY(gPlantCompany);
            IF (NOT PlantLoc.GET(PlantLocation)) OR (PlantLocation = '') THEN BEGIN
              PlantSetupRec.GET;
              CASE PlantSetupRec."Rate Type" OF
                PlantSetupRec."Rate Type"::Day:
                  PlantPriceType := PlantPriceType::Day;
                PlantSetupRec."Rate Type"::Week:
                  PlantPriceType := PlantPriceType::Week;
                PlantSetupRec."Rate Type"::Month:
                  PlantPriceType := PlantPriceType::Month;
              END;
              RateType := PlantSetupRec."Rate Type";
            END ELSE BEGIN
              CASE PlantLoc."Rate Type" OF
                PlantLoc."Rate Type"::Day:
                  PlantPriceType := PlantPriceType::Day;
                PlantLoc."Rate Type"::Week:
                  PlantPriceType := PlantPriceType::Week;
                PlantLoc."Rate Type"::Month:
                  PlantPriceType := PlantPriceType::Month;
              END;
              RateType := PlantLoc."Rate Type";
            END;
          END;
        RentalType::PlantHours:
          PlantPriceType := PlantPriceType::Hour;
      ELSE
        PlantPriceType := PlantPriceType::" ";
      END;
    END;

    LOCAL PROCEDURE GetCostPrice@1100525007(PlntType@1100525001 : Code[20];PlntNo@1100525000 : Code[10];ReferenceDate@1100525003 : Date;VAR RentalType@1100525007 : 'Rental,Sales,,PlantHours';RateType@1100525006 : Option) : Decimal;
    VAR
      PlantType@1100525004 : Record 11012551;
      PlantLoc@1100525009 : Record 11012554;
      RentalRate@1100525002 : Record 11012567;
      Found@1100525005 : Boolean;
      CostPrice@1100525008 : Decimal;
    BEGIN
      IF gPlantCompany <> '' THEN BEGIN
        PlantType.CHANGECOMPANY(gPlantCompany);
        PlantLoc.CHANGECOMPANY(gPlantCompany);
        RentalRate.CHANGECOMPANY(gPlantCompany);
      END;
      PlantType.GET(PlntType);
      WITH RentalRate DO BEGIN
        RESET;
        CASE RentalType OF
          RentalType::Rental:
            BEGIN
              SETRANGE("Rental Type","Rental Type"::Rental);
              CASE RateType OF
                PlantLoc."Rate Type"::Week:
                  SETFILTER("Cost Price (Week)", '>%1', 0);
                PlantLoc."Rate Type"::Month:
                  SETFILTER("Cost Price (Month)", '>%1', 0);
              ELSE
                SETFILTER("Cost Price", '>%1', 0);
              END;
            END;
          RentalType::Sales:
            BEGIN
              SETRANGE("Rental Type","Rental Type"::"Sales / Buy Back");
              SETFILTER("Cost Price", '>%1', 0);
            END;
          RentalType::PlantHours:
            BEGIN
              SETRANGE("Rental Type","Rental Type"::"Plant Hours");
              SETFILTER("Cost Price", '>%1', 0);
            END;
        ELSE
          EXIT(0);
        END;
        SETRANGE("Plant Type", PlntType);
        SETRANGE("Starting Date", 0D, ReferenceDate);
        SETFILTER("Ending Date", '%1|>=%2', 0D, ReferenceDate);

        //* Level: Plant Number (only for unique plant)
        IF (PlntNo <> '') AND (NOT PlantType.Bulk) THEN BEGIN
          SETRANGE("Plant No.", PlntNo);
          Found := FINDLAST;
        END;

        //* Level: Plant Type
        IF NOT Found THEN BEGIN
          SETRANGE("Plant No.", '');
          Found := FINDLAST;
        END;

        IF Found THEN BEGIN
          IF RentalType = RentalType::Rental THEN BEGIN
            CALCFIELDS("Plant Unit of Measure", "Rate Unit of Measure");
            CostPrice := "Cost Price";
            IF RateType = PlantLoc."Rate Type"::Week THEN
              CostPrice := "Cost Price (Week)";
            IF RateType = PlantLoc."Rate Type"::Month THEN
              CostPrice := "Cost Price (Month)";
            EXIT(lvRateUnitConvertion("Plant Type", "Plant Unit of Measure", "Rate Unit of Measure", CostPrice));
          END;
          EXIT("Cost Price");
        END;
      END;
      EXIT(0);
    END;

    PROCEDURE SetPlantCompanyFromOtherCompany@1100529402(PlantCompany@1100529400 : Text[30]);
    BEGIN
      gPlantCompany := PlantCompany;
      IF gPlantCompany = '' THEN
        gPlantCompany := COMPANYNAME;
      PlantSetupRec.CHANGECOMPANY(gPlantCompany);
      RateRec.CHANGECOMPANY(gPlantCompany);
      CustomerRec.CHANGECOMPANY(gPlantCompany);
      IF gPlantCompany = COMPANYNAME THEN
        gPlantCompany := '';
    END;

    BEGIN
    END.
  }
}

