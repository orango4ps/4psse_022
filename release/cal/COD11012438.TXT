OBJECT Codeunit 11012438 SD Worx Cobra Get Employees
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            AccessToken@1100528500 : Text;
          BEGIN
            AccessToken := SDWorxCobraConnectionMgt.GetAccessToken;
            IF AccessToken <> '' THEN BEGIN
              GetOrganizations(AccessToken);
              GetAddresses(AccessToken);
              GetPhoneNumbers(AccessToken);
              GetMailAdresses(AccessToken);
              GetCurrentEmployments(AccessToken);
              GetSalaryEmployments(AccessToken);
              GetPersonsAndWriteEmployeesToNAV(AccessToken);
            END ELSE
              ERROR('Couldnt retrieve access token');
          END;

  }
  CODE
  {
    VAR
      SDWorxCobraConnectionMgt@1100528500 : Codeunit 11012437;
      StringFunctions@1100525000 : Codeunit 11012273;
      TempGenericOrganization@1100528507 : TEMPORARY Record 11020579;
      TempGenericAddress@1100528506 : TEMPORARY Record 11020579;
      TempGenericPhone@1100528505 : TEMPORARY Record 11020579;
      TempGenericEmail@1100528504 : TEMPORARY Record 11020579;
      TempGenericCurrentEmployment@1100528503 : TEMPORARY Record 11020579;
      TempGenericSalaryEmployment@1100528502 : TEMPORARY Record 11020579;

    LOCAL PROCEDURE GetOrganizations@1100528523(AccessToken@1100528501 : Text) : Boolean;
    VAR
      XMLText@1100528500 : Text;
    BEGIN
      IF NOT SDWorxCobraConnectionMgt.GetCobraData(AccessToken, SDWorxCobraConnectionMgt.GetFullURL('Organization'),'Organization',XMLText) THEN
        EXIT(FALSE);

      XMLText := StringFunctions.ReplaceDiacritics(XMLText);
      ReadOrganizationXML(XMLText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAddresses@1100528514(AccessToken@1100528501 : Text) : Boolean;
    VAR
      XMLText@1100528500 : Text;
    BEGIN
      IF NOT SDWorxCobraConnectionMgt.GetCobraData(AccessToken, SDWorxCobraConnectionMgt.GetFullURL('Address'),'Address',XMLText) THEN
        EXIT(FALSE);

      XMLText := StringFunctions.ReplaceDiacritics(XMLText);
      ReadAddressXML(XMLText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPhoneNumbers@1100528515(AccessToken@1100528501 : Text) : Boolean;
    VAR
      XMLText@1100528500 : Text;
    BEGIN
      IF NOT SDWorxCobraConnectionMgt.GetCobraData(AccessToken, SDWorxCobraConnectionMgt.GetFullURL('Phone'),'Phone',XMLText) THEN
        EXIT(FALSE);

      XMLText := StringFunctions.ReplaceDiacritics(XMLText);
      ReadPhoneXML(XMLText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetMailAdresses@1100528517(AccessToken@1100528501 : Text) : Boolean;
    VAR
      XMLText@1100528500 : Text;
    BEGIN
      IF NOT SDWorxCobraConnectionMgt.GetCobraData(AccessToken, SDWorxCobraConnectionMgt.GetFullURL('Email'),'Email',XMLText) THEN
        EXIT(FALSE);

      XMLText := StringFunctions.ReplaceDiacritics(XMLText);
      ReadEmailXML(XMLText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCurrentEmployments@1100528518(AccessToken@1100528501 : Text) : Boolean;
    VAR
      XMLText@1100528500 : Text;
    BEGIN
      IF NOT SDWorxCobraConnectionMgt.GetCobraData(AccessToken, SDWorxCobraConnectionMgt.GetFullURL('CurrentEmployment'),'CurrentEmployment',XMLText) THEN
        EXIT(FALSE);

      XMLText := StringFunctions.ReplaceDiacritics(XMLText);
      ReadCurrentEmploymentXML(XMLText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetSalaryEmployments@1100528519(AccessToken@1100528501 : Text) : Boolean;
    VAR
      XMLText@1100528500 : Text;
    BEGIN
      IF NOT SDWorxCobraConnectionMgt.GetCobraData(AccessToken, SDWorxCobraConnectionMgt.GetFullURL('SalaryEmployment'),'SalaryEmployment',XMLText) THEN
        EXIT(FALSE);

      XMLText := StringFunctions.ReplaceDiacritics(XMLText);
      ReadSalaryEmploymentXML(XMLText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPersonsAndWriteEmployeesToNAV@1100528513(AccessToken@1100528501 : Text) : Boolean;
    VAR
      XMLText@1100528500 : Text;
    BEGIN
      IF NOT SDWorxCobraConnectionMgt.GetCobraData(AccessToken, SDWorxCobraConnectionMgt.GetFullURL('Person'),'Person',XMLText) THEN
        EXIT(FALSE);

      XMLText := StringFunctions.ReplaceDiacritics(XMLText);
      ReadPersonXMLAndWriteEmployees(XMLText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadOrganizationXML@1100528524(XMLText@1100528500 : Text);
    VAR
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
    BEGIN
      SDWorxCobraConnectionMgt.SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'//empty:entry',XmlNamespaceManager);
      IF NoOfLines = 0 THEN
        EXIT;

      WITH TempGenericOrganization DO
        FOR LineNo := 1 TO NoOfLines DO BEGIN
          INIT;
          "Key Code1" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:ID',XmlNamespaceManager), 1, MAXSTRLEN("Key Code1"));
          LimitAndInsertText(Text1, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:OrganizationNumber',XmlNamespaceManager));
          INSERT;
        END;
    END;

    LOCAL PROCEDURE ReadAddressXML@1100528507(XMLText@1100528500 : Text);
    VAR
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
      MultipleAddresses@1100528510 : Boolean;
      IsPostAddress@1100528509 : Boolean;
      SkipAddressUpdate@1100528507 : Boolean;
    BEGIN
      SDWorxCobraConnectionMgt.SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'//empty:entry',XmlNamespaceManager);
      IF NoOfLines = 0 THEN
        EXIT;

      WITH TempGenericAddress DO
        FOR LineNo := 1 TO NoOfLines DO BEGIN
          INIT;
          "Key Code1" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:PersonId',XmlNamespaceManager), 1, MAXSTRLEN("Key Code1"));
          IsPostAddress := (XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:IsPostAddress',XmlNamespaceManager) = 'true');

          //If Multiple Addresses for an employee use the address where IsPostAddress = true
          SkipAddressUpdate := FALSE;
          MultipleAddresses := GET("Key Code1");
          IF MultipleAddresses AND Bool1 AND NOT IsPostAddress THEN
            SkipAddressUpdate := TRUE;

          IF NOT SkipAddressUpdate THEN BEGIN
            LimitAndInsertText(Text1, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Street',XmlNamespaceManager));
            LimitAndInsertText(Text2, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:HouseNumber',XmlNamespaceManager));
            LimitAndInsertText(Text3, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:HouseNumberAddition',XmlNamespaceManager));
            LimitAndInsertText(Text4, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:City',XmlNamespaceManager));
            LimitAndInsertText(Text5, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Zipcode',XmlNamespaceManager));
            Bool1 := (XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:IsPostAddress',XmlNamespaceManager) = 'true');

            IF MultipleAddresses THEN
              MODIFY
            ELSE
              INSERT;
          END;
        END;
    END;

    LOCAL PROCEDURE ReadPhoneXML@1100528509(XMLText@1100528500 : Text);
    VAR
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
    BEGIN
      SDWorxCobraConnectionMgt.SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'//empty:entry',XmlNamespaceManager);
      IF NoOfLines = 0 THEN
        EXIT;

      WITH TempGenericPhone DO
        FOR LineNo := 1 TO NoOfLines DO BEGIN
          INIT;

          IF XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:PhoneNumber',XmlNamespaceManager) <> '' THEN BEGIN
            "Key Code1" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:PersonId',XmlNamespaceManager), 1, MAXSTRLEN("Key Code1"));
            "Key Code2" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Index',XmlNamespaceManager), 1, MAXSTRLEN("Key Code2"));
            "Key Code3" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:PhoneType',XmlNamespaceManager), 1, MAXSTRLEN("Key Code3"));
            LimitAndInsertText(Text1, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:PhoneNumber',XmlNamespaceManager));
            INSERT;
          END;
        END;
    END;

    LOCAL PROCEDURE ReadEmailXML@1100528520(XMLText@1100528500 : Text);
    VAR
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
    BEGIN
      SDWorxCobraConnectionMgt.SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'//empty:entry',XmlNamespaceManager);
      IF NoOfLines = 0 THEN
        EXIT;

      WITH TempGenericEmail DO
        FOR LineNo := 1 TO NoOfLines DO BEGIN
          INIT;

          IF XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:EmailAddress',XmlNamespaceManager) <> '' THEN BEGIN
            "Key Code1" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:PersonId',XmlNamespaceManager), 1, MAXSTRLEN("Key Code1"));
            "Key Code2" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Index',XmlNamespaceManager), 1, MAXSTRLEN("Key Code2"));
            LimitAndInsertText(Text1, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:EmailAddress',XmlNamespaceManager));
            INSERT;
          END;
        END;
    END;

    LOCAL PROCEDURE ReadCurrentEmploymentXML@1100528521(XMLText@1100528500 : Text);
    VAR
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
      PersonID@1100528506 : Text;
    BEGIN
      SDWorxCobraConnectionMgt.SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'//empty:entry',XmlNamespaceManager);
      IF NoOfLines = 0 THEN
        EXIT;

      WITH TempGenericCurrentEmployment DO
        FOR LineNo := 1 TO NoOfLines DO BEGIN
          PersonID := XMLDOMMgt.FindNodeTextNs(XMLDocument, '//empty:entry[' + FORMAT(LineNo) + ']/empty:content/m:properties/d:PersonId', XmlNamespaceManager);
          IF NOT TempGenericCurrentEmployment.GET(PersonID) THEN BEGIN
            INIT;
            "Key Code1" := COPYSTR(PersonID, 1, MAXSTRLEN("Key Code1"));
            LimitAndInsertText(Text1, XMLDOMMgt.FindNodeTextNs(XMLDocument, '//empty:entry[' + FORMAT(LineNo) + ']/empty:content/m:properties/d:EmploymentStartDate', XmlNamespaceManager));
            LimitAndInsertText(Text2, XMLDOMMgt.FindNodeTextNs(XMLDocument, '//empty:entry[' + FORMAT(LineNo) + ']/empty:content/m:properties/d:EmploymentEndDate', XmlNamespaceManager));
            INSERT;
          END;
        END;
    END;

    LOCAL PROCEDURE ReadSalaryEmploymentXML@1100528522(XMLText@1100528500 : Text);
    VAR
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
    BEGIN
      SDWorxCobraConnectionMgt.SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'//empty:entry',XmlNamespaceManager);
      IF NoOfLines = 0 THEN
        EXIT;

      WITH TempGenericSalaryEmployment DO
        FOR LineNo := 1 TO NoOfLines DO BEGIN
          INIT;
          "Key Code1" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry[' + FORMAT(LineNo) + ']/empty:content/m:properties/d:PersonId',XmlNamespaceManager), 1, MAXSTRLEN("Key Code1"));
          LimitAndInsertText(Text1, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry[' + FORMAT(LineNo) + ']/empty:content/m:properties/d:DaysPerWeek',XmlNamespaceManager));
          LimitAndInsertText(Text2, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry[' + FORMAT(LineNo) + ']/empty:content/m:properties/d:HoursPerWeek',XmlNamespaceManager));
          INSERT;
        END;
    END;

    LOCAL PROCEDURE ReadPersonXMLAndWriteEmployees@1100528511(XMLText@1100528500 : Text);
    VAR
      Employee@1100528506 : Record 5200;
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
      DateTimeOfBirth@1100528507 : DateTime;
      DateTimeEmploymentStart@1100528509 : DateTime;
      DateTimeEmploymentEnd@1100528510 : DateTime;
      PersonID@1100528508 : Text;
      OrganizationId@1100528511 : Text;
      CobraParticipantNo@1100528512 : Code[10];
      SDWorxCobraIDAssociation@1100528513 : Record 11012389;
      CobraID@1100528514 : Text;
      IsCurrentEmployee@1100527600 : Text;
      EmployeeIsAccordingToFilter@1100527601 : Boolean;
      SDWorxCobraExchSetup@1100528515 : Record 11012388;
    BEGIN
      SDWorxCobraExchSetup.GET;
      SDWorxCobraConnectionMgt.SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'//empty:entry',XmlNamespaceManager);
      IF NoOfLines = 0 THEN
        EXIT;

      WITH Employee DO
        FOR LineNo := 1 TO NoOfLines DO BEGIN
          EmployeeIsAccordingToFilter := FALSE;
          IsCurrentEmployee := XMLDOMMgt.FindNodeTextNs(XMLDocument, '//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:IsCurrentEmployee',XmlNamespaceManager);
          EmployeeIsAccordingToFilter := ((IsCurrentEmployee = '0') AND (SDWorxCobraExchSetup."Sync Employees" = SDWorxCobraExchSetup."Sync Employees"::Unemployed)) OR
                                          ((IsCurrentEmployee = '1') AND (SDWorxCobraExchSetup."Sync Employees" = SDWorxCobraExchSetup."Sync Employees"::Employed)) OR
                                          ((IsCurrentEmployee = '2') AND (SDWorxCobraExchSetup."Sync Employees" = SDWorxCobraExchSetup."Sync Employees"::"Employed in the future")) OR
                                          ((IsCurrentEmployee > '0') AND (SDWorxCobraExchSetup."Sync Employees" = SDWorxCobraExchSetup."Sync Employees"::"Employed and Employed in the future")) OR
                                          (SDWorxCobraExchSetup."Sync Employees" = SDWorxCobraExchSetup."Sync Employees"::All);
          IF EmployeeIsAccordingToFilter THEN BEGIN
            INIT;
            OrganizationId := XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:OrganizationId',XmlNamespaceManager);
            IF IsEmployeeWithinOrganizationFilter(OrganizationId,CobraParticipantNo) THEN BEGIN
              "No." := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:PersonNumber',XmlNamespaceManager), 1, MAXSTRLEN("No."));
              IF NOT GET("No.") THEN
                INSERT(TRUE);
              CobraID := XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:ID',XmlNamespaceManager);
              IF NOT SDWorxCobraIDAssociation.GET(CobraID) THEN BEGIN
                SDWorxCobraIDAssociation.INIT;
                SDWorxCobraIDAssociation."Cobra ID" := COPYSTR(CobraID, 1, MAXSTRLEN(SDWorxCobraIDAssociation."Cobra ID"));
                SDWorxCobraIDAssociation.Type := SDWorxCobraIDAssociation.Type::Person;
                SDWorxCobraIDAssociation."NAV No." := COPYSTR("No.", 1, MAXSTRLEN(SDWorxCobraIDAssociation."NAV No."));
                SDWorxCobraIDAssociation.INSERT;
              END;
              LimitAndInsertText("First Name", XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Nickname',XmlNamespaceManager));
              LimitAndInsertText("Middle Name", XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Prefixes',XmlNamespaceManager));
              VALIDATE("Last Name",XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Lastname',XmlNamespaceManager));
              LimitAndInsertText(Initials, XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Initials',XmlNamespaceManager));
              IF EVALUATE(DateTimeOfBirth,XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:DateOfBirth',XmlNamespaceManager),9) THEN
                IF DT2DATE(DateTimeOfBirth) <> 0D THEN
                  VALIDATE("Birth Date",DT2DATE(DateTimeOfBirth));
              LimitAndInsertText("Social Security No.", XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:CitizenServiceNumber',XmlNamespaceManager));
              "Country/Region Code" := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:CountryCode',XmlNamespaceManager), 1, MAXSTRLEN("Country/Region Code"));
              CASE XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:Gender',XmlNamespaceManager) OF
                '1': Gender := Gender::Male;
                '2': Gender := Gender::Female;
              END;
              "Participant No. (Losa)" := CobraParticipantNo;

              FillFullName;

              PersonID := XMLDOMMgt.FindNodeTextNs(XMLDocument,'//empty:entry['+FORMAT(LineNo)+']/empty:content/m:properties/d:ID',XmlNamespaceManager);
              IF TempGenericAddress.GET(PersonID) THEN BEGIN
                BuildAddress(Address,TempGenericAddress.Text1,TempGenericAddress.Text2,TempGenericAddress.Text3);
                LimitAndInsertText(City, TempGenericAddress.Text4);
                "Post Code" := COPYSTR(TempGenericAddress.Text5, 1, MAXSTRLEN("Post Code"));
              END;

              TempGenericPhone.SETRANGE("Key Code1",PersonID);
              TempGenericPhone.SETRANGE("Key Code3",'Thuis');
              IF TempGenericPhone.FINDFIRST THEN
                LimitAndInsertText("Phone No.", TempGenericPhone.Text1);

              TempGenericPhone.SETRANGE("Key Code3",'Mobiel');
              IF TempGenericPhone.FINDFIRST THEN
                LimitAndInsertText("Mobile Phone No.", TempGenericPhone.Text1);

              TempGenericEmail.SETRANGE("Key Code1",PersonID);
              IF TempGenericEmail.FINDFIRST THEN
                LimitAndInsertText("E-Mail", TempGenericEmail.Text1);

              IF TempGenericCurrentEmployment.GET(PersonID) THEN BEGIN
                IF EVALUATE(DateTimeEmploymentStart,TempGenericCurrentEmployment.Text1,9) THEN
                  IF DT2DATE(DateTimeEmploymentStart) <> 0D THEN BEGIN
                    "Employment Date" := DT2DATE(DateTimeEmploymentStart);
                    Status := Status::Active;
                  END;
                IF EVALUATE(DateTimeEmploymentEnd,TempGenericCurrentEmployment.Text2,9) THEN BEGIN
                  "Inactive Date" := DT2DATE(DateTimeEmploymentEnd);
                  IF "Inactive Date" <> 0D THEN
                    Status := Status::Inactive;
                END;
              END;

              IF TempGenericSalaryEmployment.GET(PersonID) THEN BEGIN
                IF TempGenericSalaryEmployment.Text1 <> '' THEN
                  IF EVALUATE("Norm Days",TempGenericSalaryEmployment.Text1,9) THEN;
                IF TempGenericSalaryEmployment.Text2 <> '' THEN
                  IF EVALUATE("Norm Hours",TempGenericSalaryEmployment.Text2,9) THEN;
              END;

              MODIFY(TRUE);
            END;
          END;
        END;
    END;

    LOCAL PROCEDURE IsEmployeeWithinOrganizationFilter@1100528530(OrganizationID@1100528500 : Text;VAR CobraParticipantNo@1100528502 : Code[10]) : Boolean;
    VAR
      LosaCobraParticipant@1100528501 : Record 11012385;
    BEGIN
      IF NOT TempGenericOrganization.GET(OrganizationID) THEN
        EXIT(FALSE);

      CobraParticipantNo := TempGenericOrganization.Text1;
      EXIT(LosaCobraParticipant.GET(CobraParticipantNo));
    END;

    LOCAL PROCEDURE BuildAddress@1100528512(VAR Address@1100528500 : Text;AddressPart1@1100528501 : Text;AddressPart2@1100528502 : Text;AddressPart3@1100528503 : Text);
    BEGIN
      Address := COPYSTR(AddressPart1,1,MAXSTRLEN(Address));
      IF AddressPart2 <> '' THEN BEGIN
        IF Address <> '' THEN
          Address := COPYSTR(Address + ' ',1,MAXSTRLEN(Address));
        Address := COPYSTR(Address + AddressPart2,1,MAXSTRLEN(Address));
      END;
      IF AddressPart3 <> '' THEN BEGIN
        IF Address <> '' THEN
          Address := COPYSTR(Address + ' ',1,MAXSTRLEN(Address));
        Address := COPYSTR(Address + AddressPart3,1,MAXSTRLEN(Address));
      END;
    END;

    LOCAL PROCEDURE LimitAndInsertText@1100527600(VAR Destination@1100527600 : Text;TextToInsert@1100527601 : Text);
    BEGIN
      Destination := COPYSTR(TextToInsert, 1, MAXSTRLEN(Destination));
    END;

    BEGIN
    END.
  }
}

