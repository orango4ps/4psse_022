OBJECT Report 188 Create Reminders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Reminders;
               NOR=Opprett purringer;
               SVE=Skapa betalningsp†minnelser];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   //**4PS
                   //OverdueEntriesOnly := TRUE;
                   EntriesOption := EntriesOption::New;
                 END;

    OnPreReport=BEGIN
                  OnBeforeOnPreReport;

                  CustLedgEntry.COPY(CustLedgEntry2);
                  IF CustLedgEntryLineFeeOnFilters.GETFILTERS <> '' THEN
                    CustLedgEntryLineFeeOn.COPYFILTERS(CustLedgEntryLineFeeOnFilters);

                  CustLedgEntry.DPA_SetFilters(CurrReport.OBJECTID(FALSE)); //**4PS.n C001277
                END;

    OnPostReport=BEGIN
                   OnBeforeOnPostReport;
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=VAR
                               SalesSetup@1000 : Record 311;
                             BEGIN
                               IF ReminderHeaderReq."Document Date" = 0D THEN
                                 ERROR(Text000,ReminderHeaderReq.FIELDCAPTION("Document Date"));
                               FILTERGROUP := 2;
                               SETFILTER("Reminder Terms Code",'<>%1','');
                               FILTERGROUP := 0;
                               DPA_SetFilters(CurrReport.OBJECTID(FALSE)); //**4PS.n C001277
                               NoOfRecords := COUNT;
                               SalesSetup.GET;
                               SalesSetup.TESTFIELD("Reminder Nos.");
                               IF NoOfRecords = 1 THEN
                                 Window.OPEN(Text001)
                               ELSE BEGIN
                                 Window.OPEN(Text002);
                                 OldDateTime := CURRENTDATETIME;
                               END;
                               ReminderHeaderReq."Use Header Level" := UseHeaderLevel;
                             END;

               OnAfterGetRecord=BEGIN
                                  RecordNo := RecordNo + 1;
                                  CLEAR(MakeReminder);
                                  //**4PS.so
                                  //MakeReminder.Set(Customer,CustLedgEntry,ReminderHeaderReq,OverdueEntriesOnly,IncludeEntriesOnHold,CustLedgEntryLineFeeOn);
                                  //**4PS.eo
                                  //**4PS.sn
                                  MakeReminder.Set(Customer,CustLedgEntry,ReminderHeaderReq,IncludeEntriesOnHold,CustLedgEntryLineFeeOn,
                                    EntriesOption,ReminderPerAltAddress, AssignedUserID);
                                  //**4PS.en
                                  IF NoOfRecords = 1 THEN BEGIN
                                    MakeReminder.Code;
                                    MARK := FALSE;
                                  END ELSE BEGIN
                                    NewDateTime := CURRENTDATETIME;
                                    IF (NewDateTime - OldDateTime > 100) OR (NewDateTime < OldDateTime) THEN BEGIN
                                      NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                                      IF NewProgress <> OldProgress THEN BEGIN
                                        Window.UPDATE(1,NewProgress * 100);
                                        OldProgress := NewProgress;
                                      END;
                                      OldDateTime := CURRENTDATETIME;
                                    END;
                                    MARK := NOT MakeReminder.Code;
                                  END;
                                END;

               OnPostDataItem=VAR
                                ConfirmManagement@1000 : Codeunit 27;
                              BEGIN
                                Window.CLOSE;
                                MARKEDONLY := TRUE;
                                COMMIT;
                                IF FINDFIRST THEN
                                  IF ConfirmManagement.ConfirmProcessUI(Text003,TRUE) THEN
                                    PAGE.RUNMODAL(0,Customer);
                              END;

               ReqFilterFields=No. }

    { 9065;    ;DataItem;CustLedgEntry2      ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.)
                                 WHERE(Blocked for Reminder=FILTER(''));
               OnPreDataItem=BEGIN
                               CurrReport.BREAK;
                             END;

               ReqFilterFields=Document Type }

    { 1000;    ;DataItem;CustLedgEntryLineFeeOn;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Entry No.)
                                 ORDER(Ascending);
               ReqFilterHeadingML=[ENU=Apply Fee per Line On;
                                   NOR=Bruk gebyr per linje p†;
                                   SVE=Koppla avgift per rad i];
               OnPreDataItem=BEGIN
                               CurrReport.BREAK;
                             END;

               ReqFilterFields=Document Type }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF ReminderHeaderReq."Document Date" = 0D THEN BEGIN
                     ReminderHeaderReq."Document Date" := WORKDATE;
                     ReminderHeaderReq."Posting Date" := WORKDATE;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Date;
                             NOR=Bokf›ringsdato;
                             SVE=Bokf”ringsdatum];
                  ToolTipML=[ENU=Specifies the date that will appear as the posting date on the header of the reminder that is created by the batch job.;
                             NOR=Angir datoen som skal vises som bokf›ringsdato i purrehodet som opprettes av kj›rselen.;
                             SVE=Anger det datum som ska visas som bokf”ringsdatum i huvudet p† betalningsp†minnelsen, som skapas av batchjobbet.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ReminderHeaderReq."Posting Date" }

      { 1   ;2   ;Field     ;
                  Name=DocumentDate;
                  CaptionML=[ENU=Document Date;
                             NOR=Bilagsdato;
                             SVE=Dokumentdatum];
                  ToolTipML=[ENU=Specifies the date that will appear as the document date on the header of the reminder that is created by the batch job. This date is used for any interest calculations and to determine the due date of the reminder.;
                             NOR=Angir datoen som skal vises som dokumentdato i purrehodet som opprettes av kj›rselen. Denne datoen brukes til eventuelle renteberegninger og for † angi forfallsdato p† purringen.;
                             SVE=Anger det datum som ska visas som bokf”ringsdatum i huvudet p† betalningsp†minnelsen, som skapats av batchjobbet. Datumet anv„nds f”r r„nteber„kningar och f”r att best„mma f”rfallodatum f”r betalningsp†minnelsen.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ReminderHeaderReq."Document Date" }

      { 1100485000;2;Field  ;
                  CaptionML=[ENU=Entries;
                             NOR=Dokumentdato;
                             SVE=Transaktioner med f”rfallna belopp];
                  OptionCaptionML=[ENU=New,Overdue,All;
                                   NOR=Ny,Forfalt,Alle;
                                   SVE=Ny,F”rfallen,Alla];
                  SourceExpr=EntriesOption;
                  MultiLine=Yes }

      { 1102601001;2;Field  ;
                  CaptionML=[ENU=Include Entries On Hold;
                             NOR=Ta med avventende poster;
                             SVE=Inkludera stoppade transaktioner];
                  ToolTipML=[ENU=Specifies if you want to create reminders for entries that are on hold.;
                             NOR=Angir om du vil opprette purringer for poster som er p† vent.;
                             SVE=Anger om du vill skapa betalningsp†minnelser f”r transaktioner som har sp„rrats.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=IncludeEntriesOnHold }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Use Header Level;
                             NOR=Bruk grad fra hode;
                             SVE=Anv„nd huvudniv†];
                  ToolTipML=[ENU=Specifies if the batch job will apply the condition of the reminder level to all the reminder lines.;
                             NOR=Angir om kj›rselen skal bruke betingelsen for purregraden for alle purrelinjene.;
                             SVE=Anger om batchjobbet till„mpar villkoret f”r betalningsp†minnelseniv†n p† alla †terst†ende rader.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UseHeaderLevel }

      { 1210190000;2;Field  ;
                  CaptionML=[ENU=Reminder per Alternative Invoice Address;
                             NOR=P†minnelse per Alternativ fakturaadresse;
                             SVE=P†minnelse per alternativ fakturaadress];
                  SourceExpr=ReminderPerAltAddress;
                  MultiLine=Yes }

      { 1100528800;2;Field  ;
                  CaptionML=[ENU=Assigned User ID;
                             NOR=Tilordnet bruker-ID;
                             SVE=Tilldelat anv„ndar-ID];
                  SourceExpr=AssignedUserID;
                  TableRelation="User Setup" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be specified.;NOR=%1 m† angis.;SVE=%1 m†ste specificeras.';
      Text001@1001 : TextConst 'ENU=Making reminders...;NOR=Oppretter purringer...;SVE=Skapar betalningsp†minnelser...';
      Text002@1002 : TextConst 'ENU=Making reminders @1@@@@@@@@@@@@@;NOR=Oppretter purring@1@@@@@@@@@@@@@;SVE=Skapar betalp†m. @1@@@@@@@@@@@@@';
      Text003@1003 : TextConst 'ENU=It was not possible to create reminders for some of the selected customers.\Do you want to see these customers?;NOR=Det var ikke mulig † opprette purringer for noen av de valgte kundene.\Vil du vise disse kundene?;SVE=Det gick inte att skapa betalningsp†minnelser f”r n†gra av de valda kunderna.\Vill du visa dem?';
      CustLedgEntry@1005 : Record 21;
      ReminderHeaderReq@1006 : Record 295;
      CustLedgEntryLineFeeOnFilters@1004 : Record 21;
      MakeReminder@1007 : Codeunit 392;
      Window@1008 : Dialog;
      NoOfRecords@1009 : Integer;
      RecordNo@1010 : Integer;
      NewProgress@1011 : Integer;
      OldProgress@1012 : Integer;
      NewDateTime@1013 : DateTime;
      OldDateTime@1014 : DateTime;
      OverdueEntriesOnly@1015 : Boolean;
      UseHeaderLevel@1016 : Boolean;
      IncludeEntriesOnHold@1102601000 : Boolean;
      EntriesOption@1100485000 : 'New,Overdue,All';
      ReminderPerAltAddress@1210190000 : Boolean;
      AssignedUserID@1100528800 : Code[50];

    [External]
    PROCEDURE InitializeRequest@1(DocumentDate@1000 : Date;PostingDate@1001 : Date;OverdueEntries@1002 : Boolean;NewUseHeaderLevel@1003 : Boolean;IncludeEntries@1004 : Boolean);
    BEGIN
      ReminderHeaderReq."Document Date" := DocumentDate;
      ReminderHeaderReq."Posting Date" := PostingDate;
      OverdueEntriesOnly := OverdueEntries;
      UseHeaderLevel := NewUseHeaderLevel;
      IncludeEntriesOnHold := IncludeEntries;
    END;

    [External]
    PROCEDURE SetApplyLineFeeOnFilters@1000(VAR CustLedgEntryLineFeeOn2@1000 : Record 21);
    BEGIN
      CustLedgEntryLineFeeOnFilters.COPYFILTERS(CustLedgEntryLineFeeOn2);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnPreReport@3();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnPostReport@2();
    BEGIN
    END;

    BEGIN
    {
      *** 4PSSE.I012 ***
      130904 Added property to block ledger entries if field "Block for reminder" is true.
      131212 changed caption on req.form
    }
    END.
  }
  RDLDATA
  {
  }
}

