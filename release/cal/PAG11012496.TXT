OBJECT Page 11012496 Import Base Option Data
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Base Option Data from Other Company;
    SaveValues=Yes;
    PageType=Card;
    UsageCategory=Tasks;
    OnOpenPage=BEGIN
                 ProjectSetup.GET;
                 UserSetup.GET(USERID);
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;Action    ;
                      CaptionML=[ENU=&Run;
                                 NOR=&Kj›r;
                                 SVE=&K”r];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvDummyOptionSurchRec@1100485002 : Record 11012512;
                                 lvBuyerMgtCU@1100485001 : Codeunit 11012500;
                               BEGIN
                                 IF gCopyModels OR gCopyOptions THEN
                                   IF (CompanyOrigin <> '') AND (CompanyOrigin <> COMPANYNAME) THEN
                                   BEGIN
                                 //    IF ProjectSetup."Resp.Person Exchange Procedure" <> UPPERCASE(USERID) THEN BEGIN
                                     IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                        [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                                     THEN BEGIN
                                       MESSAGE(Text013);
                                       EXIT;
                                     END;
                                     CopyBase;
                                   END;

                                   //IF UpdateOptions THEN BEGIN
                                   //Doorrekenen toeslagen bij opties waar de begroting is aangepast vanuit de
                                   //integratie met bouw
                                   OptDest.RESET;
                                   OptDest.SETFILTER("Project No.", '%1', '');
                                   OptDest.SETFILTER("Plot No.", '%1', '');
                                   OptDest.SETRANGE("Budget Changed by Integration", TRUE);
                                   IF OptDest.FINDSET(TRUE, FALSE) THEN BEGIN
                                     REPEAT
                                       OptDest."Budget Changed by Integration" := FALSE;
                                       OptDest."Transaction Date In" := CURRENTDATETIME;
                                       OptDest.MODIFY;
                                       lvBuyerMgtCU.BmCalcSurchargesUpdateOption('',
                                                                                 '',
                                                                                 OptDest."House Model",
                                                                                 OptDest."Main Group",
                                                                                 OptDest.Group,
                                                                                 OptDest."Sub Group",
                                                                                 OptDest.Option,
                                                                                 FALSE,
                                                                                 lvDummyOptionSurchRec);
                                     UNTIL OptDest.NEXT = 0;
                                   END;
                                   OptDest.RESET;
                                 //END;

                                 COMMIT;

                                 //IF LinesPrinted AND PrintActivityDetails THEN BEGIN
                                 //  ActivityReport.RUNMODAL;
                                 //END;

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 6   ;1   ;Group     ;
                CaptionML=[ENU=From Company;
                           NOR=Fra selskap;
                           SVE=Fr†n f”retag] }

    { 1210190003;2;Field  ;
                SourceExpr=CompanyOrigin;
                Style=Strong;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             ValidateCompanyOrigin;
                           END;

                OnLookup=VAR
                           Company@1100528600 : Record 2000000006;
                         BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Company List (NEW)", Company) = ACTION::LookupOK THEN BEGIN
                             CompanyOrigin := Company.Name;
                             ValidateCompanyOrigin;
                           END;
                         END;
                          }

    { 1210190005;1;Group  ;
                CaptionML=[ENU=Copy;
                           NOR=KOPIER;
                           SVE=Kopiera];
                GroupType=Group }

    { 1210190004;2;Field  ;
                CaptionML=[ENU=House Model;
                           NOR=Husmodell;
                           SVE=Husmodell];
                SourceExpr=gCopyModels;
                OnValidate=BEGIN
                             //IF (ProjectSetup."Resp.Person Exchange Procedure" <> UPPERCASE(USERID)) AND (gCopyModels) THEN
                             //  ERROR(Text013);

                             IF gCopyModels THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text013);
                           END;
                            }

    { 1210190010;2;Field  ;
                CaptionML=[ENU=Options;
                           NOR=Alternativer;
                           SVE=Alternativ];
                SourceExpr=gCopyOptions;
                OnValidate=BEGIN
                             //IF (ProjectSetup."Resp.Person Exchange Procedure" <> UPPERCASE(USERID)) AND
                             //   (gCopyOptions) THEN
                             //  ERROR(Text013);

                             IF gCopyOptions THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text013);

                             //DP01247.sn
                             CopyTechnicalText := (gCopyOptions = TRUE);
                             CopySurcharges := (gCopyOptions = TRUE);
                             CopyVATBusinessPostingGroup := (gCopyOptions = TRUE);
                             CopyVATProductPostingGroup := (gCopyOptions = TRUE);
                             CopyInstallmentScheme := (gCopyOptions = TRUE);
                             CopyFixedSalesPrice := (gCopyOptions = TRUE);
                             CopyDevelopersDiscountPercentage := (gCopyOptions = TRUE);
                             CopyContractorSurchargePercentage := (gCopyOptions = TRUE);
                             //
                             CopyTechnicalTextEnable := (gCopyOptions = TRUE);
                             CopySurchargesEnable := (gCopyOptions = TRUE);
                             CopyVATBusinessPostingGroupEnable := (gCopyOptions = TRUE);
                             CopyVATProductPostingGroupEnable := (gCopyOptions = TRUE);
                             CopyInstallmentSchemeEnable := (gCopyOptions = TRUE);
                             CopyFixedSalesPriceEnable := (gCopyOptions = TRUE);
                             CopyDevelopersDiscountPercentageEnable := (gCopyOptions = TRUE);
                             CopyContractorSurchargePercentageEnable := (gCopyOptions = TRUE);
                             //DP01247.en
                             CopyUnitOfMeasure := gCopyOptions;
                             CopyUnitOfMeasureEnable := gCopyOptions;
                           END;
                            }

    { 1100529400;2;Field  ;
                CaptionML=[ENU=Technical Text;
                           NOR=Teknisk tekst;
                           SVE=Teknisk text];
                SourceExpr=CopyTechnicalText;
                Enabled=CopyTechnicalTextEnable }

    { 1100529401;2;Field  ;
                CaptionML=[ENU=Surcharges;
                           NOR=Tilleggsgebyrer;
                           SVE=Till„ggsavgifter];
                SourceExpr=CopySurcharges;
                Enabled=CopySurchargesEnable }

    { 1100529402;2;Field  ;
                CaptionML=[ENU=VAT Bus. Posting Group;
                           NOR=Moms Bevegelsebokf›ringsmal;
                           SVE=Moms r”relsebokf”ringsmall];
                SourceExpr=CopyVATBusinessPostingGroup;
                Enabled=CopyVATBusinessPostingGroupEnable }

    { 1100529403;2;Field  ;
                CaptionML=[ENU=VAT Prod. Posting Group;
                           NOR=Mva-bokf›ringsgruppe - vare;
                           SVE=Moms produktbokf”ringsmall];
                SourceExpr=CopyVATProductPostingGroup;
                Enabled=CopyVATProductPostingGroupEnable }

    { 1100529404;2;Field  ;
                CaptionML=[ENU=Installment Scheme;
                           NOR=Betalingsplan;
                           SVE=Betalplan];
                SourceExpr=CopyInstallmentScheme;
                Enabled=CopyInstallmentSchemeEnable }

    { 1100529405;2;Field  ;
                CaptionML=[ENU=Fixed Sales Price;
                           NOR=Fast salgspris;
                           SVE=Fast f”rs„ljningspris];
                SourceExpr=CopyFixedSalesPrice;
                Enabled=CopyFixedSalesPriceEnable }

    { 1100529406;2;Field  ;
                CaptionML=[ENU=Developers Discount (%);
                           NOR=Utviklers Rabatt (%);
                           SVE=Utvecklarrabatt (%)];
                SourceExpr=CopyDevelopersDiscountPercentage;
                Enabled=CopyDevelopersDiscountPercentageEnable }

    { 1100528400;2;Field  ;
                CaptionML=ENU=Contractor Surcharge %;
                SourceExpr=CopyContractorSurchargePercentage;
                Enabled=CopyContractorSurchargePercentageEnable }

    { 1100529600;2;Field  ;
                CaptionML=[ENU=Unit of Measure Code;
                           NOR=M†leenhetskode;
                           SVE=Enhetskod];
                SourceExpr=CopyUnitOfMeasure;
                Enabled=CopyUnitOfMeasureEnable }

  }
  CODE
  {
    VAR
      ProjectSetup@1210190039 : Record 315;
      UserSetup@1100525000 : Record 91;
      ModelOrig@11012013 : Record 11012501;
      ModelDest@11012014 : Record 11012501;
      UnitOrig@1210190017 : Record 11012508;
      UnitDest@1210190018 : Record 11012508;
      OptDest@1210190002 : Record 11012502;
      OptOrig@11012017 : Record 11012502;
      MainGrpOrig@1210190054 : Record 11012509;
      MainGrpDest@1210190055 : Record 11012509;
      GrpOrig@11012019 : Record 11012504;
      GrpDest@11012020 : Record 11012504;
      SubGrpOrig@1210190020 : Record 11012505;
      SubGrpDest@1210190019 : Record 11012505;
      OptBudgSumOrig@1210190022 : Record 11012064;
      OptBudgSumDest@1100485015 : Record 11012064;
      OptBudgetOrig@11012025 : Record 11012503;
      OptBudgetDest@11012026 : Record 11012503;
      OptSurchRec@1210190057 : Record 11012512;
      BuyerMgtTextRec@1210190056 : Record 11012511;
      OptionTextOrigRec@1100485001 : Record 11012511;
      OptionTextDestRec@1100485002 : Record 11012511;
      UnitofMeasure@1100529600 : Record 204;
      CompanyOrigin@1210190008 : Text[30];
      gCopyModels@11012034 : Boolean;
      gCopyOptions@11012035 : Boolean;
      Text013@1210190050 : TextConst 'ENU=User has no permissions for standard data;NOR=Bruker mangler tillatelse for standarddata.;SVE=Anv„ndaren har ingen beh”righet f”r standarddata.';
      Text015@1210190052 : TextConst 'ENU=No import from current company;NOR=Ingen import fra aktuelt selskap;SVE=Ingen import fr†n aktuellt f”retag';
      DataNewBool@1100485000 : Boolean;
      DataDelBool@1100485006 : Boolean;
      DataUpdBool@1100485010 : Boolean;
      gRemoveRedundant@1100485020 : Boolean;
      OptionSurchargeOrig@1100529403 : Record 11012512;
      OptionSurchargeDest@1100529402 : Record 11012512;
      InstallmentSchemeDest@1100529411 : Record 11012016;
      VATProductPostingGroupDest@1100529409 : Record 324;
      VATBusinessPostingGroupDest@1100529410 : Record 323;
      CopyTechnicalText@1100529400 : Boolean;
      CopySurcharges@1100529401 : Boolean;
      CopyVATBusinessPostingGroup@1100529404 : Boolean;
      CopyVATProductPostingGroup@1100529405 : Boolean;
      CopyInstallmentScheme@1100529406 : Boolean;
      CopyFixedSalesPrice@1100529407 : Boolean;
      CopyDevelopersDiscountPercentage@1100529408 : Boolean;
      CopyContractorSurchargePercentage@1100528400 : Boolean;
      CopyUnitOfMeasure@1100529601 : Boolean;
      CopyTechnicalTextEnable@1100529412 : Boolean INDATASET;
      CopySurchargesEnable@1100529413 : Boolean INDATASET;
      CopyVATBusinessPostingGroupEnable@1100529418 : Boolean;
      CopyVATProductPostingGroupEnable@1100529417 : Boolean;
      CopyInstallmentSchemeEnable@1100529416 : Boolean;
      CopyFixedSalesPriceEnable@1100529415 : Boolean;
      CopyDevelopersDiscountPercentageEnable@1100529414 : Boolean;
      CopyContractorSurchargePercentageEnable@1100528401 : Boolean;
      CopyUnitOfMeasureEnable@1100529602 : Boolean INDATASET;

    PROCEDURE CopyBase@1210190001();
    BEGIN
      //**standard-house models + rooms
      IF gCopyModels THEN
        IF CopyHouseModels(CompanyOrigin) THEN;

      //**standard-options and option groups
      IF gCopyOptions THEN
        IF CopyOptions(CompanyOrigin) THEN;
    END;

    PROCEDURE CopyHouseModels@1210190000(iCompanyOrig@1210190000 : Text[30]) NewHouseModelsBool : Boolean;
    BEGIN
      NewHouseModelsBool := FALSE;
      ModelOrig.CHANGECOMPANY(iCompanyOrig);
      UnitOrig.CHANGECOMPANY(iCompanyOrig);
      ModelOrig.SETFILTER("Project No.", '%1', '');
      IF ModelOrig.FINDSET THEN BEGIN
        REPEAT
          IF ModelDest.GET('',ModelOrig.Model) THEN BEGIN
            ModelDest.TRANSFERFIELDS(ModelOrig, FALSE);
            ModelDest.MODIFY;
            DataUpdBool := TRUE;
          END ELSE BEGIN
            ModelDest.TRANSFERFIELDS(ModelOrig);
            ModelDest.INSERT;
            DataNewBool := TRUE;
            NewHouseModelsBool := TRUE;
          END;
          UnitOrig.SETFILTER("Project No.", '%1', '');
          UnitOrig.SETFILTER(Model, '%1', ModelOrig.Model);
          IF UnitOrig.FINDSET THEN BEGIN
            REPEAT
              IF UnitDest.GET('',UnitOrig.Model,UnitOrig.Unit) THEN BEGIN
                UnitDest.TRANSFERFIELDS(UnitOrig, FALSE);
                UnitDest.MODIFY;
                DataUpdBool := TRUE;
              END ELSE BEGIN
                UnitDest.TRANSFERFIELDS(UnitOrig);
                UnitDest.INSERT;
                DataNewBool := TRUE;
              END;
            UNTIL UnitOrig.NEXT = 0;
          END;
        UNTIL ModelOrig.NEXT = 0;
      END;

      //gRemoveRedundant is always FALSE
      IF gRemoveRedundant THEN
        RemoveOldModels;
    END;

    PROCEDURE CopyOptions@1210190006(iCompanyOrig@1210190001 : Text[30]) NewOptionsBool : Boolean;
    BEGIN
      NewOptionsBool := FALSE;

      //** Set Origin Company
      ModelOrig.CHANGECOMPANY(iCompanyOrig);
      MainGrpOrig.CHANGECOMPANY(iCompanyOrig);
      GrpOrig.CHANGECOMPANY(iCompanyOrig);
      SubGrpOrig.CHANGECOMPANY(iCompanyOrig);
      OptOrig.CHANGECOMPANY(iCompanyOrig);
      OptBudgetOrig.CHANGECOMPANY(iCompanyOrig);
      OptBudgSumOrig.CHANGECOMPANY(iCompanyOrig);
      OptionTextOrigRec.CHANGECOMPANY(iCompanyOrig);
      OptionSurchargeOrig.CHANGECOMPANY(iCompanyOrig);  //C035189

      //**add/overwrite option groups (also main- and subgroups)
      MainGrpOrig.SETFILTER("Project No.", '%1', '');
      MainGrpOrig.SETFILTER("Plot No.", '%1', '');
      IF MainGrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT MainGrpDest.GET('', '', MainGrpOrig.Code) THEN BEGIN
            MainGrpDest.TRANSFERFIELDS(MainGrpOrig);
            MainGrpDest.INSERT;
          END ELSE BEGIN
            MainGrpDest.TRANSFERFIELDS(MainGrpOrig, FALSE);
            MainGrpDest.MODIFY;
          END;
        UNTIL MainGrpOrig.NEXT = 0;
      END;

      GrpOrig.SETFILTER("Project No.", '%1', '');
      GrpOrig.SETFILTER("Plot No.", '%1', '');
      IF GrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT GrpDest.GET('', '', GrpOrig.Code) THEN BEGIN
            GrpDest.TRANSFERFIELDS(GrpOrig);
            GrpDest.INSERT;
          END ELSE BEGIN
            GrpDest.TRANSFERFIELDS(GrpOrig, FALSE);
            GrpDest.MODIFY;
          END;
        UNTIL GrpOrig.NEXT = 0;
      END;

      SubGrpOrig.SETFILTER("Project No.", '%1', '');
      SubGrpOrig.SETFILTER("Plot No.", '%1', '');
      IF SubGrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT SubGrpDest.GET('', '', SubGrpOrig.Code) THEN BEGIN
            SubGrpDest.TRANSFERFIELDS(SubGrpOrig);
            SubGrpDest.INSERT;
          END ELSE BEGIN
            SubGrpDest.TRANSFERFIELDS(SubGrpOrig, FALSE);
            SubGrpDest.MODIFY;
          END;
        UNTIL SubGrpOrig.NEXT = 0;
      END;

      //**Options (level 1 = standard option)
      OptOrig.SETFILTER("Project No.", '%1', '');
      OptOrig.SETFILTER("Plot No.", '%1', '');
      OptOrig.SETFILTER(OptOrig.Status, '');

      IF OptOrig.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT OptDest.GET('','',OptOrig."House Model",
                                 OptOrig."Main Group",OptOrig.Group,
                                 OptOrig."Sub Group",OptOrig.Option) THEN
          BEGIN
            ModelDest.GET('',OptOrig."House Model");
            MainGrpDest.GET('','',OptOrig."Main Group");
            GrpDest.GET('','',OptOrig.Group);
            SubGrpDest.GET('','',OptOrig."Sub Group");
            OptDest.TRANSFERFIELDS(OptOrig);

            OptDest."Installments Generated" := FALSE;
            //DP01247.sn
            IF CopyInstallmentScheme THEN BEGIN
              IF OptOrig."Installment Scheme" <> '' THEN
                InstallmentSchemeDest.GET(OptOrig."Installment Scheme");
            END ELSE BEGIN
              OptDest."Installment Scheme" := '';
            END;
            IF CopyVATProductPostingGroup THEN BEGIN
              IF (OptOrig."VAT Prod. Posting Group" <> '') THEN
                VATProductPostingGroupDest.GET(OptOrig."VAT Prod. Posting Group");
            END ELSE BEGIN
              OptDest."VAT Prod. Posting Group" := '';
            END;
            IF CopyVATBusinessPostingGroup THEN BEGIN
              IF (OptOrig."VAT Bus. Posting Group" <> '') THEN
                VATBusinessPostingGroupDest.GET(OptOrig."VAT Bus. Posting Group");
            END ELSE BEGIN
              OptDest."VAT Bus. Posting Group" := '';
            END;
            IF CopyUnitOfMeasure THEN BEGIN
              IF OptOrig."Unit of Measure Code" <> '' THEN
                UnitofMeasure.GET(OptOrig."Unit of Measure Code");
            END ELSE
              OptDest."Unit of Measure Code" := '';
            IF NOT CopyFixedSalesPrice THEN
              OptDest."Fixed Sales Price" := FALSE;
            IF NOT CopyDevelopersDiscountPercentage THEN
              OptDest."Developers Discount Percentage" := 0;
            IF NOT CopyContractorSurchargePercentage THEN
              OptDest."Contractor Surcharge %" := 0;
            //OptDest."Net Price" := 0;
            //OptDest."Contract Amount" := 0;
            //OptDest."Offered Amount" := 0;
            //OptDest."Computed VAT Amount" := 0;
            //OptDest."VAT Amount" := 0;
            //OptDest."Computed Sales Price Incl. VAT" := 0;
            //OptDest."Sales Amount incl. VAT" := 0;
            //OptDest."Sales Price incl. VAT" := 0;
            //OptDest."Sales Price excl. VAT" := 0;
            //DP01247.en
            OptDest."Generation Date" := 0D;
            OptDest."Last Date Printed on Opt.List" := 0D;
            OptDest."Last Time Printed on Opt.List" := 0T;
            OptDest."Transaction Date Out" := 0DT;

            OptDest."Budget Changed by Integration" := TRUE;
            OptDest."Transaction Date In" := CURRENTDATETIME;
            OptDest.DetermineTotal(FALSE);  //DP01247
            OptDest.INSERT;

            NewOptionsBool := TRUE;

            //Copy texts.
            OptionTextOrigRec.SETRANGE(Table, OptionTextOrigRec.Table::Option);
            OptionTextOrigRec.SETRANGE("Text Type", OptionTextOrigRec."Text Type"::Sales);
            OptionTextOrigRec.SETFILTER("Project No.", '%1', '');
            OptionTextOrigRec.SETRANGE("House Model", OptOrig."House Model");
            OptionTextOrigRec.SETRANGE("Option Main Group", OptOrig."Main Group");
            OptionTextOrigRec.SETRANGE("Option Sub Group", OptOrig."Sub Group");
            OptionTextOrigRec.SETRANGE("Option Group",OptOrig.Group);
            OptionTextOrigRec.SETFILTER("Plot No.",  '%1', '');
            OptionTextOrigRec.SETRANGE(Option, OptOrig.Option);
            IF OptionTextOrigRec.FINDSET THEN BEGIN
              REPEAT
                OptionTextDestRec.TRANSFERFIELDS(OptionTextOrigRec);
                IF OptionTextDestRec.INSERT THEN;
              UNTIL OptionTextOrigRec.NEXT = 0;
            END;

            //DP01247.sn
            IF CopyTechnicalText THEN BEGIN
              OptionTextOrigRec.SETRANGE("Text Type", OptionTextOrigRec."Text Type"::Technical);
              IF OptionTextOrigRec.FINDSET THEN BEGIN
                REPEAT
                  OptionTextDestRec.TRANSFERFIELDS(OptionTextOrigRec);
                  IF OptionTextDestRec.INSERT THEN;
                UNTIL OptionTextOrigRec.NEXT = 0;
              END;
            END;
            //
            IF CopySurcharges THEN BEGIN  //C035189
              OptionSurchargeOrig.SETFILTER("Project No.", '%1', '');
              OptionSurchargeOrig.SETRANGE("House Model", OptOrig."House Model");
              OptionSurchargeOrig.SETRANGE("Main Group", OptOrig."Main Group");
              OptionSurchargeOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
              OptionSurchargeOrig.SETRANGE(Group,OptOrig.Group);
              OptionSurchargeOrig.SETFILTER("Plot No.",  '%1', '');
              OptionSurchargeOrig.SETRANGE(Option, OptOrig.Option);
              IF OptionSurchargeOrig.FINDSET THEN BEGIN
                REPEAT
                  OptionSurchargeDest.TRANSFERFIELDS(OptionSurchargeOrig);
                  IF OptionSurchargeDest.INSERT THEN;
                UNTIL OptionSurchargeOrig.NEXT = 0;
              END;
            END;
            //DP01247.en

            DataNewBool := TRUE;
          END;
          CopyOptionBudget;
        UNTIL OptOrig.NEXT = 0;
      END;

      //gRemoveRedundant is always FALSE
      IF gRemoveRedundant THEN
        RemoveOldBudgets;
    END;

    PROCEDURE CopyOptionBudget@1100485000() lDestUpdated : Boolean;
    BEGIN
      //**Options (level 1 = standard option)
      lDestUpdated := FALSE;

      OptBudgetOrig.RESET;
      OptBudgSumOrig.RESET;

      //** Remove existing summary sheet and option budget
      OptBudgSumDest.SETFILTER("Project No.", '%1', '');
      OptBudgSumDest.SETFILTER("Contract No.", '%1', '');
      OptBudgSumDest.SETFILTER("Plot No.", '%1', '');
      OptBudgSumDest.SETRANGE("House Model", OptOrig."House Model");
      OptBudgSumDest.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgSumDest.SETRANGE(Group, OptOrig.Group);
      OptBudgSumDest.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgSumDest.SETRANGE(Option, OptOrig.Option);
      OptBudgSumDest.DELETEALL;
      OptBudgSumDest.RESET;

      OptBudgetDest.SETFILTER("Project No.", '%1', '');
      OptBudgetDest.SETFILTER("Plot No.", '%1', '');
      OptBudgetDest.SETRANGE("House Model", OptOrig."House Model");
      OptBudgetDest.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgetDest.SETRANGE(Group, OptOrig.Group);
      OptBudgetDest.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgetDest.SETRANGE(Option, OptOrig.Option);
      OptBudgetDest.DELETEALL;
      OptBudgetDest.RESET;

      //**Option Budget
      OptBudgetOrig.SETFILTER("Project No.", '%1', '');
      OptBudgetOrig.SETFILTER("Plot No.", '%1', '');
      OptBudgetOrig.SETRANGE("House Model", OptOrig."House Model");
      OptBudgetOrig.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgetOrig.SETRANGE(Group, OptOrig.Group);
      OptBudgetOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgetOrig.SETRANGE(Option, OptOrig.Option);
      IF OptBudgetOrig.FINDSET THEN BEGIN
        REPEAT
          OptBudgetDest.COPY(OptBudgetOrig);

          IF OptBudgetDest."Cost Object" <> '' THEN
            OptBudgetDest.VALIDATE("Cost Object");
          IF OptBudgetDest."Unit of Measure" <> '' THEN
            OptBudgetDest.VALIDATE("Unit of Measure");
          IF OptBudgetDest."Rate Code" <> '' THEN
            OptBudgetDest.VALIDATE("Rate Code");
          IF OptBudgetDest."Unit of Time" <> '' THEN
            OptBudgetDest.VALIDATE("Unit of Time");
          IF OptBudgetDest."Cost Component" <> '' THEN
            OptBudgetDest.VALIDATE("Cost Component");

          OptBudgetDest.INSERT(TRUE);
          lDestUpdated := TRUE;
        UNTIL OptBudgetOrig.NEXT = 0;
      END;

      //** Summary sheet option budget
      OptBudgSumOrig.SETFILTER("Project No.", '%1', '');
      OptBudgSumOrig.SETFILTER("Plot No.", '%1', '');
      OptBudgSumOrig.SETFILTER("Contract No.", '%1', '');
      OptBudgSumOrig.SETRANGE("House Model", OptOrig."House Model");
      OptBudgSumOrig.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgSumOrig.SETRANGE(Group, OptOrig.Group);
      OptBudgSumOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgSumOrig.SETRANGE(Option, OptOrig.Option);
      IF OptBudgSumOrig.FINDSET THEN BEGIN
        REPEAT
          OptBudgSumDest.COPY(OptBudgSumOrig);

          IF OptBudgSumDest."Cost Object" <> '' THEN
            OptBudgSumDest.VALIDATE("Cost Object");
          IF OptBudgSumDest."Unit of Measure" <> '' THEN
            OptBudgSumDest.VALIDATE("Unit of Measure");
          IF OptBudgSumDest."Rate Code" <> '' THEN
            OptBudgSumDest.VALIDATE("Rate Code");
          IF OptBudgSumDest."Cost Component" <> '' THEN
            OptBudgSumDest.VALIDATE("Cost Component");

          OptBudgSumDest.INSERT(TRUE);
          lDestUpdated := TRUE;
        UNTIL OptBudgSumOrig.NEXT = 0;
      END;

      OptDest.FIND('=');  //C035189 (date+time changed by OptBudgetDest (insert-trigger)
      OptDest."Budget Changed by Integration" := TRUE;
      OptDest.MODIFY;
    END;

    PROCEDURE RemoveOldModels@1100485005();
    BEGIN
      //not used
      //** Delete expired lines.
      ModelOrig.RESET;
      ModelDest.RESET;
      UnitOrig.RESET;
      UnitDest.RESET;
      OptDest.RESET;
      ModelDest.SETFILTER("Project No.", '%1', '');
      IF ModelDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF ModelOrig.GET('', ModelDest.Model) THEN BEGIN
            UnitDest.SETFILTER("Project No.",'%1', '');
            UnitDest.SETFILTER(Model,'%1',ModelOrig.Model);
            IF UnitDest.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                IF NOT UnitOrig.GET('',UnitDest.Model,UnitDest.Unit) THEN BEGIN
                  UnitDest.DELETE;
                END;
              UNTIL UnitDest.NEXT = 0;
            END;
          END ELSE BEGIN
            OptDest.SETFILTER("Project No.",'%1', '');
            OptDest.SETFILTER("House Model", '%1', ModelDest.Model);
            IF NOT OptDest.FINDFIRST THEN BEGIN
              UnitDest.SETFILTER("Project No.",'%1', '');
              UnitDest.SETFILTER(Model,'%1',ModelDest.Model);
              UnitDest.DELETEALL;
              DeleteTextLines(BuyerMgtTextRec.Table::"House Model",'','',ModelDest.Model,'','','','');
              ModelDest.DELETE;
            END;
          END;
        UNTIL ModelDest.NEXT = 0;
      END;
    END;

    PROCEDURE RemoveOldBudgets@1100485006();
    BEGIN
      //not used
      //delete expired lines
      //**delete option groups
      MainGrpDest.RESET;
      MainGrpOrig.RESET;
      MainGrpDest.SETFILTER("Project No.",'%1', '');
      MainGrpDest.SETFILTER("Plot No.", '%1', '');
      IF MainGrpDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT MainGrpOrig.GET('', '', MainGrpDest.Code) THEN BEGIN
            DeleteTextLines(BuyerMgtTextRec.Table::"Option Main Group",'','','',MainGrpDest.Code,'','','');
            MainGrpDest.DELETE;
          END;
        UNTIL MainGrpDest.NEXT = 0;
      END;

      GrpDest.RESET;
      GrpOrig.RESET;
      GrpDest.SETFILTER("Project No.",'%1','');
      GrpDest.SETFILTER("Plot No.", '%1', '');
      IF GrpDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT GrpOrig.GET('', '', GrpDest.Code) THEN BEGIN
            DeleteTextLines(BuyerMgtTextRec.Table::"Option Group",'','','','',GrpDest.Code,'','');
            GrpDest.DELETE;
          END;
        UNTIL GrpDest.NEXT = 0;
      END;

      SubGrpDest.RESET;
      SubGrpOrig.RESET;
      SubGrpDest.SETFILTER("Project No.",'%1', '');
      SubGrpDest.SETFILTER("Plot No.", '%1', '');
      IF SubGrpDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT SubGrpOrig.GET('', '', SubGrpDest.Code) THEN BEGIN
            DeleteTextLines(BuyerMgtTextRec.Table::"Option Sub Group",'','','','','',SubGrpDest.Code,'');
            SubGrpDest.DELETE;
          END;
        UNTIL SubGrpDest.NEXT = 0;
      END;

      //**delete options
      OptOrig.RESET;
      OptDest.RESET;
      OptBudgetDest.RESET;
      OptBudgetOrig.RESET;
      OptDest.SETFILTER("Project No.",'%1', '');
      OptDest.SETFILTER("Plot No.", '%1', '');
      IF OptDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          OptOrig.SETFILTER("Project No.",'%1', '');
          OptOrig.SETFILTER("Plot No.", '%1', '');
          OptOrig.SETRANGE("House Model", OptDest."House Model");
          OptOrig.SETRANGE("Main Group", OptDest."Main Group");
          OptOrig.SETRANGE(Group, OptDest.Group);
          OptOrig.SETRANGE("Sub Group", OptDest."Sub Group");
          OptOrig.SETRANGE(Option, OptDest.Option);
          IF NOT OptOrig.FINDSET THEN BEGIN
           //**option budget + summary sheet
            OptBudgetDest.SETFILTER("Project No.", '%1', '');
            OptBudgetDest.SETFILTER("Plot No.", '%1', '');
            OptBudgetDest.SETRANGE("House Model", OptDest."House Model");
            OptBudgetDest.SETRANGE("Main Group", OptDest."Main Group");
            OptBudgetDest.SETRANGE(Group, OptDest.Group);
            OptBudgetDest.SETRANGE("Sub Group", OptDest."Sub Group");
            OptBudgetDest.SETRANGE(Option, OptDest.Option);
            IF OptBudgetDest.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                OptBudgetDest.DELETE;
              UNTIL OptBudgetDest.NEXT = 0;
            END;
            //** Summary sheet option budget
            OptBudgSumDest.SETFILTER("Project No.", '%1', '');
            OptBudgSumDest.SETRANGE("Contract No.", '');
            OptBudgSumDest.SETFILTER("Plot No.", '%1', '');
            OptBudgSumDest.SETRANGE("House Model", OptDest."House Model");
            OptBudgSumDest.SETRANGE("Main Group", OptDest."Main Group");
            OptBudgSumDest.SETRANGE(Group, OptDest.Group);
            OptBudgSumDest.SETRANGE("Sub Group", OptDest."Sub Group");
            OptBudgSumDest.SETRANGE(Option, OptDest.Option);
            IF OptBudgSumDest.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                OptBudgSumDest.DELETE;
              UNTIL OptBudgSumDest.NEXT = 0;
            END;
            DeleteTextLines(BuyerMgtTextRec.Table::Option,'','',OptDest."House Model",
              OptDest."Main Group",OptDest.Group,OptDest."Sub Group",OptDest.Option);
            DeleteSurcharges('','',OptDest."House Model",
              OptDest."Main Group",OptDest.Group,OptDest."Sub Group",OptDest.Option);
            OptDest.DELETE;
            DataDelBool := TRUE;
          END;
        UNTIL OptDest.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteTextLines@1210190005(ITable@1210190000 : Option;IProject@1210190001 : Code[20];IPlot@1210190002 : Code[10];IModel@1210190003 : Code[20];IMGrp@1210190004 : Code[20];IGrp@1210190005 : Code[20];ISGrp@1210190006 : Code[20];IOption@1210190007 : Code[20]);
    BEGIN
      //not used
      //can possibly be used again when deleting expired options is switched on again.
      WITH BuyerMgtTextRec DO BEGIN
        RESET;
        SETRANGE(Table, ITable);
        SETFILTER("Project No.", '%1', '');
        SETFILTER("Plot No.", '%1', '');
        CASE ITable OF
          Table::"House Model":
            SETRANGE("House Model", IModel);
          Table::"Option Main Group":
            SETRANGE("Option Main Group", IMGrp);
          Table::"Option Group":
            SETRANGE("Option Group", IGrp);
          Table::"Option Sub Group":
            SETRANGE("Option Sub Group", ISGrp);
          Table::Option:
            BEGIN
              SETRANGE("House Model", IModel);
              SETRANGE("Option Main Group", IMGrp);
              SETRANGE("Option Group", IGrp);
              SETRANGE("Option Sub Group", ISGrp);
              SETRANGE(Option, IOption);
            END;
        END;
        DELETEALL;
      END;
    END;

    PROCEDURE DeleteSurcharges@1210190013(IProject@1210190006 : Code[20];IPlot@1210190005 : Code[10];IModel@1210190004 : Code[20];IMGrp@1210190003 : Code[20];IGrp@1210190002 : Code[20];ISGrp@1210190001 : Code[20];IOption@1210190000 : Code[20]);
    BEGIN
      //not used.
      //can possibly be used again when deleting expired options is switched on again.
      WITH OptSurchRec DO BEGIN
        RESET;
        SETFILTER("Project No.", '%1', '');
        SETFILTER("Plot No.", '%1', '');
        SETRANGE("House Model", IModel);
        SETRANGE("Main Group", IMGrp);
        SETRANGE(Group, IGrp);
        SETRANGE("Sub Group", ISGrp);
        SETRANGE(Option, IOption);
        DELETEALL;
      END;
    END;

    LOCAL PROCEDURE ValidateCompanyOrigin@1100528600();
    VAR
      Company@1100525000 : Record 2000000006;
    BEGIN
      IF CompanyOrigin = COMPANYNAME THEN
        ERROR(Text015);
      Company.GET(CompanyOrigin);
    END;

    BEGIN
    END.
  }
}

