OBJECT Codeunit 11012249 File Registration Tools
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateCompsXml();
          END;

  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'DEU=Marke ''%1'' erwartet in XML-Datei ''%2''.;ENU=Tag ''%1'' expected in XML file ''%2''.;NLD=Tag ''%1'' verwacht in XML bestand ''%2''.;NOR=Tag ''%1'' forventet i XML-filen ''%2''.;SVE=Taggen ''%1'' f”rv„ntades i XML-filen ''%2''.';
      Text004@1199197400 : TextConst 'DEU=Aktuelle Datenbank wurde registriert zwecks der Office-Add-in.;ENU=The current database is registered for the Office addin.;NLD=Huidige database is geregistreerd ten behoeve van de Office addin.;NOR=Den aktuelle databasen er registrert for Office-tillegget.;SVE=Den aktuella databasen har registrerats f”r Office-till„gget.';
      FileMgt@1100525500 : Codeunit 419;
      OperatingSystemMgt@1100409000 : Codeunit 11012364;
      XMLDOMManagement4PS@1100525001 : Codeunit 11020220;

    PROCEDURE ReadDocsXml@1100525001(VAR Folder@1100525006 : Text[250];VAR FileName@1100525007 : Text[250];VAR DocumentType@1210190000 : 'PurchaseInvoice,PurchaseCreditMemo');
    VAR
      XMLDOMMgt@1100525000 : Codeunit 11020220;
      XMLDoc@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeDocs@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //read the first filename from docs.xml and return the folder and the filename
      //delete docs.xml afterwards

      IF NOT FileMgt.ClientFileExists(DocsXmlFilePath()) THEN
        EXIT;

      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromClientFile(XMLDoc, DocsXmlFilePath, TRUE);
      XMLNodeDocs := XMLDoc.DocumentElement;
      IF NOT (XMLNodeDocs.Name = DocumentsTag) THEN
        ERROR(Text001, DocumentsTag, DocsXmlFilePath);
      ReadDocs(XMLNodeDocs, Folder, FileName, DocumentType);

      //delete the file
      FileMgt.DeleteClientFile(DocsXmlFilePath);
    END;

    PROCEDURE RegisterFileAsPurchDocument@1100525019(VAR Folder@1100525001 : Text[250];VAR FileName@1100525000 : Text[250];VAR DocumentType@1100409000 : 'PurchaseInvoice,PurchaseCreditMemo');
    VAR
      PurchasesPayablesSetup@1100409001 : Record 312;
      PurchaseHeader@1100525005 : Record 38;
      NoSeriesMgt@1100525006 : Codeunit 396;
      NoSerie@1210190001 : Code[10];
    BEGIN
      WITH PurchaseHeader DO BEGIN
        INIT;
        PurchasesPayablesSetup.GET();
        PurchasesPayablesSetup.TESTFIELD("File Location Scanned Invoices");
        CASE DocumentType OF
          DocumentType::PurchaseInvoice:
            BEGIN
              "Document Type" := "Document Type"::Invoice;
              NoSerie := PurchasesPayablesSetup."PDF Invoice Nos.";
            END;
          DocumentType::PurchaseCreditMemo:
            BEGIN
              "Document Type" := "Document Type"::"Credit Memo";
              NoSerie := PurchasesPayablesSetup."PDF Credit Memo Nos.";
            END;
        END;
        IF NoSerie <> '' THEN BEGIN
          "No." := NoSeriesMgt.GetNextNo(NoSerie,WORKDATE,TRUE);
          "No. Series" := NoSerie;
        END;
        INSERT(TRUE);

        LinkScannedDocToPurchDoc(PurchaseHeader, Folder, FileName, FALSE); //Run hyperlink after form has been opened, otherwise strange
                                                                           //error occur
      END;

      CASE DocumentType OF
        DocumentType::PurchaseInvoice:
          BEGIN
            PAGE.RUN(PAGE::"Purchase Invoice", PurchaseHeader);
          END;
        DocumentType::PurchaseCreditMemo:
          BEGIN
            PAGE.RUN(PAGE::"Purchase Credit Memo", PurchaseHeader);
          END;
      END;
      HYPERLINK(Folder + FileName);
    END;

    PROCEDURE LinkScannedDocToPurchDoc@1100409000(PurchaseHeader@1100409006 : Record 38;VAR Folder@1100409005 : Text[250];VAR FileName@1100409004 : Text[250];ShowDocument@1100409003 : Boolean);
    VAR
      PurchasesPayablesSetup@1100409002 : Record 312;
      NewFolder@1100409001 : Text[250];
      NewFileName@1100409000 : Text[250];
    BEGIN
      WITH PurchaseHeader DO BEGIN

        PurchasesPayablesSetup.GET();
        PurchasesPayablesSetup.TESTFIELD("File Location Scanned Invoices");
        PurchasesPayablesSetup.TESTFIELD("File Extension Scanned Inv");

        NewFolder := PurchasesPayablesSetup."File Location Scanned Invoices";
        NewFileName := "No." + '.' + PurchasesPayablesSetup."File Extension Scanned Inv";

        FileMgt.RenameClientFile(Folder + FileName, NewFolder + NewFileName, TRUE);
        "Ext. Document ID" := "No.";
        MODIFY;
      END;

      IF ShowDocument THEN
        HYPERLINK(NewFolder + NewFileName);
      Folder := NewFolder;
      FileName := NewFileName;
    END;

    LOCAL PROCEDURE ReadDocs@1100525010(XMLNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR Folder@1100525005 : Text[250];VAR FileName@1100525004 : Text[250];VAR DocumentType@1210190000 : 'PurchaseInvoice,PurchaseCreditMemo');
    VAR
      XMLDOMMgt@1100525001 : Codeunit 11020220;
      XMLNodeList@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNodeDoc@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //read the 1st file from the documents element
      IF XMLDOMMgt.FindNodes(XMLNode, DocumentTag, XMLNodeList) THEN
        XMLNodeDoc := XMLNodeList.Item(0);
      IF ISNULL(XMLNodeDoc) THEN BEGIN
        ERROR(Text001, XMLNodeDoc, DocsXmlFilePath);
      END ELSE BEGIN
        ReadDoc(XMLNodeDoc, Folder, FileName, DocumentType);
      END;
    END;

    LOCAL PROCEDURE ReadDoc@1100525011(XMLNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR Folder@1100525005 : Text[250];VAR FileName@1100525004 : Text[250];VAR DocumentType@1210190000 : 'PurchaseInvoice,PurchaseCreditMemo');
    VAR
      XMLDOMMgt@1100525003 : Codeunit 11020220;
      XMLNodeReturn@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocumentTypeText@1210190001 : Text[30];
    BEGIN
      IF XMLDOMMgt.FindNode(XMLNode, FolderTag,XMLNodeReturn) THEN BEGIN
        Folder := XMLNodeReturn.InnerText;
        IF COPYSTR(Folder, STRLEN(Folder), 1) <> '\' THEN
          Folder := Folder + '\';
      END;
      IF XMLDOMMgt.FindNode(XMLNode, FileNameTag,XMLNodeReturn) THEN
        FileName := XMLNodeReturn.InnerText;
      IF XMLDOMMgt.FindNode(XMLNode, DocumentTypeTag, XMLNodeReturn) THEN BEGIN
        DocumentTypeText := XMLNodeReturn.InnerText;
        CASE DocumentTypeText OF
          'PurchaseIncoice':
            BEGIN
              DocumentType := DocumentType::PurchaseInvoice;
            END;
          'PurchaseCreditMemo':
            BEGIN
              DocumentType := DocumentType::PurchaseCreditMemo;
            END;
        END;
      END ELSE BEGIN
        //This is the default because in the first version we only supported invoices and didn't have the document_type tag
        DocumentType := DocumentType::PurchaseInvoice;
      END;
    END;

    PROCEDURE CreateCompsXml@1100525002();
    VAR
      Company@1100528101 : Record 2000000006;
      XMLDOMMgt@1100525002 : Codeunit 11020220;
      XMLDoc@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeServers@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeServer@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeCompanies@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeCompany@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLPI@1100525008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      XMLCurrNode@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      MyServerName@1100525500 : Text[80];
      MyDatabaseName@1100525501 : Text[80];
      ServerEnvironmentManagement@1100528100 : Codeunit 11012284;
    BEGIN
      //the xml file comps.xml contains the data that is neccesarry for the addin to construct a hyperlink
      //the format is as follows:

      //<?xml version="1.0" encoding="UTF-8"?>
      //<servers>
      //  <server>
      //    <type>Native</type>
      //    <servername>TEST2009</servername>
      //    <databasename>f:\test2009\test2009.fdb</databasename>
      //    <companies>
      //      <company>Archiefbedrijf</company>
      //      <company>Artikelbedrijf WTH</company>
      //      <company>Bouwbedrijf Bouwman BV</company>
      //      <company>Bouwbedrijf Bouwman Materieel</company>
      //      <company>Installatiebedrijf Volt BV</company>
      //      <company>Steen Bouw BV</company>
      //      <company>Steen Consolidatiebedrijf</company>
      //      <company>Steen Fabriek BV</company>
      //      <company>Steen Holding BV</company>
      //    </companies>
      //  </server>
      //  <server>
      //    <type>Local</type>
      //    <databasename>C:\Data\Projecten\Documentbeheer\NAV\mbs2009.fdb</databasename>
      //    <companies>
      //      <company>Conversiebedrijf RIM</company>
      //      <company>CONUS Nederland BV</company>
      //      <company>MBS Bouw BV DocMan</company>
      //      <company>MBS Gerelateerd aan Bouw lang</company>
      //    </companies>
      //  </server>
      //  <server>
      //    <type>SQL</type>
      //    <servername>NAV05</servername>
      //    <databasename>test2009sql</databasename>
      //    <companies>
      //      <company>Archiefbedrijf</company>
      //      <company>Artikelbedrijf WTH</company>
      //      <company>BMI Demobedrijf</company>
      //      <company>Bouwbedrijf Bouwman BV</company>
      //      <company>Bouwbedrijf Bouwman Materieel</company>
      //      <company>Installatiebedrijf Volt BV</company>
      //      <company>Steen Bouw BV</company>
      //      <company>Steen Consolidatiebedrijf</company>
      //      <company>Steen Fabriek BV</company>
      //      <company>Steen Holding BV</company>
      //    </companies>
      //  </server>
      //</servers>

      IF NOT ISNULL(XMLDoc) THEN
        CLEAR(XMLDoc);

      XMLDoc := XMLDoc.XmlDocument;
      XMLPI := XMLDoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      XMLCurrNode := XMLDoc.AppendChild(XMLPI);
      XMLNodeServers := XMLDoc.CreateElement(ServersTag());
      XMLNodeServers := XMLDoc.AppendChild(XMLNodeServers);
      XMLNodeServer := XMLDoc.CreateElement(ServerTag());
      XMLNodeServer := XMLNodeServers.AppendChild(XMLNodeServer);

      MyServerName := ServerEnvironmentManagement.GetDatabaseServerName;

      XMLDOMMgt.AddElement(XMLNodeServer,ServerTypeTag(),'SQL','',XMLCurrNode);
      IF MyServerName <> '' THEN
        XMLDOMMgt.AddElement(XMLNodeServer,ServerNameTag(), MyServerName,'',XMLCurrNode);

      MyDatabaseName := ServerEnvironmentManagement.GetDatabaseName;
      IF MyDatabaseName <> '' THEN
        XMLDOMMgt.AddElement(XMLNodeServer,DataBaseNameTag(),MyDatabaseName,'',XMLCurrNode);

      XMLNodeCompanies := XMLDoc.CreateElement(CompaniesTag());
      XMLNodeCompanies := XMLNodeServer.AppendChild(XMLNodeCompanies);

      IF Company.FINDFIRST THEN
        REPEAT
          XMLDOMMgt.AddElement(XMLNodeCompanies,CompanyTag(),Company.Name,'',XMLNodeCompany);
        UNTIL Company.NEXT = 0;
      XMLDOMManagement4PS.SaveXMLToClientFile(XMLDoc, CompsXmlFilePath);

      MESSAGE(Text004);
    END;

    PROCEDURE TempPath@1100525003() : Text[924];
    VAR
      Folder@1100525001 : Text[924];
    BEGIN
      Folder := OperatingSystemMgt.ClientEnviron('TEMP') + '\4PS';
      IF NOT FileMgt.ClientDirectoryExists(Folder) THEN
        FileMgt.CreateClientFolder(Folder);

      EXIT(Folder);
    END;

    PROCEDURE AppDataPath@1100525017() : Text[924];
    VAR
      Folder@1100525000 : Text[924];
    BEGIN
      Folder := OperatingSystemMgt.ClientEnviron('APPDATA') + '\4PS';
      IF NOT FileMgt.ClientDirectoryExists(Folder) THEN
        FileMgt.CreateClientFolder(Folder);
      EXIT(Folder);
    END;

    PROCEDURE DocsXmlFilePath@1100525005() : Text[1024];
    VAR
      FilePath@1100525000 : Text[1024];
    BEGIN
      FilePath := TempPath + '\' + 'docs.xml';
      IF NOT FileMgt.ClientFileExists(FilePath) THEN
        EXIT('');

      EXIT(FilePath);
    END;

    LOCAL PROCEDURE CompsXmlFilePath@1100525000() : Text[1024];
    VAR
      FilePath@1100525000 : Text[1024];
    BEGIN
      FilePath := AppDataPath + '\' + 'comps.xml';
      IF FileMgt.ClientFileExists(FilePath) THEN
        FileMgt.DeleteClientFile(FilePath);

      EXIT(FilePath);
    END;

    PROCEDURE DocumentsTag@1100525006() : Text[30];
    BEGIN
      EXIT('documents');
    END;

    PROCEDURE DocumentTag@1100525007() : Text[30];
    BEGIN
      EXIT('document');
    END;

    PROCEDURE FolderTag@1100525008() : Text[30];
    BEGIN
      EXIT('folder');
    END;

    PROCEDURE FileNameTag@1100525009() : Text[30];
    BEGIN
      EXIT('filename');
    END;

    LOCAL PROCEDURE ServersTag@1100525013() : Text[30];
    BEGIN
      EXIT('servers');
    END;

    LOCAL PROCEDURE ServerTag@1100525014() : Text[30];
    BEGIN
      EXIT('server');
    END;

    LOCAL PROCEDURE ServerTypeTag@1100525018() : Text[30];
    BEGIN
      EXIT('type');
    END;

    LOCAL PROCEDURE ServerNameTag@1100525004() : Text[30];
    BEGIN
      EXIT('servername');
    END;

    LOCAL PROCEDURE DataBaseNameTag@1100525012() : Text[30];
    BEGIN
      EXIT('databasename');
    END;

    LOCAL PROCEDURE CompaniesTag@1100525015() : Text[30];
    BEGIN
      EXIT('companies');
    END;

    LOCAL PROCEDURE CompanyTag@1100525016() : Text[30];
    BEGIN
      EXIT('company');
    END;

    LOCAL PROCEDURE DocumentTypeTag@1210190000() : Text[30];
    BEGIN
      EXIT('document_type');
    END;

    BEGIN
    {
      //this codeunit can create and read the XML files that are the interface with the Office Addins.

      //docs.xml has following layout:
      //<?xml version="1.0"?>
      //<documents>
      //  <document>
      //    <folder>C:\File Dump</folder>
      //    <filename>Supportmelding19398.pdf</filename>
      //    <document type>PurchaseInvoice</document type>       //optional
      //  </document>
      //  <document>
      //    <folder>C:\File Dump</folder>
      //    <filename>Timesheet portal 2009-000-08pre.fob</filename>
      //    <document type>PurchaseCreditMemo</document type>          //optional
      //  </document>
      //</documents>
    }
    END.
  }
}

