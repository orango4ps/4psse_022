OBJECT Table 11012094 Operations by Small Project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Operations by Small Project;
               NOR=Operasjoner etter lite prosjekt;
               SVE=Insatser efter mindre projekt];
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No. WHERE (Small Project=CONST(Yes));
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Operation           ;Code20        ;TableRelation="Small Project Operation".Code;
                                                   OnValidate=VAR
                                                                lJobRec@1210190000 : Record 11072003;
                                                                lCustomerRec@1210190001 : Record 18;
                                                              BEGIN
                                                                IF OperRec.GET(Operation) THEN BEGIN
                                                                  Description := OperRec.Description;
                                                                  "Unit of Measure" := OperRec."Unit of Measure";
                                                                END;

                                                                IF lJobRec.GET("Project No.") THEN BEGIN
                                                                  IF lJobRec."Bill-to Customer No." <> '' THEN BEGIN
                                                                    IF lCustomerRec.GET(lJobRec."Bill-to Customer No.") THEN BEGIN
                                                                      "Quantities On Settlement Sheet" := lCustomerRec."Quantities on Settlement Sheet";
                                                                      "Total line on settlement sheet" := lCustomerRec."Total Line on Settlement Sheet";
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Operation;
                                                              NOR=Operasjon;
                                                              SVE=Operation];
                                                   NotBlank=Yes }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 40  ;   ;Quantity            ;Decimal       ;InitValue=1;
                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal] }
    { 50  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet] }
    { 60  ;   ;Quantities On Settlement Sheet;Boolean;
                                                   CaptionML=[ENU=Quantities On Settlement Sheet;
                                                              NOR=Antall p† oppgj›rsskjema;
                                                              SVE=Antal p† avr„kningsark] }
    { 70  ;   ;Total line on settlement sheet;Boolean;
                                                   CaptionML=[ENU=Total line on Settlement Sheet;
                                                              NOR=Totalrad p† oppgj›rsskjema;
                                                              SVE=Totalrad p† avr„kningsark] }
    { 80  ;   ;Cost Plus Lines Created;Date       ;CaptionML=[ENU=Cost Plus Lines Created;
                                                              NOR=Selvkostsrader er opprettet;
                                                              SVE=Sj„lvkostnadsrader har skapats];
                                                   Editable=No }
    { 90  ;   ;Cost Plus Lines Created By;Code50  ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Cost Plus Lines Created By;
                                                              NOR=Selvkostsrader er opprettet av;
                                                              SVE=Sj„lvkostnadsrader har skapats av];
                                                   Editable=No }
    { 100 ;   ;Purchase Orders Created;Boolean    ;CaptionML=[ENU=Purchaseorders created;
                                                              NOR=Innkj›psordre er opprettet;
                                                              SVE=Ink”psorder har skapats];
                                                   Editable=No }
    { 110 ;   ;Room                ;Code20        ;TableRelation=Room.Code;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Room Description");
                                                              END;

                                                   CaptionML=[ENU=Room;
                                                              NOR=Rom;
                                                              SVE=Rum] }
    { 120 ;   ;Room Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Room.Description WHERE (Code=FIELD(Room)));
                                                   CaptionML=[ENU=Room Description;
                                                              NOR=Rombeskrivelse;
                                                              SVE=Rumsbeskrivning] }
  }
  KEYS
  {
    {    ;Project No.,Operation,Room              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      OperRec@1210190000 : Record 11012091;
      NextPLineNo@1100485000 : Integer;
      Text000@1100485003 : TextConst 'ENU=Create Purchase Order(s)?;NOR=Opprette kj›psordre?;SVE=Skapa ink”psorder?';
      Text001@1100485004 : TextConst 'ENU=No Operation marked/selected.;NOR=Ingen Innsats er markert/valgt.;SVE=Ingen insats har valts/markerats.';
      Text002@1100485005 : TextConst 'ENU=Of the marked/selected Operation(s) already Purch Order(s) created.;NOR=For de markerte/valgte Innsatsene er innkj›psordre opprettet.;SVE=F”r de markerade/valda insatserna har redan ink”psorder skapats.';
      Text003@1100485006 : TextConst 'ENU=No Line(s) present with Type ''Means'' of Operation ''%1''  in %2.;NOR=Det finnes ingen rader med typen ''Middel'' i Innsaten ''%1'' i %2.;SVE=Det finns inga rader med typen ''Medel'' i insatsen ''%1'' i %2.';
      Text004@1100485007 : TextConst 'ENU="%1 Purchase Orders created. ";NOR=%1 innkj›psordre er opprettet.;SVE="%1 ink”psorder har skapats. "';

    PROCEDURE CalculateOperationTotal@1210190001(IProjectNo@1210190001 : Code[20];VAR vTotalOperation@1100485002 : Decimal;VAR vTotalCost@1100485003 : Decimal);
    VAR
      lvProjOperRec@1210190000 : Record 11012094;
      lvOperationPrice@1100485000 : Decimal;
      lvCostPrice@1100485001 : Decimal;
    BEGIN
      WITH lvProjOperRec DO BEGIN
        vTotalOperation := 0;
        vTotalCost := 0;
        SETRANGE("Project No.", IProjectNo);
        IF FIND('-') THEN BEGIN
          REPEAT
            CalculateProjOperationRate("Project No.", Operation,lvOperationPrice,lvCostPrice);
            vTotalOperation := vTotalOperation + (Quantity * lvOperationPrice);
            vTotalCost := vTotalCost + (Quantity * lvCostPrice);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CalculateProjOperationRate@1210190007(IProjectNo@1210190001 : Code[20];IOperation@1210190002 : Code[20];VAR vOperRate@1100485001 : Decimal;VAR vCostPrice@1100485002 : Decimal);
    VAR
      lvProjRec@1210190005 : Record 11072003;
      lvSettlSheetRec@1210190004 : Record 11012021;
      lvOperationRec@1100485000 : Record 11012091;
      lvOperLineRec@1210190003 : Record 11012092;
      lvRefDate@1210190000 : Date;
    BEGIN
      IF (IProjectNo = '') OR (IOperation = '') THEN
        EXIT;

      lvRefDate := 0D;
      lvProjRec.GET(IProjectNo);

      lvSettlSheetRec.RESET;
      lvSettlSheetRec.SETRANGE("Project No.", IProjectNo);
      lvSettlSheetRec.SETRANGE(Principal, lvProjRec."Bill-to Customer No.");
      IF lvSettlSheetRec.FIND('-') THEN
        lvRefDate := lvSettlSheetRec."Reference Date";

      IF (lvRefDate = 0D) THEN
        lvRefDate := TODAY;
      lvOperLineRec.Operation := IOperation;

      lvOperationRec.GET(IOperation);
      //EXIT(lvOperLineRec.CalcTotalOperSalesAmount(IOperation, lvRefDate, lvProjRec."Bill-to Customer No.", IProjectNo));
      lvOperationRec.GetUnitPrice(lvProjRec."Bill-to Customer No.", lvRefDate,vOperRate,vCostPrice);
    END;

    PROCEDURE CreatePurchaseOrders@1100485000();
    VAR
      lvOperBySmallProjectRec@1100485000 : Record 11012094;
      lvSmallProjOperLineRec@1100485001 : Record 11012092;
      lvMeansRec@1100485005 : Record 11020245;
      lvTmpSmallProjOperLineRec@1100485002 : TEMPORARY Record 11012092;
      lvNoCreatedPurchOrders@1100485003 : Integer;
      lvPurchaseNo@1100485004 : Code[20];
    BEGIN
      //hs, 09-01-06
      lvTmpSmallProjOperLineRec.RESET;
      lvTmpSmallProjOperLineRec.DELETEALL;

      WITH lvOperBySmallProjectRec DO BEGIN
        COPY(Rec);
        IF NOT FIND('-') THEN
          ERROR(Text001);

        SETRANGE("Purchase Orders Created",FALSE);

        IF NOT FIND('-') THEN
          ERROR(Text002)
        ELSE BEGIN
          IF NOT CONFIRM(Text000, TRUE) THEN
            ERROR('');
          REPEAT
            lvSmallProjOperLineRec.SETRANGE(Operation,lvOperBySmallProjectRec.Operation);
            lvSmallProjOperLineRec.SETRANGE(Type,lvSmallProjOperLineRec.Type::Means);
            //lvSmallProjOperLineRec.SETFILTER("Vendor No.",'<>%1','');  //* Not clear why none created, for that reason
            //lvSmallProjOperLineRec.SETFILTER(Quantity,'<>%1',0);       //* no filter but check on filled within repeat-loop
            IF lvSmallProjOperLineRec.FIND('-') THEN BEGIN
              REPEAT
                lvSmallProjOperLineRec.TESTFIELD("No.");
                lvMeansRec.GET(lvSmallProjOperLineRec."No.");
                lvMeansRec.TESTFIELD("Vendor No.");
                lvSmallProjOperLineRec.TESTFIELD(Quantity);

                lvTmpSmallProjOperLineRec := lvSmallProjOperLineRec;
                lvTmpSmallProjOperLineRec."Vendor No." := lvMeansRec."Vendor No.";  //* Field is/was not always filled well
                                                                                    //* for that reason fill it again
                lvTmpSmallProjOperLineRec.Quantity := lvSmallProjOperLineRec.Quantity * lvOperBySmallProjectRec.Quantity;
                lvTmpSmallProjOperLineRec.INSERT;
              UNTIL lvSmallProjOperLineRec.NEXT = 0;
              "Purchase Orders Created" := TRUE;
              MODIFY;
            END ELSE BEGIN
              ERROR(Text003, lvOperBySmallProjectRec.Operation, lvSmallProjOperLineRec.TABLECAPTION);
            END;
          UNTIL NEXT =0;
        END;
      END;

      lvNoCreatedPurchOrders := 0;
      WITH lvTmpSmallProjOperLineRec DO BEGIN
        SETCURRENTKEY("Vendor No.");
        IF FIND('-') THEN BEGIN
          REPEAT
            SETRANGE("Vendor No.",lvTmpSmallProjOperLineRec."Vendor No.");  // Purchase Orders by Vendor

            CreatePurchHeader("Project No.",lvTmpSmallProjOperLineRec,lvPurchaseNo);
            lvNoCreatedPurchOrders := lvNoCreatedPurchOrders + 1;
            IF lvPurchaseNo <> '' THEN BEGIN
              REPEAT
                CreatePurchLine("Project No.",lvTmpSmallProjOperLineRec,lvPurchaseNo);
              UNTIL NEXT = 0;
            END;

            SETRANGE("Vendor No.");
          UNTIL NEXT =0;
        END;
      END;

      MESSAGE(Text004,lvNoCreatedPurchOrders);
    END;

    PROCEDURE CreatePurchHeader@1100485002(IProjectNo@1100485003 : Code[20];ISmallProjOperLine@1100485001 : Record 11012092;VAR VPurchaseNo@1100485004 : Code[20]);
    VAR
      lvAppointmentsByProjectRec@1100485000 : Record 11012081;
      lvLineNo@1100485002 : Integer;
    BEGIN
      //hs, 09-01-06
      VPurchaseNo := '';
      WITH lvAppointmentsByProjectRec DO BEGIN
        SETRANGE("Project No.",IProjectNo);
        SETRANGE("Appointment Type","Appointment Type"::Purchase);
        IF lvAppointmentsByProjectRec.FIND('+') THEN
          lvLineNo := lvAppointmentsByProjectRec."Line No."
        ELSE
          lvLineNo := 0;
        lvLineNo := lvLineNo + 10000;  //* First free one in 'Appointments per project'

        INIT;
        "Project No." := IProjectNo;
        "Appointment Type" := "Appointment Type"::Purchase;
        "Line No." := lvLineNo;
        REPEAT
          CALCFIELDS("Purchase Order");  //* Flowfield to purchase order that is related to the appointment
          IF "Purchase Order" <> '' THEN
            "Line No." := "Line No." + 10000;  //* Line no.(Project appointment) should not exist yet at purchase orders
        UNTIL ("Purchase Order" = '');
        "Starting Date" := WORKDATE;
        "Internal/External Action" := "Internal/External Action"::Internal;
        VALIDATE("Vendor No.",ISmallProjOperLine."Vendor No.");
        INSERT(TRUE);

        SetNoUserInteraction(TRUE);
        CreatePurchaseOrder();
        VPurchaseNo := GetPurchaseNo;
        NextPLineNo := 0;
      END;
    END;

    PROCEDURE CreatePurchLine@1100485003(IProjectNo@1100485005 : Code[20];ISmallProjectOperLineRec@1100485000 : Record 11012092;IPurchaseNo@1100485006 : Code[20]);
    VAR
      lvPurchLineRec@1100485001 : Record 39;
      lvMeansRec@1100485002 : Record 11020245;
      PurchPriceMgtCU@1100485007 : Codeunit 11012065;
      lvCost@1100485004 : Decimal;
    BEGIN
      //hs, 09-01-06
      //IF ISmallProjectOperLineRec."No." = '' THEN   // Not just skip, above already checked on filled field.
      //  EXIT;                                       // So switch off these lines.

      WITH lvPurchLineRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "Document No." := IPurchaseNo;
        InitRecord;
        NextPLineNo := NextPLineNo + 10000;
        "Line No." := NextPLineNo;
        INSERT(TRUE);
        VALIDATE(Type,Type::"G/L Account");
        lvMeansRec.GET(ISmallProjectOperLineRec."No.");
        IF ISmallProjectOperLineRec."Cost Object" <> '' THEN
          VALIDATE("Shortcut Dimension 2 Code",ISmallProjectOperLineRec."Cost Object")
        ELSE
          VALIDATE("Shortcut Dimension 2 Code",lvMeansRec."Cost Object");
        IF lvMeansRec.Description <> '' THEN
          Description := lvMeansRec.Description;
        IF ISmallProjectOperLineRec.Description <> '' THEN
          Description := ISmallProjectOperLineRec.Description;
        VALIDATE(Quantity,ISmallProjectOperLineRec.Quantity);
        VALIDATE("Unit of Measure Code", ISmallProjectOperLineRec."Unit of Measure");

        //ISmallProjectOperLineRec.CalcTotalOperSalesAmount(
        //  ISmallProjectOperLineRec.Operation,WORKDATE,'',IProjectNo,lvRate,lvCost);
        lvCost := PurchPriceMgtCU.GetPurchasePriceOperationLine(ISmallProjectOperLineRec,"Order Date");
        VALIDATE("Direct Unit Cost",lvCost);
        MODIFY(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

