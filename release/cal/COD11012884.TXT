OBJECT Codeunit 11012884 Service Prognosis Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU="Kombination von %2=%3 und %4=%5 nicht zul„ssig";ENU="Service Contract %1: Combination of %2=%3 and %4=%5 not allowed";NLD="Servicecontract %1: Combinatie van %2=%3 en %4=%5 niet toegestaan"';

    PROCEDURE CopyPrognosis@1100528600(IPrognoseType@1100528602 : 'Calculated,Previous';VAR IServicePrognosisLine@1100528600 : Record 11072310);
    VAR
      ServicePrognosisLine@1100528601 : Record 11072310;
      TmpServicePrognosisLine@1100528603 : TEMPORARY Record 11072310;
    BEGIN
      ServicePrognosisLine.COPY(IServicePrognosisLine);
      IF ServicePrognosisLine.FINDSET(TRUE) THEN
        REPEAT
          TmpServicePrognosisLine.SETRANGE("Prognosis Date", ServicePrognosisLine."Prognosis Date");
          TmpServicePrognosisLine.SETRANGE("Prognosis Seq. No.", ServicePrognosisLine."Prognosis Seq. No.");
          TmpServicePrognosisLine.SETRANGE("Service Contract No.", ServicePrognosisLine."Service Contract No.");
          IF ServicePrognosisLine."Service Contract No." = '' THEN
            TmpServicePrognosisLine.SETRANGE("Global Dimension 1 Code", ServicePrognosisLine."Global Dimension 1 Code");
          TmpServicePrognosisLine.SETRANGE("Control Period Code", ServicePrognosisLine."Control Period Code");
          TmpServicePrognosisLine.SETFILTER("Line Type", '<%1', ServicePrognosisLine."Line Type");
          IF TmpServicePrognosisLine.ISEMPTY THEN BEGIN
            CASE IPrognoseType OF
              IPrognoseType::Calculated:
                ServicePrognosisLine.CopyCalculatedPrognosis;
              IPrognoseType::Previous:
                ServicePrognosisLine.CopyPreviousPrognosis;
            END;
            ServicePrognosisLine.MODIFY(TRUE);
            TmpServicePrognosisLine := ServicePrognosisLine;
            TmpServicePrognosisLine.INSERT;
          END;
        UNTIL ServicePrognosisLine.NEXT = 0;
    END;

    PROCEDURE IsRealTimeControlMethod@1100528603() : Boolean;
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      EXIT(ServiceSetup."Service Control Method" = ServiceSetup."Service Control Method"::"Real-Time");
    END;

    PROCEDURE TestRealTimeControlMethod@1100528601();
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Service Control Method", ServiceSetup."Service Control Method"::"Real-Time");
    END;

    PROCEDURE TestProgressMethodvsProgressMeasurement@1100528612(IServiceContractNo@1100528603 : Code[20];IProgressMethod@1100528600 : 'Allowed Hours,,,Actual Cost,Elapsed Time,,Available Hours,,Allowed Cost,,Available Cost,,None';ILevelProgressMeasurement@1100528601 : 'Period,Service Category,Source Type');
    VAR
      TmpServiceContract@1100528602 : TEMPORARY Record 11012812;
    BEGIN
      CASE ILevelProgressMeasurement OF
        ILevelProgressMeasurement::Period,
        ILevelProgressMeasurement::"Service Category":
          IF IProgressMethod IN [IProgressMethod::"Actual Cost", IProgressMethod::"Elapsed Time", IProgressMethod::None] THEN
            EXIT;
        ILevelProgressMeasurement::"Source Type":
          EXIT;
      END;
      TmpServiceContract."Calc. Progress Perc. Progn/Res" := IProgressMethod;
      TmpServiceContract."Level Progress Measurement" := ILevelProgressMeasurement;
      ERROR(Text000,
        IServiceContractNo,
        TmpServiceContract.FIELDCAPTION("Calc. Progress Perc. Progn/Res"), TmpServiceContract."Calc. Progress Perc. Progn/Res",
        TmpServiceContract.FIELDCAPTION("Level Progress Measurement"), TmpServiceContract."Level Progress Measurement");
    END;

    LOCAL PROCEDURE "---"@1100528604();
    BEGIN
    END;

    PROCEDURE GetServicePrognosis@1100528605(IPrognosisDate@1100528602 : Date;IServiceContractNo@1100528603 : Code[20];VAR OServicePrognosis@1100528600 : Record 11072309) : Boolean;
    VAR
      ServicePrognosisLine@1100528601 : Record 11072310;
    BEGIN
      IF IPrognosisDate = 0D THEN
        EXIT(FALSE);
      ServicePrognosisLine.SETRANGE("Prognosis Date", IPrognosisDate);
      ServicePrognosisLine.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ServicePrognosisLine.FINDFIRST THEN BEGIN
        OServicePrognosis.GET(ServicePrognosisLine."Prognosis Date", ServicePrognosisLine."Prognosis Seq. No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetPrognosisDS@1100528609(IPrognosisDate@1100528606 : Date;ILineType@1100528605 : Option;IServiceContractNo@1100528604 : Code[20];IControlPeriodCode@1100528603 : Code[10];IServiceCategory@1100528602 : Code[10];ISourceType@1100528601 : Option;IServiceOrderNo@1100528600 : Code[20];IGlobalDim1Code@1100529600 : Code[20];VAR OServicePrognosisLine@1100528607 : Record 11072310);
    BEGIN
      OServicePrognosisLine.RESET;
      OServicePrognosisLine.SETRANGE("Prognosis Date", IPrognosisDate);
      OServicePrognosisLine.SETRANGE("Service Contract No.", IServiceContractNo);
      IF IServiceContractNo = '' THEN
        OServicePrognosisLine.SETRANGE("Global Dimension 1 Code", IGlobalDim1Code);
      OServicePrognosisLine.SETRANGE("Control Period Code", IControlPeriodCode);
      OServicePrognosisLine.SETRANGE("Line Type", ILineType);
      IF IServiceCategory <> '*' THEN
        IF ILineType IN [OServicePrognosisLine."Line Type"::"Service Category", OServicePrognosisLine."Line Type"::"Source Type", OServicePrognosisLine."Line Type"::"Service Order"] THEN
          OServicePrognosisLine.SETRANGE("Service Category", IServiceCategory);
      IF ILineType IN [OServicePrognosisLine."Line Type"::"Source Type", OServicePrognosisLine."Line Type"::"Service Order"] THEN
        OServicePrognosisLine.SETRANGE("Source Type", ISourceType);
      IF ILineType IN [OServicePrognosisLine."Line Type"::"Service Order"] THEN
        OServicePrognosisLine.SETRANGE("Service Order No.", IServiceOrderNo);
    END;

    PROCEDURE GetPrognosisProgressPercentage@1100528607(IPrognosisDate@1100528606 : Date;ILineType@1100528605 : Option;IServiceContractNo@1100528604 : Code[20];IControlPeriodCode@1100528603 : Code[10];IServiceCategory@1100528602 : Code[10];ISourceType@1100528601 : Option;IServiceOrderNo@1100528600 : Code[20];IGlobalDim1Code@1100529600 : Code[20]) : Decimal;
    VAR
      ServicePrognosisLine@1100528607 : Record 11072310;
    BEGIN
      GetPrognosisDS(IPrognosisDate, ILineType, IServiceContractNo, IControlPeriodCode, IServiceCategory, ISourceType, IServiceOrderNo, IGlobalDim1Code, ServicePrognosisLine);
      IF ServicePrognosisLine.FINDFIRST THEN
        EXIT(ServicePrognosisLine."Cumulative Progress %");
    END;

    PROCEDURE GetPrognosisValues@1100529600(ILineType@1100528605 : Option;IServiceContractNo@1100528604 : Code[20];IControlPeriodCode@1100528603 : Code[10];IServiceCategory@1100528602 : Code[10];ISourceType@1100528601 : Option;IServiceOrderNo@1100528600 : Code[20];IGlobalDim1Code@1100529606 : Code[20];CheckDate@1100529607 : Date;VAR PrognosisDate@1100529604 : Date;VAR CalcrognosisTotalCost@1100529605 : Decimal;VAR PrognosisTotalCost@1100529600 : Decimal;VAR PrognosisTotalRevenue@1100529601 : Decimal;VAR DeviationFromBudget@1100529602 : Decimal;VAR LowerLevelPrognTotalCost@1100529603 : Decimal);
    VAR
      ServicePrognosisLine@1100528607 : Record 11072310;
    BEGIN
      ServicePrognosisLine.SETCURRENTKEY("Service Contract No.");
      ServicePrognosisLine.SETRANGE("Service Contract No.", IServiceContractNo);
      IF IServiceContractNo = '' THEN
        ServicePrognosisLine.SETRANGE("Global Dimension 1 Code", IGlobalDim1Code);
      ServicePrognosisLine.SETRANGE("Control Period Code", IControlPeriodCode);
      ServicePrognosisLine.SETRANGE("Line Type", ILineType);
      IF IServiceCategory <> '*' THEN
        IF ILineType IN [ServicePrognosisLine."Line Type"::"Service Category", ServicePrognosisLine."Line Type"::"Source Type", ServicePrognosisLine."Line Type"::"Service Order"] THEN
          ServicePrognosisLine.SETRANGE("Service Category", IServiceCategory);
      IF ILineType IN [ServicePrognosisLine."Line Type"::"Source Type", ServicePrognosisLine."Line Type"::"Service Order"] THEN
        ServicePrognosisLine.SETRANGE("Source Type", ISourceType);
      IF ILineType IN [ServicePrognosisLine."Line Type"::"Service Order"] THEN
        ServicePrognosisLine.SETRANGE("Service Order No.", IServiceOrderNo);
      ServicePrognosisLine.SETFILTER("Prognosis Date", '<=%1', CheckDate);

      IF ServicePrognosisLine.ISEMPTY THEN BEGIN
        PrognosisDate := 0D;
        CalcrognosisTotalCost := 0;
        PrognosisTotalCost := 0;
        PrognosisTotalRevenue := 0;
        DeviationFromBudget := 0;
        LowerLevelPrognTotalCost := 0;
        EXIT;
      END;

      ServicePrognosisLine.FINDLAST;
      PrognosisDate := ServicePrognosisLine."Prognosis Date";
      CalcrognosisTotalCost := ServicePrognosisLine."Calc. Prognosis Total Cost";
      PrognosisTotalCost := ServicePrognosisLine."Prognosis Total Cost";
      PrognosisTotalRevenue := ServicePrognosisLine."Prognosis Total Revenue (SC)" + ServicePrognosisLine."Prognosis Total Revenue (SO)";
      DeviationFromBudget := ServicePrognosisLine."Deviation From Budget";
      LowerLevelPrognTotalCost := ServicePrognosisLine."Lower Level Progn. Total Cost";
    END;

    PROCEDURE GetPrognosisValuesSummaryLevel@1100529601(LineType@1100528605 : Option;ServiceContractNo@1100528604 : Code[20];StartDate@1100528603 : Date;EndDate@1100529606 : Date;ServiceCategory@1100528602 : Code[10];SourceType@1100528601 : Option;ServiceOrderNo@1100528600 : Code[20];TotalingType@1100529602 : 'All,Profit,Loss';CheckDate@1100529605 : Date;VAR PrognosisDate@1100529604 : Date;VAR PrognosisTotalCost@1100529600 : Decimal;VAR PrognosisTotalRevenue@1100529601 : Decimal);
    VAR
      ServicePrognosisLine@1100528607 : Record 11072310;
      PrognosisFinancialResult@1100529603 : Decimal;
    BEGIN
      PrognosisDate := 0D;
      PrognosisTotalCost := 0;
      PrognosisTotalRevenue := 0;

      ServicePrognosisLine.SETCURRENTKEY("Service Contract No.");
      ServicePrognosisLine.SETRANGE("Service Contract No.", ServiceContractNo);
      ServicePrognosisLine.SETRANGE("Line Type", LineType);
      IF ServiceCategory <> '*' THEN
        IF LineType IN [ServicePrognosisLine."Line Type"::"Service Category", ServicePrognosisLine."Line Type"::"Source Type", ServicePrognosisLine."Line Type"::"Service Order"] THEN
          ServicePrognosisLine.SETRANGE("Service Category", ServiceCategory);
      IF LineType IN [ServicePrognosisLine."Line Type"::"Source Type", ServicePrognosisLine."Line Type"::"Service Order"] THEN
        ServicePrognosisLine.SETRANGE("Source Type", SourceType);
      IF LineType IN [ServicePrognosisLine."Line Type"::"Service Order"] THEN
        ServicePrognosisLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServicePrognosisLine.SETFILTER("Starting Date", '>=%1', StartDate);
      ServicePrognosisLine.SETFILTER("Ending Date", '<=%1', EndDate);
      ServicePrognosisLine.SETFILTER("Prognosis Date", '<=%1', CheckDate);

      IF ServicePrognosisLine.ISEMPTY THEN
        EXIT;

      ServicePrognosisLine.FINDLAST;
      PrognosisDate := ServicePrognosisLine."Prognosis Date";
      ServicePrognosisLine.SETRANGE("Prognosis Date", ServicePrognosisLine."Prognosis Date");
      ServicePrognosisLine.SETRANGE("Prognosis Seq. No.", ServicePrognosisLine."Prognosis Seq. No.");
      IF TotalingType = TotalingType::All THEN BEGIN
        ServicePrognosisLine.CALCSUMS("Prognosis Total Cost", "Prognosis Total Revenue (SC)", ServicePrognosisLine."Prognosis Total Revenue (SO)");
        PrognosisTotalCost := ServicePrognosisLine."Prognosis Total Cost";
        PrognosisTotalRevenue := ServicePrognosisLine."Prognosis Total Revenue (SC)" + ServicePrognosisLine."Prognosis Total Revenue (SO)";
      END ELSE BEGIN
        ServicePrognosisLine.FINDSET;
        REPEAT
          PrognosisFinancialResult := ServicePrognosisLine."Prognosis Total Revenue (SC)" + ServicePrognosisLine."Prognosis Total Revenue (SO)" - ServicePrognosisLine."Prognosis Total Cost";
          IF ((TotalingType = TotalingType::Profit) AND (PrognosisFinancialResult > 0)) OR
             ((TotalingType = TotalingType::Loss) AND (PrognosisFinancialResult <0))
          THEN BEGIN
            PrognosisTotalCost += ServicePrognosisLine."Prognosis Total Cost";
            PrognosisTotalRevenue += ServicePrognosisLine."Prognosis Total Revenue (SC)" + ServicePrognosisLine."Prognosis Total Revenue (SO)";
          END;
        UNTIL ServicePrognosisLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetPrognosisProgressPercentageSummaryLevel@1100529603(PrognosisDate@1100529605 : Date;LineType@1100528605 : Option;ServiceContractNo@1100528604 : Code[20];StartDate@1100528603 : Date;EndDate@1100529606 : Date;ServiceCategory@1100528602 : Code[10];SourceType@1100528601 : Option;ServiceOrderNo@1100528600 : Code[20];TotalingType@1100529602 : 'All,Profit,Loss') CumulativeProgressPerc : Decimal;
    VAR
      ServicePrognosisLine@1100528607 : Record 11072310;
      Date@1100529613 : Record 2000000007;
      NoOfDaysPast@1100529614 : Integer;
      PrognosisFinancialResult@1100529603 : Decimal;
      ActualCost@1100529608 : Decimal;
      PrognosisTotalCost@1100529609 : Decimal;
    BEGIN
      CumulativeProgressPerc := 0;

      ServicePrognosisLine.SETRANGE("Prognosis Date", PrognosisDate);
      ServicePrognosisLine.SETRANGE("Service Contract No.", ServiceContractNo);
      ServicePrognosisLine.SETRANGE("Line Type", LineType);
      IF ServiceCategory <> '*' THEN
        IF LineType IN [ServicePrognosisLine."Line Type"::"Service Category", ServicePrognosisLine."Line Type"::"Source Type", ServicePrognosisLine."Line Type"::"Service Order"] THEN
          ServicePrognosisLine.SETRANGE("Service Category", ServiceCategory);
      IF LineType IN [ServicePrognosisLine."Line Type"::"Source Type", ServicePrognosisLine."Line Type"::"Service Order"] THEN
        ServicePrognosisLine.SETRANGE("Source Type", SourceType);
      IF LineType IN [ServicePrognosisLine."Line Type"::"Service Order"] THEN
        ServicePrognosisLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServicePrognosisLine.SETFILTER("Starting Date", '>=%1', StartDate);
      ServicePrognosisLine.SETFILTER("Ending Date", '<=%1', EndDate);

      IF ServicePrognosisLine.ISEMPTY THEN
        EXIT;

      ServicePrognosisLine.FINDLAST;
      ServicePrognosisLine.SETRANGE("Prognosis Seq. No.", ServicePrognosisLine."Prognosis Seq. No.");
      ServicePrognosisLine.SETRANGE("Progress Method", ServicePrognosisLine."Progress Method"::"Actual Cost");
      IF ServicePrognosisLine.FINDSET THEN
        REPEAT
          PrognosisFinancialResult := ServicePrognosisLine."Prognosis Total Revenue (SC)" + ServicePrognosisLine."Prognosis Total Revenue (SO)" - ServicePrognosisLine."Prognosis Total Cost";
          IF (TotalingType = TotalingType::All) OR
             ((TotalingType = TotalingType::Profit) AND (PrognosisFinancialResult > 0)) OR
             ((TotalingType = TotalingType::Loss) AND (PrognosisFinancialResult <0))
          THEN BEGIN
            ActualCost += ServicePrognosisLine."Actual Cost";
            PrognosisTotalCost += ServicePrognosisLine."Prognosis Total Cost";
          END;
        UNTIL ServicePrognosisLine.NEXT = 0;

      ServicePrognosisLine.SETRANGE("Progress Method");
      IF ServicePrognosisLine.FINDLAST THEN
        CASE ServicePrognosisLine."Progress Method" OF
          ServicePrognosisLine."Progress Method"::"Actual Cost":
            IF PrognosisTotalCost <> 0 THEN
              CumulativeProgressPerc := ActualCost / PrognosisTotalCost * 100;
          ServicePrognosisLine."Progress Method"::"Elapsed Time":
            BEGIN
              Date.SETRANGE("Period Type", Date."Period Type"::Date);
              IF PrognosisDate > EndDate THEN
                Date.SETRANGE("Period Start", StartDate, EndDate)
              ELSE
                Date.SETRANGE("Period Start", StartDate, PrognosisDate);
              NoOfDaysPast := Date.COUNT;
              Date.SETRANGE("Period Start", StartDate, EndDate);
              IF NOT Date.ISEMPTY THEN
                CumulativeProgressPerc := NoOfDaysPast / Date.COUNT * 100;
            END;
        END;
    END;

    LOCAL PROCEDURE "----"@1100528610();
    BEGIN
    END;

    PROCEDURE DeterminePrognosisRevenueSO@1100528611(VAR IServicePrognosisLine@1100528600 : Record 11072310;IFactor@1100528602 : Decimal;OverwriteValue@1100529600 : Boolean);
    VAR
      ServicePrognosisLine@1100528601 : Record 11072310;
      TmpServicePrognosisLine@1100528603 : TEMPORARY Record 11072310;
    BEGIN
      ServicePrognosisLine.COPY(IServicePrognosisLine);
      IF ServicePrognosisLine.FINDSET(TRUE) THEN
        REPEAT
          TmpServicePrognosisLine.SETRANGE("Prognosis Date", ServicePrognosisLine."Prognosis Date");
          TmpServicePrognosisLine.SETRANGE("Prognosis Seq. No.", ServicePrognosisLine."Prognosis Seq. No.");
          TmpServicePrognosisLine.SETRANGE("Service Contract No.", ServicePrognosisLine."Service Contract No.");
          TmpServicePrognosisLine.SETRANGE("Global Dimension 1 Code", ServicePrognosisLine."Global Dimension 1 Code");
          TmpServicePrognosisLine.SETRANGE("Control Period Code", ServicePrognosisLine."Control Period Code");
          TmpServicePrognosisLine.SETFILTER("Line Type", '<%1', ServicePrognosisLine."Line Type");
          IF TmpServicePrognosisLine.ISEMPTY THEN BEGIN
            IF ServicePrognosisLine.DeterminePrognosisRevenueSO(IFactor, OverwriteValue) THEN
              ServicePrognosisLine.MODIFY(TRUE);
            TmpServicePrognosisLine := ServicePrognosisLine;
            TmpServicePrognosisLine.INSERT;
          END;
        UNTIL ServicePrognosisLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

