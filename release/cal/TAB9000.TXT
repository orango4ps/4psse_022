OBJECT Table 9000 User Group
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               TESTFIELD(Code);
               Customized := TRUE;
             END;

    OnModify=BEGIN
               Customized := TRUE;
             END;

    OnDelete=VAR
               UserGroupMember@1000 : Record 9001;
               UserGroupPlan@1001 : Record 9007;
             BEGIN
               UserGroupMember.SETRANGE("User Group Code",Code);
               IF NOT UserGroupMember.ISEMPTY THEN
                 ERROR(HasMembersErr);

               UserGroupPlan.SETRANGE("User Group Code",Code);
               IF NOT UserGroupPlan.ISEMPTY THEN
                 ERROR(PartOfPlansErr);
             END;

    OnRename=BEGIN
               Customized := TRUE;
             END;

    ReplicateData=No;
    CaptionML=[ENU=User Group;
               NOR=Brukergruppe;
               SVE=Anv„ndargrupp];
    LookupPageID=Page9830;
    DrillDownPageID=Page9830;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 3   ;   ;Default Profile ID  ;Code30        ;TableRelation="All Profile"."Profile ID";
                                                   CaptionML=[ENU=Default Profile ID;
                                                              NOR=ID for standardprofil] }
    { 4   ;   ;Assign to All New Users;Boolean    ;OnValidate=VAR
                                                                UserGroup@1000 : Record 9000;
                                                                PermissionManager@1001 : Codeunit 9002;
                                                              BEGIN
                                                                IF NOT PermissionManager.SoftwareAsAService THEN
                                                                  EXIT;

                                                                IF "Assign to All New Users" = TRUE THEN
                                                                  EXIT;

                                                                // When deselecting this option, if the last auto-assign user group is deselected,
                                                                // it means that new users will get no permissions
                                                                // and therefore they will not be able to login.
                                                                UserGroup.SETRANGE("Assign to All New Users",TRUE);
                                                                UserGroup.SETFILTER(Code,'<>%1',Code);
                                                                IF UserGroup.COUNT = 0 THEN
                                                                  IF NOT CONFIRM(NewUsersCannotLoginQst) THEN
                                                                    ERROR('');
                                                              END;

                                                   CaptionML=[ENU=Assign to All New Users;
                                                              NOR=Tilordne til alle nye brukere] }
    { 5   ;   ;Customized          ;Boolean       ;CaptionML=[ENU=Customized;
                                                              NOR=Tilpasset;
                                                              SVE=Kundspecifikt];
                                                   Editable=No }
    { 6   ;   ;Default Profile App ID;GUID        ;CaptionML=[ENU=Default Profile App ID;
                                                              NOR=Standard profilapp-ID] }
    { 7   ;   ;Default Profile Scope;Option       ;CaptionML=[ENU=Default Profile Scope;
                                                              NOR=Standard profilomfang];
                                                   OptionCaptionML=[ENU=System,Tenant;
                                                                    NOR=System,Leietaker;
                                                                    SVE=System,klientorganisation];
                                                   OptionString=System,Tenant }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HasMembersErr@1002 : TextConst 'ENU=You cannot delete this user group because it has members.;NOR=Du kan ikke slette denne brukergruppen. Den inneholder medlemmer.';
      NewUsersCannotLoginQst@1000 : TextConst 'ENU=You have not specified a user group that will be assigned automatically to new users. If users are not assigned a user group, they cannot sign in. \\Do you want to continue?;NOR=Du har ikke angitt en brukergruppe som blir tilordnet automatisk til nye brukere. Hvis brukere ikke f†r tilordnet en brukergruppe, kan de ikke logge p†. \\Vil du fortsette?';
      PartOfPlansErr@1001 : TextConst 'ENU=You cannot delete this user group because it is part of one or more plans.;NOR=Du kan ikke slette denne brukergruppen fordi den er en del av en eller flere planer.';

    [External]
    PROCEDURE IsUserMember@14(VAR User@1001 : Record 2000000120;SelectedCompany@1000 : Text[30]) : Boolean;
    VAR
      UserGroupMember@1002 : Record 9001;
    BEGIN
      UserGroupMember.SETRANGE("User Group Code",Code);
      UserGroupMember.SETRANGE("User Security ID",User."User Security ID");
      UserGroupMember.SETRANGE("Company Name",SelectedCompany);
      EXIT(NOT UserGroupMember.ISEMPTY);
    END;

    [External]
    PROCEDURE SetUserGroupMembership@7(VAR User@1001 : Record 2000000120;NewUserGroupMembership@1003 : Boolean;SelectedCompany@1000 : Text[30]);
    VAR
      UserGroupMember@1002 : Record 9001;
    BEGIN
      IF UserGroupMember.GET(Code,User."User Security ID",SelectedCompany) THEN BEGIN
        IF NOT NewUserGroupMembership THEN
          UserGroupMember.DELETE(TRUE);
        EXIT;
      END;
      IF NOT NewUserGroupMembership THEN
        EXIT;
      UserGroupMember.INIT;
      UserGroupMember."User Group Code" := Code;
      UserGroupMember."User Security ID" := User."User Security ID";
      UserGroupMember."Company Name" := SelectedCompany;
      UserGroupMember.INSERT(TRUE);
    END;

    [Internal]
    PROCEDURE ExportUserGroups@1(FileName@1000 : Text) : Text;
    VAR
      TempBlob@1004 : Record 99008535;
      FileManagement@1003 : Codeunit 419;
      ExportImportUserGroups@1002 : XMLport 9000;
      OutStr@1001 : OutStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      ExportImportUserGroups.SETTABLEVIEW(Rec);
      ExportImportUserGroups.SETDESTINATION(OutStr);
      ExportImportUserGroups.EXPORT;
      IF FileName = '' THEN
        EXIT(FileManagement.BLOBExport(TempBlob,TABLECAPTION + '.xml',TRUE));
      EXIT(FileManagement.BLOBExport(TempBlob,FileName,FALSE));
    END;

    [Internal]
    PROCEDURE ImportUserGroups@2(FileName@1000 : Text);
    VAR
      TempBlob@1004 : Record 99008535;
      FileManagement@1003 : Codeunit 419;
      ExportImportUserGroups@1002 : XMLport 9000;
      InStr@1001 : InStream;
    BEGIN
      TempBlob.INIT;
      IF FileManagement.BLOBImport(TempBlob,FileName) = '' THEN
        EXIT;
      TempBlob.Blob.CREATEINSTREAM(InStr);
      ExportImportUserGroups.SETSOURCE(InStr);
      ExportImportUserGroups.IMPORT;
    END;

    BEGIN
    END.
  }
}

