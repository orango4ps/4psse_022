OBJECT Table 11072076 Estimate Part Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckNormPrice;
               UpdateEstimateCode;  //C038312
             END;

    OnModify=BEGIN
               CheckNormPrice;
             END;

    OnDelete=VAR
               TextRec@1100409000 : Record 11020595;
             BEGIN
               EstimateMgmt.ModifyLinkedPartLines(0,Rec,0); //0:delete

               EstCodeRec.RESET;
               EstCodeRec.SETRANGE("Estimate No.", '');
               EstCodeRec.SETRANGE("Sub-Estimate No.", '');
               EstCodeRec.SETRANGE("Part Group", "Part Group");
               EstCodeRec.SETRANGE(Part, Part);
               EstCodeRec.SETRANGE("Estimate Line", "Line No.");
               EstCodeRec.DELETEALL;

               ChrgRec.RESET;
               ChrgRec.SETRANGE("Estimate No.",'');
               ChrgRec.SETRANGE("Sub-Estimate No.",'');
               ChrgRec.SETRANGE("Part Group","Part Group");
               ChrgRec.SETRANGE(Part,Part);
               ChrgRec.SETRANGE("Recipe Line",0);  //don't remove surcharge of recipe lines
               ChrgRec.SETRANGE("Basic Line","Line No.");      //remove estimated lines included in surcharge
               ChrgRec.DELETEALL;
               ChrgRec.SETRANGE("Basic Line");
               ChrgRec.SETRANGE("Surcharge Line","Line No.");  //delete surcharge lines
               ChrgRec.DELETEALL;

               BufferRec.RESET;
               BufferRec.SETRANGE("Estimate No.", '');
               BufferRec.SETRANGE("Sub-Estimate No.", '');
               BufferRec.SETRANGE("Part Group", "Part Group");
               BufferRec.SETRANGE(Part, Part);
               BufferRec.SETRANGE("Estimate Line", "Line No.");
               BufferRec.DELETEALL;

               TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
               TextRec.SETFILTER(Group, '%1', '');
               TextRec.SETFILTER("No.", '%1', '');
               TextRec.SETFILTER("Estimate No.", '%1', '');
               TextRec.SETFILTER("Sub-Estimate No.", '%1', '');
               TextRec.SETRANGE("Part Group", "Part Group");
               TextRec.SETRANGE(Part, Part);
               TextRec.SETRANGE("Estimate Line No.", 0);
               TextRec.SETRANGE("Part Line No.","Line No.");   //DP00686
               TextRec.DELETEALL;
             END;

    CaptionML=[ENU=Estimate Part Line;
               NOR=Kalkyle Í Delrad;
               SVE=Kalkyl Í delrad];
  }
  FIELDS
  {
    { 10  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Part));
                                                   CaptionML=[ENU=Part Group;
                                                              NOR=Del gruppe;
                                                              SVE=Delgrupp] }
    { 20  ;   ;Part                ;Code20        ;TableRelation="Estimate Base Part".Code WHERE (Part Group=FIELD(Part Group));
                                                   CaptionML=[ENU=Part;
                                                              NOR=Del;
                                                              SVE=Del];
                                                   NotBlank=Yes }
    { 30  ;   ;Line No.            ;Integer       ;ValidateTableRelation=No;
                                                   CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 35  ;   ;Attached to Line No.;Integer       ;TableRelation="Estimate Part Line"."Line No." WHERE (Part Group=FIELD(Part Group),
                                                                                                        Part=FIELD(Part));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              NOR=Knyttet til linjenr.;
                                                              SVE=Bifogad till radnr];
                                                   Description=DP00381;
                                                   Editable=No }
    { 40  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   OnValidate=BEGIN
                                                                IF ("Recipe Group" = '') AND (Recipe <> '') THEN BEGIN
                                                                  Recipe := '';
                                                                  "Rate Code" := '';
                                                                  "Sub Operation Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Recipe Group;
                                                              NOR=Maltype;
                                                              SVE=Malltyp] }
    { 50  ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=VAR
                                                                RecipeRec@1210190000 : Record 11020581;
                                                              BEGIN
                                                                IF (Recipe <> xRec.Recipe) AND (Recipe <> '') THEN BEGIN
                                                                  CheckCostTypePriceAllowed;
                                                                  RecipeRec.GET("Recipe Group", Recipe);
                                                                  RecipeRec.TESTFIELD(Blocked, FALSE);
                                                                  CopyRecipeText;  //DP00686
                                                                  Description := RecipeRec.Description;
                                                                  "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                  "Rate Code" := '';
                                                                  "Sub Operation Code" := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Recipe;
                                                              NOR=Mal;
                                                              SVE=Mall] }
    { 60  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 70  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 80  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 100 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverandr (katalogartikkel);
                                                              SVE=Leverantr (skaffningsartikel)] }
    { 110 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 120 ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 130 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   CaptionML=[ENU=Time Quantity;
                                                              NOR=Tidskvantitet;
                                                              SVE=Tidskvantitet];
                                                   BlankZero=Yes }
    { 140 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Time;
                                                              NOR=Tidsenhet;
                                                              SVE=Tidsenhet] }
    { 150 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                EstimateMgmt.SetQuantityRatio(Quantity, xRec.Quantity);  //C044680
                                                                EstimateMgmt.ModifyLinkedPartLines(1,Rec,0); //1:modify quantity
                                                              END;

                                                   OnLookup=BEGIN
                                                              //DP00686
                                                              IF EnterQuantity(4) THEN
                                                                EditQuanSheet;
                                                            END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 160 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                  ValidateUnitOfMeasure("Unit of Measure");
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=Enhet;
                                                              SVE=Enhet] }
    { 170 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=[ENU=External Text;
                                                              NOR=Ekstern Tekst;
                                                              SVE=Extern text] }
    { 171 ;   ;External Text Block ;Boolean       ;CaptionML=[ENU=External Text Block;
                                                              NOR=Ekstern Tekstblokk;
                                                              SVE=Externt textblock];
                                                   Editable=No }
    { 175 ;   ;Internal Text       ;Text250       ;OnValidate=BEGIN
                                                                "Internal Text Block" := "Internal Text" <> '';
                                                              END;

                                                   CaptionML=[ENU=Internal Text;
                                                              NOR=Intern tekst;
                                                              SVE=Intern text] }
    { 176 ;   ;Internal Text Block ;Boolean       ;CaptionML=[ENU=Internal Text Block;
                                                              NOR=Intern tekstblokkering;
                                                              SVE=Internt textblock];
                                                   Editable=No }
    { 180 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Labor",xRec."Cost Object Labor");
                                                              END;

                                                   CaptionML=[ENU=Cost Object Labor;
                                                              NOR=Kostnadsobjekt, arbeidskraft;
                                                              SVE=Kostnadsobjekt, arbetskraft] }
    { 215 ;   ;Cost Object Price   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(Material..Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Price",xRec."Cost Object Price");
                                                              END;

                                                   CaptionML=ENU=Cost Object Price;
                                                   Description=DP00381 }
    { 220 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                SubOperRec@1210190001 : Record 11012166;
                                                                OperRec@1210190000 : Record 11012165;
                                                              BEGIN
                                                                IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                  SubOperRec.TESTFIELD(Expired,FALSE);
                                                                  IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                    IF ("Cost Object Labor" = '') OR (OldSubOperationDefault = TRUE) THEN BEGIN
                                                                      VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                      CheckCostObject("Cost Object Labor",FALSE);
                                                                    END;
                                                                    IF OperRec."Rate Code" <> '' THEN
                                                                      VALIDATE("Rate Code", OperRec."Rate Code");
                                                                  END;
                                                                END;
                                                                ProcessSubOperation;
                                                              END;

                                                   CaptionML=[ENU=Sub Operation Code;
                                                              NOR=Underinnsatskode;
                                                              SVE=Underinsatskod] }
    { 230 ;   ;Rate Code           ;Code10        ;TableRelation="Rate by Group"."Rate Code";
                                                   OnValidate=BEGIN
                                                                CheckRateCode(0);
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckRateCode(1);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod] }
    { 240 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=[ENU=Line Status;
                                                              NOR=Radstatus;
                                                              SVE=Radstatus] }
    { 250 ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                UpdateEstimateCode;  //C038312
                                                              END;

                                                   OnLookup=BEGIN
                                                              GrpRec.GET("Part Group", GrpRec.Type::Part);
                                                              GrpRec.TESTFIELD("Coding System");

                                                              CodeRec.SETRANGE("Coding System", GrpRec."Coding System");
                                                              CodeRec.Code := Code;
                                                              IF PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Code, CodeRec.Code);
                                                            END;

                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 260 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor;
                                                              NOR=Leverandr;
                                                              SVE=Leverantr] }
    { 261 ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverandrnavn;
                                                              SVE=Leverantrsnamn];
                                                   Editable=No }
    { 270 ;   ;Adjustment Factor Hours;Decimal    ;CaptionML=[ENU=Hours Adjustment Factor;
                                                              NOR=Timejusteringsfaktor;
                                                              SVE=Timjusteringsfaktor];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 271 ;   ;Adjustment Factor Price;Decimal    ;CaptionML=ENU=Price Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   Description=DP00381 }
    { 280 ;   ;Surcharge %         ;Decimal       ;CaptionML=[ENU=Surcharge %;
                                                              NOR=Tilleggsgebyrsprosent;
                                                              SVE=Tillggsavgiftsprocent];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 285 ;   ;Surcharge Type      ;Option        ;OnValidate=BEGIN
                                                                IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
                                                                  Quantity := 1;
                                                                  "Sub Operation Code" := '';
                                                                  "Adjustment Factor Hours" := 0;
                                                                  "Adjustment Factor Price" := 0;
                                                                  "Adj. Factor Hours (Sales)" := 0;  //DP00555
                                                                END ELSE BEGIN
                                                                  ERROR(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Surcharge Type;
                                                              NOR=Tilleggsgebyrtype;
                                                              SVE=Tillggsavgiftstyp];
                                                   OptionCaptionML=[ENU=" ,Labor,Material,Subcontracting,Plant";
                                                                    NOR=" ,Arbeidskraft,Materiale,Underentrepenr,Maskin";
                                                                    SVE=" ,Arbetskraft,Material,Underentreprenad,Maskin"];
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant] }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Base Element".Code;
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  ElemRec.GET(Element);

                                                                GetDisciplineByElement;  //DP02460
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 300 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 310 ;   ;Norm                ;Decimal       ;CaptionML=[ENU=Norm;
                                                              NOR=Norm;
                                                              SVE=Norm];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 320 ;   ;Net Cost Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Net Cost Price (FCY)" := ExchangeAmtLCYToFCY("Net Cost Price", FALSE, TRUE, FALSE);  //DP02114
                                                                CalculateDiscount(Rec,FALSE);
                                                              END;

                                                   CaptionML=ENU=Net Cost Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 321 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Gross Price (FCY)" := ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);  //DP02114
                                                                CalculateNetPrice;
                                                              END;

                                                   CaptionML=[ENU=Gross Price;
                                                              NOR=Bruttopris;
                                                              SVE=Bruttopris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 322 ;   ;Purchase Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Purchase Discount %") THEN
                                                                  TESTFIELD("Gross Price");

                                                                CalculateNetPrice;
                                                              END;

                                                   CaptionML=[ENU=Purchase Discount %;
                                                              NOR=Innkjpsrabattprosent;
                                                              SVE=Inkpsrabattprocent];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 330 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=[ENU=Discipline;
                                                              NOR=Disiplin;
                                                              SVE=Disciplin] }
    { 331 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=[ENU=Trade Speciality;
                                                              NOR=SNI-nummer;
                                                              SVE=SNI-nummer] }
    { 332 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=[ENU=Trade Expertise;
                                                              NOR=Bransjeekspertise;
                                                              SVE=Branschexpertis] }
    { 345 ;   ;Subcontracting Activity;Code10     ;TableRelation="Subcontracting Activity".Code;
                                                   OnValidate=BEGIN
                                                                GetSubcontractorActivity(FIELDNO("Subcontracting Activity"));  //DP01958a
                                                              END;

                                                   CaptionML=ENU=Subcontracting Activity;
                                                   Description=DP01492-2 }
    { 350 ;   ;Subcontractor       ;Code20        ;TableRelation=IF (Subcontracting Activity=FILTER(='')) Vendor.No. WHERE (Subcontractor Type=FILTER(Subcontractor|Self Employed|Employment Agency))
                                                                 ELSE IF (Subcontracting Activity=FILTER(<>'')) "Subcontracting Activity Price"."Subcontractor No." WHERE (Subcontracting Activity=FIELD(Subcontracting Activity));
                                                   OnValidate=BEGIN
                                                                GetSubcontractorActivity(FIELDNO(Subcontractor));  //DP01958a
                                                              END;

                                                   CaptionML=[ENU=Subcontractor;
                                                              NOR=Underentreprenr;
                                                              SVE=Underentreprenr];
                                                   Description=DP01492-2 }
    { 351 ;   ;Subcontractor Name  ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=[ENU=Subcontractor Name;
                                                              NOR=Underentreprenrens navn;
                                                              SVE=Underentreprenrens namn];
                                                   Editable=No }
    { 360 ;   ;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningBaseActivity@1100528401 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Project Planning Activity Code;
                                                              NOR=Prosjektplan, Aktivitetskode;
                                                              SVE=Projektplan, aktivitetskod] }
    { 370 ;   ;Ignore Part Quantity;Boolean       ;CaptionML=[ENU=Ignore Part Quantity;
                                                              NOR=Ignorer delantall;
                                                              SVE=Ignorera delantal];
                                                   Description=DP00686 }
    { 380 ;   ;Quantity Sheet Feature;Code10      ;TableRelation="Est. Quantity Sheet Feature";
                                                   CaptionML=ENU=Quantity Sheet Feature;
                                                   Description=DP00686 }
    { 390 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                IF ("Plant Type" <> xRec."Plant Type") AND ("Plant Type" <> '') THEN BEGIN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::Plant THEN
                                                                    CheckCostTypePriceAllowed;
                                                                  GetDefaultsPlantType;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 391 ;   ;Plant Price Type    ;Option        ;CaptionML=[ENU=Plant Price Type;
                                                              NOR=Maskin Pristype;
                                                              SVE=Maskin pristyp];
                                                   OptionCaptionML=[ENU=" ,Day,Week,,Month,,,,,Hour";
                                                                    NOR=" ,Dag,Uke,,Mned,,,,,Time";
                                                                    SVE=" ,Dag,Vecka,,Mnad,,,,,Timme"];
                                                   OptionString=[ ,Day,Week,,Month,,,,,Hour];
                                                   Editable=No }
    { 392 ;   ;Start Rental Period ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                              END;

                                                   CaptionML=[ENU=Start Rental Period;
                                                              NOR=Start Leieperiode;
                                                              SVE=Starta uthyrningsperiod] }
    { 393 ;   ;End Rental Period   ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                              END;

                                                   CaptionML=[ENU=End Rental Period;
                                                              NOR=Slutt p Leieperiode;
                                                              SVE=Slut p uthyrningsperiod] }
    { 394 ;   ;Rental Period Formula;DateFormula  ;OnValidate=VAR
                                                                EstimateMgmt@1100525000 : Codeunit 11012232;
                                                              BEGIN
                                                                IF FORMAT("Rental Period Formula") <> '' THEN BEGIN
                                                                  VALIDATE("Time Quantity",EstimateMgmt.ConvPlantCalcPeriod("Rental Period Formula","Plant Price Type"));
                                                                END ELSE BEGIN
                                                                  IF "Rental Time Units" <> 0 THEN
                                                                    VALIDATE("Time Quantity","Rental Time Units")
                                                                  ELSE
                                                                    VALIDATE("Time Quantity",1);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Rental Period Formula;
                                                              NOR=Formel for Leieperiode;
                                                              SVE=Formel fr uthyrningsperiod] }
    { 395 ;   ;Rental Time Units   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rental Period Formula");
                                                              END;

                                                   CaptionML=[ENU=Rental Time Units;
                                                              NOR=Leietidsenhet;
                                                              SVE=Uthyrningstidsenhet];
                                                   BlankZero=Yes }
    { 400 ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   OnValidate=BEGIN
                                                                CalculateTotals;  //DP01931
                                                              END;

                                                   CaptionML=[ENU=Wage Component;
                                                              NOR=Lnnsart;
                                                              SVE=Lneart];
                                                   Description=DP01931 }
    { 2000;   ;Cost Type (Price)   ;Option        ;InitValue=Material;
                                                   CaptionML=ENU=Cost Type (Price);
                                                   OptionCaptionML=[ENU=" ,Material,Subcontracting,Plant,Sundry";
                                                                    SVE=" ,Material,Underentreprenad,Maskin,Diverse"];
                                                   OptionString=[ ,Material,Subcontracting,Plant,Sundry];
                                                   Description=DP00381 }
    { 2010;   ;Net Sales Price     ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Net Sales Price (FCY)" := ExchangeAmtLCYToFCY("Net Sales Price", TRUE, TRUE, FALSE);  //DP02114
                                                                CalculateDiscount(Rec,TRUE);
                                                              END;

                                                   CaptionML=ENU=Net Sales Price;
                                                   BlankZero=Yes;
                                                   Description=DP00381;
                                                   AutoFormatType=2 }
    { 2015;   ;Sales Discount %    ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Sales Discount %") THEN
                                                                  TESTFIELD("Gross Price");

                                                                IF "Sales Discount %"<> 0 THEN BEGIN
                                                                  EstSetup.GET;
                                                                  EstSetup.TESTFIELD("Item Sales Price Based On", EstSetup."Item Sales Price Based On"::GrossMin);
                                                                END;
                                                                CalculateNetPrice;
                                                              END;

                                                   CaptionML=[ENU=Sales Discount %;
                                                              NOR=Salgsrabattprosent;
                                                              SVE=Frsljningsrabattprocent];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 2020;   ;Adj. Factor Hours (Sales);Decimal  ;CaptionML=ENU=Hours Adjustment Factor (Sales);
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   Description=DP00555 }
    { 2030;   ;Cost Rate           ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN
                                                                  "Cost Rate (FCY)" := ExchangeAmtLCYToFCY("Cost Rate", FALSE, TRUE, FALSE);  //DP02114
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Cost Rate;
                                                              SVE=Avgift];
                                                   BlankZero=Yes;
                                                   Description=DP02114;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 2040;   ;Sales Rate          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN
                                                                  "Sales Rate (FCY)" := ExchangeAmtLCYToFCY("Sales Rate", TRUE, TRUE, FALSE);  //DP02114
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Sales Rate;
                                                              SVE=Frsljningsavgift];
                                                   BlankZero=Yes;
                                                   Description=DP02114;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 3000;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CheckCurrencyAgreement;
                                                                VALIDATE("Rate Code");
                                                                VALIDATE("Gross Price");
                                                                "Gross Price (FCY)" := ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);
                                                                CalculateTotals;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Currency Code;
                                                              SVE=Valutakod];
                                                   Description=DP02114 }
    { 3001;   ;Currency Agreement  ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Currency Agreement;
                                                              SVE=Valuta avtal];
                                                   Description=DP02114 }
    { 3010;   ;Net Cost Price (FCY);Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Net Cost Price", ExchangeAmtFCYToLCY("Net Cost Price (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Net Cost Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP02114;
                                                   AutoFormatType=2 }
    { 3020;   ;Net Sales Price (FCY);Decimal      ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Net Sales Price", ExchangeAmtFCYToLCY("Net Sales Price (FCY)", TRUE, TRUE, FALSE));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Net Sales Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP02114;
                                                   AutoFormatType=2 }
    { 3030;   ;Gross Price (FCY)   ;Decimal       ;OnValidate=VAR
                                                                SaveGrossPrice@1100525000 : Decimal;
                                                              BEGIN
                                                                //C026956.sn
                                                                //SetSkipValidateFCY(TRUE);
                                                                SaveGrossPrice := "Gross Price (FCY)";
                                                                VALIDATE("Gross Price", ExchangeAmtFCYToLCY("Gross Price (FCY)", FALSE, TRUE, FALSE));
                                                                IF CurrFieldNo = FIELDNO("Gross Price (FCY)") THEN
                                                                  "Gross Price (FCY)" := SaveGrossPrice;  //function CalculateDiscount cleared input on validate GrossPrice
                                                                //C026956.en
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Gross Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP02114;
                                                   AutoFormatType=2 }
    { 3040;   ;Cost Rate (FCY)     ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Cost Rate", ExchangeAmtFCYToLCY("Cost Rate (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Cost Rate (FCY);
                                                   Description=DP02114;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 3050;   ;Sales Rate (FCY)    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Sales Rate", ExchangeAmtFCYToLCY("Sales Rate (FCY)", TRUE, TRUE, FALSE));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Sales Rate (FCY);
                                                   Description=DP02114;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 3060;   ;Material Cost Amount (FCY);Decimal ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Material Cost Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3070;   ;Material Sales Amount (FCY);Decimal;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Material Sales Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3080;   ;Gross Amount (FCY)  ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Gross Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3090;   ;Subcontr. Cost Amount (FCY);Decimal;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Subcontracting Cost Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3100;   ;Subcontr. Sales Amount (FCY);Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Subcontracting Sales Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3120;   ;Plant Cost Amount (FCY);Decimal    ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Plant Cost Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3130;   ;Plant Sales Amount (FCY);Decimal   ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Plant Sales Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3150;   ;Sundry Cost Amount (FCY);Decimal   ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Sundry Cost Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3160;   ;Sundry Sales Amount (FCY);Decimal  ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Sundry Sales Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3180;   ;Cost Amount (FCY)   ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Cost Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3190;   ;Sales Amount (FCY)  ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Sales Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3200;   ;Labor Cost Amount (FCY);Decimal    ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Labor Cost Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3210;   ;Labor Sales Amount (FCY);Decimal   ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Labor Sales Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3230;   ;Net Cost Amount (FCY);Decimal      ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Net Cost Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
    { 3240;   ;Net Sales Amount (FCY);Decimal     ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Net Sales Amount (FCY);
                                                   Description=DP02114;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Part Group,Part,Line No.                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EstSetup@1100409001 : Record 11012150;
      GrpRec@1210190005 : Record 11012157;
      CodeRec@1210190006 : Record 11012089;
      ChrgRec@1100485001 : Record 11229771;
      EstCodeRec@1210190007 : Record 11229772;
      BufferRec@1100485007 : Record 11012195;
      ItemRec@1210190002 : Record 27;
      BasicItemRec@1100485005 : Record 11012316;
      TradeItemRec@1100485006 : Record 11012317;
      DimValRec@1210190004 : Record 349;
      ElemRec@1210190009 : Record 11012060;
      ValidateCu@1210190001 : Codeunit 11012033;
      DimMgt@1210190003 : Codeunit 408;
      FormatMgt@1210190008 : Codeunit 11012022;
      ItemTypeOpt@1210190000 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text004@1100485000 : TextConst 'ENU=Remove Charge Line;NOR=Fjern gebyrrader;SVE=Ta bort avgiftsrader';
      TmpPartLineRec@1100485002 : TEMPORARY Record 11072076;
      TradeExpRec@1100485003 : Record 11020286;
      EstimateMgmt@1100525000 : Codeunit 11012232;
      Text011@1100409000 : TextConst 'ENU=Add Line first.;NOR=Legg til rad frst.;SVE=Lgg till rad frst.';
      EstSetupRead@1100528901 : Boolean;
      SkipValidateFCY@1100528900 : Boolean;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDec@1210190000 : Decimal;
      DummyDate@1210190002 : Date;
      DummyCode@1100485000 : Code[20];
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190004 : Text[50];
      lvCostObject@1210190003 : Code[20];
      lvRefDate@1100485001 : Date;
    BEGIN
      lvRefDate := ValidateCu.CheckRefDateLevel('');

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item",lvCostObject,Desc1Txt,"Unit of Measure",DummyDec,
                              DummyDec,DummyDate,DummyDec,Desc2Txt,DummyCode,
                              DummyCode,DummyCode,lvRefDate,'');
      IF Desc2Txt = '' THEN
        Description := Desc1Txt
      ELSE
        Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

      IF (lvCostObject <> '') AND (STRLEN(lvCostObject) <= MAXSTRLEN("Cost Object Price")) THEN
        "Cost Object Price" := lvCostObject;

      IF ItemRec.GET("Item No.") THEN
        VALIDATE("External Text", ItemRec.Text);

      IF "Sub Operation Code" <> '' THEN
        Norm := 0;

      CASE LTypeArtOpt OF
        LTypeArtOpt::Item:
          BEGIN
            IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
            ItemRec.TESTFIELD(Blocked,FALSE);
            VALIDATE("Sub Operation Code", ItemRec."Sub Operation Code");
            CopyItemText;  //DP00686
          END;
        LTypeArtOpt::"Basic Item":
          BEGIN
            IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
            BasicItemRec.TESTFIELD(Expired,FALSE);
            VALIDATE("Sub Operation Code", BasicItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Trade Item":
          BEGIN
            IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
            TradeItemRec.TESTFIELD(Expired,FALSE);
            VALIDATE("Sub Operation Code", TradeItemRec."Sub Operation Code");
          END;
      END;
    END;

    PROCEDURE FillDescriptionFromCostObject@1210190005(ICostObject@1210190000 : Code[20];IxCostObject@1210190001 : Code[20]);
    BEGIN
      IF (ICostObject <> '') AND ((ICostObject <> IxCostObject) OR (Description = '')) AND
         ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') THEN BEGIN
        IF Description = '' THEN BEGIN
          DimMgt.GetDimValueRec(2, ICostObject, DimValRec, FALSE,'');
          Description := DimValRec.Name;
          EXIT;
        END;
        IF IxCostObject <> '' THEN BEGIN
          DimMgt.GetDimValueRec(2, IxCostObject, DimValRec, FALSE,'');
          IF Description = DimValRec.Name THEN BEGIN
            DimMgt.GetDimValueRec(2, ICostObject, DimValRec, FALSE,'');
            IF DimValRec.Name <> '' THEN
              Description := DimValRec.Name;
          END
        END;
      END;
    END;

    PROCEDURE HandleLookupRecipe@1100528900() lvRefresh : Boolean;
    VAR
      RecipeFrm@1100528901 : Page 11125073;
      RecipeRec@1100528900 : Record 11020581;
    BEGIN
      //DP00381
      CLEAR(RecipeFrm);
      RecipeFrm.LOOKUPMODE(TRUE);
      RecipeFrm.SetSelection(DATABASE::"Estimate Part Line",'','',"Part Group",Part,'','','','','',TRUE,"Line No.");  //C027336
      RecipeRec.SETRANGE("Recipe Group","Recipe Group");
      IF RecipeRec.GET("Recipe Group",Recipe) THEN
        RecipeFrm.SETRECORD(RecipeRec);
      RecipeFrm.SETTABLEVIEW(RecipeRec);
      IF RecipeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        RecipeFrm.GETRECORD(RecipeRec);
        "Recipe Group" := RecipeRec."Recipe Group";
        VALIDATE(Recipe, RecipeRec."No.");
      END ELSE BEGIN
        lvRefresh := RecipeFrm.CheckMultiCopy;
      END;

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupItem@1100525003(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525012 : Record 27;
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      lvTempPartLine@1100528900 : TEMPORARY Record 11072076;
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
    BEGIN
      //DP00381
      IF Recipe <> '' THEN EXIT;

      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Estimate Part Line",'','',Part,'',0,'',"Part Group","Line No.",'','');

        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);

        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Estimate Part Line",'','',Part,'',0,'',"Part Group", "Line No.",'','');

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          lvRefresh :=  BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempPartLine.INIT;
          lvTempPartLine."Recipe Group" := "Recipe Group";
          lvTempPartLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempPartLine."Trade Item";
          g_Vendor := lvTempPartLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Estimate Part Line",
          '', '', Part, '', 0, '', "Part Group", "Line No.", '', '',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1100485001 : Record 5404;
      lvUnit@1100485000 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, Vendor);
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1100485001 : Record 11072076;MainOldRec@1100485000 : Record 11072076);
    VAR
      ItemRec@1100485007 : Record 27;
      UnitFactor@1100485006 : Decimal;
      UnitFactorOld@1100485005 : Decimal;
      UnitFactorNew@1100485004 : Decimal;
      UnitControl@1100485002 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,Vendor,
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,Vendor,
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,Vendor,
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CreateCharge@4();
    VAR
      lvPartLineRec@1100485000 : Record 11072076;
      ChrgRec@11012000 : Record 11229771;
      ChrgLine@11012001 : Integer;
      ChrgDesc@11012002 : Text[100];
      lvText001@1100485006 : TextConst 'ENU=Current line is not a surcharge line.;NOR=Aktuell rad er ikke en tilleggsgebyrsrad.;SVE=Aktuell rad r inte en tillggsavgiftrad.';
      lvText003@1100485004 : TextConst 'ENU=Are these Part lines the basis for calculating surcharge for %1 ?;NOR=Utgjr disse delradene beregningsgrunnlag for tilleggsgebyr for %1?;SVE=Utgr dessa delrader berkningsunderlag fr tillggsavgift fr %1?';
      lvText004@1100409000 : TextConst 'ENU=First select Lines;NOR=Velg rad(er) frst;SVE=Vlj rader frst';
    BEGIN
      lvPartLineRec.COPY(Rec);

      WITH lvPartLineRec DO BEGIN
        ChrgLine := "Line No.";
        ChrgDesc := Description;
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;
        IF "Surcharge Type" = "Surcharge Type"::Labor THEN
          TESTFIELD("Rate Code");  //C049505

        SETFILTER("Surcharge Type", '%1', "Surcharge Type"::" ");
        SETFILTER("Line No.", '<>%1', "Line No.");

        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(lvText004);
        END ELSE BEGIN
          IF CONFIRM(lvText003, TRUE, ChrgDesc) THEN BEGIN
            REPEAT;
              //IF NOT ChrgRec.GET('', '', "Part Group", Part, 0, '', '', ChrgLine, "Line No.") THEN BEGIN
              IF NOT ChrgRec.GET('', '', "Part Group", Part, 0, 0, '', 0, '', '', ChrgLine, "Line No.") THEN BEGIN  //DP00481
                ChrgRec.INIT;
                ChrgRec."Estimate No." := '';
                ChrgRec."Sub-Estimate No." := '';
                ChrgRec."Part Group" := "Part Group";
                ChrgRec.Part := Part;
                ChrgRec."Surcharge Line" := ChrgLine;
                ChrgRec."Basic Line" := "Line No.";
                ChrgRec.INSERT;
              END;
            UNTIL NEXT = 0;
          END;
        END;
      END;
      CLEARMARKS;
    END;

    PROCEDURE CompressLines@1100485000(lvPartGrp@1100485002 : Code[20];lvPart@1100485003 : Code[20]);
    VAR
      lvPartLineRec@1100485000 : Record 11072076;
      lvPartLineRec2@1100485001 : Record 11072076;
    BEGIN
      lvPartLineRec.SETRANGE("Part Group", lvPartGrp);
      lvPartLineRec.SETRANGE(Part, lvPart);
      lvPartLineRec.SETRANGE("Surcharge Type", lvPartLineRec."Surcharge Type"::" ");
      lvPartLineRec.SETFILTER("Item No.", '%1', '');
      lvPartLineRec.SETFILTER("Basic Item", '%1', '');
      lvPartLineRec.SETFILTER("Trade Item", '%1', '');
      IF lvPartLineRec.FIND('-') THEN BEGIN
        REPEAT
          lvPartLineRec2.COPY(lvPartLineRec);
          lvPartLineRec2.SETFILTER("Line No.", '>%1', lvPartLineRec."Line No.");
          lvPartLineRec2.SETRANGE("Recipe Group", lvPartLineRec."Recipe Group");
          lvPartLineRec2.SETRANGE(Recipe, lvPartLineRec.Recipe);

          lvPartLineRec2.SETRANGE(Description, lvPartLineRec.Description);
          lvPartLineRec2.SETRANGE(Norm, lvPartLineRec.Norm);
          lvPartLineRec2.SETRANGE("Gross Price", lvPartLineRec."Gross Price");
          lvPartLineRec2.SETRANGE("Net Cost Price", lvPartLineRec."Net Cost Price");
          lvPartLineRec2.SETRANGE("Net Sales Price", lvPartLineRec."Net Sales Price");
          lvPartLineRec2.SETRANGE("Unit of Measure", lvPartLineRec."Unit of Measure");
          lvPartLineRec2.SETRANGE("Time Quantity", lvPartLineRec."Time Quantity");
          lvPartLineRec2.SETRANGE("Unit of Time", lvPartLineRec."Unit of Time");
          lvPartLineRec2.SETRANGE("Rate Code", lvPartLineRec."Rate Code");
          lvPartLineRec2.SETRANGE("Line Status", lvPartLineRec."Line Status");

          lvPartLineRec2.SETRANGE("Cost Object Labor", lvPartLineRec."Cost Object Labor");
          lvPartLineRec2.SETRANGE("Cost Object Price", lvPartLineRec."Cost Object Price");

          lvPartLineRec2.SETRANGE("Cost Component", lvPartLineRec."Cost Component");
          lvPartLineRec2.SETRANGE(Discipline, lvPartLineRec.Discipline);
          lvPartLineRec2.SETRANGE("Trade Speciality", lvPartLineRec."Trade Speciality");
          lvPartLineRec2.SETRANGE("Trade Expertise", lvPartLineRec."Trade Expertise");

          IF lvPartLineRec2.FIND('-') THEN BEGIN
            REPEAT
              lvPartLineRec.Quantity := lvPartLineRec.Quantity + lvPartLineRec2.Quantity;
              lvPartLineRec.MODIFY(TRUE);
              lvPartLineRec2.DELETE(TRUE);
            UNTIL lvPartLineRec2.NEXT = 0;
          END;
        UNTIL lvPartLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE ExplodeRecipe@1100485002(lvPartGrp@1100485005 : Code[20];lvPart@1100485002 : Code[20]);
    VAR
      lvPartLineRec@1100485004 : Record 11072076;
      LastLino@1100485000 : Integer;
    BEGIN
      TmpPartLineRec.DELETEALL;

      LastLino := 0;

      lvPartLineRec.SETRANGE("Part Group", lvPartGrp);
      lvPartLineRec.SETRANGE(Part, lvPart);
      IF lvPartLineRec.FIND('-') THEN BEGIN
        REPEAT
          IF lvPartLineRec.Recipe = '' THEN BEGIN
            TmpPartLineRec.TRANSFERFIELDS(lvPartLineRec);
            TmpPartLineRec."Line No." := LastLino + 10000;
            LastLino := TmpPartLineRec."Line No.";
            TmpPartLineRec.INSERT;
          END ELSE BEGIN
            ProcessRecipeChild(lvPartLineRec."Part Group", lvPartLineRec.Part,
              lvPartLineRec."Recipe Group", lvPartLineRec.Recipe,
              lvPartLineRec.Quantity, LastLino);
          END;
        UNTIL lvPartLineRec.NEXT = 0;
        lvPartLineRec.DELETEALL(TRUE);
      END;

      IF TmpPartLineRec.FIND('-') THEN BEGIN
        REPEAT
          lvPartLineRec := TmpPartLineRec;
          IF TmpPartLineRec."Rate Code" <> '' THEN
            lvPartLineRec.VALIDATE("Rate Code", TmpPartLineRec."Rate Code");
          lvPartLineRec.INSERT;
        UNTIL TmpPartLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE ProcessRecipeChild@1100485001(lvPartGrp@1100485008 : Code[20];lvPart@1100485007 : Code[20];lvRcpGrp@1100485000 : Code[20];lvRcp@1100485001 : Code[20];lvQuan@1100485004 : Decimal;VAR LastLino@1100485005 : Integer);
    VAR
      RcpRec@1100485002 : Record 11020581;
      RcpLineRec@1100485003 : Record 11020582;
    BEGIN
      RcpLineRec.SETRANGE("Recipe Group", lvRcpGrp);
      RcpLineRec.SETRANGE(Recipe, lvRcp);
      IF RcpLineRec.FINDSET THEN BEGIN
        REPEAT
          TmpPartLineRec."Part Group" := lvPartGrp;
          TmpPartLineRec.Part := lvPart;
          AssignRecipeLineToPartLine(RcpLineRec, TmpPartLineRec);

          IF RcpLineRec."Recipe (Child)" <> '' THEN BEGIN
            ProcessRecipeChild(lvPartGrp, lvPart,
              RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)",
              lvQuan * RcpLineRec.Quantity, LastLino);
          END ELSE BEGIN
            TmpPartLineRec."Line No." := LastLino + 10000;
            LastLino := TmpPartLineRec."Line No.";
            IF TmpPartLineRec.INSERT THEN
              TmpPartLineRec.Quantity := 0;
            TmpPartLineRec.Quantity := TmpPartLineRec.Quantity + lvQuan * RcpLineRec.Quantity;
            TmpPartLineRec.MODIFY;
          END;
        UNTIL RcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE AssignRecipeLineToPartLine@1100485003(lvRcpLineRec@1100485000 : Record 11020582;VAR lvPartLineRec@1100485001 : Record 11072076);
    VAR
      ProjectPlanningBaseActivity@1100528400 : Record 11012434;
    BEGIN
      WITH lvPartLineRec DO BEGIN
        "Item No." := lvRcpLineRec."Item No.";
        "Basic Item" := lvRcpLineRec."Basic Item";
        "Trade Item" := lvRcpLineRec."Trade Item";
        "Vendor (Trade Item)" := lvRcpLineRec."Vendor (Trade Item)";
        Manufacturer := lvRcpLineRec.Manufacturer;
        Description := lvRcpLineRec.Description;
        "Time Quantity" := lvRcpLineRec."Time Quantity";
        "Unit of Time" := lvRcpLineRec."Unit of Time";
        Quantity := lvRcpLineRec.Quantity;
        "Unit of Measure" := lvRcpLineRec."Unit of Measure";
        "External Text" := lvRcpLineRec."External Text";
        "External Text Block" := lvRcpLineRec."External Text Block";
        "Internal Text" := lvRcpLineRec."Internal Text";
        "Internal Text Block" := lvRcpLineRec."Internal Text Block";
        "Cost Object Labor" := lvRcpLineRec."Cost Object Labor";
        "Cost Object Price" := lvRcpLineRec."Cost Object Price";
        "Sub Operation Code" := lvRcpLineRec."Sub Operation Code";
        "Rate Code" := lvRcpLineRec."Rate Code";
        "Line Status" := lvRcpLineRec."Line Status";
        Code := lvRcpLineRec.Code;
        Vendor := lvRcpLineRec.Vendor;
        "Adjustment Factor Hours" := lvRcpLineRec."Adjustment Factor Hours";
        "Adjustment Factor Price" := lvRcpLineRec."Adjustment Factor Price";
        "Adj. Factor Hours (Sales)" := lvRcpLineRec."Adj. Factor Hours (Sales)";  //DP00555
        "Surcharge %" := lvRcpLineRec."Surcharge %";
        "Surcharge Type" := lvRcpLineRec."Surcharge Type";
        Element := lvRcpLineRec.Element;
        IF lvRcpLineRec."Project Planning Activity Code" <> '' THEN
          IF ProjectPlanningBaseActivity.GET(lvRcpLineRec."Project Planning Activity Code") THEN
            "Project Planning Activity Code" := lvRcpLineRec."Project Planning Activity Code";
        "Cost Component" := lvRcpLineRec."Cost Component";
        //(fill norm/price based on same conditions as used in function CheckNormPrice)
        IF ("Item No." + "Basic Item" + "Trade Item" = '') AND
           ("Surcharge Type" = "Surcharge Type"::" ") THEN BEGIN
          Norm := lvRcpLineRec.Norm;
          "Net Cost Price" := lvRcpLineRec."Net Cost Price";
          "Gross Price" := lvRcpLineRec."Gross Price";
          "Purchase Discount %" := lvRcpLineRec."Purchase Discount %";
        END;
        "Cost Type (Price)" := lvRcpLineRec."Cost Type (Price)";  //DP00381
        Discipline := lvRcpLineRec.Discipline;
        "Trade Speciality" := lvRcpLineRec."Trade Speciality";
        "Trade Expertise" := lvRcpLineRec."Trade Expertise";
      END;
    END;

    PROCEDURE CalculateNetPrice@13();
    BEGIN
      VALIDATE("Net Cost Price","Gross Price" - (("Gross Price"/100) * "Purchase Discount %"));
      VALIDATE("Net Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
    END;

    PROCEDURE CalculateDiscount@1210190012(VAR lvPartLineRec@1100485000 : Record 11072076;SalesBln@1100525000 : Boolean);
    BEGIN
      WITH lvPartLineRec DO BEGIN
        IF "Gross Price" <> 0 THEN BEGIN
          IF  ("Item No." + "Basic Item" + "Trade Item" = '') AND ("Purchase Discount %" = 0) THEN BEGIN
            "Gross Price" := "Net Cost Price";
            "Gross Price (FCY)" := "Net Cost Price (FCY)";  //DP02114
            IF SalesBln = FALSE THEN
              VALIDATE("Net Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
          END ELSE BEGIN
            IF SalesBln THEN
              "Sales Discount %" := (("Gross Price" - "Net Sales Price") / "Gross Price") * 100
            ELSE
              "Purchase Discount %" := (("Gross Price" - "Net Cost Price") / "Gross Price") * 100;
          END;
        END ELSE BEGIN
          IF NOT SalesBln THEN BEGIN
            IF "Purchase Discount %" = 0 THEN BEGIN
              "Gross Price" := "Net Cost Price";
              "Gross Price (FCY)" := "Net Cost Price (FCY)";  //DP02114
              VALIDATE("Net Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
            END;
          END;
          IF "Purchase Discount %" <> 100 THEN BEGIN
            IF NOT (("Item No." + "Basic Item" + "Trade Item" = '') AND ("Purchase Discount %" = 0)) THEN BEGIN
              "Gross Price" := "Net Cost Price" / ((100 - "Purchase Discount %") / 100);
              "Gross Price (FCY)" := "Net Cost Price (FCY)" / ((100 - "Purchase Discount %") / 100);  //DP02114
            END;
          END ELSE BEGIN
            "Gross Price" := "Net Cost Price";
            "Gross Price (FCY)" := "Net Cost Price (FCY)";  //DP02114
          END;
        END;
      END;
    END;

    PROCEDURE CalculateGrossPrice@1100485007();
    BEGIN
      IF "Purchase Discount %" <> 100 THEN BEGIN
        "Gross Price" := "Net Cost Price" * 100 / (100 - "Purchase Discount %");
        "Gross Price (FCY)" := "Net Cost Price (FCY)" * 100 / (100 - "Purchase Discount %");  //DP02114
      END;
    END;

    PROCEDURE CheckNormPrice@1100485005();
    BEGIN
      IF ("Surcharge Type" <> "Surcharge Type"::" ") OR (Recipe <> '') OR
         ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
        IF "Sub Operation Code" <> '' THEN
          TESTFIELD(Norm, 0);
        TESTFIELD("Net Cost Price", 0);
        TESTFIELD("Gross Price", 0);
        TESTFIELD("Purchase Discount %", 0);
      END;

      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Material;  //DP00381
    END;

    PROCEDURE CheckRateCode@1100485006(lvAction@1210190000 : Integer);
    VAR
      EstSetup@1100485000 : Record 11012150;
      RateGroupRec@1210190002 : Record 11012162;
      BudgetRateRec@1210190003 : Record 11012000;
      RateType@1100485001 : 'Rate Group,Budget Rate';
    BEGIN
      EstSetup.GET;
      RateType := EstSetup."Rates Based On";

      IF lvAction = 0 THEN BEGIN
        IF "Rate Code" <> '' THEN BEGIN
          IF RateType = RateType::"Budget Rate" THEN BEGIN
            BudgetRateRec.SETRANGE(Code, "Rate Code");
            BudgetRateRec.FINDFIRST;
          END ELSE
            RateGroupRec.GET('', "Rate Code");
        END;
      END ELSE BEGIN
        IF RateType = RateType::"Budget Rate" THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Budget Rates", BudgetRateRec) = ACTION::LookupOK THEN
            VALIDATE("Rate Code", BudgetRateRec.Code);
        END ELSE BEGIN
          RateGroupRec.SETFILTER("Rate Group", '%1', '');
          IF PAGE.RUNMODAL(PAGE::"Rates per Group",RateGroupRec) = ACTION::LookupOK THEN
            VALIDATE("Rate Code", RateGroupRec."Rate Code");
        END;
      END;
    END;

    PROCEDURE ProcessSubOperation@1210190000();
    VAR
      SubOperRec@1100485000 : Record 11012166;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
        Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Description));
        IF SubOperRec."Unit of Measure" <> '' THEN
          "Unit of Measure" := SubOperRec."Unit of Measure";
      END;
    END;

    PROCEDURE CheckCostObject@1210190001(CostObject@1210190000 : Code[20];DirectValidate@1210190001 : Boolean);
    BEGIN
      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
        IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
          IF DirectValidate = TRUE THEN BEGIN
            DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Material);
            EXIT;
          END;
        END;
        VALIDATE("Cost Component", DimValRec."Cost Component");
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
          EXIT;
        END;
        Description := DimValRec.Name;
        Norm := 0;
        "Net Cost Price" := 0;
        "Gross Price" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
          IF DimValRec."Rate Code" <> '' THEN
            VALIDATE("Rate Code", DimValRec."Rate Code");
          IF "Sub Operation Code" = '' THEN
            VALIDATE(Norm, DimValRec.Norm);
        END ELSE BEGIN
          VALIDATE("Gross Price", DimValRec.Price);
        END;
      END;
    END;

    PROCEDURE OldSubOperationDefault@1210190006() : Boolean;
    VAR
      OldSubOperRec@1210190001 : Record 11012166;
      OldOperRec@1210190000 : Record 11012165;
    BEGIN
      OldOperRec.INIT;
      IF OldSubOperRec.GET(xRec."Sub Operation Code") THEN
        IF NOT OldOperRec.GET(OldSubOperRec.Operation) THEN OldOperRec.INIT;

      EXIT(xRec."Cost Object Labor" = OldOperRec."Cost Object");
    END;

    PROCEDURE CheckCostTypePriceAllowed@1100525022();
    BEGIN
      IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN BEGIN
        TESTFIELD(Quantity, 0);
        //TESTFIELD("Quantity (Sales)", 0);
        TESTFIELD("Net Cost Price", 0);
        TESTFIELD("Net Sales Price", 0);
      END;
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN BEGIN
        TESTFIELD(Recipe, '');
        TESTFIELD("Plant Type", '');
        //TESTFIELD("Set Code", '');
      END;
      IF Recipe <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD("Plant Type", '');
        //TESTFIELD("Set Code", '');
      END;
      IF "Plant Type" <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD(Recipe, '');
      //  TESTFIELD("Set Code", '');
      END;
      //IF "Set Code" <> '' THEN BEGIN
      //  TESTFIELD("Item No.", '');
      //  TESTFIELD("Basic Item", '');
      //  TESTFIELD("Trade Item", '');
      //  TESTFIELD(Recipe, '');
      //  TESTFIELD("Plant Type", '');
      //END;

      "Cost Type (Price)" := "Cost Type (Price)"::" ";
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Material;
      IF "Plant Type" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Plant;
    END;

    PROCEDURE EditQuanSheet@1100409000();
    VAR
      EstSetup@1100409001 : Record 11012150;
      QuanRec@1210190000 : Record 11012186;
      QuantityRelation@1100525000 : Record 11020463;
      QuanSheetRec@1100525001 : Record 11020459;
      QuanSheetFrm@1100525002 : Page 11229781;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN
        ERROR(Text011);

      EstSetup.GET;
      IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
        QuanRec.RESET;
        QuanRec.SETFILTER("Estimate No.", '%1', '');
        QuanRec.SETFILTER("Sub-Estimate No.", '%1', '');
        QuanRec.SETRANGE("Part Group", "Part Group");
        QuanRec.SETRANGE(Part, Part);
        QuanRec.SETRANGE("Estimate Line", "Line No.");
        QuanRec.SETFILTER("Recipe Group", '%1', '');
        QuanRec.SETFILTER(Recipe, '%1', '');
        QuanRec.SETRANGE("Recipe Line", 0);
        PAGE.RUNMODAL(PAGE::"Estimate Quantity Sheet", QuanRec);
        QuanRec.SETRANGE("Row No.", 0);
        IF QuanRec.FINDFIRST THEN
          VALIDATE(Quantity, QuanRec.Result);
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Part Group","Part Group");
        QuanSheetRec.SETRANGE(Part,Part);
        QuanSheetFrm.SETTABLEVIEW(QuanSheetRec);
        IF NOT QuantityRelation.GET('','',"Part Group",Part,"Line No.",'','',0) THEN QuantityRelation.INIT;
        IF NOT QuanSheetRec.GET("Part Group",Part,QuantityRelation."Quantity Sheet") THEN QuanSheetRec.INIT;
        QuanSheetFrm.SETRECORD(QuanSheetRec);
        QuanSheetFrm.SetDefaultNEW(Rec,TRUE,QuantityRelation);
        QuanSheetFrm.RUNMODAL;
        IF QuantityRelation.GET('','',"Part Group",Part,"Line No.",'','',0) THEN
          IF GET("Part Group",Part,"Line No.") THEN
            VALIDATE(Quantity);
      END;
    END;

    PROCEDURE EnterQuantity@1210190013(lvOrigin@1210190002 : Integer) : Boolean;
    VAR
      EstSetup@1100409000 : Record 11012150;
      QuanRec@1210190000 : Record 11012186;
      QuantityRelation@1100525000 : Record 11020463;
    BEGIN
      //DP00686
      //lvOrigin:
      //  1 = Lengte, Breedte en Hoogte (nvt)
      //  2 = aantal (input)
      //  3 = woningmodel (nvt)
      //  4 = aantal (lookup)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT(FALSE);

      //IF lvOrigin <> 1 THEN BEGIN
      //  IF Length <> 0 THEN EXIT(FALSE);
      //  IF Width <> 0 THEN EXIT(FALSE);
      //  IF Height <> 0 THEN EXIT(FALSE);
      //END;

      EstSetup.GET;
      IF lvOrigin <> 4 THEN BEGIN
        IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
          QuanRec.SETFILTER("Estimate No.", '%1', '');
          QuanRec.SETFILTER("Sub-Estimate No.", '%1', '');
          QuanRec.SETRANGE("Part Group", "Part Group");
          QuanRec.SETRANGE(Part, Part);
          QuanRec.SETRANGE("Estimate Line", "Line No.");
          QuanRec.SETFILTER("Recipe Group", '%1', '');
          QuanRec.SETFILTER(Recipe, '%1', '');
          QuanRec.SETRANGE("Recipe Line", 0);
          IF QuanRec.FINDFIRST THEN EXIT(FALSE);
        END ELSE
          IF QuantityRelation.GET('','',"Part Group",Part,"Line No.",'','',0) THEN
            EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CopyItemText@1100409003();
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
      CommentLine@1100409000 : Record 97;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN EXIT;

      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETFILTER("Estimate No.", '%1', '');
      TextRec.SETFILTER("Sub-Estimate No.", '%1', '');
      TextRec.SETRANGE("Part Group", "Part Group");
      TextRec.SETRANGE(Part, Part);
      TextRec.SETRANGE("Estimate Line No.", 0);
      TextRec.SETRANGE("Recipe Line No.", 0);
      TextRec.SETRANGE("Part Line No.", "Line No.");
      TextRec.DELETEALL;

      IF TextRec.FINDLAST THEN
        CurrLino := TextRec."Line No."
      ELSE
        CurrLino := 0;

      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Item);
      CommentLine.SETRANGE("No.", "Item No.");
      IF CommentLine.FINDSET THEN BEGIN
        REPEAT
          TextRec2.INIT;
          TextRec2."Table Name" := TextRec2."Table Name"::Estimate;
          TextRec2.Group := '';
          TextRec2."No." := '';

          TextRec2.Date := CommentLine.Date;
          TextRec2.Code := CommentLine.Code;
          TextRec2.Comment := CommentLine.Comment;
          TextRec2."Comment Code" := CommentLine."Comment Code";
          TextRec2."Language Code" := CommentLine."Language Code";
          TextRec2."Line Break" := CommentLine."Line Break";
          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Part Group" := "Part Group";
          TextRec2.Part := Part;
          TextRec2."Part Line No." := "Line No.";
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL CommentLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyRecipeText@1100485026();
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN EXIT;

      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETFILTER("Estimate No.", '%1', '');
      TextRec.SETFILTER("Sub-Estimate No.", '%1', '');
      TextRec.SETRANGE("Part Group", "Part Group");
      TextRec.SETRANGE(Part, Part);
      TextRec.SETRANGE("Estimate Line No.", 0);
      TextRec.SETRANGE("Recipe Line No.", 0);
      TextRec.SETRANGE("Part Line No.", "Line No.");
      TextRec.DELETEALL;

      IF TextRec.FINDLAST THEN
        CurrLino := TextRec."Line No."
      ELSE
        CurrLino := 0;

      TextRec.SETRANGE(Group, "Recipe Group");
      TextRec.SETRANGE("No.", Recipe);
      TextRec.SETFILTER("Part Group", '%1', '');
      TextRec.SETFILTER(Part, '%1', '');
      TextRec.SETRANGE("Part Line No.", 0);
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          TextRec2.Group := '';
          TextRec2."No." := '';

          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Part Group" := "Part Group";
          TextRec2.Part := Part;
          TextRec2."Part Line No." := "Line No.";
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE ValidateUnitOfMeasure@1100528400(UnitOfMeasureCode@1100528400 : Code[10]);
    BEGIN
      "Unit of Measure" := UnitOfMeasureCode;
      IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
        CheckItemUnitConversion(Rec, xRec);
    END;

    PROCEDURE GetDefaultsPlantType@1100485010();
    VAR
      PlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      //DP01407.sn
      EstSetup.GET;
      IF EstSetup."Plant Company" <> '' THEN
        PlantTypeRec.CHANGECOMPANY(EstSetup."Plant Company");
      //DP01407.en
      PlantTypeRec.GET("Plant Type");
      Description := PlantTypeRec.Description;
      "Unit of Measure" := PlantTypeRec."Unit of Measure";
      "Cost Object Price" := PlantTypeRec."Cost Object";
      DeterminePlantPrice;
    END;

    PROCEDURE DeterminePlantPrice@1100485011();
    VAR
      SearchRateCu@1100485000 : Codeunit 11012567;
      RefDate@1100485001 : Date;
      RentalType@1100525007 : Option;
      DummyPlantPriceType@1100525006 : Option;
      DummyRentalType@1100525005 : Option;
      PlantDiscount@1100525004 : Decimal;
      SalesPrice@1100525003 : Decimal;
      BuyBackPrice@1100525002 : Decimal;
      PlantTypeRec@1100525001 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') THEN
        EXIT;

      IF "Start Rental Period" <> 0D THEN
        RefDate := "Start Rental Period"
      ELSE
        RefDate := TODAY;

      EstSetup.GET;
      //DP01047.sn
      RentalType := -1;  //0=rental, 1=sales, 2=buy-back, 3= hours
      //DP01407.sn
      EstSetup.GET;
      IF EstSetup."Plant Company" <> '' THEN
        PlantTypeRec.CHANGECOMPANY(EstSetup."Plant Company");
      //DP01407.en
      PlantTypeRec.GET("Plant Type");
      IF EstSetup."Plant Rates in Hours" THEN BEGIN
        "Rate Code" := '';
        //InitRateRelatedFields;
        IF (PlantTypeRec."Rental Type" <> PlantTypeRec."Rental Type"::"Sales/Buy Back") THEN
          RentalType := 3;
      END;

      VALIDATE("Net Cost Price", SearchRateCu.CostRateFromEstimate("Plant Type",'', '',RefDate,EstSetup."Plant Company",RentalType,"Plant Price Type"));  //DP01407
      VALIDATE("Gross Price","Net Cost Price");
      SalesPrice := SearchRateCu.SalesRateFromEstimate(
        "Plant Type",'','','',EstSetup."Kind of Plant Rate"+1,RefDate,EstSetup."Plant Company",RentalType,"Plant Price Type");  //DP01407
      IF RentalType = 1 THEN BEGIN
        DummyRentalType := 2;
        BuyBackPrice := SearchRateCu.SalesRateFromEstimate("Plant Type",'','','',0,RefDate,EstSetup."Plant Company",DummyRentalType,DummyPlantPriceType);  //DP01407
      END;
      PlantDiscount := SearchRateCu.SalesDiscountFromEstimate("Plant Type",'','','','',RefDate,EstSetup."Plant Company",RentalType);  //DP01407
      VALIDATE("Net Sales Price", SalesPrice * (100-PlantDiscount)/100);
      //VALIDATE("Buy Back Price", BuyBackPrice * (100-PlantDiscount)/100);
      //DP01047.en
    END;

    PROCEDURE CalcRentalUnits@1100525007();
    VAR
      PlantLocation@1100525000 : Record 11012554;
      RateTypeUsed@1100525002 : Option;
      CalcRentalPeriodsCu@1100525001 : Codeunit 11012568;
    BEGIN
      PlantLocation.INIT;
      PlantLocation.InitRecord;

      VALIDATE("Rental Time Units",
        CalcRentalPeriodsCu.NumberRentalPeriods(
          PlantLocation,"Start Rental Period","End Rental Period","Plant Type",'',RateTypeUsed));

      TESTFIELD("Plant Price Type", RateTypeUsed + 1);
    END;

    PROCEDURE LookupPlantType@1100529402();
    VAR
      PlantType@1100529400 : Record 11012551;
    BEGIN
      //DP01407
      EstSetup.GET;
      IF EstSetup."Plant Company" <> '' THEN
         PlantType.CHANGECOMPANY(EstSetup."Plant Company");
      PlantType.Code := "Plant Type";  //C036768
      IF PAGE.RUNMODAL(0, PlantType) = ACTION::LookupOK THEN
        VALIDATE("Plant Type", PlantType.Code);
    END;

    LOCAL PROCEDURE GetSubcontractorActivity@1100529900(CalledBy@1100528900 : Integer);
    VAR
      SubcontractingActivityPrice@1100529900 : Record 11229373;
    BEGIN
      //DP01492-2
      TESTFIELD("Cost Type (Price)", "Cost Type (Price)"::Subcontracting);
      SubcontractingActivityPrice.SETRANGE("Subcontracting Activity", "Subcontracting Activity");
      IF CalledBy = FIELDNO("Subcontracting Activity") THEN  //DP01958a
        SubcontractingActivityPrice.SETRANGE("Preferred Subcontractor", TRUE)
      ELSE
        SubcontractingActivityPrice.SETRANGE("Subcontractor No.", Subcontractor);
      IF SubcontractingActivityPrice.FINDFIRST THEN BEGIN
        VALIDATE("Net Cost Price", SubcontractingActivityPrice.GetPrice(TODAY));
        IF CalledBy = FIELDNO("Subcontracting Activity") THEN BEGIN  //DP01958a
          SubcontractingActivityPrice.CALCFIELDS("Activity Description");
          Description := SubcontractingActivityPrice."Activity Description";
        END;
        "Unit of Measure" := SubcontractingActivityPrice."Unit of Measure";
        "Cost Object Price" := SubcontractingActivityPrice."Cost Object";
        Subcontractor := SubcontractingActivityPrice."Subcontractor No.";
      END;
    END;

    LOCAL PROCEDURE UpdateEstimateCode@1100525000();
    VAR
      CodingSystem@1100525000 : Record 11012088;
    BEGIN
      //C038312
      IF "Line No." = 0 THEN EXIT;

      GrpRec.GET("Part Group", GrpRec.Type::Part);
      IF GrpRec."Coding System" = '' THEN EXIT;  //C045082

      IF Code <> '' THEN BEGIN
        CodingSystem.GET(GrpRec."Coding System");
        IF CodingSystem."Deviant Code allowed" = FALSE THEN BEGIN
          FormatMgt.SetSelection(GrpRec."Coding System");
          FormatMgt.FormatElem(Code,4,'');
          CodeRec.GET(GrpRec."Coding System", Code);
        END;
      END;

      EstCodeRec.RESET;
      EstCodeRec.SETFILTER("Estimate No.", '%1', '');
      EstCodeRec.SETFILTER("Sub-Estimate No.", '%1', '');
      EstCodeRec.SETRANGE("Part Group", "Part Group");
      EstCodeRec.SETRANGE(Part, Part);
      EstCodeRec.SETRANGE("Estimate Line", "Line No.");
      EstCodeRec.SETRANGE("Coding System", GrpRec."Coding System");
      EstCodeRec.DELETEALL;

      IF Code <> '' THEN BEGIN
        EstCodeRec.INIT;
        EstCodeRec."Estimate No." := '';
        EstCodeRec."Sub-Estimate No." := '';
        EstCodeRec."Part Group" := "Part Group";
        EstCodeRec.Part := Part;
        EstCodeRec."Estimate Line" := "Line No.";
        EstCodeRec."Recipe Group" := '';
        EstCodeRec.Recipe := '';
        EstCodeRec."Recipe Line" := 0;
        EstCodeRec."Coding System" := GrpRec."Coding System";
        EstCodeRec.Code := Code;
        EstCodeRec.INSERT;
      END;
    END;

    PROCEDURE InitNormPrice@1100528909();
    BEGIN
      //C035752
      Norm := 0;
      //"Production Rate" := 0;
      "Net Cost Price" := 0;
      "Purchase Discount %" := 0;
      "Gross Price" := 0;
      "Net Sales Price" := 0;
      "Sales Discount %" := 0;
    END;

    PROCEDURE CalculateTotals@1100528901();
    BEGIN
      //C035752
      //- standaard onderdeelregels fungeren momenteel als inventarisatie, niet als prijslijst. Daarom ontbreken totalen per kostensoort.
      //- bij invulling van wens om totalen te berekenen: voorbeeld uit standaard receptregels volgen.
    END;

    PROCEDURE GetEstSetup@1210190014();
    BEGIN
      IF NOT EstSetupRead THEN BEGIN
        EstSetup.GET;
        EstSetupRead := TRUE;
      END;
    END;

    LOCAL PROCEDURE CheckCurrencyAgreement@1100525034();
    BEGIN
      //DP02114
      GetEstSetup;
      IF "Currency Code" = '' THEN BEGIN
        "Currency Agreement" := FALSE;
      END ELSE BEGIN
        "Currency Agreement" := ("Currency Code" <> EstSetup."Currency Code");
      END;
    END;

    PROCEDURE GetCurrencyFactor@1100528601(IUseSalesExchange@1100528600 : Boolean;IUseReportCurrency@1100528602 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528601 : Record 330;
      CurrencyCode@1100528603 : Code[10];
    BEGIN
      //DP02114
      GetEstSetup;
      IF IUseReportCurrency THEN
        CurrencyCode := EstSetup."Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      EXIT(CurrencyExchangeRate.ExchangeRate(2, '', TODAY, CurrencyCode, IUseSalesExchange));
    END;

    PROCEDURE ExchangeAmtLCYToFCY@1100528602(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528607 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528606 : Code[10];
    BEGIN
      //DP02114
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      GetEstSetup;
      IF IUseReportCurrency THEN
        CurrencyCode := EstSetup."Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(
        2, '', TODAY, CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      IF NOT Currency.GET(CurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToLCY@1100528600(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528606 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528607 : Code[10];
    BEGIN
      //DP02114
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      GetEstSetup;
      IF IUseReportCurrency THEN
        CurrencyCode := EstSetup."Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(
        2, '', TODAY, CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToFCY@1100528604(IAmount@1100528606 : Decimal;IFromCurrencyCode@1100528604 : Code[10];IToCurrencyCode@1100528605 : Code[10];IUseSalesExchange@1100528607 : Boolean;IUsePriceRounding@1100528608 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528603 : Record 330;
      Currency@1100528602 : Record 4;
      CurrencyFactor@1100528609 : Decimal;
      Amount@1100528601 : Decimal;
    BEGIN
      //DP02114
      Amount := IAmount;
      IF IFromCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(2, '', TODAY, IFromCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(2, '', TODAY, IFromCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF IToCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(2, '', TODAY, IToCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(2, '', TODAY, IToCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF NOT Currency.GET(IToCurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      //DP02114
      SkipValidateFCY := ISkipValidateFCY;
    END;

    PROCEDURE GetDisciplineByElement@1100528920();
    VAR
      BaseElement@1100528900 : Record 11012060;
    BEGIN
      //DP02460
      IF Element = '' THEN EXIT;
      IF NOT BaseElement.GET(Element) THEN BaseElement.INIT;
      IF BaseElement.Discipline <> '' THEN
        Discipline := BaseElement.Discipline;
    END;

    BEGIN
    END.
  }
}

