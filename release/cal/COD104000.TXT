OBJECT Codeunit 104000 UPG.W1
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=UPGTK14.09.00;
  }
  PROPERTIES
  {
    Subtype=Upgrade;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataUpgradeMgt@1000 : Codeunit 9900;
      JobListTxt@1001 : TextConst '@@@={Locked};ENU=Job List';
      JobTaskLinesTxt@1002 : TextConst '@@@={Locked};ENU=Job Task Lines';
      JobPlanningLinesTxt@1003 : TextConst '@@@={Locked};ENU=Job Planning Lines';
      PowerBICustomerListTxt@1012 : TextConst '@@@={Locked};ENU=Power BI Customer List';
      PowerBIVendorListTxt@1011 : TextConst '@@@={Locked};ENU=Power BI Vendor List';
      PowerBIJobsListTxt@1010 : TextConst '@@@={Locked};ENU=Power BI Jobs List';
      PowerBISalesListTxt@1009 : TextConst '@@@={Locked};ENU=Power BI Sales List';
      PowerBIPurchaseListTxt@1008 : TextConst '@@@={Locked};ENU=Power BI Purchase List';
      PowerBIItemPurchasesListTxt@1007 : TextConst '@@@={Locked};ENU=Power BI Item Purchase List';
      PowerBIItemSalesListTxt@1006 : TextConst '@@@={Locked};ENU=Power BI Item Sales List';
      PowerBIGLAmountListTxt@1005 : TextConst '@@@={Locked};ENU=Power BI GL Amount List';
      PowerBIGLBudgetedAmountListTxt@1004 : TextConst '@@@={Locked};ENU=Power BI GL BudgetedAmount';
      WebServiceManagement@1023 : Codeunit 9750;
      PowerBITopCustOverviewTxt@1035 : TextConst '@@@={Locked};ENU=Power BI Top Cust. Overview';
      PowerBISalesHdrCustTxt@1034 : TextConst '@@@={Locked};ENU=Power BI Sales Hdr. Cust.';
      PowerBICustItemLedgEntTxt@1033 : TextConst '@@@={Locked};ENU=Power BI Cust. Item Ledg. Ent.';
      PowerBICustLedgerEntriesTxt@1032 : TextConst '@@@={Locked};ENU=Power BI Cust. Ledger Entries';
      PowerBIVendorLedgerEntriesTxt@1031 : TextConst '@@@={Locked};ENU=Power BI Vendor Ledger Entries';
      PowerBIPurchaseHdrVendorTxt@1029 : TextConst '@@@={Locked};ENU=Power BI Purchase Hdr. Vendor';
      PowerBIVendItemLedgEntTxt@1038 : TextConst '@@@={Locked};ENU=Power BI Vend. Item Ledg. Ent.';
      PowerBIAgedAccPayableTxt@1030 : TextConst '@@@={Locked};ENU=Power BI Aged Acc. Payable';
      PowerBIAgedAccReceivableTxt@1037 : TextConst '@@@={Locked};ENU=Power BI Aged Acc. Receivable';
      PowerBIAgedInventoryChartTxt@1028 : TextConst '@@@={Locked};ENU=Power BI Aged Inventory Chart';
      PowerBIJobActBudgPriceTxt@1027 : TextConst '@@@={Locked};ENU=Power BI Job Act. v. Budg. Price';
      PowerBIJobProfitabilityTxt@1026 : TextConst '@@@={Locked};ENU=Power BI Job Profitability';
      PowerBIJobActBudgCostTxt@1024 : TextConst '@@@={Locked};ENU=Power BI Job Act. v. Budg. Cost';
      PowerBISalesPipelineTxt@1020 : TextConst '@@@={Locked};ENU=Power BI Sales Pipeline';
      PowerBITop5OpportunitiesTxt@1019 : TextConst '@@@={Locked};ENU=Power BI Top 5 Opportunities';
      PowerBIWorkDateCalcTxt@1015 : TextConst '@@@={Locked};ENU=Power BI WorkDate Calc.';
      PowerBIReportLabelsTxt@1039 : TextConst '@@@={Locked};ENU=Power BI Report Labels';
      ExcelTemplateIncomeStatementTxt@1018 : TextConst 'ENU=ExcelTemplateIncomeStatement';
      ExcelTemplateBalanceSheetTxt@1017 : TextConst 'ENU=ExcelTemplateBalanceSheet';
      ExcelTemplateTrialBalanceTxt@1016 : TextConst 'ENU=ExcelTemplateTrialBalance';
      ExcelTemplateRetainedEarningsStatementTxt@1014 : TextConst 'ENU=ExcelTemplateRetainedEarnings';
      ExcelTemplateCashFlowStatementTxt@1013 : TextConst 'ENU=ExcelTemplateCashFlowStatement';
      ExcelTemplateAgedAccountsReceivableTxt@1021 : TextConst 'ENU=ExcelTemplateAgedAccountsReceivable';
      ExcelTemplateAgedAccountsPayableTxt@1022 : TextConst 'ENU=ExcelTemplateAgedAccountsPayable';
      ExcelTemplateCompanyInformationTxt@1025 : TextConst 'ENU=ExcelTemplateViewCompanyInformation';
      ODataUtility@1036 : Codeunit 6710;
      PowerBIChartOfAccountsTxt@1042 : TextConst 'ENU=Chart of Accounts';

    [CheckPrecondition]
    PROCEDURE CheckPreconditions@1003();
    BEGIN
    END;

    [TableSyncSetup]
    PROCEDURE GetTableSyncSetupW1@1004(VAR TableSynchSetup@1000 : Record 2000000135);
    BEGIN
      // The purpose of this method is to define how old and new tables will be available for dataupgrade

      // The method is called at a point in time where schema changes have not yet been synchronized to
      // the database so tables except virtual tables cannot be accessed

      // TableSynchSetup."Table ID":
      // Id of the table with schema changes (i.e the modified table).

      // TableSynchSetup."Upgrade Table ID":
      // Id of table where old data will be available in case the selected TableSynchSetup.Mode option is one of Copy or Move , otherwise 0

      // TableSynchSetup.Mode:
      // An option indicating how the data will be handled during synchronization
      // Check: Synchronize without saving data in the upgrade table, fails if there is data in the modified field/table
      // Copy: Synchronize with saving data in the upgrade table, the modified table contains data in matching fields
      // Move: Synchronize with moving the data in the upgrade table,the changed table is empty; the upgrade logic is handled only by application code
      // Force: Synchronize without saving data in the upgrade table, disregard if there is data in the modified field/table

      // Examples:
      // DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Sales Header",DATABASE::"UPG Sales Header",TableSynchSetup.Mode::Copy);
      // DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Payment Export Data",0,TableSynchSetup.Mode::Force);

      // Import G/L Transaction - primary key change
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Import G/L Transaction",0,TableSynchSetup.Mode::Force);

      // Contact Duplicate Search
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Cont. Duplicate Search String",0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Duplicate Search String Setup",0,TableSynchSetup.Mode::Force);

      // Manual Setup Add Icon
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Business Setup Icon",0,TableSynchSetup.Mode::Check);

      // Pending Company Rename
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Pending Company Rename",0,TableSynchSetup.Mode::Force);

      // CRM Integration Notifications
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"CRM Integration Record",0,TableSynchSetup.Mode::Force);
      // CRM Integration performance
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"CRM Connection Setup",0,TableSynchSetup.Mode::Force);

      // DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Sales & Receivables Setup",0,TableSynchSetup.Mode::Force);
      // DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Purchases & Payables Setup",0,TableSynchSetup.Mode::Force);

      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Deferral Post. Buffer",0,TableSynchSetup.Mode::Force);

      // Intrastat Contact Setup
      // DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Company Information",DATABASE::"UPG Company Information",TableSynchSetup.Mode::Copy);
    END;

    [TableSyncSetup]
    PROCEDURE GetTableSyncSetupCountry@121(VAR TableSynchSetup@1000 : Record 2000000135);
    BEGIN
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::Table3010590,
        DATABASE::"UPG Fin. Charge Interest Rate",TableSynchSetup.Mode::Copy);

      DataUpgradeMgt.SetTableSyncSetup(11128015,104038,TableSynchSetup.Mode::Move);
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateOfficeAdminCredentials@18();
    VAR
      OfficeAdminCredentials@1000 : Record 1612;
      ServicePassword@1001 : Record 1261;
    BEGIN
      IF OfficeAdminCredentials.FINDSET THEN
        REPEAT
          ServicePassword.INIT;
          ServicePassword.SavePassword(OfficeAdminCredentials.Password);
          ServicePassword.INSERT(TRUE);
          OfficeAdminCredentials.Password := ServicePassword.Key;
          OfficeAdminCredentials.MODIFY;
        UNTIL OfficeAdminCredentials.NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdatePostCodeServiceConfig@19();
    VAR
      PostcodeServiceConfig@1000 : Record 9091;
      ServicePassword@1001 : Record 1261;
    BEGIN
      IF PostcodeServiceConfig.FINDSET THEN
        REPEAT
          ServicePassword.INIT;
          ServicePassword.SavePassword(PostcodeServiceConfig.ServiceKey);
          ServicePassword.INSERT(TRUE);

          PostcodeServiceConfig.ServiceKey := ServicePassword.Key;
          PostcodeServiceConfig.MODIFY;
        UNTIL PostcodeServiceConfig.NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateCRMIntegrationRecordTableID@1010();
    VAR
      CRMIntegrationRecord@1000 : Record 5331;
      IntegrationRecord@1002 : Record 5151;
      RecID@1003 : RecordID;
    BEGIN
      IF CRMIntegrationRecord.FINDSET THEN
        REPEAT
          IF IntegrationRecord.GET(CRMIntegrationRecord."Integration ID") THEN BEGIN
            RecID := IntegrationRecord."Record ID";
            CRMIntegrationRecord."Table ID" := RecID.TABLENO;
            CRMIntegrationRecord.MODIFY;
          END;
        UNTIL CRMIntegrationRecord.NEXT = 0;
    END;

    [UpgradePerDatabase]
    PROCEDURE UpdateManualSetupIcons@1180();
    VAR
      BusinessSetupIcon@1003 : Record 1876;
      Convert@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      ByteArray@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MemoryStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      BusinessSetupIcon.INIT;
      BusinessSetupIcon."Business Setup Name" := 'Default';
      ByteArray := Convert.FromBase64String(GetManualSetupDefaultIcon);
      MemoryStream := MemoryStream.MemoryStream(ByteArray);
      BusinessSetupIcon.Icon.IMPORTSTREAM(MemoryStream,'Default');

      IF NOT BusinessSetupIcon.INSERT THEN
        BusinessSetupIcon.MODIFY;
    END;

    [UpgradePerDatabase]
    PROCEDURE UpgradePermissionSets@1900();
    VAR
      PermissionSet@1000 : Record 2000000004;
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      PermissionSet.SETRANGE(Hash,'');
      IF PermissionSet.FINDSET THEN
        REPEAT
          PermissionManager.UpdateHashForPermissionSet(PermissionSet."Role ID");
        UNTIL PermissionSet.NEXT = 0;
    END;

    LOCAL PROCEDURE GetManualSetupDefaultIcon@1181() : Text;
    VAR
      IconData@1000 : Text;
    BEGIN
      IconData += 'iVBORw0KGgoAAAANSUhEUgAAAPAAAADwCAYAAAA+VemSAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42u19T2gbaZr3M9kheyhdhg';
      IconData += 'G7DMM2NhI7MHYjsYdxg+WLfZgyS5xDpAFn4YuqSXYPn5SYb3eJ5PTSsLEU5uK0dEuYUl/a0FIO6zBYfZAvliFiDiMTh4ZBwoZhISUvzPfBVF06h/k';
      IconData += 'Olbf8vqXSn5JV0luq5wdNx8a2pKr6vc//3/OjH374n78CAoHwJG7gJUAgkMAIBAIJjEAgkMAIBBIYgUAggREIBBIYgUAggREIJDACgUACIxAIJDAC';
      IconData += 'gQRGIBBIYAQCgQRGIBBIYAQCCYxAIJDACAQCCYxAIJDACAQSGIFAIIERCAQSGIFAAiMQCCQwAoFAAiMQCCQwAoEERiAQSGAEAoEERiAQSGAEAgmMQ';
      IconData += 'CAmhR/jJfAeVLUN799fgqbp0GyeU99rO/o7c3OzIIqzH/89A6I4a/4f4Q38CBd8803UZvMCms1zaDbPQVXb0GpdjOW1g8F5CAQEiEQ+hVBoAUKheS';
      IconData += 'Q2EhjRC43GGTQaZ9BsnkOjcQa6rnP1/gRBgFBoHiKRTyESWYJIZAlvGhLY3xb2+LhuEncQwtKWEQBMEgUCAoRCC45ev9k8B03TzcPj6nsanJ6+G+h';
      IconData += 'vrKwsQySyBKury2ihkcD+IW2lUu3pDtPWLhRaAFGccUzQUbrwjcZbaDYveh4yojgD0egySNL62N8rEhjhGjRNh8PDak/SCoJguqWRyBK3BFDVtukx';
      IconData += 'HB/XuxJaFGcgFttEy4wE9nZMW6lUoVI56uoORyJLnrZYzeY51Gp1qNXedD2cVlaWYWNjHaLRZXwokMD8W9ta7Q0oyj6o6qWvLFO/8IB89o2NdQgEB';
      IconData += 'HxYkMB8EbdUOoBS6aDDrRQEAVZXlyEW2/RNbKiqbSiVDuDw8Mj2esTjm7CxsYbuNRKYX+IGg/MQj2+CJK37+hpVKlU4PKzaZrYlaQ1keQuJjATmh7';
      IconData += 'grK8sQj29indQmXi6XDzpyAsQix+Ob6FojgcdjUexiXLQmg7vXirJvS2RZ3oJ4fBMvEhLYHQuSz7/ocAWRuKMlsijOQCazjR4MEnh07rKifAPl8mv';
      IconData += 'm++HwIsjyXXzQRkDk3d29joNxZWUZdna20a1GAg+PWq0O+fwLxl0WxRlIpR5gXXPEaDTOIJvdY661IAiws7ON1xoJ7Nzq5vMvOty7RGILky0uQ1H2';
      IconData += 'O5KDaI2RwI5i3UzmKWMJgsF5yGS2scd3gm61IAiQyz3BkAUJ3Pv0Lxb3O6yuLG/hxZkASqUDUJR9xhrHYrcglXqAFwcJzLrMu7t7cHJSR6vLoTVOp';
      IconData += '58y7ZnB4DwUCs9871Ijgbu4zLHYLZDluxhzcewdCYIAhULO1wes7wlcq9Vhd3fPdNEEQYCHD+/7vv2RVzQaZ5BOP2Vc6kzmkW/vl68JXCodQKHwEl';
      IconData += '3mKXCp/RoX+5bA2eweUyIKhxchl/sCXWYP5SysZT5JWoNMZhsJ7Dfy+vHGT2tc7LeD2FcEtju1k8n72DzvcVQqVchmnzOhkF8y1L4hsKbpkEw+ZuI';
      IconData += 'mPyc/pg3WZKRfSOwLAiN5/YFm8xySybSvSOyL3Uj5/Ask7wgsXDa7N9DPkqEEsvZlXAiFFqBQyIEgGIRttS4gmXxsal+jBfYgrAkrJK8zz+XwsArl';
      IconData += '8oHZ5NKvrVTTdEgkkubPh8OLEI/fHus0kZ0lLhYLSGAkr39c0XL5wFb3WRAE+PrrfFfxArtecoDxK1JaSTytlYapJbA1M4nkHeyadROfoxEOL0Kh8';
      IconData += 'MyWNLKc6vm7RKFzHAomtVodMpmn5tfT2OzxN1988e9fTmO89uWXvzG/Tibvw+3bG8jQLiiVDuDLL38DlcqRrZa1JBnyr3/6038DAICqXkIgIMAvfv';
      IconData += 'Fz5uf+9V//A/785//HXPc///n/Mt/78OEDtFoXUC6/hmbzHBYX/x4CgYArn+uTT34Gc3MzUKsZAyrff/9HmJubmapOu6lLYjWb57C7u8c8fFjn7R/';
      IconData += 'rWokrijOQTN6HSuVbyGS2YWdnG0RxhnGV6eRQqXTAJAqJ8EGxWIB8PgeStNbxuicnddfIe3X/1yGR2KLCqudjT64hgR08iJnMVaN7OLyIHVYDwDog';
      IconData += 'n80+gXJZYZRHAgGBcT91XTcPSiJOR5OfTnRFIkuQyWxDpfItQ2RRnBlLPCzLW8zrJpNpUNU2Epg37O5e6SkFg/OQy32B7BwAVpcyFJq3/blodBlWV';
      IconData += 'pYZCxqN/iPEYp9bpoPsD81AQGAIO05ljVTqAQSD8+bhk04/RQLzFseRYXxBECCTQf2kQREICObDDXC1K9gODx/eN+us9i7rWk9i0n87GFwY62csFJ';
      IconData += '4xNeJ8/gUSmJe4lx4LfPjwPo4EXsON7kVgUZztWgcWBKFvlpeOk8etbRUIGJpaBOXyazPB5VX8eFriXtoCYLnoem50vyRPPL5p290UiSz19Hrog8F';
      IconData += 'YYD7+QzYSWYJEYsusVe/u7sGrV4pnvTXPE1hRvmHiXhQ7u74FbrUuQNP0ng/1MCJ/NIG7xdnjgCxvQaPxFk5P35nJONoyows9JjQaZ8y2BIx77VGr';
      IconData += '1SGRSH7sTKvaZmCt5ZxebvTw9+utrcW3vq6i7EM6/RQSiaRr12RnZ9uMh09OjJ3GaIHH7DrTzfWJxBbGvV1weGgs3G61LszWUkEQIBJZglBoASKRp';
      IconData += 'Y6ETrN5PvL+ZbrWXC6/BlGchbm5WWg03kKzeW7bAVar1V3poyaxPMmdfPXVS4hGP/OcAfBsK2U+/8K0vtPcrH590rQhFvvc0e+4tQXB2p886Htx07';
      IconData += '1NJh+bB4fbr4UuNPUgWF1nRDfrezXMIQhsucgOkrQGudwTVyyRddzPDtb3eHJSd7XpwupKuxE6oAXucWri1oTeiMVk03Ul8kGapkOzeQ6NxpmZzAH';
      IconData += 'oPqTgxgFMLLEozkAksgTB4ILp0lvft9tDCLQ6qSjOQLmsIIHdAj1lJIozUCwWMHHVBdZpnErl267XqtE4g1BoYeBraZD/ylrNzc1AMLgwcB6CWNVu';
      IconData += 'E0k0qQRBgO+++9bVa5VIJM0atZeMgueSWHTPrSxvIXl7us9VxjXuda0GaaogPc92c8IEpA+6Xy2+3yjhxsa6SWBd16FSqbpa30+lHkAqlTYPD69so';
      IconData += 'LzhNfLSSg/YsNGbbPSep1jsehNZlUoV7t1LQaVy1DMJpaqXkM0+v7aUTSAgMAMIpdKBq9crElky+7x1XXf99XxHYE1jL6os30WW9rS+V8mrYHD+Wi';
      IconData += 'U2ErZYiRsMzoMkrUE4vNiRmDo9fQd37sjXGt2jD51W68L1McCHD++b/y4W9z0xseQZAtMLn8PhRdwROwDpCN6/vxy659cQs3tuIdYtqNV+B8ViATK';
      IconData += 'ZbSgUnsF3330LipJnMsi6btTqh7HEmqZDucxaQevXo4YozjJWnw7XkMAjtL47O1g26uc+08P3um70iyeTjx1ZFbJylUAQBMjnc10zwqHQAhSLBYjF';
      IconData += 'bjGW06k7WqlU4c4dmdEzAwD4y1/cV5ekk1eGQkkbCTxK60vkXRC9LUmh8AwymUeMa3t6+g7u3UsNbFkOD6uM27yzsz2Q55NKPYBweJG5f4NYYVVtQ';
      IconData += 'zL5uMNdF8UZyOdzY2my8JoV9gyBR5WM8RMkaR1evVIYi6jrOhSL+5BIJPs2LdBuuCStOWpppBskdF2HWu1Nz59XlH2IxT7vaKc0JocKYw2ZaCt8fF';
      IconData += 'znWleaewJXKlUm9sV+Z2cgUjj5fI6JT1utC1CUb3q6z/TsrtOMvyjODjxj3GicdUjRhsOLoCj5iZQKaSvMe0aaewJj5nk0iESWoFgsMAJvvWDN+A5';
      IconData += 'jAenD9v37ds/3RiOZvA+FwrOJHtZsLFxFAg+DRuPMtAKk5Q5xPdCkmJsbLJdAJ8ScHhrDgAcVUVGcNeN4Vb3klsRcE5i+aNjvPBrQlrWXVaRhpxU9';
      IconData += '6AE8DHiRuYnHb5v/prvakMADQNN0ZnY1Gv0M2XdN4iaTj23XnvSz1MOSkT4seuk/W//2MCUvNxCNLpvex+npOy5LStwSmM5arq4uY8/zNQ5CRdkHW';
      IconData += 'U4xGV5RnGEsjBWBgMC4zv2yyHavSxOzlzsdCi10xOZOS15ugU7e0d1tSOA+wNLRKA5BQ0rHanVjsVtQLBb6loXoh7dcfu3ICtPLtgGM4YReh4Usb9';
      IconData += 'l2cg1a8nILGxtrtiEdErhnzNVmkldYOnJudZPJx5DJPGXiV1KaSaUeDOTRxOObTCPIoDt/aY1ucmAM8nqkkyuZZLWnW60LSKXSE9FxFsVZ81BR1Uv';
      IconData += 'u1rJwSeDj4zoThyCGiXmvariCIAxVmgkEBKZtVVUvQZa7u7Wkk4rW6DbGC52V/+LxTfj66zyzBQLA6OmetBvNmxXmcqCfHq5WlDxa4CFAa4ZdV2mD';
      IconData += '/ls0SGPN+/eX0Gqdd2SrBUGAQiE39P2zrivN53MTKSXSumK8KXZwZ4HpDiB0n4cHXUs9PX13LdcvlXoAmcyjju+fnr6Dcvn1R90qlrzB4Py1yGvE3';
      IconData += 'QeMJZ9UHwDPbjR3BKazneg+X++howcKrjuKJ0nrUC7/1nZNKPu6M2b/8nXIq2k6E0pNug+AdqN5Er7jTlKHvjhY+70eNjbWzdLR8XEdUqnu2xaazf';
      IconData += 'O+hBPFWchktiGVegCNxpmlziswonSDuKWBQKDr+6EnoXjoA1hdXTZj+1rtDTc7p7kjMDl1ifA44npWg8gQkYkgYkkIAYk4na7rIElrA0n0BgICRKP';
      IconData += 'LQ3tItCplMDjPCMyTUVHaY+ChD0AUZ0EUZ0BVL+H09F3f1TO+JHCzeW6eukje0ZGY1IEVZR8OD6u2GxAAwOx8c1Nn2yruTjZG0C44IQov7jNBJLJk';
      IconData += 'XqNG44yLEI+rGHjQzh2EEzd6jXJbL7uSlyYxvbLGTfLau9bsewyHF7kRcKCfSV4SWUjgKYcoznbUU2lyJBJbkM0+YTqgKpUjV2ZgreQ1XPZHIElrX';
      IconData += 'TdG9Gr3nCSB6UVt6EJ/RKt1daph+WiUVngdWq1zc/uBXbIpElkCSfq1+fWgo4ZOEArNM3uIiKtO4nLSP23E5m9BVS+5qkRY42AkMAVN0xnN52mDqr';
      IconData += 'ZNbahhY8xS6QBarXOIxTYdHXCDJJw0TetqbUZnwT7t+eCzyTE+x0eDwQXzOR0kc+8bAtMxxTRZ31qtDoeHVaY3OBr9zLFlUdW2WcaoVI4gGJyHeHx';
      IconData += 'zZCsx6fBFFGf6/s1S6QDm5mbNnyMPcy/iG6ogna/nJYRCC+a9bLWQwLYPkNcJTGRwjWXanf27+fwLiESWHBGPlnc1Hp4LyGafgyC8hI2NNYjHN6+V';
      IconData += '7KEP0H7Wt1KpMv3OBIIgwKtXStfPRd9XXde5sGDDxMHkEGo2z0GSJvt+uEli0cPSXpWNbTTOIJvdA0n69Udl/8sun/Wyp6CcHWG6uZ66rkO5/Bpis';
      IconData += 'c8hmXw8dLP9oAlETdPhq69edn0vvSaGAgHBIqx37rl7TB84PGSiuSEwLe/ipQy0oRxShUQiCalUukOMnMT0JNtKUC6/HugBsBImGJyHfD5nm1k+PX';
      IconData += '0H2exz+NWvfv2xgaM98Gega7G9rr91zrfzsDnq6R4PqlTJKwIBwRx1HFZqaCpdaGJhhhVQmwRx8/kXXTf1CYIAq6vLIMtbpkcRjX7G/Hw+/6LvlFA';
      IconData += '+/4L5+5nMthlrqmobDg+POlx1MghfLO7DyorxHnq5qtaD5P37S1svqNE4Y2J5stFeVdtw716K+VzFYsH2mvV6Xe9Y4fmPEjuTJzB3wwzeIbBmu6lP';
      IconData += 'FGcgk3kEr14pkMlsM0QIBARmgdbp6bue9dZG44yx6LHYLYaIojgLsrwF5bICmcwj2+y93aRQL/cZACCVSkMsJkOlUjVJp2k60+AhCFezwuR90PE5P';
      IconData += 'TOsqm3IZvfgzh2ZGUtstS64Fk3vBrrENmkvggsL7MUEFl0TJG6yLN/t6/5L0jrTzqgo+7CxsW6b+KHjyX6D8ZK0DpK0Dqrahq++eslYyn7vibiF9G';
      IconData += 'FE1oQKwkuzF9na3ki/53h8EyqVqumKl0oHEAgIUKu96Rq/B4PzoGma5/TOeMrRcGeBe6kX8gaaGIFAYODYnVa50HW9I8NMiE3HpYPK4IjiLHMIBoP';
      IconData += 'zfX8vHt+E7777FjKZRx0dUcZy7SPGcobDi7bTOHR9W9d1KBRe2pJXktZAUfJQLBY8mbCcm5vhJgzgzgLTF4d3BIMLAHDk2JUSxdmPM7P7pptbqVSZ';
      IconData += 'h5l2rVdWnE3+0G1+TjwaYsUN171qm5CzHkBsbLjAfC5raCFJ6xCPb3peYZS+T5MOAX7M88XxkgXWdf3jWs/B3r8sbzHJJ+sOXjrWpOPmQUDrYQ2T0';
      IconData += 'SftlrK8BaXSARweXsX6icRWz89IXGk6tIjHb0+tOIO1g833BPYS7MTPJWnwA8gYjk/3JbqTQ40eyRyWwPRhmko9AFm+C7XaGzg+rvcd7QsEBMhkts';
      IconData += '2h92lcBctTLZiLGJi+CF5yoYmFsQsFBrV03SaFSPzqVPmBfg+CIIyEQIGAAJK0PvB+3khkCVKpB1O7x5mnEIALC0y7IV676XSD/jCn8aiXVtPdTTi';
      IconData += 'SOf24gZdgdHEwD3VNnKlGAiOuGQdPCqraZmq1OFPtHnhpp0QCWwhQq9UdWVFrg/4kkxp09nkYC2xVmkT0OrjnuSAwZqEplEoHZsNCMDhv9hzTaolW';
      IconData += '0N1HBgnewqSG0a0yL9nsXlfxAFVtM8qU5DMMqkyJ4ANIYAr0+kiilkjvKKblTw2FwmpH/bbXFj63EY1+xtRsaZVJWkLWbg3K1YF05Lh0hUACTxyVS';
      IconData += 'rXnmJyu63ByUoeTk7o50G2FMTI4OQJHIktQKOQY8bhK5ahrR1Wvg4wXKVcExsADPrRXg/BErXFlZZlZc9kL2eyTiZL3KjZbgEIhN/D7pj8rfZghBs';
      IconData += 's3THp6Di0wGIknuul+Y2OdIeNVnGj83+p+ZjKPuGoVJCS2yriSMIAOBeiYmEwwqeol1Gp13E3VA+S6IoE5gHULntWShkILTElGVdvQbF5Ao/EWQqE';
      IconData += 'FLixvNxKXywd9E3HG5zaWoZGDrFT6LyQwxsCDgR4hdDIQMApYt+ANQkZjFniW+wc8FFpwlFGOx2+bBDYUJ9qYzEICD/agEfetm5yLm7Ev7WbSq0jG';
      IconData += 'cXjQQuZ2Vr+f5RwlotFlRqSgVDqAVOoBssTmviGBOXSfV1aWx0IWVW2Douz3zA7TMfnKyjLE45tjaY2kl6EdHh4hgbvkTOiDdpLgLgs9qJLiKGBNS';
      IconData += 'I1j56ui7EMs9rmj0s7JSR1SqTSk009dP/1pD8RQ48CM9KDhn28tMC2W/f79+FrTaNULUZxx1cJpmg7J5GOma4sgHF6ESORTy+HytkOO5uSkDolEEr';
      IconData += 'LZJ66d/KI4C5K0Zh4wpdIBl0k6XozMpEcLuXOhx6VwQJdNAABisc2xklcQBIjHN3tIzGyBphlLucmSbuN9X0IymYZCIecaiSVp3SRwq3XhyQ0KboI';
      IconData += '2MuhCw2T2rtJtkyQWdmuSyEreYHAevv4636Hs2OmeCR9j0gIjCq/rOiSTaVfc6WbzvGNrBJ0nQIw3zPNgDDweF9pKHFW9hFQqDdns3kiJYVWXlKQ1';
      IconData += 'x2qMRKbGSmI7NcvreAmKsg+ynOpw3bGUZLXA/GwR4YbARJpmXASOxzehXP5thxh6pXIEd+7II0nekJWitOW9zqSPlcQnJ/WReA2NxhkkEskONclwe';
      IconData += 'BEUJY990R1eCh9tlFwReBJq96I4C4XCM8hkHjG9w7quQzb7HJLJx9dyl0qlA6bGPAr5HENraoay8N8M/bc0TYd0+imkUmnm4BQEAZLJ+1AoPMPY1+';
      IconData += 'aa8dJGyRWBaTdt3DGGJK3Dq1cKY90AjFpsLPY5syZk2DhbktZGJjBHW0TSMTXM4XLnjswk8sj7fPVKGUtJzZvWl6891twQeBKJLLs4M5/PdWwnKBb';
      IconData += '3IRaTHRHFKu86yiy3JK0zHgPdCjoIksnHUCi8ZN6fKM5APp+DTGbb88LrboK3NUDcEJgXrV2jJl2ARGKLIYmqXjqqUVs33o/6ZrNies6uF52kEgQB';
      IconData += 'EgljQRqK4DmzwMZmDiSwaQFJTNFtGdY4IctbHTGrkweczmS7ESvRBwKdFXWKXO4JJqkcgD4s0QJbQJ9o0ySuZu2ymny+YQaZOARo1U+7Va6+J7DXt';
      IconData += '7d7BX/5i44X4ZrxLy+HMhK4z4nbzS12duPfcvUgsnuA28jMIQjMS3mNKwKHQgtm4sha3hgnyDZ6q+KkE7eezuRa9ZpH8zC9HcnDlM0+H3n3mR8IzI';
      IconData += 'uYA3etlKuryxO1wpVK9WMnFtsrHQ4vOlq8Zl09OsqYXtN0JtHnlMDWevcou88w/vU5gekHv1Z7M9YblEw+hmz2eYcQHOlKctKIEQotMMmiUQ4E0O2';
      IconData += 'ZhjX4zNHvk3o3/f7o7jPcztAJutbu9Hr7isD0xanVxuNGkyF7a/nqul1J9BxtpXI0Eo9C03SGwJK0NlTjRSSyBOWyAokEW0I6PX0HspwCRdlHt9ri';
      IconData += 'mdkZGSSwTexIOqFU9dJVa9BonEEsJnc08Y+qKyke32SaQUYRa6bT/znSDi9Z3rId6igW9yGRSI7tEOXdfSYTZW405UwVgTstlztxmaLsdzTxA8BIu';
      IconData += '5KsfcvGMP7joUmcze4xXkIsdmskD1O3oQ5VvYRM5ink8y/QfTY9RL6USLkkMJ3IcssCWC1rOLwI5fJvR96VFI9vMlsPWq0Lx3Emic/pxFowOA+yfH';
      IconData += 'fkB+erVwrzfhGsEeFNXohLAovirOtutHUJWSTyqWuD6zs728yARKt1AbKcgmx2r+dnU9U25PMv4N49dsg+GJyHQuGZK0MHgYDQcW38PJnEs/sMwLG';
      IconData += 'sbDy+adZhy+WDka+8NORqrsTbKpWqaz3BgYAAhcIz2N3dY+rbZPGYKM58FNUzunuazXPmwaHhJnkJSqX/YjwTPytysCOh/In7cbvcjM5GHx/XXcmI';
      IconData += '0gkgsg/ILQQCAuRyTyCZvN+xeExVL+H09B0Ui/tQLO7DyUndlryJxBYUiwVXyauq7Y49Ueg+k2uxhgR2aiEBjBqlGzXhUGiBcW1py+OmZ/HqlVG+G';
      IconData += 'WSoQBCM6+BGfG5vfQ8sr+1fAtdqdaZ5g0dPhOvNDLS8qaLsu/Iw0a76uPYBkey0LG+Zmw817apbi8RZZCnZpFxGv6ty0Ac6r54I1wSORJYgGJyHVu';
      IconData += 'sCVPUSGo2zkT/Q0ehnIAhX6hTj3gdk3Xw4aXdxUnuieAMdSthtrEQX2oGFJLiOgFsva0g/qIeHR33j7UbjDBRlH9JpvmuklUoVksnHoCj7ppUf1H0';
      IconData += 'e154oXkHroPEcRnC/3EyS1uGrrwwLeXr6zpUtAYbE7Gsm3iY3zbpB0E4thMcdwbVanQkNyOqaYHCeWfBNSNpsnjOJMz8nr1S1bYZuZIMGEviaBCPt';
      IconData += 'jm6UlKzLrYnFsj7U3UCIwguJm83zrqLvrdYF85nITihalkcUZ3y93Ju2vqury1yL/N3wCoFJ6aVSOXJlCD0ev02dwJdQqRz1JK81g5zNPudiHM9wm';
      IconData += '9MdipPdrY3xWWnPws+ZZ9r6AgD3emF/88UX//4l7xf15s2b8MMPH+D09My0MKN28T755GdQqVS7xonB4Dysra3CP/1TDP7lX/4XyPJdmJubYWrHtV';
      IconData += 'odNE2DX/7yHyZG3mz2OXz48IEi4xoUCs8gHt+EX/zi5/B3f/czAPhrzw0YudwTuHnzpi8JnM+/NA9uSVrj/jDzzILveHzT3HRwevrOlYw0WW4tCAI';
      IconData += 'TJ3Z7HXJzaeWOSc7SWl9bktbMcCMQECAaXf7oGm+ZP99onEGjcQat1jmo6uXQ44lofSeDH/3ww//81UuxCYmFw+FFKBSejfTva5oO79+3HSfJEomk';
      IconData += 'eWonElsTu/G1Wh0ymafU179z/ACTnIAfkU4/NVtdJ3kfpy4Gpk9EWjt61DFnICA4Jq+m6UysPMlhb+trOxUQEMVZ35K30Tgzyct75tmzBLa6NTyoR';
      IconData += 'lhJMkkC0+L4wxDYz6Dr+d2XriOBRxKn0qtIrfpQk4w7rTuVBrXgdkQjE0nXscK8ydnyilLpgBkZ9NKmih978YKnUg9AllMAYEi/RKPLE2tHpEkyjP';
      IconData += 'W1jhiyLu2M4+mjSGTJTMS4IWc7bVDVNlP3HXWPAVpgG4RCCxCL3TK/zmb3JvZe6PqpU7X+Wq3eU/96GA/DTTnbacTu7p5ZM19ZWfbcgrcbXr3wsnz';
      IconData += 'XjPdarYuhd/iOMv4NhQZ3oTVNH6iPuljcd0RCUZxl5o0xDu7tOpMDWBAE2NnZ9txn8CyByT7fYR/0Uce/hqrG4BlcRfmGaabI53NQq/0OarXfQbn8';
      IconData += 'W4aETgcmrrN61K+u88OH9z1Z/77h5ZsQiSx1uNLjzEqzy66WHBGfDE8AGA0X9O+L4ixTxjg9fefIlcYlcc5dZ6+2j97w+o2wutLjHO+jydFonA1cl';
      IconData += '6ZjdkEQbOePZXmLyWoPWjKr1eqMeomqXqJAe4f3s+9513lqCBwICJDNXi3iNoTi3B8qUNW2ZcvfJWSzz+FXv/o15PMvupaAFGWfafyQ5a2urhtNbF';
      IconData += '3Xu04YkW0NsZgMmczTjpFHtMLstaCF/Hd2tj3dOuqJYYZ++OlPfwKBgAC///0fAADgD384g1/+8h/gpz/9iYuv+iO4efMmqGqbsXAfPnyA77//I5T';
      IconData += 'Lr6HZPIe//dub8MknPzNJv7t7NWwQDi/Cv/3b/+76CnNzs6BpGnz//R8BAOBPf/pviESWYG5ulnkYv/zyN/D73/+hw9IKggC3b0sfR+ICvievpunw';
      IconData += 'z//8f8zrH4vd8rxskKd6ofuB7mUdh/zqldWvwuFh1XbY34hpDUkWqyCAouT71q81TYc7d2TT2pNGA7r5wIpgcB7i8U2IRj/z7WCC3XVMJh+b1ywYn';
      IconData += 'IdiseD5zzVVBNY0HRKJJKMkOOqBh35udal0AIeHR4x7bQcnzfLWIYVuIONvXqtljgPZ7B6jsvH11/mp6PueKgIDGBleeqCdHqkb50FSq73paiWH6b';
      IconData += 'BKJh/bWnhi3b3Uvztu0FNsg3o+SOAJwmqxksn7E4t1SHaanjPN59Jb2MYAAAQASURBVHOOraSqtuHevRRT+tjYWPe19M2g4Q09r53JPJoqxZGpJDC';
      IconData += 'PN07TdDg8rIKqtoeWrS2VDkBV2xCPb/paMXLYgzwWuzVWyWAk8Ajjnmk8fRF8h1JIYCQxYgTknZaMsx1uTPvNzGS2zR1LBqH5UI9EjI+846xEIIFd';
      IconData += 'QCr1gGlLRBL7i7zTnJ33BYHJfl4k8fTCqoftB/L6IgamQWZw6Zh4kiUmxOjIS1cc/EJe3xH4yvqyia1pzVD6AdYmjXB4EXK5L3zT1OJLAtuR2G83f';
      IconData += 'hq9KT8exL4lMIDRGFEovGRcr0xme2ra7KYVqtqGdPop06Y6jU0aSOABUKvVGXUGQRDg4cP7WCvmFI3GGaTTT5lhET/X9n1PYACj/JDJPGU0qmKxWy';
      IconData += 'DLd9Gl5jjeFQQBCoWcrz0mJDAVU1k1mtGl5tdl9lOmGQl8jVMewDuLrqY1T6Eo+4zL7Nd4Fwl8DZcarfH4re7u7h4zAy0IAuRyT1CwAAk8mEutKN8';
      IconData += 'w8q/EGuPwvPteENkFTbCysux5ATok8ARQq9U/qkxeWWNRnIFU6gEO048YjcYZZLN7zLUmsq94rZHAI7fG4fAiyPJddOlccJcBjMaMVOoBWl0k8Ohi';
      IconData += '43z+he2DZiwfR5UMp8RVlH2mm4p4OJnMNh6MSGB3UKlUQVH2GVcPiXx94gqCALK8hcMlSODxuNWl0kFHsgXASLjE45toQWw8mHL5wJa48fgmJgeRw';
      IconData += 'HwRmQis+70ts5fwPca5SGDuiSwIAqyuLkMstumbOnIvkXticTc21jDcQALzR+Ra7Y1tjAxgJGhisU1YXV2euodXVdtwfFyHSqXaVdA+FtuEjY11tL';
      IconData += 'hIYP5hJ+pudbEjkSWQpHXPWuZm89xcadptVxOK0COBPW+VDw+rXS0TcSsjkSXzP14JraptaDTOoNE4g+PjetcdUNPsaSCBfYx+biZN6FBoHiKRTyE';
      IconData += 'UWgBRnBk7qVW1Dc3mBTSb59BovIVm86Ln0jZRnIFodNnTHgUSGOGYzMSi9dtoSNzuQECASORTAACzVBUICI5J02yemzuFyRJw43ta11Wpdu5xJLKE';
      IconData += 'lhYJjCBENizeYIQeJ2ivgLj6CCQwYgAXttk8B1Vt93S7Rwna0odCCxAKzaOFRQIjRkXs9+8vQdN0aDbPqe+1Hf2dublZk5RzczMgirPm/xFIYAQC4';
      IconData += 'TJu4CVAIJDACAQCCYxAIJDACAQSGIFAIIERCAQSGIFAIIERCCQwAoFAAiMQCCQwAoEERiAQSGAEAoEERiAQSGAEAgmMQCCQwAgEAgmMQCCQwAgEEh';
      IconData += 'iBQCCBEQgEEhiBQAIjEAgkMAKBQAIjEAgkMAKBBEYgEEhgBAKBBEYgEEhgBAIJjEAgJoX/D5PJL0xH01oxAAAAAElFTkSuQmCC';
      EXIT(IconData);
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateDuplicateSearchStringSetup@1002();
    VAR
      DuplicateSearchStringSetup@1000 : Record 5095;
    BEGIN
      DuplicateSearchStringSetup.DELETEALL;
      DuplicateSearchStringSetup.CreateDefaultSetup;
    END;

    [UpgradePerDatabase]
    PROCEDURE UpgradeCustomReportLayout@1041();
    VAR
      CustomReportLayout@1001 : Record 9650;
    BEGIN
      CustomReportLayout.SETRANGE("Built-In",TRUE);
      IF NOT CustomReportLayout.FINDSET THEN
        EXIT;
      REPEAT
        MoveCustomReportLayoutBlobs(CustomReportLayout);
      UNTIL CustomReportLayout.NEXT = 0;
    END;

    LOCAL PROCEDURE MoveCustomReportLayoutBlobs@230(VAR CustomReportLayout@1001 : Record 9650);
    VAR
      ReportLayout@1000 : Record 2000000082;
    BEGIN
      GetRelatedReportLayout(CustomReportLayout,ReportLayout);
      CustomReportLayout.CALCFIELDS(Layout,"Custom XML Part");
      ReportLayout.CALCFIELDS(Layout,"Custom XML Part");
      IF CustomReportLayout.Layout.HASVALUE THEN BEGIN
        IF NOT ReportLayout.Layout.HASVALUE THEN BEGIN
          CLEAR(ReportLayout.Layout);
          ReportLayout.Layout := CustomReportLayout.Layout;
          ReportLayout.MODIFY;
        END;
        CLEAR(CustomReportLayout.Layout);
        CustomReportLayout.MODIFY;
      END;
      IF CustomReportLayout."Custom XML Part".HASVALUE THEN BEGIN
        IF NOT ReportLayout."Custom XML Part".HASVALUE THEN BEGIN
          CLEAR(ReportLayout."Custom XML Part");
          ReportLayout."Custom XML Part" := CustomReportLayout."Custom XML Part";
          ReportLayout.MODIFY;
        END;
        CLEAR(CustomReportLayout."Custom XML Part");
        CustomReportLayout.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetRelatedReportLayout@36(VAR CustomReportLayout@1001 : Record 9650;VAR ReportLayout@1000 : Record 2000000082);
    BEGIN
      IF ReportLayout.GET(CustomReportLayout.Code) THEN
        EXIT;
      ReportLayout.INIT;
      ReportLayout.Code := CustomReportLayout.Code;
      ReportLayout."Report ID" := CustomReportLayout."Report ID";
      IF CustomReportLayout.Type = CustomReportLayout.Type::RDLC THEN
        ReportLayout.Type := ReportLayout.Type::RDLC
      ELSE
        ReportLayout.Type := ReportLayout.Type::Word;
      ReportLayout."File Extension" := COPYSTR(CustomReportLayout."File Extension",1,MAXSTRLEN(ReportLayout."File Extension"));
      ReportLayout."Report Name" := COPYSTR(CustomReportLayout."Report Name",1,MAXSTRLEN(ReportLayout."Report Name"));
      ReportLayout.Description := COPYSTR(CustomReportLayout.Description,1,MAXSTRLEN(ReportLayout.Description));
      ReportLayout.INSERT;
    END;

    [UpgradePerCompany]
    PROCEDURE InsertDataExchVendorIdMapping@1300();
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      InsertDataExchColumnDefRecord(
        'OCRINVOICE','OCRINVHEADER',18,'Supplier ID','Buy-from Vendor ID',
        '/Document/Parties/Party[Type[text()=''supplier'']]/ExternalId','');
      InsertDataExchColumnDefRecord(
        'OCRCREDITMEMO','OCRCRMEMOHEADER',18,'Supplier ID','Buy-from Vendor ID',
        '/Document/Parties/Party[Type[text()=''supplier'']]/ExternalId','');
      InsertDataExchFieldMappingRecord(
        'OCRINVOICE','OCRINVHEADER',18,
        DATABASE::"Intermediate Data Import",0,DATABASE::Vendor,Vendor.FIELDNO(Id),
        '',TRUE);
      InsertDataExchFieldMappingRecord(
        'OCRCREDITMEMO','OCRCRMEMOHEADER',18,
        DATABASE::"Intermediate Data Import",0,DATABASE::Vendor,Vendor.FIELDNO(Id),
        '',TRUE);
    END;

    LOCAL PROCEDURE DoesDataExchLineExist@1301(DataExchDefCode@1005 : Code[20];Code@1006 : Code[20]) : Boolean;
    VAR
      DataExchLineDef@1011 : Record 1227;
    BEGIN
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE(Code,Code);
      EXIT(DataExchLineDef.FINDFIRST);
    END;

    LOCAL PROCEDURE DoesDataExchMappingExist@1302(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20]) : Boolean;
    VAR
      DataExchMapping@1000 : Record 1224;
    BEGIN
      DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDefCode);
      EXIT(DataExchMapping.FINDFIRST);
    END;

    LOCAL PROCEDURE InsertDataExchColumnDefRecord@1303(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20];ColumnNo@1000 : Integer;Name@1007 : Text[250];Description@1001 : Text[50];Path@1002 : Text[250];Constant@1003 : Text[30]);
    VAR
      DataExchColumnDef@1011 : Record 1223;
    BEGIN
      IF NOT DoesDataExchLineExist(DataExchDefCode,DataExchLineDefCode) THEN
        EXIT;
      DataExchColumnDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchColumnDef.SETRANGE("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchColumnDef.SETRANGE("Column No.",ColumnNo);
      IF DataExchColumnDef.FINDFIRST THEN
        EXIT;
      DataExchColumnDef.INIT;
      DataExchColumnDef.VALIDATE("Data Exch. Def Code",DataExchDefCode);
      DataExchColumnDef.VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchColumnDef.VALIDATE("Column No.",ColumnNo);
      DataExchColumnDef.VALIDATE(Name,Name);
      DataExchColumnDef.VALIDATE(Description,Description);
      DataExchColumnDef.VALIDATE(Path,Path);
      DataExchColumnDef.VALIDATE(Constant,Constant);
      DataExchColumnDef.INSERT;
    END;

    LOCAL PROCEDURE InsertDataExchFieldMappingRecord@1304(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20];ColumnNo@1001 : Integer;TableId@1007 : Integer;FieldId@1008 : Integer;TargetTableId@1003 : Integer;TargetFieldId@1004 : Integer;TransformationRule@1012 : Code[20];Optional@1002 : Boolean);
    VAR
      DataExchFieldMapping@1000 : Record 1225;
    BEGIN
      IF NOT DoesDataExchMappingExist(DataExchDefCode,DataExchLineDefCode) THEN
        EXIT;
      DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchFieldMapping.SETRANGE("Table ID",TableId);
      DataExchFieldMapping.SETRANGE("Column No.",ColumnNo);
      DataExchFieldMapping.SETRANGE("Field ID",FieldId);
      IF DataExchFieldMapping.FINDFIRST THEN
        EXIT;
      DataExchFieldMapping.INIT;
      DataExchFieldMapping.VALIDATE("Data Exch. Def Code",DataExchDefCode);
      DataExchFieldMapping.VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchFieldMapping.VALIDATE("Table ID",TableId);
      DataExchFieldMapping.VALIDATE("Column No.",ColumnNo);
      DataExchFieldMapping.VALIDATE("Field ID",FieldId);
      DataExchFieldMapping.VALIDATE(Optional,Optional);
      DataExchFieldMapping.VALIDATE("Target Table ID",TargetTableId);
      DataExchFieldMapping.VALIDATE("Target Field ID",TargetFieldId);
      DataExchFieldMapping.VALIDATE("Transformation Rule",TransformationRule);
      DataExchFieldMapping.INSERT;
    END;

    [UpgradePerCompany]
    PROCEDURE CleanupDataExch@14();
    VAR
      DataExch@1000 : Record 1220;
      DataExchField@1001 : Record 1221;
    BEGIN
      DataExch.DELETEALL;
      DataExchField.DELETEALL;
    END;

    LOCAL PROCEDURE CreateTenantWebServiceColumn@1078(TenantWebServiceRecordId@1002 : RecordID;FieldNumber@1000 : Integer;DataItem@1003 : Integer);
    VAR
      TenantWebServiceColumns@1001 : Record 6711;
      FieldTable@1004 : Record 2000000041;
      ODataUtility@1005 : Codeunit 6710;
      FieldNameConverted@1006 : Text;
    BEGIN
      TenantWebServiceColumns.INIT;
      TenantWebServiceColumns."Entry ID" := 0;
      TenantWebServiceColumns."Data Item" := DataItem;
      TenantWebServiceColumns."Field Number" := FieldNumber;
      TenantWebServiceColumns.TenantWebServiceID := TenantWebServiceRecordId;
      TenantWebServiceColumns.Include := TRUE;

      IF FieldTable.GET(DataItem,FieldNumber) THEN
        FieldNameConverted := ODataUtility.ConvertNavFieldNameToOdataName(FieldTable.FieldName);

      TenantWebServiceColumns."Field Name" := COPYSTR(FieldNameConverted,1,250);
      IF TenantWebServiceColumns.INSERT THEN;
    END;

    [UpgradePerCompany]
    PROCEDURE CreateJobWebServices@1077();
    VAR
      TenantWebService@1000 : Record 2000000168;
    BEGIN
      TenantWebService.INIT;
      TenantWebService."Object Type" := TenantWebService."Object Type"::Page;
      TenantWebService."Object ID" := PAGE::Page89;
      TenantWebService."Service Name" := COPYSTR(JobListTxt,1,MAXSTRLEN(TenantWebService."Service Name"));
      TenantWebService.Published := TRUE;

      IF TenantWebService.INSERT THEN BEGIN
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1,DATABASE::Table167);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,3,DATABASE::Table167);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,5,DATABASE::Table167);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,19,DATABASE::Table167);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,20,DATABASE::Table167);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,2,DATABASE::Table167);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1036,DATABASE::Table167);

        CreateTenantWebServiceOData(TenantWebService);
      END;

      CLEAR(TenantWebService);

      TenantWebService.INIT;
      TenantWebService."Object Type" := TenantWebService."Object Type"::Page;
      TenantWebService."Object ID" := PAGE::Page1002;
      TenantWebService."Service Name" := COPYSTR(JobTaskLinesTxt,1,MAXSTRLEN(TenantWebService."Service Name"));
      TenantWebService.Published := TRUE;

      IF TenantWebService.INSERT THEN BEGIN
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,2,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,3,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,4,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,21,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,7,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,6,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,9,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,66,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,67,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,10,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,11,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,12,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,13,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,14,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,15,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,17,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,16,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,64,DATABASE::Table1001);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,65,DATABASE::Table1001);

        CreateTenantWebServiceOData(TenantWebService);
      END;

      CLEAR(TenantWebService);

      TenantWebService.INIT;
      TenantWebService."Object Type" := TenantWebService."Object Type"::Page;
      TenantWebService."Object ID" := PAGE::Page1007;
      TenantWebService."Service Name" := COPYSTR(JobPlanningLinesTxt,1,MAXSTRLEN(TenantWebService."Service Name"));
      TenantWebService.Published := TRUE;

      IF TenantWebService.INSERT THEN BEGIN
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1000,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,3,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,5794,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,4,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,5,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,7,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,8,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,9,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1060,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1002,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1003,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1004,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1006,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1071,DATABASE::Table1003);
        CreateTenantWebServiceColumn(TenantWebService.RECORDID,1035,DATABASE::Table1003);

        CreateTenantWebServiceOData(TenantWebService);
      END;

      CreatePowerBICustomerList;
      CreatePowerBIVendorList;
      CreatePowerBIJobList;
      CreatePowerBISalesList;
      CreatePowerBIPurchaseList;
      CreatePowerBIItemPurchaseList;
      CreatePowerBIItemSalesList;
      CreatePowerBIGLAmountList;
      CreatePowerBIGLBudgetedAmountList;
      CreatePowerBITopCustOverviewWebService;
      CreatePowerBISalesHdrCustWebService;
      CreatePowerBICustItemLedgEntWebService;
      CreatePowerBICustLedgerEntriesWebService;
      CreatePowerBIVendorLedgerEntriesWebService;
      CreatePowerBIPurchaseHdrVendorWebService;
      CreatePowerBIVendItemLedgEntWebService;
      CreatePowerBIAgedAccPayableWebService;
      CreatePowerBIAgedAccReceivableWebService;
      CreatePowerBIAgedInventoryChartWebService;
      CreatePowerBIJobActBudgPriceWebService;
      CreatePowerBIJobProfitabilityWebService;
      CreatePowerBIJobActBudgCostWebService;
      CreatePowerBISalesPipelineWebService;
      CreatePowerBITop5OpportunitiesWebService;
      CreatePowerBIWorkDateCalcWebService;
      CreatePowerBIReportLabelsWebService;
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Chart of Accounts",PowerBIChartOfAccountsTxt,TRUE);
    END;

    LOCAL PROCEDURE CreateTenantWebServiceOData@1032(TenantWebService@1000 : Record 2000000168);
    VAR
      TenantWebServiceOData@1003 : Record 6710;
      ODataUtility@1002 : Codeunit 6710;
      SelectText@1001 : Text;
    BEGIN
      TenantWebServiceOData.INIT;
      TenantWebServiceOData.TenantWebServiceID := TenantWebService.RECORDID;
      IF NOT TenantWebServiceOData.INSERT THEN;
      ODataUtility.GenerateSelectText(TenantWebService."Service Name",TenantWebService."Object Type",SelectText);
      TenantWebServiceOData.SetOdataSelectClause(SelectText);
      TenantWebServiceOData.MODIFY;
    END;

    LOCAL PROCEDURE CreatePowerBICustomerList@1087();
    VAR
      TenantWebService@1001 : Record 2000000168;
      Customer@1000 : Record 18;
      DetailedCustLedgEntry@1003 : Record 379;
      WebServiceManagement@1002 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Customer List",PowerBICustomerListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBICustomerListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Customer.FIELDNO("No."),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Customer.FIELDNO(Name),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Customer.FIELDNO("Credit Limit (LCY)"),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Customer.FIELDNO("Balance Due"),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedCustLedgEntry.FIELDNO("Posting Date"),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedCustLedgEntry.FIELDNO("Cust. Ledger Entry No."),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedCustLedgEntry.FIELDNO(Amount),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedCustLedgEntry.FIELDNO("Amount (LCY)"),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedCustLedgEntry.FIELDNO("Transaction No."),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedCustLedgEntry.FIELDNO("Entry No."),
        DATABASE::"Detailed Cust. Ledg. Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIVendorList@1086();
    VAR
      Vendor@1000 : Record 23;
      DetailedVendorLedgEntry@1001 : Record 380;
      TenantWebService@1003 : Record 2000000168;
      WebServiceManagement@1002 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Vendor List",PowerBIVendorListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIVendorListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Vendor.FIELDNO("No."),DATABASE::Vendor);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Vendor.FIELDNO(Name),DATABASE::Vendor);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Vendor.FIELDNO("Balance Due"),DATABASE::Vendor);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedVendorLedgEntry.FIELDNO("Posting Date"),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedVendorLedgEntry.FIELDNO("Applied Vend. Ledger Entry No."),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedVendorLedgEntry.FIELDNO(Amount),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedVendorLedgEntry.FIELDNO("Amount (LCY)"),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedVendorLedgEntry.FIELDNO("Transaction No."),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedVendorLedgEntry.FIELDNO("Entry No."),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,DetailedVendorLedgEntry.FIELDNO("Remaining Pmt. Disc. Possible"),
        DATABASE::"Detailed Vendor Ledg. Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIJobList@1085();
    VAR
      JobLedgerEntry@1000 : Record 11072005;
      TenantWebService@1001 : Record 2000000168;
      Job@1002 : Record 11072003;
      WebServiceManagement@1003 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Jobs List",PowerBIJobsListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIJobsListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Job.FIELDNO("No."),DATABASE::Table167);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Job.FIELDNO("Search Description"),DATABASE::Table167);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Job.FIELDNO(Complete),DATABASE::Table167);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Job.FIELDNO(Status),DATABASE::Table167);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,JobLedgerEntry.FIELDNO("Posting Date"),DATABASE::Table169);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,JobLedgerEntry.FIELDNO("Total Cost"),DATABASE::Table169);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,JobLedgerEntry.FIELDNO("Entry No."),DATABASE::Table169);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,JobLedgerEntry.FIELDNO("Entry Type"),DATABASE::Table169);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBISalesList@1084();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
      TenantWebService@1002 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Sales List",PowerBISalesListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBISalesListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesHeader.FIELDNO("No."),DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesHeader.FIELDNO("Requested Delivery Date"),
        DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesHeader.FIELDNO("Shipment Date"),DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesHeader.FIELDNO("Due Date"),DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesLine.FIELDNO(Quantity),DATABASE::"Sales Line");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesLine.FIELDNO(Amount),DATABASE::"Sales Line");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesLine.FIELDNO("No."),DATABASE::"Sales Line");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,SalesLine.FIELDNO(Description),DATABASE::"Sales Line");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIPurchaseList@1083();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      TenantWebService@1003 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Purchase List",PowerBIPurchaseListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIPurchaseListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseHeader.FIELDNO("No."),DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseHeader.FIELDNO("Order Date"),DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseHeader.FIELDNO("Expected Receipt Date"),
        DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseHeader.FIELDNO("Due Date"),DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseHeader.FIELDNO("Pmt. Discount Date"),
        DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseLine.FIELDNO(Quantity),DATABASE::"Purchase Line");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseLine.FIELDNO(Amount),DATABASE::"Purchase Line");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseLine.FIELDNO("No."),DATABASE::"Purchase Line");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,PurchaseLine.FIELDNO(Description),DATABASE::"Purchase Line");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIItemPurchaseList@1082();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1002 : Record 32;
      TenantWebService@1003 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Item Purchase List",PowerBIItemPurchasesListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIItemPurchasesListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Item.FIELDNO("No."),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Item.FIELDNO("Search Description"),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,ItemLedgerEntry.FIELDNO("Posting Date"),
        DATABASE::"Item Ledger Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,ItemLedgerEntry.FIELDNO("Invoiced Quantity"),
        DATABASE::"Item Ledger Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,ItemLedgerEntry.FIELDNO("Entry No."),
        DATABASE::"Item Ledger Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIItemSalesList@1081();
    VAR
      Item@1001 : Record 27;
      ValueEntry@1002 : Record 5802;
      TenantWebService@1003 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Item Sales List",PowerBIItemSalesListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIItemSalesListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Item.FIELDNO("No."),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,Item.FIELDNO("Search Description"),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,ValueEntry.FIELDNO("Posting Date"),DATABASE::"Value Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,ValueEntry.FIELDNO("Invoiced Quantity"),DATABASE::"Value Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,ValueEntry.FIELDNO("Entry No."),DATABASE::"Value Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIGLAmountList@1080();
    VAR
      GLAccount@1002 : Record 15;
      GLEntry@1003 : Record 17;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI GL Amount List",PowerBIGLAmountListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIGLAmountListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO("No."),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO(Name),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO("Account Type"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO("Debit/Credit"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLEntry.FIELDNO("Posting Date"),DATABASE::"G/L Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLEntry.FIELDNO(Amount),DATABASE::"G/L Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLEntry.FIELDNO("Entry No."),DATABASE::"G/L Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIGLBudgetedAmountList@1079();
    VAR
      GLAccount@1003 : Record 15;
      GLBudgetEntry@1002 : Record 96;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI GL Budgeted Amount",PowerBIGLBudgetedAmountListTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIGLBudgetedAmountListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO("No."),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO(Name),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO("Account Type"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLAccount.FIELDNO("Debit/Credit"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLBudgetEntry.FIELDNO(Date),DATABASE::"G/L Budget Entry");
      CreateTenantWebServiceColumn(TenantWebService.RECORDID,GLBudgetEntry.FIELDNO(Amount),DATABASE::"G/L Budget Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBITopCustOverviewWebService@8();
    VAR
      CustLedgerEntry@1003 : Record 21;
      Customer@1002 : Record 18;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Top Cust. Overview",PowerBITopCustOverviewTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBITopCustOverviewTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Entry No."),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Posting Date"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Customer No."),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Sales (LCY)"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Customer.FIELDNO(Name),
        DATABASE::Customer,metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBISalesHdrCustWebService@15();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      Item@1005 : Record 27;
      Customer@1006 : Record 18;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Sales Hdr. Cust.",PowerBISalesHdrCustTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBISalesHdrCustTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,SalesHeader.FIELDNO("No."),DATABASE::"Sales Header",
        metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,SalesLine.FIELDNO("No."),DATABASE::"Sales Line",
        metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,SalesLine.FIELDNO(Quantity),
        DATABASE::"Sales Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,SalesLine.FIELDNO("Qty. Invoiced (Base)"),
        DATABASE::"Sales Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,SalesLine.FIELDNO("Qty. Shipped (Base)"),
        DATABASE::"Sales Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO("Base Unit of Measure"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO(Description),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO(Inventory),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO("Unit Price"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Customer.FIELDNO("No."),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Customer.FIELDNO(Name),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Customer.FIELDNO(Balance),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Customer.FIELDNO("Country/Region Code"),
        DATABASE::Customer,metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBICustItemLedgEntWebService@22();
    VAR
      Customer@1003 : Record 18;
      ItemLedgerEntry@1002 : Record 32;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Cust. Item Ledg. Ent.",PowerBICustItemLedgEntTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBICustItemLedgEntTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Customer.FIELDNO("No."),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,ItemLedgerEntry.FIELDNO("Item No."),
        DATABASE::"Item Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,ItemLedgerEntry.FIELDNO(Quantity),
        DATABASE::"Item Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBICustLedgerEntriesWebService@27();
    VAR
      CustLedgerEntry@1003 : Record 21;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Cust. Ledger Entries",PowerBICustLedgerEntriesTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBICustLedgerEntriesTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Entry No."),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Due Date"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Remaining Amt. (LCY)"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO(Open),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Customer Posting Group"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Sales (LCY)"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,CustLedgerEntry.FIELDNO("Posting Date"),
        DATABASE::"Cust. Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIVendorLedgerEntriesWebService@30();
    VAR
      VendorLedgerEntry@1003 : Record 25;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Vendor Ledger Entries",PowerBIVendorLedgerEntriesTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIVendorLedgerEntriesTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,VendorLedgerEntry.FIELDNO("Entry No."),
        DATABASE::"Vendor Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,VendorLedgerEntry.FIELDNO("Due Date"),
        DATABASE::"Vendor Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,VendorLedgerEntry.FIELDNO("Remaining Amt. (LCY)"),
        DATABASE::"Vendor Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,VendorLedgerEntry.FIELDNO(Open),
        DATABASE::"Vendor Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIPurchaseHdrVendorWebService@10();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      Item@1005 : Record 27;
      Vendor@1006 : Record 23;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Purchase Hdr. Vendor",PowerBIPurchaseHdrVendorTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIPurchaseHdrVendorTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,PurchaseHeader.FIELDNO("No."),
        DATABASE::"Purchase Header",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,PurchaseLine.FIELDNO("No."),
        DATABASE::"Purchase Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,PurchaseLine.FIELDNO(Quantity),
        DATABASE::"Purchase Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO("Base Unit of Measure"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO(Description),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO(Inventory),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO("Qty. on Purch. Order"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Item.FIELDNO("Unit Price"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Vendor.FIELDNO("No."),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Vendor.FIELDNO(Name),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Vendor.FIELDNO(Balance),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Vendor.FIELDNO("Country/Region Code"),
        DATABASE::Vendor,metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIVendItemLedgEntWebService@7();
    VAR
      Vendor@1003 : Record 23;
      ItemLedgerEntry@1002 : Record 32;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1000 : Codeunit 9750;
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Vend. Item Ledg. Ent.",PowerBIVendItemLedgEntTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Query,PowerBIVendItemLedgEntTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,Vendor.FIELDNO("No."),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,ItemLedgerEntry.FIELDNO("Item No."),
        DATABASE::"Item Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RECORDID,ItemLedgerEntry.FIELDNO(Quantity),
        DATABASE::"Item Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeWorkDescripiton@28();
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoiceHeader@1003 : Record 112;
    BEGIN
      IF SalesHeader.FINDSET THEN
        REPEAT
          IF SalesHeader."Work Description".HASVALUE THEN BEGIN
            SalesHeader.CALCFIELDS("Work Description");
            IF NOT TryReadWorkDescriptionWithUTF8Encoding(SalesHeader,SalesHeader.FIELDNO("Work Description")) THEN
              ChangeEncodingToUTF8(SalesHeader,SalesHeader.FIELDNO("Work Description"));
          END;
        UNTIL SalesHeader.NEXT = 0;

      IF SalesInvoiceHeader.FINDSET THEN
        REPEAT
          IF SalesInvoiceHeader."Work Description".HASVALUE THEN BEGIN
            SalesInvoiceHeader.CALCFIELDS("Work Description");
            IF NOT TryReadWorkDescriptionWithUTF8Encoding(SalesInvoiceHeader,SalesInvoiceHeader.FIELDNO("Work Description")) THEN
              ChangeEncodingToUTF8(SalesInvoiceHeader,SalesInvoiceHeader.FIELDNO("Work Description"));
          END;
        UNTIL SalesInvoiceHeader.NEXT = 0;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryReadWorkDescriptionWithUTF8Encoding@29(NavRecord@1002 : Variant;FieldNo@1003 : Integer);
    VAR
      TempBlob@1004 : TEMPORARY Record 99008535;
      RecordRef@1005 : RecordRef;
      FieldRef@1006 : FieldRef;
      InStream@1000 : InStream;
      TempText@1001 : Text;
      textlen@1100285100 : Integer;
    BEGIN
      RecordRef.GETTABLE(NavRecord);
      FieldRef := RecordRef.FIELD(FieldNo);
      TempBlob.Blob := FieldRef.VALUE;
      TempBlob.Blob.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
      textlen := InStream.READ(TempText);
      CLEAR(TempBlob.Blob);
    END;

    LOCAL PROCEDURE ChangeEncodingToUTF8@31(NavRecord@1000 : Variant;FieldNo@1004 : Integer);
    VAR
      TempBlob@1007 : TEMPORARY Record 99008535;
      RecordRef@1005 : RecordRef;
      FieldRef@1006 : FieldRef;
      InStream@1001 : InStream;
      OutStream@1002 : OutStream;
      TempText@1003 : Text;
    BEGIN
      RecordRef.GETTABLE(NavRecord);
      FieldRef := RecordRef.FIELD(FieldNo);
      TempBlob.Blob := FieldRef.VALUE;
      TempBlob.Blob.CREATEINSTREAM(InStream,TEXTENCODING::Windows);
      InStream.READ(TempText);
      CLEAR(TempBlob.Blob);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,TEXTENCODING::UTF8);
      OutStream.WRITE(TempText);
      FieldRef.VALUE := TempBlob.Blob;
      RecordRef.MODIFY;
    END;

    LOCAL PROCEDURE CreatePowerBIAgedAccPayableWebService@42();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Aged Acc. Payable",PowerBIAgedAccPayableTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIAgedAccPayableTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Period Type"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Date),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Date Sorting"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Period Type Sorting"),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIAgedAccReceivableWebService@46();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Aged Acc. Receivable",PowerBIAgedAccReceivableTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIAgedAccReceivableTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Date),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Date Sorting"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Period Type"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Period Type Sorting"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure Name"),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIAgedInventoryChartWebService@49();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Aged Inventory Chart",PowerBIAgedInventoryChartTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIAgedInventoryChartTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Date),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Period Type"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Period Type Sorting"),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIJobActBudgPriceWebService@56();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Job Act. v. Budg. Price",PowerBIJobActBudgPriceTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIJobActBudgPriceTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIJobProfitabilityWebService@59();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Job Profitability",PowerBIJobProfitabilityTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIJobProfitabilityTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIJobActBudgCostWebService@61();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Job Act. v. Budg. Cost",PowerBIJobActBudgCostTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIJobActBudgCostTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBISalesPipelineWebService@63();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Sales Pipeline",PowerBISalesPipelineTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBISalesPipelineTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Row No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure No."),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBITop5OpportunitiesWebService@66();
    VAR
      PowerBIChartBuffer@1002 : Record 6305;
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Top 5 Opportunities",PowerBITop5OpportunitiesTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBITop5OpportunitiesTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIChartBuffer.FIELDNO("Measure No."),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIWorkDateCalcWebService@73();
    VAR
      TenantWebService@1000 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI WorkDate Calc.",PowerBIWorkDateCalcTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIWorkDateCalcTxt);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    LOCAL PROCEDURE CreatePowerBIReportLabelsWebService@12();
    VAR
      PowerBIReportLabels@1000 : Record 6306;
      TenantWebService@1001 : Record 2000000168;
      WebServiceManagement@1002 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Report Labels",PowerBIReportLabelsTxt,TRUE);

      TenantWebService.GET(TenantWebService."Object Type"::Page,PowerBIReportLabelsTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIReportLabels.FIELDNO("Label ID"),
        DATABASE::"Power BI Report Labels");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RECORDID,PowerBIReportLabels.FIELDNO("Text Value"),
        DATABASE::"Power BI Report Labels");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateContactDuplicateSearchString@1001();
    VAR
      ContDuplicateSearchString@1000 : Record 5086;
    BEGIN
      ContDuplicateSearchString.DELETEALL;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeUserGroup@1005();
    VAR
      UserGroup@1000 : Record 9000;
    BEGIN
      UserGroup.MODIFYALL("Assign to All New Users",FALSE);
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeO365SalesInitialSetup@1008();
    VAR
      O365SalesInitialSetup@1000 : Record 2110;
    BEGIN
      IF O365SalesInitialSetup.GET THEN BEGIN
        O365SalesInitialSetup."Tax Type" := O365SalesInitialSetup."Tax Type"::VAT;
        O365SalesInitialSetup."Coupons Integration Enabled" := TRUE;
        O365SalesInitialSetup."Graph Enablement Reminder" := TRUE;
        O365SalesInitialSetup.MODIFY;
      END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeJobQueueEntries@1006();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"O365 Sync. Management");
      JobQueueEntry.DELETEALL;
    END;

    [UpgradePerDatabase]
    PROCEDURE CreateWorkflowWebhookWebServices@2();
    VAR
      TenantWebService@1002 : Record 2000000168;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Entity",'salesDocuments',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Line Entity",'salesDocumentLines',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Entity",'purchaseDocuments',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Line Entity",'purchaseDocumentLines',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Entity",'workflowSalesDocuments',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Line Entity",'workflowSalesDocumentLines',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Entity",'workflowPurchaseDocuments',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Line Entity",'workflowPurchaseDocumentLines',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Gen. Journal Batch Entity",'workflowGenJournalBatches',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Gen. Journal Line Entity",'workflowGenJournalLines',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow - Customer Entity",'workflowCustomers',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow - Item Entity",'workflowItems',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow - Vendor Entity",'workflowVendors',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow Webhook Subscriptions",'workflowWebhookSubscriptions',TRUE);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Codeunit,CODEUNIT::"Workflow Webhook Subscription",'WorkflowActionResponse',TRUE);
    END;

    [UpgradePerDatabase]
    PROCEDURE CreateExcelTemplateWebServices@3();
    BEGIN
      CreateExcelTemplateWebService(ExcelTemplateIncomeStatementTxt,PAGE::"Income Statement Entity");
      CreateExcelTemplateWebService(ExcelTemplateBalanceSheetTxt,PAGE::"Balance Sheet Entity");
      CreateExcelTemplateWebService(ExcelTemplateTrialBalanceTxt,PAGE::"Trial Balance Entity");
      CreateExcelTemplateWebService(ExcelTemplateRetainedEarningsStatementTxt ,PAGE::"Retained Earnings Entity");
      CreateExcelTemplateWebService(ExcelTemplateCashFlowStatementTxt ,PAGE::"Cash Flow Statement Entity");
      CreateExcelTemplateWebService(ExcelTemplateAgedAccountsReceivableTxt ,PAGE::"Aged AR Entity");
      CreateExcelTemplateWebService(ExcelTemplateAgedAccountsPayableTxt ,PAGE::"Aged AP Entity");
      CreateExcelTemplateWebService(ExcelTemplateCompanyInformationTxt ,PAGE::ExcelTemplateCompanyInfo);
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeBankAccReconciliation@1();
    VAR
      BankAccReconciliation@1000 : Record 273;
    BEGIN
      BankAccReconciliation.MODIFYALL("Copy VAT Setup to Jnl. Line",TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateExcelTemplateWebService@4(ObjectName@1001 : Text;PageID@1000 : Integer);
    VAR
      TenantWebService@1003 : Record 2000000168;
    BEGIN
      CLEAR(TenantWebService);
      WebServiceManagement.CreateTenantWebService(TenantWebService."Object Type"::Page,PageID,ObjectName,TRUE);
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeReportSelections@5();
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        IF NOT GET(Usage::"Pro Forma S. Invoice",'1') THEN
          InsertReportSelections(Usage::"Pro Forma S. Invoice",'1',REPORT::"Standard Sales - Pro Forma Inv");
        IF NOT GET(Usage::"S.Arch.Blanket",'1') THEN
          InsertReportSelections(Usage::"S.Arch.Blanket",'1',REPORT::Report5176);
        IF NOT GET(Usage::"P.Arch.Blanket",'1') THEN
          InsertReportSelections(Usage::"P.Arch.Blanket",'1',REPORT::Report5174);
      END;
    END;

    LOCAL PROCEDURE InsertReportSelections@6(ReportUsage@1000 : Integer;ReportSequence@1001 : Code[10];ReportID@1002 : Integer);
    VAR
      ReportSelections@1003 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        INIT;
        Usage := ReportUsage;
        Sequence := ReportSequence;
        "Report ID" := ReportID;
        INSERT;
      END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeSalesSetup@75();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      IF SalesReceivablesSetup.GET THEN BEGIN
        SalesReceivablesSetup."Archive Orders" := SalesReceivablesSetup."Archive Quotes and Orders";
        IF SalesReceivablesSetup."Archive Quotes and Orders" THEN
          SalesReceivablesSetup."Archive Quotes" := SalesReceivablesSetup."Archive Quotes"::Always;
        SalesReceivablesSetup.MODIFY;
      END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradePurchSetup@76();
    VAR
      PurchPayablesSetup@1000 : Record 312;
    BEGIN
      IF PurchPayablesSetup.GET THEN BEGIN
        PurchPayablesSetup."Archive Orders" := PurchPayablesSetup."Archive Quotes and Orders";
        IF PurchPayablesSetup."Archive Quotes and Orders" THEN
          PurchPayablesSetup."Archive Quotes" := PurchPayablesSetup."Archive Quotes"::Always;
        PurchPayablesSetup.MODIFY;
      END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeCRMConnectionString@9();
    VAR
      CRMConnectionSetup@1000 : Record 5330;
    BEGIN
      IF CRMConnectionSetup.GET THEN
        CRMConnectionSetup.SetConnectionString(CRMConnectionSetup."Connection String");
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateO365EmailSetup@1050();
    VAR
      O365EmailSetup@1000 : Record 2118;
      NewO365EmailSetup@1003 : Record 2118;
      TempO365EmailSetup@1004 : TEMPORARY Record 2118;
      IntegrationManagement@1001 : Codeunit 5150;
    BEGIN
      IF O365EmailSetup.FINDSET THEN
        REPEAT
          IF UPPERCASE(O365EmailSetup.Code) = UPPERCASE(O365EmailSetup.Email) THEN BEGIN
            TempO365EmailSetup.COPY(O365EmailSetup);
            TempO365EmailSetup.INSERT;
          END;
        UNTIL O365EmailSetup.NEXT = 0;

      IF TempO365EmailSetup.FINDSET THEN
        REPEAT
          IF O365EmailSetup.GET(TempO365EmailSetup.Code,TempO365EmailSetup.RecipientType) THEN BEGIN
            NewO365EmailSetup := O365EmailSetup;
            NewO365EmailSetup.Code := COPYSTR(IntegrationManagement.GetIdWithoutBrackets(CREATEGUID),1,MAXSTRLEN(O365EmailSetup.Code));

            O365EmailSetup.DELETE;
            NewO365EmailSetup.INSERT;
          END;
        UNTIL TempO365EmailSetup.NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateAzureADMgtProviderSetup@1066();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Setup Azure AD Mgt. Provider");
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeFinChargeInterestRate@1070013();
    VAR
      FinanceChargeInterestRate@1070000 : Record 572;
      UPGFinChargeInterestRate@1070001 : Record 104087;
    BEGIN
      IF UPGFinChargeInterestRate.FINDSET THEN
        REPEAT
          FinanceChargeInterestRate.TRANSFERFIELDS(UPGFinChargeInterestRate);
          FinanceChargeInterestRate.INSERT;
        UNTIL UPGFinChargeInterestRate.NEXT = 0;

      UPGFinChargeInterestRate.DELETEALL;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeFinanceChargeTerms@1070016();
    VAR
      FinanceChargeTerms@1070000 : Record 5;
    BEGIN
      WITH FinanceChargeTerms DO
        IF FINDSET THEN
          REPEAT
            IF "UPGMultiple Lines Description"<>''THEN
              IF "Detailed Lines Description" <> "UPGMultiple Lines Description" THEN BEGIN
                "Detailed Lines Description" := "UPGMultiple Lines Description";
                "UPGMultiple Lines Description" := '';
                MODIFY;
              END;
          UNTIL NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeRiminderLine@1070004();
    VAR
      ReminderLine@1070000 : Record 296;
    BEGIN
      // WITH ReminderLine DO
      //  IF FINDSET THEN
      //    REPEAT
      //      "Detailed Interest Rates Entry" := "Multiple Interest Rates Entry";
      //      MODIFY;
      //    UNTIL NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeIssuedRiminderLine@1070011();
    VAR
      IssuedReminderLine@1070000 : Record 298;
    BEGIN
      // WITH IssuedReminderLine DO
      //  IF FINDSET THEN
      //    REPEAT
      //      "Detailed Interest Rates Entry" := "Multiple Interest Rates Entry";
      //      MODIFY;
      //    UNTIL NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeFinChargeMemoLine@1070015();
    VAR
      FinanceChargeMemoLine@1070000 : Record 303;
    BEGIN
      WITH FinanceChargeMemoLine DO
        IF FINDSET THEN
          REPEAT
            IF "UPGltiple Interest Rates Entry" THEN
            IF "Detailed Interest Rates Entry" <> "UPGltiple Interest Rates Entry" THEN BEGIN
              "Detailed Interest Rates Entry" := "UPGltiple Interest Rates Entry";
              "UPGltiple Interest Rates Entry" := FALSE;
              MODIFY;
            END;
            IF "UPGAccount Code DK"<>'' THEN
            IF "UPGAccount Code DK"<>"Account Code DK" THEN BEGIN
              "Account Code DK" := "UPGAccount Code DK";
              "UPGAccount Code DK" := '';
              MODIFY;
            END;
            IF "UPGAccount Code NO" <> '' THEN
            IF "UPGAccount Code NO"<>"Account Code NO" THEN BEGIN
              "Account Code NO" := "UPGAccount Code NO";
              "UPGAccount Code NO" := '';
              MODIFY;
            END;
            IF "UPGCharge Type"<>0 THEN
            IF "Charge Type"<>"UPGCharge Type" THEN BEGIN
              "Charge Type" := "UPGCharge Type";
              "UPGCharge Type" := 0;
              MODIFY;
            END;
          UNTIL NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeIssuedFinChargeMemoLine@1070017();
    VAR
      IssuedFinChargeMemoLine@1070000 : Record 305;
    BEGIN
      WITH IssuedFinChargeMemoLine DO
        IF FINDSET THEN
          REPEAT
            IF "UPGltiple Interest Rates Entry" THEN
            IF "Detailed Interest Rates Entry" <> "UPGltiple Interest Rates Entry" THEN BEGIN
              "Detailed Interest Rates Entry" := "UPGltiple Interest Rates Entry";
              "UPGltiple Interest Rates Entry" := FALSE;
              MODIFY;
            END;
            IF "UPGAccount Code DK" <> '' THEN
            IF "UPGAccount Code DK"<>"Account Code DK" THEN BEGIN
              "Account Code DK" := "UPGAccount Code DK";
              "UPGAccount Code DK" := '';
              MODIFY;
            END;
            IF "UPGAccount Code NO" <> '' THEN
            IF "UPGAccount Code NO"<>"Account Code NO" THEN BEGIN
              "Account Code NO" := "UPGAccount Code NO";
              "UPGAccount Code NO" := '';
              MODIFY;
            END;
            IF "UPGCharge Type"<>0 THEN
            IF "Charge Type"<>"UPGCharge Type" THEN BEGIN
              "Charge Type" := "UPGCharge Type";
              "UPGCharge Type" := 0;
              MODIFY;
            END;
          UNTIL NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateVATRateChangeSetup@11();
    VAR
      VATRateChangeSetup@1000 : Record 550;
    BEGIN
      IF VATRateChangeSetup.GET THEN BEGIN
        VATRateChangeSetup."Ignore Status on Service Docs." := TRUE;
        VATRateChangeSetup.MODIFY;
      END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateIntrastatContactSetup@77();
    VAR
      UPGCompanyInformation@1000 : Record 51016;
      IntrastatSetup@1001 : Record 247;
    BEGIN
      IF UPGCompanyInformation.GET THEN
        IF UPGCompanyInformation."Intrastat Contact No." <> '' THEN BEGIN
          IF NOT IntrastatSetup.GET THEN
            IntrastatSetup.INSERT;
          IntrastatSetup."Intrastat Contact Type" := UPGCompanyInformation."Intrastat Contact Type";
          IntrastatSetup."Intrastat Contact No." := UPGCompanyInformation."Intrastat Contact No.";
          IntrastatSetup.MODIFY;
        END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateUnpostedNotificationsForAllUsers@13();
    VAR
      MyNotifications@1001 : Record 1518;
      FilterBlob@1004 : Record 99008535;
      InstructionMgt@1000 : Codeunit 1330;
      OutStream@1002 : OutStream;
    BEGIN
      MyNotifications.SETRANGE("Apply to Table Id",0);
      MyNotifications.SETRANGE("Notification Id",InstructionMgt.GetClosingUnpostedDocumentNotificationId);
      IF NOT MyNotifications.ISEMPTY THEN BEGIN
        FilterBlob.INIT;
        FilterBlob.Blob.CREATEOUTSTREAM(OutStream);
        OutStream.WRITE(
          MyNotifications.GetXmlFromTableView(DATABASE::"Sales Header",InstructionMgt.GetDocumentTypeInvoiceFilter));
        MyNotifications.MODIFYALL("Apply to Table Filter",FilterBlob.Blob,FALSE);
        MyNotifications.MODIFYALL("Apply to Table Id",DATABASE::"Sales Header",TRUE);
      END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateCheckFieldSetup@101010();
    VAR
      IntrastatJnlLine@1001 : Record 263;
    BEGIN
      InsertCheckFieldSetup(IntrastatJnlLine.FIELDNO("Tariff No."));
      InsertCheckFieldSetup(IntrastatJnlLine.FIELDNO("Country/Region Code"));
      InsertCheckFieldSetup(IntrastatJnlLine.FIELDNO("Transaction Type"));
      InsertCheckFieldSetup(IntrastatJnlLine.FIELDNO("Total Weight"));
      InsertCheckFieldSetup(IntrastatJnlLine.FIELDNO(Quantity));
    END;

    LOCAL PROCEDURE InsertCheckFieldSetup@2323(FieldNumber@1001 : Integer);
    VAR
      IntrastatCheckFieldSetup@1002 : Record 8451;
    BEGIN
      WITH IntrastatCheckFieldSetup DO BEGIN
        INIT;
        VALIDATE("Field No.",FieldNumber);
        IF INSERT THEN;
      END;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateItems@201();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // IF Item.FINDSET(TRUE,FALSE) THEN
      //  REPEAT
      //    Item.VALIDATE("Sales Blocked",FALSE);
      //    Item.VALIDATE("Purchasing Blocked",FALSE);
      //    IF Item.MODIFY THEN;
      //  UNTIL Item.NEXT = 0;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateJobs@100();
    VAR
      Job@1000 : Record 11072003;
      UpgradeTagMgt@1001 : Codeunit 9999;
      UpgradeTags@1003 : Codeunit 9998;
      IntegrationManagement@1004 : Codeunit 5150;
      RecordRef@1002 : RecordRef;
    BEGIN
      IF UpgradeTagMgt.HasUpgradeTag(UpgradeTags.GetAddingIDToJobsUpgradeTag) THEN
        EXIT;
      IF Job.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF ISNULLGUID(Job.Id) THEN BEGIN
            RecordRef.GETTABLE(Job);
            IntegrationManagement.InsertUpdateIntegrationRecord(RecordRef,CURRENTDATETIME);
            RecordRef.SETTABLE(Job);
            Job.MODIFY;
            Job.UpdateReferencedIds;
          END;
        UNTIL Job.NEXT = 0;
      UpgradeTagMgt.SetUpgradeTag(UpgradeTags.GetAddingIDToJobsUpgradeTag);
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeVATReportSetup@37();
    VAR
      VATReportSetup@1000 : Record 743;
      UpgradeTagMgt@1002 : Codeunit 9999;
      UpgradeTags@1003 : Codeunit 9998;
      DateFormulaText@1001 : Text;
    BEGIN
      IF UpgradeTagMgt.HasUpgradeTag(UpgradeTags.GetVATRepSetupPeriodRemCalcUpgradeTag) THEN
        EXIT;

      WITH VATReportSetup DO BEGIN
        IF NOT GET THEN
          EXIT;
        IF IsPeriodReminderCalculation OR ("Period Reminder Time" = 0) THEN
          EXIT;

        DateFormulaText := STRSUBSTNO('<%1D>',"Period Reminder Time");
        EVALUATE("Period Reminder Calculation",DateFormulaText);
        "Period Reminder Time" := 0;

        IF MODIFY THEN;
      END;

      UpgradeTagMgt.SetUpgradeTag(UpgradeTags.GetVATRepSetupPeriodRemCalcUpgradeTag);
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradePeriodicTemplate@1090000();
    VAR
      DeferralTemplate@1170000000 : Record 1700;
      UPGPeriodicTemplate@1170000001 : Record 104038;
    BEGIN
      WITH UPGPeriodicTemplate DO BEGIN
        SETFILTER(Code,'<>%1','');
        IF FINDSET(TRUE) THEN
          REPEAT
            DeferralTemplate.INIT;
            DeferralTemplate."Deferral Code" := Code;
            DeferralTemplate.Description := Description;
            DeferralTemplate."Deferral Account" := "Temp. G/L Acc.";
            DeferralTemplate."Deferral %" := 100.0;
            DeferralTemplate."Calc. Method" := DeferralTemplate."Calc. Method"::"Straight-Line";
            DeferralTemplate."Start Date" := DeferralTemplate."Start Date"::"Posting Date";
            DeferralTemplate."No. of Periods" := "No. of Periods";
            DeferralTemplate."Period Description" := '';
            DeferralTemplate.INSERT;
          UNTIL NEXT = 0;
      END;
      UPGPeriodicTemplate.DELETEALL;
    END;

    BEGIN
    END.
  }
}

