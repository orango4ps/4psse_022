OBJECT Codeunit 11012948 Document Portal Project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SharePointSetup4PS@1100528302 : Record 11012730;
      ErrorString@1100528311 : Text;
      InternTxt@1100528310 : Text[10];
      ExternTxt@1100528309 : Text[10];
      NavCompanyId@1100528308 : Text[50];
      WebOfficeAppServerGuid@1100528307 : Text[50];
      CompanyLogoFeatureGuid@1100528306 : Text[50];
      DesignFeatureGuid@1100528305 : Text[50];
      BaseCoverLetterDesc@1100528304 : Text[30];
      FullDocumentPortalURL@1100528303 : Text;
      Debug@1100528347 : Boolean;
      DebugText@1100528346 : Text;
      GlobalVarsAreSet@1100528301 : Boolean;
      LoggedIn@1100528313 : Boolean;
      MetadataIsPresent@1100528332 : Boolean;
      WindowIsOpen@1100528314 : Boolean;
      MaxPasswordLength@1100525000 : Integer;
      Window@1100528315 : Dialog;
      ProjectSite@1100528316 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;
      PRIVATEPERMISSIONCOMPANYTEXT@1100529900 : TextConst 'ENU=_-_Company_-_';
      Text000@1100528320 : TextConst 'DEU=Projektsite...\\#1########\#2########\#3########\#4########\#5########\#6########;ENU=Project Site...\\#1########\#2########\#3########\#4########\#5########\#6########;NLD=Projectsite...\\#1########\#2########\#3########\#4########\#5########\#6########';
      Text001@1100528319 : TextConst 'DEU=öberprÅfen: %1;ENU=Check: %1;NLD=Check: %1';
      Text002@1100528318 : TextConst 'DEU=éndern: %1;ENU=Change: %1;NLD=%1 aanpassen';
      Text003@1100528317 : TextConst 'DEU=Verbinden mit:;ENU=Connect to:;NLD="Verbinden met: "';
      Text004@1100528322 : TextConst 'DEU=Fehler bei Kommunikation mit dem Belegportal.\\Fehlerbericht:\%1\\CallStack: %2;ENU=Error while communicating with the Document Portal.\\Error Message:\%1\\CallStack: %2;NLD=Fout bij het communiceren met het documentenportaal.\\Foutboodschap:\%1\\Callstack: %2';
      Text005@1100528321 : TextConst 'DEU=Beleg von Ihnen oder einer anderen Person ÅberprÅft.;ENU=Document checked out by you or someone else.;NLD=Document is uitgechecked door u of iemand anders.';
      Text006@1100528323 : TextConst 'DEU=Verbindung funktioniert ordnungsgemÑ·.;ENU=Connection is running correctly.;NLD=De connectie werkt goed.';
      Text007@1100528339 : TextConst 'DEU=Lîschen %1;ENU=Remove %1;NLD=%1 verwijderen';
      Text008@1100528338 : TextConst 'DEU=Deaktivieren %1;ENU=De-Activate %1;NLD=%1 deactiveren';
      Text009@1100528337 : TextConst 'DEU=Sie mîchten Projektsite %1\%2\\lîschen. Sind Sie sicher?;ENU=You want to remove Site %1\%2\\Are you sure?;NLD=Verwijder projectsite %1\%2\\Weet u het zeker?';
      Text010@1100528336 : TextConst 'DEU=Sind Sie sicher, dass Sie Projektsite %1 deaktivieren mîchten?;ENU=Are you sure, you want to De-Activate Project Site %1?;NLD=Weet u zeker dat u de projectsite %1 wilt deactiveren?';
      Text011@1100528335 : TextConst 'DEU=Aktivieren %1;ENU=Activate %1;NLD=%1 activeren;SVE=Aktivera %1';
      Text012@1100528334 : TextConst 'DEU=Sind Sie sicher, dass Sie Projektsite %1 aktivieren mîchten?;ENU=Are you sure, you want to activate Project Site %1?;NLD=Weet u zeker dat u de projectsite %1 wilt activeren?';
      Text013@1100528333 : TextConst 'DEU=Sind Sie ganz sicher?\\Diese Handlung hat rechtliche Konsequenzen!!;ENU=Are you very sure?\\This action does have legal consequences!!;NLD=Weet u het heel zeker?\\Deze actie heeft strafrechterlijke consequenties!!';
      Text014@1100528342 : TextConst 'DEU=Webservice-Eigenschaften einstellen;ENU=Set Web Service Properties;NLD=Set webservice eigenschappen instellen';
      Text015@1100528330 : TextConst 'DEU=Es kann nur 1 %1 Eintrag mit %2 %3 geben.;ENU=There can only be 1 %1 Records with %2 %3.;NLD=Er kan maar 1 %1 record met %2 %3 zijn.';
      Text017@1100528329 : TextConst 'DEU=Sie haben keine Erlaubnis, diese Handlung auszufÅhren.\\%1;ENU=You have no permission to execute this action.\\%1;NLD=U hebt geen permissie om deze actie uit te voeren.\\%1';
      Text017a@1100528328 : TextConst 'DEU=(Benutzer %1 nicht vorhanden);ENU=(User %1 not present);NLD=(Gebruiker %1 is niet aanwezig)';
      Text017b@1100528327 : TextConst 'DEU=(Mitarbeiter %1 ist nicht mit diesem Projekt verknÅpft);ENU=(Employee %1 is not linked to this Project);NLD=(Medewerker %1 is niet aan dit project gekoppeld)';
      Text017c@1100528326 : TextConst 'DEU=(Nicht alle EigentÅmer-Berechtigungen fÅr Mitarbeiter %1definiert;ENU=(Not all Owner permissions defined for Emplyee %1);NLD=(Niet alle Eigenaar permissies zijn gedefinieerd voor medewerker %1)';
      Text020@1100528343 : TextConst 'DEU=FBA-Eigenschaften einstellen;ENU=Set FBA Properties;NLD=FBA eigenschappen instellen';
      Text022@1100528345 : TextConst 'DEU=E-Mail an %1 wurde nicht gesendet.\\Fehler:\%2;ENU=E-Mail to %1 is not sent.\\Error:\%2;NLD=Email naar %1 is niet verzonden.\\Foutmelding:\%2';
      Text023@1100528331 : TextConst 'DEU=Projektstandortbelege exportieren;ENU="Export Project Site Documents. ";NLD=Projectsite documenten exporteren.';
      Text035@1100528344 : TextConst 'DEU=%1 hat keinen Wert.;ENU=%1 has no value.;NLD=%1 is niet gevuld.';
      Text039@1100528312 : TextConst 'DEU=CSS-Datei aktualisieren;ENU=Update CSS File;NLD=CSS bestand actualiseren';
      Text040@1100528341 : TextConst 'DEU=CSS-Datei erstellen;ENU=Create CSS File;NLD=CSS bestand aanmaken';
      Text041@1100528340 : TextConst 'DEU=Suchcenter aktualisieren;ENU=Update Search Center;NLD=Search Center actualiseren';
      Text042@1100528324 : TextConst 'DEU=Schritt %1 von %2;ENU=Step %1 of %2;NLD=Stap %1 van %2';
      Text999@1100528900 : TextConst 'DEU=Konfigurierung in DPT Dual kopiert.;ENU=Copied Setup To DPT Dual.;NLD=Instellingen naar DPT Dual gekopiâerd.';

    LOCAL PROCEDURE SetGlobalVars@1100528300(Job@1100528301 : Record 11072003);
    VAR
      ProjectPortalMetadata@1100528302 : Record 11229818;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
    BEGIN
      IF (GlobalVarsAreSet) THEN
        EXIT;
      Debug := TRUE;
      SharePointSetup4PS.GET;
      SharePointSetup4PS.TESTFIELD("Use Project Portal", TRUE);

      InternTxt := DocumentPortalManagement.GetInternTxt;
      ExternTxt := DocumentPortalManagement.GetExternTxt;
      NavCompanyId := DocumentPortalManagement.GetNavCompanyId;
      WebOfficeAppServerGuid := DocumentPortalManagement.GetWebOfficeAppServerGuid;
      CompanyLogoFeatureGuid := DocumentPortalManagement.GetCompanyLogoFeatureGuid;
      DesignFeatureGuid := DocumentPortalManagement.GetDesignFeatureGuid;
      BaseCoverLetterDesc := DocumentPortalManagement.GetBaseCoverLetterDesc;
      MaxPasswordLength := 10;

      IF (Job.IsJobInProjectPortal) THEN
        FullDocumentPortalURL := Job."SharePoint Site URL"
      ELSE
        FullDocumentPortalURL := STRSUBSTNO('%1/%2/%3_%4', SharePointSetup4PS."Portal URL", SharePointSetup4PS."Portal URL Suffix",
          FilterURI(COMPANYNAME), FilterURI(Job."No."));

      IF (ISNULL(ProjectSite)) THEN
        ProjectSite := ProjectSite.ProjectSite;

      ProjectPortalMetadata.SETRANGE("Subsite Type", ProjectPortalMetadata."Subsite Type"::Project);
      ProjectPortalMetadata.SETRANGE("Show in View", TRUE);
      MetadataIsPresent := ProjectPortalMetadata.FINDFIRST;
    END;

    PROCEDURE ResetVars@1100525020();
    BEGIN
      GlobalVarsAreSet := FALSE;
      LoggedIn := FALSE;
      CLEAR(ProjectSite);
    END;

    LOCAL PROCEDURE MakeConnection@1100528301(Job@1100528300 : Record 11072003;DoLogin@1100528301 : Boolean);
    VAR
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
    BEGIN
      SetGlobalVars(Job);
      UpdateWindow(STRSUBSTNO(Text001), FullDocumentPortalURL, '', '', '', '');
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      DocumentPortalManagement.CheckDocumentPortalSetup;
      UpdateWindow(STRSUBSTNO(Text003), FullDocumentPortalURL, '', '', '', '');

      IF (DoLogin) AND (NOT LoggedIn) THEN BEGIN
        DebugDotNetProperties('LoginProjectSite', FullDocumentPortalURL, '', '', '', '', '', '', '', '');
        IF (NOT ProjectSite.LoginProjectSiteCurrentUser(FullDocumentPortalURL, ErrorString)) THEN
          ThrowError(TRUE, 'LoginProjectSite');
        LoggedIn := TRUE;
      END;
    END;

    LOCAL PROCEDURE MakeConnectionAsAdmin@1100528329(Job@1100528300 : Record 11072003;DoLogin@1100528302 : Boolean;ShowError@1100528303 : Boolean) : Boolean;
    VAR
      DocumentPortalManagement@1100528301 : Codeunit 11012203;
    BEGIN
      SetGlobalVars(Job);
      UpdateWindow(STRSUBSTNO(Text001), FullDocumentPortalURL, '', '', '', '');
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      DocumentPortalManagement.CheckDocumentPortalSetup;
      UpdateWindow(STRSUBSTNO(Text003), FullDocumentPortalURL, '', '', '', '');

      IF (DoLogin) AND (NOT LoggedIn) THEN BEGIN
        DebugDotNetProperties('LoginProjectSite', FullDocumentPortalURL, SharePointSetup4PS."Owner ID",
          SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain", '', '', '', '', '');
        IF (NOT ProjectSite.LoginProjectSite(FullDocumentPortalURL, SharePointSetup4PS."Owner ID",
          SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain", ErrorString))
        THEN BEGIN
          ThrowError(ShowError, STRSUBSTNO('LoginProjectSite (Project: %1)', Job."No."));
          EXIT(FALSE);
        END;
        LoggedIn := TRUE;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckWebserviceConnection@1100528331(Job@1100528300 : Record 11072003);
    BEGIN
      SetGlobalVars(Job);
      Job.TESTFIELD("SharePoint Site Generated", TRUE);
      Job.TESTFIELD("SharePoint Site URL");

      MakeConnection(Job, TRUE);
      IF (NOT ProjectSite.CheckWebServiceConnection(ErrorString)) THEN
        ThrowError(TRUE, 'CheckWebServiceConnection');
      MESSAGE(Text006);
    END;

    PROCEDURE CheckFBAConnection@1100528306();
    VAR
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      CallStack@1100528301 : Text;
    BEGIN
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      IF (ISNULL(ProjectSite)) THEN
        ProjectSite := ProjectSite.ProjectSite;
      IF (NOT DocumentPortalManagement.CheckFBAConnection(ProjectSite, CallStack, ErrorString)) THEN
        ThrowError(TRUE, CallStack);
    END;

    LOCAL PROCEDURE CheckProject@1100525026(Job@1100525000 : Record 11072003);
    BEGIN
      UpdateWindow(STRSUBSTNO(Text001, Job.TABLECAPTION), Job."No.", '', '', '', '');
      Job.TESTFIELD("Make SharePoint Site", TRUE);
      Job.TESTFIELD("SharePoint Site Generated", FALSE);
      Job.TESTFIELD("SharePoint Site URL", '');
      CheckProjectCommon(Job);
    END;

    LOCAL PROCEDURE CheckProjectCommon@1100525042(Job@1100525000 : Record 11072003);
    VAR
      UserSetup@1100525001 : Record 91;
      ProjectResponsiblePerson@1100528300 : Record 11012040;
      RespPersPermPPT@1100528301 : Record 11229812;
      EmployeeNo@1100525002 : Code[20];
    BEGIN
      IF (Job."Project Manager" <> '') THEN BEGIN
        UserSetup.SETRANGE("Employee No.", Job."Project Manager");
        UserSetup.FINDFIRST;
        IF (UserSetup.COUNT <> 1) THEN
          ERROR(Text015, UserSetup.TABLECAPTION, UserSetup.FIELDCAPTION("Employee No."), UserSetup."Employee No.");
      END;

      //Check current USERID
      UserSetup.RESET;
      UserSetup.SETRANGE("User ID", USERID);
      UserSetup.FINDFIRST;
      UserSetup.TESTFIELD("Employee No.");
      EmployeeNo := UserSetup."Employee No.";

      UserSetup.RESET;
      UserSetup.SETRANGE("Employee No.", EmployeeNo);
      IF (UserSetup.COUNT <> 1) THEN
        ERROR(Text015, UserSetup.TABLECAPTION, UserSetup.FIELDCAPTION("Employee No."), EmployeeNo);

      ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
      ProjectResponsiblePerson.SETRANGE("Employee No.", EmployeeNo);
      ProjectResponsiblePerson.FINDFIRST;

      RespPersPermPPT.SETRANGE(Type, RespPersPermPPT.Type::Access);
      RespPersPermPPT.SETRANGE("Project No.", Job."No.");
      RespPersPermPPT.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      RespPersPermPPT.FINDFIRST;
      REPEAT
        RespPersPermPPT.TESTFIELD("Permission Level", RespPersPermPPT."Permission Level"::Owner);
      UNTIL (RespPersPermPPT.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckActionPermission@1100525009(Job@1100525000 : Record 11072003;Action@1100525001 : 'CreateSite,IsAdmin,DeActivateSite,ActivateSite,UpdateStaticProjectContent,CreateQuoteSite,UpdateStaticQuoteContent,UpdateQuoteRequests');
    VAR
      UserSetup@1100525002 : Record 91;
      ProjectResponsiblePerson@1100525003 : Record 11012040;
      RespPersPermPPT@1100525004 : Record 11229812;
    BEGIN
      IF (NOT UserSetup.GET(USERID)) THEN
        ERROR(Text017, STRSUBSTNO(Text017a, USERID));
      UserSetup.TESTFIELD("Employee No.");

      IF (Action <> Action::IsAdmin) THEN BEGIN
        ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
        ProjectResponsiblePerson.SETRANGE("Employee No.", UserSetup."Employee No.");
        IF (NOT ProjectResponsiblePerson.FINDFIRST) THEN
          ERROR(Text017, STRSUBSTNO(Text017b, UserSetup."Employee No."));

        RespPersPermPPT.SETRANGE("Subsite Type", RespPersPermPPT."Subsite Type"::Project);
        RespPersPermPPT.SETRANGE(Type, RespPersPermPPT.Type::Access);
        RespPersPermPPT.SETRANGE("Project No.", Job."No.");
        RespPersPermPPT.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      END;

      CASE Action OF
        Action::CreateSite,
        Action::DeActivateSite,
        Action::ActivateSite: BEGIN
          RespPersPermPPT.SETRANGE("Project Portal Subsite", '');
          RespPersPermPPT.SETRANGE("Document Type", '');
          RespPersPermPPT.SETRANGE("Project Element", '');
          RespPersPermPPT.SETFILTER("Permission Level", '<>%1', RespPersPermPPT."Permission Level"::Owner);
          IF (RespPersPermPPT.FINDFIRST) THEN
            ERROR(Text017, STRSUBSTNO(Text017c, ProjectResponsiblePerson."Employee No."));
        END;
        Action::UpdateStaticProjectContent: BEGIN
          RespPersPermPPT.SETFILTER("Document Type", '<>%1', '');
          RespPersPermPPT.SETRANGE("Project Element", '');
          RespPersPermPPT.SETFILTER("Permission Level", '<>%1', RespPersPermPPT."Permission Level"::Owner);
          RespPersPermPPT.SETRANGE("Quote Request Subsite", FALSE);
          IF (RespPersPermPPT.FINDFIRST) THEN
            ERROR(Text017, STRSUBSTNO(Text017c, ProjectResponsiblePerson."Employee No."));
        END;
        Action::CreateQuoteSite,
        Action::UpdateStaticQuoteContent: BEGIN
          RespPersPermPPT.SETRANGE("Project Element", '');
          RespPersPermPPT.SETFILTER("Permission Level", '<>%1', RespPersPermPPT."Permission Level"::Owner);
          RespPersPermPPT.SETRANGE("Quote Request Subsite", TRUE);
          IF (RespPersPermPPT.FINDFIRST) THEN
            ERROR(Text017, STRSUBSTNO(Text017c, ProjectResponsiblePerson."Employee No."));
        END;
        Action::UpdateQuoteRequests: BEGIN
          RespPersPermPPT.SETRANGE("Project Element", '');
          RespPersPermPPT.SETFILTER("Permission Level", '<%1', RespPersPermPPT."Permission Level"::Member);
          RespPersPermPPT.SETRANGE("Quote Request Subsite", TRUE);
          IF (RespPersPermPPT.FINDFIRST) THEN
            ERROR(Text017, STRSUBSTNO(Text017c, ProjectResponsiblePerson."Employee No."));
        END;
        Action::IsAdmin: BEGIN
          IF (NOT SharePointSetup4PS.WRITEPERMISSION) THEN
            ERROR(Text017 + 'User: ' + USERID);
        END;
        ELSE
          ERROR(Text017, 'User: ' + USERID);
      END;
    END;

    LOCAL PROCEDURE CheckActionAdminPermission@1100525024(Job@1100525000 : Record 11072003);
    VAR
      UserSetup@1100525002 : Record 91;
      ProjectResponsiblePerson@1100525003 : Record 11012040;
      RespPersPermPPT@1100525004 : Record 11229812;
    BEGIN
      IF (NOT UserSetup.GET(USERID)) THEN
        ERROR(Text017, STRSUBSTNO(Text017a, USERID));
      UserSetup.TESTFIELD("Employee No.");

      ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
      ProjectResponsiblePerson.SETRANGE("Employee No.", UserSetup."Employee No.");
      IF (NOT ProjectResponsiblePerson.FINDFIRST) THEN
        ERROR(Text017, STRSUBSTNO(Text017b, UserSetup."Employee No."));

      RespPersPermPPT.SETRANGE("Subsite Type", RespPersPermPPT."Subsite Type"::Project);
      RespPersPermPPT.SETRANGE(Type, RespPersPermPPT.Type::Access);
      RespPersPermPPT.SETRANGE("Project No.", Job."No.");
      RespPersPermPPT.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      RespPersPermPPT.SETFILTER("Permission Level", '<>%1', RespPersPermPPT."Permission Level"::Owner);
      IF (RespPersPermPPT.FINDFIRST) THEN
        ERROR(Text017, STRSUBSTNO(Text017c, ProjectResponsiblePerson."Employee No."));
    END;

    LOCAL PROCEDURE CheckAllRequirements@1100528316(Job@1100528300 : Record 11072003);
    VAR
      SharePointIntegration@1100528301 : Codeunit 11020210;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
    BEGIN
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;

      SetGlobalVars(Job);
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      DocumentPortalManagement.CheckDocumentPortalSetup;
      IF (SharePointSetup4PS."FBA Membership Provider"+SharePointSetup4PS."FBA Server"+SharePointSetup4PS."FBA Database" <> '') THEN
        DocumentPortalManagement.CheckFBASetup;
      DocumentPortalManagement.CheckMailSetup;
      DocumentPortalManagement.CheckSearchCenter;
      DocumentPortalManagement.CheckViewAndMetaDataList;
      CheckProject(Job);
      CheckResponsiblePersons(Job);
      CheckAuthorities(Job);
      CheckDocuments(Job);
    END;

    LOCAL PROCEDURE CheckResponsiblePersons@1100525006(Job@1100525000 : Record 11072003);
    VAR
      ProjectResponsiblePerson@1100525001 : Record 11012040;
    BEGIN
      UpdateWindow(STRSUBSTNO(Text001, ProjectResponsiblePerson.TABLECAPTION), '', '', '', '', '');
      ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectResponsiblePerson.FINDSET) THEN
        EXIT;

      REPEAT
        CheckResponsiblePerson(ProjectResponsiblePerson);
      UNTIL (ProjectResponsiblePerson.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckResponsiblePerson@1100525002(ProjectResponsiblePerson@1100525000 : Record 11012040);
    VAR
      Employee@1100525001 : Record 5200;
      UserSetup@1100525002 : Record 91;
      RespPersPermPPT@1100525003 : Record 11229812;
      Job@1100525004 : Record 11072003;
    BEGIN
      UpdateWindow(STRSUBSTNO(Text001, ProjectResponsiblePerson.TABLECAPTION), ProjectResponsiblePerson."Project No.",
        FORMAT(ProjectResponsiblePerson."Line No."), ProjectResponsiblePerson.Responsibility,
        ProjectResponsiblePerson."Employee No.", '');

      Job.GET(ProjectResponsiblePerson."Project No.");
      CheckActionPermission(Job, 4); //UpdateStaticContent
      ProjectResponsiblePerson.TESTFIELD("Employee No.");
      Employee.GET(ProjectResponsiblePerson."Employee No.");
      Employee.TESTFIELD("Company E-Mail");

      UserSetup.SETRANGE("Employee No.", ProjectResponsiblePerson."Employee No.");
      UserSetup.FINDFIRST;
      IF (UserSetup.COUNT > 1) THEN
        ERROR(Text015, UserSetup.TABLECAPTION, UserSetup.FIELDCAPTION("Employee No."),
          ProjectResponsiblePerson."Employee No.");

      RespPersPermPPT.SETRANGE("Subsite Type", RespPersPermPPT."Subsite Type"::Project);
      RespPersPermPPT.SETRANGE(Type, RespPersPermPPT.Type::Access);
      RespPersPermPPT.SETRANGE("Project No.", ProjectResponsiblePerson."Project No.");
      RespPersPermPPT.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      RespPersPermPPT.SETFILTER("Permission Level", '<>%1', RespPersPermPPT."Permission Level"::None);
      RespPersPermPPT.FINDFIRST;
    END;

    LOCAL PROCEDURE CheckResponsiblePersonMail@1100525011();
    VAR
      DocumentPortalManagement@1100525000 : Codeunit 11012203;
      MailTemplateNo@1100528300 : Integer;
    BEGIN
      MailTemplateNo := 48;
      DocumentPortalManagement.CheckMailLanguageSetup(MailTemplateNo);
    END;

    LOCAL PROCEDURE CheckAuthorities@1100528305(Job@1100525000 : Record 11072003);
    VAR
      ProjectAuthority@1100525001 : Record 11020216;
    BEGIN
      ProjectAuthority.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectAuthority.FINDSET) THEN
        EXIT;

      UpdateWindow(STRSUBSTNO(Text001, ProjectAuthority.TABLECAPTION), '', '', '', '', '');
      REPEAT
        CheckAuthority(ProjectAuthority);
      UNTIL (ProjectAuthority.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckAuthority@1100528315(ProjectAuthority@1100525000 : Record 11020216);
    VAR
      Contact@1100525001 : Record 5050;
      AuthorityPermPPT@1100525003 : Record 11229813;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
    BEGIN
      DocumentPortalManagement.CheckFBASetup;
      UpdateWindow(STRSUBSTNO(Text001, ProjectAuthority.TABLECAPTION), ProjectAuthority."Project No.",
        ProjectAuthority."Authority Type", ProjectAuthority."Contact No.", ProjectAuthority."Contact Person No.", '');

      IF (ProjectAuthority."Contact Person No." <> '') THEN
        Contact.GET(ProjectAuthority."Contact Person No.")
      ELSE
        Contact.GET(ProjectAuthority."Contact No.");
      Contact.TESTFIELD("E-Mail 2");

      AuthorityPermPPT.SETRANGE("Subsite Type", AuthorityPermPPT."Subsite Type"::Project);
      AuthorityPermPPT.SETRANGE(Type, AuthorityPermPPT.Type::Access);
      AuthorityPermPPT.SETRANGE("Project No.", ProjectAuthority."Project No.");
      AuthorityPermPPT.SETRANGE("Authority Type", ProjectAuthority."Authority Type");
      AuthorityPermPPT.SETRANGE("Contact No.", ProjectAuthority."Contact No.");
      AuthorityPermPPT.SETRANGE("Contact Person No.", ProjectAuthority."Contact Person No.");
      AuthorityPermPPT.FINDFIRST;
    END;

    LOCAL PROCEDURE CheckAuthorityMail@1100525010();
    VAR
      DocumentPortalManagement@1100525000 : Codeunit 11012203;
      MailTemplateNo@1100528300 : Integer;
    BEGIN
      MailTemplateNo := 47;
      DocumentPortalManagement.CheckMailLanguageSetup(MailTemplateNo);
    END;

    PROCEDURE CheckQuoteVendors@1100528360(ProjectPurchaseAction@1100528300 : Record 11012026);
    VAR
      VendorsByPurchaseAction@1100528301 : Record 11012068;
    BEGIN
      VendorsByPurchaseAction.SETRANGE(Source, VendorsByPurchaseAction.Source::Project);
      VendorsByPurchaseAction.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      VendorsByPurchaseAction.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      IF (VendorsByPurchaseAction.FINDSET) THEN BEGIN
        REPEAT
          CheckQuoteVendor(VendorsByPurchaseAction);
        UNTIL (VendorsByPurchaseAction.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE CheckQuoteVendor@1100528342(VendorsByPurchaseAction@1100528302 : Record 11012068);
    VAR
      Contact@1100528306 : Record 5050;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
    BEGIN
      DocumentPortalManagement.GetContactFromVendorsByPurchaseAction(VendorsByPurchaseAction, Contact);
      Contact.TESTFIELD("E-Mail 2");
    END;

    LOCAL PROCEDURE CheckQuoteRequestMail@1100525025();
    VAR
      DocumentPortalManagement@1100525000 : Codeunit 11012203;
      MailTemplateNo@1100528300 : Integer;
    BEGIN
      MailTemplateNo := 49;
      DocumentPortalManagement.CheckMailLanguageSetup(MailTemplateNo);
    END;

    LOCAL PROCEDURE CheckQuoteUpdateMail@1100529901();
    VAR
      DocumentPortalManagement@1100525000 : Codeunit 11012203;
      MailTemplateNo@1100528300 : Integer;
    BEGIN
      MailTemplateNo := 200;
      DocumentPortalManagement.CheckMailLanguageSetup(MailTemplateNo);
    END;

    LOCAL PROCEDURE CheckCreateQuoteSite@1100409002(Job@1100409002 : Record 11072003;ProjectPortalSubsite@1100409003 : Record 11229810;SubsiteDocTypePPT@1100409004 : Record 11229811);
    BEGIN
      ProjectPortalSubsite.TESTFIELD("Quote Request Subsite", TRUE);
      CheckProjectCommon(Job);
    END;

    LOCAL PROCEDURE CheckDocuments@1100525013(Job@1100525000 : Record 11072003);
    VAR
      DocumentLink@1100525002 : Record 11012747;
      DocumentProperties@1100525003 : Record 11012746;
      RecRef@1100525001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Job);

      DocumentLink.SETCURRENTKEY("Record ID");
      DocumentLink.SETRANGE("Record ID", RecRef.RECORDID);
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT;

      UpdateWindow(STRSUBSTNO(Text001, DocumentProperties.TABLECAPTION), '', '', '', '', '');
      REPEAT
        DocumentProperties.GET(DocumentLink."Document No.");
        CheckDocument(Job, DocumentProperties);
      UNTIL (DocumentLink.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckDocument@1100525014(Job@1100528300 : Record 11072003;DocumentProperties@1100525001 : Record 11012746);
    VAR
      ProjectPortalSubsite@1100528304 : Record 11229810;
      SubsiteDocTypePPT@1100528303 : Record 11229811;
      Contact@1100528302 : Record 5050;
      DocumentTemplate@1100528305 : Record 11012401;
      DocumentLink@1100528306 : Record 11012747;
      ProjectPurchaseAction@1100528308 : Record 11012026;
      RecRef@1100528307 : RecordRef;
    BEGIN
      IF (DocumentProperties."Internal Company" <> COMPANYNAME) THEN
        EXIT;
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      IF (NOT DocumentProperties.HasStorageURI) THEN
        EXIT;
      UpdateWindow(STRSUBSTNO(Text001, DocumentProperties.TABLECAPTION), DocumentProperties."No.",
        DocumentProperties."Project Portal Subsite", DocumentProperties."Document Type", '', '');
      IF (NOT DocumentProperties."External Document") THEN BEGIN
        DocumentTemplate.GET(DocumentProperties."Document Group", DocumentProperties."Document Template");
        IF (DocumentProperties."Project Portal Subsite" = '') THEN
          DocumentTemplate.TESTFIELD("Project Portal Subsite");
        IF (DocumentProperties."Document Type" = '') THEN
          DocumentTemplate.TESTFIELD("Document Type");
      END;

      DocumentProperties.TESTFIELD("Project Portal Subsite");
      DocumentProperties.TESTFIELD("Document Type");

      ProjectPortalSubsite.GET(SubsiteDocTypePPT."Subsite Type"::Project, DocumentProperties."Project Portal Subsite");

      SubsiteDocTypePPT.SETRANGE("Subsite Type", SubsiteDocTypePPT."Subsite Type"::Project);
      SubsiteDocTypePPT.SETRANGE("Project Portal Subsite", DocumentProperties."Project Portal Subsite");
      SubsiteDocTypePPT.SETRANGE("Document Type", DocumentProperties."Document Type");
      SubsiteDocTypePPT.FINDFIRST;

      IF (DocumentProperties."Contact No." <> '') THEN BEGIN
        IF (IsPurchaseActionDocument(DocumentProperties."No.")) THEN BEGIN
          DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
          DocumentLink.SETRANGE("Table No.", DATABASE::"Project Purchase Action");
          DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
          IF (DocumentLink.FINDSET) THEN BEGIN
            RecRef.GET(DocumentLink."Record ID");
            RecRef.SETTABLE(ProjectPurchaseAction);
            CheckQuoteVendors(ProjectPurchaseAction);
          END;
        END ELSE BEGIN
          IF (DocumentProperties."Contact Person No." <> '') THEN
            Contact.GET(DocumentProperties."Contact Person No.")
          ELSE
            Contact.GET(DocumentProperties."Contact No.");
        END;
      END;
    END;

    LOCAL PROCEDURE CheckCreateNavisionDocumentListForCompany@1100528346(JobNo@1100528300 : Code[20];SubsiteCode@1100528301 : Code[20];CompId@1100528302 : Text[50];CompName@1100528303 : Text[50];DocumentPortalManagement@1100528304 : Codeunit 11012203);
    VAR
      Job@1100528307 : Record 11072003;
      CallStack@1100528305 : Text;
      ListExists@1100528306 : Boolean;
    BEGIN
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      ListExists := FALSE;
      DebugDotNetProperties('CheckListExistence', SubsiteCode, CompId, CompName, FORMAT(ListExists), '', '', '', '', '');
      IF (NOT ProjectSite.CheckListExistence(SubsiteCode, CompId, CompName, ListExists, ErrorString)) THEN
        ThrowError(TRUE, 'CheckListExistence');
      IF (NOT ListExists) THEN BEGIN
        Job.GET(JobNo);
        ResetVars;
        MakeConnectionAsAdmin(Job, TRUE, TRUE);

        IF (NOT DocumentPortalManagement.FillViewAndMetaDataList(ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
        IF (NOT ProjectSite.CreateNavDocListForCompany(SubsiteCode, CompId, CompName, ErrorString)) THEN
          ThrowError(TRUE, 'CreateNavDocListForCompany');
        IF (NOT DocumentPortalManagement.AddDocumentTypes(SubsiteCode, ProjectSite, ErrorString, CallStack)) THEN
          ThrowError(TRUE, CallStack);
        AddProjectElements(JobNo, SubsiteCode);
        IF (NOT DocumentPortalManagement.AddDocumentStatuses(SubsiteCode, ProjectSite, ErrorString, CallStack)) THEN
          ThrowError(TRUE, CallStack);

        ResetVars;
        MakeConnection(Job, TRUE);
      END;
      IF (NOT DocumentPortalManagement.FillViewAndMetaDataList(ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
    END;

    PROCEDURE CreateProjectSite@1100528302(Job@1100525000 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528302 : Record 11229810;
      SharePointIntegration@1100528301 : Codeunit 11020210;
    BEGIN
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;

      CheckActionPermission(Job, 0); //Create Site
      CheckAllRequirements(Job);
      MakeConnection(Job, FALSE);

      UpdateWindow(STRSUBSTNO(Text002, ProjectPortalSubsite.TABLECAPTION), Job."No.", '', '', '', '');
      DebugDotNetProperties('CreateProjectSiteCollection', FullDocumentPortalURL, Job."No.", COMPANYNAME, Job.Description,
        FORMAT(SharePointSetup4PS."Language ID"), FORMAT(SharePointSetup4PS."Create ContentDB automatically"), '', '', '');
      IF (NOT ProjectSite.CreateProjectSiteCollection(FullDocumentPortalURL, Job."No.", COMPANYNAME, Job.Description,
        SharePointSetup4PS."Language ID", SharePointSetup4PS."Create ContentDB automatically", ErrorString))
      THEN
        ThrowError(TRUE, 'CreateProjectSiteCollection');
      MakeConnection(Job, TRUE);

      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETFILTER(Code, '<>%1', '');
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (ProjectPortalSubsite.FINDSET) THEN BEGIN
        REPEAT
          UpdateWindow(STRSUBSTNO(Text002, ProjectPortalSubsite.TABLECAPTION), Job."No.", ProjectPortalSubsite.Code, '', '', '');
          CreateSite(Job, ProjectPortalSubsite);
        UNTIL (ProjectPortalSubsite.NEXT = 0);
      END;
      DebugDotNetProperties('ActivateDeactivateFeature', FORMAT(NOT SharePointSetup4PS."Use Office Web Apps Server"),
        WebOfficeAppServerGuid, '', '', '', '', '', '', '');
      IF (NOT ProjectSite.ActivateDeactivateFeature(NOT SharePointSetup4PS."Use Office Web Apps Server",
        WebOfficeAppServerGuid, ErrorString))
      THEN
        ThrowError(TRUE, 'ActivateDeactivateFeature (Job: '+Job."No."+'; '+ WebOfficeAppServerGuid +')');

      Job."SharePoint Site Generated" := TRUE;
      Job."SharePoint Site URL" := FullDocumentPortalURL;
      Job."Project Portal Project" := TRUE;
      Job."SharePoint Status" := Job."SharePoint Status"::Active;
      Job."Quote Subsite Generated" := FALSE;
      Job.MODIFY(TRUE);
      COMMIT;

      UpdateStaticProjectContent(Job);
      UpdateSearchAllProjectSubsites(Job."No.");
      AddResponsiblePersons(Job);
      AddAuthorities(Job);
      AddAllProjectElementsPerSubSite(Job); //T006823.n
      AddPlots(Job);
      AddDocuments(Job);
    END;

    LOCAL PROCEDURE CreateSite@1100528304(Job@1100528300 : Record 11072003;ProjectPortalSubsite@1100528301 : Record 11229810);
    BEGIN
      DebugDotNetProperties('CreateSite', Job."No.", Job.Description, FORMAT(SharePointSetup4PS."Language ID"),
        ProjectPortalSubsite.Code, ProjectPortalSubsite.Description, ProjectPortalSubsite."SharePoint Template", '', '', '');
      IF (NOT ProjectSite.CreateSite(Job."No.", Job.Description, SharePointSetup4PS."Language ID",
        ProjectPortalSubsite.Code, ProjectPortalSubsite.Description, ProjectPortalSubsite."SharePoint Template",
        ErrorString))
      THEN
        ThrowError(TRUE, 'CreateSite');
    END;

    PROCEDURE CreateQuoteSubsite@1100528328(Job@1100528300 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528301 : Record 11229810;
      SubsiteDocTypePPT@1100528302 : Record 11229811;
    BEGIN
      Job.TESTFIELD("SharePoint Site Generated", TRUE);
      Job.TESTFIELD("Quote Subsite Generated", FALSE);
      CheckActionPermission(Job, 5); //Create Quote Site
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      ProjectPortalSubsite.FINDFIRST;
      SubsiteDocTypePPT.SETRANGE("Subsite Type", SubsiteDocTypePPT."Subsite Type"::Project);
      SubsiteDocTypePPT.SETRANGE("Default Quote Subsite", TRUE);
      SubsiteDocTypePPT.FINDFIRST;
      CheckCreateQuoteSite(Job, ProjectPortalSubsite, SubsiteDocTypePPT);
      MakeConnection(Job, TRUE);
      AddAuthorisations(Job);

      UpdateWindow(STRSUBSTNO(Text002, ProjectPortalSubsite.TABLECAPTION), Job."No.", ProjectPortalSubsite.Code,
        ProjectPortalSubsite.Description, '', '');
      DebugDotNetProperties('CreateQuoteSite', Job."No.", Job.Description, FORMAT(SharePointSetup4PS."Language ID"),
          ProjectPortalSubsite.Code, ProjectPortalSubsite.Description, '', '', '', '');
      IF (NOT ProjectSite.CreateQuoteSite(Job."No.", Job.Description, SharePointSetup4PS."Language ID",
          ProjectPortalSubsite.Code, ProjectPortalSubsite.Description, ErrorString))
      THEN
        ThrowError(TRUE, 'CreateSite');

      Job."Quote Subsite Generated" := TRUE;
      Job.MODIFY(TRUE);
      COMMIT;

      UpdateStaticQuoteContent(Job);
      AddQuoteResponsiblePersons(Job);
      AddAllQuoteVendors(Job);
    END;

    PROCEDURE RemoveProjectSite@1100528334(Job@1100528300 : Record 11072003;Password@1100528000 : Text);
    VAR
      ProjectPortalSubsite@1100528303 : Record 11229810;
      SharePointIntegration@1100528301 : Codeunit 11020210;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
    BEGIN
      //For 4PS Admin Only
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;
      CheckActionPermission(Job, 1); //Admin check
      IF (NOT CONFIRM(Text009, FALSE, Job."No.", Job.Description)) THEN
        EXIT;
      IF (NOT CONFIRM(Text013, FALSE)) THEN
        EXIT;
      InsertChangeLog(Job, STRSUBSTNO('Remove Project %1 Start', Job."No."));
      DocumentPortalManagement.CheckPassword(Password);
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text007, ProjectPortalSubsite.TABLECAPTION), Job."No.", '', '', '', '');
      DebugDotNetProperties('RemoveProject', SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password",
        SharePointSetup4PS."Owner Domain", '', '', '', '', '', '');
      IF (NOT ProjectSite.RemoveProject(SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password",
        SharePointSetup4PS."Owner Domain", ErrorString))
      THEN
        ThrowError(TRUE, 'RemoveProject');
      Job.ResetProjectPortalProject;
      InsertChangeLog(Job, STRSUBSTNO('Remove Project %1 End', Job."No."));
    END;

    PROCEDURE SetPortalBoolean@1100525018(Job@1100525000 : Record 11072003;Password@1100525003 : Text);
    VAR
      SharePointIntegration@1100525002 : Codeunit 11020210;
      DocumentPortalManagement@1100525001 : Codeunit 11012203;
    BEGIN
      //For 4PS Admin Only
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;
      IF (NOT Job.FINDSET(TRUE)) THEN
        EXIT;
      CheckActionPermission(Job, 1); //Admin check
      InsertChangeLog(Job, 'Set Portal Boolean=True Start');
      DocumentPortalManagement.CheckPassword(Password);

      REPEAT
        Job."Project Portal Project" := TRUE;
        Job.MODIFY;
        InsertChangeLog(Job, STRSUBSTNO('Reset Boolean Project %1', Job."No."));
      UNTIL (Job.NEXT = 0);
      InsertChangeLog(Job, 'Set Portal Boolean=True End');
    END;

    PROCEDURE DeActivateProjectSite@1100528335(Job@1100528300 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528303 : Record 11229810;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      CheckActionPermission(Job, 2); //DeActivate Site
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text008, ProjectPortalSubsite.TABLECAPTION), Job."No.", '', '', '', '');
      IF (NOT CONFIRM(Text010, FALSE, Job."No.")) THEN
        EXIT;
      IF (NOT ProjectSite.ArchiveProject(FALSE, ErrorString)) THEN
        ThrowError(TRUE, 'ArchiveProject(FALSE)');

      Job."SharePoint Status" := Job."SharePoint Status"::Inactive;
      Job.MODIFY(TRUE);
    END;

    PROCEDURE ActivateProjectSite@1100528337(Job@1100528300 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528302 : Record 11229810;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      CheckActionPermission(Job, 3); //Activate Site
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text011, ProjectPortalSubsite.TABLECAPTION), Job."No.", '', '', '', '');
      IF (NOT CONFIRM(Text012, FALSE, Job."No.")) THEN
        EXIT;
      IF (NOT ProjectSite.ArchiveProject(TRUE, ErrorString)) THEN
        ThrowError(TRUE, 'ArchiveProject(TRUE)');

      Job."SharePoint Status" := Job."SharePoint Status"::Active;
      Job.MODIFY(TRUE);
    END;

    PROCEDURE MoveProjectPortalDocuments@1100528325(Job@1100528300 : Record 11072003;ExportTo@1100409003 : 'Navision,FileSystem';Password@1100528000 : Text);
    VAR
      ProjectPortalSubsite@1100528304 : Record 11229810;
      FileSystemOnPremiseSetup@1100409002 : Record 11125739;
      SharePointIntegration@1100528301 : Codeunit 11020210;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
    BEGIN
      //For 4PS Admin Only
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      CheckActionPermission(Job, 1); //Admin check
      InsertChangeLog(Job, STRSUBSTNO('Extract Project %1 Documents Start', Job."No."));
      DocumentPortalManagement.CheckPassword(Password);

      IF (ISNULL(ProjectSite)) THEN
        ProjectSite := ProjectSite.ProjectSite;
      FileSystemOnPremiseSetup.GET;
      FileSystemOnPremiseSetup.TESTFIELD("Default Ext. Doc. Directory");
      MakeConnectionAsAdmin(Job, TRUE, TRUE);
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      IF (NOT ProjectPortalSubsite.FINDSET) THEN
        EXIT;

      REPEAT
        UpdateWindow(STRSUBSTNO(Text023), Job."No.", ProjectPortalSubsite.Code, '', '', '');
        DebugDotNetProperties('DrainSharePointProject', Job."SharePoint Site URL", FORMAT(TRUE),
            Job."No.", ProjectPortalSubsite.Code, FileSystemOnPremiseSetup."Default Ext. Doc. Directory",
            SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain", '');
        IF (NOT ProjectSite.DrainSharePointProject(Job."SharePoint Site URL", TRUE,
            Job."No.", ProjectPortalSubsite.Code, FileSystemOnPremiseSetup."Default Ext. Doc. Directory",
            SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain",
            ErrorString))
        THEN
          ThrowError(TRUE, 'DrainSharePointProject');
      UNTIL (ProjectPortalSubsite.NEXT = 0);
      InsertChangeLog(Job, STRSUBSTNO('Extract Project %1 Documents End', Job."No."));
    END;

    PROCEDURE CleanProject@1100528338(Job@1100409012 : Record 11072003;Password@1100528000 : Text);
    VAR
      DocumentProperties@1100409011 : Record 11012746;
      DocumentLink@1100409010 : Record 11012747;
      DocumentUpdatePPT@1100409009 : Record 11229800;
      DocumentVersionsPPT@1100409008 : Record 11229809;
      ProjectPurchaseAction@1100409007 : Record 11012026;
      BudgetLine@1100409006 : Record 11012001;
      PurchaseHeader@1100409005 : Record 38;
      ProjectResponsiblePerson@1100409004 : Record 11012040;
      ProjectAuthority@1100409003 : Record 11020216;
      VendorsByPurchaseAction@1100409002 : Record 11012068;
      PurchActionDocumentRel@1100409001 : Record 11012071;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      RecRef@1100409000 : RecordRef;
    BEGIN
      //For 4PS Admin Only
      CheckActionPermission(Job, 1); //Admin Check
      IF (NOT CONFIRM('You are about to reset this Project!\This will delete all Project Documents!!\\Are you sure?', FALSE)) THEN
        EXIT;
      InsertChangeLog(Job, STRSUBSTNO('Clean Project %1 Start', Job."No."));
      DocumentPortalManagement.CheckPassword(Password);

      DocumentUpdatePPT.SETRANGE("Project No.", Job."No.");
      DocumentUpdatePPT.MODIFYALL("E-Mail Send On", 0DT);
      DocumentUpdatePPT.DELETEALL(TRUE);

      DocumentVersionsPPT.SETRANGE("Project No.", Job."No.");
      DocumentVersionsPPT.DELETEALL(TRUE);

      ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
      ProjectResponsiblePerson.MODIFYALL("Portal Login E-Mail Send On", 0DT);

      ProjectAuthority.SETRANGE("Project No.", Job."No.");
      ProjectAuthority.MODIFYALL("Portal Login E-Mail Send On", 0DT);

      RecRef.GETTABLE(Job);

      DocumentLink.SETCURRENTKEY("Record ID");
      DocumentLink.SETRANGE("Record ID", RecRef.RECORDID);
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      IF (DocumentLink.FINDSET(TRUE, TRUE)) THEN BEGIN
        REPEAT
          DocumentLink.DELETE;
          IF (DocumentProperties.GET(DocumentLink."Document No.")) THEN
            DocumentProperties.DELETE;
        UNTIL (DocumentLink.NEXT = 0);
      END;

      VendorsByPurchaseAction.SETRANGE(Source, VendorsByPurchaseAction.Source::Project);
      VendorsByPurchaseAction.SETRANGE("Estimate No.", '');
      VendorsByPurchaseAction.SETRANGE("Project No.", Job."No.");
      IF (CONFIRM('Delete all Vendors of the Purchase Actions?', FALSE)) THEN BEGIN
        InsertChangeLog(Job, 'Clean Project: Delete Vendors');
        VendorsByPurchaseAction.DELETEALL(TRUE);
      END;

      PurchActionDocumentRel.SETRANGE(Source, PurchActionDocumentRel.Source::Project);
      PurchActionDocumentRel.SETRANGE("Estimate No.", '');
      PurchActionDocumentRel.SETRANGE("Project No.", Job."No.");
      PurchActionDocumentRel.DELETEALL(TRUE);

      ProjectPurchaseAction.SETRANGE("Project No.", Job."No.");
      IF (ProjectPurchaseAction.FINDSET(TRUE)) THEN BEGIN
        REPEAT
          BudgetLine.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
          BudgetLine.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
          BudgetLine.MODIFYALL(Advised, FALSE);
          BudgetLine.MODIFYALL("Purchase Order No.", '');
          BudgetLine.MODIFYALL("Purchase Order Line No.", 0);
          BudgetLine.MODIFYALL(Advised, FALSE);

          PurchaseHeader.SETRANGE("Job No.", ProjectPurchaseAction."Project No.");
          PurchaseHeader.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
          PurchaseHeader.MODIFYALL("Job No.", '');
          PurchaseHeader.MODIFYALL("Purchase Action", '');
        UNTIL (ProjectPurchaseAction.NEXT = 0);
      END;

      IF (CONFIRM('Reset the PPT Checkboxes for this Project?', TRUE)) THEN BEGIN
        InsertChangeLog(Job, 'Clean Project: Checkbox Reset');
        Job."Project Portal Project" := FALSE;
        Job."Quote Subsite Generated" := FALSE;
        Job."SharePoint Site Generated" := FALSE;
        Job."SharePoint Site URL" := '';
        Job.MODIFY;
      END;
      InsertChangeLog(Job, STRSUBSTNO('Clean Project %1 End', Job."No."));
      MESSAGE('Project is cleared.');
    END;

    LOCAL PROCEDURE AddAuthorisations@1100525001(Job@1100528302 : Record 11072003);
    VAR
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      OptionArray@1100525005 : ARRAY [10] OF Text[250];
      OptionCaptionArray@1100525004 : ARRAY [10] OF Text[250];
      CallStack@1100528301 : Text;
    BEGIN
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      IF (NOT DocumentPortalManagement.AddAuthorisations(OptionArray, OptionCaptionArray, ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
      IF (NOT DocumentPortalManagement.FillViewAndMetaDataList(ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
      DocumentPortalManagement.AddAllDocumentTypesPerSubsite(Job, ProjectSite, ErrorString, CallStack);
      AddAllProjectElementsPerSubSite(Job);
    END;

    LOCAL PROCEDURE AddAllProjectElementsPerSubSite@1100528365(Job@1100528300 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528301 : Record 11229810;
      ProjectElement@1100528302 : Record 11012010;
      DocumentPortalManagement@1100529401 : Codeunit 11012203;
      CallStack@1100529400 : Text;
    BEGIN
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      IF (NOT ProjectSite.ClearElementCodeList(ErrorString)) THEN
        ThrowError(TRUE, 'ClearElementCodeList');

      ProjectElement.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectElement.FINDSET) THEN
        EXIT;
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETFILTER(Code, '<>%1', '');
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT ProjectPortalSubsite.FINDSET) THEN
        EXIT;

      REPEAT
        UpdateWindow(STRSUBSTNO(Text002, ProjectElement.TABLECAPTION), Job."No.", ProjectPortalSubsite.Code, '', '', '');
        ProjectElement.FINDSET;
        REPEAT
          DebugDotNetProperties('AddElementCodeToListForSite', ProjectPortalSubsite.Code, ProjectElement.Description, ProjectElement.Element, '', '', '', '', '', '');
          IF (NOT ProjectSite.AddElementCodeToListForSite(ProjectPortalSubsite.Code, ProjectElement.Description, ProjectElement.Element,
            ErrorString))
          THEN
            ThrowError(TRUE, 'AddElementCodeToList2');
        UNTIL (ProjectElement.NEXT = 0);
        //#T006823.sn
        IF (NOT DocumentPortalManagement.AddDocumentStatuses(ProjectPortalSubsite.Code, ProjectSite, ErrorString, CallStack)) THEN
          ThrowError(TRUE, CallStack);
        //#T006823.en
      UNTIL (ProjectPortalSubsite.NEXT = 0);
    END;

    PROCEDURE AddAllProjectElements@1100525012(Job@1100525000 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528300 : Record 11229810;
      ProjectElement@1100528301 : Record 11012010;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, ProjectElement.TABLECAPTION), Job."No.", '', '', '', '');
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETFILTER(Code, '<>%1', '');
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (ProjectPortalSubsite.FINDSET) THEN BEGIN
        REPEAT
          AddProjectElements(Job."No.", ProjectPortalSubsite.Code);
        UNTIL (ProjectPortalSubsite.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE AddProjectElements@1100528319(JobNo@1100528300 : Code[20];SubsiteCode@1100528301 : Code[20]);
    VAR
      ProjectElement@1100528302 : Record 11012010;
    BEGIN
      ProjectElement.SETRANGE("Project No.", JobNo);
      IF (NOT ProjectElement.FINDSET) THEN
        EXIT;
      IF (NOT ProjectSite.ClearElementCodeList(ErrorString)) THEN
        ThrowError(TRUE, 'ClearElementCodeList');

      REPEAT
        DebugDotNetProperties('AddElementCodeToList', ProjectElement.Description, ProjectElement.Element, '', '', '', '', '', '', '');
        IF (NOT ProjectSite.AddElementCodeToList(ProjectElement.Description, ProjectElement.Element, ErrorString)) THEN
          ThrowError(TRUE, 'AddElementCodeToList');
      UNTIL (ProjectElement.NEXT = 0);

      DebugDotNetProperties('SetElementCode', SubsiteCode, '', '', '', '', '', '', '', '');
      IF (NOT ProjectSite.SetElementCode(SubsiteCode, ErrorString)) THEN
        ThrowError(TRUE, 'SetElementCode');
    END;

    PROCEDURE AddResponsiblePersons@1100528309(Job@1100528300 : Record 11072003);
    VAR
      ProjectResponsiblePerson@1100528302 : Record 11012040;
      OptionArray@1100528303 : ARRAY [10] OF Text[250];
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectResponsiblePerson.FINDSET) THEN
        EXIT;
      CheckActionAdminPermission(Job);
      CheckResponsiblePersons(Job);
      MakeConnectionAsAdmin(Job, TRUE, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, ProjectResponsiblePerson.TABLECAPTION), Job."No.", '', '', '', '');
      SetOptionStringProjRespPerson(OptionArray);
      AddAuthorisations(Job);

      IF (NOT ProjectSite.ClearUserList(ErrorString)) THEN
        ThrowError(TRUE, 'ClearUserList (' + InternTxt + ')');
      REPEAT
        AddResponsiblePerson(Job, ProjectResponsiblePerson, OptionArray);
      UNTIL (ProjectResponsiblePerson.NEXT = 0);
      UpdateWindow(STRSUBSTNO(Text002, ProjectResponsiblePerson.TABLECAPTION), Job."No.", '', '', '', '');
      IF (NOT ProjectSite.UpdateUsers(InternTxt, ErrorString)) THEN
        ThrowError(TRUE, 'UpdateUsers (' + InternTxt + ')');

      ProjectResponsiblePerson.SETRANGE("Portal Login E-Mail Send On", 0DT);
      IF (NOT ProjectResponsiblePerson.FINDSET(TRUE)) THEN
        EXIT;
      REPEAT
        SendResponsiblePersonMail(ProjectResponsiblePerson);
        ProjectResponsiblePerson."Portal Login E-Mail Send On" := CURRENTDATETIME;
        ProjectResponsiblePerson.MODIFY;
      UNTIL (ProjectResponsiblePerson.NEXT = 0);
    END;

    LOCAL PROCEDURE AddResponsiblePerson@1100528310(Job@1100528309 : Record 11072003;VAR ProjectResponsiblePerson@1100528301 : Record 11012040;OptionArray@1100528304 : ARRAY [10] OF Text[250]);
    VAR
      RespPersPermPPT@1100528308 : Record 11229812;
      DocumentPortalManagement@1100528305 : Codeunit 11012203;
      Password@1100528310 : Text[30];
      TeamMember@1100528306 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
    BEGIN
      RespPersPermPPT.SETRANGE("Subsite Type", RespPersPermPPT."Subsite Type"::Project);
      RespPersPermPPT.SETRANGE(Type, RespPersPermPPT.Type::Access);
      RespPersPermPPT.SETRANGE("Project No.", ProjectResponsiblePerson."Project No.");
      RespPersPermPPT.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      RespPersPermPPT.SETRANGE("Quote Request Subsite", FALSE);
      RespPersPermPPT.SETFILTER("Permission Level", '<>%1', RespPersPermPPT."Permission Level"::None);
      IF (NOT RespPersPermPPT.FINDSET) THEN
        EXIT;

      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      REPEAT
        UpdateWindow(STRSUBSTNO(Text002, RespPersPermPPT.TABLECAPTION), RespPersPermPPT."Project No.",
          FORMAT(RespPersPermPPT."Line No."), RespPersPermPPT."Project Portal Subsite", RespPersPermPPT."Document Type", '');
        SetTeamMemberProjectRespPerson(ProjectResponsiblePerson, TeamMember);
        DebugDotNetProperties('AddUser', RespPersPermPPT."Project Portal Subsite",
          FORMAT(OptionArray[RespPersPermPPT."Permission Level" + 1]),
          DocumentPortalManagement.GetProjectPortalGuidFromDocType(RespPersPermPPT."Document Type"),
          FORMAT(TeamMember), Password, '', '', '', '');
        IF (NOT ProjectSite.AddUserToListForSite(RespPersPermPPT."Project Portal Subsite", OptionArray[RespPersPermPPT."Permission Level" + 1],
          DocumentPortalManagement.GetProjectPortalGuidFromDocType(RespPersPermPPT."Document Type"), TeamMember, Password, ErrorString))
        THEN
          ThrowError(TRUE, 'AddUserToList('+TeamMember.InternExtern+')');

        IF (RespPersPermPPT."Project Portal Subsite" <> '') AND (RespPersPermPPT."Document Type" = '') AND
           (RespPersPermPPT."Private Permission Level" <> RespPersPermPPT."Private Permission Level"::None)
        THEN BEGIN
          IF (NOT ProjectSite.AddUserToListForSite(RespPersPermPPT."Project Portal Subsite",
              OptionArray[RespPersPermPPT."Private Permission Level" + 1], PRIVATEPERMISSIONCOMPANYTEXT, TeamMember,
              Password, ErrorString))
          THEN
            ThrowError(TRUE, 'AddUserToListForCompany('+TeamMember.InternExtern+')');
        END;
      UNTIL (RespPersPermPPT.NEXT = 0);
    END;

    PROCEDURE AddQuoteResponsiblePersons@1100528383(Job@1100528300 : Record 11072003);
    VAR
      ProjectResponsiblePerson@1100528302 : Record 11012040;
      OptionArray@1100528303 : ARRAY [10] OF Text[250];
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      Job.TESTFIELD("Quote Subsite Generated", TRUE);
      ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectResponsiblePerson.FINDSET) THEN
        EXIT;
      CheckResponsiblePersons(Job);
      MakeConnection(Job, TRUE);

      SetOptionStringProjRespPerson(OptionArray);
      AddAuthorisations(Job);
      RemoveAllQuoteUsers(InternTxt);
      REPEAT
        AddQuoteResponsiblePerson(ProjectResponsiblePerson, OptionArray);
      UNTIL (ProjectResponsiblePerson.NEXT = 0);
    END;

    LOCAL PROCEDURE AddQuoteResponsiblePerson@1100528370(ProjectResponsiblePerson@1100528301 : Record 11012040;OptionArray@1100528302 : ARRAY [10] OF Text[250]);
    VAR
      ProjectPortalSubsite@1100528300 : Record 11229810;
      RespPersPermPPT@1100528303 : Record 11229812;
      DocumentPortalManagement@1100528307 : Codeunit 11012203;
      CallStack@1100528306 : Text;
      TeamMember@1100528305 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
    BEGIN
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;
      IF (NOT RespPersPermPPT.GET(ProjectPortalSubsite.Type, RespPersPermPPT.Type::Access, ProjectResponsiblePerson."Project No.",
          ProjectResponsiblePerson."Line No.", ProjectPortalSubsite.Code, '', ''))
      THEN
        RespPersPermPPT."Permission Level" := RespPersPermPPT."Permission Level"::Visitor;
      IF (RespPersPermPPT."Permission Level" = RespPersPermPPT."Permission Level"::None) THEN
        EXIT;

      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      UpdateWindow(STRSUBSTNO(Text002, ProjectResponsiblePerson.TABLECAPTION), ProjectResponsiblePerson."Project No.",
        FORMAT(ProjectResponsiblePerson."Line No."), ProjectPortalSubsite.Code, '', '');
      SetTeamMemberProjectRespPerson(ProjectResponsiblePerson, TeamMember);
      IF (RespPersPermPPT."Permission Level" = RespPersPermPPT."Permission Level"::Member) THEN
        RespPersPermPPT."Permission Level" := RespPersPermPPT."Permission Level"::Visitor;
      DebugDotNetTeamMemberProperties(TeamMember);
      DebugDotNetProperties('AddUserToQuote', ProjectPortalSubsite.Code, FORMAT(TeamMember),
          FORMAT(OptionArray[RespPersPermPPT."Permission Level" + 1]), '', '', '', '', '', '');
      IF (NOT ProjectSite.AddUserToQuote(ProjectPortalSubsite.Code, TeamMember,
          OptionArray[RespPersPermPPT."Permission Level" + 1], ErrorString))
      THEN
        ThrowError(TRUE, 'AddUserToQuote('+TeamMember.InternExtern+')');
      IF (NOT DocumentPortalManagement.AddDocumentTypes(ProjectPortalSubsite.Code, ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
    END;

    PROCEDURE AddAuthorities@1100528318(Job@1100528300 : Record 11072003);
    VAR
      ProjectAuthority@1100528302 : Record 11020216;
      AuthorityPermPPT@1100525002 : Record 11229813;
      DocumentPortalManagement@1100525000 : Codeunit 11012203;
      OptionArray@1100528303 : ARRAY [10] OF Text[250];
      TeamMember@1100525001 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      ProjectAuthority.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectAuthority.FINDSET) THEN; //Do NOT exit!!
      CheckActionAdminPermission(Job);
      CheckAuthorities(Job);
      MakeConnectionAsAdmin(Job, TRUE, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, ProjectAuthority.TABLECAPTION), Job."No.", '', '', '', '');
      SetOptionStringProjAuthority(OptionArray);
      AddAuthorisations(Job);

      IF (NOT ProjectSite.ClearUserList(ErrorString)) THEN
        ThrowError(TRUE, 'ClearUserList (' + ExternTxt + ')');
      REPEAT
        AddAuthority(Job, ProjectAuthority, OptionArray);
      UNTIL (ProjectAuthority.NEXT = 0);
      UpdateWindow(STRSUBSTNO(Text002, ProjectAuthority.TABLECAPTION), Job."No.", '', '', '', '');
      IF (NOT ProjectSite.UpdateUsers(ExternTxt, ErrorString)) THEN
        ThrowError(TRUE, 'UpdateUsers (' + ExternTxt + ')');

      ProjectAuthority.SETRANGE("Portal Login E-Mail Send On", 0DT);
      IF (NOT ProjectAuthority.FINDSET(TRUE)) THEN
        EXIT;
      REPEAT
        AuthorityPermPPT.SETRANGE(Type, AuthorityPermPPT.Type::Access);
        AuthorityPermPPT.SETRANGE("Project No.", ProjectAuthority."Project No.");
        AuthorityPermPPT.SETRANGE("Authority Type", ProjectAuthority."Authority Type");
        AuthorityPermPPT.SETRANGE("Contact No.", ProjectAuthority."Contact No.");
        AuthorityPermPPT.SETRANGE("Contact Person No.", ProjectAuthority."Contact Person No.");
        AuthorityPermPPT.SETFILTER("Permission Level", '<>%1', AuthorityPermPPT."Permission Level"::None);
        IF (AuthorityPermPPT.FINDFIRST) THEN BEGIN
          SetTeamMemberProjectAuthority(ProjectAuthority, TeamMember);
          SendAuthorityMail(TeamMember.LoginName, Job."No.", DocumentPortalManagement.GetContactNoFromGuid(TeamMember.UserId));
          ProjectAuthority."Portal Login E-Mail Send On" := CURRENTDATETIME;
          ProjectAuthority.MODIFY;
        END;
      UNTIL (ProjectAuthority.NEXT = 0);
    END;

    LOCAL PROCEDURE AddAuthority@1100528317(Job@1100528300 : Record 11072003;VAR ProjectAuthority@1100528301 : Record 11020216;OptionArray@1100528304 : ARRAY [10] OF Text[250]);
    VAR
      AuthorityPermPPT@1100528303 : Record 11229813;
      ProjectPortalLogin@1100525000 : Record 11229816;
      DocumentPortalManagement@1100528309 : Codeunit 11012203;
      StringFunctions@1100525001 : Codeunit 11012273;
      Password@1100528307 : Text;
      CallStack@1100528306 : Text;
      TeamMember@1100528305 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
    BEGIN
      AuthorityPermPPT.SETRANGE("Subsite Type", AuthorityPermPPT."Subsite Type"::Project);
      AuthorityPermPPT.SETRANGE(Type, AuthorityPermPPT.Type::Access);
      AuthorityPermPPT.SETRANGE("Project No.", ProjectAuthority."Project No.");
      AuthorityPermPPT.SETRANGE("Authority Type", ProjectAuthority."Authority Type");
      AuthorityPermPPT.SETRANGE("Contact No.", ProjectAuthority."Contact No.");
      AuthorityPermPPT.SETRANGE("Contact Person No.", ProjectAuthority."Contact Person No.");
      AuthorityPermPPT.SETRANGE("Quote Request Subsite", FALSE);
      AuthorityPermPPT.SETFILTER("Permission Level", '<>%1', AuthorityPermPPT."Permission Level"::None);
      IF (NOT AuthorityPermPPT.FINDSET) THEN
        EXIT;

      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      Password := '';
      REPEAT
        UpdateWindow(STRSUBSTNO(Text002, AuthorityPermPPT.TABLECAPTION), AuthorityPermPPT."Project No.",
          AuthorityPermPPT."Authority Type", AuthorityPermPPT."Contact No.", AuthorityPermPPT."Contact Person No.",
          AuthorityPermPPT."Project Portal Subsite"+'-'+AuthorityPermPPT."Document Type");

        SetTeamMemberProjectAuthority(ProjectAuthority, TeamMember);
        IF (Password = '') THEN BEGIN
          IF (ProjectPortalLogin.GET(SharePointSetup4PS."FBA Membership Provider", SharePointSetup4PS."FBA Server",
            SharePointSetup4PS."FBA Database", TeamMember.LoginName))
          THEN BEGIN
            IF (ProjectPortalLogin."E-Mail Send On" = 0DT) THEN
              StringFunctions.GeneratePasswordPlainText(Password, MaxPasswordLength);
          END ELSE BEGIN
            StringFunctions.GeneratePasswordPlainText(Password, MaxPasswordLength);
          END;
        END;
        DebugDotNetProperties('AddUser', AuthorityPermPPT."Project Portal Subsite", FORMAT(OptionArray[AuthorityPermPPT."Permission Level" + 1]),
          DocumentPortalManagement.GetProjectPortalGuidFromDocType(AuthorityPermPPT."Document Type"), FORMAT(TeamMember),
          Password, '', '', '', '');
        IF (NOT ProjectSite.AddUserToListForSite(AuthorityPermPPT."Project Portal Subsite", OptionArray[AuthorityPermPPT."Permission Level" + 1],
            DocumentPortalManagement.GetProjectPortalGuidFromDocType(AuthorityPermPPT."Document Type"), TeamMember, Password, ErrorString))
        THEN
          ThrowError(TRUE, 'AddUserToList ('+TeamMember.InternExtern+')');
        DocumentPortalManagement.UpdateProjectPortalLogin(TeamMember.LoginName, Password);
      UNTIL (AuthorityPermPPT.NEXT = 0);
    END;

    PROCEDURE AddAllQuoteVendors@1100528336(Job@1100528300 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528301 : Record 11229810;
      VendorsbyPurchaseAction@1100528302 : Record 11012068;
      ProjectPurchaseAction@1100528303 : Record 11012026;
      DocumentPortalManagement@1100528304 : Codeunit 11012203;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      Job.TESTFIELD("Quote Subsite Generated", TRUE);
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;
      VendorsbyPurchaseAction.SETRANGE(Source, VendorsbyPurchaseAction.Source::Project);
      VendorsbyPurchaseAction.SETRANGE("Project No.", Job."No.");
      IF (NOT VendorsbyPurchaseAction.FINDSET) THEN
        EXIT;
      ProjectPurchaseAction.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectPurchaseAction.FINDSET) THEN
        EXIT;
      DocumentPortalManagement.CheckFBASetup;
      REPEAT
        CheckQuoteVendors(ProjectPurchaseAction);
      UNTIL (ProjectPurchaseAction.NEXT = 0);
      MakeConnectionAsAdmin(Job, TRUE, TRUE);

      RemoveAllQuoteUsers(ExternTxt);
      REPEAT
        UpdateQuoteVendor(1, VendorsbyPurchaseAction);
      UNTIL (VendorsbyPurchaseAction.NEXT = 0);
    END;

    PROCEDURE AddQuoteVendors@1100525023(ProjectPurchaseAction@1100525000 : Record 11012026);
    VAR
      Job@1100528303 : Record 11072003;
      ProjectPortalSubsite@1100528302 : Record 11229810;
      VendorsbyPurchaseAction@1100528301 : Record 11012068;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
    BEGIN
      Job.GET(ProjectPurchaseAction."Project No.");
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      Job.TESTFIELD("Quote Subsite Generated", TRUE);
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;

      VendorsbyPurchaseAction.SETRANGE(Source, VendorsbyPurchaseAction.Source::Project);
      VendorsbyPurchaseAction.SETRANGE("Project No.", Job."No.");
      VendorsbyPurchaseAction.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      IF (NOT VendorsbyPurchaseAction.FINDSET) THEN
        EXIT;
      DocumentPortalManagement.CheckFBASetup;
      CheckQuoteVendors(ProjectPurchaseAction);
      MakeConnectionAsAdmin(Job, TRUE, TRUE);

      REPEAT
        UpdateQuoteVendor(1, VendorsbyPurchaseAction);
      UNTIL (VendorsbyPurchaseAction.NEXT = 0);
    END;

    PROCEDURE AddQuoteAttachments@1100528353(ProjectPurchaseAction@1100528300 : Record 11012026;SendRequestUpdate@1100528307 : Boolean);
    VAR
      Job@1100528306 : Record 11072003;
      ProjectPortalSubsite@1100528308 : Record 11229810;
      PurchActionDocumentRel@1100528302 : Record 11012071;
      DocumentProperties@1100528301 : Record 11012746;
      DocumentPortalManagement@1100528304 : Codeunit 11012203;
      Document@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT;
    BEGIN
      Job.GET(ProjectPurchaseAction."Project No.");
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      Job.TESTFIELD("Quote Subsite Generated", TRUE);
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;
      PurchActionDocumentRel.SETRANGE(Source, PurchActionDocumentRel.Source::Project);
      PurchActionDocumentRel.SETRANGE("Estimate No.", '');
      PurchActionDocumentRel.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      PurchActionDocumentRel.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      IF (NOT PurchActionDocumentRel.FINDSET) THEN
        EXIT;
      MakeConnection(Job, SendRequestUpdate);

      UpdateWindow(STRSUBSTNO(Text002, PurchActionDocumentRel.TABLECAPTION), Job."No.", '', '', '', '');
      DebugDotNetProperties('RemoveQuoteRequestAttachments', ProjectPortalSubsite.Code, ProjectPurchaseAction.Code, '', '', '', '', '', '', '');
      IF (NOT ProjectSite.RemoveQuoteRequestAttachments(ProjectPortalSubsite.Code, ProjectPurchaseAction.Code, ErrorString)) THEN
        ThrowError(TRUE, 'RemoveQuoteRequestAttachments');
      IF (NOT ProjectSite.ClearDocumentList(ErrorString)) THEN
        ThrowError(TRUE, 'ClearDocumentList');
      REPEAT
        UpdateWindow(STRSUBSTNO(Text002, PurchActionDocumentRel.TABLECAPTION), Job."No.", ProjectPurchaseAction.Code,
          PurchActionDocumentRel."Related Document No.", '', '');
        IF (NOT DocumentProperties.GET(PurchActionDocumentRel."Related Document No.")) THEN
          DocumentProperties.INIT;

        IF (DocumentProperties.HasStorageURI) AND (DocumentProperties."Project Portal Publish Date" = 0DT) THEN BEGIN
          DocumentPortalManagement.SetDocumentProperties(DocumentProperties, Document);
          Document.FileToUpload := DocumentProperties.GetStorageURI;
          Document.Name := DocumentPortalManagement.GetDocumentNameFromURL(Document.FileToUpload);
          IF (GetLastDocumentVersionPPT(ProjectPurchaseAction."Project No.",
            PurchActionDocumentRel."Related Document No.", TODAY) <> '')
          THEN BEGIN
            DocumentProperties.CALCFIELDS("Document Type Description");
            Document.DocumentType := DocumentProperties."Document Type Description";

            DebugDotNetDocumentProperties(Document);
            IF (NOT ProjectSite.AddDocumentToList(Document, ErrorString)) THEN
              ThrowError(TRUE, 'AddDocumentToList');
            PurchActionDocumentRel."Quote Request Publish Date" := CURRENTDATETIME;
            PurchActionDocumentRel.MODIFY;
          END;
        END;
      UNTIL (PurchActionDocumentRel.NEXT = 0);
      UpdateWindow(STRSUBSTNO(Text002, PurchActionDocumentRel.TABLECAPTION), Job."No.",
        ProjectPurchaseAction.Code, '', '', '');
      IF (NOT ProjectSite.AddQuoteRequestAttachement(ProjectPortalSubsite.Code, ProjectPurchaseAction.Code,
          ErrorString))
      THEN
        ThrowError(TRUE, 'AddQuoteRequestAttachement');
      IF (SendRequestUpdate) THEN
        SendQuoteUpdateMails(ProjectPurchaseAction."Project No.", ProjectPurchaseAction.Code);
    END;

    PROCEDURE AddDocumentUpdate@1100525015(JobNo@1100525000 : Code[20];SeqNo@1100528310 : Integer);
    VAR
      Job@1100528314 : Record 11072003;
      DocumentUpdatePPT@1100528313 : Record 11229800;
      DocumentUpdateMemberPPT@1100528312 : Record 11229801;
      DocumentUpdateEmailPPT@1100528306 : Report 11012910;
      FileMgt@1100528305 : Codeunit 419;
      CoverLetterName@1100528303 : Text[100];
      CoverLetterFileName@1100528300 : Text[500];
    BEGIN
      Job.GET(JobNo);
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      DocumentUpdatePPT.SETRANGE("Project No.", JobNo);
      DocumentUpdatePPT.SETRANGE("Seq. No.", SeqNo);
      DocumentUpdatePPT.FINDSET(TRUE); //No GET because SetTableView is used later on
      DocumentUpdateMemberPPT.SETRANGE("Project No.", DocumentUpdatePPT."Project No.");
      DocumentUpdateMemberPPT.SETRANGE("Seq. No.", DocumentUpdatePPT."Seq. No.");
      DocumentUpdateMemberPPT.FINDSET;
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, DocumentUpdatePPT.TABLECAPTION), Job."No.", FORMAT(DocumentUpdatePPT."Seq. No."),
        DocumentUpdatePPT.Description, '', '');
      IF (DocumentUpdatePPT."Cover Letter" = '') THEN BEGIN
        CoverLetterName := BaseCoverLetterDesc + ' ' +  FORMAT(TODAY, 0, 9) + ' T' + FORMAT(TIME);
        CoverLetterName := DELCHR(CoverLetterName, '=', '-:');
        //Add all users to list and to CoverLetter
        AddDocumentUpdateToLists(DocumentUpdatePPT, CoverLetterName);
        //Copy Documents
        AddDocumentUpdateDocuments(DocumentUpdatePPT, CoverLetterName);
        DocumentUpdatePPT."Cover Letter" := CoverLetterName;
        DocumentUpdatePPT.MODIFY;
        COMMIT;
      END;
      //Send mail and create mail file
      DocumentUpdateEmailPPT.SETTABLEVIEW(DocumentUpdatePPT);
      DocumentUpdateEmailPPT.RUNMODAL;
      CoverLetterFileName := DocumentUpdateEmailPPT.GetFileName;
      IF (NOT DocumentUpdateEmailPPT.IsReportSuccessful) THEN
        MESSAGE(GETLASTERRORTEXT);
      IF (CoverLetterFileName <> '') THEN BEGIN
        IF (DocumentUpdateEmailPPT.IsReportSuccessful) THEN BEGIN
          DocumentUpdatePPT."E-Mail Send On" := CURRENTDATETIME;
          DocumentUpdatePPT.MODIFY;
        END;
        //Upload mail file to PPT
        IF (DocumentUpdatePPT."Uploaded to Project Portal" = 0DT) THEN BEGIN
          DebugDotNetProperties('AddCoverLetter', DocumentUpdatePPT.Description, CoverLetterFileName, '', '', '', '', '', '', '');
          IF (NOT ProjectSite.AddCoverLetter(DocumentUpdatePPT.Description, CoverLetterFileName, ErrorString)) THEN
            ThrowError(TRUE, 'AddCoverLetter');
          DocumentUpdatePPT."Uploaded to Project Portal" := CURRENTDATETIME;
          DocumentUpdatePPT.MODIFY;
        END;
        //Delete mail file (created in report DocumentUpdateEmailPPT)
        IF (FileMgt.ClientFileExists(CoverLetterFileName)) THEN
          FileMgt.DeleteClientFile4PS(CoverLetterFileName, FALSE);
      END;
    END;

    LOCAL PROCEDURE AddDocumentUpdateToLists@1100528354(DocumentUpdatePPT@1100528300 : Record 11229800;CoverLetterName@1100528301 : Text);
    VAR
      DocumentUpdateMemberPPT@1100528302 : Record 11229801;
    BEGIN
      DocumentUpdateMemberPPT.SETRANGE("Project No.", DocumentUpdatePPT."Project No.");
      DocumentUpdateMemberPPT.SETRANGE("Seq. No.", DocumentUpdatePPT."Seq. No.");
      IF (NOT DocumentUpdateMemberPPT.FINDSET) THEN
        EXIT;

      DebugDotNetProperties('CreateCoverLetterList', CoverLetterName, '', '', '', '', '', '', '', '');
      IF (NOT ProjectSite.CreateCoverLetterList(CoverLetterName, ErrorString)) THEN
        ThrowError(TRUE, 'CreateCoverLetterList');
      REPEAT
        CASE DocumentUpdateMemberPPT.Type OF
          DocumentUpdateMemberPPT.Type::"Responsible Person": BEGIN
            AddRespPersUserToList(DocumentUpdateMemberPPT."Employee No.");
            AddRespPersUserToCoverLetter(DocumentUpdateMemberPPT."Employee No.", CoverLetterName);
          END;
          DocumentUpdateMemberPPT.Type::Authority: BEGIN
            AddAuthorityUserToList(DocumentUpdateMemberPPT."Contact No.", DocumentUpdateMemberPPT."Contact Person No.");
            AddAuthorityUserToCoverLetter(DocumentUpdateMemberPPT."Contact No.", DocumentUpdateMemberPPT."Contact Person No.",
              CoverLetterName);
          END;
        END;
      UNTIL (DocumentUpdateMemberPPT.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDocumentUpdateDocuments@1100528357(DocumentUpdatePPT@1100528300 : Record 11229800;CoverLetterName@1100528306 : Text);
    VAR
      DocumentUpdateDocumentPPT@1100528301 : Record 11229802;
      DocumentProperties@1100528302 : Record 11012746;
      DocumentPortalManagement@1100528303 : Codeunit 11012203;
      RegExpMgt@1100528305 : Codeunit 11012262;
      URL@1100528307 : Text;
      Document@1100528304 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT;
    BEGIN
      DocumentUpdateDocumentPPT.SETRANGE("Project No.", DocumentUpdatePPT."Project No.");
      DocumentUpdateDocumentPPT.SETRANGE("Seq. No.", DocumentUpdatePPT."Seq. No.");
      IF (NOT DocumentUpdateDocumentPPT.FINDSET) THEN
        EXIT;
      REPEAT
        DocumentProperties.GET(DocumentUpdateDocumentPPT."Document No.");
        DocumentPortalManagement.SetDocumentProperties(DocumentProperties, Document);
        Document.DocumentVersion := DocumentUpdateDocumentPPT.Version;
        IF (Document.DocumentVersion = GetLastDocumentVersionPPT(DocumentUpdatePPT."Project No.", DocumentProperties."No.",
          TODAY))
        THEN
          Document.DocumentVersion := '';
        Document.FileToUpload := RegExpMgt.Replace(DocumentProperties.GetStorageURI, '\%20', ' ');
        DebugDotNetDocumentProperties(Document);
        DebugDotNetProperties('CopyDocument', Document.SiteCode, FORMAT(Document), CoverLetterName, URL, '', '', '', '', '');
        IF (NOT ProjectSite.CopyDocument(Document.SiteCode, Document, CoverLetterName, URL, ErrorString)) THEN
          ThrowError(TRUE, 'CopyDocument');
        DocumentUpdateDocumentPPT."Web Link" := URL;
        DocumentUpdateDocumentPPT.MODIFY;
      UNTIL (DocumentUpdateDocumentPPT.NEXT = 0);
    END;

    LOCAL PROCEDURE AddRespPersUserToList@1100528361(EmployeeNo@1100528300 : Code[20]);
    VAR
      ProjectResponsiblePerson@1100528301 : Record 11012040;
      TeamMember@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
    BEGIN
      ProjectResponsiblePerson.INIT;
      ProjectResponsiblePerson."Employee No." := EmployeeNo;
      SetTeamMemberProjectRespPerson(ProjectResponsiblePerson, TeamMember);
      IF (NOT ProjectSite.AddUserToList(TeamMember, ErrorString)) THEN
        ThrowError(TRUE, 'AddUserToList('+TeamMember.InternExtern+')');
    END;

    LOCAL PROCEDURE AddAuthorityUserToList@1100528352(ContactNo@1100528300 : Code[20];ContactPersonNo@1100528303 : Code[20]);
    VAR
      ProjectAuthority@1100528301 : Record 11020216;
      TeamMember@1100528304 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
    BEGIN
      ProjectAuthority.INIT;
      ProjectAuthority."Contact No." := ContactNo;
      ProjectAuthority."Contact Person No." := ContactPersonNo;
      SetTeamMemberProjectAuthority(ProjectAuthority, TeamMember);
      IF (NOT ProjectSite.AddUserToList(TeamMember, ErrorString)) THEN
        ThrowError(TRUE, 'AddUserToList('+TeamMember.InternExtern+')');
    END;

    LOCAL PROCEDURE AddRespPersUserToCoverLetter@1100528377(EmployeeNo@1100528300 : Code[20];CoverLetterName@1100528302 : Text[100]);
    VAR
      ProjectResponsiblePerson@1100528301 : Record 11012040;
      TeamMember@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
      Password@1100528304 : Text[30];
      OptionArray@1100528306 : ARRAY [10] OF Text[250];
    BEGIN
      SetOptionStringProjRespPerson(OptionArray);
      ProjectResponsiblePerson.INIT;
      ProjectResponsiblePerson."Employee No." := EmployeeNo;
      SetTeamMemberProjectRespPerson(ProjectResponsiblePerson, TeamMember);
      DebugDotNetProperties('AddUserToCoverLetter('+TeamMember.InternExtern+')', FORMAT(TeamMember), CoverLetterName,
        FORMAT(OptionArray[2]), Password, '', '', '', '', '');
      IF (NOT ProjectSite.AddUserToCoverLetter(TeamMember, CoverLetterName, OptionArray[2], Password, ErrorString)) THEN
        ThrowError(TRUE, 'AddUserToCoverLetter('+TeamMember.InternExtern+')');
    END;

    LOCAL PROCEDURE AddAuthorityUserToCoverLetter@1100528369(ContactNo@1100528300 : Code[20];ContactPersonNo@1100528303 : Code[20];CoverLetterName@1100528302 : Text[100]);
    VAR
      ProjectAuthority@1100528301 : Record 11020216;
      TeamMember@1100528304 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
      Password@1100528306 : Text[30];
      OptionArray@1100528305 : ARRAY [10] OF Text[250];
    BEGIN
      SetOptionStringProjAuthority(OptionArray);
      ProjectAuthority.INIT;
      ProjectAuthority."Contact No." := ContactNo;
      ProjectAuthority."Contact Person No." := ContactPersonNo;
      SetTeamMemberProjectAuthority(ProjectAuthority, TeamMember);
      DebugDotNetProperties('AddUserToCoverLetter('+TeamMember.InternExtern+')', FORMAT(TeamMember), CoverLetterName,
        FORMAT(OptionArray[2]), Password, '', '', '', '', '');
      IF (NOT ProjectSite.AddUserToCoverLetter(TeamMember, CoverLetterName, OptionArray[2], Password, ErrorString)) THEN
        ThrowError(TRUE, 'AddUserToCoverLetter('+TeamMember.InternExtern+')');
    END;

    PROCEDURE AddDocuments@1100528311(Job@1100528300 : Record 11072003);
    VAR
      DocumentProperties@1100528305 : Record 11012746;
      DocumentLink@1100528304 : Record 11012747;
      RecRef@1100528303 : RecordRef;
      CurrentDocumentNo@1100528301 : Code[20];
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      RecRef.GETTABLE(Job);
      DocumentLink.SETCURRENTKEY("Record ID");
      DocumentLink.SETRANGE("Record ID", RecRef.RECORDID);
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT;
      CheckDocuments(Job);

      REPEAT
        DocumentProperties.GET(DocumentLink."Document No.");
        IF (DocumentProperties."No." <> CurrentDocumentNo) AND (DocumentProperties.HasStorageURI) THEN
          AddDocument(Job, DocumentProperties, FALSE);
        CurrentDocumentNo := DocumentProperties."No.";
      UNTIL (DocumentLink.NEXT = 0);
    END;

    PROCEDURE AddInternalDocument@1100528321(DocumentNo@1100528300 : Code[20]);
    VAR
      DocumentLink@1100528301 : Record 11012747;
      DocumentProperties@1100528302 : Record 11012746;
      Job@1100528304 : Record 11072003;
      RecRef@1100528303 : RecordRef;
    BEGIN
      DocumentLink.SETRANGE("Document No.", DocumentNo);
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT;

      COMMIT;
      DocumentProperties.GET(DocumentNo);
      REPEAT
        RecRef.GET(DocumentLink."Record ID");
        RecRef.SETTABLE(Job);
        AddDocument(Job, DocumentProperties, FALSE);
      UNTIL (DocumentLink.NEXT = 0);
    END;

    PROCEDURE AddDocument@1100528312(Job@1100528300 : Record 11072003;DocumentProperties@1100528301 : Record 11012746;DeleteDocPropRec@1100528302 : Boolean);
    VAR
      Contact@1100528305 : Record 5050;
      DocumentPortalManagement@1100528304 : Codeunit 11012203;
      FileManagement@1100528306 : Codeunit 419;
      Document@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT;
      MemoryStream@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) OR (DocumentProperties."Internal Company" <> COMPANYNAME) OR
         (NOT DocumentProperties.HasStorageURI)
      THEN
        EXIT;

      CheckDocument(Job, DocumentProperties);
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, DocumentProperties.TABLECAPTION), Job."No.", DocumentProperties."No.",
        DocumentProperties."Project Portal Subsite", DocumentProperties."Document Type", '');
      DocumentPortalManagement.SetDocumentProperties(DocumentProperties, Document);
      Document.FileToUpload := DocumentPortalManagement.SetDocumentFileToUpload(DocumentProperties);
      IF (Document.FileToUpload = '') THEN
        EXIT;
      Document.Name := DocumentProperties.FileNameShort;

      COMMIT;
      Contact.INIT;
      IF (DocumentProperties."Contact No." <> '') THEN BEGIN
        IF (DocumentProperties."Contact Person No." <> '') THEN
          Contact.GET(DocumentProperties."Contact Person No.")
        ELSE
          Contact.GET(DocumentProperties."Contact No.");
      END;
      CheckCreateNavisionDocumentListForCompany(Job."No.", Document.SiteCode, Document.CompanyId, Document.CompanyName,
        DocumentPortalManagement);

      UpdateWindow(STRSUBSTNO(Text002, DocumentProperties.TABLECAPTION), Job."No.", DocumentProperties."No.",
        DocumentProperties."Project Portal Subsite", DocumentProperties."Document Type", '');
      DebugDotNetProperties('AddDocument', DocumentProperties."Project Portal Subsite", FORMAT(Document), Contact."E-Mail 2", '', '', '', '', '', '');
      DebugDotNetDocumentProperties(Document);
      MemoryStream := MemoryStream.MemoryStream;
      DocumentProperties.GetContentInMemoryStream(MemoryStream);

      IF (NOT ProjectSite.UploadDocumentStream(DocumentProperties."Project Portal Subsite", Document, MemoryStream, ErrorString))
      THEN BEGIN
        //roll back
        IF (DeleteDocPropRec) THEN BEGIN //called from Document Link
          DocumentProperties.DELETE(TRUE);
          FileManagement.DeleteClientFile(Document.FileToUpload);
        END;
        CLEAR(MemoryStream);
        ThrowError(TRUE, 'AddDocument');
      END;
      FileManagement.DeleteClientFile(Document.FileToUpload);
    END;

    PROCEDURE ModifyDocuments@1100525016(Job@1100525000 : Record 11072003);
    VAR
      DocumentProperties@1100528303 : Record 11012746;
      DocumentLink@1100528302 : Record 11012747;
      CurrentDocumentNo@1100528301 : Code[20];
      RecRef@1100528300 : RecordRef;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      CheckDocuments(Job);
      MakeConnection(Job, TRUE);
      RecRef.GETTABLE(Job);
      DocumentLink.SETCURRENTKEY("Record ID");
      DocumentLink.SETRANGE("Record ID", RecRef.RECORDID);
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT;

      UpdateWindow(STRSUBSTNO(Text002, DocumentProperties.TABLECAPTION), Job."No.", '', '', '', '');
      REPEAT
        DocumentProperties.GET(DocumentLink."Document No.");
        IF (DocumentProperties."No." <> CurrentDocumentNo) THEN
          ModifyDocument(Job, DocumentProperties, FALSE);
        CurrentDocumentNo := DocumentProperties."No."
      UNTIL (DocumentLink.NEXT = 0);
    END;

    PROCEDURE ModifyDocument@1100528313(Job@1100528301 : Record 11072003;DocumentProperties@1100528302 : Record 11012746;StopAtError@1100409000 : Boolean);
    VAR
      Contact@1100528303 : Record 5050;
      DocumentPortalManagement@1100528304 : Codeunit 11012203;
      Document@1100528300 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) OR (DocumentProperties."Internal Company" <> COMPANYNAME) THEN
        EXIT;
      IF (NOT DocumentProperties.HasStorageURI) THEN //#C038959.n
        EXIT;
      CheckDocument(Job, DocumentProperties);
      DocumentProperties.TESTFIELD("Web link");
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, DocumentProperties.TABLECAPTION), Job."No.", DocumentProperties."No.",
        DocumentProperties."Project Portal Subsite", DocumentProperties."Document Type", '');
      Contact.INIT;
      IF (DocumentProperties."Contact No." <> '') THEN BEGIN
        IF (DocumentProperties."Contact Person No." <> '') THEN
          Contact.GET(DocumentProperties."Contact Person No.")
        ELSE
          Contact.GET(DocumentProperties."Contact No.");
      END;
      COMMIT; //SharePoint also calls NAV in a WS
      DocumentPortalManagement.SetDocumentProperties(DocumentProperties, Document);
      DebugDotNetDocumentProperties(Document);
      DebugDotNetProperties('UpdateDocument', DocumentProperties."Project Portal Subsite", FORMAT(Document),
        '',  '', '', '', '', '', '');
      IF (NOT ProjectSite.UpdateDocument(DocumentProperties."Project Portal Subsite", Document, ErrorString)) THEN
        ThrowError(StopAtError, 'UpdateDocument');
    END;

    PROCEDURE UpdateStaticContentAllProjects@1100525003();
    VAR
      Job@1100528301 : Record 11072003;
      SharePointIntegration@1100528300 : Codeunit 11020210;
    BEGIN
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;
      Job.SETRANGE("Project Portal Project", TRUE);
      Job.SETRANGE("SharePoint Site Generated", TRUE);
      Job.SETFILTER("SharePoint Site URL", '<>%1', '');
      IF (NOT Job.FINDSET) THEN
        EXIT;

      REPEAT
        UpdateStaticProjectContent(Job);
      UNTIL (Job.NEXT = 0);
    END;

    PROCEDURE UpdateStaticProjectContent@1100528330(Job@1100528303 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528301 : Record 11229810;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
      CallStack@1100528304 : Text;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      CheckActionPermission(Job, 4); //Update Static Project Content
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      DocumentPortalManagement.CheckSearchCenter;
      MakeConnectionAsAdmin(Job, TRUE, TRUE);
      UpdateWindow(STRSUBSTNO(Text002, Job.TABLECAPTION), Job."No.", '', '', '', '');
      AddAuthorisations(Job);

      DebugDotNetProperties('ConfigureProjectSite', Job."No.", Job.Description, NavCompanyId, COMPANYNAME,
        FORMAT(SharePointSetup4PS."Language ID"), Job.City, Job."Main Project", '', '');
      IF (NOT ProjectSite.ConfigureProjectSite(Job."No.", Job.Description, NavCompanyId, COMPANYNAME, SharePointSetup4PS."Language ID",
          Job.City, Job."Main Project", ErrorString))
      THEN
        ThrowError(TRUE, 'ConfigureProjectSite');
      IF (MetadataIsPresent) THEN
        DebugDotNetProperties('SetMetadataForList', '', FORMAT(SharePointSetup4PS."Language ID"), '', '', '', '', '', '', '');
        IF (NOT ProjectSite.SetMetadataForList('', SharePointSetup4PS."Language ID", ErrorString)) THEN
          ThrowError(TRUE, 'SetMetadataForList');

      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (ProjectPortalSubsite.FINDSET) THEN BEGIN
        REPEAT
          UpdateWindow(STRSUBSTNO(Text002, ProjectPortalSubsite.TABLECAPTION), Job."No.", ProjectPortalSubsite.Code, '', '', '');
          DebugDotNetProperties('ConfigureSite', Job."No.", Job.Description, ProjectPortalSubsite.Code, ProjectPortalSubsite.Description,
            FORMAT(ProjectPortalSubsite."High Security Subsite"), FORMAT(SharePointSetup4PS."Language ID"), '', '', '');
          IF (NOT ProjectSite.ConfigureSite(Job."No.", Job.Description, ProjectPortalSubsite.Code, ProjectPortalSubsite.Description,
            ProjectPortalSubsite."High Security Subsite", SharePointSetup4PS."Language ID", ErrorString))
          THEN
            ThrowError(TRUE, 'ConfigureSite');
          IF (MetadataIsPresent) THEN
            DebugDotNetProperties('SetMetadataForList', ProjectPortalSubsite.Code, FORMAT(SharePointSetup4PS."Language ID"), '', '', '', '', '', '', '');
            IF (NOT ProjectSite.SetMetadataForList(ProjectPortalSubsite.Code, SharePointSetup4PS."Language ID", ErrorString)) THEN
              ThrowError(TRUE, 'SetMetadataForList');
          IF (NOT DocumentPortalManagement.AddDocumentTypes(ProjectPortalSubsite.Code, ProjectSite, ErrorString, CallStack)) THEN
            ThrowError(TRUE, CallStack);
          AddProjectElements(Job."No.", ProjectPortalSubsite.Code);
          IF (NOT DocumentPortalManagement.AddDocumentStatuses(ProjectPortalSubsite.Code, ProjectSite, ErrorString, CallStack)) THEN
            ThrowError(TRUE, CallStack);
        UNTIL (ProjectPortalSubsite.NEXT = 0);
      END;
      UpdateCssFileCurrentProject(Job);
      UpdateProjectStatus(Job);
    END;

    PROCEDURE UpdateStaticQuoteContent@1100528327(Job@1100528303 : Record 11072003);
    VAR
      ProjectPortalSubsite@1100528300 : Record 11229810;
      DocumentPortalManagement@1100528301 : Codeunit 11012203;
      CallStack@1100528302 : Text;
    BEGIN
      Job.TESTFIELD("Quote Subsite Generated", TRUE);
      CheckActionPermission(Job, 6); //Update Static Quote Content
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;
      MakeConnectionAsAdmin(Job, TRUE, TRUE);
      AddAuthorisations(Job);

      UpdateWindow(STRSUBSTNO(Text002, Job.TABLECAPTION), Job."No.", ProjectPortalSubsite.Code, '', '', '');
      DebugDotNetProperties('ConfigureQuoteSite', Job."No.", Job.Description, ProjectPortalSubsite.Code, ProjectPortalSubsite.Description, '', '', '', '', '');
      IF (NOT ProjectSite.ConfigureQuoteSite(Job."No.", Job.Description, ProjectPortalSubsite.Code, ProjectPortalSubsite.Description,
        SharePointSetup4PS."Language ID", ErrorString))
      THEN
        ThrowError(TRUE, 'ConfigureQuoteSite');
      IF (NOT DocumentPortalManagement.AddDocumentStatuses(ProjectPortalSubsite.Code, ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
    END;

    PROCEDURE UpdateQuoteStatus@1100528380(ProjectPurchaseAction@1100528300 : Record 11012026);
    VAR
      Job@1100528311 : Record 11072003;
      Contact@1100528309 : Record 5050;
      DocumentProperties@1100528308 : Record 11012746;
      TmpDocumentProperties@1100528307 : TEMPORARY Record 11012746;
      ProjectPortalSubsite@1100528306 : Record 11229810;
      DocumentFilters@1100528312 : Codeunit 11012432;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
      QuoteDocument@1100528305 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.QuoteDocument" RUNONCLIENT;
      QuoteStatus@1100528304 : Text[30];
      SaveLanguageId@1100528303 : Integer;
      RecRef@1100528301 : RecordRef;
    BEGIN
      Job.GET(ProjectPurchaseAction."Project No.");
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      Job.TESTFIELD("Quote Subsite Generated", TRUE);
      RecRef.GETTABLE(ProjectPurchaseAction);
      DocumentFilters.CreateTempFilterAndGetDocProps(RecRef, TmpDocumentProperties);
      TmpDocumentProperties.SETFILTER("Web link", '<>%1', '');
      TmpDocumentProperties.SETFILTER("Project Portal Publish Date", '<>%1', 0DT);
      IF (NOT TmpDocumentProperties.FINDSET) THEN
        EXIT;
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;
      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(1033); //US-English
      QuoteStatus := FORMAT(ProjectPurchaseAction.Status);
      GLOBALLANGUAGE(SaveLanguageId);
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, ProjectPurchaseAction.TABLECAPTION), Job."No.", ProjectPurchaseAction.Code,
        '', '', '');
      REPEAT
        DocumentProperties.GET(TmpDocumentProperties."No.");
        IF (DocumentProperties."Contact No." <> '') THEN BEGIN
          IF (DocumentProperties."Contact Person No." <> '') THEN
            Contact.GET(DocumentProperties."Contact Person No.")
          ELSE
            Contact.GET(DocumentProperties."Contact No.");
          DocumentPortalManagement.SetQuoteDocumentProperties(DocumentProperties, ProjectPurchaseAction,
            ProjectPortalSubsite, QuoteDocument);
          DebugDotNetQuoteDocumenProperties(QuoteDocument);
          DebugDotNetProperties('UpdateQuoteRequestStatus', ProjectPortalSubsite.Code, QuoteDocument.CompanyId, ProjectPurchaseAction.Code,
            FORMAT(QuoteStatus), '', '', '', '', '');
          IF (NOT ProjectSite.UpdateQuoteRequestStatus(ProjectPortalSubsite.Code, QuoteDocument.CompanyId,
              ProjectPurchaseAction.Code, QuoteStatus, ErrorString))
          THEN
            ThrowError(TRUE, 'UpdateQuoteRequestStatus');
        END;
      UNTIL (TmpDocumentProperties.NEXT = 0);
    END;

    PROCEDURE UpdateQuoteRequests@1100528341(ProjectPurchaseAction@1100528300 : Record 11012026;Action@1100528312 : ',Add,Modify');
    VAR
      Job@1100528315 : Record 11072003;
      DocumentProperties@1100528313 : Record 11012746;
      TmpDocumentProperties@1100528311 : TEMPORARY Record 11012746;
      Contact@1100528310 : Record 5050;
      ProjectPortalSubsite@1100528308 : Record 11229810;
      SubsiteDocTypePPT@1100528307 : Record 11229811;
      ProjectAuthority@1100528306 : Record 11020216;
      DocumentType@1100528305 : Record 11012405;
      DocumentFilters@1100528301 : Codeunit 11012432;
      DocumentPortalManagement@1100528316 : Codeunit 11012203;
      RecRef@1100528317 : RecordRef;
      QuoteDocument@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.QuoteDocument" RUNONCLIENT;
      TeamMember@1100528304 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
    BEGIN
      IF (ProjectPurchaseAction.Status <= ProjectPurchaseAction.Status::Concept) THEN
        ProjectPurchaseAction.FIELDERROR(Status);
      Job.GET(ProjectPurchaseAction."Project No.");
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      CheckActionPermission(Job, 7); //Action::UpdateQuoteRequests
      Job.TESTFIELD("Quote Subsite Generated", TRUE);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      ProjectPortalSubsite.FINDFIRST;
      SubsiteDocTypePPT.SETRANGE("Default Quote Subsite", TRUE);
      SubsiteDocTypePPT.FINDFIRST;
      DocumentType.GET(SubsiteDocTypePPT."Document Type");
      DocumentType.TESTFIELD(Description);
      RecRef.GETTABLE(ProjectPurchaseAction);
      DocumentFilters.CreateTempFilterAndGetDocProps(RecRef, TmpDocumentProperties);
      TmpDocumentProperties.SETFILTER("Web link", '<>%1', '');
      IF (NOT TmpDocumentProperties.FINDSET) THEN
        EXIT;
      IF (Action = Action::Add) THEN
        TmpDocumentProperties.SETRANGE("Project Portal Publish Date", 0DT)
      ELSE
        TmpDocumentProperties.SETFILTER("Project Portal Publish Date", '<>%1', 0DT);
      IF (NOT TmpDocumentProperties.FINDSET) THEN
        EXIT;
      MakeConnectionAsAdmin(Job, TRUE, TRUE);
      AddAuthorisations(Job);

      IF (Action = Action::Add) THEN BEGIN
        AddQuoteAttachments(ProjectPurchaseAction, FALSE);
        AddQuoteVendors(ProjectPurchaseAction);
      END;

      UpdateWindow(STRSUBSTNO(Text002, ProjectPurchaseAction.TABLECAPTION), Job."No.", ProjectPurchaseAction.Code,
        '', '', '');
      REPEAT
        DocumentProperties.GET(TmpDocumentProperties."No.");
        DocumentProperties.CALCFIELDS("Document Type Description");
        IF (DocumentProperties."Contact No." <> '') AND (QuoteRequestDocument(DocumentProperties)) THEN BEGIN //#C045340.c
          ProjectAuthority.INIT;
          ProjectAuthority."Contact No." := DocumentProperties."Contact No.";
          ProjectAuthority."Contact Person No." := DocumentProperties."Contact Person No.";
          SetTeamMemberProjectAuthority(ProjectAuthority, TeamMember);
          DocumentPortalManagement.SetQuoteDocumentProperties(DocumentProperties, ProjectPurchaseAction,
            ProjectPortalSubsite, QuoteDocument);
          DebugDotNetQuoteDocumenProperties(QuoteDocument);
          DebugDotNetProperties('AddQuoteRequest', ProjectPortalSubsite.Code, QuoteDocument.CompanyId, QuoteDocument.DocumentSiteCode,
            FORMAT(QuoteDocument), FORMAT(TeamMember), SubsiteDocTypePPT."Project Portal Subsite", DocumentType."Project Portal ID",
            ProjectPurchaseAction.Description, '');
          IF (NOT ProjectSite.AddQuoteRequest(ProjectPortalSubsite.Code, QuoteDocument.CompanyId,
              QuoteDocument.DocumentSiteCode, QuoteDocument, TeamMember, SubsiteDocTypePPT."Project Portal Subsite",
              DocumentType."Project Portal ID", ProjectPurchaseAction.Description, ErrorString))
          THEN
            ThrowError(TRUE, 'AddQuoteRequest');
          DocumentProperties."Project Portal Publish Date" := CURRENTDATETIME;
          DocumentProperties.MODIFY;
          IF (Action = Action::Add) THEN BEGIN
            UpdatePurchaseHeaderQuoteStatus(DocumentProperties, ProjectPurchaseAction);
            SendQuoteRequestMail(Job."No.", ProjectPurchaseAction, Contact."No.", TeamMember.LoginName);
          END;
        END;
      UNTIL (TmpDocumentProperties.NEXT = 0);
    END;

    PROCEDURE UpdateQuoteVendor@1100528348(Action@1100528311 : Option;VendorsByPurchaseAction@1100528302 : Record 11012068);
    VAR
      Job@1100528312 : Record 11072003;
      ProjectPortalSubsite@1100528303 : Record 11229810;
      Contact@1100528301 : Record 5050;
      ProjectAuthority@1100528304 : Record 11020216;
      ProjectPortalLogin@1100529900 : Record 11229816;
      SubsiteDocTypePPT@1100528300 : Record 11229811;
      DocumentPortalManagement@1100528310 : Codeunit 11012203;
      StringFunctions@1100529901 : Codeunit 11012273;
      TeamMember@1100528306 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT;
      Password@1100528305 : Text[30];
    BEGIN
      Job.GET(VendorsByPurchaseAction."Project No.");
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      ProjectPortalSubsite.FINDFIRST;
      SubsiteDocTypePPT.SETRANGE("Subsite Type", SubsiteDocTypePPT."Subsite Type"::Project);
      SubsiteDocTypePPT.SETRANGE("Default Quote Subsite", TRUE);
      SubsiteDocTypePPT.FINDFIRST;
      MakeConnection(Job, TRUE);
      UpdateWindow(STRSUBSTNO(Text002, VendorsByPurchaseAction.TABLECAPTION), Job."No.",
        VendorsByPurchaseAction."Purchase Action", FORMAT(VendorsByPurchaseAction.Type), VendorsByPurchaseAction."Vendor No.",
        VendorsByPurchaseAction.Contact);

      DocumentPortalManagement.GetContactFromVendorsByPurchaseAction(VendorsByPurchaseAction, Contact);
      ProjectAuthority.INIT;
      ProjectAuthority."Contact No." := Contact."No.";
      SetTeamMemberProjectAuthority(ProjectAuthority, TeamMember);

      CASE Action OF
        1, //Insert
        2: BEGIN //Modify
          CheckQuoteVendor(VendorsByPurchaseAction);
          Password := '';
          IF (NOT ProjectPortalLogin.GET(SharePointSetup4PS."FBA Membership Provider", SharePointSetup4PS."FBA Server",
            SharePointSetup4PS."FBA Database", TeamMember.LoginName))
          THEN BEGIN
            StringFunctions.GeneratePasswordPlainText(Password, MaxPasswordLength);
          END;
          AddAuthorisations(Job);
          DebugDotNetProperties('AddUserToQuote', ProjectPortalSubsite.Code, ProjectPortalSubsite.Description, TeamMember.CompanyId,
            TeamMember.CompanyName, FORMAT(SharePointSetup4PS."Language ID"), FORMAT(TeamMember), Password, '', '');
          IF (NOT ProjectSite.AddUserToQuoteExternal(ProjectPortalSubsite.Code, ProjectPortalSubsite.Description,
            TeamMember.CompanyId, TeamMember.CompanyName, SharePointSetup4PS."Language ID",
            TeamMember, Password, ErrorString))
          THEN
            ThrowError(TRUE, 'AddUserToQuote('+TeamMember.InternExtern+')');

          DocumentPortalManagement.UpdateProjectPortalLogin(Contact."E-Mail 2", Password);
          CheckCreateNavisionDocumentListForCompany(Job."No.", SubsiteDocTypePPT."Project Portal Subsite",
            TeamMember.CompanyId, TeamMember.CompanyName, DocumentPortalManagement);
        END;
        3: BEGIN  //Remove
          IF (IsLastVendorForThisPurchaseAction(VendorsByPurchaseAction)) THEN BEGIN
            DebugDotNetProperties('RemoveUserFromQuote', ProjectPortalSubsite.Code, TeamMember.CompanyId, FORMAT(TeamMember), '', '', '', '', '', '');
            IF (NOT ProjectSite.RemoveUserFromQuote(ProjectPortalSubsite.Code, TeamMember.CompanyId, TeamMember,
              ErrorString))
            THEN
              ThrowError(TRUE,'RemoveUserFromQuote('+TeamMember.InternExtern+')');
          END;
        END;
      END;
    END;

    PROCEDURE UpdateCssFileLandingPage@1100528350();
    VAR
      Job@1100525000 : Record 11072003;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      CssFileName@1100525001 : Text;
    BEGIN
      Job.INIT;
      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text040)), '', '', '', '', '');
      CssFileName := DocumentPortalManagement.CreateCssFile;
      UpdateCssFile(Job, TRUE);
    END;

    PROCEDURE UpdateCssFileAllProjects@1100528347();
    VAR
      Job@1100525000 : Record 11072003;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      CssFileName@1100525001 : Text;
    BEGIN
      Job.SETRANGE("SharePoint Site Generated", TRUE);
      Job.SETFILTER("SharePoint Site URL", '<>%1', '');
      IF (NOT Job.FINDSET) THEN
        EXIT;
      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text040)), '', '', '', '', '');
      CssFileName := DocumentPortalManagement.CreateCssFile;

      REPEAT
        UpdateCssFile(Job, FALSE);
      UNTIL (Job.NEXT = 0);
    END;

    LOCAL PROCEDURE UpdateCssFileCurrentProject@1100525036(Job@1100525003 : Record 11072003);
    VAR
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      CssFileName@1100525001 : Text;
    BEGIN
      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text040)), '', '', '', '', '');
      CssFileName := DocumentPortalManagement.CreateCssFile;
      UpdateCssFile(Job, FALSE);
    END;

    LOCAL PROCEDURE UpdateCssFile@1100528349(Job@1100528300 : Record 11072003;IsLandingsPage@1100528303 : Boolean);
    VAR
      FileSystemOnPremiseSetup@1100528301 : Record 11125739;
    BEGIN
      ResetVars;
      SetGlobalVars(Job);
      IF (IsLandingsPage) THEN BEGIN
        DebugDotNetProperties('LoginProjectSite_2', SharePointSetup4PS."Portal URL", SharePointSetup4PS."Owner ID",
          SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain", '', '', '', '', '');
        IF (NOT ProjectSite.LoginProjectSite(SharePointSetup4PS."Portal URL",
          SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain",
          ErrorString))
        THEN
          ThrowError(TRUE, STRSUBSTNO('LoginProjectSite_2', Job."No."));
      END ELSE
        MakeConnectionAsAdmin(Job, TRUE, TRUE);

      FileSystemOnPremiseSetup.GET;
      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text039)), Job."No.", '', '', '', '');
      IF (NOT ProjectSite.ActivateDeactivateFeature(FALSE, DesignFeatureGuid, ErrorString)) THEN
        ThrowError(TRUE, 'ActivateDeactivateFeature (Job: '+Job."No."+'; FALSE)');
      IF (NOT ProjectSite.ActivateDeactivateFeature(TRUE, DesignFeatureGuid, ErrorString)) THEN
        ThrowError(TRUE, 'ActivateDeactivateFeature (Job: '+Job."No."+'; TRUE)');
      IF (NOT ProjectSite.UploadCssFile(FileSystemOnPremiseSetup."Default Ext. Doc. Directory", FALSE, ErrorString)) THEN
        ThrowError(TRUE, 'UploadCssFile');
    END;

    PROCEDURE UpdateAllDocumentVersions@1100409000(JobNo@1100409000 : Code[20]);
    VAR
      TempDocumentProperties@1100528303 : TEMPORARY Record 11012746;
      Job@1100528302 : Record 11072003;
      DocumentFilters@1100528301 : Codeunit 11012432;
      RecRef@1100528300 : RecordRef;
    BEGIN
      Job.GET(JobNo);
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      RecRef.GETTABLE(Job);
      DocumentFilters.CreateTempFilterAndGetDocProps(RecRef, TempDocumentProperties);
      IF (NOT TempDocumentProperties.FINDSET) THEN
        EXIT;

      REPEAT
        UpdateDocumentVersions(JobNo, TempDocumentProperties."No.");
      UNTIL (TempDocumentProperties.NEXT = 0);
    END;

    PROCEDURE UpdateDocumentVersions@1100528308(JobNo@1100528300 : Code[20];DocumentNo@1100528301 : Code[20]);
    VAR
      Job@1100528305 : Record 11072003;
      DocumentProperties@1100528304 : Record 11012746;
      DocumentVersionsPPT@1100528303 : Record 11229809;
      DocumentPortalManagement@1100528306 : Codeunit 11012203;
      Document@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT;
    BEGIN
      Job.GET(JobNo);
      DocumentProperties.GET(DocumentNo);
      IF (NOT Job.IsJobInProjectPortal) OR (DocumentProperties."Internal Company" <> COMPANYNAME) THEN
        EXIT;
      DocumentProperties.TESTFIELD("Web link");
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, DocumentVersionsPPT.TABLECAPTION), Job."No.", DocumentProperties."No.",
        DocumentProperties."Project Portal Subsite", DocumentProperties."Document Type", '');
      DocumentPortalManagement.SetDocumentProperties(DocumentProperties, Document);
      DebugDotNetDocumentProperties(Document);
      DebugDotNetProperties('UpdateDocumentVersions', DocumentProperties."Project Portal Subsite", FORMAT(Document), '', '', '', '', '', '', '');
      IF (NOT ProjectSite.UpdateDocumentVersions(DocumentProperties."Project Portal Subsite", Document, ErrorString)) THEN
        ThrowError(TRUE, 'UpdateDocumentVersions');
    END;

    PROCEDURE UpdateCompanyLogo@1100525030();
    VAR
      FileSystemOnPremiseSetup@1100528308 : Record 11125739;
      Job@1100528307 : Record 11072003;
      CompanyInformation@1100528306 : Record 79;
      TempBlob@1100528305 : TEMPORARY Record 99008535;
      ThreeTierAutomationMgt@1100528302 : Codeunit 419;
      DocumentPortalManagement@1100528309 : Codeunit 11012203;
      OStream@1100528301 : OutStream;
      IStream@1100528300 : InStream;
      FileNameNAV@1100528304 : Text[500];
      FileNameSP@1100528303 : Text[100];
    BEGIN
      FileSystemOnPremiseSetup.GET;
      FileSystemOnPremiseSetup.TESTFIELD("Default Ext. Doc. Directory");
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      DocumentPortalManagement.CheckDocumentPortalSetup;
      CompanyInformation.GET;
      CompanyInformation.CALCFIELDS(Picture);
      IF (NOT CompanyInformation.Picture.HASVALUE) THEN
        ERROR(Text035, CompanyInformation.FIELDCAPTION(Picture));
      CompanyInformation.Picture.CREATEINSTREAM(IStream);
      TempBlob.Blob.CREATEOUTSTREAM(OStream);
      COPYSTREAM(OStream, IStream);
      FileNameSP := 'CompanyLogo.png';
      FileNameNAV := FileSystemOnPremiseSetup."Default Ext. Doc. Directory" + 'CompanyLogo.png';
      ThreeTierAutomationMgt.BLOBExport4PS(TempBlob, FileNameNAV, FALSE, FALSE);
      Job.INIT;
      SetGlobalVars(Job);

      UpdateWindow(STRSUBSTNO(Text002, CompanyInformation.TABLECAPTION), CompanyInformation.Name, '', '', '', '');
      DebugDotNetProperties('LoginProjectSite', SharePointSetup4PS."Portal URL", '', '', '', '', '', '', '', '');
      IF (NOT ProjectSite.LoginProjectSiteCurrentUser(SharePointSetup4PS."Portal URL", ErrorString)) THEN
        ThrowError(TRUE, 'LoginProjectSite');
      DebugDotNetProperties('SetCompanyLogo', FileNameNAV, FileNameSP, '', '', '', '', '', '', '');
      IF (NOT ProjectSite.SetCompanyLogo(FileNameNAV, FileNameSP, ErrorString)) THEN
        ThrowError(TRUE, 'SetCompanyLogo');
      IF (NOT ProjectSite.ActivateDeactivateFeature(FALSE, CompanyLogoFeatureGuid, ErrorString)) THEN
        ThrowError(TRUE, 'ActivateDeactivateFeature (LandingPage: ' + CompanyLogoFeatureGuid);
      SetFeatureToAllProjects(FALSE, CompanyLogoFeatureGuid, FALSE);

      SetGlobalVars(Job);
      IF (NOT ProjectSite.LoginProjectSiteCurrentUser(SharePointSetup4PS."Portal URL", ErrorString)) THEN
        ThrowError(TRUE, 'LoginProjectSite');
      IF (NOT ProjectSite.ActivateDeactivateFeature(TRUE, CompanyLogoFeatureGuid, ErrorString)) THEN
        ThrowError(TRUE, 'ActivateDeactivateFeature (LandingPage: ' + CompanyLogoFeatureGuid);
      SetFeatureToAllProjects(TRUE, CompanyLogoFeatureGuid, FALSE);

      SetLogoDocumentTransfer;
    END;

    PROCEDURE UpdateSearchCenter@1100528332();
    VAR
      Job@1100525000 : Record 11072003;
      ProjectPortalSubsite@1100525001 : Record 11229810;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      CallStack@1100528301 : Text;
    BEGIN
      Job.SETRANGE("SharePoint Site Generated", TRUE);
      Job.SETFILTER("SharePoint Site URL", '<>%1', '');
      IF (NOT Job.FINDSET) THEN
        EXIT;
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT ProjectPortalSubsite.FINDSET) THEN
        EXIT;
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project

      Job.INIT;
      ResetVars;
      SetGlobalVars(Job);
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      DocumentPortalManagement.CheckDocumentPortalSetup;

      DebugDotNetProperties('LoginProjectSite', SharePointSetup4PS."Portal URL", SharePointSetup4PS."Owner ID",
       SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain", '', '', '', '', '');
      IF (NOT ProjectSite.LoginProjectSite(SharePointSetup4PS."Portal URL",
        SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain",
        ErrorString))
      THEN
        ThrowError(TRUE, STRSUBSTNO('LoginProjectSite_2', Job."No."));

      IF (NOT DocumentPortalManagement.FillRefinerList(ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
      UpdateSearchSite(TRUE, '', '');
      UpdateSearchAllProjects;
    END;

    LOCAL PROCEDURE UpdateSearchAllProjects@1100525037();
    VAR
      Job@1100525000 : Record 11072003;
    BEGIN
      Job.SETRANGE("SharePoint Site Generated", TRUE);
      Job.SETFILTER("SharePoint Site URL", '<>%1', '');
      IF (NOT Job.FINDSET) THEN
        EXIT;

      REPEAT
        UpdateSearchAllProjectSubsites(Job."No.");
      UNTIL (Job.NEXT = 0);
    END;

    PROCEDURE UpdateSearchAllProjectSubsites@1100528324(JobNo@1100525000 : Code[20]);
    VAR
      ProjectPortalSubsite@1100525001 : Record 11229810;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
    BEGIN
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      DocumentPortalManagement.CheckSearchCenter;
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT ProjectPortalSubsite.FINDSET) THEN
        EXIT;

      UpdateSearchSite(FALSE, JobNo, '');
      REPEAT
        UpdateSearchSite(FALSE, JobNo, ProjectPortalSubsite.Code);
      UNTIL (ProjectPortalSubsite.NEXT = 0);
    END;

    LOCAL PROCEDURE UpdateSearchSite@1100525035(IsLandingsPage@1100525004 : Boolean;JobNo@1100525003 : Code[20];SubSiteCode@1100525002 : Code[20]);
    VAR
      Job@1100525000 : Record 11072003;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
      CallStack@1100528301 : Text;
    BEGIN
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      IF (NOT IsLandingsPage) THEN BEGIN
        ResetVars;
        Job.GET(JobNo);
        MakeConnectionAsAdmin(Job, TRUE, TRUE);
        IF (NOT DocumentPortalManagement.FillRefinerList(ProjectSite, ErrorString, CallStack)) THEN
          ThrowError(TRUE, CallStack);
      END;

      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text041)), JobNo, SubSiteCode, STRSUBSTNO(Text042, 1, 6), '', '');
      IF (NOT ProjectSite.CreateSearchCenter(SharePointSetup4PS."Language ID", IsLandingsPage, ErrorString)) THEN
        ThrowError(TRUE, 'CreateSearchCenter');

      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text041)), JobNo, SubSiteCode, STRSUBSTNO(Text042, 2, 6), '', '');
      IF (NOT ProjectSite.ConfigureSearchSite(SharePointSetup4PS."Language ID", IsLandingsPage, ErrorString)) THEN
        ThrowError(TRUE, 'ConfigureSearchSite');

      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text041)), JobNo, SubSiteCode, STRSUBSTNO(Text042, 3, 6), '', '');
      IF (NOT ProjectSite.ResultSource(SubSiteCode, SharePointSetup4PS."Language ID", IsLandingsPage, ErrorString)) THEN
        ThrowError(TRUE, 'ResultSource: '+Job."No.");

      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text041)), JobNo, SubSiteCode, STRSUBSTNO(Text042, 4, 6), '', '');
      IF (NOT ProjectSite.RemoveResultPage(SubSiteCode, SharePointSetup4PS."Language ID", IsLandingsPage, ErrorString)) THEN
        ThrowError(TRUE, 'RemoveResultPage: ' + Job."No.");

      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text041)), JobNo, SubSiteCode, STRSUBSTNO(Text042, 5, 6), '', '');
      IF (NOT ProjectSite.CreateResultPage(SubSiteCode, SharePointSetup4PS."Language ID", IsLandingsPage, ErrorString)) THEN
        ThrowError(TRUE, 'CreateResultPage: '+Job."No.");

      UpdateWindow(STRSUBSTNO(Text002, FORMAT(Text041)), JobNo, SubSiteCode, STRSUBSTNO(Text042, 6, 6), '', '');
      IF (NOT ProjectSite.ConfigureSearchResultPage(SubSiteCode, SharePointSetup4PS."Language ID", IsLandingsPage, ErrorString)) THEN
        ThrowError(TRUE, 'ConfigureSearchResultPage: '+Job."No.");
    END;

    LOCAL PROCEDURE UpdatePurchaseHeaderQuoteStatus@1100528376(DocumentProperties@1100528300 : Record 11012746;ProjectPurchaseAction@1100528301 : Record 11012026);
    VAR
      DocumentLink@1100528302 : Record 11012747;
      PurchaseHeader@1100528304 : Record 38;
      RecRef@1100528303 : RecordRef;
    BEGIN
      DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      DocumentLink.SETRANGE("Table No.", DATABASE::"Purchase Header");
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      DocumentLink.SETRANGE(Source, TRUE);
      IF (NOT DocumentLink.FINDFIRST) THEN
        EXIT;

      RecRef.GET(DocumentLink."Record ID");
      RecRef.SETTABLE(PurchaseHeader);
      IF (PurchaseHeader."Quote Status" < PurchaseHeader."Quote Status"::Sent) THEN BEGIN
        PurchaseHeader."Quote Status" := PurchaseHeader."Quote Status"::Sent;
        PurchaseHeader.MODIFY;
      END
    END;

    PROCEDURE RemoveQuoteRequest@1100528371(PurchaseHeader@1100528303 : Record 38);
    VAR
      Job@1100528304 : Record 11072003;
      ProjectPortalSubsite@1100528302 : Record 11229810;
      PurchActionDocumentRel@1100528301 : Record 11012071;
      Contact@1100528300 : Record 5050;
      DocumentPortalManagement@1100528305 : Codeunit 11012203;
    BEGIN
      IF (PurchaseHeader."Document Type" <> PurchaseHeader."Document Type"::Quote) OR
         (PurchaseHeader."Job No." = '') OR (PurchaseHeader."Purchase Action" = '') OR
         (PurchaseHeader."Buy-from Vendor No." = '')
      THEN
        EXIT;
      Job.GET(PurchaseHeader."Job No.");
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      IF (NOT Job."Quote Subsite Generated") THEN
        EXIT;
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, PurchaseHeader."Document Type"), PurchaseHeader."No.", '', '', '', '');
      DocumentPortalManagement.GetContactFromVendor(PurchaseHeader."Buy-from Vendor No.", Contact);
      DebugDotNetProperties('RemoveQuoteRequest', ProjectPortalSubsite.Code,
        DocumentPortalManagement.GetProjectPortalGuidFromContactNo(Contact."No."), PurchaseHeader."No.", '', '', '', '', '', '');
      IF (NOT ProjectSite.RemoveQuoteRequest(ProjectPortalSubsite.Code,
        DocumentPortalManagement.GetProjectPortalGuidFromContactNo(Contact."No."), PurchaseHeader."No.", ErrorString))
      THEN
        ThrowError(TRUE, 'RemoveQuoteRequest');
      IF (IsLastQuoteForThisPurchaseAction(PurchaseHeader)) THEN BEGIN
        DebugDotNetProperties('RemoveQuoteRequestAttachments', ProjectPortalSubsite.Code, PurchaseHeader."Purchase Action", '', '', '', '', '', '', '');
        IF (NOT ProjectSite.RemoveQuoteRequestAttachments(ProjectPortalSubsite.Code, PurchaseHeader."Purchase Action",
          ErrorString))
        THEN
          ThrowError(TRUE, 'RemoveQuoteRequestAttachments');
        PurchActionDocumentRel.SETRANGE(Source, PurchActionDocumentRel.Source::Project);
        PurchActionDocumentRel.SETRANGE("Estimate No.", '');
        PurchActionDocumentRel.SETRANGE("Project No.", PurchaseHeader."Job No.");
        PurchActionDocumentRel.SETRANGE("Purchase Action", PurchaseHeader."Purchase Action");
        PurchActionDocumentRel.MODIFYALL("Quote Request Publish Date", 0DT);
      END;
    END;

    PROCEDURE RemoveDocument@1100528314(Job@1100528300 : Record 11072003;DocumentProperties@1100528301 : Record 11012746);
    VAR
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
      Document@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT;
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) OR
         (DocumentProperties."Internal Company" <> COMPANYNAME) OR
         (NOT DocumentProperties.HasStorageURI)
      THEN
        EXIT;
      DocumentProperties.TESTFIELD("Web link");
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, DocumentProperties.TABLECAPTION), Job."No.", DocumentProperties."No.",
        DocumentProperties."Project Portal Subsite", DocumentProperties."Document Type", '');
      DocumentPortalManagement.SetDocumentProperties(DocumentProperties, Document);
      DebugDotNetDocumentProperties(Document);
      DebugDotNetProperties('RemoveDocument', DocumentProperties."Project Portal Subsite", FORMAT(Document), '', '', '', '', '', '', '');
      IF (NOT ProjectSite.RemoveDocument(DocumentProperties."Project Portal Subsite", Document, ErrorString)) THEN
        ThrowError(TRUE, 'RemoveDocument');
    END;

    LOCAL PROCEDURE RemoveAllUsers@1100528333(InternExtern@1100528301 : Text);
    VAR
      ProjectPortalSubsite@1100528300 : Record 11229810;
    BEGIN
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT ProjectPortalSubsite.FINDSET) THEN
        EXIT;

      IF (NOT ProjectSite.RemoveAllUsers('', InternExtern, ErrorString)) THEN
        ThrowError(TRUE, 'RemoveAllUsers('+InternExtern+')');
      REPEAT
        IF (NOT ProjectSite.RemoveAllUsers(ProjectPortalSubsite.Code, InternExtern, ErrorString)) THEN
          ThrowError(TRUE, 'RemoveAllUsers('+InternExtern+')');
      UNTIL(ProjectPortalSubsite.NEXT = 0);
    END;

    LOCAL PROCEDURE RemoveAllQuoteUsers@1100528339(InternExtern@1100528301 : Text);
    VAR
      ProjectPortalSubsite@1100528300 : Record 11229810;
    BEGIN
      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT ProjectPortalSubsite.FINDFIRST) THEN
        EXIT;

      IF (NOT ProjectSite.RemoveAllUsersFromQuote(ProjectPortalSubsite.Code, InternExtern, ErrorString)) THEN
        ThrowError(TRUE, 'RemoveAllQuoteUsers('+InternExtern+')');
    END;

    PROCEDURE GetInternalDocumentToUpdate@1100528351(JobNo@1100528304 : Code[20];VAR DocumentProperties@1100528307 : Record 11012746;StorageDir@1100528308 : Text;CheckOut@1100525000 : Boolean) : Text;
    VAR
      Job@1100528300 : Record 11072003;
      DocumentPortalManagement@1100528306 : Codeunit 11012203;
      WebLink@1100528305 : Text;
      CallStack@1100528309 : Text;
    BEGIN
      IF (DocumentProperties.HasStorageURI) THEN
        EXIT('');
      Job.GET(JobNo);
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT('');
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      MakeConnectionAsAdmin(Job, TRUE, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, DocumentProperties.TABLECAPTION), Job."No.", 'Download', DocumentProperties."No.", '', '');
      IF (NOT DocumentPortalManagement.GetInternalDocumentToUpdate(DocumentProperties, StorageDir, WebLink,
        CheckOut, ProjectSite, ErrorString, CallStack))
      THEN
        ThrowError(TRUE, CallStack);
      EXIT(WebLink);
    END;

    PROCEDURE PutUpdatedInternalDocument@1100528384(JobNo@1100528303 : Code[20];VAR DocumentProperties@1100528306 : Record 11012746;WebLink@1100528300 : Text;StorageDir@1100528305 : Text);
    VAR
      Job@1100528301 : Record 11072003;
    BEGIN
      IF (NOT DocumentProperties.HasStorageURI) THEN
        EXIT;
      Job.GET(JobNo);
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      MakeConnectionAsAdmin(Job, TRUE, TRUE);
      IF (COPYSTR(StorageDir, STRLEN(StorageDir), 1) <> '\') THEN
        StorageDir += '\';

      UpdateWindow(STRSUBSTNO(Text002, DocumentProperties.TABLECAPTION), Job."No.", 'Upload', DocumentProperties."No.", '', '');
      DebugDotNetProperties('UploadDocument', DocumentProperties."Project Portal Subsite", WebLink, StorageDir, '', '', '', '', '', '');
      IF (NOT ProjectSite.UploadDocument(DocumentProperties."Project Portal Subsite", WebLink, StorageDir, ErrorString)) THEN
        ThrowError(TRUE, 'UploadDocument');

      DocumentProperties.File := '';
      DocumentProperties."Web link" := WebLink;
    END;

    PROCEDURE GetLastDocumentVersionPPT@1100528362(JobNo@1100528302 : Code[20];DocumentNo@1100528300 : Code[20];DocumentDate@1100409000 : Date) : Text[10];
    VAR
      DocumentVersionsPPT@1100528301 : Record 11229809;
    BEGIN
      DocumentVersionsPPT.SETCURRENTKEY("Modification Date", "Modification Time");
      DocumentVersionsPPT.SETFILTER("Modification Date", '<=%1', DocumentDate);
      DocumentVersionsPPT.SETRANGE("Project No.", JobNo);
      DocumentVersionsPPT.SETRANGE("Document No.", DocumentNo);
      IF (NOT DocumentVersionsPPT.FINDLAST) THEN
        DocumentVersionsPPT.INIT;
      EXIT(DocumentVersionsPPT.Version);
    END;

    PROCEDURE SetWebServiceProperties@1100528320(Password@1100528300 : Text[30]);
    VAR
      Job@1100528302 : Record 11072003;
      DocumentPortalManagement@1100528303 : Codeunit 11012203;
      CallStack@1100528301 : Text;
    BEGIN
      Job.INIT;
      SetGlobalVars(Job);
      UpdateWindow(STRSUBSTNO(Text014), SharePointSetup4PS."Webservice URL", '', '', '', '');
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      IF (NOT DocumentPortalManagement.SetWebServiceProperties(Password, ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
    END;

    PROCEDURE SetFBAProperties@1100525019(Password@1100525000 : Text[30]);
    VAR
      Job@1100528300 : Record 11072003;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
      CallStack@1100528301 : Text;
    BEGIN
      Job.INIT;
      SetGlobalVars(Job);
      UpdateWindow(STRSUBSTNO(Text020), SharePointSetup4PS."Webservice URL", '', '', '', '');
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      IF (NOT DocumentPortalManagement.SetFBAProperties(Password, ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
    END;

    PROCEDURE SetGlobalPropertiesPPT@1100528382();
    VAR
      Job@1100528300 : Record 11072003;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
      CallStack@1100528301 : Text;
    BEGIN
      Job.INIT;
      SetGlobalVars(Job);
      DocumentPortalManagement.SetGlobalVariables(1, Debug); //Project
      IF (NOT DocumentPortalManagement.SetGlobalPropertiesPPT(ProjectSite, ErrorString, CallStack)) THEN
        ThrowError(TRUE, CallStack);
      SetFeatureToAllProjects(NOT SharePointSetup4PS."Use Office Web Apps Server", WebOfficeAppServerGuid, FALSE);
    END;

    LOCAL PROCEDURE SetFeatureToAllProjects@1100528323(FeatureValue@1100409000 : Boolean;FeatureGuid@1100409001 : Text[50];ShowError@1100409002 : Boolean);
    VAR
      Job@1100528300 : Record 11072003;
    BEGIN
      ResetVars;
      SetGlobalVars(Job);
      Job.SETRANGE("Project Portal Project", TRUE);
      Job.SETRANGE("SharePoint Site Generated", TRUE);
      Job.SETFILTER("SharePoint Site URL", '<>%1', '');
      IF (NOT Job.FINDSET) THEN
        EXIT;

      REPEAT
        IF (Job.IsJobInProjectPortal) THEN BEGIN
          LoggedIn := FALSE;
          FullDocumentPortalURL := Job."SharePoint Site URL";
          CLEAR(ProjectSite);
          IF (MakeConnectionAsAdmin(Job, TRUE, FALSE)) THEN BEGIN
            UpdateWindow(STRSUBSTNO(Text014, Job.TABLECAPTION), Job."No.", '', '', '', '');
            IF (NOT ProjectSite.ActivateDeactivateFeature(FeatureValue, FeatureGuid, ErrorString)) THEN
              ThrowError(TRUE, 'ActivateDeactivateFeature (Job: '+Job."No."+'; '+ FeatureGuid);
          END;
        END;
      UNTIL (Job.NEXT = 0);

      FullDocumentPortalURL := '';
      ResetVars;
    END;

    LOCAL PROCEDURE SetOptionStringProjRespPerson@1100528344(VAR OptionArray@1100528300 : ARRAY [10] OF Text[250]);
    VAR
      RespPersPermPPT@1100528304 : Record 11229812;
      StringFunctions@1100528305 : Codeunit 11012273;
      RecRef@1100528303 : RecordRef;
      FieldRef@1100528302 : FieldRef;
      I@1100528301 : Integer;
    BEGIN
      RecRef.GETTABLE(RespPersPermPPT);
      WHILE (I <= RecRef.FIELDCOUNT) DO BEGIN
        I += 1;
        FieldRef := RecRef.FIELDINDEX(I);
        IF (FieldRef.NUMBER = RespPersPermPPT.FIELDNO("Permission Level"))
        THEN BEGIN
          StringFunctions.SplitString(FieldRef.OPTIONSTRING, ',', OptionArray);
          I := RecRef.FIELDCOUNT + 1;
        END;
      END;
    END;

    LOCAL PROCEDURE SetOptionStringProjAuthority@1100528343(VAR OptionArray@1100528300 : ARRAY [10] OF Text[250]);
    VAR
      AuthorityPermPPT@1100528301 : Record 11229813;
      StringFunctions@1100528305 : Codeunit 11012273;
      RecRef@1100528304 : RecordRef;
      FieldRef@1100528303 : FieldRef;
      I@1100528302 : Integer;
    BEGIN
      RecRef.GETTABLE(AuthorityPermPPT);
      WHILE (I <= RecRef.FIELDCOUNT) DO BEGIN
        I += 1;
        FieldRef := RecRef.FIELDINDEX(I);
        IF (FieldRef.NUMBER = AuthorityPermPPT.FIELDNO("Permission Level"))
        THEN BEGIN
          StringFunctions.SplitString(FieldRef.OPTIONSTRING, ',', OptionArray);
          I := RecRef.FIELDCOUNT + 1;
        END;
      END;
    END;

    LOCAL PROCEDURE SetTeamMemberProjectRespPerson@1100528345(ProjectResponsiblePerson@1100528301 : Record 11012040;VAR TeamMember@1100528305 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT);
    VAR
      Employee@1100528302 : Record 5200;
      UserSetup@1100528303 : Record 91;
    BEGIN
      Employee.GET(ProjectResponsiblePerson."Employee No.");
      UserSetup.SETRANGE("Employee No.", ProjectResponsiblePerson."Employee No.");
      UserSetup.FINDFIRST;
      ProjectResponsiblePerson.CALCFIELDS("Responsibility Description");

      IF (NOT ISNULL(TeamMember)) THEN
        CLEAR(TeamMember);
      TeamMember := TeamMember.TeamMember;

      TeamMember.LoginName := UserSetup."User ID";
      TeamMember.UserId := Employee."No.";
      TeamMember.CompanyId := NavCompanyId;
      TeamMember.CompanyName := COMPANYNAME;
      TeamMember.ProjectRole := ProjectResponsiblePerson."Responsibility Description";
      TeamMember.TeamMemberName := Employee."Full Name";
      TeamMember.EmailAddress := Employee."Company E-Mail";
      TeamMember.TelephoneNumber := Employee."Company Phone No.";
      TeamMember.MobilePhoneNumber := Employee."Company Mobile Phone No.";
      TeamMember.InternExtern := InternTxt;

      DebugDotNetTeamMemberProperties(TeamMember);
    END;

    LOCAL PROCEDURE SetTeamMemberProjectAuthority@1100528340(ProjectAuthority@1100528301 : Record 11020216;VAR TeamMember@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT);
    VAR
      Contact@1100528302 : Record 5050;
      DocumentPortalManagement@1100528300 : Codeunit 11012203;
    BEGIN
      IF (ProjectAuthority."Contact Person No." <> '') THEN
        Contact.GET(ProjectAuthority."Contact Person No.")
      ELSE
        Contact.GET(ProjectAuthority."Contact No.");
      ProjectAuthority.CALCFIELDS("Authority Type Description");

      IF (NOT ISNULL(TeamMember)) THEN
        CLEAR(TeamMember);
      TeamMember := TeamMember.TeamMember;

      TeamMember.LoginName := Contact."E-Mail 2";
      TeamMember.UserId := DocumentPortalManagement.GetProjectPortalGuidFromContactNo(Contact."No.");
      TeamMember.CompanyId := DocumentPortalManagement.GetProjectPortalGuidFromContactNo(Contact."Company No.");
      TeamMember.CompanyName := Contact."Company Name";
      TeamMember.ContactNo := Contact."Company No.";
      IF (Contact."Company No." = '') THEN BEGIN
        TeamMember.CompanyId := NavCompanyId;
        TeamMember.CompanyName := COMPANYNAME;
      END;
      TeamMember.ProjectRole := ProjectAuthority."Authority Type Description";
      TeamMember.TeamMemberName := Contact.Name;
      TeamMember.EmailAddress := Contact."E-Mail 2";
      TeamMember.TelephoneNumber := Contact."Phone No. 2";
      TeamMember.MobilePhoneNumber := Contact."Mobile Phone No. 2";
      TeamMember.InternExtern := ExternTxt;

      DebugDotNetTeamMemberProperties(TeamMember);
    END;

    PROCEDURE InsertChangeLog@1100528326(Job@1100525001 : Record 11072003;ActionTxt@1100525002 : Text);
    VAR
      ChangeLogEntryPPT@1100525000 : Record 11229817;
      RecRef@1100525003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Job);

      ChangeLogEntryPPT.INIT;
      ChangeLogEntryPPT.Date := TODAY;
      ChangeLogEntryPPT.Time := TIME;
      ChangeLogEntryPPT."Record ID" := RecRef.RECORDID;
      ChangeLogEntryPPT.Action := COPYSTR(ActionTxt, 1, MAXSTRLEN(ChangeLogEntryPPT.Action));
      ChangeLogEntryPPT."User ID" := USERID;
      ChangeLogEntryPPT.INSERT(TRUE);
    END;

    PROCEDURE SendAuthorityMail@1100525017(LoginName@1100525000 : Text[50];JobNo@1100528300 : Code[20];ContactNo@1100528301 : Code[20]) : Boolean;
    VAR
      Job@1100528302 : Record 11072003;
      ProjectPortalLogin@1100528303 : Record 11229816;
      MailTemplate@1100525001 : Record 11229450;
      DocumentPortalManagement@1100528305 : Codeunit 11012203;
      ProjectPortalAccessEmail@1100525002 : Codeunit 11012204;
    BEGIN
      SharePointSetup4PS.GET;
      Job.GET(JobNo);
      IF (NOT Job."SharePoint Site Generated") OR (Job."SharePoint Site URL" = '') THEN
         EXIT(FALSE);
      IF (ProjectPortalLogin.GET(SharePointSetup4PS."FBA Membership Provider",
        SharePointSetup4PS."FBA Server", SharePointSetup4PS."FBA Database", LoginName))
      THEN
        EXIT(FALSE);
      DocumentPortalManagement.CheckFBASetup;
      CheckAuthorityMail;
      MakeConnection(Job, TRUE);

      UpdateWindow(STRSUBSTNO(Text002, MailTemplate.TABLECAPTION), JobNo, LoginName, '', '', '');
      COMMIT;
      ProjectPortalAccessEmail.SetType(2); //FBA
      ProjectPortalAccessEmail.SetPortalLoginRec(LoginName);
      ProjectPortalAccessEmail.SetEmailToAddress(LoginName);
      IF (NOT ProjectPortalAccessEmail.RUN) THEN
        MESSAGE(Text022, LoginName, GETLASTERRORTEXT);
      EXIT(TRUE);
    END;

    PROCEDURE SendResponsiblePersonMail@1100525021(ProjectResponsiblePerson@1100525000 : Record 11012040) : Boolean;
    VAR
      Job@1100528307 : Record 11072003;
      Employee@1100528306 : Record 5200;
      MailTemplate@1100528303 : Record 11229450;
      ProjectPortalAccessEmail@1100528301 : Codeunit 11012204;
    BEGIN
      SharePointSetup4PS.GET;
      Job.GET(ProjectResponsiblePerson."Project No.");
      IF (NOT Job."SharePoint Site Generated") OR (Job."SharePoint Site URL" = '') THEN
         EXIT(FALSE);
      CheckResponsiblePersonMail;
      IF (NOT Employee.GET(ProjectResponsiblePerson."Employee No.")) THEN
        EXIT(FALSE);

      UpdateWindow(STRSUBSTNO(Text002, MailTemplate.TABLECAPTION), ProjectResponsiblePerson."Project No.", ProjectResponsiblePerson."Employee No.", '', '', '');
      COMMIT;
      ProjectPortalAccessEmail.SetType(1); //AD
      ProjectPortalAccessEmail.SetProjectResponsiblePersonRec(ProjectResponsiblePerson);
      ProjectPortalAccessEmail.SetEmailToAddress(Employee."Company E-Mail");
      IF (NOT ProjectPortalAccessEmail.RUN) THEN
        MESSAGE(Text022, Employee."Full Name", GETLASTERRORTEXT);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SendQuoteRequestMail@1100528359(JobNo@1100528300 : Code[20];ProjectPurchaseAction@1100528302 : Record 11012026;ContactNo@1100528301 : Code[20];LoginName@1100528303 : Text[50]) : Boolean;
    VAR
      MailTemplate@1100528307 : Record 11229450;
      Job@1100528305 : Record 11072003;
      VendorsbyPurchaseAction@1100528306 : Record 11012068;
      ProjectPortalAccessEmail@1100528304 : Codeunit 11012204;
    BEGIN
      SharePointSetup4PS.GET;
      Job.GET(JobNo);
      IF (NOT Job."SharePoint Site Generated") OR (NOT Job."Quote Subsite Generated") OR (Job."SharePoint Site URL" = '') THEN
         EXIT(FALSE);
      CheckQuoteRequestMail;

      UpdateWindow(STRSUBSTNO(Text002, MailTemplate.TABLECAPTION), JobNo, ProjectPurchaseAction.Code, ContactNo, LoginName, '');
      COMMIT;
      ProjectPortalAccessEmail.SetType(3); //QuoteRequest
      ProjectPortalAccessEmail.SetPortalLoginRec(LoginName);
      ProjectPortalAccessEmail.SetProjectPurchaseActionRec(ProjectPurchaseAction."Project No.", ProjectPurchaseAction.Code);
      ProjectPortalAccessEmail.SetEmailToAddress(LoginName);
      IF (NOT ProjectPortalAccessEmail.RUN) THEN
        MESSAGE(Text022, LoginName, GETLASTERRORTEXT);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SendQuoteUpdateMails@1100529900(JobNo@1100528300 : Code[20];PurchaseActionCode@1100528302 : Code[20]);
    VAR
      ProjectPurchaseAction@1100529900 : Record 11012026;
      VendorsbyPurchaseAction@1100529901 : Record 11012068;
      ProjectPortalLogin@1100529902 : Record 11229816;
      Contact@1100529903 : Record 5050;
      Job@1100528305 : Record 11072003;
      DocumentPortalManagement@1100529904 : Codeunit 11012203;
      ProjectPortalAccessEmail@1100528304 : Codeunit 11012204;
      MailBodyNo@1100528301 : Integer;
    BEGIN
      SharePointSetup4PS.GET;
      Job.GET(JobNo);
      IF (NOT Job."SharePoint Site Generated") OR (NOT Job."Quote Subsite Generated") OR (Job."SharePoint Site URL" = '') THEN
         EXIT;
      CheckQuoteUpdateMail;

      VendorsbyPurchaseAction.SETRANGE(Source, VendorsbyPurchaseAction.Source::Project);
      VendorsbyPurchaseAction.SETRANGE("Estimate No.", '');
      VendorsbyPurchaseAction.SETRANGE("Project No.", JobNo);
      VendorsbyPurchaseAction.SETRANGE("Purchase Action", PurchaseActionCode);
      IF (NOT VendorsbyPurchaseAction.FINDSET) THEN
        EXIT;

      REPEAT
        COMMIT;
        DocumentPortalManagement.GetContactFromVendorsByPurchaseAction(VendorsbyPurchaseAction, Contact);
        IF (NOT ProjectPortalLogin.GET(SharePointSetup4PS."FBA Membership Provider", SharePointSetup4PS."FBA Server",
            SharePointSetup4PS."FBA Database", Contact."E-Mail 2"))
        THEN
          ProjectPortalLogin.INIT;

        IF (ProjectPortalLogin."E-Mail Send On" <> 0DT) THEN BEGIN
          UpdateWindow(STRSUBSTNO(Text002, VendorsbyPurchaseAction.TABLECAPTION), JobNo, PurchaseActionCode, Contact."No.",
            ProjectPortalLogin."Login Code", '');

          ProjectPortalAccessEmail.SetType(6); //QuoteUpdate
          ProjectPortalAccessEmail.SetProjectPurchaseActionRec(JobNo, PurchaseActionCode);
          ProjectPortalAccessEmail.SetEmailToAddress(ProjectPortalLogin."Login Code");
          IF (NOT ProjectPortalAccessEmail.RUN) THEN
            MESSAGE(Text022, ProjectPortalLogin."Login Code", GETLASTERRORTEXT);
        END;
      UNTIL (VendorsbyPurchaseAction.NEXT = 0);
    END;

    PROCEDURE ResendQuoteRequestMail@1100525022(VendorsByPurchaseAction@1100525000 : Record 11012068);
    VAR
      Job@1100528301 : Record 11072003;
      Contact@1100528300 : Record 5050;
      ProjectPurchaseAction@1100528303 : Record 11012026;
      DocumentPortalManagement@1100528302 : Codeunit 11012203;
    BEGIN
      VendorsByPurchaseAction.TESTFIELD(Source, VendorsByPurchaseAction.Source::Project);
      Job.GET(VendorsByPurchaseAction."Project No.");
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      Job.TESTFIELD("Quote Subsite Generated", TRUE);

      DocumentPortalManagement.GetContactFromVendorsByPurchaseAction(VendorsByPurchaseAction, Contact);
      ProjectPurchaseAction.GET(VendorsByPurchaseAction."Project No.", VendorsByPurchaseAction."Purchase Action");
      SendQuoteRequestMail(Job."No.", ProjectPurchaseAction, Contact."No.", Contact."E-Mail 2");
    END;

    LOCAL PROCEDURE ThrowError@1100528307(ShowError@1100409000 : Boolean;CallStack@1100528300 : Text);
    BEGIN
      IF (NOT ShowError) THEN
        EXIT;
      CASE ErrorString OF
        '424242', //Site present
        '424243': //Site not present
          EXIT;
        '424244': //Document checked out by someone else
          ErrorString := STRSUBSTNO(Text005)
      END;
      ERROR(Text004, ErrorString, CallStack);
    END;

    LOCAL PROCEDURE UpdateWindow@1100528303(ActionMessage@1100525000 : Text;Message1@1100525001 : Text;Message2@1100525002 : Text;Message3@1100525003 : Text;Message4@1100525004 : Text;Message5@1100525005 : Text);
    BEGIN
      IF (GUIALLOWED) THEN BEGIN
        IF (NOT WindowIsOpen) THEN
          Window.OPEN(Text000);
        Window.UPDATE(1, ActionMessage);
        Window.UPDATE(2, Message1);
        Window.UPDATE(3, Message2);
        Window.UPDATE(4, Message3);
        Window.UPDATE(5, Message4);
        Window.UPDATE(6, Message5);
      END;
      WindowIsOpen := TRUE;
    END;

    LOCAL PROCEDURE IsPurchaseActionDocument@1100528358(DocumentNo@1100528300 : Code[20]) : Boolean;
    VAR
      DocumentLink@1100528301 : Record 11012747;
    BEGIN
      DocumentLink.SETRANGE("Document No.", DocumentNo);
      DocumentLink.SETRANGE("Table No.", DATABASE::"Project Purchase Action");
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      EXIT(DocumentLink.FINDFIRST);
    END;

    LOCAL PROCEDURE IsLastQuoteForThisPurchaseAction@1100528378(PurchaseHeader@1100528300 : Record 38) : Boolean;
    VAR
      PurchaseHeaderRec@1100528301 : Record 38;
    BEGIN
      PurchaseHeaderRec.SETRANGE("Job No.", PurchaseHeader."Job No.");
      PurchaseHeaderRec.SETRANGE("Purchase Action", PurchaseHeader."Purchase Action");
      PurchaseHeaderRec.SETFILTER(Status, '<%1', PurchaseHeader.Status::Closed);
      PurchaseHeaderRec.SETFILTER("Quote Status", '<%1', PurchaseHeaderRec."Quote Status"::Selected);
      EXIT(NOT PurchaseHeaderRec.FINDFIRST);
    END;

    LOCAL PROCEDURE IsLastVendorForThisPurchaseAction@1100528322(VendorsByPurchaseAction@1100528302 : Record 11012068) : Boolean;
    VAR
      VendorsByPurchaseActionRec@1100528301 : Record 11012068;
    BEGIN
      VendorsByPurchaseActionRec.SETRANGE(Source, VendorsByPurchaseAction.Source);
      VendorsByPurchaseActionRec.SETRANGE("Estimate No.", VendorsByPurchaseAction."Estimate No.");
      VendorsByPurchaseActionRec.SETRANGE("Project No.", VendorsByPurchaseAction."Project No.");
      VendorsByPurchaseActionRec.SETRANGE(Type, VendorsByPurchaseAction.Type);
      VendorsByPurchaseActionRec.SETRANGE("Vendor No.", VendorsByPurchaseAction."Vendor No.");
      EXIT(NOT VendorsByPurchaseActionRec.FINDFIRST);
    END;

    LOCAL PROCEDURE DebugDotNetProperties@1100528375(Text1@1100528300 : Text;Text2@1100528301 : Text;Text3@1100528302 : Text;Text4@1100528303 : Text;Text5@1100528304 : Text;Text6@1100528305 : Text;Text7@1100528306 : Text;Text8@1100528309 : Text;Text9@1100528308 : Text;Text10@1100528310 : Text);
    VAR
      DocumentPortalManagement@1100528311 : Codeunit 11012203;
    BEGIN
      IF (NOT Debug) THEN EXIT;
      DocumentPortalManagement.DebugDotNetProperties(Text1, Text2, Text3, Text4, Text5, Text6, Text7, Text8, Text9, Text10)
    END;

    LOCAL PROCEDURE DebugDotNetDocumentProperties@1100528364(Document@1100528301 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT);
    BEGIN
      IF (NOT Debug) THEN EXIT;
      DebugText := STRSUBSTNO('%1: %2', 'Document.CompanyId', Document.CompanyId);
      DebugText := STRSUBSTNO('%1: %2', 'Document.CompanyName', Document.CompanyName);
      DebugText := STRSUBSTNO('%1: %2', 'Document.ContactPersonId', Document.ContactPersonId);
      DebugText := STRSUBSTNO('%1: %2', 'Document.ContactPersonName', Document.ContactPersonName);
      DebugText := STRSUBSTNO('%1: %2', 'Document.Description', Document.Description);
      DebugText := STRSUBSTNO('%1: %2', 'Document.DocumentDate', Document.DocumentDate);
      DebugText := STRSUBSTNO('%1: %2', 'Document.DocumentId', Document.DocumentId);
      DebugText := STRSUBSTNO('%1: %2', 'Document.DocumentNo', Document.DocumentNo);
      DebugText := STRSUBSTNO('%1: %2', 'Document.DocumentStatus', Document.DocumentStatus);
      DebugText := STRSUBSTNO('%1: %2', 'Document.DocumentType', Document.DocumentType);
      DebugText := STRSUBSTNO('%1: %2', 'Document.DocumentVersion', Document.DocumentVersion);
      DebugText := STRSUBSTNO('%1: %2', 'Document.ElementCode', Document.ElementCode);
      DebugText := STRSUBSTNO('%1: %2', 'Document.FileToUpload', Document.FileToUpload);
      DebugText := STRSUBSTNO('%1: %2', 'Document.ModificationDate', Document.ModificationDate);
      DebugText := STRSUBSTNO('%1: %2', 'Document.Name', Document.Name);
      DebugText := STRSUBSTNO('%1: %2', 'Document.RelationId', Document.RelationId);
      DebugText := STRSUBSTNO('%1: %2', 'Document.RelationName', Document.RelationName);
      DebugText := STRSUBSTNO('%1: %2', 'Document.SiteCode', Document.SiteCode);
    END;

    LOCAL PROCEDURE DebugDotNetQuoteDocumenProperties@1100528363(QuoteDocument@1100528300 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.QuoteDocument" RUNONCLIENT);
    BEGIN
      IF (NOT Debug) THEN EXIT;
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.CompanyId', QuoteDocument.CompanyId);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.CompanyName', QuoteDocument.CompanyName);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.ContactPersonId', QuoteDocument.ContactPersonId);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.ContactPersonName', QuoteDocument.ContactPersonName);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.Description', QuoteDocument.Description);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.DocumentId', QuoteDocument.DocumentId);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.DocumentSiteCode', QuoteDocument.DocumentSiteCode);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.DocumentType', QuoteDocument.DocumentType);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.DocumentVersion', QuoteDocument.DocumentVersion);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.FileToUpload', QuoteDocument.FileToUpload);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.FinalDeliveryDate', QuoteDocument.FinalDeliveryDate);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.Name', QuoteDocument.Name);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.QuoteId', QuoteDocument.QuoteId);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.QuoteRequestId', QuoteDocument.QuoteRequestId);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.ReactBefore', QuoteDocument.ReactBefore);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.RelationId', QuoteDocument.RelationId);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.RelationName', QuoteDocument.RelationName);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.Remark', QuoteDocument.Remark);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.RequestedReceiptDate', QuoteDocument.RequestedReceiptDate);
      DebugText := STRSUBSTNO('%1: %2', 'QuoteDocument.SiteCode', QuoteDocument.SiteCode);
    END;

    LOCAL PROCEDURE DebugDotNetRelationProperties@1100528356(Relation@1100528300 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Relation" RUNONCLIENT);
    BEGIN
      //Not used yet
      IF (NOT Debug) THEN EXIT;
      DebugText := Relation.Address;
      DebugText := Relation.Address2;
      DebugText := Relation.City;
      DebugText := Relation.CompanyName;
      DebugText := Relation.Email;
      DebugText := Relation.MobilePhoneNumber;
      DebugText := Relation.Name;
      DebugText := Relation.Number;
      DebugText := Relation.PhoneNumber;
      DebugText := Relation.PostCode;
      DebugText := Relation.Purchaser;
      DebugText := Relation.PurchaserName;
      DebugText := Relation.Salesperson;
      DebugText := Relation.SalespersonName;
      DebugText := Relation.Type;
      DebugText := Relation.VisitAddress;
      DebugText := Relation.VisitAddress2;
      DebugText := Relation.VisitCity;
      DebugText := Relation.VisitPostCode;
    END;

    LOCAL PROCEDURE DebugDotNetTeamMemberProperties@1100528355(TeamMember@1100528300 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.TeamMember" RUNONCLIENT);
    BEGIN
      IF (NOT Debug) THEN EXIT;
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.CompanyId', TeamMember.CompanyId);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.CompanyName', TeamMember.CompanyName);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.ContactNo', TeamMember.ContactNo);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.EmailAddress', TeamMember.EmailAddress);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.InternExtern', TeamMember.InternExtern);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.LoginName', TeamMember.LoginName);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.ProjectRole', TeamMember.ProjectRole);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.TeamMemberName', TeamMember.TeamMemberName);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.TelephoneNumber', TeamMember.TelephoneNumber);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.MobilePhoneNumber', TeamMember.MobilePhoneNumber);
      DebugText := STRSUBSTNO('%1: %2', 'TeamMember.UserId', TeamMember.UserId);
    END;

    LOCAL PROCEDURE "--- Must be removed ---"@1100525000();
    BEGIN
    END;

    LOCAL PROCEDURE MakeRelationWebConnection@1100525007();
    BEGIN
      SharePointSetup4PS.TESTFIELD("Portal URL");
      SharePointSetup4PS.TESTFIELD("Language ID");
      UpdateWindow(STRSUBSTNO(Text003), SharePointSetup4PS."Portal URL", '', '', '', '');

      IF (ISNULL(ProjectSite)) THEN
        ProjectSite := ProjectSite.ProjectSite;
      IF (NOT ProjectSite.LoginProjectSiteCurrentUser(SharePointSetup4PS."Portal URL", ErrorString)) THEN
        ThrowError(TRUE, 'LoginProjectSite');
    END;

    PROCEDURE RelationPickerAddAllContacts@1100525005();
    VAR
      Contact@1100528300 : Record 5050;
      DocumentPortalManagement@1100525000 : Codeunit 11012203;
      Relation@1100528301 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Relation" RUNONCLIENT;
      OptionCaptionArray@1100528302 : ARRAY [10] OF Text[250];
      Counter@1100528303 : Integer;
      TotalRecords@1100528304 : Integer;
      lText025@1100525002 : TextConst 'DEU=Relation Picker aktualisieren;ENU=Update Relation Picker;NLD=Relatiezoeker aanpassen';
      lText028@1100525001 : TextConst 'DEU=Relation Picker lîschen.;ENU=Clear Relation Picker.;NLD=Relatiezoeker opschonen.';
      lText029@1100525003 : TextConst 'DEU=Dies kann einige Minuten in Anspruch nehmen ...;ENU=This can take a few Minutes...;NLD=Dit kan enkele minuten duren...';
    BEGIN
      Contact.CHANGECOMPANY(DocumentPortalManagement.GetCentralCompanyName(TRUE));
      IF (NOT Contact.FINDSET) THEN
        EXIT;
      SharePointSetup4PS.CHANGECOMPANY(DocumentPortalManagement.GetCentralCompanyName(FALSE));
      SharePointSetup4PS.GET;
      SharePointSetup4PS.TESTFIELD("Use Project Portal", TRUE);
      MakeRelationWebConnection;
      SetOptionCaptionStringContactType(OptionCaptionArray);

      UpdateWindow(lText028, '', STRSUBSTNO(lText029), '', '', '');
      IF (NOT ProjectSite.RemoveAllRelations(ErrorString)) THEN
        ThrowError(TRUE, 'RemoveAllRelations');
      UpdateWindow(lText025, Contact.TABLECAPTION, '', '', '', '');
      IF (NOT ProjectSite.ClearRelationsFromList(ErrorString)) THEN
        ThrowError(TRUE, 'ClearRelationsFromList');
      TotalRecords := Contact.COUNT;
      REPEAT
        IF (Counter MOD 10 = 0) THEN BEGIN
          IF (NOT ProjectSite.AddRelations(ErrorString)) THEN
            ThrowError(TRUE, 'AddRelations');
          IF (NOT ProjectSite.ClearRelationsFromList(ErrorString)) THEN
            ThrowError(TRUE, 'ClearRelationsFromList');
        END;
        Counter += 1;
        UpdateWindow(lText025, Contact.TABLECAPTION, Contact."No.", '', FORMAT(Counter), FORMAT(TotalRecords));
        SetRelation(Contact, Relation, OptionCaptionArray);
        IF (NOT ProjectSite.AddRelationToList(Relation, ErrorString)) THEN
          ThrowError(TRUE, 'AddRelationToList');
      UNTIL (Contact.NEXT = 0);

      IF (NOT ProjectSite.AddRelations(ErrorString)) THEN
        ThrowError(TRUE, 'AddRelations');
    END;

    PROCEDURE RelationPickerModifyContact@1100525004(Action@1100528303 : ',Insert,Modify,Remove';Contact@1100528301 : Record 5050);
    VAR
      DocumentPortalManagement@1100525000 : Codeunit 11012203;
      Relation@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Relation" RUNONCLIENT;
      OptionCaptionArray@1100528300 : ARRAY [10] OF Text[250];
      lText025@1100525003 : TextConst 'DEU=Relation Picker aktualisieren;ENU=Update Relation Picker;NLD=Relatiezoeker aanpassen';
    BEGIN
      IF (COMPANYNAME <> DocumentPortalManagement.GetCentralCompanyName(FALSE)) THEN
        EXIT;
      SharePointSetup4PS.GET;
      IF (NOT SharePointSetup4PS."Use Project Portal") THEN
        EXIT;
      MakeRelationWebConnection;
      SetOptionCaptionStringContactType(OptionCaptionArray);
      UpdateWindow(lText025, Contact.TABLECAPTION, Contact."No.", '', '', '');

      CASE Action OF
        Action::Insert: BEGIN
          IF (NOT ProjectSite.ClearRelationsFromList(ErrorString)) THEN
            ThrowError(TRUE, 'ClearRelationsFromList');
          SetRelation(Contact, Relation, OptionCaptionArray);
          IF (NOT ProjectSite.AddRelationToList(Relation, ErrorString)) THEN
            ThrowError(TRUE, 'AddRelationToList');
          IF (NOT ProjectSite.AddRelations(ErrorString)) THEN
            ThrowError(TRUE, 'AddRelations');
        END;
        Action::Modify: BEGIN
          SetRelation(Contact, Relation, OptionCaptionArray);
          IF (NOT ProjectSite.UpdateRelations(Relation, ErrorString)) THEN
            ThrowError(TRUE, 'UpdateRelations');
        END;
        Action::Remove: BEGIN
          IF (NOT ProjectSite.RemoveRelations(Contact."No.", ErrorString)) THEN
            ThrowError(TRUE, 'RemoveRelations');
        END;
      END;
    END;

    LOCAL PROCEDURE SetOptionCaptionStringContactType@1100528366(VAR OptionCaptionArray@1100528300 : ARRAY [10] OF Text[250]);
    VAR
      Contact@1100528306 : Record 5050;
      StringFunctions@1100528305 : Codeunit 11012273;
      RecRef@1100528304 : RecordRef;
      FieldRef@1100528303 : FieldRef;
      SaveLanguageId@1100528302 : Integer;
      I@1100528301 : Integer;
    BEGIN
      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(SharePointSetup4PS."Language ID");
      RecRef.GETTABLE(Contact);
      WHILE (I <= RecRef.FIELDCOUNT) DO BEGIN
        I += 1;
        FieldRef := RecRef.FIELDINDEX(I);
        IF (FieldRef.NUMBER = Contact.FIELDNO(Type))
        THEN BEGIN
          StringFunctions.SplitString(FieldRef.OPTIONCAPTION, ',', OptionCaptionArray);
          I := RecRef.FIELDCOUNT + 1;
        END;
      END;
      GLOBALLANGUAGE(SaveLanguageId);
    END;

    LOCAL PROCEDURE SetRelation@1100525008(Contact@1100528300 : Record 5050;VAR Relation@1100528301 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Relation" RUNONCLIENT;OptionCaptionArray@1100528303 : ARRAY [10] OF Text[250]);
    BEGIN
      Contact.CALCFIELDS("Name Purchaser", "Name Salesperson");
      IF (NOT ISNULL(Relation)) THEN
        CLEAR(Relation);
      Relation := Relation.Relation;

      Relation.Number := Contact."No.";
      Relation.Type := OptionCaptionArray[Contact.Type + 1];
      Relation.CompanyName := Contact."Company Name";
      Relation.Name := Contact.Name;
      Relation.Address := Contact.Address;
      Relation.Address2 := Contact."Address 2";
      Relation.PostCode := Contact."Post Code";
      Relation.City := Contact.City;
      Relation.Email := Contact."E-Mail";
      Relation.PhoneNumber := Contact."Phone No. 2";
      Relation.MobilePhoneNumber := Contact."Mobile Phone No. 2";
      Relation.Salesperson := Contact."Salesperson Code";
      Relation.SalespersonName := Contact."Name Salesperson";
      Relation.Purchaser := Contact."Purchaser Code";
      Relation.PurchaserName := Contact."Name Purchaser";
      Relation.VisitAddress := Contact."Visit Address";
      Relation.VisitAddress2 := Contact."Visit Address 2";
      Relation.VisitPostCode := Contact."Visit Address Post Code";
      Relation.VisitCity := Contact."Visit Address City";
    END;

    LOCAL PROCEDURE FilterURI@1100525044(FilterString@1100525000 : Text) : Text;
    BEGIN
      FilterString := CONVERTSTR(FilterString, ' ', '_');
      EXIT(DELCHR(FilterString, '<=>', '"#%&*:<>?\/{}~|'));
    END;

    LOCAL PROCEDURE SetLogoDocumentTransfer@1100529508();
    VAR
      Job@1100529500 : Record 11072003;
      CompanyInformation@1100529501 : Record 79;
    BEGIN
      ResetVars;
      Job.INIT;
      CompanyInformation.GET;
      SetGlobalVars(Job);
      FullDocumentPortalURL := STRSUBSTNO('%1/%2/%3', SharePointSetup4PS."Portal URL", SharePointSetup4PS."Portal URL Suffix",
        'DocumentTransfer');

      IF (NOT ProjectSite.LoginProjectSite(FullDocumentPortalURL, SharePointSetup4PS."Owner ID",
          SharePointSetup4PS."Owner Password", SharePointSetup4PS."Owner Domain", ErrorString))
      THEN
        ThrowError(TRUE, STRSUBSTNO('LoginProjectSite (Project: %1)', Job."No."));

      UpdateWindow(STRSUBSTNO(Text002, CompanyInformation.TABLECAPTION), CompanyInformation.Name, '', '', '', '');
      IF (NOT ProjectSite.ActivateDeactivateFeature(FALSE, CompanyLogoFeatureGuid, ErrorString)) THEN
        ThrowError(TRUE, 'ActivateDeactivateFeature (DocumentTransferPage: ' + CompanyLogoFeatureGuid);
      IF (NOT ProjectSite.ActivateDeactivateFeature(TRUE, CompanyLogoFeatureGuid, ErrorString)) THEN
        ThrowError(TRUE, 'ActivateDeactivateFeature (DocumentTransferPage: ' + CompanyLogoFeatureGuid);
    END;

    PROCEDURE CopySetupToDual@1100528900();
    VAR
      SharePointSetup4PS@1100528906 : Record 11012730;
      DPTSetup@1100528907 : Record 11229823;
      ProjectPortalSubsite@1100528900 : Record 11229810;
      DPTDefaultSubsite@1100528908 : Record 11229941;
      SubsiteDocTypePPT@1100528901 : Record 11229811;
      DPTDefaultSubsiteDocType@1100528909 : Record 11229942;
      DefaultRespPersPermPPT@1100528902 : Record 11229814;
      DPTDefRespPersPermProject@1100528910 : Record 11072333;
      DefaultAuthorityPermPPT@1100528903 : Record 11229815;
      DPTDefAuthorityPermProject@1100528911 : Record 11072335;
      DPTMetadata@1100528916 : Record 11229825;
      AdditionalDataPPT@1100528904 : Record 11229820;
      DPTAdditionalData@1100528912 : Record 11229827;
      AdditionalDataOptionPPT@1100528905 : Record 11229821;
      DPTAdditionalDataOption@1100528913 : Record 11229828;
      Language@1100528914 : Record 8;
      DefLangCode@1100528915 : Code[10];
    BEGIN
      IF (SharePointSetup4PS.GET) THEN BEGIN
        IF (NOT DPTSetup.GET) THEN BEGIN
          DPTSetup.INIT;
          DPTSetup.INSERT;
        END;
        IF (DPTSetup."Portal URL" = '') THEN BEGIN
          DPTSetup."SharePoint Version" := DPTSetup."SharePoint Version"::"SharePoint 2013";
          DPTSetup."Portal URL" := SharePointSetup4PS."Portal URL";
        END;
        DPTSetup."Header Background Color" := SharePointSetup4PS."Header Background Color";
        DPTSetup."Header Title Color" := SharePointSetup4PS."Header Title Color";
        DPTSetup."Background Color" := SharePointSetup4PS."Background Color";
        DPTSetup."SubSite Background Color" := SharePointSetup4PS."SubSite Background Color";
        DPTSetup."SubSite Letter Color" := SharePointSetup4PS."SubSite Letter Color";
        DPTSetup."Roll Over SubSite Backgr Color" := SharePointSetup4PS."Roll Over SubSite Backgr Color";
        DPTSetup."Roll Over SubSite Letter Color" := SharePointSetup4PS."Roll Over SubSite Letter Color";
        DPTSetup."Selected SubSite Backgr Color" := SharePointSetup4PS."Selected SubSite Backgr Color";
        DPTSetup."Selected SubSite Letter Color" := SharePointSetup4PS."Selected SubSite Letter Color";
        DPTSetup."Web Part Background Color" := SharePointSetup4PS."Web Part Background Color";
        DPTSetup."Web Part Title Color" := SharePointSetup4PS."Web Part Title Color";
        DPTSetup."Library Color" := SharePointSetup4PS."Library Color";
        DPTSetup."Library Title Background Color" := SharePointSetup4PS."Library Title Background Color";
        DPTSetup."Roll Over Library Backgr Color" := SharePointSetup4PS."Roll Over Library Backgr Color";
        DPTSetup."Roll Over Library Title Color" := SharePointSetup4PS."Roll Over Library Title Color";
        DPTSetup."Library Title Letter Color" := SharePointSetup4PS."Library Title Letter Color";
        DPTSetup."Top Bar Background Color" := SharePointSetup4PS."Header Background Color";
        DPTSetup."Top Bar Title Color" := SharePointSetup4PS."Header Title Color";
        DPTSetup."Menu Background Color" := SharePointSetup4PS."SubSite Background Color";
        DPTSetup."Library Background Color" := SharePointSetup4PS."SubSite Background Color";
        DPTSetup.MODIFY;
      END;

      ProjectPortalSubsite.SETRANGE(Type, ProjectPortalSubsite.Type::Project);
      IF (ProjectPortalSubsite.FINDSET) THEN BEGIN
        REPEAT
          DPTDefaultSubsite.INIT;
          DPTDefaultSubsite."Source Type" := DPTDefaultSubsite."Source Type"::Project;
          DPTDefaultSubsite.Code := ProjectPortalSubsite.Code;
          DPTDefaultSubsite.Description := ProjectPortalSubsite.Description;
          DPTDefaultSubsite."Subsite Structure" := DPTDefaultSubsite."Subsite Structure"::OneDocLibrary;
          IF (ProjectPortalSubsite."High Security Subsite") THEN
            DPTDefaultSubsite."Subsite Structure" := DPTDefaultSubsite."Subsite Structure"::PermissionPerDocType;
          DPTDefaultSubsite."Quote Request Subsite" := ProjectPortalSubsite."Quote Request Subsite";
          IF (DPTDefaultSubsite.INSERT) THEN;
        UNTIL (ProjectPortalSubsite.NEXT = 0);
      END;

      SubsiteDocTypePPT.SETRANGE("Subsite Type", SubsiteDocTypePPT."Subsite Type"::Project);
      IF (SubsiteDocTypePPT.FINDSET) THEN BEGIN
        REPEAT
          DPTDefaultSubsiteDocType.INIT;
          DPTDefaultSubsiteDocType."Source Type" := DPTDefaultSubsiteDocType."Source Type"::Project;
          DPTDefaultSubsiteDocType."Subsite Code" := SubsiteDocTypePPT."Project Portal Subsite";
          DPTDefaultSubsiteDocType."Document Type" := SubsiteDocTypePPT."Document Type";
          IF (DPTDefaultSubsiteDocType.INSERT) THEN;
        UNTIL (SubsiteDocTypePPT.NEXT = 0);
      END;


      DefaultRespPersPermPPT.SETRANGE("Subsite Type", DefaultRespPersPermPPT."Subsite Type"::Project);
      IF (DefaultRespPersPermPPT.FINDSET) THEN BEGIN
        REPEAT
          DPTDefRespPersPermProject.INIT;
          DPTDefRespPersPermProject.Type := DefaultRespPersPermPPT.Type;
          DPTDefRespPersPermProject.Responsibility := DefaultRespPersPermPPT.Responsibility;
          DPTDefRespPersPermProject."Subsite Code" := DefaultRespPersPermPPT."Project Portal Subsite";
          DPTDefRespPersPermProject."Document Type" := DefaultRespPersPermPPT."Document Type";
          DPTDefRespPersPermProject."Permission Level" := DefaultRespPersPermPPT."Permission Level";
          DPTDefRespPersPermProject."Show in View OLD" := DefaultRespPersPermPPT."Show in View";
          IF (DPTDefRespPersPermProject.INSERT) THEN;
        UNTIL (DefaultRespPersPermPPT.NEXT = 0);
      END;

      DefaultAuthorityPermPPT.SETRANGE("Subsite Type", DefaultAuthorityPermPPT."Subsite Type"::Project);
      IF (DefaultAuthorityPermPPT.FINDSET) THEN BEGIN
        REPEAT
          DPTDefAuthorityPermProject.INIT;
          DPTDefAuthorityPermProject.Type := DefaultAuthorityPermPPT.Type;
          DPTDefAuthorityPermProject."Authority Type" := DefaultAuthorityPermPPT."Authority Type";
          DPTDefAuthorityPermProject."Subsite Code" := DefaultAuthorityPermPPT."Project Portal Subsite";
          DPTDefAuthorityPermProject."Document Type" := DefaultAuthorityPermPPT."Document Type";
          DPTDefAuthorityPermProject."Permission Level" := DefaultAuthorityPermPPT."Permission Level";
          DPTDefAuthorityPermProject."Show in View OLD" := DefaultAuthorityPermPPT."Show in View";
          IF (DPTDefAuthorityPermProject.INSERT) THEN;
        UNTIL (DefaultAuthorityPermPPT.NEXT = 0);
      END;

      AdditionalDataPPT.SETRANGE("Subsite Type", AdditionalDataPPT."Subsite Type"::Project);
      IF (AdditionalDataPPT.FINDSET) THEN BEGIN
        REPEAT
          DPTAdditionalData.INIT;
          DPTAdditionalData."Source Type" := DPTAdditionalData."Source Type"::Project;
          DPTAdditionalData.Code := AdditionalDataPPT.Code;
          DPTAdditionalData.Description := AdditionalDataPPT.Description;
          DPTAdditionalData.Type := AdditionalDataPPT.Type + 1;
          DPTAdditionalData."Minimum Value" := AdditionalDataPPT."Minimum Value";
          DPTAdditionalData."Maximum Value" := AdditionalDataPPT."Maximum Value";
          DPTAdditionalData."DateTime Format" := AdditionalDataPPT."DateTime Format";
          IF (DPTAdditionalData.INSERT) THEN;
        UNTIL (AdditionalDataPPT.NEXT = 0);
      END;

      DPTMetadata.CreateStandardCodes(1); //Project

      Language.SETRANGE("Windows Language ID", GLOBALLANGUAGE);
      DefLangCode := 'NLD';
      IF (Language.FINDFIRST) THEN
        DefLangCode := Language.Code;

      AdditionalDataOptionPPT.SETRANGE("Subsite Type", AdditionalDataOptionPPT."Subsite Type"::Project);
      IF (AdditionalDataOptionPPT.FINDSET) THEN BEGIN
        REPEAT
          DPTAdditionalDataOption.INIT;
          DPTAdditionalDataOption."Source Type" := DPTAdditionalDataOption."Source Type"::Project;
          DPTAdditionalDataOption."Additional Data Code" := AdditionalDataOptionPPT."Additional Data Code";
          DPTAdditionalDataOption."Language Code" := DefLangCode;
          Language.SETRANGE("Windows Language ID", AdditionalDataOptionPPT."Language Id");
          IF (Language.FINDFIRST) THEN
            DPTAdditionalDataOption."Language Code" := Language.Code;
          DPTAdditionalDataOption.Option := AdditionalDataOptionPPT.Option;
          IF (DPTAdditionalDataOption.INSERT) THEN;
        UNTIL (AdditionalDataOptionPPT.NEXT = 0);
      END;
      MESSAGE(Text999);
    END;

    PROCEDURE DownloadDocumentAsAdmin@1100525027(VAR Job@1100525001 : Record 11072003;VAR DocumentProperties@1100525000 : Record 11012746) ServerFileName : Text;
    VAR
      Document@1100525002 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT;
      ErrorMessage@1100525003 : Text;
      FileManagement@1100525004 : Codeunit 419;
    BEGIN
      ServerFileName := FileManagement.ServerTempFileName(FileManagement.GetExtension(DocumentProperties.GetStorageURI));
      MakeConnectionAsAdmin(Job, TRUE, TRUE);
      ProjectSite.DownloadDocument(DocumentProperties."Project Portal Subsite",DocumentProperties.GetStorageURI,ServerFileName, TRUE ,ErrorMessage);
    END;

    PROCEDURE DownloadDPTDocumentStreamed@1100525028(SiteURL@1100525004 : Text;DocumentURL@1100525003 : Text;VAR Base64@1100525000 : BigText;VAR ErrorMessage@1100525009 : Text) Result : Boolean;
    VAR
      NewStream@1100525002 : OutStream;
      Temp@1100525005 : Byte;
      Bytes@1100525007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1100525006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1100525008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      ProjectSiteServer@1100525010 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite";
    BEGIN
      ProjectSiteServer := ProjectSiteServer.ProjectSite;
      Result := GetProjectSiteAsAdmin(SiteURL,ProjectSiteServer);
      IF Result THEN BEGIN
        Result :=  ProjectSiteServer.DownloadDocumentStream(DocumentURL, MemoryStream, ErrorMessage);
        IF Result THEN BEGIN
          Bytes := MemoryStream.GetBuffer();
          Base64.ADDTEXT(Convert.ToBase64String(Bytes));
          MemoryStream.Dispose();
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetProjectSiteAsAdmin@1100525033(SiteURL@1100525000 : Text;VAR ProjectSiteLocal@1100525001 : DotNet "'FPS.Microsoft.SharePoint.Client'.FPS.Microsoft.SharePoint.Client.ProjectSite") Result : Boolean;
    VAR
      ErrorMessage@1100525002 : Text;
      SharePointSetup4PS@1100525003 : Record 11012730;
    BEGIN
      SharePointSetup4PS.GET;
      Result := ProjectSiteLocal.LoginProjectSite(SiteURL,  SharePointSetup4PS."Owner ID",
                                                          SharePointSetup4PS."Owner Password",
                                                          SharePointSetup4PS."Owner Domain",
                                                          ErrorString);
    END;

    PROCEDURE UploadDPTDocumentStreamed@1100525029(SharepointSiteURL@1100525005 : Text;DocumentProperties@1100525004 : Record 11012746;Document@1100525008 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document";VAR Base64@1100525001 : BigText;VAR ErrorMessage@1100525000 : Text) Result : Boolean;
    VAR
      Bytes@1100525007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1100525006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      ProjectSiteServer@1100525002 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite";
    BEGIN

      ProjectSiteServer := ProjectSiteServer.ProjectSite;
      Result := GetProjectSiteAsAdmin(SharepointSiteURL,ProjectSiteServer);

      IF Result THEN BEGIN
          Bytes := Convert.FromBase64String(Base64);
          MemoryStream  := MemoryStream.MemoryStream;
          MemoryStream.Write(Bytes,0,Bytes.Length);
          Result:= ProjectSiteServer.UploadDocumentStream(DocumentProperties."Project Portal Subsite",Document,MemoryStream,ErrorMessage);
          MemoryStream.Dispose();
      END;
    END;

    PROCEDURE RemoveDocumentServerSide@1100525031(Job@1100525001 : Record 11072003;DocumentProperties@1100525000 : Record 11012746) Result : Boolean;
    VAR
      DocumentPortalManagement@1100525003 : Codeunit 11012203;
      Document@1100525002 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document";
      ProjectSiteServer@1100525004 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite";
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) OR
         (DocumentProperties."Internal Company" <> COMPANYNAME) OR
         (DocumentProperties."Web link" = '')
      THEN
        EXIT;


      ProjectSiteServer := ProjectSiteServer.ProjectSite;
      Result := GetProjectSiteAsAdmin(Job."SharePoint Site URL",ProjectSiteServer);

      IF Result THEN
      BEGIN
        DocumentPortalManagement.SetDocumentPropertiesServerSide(DocumentProperties, Document);
        DebugDotNetDocumentProperties(Document);
        DebugDotNetProperties('RemoveDocument', DocumentProperties."Project Portal Subsite", FORMAT(Document), '', '', '', '', '', '', '');
        IF (ProjectSiteServer.RemoveDocument(DocumentProperties."Project Portal Subsite", Document, ErrorString)) THEN
          Result := TRUE;
      END;
    END;

    PROCEDURE AddPlots@1100525032(Job@1100525000 : Record 11072003);
    VAR
      Plot@1100525001 : Record 11012500;
      ProjectPortalSubsite@1100525002 : Record 11229810;
    BEGIN
      IF  (NOT Job.IsJobInProjectPortal) OR
          (NOT Job."Housebuilding Project") THEN
      EXIT;

      MakeConnectionAsAdmin(Job, TRUE,TRUE);
      Plot.SETFILTER("Project No.",Job."No.");
      ProjectSite.ClearPlotNoList(ErrorString);

      IF Plot.FIND('-') THEN
      BEGIN
        REPEAT
          ProjectSite.AddPlotNoToList(Plot."Plot No.",ErrorString);
        UNTIL Plot.NEXT = 0;
      END;

      IF ProjectPortalSubsite.FIND('-') THEN
      BEGIN
        REPEAT
          UpdateWindow(STRSUBSTNO(Text002, Plot.TABLECAPTION), Job."No.", '', '', '', '');
          ProjectSite.SetPlotNo(ProjectPortalSubsite.Code,ErrorString);
        UNTIL ProjectPortalSubsite.NEXT = 0
      END;
    END;

    LOCAL PROCEDURE CheckModifiedLinkedPlots@1100528502(Rec@1100525005 : Record 11012747);
    VAR
      DocumentLink@1100525004 : Record 11012747;
      RecRef@1100525003 : RecordRef;
      DocumentProperties@1100525002 : Record 11012746;
      Job@1100525001 : Record 11072003;
      DocumentPortalProject@1100525000 : Codeunit 11012948;
    BEGIN
      CASE Rec."Table No." OF
        DATABASE::Plot: BEGIN
          DocumentLink.SETRANGE("Document No.", Rec."Document No.");
          DocumentLink.SETRANGE("Table No.", DATABASE::Job);
          DocumentProperties.GET(Rec."Document No.");
          IF (DocumentLink.FINDFIRST) THEN BEGIN
            RecRef.GET(DocumentLink."Record ID");
            RecRef.SETTABLE(Job);
            IF (Job.IsJobInProjectPortal) AND (DocumentProperties.HasStorageURI)
            THEN
              DocumentPortalProject.ModifyDocument(Job, DocumentProperties, TRUE);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE QuoteRequestDocument@1100528501(DocumentProperties@1100525000 : Record 11012746) : Boolean;
    VAR
      DocumentLink@1100525001 : Record 11012747;
    BEGIN
      DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      DocumentLink.SETRANGE("Table No.", DATABASE::Vendor);
      EXIT(DocumentLink.ISEMPTY);
    END;

    LOCAL PROCEDURE UpdateProjectStatus@1100528504(Job@1100528500 : Record 11072003);
    BEGIN
      IF (NOT Job.IsJobInProjectPortal) THEN
        EXIT;
      ResetVars;
      MakeConnectionAsAdmin(Job, TRUE, FALSE);
      UpdateWindow(STRSUBSTNO(Text002, Job.TABLECAPTION), Job."No.", '', '', '', '');

      IF (NOT ProjectSite.UpdateSiteStatus(FORMAT(Job."Project Status"), ErrorString)) THEN
        ThrowError(TRUE, 'UpdateSiteStatus');
    END;

    LOCAL PROCEDURE "---Event Subscribers---"@1100528500();
    BEGIN
    END;

    [EventSubscriber(Table,11012747,OnAfterInsertEvent,"",Skip)]
    LOCAL PROCEDURE DocumentLinkOnAfterInsert@1100525034(VAR Rec@1100525000 : Record 11012747;RunTrigger@1100525001 : Boolean);
    BEGIN
      IF (RunTrigger) THEN
        CheckModifiedLinkedPlots(Rec);
    END;

    [EventSubscriber(Table,11012747,OnAfterDeleteEvent,"",Skip)]
    LOCAL PROCEDURE DocumentLinkOnAfterDelete@1100525038(VAR Rec@1100525000 : Record 11012747;RunTrigger@1100525001 : Boolean);
    BEGIN
      IF (RunTrigger) THEN
        CheckModifiedLinkedPlots(Rec);
    END;

    [EventSubscriber(Table,11072003,OnAfterModifyEvent,"",Skip)]
    LOCAL PROCEDURE JobOnAfterModify@1100528503(VAR Rec@1100528500 : Record 11072003;VAR xRec@1100528501 : Record 11072003;RunTrigger@1100528502 : Boolean);
    BEGIN
      IF (NOT RunTrigger) THEN
        EXIT;
      IF (Rec."Project Status" <> xRec."Project Status") THEN
        UpdateProjectStatus(Rec);
    END;

    BEGIN
    END.
  }
}

