OBJECT Codeunit 12057128 ExFlow Assisted Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CodingRuleName0@1100285006 : TextConst 'ENU=Default Validation;SVE=Standard Validering';
      CodingRuleName1@1100285005 : TextConst 'ENU=Default Filter;SVE=Standard Filter';
      CodingRuleName2@1100285004 : TextConst 'ENU=Default Subset;SVE=Standard AnvÑndare';
      CodingRuleName3@1100285003 : TextConst 'ENU=Default Deny;SVE=Standard Nekande';
      TXT002@1100285002 : TextConst 'ENU=Inbox reminders;SVE=Inkorg pÜminnelser';
      TXT003@1100285001 : TextConst 'ENU=SSO Login;SVE=SSO Login';
      TXT004@1100285008 : TextConst 'ENU=ExFlow Web Login Ticket;SVE=ExFlow Web Login Ticket';
      EXUserCompany@1100285009 : Record 12013641;
      TXT005@1100285000 : TextConst 'ENU=EXFLOW;SVE=EXFLOW';
      TXT006@1100285007 : TextConst 'ENU=Ex Create Requisition NAS;SVE=Ex Create Requisition NAS';

    PROCEDURE ApplyUserSelection@1100285012(VAR ExFlowSetupWizard@1100285000 : Record 12057114);
    VAR
      ExColumn@1100285002 : Record 12013661;
      CreateColumns@1100285003 : Boolean;
      ExFlowSetup@1100285004 : Record 12013601;
      WebCompID@1100285005 : Record 12013630;
      ExRapidMgt@1100285006 : Codeunit 12057130;
    BEGIN
      //Only executed if default company setup was selected
      IF  ExFlowSetupWizard."Type of Setup" = ExFlowSetupWizard."Type of Setup"::Default THEN BEGIN
        IF ExFlowSetupWizard."Create as default Company" THEN
          CreateDefaultCompany;

        IF ExFlowSetupWizard."Create ExFlow WEB Service" THEN
          CreateExFlowWebService;

        IF ExFlowSetupWizard."Create ExFlow Job Queue" THEN
          CreateDefaultJobQueSetup;

        IF ExFlowSetupWizard."ExF Web User Level Permissions" THEN
          ExFlowWebUserLevelPermissions;

        IF ExFlowSetupWizard."ExFlow Permission Roles" THEN
          ExFlowPermissionRoles;

        //Step Add Ins
        IF ExFlowSetupWizard."Initialize all Add Ins" THEN
          InitExFlowAddins(ExFlowSetupWizard);

        IF ExFlowSetupWizard."Create Default Email Job" THEN
          CreateDefaulEmailJobs(ExFlowSetupWizard."Email Subject",ExFlowSetupWizard."Sender Name",ExFlowSetupWizard."Sender Email",ExFlowSetupWizard."ExFlow Web URL",ExFlowSetupWizard);
      END ELSE BEGIN
        IF ExFlowSetupWizard."Activate Web" THEN
          WebCompID.WebEnable(COMPANYNAME,FALSE)
        ELSE
          WebCompID.WebDisable(COMPANYNAME,FALSE);
      END;

      //Add Always if doesnt exist
      CreateLineTypes;
      CreateVendorIDFields;
      CreateExFlowSetup(ExFlowSetupWizard);
      CreateUserRoleCentarProfile;

      ExFlowSetup.GET;
      IF ExFlowSetupWizard."File storage type" = ExFlowSetupWizard."File storage type"::"Database " THEN
        ExFlowSetup."File storage type" := ExFlowSetup."File storage type"::Database
      ELSE
        ExFlowSetup."File storage type" := ExFlowSetup."File storage type"::Filesystem;

      ExFlowSetup."Predefined Account" := ExFlowSetupWizard."Predefined account";
      ExFlowSetup.MODIFY;

      //Company specific setup
      IF ExFlowSetupWizard."Create Default Root Folder" THEN
        CreateRootFolderAndSubFolders(ExFlowSetupWizard."Path To New invoices",
        ExFlowSetupWizard."Path To Processed Invoices",
        ExFlowSetupWizard."Path To New OCR",
        ExFlowSetupWizard."Path to Deleted Documents",
        ExFlowSetupWizard."Main Folder Path");

      CreateColumns := ExColumn.ISEMPTY;

      IF CreateColumns THEN
        CreateExLineColumns(ExFlowSetupWizard);

      IF CreateColumns THEN
        CreateExDimJobAndDeferralColumns(ExFlowSetupWizard);

      CreateCodingRules;

      IF ExFlowSetupWizard."Apply Package" THEN
        ExRapidMgt.ApplyExFlowUserPackage(CodingRuleName2);

      AssignDefaultUserCodingRule;

      //RSO Setup
      IF ExFlowSetupWizard."RSO Setup" THEN
        RSOSetup(ExFlowSetupWizard."Readsoft Online integration",
                 ExFlowSetupWizard."RO Connect User",
                 ExFlowSetupWizard."RO Connect Password",
                 ExFlowSetupWizard."RO Buyer Name",
                 ExFlowSetupWizard."Upload vendors to RO",
                 ExFlowSetupWizard."Upload references to RO",
                 ExFlowSetupWizard."Customized RO ApiKey");

      //PO and Requisition setup
      IF ExFlowSetupWizard."Purchase Order Matching" THEN
        POMatchingSettings(ExFlowSetupWizard."Allowed Price Diff (%)",ExFlowSetupWizard."Allowed Price Diff (LCY)");

      IF ExFlowSetupWizard."Purchase Order Approval" THEN
        POApprovalSettings;

      IF ExFlowSetupWizard."Use Requisition" THEN
        UseRequisitionSettings;

      IF ExFlowSetupWizard."Purchase Order Approval"= TRUE THEN
        POApprovalSettings;
    END;

    PROCEDURE CreateDefaultCompany@1100285010() : Boolean;
    VAR
      WebCompanyID@1100285000 : Record 12013630;
    BEGIN
      WebCompanyID.MODIFYALL("Default Company",FALSE);
      IF NOT WebCompanyID.GET(COMPANYNAME) THEN BEGIN
        WebCompanyID.INIT;
        WebCompanyID."Company Name":=COMPANYNAME;
        WebCompanyID."Web enabled":=TRUE;
        WebCompanyID."Default Company":= TRUE;
        WebCompanyID.INSERT(TRUE);
      END ELSE BEGIN
        WebCompanyID."Web enabled":=TRUE;
        WebCompanyID."Default Company":= TRUE;
        WebCompanyID.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateExFlowWebService@1100285003();
    VAR
      WebServiceManagement@1100285000 : Codeunit 9750;
    BEGIN
      WebServiceManagement.CreateWebService(5,CODEUNIT::"ExFlow Web Service Request Mgt" ,'EXFWEB',TRUE);
      WebServiceManagement.CreateWebService(9,QUERY::"Exf PBI Pending Invoices" ,'ExFlow PBI Pending Invoices',TRUE);
    END;

    PROCEDURE CreateDefaultJobQueSetup@1100285009();
    VAR
      JobQueueEntry@1100285001 : Record 472;
      TXT001@1100285002 : TextConst 'ENU=EXFLOW;SVE=EXFLOW';
      TXT002@1100285003 : TextConst 'ENU=ExFlow Automation;SVE=ExFlow Automatisering';
      TXT003@1100285004 : TextConst 'ENU=ExFlow Email NAS;SVE=ExFlow Email NAS';
      TXT004@1100285005 : TextConst 'ENU=INBOX REMINDER;SVE=INKORG PèMINNELSE';
    BEGIN
      InsertRec(TXT001,TXT002);

      JobQueueEntry.RESET;
      JobQueueEntry.SETRANGE(Description,TXT003);
      IF JobQueueEntry.FINDFIRST THEN
         EXIT;

      JobQueueEntry.INIT;
      JobQueueEntry.INSERT(TRUE);
      JobQueueEntry.VALIDATE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.VALIDATE("Object ID to Run",CODEUNIT::"ExFlow Email NAS");
      JobQueueEntry.VALIDATE(Description,TXT003);
      JobQueueEntry.VALIDATE("Maximum No. of Attempts to Run",10);
      JobQueueEntry.VALIDATE("Parameter String",TXT004);
      JobQueueEntry.VALIDATE("Job Queue Category Code",TXT001);
      JobQueueEntry.VALIDATE("Earliest Start Date/Time",CURRENTDATETIME);
      JobQueueEntry.VALIDATE(Status,JobQueueEntry.Status::Ready);
      JobQueueEntry.VALIDATE("Recurring Job",TRUE);
      JobQueueEntry.VALIDATE("Run on Mondays",TRUE);
      JobQueueEntry.VALIDATE("Run on Tuesdays" ,TRUE);
      JobQueueEntry.VALIDATE("Run on Wednesdays" , TRUE);
      JobQueueEntry.VALIDATE("Run on Thursdays",TRUE);
      JobQueueEntry.VALIDATE("Run on Fridays",TRUE);
      JobQueueEntry.VALIDATE("Run on Saturdays",FALSE);
      JobQueueEntry.VALIDATE("Run on Sundays",FALSE);
      JobQueueEntry.VALIDATE("Starting Time",080000T);
      JobQueueEntry.VALIDATE("Ending Time",083000T);
      JobQueueEntry.VALIDATE("No. of Minutes between Runs",0);
      JobQueueEntry.MODIFY(TRUE);
    END;

    PROCEDURE ExFlowWebUserLevelPermissions@1100285014();
    VAR
      EXUserLevelPermission@1100285000 : Record 12013644;
    BEGIN
      WITH EXUserLevelPermission DO BEGIN
        // User
        InsertExUserLevelPerm("User Level"::User,'up_allow_set_replacer');
        InsertExUserLevelPerm("User Level"::User,'up_create_purchaserequest');
        InsertExUserLevelPerm("User Level"::User,'up_deny_forward');
        InsertExUserLevelPerm("User Level"::User,'up_deny_templates');

        // Power User
        InsertExUserLevelPerm("User Level"::"Power User",'up_allow_edit');
        InsertExUserLevelPerm("User Level"::"Power User",'up_allow_split');
        InsertExUserLevelPerm("User Level"::"Power User",'up_allow_add_approver');
        InsertExUserLevelPerm("User Level"::"Power User",'up_allow_set_replacer');
        InsertExUserLevelPerm("User Level"::"Power User",'up_create_purchaserequest');

        // Super User
        InsertExUserLevelPerm("User Level"::"Super User",'up_allow_edit');
        InsertExUserLevelPerm("User Level"::"Super User",'up_allow_split');
        InsertExUserLevelPerm("User Level"::"Super User",'up_allow_view_all');
        InsertExUserLevelPerm("User Level"::"Super User",'up_allow_public_templates');
        InsertExUserLevelPerm("User Level"::"Super User",'up_allow_add_approver');
        InsertExUserLevelPerm("User Level"::"Super User",'up_allow_set_replacer');
        InsertExUserLevelPerm("User Level"::"Super User",'up_create_purchaserequest');

        // Admin
        InsertExUserLevelPerm("User Level"::Admin,'up_allow_edit');
        InsertExUserLevelPerm("User Level"::Admin,'up_allow_split');
        InsertExUserLevelPerm("User Level"::Admin,'up_allow_view_all');
        InsertExUserLevelPerm("User Level"::Admin,'up_allow_public_templates');
        InsertExUserLevelPerm("User Level"::Admin,'up_allow_add_approver');
        InsertExUserLevelPerm("User Level"::Admin,'up_allow_set_replacer');
        InsertExUserLevelPerm("User Level"::Admin,'up_create_purchaserequest');
        InsertExUserLevelPerm("User Level"::Admin,'up_webadmin');
      END;
    END;

    LOCAL PROCEDURE InsertExUserLevelPerm@1100285019(Level@1100285000 : 'Super User,Power User,User,Admin';Perm@1100285001 : Text);
    VAR
      ExUserLevelPerm@1100285002 : Record 12013644;
    BEGIN
      ExUserLevelPerm.INIT;
      ExUserLevelPerm."User Level" := Level;
      ExUserLevelPerm.Permission := Perm;
      IF ExUserLevelPerm.INSERT THEN;
    END;

    PROCEDURE ExFlowPermissionRoles@1100285015();
    VAR
      UserRole@1100285002 : Record 2000000004;
      Object@1100285001 : Record 2000000001;
    BEGIN
      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-SUPER';
      UserRole.Name := 'Full access';
      IF UserRole.INSERT THEN;

      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-POWER';
      UserRole.Name := 'Some Setup (templ/user)';
      IF UserRole.INSERT THEN;

      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-USER';
      UserRole.Name := 'Import/Create/Change Documents';
      IF UserRole.INSERT THEN;

      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-WEB';
      UserRole.Name := 'Web service access';
      IF UserRole.INSERT THEN;

      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-GLOBAL';
      UserRole.Name := 'Access to global ExFlow tables';
      IF UserRole.INSERT THEN;

      Object.RESET;
      Object.SETRANGE(Type, Object.Type::TableData);
      Object.SETFILTER(ID, '%1..%2|%3..%4', 12013587, 12013686, 12057070, 12057169);
      IF Object.FINDSET THEN
        REPEAT
          CreatePermissionEntry('EXFLOW-SUPER',Object.ID,1,1,1);
          CreatePermissionEntry('EXFLOW-POWER',Object.ID,1,1,1);
          CreatePermissionEntry('EXFLOW-USER',Object.ID,1,1,1);
          CreatePermissionEntry('EXFLOW-WEB',Object.ID,1,1,1); //new
        UNTIL Object.NEXT = 0;

      //EXFLOW-SUPER is granted by the loop above

      //EXFLOW-GLOBAL
      CreatePermissionEntry('EXFLOW-GLOBAL',12013591,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013630,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013631,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013640,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013642,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013644,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013648,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013649,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013684,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013685,1,1,1);
      CreatePermissionEntry('EXFLOW-GLOBAL',12013601,0,0,0);
      CreatePermissionEntry('EXFLOW-GLOBAL',12057071,1,1,1); //swebase

      //EXFLOW-USER
      CreatePermissionEntry('EXFLOW-USER',12013597,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013598,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013600,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013601,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013602,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013613,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013616,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013619,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013620,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013621,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013633,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013634,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013644,0,0,0); //global
      CreatePermissionEntry('EXFLOW-USER',12013669,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013672,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013684,2,2,2); //global

      //EXFLOW-POWER
      CreatePermissionEntry('EXFLOW-POWER',12013597,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013600,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013613,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013616,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013619,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013620,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013621,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013634,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013672,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013684,2,2,2); //global

      //EXFLOW-WEB
      //Standard Range
      CreatePermissionEntry('EXFLOW-WEB',4,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',14,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',15,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',18,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',23,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',25,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',27,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',38,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',39,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',79,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',98,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',140,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',167,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',204,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',230,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',242,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',265,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',312,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',324,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',348,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',349,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',350,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',352,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',360,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',367,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',368,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',369,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',380,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',388,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',402,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',403,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',404,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',405,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',409,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',481,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',480,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',1001,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',1002,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',1261,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',1700,0,0,0); // 2016+
      CreatePermissionEntry('EXFLOW-WEB',5079,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5600,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5800,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5900,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5901,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',2000000006,0,0,0);
      // Inward Reg
      IF Object.GET(Object.Type::TableData,11205) THEN
        CreatePermissionEntry('EXFLOW-WEB',11205,0,0,0); // 2015-

      AddDefaultObjectTypes('EXFLOW-WEB');
    END;

    PROCEDURE CreatePermissionEntry@1100285023(_RoleID@1100285005 : Code[20];_ID@1100285004 : Integer;_Insert@1100285003 : Integer;_Modify@1100285002 : Integer;_Delete@1100285001 : Integer);
    VAR
      Permission@1100285000 : Record 2000000005;
      Object@1100285006 : Record 2000000001;
    BEGIN
      IF NOT Object.GET(Object.Type::Table,'',_ID) THEN
        EXIT;

      IF Permission.GET(_RoleID,Permission."Object Type"::"Table Data",_ID) THEN BEGIN
        Permission."Read Permission" := 1; // Yes
        Permission."Insert Permission" := _Insert;
        Permission."Modify Permission" := _Modify;
        Permission."Delete Permission" := _Delete;
        Permission.MODIFY;
      END
      ELSE BEGIN
        Permission.INIT;
        Permission."Role ID" := _RoleID;
        Permission."Object Type" := Permission."Object Type"::"Table Data";
        Permission."Object ID" := _ID;
        Permission."Read Permission" := 1; // Yes
        Permission."Insert Permission" := _Insert;
        Permission."Modify Permission" := _Modify;
        Permission."Delete Permission" := _Delete;
        Permission.INSERT;
      END;
    END;

    LOCAL PROCEDURE AddDefaultObjectTypes@1(_RoleID@1000 : Code[20]);
    VAR
      Permission@1001 : Record 2000000005;
    BEGIN
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Table;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Query;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Codeunit;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Report;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::XMLport;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
    END;

    PROCEDURE CreateExLineColumns@1100285041(VAR TempExFlowSetupWizard@1100285005 : TEMPORARY Record 12057114);
    VAR
      ExColumn@1100285000 : Record 12013661;
      NextID@1100285001 : Integer;
      DividerChar@1100285004 : Char;
    BEGIN
      WITH TempExFlowSetupWizard DO BEGIN
        DividerChar := 8212;

        ExColumn.RESET;
        IF ExColumn.FINDLAST THEN
          NextID := ExColumn.ID + 1
        ELSE
          NextID := 1;

        IF "Line Type G/L Account" THEN
          CreateLineColumn(NextID,'G_LACCOUNT','G_LACCOUNT','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=1','',
                       FALSE,TRUE,'',0);
        IF "Line Type Item" THEN
          CreateLineColumn(NextID,'ITEM','ITEM','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=2','',
                       FALSE,TRUE,'',0);
        IF "Line Type Fixed Asset" THEN
          CreateLineColumn(NextID,'FIXEDASSET','FIXEDASSET','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=4','',
                       FALSE,TRUE,'',0);
        IF "Line Type Item Charge" THEN
          CreateLineColumn(NextID,'CHARGE','CHARGE','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=5','',
                       FALSE,TRUE,'',0);
      END;
    END;

    LOCAL PROCEDURE CreateLineColumn@1100285042(VAR NextID@1100285000 : Integer;Code@1100285002 : Text[50];Source@1100285003 : Text[50];Format@1100285004 : Text[250];LineDispExpr@1100285008 : Text[250];DataType@1100285009 : Text[30];IsFreeText@1100285010 : Boolean;UseAutoComp@1100285005 : Boolean;DimCode@1100285011 : Code[20];SortOrder@1100285006 : Integer);
    VAR
      ExColumn@1100285007 : Record 12013661;
    BEGIN
      ExColumn.INIT;
      ExColumn.ID := NextID;
      NextID := NextID + 1;

      ExColumn.Code := Code;
      ExColumn.Source := Source;
      ExColumn.Format := Format;
      ExColumn."Line Display Expr" := LineDispExpr;
      ExColumn."Use Auto Completion" := UseAutoComp;
      ExColumn."Sort Order" := SortOrder;
      ExColumn."Data Type" := DataType;
      ExColumn."Is Free Text" := IsFreeText;
      ExColumn."Dimension Code" := DimCode;
      ExColumn.INSERT;
    END;

    PROCEDURE CreateLineTypes@1100285040();
    VAR
      ExLineType@1100285000 : Record 12013642;
    BEGIN
      ExLineType.RESET;
      IF NOT ExLineType.ISEMPTY THEN
        EXIT;

      ExLineType.INIT;
      ExLineType.Code := 1;
      ExLineType."Line Type" := 'G_LACCOUNT';
      ExLineType."Document Display Expr" := 'TRUE';
      ExLineType."Line Display Expr" := 'Linetype>0';
      ExLineType.Value := 1;
      ExLineType.INSERT;

      ExLineType.INIT;
      ExLineType.Code := 2;
      ExLineType."Line Type" := 'ITEM';
      ExLineType."Document Display Expr" := 'TRUE';
      ExLineType.Value := 2;
      ExLineType.INSERT;

      ExLineType.INIT;
      ExLineType.Code := 4;
      ExLineType."Line Type" := 'FIXEDASSET';
      ExLineType."Document Display Expr" := 'TRUE';
      ExLineType.Value := 4;
      ExLineType.INSERT;

      ExLineType.INIT;
      ExLineType.Code := 5;
      ExLineType."Line Type" := 'CHARGE';
      ExLineType."Document Display Expr" := 'TRUE';
      ExLineType.Value := 5;
      ExLineType.INSERT;
    END;

    LOCAL PROCEDURE InitExFlowAddins@1100285013(VAR ExFlowSetupWiz@1100285001 : Record 12057114);
    VAR
      ClientAddin@1100285000 : Record 2000000069;
    BEGIN
      IF NOT ClientAddin.GET('SignUpPdfControl','436e8aeec51b873c') THEN BEGIN
        ClientAddin.INIT;
        ClientAddin."Add-in Name" := 'SignUpPdfControl';
        ClientAddin."Public Key Token" := '436e8aeec51b873c';
        ClientAddin.Description := 'ExFlow PDF Viewer';
        ClientAddin.INSERT;
      END;

      IF ExFlowSetupWiz."PDF Preview".HASVALUE THEN BEGIN
        ExFlowSetupWiz.CALCFIELDS("PDF Preview");
        ClientAddin.Resource := ExFlowSetupWiz."PDF Preview";
        ClientAddin.MODIFY;
      END;
    END;

    PROCEDURE CreateRootFolderAndSubFolders@1100285002(PathToNewInvoices@1100285002 : Text[200];PathToProcessedInvoices@1100285003 : Text[200];PathToNewOCR@1100285004 : Text[200];PathToDeletedDocuments@1100285001 : Text[200];DefaultRootFolderPath@1100285008 : Text);
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
      IF VerifyDefaultRootFolder(DefaultRootFolderPath) THEN BEGIN
        CreateDefaultSubFolders(PathToNewInvoices,PathToProcessedInvoices,PathToNewOCR,PathToDeletedDocuments,DefaultRootFolderPath);

        IF ExFlowSetup.GET THEN BEGIN
          ExFlowSetup.VALIDATE("Path to New Invoices",PathToNewInvoices);
          ExFlowSetup.VALIDATE("Path to Used Invoices",PathToProcessedInvoices);
          ExFlowSetup.VALIDATE("Path to New OCR-files",PathToNewOCR);
          ExFlowSetup.VALIDATE("Path to Deleted Document",PathToDeletedDocuments);
          ExFlowSetup.MODIFY;
        END ELSE BEGIN
          ExFlowSetup.INIT;
          ExFlowSetup.VALIDATE("Path to New Invoices",PathToNewInvoices);
          ExFlowSetup.VALIDATE("Path to Used Invoices",PathToProcessedInvoices);
          ExFlowSetup.VALIDATE("Path to New OCR-files",PathToNewOCR);
          ExFlowSetup.VALIDATE("Path to Deleted Document",PathToDeletedDocuments);
          ExFlowSetup.INSERT(TRUE);
        END;

      END;
    END;

    PROCEDURE VerifyDefaultRootFolder@1100285007(DefaultRootFolderPath@1100285000 : Text[200]) : Boolean;
    VAR
      ExFlowFileManagement@1100285002 : Codeunit 12013602;
    BEGIN
      IF NOT ExFlowFileManagement.FolderExist(DefaultRootFolderPath) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE CreateDefaultSubFolders@1100285006(PathToNewInvoices@1100285005 : Text[200];PathToProcessedInvoices@1100285004 : Text[200];PathToNewOCR@1100285003 : Text[200];PathToDeletedDocuments@1100285000 : Text[200];DefaultRootFolderPath@1100285006 : Text[200]);
    VAR
      ExFlowFileManagement@1100285007 : Codeunit 12013602;
    BEGIN
      IF NOT ExFlowFileManagement.FolderExist(PathToNewInvoices) THEN
        ExFlowFileManagement.NewFolder(PathToNewInvoices,DefaultRootFolderPath);

      IF NOT ExFlowFileManagement.FolderExist(PathToProcessedInvoices) THEN
        ExFlowFileManagement.NewFolder(PathToProcessedInvoices,DefaultRootFolderPath);

      IF NOT ExFlowFileManagement.FolderExist(PathToNewOCR) THEN
        ExFlowFileManagement.NewFolder(PathToNewOCR,DefaultRootFolderPath);

      IF NOT ExFlowFileManagement.FolderExist(PathToDeletedDocuments) THEN
        ExFlowFileManagement.NewFolder(PathToDeletedDocuments,DefaultRootFolderPath);
    END;

    PROCEDURE CreateDefaulEmailJobs@1100285004(EmailSubject@1100285003 : Text[50];SenderName@1100285001 : Text[50];SenderEmail@1100285002 : Text[50];ExFlowWebURL@1100285004 : Text[80];VAR ExFlowSetupWizard@1100285008 : Record 12057114);
    VAR
      ExFlowEmailHeader@1100285005 : Record 12013619;
    BEGIN
      ExFlowEmailHeader.INIT;
      ExFlowEmailHeader.VALIDATE(Type,ExFlowEmailHeader.Type::"Inbox Reminder");
      ExFlowEmailHeader.VALIDATE(Description,TXT002);
      ExFlowEmailHeader.VALIDATE("Email Subject",EmailSubject);
      ExFlowEmailHeader.VALIDATE("Sender Name",SenderName);
      ExFlowEmailHeader.VALIDATE("Sender Address",SenderEmail);
      ExFlowEmailHeader.VALIDATE("Process Type",ExFlowEmailHeader."Process Type"::Scheduled);
      ExFlowEmailHeader.VALIDATE("ExFlow Web URL", ExFlowWebURL);
      IF ExFlowSetupWizard."HTML Template File".HASVALUE THEN BEGIN
        ExFlowSetupWizard.CALCFIELDS("HTML Template File");
        ExFlowEmailHeader."HTML Template File" := ExFlowSetupWizard."HTML Template File";
      END;
      IF ExFlowEmailHeader.INSERT THEN;

      ExFlowEmailHeader.INIT;
      ExFlowEmailHeader.VALIDATE(Type,ExFlowEmailHeader.Type::"SSO Login Email");
      ExFlowEmailHeader.VALIDATE(Description,TXT003);
      ExFlowEmailHeader.VALIDATE("Email Subject",TXT004);
      ExFlowEmailHeader.VALIDATE("Sender Name",SenderName);
      ExFlowEmailHeader.VALIDATE("Sender Address",SenderEmail);
      ExFlowEmailHeader.VALIDATE("Process Type",ExFlowEmailHeader."Process Type"::"On Demand");
      IF ExFlowEmailHeader.INSERT THEN;
    END;

    PROCEDURE CreateExDimJobAndDeferralColumns@1100285026(VAR TempExFlowSetupWizard@1100285000 : TEMPORARY Record 12057114);
    VAR
      ExColumn@1100285005 : Record 12013661;
      Object@1100285004 : Record 2000000001;
      GLSetup@1100285003 : Record 98;
      NextID@1100285002 : Integer;
      DividerChar@1100285001 : Char;
    BEGIN
      GLSetup.GET;

      WITH TempExFlowSetupWizard DO BEGIN
        DividerChar := 8212;

        ExColumn.RESET;

        IF ExColumn.FINDLAST THEN
          NextID := ExColumn.ID + 1
        ELSE
          NextID := 1;

        IF "Use Shortcut Dimension 1 Code" THEN
          IF GLSetup."Shortcut Dimension 1 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 1 Code",'DIM1','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 1 Code",1);
        IF "Use Shortcut Dimension 2 Code" THEN
          IF GLSetup."Shortcut Dimension 2 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 2 Code",'DIM2','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 2 Code",2);
        IF "Use Shortcut Dimension 3 Code" THEN
          IF GLSetup."Shortcut Dimension 3 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 3 Code",'DIM3','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 3 Code",3);
        IF "Use Shortcut Dimension 4 Code" THEN
          IF GLSetup."Shortcut Dimension 4 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 4 Code",'DIM4','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 4 Code",4);
        IF "Use Shortcut Dimension 5 Code" THEN
          IF GLSetup."Shortcut Dimension 5 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 5 Code",'DIM5','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 5 Code",5);
        IF "Use Shortcut Dimension 6 Code" THEN
          IF GLSetup."Shortcut Dimension 6 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 6 Code",'DIM6','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 6 Code",6);
        IF "Use Shortcut Dimension 7 Code" THEN
          IF GLSetup."Shortcut Dimension 7 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 7 Code",'DIM7','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 7 Code",7);
        IF "Use Shortcut Dimension 8 Code" THEN
          IF GLSetup."Shortcut Dimension 8 Code" <> '' THEN
            CreateLineColumn(NextID,GLSetup."Shortcut Dimension 8 Code",'DIM8','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 8 Code",8);

        IF "Use Jobs" THEN BEGIN
          CreateLineColumn(NextID,'JOB','JOB','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                        FALSE,TRUE,'',9);
          CreateLineColumn(NextID,'JOBTASK','JOBTASK','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                    FALSE,TRUE,'',10);
        END;

        IF "Use Deferral Code" THEN BEGIN
          //Deferral / Percode Code
          CreateLineColumn(NextID,'PERCODE','PERCODE','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                        FALSE,TRUE,'',11);
          //Old SE NAV Perdate
          Object.RESET;
          Object.SETRANGE(Type, Object.Type::Table);
          Object.SETRANGE(ID, 11205);
          IF Object.FINDFIRST THEN
            CreateLineColumn(NextID,'PERDATE','PERDATE','{0:d}','','System.DateTime',FALSE,
                          FALSE,'',11);
        END;
      END;
    END;

    PROCEDURE CreateCodingRules@1100285025();
    VAR
      ExCodingRule@1100285001 : Record 12013660;
      NextID@1100285002 : Integer;
    BEGIN
      ExCodingRule.RESET;
      IF ExCodingRule.FINDFIRST THEN
        EXIT;

      ExCodingRule.RESET;
      IF ExCodingRule.FINDLAST THEN
        NextID := ExCodingRule.ID + 1
      ELSE
        NextID := 1;

      CreateCodingRule(CodingRuleName0,0,NextID);
      CreateCodingRule(CodingRuleName1,1,NextID);
      CreateCodingRule(CodingRuleName2,2,NextID);
      CreateCodingRule(CodingRuleName3,3,NextID);
    END;

    LOCAL PROCEDURE CreateCodingRule@1100285024(Name@1100285002 : Text[30];Type@1100285001 : 'IsValidation,IsFilter,IsSubset,IsDeny';VAR NextID@1100285006 : Integer);
    VAR
      ExCodingRule@1100285003 : Record 12013660;
      ExCodingRuleLine@1100285004 : Record 12013663;
      ExFlow@1100285005 : Codeunit 12013601;
    BEGIN
      ExCodingRule.INIT;
      ExCodingRule.ID := NextID;
      NextID := NextID + 1;
      ExCodingRule.Name := Name;
      CASE Type OF
        Type::IsValidation: ExCodingRule."Is Validation" := TRUE;
        Type::IsFilter: ExCodingRule."Is Filter" := TRUE;
        Type::IsSubset: ExCodingRule."Is Subset" := TRUE;
        Type::IsDeny:
          BEGIN
            ExCodingRule.IsDeny := TRUE;
            ExCodingRule."Is Validation" := TRUE;
          END;
      END;
      ExCodingRule.Active := TRUE;
      ExCodingRule.INSERT;

      ExFlow.RuleLines(ExCodingRule);

      ExCodingRuleLine.RESET;
      ExCodingRuleLine.SETRANGE(ID, ExCodingRule.ID);
      IF ExCodingRuleLine.FINDSET THEN
        REPEAT
          IF Type = Type::IsDeny THEN BEGIN
            IF ExCodingRuleLine."Column Code" IN ['G_LACCOUNT','ITEM','CHARGE','FIXEDASSET'] THEN
              ExCodingRuleLine.VALIDATE(Empty, TRUE);
          END
          ELSE BEGIN
            ExCodingRuleLine.VALIDATE(All, TRUE);
            IF Type <> Type::IsSubset THEN
              ExCodingRuleLine.VALIDATE(Empty, TRUE);
          END;
          IF Type = Type::IsFilter THEN BEGIN
            IF ExCodingRuleLine."Column Code" = 'JOBTASK' THEN  BEGIN
              ExCodingRuleLine.VALIDATE(All, FALSE);
              ExCodingRuleLine.VALIDATE(Empty, FALSE);
            END;
          END;
          ExCodingRuleLine.MODIFY;
        UNTIL ExCodingRuleLine.NEXT = 0;
    END;

    PROCEDURE CreateExFlowSetup@1100285028(VAR ExFlowSetupWizard@1100285001 : Record 12057114);
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
      IF NOT ExFlowSetup.FINDFIRST THEN
        ExFlowSetup.INSERT(TRUE);

      IF ExFlowSetupWizard."RO XSLT".HASVALUE THEN BEGIN
        ExFlowSetupWizard.CALCFIELDS("RO XSLT");
        ExFlowSetup."RO XSLT" := ExFlowSetupWizard."RO XSLT";
        ExFlowSetup.MODIFY;
      END;
    END;

    PROCEDURE CreateVendorIDFields@1100285030();
    VAR
      Field@1100285001 : Record 2000000041;
      RSSortOrder@1100285000 : Integer;
      VendorIDField@1100285002 : Record 12013668;
    BEGIN
      VendorIDField.RESET;
      IF VendorIDField.FINDFIRST THEN
        EXIT;

      CreateVendorIDField(DATABASE::Vendor,1,RSSortOrder); // No.
      CreateVendorIDField(DATABASE::Vendor,86,RSSortOrder); // VAT Registration No.

      IF Field.GET(DATABASE::Vendor,11200) THEN
        CreateVendorIDField(DATABASE::Vendor,11200,RSSortOrder); // SE version Plus Giro

      IF Field.GET(DATABASE::Vendor,11207) THEN
        CreateVendorIDField(DATABASE::Vendor,11207,RSSortOrder); // SE version Bank Giro No

      IF Field.GET(DATABASE::Vendor,11209) THEN
        CreateVendorIDField(DATABASE::Vendor,11209,RSSortOrder); // SE version Bank account no

      IF Field.GET(DATABASE::Vendor,11620) THEN
        CreateVendorIDField(DATABASE::Vendor,11620,RSSortOrder); // AUNZ ABN

      IF Field.GET(DATABASE::Vendor,15000002) THEN
        CreateVendorIDField(DATABASE::Vendor,15000002,RSSortOrder); // NO Version Recipient Bank Account No

      IF Field.GET(DATABASE::"Vendor Bank Account",12047958) THEN
        CreateVendorIDField(DATABASE::"Vendor Bank Account",12047958,RSSortOrder); // SE version Plus Giro

      IF Field.GET(DATABASE::"Vendor Bank Account",12047964) THEN
        CreateVendorIDField(DATABASE::"Vendor Bank Account",12047964,RSSortOrder); // SE version Bank Giro

      IF Field.GET(DATABASE::"Vendor Bank Account",12047967) THEN
        CreateVendorIDField(DATABASE::"Vendor Bank Account",12047967,RSSortOrder); // SE version Account
    END;

    PROCEDURE CreateVendorIDField@1100285029(TableNo@1100285003 : Integer;FieldNo@1100285002 : Integer;VAR RSSortOrder@1100285001 : Integer);
    VAR
      VendorIDField@1100285000 : Record 12013668;
    BEGIN
      VendorIDField.INIT;
      VendorIDField."Table No." := TableNo;
      VendorIDField."Field No." := FieldNo;
      VendorIDField."RS Export order" := RSSortOrder;
      VendorIDField.INSERT;
      RSSortOrder := RSSortOrder + 1;
    END;

    PROCEDURE ColumnsExist@1100285021(SourceValue@1100285002 : Text) : Boolean;
    VAR
      ExColumn@1100285000 : Record 12013661;
    BEGIN
      ExColumn.RESET;
      ExColumn.SETRANGE(Source,SourceValue);
      IF ExColumn.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE)
    END;

    PROCEDURE GetExFlowDefaultCompanyName@1100285001() CompName : Text;
    VAR
      WebCompanyID@1100285000 : Record 12013630;
    BEGIN
      WebCompanyID.RESET;
      WebCompanyID.SETRANGE("Default Company",TRUE);
      IF WebCompanyID.FINDFIRST THEN
        EXIT(WebCompanyID."Company Name")
      ELSE
        EXIT('');
    END;

    PROCEDURE InsertRec@1100285016(CodeToInsert@1000 : Code[10];DescriptionToInsert@1001 : Text[30]);
    VAR
      JobQueueCategory@1100285000 : Record 471;
    BEGIN
      IF JobQueueCategory.GET(CodeToInsert) THEN
        EXIT;

      JobQueueCategory.Code := CodeToInsert;
      JobQueueCategory.Description := DescriptionToInsert;
      JobQueueCategory.INSERT;
    END;

    PROCEDURE NAV2017FeaturesSupported@1100285017() : Boolean;
    VAR
      Object@1100285000 : Record 2000000001;
    BEGIN
      Object.SETRANGE(Type,Object.Type::Page);
      Object.SETRANGE(ID,1805);
      EXIT(NOT Object.ISEMPTY);
    END;

    LOCAL PROCEDURE AssignDefaultUserCodingRule@1100285000();
    VAR
      EXCodingRule@1100285000 : Record 12013660;
    BEGIN
      EXCodingRule.SETRANGE("Is Subset",TRUE);
      EXCodingRule.SETRANGE(Name,CodingRuleName2);
      IF EXCodingRule.FINDFIRST THEN BEGIN
        EXUserCompany.SETRANGE("Coding Rule ID",0);
        EXUserCompany.MODIFYALL("Coding Rule ID",EXCodingRule.ID);
      END;
    END;

    LOCAL PROCEDURE RSOSetup@1100285008(RSOIntegration@1100285000 : Boolean;ROConnectedUser@1100285001 : Text[100];ROConnectPassword@1100285002 : Text[20];ROBuyerName@1100285003 : Text[100];UploadVendorsToRO@1100285004 : Boolean;UploadReferencesToRO@1100285005 : Boolean;CustomizedROApiKey@1100285006 : Text[100]);
    VAR
      ExFlowSetup@1100285007 : Record 12013601;
    BEGIN
      IF ExFlowSetup.GET THEN BEGIN
        ExFlowSetup."Readsoft Online integration":=RSOIntegration;
        ExFlowSetup."RO Connect User":=ROConnectedUser;
        ExFlowSetup."RO Connect Password":=ROConnectPassword;
        ExFlowSetup."RO Buyer Name":=ROBuyerName;
        ExFlowSetup."Upload vendors to RO":=UploadVendorsToRO;
        ExFlowSetup."Upload references to RO":=UploadReferencesToRO;
        ExFlowSetup."Customized RO ApiKey":=CustomizedROApiKey;
        ExFlowSetup.MODIFY
      END ELSE BEGIN
        ExFlowSetup.INIT;
        ExFlowSetup."Readsoft Online integration":=RSOIntegration;
        ExFlowSetup."RO Connect User":=ROConnectedUser;
        ExFlowSetup."RO Connect Password":=ROConnectPassword;
        ExFlowSetup."RO Buyer Name":=ROBuyerName;
        ExFlowSetup."Upload vendors to RO":=UploadVendorsToRO;
        ExFlowSetup."Upload references to RO":=UploadReferencesToRO;
        ExFlowSetup."Customized RO ApiKey":=CustomizedROApiKey;
        ExFlowSetup.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateUserRoleCentarProfile@1100285005();
    VAR
      AllProfile@1100285001 : Record 2000000072;
    BEGIN
      AllProfile.SETRANGE("Profile ID",'EXFLOW');
      IF AllProfile.FINDFIRST THEN
        EXIT;
      AllProfile.INIT;
      AllProfile."Profile ID":='EXFLOW';
      AllProfile.Description:='ExFlow';
      AllProfile."Role Center ID":=12013686;
      AllProfile."Default Role Center":=TRUE;
      AllProfile."Use Comments":=FALSE;
      AllProfile."Use Notes":=FALSE;
      AllProfile."Use Record Notes":=FALSE;
      AllProfile."Use Page Notes":= FALSE;
      AllProfile."Disable Personalization":=FALSE;
      AllProfile.INSERT;
    END;

    LOCAL PROCEDURE POMatchingSettings@1100285011(AllowedPriceDifPercent@1100285000 : Decimal;AllowedPriceFiffLCY@1100285001 : Decimal);
    VAR
      ExFlowSetup@1100285002 : Record 12013601;
    BEGIN
      IF ExFlowSetup.GET THEN BEGIN
        ExFlowSetup."Allowed Price Diff (%)" := AllowedPriceDifPercent;
        ExFlowSetup."Allowed Price Diff (LCY)" := AllowedPriceFiffLCY;
        ExFlowSetup.MODIFY;
      END ELSE BEGIN
        ExFlowSetup.INIT;
        ExFlowSetup."Allowed Price Diff (%)" := AllowedPriceDifPercent;
        ExFlowSetup."Allowed Price Diff (LCY)" := AllowedPriceFiffLCY;
        ExFlowSetup.INSERT(TRUE);
      END;

      IF ExFlowSetup.GET THEN
        IF (FORMAT(ExFlowSetup."Allowed Price Diff (%)") <> '') OR (FORMAT(ExFlowSetup."Allowed Price Diff (LCY)") <> '') THEN BEGIN
          ExFlowSetup."Check Unit Cost":= TRUE;
          ExFlowSetup.MODIFY;
        END;

    END;

    LOCAL PROCEDURE POApprovalSettings@1100285020();
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
      IF ExFlowSetup.GET THEN BEGIN
        IF FORMAT(ExFlowSetup."Order Applies-to") <> '' THEN BEGIN
          ExFlowSetup."Order Report":=405;
          ExFlowSetup.MODIFY;
        END;
      END ELSE BEGIN
        ExFlowSetup.INIT;
        ExFlowSetup."Order Report":=405;
        ExFlowSetup.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UseRequisitionSettings@1100285022();
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
      RequisitionRule@1100285001 : Record 12013621;
      JobQueueEntry@1100285002 : Record 472;
      StartTime@1100285003 : Time;
      EndTime@1100285004 : Time;
    BEGIN
      IF ExFlowSetup.GET THEN BEGIN
        IF ExFlowSetup.Requisition = FALSE THEN BEGIN
          ExFlowSetup.Requisition:= TRUE;
          ExFlowSetup.MODIFY;
        END;
        IF FORMAT(ExFlowSetup."Requisition Report") <> '' THEN BEGIN
          ExFlowSetup."Requisition Report":= 404;
          ExFlowSetup.MODIFY;
        END;
      END ELSE BEGIN
        ExFlowSetup.INIT;
        ExFlowSetup.Requisition:=TRUE;
        ExFlowSetup."Requisition Report":=404;
        ExFlowSetup.INSERT(TRUE);
      END;

      RequisitionRule.SETRANGE(Code,'DEFAULT');
      IF NOT RequisitionRule.FINDSET THEN BEGIN
        RequisitionRule.INIT;
        RequisitionRule.Code:='DEFAULT';
        RequisitionRule.Status:=RequisitionRule.Status::Released;
        RequisitionRule.Name:='Default';
        RequisitionRule.Disabled:=FALSE;
        RequisitionRule.INSERT;
      END;

      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",12057071);
      IF NOT JobQueueEntry.FINDFIRST THEN BEGIN
        JobQueueEntry.INIT;
        JobQueueEntry.INSERT(TRUE);
        JobQueueEntry.VALIDATE("Object Type to Run", JobQueueEntry."Object Type to Run"::Codeunit);
        JobQueueEntry.VALIDATE("Object ID to Run",12057071);
        JobQueueEntry.Description:=TXT006;
        JobQueueEntry."Job Queue Category Code":= TXT005;
        JobQueueEntry."Recurring Job":=TRUE;
        JobQueueEntry.VALIDATE("No. of Minutes between Runs",15);
        JobQueueEntry.VALIDATE("Run on Mondays",TRUE);
        JobQueueEntry.VALIDATE("Run on Tuesdays",TRUE);
        JobQueueEntry.VALIDATE("Run on Wednesdays",TRUE);
        JobQueueEntry.VALIDATE("Run on Thursdays",TRUE);
        JobQueueEntry.VALIDATE("Run on Fridays",TRUE);
        JobQueueEntry.VALIDATE("Run on Saturdays",TRUE);
        JobQueueEntry.VALIDATE("Run on Sundays",TRUE);
        JobQueueEntry.MODIFY(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

