OBJECT Codeunit 6529 Item Tracking Navigate Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemLedgEntry@1061 : Record 32;
      ReservEntry@1059 : Record 337;
      MiscArticleInfo@1058 : Record 5214;
      FixedAsset@1057 : Record 5600;
      WhseActivLine@1056 : Record 5767;
      RgstrdWhseActivLine@1055 : Record 5773;
      ServItemLine@1054 : Record 5901;
      Loaner@1053 : Record 5913;
      ServiceItem@1051 : Record 5940;
      ServiceItemComponent@1050 : Record 5941;
      ServContractLine@1049 : Record 5964;
      FiledContractLine@1048 : Record 5971;
      SerialNoInfo@1047 : Record 6504;
      LotNoInfo@1046 : Record 6505;
      WhseEntry@1045 : Record 7312;
      PostedInvtPutAwayLine@1043 : Record 7341;
      PostedInvtPickLine@1042 : Record 7343;
      JobLedgEntry@1063 : Record 11072005;
      TempPostedWhseRcptLine@1005 : TEMPORARY Record 7319;
      TempPostedWhseShptLine@1004 : TEMPORARY Record 7323;
      TempPurchRcptHeader@1029 : TEMPORARY Record 120;
      TempPurchInvHeader@1028 : TEMPORARY Record 122;
      TempAssemblyLine@1011 : TEMPORARY Record 901;
      TempAssemblyHeader@1012 : TEMPORARY Record 900;
      TempPostedAssemblyLine@1014 : TEMPORARY Record 911;
      TempPostedAssemblyHeader@1013 : TEMPORARY Record 910;
      TempPurchCrMemoHeader@1027 : TEMPORARY Record 124;
      TempSalesShptHeader@1026 : TEMPORARY Record 110;
      TempSalesInvHeader@1025 : TEMPORARY Record 112;
      TempSalesCrMemoHeader@1024 : TEMPORARY Record 114;
      TempServShptHeader@1009 : TEMPORARY Record 5990;
      TempServInvHeader@1007 : TEMPORARY Record 5992;
      TempServCrMemoHeader@1006 : TEMPORARY Record 5994;
      TempReturnShipHeader@1031 : TEMPORARY Record 6650;
      TempReturnRcptHeader@1030 : TEMPORARY Record 6660;
      TempTransShipHeader@1023 : TEMPORARY Record 5744;
      TempTransRcptHeader@1022 : TEMPORARY Record 5746;
      TempProdOrder@1001 : TEMPORARY Record 5405;
      TempSalesLine@1062 : TEMPORARY Record 37;
      TempServLine@1010 : TEMPORARY Record 5902;
      TempReqLine@1060 : TEMPORARY Record 246;
      TempPurchLine@1020 : TEMPORARY Record 39;
      TempItemJnlLine@1019 : TEMPORARY Record 83;
      TempProdOrderLine@1017 : TEMPORARY Record 5406;
      TempProdOrderComp@1016 : TEMPORARY Record 5407;
      TempPlanningComponent@1015 : TEMPORARY Record 99000829;
      TempTransLine@1008 : TEMPORARY Record 5741;
      TempRecordBuffer@1000 : TEMPORARY Record 6529;
      TempField@1002 : TEMPORARY Record 2000000041;
      TempJobLedgEntry@1064 : TEMPORARY Record 11072005;
      RecRef@1018 : RecordRef;
      LastEntryNo@1003 : Integer;
      TempProjectInventoryEntry@1100528600 : TEMPORARY Record 11012670;
      TempPostedProjDeliveryNote@1100528601 : TEMPORARY Record 11012674;
      NSItemTrackingEntry@1100528602 : Record 11071902;

    [External]
    PROCEDURE FindTrackingRecords@1(SerialNoFilter@1016 : Text;LotNoFilter@1015 : Text;ItemNoFilter@1023 : Text;VariantFilter@1024 : Text);
    BEGIN
      IF (SerialNoFilter = '') AND (LotNoFilter = '') THEN
        EXIT;

      FindItemLedgerEntry(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FindReservEntry(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FindWhseActivLine(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FindRegWhseActivLine(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FindWhseEntry(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FindPostedInvtPutAwayLine(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FindPostedInvtPickLine(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);

      //**4PS.sn
      FindNSItemTrackingEntry(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      //**4PS.en

      // Only LotNos
      IF LotNoFilter <> '' THEN
        FindLotNoInfo(LotNoFilter,ItemNoFilter,VariantFilter);

      // Only SerialNos
      IF SerialNoFilter <> '' THEN BEGIN
        FindSerialNoInfo(SerialNoFilter,ItemNoFilter,VariantFilter);
        FindSerialNoMisc(SerialNoFilter);
        FindSerialNoFixedAsset(SerialNoFilter);
        FindSerialNoServItemLine(SerialNoFilter,ItemNoFilter,VariantFilter);
        FindSerialNoLoaner(SerialNoFilter,ItemNoFilter);
        FindSerialNoServiceItem(SerialNoFilter,ItemNoFilter,VariantFilter);
        FindSerialNoServiceItemComponent(SerialNoFilter,ItemNoFilter,VariantFilter);
        FindSerialNoServContractLine(SerialNoFilter,ItemNoFilter,VariantFilter);
        FindSerialNoFiledContractLine(SerialNoFilter,ItemNoFilter,VariantFilter);
      END;

      FindJobLedgEntry(SerialNoFilter,LotNoFilter,VariantFilter);
    END;

    LOCAL PROCEDURE FindLotNoInfo@9(LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT LotNoInfo.READPERMISSION THEN
        EXIT;

      WITH LotNoInfo DO BEGIN
        RESET;
        IF SETCURRENTKEY("Lot No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(LotNoInfo);
            InsertBufferRec(RecRef,'',"Lot No.","Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoInfo@11(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT SerialNoInfo.READPERMISSION THEN
        EXIT;

      WITH SerialNoInfo DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(SerialNoInfo);
            InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoMisc@38(SerialNoFilter@1000 : Text);
    BEGIN
      IF NOT MiscArticleInfo.READPERMISSION THEN
        EXIT;

      WITH MiscArticleInfo DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(MiscArticleInfo);
            InsertBufferRec(RecRef,"Serial No.",'','','');
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoFixedAsset@39(SerialNoFilter@1000 : Text);
    BEGIN
      IF NOT FixedAsset.READPERMISSION THEN
        EXIT;

      WITH FixedAsset DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(FixedAsset);
            InsertBufferRec(RecRef,"Serial No.",'','','');
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoServItemLine@40(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT ServItemLine.READPERMISSION THEN
        EXIT;

      WITH ServItemLine DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ServItemLine);
            InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoServiceItem@51(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT ServiceItem.READPERMISSION THEN
        EXIT;

      WITH ServiceItem DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ServiceItem);
            InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoServiceItemComponent@52(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT ServiceItemComponent.READPERMISSION THEN
        EXIT;

      WITH ServiceItemComponent DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Parent Service Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ServiceItemComponent);
            InsertBufferRec(RecRef,"Serial No.",'',"Parent Service Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoServContractLine@53(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT ServContractLine.READPERMISSION THEN
        EXIT;

      WITH ServContractLine DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ServContractLine);
            InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoLoaner@50(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text);
    BEGIN
      IF NOT Loaner.READPERMISSION THEN
        EXIT;

      WITH Loaner DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(Loaner);
            InsertBufferRec(RecRef,"Serial No.",'',"Item No.",'');
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindSerialNoFiledContractLine@54(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT FiledContractLine.READPERMISSION THEN
        EXIT;

      WITH FiledContractLine DO BEGIN
        RESET;
        IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(FiledContractLine);
            InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SearchValueEntries@15();
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF ValueEntry.READPERMISSION THEN
        WITH ValueEntry DO BEGIN
          RESET;
          SETCURRENTKEY("Item Ledger Entry No.");
          SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          SETRANGE("Entry Type","Entry Type"::"Direct Cost");
          SETFILTER("Document Type",'<>%1',ItemLedgEntry."Document Type");
          IF FINDSET THEN
            REPEAT
              CASE "Document Type" OF
                "Document Type"::"Sales Invoice":
                  FindSalesInvoice("Document No.");
                "Document Type"::"Sales Credit Memo":
                  FindSalesCrMemo("Document No.");
                "Document Type"::"Service Invoice":
                  FindServInvoice("Document No.");
                "Document Type"::"Service Credit Memo":
                  FindServCrMemo("Document No.");
                "Document Type"::"Purchase Invoice":
                  FindPurchInvoice("Document No.");
                "Document Type"::"Purchase Credit Memo":
                  FindPurchCrMemo("Document No.");
              END;
            UNTIL NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE FindSalesInvoice@10(DocumentNo@1002 : Code[20]);
    VAR
      SalesInvHeader@1000 : Record 112;
    BEGIN
      IF SalesInvHeader.READPERMISSION THEN
        IF SalesInvHeader.GET(DocumentNo) THEN BEGIN
          RecRef.GETTABLE(SalesInvHeader);
          InsertBufferRecFromItemLedgEntry;
          TempSalesInvHeader := SalesInvHeader;
          IF TempSalesInvHeader.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindSalesCrMemo@5(DocumentNo@1000 : Code[20]);
    VAR
      SalesCrMemoHeader@1002 : Record 114;
    BEGIN
      IF SalesCrMemoHeader.READPERMISSION THEN
        IF SalesCrMemoHeader.GET(DocumentNo) THEN BEGIN
          RecRef.GETTABLE(SalesCrMemoHeader);
          InsertBufferRecFromItemLedgEntry;
          TempSalesCrMemoHeader := SalesCrMemoHeader;
          IF TempSalesCrMemoHeader.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindSalesShptHeader@19(DocumentNo@1000 : Code[20]);
    VAR
      SalesShptHeader@1001 : Record 110;
    BEGIN
      IF NOT SalesShptHeader.READPERMISSION THEN
        EXIT;

      IF SalesShptHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(SalesShptHeader);
        InsertBufferRecFromItemLedgEntry;
        TempSalesShptHeader := SalesShptHeader;
        IF TempSalesShptHeader.INSERT THEN;
        FindPostedWhseShptLine;
        // Find Invoice if it exists
        SearchValueEntries;
      END;
    END;

    LOCAL PROCEDURE FindSalesLines@41();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      IF NOT SalesLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF SalesLine.GET("Source Subtype","Source ID","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(SalesLine);
          InsertBufferRecFromReservEntry;
          TempSalesLine := SalesLine;
          IF TempSalesLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindServiceLines@46();
    VAR
      ServLine@1000 : Record 5902;
    BEGIN
      IF NOT ServLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF ServLine.GET("Source Subtype","Source ID","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(ServLine);
          InsertBufferRecFromReservEntry;
          TempServLine := ServLine;
          IF TempServLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindPurchaseLines@48();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      IF NOT PurchLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF PurchLine.GET("Source Subtype","Source ID","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(PurchLine);
          InsertBufferRecFromReservEntry;
          TempPurchLine := PurchLine;
          IF TempPurchLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindRequisitionLines@56();
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      IF NOT ReqLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF ReqLine.GET("Source ID","Source Batch Name","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(ReqLine);
          InsertBufferRecFromReservEntry;
          TempReqLine := ReqLine;
          IF TempReqLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindPlanningComponent@57();
    VAR
      PlanningComponent@1000 : Record 99000829;
    BEGIN
      IF NOT PlanningComponent.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF PlanningComponent.GET("Source ID","Source Batch Name","Source Prod. Order Line","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(PlanningComponent);
          InsertBufferRecFromReservEntry;
          TempPlanningComponent := PlanningComponent;
          IF TempPlanningComponent.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindItemJournalLines@60();
    VAR
      ItemJnlLine@1000 : Record 83;
    BEGIN
      IF NOT ItemJnlLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF ItemJnlLine.GET("Source ID","Source Batch Name","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(ItemJnlLine);
          InsertBufferRecFromReservEntry;
          TempItemJnlLine := ItemJnlLine;
          IF TempItemJnlLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindAssemblyHeaders@63();
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      IF NOT AssemblyHeader.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF AssemblyHeader.GET("Source Subtype","Source ID") THEN BEGIN
          RecRef.GETTABLE(AssemblyHeader);
          InsertBufferRecFromReservEntry;
          TempAssemblyHeader := AssemblyHeader;
          IF TempAssemblyHeader.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindAssemblyLines@62();
    VAR
      AssemblyLine@1000 : Record 901;
    BEGIN
      IF NOT AssemblyLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF AssemblyLine.GET("Source Subtype","Source ID","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(AssemblyLine);
          InsertBufferRecFromReservEntry;
          TempAssemblyLine := AssemblyLine;
          IF TempAssemblyLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindProdOrderLines@66();
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      IF NOT ProdOrderLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF ProdOrderLine.GET("Source Subtype","Source ID","Source Prod. Order Line") THEN BEGIN
          RecRef.GETTABLE(ProdOrderLine);
          InsertBufferRecFromReservEntry;
          TempProdOrderLine := ProdOrderLine;
          IF TempProdOrderLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindProdOrderComponents@67();
    VAR
      ProdOrderComp@1000 : Record 5407;
    BEGIN
      IF NOT ProdOrderComp.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF ProdOrderComp.GET("Source Subtype","Source ID","Source Prod. Order Line","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(ProdOrderComp);
          InsertBufferRecFromReservEntry;
          TempProdOrderComp := ProdOrderComp;
          IF TempProdOrderComp.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindTransferLines@69();
    VAR
      TransLine@1000 : Record 5741;
    BEGIN
      IF NOT TransLine.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO
        IF TransLine.GET("Source ID","Source Ref. No.") THEN BEGIN
          RecRef.GETTABLE(TransLine);
          InsertBufferRecFromReservEntry;
          TempTransLine := TransLine;
          IF TempTransLine.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE FindServInvoice@13(DocumentNo@1002 : Code[20]);
    VAR
      ServInvHeader@1000 : Record 5992;
    BEGIN
      IF NOT ServInvHeader.READPERMISSION THEN
        EXIT;

      IF ServInvHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(ServInvHeader);
        InsertBufferRecFromItemLedgEntry;
        TempServInvHeader := ServInvHeader;
        IF TempServInvHeader.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE FindServCrMemo@22(DocumentNo@1000 : Code[20]);
    VAR
      ServCrMemoHeader@1002 : Record 5994;
    BEGIN
      IF NOT ServCrMemoHeader.READPERMISSION THEN
        EXIT;

      IF ServCrMemoHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(ServCrMemoHeader);
        InsertBufferRecFromItemLedgEntry;
        TempServCrMemoHeader := ServCrMemoHeader;
        IF TempServCrMemoHeader.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE FindServShptHeader@25(DocumentNo@1000 : Code[20]);
    VAR
      ServShptHeader@1001 : Record 5990;
    BEGIN
      IF NOT ServShptHeader.READPERMISSION THEN
        EXIT;

      IF ServShptHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(ServShptHeader);
        InsertBufferRecFromItemLedgEntry;
        TempServShptHeader := ServShptHeader;
        IF TempServShptHeader.INSERT THEN;
        // Find Invoice if it exists
        SearchValueEntries;
      END;
    END;

    LOCAL PROCEDURE FindPurchInvoice@29(DocumentNo@1002 : Code[20]);
    VAR
      PurchInvHeader@1000 : Record 122;
    BEGIN
      IF NOT PurchInvHeader.READPERMISSION THEN
        EXIT;

      IF PurchInvHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(PurchInvHeader);
        InsertBufferRecFromItemLedgEntry;
        TempPurchInvHeader := PurchInvHeader;
        IF TempPurchInvHeader.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE FindPurchCrMemo@30(DocumentNo@1000 : Code[20]);
    VAR
      PurchCrMemoHeader@1002 : Record 124;
    BEGIN
      IF NOT PurchCrMemoHeader.READPERMISSION THEN
        EXIT;

      IF PurchCrMemoHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(PurchCrMemoHeader);
        InsertBufferRecFromItemLedgEntry;
        TempPurchCrMemoHeader := PurchCrMemoHeader;
        IF TempPurchCrMemoHeader.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE FindPurchRcptHeader@43(DocumentNo@1002 : Code[20]);
    VAR
      PurchRcptHeader@1000 : Record 120;
    BEGIN
      IF NOT PurchRcptHeader.READPERMISSION THEN
        EXIT;

      IF PurchRcptHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(PurchRcptHeader);
        InsertBufferRecFromItemLedgEntry;
        TempPurchRcptHeader := PurchRcptHeader;
        IF TempPurchRcptHeader.INSERT THEN;
        FindPostedWhseRcptLine;
        // Find Invoice if it exists
        SearchValueEntries;
      END;
    END;

    LOCAL PROCEDURE FindPostedAssembly@45(DocumentNo@1000 : Code[20]);
    VAR
      PostedAssemblyHeader@1001 : Record 910;
    BEGIN
      IF NOT PostedAssemblyHeader.READPERMISSION THEN
        EXIT;

      IF PostedAssemblyHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(PostedAssemblyHeader);
        InsertBufferRecFromItemLedgEntry;
        TempPostedAssemblyHeader := PostedAssemblyHeader;
        IF TempPostedAssemblyHeader.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE FindPostedWhseShptLine@6();
    VAR
      PostedWhseShptLine@1001 : Record 7323;
    BEGIN
      IF NOT PostedWhseShptLine.READPERMISSION THEN
        EXIT;

      WITH PostedWhseShptLine DO BEGIN
        RESET;
        SETCURRENTKEY("Posted Source No.","Posting Date");
        SETRANGE("Posted Source No.",ItemLedgEntry."Document No.");
        SETRANGE("Posting Date",ItemLedgEntry."Posting Date");
        SETRANGE("Item No.",ItemLedgEntry."Item No.");
        SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
        SETRANGE("Source Line No.",ItemLedgEntry."Document Line No.");
        IF FINDFIRST THEN BEGIN
          RecRef.GETTABLE(PostedWhseShptLine);
          InsertBufferRecFromItemLedgEntry;
          TempPostedWhseShptLine := PostedWhseShptLine;
          IF TempPostedWhseShptLine.INSERT THEN;
        END;
      END;
    END;

    LOCAL PROCEDURE FindPostedWhseRcptLine@8();
    VAR
      PostedWhseRcptLine@1001 : Record 7319;
    BEGIN
      IF NOT PostedWhseRcptLine.READPERMISSION THEN
        EXIT;

      WITH PostedWhseRcptLine DO BEGIN
        RESET;
        SETCURRENTKEY("Posted Source No.","Posting Date");
        SETRANGE("Posted Source No.",ItemLedgEntry."Document No.");
        SETRANGE("Posting Date",ItemLedgEntry."Posting Date");
        SETRANGE("Item No.",ItemLedgEntry."Item No.");
        SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
        SETRANGE("Source Line No.",ItemLedgEntry."Document Line No.");
        IF FINDFIRST THEN BEGIN
          RecRef.GETTABLE(PostedWhseRcptLine);
          InsertBufferRecFromItemLedgEntry;
          TempPostedWhseRcptLine := PostedWhseRcptLine;
          IF TempPostedWhseRcptLine.INSERT THEN;
        END;
      END;
    END;

    LOCAL PROCEDURE FindPostedInvtPickLine@28(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT PostedInvtPickLine.READPERMISSION THEN
        EXIT;

      WITH PostedInvtPickLine DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(PostedInvtPickLine);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindPostedInvtPutAwayLine@27(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT PostedInvtPutAwayLine.READPERMISSION THEN
        EXIT;

      WITH PostedInvtPutAwayLine DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(PostedInvtPutAwayLine);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindProductionOrder@47(DocumentNo@1000 : Code[20]);
    VAR
      ProdOrder@1001 : Record 5405;
    BEGIN
      IF NOT ProdOrder.READPERMISSION THEN
        EXIT;

      ProdOrder.SETRANGE(Status,ProdOrder.Status::Released,ProdOrder.Status::Finished);
      ProdOrder.SETRANGE("No.",DocumentNo);
      IF ProdOrder.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(ProdOrder);
        InsertBufferRecFromItemLedgEntry;
        TempProdOrder := ProdOrder;
        IF TempProdOrder.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE FindRegWhseActivLine@33(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT RgstrdWhseActivLine.READPERMISSION THEN
        EXIT;

      WITH RgstrdWhseActivLine DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(RgstrdWhseActivLine);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@20(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    VAR
      IsHandled@1004 : Boolean;
    BEGIN
      IF NOT ItemLedgEntry.READPERMISSION THEN
        EXIT;

      WITH ItemLedgEntry DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ItemLedgEntry);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            IsHandled := FALSE;
            OnFindItemLedgerEntryOnBeforeCaseDocumentType(ItemLedgEntry,RecRef,IsHandled);
            IF NOT IsHandled THEN
              CASE "Document Type" OF
                "Document Type"::"Sales Shipment":
                  FindSalesShptHeader("Document No.");
                "Document Type"::"Sales Invoice":
                  FindSalesInvoice("Document No.");
                "Document Type"::"Service Shipment":
                  FindServShptHeader("Document No.");
                "Document Type"::"Service Invoice":
                  FindServInvoice("Document No.");
                "Document Type"::"Service Credit Memo":
                  FindServCrMemo("Document No.");
                "Document Type"::"Sales Return Receipt":
                  FindReturnRcptHeader("Document No.");
                "Document Type"::"Sales Credit Memo":
                  FindSalesCrMemo("Document No.");
                "Document Type"::"Purchase Receipt":
                  FindPurchRcptHeader("Document No.");
                "Document Type"::"Purchase Invoice":
                  FindPurchInvoice("Document No.");
                "Document Type"::"Purchase Return Shipment":
                  FindReturnShptHeader("Document No.");
                "Document Type"::"Purchase Credit Memo":
                  FindPurchCrMemo("Document No.");
                "Document Type"::"Transfer Shipment":
                  FindTransShptHeader("Document No.");
                "Document Type"::"Transfer Receipt":
                  FindTransRcptHeader("Document No.");
                "Document Type"::"Posted Assembly":
                  FindPostedAssembly("Document No.");
                ELSE
                  IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                    FindProductionOrder("Document No.");
              END;
            OnFindTrackingRecordsForItemLedgerEntry(ItemLedgEntry);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindReturnRcptHeader@34(DocumentNo@1002 : Code[20]);
    VAR
      ReturnRcptHeader@1000 : Record 6660;
    BEGIN
      IF NOT ReturnRcptHeader.READPERMISSION THEN
        EXIT;

      IF ReturnRcptHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(ReturnRcptHeader);
        InsertBufferRecFromItemLedgEntry;
        TempReturnRcptHeader := ReturnRcptHeader;
        IF TempReturnRcptHeader.INSERT THEN;
        FindPostedWhseRcptLine;
        // Find CreditMemo if it exists
        SearchValueEntries;
      END;
    END;

    LOCAL PROCEDURE FindReturnShptHeader@26(DocumentNo@1002 : Code[20]);
    VAR
      ReturnShptHeader@1000 : Record 6650;
    BEGIN
      IF NOT ReturnShptHeader.READPERMISSION THEN
        EXIT;

      IF ReturnShptHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(ReturnShptHeader);
        InsertBufferRecFromItemLedgEntry;
        TempReturnShipHeader := ReturnShptHeader;
        IF TempReturnShipHeader.INSERT THEN;
        FindPostedWhseShptLine;
        // Find CreditMemo if it exists
        SearchValueEntries;
      END;
    END;

    LOCAL PROCEDURE FindTransShptHeader@36(DocumentNo@1000 : Code[20]);
    VAR
      TransShptHeader@1001 : Record 5744;
    BEGIN
      IF NOT TransShptHeader.READPERMISSION THEN
        EXIT;

      IF TransShptHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(TransShptHeader);
        InsertBufferRecFromItemLedgEntry;
        TempTransShipHeader := TransShptHeader;
        IF TempTransShipHeader.INSERT THEN;
        FindPostedWhseShptLine;
      END;
    END;

    LOCAL PROCEDURE FindTransRcptHeader@42(DocumentNo@1002 : Code[20]);
    VAR
      TransRcptHeader@1000 : Record 5746;
    BEGIN
      IF NOT TransRcptHeader.READPERMISSION THEN
        EXIT;

      IF TransRcptHeader.GET(DocumentNo) THEN BEGIN
        RecRef.GETTABLE(TransRcptHeader);
        InsertBufferRecFromItemLedgEntry;
        TempTransRcptHeader := TransRcptHeader;
        IF TempTransRcptHeader.INSERT THEN;
        FindPostedWhseRcptLine;
      END;
    END;

    LOCAL PROCEDURE FindJobLedgEntry@37(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT JobLedgEntry.READPERMISSION THEN
        EXIT;

      WITH JobLedgEntry DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(JobLedgEntry);
            InsertBufferRec(RecRef,"Serial No.","Lot No.",'',"Variant Code");
            TempJobLedgEntry := JobLedgEntry;
            IF TempJobLedgEntry.INSERT THEN;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindReservEntry@24(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    VAR
      IsHandled@1004 : Boolean;
    BEGIN
      IF NOT ReservEntry.READPERMISSION THEN
        EXIT;

      WITH ReservEntry DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ReservEntry);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            IsHandled := FALSE;
            OnFindReservEntryOnBeforeCaseDocumentType(ReservEntry,RecRef,IsHandled);
            IF NOT IsHandled THEN
              CASE "Source Type" OF
                DATABASE::"Sales Line":
                  FindSalesLines;
                DATABASE::"Service Line":
                  FindServiceLines;
                DATABASE::"Purchase Line":
                  FindPurchaseLines;
                DATABASE::"Requisition Line":
                  FindRequisitionLines;
                DATABASE::"Planning Component":
                  FindPlanningComponent;
                DATABASE::"Item Journal Line":
                  FindItemJournalLines;
                DATABASE::"Assembly Line":
                  FindAssemblyLines;
                DATABASE::"Assembly Header":
                  FindAssemblyHeaders;
                DATABASE::"Prod. Order Line":
                  FindProdOrderLines;
                DATABASE::"Prod. Order Component":
                  FindProdOrderComponents;
                DATABASE::"Transfer Line":
                  FindTransferLines;
              END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindWhseActivLine@32(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT WhseActivLine.READPERMISSION THEN
        EXIT;

      WITH WhseActivLine DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(WhseActivLine);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindWhseEntry@31(SerialNoFilter@1003 : Text;LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    BEGIN
      IF NOT WhseEntry.READPERMISSION THEN
        EXIT;

      WITH WhseEntry DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(WhseEntry);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE Show@4(TableNo@1000 : Integer);
    VAR
      ItemTrackingDocMgt@1100528600 : Codeunit 6503;
      TempItemLedgEntry@1100528601 : TEMPORARY Record 32;
    BEGIN
      CASE TableNo OF
        DATABASE::"Item Ledger Entry":
          PAGE.RUN(0,ItemLedgEntry);
        DATABASE::"Reservation Entry":
          PAGE.RUN(0,ReservEntry);
        DATABASE::"Misc. Article Information":
          PAGE.RUN(0,MiscArticleInfo);
        DATABASE::"Fixed Asset":
          PAGE.RUN(0,FixedAsset);
        DATABASE::"Warehouse Activity Line":
          PAGE.RUN(0,WhseActivLine);
        DATABASE::"Registered Whse. Activity Line":
          PAGE.RUN(0,RgstrdWhseActivLine);
        DATABASE::"Service Item Line":
          PAGE.RUN(0,ServItemLine);
        DATABASE::Loaner:
          PAGE.RUN(0,Loaner);
        DATABASE::"Service Item":
          PAGE.RUN(0,ServiceItem);
        DATABASE::"Service Item Component":
          PAGE.RUN(0,ServiceItemComponent);
        DATABASE::"Service Contract Line":
          PAGE.RUN(0,ServContractLine);
        DATABASE::"Filed Contract Line":
          PAGE.RUN(0,FiledContractLine);
        DATABASE::"Serial No. Information":
          PAGE.RUN(0,SerialNoInfo);
        DATABASE::"Lot No. Information":
          PAGE.RUN(0,LotNoInfo);
        DATABASE::"Warehouse Entry":
          PAGE.RUN(0,WhseEntry);
        DATABASE::"Posted Whse. Shipment Line":
          PAGE.RUN(0,TempPostedWhseShptLine);
        DATABASE::"Posted Whse. Receipt Line":
          PAGE.RUN(0,TempPostedWhseRcptLine);
        DATABASE::"Posted Invt. Put-away Line":
          PAGE.RUN(0,PostedInvtPutAwayLine);
        DATABASE::"Posted Invt. Pick Line":
          PAGE.RUN(0,PostedInvtPickLine);
        DATABASE::"Purch. Rcpt. Header":
          PAGE.RUN(0,TempPurchRcptHeader);
        DATABASE::"Purch. Inv. Header":
          PAGE.RUN(0,TempPurchInvHeader);
        DATABASE::"Purch. Cr. Memo Hdr.":
          PAGE.RUN(0,TempPurchCrMemoHeader);
        DATABASE::"Sales Shipment Header":
          PAGE.RUN(0,TempSalesShptHeader);
        DATABASE::"Sales Invoice Header":
          PAGE.RUN(0,TempSalesInvHeader);
        DATABASE::"Sales Cr.Memo Header":
          PAGE.RUN(0,TempSalesCrMemoHeader);
        DATABASE::"Service Shipment Header":
          PAGE.RUN(0,TempServShptHeader);
        DATABASE::"Service Invoice Header":
          PAGE.RUN(0,TempServInvHeader);
        DATABASE::"Service Cr.Memo Header":
          PAGE.RUN(0,TempServCrMemoHeader);
        DATABASE::"Transfer Shipment Header":
          PAGE.RUN(0,TempTransShipHeader);
        DATABASE::"Return Shipment Header":
          PAGE.RUN(0,TempReturnShipHeader);
        DATABASE::"Return Receipt Header":
          PAGE.RUN(0,TempReturnRcptHeader);
        DATABASE::"Transfer Receipt Header":
          PAGE.RUN(0,TempTransRcptHeader);
        DATABASE::"Production Order":
          PAGE.RUN(0,TempProdOrder);
        DATABASE::"Sales Line":
          PAGE.RUN(0,TempSalesLine);
        DATABASE::"Service Line":
          PAGE.RUN(0,TempServLine);
        DATABASE::"Purchase Line":
          PAGE.RUN(0,TempPurchLine);
        DATABASE::"Requisition Line":
          PAGE.RUN(0,TempReqLine);
        DATABASE::"Item Journal Line":
          PAGE.RUN(0,TempItemJnlLine);
        DATABASE::"Prod. Order Line":
          PAGE.RUN(0,TempProdOrderLine);
        DATABASE::"Prod. Order Component":
          PAGE.RUN(0,TempProdOrderComp);
        DATABASE::"Planning Component":
          PAGE.RUN(0,TempPlanningComponent);
        DATABASE::"Transfer Line":
          PAGE.RUN(0,TempTransLine);
        DATABASE::"Job Ledger Entry":
          PAGE.RUN(0,TempJobLedgEntry);
        DATABASE::"Assembly Line":
          PAGE.RUN(0,TempAssemblyLine);
        DATABASE::"Assembly Header":
          PAGE.RUN(0,TempAssemblyHeader);
        DATABASE::"Posted Assembly Line":
          PAGE.RUN(0,TempPostedAssemblyLine);
        DATABASE::"Posted Assembly Header":
          PAGE.RUN(0,TempPostedAssemblyHeader);
        //**4PS.sn
        DATABASE::"Project Inventory Entry":
          PAGE.RUN(0,TempProjectInventoryEntry);
        DATABASE::"NS Item Tracking Entry": //**4PS.sn DP000121
          BEGIN
            IF NSItemTrackingEntry.FINDSET THEN
              REPEAT
                ItemTrackingDocMgt.TransferNSItemTracking(NSItemTrackingEntry, TempItemLedgEntry);
                TempItemLedgEntry."Entry No." := NSItemTrackingEntry."Entry No.";
                TempItemLedgEntry.INSERT;
              UNTIL NSItemTrackingEntry.NEXT = 0;
            PAGE.RUNMODAL(PAGE::"Item Tracking Entries",TempItemLedgEntry);
          END;
        DATABASE::"Posted Proj. Del. Note Header":
          PAGE.RUN(0,TempPostedProjDeliveryNote);
        //**4PS.en
      END;

      OnAfterShow(TableNo,TempRecordBuffer);
    END;

    LOCAL PROCEDURE InsertBufferRecFromItemLedgEntry@121();
    BEGIN
      WITH ItemLedgEntry DO
        InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
    END;

    LOCAL PROCEDURE InsertBufferRecFromReservEntry@122();
    BEGIN
      WITH ReservEntry DO
        InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
    END;

    LOCAL PROCEDURE InsertBufferRec@3(RecRef@1000 : RecordRef;SerialNo@1007 : Code[50];LotNo@1006 : Code[50];ItemNo@1005 : Code[20];Variant@1004 : Code[10]);
    VAR
      KeyFldRef@1003 : FieldRef;
      KeyRef1@1002 : KeyRef;
      i@1001 : Integer;
    BEGIN
      IF (SerialNo = '') AND (LotNo = '') THEN
        EXIT;

      TempRecordBuffer.SETRANGE("Record Identifier",RecRef.RECORDID);
      TempRecordBuffer.SETRANGE("Serial No.",SerialNo);
      TempRecordBuffer.SETRANGE("Lot No.",LotNo);
      TempRecordBuffer.SETRANGE("Item No.",ItemNo);
      TempRecordBuffer.SETRANGE("Variant Code",Variant);
      IF NOT TempRecordBuffer.FIND('-') THEN BEGIN
        TempRecordBuffer.INIT;
        TempRecordBuffer."Entry No." := LastEntryNo + 10;
        LastEntryNo := TempRecordBuffer."Entry No.";

        TempRecordBuffer."Table No." := RecRef.NUMBER;
        TempRecordBuffer."Table Name" := GetTableCaption(RecRef.NUMBER);
        TempRecordBuffer."Record Identifier" := RecRef.RECORDID;
        TempRecordBuffer."Search Record ID" := FORMAT(TempRecordBuffer."Record Identifier");

        KeyRef1 := RecRef.KEYINDEX(1);
        FOR i := 1 TO KeyRef1.FIELDCOUNT DO BEGIN
          KeyFldRef := KeyRef1.FIELDINDEX(i);
          IF i = 1 THEN
            TempRecordBuffer."Primary Key" :=
              STRSUBSTNO('%1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER))
          ELSE
            IF MAXSTRLEN(TempRecordBuffer."Primary Key") >
               STRLEN(TempRecordBuffer."Primary Key") +
               STRLEN(STRSUBSTNO(', %1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER)))
            THEN
              TempRecordBuffer."Primary Key" :=
                COPYSTR(
                  TempRecordBuffer."Primary Key" +
                  STRSUBSTNO(', %1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER)),
                  1,MAXSTRLEN(TempRecordBuffer."Primary Key"));
          CASE i OF
            1:
              BEGIN
                TempRecordBuffer."Primary Key Field 1 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 1 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              END;
            2:
              BEGIN
                TempRecordBuffer."Primary Key Field 2 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 2 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              END;
            3:
              BEGIN
                TempRecordBuffer."Primary Key Field 3 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 3 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              END;
          END;
        END;

        TempRecordBuffer."Serial No." := SerialNo;
        TempRecordBuffer."Lot No." := LotNo;
        TempRecordBuffer."Item No." := ItemNo;
        TempRecordBuffer."Variant Code" := Variant;

        TempRecordBuffer.INSERT;
      END;
    END;

    [External]
    PROCEDURE Collect@2(VAR RecordBuffer@1000 : TEMPORARY Record 6529);
    BEGIN
      RecordBuffer.RESET;
      RecordBuffer.DELETEALL;

      TempRecordBuffer.RESET;
      IF TempRecordBuffer.FIND('-') THEN
        REPEAT
          RecordBuffer := TempRecordBuffer;
          RecordBuffer.INSERT;
        UNTIL TempRecordBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE GetTableCaption@12(TableNumber@1001 : Integer) : Text[80];
    VAR
      AllObjWithCaption@1000 : Record 2000000058;
    BEGIN
      AllObjWithCaption.RESET;
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::TableData);
      AllObjWithCaption.SETRANGE("Object ID",TableNumber);
      IF AllObjWithCaption.FINDFIRST THEN
        EXIT(AllObjWithCaption."Object Caption");

      EXIT('');
    END;

    LOCAL PROCEDURE FormatValue@17(VAR FldRef@1000 : FieldRef;TableNumber@1005 : Integer) : Text[250];
    VAR
      Field@1004 : Record 2000000041;
      OptionNo@1001 : Integer;
      OptionStr@1002 : Text[1024];
      i@1003 : Integer;
    BEGIN
      GetField(TableNumber,FldRef.NUMBER,Field);
      IF Field.Type = Field.Type::Option THEN BEGIN
        OptionNo := FldRef.VALUE;
        OptionStr := FORMAT(FldRef.OPTIONCAPTION);
        FOR i := 1 TO OptionNo DO
          OptionStr := COPYSTR(OptionStr,STRPOS(OptionStr,',') + 1);
        IF STRPOS(OptionStr,',') > 0 THEN
          IF STRPOS(OptionStr,',') = 1 THEN
            OptionStr := ''
          ELSE
            OptionStr := COPYSTR(OptionStr,1,STRPOS(OptionStr,',') - 1);
        EXIT(OptionStr);
      END;
      EXIT(FORMAT(FldRef.VALUE));
    END;

    LOCAL PROCEDURE GetField@7(TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR Field2@1003 : Record 2000000041);
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      IF NOT TempField.GET(TableNumber,FieldNumber) THEN BEGIN
        Field.GET(TableNumber,FieldNumber);
        TempField := Field;
        TempField.INSERT;
      END;
      Field2 := TempField;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShow@14(TableID@1000 : Integer;VAR TempRecordBuffer@1001 : TEMPORARY Record 6529);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFindTrackingRecordsForItemLedgerEntry@18(VAR ItemLedgerEntry@1000 : Record 32);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFindItemLedgerEntryOnBeforeCaseDocumentType@16(VAR ItemLedgerEntry@1000 : Record 32;RecRef@1001 : RecordRef;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFindReservEntryOnBeforeCaseDocumentType@21(VAR ReservationEntry@1000 : Record 337;RecRef@1002 : RecordRef;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE FindNSItemTrackingEntry@1100525000(SerialNoFilter@1100525003 : Text;LotNoFilter@1100525002 : Text;ItemNoFilter@1100525001 : Text;VariantFilter@1100525000 : Text);
    VAR
      FPSLicenseManagement@1100525004 : Codeunit 11229289;
      PurchRcptHeader@1100525005 : Record 120;
      PostedProjectDeliveryNote@1100525006 : Record 11012674;
    BEGIN
      //**4PS
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(NSItemTrackingEntry) THEN
        EXIT;

      WITH NSItemTrackingEntry DO BEGIN
        RESET;
        IF LotNoFilter <> '' THEN
          IF SETCURRENTKEY("Lot No.") THEN;
        IF SerialNoFilter <> '' THEN
          IF SETCURRENTKEY("Serial No.") THEN;
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Serial No.",SerialNoFilter);
        SETFILTER("Item No.",ItemNoFilter);
        SETFILTER("Variant Code",VariantFilter);
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(NSItemTrackingEntry);
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            CASE "Document Type" OF
              "Document Type"::"Purchase Receipt":
                IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PurchRcptHeader) THEN
                  IF PurchRcptHeader.GET("Document No.") THEN BEGIN
                    RecRef.GETTABLE(PurchRcptHeader);
                    InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                    TempPurchRcptHeader := PurchRcptHeader;
                    IF TempPurchRcptHeader.INSERT THEN;
                  END;
              "Document Type"::"Project Delivery Note":
                IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PostedProjectDeliveryNote) THEN
                  IF PostedProjectDeliveryNote.GET("Document No.") THEN BEGIN
                    RecRef.GETTABLE(PostedProjectDeliveryNote);
                    InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                    TempPostedProjDeliveryNote := PostedProjectDeliveryNote;
                    IF TempPostedProjDeliveryNote.INSERT THEN;
                  END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

