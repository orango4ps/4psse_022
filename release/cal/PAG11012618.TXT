OBJECT Page 11012618 Rate components
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Tarifkomponenten;
               ENU=Rate components;
               NLD=Tariefcomponenten;
               NOR=Satskomponenter;
               SVE=Avgiftskomponenter];
    SourceTable=Table11012585;
    DataCaptionFields=Rental Type,Plant Type,Plant No.,Starting Date;
    PageType=List;
    OnInit=BEGIN
             "Base AmountEditable" := TRUE;
             PercentageEditable := TRUE;
             "Pass on PercentageEditable" := TRUE;
           END;

    OnOpenPage=BEGIN
                 PlantSetupRec.GET;
                 IF PlantSetupRec."Type Division of Rate Comp." = PlantSetupRec."Type Division of Rate Comp."::DiffOnResult THEN
                   PlantSetupRec.TESTFIELD("Rate Component Result");
               END;

    OnAfterGetRecord=BEGIN
                       CalcfieldRateUnit();
                       CalculateRate();
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210190032;1 ;ActionGroup;
                      CaptionML=[DEU=F&unktion;
                                 ENU=F&unctions;
                                 NLD=F&uncties;
                                 NOR=Fu&nksjon;
                                 SVE=F&unktioner] }
      { 1210190034;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[DEU=Standardtarifkomponenten kopieren;
                                 ENU=Copy Standard Rate Components;
                                 NLD=Standaard tariefcomponenten kopi‰ren;
                                 NOR=Kopier standardsats Í komponenter;
                                 SVE=Kopiera standardavgiftskomponenter];
                      Image=Costs;
                      OnAction=VAR
                                 Inserted@1100525001 : Boolean;
                               BEGIN
                                 IF NOT CONFIRM(Text001, TRUE) THEN
                                   EXIT;

                                 StandardRateCompRec.RESET;
                                 IF PlantSetupRec."Rate Component Result" <> '' THEN
                                   StandardRateCompRec.SETFILTER(Code, '<>%1', PlantSetupRec."Rate Component Result");
                                 IF NOT StandardRateCompRec.FIND('-') THEN
                                   EXIT;

                                 Inserted := FALSE;
                                 REPEAT
                                   RateCompRec.INIT;
                                   RateCompRec."Rental Type" := "Rental Type";
                                   RateCompRec."Plant Type" := "Plant Type";
                                   RateCompRec."Plant No." := "Plant No.";
                                   RateCompRec."Starting Date" := "Starting Date";
                                   RateCompRec."Rental Rate Code" := StandardRateCompRec.Code;
                                   RateCompRec."Internal/External" := StandardRateCompRec."Internal/External";
                                   RateCompRec.Percentage := StandardRateCompRec.Percentage;
                                   RateCompRec."Pass on Percentage" := StandardRateCompRec."Pass on Percentage";
                                   RateCompRec.VALIDATE("Based on", StandardRateCompRec."Based on");
                                   IF RateCompRec.INSERT THEN
                                     Inserted := TRUE;
                                 UNTIL StandardRateCompRec.NEXT = 0;
                                 IF Inserted THEN
                                   RateCompRec.UpdateSurcharges(RateCompRec, FALSE);  //*19210
                               END;
                                }
      { 1210190035;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[DEU=Basisbetr„ge aktualisieren;
                                 ENU=Update Base Amounts;
                                 NLD=Basisbedragen bijwerken;
                                 NOR=Oppdater grunnbel›p;
                                 SVE=Uppdatera basbelopp];
                      Image=Costs;
                      OnAction=VAR
                                 lvRateCompRec@1210190000 : Record 11012585;
                               BEGIN
                                 IF NOT CONFIRM(Text002, TRUE) THEN
                                   EXIT;

                                 lvRateCompRec.SETRANGE("Rental Type", "Rental Type");
                                 lvRateCompRec.SETRANGE("Plant Type", "Plant Type");
                                 lvRateCompRec.SETRANGE("Plant No.", "Plant No.");
                                 lvRateCompRec.SETRANGE("Starting Date", "Starting Date");
                                 IF NOT lvRateCompRec.FIND('-') THEN
                                   EXIT;

                                 REPEAT
                                   lvRateCompRec.CheckRateCompResult();
                                   IF (NOT (lvRateCompRec."Based on" IN ["Based on"::None, "Based on"::"Base Amount"])) AND
                                      (NOT lvRateCompRec.IsSurcharge())
                                   THEN BEGIN
                                     lvRateCompRec.GetDefaultBaseAmount();
                                     lvRateCompRec.CalculateAmount();
                                     lvRateCompRec.MODIFY;
                                   END;
                                 UNTIL lvRateCompRec.NEXT = 0;
                                 lvRateCompRec.UpdateSurcharges(lvRateCompRec, FALSE);  //*19210
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190000;1;Group  ;
                GroupType=Repeater }

    { 1210190001;2;Field  ;
                SourceExpr="Rental Rate Code";
                OnLookup=VAR
                           lvStandRateCompRec@1210190000 : Record 11012584;
                           lvStandRateCompFrm@1210190001 : Page 11012617;
                         BEGIN
                           lvStandRateCompRec.FILTERGROUP(9);
                           IF PlantSetupRec."Rate Component Result" <> '' THEN
                             lvStandRateCompRec.SETFILTER(Code, '<>%1', PlantSetupRec."Rate Component Result");
                           lvStandRateCompRec.FILTERGROUP(0);
                           lvStandRateCompRec.Code := "Rental Rate Code";
                           lvStandRateCompFrm.SetDefaultSelection(Rec, TRUE);
                           lvStandRateCompFrm.SETRECORD(lvStandRateCompRec);
                           lvStandRateCompFrm.SETTABLEVIEW(lvStandRateCompRec);
                           lvStandRateCompFrm.LOOKUPMODE(TRUE);
                           IF lvStandRateCompFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             lvStandRateCompFrm.GETRECORD(lvStandRateCompRec);
                             VALIDATE("Rental Rate Code", lvStandRateCompRec.Code);
                           END ELSE
                             CurrPage.UPDATE;
                         END;
                          }

    { 1210190003;2;Field  ;
                DrillDown=No;
                SourceExpr=Description }

    { 1210190005;2;Field  ;
                SourceExpr="Internal/External";
                OnValidate=BEGIN
                             InternalExternalOnAfterValidat;
                           END;
                            }

    { 1210190013;2;Field  ;
                SourceExpr="Based on";
                OnValidate=BEGIN
                             BasedonOnAfterValidate;
                             UpdateEditable;
                           END;
                            }

    { 1210190017;2;Field  ;
                SourceExpr="Base Amount";
                Editable="Base AmountEditable";
                OnValidate=BEGIN
                             BaseAmountOnAfterValidate;
                           END;
                            }

    { 1210190019;2;Field  ;
                SourceExpr=Percentage;
                Editable=PercentageEditable;
                OnValidate=BEGIN
                             PercentageOnAfterValidate;
                           END;
                            }

    { 1210190015;2;Field  ;
                SourceExpr="Pass on Percentage";
                Editable="Pass on PercentageEditable";
                OnValidate=BEGIN
                             PassonPercentageOnAfterValidat;
                           END;
                            }

    { 1210190007;2;Field  ;
                SourceExpr=Amount;
                OnValidate=BEGIN
                             AmountOnAfterValidate;
                           END;
                            }

    { 1100485000;2;Field  ;
                CaptionML=[DEU=Tarifeinheit;
                           ENU=Rate Unit of Measure;
                           NLD=Tariefeenheid;
                           NOR=M†leenhet for Avgift;
                           SVE=Avgiftsenhet];
                SourceExpr=CalcfieldRateUnit() }

    { 1210190002;0;Container;
                ContainerType=FactBoxArea }

    { 1210190004;1;Part   ;
                SubPageLink=Rental Type=FIELD(Rental Type),
                            Plant Type=FIELD(Plant Type),
                            Plant No.=FIELD(Plant No.),
                            Starting Date=FIELD(Starting Date);
                PagePartID=Page11130031;
                PartType=Page }

  }
  CODE
  {
    VAR
      Text001@1210190001 : TextConst 'DEU=M”chten Sie alle (noch nicht vorhandenen) Standardtarifkomponenten kopieren?;ENU=Do you want to copy all  (not present yet) Standard Rate Components?;NLD=Wilt u alle (nog niet aanwezige) standaard tariefcomponenten kopi‰ren?;NOR=Vil du kopiere alle (enda ikke tilgjengelige) standardsatskomponenter?;SVE=Vill du kopiera alla („nnu inte tillg„ngliga) standardavgiftskomponenter?';
      GLSetup@1100485000 : Record 98;
      PlantSetupRec@1100485001 : Record 11012550;
      RateCompRec@1210190002 : Record 11012585;
      StandardRateCompRec@1210190000 : Record 11012584;
      RentalRateRec@1210190005 : Record 11012567;
      InternalRate@1210190007 : Decimal;
      ExternalRate@1210190004 : Decimal;
      Text002@1210190008 : TextConst 'DEU=M”chten Sie die Basisbetr„ge mit dem Standardwert aktualisieren?;ENU=Do you want to update the base amounts with the default value?;NLD=Wilt u de basisbedragen bijwerken met de default waarde?;NOR=Vil du oppdatere basisbel›pet med standardverdien?;SVE=Vill du uppdatera basbeloppen med standardv„rdet?';
      "Base AmountEditable"@1100409000 : Boolean INDATASET;
      PercentageEditable@1100409001 : Boolean INDATASET;
      "Pass on PercentageEditable"@1100409002 : Boolean INDATASET;

    PROCEDURE CalculateRate@1210190001();
    BEGIN
      IF "Rental Rate Code" = '' THEN
        EXIT;

      CALCFIELDS("Internal Rate Components", "External Rate Components");
      IF NOT RentalRateRec.GET("Rental Type", "Plant Type", "Plant No.", "Starting Date") THEN
        RentalRateRec.INIT;

      InternalRate := "Internal Rate Components";
      ExternalRate := "External Rate Components";
      IF (RentalRateRec."Expected Occupation Perc." <> 0) THEN BEGIN
        InternalRate := InternalRate * (100 / RentalRateRec."Expected Occupation Perc.");
        ExternalRate := ExternalRate * (100 / RentalRateRec."Expected Occupation Perc.");
      END;
      GLSetup.GET;
      InternalRate := ROUND(InternalRate, GLSetup."Unit-Amount Rounding Precision");
      ExternalRate := ROUND(ExternalRate, GLSetup."Unit-Amount Rounding Precision");
    END;

    LOCAL PROCEDURE InternalExternalOnAfterValidat@19032584();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE BasedonOnAfterValidate@19045661();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalculateRate();
    END;

    LOCAL PROCEDURE BaseAmountOnAfterValidate@19052595();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalculateRate();
    END;

    LOCAL PROCEDURE PercentageOnAfterValidate@19078146();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalculateRate();
    END;

    LOCAL PROCEDURE PassonPercentageOnAfterValidat@19078094();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalculateRate();
    END;

    LOCAL PROCEDURE AmountOnAfterValidate@19024931();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalculateRate();
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      CalcfieldRateUnit();
      CalculateRate();
      UpdateEditable;
    END;

    PROCEDURE UpdateEditable@1100409000();
    BEGIN
      "Base AmountEditable" := ("Based on" <> "Based on"::None) AND (NOT IsSurcharge());
      PercentageEditable := ("Based on" <> "Based on"::None);
      "Pass on PercentageEditable" :=  ("Based on" <> "Based on"::None) AND (NOT IsSurcharge());
    END;

    BEGIN
    END.
  }
}

