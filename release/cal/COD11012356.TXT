OBJECT Codeunit 11012356 Report Parameter Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE StoreReportParameter@1100409001(IReportID@1100409004 : Integer;IName@1100409000 : Code[50];IValue@1100409001 : Variant;IType@1100409002 : ' ,Integer,Text,Code,Decimal,,Boolean,Date,Time,,,DateFormula,,BigInteger,Duration,GUID,RecordID,DateTime');
    VAR
      ReportParameter@1100409003 : Record 11071867;
    BEGIN
      ReportParameter."Report ID" := IReportID;
      ReportParameter."User ID" := USERID;
      ReportParameter."Session ID" := SESSIONID;
      ReportParameter.Name := IName;

      IF IType <> IType::" " THEN
        ReportParameter.Type := IType -1
      ELSE BEGIN
        CASE TRUE OF // Auto detect type. Types BigInteger, Duration, GUID, RecordID, DateTime cannot be detected
          IValue.ISINTEGER:
            ReportParameter.Type := ReportParameter.Type::Integer;
          IValue.ISTEXT:
            ReportParameter.Type := ReportParameter.Type::Text;
          IValue.ISCODE:
            ReportParameter.Type := ReportParameter.Type::Code;
          IValue.ISDECIMAL:
            ReportParameter.Type := ReportParameter.Type::Decimal;
          IValue.ISBOOLEAN:
            ReportParameter.Type := ReportParameter.Type::Boolean;
          IValue.ISDATE:
            ReportParameter.Type := ReportParameter.Type::Date;
          IValue.ISTIME:
            ReportParameter.Type := ReportParameter.Type::Time;
          IValue.ISDATEFORMULA:
            ReportParameter.Type := ReportParameter.Type::DateFormula;
        END;
      END;

      CASE ReportParameter.Type OF
        ReportParameter.Type::Integer:
          ReportParameter."Integer Value" := IValue;
        ReportParameter.Type::Text:
          ReportParameter."Text Value" := COPYSTR(IValue, 1, MAXSTRLEN(ReportParameter."Text Value"));
        ReportParameter.Type::Code:
          ReportParameter."Code Value" := COPYSTR(IValue, 1, MAXSTRLEN(ReportParameter."Code Value"));
        ReportParameter.Type::Decimal:
          ReportParameter."Decimal Value" := IValue;
        ReportParameter.Type::Boolean:
          ReportParameter."Boolean Value" := IValue;
        ReportParameter.Type::Date:
          ReportParameter."Date Value" := IValue;
        ReportParameter.Type::Time:
          ReportParameter."Time Value" := IValue;
        ReportParameter.Type::DateFormula:
          ReportParameter."DateFormula Value" := IValue;
        ReportParameter.Type::BigInteger:
          ReportParameter."BigInteger Value" := IValue;
        ReportParameter.Type::Duration:
          ReportParameter."Duration Value" := IValue;
        ReportParameter.Type::GUID:
          ReportParameter."GUID Value" := IValue;
        ReportParameter.Type::RecordID:
          ReportParameter."RecordID Value" := IValue;
        ReportParameter.Type::DateTime:
          ReportParameter."DateTime Value" := IValue;
      END;
      ReportParameter.INSERT(TRUE);
    END;

    PROCEDURE RetrieveReportParameter@1100409014(IReportID@1100409004 : Integer;IName@1100409000 : Code[50];VAR OValue@1100409001 : Variant) : Boolean;
    VAR
      ReportParameter@1100409003 : Record 11071867;
    BEGIN
      ReportParameter.SETRANGE("Report ID", IReportID);
      ReportParameter.SETRANGE("User ID", USERID);
      ReportParameter.SETRANGE("Session ID", SESSIONID);
      ReportParameter.SETRANGE(Name, IName);
      IF NOT ReportParameter.FINDSET THEN
        EXIT(FALSE);

      CASE ReportParameter.Type OF
        ReportParameter.Type::Integer:
          OValue := ReportParameter."Integer Value";
        ReportParameter.Type::Text:
          OValue := ReportParameter."Text Value";
        ReportParameter.Type::Code:
          OValue := ReportParameter."Code Value";
        ReportParameter.Type::Decimal:
          OValue := ReportParameter."Decimal Value";
        ReportParameter.Type::Boolean:
          OValue := ReportParameter."Boolean Value";
        ReportParameter.Type::Date:
          OValue := ReportParameter."Date Value";
        ReportParameter.Type::Time:
          OValue := ReportParameter."Time Value";
        ReportParameter.Type::DateFormula:
          OValue := ReportParameter."DateFormula Value";
        ReportParameter.Type::BigInteger:
          OValue := ReportParameter."BigInteger Value";
        ReportParameter.Type::Duration:
          OValue := ReportParameter."Duration Value";
        ReportParameter.Type::GUID:
          OValue := ReportParameter."GUID Value";
        ReportParameter.Type::RecordID:
          OValue := ReportParameter."RecordID Value";
        ReportParameter.Type::DateTime:
          OValue := ReportParameter."DateTime Value";
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetrieveReportParamInteger@1100409000(IReportID@1100409004 : Integer;IName@1100409000 : Code[50];VAR OValue@1100409001 : Integer) : Boolean;
    VAR
      Value@1100409002 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamText@1100409007(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : Text[250]) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamCode@1100409010(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : Text[250]) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamDecimal@1100409016(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : Decimal) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamBoolean@1100409020(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : Boolean) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamDate@1100409023(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : Date) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamTime@1100409026(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : Time) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamDateFormula@1100409027(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : DateFormula) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamBigInteger@1100409030(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : BigInteger) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamDuration@1100409032(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : Duration) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamGUID@1100409033(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : GUID) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamRecordID@1100409034(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : RecordID) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RetrieveReportParamDateTime@1100409035(IReportID@1100409002 : Integer;IName@1100409001 : Code[50];VAR OValue@1100409000 : DateTime) : Boolean;
    VAR
      Value@1100409003 : Variant;
    BEGIN
      IF RetrieveReportParameter(IReportID, IName, Value) THEN BEGIN
        OValue := Value;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE FlushReportParameters@1100409017(IReportID@1100409000 : Integer);
    VAR
      ReportParameter@1100409001 : Record 11071867;
    BEGIN
      ReportParameter.SETRANGE("Report ID", IReportID);
      ReportParameter.SETRANGE("User ID", USERID);
      ReportParameter.SETRANGE("Session ID", SESSIONID);
      ReportParameter.DELETEALL(TRUE);
    END;

    PROCEDURE GetReportID@1100528400(CurrReportObjectID@1100528400 : Text) : Integer;
    VAR
      ReportIDText@1100528403 : Text;
      ReportID@1100528404 : Integer;
      I@1100528402 : Integer;
    BEGIN
      FOR I := 1 TO STRLEN(CurrReportObjectID) DO
        IF CurrReportObjectID[I] IN ['0'..'9'] THEN
          ReportIDText := STRSUBSTNO('%1%2', ReportIDText, CurrReportObjectID[I]);

      IF EVALUATE(ReportID, ReportIDText) THEN
        EXIT(ReportID);
    END;

    BEGIN
    {
      This codeunit can be used for passing parameters to a report defined in a report selection.
      1. Use StoreReportParameter before calling the report
      2. Use RetrieveReportParam* in OnPreReport due to possible use of Save Values on Report
      3. Use FlushReportParameters after calling report
    }
    END.
  }
}

