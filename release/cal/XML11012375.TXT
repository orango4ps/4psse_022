OBJECT XMLport 11012375 Export Hours (External)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Hours;
               SVE=Exportera timmar];
    Direction=Export;
    PreserveWhiteSpace=Yes;
    OnInitXMLport=BEGIN
                    HumanResourcesSetup.GET;
                    HumanResourcesSetup.TESTFIELD("Exchange Salary Application");
                    PathText := HumanResourcesSetup."Pathname Files to Salary";

                    IF HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Multipay THEN BEGIN
                      IF Alphanumeric(HumanResourcesSetup."Customer No. (ADP/Raet)") THEN
                        ERROR(
                        Text002,
                        HumanResourcesSetup.FIELDCAPTION("Customer No. (ADP/Raet)"), HumanResourcesSetup."Customer No. (ADP/Raet)");

                      IF (HumanResourcesSetup."Customer No. (ADP/Raet)" < '00001') OR
                         (HumanResourcesSetup."Customer No. (ADP/Raet)" > '99999') THEN
                        ERROR(
                        Text003,
                        HumanResourcesSetup.FIELDCAPTION("Customer No. (ADP/Raet)"), HumanResourcesSetup."Customer No. (ADP/Raet)", '00001-99999');

                      ADPfile := Text004 + Fill(HumanResourcesSetup."Customer No. (ADP/Raet)",5,'0','<') + '.001';
                    END;

                    IF HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Payroll THEN BEGIN
                      HumanResourcesSetup.TESTFIELD("Receiving Company (Payroll)");
                      HumanResourcesSetup.TESTFIELD("Structure Part (Payroll)");
                    END;
                  END;

    OnPreXMLport=BEGIN
                   IF (DocumentCde = '') AND ((gvStartDate=0D) OR (gvEndDate=0D)) THEN
                     ERROR(Text006);

                   CASE HumanResourcesSetup."Salary Application" OF
                     HumanResourcesSetup."Salary Application"::Multipay:
                       BEGIN
                         CREATE(FileSystem, FALSE, TRUE);
                         IF NOT FileSystem.FolderExists(PathText + DocumentCde) THEN BEGIN
                           FileSystem.CreateFolder(PathText + DocumentCde);
                         END;
                         CLEAR(FileSystem);

                         PathText := PathText + DocumentCde + '\';
                         currXMLport.FILENAME(PathText + ADPfile);
                       END;
                     HumanResourcesSetup."Salary Application"::UNIT4:
                       currXMLport.FILENAME(PathText + DocumentCde + '.csv');
                     HumanResourcesSetup."Salary Application"::Raet:
                       currXMLport.FILENAME(PathText + FileName);
                     HumanResourcesSetup."Salary Application"::AFAS:
                       BEGIN
                         IF FileName = '' THEN
                           ERROR(Text039);
                         currXMLport.FILENAME(PathText + FileName);
                       END;
                     ELSE
                       currXMLport.FILENAME(PathText + DocumentCde + Text011);
                   END;

                   IF FileMgt.ClientFileExists(currXMLport.FILENAME) THEN
                     IF NOT FileMgt.ExistingFileMustBeReplaced(currXMLport.FILENAME, TRUE) THEN
                       ERROR('');

                   FillBufferHourExport;
                 END;

    OnPostXMLport=VAR
                    lvFile@1100528400 : File;
                    ServerTempFileName@1100528401 : Text[250];
                  BEGIN
                    IF HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Multipay THEN BEGIN
                      ServerTempFileName := FileMgt.ServerTempFileName('txt');
                      lvFile.TEXTMODE(TRUE);
                      lvFile.CREATE(ServerTempFileName);
                      lvFile.WRITE(ADPfile);
                      lvFile.CLOSE;
                      FileMgt.DownloadToFile(
                        ServerTempFileName, PathText + Text012);
                      ERASE(ServerTempFileName);
                    END;

                    BufferHourExport.DELETEALL;
                    COMMIT;

                    IF LineNo = 0 THEN
                      MESSAGE(Text014)
                    ELSE
                      MESSAGE(Text015,LineNo);
                  END;

    Format=Variable Text;
    FieldDelimiter=<None>;
    FieldSeparator=<None>;
  }
  ELEMENTS
  {
    { [{C14EEF27-9E2D-4ABF-B25B-7078B5F0EC65}];  ;Root                ;Element ;Text     }

    { [{141EE99A-6C55-4DB3-8661-473BF4E52890}];1 ;BufferHourExport    ;Element ;Table   ;
                                                  SourceTable=Table11012042;
                                                  SourceTableView=SORTING(Field10);
                                                  Export::OnAfterGetRecord=VAR
                                                                             RecRef@1100528400 : RecordRef;
                                                                           BEGIN
                                                                             RecRef.GETTABLE("Buffer Hour Export");
                                                                             XMLportStatusDialogMgt.ShowExportStatus(RecRef);
                                                                           END;
                                                                            }

    { [{89BAAE01-F107-46B4-8896-FF1A359805FC}];2 ;Text                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Buffer Hour Export::Text;
                                                  Width=250 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      FileSystem@1100528432 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      HumanResourcesSetup@1100528431 : Record 5218;
      CompanyPaymasterRec@1100528430 : Record 11012375;
      HoursExportRec@1100528429 : Record 11012041;
      BufferHourExport@1100528428 : Record 11012042;
      PostedHourLine@1100528427 : Record 11012085;
      ProjRec@1100528426 : Record 11072003;
      EmplRec@1100528425 : Record 5200;
      WageCompRec@1100528424 : Record 11012014;
      CostCodeRec@1100528423 : Record 11012083;
      EmployerRec@1100528422 : Record 11012013;
      XMLportStatusDialogMgt@1100528469 : Codeunit 11130006;
      FileMgt@1100528477 : Codeunit 419;
      PathText@1100528421 : Text[100];
      FileName@1100528420 : Text[250];
      QuantityTxt@1100528419 : Text[10];
      QuantDec@1100528418 : Decimal;
      LineNo@1100528417 : Integer;
      SkipHourLine@1100528416 : Boolean;
      R1@1100528415 : Text[10];
      R2@1100528414 : Text[10];
      ADPfile@1100528412 : Text[30];
      DocumentCde@1100528411 : Code[20];
      EmployerCde@1100528410 : Code[20];
      ProjectAndElementLength@1100528409 : Integer;
      ElementTxt@1100528408 : Text[30];
      ProjectTxt@1100528407 : Text[30];
      gvStartDate@1100528406 : Date;
      gvEndDate@1100528405 : Date;
      AllCompanies@1100528404 : Boolean;
      DiffPeriodADP@1100528403 : Code[2];
      NotExportedLinesOnly@1100528402 : Boolean;
      PostPaymentADP@1100528401 : Boolean;
      ExportDateTime@1100528400 : DateTime;
      Text002@1100528466 : TextConst 'ENU=%1 %2 is an alphanummeric code. Multipay only allows nummeric codes. Check Project Setup.;SVE=%1 %2 „r en alfanumerisk kod. Endast numeriska koder till†ts f”r Multipay. Kontrollera projektinst„llning.';
      Text003@1100528465 : TextConst 'ENU=%1 %2 is not within allowed range %3 for Multipay. Check Project Setup.;SVE=%1 %2 ligger inte inom till†tet intervall %3 f”r Multipay. Kontrollera projektinst„llning.';
      Text004@1100528464 : TextConst 'ENU=M00;SVE=M00';
      Text005@1100528463 : TextConst 'ENU=Company %1 not present for hour accounting export in table %2.;SVE=F”retag %1 „r inte tillg„ngligt f”r timbokf”ringsexport i tabell %2.';
      Text006@1100528462 : TextConst 'ENU=Document Number should be filled.;SVE=Dokumentnumret ska fyllas i.';
      Text011@1100528461 : TextConst 'ENU=.txt;SVE=.txt';
      Text012@1100528460 : TextConst 'ENU=ID;SVE=ID';
      Text014@1100528458 : TextConst 'ENU=No Hour lines Exported.;SVE=Inga timrader har exporterats.';
      Text015@1100528457 : TextConst 'ENU=Export Finished. There are %1 hour lines exported.;SVE=Export f„rdig. %1 timrader har exporterats.';
      Text017@1100528455 : TextConst 'ENU=No hours present for Document %1.;SVE=Det finns inga timmar f”r dokumentet %1.';
      Text018@1100528454 : TextConst 'ENU=ZS;SVE=ZS';
      Text019@1100528453 : TextConst 'ENU=W;SVE=W';
      Text022@1100528450 : TextConst 'ENU=%1 %2 is to long for Paymaster. Maximum length is set to %3.;SVE=%1 %2 „r f”r l†ng f”r Paymaster. Maximal l„ngd „r angiven som %3.';
      Text023@1100528449 : TextConst 'ENU=%1 %2 has an alphanumeric code. Paymaster allowes only numeric codes.;SVE=%1 %2 har en alfanumerisk kod. Paymaster till†ter endast numeriska koder.';
      Text024@1100528448 : TextConst 'ENU=%1 %2 is to long for Paymaster. Maximum length is 3.;SVE=%1 %2 „r f”r l†ng f”r Paymaster. Maximal l„ngd „r 3.';
      Text025@1100528447 : TextConst 'ENU=%1 %2 is to long for Paymaster. Maximum length is 9.;SVE=%1 %2 „r f”r l†ng f”r Paymaster. Maximal l„ngd „r 9.';
      Text026@1100528446 : TextConst 'ENU=S;SVE=S';
      Text027@1100528445 : TextConst 'ENU=V;SVE=V';
      Text028@1100528444 : TextConst 'ENU=Rubric %1 must start with S or V;SVE=Rubriken %1 m†ste b”rja med S eller V';
      Text029@1100528443 : TextConst 'ENU=Rubric %1 of wage component %2 has a alphanumeric code (position 2-4).;SVE=Rubriken %1 f”r l”nearten %2 har en alfanumerisk kod (position 2-4).';
      Text030@1100528442 : TextConst 'ENU=Rubric %1 of wage component %2 is not within allowed range %3 for Multipay.;SVE=Rubriken %1 f”r l”nearten %2 ligger inte inom det till†tna intervallet %2 f”r Multipay.';
      Text032@1100528440 : TextConst 'ENU=XM00;SVE=XM00';
      Text034@1100528438 : TextConst 'ENU=MSDOS;SVE=MSDOS';
      Text035@1100528437 : TextConst 'ENU=PK;SVE=Pkt';
      Text037@1100528435 : TextConst 'ENU=Only < and > are allowed as parameter in function outline;SVE=Endast < och > till†ts som parametrar i funktionsutkastet';
      Text039@1100528433 : TextConst 'ENU=Filename should be filled.;SVE=Filnamn ska fyllas i.';

    PROCEDURE SetGlobalVars@1100528400(DocumentCde2@1100528400 : Code[20];StartDate2@1100528401 : Date;EndDate2@1100528402 : Date;EmployerCde2@1100528403 : Code[20];NotExportedLinesOnly2@1100528404 : Boolean;AllCompanies2@1100528405 : Boolean;DiffPeriodADP2@1100528406 : Code[2];PostPaymentADP2@1100528407 : Boolean;FileName2@1100528408 : Text[250]);
    BEGIN
      DocumentCde := DocumentCde2;
      gvStartDate := StartDate2;
      gvEndDate := EndDate2;
      EmployerCde := EmployerCde2;
      NotExportedLinesOnly := NotExportedLinesOnly2;
      AllCompanies := AllCompanies2;
      DiffPeriodADP := DiffPeriodADP2;
      PostPaymentADP := PostPaymentADP2;
      FileName := FileName2;
    END;

    PROCEDURE FillBufferHourExport@12();
    VAR
      lCompanyRec@1100485000 : Record 2000000006;
    BEGIN
      BufferHourExport.LOCKTABLE;
      BufferHourExport.DELETEALL;
      LineNo := 0;
      ExportDateTime := CURRENTDATETIME;

      IF (HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Payroll) AND AllCompanies THEN BEGIN
        IF lCompanyRec.FINDSET THEN
          REPEAT
            HumanResourcesSetup.CHANGECOMPANY(lCompanyRec.Name);
            HumanResourcesSetup.GET;
            IF HumanResourcesSetup."Exchange Salary Application" AND
              (HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Payroll) THEN
            BEGIN
              HumanResourcesSetup.TESTFIELD("Receiving Company (Payroll)");
              HumanResourcesSetup.TESTFIELD("Structure Part (Payroll)");

              PostedHourLine.CHANGECOMPANY(lCompanyRec.Name);
              HoursExportRec.CHANGECOMPANY(lCompanyRec.Name);
              IF LineNo > 0 THEN
                FillLogBook;
              ProjRec.CHANGECOMPANY(lCompanyRec.Name);
              EmplRec.CHANGECOMPANY(lCompanyRec.Name);
              WageCompRec.CHANGECOMPANY(lCompanyRec.Name);
              CostCodeRec.CHANGECOMPANY(lCompanyRec.Name);
              ReadHourLines;
            END;
          UNTIL lCompanyRec.NEXT = 0;
        HumanResourcesSetup.CHANGECOMPANY(COMPANYNAME);
        HumanResourcesSetup.GET;
      END ELSE
        ReadHourLines;

      IF LineNo = 0 THEN BEGIN
        COMMIT;
        ERROR(Text017,DocumentCde);
      END;

      WITH BufferHourExport DO BEGIN
        CASE HumanResourcesSetup."Salary Application" OF
          HumanResourcesSetup."Salary Application"::Multipay:
            BEGIN
              "Line No." := LineNo + 1;
              Text := Text018;
              Text := INSSTR(Text,Fill(FORMAT(LineNo),25,'0','<'),3);
              Text := INSSTR(Text,Fill(FORMAT(LineNo),5,'0','<'),28);
              Text := INSSTR(Text,'~',33);
              INSERT;
              INIT;
              "Line No." := "Line No." + 1;
              INSERT;
            END;
          HumanResourcesSetup."Salary Application"::Payroll:
            BEGIN
              INIT;
              "Line No." := LineNo + 1;
              INSERT;
            END;
        END;
      END;
    END;

    PROCEDURE ReadHourLines@1100485001();
    BEGIN
      WITH PostedHourLine DO BEGIN
        SETCURRENTKEY("Document No.","Employee No.");
        SETRANGE("Document No.",DocumentCde);

        CASE HumanResourcesSetup."Salary Application" OF
          HumanResourcesSetup."Salary Application"::Multipay,
          HumanResourcesSetup."Salary Application"::Raet:
            IF HumanResourcesSetup."Selection Posting Date" THEN BEGIN
              SETRANGE("Document No.");
              SETRANGE("Posting Date", gvStartDate, gvEndDate);
            END;
          HumanResourcesSetup."Salary Application"::UNIT4:
            BEGIN
              SETFILTER(Type, '<>%1', Type::Days);
              SETRANGE("Posting Date", gvStartDate, gvEndDate);
            END;
          HumanResourcesSetup."Salary Application"::AFAS:
            BEGIN
              SETRANGE("Document No.");
              SETRANGE("Posting Date", gvStartDate, gvEndDate);
            END;
        END;

        SETRANGE(External,FALSE);
        SETFILTER("Supplying Company", '%1', '');
        SETFILTER("Cost Type", '%1|%2', "Cost Type"::Labor, "Cost Type"::Sundry);
        IF EmployerCde <> '' THEN
          SETRANGE(Employer,EmployerCde);
        IF NotExportedLinesOnly THEN
          SETRANGE(Exported, FALSE);
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            TestHourLine;
            IF NOT SkipHourLine THEN BEGIN
              IF "Component Type" = "Component Type"::Hours THEN BEGIN
                IF Monday <> 0 THEN AddHourLine(Monday,1);
                IF Tuesday <> 0 THEN AddHourLine(Tuesday,2);
                IF Wednesday <> 0 THEN AddHourLine(Wednesday,3);
                IF Thursday <> 0 THEN AddHourLine(Thursday,4);
                IF Friday <> 0 THEN AddHourLine(Friday,5);
                IF Saturday <> 0 THEN AddHourLine(Saturday,6);
                IF Sunday <> 0 THEN AddHourLine(Sunday,7);
              END ELSE
                AddHourLine(Sunday,0);
              "Export Document No." := COPYSTR(FileName,1,MAXSTRLEN("Export Document No."));
            END;
            Status := Status::Export;
            Exported := TRUE;
            "Exported on" := ExportDateTime;
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE TestHourLine@8();
    BEGIN
      WITH PostedHourLine DO BEGIN
        TESTFIELD("Wage Component");
        IF HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Paymaster THEN BEGIN
          ProjectTxt := DELCHR("Project No.", '<>=', '.ABCDEFGHIJKLMNOPQRSTUVWXYZ');
          IF STRLEN(ProjectTxt) > HumanResourcesSetup."Length Project (Extern)" THEN
            ERROR(
            Text022,
            FIELDCAPTION("Project No."),ProjectTxt,HumanResourcesSetup."Length Project (Extern)");

          ElementTxt := DELCHR(Element, '<>=', '.ABCDEFGHIJKLMNOPQRSTUVWXYZ');
          ProjectAndElementLength := HumanResourcesSetup."Length Project (Extern)" + HumanResourcesSetup."Length Element (Extern)";

          IF (HumanResourcesSetup."Length Element (Extern)" > 0) AND
             (STRLEN(ElementTxt) > HumanResourcesSetup."Length Element (Extern)")
          THEN BEGIN
            ERROR(
            Text022,
            FIELDCAPTION(Element),ElementTxt,HumanResourcesSetup."Length Element (Extern)");
          END;

          IF STRLEN("Cost Object") > (18-ProjectAndElementLength) THEN
            ERROR(
            Text022,
            FIELDCAPTION("Cost Object"),"Cost Object",(18-ProjectAndElementLength));

          IF Alphanumeric(ProjectTxt) THEN
            ERROR(
            Text023,
            FIELDCAPTION("Project No."), ProjectTxt);

          IF Alphanumeric(ElementTxt) THEN
            ERROR(
            Text023,
            FIELDCAPTION(Element), ProjectTxt + ElementTxt);

          IF STRLEN("Wage Component") > 3 THEN
            ERROR(
            Text024,
            FIELDCAPTION("Wage Component"),"Wage Component");

          IF Alphanumeric("Wage Component") THEN
            ERROR(
            Text023,
            FIELDCAPTION("Wage Component"),"Wage Component");

          IF Alphanumeric("Employee No.") THEN
            ERROR(
            Text023,
            FIELDCAPTION("Employee No."),"Employee No.");

          IF "Employee No." > '999999999' THEN
            ERROR(
            Text025,
            FIELDCAPTION("Employee No."),"Employee No.",9);
        END;

        SkipHourLine := FALSE;
        IF HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Multipay THEN BEGIN
          WageCompRec.GET("Wage Component");
          IF (HumanResourcesSetup."Skip W.Comp. with empty Cat.") AND
             (WageCompRec.Category = '') THEN BEGIN
            SkipHourLine := TRUE;
          END ELSE BEGIN
            R1 := COPYSTR(WageCompRec.Category, 1, 1);
            R2 := COPYSTR(WageCompRec.Category, 2, 3);
            IF (R1 <> Text026) AND (R1 <> Text027) THEN
              ERROR(Text028, WageCompRec.Category);
            IF Alphanumeric(R2) THEN
              ERROR(Text029, WageCompRec.Category, "Wage Component");

            IF (R2 < '001') OR (R2 > '799') OR (STRLEN(R2) <> 3) THEN
              ERROR(Text030, WageCompRec.Category, "Wage Component", '001-799');
          END;
        END;
      END;
    END;

    PROCEDURE AddHourLine@9(NumberOfHours@11012000 : Decimal;DayNo@11012001 : Integer);
    VAR
      BufferHourExport2@1100485012 : Record 11012042;
      CompanyNumber@1100485010 : Code[3];
      DepartmentCode@1100485009 : Code[6];
      CostObject@1100485008 : Code[8];
      ProjectNumber@1100485007 : Code[6];
      StructurePart@1100485006 : Code[8];
      PartElement@1100485005 : Code[20];
      sep@1100485004 : Integer;
      lvDay@1100485003 : Integer;
      lvMonth@1100485002 : Integer;
      lvYear@1100485001 : Integer;
      lvLine@1100485000 : Integer;
      lvDate@1100485011 : Date;
      AddToBufferHourExport@1100485013 : Boolean;
      NoOfDaysTxt@1100485014 : Text[30];
      YearTxt@1100525003 : Text[30];
      PeriodTxt@1100525004 : Text[30];
      TabChar@1100525000 : Char;
    BEGIN
      TabChar := 9;
      LineNo := LineNo + 1;
      IF LineNo = 1 THEN
        FillLogBook;

      WITH BufferHourExport DO BEGIN
        INIT;

        CASE HumanResourcesSetup."Salary Application" OF
          HumanResourcesSetup."Salary Application"::Paymaster:
            BEGIN
              DetermineCompany(PostedHourLine.Employer, PostedHourLine."Employee No.");
              QuantDec := DetermineQuantity(NumberOfHours);
              QuantityTxt := FORMAT(ROUND(100*ABS(QuantDec),1),0,2);
              QuantityTxt := Fill(QuantityTxt,8,'0','<');
              "Line No." := LineNo;
              Text := '81';
              Text := INSSTR(Text,Fill(CompanyPaymasterRec."Company Salary Application",4,'0','<'),3);
              Text := INSSTR(Text,Fill(CompanyPaymasterRec.Administration,3,'0','<'),7);
              Text := INSSTR(Text,Fill(PostedHourLine."Employee No.",9,'0','<'),10);
              Text := INSSTR(Text,'  ',19);
              Text := INSSTR(Text,Fill(PostedHourLine."Wage Component",3,'0','<'),21);
              Text := INSSTR(Text,QuantityTxt,24);
              Text := INSSTR(Text,Sign(QuantDec),32);
              IF PostedHourLine."Component Type" = PostedHourLine."Component Type"::Hours THEN BEGIN
                Text := INSSTR(Text,DeclarationHours,33);
                Text := INSSTR(Text,ProjectAndElementAndCostObject,34);
                Text := INSSTR(Text,Fill(FORMAT(PostedHourLine.Week),2,'0','<'),52);
                Text := INSSTR(Text,FORMAT(DWY2DATE(DayNo,PostedHourLine.Week,PostedHourLine.Year),4,'<Day,2><Month,2>'),54);
              END ELSE BEGIN
                Text := Fill(Text,51,' ','>');
                Text := INSSTR(Text,Fill(FORMAT(PostedHourLine.Week),2,'0','<'),52);
                Text := INSSTR(Text,'0000',54);
              END;
              Text := INSSTR(Text,'000000',58);
              Text := Fill(Text,80,' ','>');
              INSERT;
            END;

          HumanResourcesSetup."Salary Application"::Multipay:
            BEGIN
              IF LineNo = 1 THEN BEGIN
                "Line No." := 0;
                Text := Text032;
                Text := INSSTR(Text,Fill(HumanResourcesSetup."Customer No. (ADP/Raet)",5,'0','<'),5);
                Text := INSSTR(Text,'001',10);
                Text := INSSTR(Text,FORMAT(TODAY,6,'<Day,2><Month,2><Year,2>'),13);
                Text := INSSTR(Text,'      ',19);
                Text := INSSTR(Text,'3.50"',25);
                Text := INSSTR(Text,Text034,30);
                Text := INSSTR(Text,' ',35);
                Text := INSSTR(Text,'02',36);
                Text := INSSTR(Text,'~',38);
                INSERT;
              END;

              IF HumanResourcesSetup."Compress By Wage Component" THEN BEGIN
                BufferHourExport2.SETCURRENTKEY("Employee No.","Document No.","Wage Component");
                BufferHourExport2.SETRANGE("Employee No.", PostedHourLine."Employee No.");
                BufferHourExport2.SETRANGE("Wage Component", PostedHourLine."Wage Component");
                BufferHourExport2.SETRANGE(Category, WageCompRec.Category);
                AddToBufferHourExport := BufferHourExport2.FINDFIRST;
              END;

              IF AddToBufferHourExport THEN BEGIN
                LineNo := LineNo - 1;
                "Line No." := BufferHourExport2."Line No."
              END ELSE
                "Line No." := LineNo;

              "Employee No." := PostedHourLine."Employee No.";
              "Wage Component" := PostedHourLine."Wage Component";
              "Quant Amount" := NumberOfHours;
              Category := WageCompRec.Category;

              QuantDec := DetermineQuantity(NumberOfHours);
              "Quant Amount" := QuantDec;
              IF AddToBufferHourExport THEN
                "Quant Amount" := "Quant Amount" + BufferHourExport2."Quant Amount";

              CASE PostedHourLine."Component Type" OF
                PostedHourLine."Component Type"::Hours:
                  BEGIN
                    QuantityTxt := FORMAT(ROUND(100*ABS("Quant Amount"),1),0,2);
                    QuantityTxt := Sign("Quant Amount") + Fill(QuantityTxt,8,'0','<');
                  END;
                PostedHourLine."Component Type"::Expenses:
                  BEGIN
                    IF WageCompRec."No Decimals in export to ADP" THEN
                      QuantityTxt := FORMAT(ROUND(ABS("Quant Amount"),1),0,2)
                    ELSE
                      QuantityTxt := FORMAT(ROUND(100*ABS("Quant Amount"),1),0,2);
                    QuantityTxt := Sign("Quant Amount") + Fill(QuantityTxt,8,'0','<');
                  END;
                PostedHourLine."Component Type"::Days:
                  BEGIN
                    IF WageCompRec.Category = 'V198' THEN BEGIN
                      QuantityTxt := FORMAT(ROUND(ABS("Quant Amount"),1),0,0);
                      QuantityTxt := Sign("Quant Amount") + Fill(QuantityTxt,4,'0','<');
                    END ELSE BEGIN
                      IF (WageCompRec.Category = 'V173') AND
                         (HumanResourcesSetup."Salary Application Version" >= '3.3')
                      THEN BEGIN
                        QuantityTxt := FORMAT(ROUND(100*ABS("Quant Amount"),1),0,1);
                        QuantityTxt := Sign("Quant Amount") + Fill(QuantityTxt,5,'0','<');
                      END ELSE BEGIN
                        QuantityTxt := FORMAT(ROUND(10*ABS("Quant Amount"),1),0,1);
                        QuantityTxt := Sign("Quant Amount") + Fill(QuantityTxt,4,'0','<');
                      END;
                    END;
                  END;
              END;

              Text := Text035;
              Text := INSSTR(Text,Fill(HumanResourcesSetup."Customer No. (ADP/Raet)",5,'0','<'),3);
              Text := INSSTR(Text,Fill(PostedHourLine."Employee No.",7,'0','<'),8);
              IF DiffPeriodADP <> '' THEN
                Text := INSSTR(Text,Fill(FORMAT(DiffPeriodADP),2,'0','<'),15)
              ELSE
                Text := INSSTR(Text,Fill(FORMAT(((PostedHourLine.Week-1) DIV 4)+1),2,'0','<'),15);
              IF PostPaymentADP THEN
                Text := INSSTR(Text,'6',17)
              ELSE
                Text := INSSTR(Text,'9',17);
              Text := INSSTR(Text,'0',18);
              Text := INSSTR(Text,'000000',19);
              Text := INSSTR(Text,'0',25);
              Text := INSSTR(Text,'000000',26);
              Text := INSSTR(Text,'00',32);
              Text := INSSTR(Text,'00000',34);
              Text := INSSTR(Text,'1',39);
              Text := INSSTR(Text,'0',40);
              Text := INSSTR(Text,Fill(FORMAT("Line No."),5,'0','<'),41);
              Text := INSSTR(Text,Fill(FORMAT(WageCompRec.Category),4,'0','<'),46);
              Text := INSSTR(Text,QuantityTxt,50);
              Text := INSSTR(Text,FORMAT(TabChar) + '~',59);
              Text := INSSTR(Text,FORMAT(TabChar),46);

              IF AddToBufferHourExport THEN BEGIN
                BufferHourExport2."Quant Amount" := "Quant Amount";
                BufferHourExport2.Text := Text;
                BufferHourExport2.MODIFY;
              END ELSE
                INSERT;

              IF WageCompRec."Category 2" <> '' THEN BEGIN
                AddToBufferHourExport := FALSE;
                IF HumanResourcesSetup."Compress By Wage Component" THEN BEGIN
                  BufferHourExport2.SETCURRENTKEY("Employee No.","Document No.","Wage Component");
                  BufferHourExport2.SETRANGE("Employee No.", PostedHourLine."Employee No.");
                  BufferHourExport2.SETRANGE("Wage Component", PostedHourLine."Wage Component");
                  BufferHourExport2.SETRANGE(Category, WageCompRec."Category 2");
                  AddToBufferHourExport := BufferHourExport2.FINDFIRST;
                END;

                Category := WageCompRec."Category 2";

                IF AddToBufferHourExport THEN
                  "Line No." := BufferHourExport2."Line No."
                ELSE BEGIN
                  LineNo := LineNo + 1;
                  "Line No." := LineNo;
                END;

                Text :=
                  COPYSTR(Text, 1, 40) +
                  Fill(FORMAT("Line No."),5,'0','<') +
                  Fill(FORMAT(WageCompRec."Category 2"),4,'0','<') +
                  COPYSTR(Text, 51);
                Text := INSSTR(Text,FORMAT(TabChar),46);

                IF AddToBufferHourExport THEN BEGIN
                  BufferHourExport2."Quant Amount" := "Quant Amount";
                  BufferHourExport2.Text := Text;
                  BufferHourExport2.MODIFY;
                END ELSE
                  INSERT;
              END;

            END;

          HumanResourcesSetup."Salary Application"::Payroll:
            BEGIN
              DepartmentCode := '';
              IF EmplRec.GET(PostedHourLine."Employee No.") THEN BEGIN
                PostedHourLine.Employer := EmplRec.Employer;
                DepartmentCode := EmplRec."Global Dimension 1 Code";
              END;

              IF PostedHourLine.Type = PostedHourLine.Type::Indirect THEN BEGIN
                CostCodeRec.GET(PostedHourLine."Cost Code");
                CASE CostCodeRec."Use Cost Code as Department" OF
                  CostCodeRec."Use Cost Code as Department"::No:
                    DepartmentCode := EmplRec."Global Dimension 1 Code";
                  CostCodeRec."Use Cost Code as Department"::Yes:
                    DepartmentCode := PostedHourLine."Cost Code";
                  CostCodeRec."Use Cost Code as Department"::Optional:
                    IF EmplRec."Skip Cost Code as Department" = FALSE THEN
                      DepartmentCode := PostedHourLine."Cost Code";
                END;
              END;

              CompanyNumber := HumanResourcesSetup."Receiving Company (Payroll)";

              IF PostedHourLine."Calculate Wage Costs" = PostedHourLine."Calculate Wage Costs"::"Fixed Rate" THEN BEGIN
                ProjectNumber := '';
                StructurePart := '';
                CostObject := '';
              END ELSE BEGIN
                CostObject := PostedHourLine."Cost Object";
                IF PostedHourLine.Type = PostedHourLine.Type::Service THEN BEGIN
                  ProjectNumber := 'S~' + COPYSTR(PostedHourLine."Service Order No.", 1, 4);
                  StructurePart := COPYSTR(PostedHourLine."Service Order No.", 5, MAXSTRLEN(StructurePart));
                END ELSE BEGIN
                  ProjectNumber := PostedHourLine."Project No.";
                  StructurePart := HumanResourcesSetup."Structure Part (Payroll)";
                  sep := STRPOS(PostedHourLine."Project No.", '-');
                  IF NOT ProjRec.GET(ProjectNumber) THEN ProjRec.INIT;
                  IF (ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Sub Project") AND (sep <> 0) THEN BEGIN
                    IF PostedHourLine.Element = '' THEN
                      PartElement := HumanResourcesSetup."Structure Part (Payroll)"
                    ELSE
                      PartElement := COPYSTR(ProjectNumber, (sep+1), (STRLEN(ProjectNumber)-sep)) +
                                     COPYSTR(ProjectNumber, sep, 1) + PostedHourLine.Element;
                    StructurePart := COPYSTR(PartElement, 1, MAXSTRLEN(StructurePart));
                    ProjectNumber := COPYSTR(ProjectNumber, 1, (sep-1));
                  END;
                END;
              END;
              QuantDec := DetermineQuantity(NumberOfHours);
              QuantityTxt := FORMAT(ROUND(100*ABS(QuantDec),1),0,2);
              IF QuantDec < 0 THEN
                QuantityTxt := Sign(QuantDec) + QuantityTxt;
              QuantityTxt := Fill(QuantityTxt,9,' ','<');

              "Line No." := LineNo;
              IF "Line No." < 999 THEN lvLine := "Line No.";
              IF DayNo = 0 THEN
                lvDate := PostedHourLine."Posting Date"
              ELSE
                lvDate := DWY2DATE(DayNo, PostedHourLine.Week, PostedHourLine.Year);
              lvYear := DATE2DMY(lvDate,3);
              lvMonth := DATE2DMY(lvDate,2);
              lvDay := DATE2DMY(lvDate,1);

              Text := INSSTR(Text,Fill(PostedHourLine.Employer,3,' ','<'),1);
              Text := INSSTR(Text,Fill(PostedHourLine."Employee No.",4,' ','<'),4);
              Text := INSSTR(Text,Fill(FORMAT(PostedHourLine.Week),2,'0','<'),8);
              Text := INSSTR(Text,Fill(FORMAT(lvLine),3,'0','<'),10);
              Text := INSSTR(Text,Fill(PostedHourLine."Wage Component",3,' ','<'),13);
              Text := INSSTR(Text,Fill(ProjectNumber,6,' ','<'),16);
              Text := INSSTR(Text,Fill(StructurePart,8,' ','<'),22);
              Text := INSSTR(Text,Fill(CostObject,8,' ','<'),30);
              Text := INSSTR(Text,Fill(CompanyNumber,3,' ','<'),38);
              Text := INSSTR(Text,Fill(DepartmentCode,6,' ','<'),41);
              Text := INSSTR(Text,QuantityTxt,47);
              Text := INSSTR(Text,Fill(FORMAT(lvYear),4,'0','<'),56);
              Text := INSSTR(Text,Fill(FORMAT(lvMonth),2,'0','<'),60);
              Text := INSSTR(Text,Fill(FORMAT(lvDay),2,'0','<'),62);
              Text := Fill(Text,80,' ','>');
              INSERT;
            END;
          HumanResourcesSetup."Salary Application"::UNIT4:
            BEGIN
              IF LineNo = 1 THEN BEGIN
                "Line No." := 0;

                Text := '"';
                Text := Text + 'Werkgever';
                Text := Text + '";"';
                Text := Text + 'Boekjaar';
                Text := Text + '";"';
                Text := Text + 'Werknemer';
                Text := Text + '";"';
                Text := Text + 'Dienstverband';
                Text := Text + '";"';
                Text := Text + 'Periode';
                Text := Text + '";"';
                Text := Text + 'Volgnr';
                Text := Text + '";"';
                Text := Text + 'Lonerssoort';
                Text := Text + '";"';
                Text := Text + 'Datum';
                Text := Text + '";"';
                Text := Text + 'Kostenplaats';
                Text := Text + '";"';
                Text := Text + 'Kostendrager';
                Text := Text + '";"';
                Text := Text + 'Dagensoort';
                Text := Text + '";"';
                Text := Text + 'Aantal dagen';
                Text := Text + '";"';
                Text := Text + 'Aantal uren';
                Text := Text + '";"';
                Text := Text + 'Looncomponent';
                Text := Text + '";"';
                Text := Text + 'Waarde';
                Text := Text + '";"';
                Text := Text + 'Status';
                Text := Text + '";"';
                Text := Text + 'Volgnr periode';
                Text := Text + '";"';
                Text := Text + 'Omschrijving';
                Text := Text + '";"';
                Text := Text + '";"';
                Text := Text + 'Uitleg';
                Text := Text + '"';
                INSERT;
              END;

              BufferHourExport2.SETCURRENTKEY("Employee No.","Document No.","Wage Component");
              BufferHourExport2.SETRANGE("Employee No.", PostedHourLine."Employee No.");
              BufferHourExport2.SETRANGE("Document No.", PostedHourLine."Document No.");
              BufferHourExport2.SETRANGE("Wage Component", PostedHourLine."Wage Component");
              AddToBufferHourExport := BufferHourExport2.FINDFIRST;

              IF AddToBufferHourExport THEN BEGIN
                LineNo := LineNo - 1;
                "Line No." := BufferHourExport2."Line No."
              END ELSE
                "Line No." := LineNo;

              "Employee No." := PostedHourLine."Employee No.";
              "Document No." := PostedHourLine."Document No.";
              "Wage Component" := PostedHourLine."Wage Component";

              DepartmentCode := '';
              IF EmplRec.GET(PostedHourLine."Employee No.") THEN BEGIN
                PostedHourLine.Employer := EmplRec.Employer;
                DepartmentCode := EmplRec."Global Dimension 1 Code";
              END;

              IF PostedHourLine.Type = PostedHourLine.Type::Indirect THEN BEGIN
                CostCodeRec.GET(PostedHourLine."Cost Code");
                CASE CostCodeRec."Use Cost Code as Department" OF
                  CostCodeRec."Use Cost Code as Department"::No:
                    DepartmentCode := EmplRec."Global Dimension 1 Code";
                  CostCodeRec."Use Cost Code as Department"::Yes:
                    DepartmentCode := PostedHourLine."Cost Code";
                  CostCodeRec."Use Cost Code as Department"::Optional:
                    IF EmplRec."Skip Cost Code as Department" = FALSE THEN
                      DepartmentCode := PostedHourLine."Cost Code";
                END;
              END;

              WageCompRec.GET(PostedHourLine."Wage Component");
              QuantDec := DetermineQuantity(NumberOfHours);
              "Quant Amount" := QuantDec;
              IF AddToBufferHourExport THEN
                "Quant Amount" := "Quant Amount" + BufferHourExport2."Quant Amount";

              QuantityTxt := FORMAT(ABS("Quant Amount"));
              NoOfDaysTxt := FORMAT(ABS("Quant Amount"/8));

              Text := '"';
              Text := Text + PostedHourLine.Employer;
              Text := Text + '";"';
              Text := Text + FORMAT(PostedHourLine.Year);
              Text := Text + '";"';
              Text := Text + PostedHourLine."Employee No.";
              Text := Text + '";"';
              Text := Text + '0';
              Text := Text + '";"';
              Text := Text + COPYSTR(DocumentCde, STRPOS(DocumentCde, '-') + 1, 2);
              Text := Text + '";"';
              Text := Text + FORMAT("Line No.");
              Text := Text + '";"';
              Text := Text + '3';
              Text := Text + '";"';
              Text := Text + FORMAT(gvStartDate, 10,'<Day,2>-<Month,2>-<Year4>');
              Text := Text + '";"';
              Text := Text + DepartmentCode;
              Text := Text + '";"';
              Text := Text + '";"';
              Text := Text + WageCompRec."Day Component to Generate";
              Text := Text + '";"';
              Text := Text + NoOfDaysTxt+Sign("Quant Amount");
              Text := Text + '";"';
              Text := Text + QuantityTxt+Sign("Quant Amount");
              Text := Text + '";"';
              Text := Text + PostedHourLine."Wage Component";
              Text := Text + '";"';
              Text := Text + '";"2";"1";"';
              Text := Text + WageCompRec.Description;
              Text := Text + '";""';

              IF AddToBufferHourExport THEN BEGIN
                BufferHourExport2."Quant Amount" := "Quant Amount";
                BufferHourExport2.Text := Text;
                BufferHourExport2.MODIFY;
              END ELSE
                INSERT;
            END;
          HumanResourcesSetup."Salary Application"::Raet:
            BEGIN
              WageCompRec.GET(PostedHourLine."Wage Component");
              IF WageCompRec."Raet/Perman Code" <> '' THEN BEGIN
                QuantDec := DetermineQuantity(NumberOfHours);
                QuantityTxt := FORMAT(ROUND(ABS(QuantDec),0.01),0,2);

                "Line No." := LineNo;
                Text := 'EXT';
                Text := INSSTR(Text,Fill('PA0' + COPYSTR(WageCompRec."Raet/Perman Code",1,3),6,' ','>'),4);
                Text := INSSTR(Text,Fill(PostedHourLine."Employee No." + ' 1',50,' ','>'),10);
                Text := INSSTR(Text,Fill('V',1,' ','>'),60);
                Text := INSSTR(Text,Fill(FORMAT(TODAY, 10,'<Day,2>-<Month,2>-<Year4>'),11,' ','>'),61);
                Text := INSSTR(Text,Fill(COPYSTR(USERID,1,16),16,' ','>'), 72);
                Text := INSSTR(Text,Fill(Sign(QuantDec),1,' ','>'),88);
                Text := INSSTR(Text,Fill(QuantityTxt,49,' ','>'), 89);
                Text := INSSTR(Text,Fill(FORMAT(gvStartDate, 10,'<Day,2>-<Month,2>-<Year4>'),11,' ','>'), 138);
                Text := INSSTR(Text,Fill('90',2,' ','>'), 149);
                Text := INSSTR(Text,Fill('',30,' ','>'), 151);
                Text := INSSTR(Text,Fill('NOR',3,' ','>'), 181);
                INSERT;
              END;
            END;
          HumanResourcesSetup."Salary Application"::AFAS:
            BEGIN
              WageCompRec.GET(PostedHourLine."Wage Component");
              IF WageCompRec."Export to AFAS" THEN BEGIN
                BufferHourExport2.SETCURRENTKEY("Employee No.","Document No.","Wage Component");
                BufferHourExport2.SETRANGE("Employee No.", PostedHourLine."Employee No.");
                BufferHourExport2.SETRANGE("Wage Component", PostedHourLine."Wage Component");
                AddToBufferHourExport := BufferHourExport2.FINDFIRST;

                IF AddToBufferHourExport THEN BEGIN
                  LineNo := LineNo - 1;
                  "Line No." := BufferHourExport2."Line No."
                END ELSE
                  "Line No." := LineNo;

                "Employee No." := PostedHourLine."Employee No.";
                "Wage Component" := PostedHourLine."Wage Component";

                QuantDec := DetermineQuantity(NumberOfHours);
                "Quant Amount" := QuantDec;
                IF AddToBufferHourExport THEN
                  "Quant Amount" := "Quant Amount" + BufferHourExport2."Quant Amount";
                QuantityTxt :=  FORMAT(ROUND("Quant Amount",0.01),0,1);
                Employer := PostedHourLine.Employer;
                YearTxt := FORMAT(gvEndDate,0,'<Year4>');
                IF EmployerRec.GET(Employer) THEN BEGIN
                  IF EmployerRec."Period Type" = EmployerRec."Period Type"::"4-Weeks" THEN
                    PeriodTxt := DELSTR(PostedHourLine."Document No.", 1, 10)
                  ELSE
                    PeriodTxt := FORMAT(gvEndDate,0,'<Month,2>');
                END;

                Text := Text + PostedHourLine."Employee No.";
                Text := Text + ';';
                Text := Text + PostedHourLine."Wage Component";
                Text := Text + ';';
                Text := Text + QuantityTxt;
                Text := Text + ';';
                Text := Text + Employer;
                Text := Text + ';';
                Text := Text + YearTxt;
                Text := Text + ';';
                Text := Text + PeriodTxt;

                IF AddToBufferHourExport THEN BEGIN
                  BufferHourExport2."Quant Amount" := "Quant Amount";
                  BufferHourExport2.Text := Text;
                  BufferHourExport2.MODIFY;
                END ELSE
                  INSERT;

              END;
            END;

        END;
      END;
    END;

    PROCEDURE FillLogBook@33();
    VAR
      lLineNo@1100485000 : Integer;
    BEGIN
      IF HoursExportRec.FIND('+') THEN
        lLineNo := HoursExportRec."Line No." + 1
      ELSE
        lLineNo := 1;

      HoursExportRec.INIT;
      HoursExportRec."Line No." := lLineNo;
      HoursExportRec."Document No." := DocumentCde;
      HoursExportRec."User ID" := USERID;
      HoursExportRec.Date := TODAY;
      HoursExportRec.Time := TIME;
      HoursExportRec.INSERT;
    END;

    PROCEDURE Alphanumeric@6(Text@11012001 : Text[250]) Res@11012000 : Boolean;
    BEGIN
      EXIT(DELCHR(Text,'=',' 0123456789')<>'');
    END;

    PROCEDURE Fill@4(String@11012001 : Text[80];TotLength@11012002 : Integer;WithCharacter@11012003 : Text[1];TrueBool@11012004 : Char) Text@11012000 : Text[80];
    VAR
      Length@11012005 : Integer;
    BEGIN
      Length:=STRLEN(String);
      IF TotLength>Length THEN BEGIN
        CASE TrueBool OF
          '<': String := PADSTR('',TotLength-Length,WithCharacter)+String;
          '>': String := String + PADSTR('',TotLength-Length,WithCharacter);
          ELSE ERROR(Text037);
        END;
      END;

      EXIT(String);
    END;

    PROCEDURE Sign@3(Value@11012001 : Decimal) Text@11012000 : Text[1];
    BEGIN
      IF Value >= 0 THEN BEGIN
        CASE HumanResourcesSetup."Salary Application" OF
           HumanResourcesSetup."Salary Application"::Paymaster:
             EXIT('+');
           HumanResourcesSetup."Salary Application"::UNIT4,
           HumanResourcesSetup."Salary Application"::Raet:
             EXIT('');
           ELSE
             EXIT('0');
        END;
      END ELSE
        EXIT('-');
    END;

    PROCEDURE DetermineCompany@1210190000(lvEmployer@1210190000 : Code[20];lvEmployee@1210190001 : Code[20]);
    BEGIN
      IF lvEmployer = '' THEN BEGIN
        EmplRec.GET(lvEmployee);
        lvEmployer := EmplRec.Employer;
      END;

      CompanyPaymasterRec.SETCURRENTKEY("Navision Company", Employer);
      CompanyPaymasterRec.SETRANGE("Navision Company", COMPANYNAME);
      CompanyPaymasterRec.SETRANGE(Employer, lvEmployer);
      IF NOT CompanyPaymasterRec.FIND('-') THEN
        ERROR(Text005,COMPANYNAME,CompanyPaymasterRec.TABLECAPTION);
    END;

    PROCEDURE ProjectAndElementAndCostObject@26() : Text[18];
    BEGIN
      ElementTxt := DELCHR(PostedHourLine.Element, '<>=', '.ABCDEFGHIJKLMNOPQRSTUVWXYZ');
      ProjectTxt := DELCHR(PostedHourLine."Project No.", '<>=', '.ABCDEFGHIJKLMNOPQRSTUVWXYZ');

      IF HumanResourcesSetup."Length Element (Extern)" > 0 THEN
        EXIT(
          Fill(ProjectTxt,HumanResourcesSetup."Length Project (Extern)",'0','<') +
          Fill(ElementTxt,HumanResourcesSetup."Length Element (Extern)",'0','<') +
          Fill(PostedHourLine."Cost Object",18-(HumanResourcesSetup."Length Project (Extern)" + HumanResourcesSetup."Length Element (Extern)"),'0','<'))
      ELSE
        EXIT(
          Fill(ProjectTxt,HumanResourcesSetup."Length Project (Extern)",'0','<') +
          Fill(PostedHourLine."Cost Object",18-HumanResourcesSetup."Length Project (Extern)",'0','<'));
    END;

    PROCEDURE DeclarationHours@7() : Text[1];
    BEGIN
      IF PostedHourLine."Component Type" = PostedHourLine."Component Type"::Hours THEN BEGIN
        WageCompRec.GET(PostedHourLine."Wage Component");
        IF WageCompRec.Declare THEN
          EXIT(Text019);
      END;

      EXIT(' ');
    END;

    PROCEDURE DetermineQuantity@1100525000(NumberOfHours@1100525000 : Decimal) QuantDec : Decimal;
    BEGIN
      CASE PostedHourLine."Component Type" OF
        PostedHourLine."Component Type"::Hours:
          QuantDec := NumberOfHours;
        PostedHourLine."Component Type"::Expenses:
          BEGIN
            WageCompRec.GET(PostedHourLine."Wage Component");
            IF WageCompRec."Export Quantity i.s.o. Amount" THEN
              QuantDec := PostedHourLine.Quantity
            ELSE
              QuantDec := PostedHourLine."Amount (LCY)" - PostedHourLine."Precalc. Surcharge Expenses";
          END;
        PostedHourLine."Component Type"::Days:
          QuantDec := PostedHourLine.Quantity;
      END;
    END;

    BEGIN
    END.
  }
}

