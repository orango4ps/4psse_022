OBJECT Table 454 Approval Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,DCW114.00.00.5.00.08,4PS14.00;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
               "Last Modified By User ID" := USERID;
             END;

    OnDelete=VAR
               NotificationEntry@1000 : Record 1511;
             BEGIN
               NotificationEntry.SETRANGE(Type,NotificationEntry.Type::Approval);
               NotificationEntry.SETRANGE("Triggered By Record",RECORDID);
               NotificationEntry.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Approval Entry;
               NOR=Godkjenningspost;
               SVE=GodkÑnnandetransaktion];
  }
  FIELDS
  {
    { 1   ;   ;Table ID            ;Integer       ;CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 2   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              NOR=Bilagstype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, ,,,,,,,,,,,,,,,,,,,Advice Order,Purchase Action,Purchase Requisition,,,,Hour Accounting,Site Mgt HourAccounting;
                                                                    NOR="Tilbud,Ordre,Faktura,Kreditnota,Rammeordre,Ordreretur, ";
                                                                    SVE=Offert,Order,Faktura,Kreditnota,Avropsorder,Returorder, ,,,,,,,,,,,,,,,,,,,BestÑllningsunderlag,InkîpsÜtgÑrd,Inkîpsrekvisitioner,,,,Tidrapportering,Byggledning Tidrapportering];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, ,,,,,,,,,,,,,,,,,,,Advice Order,Purchase Action,Purchase Requisition,,,,Hour Accounting,Site Mgt HourAccounting }
    { 3   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
    { 4   ;   ;Sequence No.        ;Integer       ;CaptionML=[ENU=Sequence No.;
                                                              NOR=Sekvensnummer;
                                                              SVE=Sekvensnr] }
    { 5   ;   ;Approval Code       ;Code20        ;CaptionML=[ENU=Approval Code;
                                                              NOR=Godkjenningskode;
                                                              SVE=GodkÑnnandekod] }
    { 6   ;   ;Sender ID           ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Sender ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sender ID;
                                                              NOR=Avsender-ID;
                                                              SVE=AvsÑndar-ID] }
    { 7   ;   ;Salespers./Purch. Code;Code20      ;CaptionML=[ENU=Salespers./Purch. Code;
                                                              NOR=Selger/innkjõper - kode;
                                                              SVE=SÑljare/inkîpare kod] }
    { 8   ;   ;Approver ID         ;Code50        ;TableRelation=Approver;
                                                   OnValidate=VAR
                                                                UserSetup@1100525000 : Record 91;
                                                              BEGIN
                                                                 //**4PS.n  Call C022612
                                                                IF "Approver ID" <> '' THEN BEGIN
                                                                  UserSetup.RESET;
                                                                  UserSetup.GET("Approver ID");
                                                                  UserSetup.TESTFIELD("Approver ID"); //In the User Setup Table the field Approver ID may not be empty
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //UserMgt.LookupUserID("Approver ID"); //**4PS.o
                                                              IF LookupUserSetupName("Approver ID") THEN;    //**4PS.n  Call C022612
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Approver ID;
                                                              NOR=Godkjenner-ID;
                                                              SVE=GodkÑnnar-ID] }
    { 9   ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Status = Status::Created) AND (Status = Status::Open) THEN
                                                                  "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);

                                                                //**4PS.sn
                                                                IF Status = Status::Approved THEN
                                                                  "Approved by" := USERID
                                                                ELSE
                                                                  "Approved by" := '';
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Created,Open,Canceled,Rejected,Approved;
                                                                    NOR=Opprettet,èpen,Annullert,Avvist,Godkjent;
                                                                    SVE=Skapad,ôppen,Avbruten,Avvisad,GodkÑnd];
                                                   OptionString=Created,Open,Canceled,Rejected,Approved }
    { 10  ;   ;Date-Time Sent for Approval;DateTime;
                                                   CaptionML=[ENU=Date-Time Sent for Approval;
                                                              NOR=Dato/klokkeslett sendt til godkjenning;
                                                              SVE=Skickades fîr godkÑnnande (datum/tid)] }
    { 11  ;   ;Last Date-Time Modified;DateTime   ;CaptionML=[ENU=Last Date-Time Modified;
                                                              NOR=Dato/klokkeslett for siste endring;
                                                              SVE=éndrades senast (datum/tid)] }
    { 12  ;   ;Last Modified By User ID;Code50    ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Last Modified By User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Last Modified By User ID;
                                                              NOR=Sist endret av bruker-ID;
                                                              SVE=éndrades senast av anvÑndar-ID] }
    { 13  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Approval Comment Line" WHERE (Table ID=FIELD(Table ID),
                                                                                                    Record ID to Approve=FIELD(Record ID to Approve)));
                                                   CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar];
                                                   Editable=No }
    { 14  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              NOR=Forfallsdato;
                                                              SVE=Fîrfallodatum] }
    { 15  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              NOR=Belõp;
                                                              SVE=Belopp];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;CaptionML=[ENU=Amount (LCY);
                                                              NOR=Belõp (NOK);
                                                              SVE=Belopp (BVA)];
                                                   AutoFormatType=1 }
    { 17  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 18  ;   ;Approval Type       ;Option        ;CaptionML=[ENU=Approval Type;
                                                              NOR=Godkjenningstype;
                                                              SVE=GodkÑnnandetyp];
                                                   OptionCaptionML=[ENU=Workflow User Group,Sales Pers./Purchaser,Approver,Advanced Approver,,,,,Consent Rules;
                                                                    NOR=Brukergruppe for arbeidsflyt,Selger/Innkjõper,Godkjenner;
                                                                    SVE=ArbetsflîdesanvÑndargrupp,SÑljare/Inkîpare,GodkÑnnare,Avancerad GodkÑnnare,,,,,GodkÑnnanderegler];
                                                   OptionString=Workflow User Group,Sales Pers./Purchaser,Approver,Advanced Approver,,,,,Consent Rules }
    { 19  ;   ;Limit Type          ;Option        ;CaptionML=[ENU=Limit Type;
                                                              NOR=Grensetype;
                                                              SVE=GrÑnstyp];
                                                   OptionCaptionML=[ENU=Approval Limits,Credit Limits,Request Limits,No Limits;
                                                                    NOR=Godkjenningsgrenser,Kredittgrenser,Forespõrselsgrenser,Ingen grenser;
                                                                    SVE=GodkÑnnandegrÑnser,Kreditlimit,Ink.begÑrangrÑns,Inga grÑnser];
                                                   OptionString=Approval Limits,Credit Limits,Request Limits,No Limits }
    { 20  ;   ;Available Credit Limit (LCY);Decimal;
                                                   CaptionML=[ENU=Available Credit Limit (LCY);
                                                              NOR=Tilgjengelig kredittgrense (NOK);
                                                              SVE=TillgÑnglig kreditlimit (BVA)] }
    { 21  ;   ;Pending Approvals   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Record ID to Approve=FIELD(Record ID to Approve),
                                                                                             Status=FILTER(Created|Open),
                                                                                             Workflow Step Instance ID=FIELD(Workflow Step Instance ID)));
                                                   CaptionML=[ENU=Pending Approvals;
                                                              NOR=Venter pÜ godkjenninger;
                                                              SVE=VÑntar pÜ godkÑnnanden] }
    { 22  ;   ;Record ID to Approve;RecordID      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Record ID to Approve;
                                                              NOR=Post-ID som skal godkjennes;
                                                              SVE=Post-ID att godkÑnna] }
    { 23  ;   ;Delegation Date Formula;DateFormula;CaptionML=[ENU=Delegation Date Formula;
                                                              NOR=Delegeringsdatoformel;
                                                              SVE=Formel fîr delegeringsdatum] }
    { 26  ;   ;Number of Approved Requests;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Record ID to Approve=FIELD(Record ID to Approve),
                                                                                             Status=FILTER(Approved),
                                                                                             Workflow Step Instance ID=FIELD(Workflow Step Instance ID)));
                                                   CaptionML=[ENU=Number of Approved Requests;
                                                              NOR=Antall godkjente forespõrsler;
                                                              SVE=Antal godkÑnda begÑranden] }
    { 27  ;   ;Number of Rejected Requests;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Record ID to Approve=FIELD(Record ID to Approve),
                                                                                             Status=FILTER(Rejected),
                                                                                             Workflow Step Instance ID=FIELD(Workflow Step Instance ID)));
                                                   CaptionML=[ENU=Number of Rejected Requests;
                                                              NOR=Antall avviste forespõrsler;
                                                              SVE=Antal avvisade begÑranden] }
    { 29  ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              NOR=Lõpenummer;
                                                              SVE=Lîpnr] }
    { 30  ;   ;Workflow Step Instance ID;GUID     ;CaptionML=[ENU=Workflow Step Instance ID;
                                                              NOR=ID for forekomst for arbeidsflyttrinn;
                                                              SVE=Instans-ID fîr arbetsflîdessteg] }
    { 31  ;   ;Related to Change   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Workflow - Record Change" WHERE (Workflow Step Instance ID=FIELD(Workflow Step Instance ID),
                                                                                                       Record ID=FIELD(Record ID to Approve)));
                                                   CaptionML=[ENU=Related to Change;
                                                              NOR=Relatert til endring;
                                                              SVE=Knutet till Ñndring] }
    { 6085573;;Amount Incl. VAT    ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Amount Incl. VAT;
                                                              SVE=Belopp inkl moms] }
    { 6085574;;Amount Incl. VAT (LCY);Decimal     ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Amount Incl. VAT (LCY);
                                                              SVE=Belopp inklusive moms (BVA)] }
    { 6085575;;Original Approver ID;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Original Approver ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Original Approver ID;
                                                              SVE=Ursprungligt godkÑnnar-ID] }
    { 6085576;;Temp. Entry Type    ;Option        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Temp. Entry Type;
                                                              SVE=TillfÑllig radtyp];
                                                   OptionCaptionML=[ENU=Normal,Out of Office Sharing,Normal Sharing;
                                                                    SVE=Normal,FrÜnvarodelning,Normaldelning];
                                                   OptionString=Normal,Out of Office Sharing,Normal Sharing }
    { 6085577;;Temp. Display Sorting;Integer      ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Temp. Display Sorting;
                                                              SVE=TillfÑllig visningssortering] }
    { 6085578;;Reminder Level      ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Reminder Level;
                                                              SVE=BetalningspÜminnelsenivÜ] }
    { 6085579;;Version No.         ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Version No.;
                                                              SVE=Versionsnr] }
    { 6085580;;Doc. No. Occurrence ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Doc. No. Occurrence;
                                                              SVE=Dok.nr fîrekomst] }
    { 6085581;;Approved using Pms. of;Option      ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Approved using Permissions;
                                                   OptionCaptionML=ENU=Own,Owner,Both owner and own;
                                                   OptionString=Approver,Owner,Both Approver and Owner }
    { 6085582;;Owner Approver ID   ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Owner Approver ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Owner Approver ID }
    { 6085583;;Forced Approval     ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Forced Approval;
                                                   Editable=No }
    { 6085787;;Delegated By User ID;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Delegated By User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Delegated By User ID;
                                                              SVE=Delegerat av anvÑndar-ID] }
    { 6085788;;Delegated To User ID;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Delegated To User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Delegated To User ID;
                                                              SVE=Delegerat till anvÑndar-ID] }
    { 6085789;;Remember Approver ID;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Remember Approver ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Remember Approver ID }
    { 6085790;;Advanced Approval   ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Advanced Approval }
    { 6085791;;Source Name         ;Text100       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Source Name;
                                                              SVE=Ursprungsnamn] }
    { 6085792;;Source No.          ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Source No.;
                                                              SVE=Ursprungsnr] }
    { 11012000;;Document Line No.  ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              SVE=Dokumentradnr] }
    { 11012005;;Consent Rule Process;Option       ;CaptionML=[ENU=Process;
                                                              SVE=Process];
                                                   OptionCaptionML=[ENU=Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval,Purchase Requisition,Not Posted Invoice,Not Posted Credit Memo,,,,,,,,Hour Accounting;
                                                                    SVE=Faktura,FakturagodkÑnnande,BestÑllningsunderlag,inkîpsorder,InkîpsÜtgÑrd,Inkîpsoffert,Kreditnota,KreditnotorgodkÑnnande,Inkîpsrekvisition,Ej bokfîrd faktura,Ej bokfîrd kredit,,,,,,,,Tidrapportering];
                                                   OptionString=Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval,Purchase Requisition,Not Posted Invoice,Not Posted Credit Memo,,,,,,,,Hour Accounting }
    { 11012010;;Consent Rule Line No.;Integer     ;TableRelation=IF (Consent Rule Process=FILTER(..Purchase Requisition)) "Consent Rule"."Line No." WHERE (Process=FIELD(Consent Rule Process))
                                                                 ELSE IF (Consent Rule Process=FILTER(Hour Accounting)) "Hour Consent Rule"."Line No.";
                                                   CaptionML=[ENU=Consent Rule Line No.;
                                                              SVE=GodkÑnnanderegel radnr.] }
    { 11012020;;Approver Group Code;Code10        ;TableRelation="Approver Group";
                                                   CaptionML=[ENU=Approver Group Code;
                                                              SVE=GodkÑnnandegruppkod] }
    { 11012030;;Project No.        ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Project No.;
                                                              SVE=Projektnr] }
    { 11012035;;Element            ;Code20        ;CaptionML=[ENU=Element;
                                                              SVE=Element] }
    { 11012037;;Extension Contract ;Code10        ;CaptionML=[ENU=Extension Contract;
                                                              SVE=éTA] }
    { 11012040;;Service Order No.  ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Service Order No.;
                                                              SVE=Serviceordernr] }
    { 11012050;;Department         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              SVE=Department];
                                                   CaptionClass='1,1,1' }
    { 11012060;;Cost Object        ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                                                 Global Dimension No.=CONST(2));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 11012070;;Wage Component     ;Code20        ;TableRelation="Wage Component".Code WHERE (Component Type=FILTER(Hours|Expenses));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Wage Component;
                                                              SVE=Lîneart] }
    { 11012080;;Plant Company      ;Text30        ;TableRelation=Company;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Plant Company;
                                                              SVE=Maskinfîretag] }
    { 11012085;;Plant Location     ;Code20        ;TableRelation=IF (Plant Company=FILTER('')) "Plant Location";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Plant Location;
                                                              SVE=Maskinutplacering] }
    { 11012090;;Plant Type         ;Code20        ;CaptionML=[ENU=Plant Type;
                                                              SVE=Maskintyp] }
    { 11012095;;Plant No.          ;Code10        ;CaptionML=[ENU=Plant No.;
                                                              SVE=Maskinnr] }
    { 11012100;;Supplying Company  ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Supplying Company;
                                                              SVE=Levererande fîretag] }
    { 11012110;;Receiving Company  ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Receiving Company;
                                                              SVE=Mottagningsfîretag] }
    { 11012300;;Hours              ;Decimal       ;CaptionML=[ENU=Hours;
                                                              SVE=Timmar];
                                                   DecimalPlaces=0:3 }
    { 11012305;;Kilometers         ;Decimal       ;CaptionML=[ENU=Kilometers;
                                                              SVE=Kilometrar] }
    { 11012310;;Year               ;Integer       ;CaptionML=[ENU=Year;
                                                              SVE=èr] }
    { 11012320;;Week               ;Integer       ;CaptionML=[ENU=Week;
                                                              SVE=Vecka] }
    { 11012325;;Employee No.       ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Employee;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Employee No.;
                                                              SVE=AnstÑllningsnr] }
    { 11012330;;Cost Code          ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Code";
                                                   CaptionML=[ENU=Cost Code;
                                                              SVE=Kostnadskod] }
    { 11012340;;Resource Request No.;Code20       ;TableRelation=IF (Resource Req. Receiv. Company=FILTER('')) "Resource Request";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Request No.;
                                                              SVE=Nr fîr fîrfrÜgan] }
    { 11012350;;Due Date Document  ;Date          ;CaptionML=[ENU=Due Date Document;
                                                              SVE=Fîrfallodatum, dokument] }
    { 11012360;;Vendor No.         ;Code20        ;CaptionML=[ENU=Vendor No.;
                                                              SVE=Leverantîrsnr] }
    { 11012370;;Approved by        ;Code50        ;TableRelation=Approver;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Approved by;
                                                              SVE=GodkÑnt av];
                                                   Editable=No }
    { 11012380;;Locked             ;Boolean       ;OnValidate=VAR
                                                                ApprovalsMgmt@1100528501 : Codeunit 1535;
                                                              BEGIN
                                                                IF (NOT xRec.Locked) AND Locked THEN
                                                                  "Locked By" := USERID;
                                                                IF xRec.Locked AND (NOT Locked) THEN BEGIN
                                                                  IF ("Locked By" <> USERID) AND (NOT ApprovalsMgmt.CheckUserAsSuperApprover("Document Type")) AND
                                                                    (NOT ApprovalsMgmt.CheckApprovalSharing("Locked By")) THEN
                                                                      ERROR(Text000, "Locked By")
                                                                  ELSE
                                                                    "Locked By" := '';
                                                                END;
                                                                IF xRec.Locked AND Locked AND (NOT ApprovalEntryInGroup) THEN
                                                                  ERROR(Text000, "Locked By");
                                                                IF (NOT xRec.Locked) AND (NOT Locked) AND (NOT ApprovalEntryInGroup) THEN
                                                                  ERROR(Text002);
                                                              END;

                                                   CaptionML=ENU=Locked }
    { 11012390;;Locked By          ;Text250       ;CaptionML=[ENU=Locked By;
                                                              SVE=LÜst av] }
    { 11012400;;Resource Req. Receiv. Company;Text30;
                                                   TableRelation=Company;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Resource Request Receiving Company }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Record ID to Approve,Workflow Step Instance ID,Sequence No. }
    {    ;Table ID,Document Type,Document No.,Sequence No.,Record ID to Approve }
    {    ;Approver ID,Status,Due Date,Date-Time Sent for Approval }
    {    ;Sender ID                                }
    {    ;Due Date                                 }
    {    ;Table ID,Record ID to Approve,Status,Workflow Step Instance ID,Sequence No. }
    {    ;Table ID,Document Type,Document No.,Date-Time Sent for Approval }
    {    ;Document No.,Document Type,Table ID,Document Line No.,Record ID to Approve,Approval Code,Workflow Step Instance ID,Approver ID,Approver Group Code,Status }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UserMgt@1000 : Codeunit 418;
      PageManagement@1001 : Codeunit 700;
      RecNotExistTxt@1002 : TextConst 'ENU=The record does not exist.;NOR=Posten finnes ikke.;SVE=Posten finns inte.';
      ChangeRecordDetailsTxt@1003 : TextConst '@@@="Prefix = Record information %1 = field caption %2 = old value %3 = new value. Example: Customer 123455; Credit Limit changed from 100.00 to 200.00";ENU="; %1 changed from %2 to %3";NOR="; %1 endret fra %2 til %3";SVE="; %1 har Ñndrats frÜn %2 till %3"';
      ApprovalAction@1100528400 : 'Approve,Reject,Delegate,Lock,Unlock';
      ConsentManagement@1100525000 : Codeunit 11012132;
      Text000@1100528500 : TextConst 'ENU=Entry is Locked by %1.';
      Text001@1100527350 : TextConst 'ENU=%1 approval entries are locked.';
      Text002@1100527351 : TextConst 'ENU=Approval entries are unlocked.';
      ApprovalEntryInGroup@1100527352 : Boolean;
      FirstLine@1100527550 : Boolean;

    [External]
    PROCEDURE ShowRecord@1();
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT;
      RecRef.SETRECFILTER;
      PageManagement.PageRun(RecRef);
    END;

    [External]
    PROCEDURE RecordCaption@4() : Text;
    VAR
      AllObjWithCaption@1000 : Record 2000000058;
      RecRef@1002 : RecordRef;
      PageNo@1001 : Integer;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT;
      PageNo := PageManagement.GetPageID(RecRef);
      IF PageNo = 0 THEN
        EXIT;
      AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Page,PageNo);
      EXIT(STRSUBSTNO('%1 %2',AllObjWithCaption."Object Caption","Document No."));
    END;

    [External]
    PROCEDURE RecordDetails@3() Details : Text;
    VAR
      SalesHeader@1001 : Record 36;
      PurchHeader@1000 : Record 38;
      RecRef@1002 : RecordRef;
      ChangeRecordDetails@1003 : Text;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT(RecNotExistTxt);

      ChangeRecordDetails := GetChangeRecordDetails;

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.CALCFIELDS(Amount);
            Details :=
              STRSUBSTNO(
                '%1 ; %2: %3',SalesHeader."Sell-to Customer Name",SalesHeader.FIELDCAPTION(Amount),SalesHeader.Amount);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchHeader);
            PurchHeader.CALCFIELDS(Amount);
            Details :=
              STRSUBSTNO(
                '%1 ; %2: %3',PurchHeader."Buy-from Vendor Name",PurchHeader.FIELDCAPTION(Amount),PurchHeader.Amount);
          END;
        ELSE
          Details := FORMAT("Record ID to Approve",0,1) + ChangeRecordDetails;
      END;

      OnAfterGetRecordDetails(RecRef,ChangeRecordDetails,Details);
    END;

    [External]
    PROCEDURE IsOverdue@5() : Boolean;
    BEGIN
      EXIT((Status IN [Status::Created,Status::Open]) AND ("Due Date" < TODAY));
    END;

    [External]
    PROCEDURE GetCustVendorDetails@6(VAR CustVendorNo@1002 : Code[20];VAR CustVendorName@1003 : Text[100]);
    VAR
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1001 : Record 36;
      Customer@1005 : Record 18;
      RecRef@1004 : RecordRef;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT;

      CASE "Table ID" OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            CustVendorNo := PurchaseHeader."Pay-to Vendor No.";
            CustVendorName := PurchaseHeader."Pay-to Name";
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            CustVendorNo := SalesHeader."Bill-to Customer No.";
            CustVendorName := SalesHeader."Bill-to Name";
          END;
        DATABASE::Customer:
          BEGIN
            RecRef.SETTABLE(Customer);
            CustVendorNo := Customer."No.";
            CustVendorName := Customer.Name;
          END;
      END;
    END;

    [External]
    PROCEDURE GetChangeRecordDetails@2() ChangeDetails : Text;
    VAR
      WorkflowRecordChange@1000 : Record 1525;
      OldValue@1001 : Text;
      NewValue@1002 : Text;
    BEGIN
      WorkflowRecordChange.SETRANGE("Record ID","Record ID to Approve");
      WorkflowRecordChange.SETRANGE("Workflow Step Instance ID","Workflow Step Instance ID");

      IF WorkflowRecordChange.FINDSET THEN
        REPEAT
          WorkflowRecordChange.CALCFIELDS("Field Caption");
          NewValue := WorkflowRecordChange.GetFormattedNewValue(TRUE);
          OldValue := WorkflowRecordChange.GetFormattedOldValue(TRUE);
          ChangeDetails += STRSUBSTNO(ChangeRecordDetailsTxt,WorkflowRecordChange."Field Caption",
              OldValue,NewValue);
        UNTIL WorkflowRecordChange.NEXT = 0;
    END;

    [External]
    PROCEDURE CanCurrentUserEdit@7() : Boolean;
    VAR
      UserSetup@1000 : Record 91;
      ApprovalSharingWorkflow@1100525000 : Record 11229350;
      SharedApprovalFound@1100525001 : Boolean;
      ApprovalsMgmt@1100528200 : Codeunit 1535;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT(FALSE);
      //**4PS.so
      //EXIT((UserSetup."User ID" IN ["Sender ID","Approver ID"]) OR UserSetup."Approval Administrator");
      //**4PS.eo
      //**4PS.sn

      IF (UserSetup."User ID" IN ["Sender ID","Approver ID"]) OR
        UserSetup."Approval Administrator" OR
        ApprovalsMgmt.CheckUserAsSuperApprover("Document Type")
      THEN
        EXIT(TRUE);

      IF NOT ConsentManagement.FilterApprovalSharingToUser(ApprovalSharingWorkflow, USERID) THEN
        EXIT;

      IF ApprovalSharingWorkflow.FINDSET THEN
        REPEAT
          IF "Approver ID" = ApprovalSharingWorkflow."Owner User ID" THEN
            SharedApprovalFound := TRUE;
        UNTIL (ApprovalSharingWorkflow.NEXT = 0) OR SharedApprovalFound;

      EXIT(SharedApprovalFound);
      //**4PS.en
    END;

    [External]
    PROCEDURE MarkAllWhereUserisApproverOrSender@9();
    VAR
      UserSetup@1000 : Record 91;
      UserIDFilter@1100525000 : Text;
      ApprovalsMgmt@1100525001 : Codeunit 1535;
    BEGIN
      IF UserSetup.GET(USERID) AND UserSetup."Approval Administrator" THEN
        EXIT;
      FILTERGROUP(-1); // Used to support the cross-column search
      //**4PS - C040162 sn
      UserIDFilter := ApprovalsMgmt.GetApprovalSharingToUserFilter(USERID);
      SETFILTER("Sender ID",USERID + '|' + UserIDFilter);
      SETFILTER("Approver ID",USERID + '|' + UserIDFilter);
      //**4PS - C040162 en
      //**4PS - C040162 so
      //SETRANGE("Approver ID",USERID);
      //SETRANGE("Sender ID",USERID);
      //**4PS - C040162 eo
      IF FINDSET THEN
        REPEAT
          MARK(TRUE);
        UNTIL NEXT = 0;
      MARKEDONLY(TRUE);
      FILTERGROUP(0);
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterGetRecordDetails@8(RecRef@1001 : RecordRef;ChangeRecordDetails@1000 : Text;VAR Details@1002 : Text);
    BEGIN
    END;

    PROCEDURE LookupUserSetupName@11012003(VAR UserName@1000 : Code[50]) : Boolean;
    VAR
      UserSetup@1100525001 : Record 91;
    BEGIN
      //**4PS  Call C022612
      UserSetup.RESET;
      UserSetup.SETCURRENTKEY("User ID");
      UserSetup.FILTERGROUP(9);
      UserSetup.SETFILTER("Approver ID", '<>%1', '');
      UserSetup.FILTERGROUP(0);
      UserSetup."User ID" := UserName;

      IF NOT UserSetup.FIND('=><') THEN
        EXIT(FALSE);

      IF PAGE.RUNMODAL(0, UserSetup) = ACTION::LookupOK THEN BEGIN
        UserName := UserSetup."User ID";
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE AddTempCompressedApprovalEntries@1100528408(ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      CompressionLevel@1100528404 : 'Default,Detailed,Compressed';
    BEGIN
      //**4PS
      AddTempApprovalEntries(ApprovalEntriesOfAllApproversAreShown, CompressionLevel::Compressed, ApprovalPageOption);
    END;

    PROCEDURE AddTempDetailedApprovalEntries@1100528402(ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      CompressionLevel@1100528404 : 'Default,Detailed,Compressed';
    BEGIN
      //**4PS
      AddTempApprovalEntries(ApprovalEntriesOfAllApproversAreShown, CompressionLevel::Detailed, ApprovalPageOption);
    END;

    LOCAL PROCEDURE AddTempApprovalEntries@1100528461(ConsentLinesOfAllApproversAreShown@1100528401 : Boolean;CompressionLevel@1100528404 : 'Default,Detailed,Compressed';ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      CurrentApprovalEntry@1100528403 : Record 454;
      TempApprovalEntry@1100528400 : TEMPORARY Record 454;
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      //**4PS
      IF NOT ISTEMPORARY THEN
        EXIT;

      CurrentApprovalEntry := Rec;

      ConsentManagement.FillTempApprovalEntries(
        TempApprovalEntry, TRUE, ConsentLinesOfAllApproversAreShown, 0, '', USERID, CompressionLevel, ApprovalPageOption);

      IF TempApprovalEntry.FINDSET THEN
        REPEAT
          IF NOT GET(TempApprovalEntry."Entry No.") THEN BEGIN
            Rec := TempApprovalEntry;
            INSERT;
          END;
        UNTIL TempApprovalEntry.NEXT = 0;

      TryToGetCurrentApprovalEntry(CurrentApprovalEntry);
    END;

    PROCEDURE UpdateTempCompressedApprovalEntries@1100528509(ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      CompressionLevel@1100528404 : 'Default,Detailed,Compressed';
    BEGIN
      //**4PS
      UpdateTempApprovalEntries(ApprovalEntriesOfAllApproversAreShown, CompressionLevel::Compressed, ApprovalPageOption);
    END;

    PROCEDURE UpdateTempDetailedApprovalEntries@1100528508(ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      CompressionLevel@1100528404 : 'Default,Detailed,Compressed';
    BEGIN
      //**4PS
      UpdateTempApprovalEntries(ApprovalEntriesOfAllApproversAreShown, CompressionLevel::Detailed, ApprovalPageOption);
    END;

    LOCAL PROCEDURE UpdateTempApprovalEntries@1100528502(ConsentLinesOfAllApproversAreShown@1100528401 : Boolean;CompressionLevel@1100528404 : 'Default,Detailed,Compressed';ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      CurrentApprovalEntry@1100528403 : Record 454;
      TempApprovalEntry@1100528400 : TEMPORARY Record 454;
      ConsentManagement@1100528402 : Codeunit 11012132;
      TempApprovalEntryOrig@1100528500 : TEMPORARY Record 454;
    BEGIN
      //**4PS
      IF NOT ISTEMPORARY THEN
        EXIT;

      CurrentApprovalEntry := Rec;

      ConsentManagement.FillTempApprovalEntries(
        TempApprovalEntry, TRUE, ConsentLinesOfAllApproversAreShown, 0, '', USERID, CompressionLevel, ApprovalPageOption);

      IF TempApprovalEntry.FINDSET THEN
        REPEAT
          IF NOT GET(TempApprovalEntry."Entry No.") THEN BEGIN
            Rec := TempApprovalEntry;
            INSERT;
          END;
        UNTIL TempApprovalEntry.NEXT = 0;

      TempApprovalEntryOrig.COPY(Rec,TRUE);
      TempApprovalEntryOrig.RESET;
      IF TempApprovalEntryOrig.FINDSET THEN
        REPEAT
          IF NOT TempApprovalEntry.GET(TempApprovalEntryOrig."Entry No.") THEN BEGIN
            IF GET(TempApprovalEntryOrig."Entry No.") THEN
              DELETE;
          END;
        UNTIL TempApprovalEntryOrig.NEXT = 0;

      TryToGetCurrentApprovalEntry(CurrentApprovalEntry);
    END;

    PROCEDURE GetNoOfDetailEntries@1100528413() : Integer;
    VAR
      TempApprovalEntry@1100528401 : TEMPORARY Record 454;
      ConsentManagement@1100528400 : Codeunit 11012132;
    BEGIN
      //**4PS
      ConsentManagement.FillTempDetailedApprovalEntriesForCompressedEntry(TempApprovalEntry, Rec);
      EXIT(TempApprovalEntry.COUNT);
    END;

    PROCEDURE ShowDetailedEntriesForCompressedEntry@1100528409(ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      CurrentApprovalEntry@1100528400 : Record 454;
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      //**4PS
      IF NOT ISTEMPORARY THEN
        EXIT;

      CurrentApprovalEntry := Rec;
      ConsentManagement.ShowDetailedApprovalEntriesForCompressedEntry(Rec);

      //Refresh compressed approval entries.
      DELETEALL;
      AddTempCompressedApprovalEntries(ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);

      TryToGetCurrentApprovalEntry(CurrentApprovalEntry);
    END;

    PROCEDURE ShowAllDetailedApprovalEntriesFromCompressedApprovalPage@1100528442(ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      //**4PS
      IF NOT ISTEMPORARY THEN
        EXIT;

      ConsentManagement.ShowAllDetailedApprovalEntriesFromCompressedApprovalPage(ApprovalPageOption);

      //Refresh detailed approval entries.
      DELETEALL;
      AddTempCompressedApprovalEntries(ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE ShowAllCompressedApprovalEntriesFromDetailedApprovalPage@1100528454(ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      //**4PS
      IF NOT ISTEMPORARY THEN
        EXIT;

      ConsentManagement.ShowAllCompressedApprovalEntriesFromDetailedApprovalPage(ApprovalPageOption);

      //Refresh detailed approval lines.
      DELETEALL;
      AddTempDetailedApprovalEntries(ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE GetDetailedApprovalEntriesOfAllApprovers@1100528400(ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      GetApprovalEntriesOfAllApprovers(TRUE, ApprovalPageOption);
    END;

    PROCEDURE GetCompressedApprovalEntriesOfAllApprovers@1100528401(ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      GetApprovalEntriesOfAllApprovers(FALSE, ApprovalPageOption);
    END;

    PROCEDURE GetApprovalEntriesOfAllApprovers@1100528403(GetDetailedEntries@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      Approver@1100528400 : Record 11012229;
    BEGIN
      //**4PS
      Approver.GET(USERID);

      IF NOT ISTEMPORARY THEN
        EXIT;

      IF GetDetailedEntries THEN
        AddTempDetailedApprovalEntries(TRUE, ApprovalPageOption)
      ELSE
        AddTempCompressedApprovalEntries(TRUE, ApprovalPageOption);
    END;

    PROCEDURE ApproveDetailedApprovalEntries@1100528404(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;TempCompressedApprovalEntry@1100528403 : TEMPORARY Record 454;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessDetailedApprovalEntries(
        ApprovalEntry, ApprovalAction::Approve, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
    END;

    PROCEDURE ApproveCompressedApprovalEntries@1100528405(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessCompressedApprovalEntries(
        ApprovalEntry, ApprovalAction::Approve, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE RejectDetailedApprovalEntries@1100528414(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;TempCompressedApprovalEntry@1100528403 : TEMPORARY Record 454;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessDetailedApprovalEntries(
        ApprovalEntry, ApprovalAction::Reject, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
    END;

    PROCEDURE RejectCompressedApprovalEntries@1100528412(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessCompressedApprovalEntries(
        ApprovalEntry, ApprovalAction::Reject, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE DelegateDetailedApprovalEntries@1100528439(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;TempCompressedApprovalEntry@1100528403 : TEMPORARY Record 454;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessDetailedApprovalEntries(
        ApprovalEntry, ApprovalAction::Delegate, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
    END;

    PROCEDURE DelegateCompressedApprovalEntries@1100528434(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessCompressedApprovalEntries(
        ApprovalEntry, ApprovalAction::Delegate, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE ProcessDetailedApprovalEntries@1100528417(VAR ApprovalEntry@1100528400 : Record 454;ApprovalAction2@1100528404 : Integer;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;TempCompressedApprovalEntry@1100528403 : TEMPORARY Record 454;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      ApprovalsMgmt@1100528402 : Codeunit 1535;
    BEGIN
      //**4PS
      FirstLine := TRUE;
      IF NOT ISTEMPORARY THEN
        EXIT;

      CASE ApprovalAction2 OF
        ApprovalAction::Approve:
          ApprovalsMgmt.ApproveApprovalRequests(ApprovalEntry);
        ApprovalAction::Reject:
          ApprovalsMgmt.RejectApprovalRequests(ApprovalEntry);
        ApprovalAction::Delegate:
          ApprovalsMgmt.DelegateApprovalRequestsWithoutMessage(ApprovalEntry, FirstLine);
        ApprovalAction::Lock:
          ApprovalsMgmt.SwitchLockApprovalRequests(ApprovalEntry, TRUE);
        ApprovalAction::Unlock:
          ApprovalsMgmt.SwitchLockApprovalRequests(ApprovalEntry, FALSE);
      END;
      DELETEALL;
      IF TempCompressedApprovalEntry."Entry No." = 0 THEN
        AddTempDetailedApprovalEntries(ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption)
      ELSE
        AddTempDetailedApprovalEntriesForCompressedEntry(TempCompressedApprovalEntry);
    END;

    PROCEDURE ProcessCompressedApprovalEntries@1100528416(VAR ApprovalEntry@1100528400 : Record 454;ApprovalAction2@1100528406 : Integer;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    VAR
      ApprovalEntry2@1100528404 : Record 454;
      TempDetailedApprovalEntry@1100528403 : TEMPORARY Record 454;
      TmpCheckApprovalEntry@1100529601 : TEMPORARY Record 454;
      ConsentManagement@1100528402 : Codeunit 11012132;
      ApprovalsMgmt@1100528405 : Codeunit 1535;
      ApprovalManagement4PSConstr@1100529602 : Codeunit 11125349;
    BEGIN
      //**4PS
      FirstLine := TRUE;
      IF NOT ISTEMPORARY THEN
        EXIT;

      IF ApprovalEntry.FINDSET THEN
        REPEAT
          IF GET(ApprovalEntry."Entry No.") THEN BEGIN
            ApprovalsMgmt.SetSkipCheckFourEyesApproval(TRUE);
            TempDetailedApprovalEntry.CLEARMARKS;
            TempDetailedApprovalEntry.DELETEALL;
            ConsentManagement.FillTempDetailedApprovalEntriesForCompressedEntry(TempDetailedApprovalEntry, Rec);
            TempDetailedApprovalEntry.MARKEDONLY(TRUE);
            IF TempDetailedApprovalEntry.FINDSET THEN BEGIN
              ApprovalEntry2.COPY(TempDetailedApprovalEntry);
              CASE ApprovalAction2 OF
                ApprovalAction::Approve:
                  ApprovalsMgmt.ApproveApprovalRequests(ApprovalEntry2);
                ApprovalAction::Reject:
                  ApprovalsMgmt.RejectApprovalRequests(ApprovalEntry2);
                ApprovalAction::Delegate:
                  ApprovalsMgmt.DelegateApprovalRequestsWithoutMessage(ApprovalEntry2, FirstLine);
                ApprovalAction::Lock:
                  ApprovalsMgmt.SwitchLockApprovalRequests(ApprovalEntry2, TRUE);
                ApprovalAction::Unlock:
                  ApprovalsMgmt.SwitchLockApprovalRequests(ApprovalEntry2, FALSE);
              END;
              IF ApprovalAction IN [ApprovalAction::Approve, ApprovalAction::Delegate] THEN
                ApprovalManagement4PSConstr.AddTmpApprovalEntry(ApprovalEntry2, TmpCheckApprovalEntry);
            END;
          END;
        UNTIL ApprovalEntry.NEXT = 0;

      ApprovalManagement4PSConstr.CheckTmpApprovalEntry(TmpCheckApprovalEntry);

      DELETEALL;
      AddTempCompressedApprovalEntries(ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE AddTempDetailedApprovalEntriesForCompressedEntry@1100528406(TempCompressedApprovalEntry@1100528400 : TEMPORARY Record 454);
    VAR
      CurrentApprovalEntry@1100528402 : Record 454;
      TempApprovalEntry@1100528401 : TEMPORARY Record 454;
      ConsentManagement@1100528403 : Codeunit 11012132;
    BEGIN
      //**4PS
      IF NOT ISTEMPORARY THEN
        EXIT;

      CurrentApprovalEntry := Rec;

      ConsentManagement.FillTempDetailedApprovalEntriesForCompressedEntry(
        TempApprovalEntry, TempCompressedApprovalEntry);

      IF TempApprovalEntry.FINDSET THEN
        REPEAT
          IF NOT GET(TempApprovalEntry."Entry No.") THEN BEGIN
            Rec := TempApprovalEntry;
            INSERT;
          END;
        UNTIL TempApprovalEntry.NEXT = 0;

      TryToGetCurrentApprovalEntry(CurrentApprovalEntry);
    END;

    LOCAL PROCEDURE TryToGetCurrentApprovalEntry@1100528407(CurrentApprovalEntry@1100528400 : Record 454);
    BEGIN
      //**4PS
      IF NOT GET(CurrentApprovalEntry."Entry No.") THEN BEGIN
        Rec := CurrentApprovalEntry;
        NEXT;
      END;
    END;

    PROCEDURE GetVendorNo@1100528410() VendorNo : Code[20];
    VAR
      AmountLCY@1100528406 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528405 : Code[20];
      RelatedPurchOrderNo@1100528404 : Code[20];
      GLAccountNo@1100528403 : Code[20];
      ShortcutDimCode@1100528402 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528401 : Text[100];
      DocumentLineQuantity@1100528400 : Decimal;
      DocumentLineAmountLCY@1100528408 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      IF "Vendor No." = '' THEN
        GetDocumentData(
          FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
          DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode)
      ELSE
        VendorNo := "Vendor No.";
    END;

    PROCEDURE GetVendorName@1100528411() : Text[100];
    VAR
      Vendor@1100528409 : Record 23;
      VendorNo@1100528408 : Code[20];
      AmountLCY@1100528407 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528406 : Code[20];
      RelatedPurchOrderNo@1100528405 : Code[20];
      GLAccountNo@1100528404 : Code[20];
      ShortcutDimCode@1100528403 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528402 : Text[100];
      DocumentLineQuantity@1100528401 : Decimal;
      DocumentLineAmountLCY@1100528400 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      IF "Vendor No." = '' THEN
        GetDocumentData(
          FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
          DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode)
      ELSE
        VendorNo := "Vendor No.";

      IF Vendor.GET(VendorNo) THEN
        EXIT(Vendor.Name);
    END;

    PROCEDURE GetTotalAmountOfDocument@1100528429() AmountLCY : Decimal;
    VAR
      VendorNo@1100528401 : Code[20];
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528400 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528403 : Code[20];
      ShortcutDimCode@1100528402 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528404 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //*4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetTotalAmountInclVATOfDocument@1100528501() AmountIncludingVATLCY : Decimal;
    VAR
      VendorNo@1100528401 : Code[20];
      AmountLCY@1100528500 : Decimal;
      Element@1100528400 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528403 : Code[20];
      ShortcutDimCode@1100528402 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528404 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //*4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetProjectDescription@1100528441() : Text[100];
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      //**4PS
      Job.CHANGECOMPANY("Receiving Company");
      IF "Project No." <> '' THEN
        IF Job.GET("Project No.") THEN
          EXIT(Job.Description);
    END;

    PROCEDURE GetElement@1100528421() Element : Code[20];
    VAR
      VendorNo@1100528400 : Code[20];
      AmountLCY@1100528403 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528404 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetElementDescription@1100529603() : Text[50];
    VAR
      ProjectElement@1100529600 : Record 11012010;
      VendorNo@1100529611 : Code[20];
      AmountLCY@1100529610 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      RelatedPurchOrderNo@1100529609 : Code[20];
      GLAccountNo@1100529608 : Code[20];
      ShortcutDimCode@1100529607 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100529606 : Text[100];
      DocumentLineQuantity@1100529605 : Decimal;
      DocumentLineAmountLCY@1100529604 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529602 : Code[20];
    BEGIN
      //**4PS
      IF "Project No." = '' THEN
        EXIT('');
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
      ProjectElement.CHANGECOMPANY("Receiving Company");
      IF ProjectElement.GET("Project No.", Element) THEN
        EXIT(ProjectElement.Description);
      EXIT('');
    END;

    PROCEDURE GetCostComponentDescription@1100529607() : Text[30];
    VAR
      CostComponent@1100529602 : Record 11012012;
      VendorNo@1100529611 : Code[20];
      AmountLCY@1100529610 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      RelatedPurchOrderNo@1100529609 : Code[20];
      GLAccountNo@1100529608 : Code[20];
      ShortcutDimCode@1100529607 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100529606 : Text[100];
      DocumentLineQuantity@1100529605 : Decimal;
      DocumentLineAmountLCY@1100529604 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
      IF CostComponentCode <> '' THEN BEGIN
        CostComponent.CHANGECOMPANY("Receiving Company");
        IF CostComponent.GET(CostComponentCode) THEN
          EXIT(CostComponent.Description);
      END;
    END;

    PROCEDURE GetProjectManager@1100528422() : Code[20];
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      //**4PS
      Job.CHANGECOMPANY("Receiving Company");
      IF "Project No." <> '' THEN
        IF Job.GET("Project No.") THEN
          EXIT(Job."Project Manager");
    END;

    PROCEDURE GetNameProjectManager@1100528432() : Text[100];
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      //**4PS
      Job.CHANGECOMPANY("Receiving Company");
      IF "Project No." <> '' THEN
        IF Job.GET("Project No.") THEN BEGIN
          Job.CALCFIELDS("Name Project Manager");
          EXIT(Job."Name Project Manager");
        END;
    END;

    PROCEDURE GetServiceOrderDescription@1100528445() : Text[50];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          EXIT(ServiceOrder.Description);
    END;

    PROCEDURE GetServiceOrderKind@1100528447() : Code[10];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          EXIT(ServiceOrder."Order Kind");
    END;

    PROCEDURE GetServiceOrderManager@1100528424() : Code[20];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          EXIT(ServiceOrder."Order Manager");
    END;

    PROCEDURE GetServiceOrderManagerName@1100528453() : Text[100];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN BEGIN
          ServiceOrder.CALCFIELDS("Order Manager Name");
          EXIT(ServiceOrder."Order Manager Name");
        END;
    END;

    PROCEDURE GetServiceContractNo@1100528435() : Code[20];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          EXIT(ServiceOrder."Service Contract No.");
    END;

    PROCEDURE GetServiceContractManager@1100528437() : Code[20];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
      ServiceContract@1100528401 : Record 11012812;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      ServiceContract.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN
            EXIT(ServiceContract."Contract Manager");
    END;

    PROCEDURE GetServiceContractManagerName@1100528459() : Text[100];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
      ServiceContract@1100528401 : Record 11012812;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      ServiceContract.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN BEGIN
            ServiceContract.CALCFIELDS("Contract Manager Name");
            EXIT(ServiceContract."Contract Manager Name");
          END;
    END;

    PROCEDURE GetServiceLocation@1100529601() : Code[20];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          EXIT(ServiceOrder."Service Location No.");
    END;

    PROCEDURE GetServiceLocationDescription@1100529600() : Text[50];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF "Service Order No." <> '' THEN
        IF ServiceOrder.GET("Service Order No.") THEN BEGIN
          ServiceOrder.CALCFIELDS("Service Location Description");
          EXIT(ServiceOrder."Service Location Description");
        END;
    END;

    PROCEDURE GetGLAccountNo@1100528425() GLAccountNo : Code[20];
    VAR
      VendorNo@1100528400 : Code[20];
      AmountLCY@1100528403 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528401 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      ShortcutDimCode@1100528402 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528404 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY,Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetRelatedPurchOrderNo@1100529100() RelatedPurchOrderNo : Code[20];
    VAR
      VendorNo@1100528400 : Code[20];
      AmountLCY@1100529106 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100529105 : Code[20];
      GLAccountNo@1100529103 : Code[20];
      ShortcutDimCode@1100529102 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100529107 : Text[100];
      DocumentLineQuantity@1100529101 : Decimal;
      DocumentLineAmountLCY@1100529100 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetRelatedPurchOrderNoOfCompressedApprovalEntry@1100528420() RelatedPurchOrderNo : Code[20];
    VAR
      VendorNo@1100528400 : Code[20];
      AmountLCY@1100529106 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100529105 : Code[20];
      GLAccountNo@1100529103 : Code[20];
      ShortcutDimCode@1100529102 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100529107 : Text[100];
      DocumentLineQuantity@1100529101 : Decimal;
      DocumentLineAmountLCY@1100529100 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        TRUE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetShortcutDimCode@1100528427(I@1100528407 : Integer) : Code[20];
    VAR
      VendorNo@1100528408 : Code[20];
      AmountLCY@1100528404 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528400 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528401 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
      EXIT(ShortcutDimCode[I]);
    END;

    PROCEDURE GetShortcutDimCodeOfCompressedApprovalEntry@1100528426(I@1100528407 : Integer) : Code[20];
    VAR
      VendorNo@1100528408 : Code[20];
      AmountLCY@1100528404 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528400 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528401 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        TRUE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
      EXIT(ShortcutDimCode[I]);
    END;

    PROCEDURE GetDimensionName@1100529605(FieldNumber@1100529604 : Integer) : Text[50];
    BEGIN
      //**4PS
      EXIT(GetDimensionValueName(FieldNumber, FALSE));
    END;

    PROCEDURE GetDimensionNameOfCompressedApprovalEntry@1100528463(FieldNumber@1100529604 : Integer) : Text[50];
    BEGIN
      //**4PS
      EXIT(GetDimensionValueName(FieldNumber, TRUE));
    END;

    LOCAL PROCEDURE GetDimensionValueName@1100528458(FieldNumber@1100529604 : Integer;OnlyHeader@1100528400 : Boolean) : Text[50];
    VAR
      DimensionValue@1100529602 : Record 349;
      DimensionManagement@1100529600 : Codeunit 408;
      VendorNo@1100529613 : Code[20];
      AmountLCY@1100529612 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100529611 : Code[20];
      RelatedPurchOrderNo@1100529610 : Code[20];
      GLAccountNo@1100529609 : Code[20];
      ShortcutDimCode@1100529608 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100529607 : Text[100];
      DocumentLineQuantity@1100529606 : Decimal;
      DocumentLineAmountLCY@1100529605 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529601 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        OnlyHeader, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
      IF ShortcutDimCode[FieldNumber] = '' THEN
        EXIT('');

      DimensionManagement.SetCompany("Receiving Company");
      DimensionManagement.GetDimValueRec(FieldNumber, ShortcutDimCode[FieldNumber], DimensionValue, FALSE, "Project No.");
      EXIT(DimensionValue.Name);
    END;

    PROCEDURE GetDocumentLineDescription@1100528455() DocumentLineDescription : Text[100];
    VAR
      VendorNo@1100528406 : Code[20];
      AmountLCY@1100528404 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528400 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetDocumentLineQuantity@1100528456() DocumentLineQuantity : Decimal;
    VAR
      VendorNo@1100528405 : Code[20];
      AmountLCY@1100528404 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineAmountLCY@1100528400 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetDocumentLineAmount@1100528457() DocumentLineAmountLCY : Decimal;
    VAR
      VendorNo@1100528400 : Code[20];
      AmountLCY@1100528404 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY,Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    PROCEDURE GetDocumentLineAmountInclVAT@1100528500() DocumentLineAmountIncludingVATLCY : Decimal;
    VAR
      VendorNo@1100528400 : Code[20];
      AmountLCY@1100528404 : Decimal;
      AmountIncludingVATLCY@1100528500 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[100];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528501 : Decimal;
      CostComponentCode@1100529600 : Code[20];
    BEGIN
      //**4PS
      GetDocumentData(
        FALSE, VendorNo, AmountLCY, AmountIncludingVATLCY,Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
    END;

    LOCAL PROCEDURE GetDocumentData@1100528431(OnlyHeader@1100528413 : Boolean;VAR VendorNo@1100528408 : Code[20];VAR AmountLCY@1100528406 : Decimal;VAR AmountIncludingVATLCY@1100528500 : Decimal;VAR Element@1100528401 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528409 : Code[20];VAR ShortcutDimCode@1100528407 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528410 : Text[100];VAR DocumentLineQuantity@1100528411 : Decimal;VAR DocumentLineAmountLCY@1100528412 : Decimal;VAR DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;VAR CostComponentCode@1100529604 : Code[20]);
    VAR
      PurchaseHeader@1100528400 : Record 38;
      PurchInvHeader@1100528402 : Record 122;
      PurchCrMemoHdr@1100528403 : Record 124;
      AdviceOrderLine@1100528404 : Record 11012055;
      ProjectPurchaseAction@1100528405 : Record 11012026;
      PurchaseRequisition@1100529600 : Record 11229330;
      HourAccounting@1100529602 : Record 11012038;
      SiteMgtHoursHeader@1100529603 : Record 11012360;
    BEGIN
      //**4PS
      CLEAR(VendorNo);
      CLEAR(AmountLCY);
      CLEAR(AmountIncludingVATLCY);
      CLEAR(Element);
      CLEAR(RelatedPurchOrderNo);
      CLEAR(GLAccountNo);
      CLEAR(ShortcutDimCode);
      CLEAR(DocumentLineDescription);
      CLEAR(DocumentLineQuantity);
      CLEAR(DocumentLineAmountLCY);
      CLEAR(DocumentLineAmountIncludingVATLCY);
      CLEAR(CostComponentCode);
      CASE "Document Type" OF
        "Document Type"::Invoice:
          BEGIN
            IF "Table ID" = DATABASE::"Purchase Header" THEN
              IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Invoice, "Document No.") THEN
                GetPurchaseData(
                  PurchaseHeader, OnlyHeader, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
            IF "Table ID" = DATABASE::"Purch. Inv. Header" THEN
              IF PurchInvHeader.GET("Document No.") THEN
                GetPurchInvData(
                  PurchInvHeader, OnlyHeader, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF "Table ID" = DATABASE::"Purchase Header" THEN
              IF PurchaseHeader.GET(PurchaseHeader."Document Type"::"Credit Memo", "Document No.") THEN
                GetPurchaseData(
                  PurchaseHeader, OnlyHeader, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
            IF "Table ID" = DATABASE::"Purch. Cr. Memo Hdr." THEN
              IF PurchCrMemoHdr.GET("Document No.") THEN
                GetPurchCrMemoData(
                  PurchCrMemoHdr, OnlyHeader, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
          END;
        "Document Type"::"Advice Order":
          BEGIN
            IF "Project No." <> '' THEN
              IF AdviceOrderLine.GET(
                AdviceOrderLine."Record Type"::Project, "Project No.", '', '', "Document Line No.")
              THEN
                GetAdviceOrderLineData(
                  AdviceOrderLine, VendorNo, AmountLCY, Element, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, CostComponentCode);
            IF "Service Order No." <> '' THEN
              IF AdviceOrderLine.GET(
                AdviceOrderLine."Record Type"::ServOrder, '', "Service Order No.", '', "Document Line No.")
              THEN
                GetAdviceOrderLineData(
                  AdviceOrderLine, VendorNo, AmountLCY, Element, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, CostComponentCode);
          END;
        "Document Type"::Quote:
          IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote, "Document No.") THEN
            GetPurchaseData(
              PurchaseHeader, OnlyHeader, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
        "Document Type"::Order:
          IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, "Document No.") THEN
            GetPurchaseData(
              PurchaseHeader, OnlyHeader, VendorNo, AmountLCY, AmountIncludingVATLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, DocumentLineAmountIncludingVATLCY, CostComponentCode);
        "Document Type"::"Purchase Action":
          IF ProjectPurchaseAction.GET("Project No.", "Document No.") THEN
            GetProjectPurchaseActionData(ProjectPurchaseAction, AmountLCY);
        "Document Type"::"Purchase Requisition":
          IF PurchaseRequisition.GET("Document No.") THEN
            GetPurchaseRequisitionData(
              PurchaseRequisition, OnlyHeader, VendorNo, AmountLCY, Element, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY, CostComponentCode);
        "Document Type"::"Hour Accounting":
          IF HourAccounting.GET(Year, Week, "Employee No.") THEN
            GetHourAccountingData(
              HourAccounting, OnlyHeader, Element, RelatedPurchOrderNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, CostComponentCode);
        "Document Type"::"Site Mgt HourAccounting":
          IF SiteMgtHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.") THEN
            GetSiteMgtHourAccountingData(
              SiteMgtHoursHeader, OnlyHeader, Element, ShortcutDimCode,
              DocumentLineQuantity, CostComponentCode);
      END;
    END;

    LOCAL PROCEDURE GetPurchaseData@1100528430(PurchaseHeader@1100528401 : Record 38;OnlyHeader@1100528413 : Boolean;VAR VendorNo@1100528412 : Code[20];VAR AmountLCY@1100528400 : Decimal;VAR AmountIncludingVATLCY@1100528500 : Decimal;VAR Element@1100528404 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528407 : Code[20];VAR ShortcutDimCode@1100528405 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528410 : Text[100];VAR DocumentLineQuantity@1100528409 : Decimal;VAR DocumentLineAmountLCY@1100528408 : Decimal;VAR DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;VAR CostComponentCode@1100529601 : Code[20]);
    VAR
      PurchaseLine@1100528403 : Record 39;
      ConsentManagement@1100528402 : Codeunit 11012132;
      DimensionManagement@1100528406 : Codeunit 408;
      DocumentLineAmount@1100528411 : Decimal;
      DocumentLineAmountIncludingVAT@1100528502 : Decimal;
    BEGIN
      //**4PS
      VendorNo := PurchaseHeader."Buy-from Vendor No.";
      PurchaseHeader.CALCFIELDS(Amount, "Amount Including VAT");
      AmountLCY := ConsentManagement.CalcAmountLCY(
        PurchaseHeader.Amount, PurchaseHeader."Currency Code", PurchaseHeader."Currency Factor",
        PurchaseHeader."Job No.", PurchaseHeader."Posting Date");
      AmountIncludingVATLCY := ConsentManagement.CalcAmountLCY(
        PurchaseHeader."Amount Including VAT", PurchaseHeader."Currency Code", PurchaseHeader."Currency Factor",
        PurchaseHeader."Job No.", PurchaseHeader."Posting Date");
      RelatedPurchOrderNo := PurchaseHeader."Related Purch. Order No.";

      IF ("Document Line No." = 0) OR OnlyHeader THEN BEGIN
        ShortcutDimCode[1] := PurchaseHeader."Shortcut Dimension 1 Code";
        ShortcutDimCode[2] := PurchaseHeader."Shortcut Dimension 2 Code";
        DimensionManagement.GetShortcutDimensions(PurchaseHeader."Dimension Set ID", ShortcutDimCode);
      END ELSE BEGIN
        IF PurchaseLine.GET(
          PurchaseHeader."Document Type", PurchaseHeader."No.", "Document Line No.")
        THEN BEGIN
          Element := PurchaseLine.Element;
          PurchaseLine.CALCFIELDS("Account No.");
          GLAccountNo := PurchaseLine."Account No.";
          ShortcutDimCode[1] := PurchaseLine."Shortcut Dimension 1 Code";
          ShortcutDimCode[2] := PurchaseLine."Shortcut Dimension 2 Code";
          PurchaseLine.ShowShortcutDimCode(ShortcutDimCode);
          DocumentLineDescription := PurchaseLine.Description;
          DocumentLineQuantity := PurchaseLine.Quantity;
          DocumentLineAmount := PurchaseLine.Amount;
          DocumentLineAmountIncludingVAT := PurchaseLine."Amount Including VAT";
          CostComponentCode := PurchaseLine."Cost Component";
        END;
        DocumentLineAmountLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmount, PurchaseHeader."Currency Code", PurchaseHeader."Currency Factor",
          PurchaseHeader."Job No.", PurchaseHeader."Posting Date");
        DocumentLineAmountIncludingVATLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmountIncludingVAT, PurchaseHeader."Currency Code", PurchaseHeader."Currency Factor",
          PurchaseHeader."Job No.", PurchaseHeader."Posting Date");
      END;
    END;

    LOCAL PROCEDURE GetPurchInvData@1100528436(PurchInvHeader@1100528401 : Record 122;OnlyHeader@1100528414 : Boolean;VAR VendorNo@1100528413 : Code[20];VAR AmountLCY@1100528400 : Decimal;VAR AmountIncludingVATLCY@1100528500 : Decimal;VAR Element@1100528404 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528407 : Code[20];VAR ShortcutDimCode@1100528406 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528411 : Text[100];VAR DocumentLineQuantity@1100528410 : Decimal;VAR DocumentLineAmountLCY@1100528409 : Decimal;VAR DocumentLineAmountIncludingVATLCY@1100528502 : Decimal;VAR CostComponentCode@1100529600 : Code[20]);
    VAR
      InvoiceApprovalLine@1100528408 : Record 11012032;
      PurchInvLine@1100528403 : Record 123;
      ConsentManagement@1100528402 : Codeunit 11012132;
      DimensionManagement@1100528405 : Codeunit 408;
      DocumentLineAmount@1100528412 : Decimal;
      DocumentLineAmountIncludingVAT@1100528501 : Decimal;
    BEGIN
      //**4PS
      VendorNo := PurchInvHeader."Buy-from Vendor No.";
      PurchInvHeader.CALCFIELDS(Amount, "Amount Including VAT");
      AmountLCY := ConsentManagement.CalcAmountLCY(
        PurchInvHeader.Amount, PurchInvHeader."Currency Code", PurchInvHeader."Currency Factor",
        PurchInvHeader."Job No.", PurchInvHeader."Posting Date");
      AmountIncludingVATLCY := ConsentManagement.CalcAmountLCY(
        PurchInvHeader."Amount Including VAT", PurchInvHeader."Currency Code", PurchInvHeader."Currency Factor",
        PurchInvHeader."Job No.", PurchInvHeader."Posting Date");
      RelatedPurchOrderNo := PurchInvHeader."Related Purch. Order No.";

      IF ("Document Line No." = 0) OR OnlyHeader THEN BEGIN
        ShortcutDimCode[1] := PurchInvHeader."Shortcut Dimension 1 Code";
        ShortcutDimCode[2] := PurchInvHeader."Shortcut Dimension 2 Code";
        DimensionManagement.GetShortcutDimensions(PurchInvHeader."Dimension Set ID", ShortcutDimCode);
      END ELSE BEGIN
        IF InvoiceApprovalLine.GET(
          PurchInvHeader."Journal Template", InvoiceApprovalLine."Document Type"::"Purchase Invoice",
          PurchInvHeader."No.", "Document Line No.")
        THEN BEGIN
          Element := InvoiceApprovalLine.Element;
          GLAccountNo := InvoiceApprovalLine."Account No.";
          ShortcutDimCode[1] := InvoiceApprovalLine."Shortcut Dimension 1 Code";
          ShortcutDimCode[2] := InvoiceApprovalLine."Shortcut Dimension 2 Code";
          InvoiceApprovalLine.ShowShortcutDimCode(ShortcutDimCode);
          DocumentLineDescription := InvoiceApprovalLine.Description;
          DocumentLineQuantity := InvoiceApprovalLine.Quantity;
          DocumentLineAmount := InvoiceApprovalLine.Amount;
          DocumentLineAmountIncludingVAT := InvoiceApprovalLine."Amount Including VAT";
          CostComponentCode := InvoiceApprovalLine."Cost Component";
        END ELSE
          IF PurchInvLine.GET(
            PurchInvHeader."No.", "Document Line No.")
          THEN BEGIN
            Element := PurchInvLine.Element;
            PurchInvLine.CALCFIELDS("Account No.");
            GLAccountNo := PurchInvLine."Account No.";
            ShortcutDimCode[1] := PurchInvLine."Shortcut Dimension 1 Code";
            ShortcutDimCode[2] := PurchInvLine."Shortcut Dimension 2 Code";
            PurchInvLine.ShowShortcutDimCode(ShortcutDimCode);
            DocumentLineDescription := PurchInvLine.Description;
            DocumentLineQuantity := PurchInvLine.Quantity;
            DocumentLineAmount := PurchInvLine.Amount;
            DocumentLineAmountIncludingVAT := PurchInvLine."Amount Including VAT";
            CostComponentCode := PurchInvLine."Cost Component";
          END;
        DocumentLineAmountLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmount, PurchInvHeader."Currency Code", PurchInvHeader."Currency Factor",
          PurchInvHeader."Job No.", PurchInvHeader."Posting Date");
        DocumentLineAmountIncludingVATLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmountIncludingVAT, PurchInvHeader."Currency Code", PurchInvHeader."Currency Factor",
          PurchInvHeader."Job No.", PurchInvHeader."Posting Date");
      END;
    END;

    LOCAL PROCEDURE GetPurchCrMemoData@1100528438(PurchCrMemoHdr@1100528401 : Record 124;OnlyHeader@1100528414 : Boolean;VAR VendorNo@1100528413 : Code[20];VAR AmountLCY@1100528400 : Decimal;VAR AmountIncludingVATLCY@1100528500 : Decimal;VAR Element@1100528403 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528407 : Code[20];VAR ShortcutDimCode@1100528406 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528411 : Text[100];VAR DocumentLineQuantity@1100528410 : Decimal;VAR DocumentLineAmountLCY@1100528409 : Decimal;VAR DocumentLineAmountIncludingVATLCY@1100528501 : Decimal;VAR CostComponentCode@1100529601 : Code[20]);
    VAR
      InvoiceApprovalLine@1100528408 : Record 11012032;
      PurchCrMemoLine@1100528404 : Record 125;
      ConsentManagement@1100528402 : Codeunit 11012132;
      DimensionManagement@1100528405 : Codeunit 408;
      DocumentLineAmount@1100528412 : Decimal;
      DocumentLineAmountIncludingVAT@1100528502 : Decimal;
    BEGIN
      //**4PS
      VendorNo := PurchCrMemoHdr."Buy-from Vendor No.";
      PurchCrMemoHdr.CALCFIELDS(Amount, "Amount Including VAT");
      AmountLCY := ConsentManagement.CalcAmountLCY(
        PurchCrMemoHdr.Amount, PurchCrMemoHdr."Currency Code", PurchCrMemoHdr."Currency Factor",
        PurchCrMemoHdr."Job No.", PurchCrMemoHdr."Posting Date");
      AmountIncludingVATLCY := ConsentManagement.CalcAmountLCY(
        PurchCrMemoHdr."Amount Including VAT", PurchCrMemoHdr."Currency Code", PurchCrMemoHdr."Currency Factor",
        PurchCrMemoHdr."Job No.", PurchCrMemoHdr."Posting Date");
      RelatedPurchOrderNo := PurchCrMemoHdr."Related Purch. Order No.";

      IF ("Document Line No." = 0) OR OnlyHeader THEN BEGIN
        ShortcutDimCode[1] := PurchCrMemoHdr."Shortcut Dimension 1 Code";
        ShortcutDimCode[2] := PurchCrMemoHdr."Shortcut Dimension 2 Code";
        DimensionManagement.GetShortcutDimensions(PurchCrMemoHdr."Dimension Set ID", ShortcutDimCode);
      END ELSE BEGIN
        IF InvoiceApprovalLine.GET(
          PurchCrMemoHdr."Journal Template", InvoiceApprovalLine."Document Type"::"Credit Memo",
          PurchCrMemoHdr."No.", "Document Line No.")
        THEN BEGIN
          Element := InvoiceApprovalLine.Element;
          GLAccountNo := InvoiceApprovalLine."Account No.";
          ShortcutDimCode[1] := InvoiceApprovalLine."Shortcut Dimension 1 Code";
          ShortcutDimCode[2] := InvoiceApprovalLine."Shortcut Dimension 2 Code";
          InvoiceApprovalLine.ShowShortcutDimCode(ShortcutDimCode);
          DocumentLineDescription := InvoiceApprovalLine.Description;
          DocumentLineQuantity := InvoiceApprovalLine.Quantity;
          DocumentLineAmount := InvoiceApprovalLine.Amount;
          DocumentLineAmountIncludingVAT := InvoiceApprovalLine."Amount Including VAT";
          CostComponentCode := InvoiceApprovalLine."Cost Component";
        END ELSE
          IF PurchCrMemoLine.GET(
            PurchCrMemoHdr."No.", "Document Line No.")
          THEN BEGIN
            Element := PurchCrMemoLine.Element;
            PurchCrMemoLine.CALCFIELDS("Account No.");
            GLAccountNo := PurchCrMemoLine."Account No.";
            ShortcutDimCode[1] := PurchCrMemoLine."Shortcut Dimension 1 Code";
            ShortcutDimCode[2] := PurchCrMemoLine."Shortcut Dimension 2 Code";
            PurchCrMemoLine.ShowShortcutDimCode(ShortcutDimCode);
            DocumentLineDescription := PurchCrMemoLine.Description;
            DocumentLineQuantity := PurchCrMemoLine.Quantity;
            DocumentLineAmount := PurchCrMemoLine.Amount;
            DocumentLineAmountIncludingVAT := PurchCrMemoLine."Amount Including VAT";
            CostComponentCode := PurchCrMemoLine."Cost Component";
          END;
        DocumentLineAmountLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmount, PurchCrMemoHdr."Currency Code", PurchCrMemoHdr."Currency Factor",
          PurchCrMemoHdr."Job No.", PurchCrMemoHdr."Posting Date");
        DocumentLineAmountIncludingVATLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmountIncludingVAT, PurchCrMemoHdr."Currency Code", PurchCrMemoHdr."Currency Factor",
          PurchCrMemoHdr."Job No.", PurchCrMemoHdr."Posting Date");
      END;
    END;

    LOCAL PROCEDURE GetAdviceOrderLineData@1100528443(AdviceOrderLine@1100528401 : Record 11012055;VendorNo@1100528403 : Code[20];VAR AmountLCY@1100528400 : Decimal;VAR Element@1100528402 : Code[20];VAR ShortcutDimCode@1100528404 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528407 : Text[100];VAR DocumentLineQuantity@1100528406 : Decimal;VAR DocumentLineAmount@1100528405 : Decimal;VAR CostComponentCode@1100529602 : Code[20]);
    BEGIN
      //**4PS
      VendorNo := AdviceOrderLine.Vendor;
      AmountLCY := AdviceOrderLine."Amount (LCY)";
      Element := AdviceOrderLine.Element;
      ShortcutDimCode[1] := AdviceOrderLine."Global Dimension 1 Code";
      ShortcutDimCode[2] := AdviceOrderLine."Cost Object";
      DocumentLineDescription := AdviceOrderLine.Description;
      DocumentLineQuantity := AdviceOrderLine."Quantity (Advice)";
      DocumentLineAmount := AdviceOrderLine."Amount (LCY)";
      CostComponentCode := AdviceOrderLine."Cost Component";
    END;

    LOCAL PROCEDURE GetProjectPurchaseActionData@1100528444(ProjectPurchaseAction@1100528401 : Record 11012026;VAR AmountLCY@1100528400 : Decimal);
    VAR
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      //**4PS
      AmountLCY := ConsentManagement.CalcPurchaseActionAmount(ProjectPurchaseAction);
    END;

    LOCAL PROCEDURE GetPurchaseRequisitionData@1100529604(PurchaseRequisition@1100528401 : Record 11229330;OnlyHeader@1100528402 : Boolean;VAR VendorNo@1100528412 : Code[20];VAR AmountLCY@1100528400 : Decimal;VAR Element@1100528404 : Code[20];VAR GLAccountNo@1100528407 : Code[20];VAR ShortcutDimCode@1100528405 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528410 : Text[100];VAR DocumentLineQuantity@1100528409 : Decimal;VAR DocumentLineAmountLCY@1100528408 : Decimal;VAR CostComponentCode@1100529603 : Code[20]);
    VAR
      PurchaseRequisitionLine@1100528403 : Record 11229331;
      VendorByPurchaseRequisition@1100529600 : Record 11229332;
    BEGIN
      //**4PS
      VendorByPurchaseRequisition.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      VendorByPurchaseRequisition.SETRANGE(Type, VendorByPurchaseRequisition.Type::Vendor);
      VendorByPurchaseRequisition.SETRANGE("Preferred Vendor", TRUE);
      IF VendorByPurchaseRequisition.FINDFIRST THEN
        VendorNo := VendorByPurchaseRequisition."Vendor No."
      ELSE BEGIN
        VendorByPurchaseRequisition.SETRANGE("Preferred Vendor");
        IF VendorByPurchaseRequisition.FINDFIRST THEN
          VendorNo := VendorByPurchaseRequisition."Vendor No.";
      END;

      PurchaseRequisition.CALCFIELDS("Requisition Amount (LCY)");
      AmountLCY := PurchaseRequisition."Requisition Amount (LCY)";

      IF ("Document Line No." = 0) OR OnlyHeader THEN
        ShortcutDimCode[1] := PurchaseRequisition."Global Dimension 1 Code"
      ELSE
        IF PurchaseRequisitionLine.GET(PurchaseRequisition."No.", "Document Line No.") THEN BEGIN
          Element := PurchaseRequisitionLine.Element;
          GLAccountNo := PurchaseRequisitionLine."G/L Account";
          ShortcutDimCode[1] := PurchaseRequisitionLine."Global Dimension 1 Code";
          ShortcutDimCode[2] := PurchaseRequisitionLine."Cost Object";
          DocumentLineDescription := PurchaseRequisitionLine.Description;
          DocumentLineQuantity := PurchaseRequisitionLine.Quantity;
          DocumentLineAmountLCY := PurchaseRequisitionLine."Amount (LCY)";
          CostComponentCode := PurchaseRequisitionLine."Cost Component";
        END;
    END;

    LOCAL PROCEDURE GetHourAccountingData@1100529606(HourAccounting@1100528401 : Record 11012038;OnlyHeader@1100528400 : Boolean;VAR Element@1100529606 : Code[20];VAR RelatedPurchOrderNo@1100529605 : Code[20];VAR ShortcutDimCode@1100529603 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100529602 : Text[50];VAR DocumentLineQuantity@1100529601 : Decimal;VAR CostComponentCode@1100529609 : Code[20]);
    VAR
      HourAccountingLine@1100528403 : Record 11012039;
      DimensionManagement@1100529600 : Codeunit 408;
    BEGIN
      //**4PS
      IF ("Document Line No." = 0) OR OnlyHeader THEN
        ShortcutDimCode[1] := HourAccounting."Department Code"
      ELSE
        IF HourAccountingLine.GET(HourAccounting.Year, HourAccounting.Week, HourAccounting."Employee No.", "Document Line No.") THEN BEGIN
          Element := HourAccountingLine.Element;
          RelatedPurchOrderNo := HourAccountingLine."Purchase Order No.";
          ShortcutDimCode[1] := HourAccountingLine."Department Code";
          ShortcutDimCode[2] := HourAccountingLine."Cost Object";
          DimensionManagement.SetCompany(HourAccountingLine."Receiving Company");
          DimensionManagement.GetShortcutDimensions(HourAccountingLine."Dimension Set ID", ShortcutDimCode);
          DocumentLineDescription := HourAccountingLine.Description;
          DocumentLineQuantity := HourAccountingLine."Total Line";
          CostComponentCode := HourAccountingLine."Cost Component";
        END;
    END;

    LOCAL PROCEDURE GetSiteMgtHourAccountingData@1100529608(SiteMgtHoursHeader@1100528401 : Record 11012360;OnlyHeader@1100528400 : Boolean;VAR Element@1100529606 : Code[20];VAR ShortcutDimCode@1100529603 : ARRAY [8] OF Code[20];VAR DocumentLineQuantity@1100529601 : Decimal;VAR CostComponentCode@1100529605 : Code[20]);
    VAR
      SiteMgtHoursLine@1100528403 : Record 11012361;
    BEGIN
      //**4PS
      IF ("Document Line No." = 0) OR OnlyHeader THEN
        ShortcutDimCode[1] := SiteMgtHoursHeader."Department Code"
      ELSE
        IF SiteMgtHoursLine.GET(SiteMgtHoursHeader.Year, SiteMgtHoursHeader.Week, SiteMgtHoursHeader."Supplying Company",
                                SiteMgtHoursHeader."Employee No.", "Document Line No.")
        THEN BEGIN
          Element := SiteMgtHoursLine.Element;
          ShortcutDimCode[1] := SiteMgtHoursLine."Department Code";
          ShortcutDimCode[2] := SiteMgtHoursLine."Cost Object";
          DocumentLineQuantity := SiteMgtHoursLine."Total Hours";
          CostComponentCode := SiteMgtHoursLine."Cost Component";
        END;
    END;

    PROCEDURE ShowServiceOrderCard@1100528440();
    VAR
      ServiceOrder@1100528401 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      IF ServiceOrder.GET("Service Order No.") THEN BEGIN
        ServiceOrder.SETRECFILTER;
        PAGE.RUN(PAGE::"Service Order (General)", ServiceOrder);
      END;
    END;

    PROCEDURE ShowRelatedPurchOrder@1100529101();
    BEGIN
      //**4PS
      ShowRelatedPurchaseOrder(FALSE);
    END;

    PROCEDURE ShowRelatedPurchOrderOfCompressedApprovalEntry@1100528451();
    BEGIN
      //**4PS
      ShowRelatedPurchaseOrder(TRUE);
    END;

    PROCEDURE ShowRelatedPurchaseOrder@1100528423(Compressed@1100528400 : Boolean);
    VAR
      PurchaseHeader@1100529101 : Record 38;
      RelatedPurchOrderNo@1100529100 : Code[20];
    BEGIN
      //**4PS
      IF Compressed THEN
        RelatedPurchOrderNo := GetRelatedPurchOrderNoOfCompressedApprovalEntry
      ELSE
        RelatedPurchOrderNo := GetRelatedPurchOrderNo;
      IF RelatedPurchOrderNo = '' THEN
        EXIT;

      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, RelatedPurchOrderNo);
      PAGE.RUN(PAGE::"Purchase Order", PurchaseHeader);
    END;

    PROCEDURE ShowApprovalEntriesOfDocument@1100528415();
    VAR
      ApprovalEntry@1100528401 : Record 454;
      ApprovalEntries@1100528400 : Page 658;
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Document Type", "Document Type");
      ApprovalEntry.SETRANGE("Document No.", "Document No.");
      IF "Document Type" IN ["Document Type"::"Advice Order", "Document Type"::"Purchase Action"] THEN BEGIN
        ApprovalEntry.SETRANGE("Document Line No.", "Document Line No.");
        ApprovalEntry.SETRANGE("Project No.", "Project No.");
        ApprovalEntry.SETRANGE("Service Order No.", "Service Order No.");
      END;
      ApprovalEntries.SETTABLEVIEW(ApprovalEntry);
      ApprovalEntry.SETRANGE("Approver ID", "Approver ID");
      IF ApprovalEntry.FINDFIRST THEN
        ApprovalEntries.SETRECORD(ApprovalEntry);
      ApprovalEntries.RUN;
    END;

    PROCEDURE ShowConsentRule@1100528418();
    VAR
      ConsentRule@1100528401 : Record 11012227;
      ConsentRules@1100528400 : Page 11071877;
      HourConsentRule@1100528200 : Record 11229805;
      HourConsentRules@1100528201 : Page 11229787;
    BEGIN
      //**4PS
      IF "Consent Rule Process" = "Consent Rule Process"::"Hour Accounting" THEN BEGIN
        IF HourConsentRule.GET("Consent Rule Line No.") THEN BEGIN
          HourConsentRule.SETRANGE("Line No.", "Consent Rule Line No.");
          HourConsentRules.SETTABLEVIEW(HourConsentRule);
          HourConsentRules.SETRECORD(HourConsentRule);
          HourConsentRules.RUNMODAL;
        END;
      END ELSE BEGIN
        IF ConsentRule.GET("Consent Rule Process", "Consent Rule Line No.") THEN BEGIN
          ConsentRule.SETRANGE(Process, "Consent Rule Process");
          ConsentRule.SETRANGE("Line No.", "Consent Rule Line No.");
          ConsentRules.SETRECORD(ConsentRule);
          ConsentRules.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE ShowCommentsEdit@1100528419();
    VAR
      ApprovalCommentLine@6085573 : Record 455;
      ApprovalComments@161024013 : Page 660;
    BEGIN
      //**4PS
      ApprovalCommentLine.SETRANGE("Table ID", "Table ID");
      ApprovalCommentLine.SETRANGE("Document Type", "Document Type");
      IF "Document No." <> '' THEN
        ApprovalCommentLine.SETRANGE("Document No.", "Document No.");
      ApprovalCommentLine.SETRANGE("Record ID to Approve","Record ID to Approve");
      ApprovalCommentLine.SETRANGE("Workflow Step Instance ID","Workflow Step Instance ID");
      IF "Document Line No." > 0 THEN
        ApprovalCommentLine.SETRANGE("Document Line No.", "Document Line No.");
      ApprovalComments.SETTABLEVIEW(ApprovalCommentLine);
      ApprovalComments.EDITABLE(TRUE);
      ApprovalComments.SetWorkflowStepInstanceID("Workflow Step Instance ID"); //C040353.n
      ApprovalComments.SetUpLine(Rec); //C040353.n
      ApprovalComments.RUN
    END;

    PROCEDURE ShowCommentsOnly@1100525001();
    VAR
      ApprovalCommentLine@6085573 : Record 455;
      ApprovalComments@161024013 : Page 660;
    BEGIN
      //**4PS
      ApprovalCommentLine.SETRANGE("Table ID", "Table ID");
      ApprovalCommentLine.SETRANGE("Document Type", "Document Type");
      ApprovalCommentLine.SETRANGE("Document No.", "Document No.");
      ApprovalCommentLine.SETRANGE("Record ID to Approve","Record ID to Approve");
      ApprovalCommentLine.SETRANGE("Workflow Step Instance ID","Workflow Step Instance ID");
      IF "Document Line No." > 0 THEN
        ApprovalCommentLine.SETRANGE("Document Line No.", "Document Line No.");
      ApprovalComments.SETTABLEVIEW(ApprovalCommentLine);
      ApprovalComments.EDITABLE(FALSE);
      ApprovalComments.SetWorkflowStepInstanceID("Workflow Step Instance ID"); //C040353.n
      ApprovalComments.SetUpLine(Rec); //C040353.n
      ApprovalComments.RUN
    END;

    PROCEDURE ShowScannedDocument@1100525000();
    VAR
      PurchasesPayablesSetup@1100525000 : Record 312;
    BEGIN
      //**4PS
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.ShowScannedDocumentWithDocNo("Document No.");
    END;

    PROCEDURE GetHrsEmployeeName@1100525004() : Text[250];
    VAR
      Employee@1100529600 : Record 5200;
    BEGIN
      //**4PS
      Employee.CHANGECOMPANY("Supplying Company");
      IF Employee.GET("Employee No.") THEN
        EXIT(Employee."Full Name");
    END;

    PROCEDURE GetHrsComment@1100525002() CommentTxt : Text;
    VAR
      HourAccountingLine@1100525000 : Record 11012039;
      SiteMngmntHoursLine@1100525001 : Record 11012361;
    BEGIN
      IF "Document Line No." <> 0 THEN BEGIN
        CASE "Document Type" OF
          "Document Type"::"Hour Accounting":
            IF HourAccountingLine.GET(Year, Week, "Employee No.", "Document Line No.") THEN
              CommentTxt := HourAccountingLine.Comment;
          "Document Type"::"Site Mgt HourAccounting":
            IF SiteMngmntHoursLine.GET(Year, Week, "Supplying Company", "Employee No.","Document Line No.") THEN
              CommentTxt := SiteMngmntHoursLine.Comment;
        END;
      END;
    END;

    PROCEDURE GetCostCodeDescription@1100529602() : Text[30];
    VAR
      CostCode@1100529600 : Record 11012083;
    BEGIN
      //**4PS
      CostCode.CHANGECOMPANY("Receiving Company");
      IF "Cost Code" <> '' THEN
        IF CostCode.GET("Cost Code") THEN
          EXIT(CostCode.Description);
      EXIT('');
    END;

    PROCEDURE RunOnHold@1100527000(VAR TempApprovalEntry@1100527000 : TEMPORARY Record 454);
    VAR
      ApprovalManagement4PSConstr@1100527001 : Codeunit 11125349;
    BEGIN
      //**4PS
      IF TempApprovalEntry.FINDSET THEN
        REPEAT
          IF TempApprovalEntry."Document No." <> '' THEN
            //ApprovalManagement4PSConstr.SwitchOnHold(TempApprovalEntry."Document Type", TempApprovalEntry."Document No.", TRUE, TRUE);//**4PS C049344.o
            ApprovalManagement4PSConstr.SwitchOnHold(TempApprovalEntry."Table ID", TempApprovalEntry."Document Type", TempApprovalEntry."Document No.", TRUE, TRUE);//**4PS C049344.n
        UNTIL TempApprovalEntry.NEXT = 0;
    END;

    PROCEDURE GetPlantLocationDescription@1100529609() : Text[100];
    VAR
      PlantLocation@1100529600 : Record 11012554;
    BEGIN
      //**4PS
      IF "Plant Location" = '' THEN
        EXIT('');
      PlantLocation.CHANGECOMPANY("Plant Company");
      IF PlantLocation.GET("Plant Location") THEN
        EXIT(PlantLocation.Description);
    END;

    PROCEDURE GetPlantTypeDescription@1100529610() : Text[50];
    VAR
      PlantType@1100529600 : Record 11012551;
    BEGIN
      //**4PS
      IF "Plant Type" = '' THEN
        EXIT('');
      PlantType.CHANGECOMPANY("Plant Company");
      IF PlantType.GET("Plant Type") THEN
        EXIT(PlantType.Description);
    END;

    PROCEDURE GetPlantNumberDescription@1100529611() : Text[50];
    VAR
      PlantNumber@1100529600 : Record 11012552;
    BEGIN
      //**4PS
      IF ("Plant Type" = '') OR ("Plant No." = '') THEN
        EXIT('');
      PlantNumber.CHANGECOMPANY("Plant Company");
      IF PlantNumber.GET("Plant Type", "Plant No.") THEN
        EXIT(PlantNumber.Description);
    END;

    PROCEDURE GetExtensionContractDescription@1100529612() : Text[50];
    VAR
      ExtensionContract@1100529600 : Record 11012004;
    BEGIN
      //**4PS
      ExtensionContract.CHANGECOMPANY("Receiving Company");
      IF ("Project No." = '') OR ("Extension Contract" = '') THEN
        EXIT('');
      IF ExtensionContract.GET("Project No.", "Extension Contract") THEN
        EXIT(ExtensionContract.Description);
    END;

    PROCEDURE GetWageComponentDescription@1100529613() : Text[30];
    VAR
      WageComponent@1100529600 : Record 11012014;
    BEGIN
      //**4PS
      IF "Wage Component" <> '' THEN
        IF WageComponent.GET("Wage Component") THEN
          EXIT(WageComponent.Description);
      EXIT('');
    END;

    PROCEDURE GetApprovalEntryDimensionName@1100529614(FieldNumber@1100529604 : Integer;DimValueCode@1100529600 : Code[20]) : Text[50];
    VAR
      DimensionValue@1100529602 : Record 349;
      DimensionManagement@1100529601 : Codeunit 408;
    BEGIN
      //**4PS
      IF DimValueCode = '' THEN
        EXIT('');
      DimensionManagement.SetCompany("Receiving Company");
      DimensionManagement.GetDimValueRec(FieldNumber, DimValueCode, DimensionValue, FALSE, "Project No.");
      EXIT(DimensionValue.Name);
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE LookupDimValue@1100529615(FieldNumber@1100529602 : Integer;DimValueCode@1100529601 : Code[20]);
    VAR
      DimensionValue@1100529600 : Record 349;
    BEGIN
      //**4PS
      DimensionValue.CHANGECOMPANY("Receiving Company");
      DimensionValue.Code := DimValueCode;
      DimensionValue.SETRANGE("Global Dimension No.", FieldNumber);
      IF FieldNumber = 2 THEN BEGIN
        DimensionValue.SETRANGE("Project Filter", "Project No.");
        PAGE.RUNMODAL(PAGE::"Cost Object List", DimensionValue);
      END ELSE
        PAGE.RUNMODAL(0, DimensionValue);
    END;

    PROCEDURE GetOnHold@1100528200() : Text[30];
    VAR
      RecRef@1100528500 : RecordRef;
      PurchaseHeader@1100528501 : Record 38;
      PurchInvHeader@1100528502 : Record 122;
      PurchCrMemoHdr@1100528503 : Record 124;
    BEGIN
      //**4PS
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT('');

      CASE "Table ID" OF
        DATABASE::"Purchase Header":
        BEGIN
          RecRef.SETTABLE(PurchaseHeader);
          EXIT(PurchaseHeader."On Hold")
        END;
        DATABASE::"Purch. Inv. Header":
        BEGIN
          RecRef.SETTABLE(PurchInvHeader);
          EXIT(PurchInvHeader."On Hold")
        END;
        DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          RecRef.SETTABLE(PurchCrMemoHdr);
          EXIT(PurchCrMemoHdr."On Hold")
        END;
      END;
    END;

    PROCEDURE LookupProjectNo@1100528201();
    VAR
      PageNo@1100528400 : Integer;
      Job@1100528200 : Record 11072003;
    BEGIN
      //**4PS
      Job.CHANGECOMPANY("Receiving Company");
      Job."No." := "Project No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      PAGE.RUNMODAL(PageNo,Job);
    END;

    PROCEDURE LookupServiceOrderNo@1100528202();
    VAR
      ServiceOrder@1100528200 : Record 11012823;
    BEGIN
      //**4PS
      ServiceOrder.CHANGECOMPANY("Receiving Company");
      ServiceOrder."No." := "Service Order No.";
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE UpdateEditableVisibleApprovalEntry@1100525005(VAR ShowEntriesOfAllApproversVisible@1100527350 : Boolean;VAR ApprovalPageOption@1100527351 : 'All,Hours,All Except Hours';ApprovalHours@1100529600 : Boolean);
    VAR
      Approver@1100525000 : Record 11012229;
    BEGIN
      Approver.GET(USERID);

      IF ApprovalHours THEN
        ApprovalPageOption := ApprovalPageOption::Hours
      ELSE
        IF Approver."Separate Consent Lines Hours" THEN
          ApprovalPageOption := ApprovalPageOption::"All Except Hours"
        ELSE
          ApprovalPageOption := ApprovalPageOption::All;

      IF ISTEMPORARY THEN
        CASE ApprovalPageOption OF
          ApprovalPageOption::All:
            ShowEntriesOfAllApproversVisible := Approver."Super Approver Purchase Orders" OR Approver."Sup. Approver Purch. Invoices" OR Approver."Super Approver Hours";
          ApprovalPageOption::"All Except Hours":
            ShowEntriesOfAllApproversVisible := Approver."Super Approver Purchase Orders" OR Approver."Sup. Approver Purch. Invoices";
          ApprovalPageOption::Hours:
            ShowEntriesOfAllApproversVisible := Approver."Super Approver Hours";
        END;
    END;

    PROCEDURE LockDetailedApprovalEntries@1100527352(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;TempCompressedApprovalEntry@1100528403 : TEMPORARY Record 454;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessDetailedApprovalEntries(
        ApprovalEntry, ApprovalAction::Lock, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
    END;

    PROCEDURE LockCompressedApprovalEntries@1100527354(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessCompressedApprovalEntries(
        ApprovalEntry, ApprovalAction::Lock, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE UnlockDetailedApprovalEntries@1100527353(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;TempCompressedApprovalEntry@1100528403 : TEMPORARY Record 454;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessDetailedApprovalEntries(
        ApprovalEntry, ApprovalAction::Unlock, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
    END;

    PROCEDURE UnlockCompressedApprovalEntries@1100527355(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours');
    BEGIN
      //**4PS
      ProcessCompressedApprovalEntries(
        ApprovalEntry, ApprovalAction::Unlock, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
    END;

    PROCEDURE StartProcessCompressedApprovalEntries@1100527351(VAR ApprovalEntry@1100527354 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100527353 : Boolean;ApprovalPageOption@1100527352 : 'All,Hours,All Except Hours';ApprovalAction2@1100527355 : 'Approve,Reject,Delegate');
    VAR
      Counter@1100527350 : Integer;
      Counter2@1100527351 : Integer;
      NumberOfLockedApprovalEntries@1100527356 : Integer;
      ApprovalsMgmt@1100527357 : Codeunit 1535;
    BEGIN
      //**4PS
      Counter := ApprovalEntry.COUNT;
      IF NOT ApprovalsMgmt.CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
        ApprovalEntry.SETRANGE(Locked, FALSE);
      Counter2 := ApprovalEntry.COUNT;
      IF Counter2 > 0 THEN BEGIN
        CASE ApprovalAction2 OF
          ApprovalAction2::Approve:
            ApproveCompressedApprovalEntries(ApprovalEntry, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
          ApprovalAction2::Reject:
            RejectCompressedApprovalEntries(ApprovalEntry, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
          ApprovalAction2::Delegate:
            DelegateCompressedApprovalEntries(ApprovalEntry, ApprovalEntriesOfAllApproversAreShown, ApprovalPageOption);
        END;
      END;
      NumberOfLockedApprovalEntries := Counter - Counter2;
      IF NumberOfLockedApprovalEntries > 0 THEN
        MESSAGE(Text001, NumberOfLockedApprovalEntries);
    END;

    PROCEDURE StartProcessDetailedApprovalEntries@1100527350(VAR ApprovalEntry@1100528400 : Record 454;ApprovalEntriesOfAllApproversAreShown@1100528401 : Boolean;TempCompressedApprovalEntry@1100528403 : TEMPORARY Record 454;ApprovalPageOption@1100529600 : 'All,Hours,All Except Hours';ApprovalAction2@1100527350 : 'Approve,Reject,Delegate');
    VAR
      Counter@1100527354 : Integer;
      Counter2@1100527353 : Integer;
      NumberOfLockedApprovalEntries@1100527352 : Integer;
      ApprovalsMgmt@1100527351 : Codeunit 1535;
    BEGIN
      //**4PS
      Counter := ApprovalEntry.COUNT;
      IF NOT ApprovalsMgmt.CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
        ApprovalEntry.SETRANGE(Locked, FALSE);
      Counter2 := ApprovalEntry.COUNT;
      IF Counter2 > 0 THEN BEGIN
        CASE ApprovalAction2 OF
          ApprovalAction2::Approve:
            ApproveDetailedApprovalEntries(ApprovalEntry, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
          ApprovalAction2::Reject:
            RejectDetailedApprovalEntries(ApprovalEntry, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
          ApprovalAction2::Delegate:
            DelegateDetailedApprovalEntries(ApprovalEntry, ApprovalEntriesOfAllApproversAreShown, TempCompressedApprovalEntry, ApprovalPageOption);
        END;
      END;
      NumberOfLockedApprovalEntries := Counter - Counter2;
      IF NumberOfLockedApprovalEntries > 0 THEN
        MESSAGE(Text001, NumberOfLockedApprovalEntries);
    END;

    PROCEDURE SetApprovalEntryInApprovalGroup@1100527357(ApprovalEntryInGroup2@1100527350 : Boolean);
    BEGIN
      ApprovalEntryInGroup := ApprovalEntryInGroup2;
    END;

    BEGIN
    {
      <DC>
        Document Capture
      </DC>
      4PS 29-03-18 DP01917 OLKOL: Fields "Due Date Document", "Vendor No." - added
                   Triggers GetVendorName, GetVendorNo - changed
    }
    END.
  }
}

