OBJECT Codeunit 5870 Calculate BOM Tree
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempItemAvailByDate@1002 : TEMPORARY Record 5872;
      TempMemoizedResult@1004 : TEMPORARY Record 5871;
      ItemFilter@1008 : Record 27;
      TempItem@1016 : TEMPORARY Record 27;
      AvailableToPromise@1000 : Codeunit 5790;
      UOMMgt@1007 : Codeunit 5402;
      Window@1012 : Dialog;
      WindowUpdateDateTime@1013 : DateTime;
      LocationSpecific@1009 : Boolean;
      EntryNo@1003 : Integer;
      ZeroDF@1001 : DateFormula;
      AvailToUse@1005 : 'UpdatedQtyOnItemAvail,QtyOnItemAvail,QtyAvail';
      MarkBottleneck@1006 : Boolean;
      Text000@1011 : TextConst 'ENU=Generating Tree @1@@@@@@@;NOR=Genererer tre @1@@@@@@@;SVE=Genererar tr„d  @1@@@@@@@';
      ShowTotalAvailability@1014 : Boolean;
      TreeType@1010 : ' ,Availability,Cost';

    LOCAL PROCEDURE OpenWindow@19();
    BEGIN
      Window.OPEN(Text000);
      WindowUpdateDateTime := CURRENTDATETIME;
    END;

    LOCAL PROCEDURE UpdateWindow@28(ProgressValue@1000 : Integer);
    BEGIN
      IF CURRENTDATETIME - WindowUpdateDateTime >= 300 THEN BEGIN
        WindowUpdateDateTime := CURRENTDATETIME;
        Window.UPDATE(1,ProgressValue);
      END;
    END;

    LOCAL PROCEDURE InitVars@5();
    BEGIN
      TempItemAvailByDate.RESET;
      TempItemAvailByDate.DELETEALL;
      TempMemoizedResult.RESET;
      TempMemoizedResult.DELETEALL;
      TempItem.RESET;
      TempItem.DELETEALL;
    END;

    LOCAL PROCEDURE InitBOMBuffer@6(VAR BOMBuffer@1000 : Record 5870);
    BEGIN
      BOMBuffer.RESET;
      BOMBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE InitTreeType@32(NewTreeType@1001 : Option);
    BEGIN
      TreeType := NewTreeType;
    END;

    [External]
    PROCEDURE GenerateTreeForItems@1(VAR ParentItem@1000 : Record 27;VAR BOMBuffer@1001 : Record 5870;TreeType@1002 : ' ,Availability,Cost');
    VAR
      i@1005 : Integer;
      NoOfRecords@1006 : Integer;
      DemandDate@1007 : Date;
    BEGIN
      OpenWindow;

      InitBOMBuffer(BOMBuffer);
      InitTreeType(TreeType);
      ItemFilter.COPY(ParentItem);

      WITH ParentItem DO BEGIN
        IF GETFILTER("Date Filter") <> '' THEN
          DemandDate := GETRANGEMAX("Date Filter")
        ELSE
          DemandDate := 99981231D;
        NoOfRecords := COUNT;
        IF FINDSET THEN
          REPEAT
            i += 1;
            UpdateWindow(ROUND(i / NoOfRecords * 10000,1));
            GenerateTreeForItemLocal(ParentItem,BOMBuffer,DemandDate,TreeType);
          UNTIL NEXT = 0;
      END;

      ParentItem.COPY(ItemFilter);

      Window.CLOSE;
    END;

    [External]
    PROCEDURE GenerateTreeForItem@33(VAR ParentItem@1000 : Record 27;VAR BOMBuffer@1001 : Record 5870;DemandDate@1005 : Date;TreeType@1004 : Option);
    BEGIN
      WITH ParentItem DO BEGIN
        ItemFilter.COPY(ParentItem);

        GET("No.");
        InitBOMBuffer(BOMBuffer);
        InitTreeType(TreeType);
        GenerateTreeForItemLocal(ParentItem,BOMBuffer,DemandDate,TreeType);
        COPY(ItemFilter);
      END;
    END;

    LOCAL PROCEDURE GenerateTreeForItemLocal@8(VAR ParentItem@1000 : Record 27;VAR BOMBuffer@1001 : Record 5870;DemandDate@1005 : Date;TreeType@1004 : Option);
    VAR
      BOMComp@1003 : Record 90;
      ProdBOMLine@1002 : Record 99000772;
      IsHandled@1006 : Boolean;
    BEGIN
      WITH ParentItem DO BEGIN
        InitVars;

        BOMComp.SETRANGE(Type,BOMComp.Type::Item);
        BOMComp.SETRANGE("No.","No.");

        ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
        ProdBOMLine.SETRANGE("No.","No.");

        IF HasBOM OR ("Routing No." <> '') THEN BEGIN
          IsHandled := FALSE;
          OnBeforeFilterBOMBuffer(ParentItem,BOMBuffer,DemandDate,TreeType,IsHandled);
          IF NOT IsHandled THEN BEGIN
            BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
            BOMBuffer.TransferFromItem(EntryNo,ParentItem,DemandDate);
            GenerateItemSubTree("No.",BOMBuffer);
            CalculateTreeType(BOMBuffer,ShowTotalAvailability,TreeType);
            OnAfterFilterBOMBuffer(ParentItem,BOMBuffer,DemandDate,TreeType);
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE GenerateTreeForAsm@3(AsmHeader@1000 : Record 900;VAR BOMBuffer@1001 : Record 5870;TreeType@1002 : Option);
    BEGIN
      InitBOMBuffer(BOMBuffer);
      InitTreeType(TreeType);
      InitVars;

      LocationSpecific := TRUE;

      BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
      BOMBuffer.TransferFromAsmHeader(EntryNo,AsmHeader);

      IF NOT GenerateAsmHeaderSubTree(AsmHeader,BOMBuffer) THEN
        GenerateItemSubTree(AsmHeader."Item No.",BOMBuffer);

      CalculateTreeType(BOMBuffer,ShowTotalAvailability,TreeType);
    END;

    [External]
    PROCEDURE GenerateTreeForProdLine@20(ProdOrderLine@1000 : Record 5406;VAR BOMBuffer@1001 : Record 5870;TreeType@1002 : Option);
    BEGIN
      InitBOMBuffer(BOMBuffer);
      InitTreeType(TreeType);
      InitVars;

      LocationSpecific := TRUE;
      BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
      BOMBuffer.TransferFromProdOrderLine(EntryNo,ProdOrderLine);
      IF NOT GenerateProdOrderLineSubTree(ProdOrderLine,BOMBuffer) THEN
        GenerateItemSubTree(ProdOrderLine."Item No.",BOMBuffer);

      CalculateTreeType(BOMBuffer,ShowTotalAvailability,TreeType);
    END;

    LOCAL PROCEDURE CalculateTreeType@29(VAR BOMBuffer@1000 : Record 5870;ShowTotalAvailability@1001 : Boolean;TreeType@1002 : ' ,Availability,Cost');
    BEGIN
      CASE TreeType OF
        TreeType::Availability:
          UpdateAvailability(BOMBuffer,ShowTotalAvailability);
        TreeType::Cost:
          UpdateCost(BOMBuffer);
      END;
    END;

    LOCAL PROCEDURE GenerateItemSubTree@11(ItemNo@1000 : Code[20];VAR BOMBuffer@1002 : Record 5870) : Boolean;
    VAR
      ParentItem@1003 : Record 27;
    BEGIN
      WITH BOMBuffer DO BEGIN
        ParentItem.GET(ItemNo);
        IF TempItem.GET(ItemNo) THEN BEGIN
          "Is Leaf" := FALSE;
          MODIFY(TRUE);
          EXIT(FALSE);
        END;
        TempItem := ParentItem;
        TempItem.INSERT;

        IF ParentItem."Replenishment System" = ParentItem."Replenishment System"::"Prod. Order" THEN BEGIN
          "Is Leaf" := NOT GenerateProdCompSubTree(ParentItem,BOMBuffer);
          IF "Is Leaf" THEN
            "Is Leaf" := NOT GenerateBOMCompSubTree(ParentItem,BOMBuffer);
        END ELSE BEGIN
          "Is Leaf" := NOT GenerateBOMCompSubTree(ParentItem,BOMBuffer);
          IF "Is Leaf" THEN
            "Is Leaf" := NOT GenerateProdCompSubTree(ParentItem,BOMBuffer);
        END;
        MODIFY(TRUE);

        TempItem.GET(ItemNo);
        TempItem.DELETE;
        EXIT(NOT "Is Leaf");
      END;
    END;

    LOCAL PROCEDURE GenerateBOMCompSubTree@2(ParentItem@1000 : Record 27;VAR BOMBuffer@1005 : Record 5870) : Boolean;
    VAR
      BOMComp@1001 : Record 90;
      ParentBOMBuffer@1007 : Record 5870;
      UOMMgt@1002 : Codeunit 5402;
    BEGIN
      ParentBOMBuffer := BOMBuffer;
      WITH BOMComp DO BEGIN
        SETRANGE("Parent Item No.",ParentItem."No.");
        IF FINDSET THEN BEGIN
          IF ParentItem."Replenishment System" <> ParentItem."Replenishment System"::Assembly THEN
            EXIT(TRUE);
          REPEAT
            IF ("No." <> '') AND ((Type = Type::Item) OR (TreeType IN [TreeType::" ",TreeType::Cost])) THEN BEGIN
              BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
              BOMBuffer.TransferFromBOMComp(
                EntryNo,BOMComp,ParentBOMBuffer.Indentation + 1,
                ROUND(
                  ParentBOMBuffer."Qty. per Top Item" *
                  UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code"),UOMMgt.QtyRndPrecision),
                ROUND(
                  ParentBOMBuffer."Scrap Qty. per Top Item" *
                  UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code"),UOMMgt.QtyRndPrecision),
                CalcCompDueDate(ParentBOMBuffer."Needed by Date",ParentItem,"Lead-Time Offset"),
                ParentBOMBuffer."Location Code");
              IF Type = Type::Item THEN
                GenerateItemSubTree("No.",BOMBuffer);
            END;
          UNTIL NEXT = 0;
          BOMBuffer := ParentBOMBuffer;

          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GenerateProdCompSubTree@9(ParentItem@1000 : Record 27;VAR BOMBuffer@1005 : Record 5870) FoundSubTree : Boolean;
    VAR
      CopyOfParentItem@1004 : Record 27;
      ProdBOMLine@1006 : Record 99000772;
      RoutingLine@1002 : Record 99000764;
      ParentBOMBuffer@1007 : Record 5870;
      UOMMgt@1003 : Codeunit 5402;
      VersionMgt@1008 : Codeunit 99000756;
      CostCalculationMgt@1010 : Codeunit 5836;
      LotSize@1001 : Decimal;
      BomQtyPerUom@1009 : Decimal;
      IsHandled@1011 : Boolean;
    BEGIN
      ParentBOMBuffer := BOMBuffer;
      IF NOT ProdBOMLine.READPERMISSION THEN
        EXIT;
      WITH ProdBOMLine DO BEGIN
        SETRANGE("Production BOM No.",ParentItem."Production BOM No.");
        SETRANGE("Version Code",VersionMgt.GetBOMVersion(ParentItem."Production BOM No.",WORKDATE,TRUE));
        SETFILTER("Starting Date",'%1|..%2',0D,ParentBOMBuffer."Needed by Date");
        SETFILTER("Ending Date",'%1|%2..',0D,ParentBOMBuffer."Needed by Date");
        IsHandled := FALSE;
        OnBeforeFilterByQuantityPer(ProdBOMLine,IsHandled);
        IF NOT IsHandled THEN
          SETFILTER("Quantity per",'>%1',0);
        IF FINDSET THEN BEGIN
          IF ParentItem."Replenishment System" <> ParentItem."Replenishment System"::"Prod. Order" THEN
            EXIT(TRUE);
          REPEAT
            IF "No." <> '' THEN
              CASE Type OF
                Type::Item:
                  BEGIN
                    BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
                    BomQtyPerUom :=
                      GetQtyPerBOMHeaderUnitOfMeasure(
                        ParentItem,ParentBOMBuffer."Production BOM No.",
                        VersionMgt.GetBOMVersion(ParentBOMBuffer."Production BOM No.",WORKDATE,TRUE));
                    BOMBuffer.TransferFromProdComp(
                      EntryNo,ProdBOMLine,ParentBOMBuffer.Indentation + 1,
                      ROUND(
                        ParentBOMBuffer."Qty. per Top Item" *
                        UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code"),UOMMgt.QtyRndPrecision),
                      ROUND(
                        ParentBOMBuffer."Scrap Qty. per Top Item" *
                        UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code"),UOMMgt.QtyRndPrecision),
                      ParentBOMBuffer."Scrap %",
                      CalcCompDueDate(ParentBOMBuffer."Needed by Date",ParentItem,"Lead-Time Offset"),
                      ParentBOMBuffer."Location Code",
                      ParentItem,BomQtyPerUom);

                    IF ParentItem."Production BOM No." <> ParentBOMBuffer."Production BOM No." THEN BEGIN
                      BOMBuffer."Qty. per Parent" := BOMBuffer."Qty. per Parent" * ParentBOMBuffer."Qty. per Parent";
                      BOMBuffer."Scrap Qty. per Parent" := BOMBuffer."Scrap Qty. per Parent" * ParentBOMBuffer."Qty. per Parent";
                      BOMBuffer."Qty. per BOM Line" := BOMBuffer."Qty. per BOM Line" * ParentBOMBuffer."Qty. per Parent";
                    END;
                    OnAfterTransferFromProdItem(BOMBuffer,ProdBOMLine);
                    GenerateItemSubTree("No.",BOMBuffer);
                  END;
                Type::"Production BOM":
                  BEGIN
                    OnBeforeTransferFromProdBOM(BOMBuffer,ProdBOMLine,ParentItem,ParentBOMBuffer,EntryNo,TreeType);

                    BOMBuffer := ParentBOMBuffer;
                    BOMBuffer."Qty. per Top Item" := ROUND(BOMBuffer."Qty. per Top Item" * "Quantity per",UOMMgt.QtyRndPrecision);
                    IF ParentItem."Production BOM No." <> ParentBOMBuffer."Production BOM No." THEN
                      BOMBuffer."Qty. per Parent" := ParentBOMBuffer."Qty. per Parent" * "Quantity per"
                    ELSE
                      BOMBuffer."Qty. per Parent" := "Quantity per";

                    BOMBuffer."Scrap %" := CombineScrapFactors(BOMBuffer."Scrap %","Scrap %");
                    IF CostCalculationMgt.FindRountingLine(RoutingLine,ProdBOMLine,WORKDATE,ParentItem."Routing No.") THEN
                      BOMBuffer."Scrap %" := CombineScrapFactors(BOMBuffer."Scrap %",RoutingLine."Scrap Factor % (Accumulated)" * 100);
                    BOMBuffer."Scrap %" := ROUND(BOMBuffer."Scrap %",0.00001);

                    OnAfterTransferFromProdBOM(BOMBuffer,ProdBOMLine);

                    CopyOfParentItem := ParentItem;
                    ParentItem."Routing No." := '';
                    ParentItem."Production BOM No." := "No.";
                    GenerateProdCompSubTree(ParentItem,BOMBuffer);
                    ParentItem := CopyOfParentItem;
                  END;
              END;
          UNTIL NEXT = 0;
          FoundSubTree := TRUE;
        END;
      END;

      IF RoutingLine.READPERMISSION THEN
        WITH RoutingLine DO
          IF (TreeType IN [TreeType::" ",TreeType::Cost]) AND
             CertifiedRoutingVersionExists(ParentItem."Routing No.",WORKDATE)
          THEN BEGIN
            REPEAT
              IF "No." <> '' THEN BEGIN
                BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
                BOMBuffer.TransferFromProdRouting(
                  EntryNo,RoutingLine,ParentBOMBuffer.Indentation + 1,
                  ParentBOMBuffer."Qty. per Top Item" *
                  UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code"),
                  ParentBOMBuffer."Needed by Date",
                  ParentBOMBuffer."Location Code");
                OnAfterTransferFromProdRouting(BOMBuffer,RoutingLine);
                IF TreeType = TreeType::Cost THEN BEGIN
                  LotSize := ParentBOMBuffer."Lot Size";
                  IF LotSize = 0 THEN
                    LotSize := 1;
                  CalcRoutingLineCosts(RoutingLine,LotSize,ParentBOMBuffer."Scrap %",BOMBuffer,ParentItem);
                  BOMBuffer.RoundCosts(
                    ParentBOMBuffer."Qty. per Top Item" *
                    UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code") / LotSize);
                  BOMBuffer.MODIFY;
                END;
              END;
            UNTIL NEXT = 0;
            FoundSubTree := TRUE;
          END;

      BOMBuffer := ParentBOMBuffer;
    END;

    LOCAL PROCEDURE GenerateAsmHeaderSubTree@10(AsmHeader@1000 : Record 900;VAR BOMBuffer@1005 : Record 5870) : Boolean;
    VAR
      AsmLine@1006 : Record 901;
      OldAsmHeader@1002 : Record 900;
      ParentBOMBuffer@1001 : Record 5870;
    BEGIN
      ParentBOMBuffer := BOMBuffer;
      WITH AsmLine DO BEGIN
        SETRANGE("Document Type",AsmHeader."Document Type");
        SETRANGE("Document No.",AsmHeader."No.");
        IF FINDSET THEN BEGIN
          REPEAT
            IF (Type = Type::Item) AND ("No." <> '') THEN BEGIN
              OldAsmHeader.GET("Document Type","Document No.");
              IF AsmHeader."Due Date" <> OldAsmHeader."Due Date" THEN
                "Due Date" := "Due Date" - (OldAsmHeader."Due Date" - AsmHeader."Due Date");

              BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
              BOMBuffer.TransferFromAsmLine(EntryNo,AsmLine);
              GenerateItemSubTree("No.",BOMBuffer);
            END;
          UNTIL NEXT = 0;
          BOMBuffer := ParentBOMBuffer;

          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GenerateProdOrderLineSubTree@23(ProdOrderLine@1000 : Record 5406;VAR BOMBuffer@1005 : Record 5870) : Boolean;
    VAR
      OldProdOrderLine@1002 : Record 5406;
      ProdOrderComp@1006 : Record 5407;
      ParentBOMBuffer@1001 : Record 5870;
    BEGIN
      ParentBOMBuffer := BOMBuffer;
      WITH ProdOrderComp DO BEGIN
        SETRANGE(Status,ProdOrderLine.Status);
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        IF FINDSET THEN BEGIN
          REPEAT
            IF "Item No." <> '' THEN BEGIN
              OldProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");
              IF ProdOrderLine."Due Date" <> OldProdOrderLine."Due Date" THEN
                "Due Date" := "Due Date" - (OldProdOrderLine."Due Date" - ProdOrderLine."Due Date");

              BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
              BOMBuffer.TransferFromProdOrderComp(EntryNo,ProdOrderComp);
              GenerateItemSubTree("Item No.",BOMBuffer);
            END;
          UNTIL NEXT = 0;
          BOMBuffer := ParentBOMBuffer;

          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateMinAbleToMake@12(VAR BOMBuffer@1000 : Record 5870;AvailToUse@1002 : 'UpdatedQtyOnItemAvail,QtyOnItemAvail,QtyAvail');
    VAR
      AvailQty@1003 : Decimal;
    BEGIN
      WITH TempItemAvailByDate DO BEGIN
        SETRANGE("Item No.",BOMBuffer."No.");
        SETRANGE("Variant Code",BOMBuffer."Variant Code");
        IF LocationSpecific THEN
          SETRANGE("Location Code",BOMBuffer."Location Code");
        SETRANGE(Date,BOMBuffer."Needed by Date");
        FINDFIRST;

        CASE AvailToUse OF
          AvailToUse::UpdatedQtyOnItemAvail:
            AvailQty := "Updated Available Qty";
          AvailToUse::QtyOnItemAvail:
            AvailQty := "Available Qty";
          AvailToUse::QtyAvail:
            AvailQty := BOMBuffer."Available Quantity";
        END;
      END;

      WITH BOMBuffer DO BEGIN
        UpdateAbleToMake(AvailQty);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CalcMinAbleToMake@14(IsFirst@1002 : Boolean;OldMin@1000 : Decimal;NewMin@1001 : Decimal) : Decimal;
    BEGIN
      IF NewMin <= 0 THEN
        EXIT(0);
      IF IsFirst THEN
        EXIT(NewMin);
      IF NewMin < OldMin THEN
        EXIT(NewMin);
      EXIT(OldMin);
    END;

    LOCAL PROCEDURE InitItemAvailDates@13(VAR BOMBuffer@1000 : Record 5870);
    VAR
      BOMItem@1004 : Record 27;
      ParentBOMBuffer@1003 : Record 5870;
    BEGIN
      ParentBOMBuffer := BOMBuffer;
      TempItemAvailByDate.RESET;
      TempItemAvailByDate.DELETEALL;

      WITH BOMBuffer DO
        REPEAT
          IF NOT AvailByDateExists(BOMBuffer) THEN BEGIN
            BOMItem.COPYFILTERS(ItemFilter);
            BOMItem.GET("No.");
            BOMItem.SETRANGE("Date Filter",0D,"Needed by Date");
            IF Indentation = 0 THEN BEGIN
              BOMItem.SETFILTER("Variant Filter",ItemFilter.GETFILTER("Variant Filter"));
              BOMItem.SETFILTER("Location Filter",ItemFilter.GETFILTER("Location Filter"));
            END ELSE
              BOMItem.SETRANGE("Variant Filter","Variant Code");

            TempItemAvailByDate.INIT;
            TempItemAvailByDate."Item No." := "No.";
            TempItemAvailByDate.Date := "Needed by Date";
            TempItemAvailByDate."Variant Code" := "Variant Code";
            IF LocationSpecific THEN
              TempItemAvailByDate."Location Code" := "Location Code";

            CLEAR(AvailableToPromise);
            TempItemAvailByDate."Available Qty" :=
              AvailableToPromise.QtyAvailabletoPromise(BOMItem,"Gross Requirement","Scheduled Receipts","Needed by Date",0,ZeroDF);
            TempItemAvailByDate."Updated Available Qty" := TempItemAvailByDate."Available Qty";
            TempItemAvailByDate.INSERT;

            MODIFY;
          END;
        UNTIL (NEXT = 0) OR (Indentation <= ParentBOMBuffer.Indentation);
      BOMBuffer := ParentBOMBuffer;
      BOMBuffer.FIND;
    END;

    LOCAL PROCEDURE UpdateAvailability@15(VAR BOMBuffer@1000 : Record 5870;ShowTotalAvailability@1003 : Boolean);
    VAR
      CopyOfBOMBuffer@1004 : Record 5870;
      SubOptimalQty@1002 : Decimal;
      OptimalQty@1001 : Decimal;
    BEGIN
      WITH BOMBuffer DO BEGIN
        CopyOfBOMBuffer.COPY(BOMBuffer);
        IF FIND THEN
          REPEAT
            IF Indentation = 0 THEN BEGIN
              InitItemAvailDates(BOMBuffer);
              SubOptimalQty := TraverseTree(BOMBuffer,AvailToUse::QtyOnItemAvail);
              TempMemoizedResult.DELETEALL;
              OptimalQty := BinarySearchOptimal(BOMBuffer,UOMMgt.QtyRndPrecision,SubOptimalQty);
              MarkBottlenecks(BOMBuffer,OptimalQty);
              CalcAvailability(BOMBuffer,OptimalQty,FALSE);
              IF ShowTotalAvailability THEN
                DistributeRemainingAvail(BOMBuffer);
              TraverseTree(BOMBuffer,AvailToUse::QtyAvail);
            END;
          UNTIL NEXT = 0;
        COPY(CopyOfBOMBuffer);
      END;
    END;

    LOCAL PROCEDURE TraverseTree@16(VAR BOMBuffer@1000 : Record 5870;AvailToUse@1003 : 'UpdatedQtyOnItemAvail,QtyOnItemAvail,QtyAvail') : Decimal;
    VAR
      ParentBOMBuffer@1001 : Record 5870;
      IsFirst@1002 : Boolean;
    BEGIN
      ParentBOMBuffer := BOMBuffer;
      IsFirst := TRUE;
      WITH BOMBuffer DO BEGIN
        WHILE (NEXT <> 0) AND (ParentBOMBuffer.Indentation < Indentation) DO
          IF ParentBOMBuffer.Indentation + 1 = Indentation THEN BEGIN
            IF NOT "Is Leaf" THEN
              TraverseTree(BOMBuffer,AvailToUse)
            ELSE
              UpdateMinAbleToMake(BOMBuffer,AvailToUse);

            ParentBOMBuffer."Able to Make Parent" :=
              CalcMinAbleToMake(IsFirst,ParentBOMBuffer."Able to Make Parent","Able to Make Parent");
            ParentBOMBuffer."Able to Make Top Item" :=
              CalcMinAbleToMake(IsFirst,ParentBOMBuffer."Able to Make Top Item","Able to Make Top Item");

            IsFirst := FALSE;
          END;

        BOMBuffer := ParentBOMBuffer;
        UpdateMinAbleToMake(BOMBuffer,AvailToUse);
        EXIT("Able to Make Top Item");
      END;
    END;

    LOCAL PROCEDURE UpdateCost@25(VAR BOMBuffer@1000 : Record 5870);
    VAR
      CopyOfBOMBuffer@1001 : Record 5870;
    BEGIN
      WITH BOMBuffer DO BEGIN
        CopyOfBOMBuffer.COPY(BOMBuffer);
        IF FIND THEN
          REPEAT
            IF Indentation = 0 THEN
              TraverseCostTree(BOMBuffer);
          UNTIL NEXT = 0;
        COPY(CopyOfBOMBuffer);
      END;
    END;

    LOCAL PROCEDURE TraverseCostTree@26(VAR BOMBuffer@1000 : Record 5870) : Decimal;
    VAR
      ParentBOMBuffer@1001 : Record 5870;
    BEGIN
      ParentBOMBuffer := BOMBuffer;
      WITH BOMBuffer DO BEGIN
        WHILE (NEXT <> 0) AND (ParentBOMBuffer.Indentation < Indentation) DO
          IF (ParentBOMBuffer.Indentation + 1 = Indentation) AND
             (("Qty. per Top Item" <> 0) OR (Type IN [Type::"Machine Center",Type::"Work Center"]))
          THEN BEGIN
            IF NOT "Is Leaf" THEN
              TraverseCostTree(BOMBuffer)
            ELSE
              IF (Type = Type::Resource) AND ("Resource Usage Type" = "Resource Usage Type"::Fixed) THEN
                UpdateNodeCosts(BOMBuffer,ParentBOMBuffer."Lot Size" / ParentBOMBuffer."Qty. per Top Item")
              ELSE
                UpdateNodeCosts(BOMBuffer,1);

            IF "Is Leaf" THEN BEGIN
              ParentBOMBuffer.AddMaterialCost("Single-Level Material Cost","Rolled-up Material Cost");
              ParentBOMBuffer.AddCapacityCost("Single-Level Capacity Cost","Rolled-up Capacity Cost");
              ParentBOMBuffer.AddSubcontrdCost("Single-Level Subcontrd. Cost","Rolled-up Subcontracted Cost");
              ParentBOMBuffer.AddCapOvhdCost("Single-Level Cap. Ovhd Cost","Rolled-up Capacity Ovhd. Cost");
              ParentBOMBuffer.AddMfgOvhdCost("Single-Level Mfg. Ovhd Cost","Rolled-up Mfg. Ovhd Cost");
              ParentBOMBuffer.AddScrapCost("Single-Level Scrap Cost","Rolled-up Scrap Cost");
              OnTraverseCostTreeOnAfterAddCost(ParentBOMBuffer,BOMBuffer);
            END ELSE BEGIN
              ParentBOMBuffer.AddMaterialCost(
                "Single-Level Material Cost" +
                "Single-Level Capacity Cost" +
                "Single-Level Subcontrd. Cost" +
                "Single-Level Cap. Ovhd Cost" +
                "Single-Level Mfg. Ovhd Cost",
                "Rolled-up Material Cost");
              ParentBOMBuffer.AddCapacityCost(0,"Rolled-up Capacity Cost");
              ParentBOMBuffer.AddSubcontrdCost(0,"Rolled-up Subcontracted Cost");
              ParentBOMBuffer.AddCapOvhdCost(0,"Rolled-up Capacity Ovhd. Cost");
              ParentBOMBuffer.AddMfgOvhdCost(0,"Rolled-up Mfg. Ovhd Cost");
              ParentBOMBuffer.AddScrapCost(0,"Rolled-up Scrap Cost");
            END;
          END;

        BOMBuffer := ParentBOMBuffer;
        UpdateNodeCosts(BOMBuffer,ParentBOMBuffer."Lot Size");
        EXIT("Able to Make Top Item");
      END;
    END;

    LOCAL PROCEDURE UpdateNodeCosts@27(VAR BOMBuffer@1000 : Record 5870;LotSize@1007 : Decimal);
    BEGIN
      WITH BOMBuffer DO BEGIN
        IF LotSize = 0 THEN
          LotSize := 1;
        RoundCosts(LotSize);

        IF "Is Leaf" THEN BEGIN
          CASE Type OF
            Type::Item:
              GetItemCosts;
            Type::Resource:
              GetResCosts;
          END;
          RoundCosts(1 / LotSize);
        END ELSE
          IF HasBomStructure("No.") THEN BEGIN
            CalcOvhdCost;
            RoundCosts(1 / LotSize);
          END ELSE
            IF Type = Type::Item THEN BEGIN
              RoundCosts(1 / LotSize);
              GetItemCosts;
            END;

        CalcUnitCost;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE BinarySearchOptimal@17(VAR BOMBuffer@1002 : Record 5870;InputLow@1000 : Decimal;InputHigh@1001 : Decimal) : Decimal;
    VAR
      InputMid@1003 : Decimal;
    BEGIN
      IF InputHigh <= 0 THEN
        EXIT(0);
      IF CalcAvailability(BOMBuffer,InputHigh,TRUE) THEN BEGIN
        TempMemoizedResult.DELETEALL;
        EXIT(InputHigh);
      END;
      IF InputHigh - InputLow = UOMMgt.QtyRndPrecision THEN BEGIN
        TempMemoizedResult.DELETEALL;
        EXIT(InputLow);
      END;
      InputMid := ROUND((InputLow + InputHigh) / 2,UOMMgt.QtyRndPrecision);
      IF NOT CalcAvailability(BOMBuffer,InputMid,TRUE) THEN
        EXIT(BinarySearchOptimal(BOMBuffer,InputLow,InputMid));
      EXIT(BinarySearchOptimal(BOMBuffer,InputMid,InputHigh));
    END;

    LOCAL PROCEDURE CalcAvailability@18(VAR BOMBuffer@1000 : Record 5870;Input@1001 : Decimal;IsTest@1005 : Boolean) : Boolean;
    VAR
      ParentBOMBuffer@1003 : Record 5870;
      ExpectedQty@1002 : Decimal;
      AvailQty@1004 : Decimal;
      MaxTime@1006 : Integer;
    BEGIN
      IF BOMBuffer.Indentation = 0 THEN BEGIN
        IF IsTest THEN
          IF TempMemoizedResult.GET(Input) THEN
            EXIT(TempMemoizedResult.Output);

        ResetUpdatedAvailability;
      END;

      ParentBOMBuffer := BOMBuffer;
      WITH BOMBuffer DO BEGIN
        WHILE (NEXT <> 0) AND (ParentBOMBuffer.Indentation < Indentation) DO
          IF ParentBOMBuffer.Indentation + 1 = Indentation THEN BEGIN
            TempItemAvailByDate.SETRANGE("Item No.","No.");
            TempItemAvailByDate.SETRANGE(Date,"Needed by Date");
            TempItemAvailByDate.SETRANGE("Variant Code","Variant Code");
            IF LocationSpecific THEN
              TempItemAvailByDate.SETRANGE("Location Code","Location Code");
            TempItemAvailByDate.FINDFIRST;
            ExpectedQty := ROUND("Qty. per Parent" * Input,UOMMgt.QtyRndPrecision);
            AvailQty := TempItemAvailByDate."Updated Available Qty";
            IF AvailQty < ExpectedQty THEN BEGIN
              IF "Is Leaf" THEN BEGIN
                IF MarkBottleneck THEN BEGIN
                  Bottleneck := TRUE;
                  MODIFY(TRUE);
                END;
                BOMBuffer := ParentBOMBuffer;
                IF (Indentation = 0) AND IsTest THEN
                  AddMemoizedResult(Input,FALSE);
                EXIT(FALSE);
              END;
              IF AvailQty <> 0 THEN
                ReduceAvailability("No.","Variant Code","Location Code","Needed by Date",AvailQty);
              IF NOT IsTest THEN BEGIN
                "Available Quantity" := AvailQty;
                MODIFY;
              END;
              IF NOT CalcAvailability(BOMBuffer,ExpectedQty - AvailQty,IsTest) THEN BEGIN
                IF MarkBottleneck THEN BEGIN
                  Bottleneck := TRUE;
                  MODIFY(TRUE);
                END;
                BOMBuffer := ParentBOMBuffer;
                IF (Indentation = 0) AND IsTest THEN
                  AddMemoizedResult(Input,FALSE);
                EXIT(FALSE);
              END;
              IF NOT IsTest THEN
                IF MaxTime < (ParentBOMBuffer."Needed by Date" - "Needed by Date") + "Rolled-up Lead-Time Offset" THEN
                  MaxTime := (ParentBOMBuffer."Needed by Date" - "Needed by Date") + "Rolled-up Lead-Time Offset";
            END ELSE BEGIN
              IF NOT IsTest THEN BEGIN
                "Available Quantity" := ExpectedQty;
                MODIFY;
                IF MaxTime < (ParentBOMBuffer."Needed by Date" - "Needed by Date") + "Rolled-up Lead-Time Offset" THEN
                  MaxTime := (ParentBOMBuffer."Needed by Date" - "Needed by Date") + "Rolled-up Lead-Time Offset";
              END;
              ReduceAvailability("No.","Variant Code","Location Code","Needed by Date",ExpectedQty);
            END;
          END;
        BOMBuffer := ParentBOMBuffer;
        "Rolled-up Lead-Time Offset" := MaxTime;
        MODIFY(TRUE);
        IF (Indentation = 0) AND IsTest THEN
          AddMemoizedResult(Input,TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddMemoizedResult@40(NewInput@1000 : Decimal;NewOutput@1001 : Boolean);
    BEGIN
      WITH TempMemoizedResult DO BEGIN
        Input := NewInput;
        Output := NewOutput;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ResetUpdatedAvailability@24();
    BEGIN
      WITH TempItemAvailByDate DO BEGIN
        RESET;
        IF FIND('-') THEN
          REPEAT
            IF "Updated Available Qty" <> "Available Qty" THEN BEGIN
              "Updated Available Qty" := "Available Qty";
              MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReduceAvailability@31(ItemNo@1000 : Code[20];VariantCode@1002 : Code[10];LocationCode@1003 : Code[10];ToDate@1004 : Date;Qty@1001 : Decimal);
    BEGIN
      WITH TempItemAvailByDate DO BEGIN
        RESET;
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        IF LocationSpecific THEN
          SETRANGE("Location Code",LocationCode);
        SETRANGE(Date,0D,ToDate);
        IF FINDSET THEN
          REPEAT
            IF "Updated Available Qty" <> 0 THEN BEGIN
              IF "Updated Available Qty" > Qty THEN
                "Updated Available Qty" := "Updated Available Qty" - Qty
              ELSE
                "Updated Available Qty" := 0;
              MODIFY;
            END;
          UNTIL NEXT = 0;
        SETRANGE("Item No.");
        SETRANGE("Variant Code");
        SETRANGE("Location Code");
        SETRANGE(Date);
      END;
    END;

    LOCAL PROCEDURE DistributeRemainingAvail@21(VAR BOMBuffer@1000 : Record 5870);
    VAR
      CurrItemAvailByDate@1005 : Record 5872;
      CopyOfBOMBuffer@1001 : Record 5870;
    BEGIN
      WITH BOMBuffer DO BEGIN
        CopyOfBOMBuffer.COPY(BOMBuffer);
        RESET;
        SETCURRENTKEY(Type,"No.",Indentation);
        SETFILTER("Entry No.",'>=%1',"Entry No.");
        TempItemAvailByDate.RESET;
        IF TempItemAvailByDate.FINDSET THEN
          REPEAT
            IF TempItemAvailByDate."Updated Available Qty" <> 0 THEN BEGIN
              CurrItemAvailByDate := TempItemAvailByDate;

              SETRANGE(Type,Type);
              SETRANGE("No.",TempItemAvailByDate."Item No.");
              SETRANGE("Variant Code",TempItemAvailByDate."Variant Code");
              IF LocationSpecific THEN
                SETRANGE("Location Code",TempItemAvailByDate."Location Code");
              SETRANGE("Needed by Date",TempItemAvailByDate.Date);
              FINDFIRST;
              "Available Quantity" += TempItemAvailByDate."Updated Available Qty";
              "Unused Quantity" += TempItemAvailByDate."Updated Available Qty";
              MODIFY;

              ReduceAvailability("No.","Variant Code","Location Code",
                "Needed by Date",
                TempItemAvailByDate."Updated Available Qty");
              TempItemAvailByDate := CurrItemAvailByDate;
            END;
          UNTIL TempItemAvailByDate.NEXT = 0;
        COPY(CopyOfBOMBuffer);
        FIND;
      END;
    END;

    LOCAL PROCEDURE MarkBottlenecks@22(VAR BOMBuffer@1005 : Record 5870;Input@1003 : Decimal);
    BEGIN
      MarkBottleneck := TRUE;
      CalcAvailability(BOMBuffer,Input + UOMMgt.QtyRndPrecision,TRUE);
      MarkBottleneck := FALSE;
    END;

    LOCAL PROCEDURE CalcCompDueDate@57(DemandDate@1000 : Date;ParentItem@1003 : Record 27;LeadTimeOffset@1005 : DateFormula) DueDate : Date;
    VAR
      MfgSetup@1002 : Record 99000765;
      EndDate@1001 : Date;
      StartDate@1004 : Date;
    BEGIN
      IF DemandDate = 0D THEN
        EXIT;

      EndDate := DemandDate;
      IF FORMAT(ParentItem."Safety Lead Time") <> '' THEN
        EndDate := DemandDate - (CALCDATE(ParentItem."Safety Lead Time",DemandDate) - DemandDate)
      ELSE
        IF MfgSetup.GET AND (FORMAT(MfgSetup."Default Safety Lead Time") <> '') THEN
          EndDate := DemandDate - (CALCDATE(MfgSetup."Default Safety Lead Time",DemandDate) - DemandDate);

      IF FORMAT(ParentItem."Lead Time Calculation") = '' THEN
        StartDate := EndDate
      ELSE
        StartDate := EndDate - (CALCDATE(ParentItem."Lead Time Calculation",EndDate) - EndDate);

      IF FORMAT(LeadTimeOffset) = '' THEN
        DueDate := StartDate
      ELSE
        DueDate := StartDate - (CALCDATE(LeadTimeOffset,StartDate) - StartDate);
    END;

    LOCAL PROCEDURE AvailByDateExists@4(BOMBuffer@1000 : Record 5870) : Boolean;
    BEGIN
      IF LocationSpecific THEN
        EXIT(TempItemAvailByDate.GET(BOMBuffer."No.",BOMBuffer."Variant Code",BOMBuffer."Location Code",BOMBuffer."Needed by Date"));
      EXIT(TempItemAvailByDate.GET(BOMBuffer."No.",BOMBuffer."Variant Code",'',BOMBuffer."Needed by Date"));
    END;

    [External]
    PROCEDURE SetShowTotalAvailability@30(NewShowTotalAvailability@1000 : Boolean);
    BEGIN
      ShowTotalAvailability := NewShowTotalAvailability;
    END;

    LOCAL PROCEDURE CalcRoutingLineCosts@7(RoutingLine@1002 : Record 99000764;LotSize@1003 : Decimal;ScrapPct@1004 : Decimal;VAR BOMBuffer@1005 : Record 5870;ParentItem@1009 : Record 27);
    VAR
      CalcStdCost@1001 : Codeunit 5812;
      CostCalculationMgt@1000 : Codeunit 5836;
      CapCost@1006 : Decimal;
      SubcontractedCapCost@1007 : Decimal;
      CapOverhead@1008 : Decimal;
    BEGIN
      OnBeforeCalcRoutingLineCosts(RoutingLine,LotSize,ScrapPct,ParentItem);

      CalcStdCost.SetProperties(WORKDATE,FALSE,FALSE,FALSE,'',FALSE);
      CalcStdCost.CalcRtngLineCost(
        RoutingLine,CostCalculationMgt.CalcQtyAdjdForBOMScrap(LotSize,ScrapPct),CapCost,SubcontractedCapCost,CapOverhead);

      BOMBuffer.AddCapacityCost(CapCost,CapCost);
      BOMBuffer.AddSubcontrdCost(SubcontractedCapCost,SubcontractedCapCost);
      BOMBuffer.AddCapOvhdCost(CapOverhead,CapOverhead);
    END;

    LOCAL PROCEDURE HasBomStructure@37(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            Item.CALCFIELDS("Assembly BOM");
            IF Item."Assembly BOM" THEN
              EXIT(TRUE);
          END;
        Item."Replenishment System"::"Prod. Order":
          IF Item."Production BOM No." <> '' THEN
            EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE SetItemFilter@34(VAR Item@1000 : Record 27);
    BEGIN
      ItemFilter.COPYFILTERS(Item);
    END;

    LOCAL PROCEDURE GetBOMUnitOfMeasure@36(ProdBOMNo@1000 : Code[20];ProdBOMVersionNo@1002 : Code[20]) : Code[10];
    VAR
      ProdBOMHeader@1001 : Record 99000771;
      ProdBOMVersion@1003 : Record 99000779;
    BEGIN
      IF ProdBOMVersionNo <> '' THEN BEGIN
        ProdBOMVersion.GET(ProdBOMNo,ProdBOMVersionNo);
        EXIT(ProdBOMVersion."Unit of Measure Code");
      END;

      ProdBOMHeader.GET(ProdBOMNo);
      EXIT(ProdBOMHeader."Unit of Measure Code");
    END;

    LOCAL PROCEDURE GetQtyPerBOMHeaderUnitOfMeasure@35(Item@1002 : Record 27;ProdBOMNo@1001 : Code[20];ProdBOMVersionNo@1000 : Code[20]) : Decimal;
    VAR
      UOMMgt@1003 : Codeunit 5402;
    BEGIN
      IF ProdBOMNo = '' THEN
        EXIT(1);

      EXIT(UOMMgt.GetQtyPerUnitOfMeasure(Item,GetBOMUnitOfMeasure(ProdBOMNo,ProdBOMVersionNo)));
    END;

    LOCAL PROCEDURE CombineScrapFactors@38(LowLevelScrapPct@1000 : Decimal;HighLevelScrapPct@1001 : Decimal) : Decimal;
    BEGIN
      EXIT(LowLevelScrapPct + HighLevelScrapPct + LowLevelScrapPct * HighLevelScrapPct / 100);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFilterBOMBuffer@44(VAR ParentItem@1003 : Record 27;VAR BOMBuffer@1002 : Record 5870;DemandDate@1001 : Date;TreeType@1000 : Option);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromProdItem@39(VAR BOMBuffer@1000 : Record 5870;ProdBOMLine@1001 : Record 99000772);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromProdBOM@41(VAR BOMBuffer@1000 : Record 5870;ProdBOMLine@1001 : Record 99000772);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromProdRouting@42(VAR BOMBuffer@1001 : Record 5870;RoutingLine@1000 : Record 99000764);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcRoutingLineCosts@45(VAR RoutingLine@1003 : Record 99000764;VAR LotSize@1002 : Decimal;VAR ScrapPct@1001 : Decimal;ParentItem@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFilterBOMBuffer@43(VAR ParentItem@1003 : Record 27;VAR BOMBuffer@1002 : Record 5870;DemandDate@1001 : Date;TreeType@1000 : Option;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFilterByQuantityPer@48(VAR ProductionBOMLine@1000 : Record 99000772;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferFromProdBOM@46(VAR BOMBuffer@1001 : Record 5870;ProdBOMLine@1000 : Record 99000772;VAR ParentItem@1002 : Record 27;VAR ParentBOMBuffer@1003 : Record 5870;VAR EntryNo@1004 : Integer;TreeType@1005 : ' ,Availability,Cost');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTraverseCostTreeOnAfterAddCost@47(VAR ParentBOMBuffer@1000 : Record 5870;VAR BOMBuffer@1001 : Record 5870);
    BEGIN
    END;

    BEGIN
    END.
  }
}

