OBJECT Page 11128028 Installment by Year FB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Project Installment by Year;
               SVE=Projektavbetalning per †r];
    SourceTable=Table11012018;
    PageType=CardPart;
    OnAfterGetRecord=VAR
                       ProjectInstallment@1100285100 : Record 11012018;
                       JobLedgerEntry@1100285107 : Record 11072005;
                       SalesInvoiceLine@1100285106 : Record 113;
                       SalesCrMemoLine@1100285108 : Record 115;
                       i@1100285101 : Integer;
                       perStart@1100285102 : Date;
                       perEnd@1100285103 : Date;
                       dateMin@1100285105 : Date;
                       dateMax@1100285104 : Date;
                     BEGIN
                       dateMin:=99991231D;
                       dateMax:=0D;
                       CLEAR(InstallmentAmount);
                       CLEAR(CaptionSet);
                       ProjectInstallment.COPYFILTERS(Rec);
                       ProjectInstallment.SETFILTER("Expected Invoice Date",'<>%1',0D);
                       IF ProjectInstallment.FINDSET(FALSE) THEN REPEAT
                         IF ProjectInstallment."Expected Invoice Date" >= dateMax THEN
                           dateMax := ProjectInstallment."Expected Invoice Date" ;
                         IF ProjectInstallment."Expected Invoice Date" <= dateMin THEN
                           dateMin := ProjectInstallment."Expected Invoice Date" ;
                       UNTIL ProjectInstallment.NEXT=0;

                       // SETFILTER("Invoiced Price",'<>0');
                       // -Sum("Job Ledger Entry"."Total Price (LCY)" WHERE (Project Invoice=CONST(Yes),Installment Invoice=CONST(Yes),Job No.=FIELD(Project No.),
                       // Principal=FIELD(Principal),Installment No.=FIELD(Installment No.),Plot No.=FIELD(Plot No.)))
                       JobLedgerEntry.SETRANGE("Project Invoice",TRUE);
                       JobLedgerEntry.SETRANGE("Installment Invoice",TRUE);
                       JobLedgerEntry.SETRANGE("Job No.","Project No.");
                       JobLedgerEntry.SETRANGE(Principal,Principal);

                       // "Withheld Amt. (Invoiced)"
                       // Sum("Sales Invoice Line"."Withheld Amount" WHERE (Project Invoice=CONST(Yes),Installment Invoice=CONST(Yes),
                       //  Job No.=FIELD(Project No.),Sell-to Customer No.=FIELD(Principal),Installment No.=FIELD(Installment No.),Plot No.=FIELD(Plot No.)))
                       SalesInvoiceLine.SETRANGE("Project Invoice",TRUE);
                       SalesInvoiceLine.SETRANGE("Installment Invoice",TRUE);
                       SalesInvoiceLine.SETRANGE("Job No.","Project No.");
                       SalesInvoiceLine.SETRANGE("Sell-to Customer No.",Principal);
                       SalesInvoiceLine.SETRANGE("Plot No.","Plot No.");

                       SalesCrMemoLine.SETRANGE("Project Credit Memo",TRUE);
                       SalesCrMemoLine.SETRANGE("Installment Credit Memo",TRUE);
                       SalesCrMemoLine.SETRANGE("Job No.","Project No.");
                       SalesCrMemoLine.SETRANGE("Sell-to Customer No.",Principal);
                       SalesCrMemoLine.SETRANGE("Plot No.","Plot No.");

                       ProjectInstallment.COPYFILTERS(Rec);

                       JobLedgerEntry.CALCSUMS("Total Price");
                       SalesInvoiceLine.CALCSUMS("Withheld Amount");
                       SalesCrMemoLine.CALCSUMS("Withheld Amount");
                       ProjectInstallment.CALCSUMS("Installment Amount");

                       //InstallmentAmount[1] := ProjectInstallment."Installment Amount" + JobLedgerEntry."Total Price"-SalesInvoiceLine."Withheld Amount"-SalesCrMemoLine."Withheld Amount";
                       InstallmentAmount[1] := ProjectInstallment."Installment Amount"; // + JobLedgerEntry."Total Price"; //-SalesInvoiceLine."Withheld Amount"-SalesCrMemoLine."Withheld Amount";

                       CaptionSet[1] := '3,Total';

                       perStart := DMY2DATE(1,1,DATE2DMY(dateMin,3));
                       perEnd := DMY2DATE(31,12,DATE2DMY(perStart,3));

                       i:=2;
                       WHILE (i < 6) AND (perStart < dateMax) DO BEGIN
                         ProjectInstallment.SETRANGE("Expected Invoice Date",perStart,perEnd);
                         JobLedgerEntry.SETRANGE("Posting Date",perStart,perEnd);
                         SalesInvoiceLine.SETRANGE("Posting Date",perStart,perEnd);
                         SalesCrMemoLine.SETRANGE("Posting Date",perStart,perEnd);

                         JobLedgerEntry.CALCSUMS("Total Price");
                         SalesInvoiceLine.CALCSUMS("Withheld Amount");
                         SalesCrMemoLine.CALCSUMS("Withheld Amount");
                         ProjectInstallment.CALCSUMS("Installment Amount");

                         //InstallmentAmount[i] := ProjectInstallment."Installment Amount" + JobLedgerEntry."Total Price"-SalesInvoiceLine."Withheld Amount"-SalesCrMemoLine."Withheld Amount";
                         InstallmentAmount[i] := ProjectInstallment."Installment Amount"; // + JobLedgerEntry."Total Price"; //-SalesInvoiceLine."Withheld Amount"-SalesCrMemoLine."Withheld Amount";

                         IF InstallmentAmount[i] <> 0 THEN
                           CaptionSet[i] := '3,'+FORMAT(perStart, 0, '<Year4>');

                         i+=1;
                         perStart := DMY2DATE(1,1,DATE2DMY(perStart,3)+1);
                         perEnd := DMY2DATE(31,12,DATE2DMY(perStart,3));
                       END;

                       IF perStart < dateMax THEN BEGIN
                         ProjectInstallment.SETFILTER("Expected Invoice Date",'%1..',perStart);
                         JobLedgerEntry.SETFILTER("Posting Date",'%1..',perStart);
                         SalesInvoiceLine.SETFILTER("Posting Date",'%1..',perStart);
                         SalesCrMemoLine.SETFILTER("Posting Date",'%1..',perStart);

                         JobLedgerEntry.CALCSUMS("Total Price");
                         SalesInvoiceLine.CALCSUMS("Withheld Amount");
                         SalesCrMemoLine.CALCSUMS("Withheld Amount");
                         ProjectInstallment.CALCSUMS("Installment Amount");
                         //InstallmentAmount[i] := ProjectInstallment."Installment Amount" + JobLedgerEntry."Total Price"-SalesInvoiceLine."Withheld Amount"-SalesCrMemoLine."Withheld Amount";
                         InstallmentAmount[i] := ProjectInstallment."Installment Amount"; // + JobLedgerEntry."Total Price"; //-SalesInvoiceLine."Withheld Amount"-SalesCrMemoLine."Withheld Amount";
                         CaptionSet[i] := '3,Efter';
                       END;
                     END;

  }
  CONTROLS
  {
    { 1100285100;;Container;
                ContainerType=ContentArea }

    { 1100285101;1;Field  ;
                SourceExpr=InstallmentAmount[1];
                CaptionClass=CaptionSet[1] }

    { 1100285102;1;Field  ;
                BlankZero=Yes;
                SourceExpr=InstallmentAmount[2];
                CaptionClass=CaptionSet[2] }

    { 1100285103;1;Field  ;
                BlankZero=Yes;
                SourceExpr=InstallmentAmount[3];
                CaptionClass=CaptionSet[3] }

    { 1100285104;1;Field  ;
                BlankZero=Yes;
                SourceExpr=InstallmentAmount[4];
                CaptionClass=CaptionSet[4] }

    { 1100285105;1;Field  ;
                BlankZero=Yes;
                SourceExpr=InstallmentAmount[5];
                CaptionClass=CaptionSet[5] }

    { 1100285106;1;Field  ;
                BlankZero=Yes;
                SourceExpr=InstallmentAmount[6];
                CaptionClass=CaptionSet[6] }

  }
  CODE
  {
    VAR
      InstallmentAmount@1100285101 : ARRAY [10] OF Decimal;
      CaptionSet@1100285105 : ARRAY [10] OF Text;

    BEGIN
    {
      190326 ORANGO.DL BYGG002 ProjectInstallment, FB by year
    }
    END.
  }
}

