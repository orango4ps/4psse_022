OBJECT Page 11229595 Plot Recording Line WS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=;
    SourceTable=Table11072252;
    SourceTableView=WHERE(Unit=FILTER(<>''),
                          House Model=FILTER(<>''));
    PageType=List;
    OnFindRecord=VAR
                   Found@1100525000 : Boolean;
                 BEGIN
                   Found := FindPosition(Which);
                   EXIT(Found);
                 END;

    OnNextRecord=VAR
                   PlotSQRecordingLine@1100525000 : Record 11072252;
                   NextStep@1100525001 : Integer;
                 BEGIN
                   PlotSQRecordingLine.COPY(Rec);
                   NextStep := NextPosition(PlotSQRecordingLine,Steps);
                   IF NextStep <> 0 THEN Rec.COPY(PlotSQRecordingLine);
                   EXIT(NextStep);
                 END;

    OnAfterGetRecord=BEGIN
                       CALCFIELDS("Cold Recording Quantity", "Warm Recording Quantity", "Production Recording Quantity", "Unit Price");
                       CALCFIELDS("First Recording Seq. No.", "Last Recording Seq. No.");

                       ColdRecordingQuantity  := "Cold Recording Quantity";
                       WarmRecordingQuantity := "Warm Recording Quantity";
                       ProductionRecordingQuantity := "Production Recording Quantity";

                       ColdRecordingAmount  := "Cold Recording Quantity" * "Unit Price";
                       WarmRecordingAmount := "Warm Recording Quantity" * "Unit Price";
                       ProductionRecordingAmount := "Production Recording Quantity" * "Unit Price";
                     END;

    OnNewRecord=BEGIN
                  ColdRecordingQuantity  := 0;
                  WarmRecordingQuantity := 0;
                  ProductionRecordingQuantity := 0;
                END;

    OnInsertRecord=VAR
                     Plot@1100528201 : Record 11012500;
                     PlotSQRecording@1100528200 : Record 11072251;
                     PlotRecordingCrossList@1100525002 : Record 11072253;
                   BEGIN
                     Plot.GET("Project No.","Plot No.");

                     PlotSQRecording.SETRANGE("Project No.","Project No.");
                     PlotSQRecording.SETRANGE("Plot No.", "Plot No.");
                     PlotSQRecording.SETRANGE(Phase, Plot."MMR Phase");
                     PlotSQRecording.SETRANGE("Recording Date", TODAY);
                     IF NOT PlotSQRecording.FINDFIRST THEN BEGIN
                       PlotSQRecording.SETFILTER("Plot No.", '%1', '');
                       IF NOT PlotSQRecording.FINDFIRST THEN BEGIN
                         PlotSQRecording.INIT;
                         PlotSQRecording."Seq. No." := 0;
                         PlotSQRecording.VALIDATE("Project No.","Project No.");
                         PlotSQRecording."Plot No." := '';
                         PlotSQRecording.Phase :=  Plot."MMR Phase";
                         PlotSQRecording."Recording Date" := TODAY;
                         PlotSQRecording.INSERT(TRUE);
                       END;
                       PlotSQRecording."Plot No." := "Plot No.";
                       PlotSQRecording.INSERT(TRUE);
                     END;

                     "Recording Seq. No." := PlotSQRecording."Seq. No.";
                     Phase := PlotSQRecording.Phase;
                     "Recording Date" :=  PlotSQRecording."Recording Date";
                     "Production Status" := PlotSQRecording.Status;

                     PlotRecordingCrossList.SETRANGE("Project No.","Project No.");
                     PlotRecordingCrossList.SETRANGE("House Model","House Model");
                     PlotRecordingCrossList.SETRANGE(Unit,Unit);
                     PlotRecordingCrossList.SETRANGE("Line No.","Line No.");
                     IF (PlotRecordingCrossList.FINDFIRST) AND (PlotRecordingCrossList."Line No." <> 0) THEN BEGIN
                       IF (PlotRecordingCrossList.Type = Type) AND (PlotRecordingCrossList.Code = Code) THEN BEGIN
                         "Main Group" := PlotRecordingCrossList."Main Group";
                         Group := PlotRecordingCrossList.Group;
                         "Sub Group" := PlotRecordingCrossList."Sub Group";
                         Type := PlotRecordingCrossList.Type;
                         Code := PlotRecordingCrossList.Code;
                       END;
                     END ELSE BEGIN
                       IF "Line No." <> 0 THEN BEGIN
                         PlotRecordingCrossList.SETRANGE("Project No.","Project No.");
                         PlotRecordingCrossList.SETRANGE("House Model","House Model");
                         PlotRecordingCrossList.SETFILTER(Unit, '%1', '');
                         PlotRecordingCrossList.SETRANGE("Line No.","Line No.");
                         IF PlotRecordingCrossList.FINDFIRST THEN BEGIN
                           PlotRecordingCrossList.VALIDATE(Unit, Unit);
                           PlotRecordingCrossList.INSERT(TRUE);
                         END ELSE BEGIN
                           PlotRecordingCrossList.INIT;
                           PlotRecordingCrossList.VALIDATE("Project No.","Project No.");
                           PlotRecordingCrossList.VALIDATE("House Model","House Model");
                           PlotRecordingCrossList.VALIDATE(Unit, Unit);
                           PlotRecordingCrossList.VALIDATE("Line No.","Line No.");
                           PlotRecordingCrossList.INSERT(TRUE);
                         END;
                       END ELSE BEGIN
                         PlotRecordingCrossList.INIT;
                         PlotRecordingCrossList.VALIDATE("Project No.","Project No.");
                         PlotRecordingCrossList.VALIDATE("House Model","House Model");
                         PlotRecordingCrossList.VALIDATE(Unit, Unit);
                         PlotRecordingCrossList.INSERT(TRUE);
                         "Line No." := PlotRecordingCrossList."Line No.";
                       END;
                     END;
                   END;

    OnModifyRecord=VAR
                     PlotSQRecordingLine@1100525000 : Record 11072252;
                     PlotRecordingCrossList@1100525002 : Record 11072253;
                   BEGIN
                     IF (Code <> '') THEN BEGIN
                       PlotRecordingCrossList.SETRANGE("Project No.","Project No.");
                       PlotRecordingCrossList.SETRANGE("House Model","House Model");
                       PlotRecordingCrossList.SETRANGE(Unit,Unit);
                       PlotRecordingCrossList.SETRANGE("Line No.","Line No.");
                       IF PlotRecordingCrossList.FINDFIRST THEN BEGIN
                         IF (PlotRecordingCrossList.Code <> Code) THEN BEGIN
                           PlotSQRecordingLine.SETRANGE("Project No.", "Project No.");
                           PlotSQRecordingLine.SETRANGE("Plot No.", "Plot No.");
                           PlotSQRecordingLine.SETFILTER("Recording Seq. No.", '<>%1', "Recording Seq. No.");
                           PlotSQRecordingLine.SETRANGE("House Model", "House Model");
                           PlotSQRecordingLine.SETRANGE(Unit, Unit);
                           PlotSQRecordingLine.SETRANGE("Line No.", "Line No.");
                           IF PlotSQRecordingLine.ISEMPTY THEN BEGIN
                             PlotSQRecordingLine.SETRANGE("Project No.", "Project No.");
                             PlotSQRecordingLine.SETFILTER("Plot No.", '<>%1', "Plot No.");
                             PlotSQRecordingLine.SETRANGE("Recording Seq. No.");
                             PlotSQRecordingLine.SETRANGE("House Model", "House Model");
                             PlotSQRecordingLine.SETRANGE(Unit, Unit);
                             PlotSQRecordingLine.SETRANGE("Line No.", "Line No.");
                             IF PlotSQRecordingLine.ISEMPTY THEN BEGIN
                               PlotRecordingCrossList.VALIDATE(Type, Type);
                               PlotRecordingCrossList.VALIDATE("Main Group", "Main Group");
                               PlotRecordingCrossList.VALIDATE(Group, Group);
                               PlotRecordingCrossList.VALIDATE("Sub Group", "Sub Group");
                               PlotRecordingCrossList.VALIDATE(Code, Code);
                               PlotRecordingCrossList.MODIFY;
                             END ELSE
                               TESTFIELD(Code, PlotRecordingCrossList.Code);
                           END ELSE BEGIN
                             TESTFIELD(Code, PlotRecordingCrossList.Code);
                           END;
                         END;
                       END;
                     END;
                   END;

  }
  CONTROLS
  {
    { 1100528200;0;Container;
                ContainerType=ContentArea }

    { 1100528201;1;Group  ;
                Name=GroupFlds;
                GroupType=Repeater }

    { 1100528202;2;Field  ;
                Name=JobNo;
                SourceExpr="Project No." }

    { 1100528203;2;Field  ;
                Name=PlotNo;
                SourceExpr="Plot No." }

    { 1100528204;2;Field  ;
                Name=RecordingSeqNo;
                SourceExpr="Recording Seq. No." }

    { 1100528205;2;Field  ;
                Name=HouseModel;
                SourceExpr="House Model" }

    { 1100528206;2;Field  ;
                Name=Room;
                SourceExpr=Unit }

    { 1100528207;2;Field  ;
                Name=LineNo;
                SourceExpr="Line No." }

    { 1100528208;2;Field  ;
                Name=PreRecordingQty;
                SourceExpr=ColdRecordingQuantity;
                OnValidate=BEGIN
                             EditRecordingQuantity(Phase::"Cold Recording", ColdRecordingQuantity);
                             CALCFIELDS("Cold Recording Quantity", "Warm Recording Quantity", "Production Recording Quantity");
                             CALCFIELDS("First Recording Seq. No.", "Last Recording Seq. No.");

                             ColdRecordingQuantity := "Cold Recording Quantity";
                             WarmRecordingQuantity := "Warm Recording Quantity";
                             ProductionRecordingQuantity := "Production Recording Quantity";
                             ColdRecordingAmount  := "Cold Recording Quantity" * "Unit Price";
                             WarmRecordingAmount := "Warm Recording Quantity" * "Unit Price";
                             ProductionRecordingAmount := "Production Recording Quantity" * "Unit Price";
                           END;
                            }

    { 1100528209;2;Field  ;
                Name=RecordingQty;
                SourceExpr=WarmRecordingQuantity;
                OnValidate=BEGIN
                             EditRecordingQuantity(Phase::"Warm Recording", WarmRecordingQuantity);
                             CALCFIELDS("Cold Recording Quantity", "Warm Recording Quantity", "Production Recording Quantity");
                             CALCFIELDS("First Recording Seq. No.", "Last Recording Seq. No.");

                             WarmRecordingQuantity := "Warm Recording Quantity";
                             ProductionRecordingQuantity := "Production Recording Quantity";
                             WarmRecordingAmount := "Warm Recording Quantity" * "Unit Price";
                             ProductionRecordingAmount := "Production Recording Quantity" * "Unit Price";
                           END;
                            }

    { 1100528210;2;Field  ;
                Name=ProductionQty;
                SourceExpr=ProductionRecordingQuantity;
                OnValidate=BEGIN
                             EditRecordingQuantity(Phase::Production, ProductionRecordingQuantity);
                             CALCFIELDS("Cold Recording Quantity", "Warm Recording Quantity", "Production Recording Quantity");
                             CALCFIELDS("First Recording Seq. No.", "Last Recording Seq. No.");

                             ProductionRecordingQuantity := "Production Recording Quantity";
                             ProductionRecordingAmount := "Production Recording Quantity" * "Unit Price";
                           END;
                            }

    { 1100528214;2;Field  ;
                Name=Comment;
                SourceExpr=Comment }

    { 1100528219;2;Field  ;
                Name=PreRecordingAmt;
                SourceExpr=ColdRecordingAmount;
                Editable=FALSE }

    { 1100528218;2;Field  ;
                Name=RecordingAmt;
                SourceExpr=WarmRecordingAmount;
                Editable=FALSE }

    { 1100528217;2;Field  ;
                Name=ProductionAmt;
                SourceExpr=ProductionRecordingAmount;
                Editable=FALSE }

    { 1100528211;2;Field  ;
                Name=Type;
                SourceExpr=Type }

    { 1100525004;2;Field  ;
                Name=MainGroup;
                SourceExpr="Main Group" }

    { 1100525005;2;Field  ;
                SourceExpr=Group }

    { 1100525003;2;Field  ;
                Name=SubGroup;
                SourceExpr="Sub Group" }

    { 1100528212;2;Field  ;
                Name=ItemCode;
                SourceExpr=Code }

    { 1100528213;2;Field  ;
                Name=Description;
                SourceExpr=Description }

    { 1100528216;2;Field  ;
                Name=Price;
                SourceExpr="Unit Price" }

    { 1100528215;2;Field  ;
                Name=UnitOfMeasure;
                SourceExpr="Unit of Measure" }

    { 1100525000;2;Field  ;
                SourceExpr="First Recording Seq. No." }

    { 1100525002;2;Field  ;
                SourceExpr="Last Recording Seq. No." }

    { 1100525001;2;Field  ;
                SourceExpr="Production Recording Quantity" }

  }
  CODE
  {
    VAR
      ColdRecordingQuantity@1100528200 : Decimal;
      WarmRecordingQuantity@1100528201 : Decimal;
      ProductionRecordingQuantity@1100528202 : Decimal;
      ColdRecordingAmount@1100528205 : Decimal;
      WarmRecordingAmount@1100528204 : Decimal;
      ProductionRecordingAmount@1100528203 : Decimal;

    PROCEDURE ShowThisRecord@1100409001(PlotSQRecordingLine@1100409000 : Record 11072252) : Boolean;
    BEGIN
      PlotSQRecordingLine.CALCFIELDS("First Recording Seq. No.", "Last Recording Seq. No.");
      IF PlotSQRecordingLine."Recording Seq. No." <>  PlotSQRecordingLine."Last Recording Seq. No." THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FindPosition@1100409003(Which@1100409001 : Text) : Boolean;
    VAR
      PlotSQRecordingLine@1100409000 : Record 11072252;
      i@1100409002 : Integer;
    BEGIN
      PlotSQRecordingLine.COPY(Rec);
      IF Which = '' THEN Which := '=';
      FOR i := 1 TO STRLEN(Which) DO
      CASE Which[i] OF
        '-': BEGIN
          IF Rec.FIND('-') THEN REPEAT
            IF ShowThisRecord(Rec) THEN EXIT(TRUE);
          UNTIL Rec.NEXT = 0;
        END;
        '+': BEGIN
          IF Rec.FIND('+') THEN REPEAT
            IF ShowThisRecord(Rec) THEN EXIT(TRUE);
          UNTIL Rec.NEXT(-1) = 0;
        END;
        '=': BEGIN
          IF Rec.FIND THEN
            IF ShowThisRecord(Rec) THEN EXIT(TRUE);
        END;
        '>': BEGIN
          IF NextPosition(Rec, 1) <> 0 THEN
            EXIT(TRUE);
        END;
        '<': BEGIN
          IF NextPosition(Rec, -1) <> 0 THEN
            EXIT(TRUE);
        END;
      END;
      Rec.COPY(PlotSQRecordingLine);
      EXIT(FALSE);
    END;

    PROCEDURE NextPosition@1100409004(VAR PlotSQRecordingLine@1100409000 : Record 11072252;Steps@1100409001 : Integer) StepsCount : Integer;
    VAR
      RecRef2@1100409003 : Record 11072252;
      RecRef3@1100409004 : Record 11072252;
      Direction@1100409002 : Integer;
    BEGIN
      IF Steps = 0 THEN EXIT;
      IF Steps > 0 THEN
        Direction := 1
      ELSE
        Direction := -1;
      RecRef2.COPY(PlotSQRecordingLine);
      RecRef3.COPY(PlotSQRecordingLine);
      REPEAT
        IF PlotSQRecordingLine.NEXT(Direction) = 0 THEN BEGIN
          PlotSQRecordingLine.COPY(RecRef3);
          EXIT;
        END;
        IF ShowThisRecord(PlotSQRecordingLine) THEN BEGIN
          RecRef3.COPY(PlotSQRecordingLine);
          StepsCount += Direction;
        END;
      UNTIL ABS(StepsCount) >= ABS(Steps);
      IF StepsCount = 0 THEN
        PlotSQRecordingLine.COPY(RecRef2)
      ELSE
        PlotSQRecordingLine.COPY(RecRef3);
    END;

    LOCAL PROCEDURE EditRecordingQuantity@1100525001(RecordingPhase@1100525000 : Option;RecordingQuantity@1100525001 : Decimal);
    VAR
      PlotSQRecordingLine@1100525003 : Record 11072252;
      PlotSQRecording@1100525002 : Record 11072251;
      CurrQuantity@1100525004 : Decimal;
      AddNewRecording@1100525005 : Boolean;
      PlotRecordingCrossList@1100525006 : Record 11072253;
      PlotRec@1100525007 : Record 11012500;
    BEGIN
      CALCFIELDS("Cold Recording Quantity", "Warm Recording Quantity", "Production Recording Quantity");

      CASE RecordingPhase OF
        PlotSQRecording.Phase::"Cold Recording":
          BEGIN
            CurrQuantity := "Cold Recording Quantity";
          END;
        PlotSQRecording.Phase::"Warm Recording":
          BEGIN
            CurrQuantity := "Warm Recording Quantity";
          END;
        PlotSQRecording.Phase::Production:
          BEGIN
            CurrQuantity := "Production Recording Quantity";
          END;
      END;

      PlotRec.GET("Project No.","Plot No.");
      CASE RecordingPhase OF
        PlotSQRecording.Phase::"Cold Recording":
          BEGIN
            IF CurrQuantity <> RecordingQuantity THEN
              IF PlotRec."MMR Phase" <> PlotRec."MMR Phase"::PreRecording THEN
                EXIT;
          END;
        PlotSQRecording.Phase::"Warm Recording":
          BEGIN
           IF CurrQuantity <> RecordingQuantity THEN
              IF PlotRec."MMR Phase" <> PlotRec."MMR Phase"::Recording THEN
                EXIT;
          END;
        PlotSQRecording.Phase::Production:
          BEGIN
           IF CurrQuantity <> RecordingQuantity THEN
              IF PlotRec."MMR Phase" <> PlotRec."MMR Phase"::Production THEN
                EXIT;
          END;
      END;

      PlotSQRecordingLine.SETRANGE("Project No.", "Project No.");
      PlotSQRecordingLine.SETRANGE("Plot No.", "Plot No.");
      PlotSQRecordingLine.SETRANGE("House Model", "House Model");
      PlotSQRecordingLine.SETRANGE(Unit, Unit);
      PlotSQRecordingLine.SETRANGE("Line No.", "Line No.");

      PlotSQRecording.SETRANGE("Project No.", "Project No.");
      PlotSQRecording.SETRANGE("Plot No.", "Plot No.");

      AddNewRecording := FALSE;
      IF CurrQuantity <> RecordingQuantity THEN BEGIN
        IF NOT PlotSQRecording.FINDLAST THEN
          AddNewRecording := TRUE
        ELSE BEGIN
          IF PlotSQRecording.Phase > RecordingPhase THEN
            EXIT;
            //PlotSQRecording.TESTFIELD(Phase, RecordingPhase); //ERROR
          IF PlotSQRecording.Phase < RecordingPhase THEN
            AddNewRecording := TRUE;
          IF PlotSQRecording."Recording Date" < TODAY THEN
            AddNewRecording := TRUE;
        END;

        IF AddNewRecording THEN BEGIN
          PlotSQRecording.SETRANGE("Project No.","Project No.");
          PlotSQRecording.SETFILTER("Plot No.", '%1', '');
          PlotSQRecording.SETRANGE(Phase, RecordingPhase);
          PlotSQRecording.SETRANGE("Recording Date", TODAY);
          IF NOT PlotSQRecording.FINDFIRST THEN BEGIN
            PlotSQRecording.INIT;
            PlotSQRecording."Seq. No." := 0;
            PlotSQRecording.VALIDATE("Project No.","Project No.");
            PlotSQRecording."Plot No." := '';
            PlotSQRecording.Phase :=  RecordingPhase;
            PlotSQRecording."Recording Date" := TODAY;
            PlotSQRecording.INSERT(TRUE);
          END;
          PlotSQRecording."Plot No." := "Plot No.";
          IF PlotSQRecording.INSERT(TRUE) THEN;
        END;

        PlotSQRecordingLine.SETRANGE("Recording Seq. No.",PlotSQRecording."Seq. No.");
        IF NOT PlotSQRecordingLine.FINDLAST THEN BEGIN
          PlotSQRecordingLine.COPY(Rec);
          PlotSQRecordingLine."Recording Seq. No." := PlotSQRecording."Seq. No.";
          PlotSQRecordingLine."Delta Recording Quantity" := 0;
          PlotSQRecordingLine.INSERT(TRUE);
          PlotSQRecordingLine.VALIDATE("Recording Date", PlotSQRecording."Recording Date");
          PlotSQRecordingLine.VALIDATE(Phase, PlotSQRecording.Phase);
          PlotSQRecordingLine.VALIDATE("Delta Recording Quantity",0);
          PlotSQRecordingLine."Production Status" := PlotSQRecording.Status;
          PlotSQRecordingLine.MODIFY(TRUE);

          PlotRecordingCrossList.SETRANGE("Project No.",PlotSQRecordingLine."Project No.");
          PlotRecordingCrossList.SETRANGE("House Model",PlotSQRecordingLine."Plot No.");
          PlotRecordingCrossList.SETRANGE(Unit,PlotSQRecordingLine.Unit);
          PlotRecordingCrossList.SETRANGE("Line No.",PlotSQRecordingLine."Line No.");
          IF PlotRecordingCrossList.FINDFIRST THEN BEGIN
            IF (PlotRecordingCrossList.Type = Type) AND (PlotRecordingCrossList.Code = Code) THEN BEGIN
              PlotSQRecordingLine."Main Group" := PlotRecordingCrossList."Main Group";
              PlotSQRecordingLine.Group := PlotRecordingCrossList.Group;
              PlotSQRecordingLine."Sub Group" := PlotRecordingCrossList."Sub Group";
              PlotSQRecordingLine.MODIFY(TRUE);
            END;
          END;
        END;

        IF (PlotSQRecordingLine."Project No." = "Project No.") AND
           (PlotSQRecordingLine."Plot No."= "Plot No.") AND
           (PlotSQRecordingLine."House Model" = "House Model") AND
           (PlotSQRecordingLine.Unit = Unit) AND
           (PlotSQRecordingLine."Line No." = "Line No.") THEN
        BEGIN
          VALIDATE("Delta Recording Quantity", "Delta Recording Quantity" + RecordingQuantity - CurrQuantity);
          //PlotSQRecordingLine.MODIFY(TRUE);
        END ELSE BEGIN
          PlotSQRecordingLine.CALCFIELDS("Cold Recording Quantity", "Warm Recording Quantity", "Production Recording Quantity");
          PlotSQRecordingLine.VALIDATE("Delta Recording Quantity", PlotSQRecordingLine."Delta Recording Quantity" + RecordingQuantity - CurrQuantity);
          PlotSQRecordingLine.MODIFY(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

