OBJECT Codeunit 1535 Approvals Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 454=imd,
                TableData 455=imd,
                TableData 456=imd,
                TableData 457=imd,
                TableData 458=imd,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserIdNotInSetupErr@1015 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=User ID %1 does not exist in the Approval User Setup window.;NOR=Bruker-ID-en %1 finnes ikke i vinduet Brukeroppsett for godkjenning.;SVE=Anv„ndar-ID %1 finns inte i f”nstret Anv„ndarinst„llningar f”r godk„nnande.';
      ApproverUserIdNotInSetupErr@1005 : TextConst '@@@=You must set up an approver for user ID NAVUser in the Approval User Setup window.;ENU=You must set up an approver for user ID %1 in the Approval User Setup window.;NOR=Du m† konfigurere en godkjenner for bruker-ID-en %1 i vinduet Brukeroppsett for godkjenning.;SVE=Du m†ste konfigurera en godk„nnare f”r anv„ndar-ID %1 i f”nstret Anv„ndarinst„llningar f”r godk„nnande.';
      WFUserGroupNotInSetupErr@1013 : TextConst '@@@=The workflow user group member with user ID NAVUser does not exist in the Approval User Setup window.;ENU=The workflow user group member with user ID %1 does not exist in the Approval User Setup window.;NOR=Medlemmet i brukergruppen for arbeidsflyt med bruker-ID-en %1 finnes ikke i vinduet Brukeroppsett for godkjenning.;SVE=Medlemmen i arbetsfl”desanv„ndargruppen med anv„ndar-ID %1 finns inte i f”nstret Anv„ndarinst„llningar f”r godk„nnande.';
      SubstituteNotFoundErr@1007 : TextConst '@@@=There is no substitute for user ID NAVUser in the Approval User Setup window.;ENU=There is no substitute, direct approver, or approval administrator for user ID %1 in the Approval User Setup window.;NOR=Det finnes ingen stedfortreder, direkte godkjenner eller godkjenningsansvarlig for bruker-ID-en %1 i vinduet Brukeroppsett for godkjenning.;SVE=Det finns ingen ers„ttare, direkt godk„nnare eller administrat”r f”r godk„nnande av anv„ndar-ID %1 i f”nstret Anv„ndarinst„llningar f”r godk„nnande.';
      NoSuitableApproverFoundErr@1000 : TextConst 'ENU=No qualified approver was found.;NOR=Finner ingen kvalifisert godkjenner.;SVE=Ingen kvalificerad godk„nnaren hittades.';
      DelegateOnlyOpenRequestsErr@1049 : TextConst 'ENU=You can only delegate open approval requests.;NOR=Du kan bare delegere †pne godkjenningsforesp›rsler.;SVE=Du kan bara delegera ”ppna godk„nnandebeg„randen.';
      ApproveOnlyOpenRequestsErr@1060 : TextConst 'ENU=You can only approve open approval requests.;NOR=Du kan bare godkjenne †pne godkjenningsforesp›rsler.;SVE=Du kan bara godk„nna ”ppna godk„nnandebeg„randen.';
      RejectOnlyOpenRequestsErr@1061 : TextConst 'ENU=You can only reject open approval entries.;NOR=Du kan bare avvise †pne godkjenningsposter.;SVE=Du kan bara avvisa ”ppna godk„nnandetransaktioner.';
      ApprovalsDelegatedMsg@1018 : TextConst 'ENU=The selected approval requests have been delegated.;NOR=De valgte godkjenningsforesp›rslene ene er delegerte.;SVE=Markerade godk„nnandebeg„randen har delegerats.';
      NoReqToApproveErr@1056 : TextConst 'ENU=There is no approval request to approve.;NOR=Det er ingen godkjenningsforesp›rsel † godkjenne.;SVE=Det finns ingen beg„ran om godk„nnande att godk„nna.';
      NoReqToRejectErr@1057 : TextConst 'ENU=There is no approval request to reject.;NOR=Det er ingen godkjenningsforesp›rsel † avvise.;SVE=Det finns ingen beg„ran om godk„nnande att avvisa.';
      NoReqToDelegateErr@1059 : TextConst 'ENU=There is no approval request to delegate.;NOR=Det er ingen godkjenningsforesp›rsel † delegere.;SVE=Det finns ingen beg„ran om godk„nnande att delegera.';
      PendingApprovalMsg@1002 : TextConst 'ENU=An approval request has been sent.;NOR=En godkjenningsforesp›rsel er sendt.;SVE=En godk„nnandebeg„ran har skickats.';
      NoApprovalsSentMsg@1006 : TextConst 'ENU=No approval requests have been sent, either because they are already sent or because related workflows do not support the journal line.;NOR=Ingen godkjenningsforesp›rsler er sendt, enten fordi de allerede er sendt eller fordi relaterte arbeidsflyter ikke st›tter kladdelinjen.;SVE=Inga godk„nnandebeg„randen har skickats, antingen eftersom de redan har skickats eller eftersom relaterade arbetsfl”den inte har st”d f”r journalraden.';
      PendingApprovalForSelectedLinesMsg@1020 : TextConst 'ENU=Approval requests have been sent.;NOR=Godkjenningsforesp›rsler er sendt.;SVE=Godk„nnandebeg„randen har skickats.';
      PendingApprovalForSomeSelectedLinesMsg@1001 : TextConst 'ENU=Approval requests have been sent.\\Requests for some journal lines were not sent, either because they are already sent or because related workflows do not support the journal line.;NOR=Godkjenningsforesp›rsler er sendt.\\Foresp›rsler for enkelte kladdelinjer ble ikke sendt, enten fordi de allerede er sendt eller fordi relaterte arbeidsflyter ikke st›tter kladdelinjen.;SVE=Godk„nnandebeg„randen har skickats.\\Beg„randen f”r vissa journalrader skickades inte, antingen eftersom de redan har skickats eller relaterade arbetsfl”den inte har st”d f”r journalraden.';
      PurchaserUserNotFoundErr@1003 : TextConst '@@@=Example: The salesperson/purchaser user ID NAVUser does not exist in the Approval User Setup window for Salesperson/Purchaser code AB.;ENU=The salesperson/purchaser user ID %1 does not exist in the Approval User Setup window for %2 %3.;NOR=Bruker-ID-en %1 for selger/kj›per finnes ikke i vinduet Brukeroppsett for godkjenning for %2 %3.;SVE=S„ljaren/ink”paren med anv„ndar-ID %1 finns inte i f”nstret Anv„ndarinst„llningar f”r godk„nnande f”r %2 %3.';
      NoApprovalRequestsFoundErr@1009 : TextConst 'ENU=No approval requests exist.;NOR=Det finnes ingen godkjenningsforesp›rsler.;SVE=Det finns inga godk„nnandebeg„randen.';
      NoWFUserGroupMembersErr@1004 : TextConst 'ENU=A workflow user group with at least one member must be set up.;NOR=Det m† konfigureres minst en brukergruppe for arbeidsflyt med minst ett medlem.;SVE=En arbetsfl”desanv„ndargrupp med minst en medlem m†ste konfigureras.';
      DocStatusChangedMsg@1010 : TextConst '@@@=Order 1001 has been automatically approved. The status has been changed to Released.;ENU=%1 %2 has been automatically approved. The status has been changed to %3.;NOR=%1 %2 er godkjent automatisk. Statusen er endret til %3.;SVE=%1 %2 har godk„nts automatiskt. Statusen har „ndrats till %3.';
      UnsupportedRecordTypeErr@1011 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.;NOR=Posttypen %1 st›ttes ikke av dette arbeidsflytsvaret.;SVE=Posttyp %1 st”ds inte i arbetsfl”dessvaret.';
      SalesPrePostCheckErr@1012 : TextConst '@@@="%1=document type, %2=document no., e.g. Sales Order 321 must be approved...";ENU=Sales %1 %2 must be approved and released before you can perform this action.;NOR=Salgs-%1 %2 m† godkjennes og frigis f›r du kan utf›re denne handlingen.;SVE=%1 %2 m†ste godk„nnas och sl„ppas innan du kan utf”ra den h„r †tg„rden.';
      WorkflowEventHandling@1071 : Codeunit 1520;
      WorkflowManagement@1070 : Codeunit 1501;
      PurchPrePostCheckErr@1022 : TextConst '@@@="%1=document type, %2=document no., e.g. Purchase Order 321 must be approved...";ENU=Purchase %1 %2 must be approved and released before you can perform this action.;NOR=Kj›ps-%1 %2 m† godkjennes og frigis f›r du kan utf›re denne handlingen.';
      NoWorkflowEnabledErr@1101 : TextConst 'ENU=No approval workflow for this record type is enabled.;NOR=Det er ikke aktivert noen arbeidsflyt for godkjenning for denne posttypen.;SVE=Inget arbetsfl”de f”r godk„nnande har aktiverats f”r denna posttyp.';
      ApprovalReqCanceledForSelectedLinesMsg@1019 : TextConst 'ENU=The approval request for the selected record has been canceled.;NOR=Godkjenningsforesp›rselen for den valgte posten er annullert.;SVE=Godk„nnandebeg„ran f”r den valda posten har avbrutits.';
      PendingJournalBatchApprovalExistsErr@1017 : TextConst '@@@=%1 is the Document No. of the journal line;ENU=An approval request already exists.;NOR=Det finnes allerede en godkjenningsforesp›rsel.;SVE=En godk„nnandebeg„ran finns redan.';
      ApporvalChainIsUnsupportedMsg@1016 : TextConst '@@@=Only Direct Approver is supported as Approver Limit Type option for Gen. Journal Batch DEFAULT, CASH. The approval request will be approved automatically.;ENU=Only Direct Approver is supported as Approver Limit Type option for %1. The approval request will be approved automatically.;NOR=Bare Direkte godkjenner st›ttes for alternativet Godkjennergrensetype for %1. Godkjenningsforesp›rselen godkjennes automatisk.;SVE=Endast Direkt godk„nnare st”ds f”r alternativet Gr„nstyp f”r godk„nnare f”r %1. Godk„nnandebeg„ran godk„nns automatiskt.';
      RecHasBeenApprovedMsg@1008 : TextConst '@@@="%1 = Record Id";ENU=%1 has been approved.;NOR=%1 er godkjent.;SVE=%1 har godk„nts.';
      DCSetupRead@1100525000 : Boolean;
      DocumentCaptureSetup@1100525001 : Record 6085573;
      NoPermissionToDelegateErr@1014 : TextConst 'ENU=You do not have permission to delegate one or more of the selected approval requests.;NOR=Du har ikke tillatelse til † delegere ‚n eller flere av de valgte godkjenningsforesp›rslene.;SVE=Du „r inte beh”rig att delegera en eller flera av markerade godk„nnandebeg„randen.';
      NothingToApproveErr@1021 : TextConst 'ENU=There is nothing to approve.;NOR=Det finnes ingenting † godkjenne.;SVE=Det finns inget att godk„nna.';
      ApproverChainErr@1023 : TextConst 'ENU=No sufficient approver was found in the approver chain.;NOR=Ingen tilstrekkelig godkjenner ble funnet i godkjennerkjeden.';
      DelegateMethodSelect@1100528400 : TextConst 'ENU=Approve && Forward,Forward without approval,Forward and send the document back to me after approval;SVE=Godk„nn och vidarebefordra,Vidarebefordra utan godk„nnande,Vidarebefordra och skicka tillbaka dokumentet till mig n„r det godk„nts';
      AutoConsentUsed@1100528200 : Boolean;
      DelegatedApproverID@1100525002 : Code[50];
      DelegateSelection@1100525004 : 'Cancel,ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
      IsDelegatedSelectionMade@1100525005 : Boolean;
      NoPermissionToApproveAndDelegateErr@1100528201 : TextConst 'ENU=You do not have permission to approve and delegate one or more of the selected approval requests.';
      ApprovedByInsteadOf@1100528401 : TextConst 'ENU=Approved by %1 instead of %2.';
      RejectedBy@1100528402 : TextConst 'ENU=Rejected by %1.';
      LockedBy@1100527351 : TextConst 'ENU=Approver %1 has put the approval entry Locked.';
      UnlockedBy@1100527350 : TextConst 'ENU=Approver %1 has put the approval entry Unlocked.';
      LockUnlockOnlyOpenRequestsErr@1100527352 : TextConst 'ENU=You can only lock/unlock open approval entries.';
      ApprovalCommentLine@1100525003 : Record 455;
      SkipCheckFourEyesApproval@1100529601 : Boolean;

    [Integration]
    [External]
    PROCEDURE OnSendPurchaseDocForApproval@3(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendSalesDocForApproval@10(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendIncomingDocForApproval@191(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelPurchaseApprovalRequest@4(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelSalesApprovalRequest@34(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelIncomingDocApprovalRequest@100(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendCustomerForApproval@52(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendVendorForApproval@56(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendItemForApproval@64(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelCustomerApprovalRequest@51(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelVendorApprovalRequest@67(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelItemApprovalRequest@69(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendGeneralJournalBatchForApproval@62(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelGeneralJournalBatchApprovalRequest@61(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendGeneralJournalLineForApproval@65(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelGeneralJournalLineApprovalRequest@63(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnApproveApprovalRequest@68(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnRejectApprovalRequest@76(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnDelegateApprovalRequest@78(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnRenameRecordInApprovalRequest@96(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnDeleteRecordInApprovalRequest@97(RecordIDToApprove@1000 : RecordID);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPopulateApprovalEntryArgument@111(VAR RecRef@1000 : RecordRef;VAR ApprovalEntryArgument@1001 : Record 454;WorkflowStepInstance@1002 : Record 1504);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSubstituteUserIdForApprovalEntry@136(ApprovalEntry@1000 : Record 454;VAR Substitute@1001 : Code[50]);
    BEGIN
    END;

    [External]
    PROCEDURE ApproveRecordApprovalRequest@48(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalManagement4PSConstr@1100529601 : Codeunit 11125349;
      FirstEntry@1100529600 : Boolean;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToApproveErr);

      //**4PS.sn
      FirstEntry := TRUE;
      REPEAT
        IF NOT FirstEntry THEN
          IF NOT ApprovalManagement4PSConstr.NextEntryCanBeApproved(ApprovalEntry) THEN
            IF CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
              COMMIT
            ELSE
              EXIT;
        ApprovalEntry.SETRECFILTER;
        ApproveApprovalRequests(ApprovalEntry);
        ApprovalEntry.RESET;
        FirstEntry := FALSE;
      UNTIL NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID);
      //**4PS.en
    END;

    [External]
    PROCEDURE ApproveGenJournalLineRequest@103(GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      ApprovalEntry@1002 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        ApproveRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        ApproveRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE RejectRecordApprovalRequest@57(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToRejectErr);
      //**4PS.so
      //ApprovalEntry.SETRECFILTER;
      //RejectApprovalRequests(ApprovalEntry);
      //**4PS.eo
      //**4PS.sn
      REPEAT
        ApprovalEntry.SETRECFILTER;
        RejectApprovalRequests(ApprovalEntry);
        ApprovalEntry.RESET;
      UNTIL NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID);
      //**4PS.en
    END;

    [External]
    PROCEDURE RejectGenJournalLineRequest@104(GenJournalLine@1002 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      ApprovalEntry@1000 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        RejectRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        RejectRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE DelegateRecordApprovalRequest@58(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToDelegateErr);

      ApprovalEntry.SETRECFILTER;
      DelegateApprovalRequests(ApprovalEntry);
    END;

    [External]
    PROCEDURE DelegateGenJournalLineRequest@29(GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1002 : Record 232;
      ApprovalEntry@1001 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        DelegateRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        DelegateRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE ApproveApprovalRequests@108(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntryToUpdate@1002 : Record 454;
      TmpCheckApprovalEntry@1100529600 : TEMPORARY Record 454;
      ApprovalManagement4PSConstr@1100529601 : Codeunit 11125349;
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          //ApprovalEntryToUpdate := ApprovalEntry; //**4PS.o
          ApprovalEntryToUpdate.COPY(ApprovalEntry);  //**4PS.n
          ApproveSelectedApprovalRequest(ApprovalEntryToUpdate);
          //**4PS.sn
          IF NOT SkipCheckFourEyesApproval THEN
            ApprovalManagement4PSConstr.AddTmpApprovalEntry(ApprovalEntryToUpdate,TmpCheckApprovalEntry);
          //**4PS.en
        UNTIL ApprovalEntry.NEXT = 0;

      //**4PS.sn
      IF NOT SkipCheckFourEyesApproval THEN
        ApprovalManagement4PSConstr.CheckTmpApprovalEntry(TmpCheckApprovalEntry);
      //**4PS.en
    END;

    [External]
    PROCEDURE RejectApprovalRequests@28(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntryToUpdate@1001 : Record 454;
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          //ApprovalEntryToUpdate := ApprovalEntry; //**4PS.o
          ApprovalEntryToUpdate.COPY(ApprovalEntry);  //**4PS.n
          RejectSelectedApprovalRequest(ApprovalEntryToUpdate);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DelegateApprovalRequests@27(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntryToUpdate@1001 : Record 454;
      TmpCheckApprovalEntry@1100529603 : TEMPORARY Record 454;
      ApprovalManagement4PSConstr@1100529600 : Codeunit 11125349;
    BEGIN
      //**4PS.sn
      GetDelegatedApproverSelection(ApprovalEntry);
      //**4PS.en

      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          //ApprovalEntryToUpdate := ApprovalEntry; //**4PS.o
          ApprovalEntryToUpdate.COPY(ApprovalEntry);  //**4PS.n
      //  DelegateSelectedApprovalRequest(ApprovalEntryToUpdate,TRUE); //**4PS.o
          //**4PS.sn
          DelegateSelectedApprovalRequest(ApprovalEntryToUpdate,TRUE,DelegateSelection,DelegatedApproverID);
          IF NOT SkipCheckFourEyesApproval THEN
            ApprovalManagement4PSConstr.AddTmpApprovalEntry(ApprovalEntryToUpdate,TmpCheckApprovalEntry);
          //**4PS.en
        UNTIL ApprovalEntry.NEXT = 0;

        //**4PS.sn
        IF NOT SkipCheckFourEyesApproval THEN
          ApprovalManagement4PSConstr.CheckTmpApprovalEntry(TmpCheckApprovalEntry);
        //**4PS.en

        MESSAGE(ApprovalsDelegatedMsg);
      END;
    END;

    PROCEDURE DelegateApprovalRequestsWithoutMessage@1100528403(VAR ApprovalEntry@1000 : Record 454;VAR First@1100527550 : Boolean);
    VAR
      WorkflowResponseHandling4PS@1100527551 : Codeunit 11125351;
    BEGIN
      //**4PS
      GetDelegatedApproverSelection(ApprovalEntry);

      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          IF First THEN BEGIN
            DelegateSelectedApprovalRequest(ApprovalEntry,TRUE,DelegateSelection,DelegatedApproverID);
            First := FALSE;
          END ELSE
            WorkflowResponseHandling4PS.DelegateSelectedApprovalRequestForSecondApprovalLine(ApprovalEntry,TRUE,DelegateSelection,DelegatedApproverID);
            SendApprovalRequestFromApprovalEntryNoMessage(ApprovalEntry);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ApproveSelectedApprovalRequest@5(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntry2@1100528400 : Record 454;
      RecordID@1100528200 : RecordID;
      ApprovalManagement4PSConstr@1100528401 : Codeunit 11125349;
    BEGIN
      //**4PS.sn
      IF (ApprovalEntry."Approver Group Code" <> '') AND
         (ApprovalEntry.Status = ApprovalEntry.Status::Approved)
      THEN
        EXIT; // Approval Entry has already been approved by Approver of Approver group, nothing
              // needs to be done.
      //**4PS.en
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(ApproveOnlyOpenRequestsErr);

      //**4PS.so
      //IF ApprovalEntry."Approver ID" <> USERID THEN
      //  CheckUserAsApprovalAdministrator;
      //**4PS.eo
      //**4PS.sn
      RecordID :=  ApprovalEntry."Record ID to Approve";
      IF ApprovalEntry."Approver ID" <> USERID THEN BEGIN
        IF NOT CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
          IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry, RecordID) THEN
            ERROR(NoReqToApproveErr);
        ApprovalManagement4PSConstr.CreateAppvlCmtLine(
          ApprovalEntry."Workflow Step Instance ID", ApprovalEntry,
            COPYSTR(
              STRSUBSTNO(ApprovedByInsteadOf, ApprovalManagement4PSConstr.RemoveDomainName(USERID),ApprovalManagement4PSConstr.RemoveDomainName(ApprovalEntry."Approver ID")),
              1,MAXSTRLEN(ApprovalCommentLine.Comment)));
      END;
      //**4PS.en

      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.MODIFY(TRUE);
      //**4PS.sn
      IF ApprovalEntry."Approver Group Code" <> '' THEN BEGIN
        ApprovalEntry2.SETCURRENTKEY(
          "Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
        ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
        ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
        ApprovalEntry2.SETRANGE("Approver Group Code",ApprovalEntry."Approver Group Code");
        ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
        ApprovalEntry2.SETRANGE("Consent Rule Process",ApprovalEntry."Consent Rule Process");
        ApprovalEntry2.SETRANGE("Consent Rule Line No.",ApprovalEntry."Consent Rule Line No.");
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
        IF ApprovalEntry2.FINDSET THEN
          REPEAT
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Approved);
            ApprovalEntry2.MODIFY(TRUE);
          UNTIL ApprovalEntry2.NEXT = 0;
      END;
      //**4PS.en
      ApprovalEntry.CALCFIELDS("Pending Approvals"); //Todo tijdelijk
      OnApproveApprovalRequest(ApprovalEntry);
    END;

    PROCEDURE ApproveSelectedApprovalRequestInGroup@1100528402(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntry2@1100528400 : Record 454;
      RecordID@1100528200 : RecordID;
    BEGIN
      //**4PS.sn
      IF (ApprovalEntry."Approver Group Code" <> '') AND
         (ApprovalEntry.Status = ApprovalEntry.Status::Approved)
      THEN
        EXIT; // Approval Entry has already been approved by Approver of Approver group, nothing
              // needs to be done.
      //**4PS.en
      //**4PS.so
      //IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
      //  ERROR(ApproveOnlyOpenRequestsErr);
      //**4PS.eo
      //**4PS.sn
      RecordID := ApprovalEntry."Record ID to Approve";
      //**4PS.en
      IF ApprovalEntry."Approver ID" <> USERID THEN
      //**4PS.sn
        IF NOT CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
          IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry, RecordID) THEN
            ERROR(NoReqToApproveErr);
      //**4PS.en
      //  CheckUserAsApprovalAdministrator(ApprovalEntry); //**4PS.o

      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.MODIFY(TRUE);
      //**4PS.sn
      IF ApprovalEntry."Approver Group Code" <> '' THEN BEGIN
        ApprovalEntry2.SETCURRENTKEY(
          "Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
        ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
        ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
        ApprovalEntry2.SETRANGE("Approver Group Code",ApprovalEntry."Approver Group Code");
        ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
        ApprovalEntry2.SETRANGE("Consent Rule Process",ApprovalEntry."Consent Rule Process");
        ApprovalEntry2.SETRANGE("Consent Rule Line No.",ApprovalEntry."Consent Rule Line No.");
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
        IF ApprovalEntry2.FINDSET THEN
          REPEAT
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Approved);
            ApprovalEntry2.MODIFY(TRUE);
          UNTIL ApprovalEntry2.NEXT = 0;
      END;
      //**4PS.en
      //OnApproveApprovalRequest(ApprovalEntry); function called from delegate, new approvals are not generated yet. Then document is released
    END;

    LOCAL PROCEDURE RejectSelectedApprovalRequest@2(VAR ApprovalEntry@1000 : Record 454);
    VAR
      RecordID@1100528200 : RecordID;
      ApprovalEntry2@1100528201 : Record 454;
      HourAccounting@1100528202 : Record 11012038;
      SiteMngmntHoursHeader@1100528203 : Record 11012360;
      RecRef@1100528204 : RecordRef;
      ApprovalManagement4PSConstr@1100528400 : Codeunit 11125349;
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(RejectOnlyOpenRequestsErr);
      //**4PS.so
      //IF ApprovalEntry."Approver ID" <> USERID THEN
      //  CheckUserAsApprovalAdministrator;
      //**4PS.eo
      //**4PS.sn
      RecordID := ApprovalEntry."Record ID to Approve";
      //**4PS.en
      IF ApprovalEntry."Approver ID" <> USERID THEN
        IF NOT CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
          IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry, RecordID) THEN
            ERROR(NoReqToApproveErr);
      //**4PS.en
      //  CheckUserAsApprovalAdministrator(ApprovalEntry); //**4PS.o

      OnRejectApprovalRequest(ApprovalEntry);
      ApprovalEntry.GET(ApprovalEntry."Entry No.");
      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
      ApprovalEntry.MODIFY(TRUE);
      //**4PS.sn
      ApprovalManagement4PSConstr.CreateAppvlCmtLine(
        ApprovalEntry."Workflow Step Instance ID", ApprovalEntry,
        STRSUBSTNO(RejectedBy, ApprovalManagement4PSConstr.RemoveDomainName(USERID)));

      IF ApprovalEntry."Table ID" IN [DATABASE::"Hour Accounting",  DATABASE::"Site Mngmnt. Hours Header"] THEN BEGIN
        ApprovalEntry2.SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
        ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
        ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
        ApprovalEntry2.SETFILTER(Status,'%1|%2|%3', ApprovalEntry2.Status::Open, ApprovalEntry2.Status::Created, ApprovalEntry2.Status::Approved);
        IF ApprovalEntry2.FINDSET THEN
          REPEAT
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Rejected);
            ApprovalEntry2.MODIFY(TRUE);
          UNTIL ApprovalEntry2.NEXT = 0;
      //Put code her because microsoft has moved onrejectapprovalrequest before the status is set to rejected.
      //maybe introduce another event: onafterrejectapprovalrequest
        IF RecRef.GET(ApprovalEntry."Record ID to Approve") THEN BEGIN
          IF ApprovalEntry."Table ID" = DATABASE::"Hour Accounting" THEN BEGIN
            RecRef.SETTABLE(HourAccounting);
            HourAccounting.RejectLine(ApprovalEntry."Document Line No.")
           END;
          IF ApprovalEntry."Table ID" = DATABASE::"Site Mngmnt. Hours Header" THEN BEGIN
            RecRef.SETTABLE(SiteMngmntHoursHeader);
            SiteMngmntHoursHeader.RejectLine(ApprovalEntry."Document Line No.")
          END;
        END;
        IF ApprovalEntry."Table ID" IN [DATABASE::"Hour Accounting", DATABASE::"Site Mngmnt. Hours Header"] THEN BEGIN
          ApprovalEntry.CALCFIELDS("Pending Approvals");
          IF ApprovalEntry."Pending Approvals" = 0 THEN
            OnApproveApprovalRequest(ApprovalEntry);
        END;
      END ELSE BEGIN
        //**4PS.sn
        IF ApprovalEntry."Approver Group Code" <> '' THEN BEGIN
          ApprovalEntry2.SETCURRENTKEY(
            "Record ID to Approve","Workflow Step Instance ID","Sequence No.");
          ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
          ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
          ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
          ApprovalEntry2.SETRANGE("Approver Group Code",ApprovalEntry."Approver Group Code");
          ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
          ApprovalEntry2.SETRANGE("Consent Rule Process",ApprovalEntry."Consent Rule Process");
          ApprovalEntry2.SETRANGE("Consent Rule Line No.",ApprovalEntry."Consent Rule Line No.");
          ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
          IF ApprovalEntry2.FINDSET THEN
            REPEAT
              ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Rejected);
              ApprovalEntry2.MODIFY(TRUE);
            UNTIL ApprovalEntry2.NEXT = 0;
        END;
        //**4PS.en
      END;
      //**4PS.en
      ApprovalEntry.CALCFIELDS("Pending Approvals"); //Todo tijdelijk
    END;

    [External]
    PROCEDURE DelegateSelectedApprovalRequest@1(VAR ApprovalEntry@1000 : Record 454;CheckCurrentUser@1001 : Boolean;Selection@1100528400 : 'Cancel,ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';NewUserId@1100528402 : Code[50]);
    VAR
      ApprovalManagement4PSConstr@1100528401 : Codeunit 11125349;
      RecordID@1100528200 : RecordID;
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(DelegateOnlyOpenRequestsErr);

      IF CheckCurrentUser AND (NOT ApprovalEntry.CanCurrentUserEdit) THEN
        ERROR(NoPermissionToDelegateErr);

      //**4PS.sn
      CASE Selection OF
        Selection::ApproveAndDelegate:
          BEGIN
            //snew
            RecordID := ApprovalEntry."Record ID to Approve";
            IF ApprovalEntry."Approver ID" <> USERID THEN
              IF NOT CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
                IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry, RecordID) THEN
                  ERROR(NoPermissionToApproveAndDelegateErr);
            //enew
            ApprovalManagement4PSConstr.ApproveAndDelegate4PS(ApprovalEntry,NewUserId);
          END;
        Selection::DelegateAndSendBack:
          ApprovalManagement4PSConstr.DelegateAndSendBack4PS(ApprovalEntry,NewUserId);
        Selection::DelegateWithoutApproval:
          ApprovalManagement4PSConstr.DelegateWithoutApproval4PS(ApprovalEntry,NewUserId);
        ELSE
      //**4PS.en
          SubstituteUserIdForApprovalEntry(ApprovalEntry)
      END; //**4PS.n
    END;

    LOCAL PROCEDURE SubstituteUserIdForApprovalEntry@86(ApprovalEntry@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      ApprovalAdminUserSetup@1002 : Record 91;
      Substitute@1003 : Code[50];
    BEGIN
      IF NOT UserSetup.GET(ApprovalEntry."Approver ID") THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      Substitute := '';
      OnSubstituteUserIdForApprovalEntry(ApprovalEntry,Substitute);
      IF Substitute <> '' THEN BEGIN
        ApprovalEntry."Approver ID" := Substitute;
        ApprovalEntry.MODIFY(TRUE);
        OnDelegateApprovalRequest(ApprovalEntry);
        EXIT;
      END;

      IF UserSetup.Substitute = '' THEN
        IF UserSetup."Approver ID" = '' THEN BEGIN
          ApprovalAdminUserSetup.SETRANGE("Approval Administrator",TRUE);
          IF ApprovalAdminUserSetup.FINDFIRST THEN
            UserSetup.GET(ApprovalAdminUserSetup."User ID")
          ELSE
            ERROR(SubstituteNotFoundErr,UserSetup."User ID");
        END ELSE
          UserSetup.GET(UserSetup."Approver ID")
      ELSE
        UserSetup.GET(UserSetup.Substitute);

      ApprovalEntry."Approver ID" := UserSetup."User ID";
      ApprovalEntry.MODIFY(TRUE);
      OnDelegateApprovalRequest(ApprovalEntry);
    END;

    [External]
    PROCEDURE FindOpenApprovalEntryForCurrUser@43(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    VAR
      UserFilter@1100525000 : Text[1024];
      Approver@1100527550 : Record 11012229;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Approver ID",USERID);
      //ApprovalEntry.SETRANGE("Related to Change",FALSE); //4PS.o

      IF NOT ApprovalEntry.FINDFIRST THEN BEGIN
        UserFilter := GetApprovalSharingToUserFilter(USERID);
        IF UserFilter <> '' THEN
          ApprovalEntry.SETFILTER("Approver ID",USERID + '|' + UserFilter);
      END;
      //**4PS.sn
      IF Approver.GET(USERID) THEN
        IF Approver."Super Approver Purchase Orders" AND (RecordID.TABLENO = 38) THEN
          ApprovalEntry.SETRANGE("Approver ID");
      //**4PS.en
      EXIT(ApprovalEntry.FINDFIRST);
    END;

    [External]
    PROCEDURE FindApprovalEntryForCurrUser@101(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Approver ID",USERID);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE ShowPurchApprovalStatus@9(PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.FIND;

      CASE PurchaseHeader.Status OF
        PurchaseHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
        PurchaseHeader.Status::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(PurchaseHeader.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
        PurchaseHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowSalesApprovalStatus@26(SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.FIND;

      CASE SalesHeader.Status OF
        SalesHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
        SalesHeader.Status::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(SalesHeader.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
        SalesHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowApprovalStatus@107(RecId@1000 : RecordID;WorkflowInstanceId@1001 : GUID);
    BEGIN
      IF HasPendingApprovalEntriesForWorkflow(RecId,WorkflowInstanceId) THEN
        MESSAGE(PendingApprovalMsg)
      ELSE
        MESSAGE(RecHasBeenApprovedMsg,FORMAT(RecId,0,1));
    END;

    [External]
    PROCEDURE ApproveApprovalRequestsForRecord@186(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
          ApprovalEntry.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CancelApprovalRequestsForRecord@8(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Canceled);
          ApprovalEntry.MODIFY(TRUE);
          IF OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved] THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE RejectApprovalRequestsForRecord@7(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
      UserIdBuf@1100527550 : Code[50];
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
          ApprovalEntry.MODIFY(TRUE);
          IF (OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved]) AND
             (ApprovalEntry."Approver ID" <> USERID)
          THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
        ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Rejected);
        ApprovalEntry.FINDFIRST;
        IF ApprovalEntry."Approver ID" <> ApprovalEntry."Sender ID" THEN BEGIN
          //ApprovalEntry."Approver ID" := ApprovalEntry."Sender ID"; //**4PS.o
          //**4PS.sn
          UserIdBuf := ApprovalEntry."Sender ID";
          ApprovalEntry."Sender ID" := ApprovalEntry."Approver ID";
          ApprovalEntry."Approver ID" := UserIdBuf;
          //**4PS.sn
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        END;
      END;
    END;

    [External]
    PROCEDURE SendApprovalRequestFromRecord@33(RecRef@1004 : RecordRef;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalEntry2@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Record ID to Approve",Status,"Workflow Step Instance ID","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      //**4PS.sn
      ApprovalEntry.SETFILTER("Sequence No.", '<>%1', 0);
      IF ApprovalEntry.ISEMPTY THEN
        ApprovalEntry.SETRANGE("Sequence No.");
      //**4PS.en

      //** The goal of the next code is to set the status open, only for approval entries with the same or zero sequence no.
      IF ApprovalEntry.FINDFIRST THEN BEGIN
        ApprovalEntry2.COPYFILTERS(ApprovalEntry);
        //ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No."); //**4PS.o
        ApprovalEntry2.SETFILTER("Sequence No.", '%1|%2', 0, ApprovalEntry."Sequence No."); //**4PS.n
        IF ApprovalEntry2.FINDSET(TRUE) THEN
          REPEAT
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
            ApprovalEntry2.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
          UNTIL ApprovalEntry2.NEXT = 0;
        IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
          OnApproveApprovalRequest(ApprovalEntry);
        EXIT;
      END;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      IF ApprovalEntry.FINDLAST THEN
        OnApproveApprovalRequest(ApprovalEntry)
      ELSE
        ERROR(NoApprovalRequestsFoundErr);
    END;

    [External]
    PROCEDURE SendApprovalRequestFromApprovalEntry@41(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry2@1001 : Record 454;
      ApprovalEntry3@1003 : Record 454;
    BEGIN
      IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
        CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        EXIT;
      END;

      IF FindOpenApprovalEntriesForWorkflowStepInstance(ApprovalEntry,WorkflowStepInstance."Record ID") THEN
        EXIT;

      //**4PS.sn
      ApprovalEntry2.SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
      ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry2.ISEMPTY THEN
        EXIT
      ELSE
        ApprovalEntry2.RESET;
      //**4PS.en

      ApprovalEntry2.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);

      IF ApprovalEntry2.FINDFIRST THEN BEGIN
        ApprovalEntry3.COPYFILTERS(ApprovalEntry2);
        ApprovalEntry3.SETRANGE("Sequence No.",ApprovalEntry2."Sequence No.");
        IF ApprovalEntry3.FINDSET THEN
          REPEAT
            ApprovalEntry3.VALIDATE(Status,ApprovalEntry3.Status::Open);
            ApprovalEntry3.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry3,WorkflowStepInstance);
          UNTIL ApprovalEntry3.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE CreateApprovalRequests@6(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      ApprovalEntryArgument@1002 : Record 454;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,0,WorkflowStepInstance,ApprovalEntryArgument);

      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        CASE WorkflowStepArgument."Approver Type" OF
          WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
            CreateApprReqForApprTypeSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::Approver:
            CreateApprReqForApprTypeApprover(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::"Workflow User Group":
            CreateApprReqForApprTypeWorkflowUserGroup(WorkflowStepArgument,ApprovalEntryArgument);
        END;

      IF WorkflowStepArgument."Show Confirmation Message" THEN
        InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    [External]
    PROCEDURE CreateAndAutomaticallyApproveRequest@44(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntryArgument@1002 : Record 454;
      WorkflowStepArgument@1003 : Record 1523;
      ApprovalEntry@1100529900 : Record 454;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,0,WorkflowStepInstance,ApprovalEntryArgument);
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowStepArgument.INIT;

      CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);

      //**T007770.sn Check if status is approved. Because codeunit 6085722 reacts on insert of approval entry and resets status.
      ApprovalEntry.SETCURRENTKEY("Table ID","Record ID to Approve",Status,"Workflow Step Instance ID","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Open, ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Approver ID", USERID);
      ApprovalEntry.SETRANGE("Consent Rule Line No.",0);
      IF ApprovalEntry.FINDFIRST THEN BEGIN
        ApprovalEntry.Status := ApprovalEntry.Status::Approved;
        ApprovalEntry."Approved by" := USERID;
        ApprovalEntry.MODIFY(TRUE);
      END;
      //**T007770.en

      InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeSalespersPurchaser@32(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1002 : Record 454);
    BEGIN
      ApprovalEntryArgument.TESTFIELD("Salespers./Purch. Code");

      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
          END;
      END;

      OnAfterCreateApprReqForApprTypeSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeApprover@31(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForApprover(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
      END;

      OnAfterCreateApprReqForApprTypeApprover(WorkflowStepArgument,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeWorkflowUserGroup@49(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1004 : Record 91;
      WorkflowUserGroupMember@1006 : Record 1541;
      ApproverId@1003 : Code[50];
      SequenceNo@1002 : Integer;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        ERROR(UserIdNotInSetupErr,USERID);
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      WITH WorkflowUserGroupMember DO BEGIN
        SETCURRENTKEY("Workflow User Group Code","Sequence No.");
        SETRANGE("Workflow User Group Code",WorkflowStepArgument."Workflow User Group Code");
        OnBeforeFindWorkflowUserGroupMember(WorkflowUserGroupMember,WorkflowStepArgument);
        IF NOT FINDSET THEN
          ERROR(NoWFUserGroupMembersErr);

        REPEAT
          ApproverId := "User Name";
          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(WFUserGroupNotInSetupErr,ApproverId);
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo + "Sequence No.",ApproverId,WorkflowStepArgument);
        UNTIL NEXT = 0;
      END;

      OnAfterCreateApprReqForApprTypeWorkflowUserGroup(WorkflowStepArgument,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForChainOfApprovers@18(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,FALSE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverWithSufficientLimit@45(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,TRUE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverChain@46(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454;SufficientApproverOnly@1003 : Boolean);
    VAR
      ApprovalEntry@1001 : Record 454;
      UserSetup@1007 : Record 91;
      ApproverId@1002 : Code[50];
      SequenceNo@1006 : Integer;
      MaxCount@1004 : Integer;
      i@1005 : Integer;
    BEGIN
      ApproverId := USERID;

      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        SETRANGE(Status,Status::Created);
        IF FINDLAST THEN
          ApproverId := "Approver ID"
        ELSE
          IF (WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser") AND
             (WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver")
          THEN BEGIN
            FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);
            ApproverId := UserSetup."User ID";
          END;
      END;

      UserSetup.RESET;
      MaxCount := UserSetup.COUNT;

      IF NOT UserSetup.GET(ApproverId) THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      IF NOT IsSufficientApprover(UserSetup,ApprovalEntryArgument) THEN
        REPEAT
          i += 1;
          IF i > MaxCount THEN
            ERROR(ApproverChainErr);
          ApproverId := UserSetup."Approver ID";

          IF ApproverId = '' THEN
            ERROR(NoSuitableApproverFoundErr);

          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");

          // Approval Entry should not be created only when IsSufficientApprover is false and SufficientApproverOnly is true
          IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) OR (NOT SufficientApproverOnly) THEN BEGIN
            SequenceNo := GetLastSequenceNo(ApprovalEntryArgument) + 1;
            MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,ApproverId,WorkflowStepArgument);
          END;

        UNTIL IsSufficientApprover(UserSetup,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApprover@19(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1006 : Record 91;
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := USERID;

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF NOT UserSetup.GET(USERID) THEN
        ERROR(UserIdNotInSetupErr,UsrId);

      UsrId := UserSetup."Approver ID";
      IF NOT UserSetup.GET(UsrId) THEN BEGIN
        //IF NOT UserSetup."Approval Administrator" THEN //**4PS.o
        IF NOT (UserSetup."Approval Administrator" OR CheckUserAsSuperApprover(ApprovalEntryArgument."Document Type")) THEN //**4PS.n
          ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");
        UsrId := USERID;
      END;

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSalespersPurchaser@21(WorkflowStepArgument@1006 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);

      SequenceNo += 1;

      IF WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver" THEN BEGIN
        IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) THEN
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
      END ELSE
        MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
    END;

    [External]
    PROCEDURE CreateApprovalRequestForUser@22(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,USERID,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSpecificUser@118(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1006 : Record 91;
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := WorkflowStepArgument."Approver User ID";

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF NOT UserSetup.GET(UsrId) THEN
        ERROR(UserIdNotInSetupErr,UsrId);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    [External]
    PROCEDURE MakeApprovalEntry@23(ApprovalEntryArgument@1007 : Record 454;SequenceNo@1001 : Integer;ApproverId@1003 : Code[50];WorkflowStepArgument@1005 : Record 1523);
    VAR
      ApprovalEntry@1002 : Record 454;
      ApprovalEntry2@1100528200 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := USERID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        "Workflow Step Instance ID" := ApprovalEntryArgument."Workflow Step Instance ID";
        //**4PS.so
        //IF ApproverId = USERID THEN
        //  Status := Status::Approved
        //ELSE
        //  Status := Status::Created;
        //**4PS.eo
        //**4PS.sn
        Status := Status::Created;
        IF ApprovalEntryArgument."Consent Rule Line No." <> 0 THEN BEGIN
          IF AutoConsentUsed THEN BEGIN
            Status := Status::Approved;
            "Approved by" := USERID;
          END;
        END ELSE
          IF (ApproverId = USERID) AND ("Document Type" <> "Document Type"::"Hour Accounting") THEN BEGIN
            Status := Status::Approved;
            "Approved by" := USERID;
          END;
        //**4PS.en
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := USERID;
        "Due Date" := CALCDATE(WorkflowStepArgument."Due Date Formula",TODAY);

        CASE WorkflowStepArgument."Delegate After" OF
          WorkflowStepArgument."Delegate After"::Never:
            EVALUATE("Delegation Date Formula",'');
          WorkflowStepArgument."Delegate After"::"1 day":
            EVALUATE("Delegation Date Formula",'<1D>');
          WorkflowStepArgument."Delegate After"::"2 days":
            EVALUATE("Delegation Date Formula",'<2D>');
          WorkflowStepArgument."Delegate After"::"5 days":
            EVALUATE("Delegation Date Formula",'<5D>');
          ELSE
            EVALUATE("Delegation Date Formula",'');
        END;
        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";
        SetApproverType(WorkflowStepArgument,ApprovalEntry);
        SetLimitType(WorkflowStepArgument,ApprovalEntry);
        "Record ID to Approve" := ApprovalEntryArgument."Record ID to Approve";
        "Approval Code" := ApprovalEntryArgument."Approval Code";

        //**4PS.sn
        "Document Line No." := ApprovalEntryArgument."Document Line No.";
        "Consent Rule Process" := ApprovalEntryArgument."Consent Rule Process";
        "Consent Rule Line No." := ApprovalEntryArgument."Consent Rule Line No.";
        "Approver Group Code" := ApprovalEntryArgument."Approver Group Code";
        "Project No." := ApprovalEntryArgument."Project No.";
        "Service Order No." := ApprovalEntryArgument."Service Order No.";
        Element := ApprovalEntryArgument.Element;
        "Extension Contract" := ApprovalEntryArgument."Extension Contract";
        Department := ApprovalEntryArgument.Department;
        "Cost Object" := ApprovalEntryArgument."Cost Object";
        "Wage Component" := ApprovalEntryArgument."Wage Component";
        "Plant Company" := ApprovalEntryArgument."Plant Company";
        "Plant Type" := ApprovalEntryArgument."Plant Type";
        "Plant No." := ApprovalEntryArgument."Plant No.";
        "Supplying Company" := ApprovalEntryArgument."Supplying Company";
        "Receiving Company" := ApprovalEntryArgument."Receiving Company";
        Hours := ApprovalEntryArgument.Hours;
        Kilometers := ApprovalEntryArgument.Kilometers;
        "Cost Code" := ApprovalEntryArgument."Cost Code";
        "Plant Location" := ApprovalEntryArgument."Plant Location";
        Year := ApprovalEntryArgument.Year;
        Week:= ApprovalEntryArgument.Week;
        "Employee No." := ApprovalEntryArgument."Employee No.";
        "Due Date Document" := ApprovalEntryArgument."Due Date Document";
        "Vendor No." := ApprovalEntryArgument."Vendor No.";
        //**4PS.en

        OnBeforeApprovalEntryInsert(ApprovalEntry,ApprovalEntryArgument);
        ApprovalEntry2 := ApprovalEntry; //**4PS.n
        INSERT(TRUE);
        //**4PS.sn
        //Because DC CU6085927 changes Status in ONBeforeInsert table event on table 454 in some cases. this is not OK in 4PS Construct environment.
        Status := ApprovalEntry2.Status;
        MODIFY(TRUE);
        //**4PS.en
      END;
    END;

    [External]
    PROCEDURE CalcPurchaseDocAmount@24(PurchaseHeader@1002 : Record 38;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchaseLine@1009 : TEMPORARY Record 39;
      TotalPurchaseLine@1008 : Record 39;
      TotalPurchaseLineLCY@1007 : Record 39;
      PurchPost@1006 : Codeunit 90;
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      PurchaseHeader.CalcInvDiscForHeader;
      PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        PurchaseHeader,TempPurchaseLine,0,TotalPurchaseLine,TotalPurchaseLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchaseLine.Amount;
      ApprovalAmountLCY := TotalPurchaseLineLCY.Amount;
    END;

    [External]
    PROCEDURE CalcSalesDocAmount@82(SalesHeader@1000 : Record 36;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1002 : Decimal);
    VAR
      TempSalesLine@1009 : TEMPORARY Record 37;
      TotalSalesLine@1008 : Record 37;
      TotalSalesLineLCY@1007 : Record 37;
      SalesPost@1006 : Codeunit 80;
      TempAmount@1005 : ARRAY [5] OF Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      SalesHeader.CalcInvDiscForHeader;
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(
        SalesHeader,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
        TempAmount[1],VAtText,TempAmount[2],TempAmount[3],TempAmount[4]);
      ApprovalAmount := TotalSalesLine.Amount;
      ApprovalAmountLCY := TotalSalesLineLCY.Amount;
    END;

    LOCAL PROCEDURE PopulateApprovalEntryArgument@80(RecRef@1000 : RecordRef;LineNo@1100528202 : Integer;WorkflowStepInstance@1009 : Record 1504;VAR ApprovalEntryArgument@1001 : Record 454);
    VAR
      Customer@1006 : Record 18;
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1007 : Record 81;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1004 : Record 36;
      IncomingDocument@1010 : Record 130;
      ApprovalAmount@1002 : Decimal;
      ApprovalAmountLCY@1005 : Decimal;
      PurchInvHeader@1100528400 : Record 122;
      PurchInvLine@1100528401 : Record 123;
      RecRef2@1100528402 : RecordRef;
      ProjectPurchaseAction@1100528403 : Record 11012026;
      PurchaseLine@1100528405 : Record 39;
      PurchCrMemoHdr@1100528406 : Record 124;
      PurchCrMemoLine@1100528407 : Record 125;
      AdviceOrderLine@1100528409 : Record 11012055;
      HourAccounting@1100528404 : Record 11012038;
      HourAccountingLine@1100528204 : Record 11012039;
      SiteMngmntHoursHeader@1100528408 : Record 11012360;
      SiteMngmntHoursLine@1100528205 : Record 11012361;
      PurchaseRequisition@1100528200 : Record 11229330;
      PurchaseRequisitionLine@1100528201 : Record 11229331;
      SalesLine@1100528203 : Record 37;
      WorkFlowSetup4PSConstruct@1100528206 : Record 11229316;
      WageComponent@1100528207 : Record 11012014;
    BEGIN
      //**4PS.sn
      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            IF LineNo <> 0 THEN BEGIN
              PurchaseLine.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",LineNo);
              RecRef2.GETTABLE(PurchaseLine);
            END;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            RecRef.SETTABLE(PurchaseLine);
            LineNo := PurchaseLine."Line No.";
            PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
            RecRef.GETTABLE(PurchaseHeader);
            RecRef2.GETTABLE(PurchaseLine);
          END;
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            IF LineNo <> 0 THEN BEGIN
              PurchInvLine.GET(PurchInvHeader."No.", LineNo);
              RecRef2.GETTABLE(PurchInvLine);
            END;
          END;
        DATABASE::"Purch. Inv. Line":
          BEGIN
            RecRef.SETTABLE(PurchInvLine);
            LineNo := PurchInvLine."Line No.";
            PurchInvHeader.GET(PurchInvLine."Document No.");
            RecRef.GETTABLE(PurchInvHeader);
            RecRef2.GETTABLE(PurchInvLine);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHdr);
            IF LineNo <> 0 THEN BEGIN
              PurchCrMemoLine.GET(PurchCrMemoHdr."No.", LineNo);
              RecRef2.GETTABLE(PurchCrMemoLine);
            END;
          END;
        DATABASE::"Purch. Cr. Memo Line":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoLine);
            LineNo := PurchCrMemoLine."Line No.";
            PurchCrMemoHdr.GET(PurchCrMemoLine."Document No.");
            RecRef.GETTABLE(PurchCrMemoHdr);
            RecRef2.GETTABLE(PurchCrMemoLine);
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            IF LineNo <> 0 THEN BEGIN
              SalesLine.GET(SalesHeader."Document Type", SalesHeader."No.", LineNo);
              RecRef2.GETTABLE(SalesLine);
            END;
          END;
        DATABASE::"Sales Line":
          BEGIN
            RecRef.SETTABLE(SalesLine);
            LineNo := SalesLine."Line No.";
            SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
            RecRef.GETTABLE(SalesHeader);
            RecRef2.GETTABLE(SalesLine);
          END;
        DATABASE::Customer:
          BEGIN
            RecRef.SETTABLE(Customer);
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            RecRef.SETTABLE(GenJournalBatch);
          END;
        DATABASE::"Gen. Journal Line":
          BEGIN
            RecRef.SETTABLE(GenJournalLine);
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
          END;
        DATABASE::"Project Purchase Action":
          BEGIN
            RecRef.SETTABLE(ProjectPurchaseAction);
          END;
        DATABASE::"Advice Order Line":
          BEGIN
            RecRef.SETTABLE(AdviceOrderLine);
          END;
        DATABASE::"Purchase Requisition":
          BEGIN
            RecRef.SETTABLE(PurchaseRequisition);
            IF LineNo <> 0 THEN BEGIN
              PurchaseRequisitionLine.GET(PurchaseRequisition."No.", LineNo);
              RecRef2.GETTABLE(PurchaseRequisitionLine);
            END;
          END;
        DATABASE::"Purchase Requisition Line":
          BEGIN
            RecRef.SETTABLE(PurchaseRequisitionLine);
            LineNo := PurchaseRequisitionLine."Line No.";
            PurchaseRequisition.GET(PurchaseRequisitionLine."Purchase Requisition No.");
            RecRef.GETTABLE(PurchaseRequisition);
            RecRef2.GETTABLE(PurchaseRequisitionLine);
          END;
        DATABASE::"Hour Accounting":
          BEGIN
            RecRef.SETTABLE(HourAccounting);
            IF LineNo <> 0 THEN BEGIN
              HourAccountingLine.GET(HourAccounting.Year,HourAccounting.Week,HourAccounting."Employee No.", LineNo);
              RecRef2.GETTABLE(HourAccountingLine);
            END;
          END;
        DATABASE::"Hour Accounting Line":
          BEGIN
            RecRef.SETTABLE(HourAccountingLine);
            LineNo := HourAccountingLine."Line No.";
            HourAccounting.GET(HourAccountingLine.Year,HourAccountingLine.Week,HourAccountingLine."Employee No.");
            RecRef.GETTABLE(HourAccounting);
            RecRef2.GETTABLE(HourAccountingLine);
          END;
        DATABASE::"Site Mngmnt. Hours Header":
          BEGIN
            RecRef.SETTABLE(SiteMngmntHoursHeader);
            IF LineNo <> 0 THEN BEGIN
              SiteMngmntHoursLine.GET(SiteMngmntHoursHeader.Year,SiteMngmntHoursHeader.Week,
                SiteMngmntHoursHeader."Supplying Company",SiteMngmntHoursHeader."Employee No.", LineNo);
              RecRef2.GETTABLE(SiteMngmntHoursLine);
            END;
          END;
        DATABASE::"Site Mngmnt. Hours Line":
          BEGIN
            RecRef.SETTABLE(SiteMngmntHoursLine);
            LineNo := SiteMngmntHoursLine."Line No.";
            SiteMngmntHoursHeader.GET(SiteMngmntHoursLine.Year,SiteMngmntHoursLine.Week,
              SiteMngmntHoursLine."Supplying Company",SiteMngmntHoursLine."Employee No.");
            RecRef.GETTABLE(SiteMngmntHoursHeader);
            RecRef2.GETTABLE(SiteMngmntHoursLine);
          END;
      END;
      //**4PS.en

      ApprovalEntryArgument.INIT;
      ApprovalEntryArgument."Table ID" := RecRef.NUMBER;
      ApprovalEntryArgument."Record ID to Approve" := RecRef.RECORDID;
      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::" ";
      ApprovalEntryArgument."Approval Code" := WorkflowStepInstance."Workflow Code";
      ApprovalEntryArgument."Workflow Step Instance ID" := WorkflowStepInstance.ID;

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            //RecRef.SETTABLE(PurchaseHeader); 4PS.o
            IF NOT WorkFlowSetup4PSConstruct.GET THEN // Migrate to workflow
              WorkFlowSetup4PSConstruct.INIT;
            IF NOT WorkFlowSetup4PSConstruct."Migration Process" THEN
              CalcPurchaseDocAmount(PurchaseHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := PurchaseHeader."Document Type";
            ApprovalEntryArgument."Document No." := PurchaseHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchaseHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchaseHeader."Currency Code";
            //**4PS.sn
            IF LineNo <> 0 THEN BEGIN
              ApprovalEntryArgument."Document Line No." := PurchaseLine."Line No.";
              ApprovalEntryArgument.Amount := PurchaseLine.Amount;
              ApprovalEntryArgument."Amount (LCY)" := PurchaseLine."Amount (LCY)";
              ApprovalEntryArgument."Project No." := PurchaseLine."Job No.";
              ApprovalEntryArgument."Service Order No." := PurchaseLine."Service Order No.";

              ApprovalEntryArgument.Element := PurchaseLine.Element;
              ApprovalEntryArgument."Extension Contract" := PurchaseLine."Extension Contract";
              ApprovalEntryArgument."Plant Type" := PurchaseLine."Plant Type";
              ApprovalEntryArgument."Plant No." := PurchaseLine."Plant No.";
              ApprovalEntryArgument.Department := PurchaseLine."Shortcut Dimension 1 Code";
              ApprovalEntryArgument."Cost Object" := PurchaseLine."Shortcut Dimension 2 Code";
              ApprovalEntryArgument."Wage Component" := PurchaseLine."Wage Component";
              ApprovalEntryArgument."Receiving Company" := PurchaseLine."Receiving Company";
              ApprovalEntryArgument."Vendor No." := PurchaseLine."Buy-from Vendor No.";
              ApprovalEntryArgument."Due Date Document" := PurchaseHeader."Due Date";

            END ELSE BEGIN
              ApprovalEntryArgument."Project No." := PurchaseHeader."Job No.";
              ApprovalEntryArgument."Service Order No." := PurchaseHeader."Service Order No.";

              ApprovalEntryArgument.Department := PurchaseHeader."Shortcut Dimension 1 Code";
              ApprovalEntryArgument."Cost Object" := PurchaseHeader."Shortcut Dimension 2 Code";
              ApprovalEntryArgument."Vendor No." := PurchaseHeader."Buy-from Vendor No.";
              ApprovalEntryArgument."Due Date Document" := PurchaseHeader."Due Date";
            END;
            //**4PS.en
          END;
        //**4PS.sn
        DATABASE::"Purch. Inv. Header":
          BEGIN
            PurchInvHeader.CALCFIELDS(Amount, "Amount (LCY)");
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::Invoice;
            ApprovalEntryArgument."Document No." := PurchInvHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchInvHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := PurchInvHeader.Amount;;
            ApprovalEntryArgument."Amount (LCY)" := PurchInvHeader."Amount (LCY)";
            ApprovalEntryArgument."Currency Code" := PurchInvHeader."Currency Code";
            IF LineNo <> 0 THEN BEGIN
              ApprovalEntryArgument."Document Line No." := PurchInvLine."Line No.";
              IF PurchInvLine."Approval Entry" THEN
                ApprovalEntryArgument.Amount := PurchInvLine."Approved Amount"
              ELSE
                ApprovalEntryArgument.Amount := PurchInvLine.Amount;
              ApprovalEntryArgument."Amount (LCY)" := PurchInvLine."Amount (LCY)";
              ApprovalEntryArgument."Project No." := PurchInvLine."Job No.";
              ApprovalEntryArgument."Service Order No." := PurchInvLine."Service Order No.";

              ApprovalEntryArgument.Element := PurchInvLine.Element;
              ApprovalEntryArgument."Extension Contract" := PurchInvLine."Extension Contract";
              ApprovalEntryArgument."Plant Type" := PurchInvLine."Plant Type";
              ApprovalEntryArgument."Plant No." := PurchInvLine."Plant No.";
              ApprovalEntryArgument.Department := PurchInvLine."Shortcut Dimension 1 Code";
              ApprovalEntryArgument."Cost Object" := PurchInvLine."Shortcut Dimension 2 Code";
              ApprovalEntryArgument."Wage Component" := PurchInvLine."Wage Component";
              ApprovalEntryArgument."Receiving Company" := PurchInvLine."Receiving Company";
              ApprovalEntryArgument."Vendor No." := PurchInvLine."Buy-from Vendor No.";
              ApprovalEntryArgument."Due Date Document" := PurchInvHeader."Due Date";

            END ELSE BEGIN
              ApprovalEntryArgument."Project No." := PurchInvHeader."Job No.";
              ApprovalEntryArgument."Service Order No." := PurchInvHeader."Service Order No.";

              ApprovalEntryArgument.Department := PurchInvHeader."Shortcut Dimension 1 Code";
              ApprovalEntryArgument."Cost Object" := PurchInvHeader."Shortcut Dimension 2 Code";
              ApprovalEntryArgument."Vendor No." := PurchInvHeader."Buy-from Vendor No.";
              ApprovalEntryArgument."Due Date Document" := PurchInvHeader."Due Date";
            END;
          END;
          DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            PurchCrMemoHdr.CALCFIELDS(Amount, "Amount (LCY)");
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Credit Memo";
            ApprovalEntryArgument."Document No." := PurchCrMemoHdr."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchCrMemoHdr."Purchaser Code";
            ApprovalEntryArgument.Amount := PurchCrMemoHdr.Amount;;
            ApprovalEntryArgument."Amount (LCY)" := PurchCrMemoHdr."Amount (LCY)";
            ApprovalEntryArgument."Currency Code" := PurchCrMemoHdr."Currency Code";
            IF LineNo <> 0 THEN BEGIN
              ApprovalEntryArgument."Document Line No." := PurchCrMemoLine."Line No.";
              ApprovalEntryArgument.Amount := PurchCrMemoLine.Amount;;
              ApprovalEntryArgument."Amount (LCY)" := PurchCrMemoLine."Amount (LCY)";
              ApprovalEntryArgument."Project No." := PurchCrMemoLine."Job No.";
              ApprovalEntryArgument."Service Order No." := PurchCrMemoLine."Service Order No.";

              ApprovalEntryArgument.Element := PurchCrMemoLine.Element;
              ApprovalEntryArgument."Extension Contract" := PurchCrMemoLine."Extension Contract";
              ApprovalEntryArgument."Plant Type" := PurchCrMemoLine."Plant Type";
              ApprovalEntryArgument."Plant No." := PurchCrMemoLine."Plant No.";
              ApprovalEntryArgument.Department := PurchCrMemoLine."Shortcut Dimension 1 Code";
              ApprovalEntryArgument."Cost Object" := PurchCrMemoLine."Shortcut Dimension 2 Code";
              ApprovalEntryArgument."Wage Component" := PurchCrMemoLine."Wage Component";
              ApprovalEntryArgument."Receiving Company" := PurchCrMemoLine."Receiving Company";
              ApprovalEntryArgument."Vendor No." := PurchCrMemoLine."Buy-from Vendor No.";
              ApprovalEntryArgument."Due Date Document" := PurchCrMemoHdr."Due Date";

            END ELSE BEGIN
              ApprovalEntryArgument."Project No." := PurchCrMemoHdr."Job No.";
              ApprovalEntryArgument."Service Order No." := PurchCrMemoHdr."Service Order No.";

              ApprovalEntryArgument.Department := PurchCrMemoHdr."Shortcut Dimension 1 Code";
              ApprovalEntryArgument."Cost Object" := PurchCrMemoHdr."Shortcut Dimension 2 Code";
              ApprovalEntryArgument."Vendor No." := PurchCrMemoHdr."Buy-from Vendor No.";
              ApprovalEntryArgument."Due Date Document" := PurchCrMemoHdr."Due Date";
            END;
          END;
        //**4PS.en
        DATABASE::"Sales Header":
          BEGIN
            //RecRef.SETTABLE(SalesHeader); 4PS.o
            CalcSalesDocAmount(SalesHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := SalesHeader."Document Type";
            ApprovalEntryArgument."Document No." := SalesHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := SalesHeader."Salesperson Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := SalesHeader."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := GetAvailableCreditLimit(SalesHeader);
            //**4PS.sn
            ApprovalEntryArgument."Project No." := SalesHeader."Job No.";
            ApprovalEntryArgument."Service Order No." := SalesHeader."Service Order No.";

            ApprovalEntryArgument.Department := SalesHeader."Shortcut Dimension 1 Code";
            ApprovalEntryArgument."Cost Object" := SalesHeader."Shortcut Dimension 2 Code";

            //**4PS.en
          END;
        DATABASE::Customer:
          BEGIN
            //RecRef.SETTABLE(Customer); 4PS.o
            ApprovalEntryArgument."Salespers./Purch. Code" := Customer."Salesperson Code";
            ApprovalEntryArgument."Currency Code" := Customer."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := Customer.CalcAvailableCredit;
          END;
        DATABASE::"Gen. Journal Batch":
          RecRef.SETTABLE(GenJournalBatch);
        DATABASE::"Gen. Journal Line":
          BEGIN
            //RecRef.SETTABLE(GenJournalLine); 4PS.o
            ApprovalEntryArgument."Document Type" := GenJournalLine."Document Type";
            ApprovalEntryArgument."Document No." := GenJournalLine."Document No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := GenJournalLine."Salespers./Purch. Code";
            ApprovalEntryArgument.Amount := GenJournalLine.Amount;
            ApprovalEntryArgument."Amount (LCY)" := GenJournalLine."Amount (LCY)";
            ApprovalEntryArgument."Currency Code" := GenJournalLine."Currency Code";
            //**4PS.sn
            ApprovalEntryArgument."Project No." := GenJournalLine."Job No.";
            ApprovalEntryArgument."Service Order No." := GenJournalLine."Service Order No.";

            ApprovalEntryArgument.Element := GenJournalLine.Element;
            ApprovalEntryArgument."Extension Contract" := GenJournalLine."Extension Contract";
            ApprovalEntryArgument."Plant Type" := GenJournalLine."Plant Type";
            ApprovalEntryArgument."Plant No." := GenJournalLine."Plant No.";
            ApprovalEntryArgument.Department := GenJournalLine."Shortcut Dimension 1 Code";
            ApprovalEntryArgument."Cost Object" := GenJournalLine."Shortcut Dimension 2 Code";
            ApprovalEntryArgument."Wage Component" := GenJournalLine."Wage Component";
            ApprovalEntryArgument."Receiving Company" := GenJournalLine."Receiving Company";
            ApprovalEntryArgument."Supplying Company" := GenJournalLine."Supplying Company";

            //**4PS.en
          END;
        DATABASE::"Incoming Document":
          BEGIN
            //RecRef.SETTABLE(IncomingDocument);4PS.o
            ApprovalEntryArgument."Document No." := FORMAT(IncomingDocument."Entry No.");
          END;
        //**4PS.sn
        DATABASE::"Project Purchase Action":
          BEGIN
            ApprovalEntryArgument."Document No." := FORMAT(ProjectPurchaseAction.Code);
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Purchase Action";
            ApprovalEntryArgument."Project No." := ProjectPurchaseAction."Project No.";
            END;
        DATABASE::"Advice Order Line":
          BEGIN
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Advice Order";
            ApprovalEntryArgument."Project No." := AdviceOrderLine."Project No.";
            ApprovalEntryArgument."Service Order No." := AdviceOrderLine."Service Order No.";
            ApprovalEntryArgument."Document Line No." := AdviceOrderLine."Line No.";
            ApprovalEntryArgument.Element := AdviceOrderLine.Element;
            ApprovalEntryArgument."Extension Contract" := AdviceOrderLine."Extension Contract";
            ApprovalEntryArgument."Plant Type" := AdviceOrderLine."Plant Type";
            ApprovalEntryArgument.Department := AdviceOrderLine."Global Dimension 1 Code";
            ApprovalEntryArgument."Cost Object" := AdviceOrderLine."Cost Object";
            ApprovalEntryArgument."Amount (LCY)" := AdviceOrderLine."Amount (LCY)";
            ApprovalEntryArgument.Amount := AdviceOrderLine."Amount (FCY)";


          END;
          DATABASE::"Purchase Requisition":
          BEGIN
            RecRef.SETTABLE(PurchaseRequisition);
            PurchaseRequisition.CALCFIELDS("Requisition Amount (LCY)", "Requisition Amount (FCY)");
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Purchase Requisition" ;
            ApprovalEntryArgument."Document No." := PurchaseRequisition."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchaseRequisition."Purchaser Code";
            IF LineNo <> 0 THEN BEGIN
              ApprovalEntryArgument."Document Line No." := PurchaseRequisitionLine."Line No.";
              ApprovalEntryArgument.Amount := PurchaseRequisitionLine."Amount (FCY)";
              ApprovalEntryArgument."Amount (LCY)" := PurchaseRequisitionLine."Amount (LCY)";
              ApprovalEntryArgument."Currency Code" := PurchaseRequisitionLine."Currency Code";
              ApprovalEntryArgument."Project No." :=  PurchaseRequisitionLine."Project No.";

              ApprovalEntryArgument.Element := PurchaseRequisitionLine.Element;
              ApprovalEntryArgument."Extension Contract" := PurchaseRequisitionLine."Extension Contract";
              ApprovalEntryArgument."Plant Type" := PurchaseRequisitionLine."Plant Type";
              ApprovalEntryArgument."Plant No." := PurchaseRequisitionLine."Plant No.";
              ApprovalEntryArgument."Cost Object" := PurchaseRequisitionLine."Cost Object";

            END ELSE BEGIN
              ApprovalEntryArgument.Amount := PurchaseRequisition."Requisition Amount (FCY)";
              ApprovalEntryArgument."Amount (LCY)" := PurchaseRequisition."Requisition Amount (LCY)";
              ApprovalEntryArgument."Project No." := PurchaseRequisition."Project No.";
            END;
          END;
        DATABASE::"Hour Accounting":
          BEGIN
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Hour Accounting";
            IF LineNo <> 0 THEN BEGIN
              ApprovalEntryArgument."Project No." := HourAccountingLine."Project No.";
              ApprovalEntryArgument."Service Order No." := HourAccountingLine."Service Order No.";

              ApprovalEntryArgument.Element := HourAccountingLine.Element;
              ApprovalEntryArgument."Extension Contract" := HourAccountingLine."Extension Contract";
              ApprovalEntryArgument."Plant Type" := HourAccountingLine."Plant Type";
              ApprovalEntryArgument."Plant No." := HourAccountingLine."Plant No.";
              ApprovalEntryArgument.Department := HourAccountingLine."Department Code";
              ApprovalEntryArgument."Cost Object" := HourAccountingLine."Cost Object";
              ApprovalEntryArgument."Wage Component" := HourAccountingLine."Wage Component";
              ApprovalEntryArgument."Receiving Company" := HourAccountingLine."Receiving Company";
              ApprovalEntryArgument."Supplying Company" := HourAccountingLine."Supplying Company";
              HourAccountingLine.CALCFIELDS("Component Type");
              IF HourAccountingLine."Component Type" = HourAccountingLine."Component Type"::Hours THEN
                  ApprovalEntryArgument.Hours := HourAccountingLine."Total Line";
              IF HourAccountingLine."Component Type" = HourAccountingLine."Component Type"::Expenses THEN BEGIN
                IF WageComponent.GET(HourAccountingLine."Wage Component") THEN;
                IF WageComponent."Kilometer Expense" THEN BEGIN
                  ApprovalEntryArgument.Kilometers := HourAccountingLine.Quantity;
                END ELSE BEGIN
                  ApprovalEntryArgument."Amount (LCY)" := HourAccountingLine."Amount (LCY)";
                  ApprovalEntryArgument.Amount := HourAccountingLine.Amount;
                END;
              END;
              ApprovalEntryArgument.Year := HourAccountingLine.Year;
              ApprovalEntryArgument.Week := HourAccountingLine.Week;
              ApprovalEntryArgument."Employee No." := HourAccountingLine."Employee No.";
              ApprovalEntryArgument."Cost Code" := HourAccountingLine."Cost Code";
              ApprovalEntryArgument."Resource Req. Receiv. Company" := HourAccountingLine."Resource Req. Receiv. Company";
              ApprovalEntryArgument."Resource Request No." := HourAccountingLine."Resource Request No.";
              ApprovalEntryArgument."Plant Location" := HourAccountingLine."Plant Location";
            END;
          END;
        DATABASE::"Site Mngmnt. Hours Header":
          BEGIN
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Site Mgt HourAccounting";
            IF LineNo <> 0 THEN BEGIN
              IF SiteMngmntHoursLine.Type = SiteMngmntHoursLine.Type::Project THEN
                ApprovalEntryArgument."Project No." := SiteMngmntHoursLine."Object No.";
              IF SiteMngmntHoursLine.Type = SiteMngmntHoursLine.Type::Service THEN
                ApprovalEntryArgument."Service Order No." := SiteMngmntHoursLine."Object No.";

              ApprovalEntryArgument.Element := SiteMngmntHoursLine.Element;
              ApprovalEntryArgument."Extension Contract" := SiteMngmntHoursLine."Extension Contract";
              ApprovalEntryArgument."Plant Type" := SiteMngmntHoursLine."Plant Type";
              ApprovalEntryArgument."Plant No." := SiteMngmntHoursLine."Plant No.";
              ApprovalEntryArgument.Department := SiteMngmntHoursLine."Department Code";
              ApprovalEntryArgument."Cost Object" := SiteMngmntHoursLine."Cost Object";
              ApprovalEntryArgument."Wage Component" := SiteMngmntHoursLine."Wage Component";
              ApprovalEntryArgument."Receiving Company" := SiteMngmntHoursLine."Receiving Company";
              ApprovalEntryArgument."Supplying Company" := SiteMngmntHoursLine."Supplying Company";
              ApprovalEntryArgument."Plant Company" := SiteMngmntHoursLine."Plant Company";
              IF SiteMngmntHoursLine."Component Type" = SiteMngmntHoursLine."Component Type"::Hours THEN
                ApprovalEntryArgument.Hours := SiteMngmntHoursLine."Total Line";
              IF SiteMngmntHoursLine."Component Type" = SiteMngmntHoursLine."Component Type"::Expenses THEN BEGIN
                ApprovalEntryArgument.Amount := SiteMngmntHoursLine."Total Line";
              END;
              IF SiteMngmntHoursLine."Component Type" = SiteMngmntHoursLine."Component Type"::Kilometers THEN
                ApprovalEntryArgument.Kilometers := SiteMngmntHoursLine."Total Line";

              ApprovalEntryArgument.Year := SiteMngmntHoursLine.Year;
              ApprovalEntryArgument.Week :=SiteMngmntHoursLine.Week;
              ApprovalEntryArgument."Employee No." := SiteMngmntHoursLine."Employee No.";
              IF SiteMngmntHoursLine.Type = SiteMngmntHoursLine.Type::Indirect THEN
                ApprovalEntryArgument."Cost Code" := SiteMngmntHoursLine."Object No.";
              //IF SiteMngmntHoursLine.Type = SiteMngmntHoursLine.Type::Resoource Request THEN
              //  ApprovalEntryArgument."Resource Request No." := SiteMngmntHoursLine."Resource Request No.";
              IF SiteMngmntHoursLine.Type = SiteMngmntHoursLine.Type::Plant THEN
                ApprovalEntryArgument."Plant Location" := SiteMngmntHoursLine."Object No.";

            END;
          END;
          //**4PS.en
        ELSE
          OnPopulateApprovalEntryArgument(RecRef,ApprovalEntryArgument,WorkflowStepInstance);
      END;
    END;

    [External]
    PROCEDURE CreateApprovalEntryNotification@50(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      NotificationEntry@1003 : Record 1511;
      UserSetup@1004 : Record 91;
    BEGIN
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        EXIT;

      IF WorkflowStepArgument."Notification User ID" = '' THEN BEGIN
        IF NOT UserSetup.GET(ApprovalEntry."Approver ID") THEN
          EXIT;
        WorkflowStepArgument.VALIDATE("Notification User ID",ApprovalEntry."Approver ID");
      END;

      ApprovalEntry.RESET;
      NotificationEntry.CreateNewEntry(
        NotificationEntry.Type::Approval,WorkflowStepArgument."Notification User ID",
        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",ApprovalEntry."Sender ID");
    END;

    LOCAL PROCEDURE SetApproverType@71(WorkflowStepArgument@1001 : Record 1523;VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Type" OF
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Sales Pers./Purchaser";
        WorkflowStepArgument."Approver Type"::Approver:
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::Approver;
        WorkflowStepArgument."Approver Type"::"Workflow User Group":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Workflow User Group";
        //**4PS.sn
        WorkflowStepArgument."Approver Type"::"Consent Rules":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Consent Rules";
        //**4PS.en
      END;
    END;

    LOCAL PROCEDURE SetLimitType@81(WorkflowStepArgument@1000 : Record 1523;VAR ApprovalEntry@1001 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"Approval Limits";
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
      END;

      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" THEN
        ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
    END;

    LOCAL PROCEDURE IsSufficientPurchApprover@12(UserSetup@1000 : Record 91;DocumentType@1003 : Option;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      CASE DocumentType OF
        PurchaseHeader."Document Type"::Quote:
          IF UserSetup."Unlimited Request Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Request Amount Approval Limit") AND (UserSetup."Request Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
        ELSE
          IF UserSetup."Unlimited Purchase Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Purchase Amount Approval Limit") AND (UserSetup."Purchase Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientSalesApprover@13(UserSetup@1000 : Record 91;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      IF UserSetup."Unlimited Sales Approval" OR
         ((ApprovalAmountLCY <= UserSetup."Sales Amount Approval Limit") AND (UserSetup."Sales Amount Approval Limit" <> 0))
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientGenJournalLineApprover@89(UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454) : Boolean;
    VAR
      GenJournalLine@1003 : Record 81;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GET(ApprovalEntryArgument."Record ID to Approve");
      RecRef.SETTABLE(GenJournalLine);

      IF GenJournalLine.IsForPurchase THEN
        EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));

      IF GenJournalLine.IsForSales THEN
        EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE IsSufficientApprover@20(UserSetup@1001 : Record 91;ApprovalEntryArgument@1003 : Record 454) : Boolean;
    VAR
      IsSufficient@1000 : Boolean;
    BEGIN
      CASE ApprovalEntryArgument."Table ID" OF
        DATABASE::"Purchase Header":
          EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Sales Header":
          EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Gen. Journal Batch":
          MESSAGE(ApporvalChainIsUnsupportedMsg,FORMAT(ApprovalEntryArgument."Record ID to Approve"));
        DATABASE::"Gen. Journal Line":
          EXIT(IsSufficientGenJournalLineApprover(UserSetup,ApprovalEntryArgument));
      END;

      IsSufficient := TRUE;
      OnAfterIsSufficientApprover(UserSetup,ApprovalEntryArgument,IsSufficient);
      EXIT(IsSufficient);
    END;

    LOCAL PROCEDURE GetAvailableCreditLimit@25(SalesHeader@1000 : Record 36) : Decimal;
    BEGIN
      EXIT(SalesHeader.CheckAvailableCreditLimit);
    END;

    [External]
    PROCEDURE PrePostApprovalCheckSales@38(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF IsSalesHeaderPendingApproval(SalesHeader) THEN
        ERROR(SalesPrePostCheckErr,SalesHeader."Document Type",SalesHeader."No.");

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE PrePostApprovalCheckPurch@39(VAR PurchaseHeader@1001 : Record 38) : Boolean;
    VAR
      WorkFlowSetup4PSConstruct@1100528500 : Record 11229316;
      ApprovalEntry@1100528501 : Record 454;
    BEGIN
      //**4PS.sn
      WorkFlowSetup4PSConstruct.GET;
      IF WorkFlowSetup4PSConstruct."Appr. P. Hdr. And P. I. Hdr." AND (PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Invoice) THEN BEGIN   //** Procedure: 'Advice Request' is active
      //  IF PurchaseHeader."Approval Code" = '' THEN BEGIN
          //This part may lead to errors, startof. //if problems when this check is done before the approval entry is set to approved. in that case remove this check.
          ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
          ApprovalEntry.SETRANGE("Document Type",PurchaseHeader."Document Type");
          ApprovalEntry.SETRANGE("Document No.",PurchaseHeader."No.");
          ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
          IF ApprovalEntry.ISEMPTY THEN
          //This part may lead to errors, endof
            EXIT(TRUE);
      //  END;
      END;
      //**4PS.en

      IF IsPurchaseHeaderPendingApproval(PurchaseHeader) THEN
        ERROR(PurchPrePostCheckErr,PurchaseHeader."Document Type",PurchaseHeader."No.");

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE IsIncomingDocApprovalsWorkflowEnabled@102(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(IncomingDocument,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode));
    END;

    [External]
    PROCEDURE IsPurchaseApprovalsWorkflowEnabled@59(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(PurchaseHeader,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode));
    END;

    [External]
    PROCEDURE IsPurchaseHeaderPendingApproval@113(VAR PurchaseHeader@1000 : Record 38) : Boolean;
    BEGIN
      IF PurchaseHeader.Status <> PurchaseHeader.Status::Open THEN
        EXIT(FALSE);

      EXIT(IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader));
    END;

    [External]
    PROCEDURE IsSalesApprovalsWorkflowEnabled@17(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode));
    END;

    [External]
    PROCEDURE IsSalesHeaderPendingApproval@119(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF SalesHeader.Status <> SalesHeader.Status::Open THEN
        EXIT(FALSE);

      EXIT(IsSalesApprovalsWorkflowEnabled(SalesHeader));
    END;

    [External]
    PROCEDURE IsOverdueNotificationsWorkflowEnabled@42() : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      EXIT(WorkflowManagement.WorkflowExists(ApprovalEntry,ApprovalEntry,
          WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode));
    END;

    [External]
    PROCEDURE IsGeneralJournalBatchApprovalsWorkflowEnabled@70(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode));
    END;

    [External]
    PROCEDURE IsGeneralJournalLineApprovalsWorkflowEnabled@72(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode));
    END;

    [External]
    PROCEDURE CheckPurchaseApprovalPossible@77(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      IF NOT IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      IF NOT PurchaseHeader.PurchLinesExist THEN
        ERROR(NothingToApproveErr);

      OnAfterCheckPurchaseApprovalPossible(PurchaseHeader);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckIncomingDocApprovalsWorkflowEnabled@192(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      IF NOT IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckSalesApprovalPossible@155(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      IF NOT IsSalesApprovalsWorkflowEnabled(SalesHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      IF NOT SalesHeader.SalesLinesExist THEN
        ERROR(NothingToApproveErr);

      OnAfterCheckSalesApprovalPossible(SalesHeader);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckCustomerApprovalsWorkflowEnabled@11(VAR Customer@1002 : Record 18) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Customer,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Customer,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckVendorApprovalsWorkflowEnabled@83(VAR Vendor@1002 : Record 23) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Vendor,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Vendor,WorkflowEventHandling.RunWorkflowOnVendorChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckItemApprovalsWorkflowEnabled@84(VAR Item@1002 : Record 27) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Item,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Item,WorkflowEventHandling.RunWorkflowOnItemChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckGeneralJournalBatchApprovalsWorkflowEnabled@74(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckGeneralJournalLineApprovalsWorkflowEnabled@73(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE DeleteApprovalEntry@35(Variant@1001 : Variant);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      DeleteApprovalEntries(RecRef.RECORDID);
    END;

    [EventSubscriber(Table,81,OnMoveGenJournalLine)]
    [External]
    PROCEDURE PostApprovalEntriesMoveGenJournalLine@91(VAR Sender@1000 : Record 81;ToRecordID@1002 : RecordID);
    BEGIN
      PostApprovalEntries(Sender.RECORDID,ToRecordID,Sender."Document No.");
    END;

    [EventSubscriber(Table,81,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalLine@94(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,232,OnMoveGenJournalBatch)]
    [External]
    PROCEDURE PostApprovalEntriesMoveGenJournalBatch@36(VAR Sender@1000 : Record 232;ToRecordID@1001 : RecordID);
    VAR
      RecordRestrictionMgt@1002 : Codeunit 1550;
    BEGIN
      IF PostApprovalEntries(Sender.RECORDID,ToRecordID,'') THEN BEGIN
        RecordRestrictionMgt.AllowRecordUsage(Sender);
        DeleteApprovalEntries(Sender.RECORDID);
      END;
    END;

    [EventSubscriber(Table,232,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalBatch@98(VAR Rec@1000 : Record 232;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteCustomer@99(VAR Rec@1000 : Record 18;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteVendor@112(VAR Rec@1000 : Record 23;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,27,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteItem@109(VAR Rec@1000 : Record 27;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [External]
    PROCEDURE PostApprovalEntries@105(ApprovedRecordID@1003 : RecordID;PostedRecordID@1001 : RecordID;PostedDocNo@1002 : Code[20]) : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
      PostedApprovalEntry@1004 : Record 456;
    BEGIN
      ApprovalEntry.SETAUTOCALCFIELDS("Pending Approvals","Number of Approved Requests","Number of Rejected Requests");
      ApprovalEntry.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF NOT ApprovalEntry.FINDSET THEN
        EXIT(FALSE);

      REPEAT
        PostedApprovalEntry.INIT;
        PostedApprovalEntry.TRANSFERFIELDS(ApprovalEntry);
        PostedApprovalEntry."Number of Approved Requests" := ApprovalEntry."Number of Approved Requests";
        PostedApprovalEntry."Number of Rejected Requests" := ApprovalEntry."Number of Rejected Requests";
        PostedApprovalEntry."Table ID" := PostedRecordID.TABLENO;
        PostedApprovalEntry."Document No." := PostedDocNo;
        PostedApprovalEntry."Posted Record ID" := PostedRecordID;
        PostedApprovalEntry."Entry No." := 0;
        OnBeforePostedApprovalEntryInsert(PostedApprovalEntry,ApprovalEntry);
        PostedApprovalEntry.INSERT(TRUE);
      UNTIL ApprovalEntry.NEXT = 0;

      PostApprovalCommentLines(ApprovedRecordID,PostedRecordID,PostedDocNo);
      EXIT(TRUE);
    END;

    PROCEDURE PostApprovalCommentLines@90(ApprovedRecordID@1000 : RecordID;PostedRecordID@1003 : RecordID;PostedDocNo@1004 : Code[20]);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      PostedApprovalCommentLine@1002 : Record 457;
    BEGIN
      //4PS made GLOBAL
      ApprovalCommentLine.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF ApprovalCommentLine.FINDSET THEN
        REPEAT
          PostedApprovalCommentLine.INIT;
          PostedApprovalCommentLine.TRANSFERFIELDS(ApprovalCommentLine);
          PostedApprovalCommentLine."Entry No." := 0;
          PostedApprovalCommentLine."Table ID" := PostedRecordID.TABLENO;
          PostedApprovalCommentLine."Document No." := PostedDocNo;
          PostedApprovalCommentLine."Posted Record ID" := PostedRecordID;
          PostedApprovalCommentLine.INSERT(TRUE);
        UNTIL ApprovalCommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ShowPostedApprovalEntries@60(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1001 : Record 456;
    BEGIN
      PostedApprovalEntry.FILTERGROUP(2);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Posted Approval Entries",PostedApprovalEntry);
    END;

    [External]
    PROCEDURE DeletePostedApprovalEntries@40(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1003 : Record 456;
    BEGIN
      PostedApprovalEntry.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      IF NOT PostedApprovalEntry.ISEMPTY THEN
        PostedApprovalEntry.DELETEALL;
      DeletePostedApprovalCommentLines(PostedRecordID);
    END;

    LOCAL PROCEDURE DeletePostedApprovalCommentLines@37(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalCommentLine@1003 : Record 457;
    BEGIN
      PostedApprovalCommentLine.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalCommentLine.SETRANGE("Posted Record ID",PostedRecordID);
      IF NOT PostedApprovalCommentLine.ISEMPTY THEN
        PostedApprovalCommentLine.DELETEALL;
    END;

    [External]
    PROCEDURE SetStatusToPendingApproval@47(VAR Variant@1000 : Variant);
    VAR
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1003 : Record 38;
      IncomingDocument@1004 : Record 130;
      ProjectPurchaseAction@1100528200 : Record 11012026;
      AdviceOrderLine@1100528201 : Record 11012055;
      PurchaseRequisition@1100528202 : Record 11229330;
      SiteMngmntHoursHeader@1100528203 : Record 11012360;
      HourAccounting@1100528204 : Record 11012038;
      RecRef@1001 : RecordRef;
      IsHandled@1005 : Boolean;
      UserSetup@1100528205 : Record 91;
      PhasePlanMgt@1100528207 : Codeunit 11012242;
      PhaseAction@1100528206 : 'Consent,Print,ICMStatus,Word,Confirm,OrderStatus,QuoteStatus,Manual,E-mail,GS1,GS1Posting';
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No."); //**4PS.n
            PurchaseHeader.VALIDATE(Status,PurchaseHeader.Status::"Pending Approval");
            PurchaseHeader.MODIFY(TRUE);
            //**4PS.sn
            IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order THEN BEGIN
              PhasePlanMgt.FinishPhase(PurchaseHeader,PhaseAction::OrderStatus,1);
              PurchaseHeader.GET(PurchaseHeader."Document Type", PurchaseHeader."No.");
            END;
            //**4PS.en
            Variant := PurchaseHeader;
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.VALIDATE(Status,SalesHeader.Status::"Pending Approval");
            SalesHeader.MODIFY(TRUE);
            Variant := SalesHeader;
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
            IncomingDocument.VALIDATE(Status,IncomingDocument.Status::"Pending Approval");
            IncomingDocument.MODIFY(TRUE);
            Variant := IncomingDocument;
          END;
        //**4PS.sn
        DATABASE::"Project Purchase Action":
          BEGIN
            RecRef.SETTABLE(ProjectPurchaseAction);
            ProjectPurchaseAction.VALIDATE(Status,ProjectPurchaseAction.Status::Applied);
            ProjectPurchaseAction.MODIFY(TRUE);
            Variant := ProjectPurchaseAction;
          END;
        DATABASE::"Purchase Requisition":
          BEGIN
            RecRef.SETTABLE(PurchaseRequisition);
            PurchaseRequisition.VALIDATE(Status,PurchaseRequisition.Status::Released);
            PurchaseRequisition.MODIFY(TRUE);
            Variant := PurchaseRequisition;
          END;
        DATABASE::"Advice Order Line":
          BEGIN
            RecRef.SETTABLE(AdviceOrderLine);
            AdviceOrderLine."Process Status" := AdviceOrderLine."Process Status"::"Pending Approval";
            AdviceOrderLine.CheckStatusAndElementMandatory;
            AdviceOrderLine.CheckVendBlocked;  //db, 07-05-15: C017950
            AdviceOrderLine.MODIFY(TRUE);
            Variant := AdviceOrderLine;
          END;
        DATABASE::"Site Mngmnt. Hours Header":
          BEGIN
            RecRef.SETTABLE(SiteMngmntHoursHeader);
            SiteMngmntHoursHeader.PendingApprovalLines;
            SiteMngmntHoursHeader.GET(SiteMngmntHoursHeader.Year, SiteMngmntHoursHeader.Week, SiteMngmntHoursHeader."Supplying Company", SiteMngmntHoursHeader."Employee No.");
            Variant := SiteMngmntHoursHeader;
          END;
        DATABASE::"Hour Accounting":
          BEGIN
            RecRef.SETTABLE(HourAccounting);
            IF UserSetup.GET(USERID) THEN;
            HourAccounting.PendingApprovalLines;
            HourAccounting.GET(HourAccounting.Year, HourAccounting.Week, HourAccounting."Employee No.");
            Variant := HourAccounting;
          END;
        //**4PS.en
        ELSE BEGIN
          IsHandled := FALSE;
          OnSetStatusToPendingApproval(RecRef,Variant,IsHandled);
          IF NOT IsHandled THEN
            ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
        END;
      END;
    END;

    [External]
    PROCEDURE InformUserOnStatusChange@110(Variant@1001 : Variant;WorkflowInstanceId@1000 : GUID);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          ShowPurchApprovalStatus(Variant);
        DATABASE::"Sales Header":
          ShowSalesApprovalStatus(Variant);
        ELSE
          ShowApprovalStatus(RecRef.RECORDID,WorkflowInstanceId);
      END;
    END;

    [External]
    PROCEDURE GetApprovalComment@53(Variant@1000 : Variant);
    VAR
      BlankGUID@1001 : GUID;
    BEGIN
      ShowApprovalComments(Variant,BlankGUID);
    END;

    [External]
    PROCEDURE GetApprovalCommentForWorkflowStepInstanceID@30(Variant@1000 : Variant;WorkflowStepInstanceID@1001 : GUID);
    BEGIN
      ShowApprovalComments(Variant,WorkflowStepInstanceID);
    END;

    LOCAL PROCEDURE ShowApprovalComments@95(Variant@1002 : Variant;WorkflowStepInstanceID@1000 : GUID);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      ApprovalEntry@1004 : Record 454;
      ApprovalComments@1003 : Page 660;
      RecRef@1005 : RecordRef;
      RecRef2@1100527300 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            //**4PS.sn
            IF RecRef.GETFILTERS <> '' THEN BEGIN
              IF SkipOpenSecondPageForRejectedLines(RecRef) THEN
                EXIT;
              RecRef2.GETTABLE(Variant);
              IF RecRef2.COUNT > 1 THEN
                ApprovalComments.SetSelectedLines(RecRef2);
            END;
            //**4PS.en
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
            //**4Ps.sn
            IF ApprovalEntry."Document Line No." <> 0 THEN
              ApprovalCommentLine.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
            //**4PS.en
          END;
        DATABASE::"Purchase Header":
          BEGIN
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            //FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);  //**4PS.o
            FindOpenApprovalEntry(ApprovalEntry,RecRef.RECORDID); //**4PS.n
          END;
        DATABASE::"Sales Header":
          BEGIN
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            //FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);  //**4PS.o
            FindOpenApprovalEntry(ApprovalEntry,RecRef.RECORDID); //**4PS.n
          END;
        ELSE BEGIN
          ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          //FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);  //**4PS.o
          FindOpenApprovalEntry(ApprovalEntry,RecRef.RECORDID); //**4PS.n
        END;
      END;

      IF ISNULLGUID(WorkflowStepInstanceID) AND (NOT ISNULLGUID(ApprovalEntry."Workflow Step Instance ID")) THEN
        WorkflowStepInstanceID := ApprovalEntry."Workflow Step Instance ID";

      ApprovalComments.SETTABLEVIEW(ApprovalCommentLine);
      ApprovalComments.SetUpLine(ApprovalEntry); //**4PS.n C040353
      ApprovalComments.SetWorkflowStepInstanceID(WorkflowStepInstanceID);
      ApprovalComments.RUN;
    END;

    [External]
    PROCEDURE HasOpenApprovalEntriesForCurrentUser@14(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      EXIT(FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID));
    END;

    [External]
    PROCEDURE HasOpenApprovalEntries@154(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      //ApprovalEntry.SETRANGE("Related to Change",FALSE); //4PS.o
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasOpenOrPendingApprovalEntries@115(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      //ApprovalEntry.SETRANGE("Related to Change",FALSE); //4PS.o
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasApprovalEntries@15(RecordID@1001 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      //ApprovalEntry.SETRANGE("Related to Change",FALSE); //4PS.o
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE HasPendingApprovalEntriesForWorkflow@156(RecId@1000 : RecordID;WorkflowInstanceId@1002 : GUID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETFILTER("Workflow Step Instance ID",WorkflowInstanceId);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasAnyOpenJournalLineApprovalEntries@187(JournalTemplateName@1000 : Code[20];JournalBatchName@1003 : Code[20]) : Boolean;
    VAR
      GenJournalLine@1001 : Record 81;
      ApprovalEntry@1002 : Record 454;
      GenJournalLineRecRef@1008 : RecordRef;
      GenJournalLineRecordID@1006 : RecordID;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      IF ApprovalEntry.ISEMPTY THEN
        EXIT(FALSE);

      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      IF GenJournalLine.ISEMPTY THEN
        EXIT(FALSE);

      IF GenJournalLine.COUNT < ApprovalEntry.COUNT THEN BEGIN
        GenJournalLine.FINDSET;
        REPEAT
          IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
            EXIT(TRUE);
        UNTIL GenJournalLine.NEXT = 0;
      END ELSE BEGIN
        ApprovalEntry.FINDSET;
        REPEAT
          GenJournalLineRecordID := ApprovalEntry."Record ID to Approve";
          GenJournalLineRecRef := GenJournalLineRecordID.GETRECORD;
          GenJournalLineRecRef.SETTABLE(GenJournalLine);
          IF (GenJournalLine."Journal Template Name" = JournalTemplateName) AND
             (GenJournalLine."Journal Batch Name" = JournalBatchName)
          THEN
            EXIT(TRUE);
        UNTIL ApprovalEntry.NEXT = 0;
      END;

      EXIT(FALSE)
    END;

    [External]
    PROCEDURE TrySendJournalBatchApprovalRequest@54(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
      IF HasOpenApprovalEntries(GenJournalBatch.RECORDID) OR
         HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
      THEN
        ERROR(PendingJournalBatchApprovalExistsErr);
      OnSendGeneralJournalBatchForApproval(GenJournalBatch);
    END;

    [External]
    PROCEDURE TrySendJournalLineApprovalRequests@183(VAR GenJournalLine@1000 : Record 81);
    VAR
      LinesSent@1001 : Integer;
    BEGIN
      IF GenJournalLine.COUNT = 1 THEN
        CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);

      REPEAT
        IF WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
             WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) AND
           NOT HasOpenApprovalEntries(GenJournalLine.RECORDID)
        THEN BEGIN
          OnSendGeneralJournalLineForApproval(GenJournalLine);
          LinesSent += 1;
        END;
      UNTIL GenJournalLine.NEXT = 0;

      CASE LinesSent OF
        0:
          MESSAGE(NoApprovalsSentMsg);
        GenJournalLine.COUNT:
          MESSAGE(PendingApprovalForSelectedLinesMsg);
        ELSE
          MESSAGE(PendingApprovalForSomeSelectedLinesMsg);
      END;
    END;

    [External]
    PROCEDURE TryCancelJournalBatchApprovalRequest@189(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      WorkflowWebhookManagement@1002 : Codeunit 1543;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch);
      WorkflowWebhookManagement.FindAndCancel(GenJournalBatch.RECORDID);
    END;

    [External]
    PROCEDURE TryCancelJournalLineApprovalRequests@88(VAR GenJournalLine@1000 : Record 81);
    VAR
      WorkflowWebhookManagement@1001 : Codeunit 1543;
    BEGIN
      REPEAT
        IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
          OnCancelGeneralJournalLineApprovalRequest(GenJournalLine);
        WorkflowWebhookManagement.FindAndCancel(GenJournalLine.RECORDID);
      UNTIL GenJournalLine.NEXT = 0;
      MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
    END;

    [External]
    PROCEDURE ShowJournalApprovalEntries@55(VAR GenJournalLine@1000 : Record 81);
    VAR
      ApprovalEntry@1002 : Record 454;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);

      ApprovalEntry.SETFILTER("Table ID",'%1|%2',DATABASE::"Gen. Journal Batch",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETFILTER("Record ID to Approve",'%1|%2',GenJournalBatch.RECORDID,GenJournalLine.RECORDID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      PAGE.RUN(PAGE::"Approval Entries",ApprovalEntry);
    END;

    LOCAL PROCEDURE GetGeneralJournalBatch@87(VAR GenJournalBatch@1000 : Record 232;VAR GenJournalLine@1001 : Record 81);
    BEGIN
      IF NOT GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name") THEN
        GenJournalBatch.GET(GenJournalLine.GETFILTER("Journal Template Name"),GenJournalLine.GETFILTER("Journal Batch Name"));
    END;

    [EventSubscriber(Codeunit,1535,OnRenameRecordInApprovalRequest)]
    [External]
    PROCEDURE RenameApprovalEntries@79(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",OldRecordId);
      IF NOT ApprovalEntry.ISEMPTY THEN
        ApprovalEntry.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
      ChangeApprovalComments(OldRecordId,NewRecordId);
    END;

    LOCAL PROCEDURE ChangeApprovalComments@85(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalCommentLine@1002 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Record ID to Approve",OldRecordId);
      IF NOT ApprovalCommentLine.ISEMPTY THEN
        ApprovalCommentLine.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
    END;

    [EventSubscriber(Codeunit,1535,OnDeleteRecordInApprovalRequest)]
    [External]
    PROCEDURE DeleteApprovalEntries@93(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordIDToApprove);
      IF NOT ApprovalEntry.ISEMPTY THEN
        ApprovalEntry.DELETEALL(TRUE) ;
      DeleteApprovalCommentLines(RecordIDToApprove);
    END;

    [External]
    PROCEDURE DeleteApprovalCommentLines@92(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalCommentLine@1001 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",RecordIDToApprove);
      IF NOT ApprovalCommentLine.ISEMPTY THEN
        ApprovalCommentLine.DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE CopyApprovalEntryQuoteToOrder@66(FromRecID@1006 : RecordID;ToDocNo@1007 : Code[20];ToRecID@1008 : RecordID);
    VAR
      FromApprovalEntry@1000 : Record 454;
      ToApprovalEntry@1001 : Record 454;
      FromApprovalCommentLine@1002 : Record 455;
      ToApprovalCommentLine@1003 : Record 455;
      LastEntryNo@1004 : Integer;
    BEGIN
      FromApprovalEntry.SETRANGE("Table ID",FromRecID.TABLENO);
      FromApprovalEntry.SETRANGE("Record ID to Approve",FromRecID);
      IF FromApprovalEntry.FINDSET THEN BEGIN
        ToApprovalEntry.FINDLAST;
        LastEntryNo := ToApprovalEntry."Entry No.";
        REPEAT
          ToApprovalEntry := FromApprovalEntry;
          ToApprovalEntry."Entry No." := LastEntryNo + 1;
          ToApprovalEntry."Document Type" := ToApprovalEntry."Document Type"::Order;
          ToApprovalEntry."Document No." := ToDocNo;
          ToApprovalEntry."Record ID to Approve" := ToRecID;
          LastEntryNo += 1;
          ToApprovalEntry.INSERT;
        UNTIL FromApprovalEntry.NEXT = 0;

        FromApprovalCommentLine.SETRANGE("Table ID",FromRecID.TABLENO);
        FromApprovalCommentLine.SETRANGE("Record ID to Approve",FromRecID);
        IF FromApprovalCommentLine.FINDSET THEN BEGIN
          ToApprovalCommentLine.FINDLAST;
          LastEntryNo := ToApprovalCommentLine."Entry No.";
          REPEAT
            ToApprovalCommentLine := FromApprovalCommentLine;
            ToApprovalCommentLine."Entry No." := LastEntryNo + 1;
            ToApprovalCommentLine."Document Type" := ToApprovalCommentLine."Document Type"::Order;
            ToApprovalCommentLine."Document No." := ToDocNo;
            ToApprovalCommentLine."Record ID to Approve" := ToRecID;
            ToApprovalCommentLine.INSERT;
            LastEntryNo += 1;
          UNTIL FromApprovalCommentLine.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE GetLastSequenceNo@16(ApprovalEntryArgument@1000 : Record 454) : Integer;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        IF FINDLAST THEN
          EXIT("Sequence No.");
      END;
      EXIT(0);
    END;

    [External]
    PROCEDURE OpenApprovalEntriesPage@75(RecId@1000 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecId.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      //ApprovalEntry.SETRANGE("Related to Change",FALSE); //4PS.o
      PAGE.RUNMODAL(PAGE::"Approval Entries",ApprovalEntry);
    END;

    [External]
    PROCEDURE CanCancelApprovalForRecord@106(RecID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
      UserSetup@1002 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT(FALSE);

      ApprovalEntry.SETRANGE("Table ID",RecID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      //ApprovalEntry.SETRANGE("Related to Change",FALSE); //4PS.o

      //IF NOT UserSetup."Approval Administrator" THEN //**4PS.o
      //**4PS.sn
      IF ApprovalEntry.FINDFIRST THEN
        IF UserSetup."Approval Administrator" OR CheckUserAsSuperApprover(ApprovalEntry."Document Type") THEN
          EXIT(TRUE);
      //**4PS.en
      ApprovalEntry.SETRANGE("Sender ID",USERID);
      EXIT(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE FindUserSetupBySalesPurchCode@114(VAR UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454);
    BEGIN
      IF ApprovalEntryArgument."Salespers./Purch. Code" <> '' THEN BEGIN
        UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
        UserSetup.SETRANGE("Salespers./Purch. Code",ApprovalEntryArgument."Salespers./Purch. Code");
        IF NOT UserSetup.FINDFIRST THEN
          ERROR(
            PurchaserUserNotFoundErr,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
            UserSetup."Salespers./Purch. Code");
        EXIT;
      END;
    END;

    LOCAL PROCEDURE CheckUserAsApprovalAdministrator@116(ApprovalEntry@1002 : Record 454);
    VAR
      UserSetup@1000 : Record 91;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckUserAsApprovalAdministrator(ApprovalEntry,IsHandled);
      IF IsHandled THEN
        EXIT;

      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Approval Administrator");
    END;

    LOCAL PROCEDURE FindApprovedApprovalEntryForWorkflowUserGroup@122(VAR ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1005 : Record 1504) : Boolean;
    VAR
      WorkflowStepArgument@1001 : Record 1523;
      WorkflowResponseHandling@1003 : Codeunit 1521;
      WorkflowInstance@1004 : Query 1501;
    BEGIN
      WorkflowStepInstance.SETRANGE("Function Name",WorkflowResponseHandling.CreateApprovalRequestsCode);
      WorkflowStepInstance.SETRANGE("Record ID",WorkflowStepInstance."Record ID");
      WorkflowStepInstance.SETRANGE("Workflow Code",WorkflowStepInstance."Workflow Code");
      WorkflowStepInstance.SETRANGE(Type,WorkflowInstance.Type::Response);
      WorkflowStepInstance.SETRANGE(Status,WorkflowInstance.Status::Completed);
      IF WorkflowStepInstance.FINDSET THEN
        REPEAT
          IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
            IF WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN BEGIN
              ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
              EXIT(ApprovalEntry.FINDLAST);
            END;
        UNTIL WorkflowStepInstance.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindOpenApprovalEntriesForWorkflowStepInstance@117(ApprovalEntry@1001 : Record 454;WorkflowStepInstanceRecID@1002 : RecordID) : Boolean;
    VAR
      ApprovalEntry2@1000 : Record 454;
    BEGIN
      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" THEN
        ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETFILTER("Record ID to Approve",'%1|%2',WorkflowStepInstanceRecID,ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
      ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
      //**4PS.sn
      ApprovalEntry2.SETRANGE("Document Line No.", ApprovalEntry."Document Line No.");
      //**4PS.en
      EXIT(NOT ApprovalEntry2.ISEMPTY);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckSalesApprovalPossible@127(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckPurchaseApprovalPossible@128(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateApprReqForApprTypeWorkflowUserGroup@120(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateApprReqForApprTypeSalespersPurchaser@121(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateApprReqForApprTypeApprover@123(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsSufficientApprover@124(UserSetup@1001 : Record 91;ApprovalEntryArgument@1000 : Record 454;VAR IsSufficient@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckUserAsApprovalAdministrator@129(ApprovalEntry@1000 : Record 454;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeApprovalEntryInsert@125(VAR ApprovalEntry@1000 : Record 454;ApprovalEntryArgument@1001 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindWorkflowUserGroupMember@134(VAR WorkflowUserGroupMember@1000 : Record 1541;WorkflowStepArgument@1001 : Record 1523);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedApprovalEntryInsert@139(VAR PostedApprovalEntry@1000 : Record 456;ApprovalEntry@1001 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSetStatusToPendingApproval@126(RecRef@1000 : RecordRef;VAR Variant@1001 : Variant;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    PROCEDURE CheckUserAsSuperApprover@1100525006(ApprovalEntryDocumentType@1100527350 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, ,,,,,,,,,,,,,,,,,,,Advice Order,Purchase Action,Purchase Requisition,,,,Hour Accounting,Site Mgt HourAccounting') : Boolean;
    VAR
      Approver@1000 : Record 11012229;
    BEGIN
      //**4PS
      IF NOT Approver.GET(USERID) THEN
        CLEAR(Approver);

      CASE ApprovalEntryDocumentType OF
        ApprovalEntryDocumentType::"Hour Accounting",
        ApprovalEntryDocumentType::"Site Mgt HourAccounting":
          EXIT(Approver."Super Approver Hours");
        ApprovalEntryDocumentType::Invoice,
        ApprovalEntryDocumentType::"Credit Memo":
          EXIT(Approver."Sup. Approver Purch. Invoices");
        ELSE
          EXIT(Approver."Super Approver Purchase Orders");
      END;
    END;

    PROCEDURE OpenApprovalEntryPurchInv@1100528206(PurchInvHeader@1000 : Record 122) : Boolean;
    VAR
      ApprovalEntry@1011 : Record 454;
    BEGIN
      //**4PS
      WITH ApprovalEntry DO BEGIN
        SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
        SETRANGE("Document No.",PurchInvHeader."No.");
        SETFILTER(Status, '%1|%2',Status::Created,Status::Open);
        EXIT(NOT ISEMPTY);
      END;
    END;

    PROCEDURE OpenApprovalEntryPurchCrm@1100528208(PurchCrMHeader@1000 : Record 124) : Boolean;
    VAR
      ApprovalEntry@1011 : Record 454;
    BEGIN
      //**4PS
      WITH ApprovalEntry DO BEGIN
        SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        SETRANGE("Document Type",ApprovalEntry."Document Type"::"Credit Memo");
        SETRANGE("Document No.",PurchCrMHeader."No.");
        SETFILTER(Status, '%1|%2',Status::Created,Status::Open);
        EXIT(NOT ISEMPTY);
      END;
    END;

    PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    VAR
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF NOT DCSetupRead THEN BEGIN
        IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentCaptureSetup) THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    PROCEDURE GetApprovalSharingToUserFilter@161024014(_UserId@161024013 : Code[50]) FilterString : Text[1024];
    VAR
      ApprovalSharingWorkflow@161024012 : Record 11229350;
    BEGIN
      //**4PS
      IF NOT FilterApprovalSharingToUser(ApprovalSharingWorkflow,_UserId) THEN
        EXIT('XXXXXXXXX');

      IF ApprovalSharingWorkflow.FINDSET THEN
        REPEAT
          IF FilterString = '' THEN
            FilterString := ApprovalSharingWorkflow."Owner User ID"
          ELSE
            FilterString := FilterString + '|' + ApprovalSharingWorkflow."Owner User ID"
        UNTIL ApprovalSharingWorkflow.NEXT = 0;
    END;

    PROCEDURE FilterApprovalSharingToUser@161024012(VAR ApprovalSharingWorkflow@161024012 : Record 11229350;_UserId@161024013 : Code[50]) : Boolean;
    BEGIN
      //**4PS
      ApprovalSharingWorkflow.RESET;
      ApprovalSharingWorkflow.SETCURRENTKEY("Shared to User ID");
      ApprovalSharingWorkflow.SETRANGE("Shared to User ID",_UserId);
      ApprovalSharingWorkflow.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharingWorkflow.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharingWorkflow.FINDFIRST);
    END;

    PROCEDURE InsertApprovalEntryForConsentRule@1100528400(RecRef@1100528404 : RecordRef;LineNo@1100528203 : Integer;WorkflowStepInstance@1100528400 : Record 1504;ConsentRule@1100528403 : Record 11012227;Type@1100528202 : ' ,Project,Service Order';TypeNo@1100528201 : Code[20]);
    VAR
      WorkflowStepArgument@1100528401 : Record 1523;
      ApprovalEntryArgument@1100528405 : Record 454;
      ApprovalEntry@1100528406 : Record 454;
      ApproverGroupMember@1100528407 : Record 11012232;
      SequenceNo@1100528402 : Integer;
      ConsentManagement@1100528200 : Codeunit 11012132;
    BEGIN
      //**4PS
      PopulateApprovalEntryArgument(RecRef,LineNo,WorkflowStepInstance,ApprovalEntryArgument);
      ApprovalEntryArgument."Consent Rule Process" := ConsentRule.Process;
      ApprovalEntryArgument."Consent Rule Line No." := ConsentRule."Line No.";
      ApprovalEntryArgument."Approver Group Code" := ConsentRule."Approver Group Code";

      ApprovalEntry.SETRANGE("Table ID", ApprovalEntryArgument."Table ID");
      ApprovalEntry.SETRANGE("Document Type", ApprovalEntryArgument."Document Type");
      ApprovalEntry.SETRANGE("Document No.", ApprovalEntryArgument."Document No.");
      ApprovalEntry.SETRANGE("Document Line No.", ApprovalEntryArgument."Document Line No.");
      ApprovalEntry.SETRANGE("Record ID to Approve", ApprovalEntryArgument."Record ID to Approve");
      ApprovalEntry.SETRANGE("Approval Code", ApprovalEntryArgument."Approval Code");
      ApprovalEntry.SETRANGE("Workflow Step Instance ID", ApprovalEntryArgument."Workflow Step Instance ID");
      IF ConsentRule."Approver Group Code" = '' THEN
        ApprovalEntry.SETRANGE("Approver ID", ConsentRule.Approver)
      ELSE
        ApprovalEntry.SETRANGE("Approver Group Code", ConsentRule."Approver Group Code");
      ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Open, ApprovalEntry.Status::Created);
      IF NOT ApprovalEntry.FINDFIRST THEN
        IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN BEGIN
          SequenceNo := ConsentRule."Consent Level";
          AutoConsentUsed := ConsentManagement.CurrentUserCanConsentThisLine(ConsentRule,Type,TypeNo);
          // Not required anymore?: WorkflowStepArgument.TESTFIELD("Approver Type", WorkflowStepArgument."Approver Type"::"Consent Rules");
          IF ConsentRule."Approver Group Code" = '' THEN
            MakeApprovalEntry(
              ApprovalEntryArgument, SequenceNo, ConsentRule.Approver, WorkflowStepArgument)
          ELSE BEGIN
            ApproverGroupMember.SETRANGE("Approver Group Code", ConsentRule."Approver Group Code");
            IF ApproverGroupMember.FINDSET THEN
              REPEAT
                MakeApprovalEntry(
                  ApprovalEntryArgument, SequenceNo, ApproverGroupMember."Approver User ID",
                  WorkflowStepArgument);
              UNTIL ApproverGroupMember.NEXT = 0;
          END;
          AutoConsentUsed := FALSE;
        END;
    END;

    PROCEDURE InsertApprovalEntryForHourConsentRule@1100528410(RecRef@1100528404 : RecordRef;WorkflowStepInstance@1100528400 : Record 1504;HourConsentRule@1100528403 : Record 11229805;LineNo@1100528408 : Integer;Type@1100528202 : ' ,Project,Service Order';TypeNo@1100528201 : Code[20]);
    VAR
      WorkflowStepArgument@1100528401 : Record 1523;
      ApprovalEntryArgument@1100528405 : Record 454;
      ApprovalEntry@1100528406 : Record 454;
      ApproverGroupMember@1100528407 : Record 11012232;
      HoursConsentManagement@1100528200 : Codeunit 11012206;
      SequenceNo@1100528402 : Integer;
    BEGIN
      //**4PS
      PopulateApprovalEntryArgument(RecRef,LineNo,WorkflowStepInstance,ApprovalEntryArgument);
      ApprovalEntryArgument."Document Line No." := LineNo;
      ApprovalEntryArgument."Consent Rule Process" := ApprovalEntryArgument."Consent Rule Process"::"Hour Accounting";
      ApprovalEntryArgument."Consent Rule Line No." := HourConsentRule."Line No.";
      ApprovalEntryArgument."Approver Group Code" := HourConsentRule."Approver Group Code";

      ApprovalEntry.SETRANGE("Table ID", ApprovalEntryArgument."Table ID");
      ApprovalEntry.SETRANGE("Document Type", ApprovalEntryArgument."Document Type");
      ApprovalEntry.SETRANGE("Record ID to Approve", ApprovalEntryArgument."Record ID to Approve");
      ApprovalEntry.SETRANGE("Approval Code", ApprovalEntryArgument."Approval Code");
      ApprovalEntry.SETRANGE("Workflow Step Instance ID", ApprovalEntryArgument."Workflow Step Instance ID");
      ApprovalEntry.SETRANGE("Document Line No.", LineNo);

      IF HourConsentRule."Approver Group Code" = '' THEN
        ApprovalEntry.SETRANGE("Approver ID", HourConsentRule.Approver)
      ELSE
        ApprovalEntry.SETRANGE("Approver Group Code", HourConsentRule."Approver Group Code");

      ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Open, ApprovalEntry.Status::Created);
      IF NOT ApprovalEntry.FINDFIRST THEN
        IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN BEGIN
          SequenceNo := HourConsentRule."Consent Level";
          AutoConsentUsed := HoursConsentManagement.CurrentUserCanConsentThisLine(HourConsentRule,Type,TypeNo);
          IF HourConsentRule."Approver Group Code" = '' THEN
            MakeApprovalEntry(
              ApprovalEntryArgument, SequenceNo, HourConsentRule.Approver, WorkflowStepArgument)
          ELSE BEGIN
            ApproverGroupMember.SETRANGE("Approver Group Code", HourConsentRule."Approver Group Code");
            IF ApproverGroupMember.FINDSET THEN
              REPEAT
                MakeApprovalEntry(
                  ApprovalEntryArgument, SequenceNo, ApproverGroupMember."Approver User ID",
                  WorkflowStepArgument);
              UNTIL ApproverGroupMember.NEXT = 0;
          END;
          AutoConsentUsed := FALSE;
        END;
    END;

    PROCEDURE LineHasOpenOrPendingApprovalEntries@1100528200(RecordID@1000 : RecordID;LineNo@1100528200 : Integer) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Document Line No.", LineNo);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE LineHasOpenApprovalEntriesForCurrentUser@1100528405(RecordID@1000 : RecordID;LineNo@1100528400 : Integer) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      //**4PS
      EXIT(LineFindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID,LineNo));
    END;

    PROCEDURE LineHasOpenApprovalEntries@1100528404(RecordID@1000 : RecordID;LineNo@1100528400 : Integer) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Document Line No.", LineNo);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE LineFindOpenApprovalEntryForCurrUser@1100528406(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID;LineNo@1100528400 : Integer) : Boolean;
    VAR
      UserFilter@1100525000 : Text[1024];
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Document Line No.", LineNo);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Approver ID",USERID);

      IF NOT ApprovalEntry.FINDFIRST THEN BEGIN
        UserFilter := GetApprovalSharingToUserFilter(USERID);
        IF UserFilter <> '' THEN
          ApprovalEntry.SETFILTER("Approver ID",USERID + '|' + UserFilter);
      END;

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    PROCEDURE LineFindLastRejectedApprovalEntry@1100528201(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID;LineNo@1100528400 : Integer) : Boolean;
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Document Line No.", LineNo);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Rejected);
      EXIT(ApprovalEntry.FINDLAST);
    END;

    [TryFunction]
    PROCEDURE LineApproveRecordApprovalRequest@1100528409(RecordID@1000 : RecordID;LineNo@1100528400 : Integer);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      //**4PS
      IF NOT LineFindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID, LineNo) THEN
        ERROR(NoReqToApproveErr);

      ApprovalEntry.SETRECFILTER;
      ApproveApprovalRequests(ApprovalEntry);
    END;

    [TryFunction]
    PROCEDURE LineRejectRecordApprovalRequest@1100528408(RecordID@1000 : RecordID;LineNo@1100528400 : Integer);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      //**4PS
      IF NOT LineFindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID, LineNo) THEN
        ERROR(NoReqToRejectErr);

      ApprovalEntry.SETRECFILTER;
      RejectApprovalRequests(ApprovalEntry);
    END;

    [TryFunction]
    PROCEDURE LineDelegateRecordApprovalRequest@1100528407(RecordID@1000 : RecordID;LineNo@1100528400 : Integer);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      //**4PS
      IF NOT LineFindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID, LineNo) THEN
        ERROR(NoReqToDelegateErr);

      ApprovalEntry.SETRECFILTER;
      DelegateApprovalRequests(ApprovalEntry);
    END;

    LOCAL PROCEDURE GetDelegatedApproverSelection@1100528500(VAR ApprovalEntry@1100525000 : Record 454);
    VAR
      Approver@1100525001 : Record 11012229;
    BEGIN
      //**4PS
      IF IsDelegatedSelectionMade THEN
        EXIT;

      DelegateSelection := 0;
      DelegatedApproverID := '';
      IF DelegateMethod4PS(ApprovalEntry) THEN BEGIN
        DelegateSelection := STRMENU(DelegateMethodSelect);

        IF DelegateSelection = DelegateSelection::Cancel THEN
          ERROR('');

        IF PAGE.RUNMODAL(0,Approver) <> ACTION::LookupOK THEN
          ERROR('');

        DelegatedApproverID := Approver."User ID";
      END;

      IsDelegatedSelectionMade := TRUE;
    END;

    LOCAL PROCEDURE DelegateMethod4PS@1100525000(VAR ApprovalEntry@1100525000 : Record 454) : Boolean;
    VAR
      WorkflowResponseHandling4PS@1100525001 : Codeunit 11125351;
      WorkflowStepInstance@1100525002 : Record 1504;
    BEGIN
      //**4PS
      IF ApprovalEntry.FINDFIRST THEN BEGIN
        WorkflowStepInstance.SETRANGE(ID,ApprovalEntry."Workflow Step Instance ID");
        WorkflowStepInstance.SETFILTER(
          "Function Name", '%1|%2|%3',
          WorkflowResponseHandling4PS.ApproveAndDelegateRequest4PSCode(),
        WorkflowResponseHandling4PS.DelegateWithoutApprovalRequest4PSCode(),
        WorkflowResponseHandling4PS.DelegateAndSendBackRequest4PSCode());
        EXIT(NOT WorkflowStepInstance.ISEMPTY);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE DeleteApprovalEntries4PS@1100527001(RecordIDToApprove@1000 : RecordID;DocumentLineNo@1100527000 : Integer);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Table ID", RecordIDToApprove.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve", RecordIDToApprove);
      ApprovalEntry.SETRANGE("Document Line No.", DocumentLineNo);
      ApprovalEntry.DELETEALL(TRUE);
      DeleteApprovalCommentLines4PS(RecordIDToApprove, DocumentLineNo);
    END;

    PROCEDURE DeleteApprovalCommentLines4PS@1100527002(RecordIDToApprove@1000 : RecordID;DocumentLineNo@1100527000 : Integer);
    VAR
      ApprovalCommentLine@1001 : Record 455;
    BEGIN
      //**4PS
      ApprovalCommentLine.SETRANGE("Table ID", RecordIDToApprove.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve", RecordIDToApprove);
      ApprovalCommentLine.SETRANGE("Document Line No.", DocumentLineNo);
      ApprovalCommentLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE FindOpenApprovalEntry@1100527300(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Table ID", RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve", RecordID);
      ApprovalEntry.SETRANGE(Status, ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change", FALSE);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    PROCEDURE SwitchLockApprovalRequests@1100527350(VAR ApprovalEntry@1000 : Record 454;LockUnlock@1100527350 : Boolean);
    BEGIN
      //**4PS
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          SwitchLockSelectedApprovalRequest(ApprovalEntry, LockUnlock);
          PutOnSpecificHoldPurchaseInvoiceAndCreditMemo(ApprovalEntry);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SwitchLockSelectedApprovalRequest@1100527351(VAR ApprovalEntry@1000 : Record 454;LockUnlock@1100527350 : Boolean);
    VAR
      ApprovalEntry2@1100528400 : Record 454;
      ApprovalManagement4PSConstr@1100528401 : Codeunit 11125349;
    BEGIN
      //**4PS
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(LockUnlockOnlyOpenRequestsErr);

      ApprovalEntry.VALIDATE(Locked, LockUnlock);
      ApprovalEntry.MODIFY(TRUE);

      IF LockUnlock THEN
        ApprovalManagement4PSConstr.CreateAppvlCmtLine(
          ApprovalEntry."Workflow Step Instance ID", ApprovalEntry,STRSUBSTNO(LockedBy, ApprovalManagement4PSConstr.RemoveDomainName(USERID),
            ApprovalManagement4PSConstr.RemoveDomainName(ApprovalEntry."Approver ID")))
      ELSE
        ApprovalManagement4PSConstr.CreateAppvlCmtLine(
          ApprovalEntry."Workflow Step Instance ID", ApprovalEntry,STRSUBSTNO(UnlockedBy, ApprovalManagement4PSConstr.RemoveDomainName(USERID),
            ApprovalManagement4PSConstr.RemoveDomainName(ApprovalEntry."Approver ID")));

      IF ApprovalEntry."Approver Group Code" <> '' THEN BEGIN
        ApprovalEntry2.SETCURRENTKEY(
        "Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
        ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
        ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
        ApprovalEntry2.SETRANGE("Approver Group Code",ApprovalEntry."Approver Group Code");
        ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
        ApprovalEntry2.SETRANGE("Consent Rule Process",ApprovalEntry."Consent Rule Process");
        ApprovalEntry2.SETRANGE("Consent Rule Line No.",ApprovalEntry."Consent Rule Line No.");
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
        IF ApprovalEntry2.FINDSET THEN
          ApprovalEntry2.SetApprovalEntryInApprovalGroup(TRUE);
          REPEAT
            ApprovalEntry2.VALIDATE(Locked, LockUnlock);
            ApprovalEntry2.MODIFY(TRUE);
          UNTIL ApprovalEntry2.NEXT = 0;
      END;
    END;

    PROCEDURE CheckApprovalSharing@1100527352(LockedBy@1100527351 : Text[250]) : Boolean;
    VAR
      ApprovalSharingWorkflow@1100527350 : Record 11229350;
    BEGIN
      //**4PS
      ApprovalSharingWorkflow.SETRANGE("Owner User ID", LockedBy);
      ApprovalSharingWorkflow.SETRANGE("Shared to User ID", USERID);
      ApprovalSharingWorkflow.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharingWorkflow.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      IF ApprovalSharingWorkflow.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE PutOnSpecificHoldPurchaseInvoiceAndCreditMemo@1100527355(VAR ApprovalEntry@1100527350 : Record 454);
    VAR
      WorkFlowSetup4PSConstruct@1100527353 : Record 11229316;
      ApprovalManagement4PSConstr@1100527354 : Codeunit 11125349;
    BEGIN
      //**4PS
      IF ApprovalEntry."Document Type" IN [ApprovalEntry."Document Type"::Invoice, ApprovalEntry."Document Type"::"Credit Memo"] THEN BEGIN
        WorkFlowSetup4PSConstruct.GET;
        IF WorkFlowSetup4PSConstruct."Specific On Hold Code" <> '' THEN
          ApprovalManagement4PSConstr.PutOnSpecificHold(ApprovalEntry."Table ID", ApprovalEntry."Document Type", ApprovalEntry."Document No.",WorkFlowSetup4PSConstruct."Specific On Hold Code",TRUE,FALSE);
      END;
    END;

    LOCAL PROCEDURE SkipOpenSecondPageForRejectedLines@1100527552(RecRef@1100527300 : RecordRef) : Boolean;
    VAR
      ApprovalEntry@1100527550 : Record 454;
      EntryNo@1100527301 : Integer;
    BEGIN
      //**4PS
      RecRef.SETTABLE(ApprovalEntry);
      EntryNo := ApprovalEntry."Entry No.";
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Entry No." <> EntryNo);
    END;

    PROCEDURE SetSkipCheckFourEyesApproval@1100529603(NewSkipCheckFourEyesApproval@1100529600 : Boolean);
    BEGIN
      //**4PS
      SkipCheckFourEyesApproval := NewSkipCheckFourEyesApproval;
    END;

    [External]
    PROCEDURE SendApprovalRequestFromApprovalEntryNoMessage@1100528202(ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntry2@1001 : Record 454;
      ApprovalEntry3@1003 : Record 454;
    BEGIN
      IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN
        EXIT;

      IF FindOpenApprovalEntriesForWorkflowStepInstance(ApprovalEntry,ApprovalEntry."Record ID to Approve") THEN
        EXIT;


      ApprovalEntry2.SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
      ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry2.ISEMPTY THEN
        EXIT
      ELSE
        ApprovalEntry2.RESET;

      ApprovalEntry2.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE("Document Line No.",ApprovalEntry."Document Line No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
      IF ApprovalEntry2.FINDFIRST THEN BEGIN
        ApprovalEntry3.COPYFILTERS(ApprovalEntry2);
        ApprovalEntry3.SETRANGE("Sequence No.",ApprovalEntry2."Sequence No.");
        IF ApprovalEntry3.FINDSET THEN
          REPEAT
            ApprovalEntry3.VALIDATE(Status,ApprovalEntry3.Status::Open);
            ApprovalEntry3.MODIFY(TRUE);
          UNTIL ApprovalEntry3.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

