OBJECT Page 11012210 Copy Estimate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012761=rd;
    CaptionML=[DEU=Kopieren Kalkulation;
               ENU=Copy Estimate;
               NLD=Kopieer calculatie;
               NOR=Kopier kalkyle;
               SVE=Kopiera kalkyl];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=StandardDialog;
    OnOpenPage=BEGIN
                 EstToTxtEditable := TRUE;
                 CopyPriceAgreementEditable := TRUE;  //C031992
                 TransferCommentLines := TRUE;  //28906
                 CopySumSheet := CopySumSheet::EstSource;  //28844

                 EstSetup.GET;
                 InitSalesFromCost := EstSetup."Init Sales From Cost";  //C020959
                 RateGroupEditable := (EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group");  //C012973
               END;

    OnQueryClosePage=BEGIN
                       CloseActionOK := CloseAction IN [ACTION::OK,ACTION::LookupOK];
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525000;1;Group  ;
                CaptionML=[DEU=Kopieren von;
                           ENU=Copy from;
                           NLD=Kopi‰ren van;
                           NOR=Kopier fra;
                           SVE=Kopiera fr†n];
                GroupType=Group }

    { 1   ;2   ;Field     ;
                CaptionML=[DEU=Kalkulation;
                           ENU=Estimate;
                           NLD=Calculatie;
                           NOR=Kalkyle;
                           SVE=Kalkyl];
                NotBlank=Yes;
                SourceExpr=EstFrom;
                OnValidate=BEGIN
                             //dbeekman.sn: 28837
                             EstRec."No." := EstFrom;
                             EstRec.DPA_FindRecWithDPAFilterAppld;
                             //dbeekman.en: 28837

                             EstFromTxt := EstRec.Description;
                             EstToTxt := EstRec.Description;

                             FillDefaults(EstFrom);
                           END;

                OnLookup=BEGIN
                           EstRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Estimate List", EstRec) = ACTION::LookupOK THEN BEGIN
                              EstFrom := EstRec."No.";
                              EstFromTxt := EstRec.Description;
                              EstToTxt := EstRec.Description;
                              FillDefaults(EstFrom);
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 7   ;2   ;Field     ;
                CaptionML=[DEU=Beschreibung Kalkulation;
                           ENU=Estimate Description;
                           NLD=Calculatieomschrijving;
                           NOR=Kalkylebeskrivelse;
                           SVE=Kalkylbeskrivning];
                SourceExpr=EstFromTxt;
                Editable=FALSE }

    { 1210190017;2;Field  ;
                CaptionML=[DEU=Teilkalkulation;
                           ENU=Estimate Part;
                           NLD=Deelcalculatie;
                           NOR=Kalkyledel;
                           SVE=Kalkyldel];
                SourceExpr=SubEstFrom;
                OnValidate=VAR
                             Level@1210190002 : Integer;
                             Chapter@1210190001 : Code[20];
                             Paragraph@1100485001 : Code[20];
                             SubEstRecNEW@1100528900 : Record 11072074;
                           BEGIN
                             IF SubEstFrom <> '' THEN
                               IF STRPOS(SubEstFrom, '..')=0 THEN
                                 IF FormatMgt.Numeric(SubEstFrom) THEN
                                   FormatMgt.FormatSubEstimate(SubEstFrom,Chapter,Paragraph,Level,EstFrom,FALSE);

                             IF NOT SubEstRecNEW.GET(EstFrom,SubEstFrom) THEN SubEstRecNEW.INIT;
                             SubEstFromTxt := SubEstRecNEW.Description;
                           END;

                OnLookup=VAR
                           SubEstRecNEW@1100528901 : Record 11072074;
                         BEGIN
                           SubEstRecNEW.SETRANGE("Estimate No.", EstFrom);
                           IF PAGE.RUNMODAL(PAGE::"Sub-Estimate List",SubEstRecNEW) = ACTION::LookupOK THEN BEGIN
                             SubEstFrom := SubEstRecNEW."Sub-Estimate No.";
                             SubEstFromTxt := SubEstRecNEW.Description;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190021;2;Field  ;
                CaptionML=[DEU=Beschreibung Teilkalkulation;
                           ENU=Estimate Part Description;
                           NLD=Deelcalculatieomschrijving;
                           NOR=Kalkyledel Í Beskrivelse;
                           SVE=Kalkyl Í delbeskrivning];
                SourceExpr=SubEstFromTxt;
                Editable=FALSE }

    { 1210190009;2;Field  ;
                CaptionML=[DEU=Normensatz;
                           ENU=Norm Group;
                           NLD=Normenset;
                           NOR=Normgruppe;
                           SVE=Normgrupp];
                SourceExpr=NormGroupFrom;
                Editable=FALSE }

    { 1100525007;2;Field  ;
                CaptionML=[DEU=Beschreibung Normgruppe;
                           ENU=Norm Group Description;
                           NLD=Normensetomschrijving;
                           NOR=0];
                SourceExpr=NormGroupFromTxt;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525005;2;Field  ;
                CaptionML=[DEU=Kopieren in;
                           ENU=Norm Group (Sales);
                           NLD=Normenset (verkoop);
                           SVE=Kopiera till];
                SourceExpr=NormGroupSalesFrom;
                Editable=FALSE }

    { 1100525004;2;Field  ;
                CaptionML=[DEU=Beschreibung Normgruppe (Verkauf);
                           ENU=Norm Group (Sales)  Description;
                           NLD=Normenset (verkoop) omschrijving];
                SourceExpr=NormGroupSalesFromTxt;
                Visible=FALSE;
                Editable=FALSE }

    { 1210190011;2;Field  ;
                CaptionML=[DEU=Tarifsatz;
                           ENU=Rate Group;
                           NLD=Tarievenset;
                           NOR=Kostgruppe;
                           SVE=Kostnadsgrupp];
                SourceExpr=RateGroupFrom;
                Editable=FALSE }

    { 1100525003;2;Field  ;
                CaptionML=[DEU=Beschreibung;
                           ENU=Rate Group Description;
                           NLD=Tarievensetomschrijving;
                           NOR=0];
                SourceExpr=RateGroupFromTxt;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525018;2;Field  ;
                CaptionML=[DEU=Rabattbedingungssatz (Debitor);
                           ENU=Discount Term Group (Customer);
                           NLD=Kortingsconditieset (klant);
                           NOR=Rabattvilk†rsgruppe (Kunde);
                           SVE=Rabattvillkorsgrupp (kund)];
                SourceExpr=DiscRef1From;
                Editable=FALSE;
                OnValidate=BEGIN
                             GetDiscountReference(0,1);  //C035780 (Type: 0=Cost, Level: 1=Customer)
                           END;
                            }

    { 1100525017;2;Field  ;
                CaptionML=[DEU=Beschreibung;
                           ENU=Discount Term Group Description (Customer);
                           NLD=Kortingsconditiesetomschrijving (klant);
                           NOR=Beskrivelse av Rabattvilk†rsgruppe (kunde)];
                SourceExpr=DiscRef1FromTxt;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525016;2;Field  ;
                CaptionML=[DEU=Rabattbedingungssatz (Auftrag);
                           ENU=Discount Term Group (Job);
                           NLD=Kortingsconditieset (opdracht);
                           NOR=Rabattvilk†rsgruppe (jobb);
                           SVE=Rabattvillkorsgrupp (jobb)];
                SourceExpr=DiscRef2From;
                Editable=FALSE;
                OnValidate=BEGIN
                             GetDiscountReference(0,2);  //C035780 (Type: 0=Cost, Level: 2=Job)
                           END;
                            }

    { 1100525015;2;Field  ;
                CaptionML=[DEU=Beschreibung;
                           ENU=Discount Term Group Description (Job);
                           NLD=Kortingsconditiesetomschrijving (opdracht);
                           NOR=Beskrivelse av rabattvilk†rsgruppe (jobb)];
                SourceExpr=DiscRef2FromTxt;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525014;2;Field  ;
                CaptionML=[DEU=Verkaufsrabattbedingungssatz (Debitor);
                           ENU=Sales Discount Term Group (Customer);
                           NLD=Verkoopkortingsconditieset (klant);
                           NOR=Salg, rabattvilk†rsgruppe (Kunde);
                           SVE=F”rs„ljning, rabattvillkorsgrupp (kund)];
                SourceExpr=SalesDiscRef1From;
                Editable=FALSE;
                OnValidate=BEGIN
                             GetDiscountReference(1,1);  //C035780 (Type: 1=Sales, Level: 1=Customer)
                           END;
                            }

    { 1100525013;2;Field  ;
                CaptionML=[DEU=Beschreibung Verkaufsrabattbedingungssatz (Debitor);
                           ENU=Sales Discount Term Group Description (Customer);
                           NLD=Verkoopkortingsconditiesetomschrijving (klant)];
                SourceExpr=SalesDiscRef1FromTxt;
                Importance=Additional;
                Editable=FALSE }

    { 1100525012;2;Field  ;
                CaptionML=[DEU=Verkaufsrabattbedingungssatz (Auftrag);
                           ENU=Sales Discount Term Group (Job);
                           NLD=Verkoopkortingsconditieset (opdracht);
                           NOR=Salg, Rabattvilk†rsgruppe (Jobb);
                           SVE=F”rs„ljning, rabattvillkorsgrupp (jobb)];
                SourceExpr=SalesDiscRef2From;
                Editable=FALSE;
                OnValidate=BEGIN
                             GetDiscountReference(1,2);  //C035780 (Type: 1=Sales, Level: 2=Job)
                           END;
                            }

    { 1100525011;2;Field  ;
                CaptionML=[DEU=Beschreibung Verkaufsrabattbedingungssatz (Projekt);
                           ENU=Sales Discount Term Group Description (Job);
                           NLD=Verkoopkortingsconditiesetomschrijving (opdracht)];
                SourceExpr=SalesDiscRef2FromTxt;
                Importance=Additional;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485008;2;Field  ;
                CaptionML=[DEU=Kopieren Endblatt von;
                           ENU=Copy Summary Sheet from;
                           NLD=Kopi‰ren staartblad van;
                           NOR=Kopier Sammendragsark fra;
                           SVE=Kopiera sammandragsark fr†n];
                OptionCaptionML=[DEU=Herkunftskalkulation,Quellenkalkulation,Nicht zutreffend;
                                 ENU=Original Estimate,Estimate Source,Not applicable;
                                 NLD=Herkomstcalculatie,Broncalculatie,n.v.t.;
                                 NOR=Opprinnelig kalkyle,KalkyleÍkilde,Ikke anvendelig;
                                 SVE=Ursprunglig kalkyl,Kalkyl Í k„lla,Ej till„mpligt];
                SourceExpr=CopySumSheet;
                OnValidate=BEGIN
                             IF CopySumSheet = CopySumSheet::Empty THEN
                               GenerateSummarySubEstimate := FALSE;
                           END;
                            }

    { 1100525010;2;Field  ;
                CaptionML=[DEU=Optionen;
                           ENU=Generate Summary Sub Estimate;
                           NLD=Aanmaken staartblad per deelcalculatie;
                           SVE=Alternativ];
                SourceExpr=GenerateSummarySubEstimate }

    { 1100525002;1;Group  ;
                CaptionML=[DEU=Kopieren in;
                           ENU=Copy to;
                           NLD=Kopi‰ren naar;
                           NOR=Kopier til;
                           SVE=Kopiera till];
                GroupType=Group }

    { 1100485006;2;Field  ;
                CaptionML=[DEU=Vorhandene Kalkulation;
                           ENU=Select Existing Estimate;
                           NLD=Bestaande calculatie;
                           NOR=Velg eksisterende kalkyle;
                           SVE=V„lj befintlig kalkyl];
                SourceExpr=SelectExistingEstimate;
                OnValidate=BEGIN
                             SelectExistingEstimateOnAfterV;
                           END;
                            }

    { 4   ;2   ;Field     ;
                CaptionML=[DEU=Kalkulation;
                           ENU=Estimate;
                           NLD=Calculatie;
                           NOR=Kalkyle;
                           SVE=Kalkyl];
                NotBlank=Yes;
                SourceExpr=EstTo;
                OnValidate=BEGIN
                             //dbeekman.sn: 28837
                             EstToTxt := EstFromTxt;
                             IF SelectExistingEstimate THEN BEGIN
                               EstRec."No." := EstTo;
                               EstRec.DPA_FindRecWithDPAFilterAppld;
                               EstToTxt := EstRec.Description
                             END ELSE
                               IF EstRec.GET(EstTo) THEN
                                 EstRec.INSERT; //show error
                             //dbeekman.en: 28837

                             IF EstTo <>'' THEN BEGIN
                               NoSeriesMgt.TestManual(EstNos);
                             END;

                             EstToTxtSetEditable;
                           END;

                OnLookup=BEGIN
                           LookupEstTo;
                           EstToTxtSetEditable;
                         END;
                          }

    { 8   ;2   ;Field     ;
                CaptionML=[DEU=Beschreibung Kalkulation;
                           ENU=Estimate Description;
                           NLD=Calculatieomschrijving;
                           NOR=Kalkylebeskrivelse;
                           SVE=Kalkylbeskrivning];
                SourceExpr=EstToTxt;
                Editable=EstToTxtEditable }

    { 1210190005;2;Field  ;
                CaptionML=[DEU=Debitorennr.;
                           ENU=Customer No.;
                           NLD=Klant;
                           NOR=Kundenr.;
                           SVE=Kundnr];
                SourceExpr=CustTo;
                TableRelation=Customer.No.;
                OnValidate=BEGIN
                             IF NOT CustRec.GET(CustTo) THEN BEGIN
                               CustTo := '';
                               CustToTxt := '';
                             END ELSE BEGIN
                               CustToTxt := CustRec.Name;
                             END;
                             CheckCustContact(0);
                           END;
                            }

    { 1210190006;2;Field  ;
                CaptionML=[DEU=Debitor Name;
                           ENU=Customer Name;
                           NLD=Klantnaam;
                           NOR=Kundnavn;
                           SVE=Betalarens namn];
                SourceExpr=CustToTxt;
                Editable=FALSE }

    { 1100485011;2;Field  ;
                CaptionML=[DEU=Kontakt;
                           ENU=Contact;
                           NLD=Relatie;
                           NOR=Kontaktperson;
                           SVE=Kontakt];
                SourceExpr=ContactTo;
                TableRelation=Contact.No.;
                OnValidate=BEGIN
                             IF NOT ContactRec.GET(ContactTo) THEN BEGIN
                               ContactTo := '';
                               ContactToTxt := '';
                             END ELSE BEGIN
                               ContactToTxt := ContactRec.Name;
                             END;
                             CheckCustContact(1);
                           END;
                            }

    { 1100485010;2;Field  ;
                CaptionML=[DEU=Kontaktname;
                           ENU=Contact Name;
                           NLD=Relatienaam;
                           NOR=Kontaktnavn;
                           SVE=Kontaktnamn];
                SourceExpr=ContactToTxt;
                Editable=FALSE }

    { 1100485014;2;Field  ;
                CaptionML=[DEU=Kontaktperson;
                           ENU=Contact Person;
                           NLD=Contactpersoon;
                           NOR=Kontaktperson;
                           SVE=Kontaktperson];
                SourceExpr=ContactPersonTo;
                TableRelation=Contact.No.;
                OnValidate=BEGIN
                             IF NOT ContactRec.GET(ContactPersonTo) THEN BEGIN
                               ContactPersonTo := '';
                               ContactPersonToTxt := '';
                             END ELSE BEGIN
                               ContactPersonToTxt := ContactRec.Name;
                             END;
                           END;

                OnLookup=BEGIN
                           ContactRec.RESET;
                           ContactRec.SETRANGE("Company No.", ContactTo);
                           ContactRec.SETRANGE(Type, ContactRec.Type::Person);
                           IF PAGE.RUNMODAL(PAGE::"Contact List", ContactRec) = ACTION::LookupOK THEN BEGIN  //C051289
                             ContactPersonTo := ContactRec."No.";
                             ContactPersonToTxt := ContactRec.Name;
                           END;
                         END;
                          }

    { 1100485013;2;Field  ;
                CaptionML=[DEU=Name Kontakt;
                           ENU=Contact Person Name;
                           NLD=Contactpersoonnaam;
                           NOR=Kontaktpersonens navn;
                           SVE=Kontaktpersonens namn];
                SourceExpr=ContactPersonToTxt;
                Editable=FALSE }

    { 1210190016;2;Field  ;
                CaptionML=[DEU=Normensatz;
                           ENU=Norm Group;
                           NLD=Normenset;
                           NOR=Normgruppe;
                           SVE=Normgrupp];
                SourceExpr=NormGroupTo;
                TableRelation="Norm Group".Code;
                OnValidate=BEGIN
                             IF NOT NormGroupRec.GET(NormGroupTo) THEN BEGIN
                               NormGroupTo := NormGroupFrom;
                               NormGroupToTxt := NormGroupFromTxt;
                             END ELSE BEGIN
                               NormGroupToTxt := COPYSTR(NormGroupRec.Description, 1, 50);
                             END;
                           END;
                            }

    { 1210190019;2;Field  ;
                CaptionML=[DEU=Beschreibung Normgruppe;
                           ENU=Norm Group Description;
                           NLD=Normensetomschrijving;
                           NOR=0];
                SourceExpr=NormGroupToTxt;
                Editable=FALSE }

    { 1100525009;2;Field  ;
                CaptionML=[DEU=Kopieren in;
                           ENU=Norm Group (Sales);
                           NLD=Normenset (verkoop);
                           SVE=Kopiera till];
                SourceExpr=NormGroupSalesTo;
                TableRelation="Norm Group".Code;
                OnValidate=BEGIN
                             //DP00381
                             IF NOT NormGroupRec.GET(NormGroupSalesTo) THEN BEGIN
                               NormGroupSalesTo := NormGroupSalesFrom;
                               NormGroupSalesToTxt := NormGroupSalesFromTxt;
                             END ELSE BEGIN
                               NormGroupSalesToTxt := COPYSTR(NormGroupRec.Description, 1, 50);
                             END;
                           END;
                            }

    { 1100525008;2;Field  ;
                CaptionML=[DEU=Kopieren von;
                           ENU=Norm Group (Sales) Description;
                           NLD=Normenset (verkoop) omschrijving;
                           SVE=Kopiera fr†n];
                SourceExpr=NormGroupSalesToTxt;
                Editable=FALSE }

    { 1210190018;2;Field  ;
                CaptionML=[DEU=Tarifsatz;
                           ENU=Rate Group;
                           NLD=Tarievenset;
                           NOR=Kostgruppe;
                           SVE=Kostnadsgrupp];
                SourceExpr=RateGroupTo;
                TableRelation="Rate Group".No.;
                Editable=RateGroupEditable;
                OnValidate=BEGIN
                             GetRateGroup;  //C035780
                           END;
                            }

    { 1210190020;2;Field  ;
                CaptionML=[DEU=Beschreibung;
                           ENU=Rate Group Description;
                           NLD=Tarievensetomschrijving;
                           NOR=0];
                SourceExpr=RateGroupToTxt;
                Editable=FALSE }

    { 1100528900;2;Field  ;
                CaptionML=[DEU=Stichtag Tarife;
                           ENU=Reference Date Rates;
                           NLD=Peildatum tarieven;
                           NOR=Referansedato for satser;
                           SVE=Avgiftsreferensdatum];
                SourceExpr=RefDateRateTo;
                Style=Attention;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             IF RefDateRateTo = 0D THEN
                               RefDateRateTo := TODAY;  //DP01931
                           END;
                            }

    { 1100485004;2;Field  ;
                CaptionML=[DEU=Stichtag Artikelpreise;
                           ENU=Reference Date Item Prices;
                           NLD=Peildatum artikelprijzen;
                           NOR=Referansedato for artikkelpriser;
                           SVE=Referensdatum f”r artikelpriser];
                SourceExpr=RefDateItemTo }

    { 1100485017;2;Field  ;
                CaptionML=[DEU=Rabattbedingungssatz (Debitor);
                           ENU=Discount Term Group (Customer);
                           NLD=Kortingsconditieset (klant);
                           NOR=Rabattvilk†rsgruppe (Kunde);
                           SVE=Rabattvillkorsgrupp (kund)];
                SourceExpr=DiscRef1To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer));
                OnValidate=BEGIN
                             GetDiscountReference(0,1);  //C035780 (Type: 0=Cost, Level: 1=Customer)
                           END;
                            }

    { 1100485018;2;Field  ;
                CaptionML=[DEU=Beschreibung;
                           ENU=Discount Term Group Description (Customer);
                           NLD=Kortingsconditiesetomschrijving (klant);
                           NOR=Beskrivelse av Rabattvilk†rsgruppe (kunde)];
                SourceExpr=DiscRef1ToTxt;
                Editable=FALSE }

    { 1100485021;2;Field  ;
                CaptionML=[DEU=Rabattbedingungssatz (Auftrag);
                           ENU=Discount Term Group (Job);
                           NLD=Kortingsconditieset (opdracht);
                           NOR=Rabattvilk†rsgruppe (jobb);
                           SVE=Rabattvillkorsgrupp (projekt)];
                SourceExpr=DiscRef2To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job));
                OnValidate=BEGIN
                             GetDiscountReference(0,2);  //C035780 (Type: 0=Cost, Level: 2=Job)
                           END;
                            }

    { 1100485022;2;Field  ;
                CaptionML=[DEU=Beschreibung;
                           ENU=Discount Term Group Description (Job);
                           NLD=Kortingsconditiesetomschrijving (opdracht);
                           NOR=Beskrivelse av rabattvilk†rsgruppe (jobb)];
                SourceExpr=DiscRef2ToTxt;
                Editable=FALSE }

    { 1100409004;2;Field  ;
                CaptionML=[DEU=Verkaufsrabattbedingungssatz (Debitor);
                           ENU=Sales Discount Term Group (Customer);
                           NLD=Verkoopkortingsconditieset (klant);
                           NOR=Salg, rabattvilk†rsgruppe (Kunde);
                           SVE=F”rs„ljning, rabattvillkorsgrupp (kund)];
                SourceExpr=SalesDiscRef1To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer));
                OnValidate=BEGIN
                             GetDiscountReference(1,1);  //C035780 (Type: 1=Sales, Level: 1=Customer)
                           END;
                            }

    { 1100409003;2;Field  ;
                CaptionML=[DEU=Beschreibung Verkaufsrabattbedingungssatz (Debitor);
                           ENU=Sales Discount Term Group Description (Customer);
                           NLD=Verkoopkortingsconditiesetomschrijving (klant)];
                SourceExpr=SalesDiscRef1ToTxt;
                Importance=Additional;
                Editable=FALSE }

    { 1100409002;2;Field  ;
                CaptionML=[DEU=Verkaufsrabattbedingungssatz (Auftrag);
                           ENU=Sales Discount Term Group (Job);
                           NLD=Verkoopkortingsconditieset (opdracht);
                           NOR=Salg, Rabattvilk†rsgruppe (Jobb);
                           SVE=F”rs„ljning, rabattvillkorsgrupp (jobb)];
                SourceExpr=SalesDiscRef2To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job));
                OnValidate=BEGIN
                             GetDiscountReference(1,2);  //C035780 (Type: 1=Sales, Level: 2=Job)
                           END;
                            }

    { 1100409001;2;Field  ;
                CaptionML=[DEU=Beschreibung Verkaufsrabattbedingungssatz (Projekt);
                           ENU=Sales Discount Term Group Description (Job);
                           NLD=Verkoopkortingsconditiesetomschrijving (opdracht)];
                SourceExpr=SalesDiscRef2ToTxt;
                Importance=Additional;
                Editable=FALSE }

    { 1100525019;2;Field  ;
                CaptionML=[DEU=Zuschlag % Arbeit;
                           ENU=Surcharge % Labor;
                           NLD=Toeslag % arbeid;
                           NOR=Tilleggsgebyrsprosent, arbeidskraft;
                           SVE=Till„ggsavgiftsprocent, arbetskraft];
                SourceExpr=SurchargeLaborTo }

    { 1100525020;2;Field  ;
                CaptionML=[DEU=Zuschlag % Material;
                           ENU=Surcharge % Material;
                           NLD=Toeslag % materiaal;
                           NOR=Tilleggsgebyrsprosent, Materiale;
                           SVE=Till„ggsavgiftsprocent, material];
                SourceExpr=SurchargeMaterialTo }

    { 1100525021;2;Field  ;
                CaptionML=[DEU=Zuschlag % Subunternehmung;
                           ENU=Surcharge % Subcontracting;
                           NLD=Toeslag % onderaanneming;
                           NOR=Tilleggsgebyrsprosent, underentrepen›r;
                           SVE=Till„ggsavgiftsprocent, underentreprenad];
                SourceExpr=SurchargeSubcontractingTo }

    { 1100525022;2;Field  ;
                CaptionML=[DEU=Zuschlag % Werkzeug;
                           ENU=Surcharge % Plant;
                           NLD=Toeslag % materieel;
                           NOR=Tilleggsgebyrsprosent, maskin;
                           SVE=Till„ggsavgiftsprocent, Maskin];
                SourceExpr=SurchargePlantTo }

    { 1100525023;2;Field  ;
                CaptionML=[DEU=Zuschlag % šbriges;
                           ENU=Surcharge % Sundry;
                           NLD=Toeslag % overig;
                           NOR=P†slagssatser, diverse;
                           SVE=Till„ggsavgiftsprocent, diverse];
                SourceExpr=SurchargeSundryTo }

    { 1100525006;1;Group  ;
                CaptionML=[DEU=Ausgleichen;
                           ENU=Apply;
                           NLD=Toepassen;
                           NOR=Koble;
                           SVE=Verkst„ll];
                GroupType=Group }

    { 1100485000;2;Field  ;
                CaptionML=[DEU=Kopieren Fortsetzungsgenerierung;
                           ENU=Copy Try-Out Successor;
                           NLD=Kopi‰ren vervolgtraject;
                           NOR=Kopier etterf›lger (prospekt);
                           SVE=Kopiera efterf”ljare, anbud];
                SourceExpr=CopyTryOut }

    { 1100485002;2;Field  ;
                CaptionML=[DEU=Nur Struktur kopieren;
                           ENU=Skip Lines;
                           NLD=Alleen structuur kopi‰ren;
                           NOR=Hopp over rader;
                           SVE=Hoppa ”ver rader];
                SourceExpr=SkipLines }

    { 1100525001;2;Field  ;
                CaptionML=[DEU=Kopieren Auszugsblatt;
                           ENU=Copy Estimate Quantity Sheet;
                           NLD=Kopieer uittrekstaten;
                           NOR=Kopier kalkulert antallsspesifikasjon;
                           SVE=Kopiera kalkylerad antalsspecifikation];
                SourceExpr=CopyEstQuanSheet }

    { 1100529801;2;Field  ;
                CaptionML=[DEU=šbertragen Bemerkungen;
                           ENU=Transfer Comment Lines;
                           NLD=Overzetten opmerkingen;
                           NOR=Overf›r kommentarrader;
                           SVE=™verf”r kommentarsrader];
                SourceExpr=TransferCommentLines }

    { 1100528501;2;Field  ;
                Name=CopyRates;
                CaptionML=[DEU=Tarif kopieren;
                           ENU=Copy Rates;
                           NLD=Tarieven kopi‰ren];
                SourceExpr=CopyRates }

    { 1210190022;2;Field  ;
                CaptionML=[DEU=Preisvereinbarung kopieren;
                           ENU=Copy Price Agreement;
                           NLD=Prijsafspraak kopi‰ren;
                           NOR=Kopier prisavtale;
                           SVE=Kopiera prisavtal];
                SourceExpr=CopyPriceAgreement;
                Editable=CopyPriceAgreementEditable }

    { 1100409000;2;Field  ;
                CaptionML=[DEU=Verkauf von Kosten initialisieren;
                           ENU=Initialize Sales From Cost;
                           NLD=Initialiseren verkoop vanuit kostprijs];
                SourceExpr=InitSalesFromCost }

  }
  CODE
  {
    VAR
      Text001@11012009 : TextConst 'DEU=Kalkulation bereits vorhanden;ENU=Estimate already exists;NLD=Calculatie bestaat reeds;NOR=Kalkylen finnes allerede;SVE=Kalkylen finns redan';
      EstFromOld@1100525001 : Code[20];
      EstFrom@11012000 : Code[20];
      EstTo@11012001 : Code[20];
      NewEst@11012002 : Code[20];
      EstFromTxt@11012003 : Text[50];
      EstToTxt@11012004 : Text[50];
      EstNos@1000000002 : Code[20];
      SubEstFrom@1210190021 : Code[20];
      SubEstFromTxt@1210190022 : Text[50];
      RateGroupFrom@1210190002 : Code[20];
      NormGroupFrom@1210190003 : Code[20];
      RateGroupFromTxt@1210190004 : Text[50];
      NormGroupFromTxt@1210190005 : Text[50];
      RateGroupTo@1210190009 : Code[20];
      NormGroupTo@1210190008 : Code[20];
      RateGroupToTxt@1210190007 : Text[50];
      NormGroupToTxt@1210190006 : Text[50];
      ContactTo@1100485005 : Code[20];
      ContactToTxt@1100485007 : Text[50];
      ContactPersonTo@1100485006 : Code[20];
      ContactPersonToTxt@1100485008 : Text[50];
      CustTo@1210190017 : Code[20];
      CustToTxt@1210190018 : Text[50];
      CustRec@1210190019 : Record 18;
      ContactRec@1100485009 : Record 5050;
      RateGroupRec@1210190010 : Record 11012161;
      NormGroupRec@1210190011 : Record 11012164;
      EstRec@1210190016 : Record 11012151;
      EstSetup@1210190015 : Record 11012150;
      SerLineRec@1210190014 : Record 309;
      SerRelRec@1210190013 : Record 310;
      NoSeriesMgt@1210190012 : Codeunit 396;
      FormatMgt@1210190023 : Codeunit 11012022;
      CopyTryOut@1100485000 : Boolean;
      SkipLines@1100485001 : Boolean;
      SelectExistingEstimate@1100485003 : Boolean;
      RefDateRateTo@1100528901 : Date;
      RefDateItemTo@1100485002 : Date;
      CopySumSheet@1100485004 : 'EstFrom,EstSource,Empty';
      CopiedEstTo@1100485010 : Code[20];
      DiscRef1From@1100485016 : Code[20];
      DiscRef2From@1100485017 : Code[20];
      DiscRef1To@1100485011 : Code[20];
      DiscRef2To@1100485012 : Code[20];
      DiscRef1FromTxt@1100485018 : Text[50];
      DiscRef2FromTxt@1100485019 : Text[50];
      DiscRef1ToTxt@1100485013 : Text[50];
      DiscRef2ToTxt@1100485014 : Text[50];
      DiscRefRec@1100485015 : Record 11012338;
      CopyEstQuanSheet@1100525000 : Boolean;
      TransferCommentLines@1100529800 : Boolean;
      CopyPriceAgreement@1210190025 : Boolean;
      EstToTxtEditable@1100525009 : Boolean INDATASET;
      CopyPriceAgreementEditable@1100409000 : Boolean INDATASET;
      CloseActionOK@1100528400 : Boolean;
      RateGroupEditable@1100528900 : Boolean INDATASET;
      NormGroupSalesFrom@1100525005 : Code[20];
      NormGroupSalesFromTxt@1100525004 : Text[50];
      NormGroupSalesTo@1100525003 : Code[20];
      NormGroupSalesToTxt@1100525002 : Text[50];
      GenerateSummarySubEstimate@1100525007 : Boolean;
      InitSalesFromCost@1100409002 : Boolean;
      SalesDiscRef1To@1100409007 : Code[20];
      SalesDiscRef2To@1100409006 : Code[20];
      SalesDiscRef1ToTxt@1100409005 : Text[50];
      SalesDiscRef2ToTxt@1100409004 : Text[50];
      SalesDiscRef1From@1100409003 : Code[20];
      SalesDiscRef2From@1100409001 : Code[20];
      SalesDiscRef1FromTxt@1100525010 : Text[50];
      SalesDiscRef2FromTxt@1100525008 : Text[50];
      CustFrom@1100525006 : Code[20];
      LastCustomerTo@1100525011 : Record 18;
      SurchargeLaborFrom@1100525012 : Decimal;
      SurchargeMaterialFrom@1100525013 : Decimal;
      SurchargeSubcontractingFrom@1100525014 : Decimal;
      SurchargePlantFrom@1100525015 : Decimal;
      SurchargeSundryFrom@1100525016 : Decimal;
      SurchargeLaborTo@1100525021 : Decimal;
      SurchargeMaterialTo@1100525020 : Decimal;
      SurchargeSubcontractingTo@1100525019 : Decimal;
      SurchargePlantTo@1100525018 : Decimal;
      SurchargeSundryTo@1100525017 : Decimal;
      CopyRates@1100528500 : Boolean;

    PROCEDURE FillDefaults@1(lEstFrom@11012000 : Code[20]);
    BEGIN
      //C019552.sn
      IF lEstFrom = EstFromOld THEN
        EXIT;
      EstFromOld := lEstFrom;
      //C019552.en
      EstFrom := lEstFrom;
      IF EstRec.GET(EstFrom) THEN BEGIN
        EstFromTxt  := EstRec.Description;
        CustFrom := EstRec."Customer No.";  //C035780

        NormGroupFrom := EstRec."Norm Group";
        IF NOT NormGroupRec.GET(NormGroupFrom) THEN NormGroupRec.INIT;
        NormGroupFromTxt := COPYSTR(NormGroupRec.Description, 1, 50);

        //DP00381.sn
        NormGroupSalesFrom := EstRec."Norm Group (Sales)";
        IF NOT NormGroupRec.GET(NormGroupSalesFrom) THEN NormGroupRec.INIT;
        NormGroupSalesFromTxt := COPYSTR(NormGroupRec.Description, 1, 50);
        //DP00381.en

        RateGroupFrom := EstRec."Rate Group";
        IF NOT RateGroupRec.GET(RateGroupFrom) THEN RateGroupRec.INIT;
        RateGroupFromTxt := RateGroupRec.Description;

        //C017681.sn
        DiscRef1From := EstRec."Purch Discount Term Group 1";
        DiscRef2From := EstRec."Purch Discount Term Group 2";
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, DiscRef1From) THEN DiscRefRec.INIT;
        DiscRef1FromTxt := DiscRefRec.Description;
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, DiscRef2From) THEN DiscRefRec.INIT;
        DiscRef2FromTxt := DiscRefRec.Description;
        //C017681.en

        //C035780.sn
        SalesDiscRef1From := EstRec."Sales Discount Term Group 1";
        SalesDiscRef2From := EstRec."Sales Discount Term Group 2";
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, SalesDiscRef1From) THEN DiscRefRec.INIT;
        SalesDiscRef1FromTxt := DiscRefRec.Description;
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, SalesDiscRef2From) THEN DiscRefRec.INIT;
        SalesDiscRef2FromTxt := DiscRefRec.Description;

        SurchargeLaborFrom := EstRec."Surcharge % Labor";
        SurchargeMaterialFrom := EstRec."Surcharge % Material";
        SurchargeSubcontractingFrom := EstRec."Surcharge % Subcontracting";
        SurchargePlantFrom := EstRec."Surcharge % Plant";
        SurchargeSundryFrom := EstRec."Surcharge % Sundry";
        //C035780.en

        CustTo := EstRec."Customer No.";
        IF NOT CustRec.GET(CustTo) THEN CustRec.INIT;
        CustToTxt := CustRec.Name;

        EstRec.CALCFIELDS("Contact Name", "Contact Person Name");
        ContactTo := EstRec."Contact No.";
        ContactToTxt := EstRec."Contact Name";
        ContactPersonTo := EstRec."Contact Person No.";
        ContactPersonToTxt := EstRec."Contact Person Name";
        RefDateItemTo := EstRec."Reference Date (Item)";
        IF EstRec."Reference Date (Rate)" = 0D THEN
          RefDateRateTo := TODAY
        ELSE
          RefDateRateTo := EstRec."Reference Date (Rate)";  //DP01931

        DetermineNewEstimate;
        EstTo    := NewEst;
        EstToTxtSetEditable;
        EstToTxt := EstFromTxt;
        NormGroupTo := NormGroupFrom;
        NormGroupSalesTo := NormGroupSalesFrom;  //DP00381
        RateGroupTo := RateGroupFrom;
        DiscRef1To := DiscRef1From;
        DiscRef2To := DiscRef2From;
        NormGroupToTxt := NormGroupFromTxt;
        NormGroupSalesToTxt := NormGroupSalesFromTxt;  //DP00381
        RateGroupToTxt := RateGroupFromTxt;
        DiscRef1ToTxt := DiscRef1FromTxt;
        DiscRef2ToTxt := DiscRef2FromTxt;
        //C035780.sn
        SalesDiscRef1To := SalesDiscRef1From;
        SalesDiscRef2To := SalesDiscRef2From;
        SalesDiscRef1ToTxt := SalesDiscRef1FromTxt;
        SalesDiscRef2ToTxt := SalesDiscRef2FromTxt;
        SurchargeLaborTo := SurchargeLaborFrom;
        SurchargeMaterialTo := SurchargeMaterialFrom;
        SurchargeSubcontractingTo := SurchargeSubcontractingFrom;
        SurchargePlantTo := SurchargePlantFrom;
        SurchargeSundryTo := SurchargeSundryFrom;
        //C035780.en
      END;
    END;

    PROCEDURE FillDefaultRentalContract@1100485002(ICustomerNo@1100485000 : Code[20];IContactNo@1100485001 : Code[20];IDescription@1100485002 : Text[50]);
    BEGIN
      CustTo := ICustomerNo;
      IF NOT CustRec.GET(CustTo) THEN CustRec.INIT;
      CustToTxt := CustRec.Name;
      ContactTo := IContactNo;
      IF NOT ContactRec.GET(ContactTo) THEN ContactRec.INIT;
      ContactToTxt := ContactRec.Name;
      EstToTxt := IDescription;
    END;

    PROCEDURE DetermineNewEstimate@1000000000();
    BEGIN
      CLEAR(NoSeriesMgt);

      IF EstRec."No. Series" <> '' THEN BEGIN
        EstNos := EstRec."No. Series";
      END ELSE BEGIN
        EstSetup.GET;
        EstNos := EstSetup."Estimate Nos.";
      END;

      SerRelRec.SETRANGE(Code, EstNos);
      IF SerRelRec.FINDSET THEN BEGIN
        REPEAT
          SerLineRec.SETRANGE("Series Code", SerRelRec."Series Code");
          IF SerLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              IF (SerLineRec.Open = TRUE) AND
                 (EstFrom >= SerLineRec."Starting No.") AND
                 ((EstFrom < SerLineRec."Ending No.") OR (SerLineRec."Ending No." = '')) THEN
                EstNos := SerLineRec."Series Code";
            UNTIL SerLineRec.NEXT = 0;
          END;
        UNTIL SerRelRec.NEXT = 0;
      END;

      NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,FALSE);
    END;

    PROCEDURE ValidateEstimate@1210190001();
    VAR
      lvText000@1210190001 : TextConst 'DEU=Es gibt bereits Kalkulationszeilen in angegebener Bestimmung.;ENU=Estimate Lines present in Destination.;NLD=Er zijn reeds calculatieregels aanwezig in opgegeven bestemming.;NOR=Det finnes kalkylerader i Destinasjonen.;SVE=Det finns kalkylrader i destinationen.';
      EstLineRecNEW@1100528900 : Record 11072072;
    BEGIN
      IF SelectExistingEstimate THEN BEGIN
        EstRec.GET(EstTo);
      END ELSE BEGIN
        IF EstRec.GET(EstTo) THEN BEGIN
          DetermineNewEstimate;
          EstTo := NewEst;
          ERROR(Text001);
        END;
      END;

      EstLineRecNEW.SETRANGE("Estimate No.", EstTo);
      IF SubEstFrom <> '' THEN
        EstLineRecNEW.SETFILTER("Sub-Estimate No.", SubEstFrom);
      IF EstLineRecNEW.FINDFIRST THEN
        ERROR(lvText000);
    END;

    PROCEDURE StartUpdate@1210190000();
    VAR
      CopyMgt@1100528906 : Codeunit 11012227;
      UpdateMgt@1100528904 : Codeunit 11012229;
      TryOutRec@1100528903 : Record 11012761;
      EstLineRecNEW@1100528901 : Record 11072072;
      SelectType@1100528900 : Integer;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      EstRec.GET(EstFrom); //C019552
      IF EstRec.GET(EstTo) THEN
        EstRec.TESTFIELD(Fixed, FALSE);
      ValidateEstimate;

      SelectType := CopySumSheet;

      CopyMgt.SetTransferComments(TransferCommentLines);
      CopyMgt.SetGenerateSummary(GenerateSummarySubEstimate);
      CopyMgt.SetInitSalesFromCost(InitSalesFromCost);  //C020959
      CopyMgt.SetDiscTermGroupSales(SalesDiscRef1To, SalesDiscRef2To);  //C017681
      CopyMgt.SetSurchargePercentage(SurchargeLaborTo, SurchargeMaterialTo,
        SurchargeSubcontractingTo, SurchargePlantTo, SurchargeSundryTo);  //C035780+C053828
      CopyMgt.CopyEst(EstFrom, SubEstFrom, EstTo, EstToTxt,  //DP01931
        NormGroupTo, RateGroupTo, CustTo, RefDateRateTo, RefDateItemTo, DiscRef1To, DiscRef2To,
        SkipLines, SelectType, CopyEstQuanSheet, CopyPriceAgreement, CopyRates);  //C049448

      CLEAR(NoSeriesMgt);     //Force re-read of 'NoSeriesLine' record at next 'GetNextNo' (with FALSE)
      NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,FALSE);
      IF NewEst = EstTo THEN
        NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,TRUE);

      IF NormGroupFrom <> NormGroupTo THEN BEGIN
        NormGroupRec.GET(NormGroupTo);
        EstLineRecNEW.SETRANGE("Estimate No.", EstTo);
        UpdateMgt.ReplaceNormGroup(EstLineRecNEW, NormGroupFrom, NormGroupTo);
      END;

      //DP00381.sn
      IF NormGroupSalesFrom <> NormGroupSalesTo THEN BEGIN
        NormGroupRec.GET(NormGroupSalesTo);
        EstLineRecNEW.SETRANGE("Estimate No.", EstTo);
        UpdateMgt.ReplaceNormGroupSales(EstLineRecNEW, NormGroupSalesFrom, NormGroupSalesTo);
      END;
      //DP00381.en

      IF RateGroupFrom <> RateGroupTo THEN BEGIN
        RateGroupRec.GET(RateGroupTo);
        UpdateMgt.UpdateRate(EstTo, RateGroupFrom, RateGroupTo)  //C025953
      END;

      IF CopyTryOut AND FPSLicenseManagement.LicenseAndReadPermissionForTable(TryOutRec) THEN
        TryOutRec.CopyRelation(1, 1, EstFrom, EstTo);

      WITH EstRec DO BEGIN
        GET(EstTo);
        "Contact No." := ContactTo;
        "Contact Person No." := ContactPersonTo;
        MODIFY;
      END;
    END;

    PROCEDURE CheckCustContact@1100485000(lvAction@1100485001 : Integer);
    VAR
      ContBusRel@1100485000 : Record 5054;
      NumContact@1100485002 : Integer;
    BEGIN
      IF lvAction = 0 THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table", "No.");
        ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.", CustTo);
        IF ContBusRel.FINDFIRST THEN BEGIN
          ContBusRel.CALCFIELDS("Contact Name");
          ContactTo := ContBusRel."Contact No.";
          ContactToTxt := ContBusRel."Contact Name";
        END;
      END;
      IF lvAction = 1 THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Contact No.", "Business Relation Code");
        ContBusRel.SETRANGE("Contact No.", ContactTo);
        ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
        IF ContBusRel.FINDFIRST THEN BEGIN
          ContBusRel.CALCFIELDS("Contact Name");
          CustTo := ContBusRel."No.";
          CustToTxt := ContBusRel."Contact Name";
        END;
      END;

      ContactPersonTo := '';
      ContactPersonToTxt := '';

      ContactRec.RESET;
      ContactRec.SETRANGE("Company No.", ContactTo);
      ContactRec.SETRANGE(Type, ContactRec.Type::Person);
      NumContact := ContactRec.COUNT;
      IF NumContact = 1 THEN BEGIN
        IF ContactRec.FINDFIRST THEN BEGIN
          ContactPersonTo := ContactRec."No.";
          ContactPersonToTxt := ContactRec.Name;
        END;
      END;

      //C035780.sn
      IF LastCustomerTo."No." <> CustTo THEN BEGIN
        LastCustomerTo.GET(CustTo);
        IF LastCustomerTo."Rate Group" <> '' THEN BEGIN
          RateGroupTo := LastCustomerTo."Rate Group";
          GetRateGroup;
        END;
        IF LastCustomerTo."Reference Date (Item)" <> 0D THEN
          RefDateItemTo := LastCustomerTo."Reference Date (Item)";
        IF LastCustomerTo."Purch Discount Term Group" <> '' THEN BEGIN
          DiscRef1To := LastCustomerTo."Purch Discount Term Group";
          GetDiscountReference(0,1);  //Type: 0=Cost, Level: 1=Customer
        END;
        IF LastCustomerTo."Sales Discount Term Group" <> '' THEN BEGIN
          SalesDiscRef1To := LastCustomerTo."Sales Discount Term Group";
          GetDiscountReference(1,1);  //Type: 1=Sales, Level: 1=Customer
        END;
        SurchargeLaborTo := LastCustomerTo."Surcharge % Labor (Est)";
        SurchargeMaterialTo := LastCustomerTo."Surcharge % Material (Est)";
        SurchargeSubcontractingTo := LastCustomerTo."Surcharge % Subcontr. (Est)";
        SurchargePlantTo := LastCustomerTo."Surcharge % Plant (Est)";
        SurchargeSundryTo := LastCustomerTo."Surcharge % Sundry (Est)";
      END;
      //C035780.en
    END;

    PROCEDURE LookupEstTo@1100485001();
    BEGIN
      EstRec.RESET;
      IF PAGE.RUNMODAL(PAGE::"Estimate List", EstRec) = ACTION::LookupOK THEN BEGIN
        IF SelectExistingEstimate = FALSE THEN EXIT;
        EstTo := EstRec."No.";
        EstToTxt := EstRec.Description;
        ValidateEstimate;
      END;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE GetCopiedEstTo@1100485003(VAR OEstNo@1100485000 : Code[20]);
    BEGIN
      OEstNo := CopiedEstTo;
    END;

    PROCEDURE SetEstTo@1210190002(EstNo@1210190000 : Code[20]);
    BEGIN
      //30195
      EstTo := EstNo;
    END;

    LOCAL PROCEDURE SelectExistingEstimateOnAfterV@19035671();
    BEGIN
      IF SelectExistingEstimate = FALSE THEN BEGIN
        EstTo := NewEst;
        EstToTxt := EstFromTxt;
      END ELSE BEGIN
        EstTo := '';
        LookupEstTo;
      END;
    END;

    LOCAL PROCEDURE EstToTxtSetEditable@19010875();
    BEGIN
      IF EstRec.GET(EstTo) THEN
        EstToTxtEditable := FALSE
      ELSE
        EstToTxtEditable := TRUE;
    END;

    LOCAL PROCEDURE StdDialogConfirm@1100528400() : Boolean;
    BEGIN
      CurrPage.RUNMODAL;
      EXIT(CloseActionOK);
    END;

    LOCAL PROCEDURE StdDialogDoAction@1100528401();
    BEGIN
      StartUpdate;
    END;

    PROCEDURE StdDialogRunModal@1100528404();
    BEGIN
      IF StdDialogConfirm THEN
        StdDialogDoAction;
    END;

    PROCEDURE GetNewEstimate@1100525000() : Code[20];
    BEGIN
      //C027531
      EXIT(EstTo);
    END;

    LOCAL PROCEDURE GetDiscountReference@1100525002(iType@1100525001 : Integer;iLevel@1100525000 : Integer);
    BEGIN
      //C035780
      IF iType = 0 THEN BEGIN  //Cost
        IF iLevel = 1 THEN BEGIN
          IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, DiscRef1To) THEN BEGIN
            DiscRef1To := DiscRef1From;
            DiscRef1ToTxt := DiscRef1FromTxt;
          END ELSE BEGIN
            DiscRef1ToTxt := DiscRefRec.Description;
          END;
        END;
        IF iLevel = 2 THEN BEGIN
          IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, DiscRef2To) THEN BEGIN
            DiscRef2To := DiscRef2From;
            DiscRef2ToTxt := DiscRef2FromTxt;
          END ELSE BEGIN
            DiscRef2ToTxt := DiscRefRec.Description;
          END;
        END;
      END;
      IF iType = 1 THEN BEGIN  //Sales
        IF iLevel = 1 THEN BEGIN
          IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, SalesDiscRef1To) THEN BEGIN
            SalesDiscRef1To := SalesDiscRef1From;
            IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, SalesDiscRef1To) THEN DiscRefRec.INIT;
          END;
          SalesDiscRef1ToTxt := DiscRefRec.Description;
        END;
        IF iLevel = 2 THEN BEGIN
          IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, SalesDiscRef2To) THEN BEGIN
            SalesDiscRef2To := SalesDiscRef2From;
            IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, SalesDiscRef2To) THEN DiscRefRec.INIT;
          END;
          SalesDiscRef2ToTxt := DiscRefRec.Description;
        END;
      END;
    END;

    LOCAL PROCEDURE GetRateGroup@1100525001();
    BEGIN
      //C035780
      IF NOT RateGroupRec.GET(RateGroupTo) THEN BEGIN
        RateGroupTo := RateGroupFrom;
        RateGroupToTxt := RateGroupFromTxt;
      END ELSE BEGIN
        RateGroupToTxt := RateGroupRec.Description;
      END;
    END;

    BEGIN
    {
      db, 13-10-15: SourceTable (Estimate) removed; DPA-actions skipped
    }
    END.
  }
}

