OBJECT Codeunit 11012180 Site Mngmnt. Hrs Replic. File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            //Create All
            CreateTables(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE);
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1100529007 : Record 79;
      SiteMngmntHoursSetup@1100528304 : Record 11012355;
      TmpError@1100529001 : TEMPORARY Record 11012051;
      FPSLicenseManagement@1100529000 : Codeunit 11229289;
      Window@1100525000 : Dialog;
      Text010@1100529006 : TextConst 'ENU=Counter';
      Text011@1100409007 : TextConst 'ENU=No read permission for company ''%1'', table ''%2''';
      Text012@1100529002 : TextConst 'ENU=%1 ''%2'': Field %3 is not filled';
      NewCompany@1100528309 : Boolean;
      Counter@1100529005 : Integer;
      ProjectStatusFilter@1100529003 : Text;
      ServiceOrderStatusFilter@1100529004 : Text;

    PROCEDURE CreateTables@1100485000(UpdateEmployees@1100529003 : Boolean;UpdateWageComponents@1100529004 : Boolean;UpdateCostCodes@1100529005 : Boolean;UpdateProjects@1100529006 : Boolean;UpdateServiceOrders@1100529007 : Boolean;UpdateResourceRequests@1100529008 : Boolean);
    VAR
      SiteManagementHoursCompanies@1100529001 : Record 11012356;
      SiteMgtHoursCode@1100529000 : Record 11012358;
    BEGIN
      CompanyInformation.GET;
      SiteMngmntHoursSetup.GET;
      FillProjectStatusFilter;
      FillServiceOrderStatusFilter;
      IF GUIALLOWED THEN BEGIN
        Window.OPEN(
          SiteMgtHoursCode.FIELDCAPTION(Company) + ' #1#################### \' +
          SiteMgtHoursCode.FIELDCAPTION(Type) + ' #2#################### \' +
          Text010 + ' #3####################');
      END;
      SetReleationCodeFilterOnSiteMgtCompanies(SiteManagementHoursCompanies);
      IF SiteManagementHoursCompanies.FINDSET THEN BEGIN
        REPEAT
          NewCompany := TRUE;
          WindowUpdate(1, SiteManagementHoursCompanies.Company);
          IF UpdateEmployees THEN
            ProcessEmployees(SiteManagementHoursCompanies.Company);
          IF UpdateWageComponents THEN
            ProcessWageComponents(SiteManagementHoursCompanies.Company);
          IF UpdateCostCodes THEN
            ProcessCostCodes(SiteManagementHoursCompanies.Company);
          IF UpdateProjects THEN
            ProcessProjects(SiteManagementHoursCompanies.Company);
          IF UpdateServiceOrders THEN
            ProcessServiceOrders(SiteManagementHoursCompanies.Company);
          IF UpdateResourceRequests THEN
            ProcessResourceRequests(SiteManagementHoursCompanies.Company);
        UNTIL SiteManagementHoursCompanies.NEXT = 0;
      END;
      COMMIT;
      IF GUIALLOWED THEN BEGIN
        Window.CLOSE;
        ShowErrors;
      END;
    END;

    LOCAL PROCEDURE ProcessEmployees@1100529002(CurrentCompany@1100529001 : Text);
    VAR
      Employee@1100529000 : Record 5200;
      SiteMgtEmployee@1100529002 : Record 11012357;
      NewRecord@1100529004 : Boolean;
    BEGIN
      IF NOT InitProcessEmployees(Employee, CurrentCompany) THEN
        EXIT;
      IF Employee.FINDSET THEN BEGIN
        REPEAT
          WindowUpdate(3, '');
          NewRecord := FALSE;
          IF NOT SiteMgtEmployee.GET(CurrentCompany, Employee."No.") THEN BEGIN
            SiteMgtEmployee.INIT;
            SiteMgtEmployee.Company := CurrentCompany;
            SiteMgtEmployee."No." := Employee."No.";
            SiteMgtEmployee.INSERT;
            NewRecord := TRUE;
          END;
          IF NewRecord OR
             (SiteMgtEmployee."Full Name" <> Employee."Full Name") OR
             (SiteMgtEmployee."Norm Hours" <> Employee."Norm Hours") OR
             (SiteMgtEmployee."Norm Days" <> Employee."Norm Days") OR
             (SiteMgtEmployee."Trade Association" <> Employee."Trade Association") OR
             (SiteMgtEmployee.External <> Employee.External) OR
             (SiteMgtEmployee.Employer <> Employee.Employer) OR
             (SiteMgtEmployee."Search Name" <> Employee."Search Name") OR
             (SiteMgtEmployee."Global Dimension 2 Code" <> Employee."Global Dimension 2 Code") OR
             (SiteMgtEmployee."Territory Code" <> Employee."Territory Code") OR
             (SiteMgtEmployee."Account Hours" <> Employee."Account Hours") OR
             (SiteMgtEmployee.CAO <> Employee.CAO) OR
             (SiteMgtEmployee."Show in Hours Portal" <> Employee."Show in Hours Portal") OR
             (SiteMgtEmployee."Department Code" <> Employee."Global Dimension 1 Code") OR
             (SiteMgtEmployee."Job Title" <> Employee."Job Title")
          THEN BEGIN
            SiteMgtEmployee."Full Name" := Employee."Full Name";
            SiteMgtEmployee."Norm Hours" := Employee."Norm Hours";
            SiteMgtEmployee."Norm Days" := Employee."Norm Days";
            SiteMgtEmployee."Trade Association" := Employee."Trade Association";
            SiteMgtEmployee.External := Employee.External;
            SiteMgtEmployee.VALIDATE(Employer, Employee.Employer);
            SiteMgtEmployee."Search Name" := Employee."Search Name";
            SiteMgtEmployee."Global Dimension 2 Code" := Employee."Global Dimension 2 Code";
            SiteMgtEmployee."Territory Code" := Employee."Territory Code";
            SiteMgtEmployee."Account Hours" := Employee."Account Hours";
            SiteMgtEmployee.CAO := Employee.CAO;
            SiteMgtEmployee."Show in Hours Portal" := Employee."Show in Hours Portal";
            SiteMgtEmployee."Department Code" := Employee."Global Dimension 1 Code";
            SiteMgtEmployee."Job Title" := Employee."Job Title";
            SiteMgtEmployee.MODIFY;
            COMMIT;
          END;
          CheckEmployee(CurrentCompany, Employee);
        UNTIL Employee.NEXT = 0;
      END;
      DeleteSiteMgtEmployeesNotValidAnymore(Employee, CurrentCompany);
    END;

    LOCAL PROCEDURE InitProcessEmployees@1100529005(VAR Employee@1100529000 : Record 5200;CurrentCompany@1100529001 : Text) : Boolean;
    BEGIN
      WindowUpdate(2, Employee.TABLECAPTION);
      Employee.CHANGECOMPANY(CurrentCompany);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(Employee) THEN BEGIN
        WriteError(CurrentCompany, STRSUBSTNO(Text011, CurrentCompany, Employee.TABLECAPTION));
        EXIT(FALSE);
      END;
      Employee.SETFILTER(CAO, '<>%1','');
      Employee.SETRANGE(Status, Employee.Status::Active);
      Employee.SETRANGE("Account Hours", Employee."Account Hours"::"Required according to Norm", Employee."Account Hours"::Optional);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSiteMgtEmployeesNotValidAnymore@1100529013(VAR Employee@1100529000 : Record 5200;CurrentCompany@1100529001 : Text);
    VAR
      SiteMgtEmployee@1100529002 : Record 11012357;
    BEGIN
      SiteMgtEmployee.SETRANGE(Company, CurrentCompany);
      IF NOT SiteMgtEmployee.FINDFIRST THEN
        EXIT;
      REPEAT
        WindowUpdate(3, '');
        Employee.SETRANGE("No.", SiteMgtEmployee."No.");  // Company and other filters as set in InitProcess (passed by Var)
        IF Employee.ISEMPTY THEN BEGIN
          SiteMgtEmployee.DELETE;
          COMMIT;
        END;
      UNTIL SiteMgtEmployee.NEXT = 0;
      Employee.SETRANGE("No.");
    END;

    LOCAL PROCEDURE ProcessWageComponents@1100529009(CurrentCompany@1100529001 : Text);
    VAR
      WageComponent@1100529000 : Record 11012014;
      SiteMgtHourCode_WageComp@1100529002 : Record 11012358;
      NewRecord@1100529004 : Boolean;
    BEGIN
      IF NOT InitProcessWageComponents(WageComponent, CurrentCompany) THEN
        EXIT;
      WageComponent.SETFILTER("Component Type",'%1|%2', WageComponent."Component Type"::Hours, WageComponent."Component Type"::Expenses);
      IF WageComponent.FINDSET THEN BEGIN
        REPEAT
          WindowUpdate(3, '');
          NewRecord := FALSE;
          IF NOT SiteMgtHourCode_WageComp.GET(CurrentCompany, SiteMgtHourCode_WageComp.Type::"Wage Components", '', WageComponent.Code) THEN BEGIN
            SiteMgtHourCode_WageComp.INIT;
            SiteMgtHourCode_WageComp.Company := CurrentCompany;
            SiteMgtHourCode_WageComp.Type := SiteMgtHourCode_WageComp.Type::"Wage Components";
            SiteMgtHourCode_WageComp."Project No." := '';
            SiteMgtHourCode_WageComp.Code := WageComponent.Code;
            SiteMgtHourCode_WageComp.INSERT;
            NewRecord := TRUE;
          END;
          IF NewRecord OR
             (SiteMgtHourCode_WageComp.Description <> WageComponent.Description) OR
             (SiteMgtHourCode_WageComp."Component Type" <> WageComponent."Component Type") OR
             (SiteMgtHourCode_WageComp.Overtime <> WageComponent.Overtime) OR
             (SiteMgtHourCode_WageComp."CAO Filter" <> WageComponent."CAO Filter")
          THEN BEGIN
            SiteMgtHourCode_WageComp.Description := WageComponent.Description;
            SiteMgtHourCode_WageComp."Component Type" := WageComponent."Component Type";
            SiteMgtHourCode_WageComp.Overtime := WageComponent.Overtime;
            SiteMgtHourCode_WageComp."CAO Filter" := WageComponent."CAO Filter";
            SiteMgtHourCode_WageComp.MODIFY;
            COMMIT;
          END;
        UNTIL WageComponent.NEXT = 0;
      END;
      DeleteSiteMgtWageComponentsNotValidAnymore(WageComponent, CurrentCompany);
    END;

    LOCAL PROCEDURE InitProcessWageComponents@1100529020(VAR WageComponent@1100529000 : Record 11012014;CurrentCompany@1100529001 : Text) : Boolean;
    BEGIN
      WindowUpdate(2, WageComponent.TABLECAPTION);
      WageComponent.CHANGECOMPANY(CurrentCompany);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(WageComponent) THEN BEGIN
        WriteError(CurrentCompany, STRSUBSTNO(Text011, CurrentCompany, WageComponent.TABLECAPTION));
        EXIT(FALSE);
      END;
      WageComponent.SETFILTER("Component Type",'%1|%2', WageComponent."Component Type"::Hours, WageComponent."Component Type"::Expenses);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSiteMgtWageComponentsNotValidAnymore@1100529021(VAR WageComponent@1100529000 : Record 11012014;CurrentCompany@1100529001 : Text);
    VAR
      SiteMgtHourCode_WageComp@1100529002 : Record 11012358;
    BEGIN
      SiteMgtHourCode_WageComp.SETRANGE(Company, CurrentCompany);
      SiteMgtHourCode_WageComp.SETRANGE(Type, SiteMgtHourCode_WageComp.Type::"Wage Components");
      IF NOT SiteMgtHourCode_WageComp.FINDFIRST THEN
        EXIT;
      REPEAT
        WindowUpdate(3, '');
        WageComponent.SETRANGE(Code, SiteMgtHourCode_WageComp.Code);  // Company and other filters as set in InitProcess (passed by Var)
        IF WageComponent.ISEMPTY THEN BEGIN
          SiteMgtHourCode_WageComp.DELETE;
          COMMIT;
        END;
      UNTIL SiteMgtHourCode_WageComp.NEXT = 0;
      WageComponent.SETRANGE(Code);
    END;

    LOCAL PROCEDURE ProcessCostCodes@1100529001(CurrentCompany@1100529001 : Text);
    VAR
      CostCode@1100529000 : Record 11012083;
      SiteMgtHoursObject_CostCode@1100529002 : Record 11012359;
      SiteMgtHoursCompany@1100529003 : Record 11012356;
      NewRecord@1100529004 : Boolean;
    BEGIN
      IF NOT InitProcessCostCodes(CostCode, CurrentCompany) THEN
        EXIT;
      IF CostCode.FINDSET THEN BEGIN
        SetReleationCodeFilterOnSiteMgtCompanies(SiteMgtHoursCompany);
        REPEAT
          WindowUpdate(3, '');
          IF SiteMgtHoursCompany.FINDSET THEN BEGIN
            REPEAT
              SiteMgtHoursObject_CostCode.CHANGECOMPANY(SiteMgtHoursCompany.Company);
              NewRecord := FALSE;
              IF NOT SiteMgtHoursObject_CostCode.GET(CurrentCompany, SiteMgtHoursObject_CostCode.Type::"Cost Code", CostCode.Code) THEN BEGIN
                SiteMgtHoursObject_CostCode.INIT;
                SiteMgtHoursObject_CostCode.Company := CurrentCompany;
                SiteMgtHoursObject_CostCode.Type := SiteMgtHoursObject_CostCode.Type::"Cost Code";
                SiteMgtHoursObject_CostCode.Code := CostCode.Code;
                SiteMgtHoursObject_CostCode.INSERT;
                NewRecord := TRUE;
              END;
              IF NewRecord OR
                 (SiteMgtHoursObject_CostCode.Description <> CostCode.Description) OR
                 (SiteMgtHoursObject_CostCode."Department Code" <> CostCode."Global Dimension 1 Code")
              THEN BEGIN
                SiteMgtHoursObject_CostCode.Description := CostCode.Description;
                SiteMgtHoursObject_CostCode."Department Code" := CostCode."Global Dimension 1 Code";
                SiteMgtHoursObject_CostCode.MODIFY;
                COMMIT;
              END;
            UNTIL SiteMgtHoursCompany.NEXT = 0;
          END;
        UNTIL CostCode.NEXT = 0;
      END;
      DeleteSiteMgtCostCodesNotValidAnymore(CostCode, CurrentCompany);
    END;

    LOCAL PROCEDURE InitProcessCostCodes@1100529026(VAR CostCode@1100529000 : Record 11012083;CurrentCompany@1100529001 : Text) : Boolean;
    BEGIN
      WindowUpdate(2, CostCode.TABLECAPTION);
      CostCode.CHANGECOMPANY(CurrentCompany);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(CostCode) THEN BEGIN
        WriteError(CurrentCompany, STRSUBSTNO(Text011, CurrentCompany, CostCode.TABLECAPTION));
        EXIT(FALSE);
      END;
      CostCode.SETRANGE(Blocked, FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSiteMgtCostCodesNotValidAnymore@1100529027(VAR CostCode@1100529000 : Record 11012083;CurrentCompany@1100529001 : Text);
    VAR
      SiteMgtHoursCompany@1100529003 : Record 11012356;
      SiteMgtHoursObject_CostCode@1100529002 : Record 11012359;
    BEGIN
      IF SiteMgtHoursCompany.FINDSET THEN BEGIN
        REPEAT
          SiteMgtHoursObject_CostCode.CHANGECOMPANY(SiteMgtHoursCompany.Company);
          SiteMgtHoursObject_CostCode.SETRANGE(Company, CurrentCompany);
          SiteMgtHoursObject_CostCode.SETRANGE(Type, SiteMgtHoursObject_CostCode.Type::"Cost Code");
          IF SiteMgtHoursObject_CostCode.FINDFIRST THEN BEGIN
            IF SiteMgtHoursCompany."Relation Code" <> GetHoursCompanyInfoRelationCode(CurrentCompany) THEN BEGIN
              WindowUpdate(3, '');
              SiteMgtHoursObject_CostCode.DELETEALL;
              COMMIT;
            END ELSE BEGIN
              REPEAT
                WindowUpdate(3, '');
                CostCode.SETRANGE(Code, SiteMgtHoursObject_CostCode.Code);  // Company and other filters as set in InitProcess (passed by Var)
                IF CostCode.ISEMPTY THEN BEGIN
                  SiteMgtHoursObject_CostCode.DELETE;
                  COMMIT;
                END;
              UNTIL SiteMgtHoursObject_CostCode.NEXT = 0;
            END;
          END;
        UNTIL SiteMgtHoursCompany.NEXT = 0;
      END;
      CostCode.SETRANGE(Code);
    END;

    LOCAL PROCEDURE ProcessProjects@1100529003(CurrentCompany@1100529001 : Text);
    VAR
      Project@1100529000 : Record 11072003;
      SiteMgtHoursObject_Project@1100529002 : Record 11012359;
      SiteMgtHoursCompany@1100529003 : Record 11012356;
      NewRecord@1100529004 : Boolean;
    BEGIN
      IF NOT InitProcessProjects(Project, CurrentCompany) THEN
        EXIT;
      IF ProjectStatusFilter <> '' THEN BEGIN
        IF Project.FINDSET THEN BEGIN
          SetReleationCodeFilterOnSiteMgtCompanies(SiteMgtHoursCompany);
          REPEAT
            WindowUpdate(3, '');
            IF SiteMgtHoursCompany.FINDSET THEN BEGIN
              REPEAT
                SiteMgtHoursObject_Project.CHANGECOMPANY(SiteMgtHoursCompany.Company);
                NewRecord := FALSE;
                IF NOT SiteMgtHoursObject_Project.GET(CurrentCompany, SiteMgtHoursObject_Project.Type::Project, Project."No.") THEN BEGIN
                  SiteMgtHoursObject_Project.INIT;
                  SiteMgtHoursObject_Project.Company := CurrentCompany;
                  SiteMgtHoursObject_Project.Type := SiteMgtHoursObject_Project.Type::Project;
                  SiteMgtHoursObject_Project.Code := Project."No.";
                  SiteMgtHoursObject_Project.INSERT;
                  NewRecord := TRUE;
                END;
                IF NewRecord OR
                   (SiteMgtHoursObject_Project.Description <> Project.Description) OR
                   (SiteMgtHoursObject_Project."Department Code" <> Project."Global Dimension 1 Code") OR
                   (SiteMgtHoursObject_Project.Address <> Project.Address + ' ' + Project.City)
                THEN BEGIN
                  SiteMgtHoursObject_Project.Description := Project.Description;
                  SiteMgtHoursObject_Project."Department Code" := Project."Global Dimension 1 Code";
                  SiteMgtHoursObject_Project.Address := Project.Address + ' ' + Project.City;
                  SiteMgtHoursObject_Project.MODIFY;
                  COMMIT;
                END;
              UNTIL SiteMgtHoursCompany.NEXT = 0;
            END;
            CheckProject(CurrentCompany, Project);
            ProcessProjectElements(CurrentCompany, Project."No.");
          UNTIL Project.NEXT = 0;
        END;
      END;
      DeleteSiteMgtProjectsNotValidAnymore(Project, CurrentCompany);
    END;

    LOCAL PROCEDURE InitProcessProjects@1100529006(VAR Project@1100529000 : Record 11072003;CurrentCompany@1100529001 : Text) : Boolean;
    VAR
      ProjectElement@1100529002 : Record 11012010;
    BEGIN
      WindowUpdate(2, Project.TABLECAPTION);
      Project.CHANGECOMPANY(CurrentCompany);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(Project) THEN BEGIN
        WriteError(CurrentCompany, STRSUBSTNO(Text011, CurrentCompany, Project.TABLECAPTION));
        EXIT(FALSE);
      END;
      ProjectElement.CHANGECOMPANY(CurrentCompany);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ProjectElement) THEN BEGIN
        WriteError(CurrentCompany, STRSUBSTNO(Text011, CurrentCompany, ProjectElement.TABLECAPTION));
        EXIT(FALSE);
      END;
      Project.SETFILTER("Project Status", ProjectStatusFilter);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSiteMgtProjectsNotValidAnymore@1100529014(VAR Project@1100529000 : Record 11072003;CurrentCompany@1100529001 : Text);
    VAR
      SiteMgtHoursCompany@1100529005 : Record 11012356;
      SiteMgtHoursObject_Project@1100529002 : Record 11012359;
      SiteMgtHourCode_ProjElem@1100529004 : Record 11012358;
    BEGIN
      IF SiteMgtHoursCompany.FINDSET THEN BEGIN
        REPEAT
          SiteMgtHoursObject_Project.CHANGECOMPANY(SiteMgtHoursCompany.Company);
          SiteMgtHoursObject_Project.SETRANGE(Company, CurrentCompany);
          SiteMgtHoursObject_Project.SETRANGE(Type, SiteMgtHoursObject_Project.Type::Project);
          IF SiteMgtHoursObject_Project.FINDFIRST THEN BEGIN
            IF SiteMgtHoursCompany."Relation Code" <> GetHoursCompanyInfoRelationCode(CurrentCompany) THEN BEGIN
              WindowUpdate(3, '');
              SiteMgtHoursObject_Project.DELETEALL;
              COMMIT;
            END ELSE BEGIN
              REPEAT
                WindowUpdate(3, '');
                Project.SETRANGE("No.", SiteMgtHoursObject_Project.Code);  // Company and other filters as set in InitProcess (passed by Var)
                IF (Project.ISEMPTY) OR (ProjectStatusFilter = '') THEN BEGIN
                  SiteMgtHoursObject_Project.DELETE;
                  IF SiteMgtHoursCompany.Company = CurrentCompany THEN BEGIN
                    SiteMgtHourCode_ProjElem.SETRANGE(Company, CurrentCompany);
                    SiteMgtHourCode_ProjElem.SETRANGE(Type, SiteMgtHourCode_ProjElem.Type::Element);
                    SiteMgtHourCode_ProjElem.SETRANGE("Project No.", SiteMgtHoursObject_Project.Code);
                    SiteMgtHourCode_ProjElem.DELETEALL;
                  END;
                  COMMIT;
                END;
              UNTIL SiteMgtHoursObject_Project.NEXT = 0;
            END;
          END;
        UNTIL SiteMgtHoursCompany.NEXT = 0;
      END;
      Project.SETRANGE("No.");
    END;

    LOCAL PROCEDURE ProcessProjectElements@1100529004(CurrentCompany@1100529000 : Text;ProjectNo@1100529002 : Code[20]);
    VAR
      ProjectElement@1100529001 : Record 11012010;
      SiteMgtHourCode_ProjElem@1100529003 : Record 11012358;
      NewRecord@1100529004 : Boolean;
    BEGIN
      ProjectElement.CHANGECOMPANY(CurrentCompany);
      ProjectElement.SETRANGE("Project No.", ProjectNo);
      IF ProjectElement.FINDSET THEN BEGIN
        REPEAT
          NewRecord := FALSE;
          IF NOT SiteMgtHourCode_ProjElem.GET(CurrentCompany, SiteMgtHourCode_ProjElem.Type::Element, ProjectNo, ProjectElement.Element) THEN BEGIN
            SiteMgtHourCode_ProjElem.INIT;
            SiteMgtHourCode_ProjElem.Company := CurrentCompany;
            SiteMgtHourCode_ProjElem.Type := SiteMgtHourCode_ProjElem.Type::Element;
            SiteMgtHourCode_ProjElem."Project No." := ProjectNo;
            SiteMgtHourCode_ProjElem.Code := ProjectElement.Element;
            SiteMgtHourCode_ProjElem.INSERT;
            NewRecord := TRUE;
          END;
          IF NewRecord OR
             (SiteMgtHourCode_ProjElem.Description <> ProjectElement.Description) OR
             (SiteMgtHourCode_ProjElem.Blocked <> ProjectElement.Blocked)
          THEN BEGIN
            SiteMgtHourCode_ProjElem.Description := ProjectElement.Description;
            SiteMgtHourCode_ProjElem.Blocked := ProjectElement.Blocked;
            SiteMgtHourCode_ProjElem.MODIFY;
            COMMIT;
          END;
        UNTIL ProjectElement.NEXT = 0;
      END;
      DeleteSiteMgtProjectElementsNotValidAnymore(CurrentCompany, ProjectNo)
    END;

    LOCAL PROCEDURE DeleteSiteMgtProjectElementsNotValidAnymore@1100529029(CurrentCompany@1100529001 : Text;ProjectNo@1100529005 : Code[20]);
    VAR
      SiteMgtHourCode_ProjElem@1100529004 : Record 11012358;
      ProjectElement@1100529003 : Record 11012010;
    BEGIN
      ProjectElement.CHANGECOMPANY(CurrentCompany);
      SiteMgtHourCode_ProjElem.SETRANGE(Company, CurrentCompany);
      SiteMgtHourCode_ProjElem.SETRANGE(Type, SiteMgtHourCode_ProjElem.Type::Element);
      SiteMgtHourCode_ProjElem.SETRANGE("Project No.", ProjectNo);
      IF NOT SiteMgtHourCode_ProjElem.FINDFIRST THEN
        EXIT;
      REPEAT
        ProjectElement.SETRANGE("Project No.", SiteMgtHourCode_ProjElem."Project No.");
        ProjectElement.SETRANGE(Element, SiteMgtHourCode_ProjElem.Code);
        IF ProjectElement.ISEMPTY THEN BEGIN
          SiteMgtHourCode_ProjElem.DELETE;
          COMMIT;
        END;
      UNTIL SiteMgtHourCode_ProjElem.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessServiceOrders@1100529011(CurrentCompany@1100529001 : Text);
    VAR
      ServiceOrder@1100529000 : Record 11012823;
      SiteMgtHoursObject_ServOrder@1100529002 : Record 11012359;
      SiteMgtHoursCompany@1100529003 : Record 11012356;
      NewRecord@1100529004 : Boolean;
    BEGIN
      IF NOT InitProcessServiceOrders(ServiceOrder, CurrentCompany) THEN
        EXIT;
      IF ServiceOrderStatusFilter <> '' THEN BEGIN
        IF ServiceOrder.FINDSET THEN BEGIN
          SetReleationCodeFilterOnSiteMgtCompanies(SiteMgtHoursCompany);
          REPEAT
            WindowUpdate(3, '');
            IF SiteMgtHoursCompany.FINDSET THEN BEGIN
              REPEAT
                SiteMgtHoursObject_ServOrder.CHANGECOMPANY(SiteMgtHoursCompany.Company);
                NewRecord := FALSE;
                IF NOT SiteMgtHoursObject_ServOrder.GET(CurrentCompany, SiteMgtHoursObject_ServOrder.Type::"Service Order", ServiceOrder."No.") THEN BEGIN
                  SiteMgtHoursObject_ServOrder.INIT;
                  SiteMgtHoursObject_ServOrder.Company := CurrentCompany;
                  SiteMgtHoursObject_ServOrder.Type := SiteMgtHoursObject_ServOrder.Type::"Service Order";
                  SiteMgtHoursObject_ServOrder.Code := ServiceOrder."No.";
                  SiteMgtHoursObject_ServOrder.INSERT;
                  NewRecord := TRUE;
                END;
                IF NewRecord OR
                   (SiteMgtHoursObject_ServOrder.Description <> ServiceOrder.Description) OR
                   (SiteMgtHoursObject_ServOrder."Department Code" <> ServiceOrder."Global Dimension 1 Code") OR
                   (SiteMgtHoursObject_ServOrder.Address <> ServiceOrder.Address + ' ' + ServiceOrder.City)
                THEN BEGIN
                  SiteMgtHoursObject_ServOrder.Description := ServiceOrder.Description;
                  SiteMgtHoursObject_ServOrder."Department Code" := ServiceOrder."Global Dimension 1 Code";
                  SiteMgtHoursObject_ServOrder.Address := ServiceOrder.Address + ' ' + ServiceOrder.City;
                  SiteMgtHoursObject_ServOrder.MODIFY;
                  COMMIT;
                END;
              UNTIL SiteMgtHoursCompany.NEXT = 0;
            END;
            CheckServiceOrder(CurrentCompany, ServiceOrder);
          UNTIL ServiceOrder.NEXT = 0;
        END;
      END;
      DeleteSiteMgtServiceOrdersNotValidAnymore(ServiceOrder, CurrentCompany);
    END;

    LOCAL PROCEDURE InitProcessServiceOrders@1100529019(VAR ServiceOrder@1100529000 : Record 11012823;CurrentCompany@1100529001 : Text) : Boolean;
    VAR
      ServiceSetup@1100529002 : Record 11012800;
    BEGIN
      WindowUpdate(2, ServiceOrder.TABLECAPTION);
      ServiceOrder.CHANGECOMPANY(CurrentCompany);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceOrder) THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceSetup) THEN
          WriteError(CurrentCompany, STRSUBSTNO(Text011, CurrentCompany, ServiceOrder.TABLECAPTION));
        EXIT(FALSE);
      END;
      ServiceOrder.SETFILTER(Status, ServiceOrderStatusFilter);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSiteMgtServiceOrdersNotValidAnymore@1100529022(VAR ServiceOrder@1100529000 : Record 11012823;CurrentCompany@1100529001 : Text);
    VAR
      SiteMgtHoursCompany@1100529003 : Record 11012356;
      SiteMgtHoursObject_ServOrder@1100529002 : Record 11012359;
    BEGIN
      IF SiteMgtHoursCompany.FINDSET THEN BEGIN
        REPEAT
          SiteMgtHoursObject_ServOrder.CHANGECOMPANY(SiteMgtHoursCompany.Company);
          SiteMgtHoursObject_ServOrder.SETRANGE(Company, CurrentCompany);
          SiteMgtHoursObject_ServOrder.SETRANGE(Type, SiteMgtHoursObject_ServOrder.Type::"Service Order");
          IF SiteMgtHoursObject_ServOrder.FINDFIRST THEN BEGIN
            IF SiteMgtHoursCompany."Relation Code" <> GetHoursCompanyInfoRelationCode(CurrentCompany) THEN BEGIN
              WindowUpdate(3, '');
              SiteMgtHoursObject_ServOrder.DELETEALL;
              COMMIT;
            END ELSE BEGIN
              REPEAT
                WindowUpdate(3, '');
                ServiceOrder.SETRANGE("No.", SiteMgtHoursObject_ServOrder.Code);  // Company and other filters as set in InitProcess (passed by Var)
                IF ServiceOrder.ISEMPTY THEN BEGIN
                  SiteMgtHoursObject_ServOrder.DELETE;
                  COMMIT;
                END;
              UNTIL SiteMgtHoursObject_ServOrder.NEXT = 0;
            END;
          END;
        UNTIL SiteMgtHoursCompany.NEXT = 0;
      END;
      ServiceOrder.SETRANGE("No.");
    END;

    LOCAL PROCEDURE ProcessResourceRequests@1100529012(CurrentCompany@1100529001 : Text);
    VAR
      ResourceRequest@1100529000 : Record 11124901;
      SiteMgtHoursObject_RsrcReq@1100529002 : Record 11012359;
      SiteMgtHoursCompany@1100529003 : Record 11012356;
      NewRecord@1100529004 : Boolean;
    BEGIN
      IF NOT InitProcessResourceRequests(ResourceRequest, CurrentCompany) THEN
        EXIT;
      IF ResourceRequest.FINDSET THEN BEGIN
        SetReleationCodeFilterOnSiteMgtCompanies(SiteMgtHoursCompany);
        REPEAT
          WindowUpdate(3, '');
          IF IsValidResourceRequest(ResourceRequest, CurrentCompany) THEN BEGIN
            IF SiteMgtHoursCompany.FINDSET THEN BEGIN
              REPEAT
                SiteMgtHoursObject_RsrcReq.CHANGECOMPANY(SiteMgtHoursCompany.Company);
                NewRecord := FALSE;
                IF NOT SiteMgtHoursObject_RsrcReq.GET(CurrentCompany, SiteMgtHoursObject_RsrcReq.Type::Request, ResourceRequest."No.") THEN BEGIN
                  SiteMgtHoursObject_RsrcReq.INIT;
                  SiteMgtHoursObject_RsrcReq.Company := CurrentCompany;
                  SiteMgtHoursObject_RsrcReq.Type := SiteMgtHoursObject_RsrcReq.Type::Request;
                  SiteMgtHoursObject_RsrcReq.Code := ResourceRequest."No.";
                  SiteMgtHoursObject_RsrcReq.INSERT;
                  NewRecord := TRUE;
                END;
                IF NewRecord OR
                   (SiteMgtHoursObject_RsrcReq.Description <> ResourceRequest.Description) OR
                   (SiteMgtHoursObject_RsrcReq.Address <> ResourceRequest.Address + ' ' + ResourceRequest.City)
                THEN BEGIN
                  SiteMgtHoursObject_RsrcReq.Description := ResourceRequest.Description;
                  SiteMgtHoursObject_RsrcReq.Address := ResourceRequest.Address + ' ' + ResourceRequest.City;
                  SiteMgtHoursObject_RsrcReq.MODIFY;
                  COMMIT;
                END;
              UNTIL SiteMgtHoursCompany.NEXT = 0;
            END;
          END;
        UNTIL ResourceRequest.NEXT = 0;
      END;
      DeleteSiteMgtResourceRequestsNotValidAnymore(ResourceRequest, CurrentCompany);
    END;

    LOCAL PROCEDURE InitProcessResourceRequests@1100529031(VAR ResourceRequest@1100529000 : Record 11124901;CurrentCompany@1100529001 : Text) : Boolean;
    VAR
      ResourcePlanningSetup@1100529002 : Record 11124900;
    BEGIN
      WindowUpdate(2, ResourceRequest.TABLECAPTION);
      ResourceRequest.CHANGECOMPANY(CurrentCompany);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ResourceRequest) THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ResourcePlanningSetup) THEN
          WriteError(CurrentCompany, STRSUBSTNO(Text011, CurrentCompany, ResourceRequest.TABLECAPTION));
        EXIT(FALSE);
      END;
      ResourceRequest.SETFILTER("Created on", '>=%1', CREATEDATETIME(TODAY-(2*365),0T));
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSiteMgtResourceRequestsNotValidAnymore@1100529033(VAR ResourceRequest@1100529000 : Record 11124901;CurrentCompany@1100529001 : Text);
    VAR
      SiteMgtHoursCompany@1100529004 : Record 11012356;
      SiteMgtHoursObject_RsrcReq@1100529002 : Record 11012359;
      DeleteRecord@1100529003 : Boolean;
    BEGIN
      IF SiteMgtHoursCompany.FINDSET THEN BEGIN
        REPEAT
          SiteMgtHoursObject_RsrcReq.CHANGECOMPANY(SiteMgtHoursCompany.Company);
          SiteMgtHoursObject_RsrcReq.SETRANGE(Company, CurrentCompany);
          SiteMgtHoursObject_RsrcReq.SETRANGE(Type, SiteMgtHoursObject_RsrcReq.Type::Request);
          IF SiteMgtHoursObject_RsrcReq.FINDFIRST THEN BEGIN
            IF SiteMgtHoursCompany."Relation Code" <> GetHoursCompanyInfoRelationCode(CurrentCompany) THEN BEGIN
              WindowUpdate(3, '');
              SiteMgtHoursObject_RsrcReq.DELETEALL;
              COMMIT;
            END ELSE BEGIN
              REPEAT
                WindowUpdate(3, '');
                ResourceRequest.SETRANGE("No.", SiteMgtHoursObject_RsrcReq.Code);  // Company and other filters as set in InitProcess (passed by Var)
                DeleteRecord := (NOT ResourceRequest.FINDFIRST);
                IF NOT DeleteRecord THEN
                  DeleteRecord := (NOT IsValidResourceRequest(ResourceRequest, CurrentCompany));
                IF DeleteRecord THEN BEGIN
                  SiteMgtHoursObject_RsrcReq.DELETE;
                  COMMIT;
                END;
              UNTIL SiteMgtHoursObject_RsrcReq.NEXT = 0;
            END;
          END;
        UNTIL SiteMgtHoursCompany.NEXT = 0;
      END;
      ResourceRequest.SETRANGE("No.");
    END;

    LOCAL PROCEDURE IsValidResourceRequest@1100529036(ResourceRequest@1100529000 : Record 11124901;CurrentCompany@1100529001 : Text) : Boolean;
    VAR
      Project@1100529002 : Record 11072003;
      ServiceOrder@1100529003 : Record 11012823;
    BEGIN
      IF ResourceRequest.Status = ResourceRequest.Status::Open THEN
        EXIT(TRUE);
      CASE ResourceRequest."Source Type" OF
        ResourceRequest."Source Type"::Project:
          BEGIN
            IF (ProjectStatusFilter <> '') AND (ResourceRequest."Source No." <> '') THEN BEGIN
              IF ResourceRequest."Receiving Company" <> '' THEN
                Project.CHANGECOMPANY(ResourceRequest."Receiving Company")
              ELSE
                Project.CHANGECOMPANY(CurrentCompany);
              IF FPSLicenseManagement.LicenseAndReadPermissionForTable(Project) THEN BEGIN
                Project.SETRANGE("No.", ResourceRequest."Source No.");
                Project.SETFILTER("Project Status", ProjectStatusFilter);
                EXIT(NOT Project.ISEMPTY)
              END;
            END;
          END;
        ResourceRequest."Source Type"::ServiceOrder:
          BEGIN
            IF (ServiceOrderStatusFilter <> '') AND (ResourceRequest."Source No." <> '') THEN BEGIN
              IF ResourceRequest."Receiving Company" <> '' THEN
                ServiceOrder.CHANGECOMPANY(ResourceRequest."Receiving Company")
              ELSE
                ServiceOrder.CHANGECOMPANY(CurrentCompany);
              IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceOrder) THEN BEGIN
                ServiceOrder.SETRANGE("No.", ResourceRequest."Source No.");
                ServiceOrder.SETFILTER(Status, ServiceOrderStatusFilter);
                EXIT(NOT ServiceOrder.ISEMPTY)
              END;
            END;
          END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillProjectStatusFilter@1100529007();
    VAR
      Project@1100529000 : Record 11072003;
    BEGIN
      ProjectStatusFilter := '';
      IF SiteMngmntHoursSetup.Estimating THEN
        AddStatusToProjectStatusFilter(ProjectStatusFilter, Project."Project Status"::Estimation);
      IF SiteMngmntHoursSetup.Preparation THEN
        AddStatusToProjectStatusFilter(ProjectStatusFilter, Project."Project Status"::Preparation);
      IF SiteMngmntHoursSetup.Production THEN
        AddStatusToProjectStatusFilter(ProjectStatusFilter, Project."Project Status"::Production);
      IF SiteMngmntHoursSetup."Technical Finished" THEN
        AddStatusToProjectStatusFilter(ProjectStatusFilter, Project."Project Status"::"Technical Finished");
      IF SiteMngmntHoursSetup."Administrative Finished" THEN
        AddStatusToProjectStatusFilter(ProjectStatusFilter, Project."Project Status"::"Administrative Finished");
      IF SiteMngmntHoursSetup.Finished THEN
        AddStatusToProjectStatusFilter(ProjectStatusFilter, Project."Project Status"::Finished);
    END;

    LOCAL PROCEDURE AddStatusToProjectStatusFilter@1100529008(VAR StatusFilter@1100529000 : Text;Status@1100529001 : Option);
    VAR
      Project@1100529002 : Record 11072003;
    BEGIN
      Project."Project Status" := Status;
      IF StatusFilter <> '' THEN
        StatusFilter := StatusFilter + '|';
      StatusFilter := STRSUBSTNO(StatusFilter + '%1', Project."Project Status");
    END;

    LOCAL PROCEDURE FillServiceOrderStatusFilter@1100529016();
    VAR
      ServiceOrder@1100529000 : Record 11012823;
    BEGIN
      ServiceOrderStatusFilter := '';
      IF SiteMngmntHoursSetup."SO Open" THEN
        AddStatusToServiceOrderStatusFilter(ServiceOrderStatusFilter, ServiceOrder.Status::Open);
      IF SiteMngmntHoursSetup."SO In Process" THEN
        AddStatusToServiceOrderStatusFilter(ServiceOrderStatusFilter, ServiceOrder.Status::"In Process");
      IF SiteMngmntHoursSetup."SO Technical Finished" THEN
        AddStatusToServiceOrderStatusFilter(ServiceOrderStatusFilter, ServiceOrder.Status::"Technical Finished");
      IF SiteMngmntHoursSetup."SO Administrative Finished" THEN
        AddStatusToServiceOrderStatusFilter(ServiceOrderStatusFilter, ServiceOrder.Status::"Administrative Finished");
      IF SiteMngmntHoursSetup."SO Finished" THEN
        AddStatusToServiceOrderStatusFilter(ServiceOrderStatusFilter, ServiceOrder.Status::Finished);
    END;

    LOCAL PROCEDURE AddStatusToServiceOrderStatusFilter@1100529017(VAR StatusFilter@1100529000 : Text;Status@1100529001 : Option);
    VAR
      ServiceOrder@1100529002 : Record 11012823;
    BEGIN
      ServiceOrder.Status := Status;
      IF StatusFilter <> '' THEN
        StatusFilter := StatusFilter + '|';
      StatusFilter := STRSUBSTNO(StatusFilter + '%1', ServiceOrder.Status);
    END;

    LOCAL PROCEDURE SetReleationCodeFilterOnSiteMgtCompanies@1100525000(VAR SiteMgtHoursCompany@1100525000 : Record 11012356);
    BEGIN
      SiteMgtHoursCompany.SETRANGE("Relation Code", CompanyInformation."Site Mgt Company Relation Code");
    END;

    LOCAL PROCEDURE GetHoursCompanyInfoRelationCode@1100529024(HoursCompany@1100529000 : Text) : Code[20];
    VAR
      CompanyInfo@1100529001 : Record 79;
    BEGIN
      CompanyInfo.CHANGECOMPANY(HoursCompany);
      CompanyInfo.GET;
      EXIT(CompanyInfo."Site Mgt Company Relation Code");
    END;

    LOCAL PROCEDURE CheckEmployee@1100528011(CurrentCompany@1100528000 : Text;Employee@1100528001 : Record 5200);
    BEGIN
      IF (Employee."Global Dimension 1 Code" = '') THEN
        WriteError(CurrentCompany, STRSUBSTNO(Text012, Employee.TABLECAPTION, Employee."No.", Employee.FIELDCAPTION("Global Dimension 1 Code")));
      IF (Employee."Manager No." = '') THEN
        WriteError(CurrentCompany, STRSUBSTNO(Text012, Employee.TABLECAPTION, Employee."No.", Employee.FIELDCAPTION("Manager No.")));
      IF (Employee."Trade Association" = '') THEN
        WriteError(CurrentCompany, STRSUBSTNO(Text012, Employee.TABLECAPTION, Employee."No.", Employee.FIELDCAPTION("Trade Association")));
    END;

    LOCAL PROCEDURE CheckProject@1100528008(CurrentCompany@1100528000 : Text;Project@1100528001 : Record 11072003);
    BEGIN
      IF (Project."Project Manager" = '') THEN
        WriteError(CurrentCompany, STRSUBSTNO(Text012, Project.TABLECAPTION, Project."No.", Project.FIELDCAPTION("Project Manager")));
    END;

    LOCAL PROCEDURE CheckServiceOrder@1100528300(CurrentCompany@1100528000 : Text;ServiceOrder@1100528001 : Record 11012823);
    BEGIN
      IF (ServiceOrder."Order Manager" = '') THEN
        WriteError(CurrentCompany, STRSUBSTNO(Text012, ServiceOrder.TABLECAPTION, ServiceOrder."No.", ServiceOrder.FIELDCAPTION("Order Manager")));
    END;

    LOCAL PROCEDURE WindowUpdate@1100529000(ArgumentNo@1100529000 : Integer;ArgumentTxt@1100529001 : Text);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      CASE ArgumentNo OF
        1:
          BEGIN
            Window.UPDATE(ArgumentNo, ArgumentTxt);
            Counter := 0;
            Window.UPDATE(3, Counter);
          END;
        2:
          Window.UPDATE(ArgumentNo, ArgumentTxt);
        3:
          BEGIN
            Counter := Counter + 1;
            IF (Counter MOD(50) = 0) OR (Counter = 1) THEN
              Window.UPDATE(ArgumentNo, Counter);
          END;
      END;
    END;

    LOCAL PROCEDURE WriteError@1100409002(CurrentCompany@1100409000 : Text;ErrorText@1100528000 : Text);
    VAR
      SiteMgtHoursCode@1100529000 : Record 11012358;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      TmpError.INIT;
      TmpError."User ID" := USERID;
      TmpError."Source Type" := TmpError."Source Type"::General;
      IF NewCompany THEN BEGIN
        NewCompany := FALSE;
        TmpError."Line No." += 1;
        TmpError."Error message" := '';
        TmpError.INSERT;
        TmpError."Line No." += 1;
        TmpError."Error message" := STRSUBSTNO(UPPERCASE('----- ' + SiteMgtHoursCode.FIELDCAPTION(Company)) + ': %1 -----', CurrentCompany);
        TmpError.INSERT;
      END;
      TmpError."Line No." += 1;
      TmpError."Error message" := ErrorText;
      TmpError.INSERT;
    END;

    LOCAL PROCEDURE ShowErrors@1100529010();
    BEGIN
      IF (NOT GUIALLOWED) THEN
        EXIT;
      IF TmpError.FINDFIRST THEN
        PAGE.RUNMODAL(PAGE::Errors, TmpError);
    END;

    BEGIN
    {
      Tablename                     DataPerCompany  Entity
      ----------------------------------------------------------------------------------------
      Site Mngmnt. Hours Companies  No              Company
      Site Mngmnt. Hours Employee   No              Employee
      Site Mngmnt. Hours Codes      No              (Cost Object, not used since 2009), WageComponent, ProjectElement
      Site Mngmnt. Hours Objects    Yes             CostCode, Project, ServiceOrder, ResourceRequest
    }
    END.
  }
}

