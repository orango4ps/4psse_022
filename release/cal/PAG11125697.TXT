OBJECT Page 11125697 Copy Estimate RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Estimate;
               NOR=Kopier kalkyle;
               SVE=Kopiera kalkyl];
    SourceTable=Table11012151;
    SourceTableView=WHERE(RAW Estimate=CONST(Yes));
    PageType=StandardDialog;
    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 IF NOT GET(EstFrom) THEN Rec.INIT;  //fill formcaption due to used sourcetable
               END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100525000 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    OnQueryClosePage=BEGIN
                       CloseActionOK := CloseAction IN [ACTION::OK,ACTION::LookupOK];
                     END;

  }
  CONTROLS
  {
    { 1100525000;0;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Group  ;
                CaptionML=[ENU=Copy from;
                           NOR=Kopier fra;
                           SVE=Kopiera fr†n];
                GroupType=Group }

    { 1100525002;2;Field  ;
                CaptionML=[ENU=Estimate;
                           NOR=Kalkyle;
                           SVE=Kalkyl];
                SourceExpr=EstFrom;
                OnValidate=BEGIN
                             EstRec."No." := EstFrom;
                             EstRec.DPA_FindRecWithDPAFilterAppld;

                             EstFromTxt := EstRec.Description;
                             EstToTxt := EstRec.Description;
                             FillDefaults(EstFrom);  //db, 12-04-16
                           END;

                OnLookup=BEGIN
                           EstRec.RESET;
                           EstRec.SETRANGE("RAW Estimate", TRUE);  //db, 12-04-16
                           IF PAGE.RUNMODAL(PAGE::"Estimate List", EstRec) = ACTION::LookupOK THEN BEGIN
                              EstFrom := EstRec."No.";
                              EstFromTxt := EstRec.Description;
                              EstToTxt := EstRec.Description;
                              FillDefaults(EstFrom);  //db, 12-04-16
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525003;2;Field  ;
                CaptionML=[ENU=Estimate Description;
                           NOR=Kalkylebeskrivelse;
                           SVE=Kalkylbeskrivning];
                SourceExpr=EstFromTxt;
                Editable=FALSE }

    { 1100525004;2;Field  ;
                CaptionML=[ENU=Norm Group;
                           NOR=Normgruppe;
                           SVE=Normgrupp];
                SourceExpr=NormGroupFrom;
                Editable=FALSE }

    { 1100525007;2;Field  ;
                CaptionML=[ENU=Norm Group Description;
                           NOR=0];
                SourceExpr=NormGroupFromTxt;
                Editable=FALSE }

    { 1100525008;2;Field  ;
                CaptionML=[ENU=Rate Group;
                           NOR=Kostgruppe;
                           SVE=Kostnadsgrupp];
                SourceExpr=RateGroupFrom;
                Editable=FALSE }

    { 1100525009;2;Field  ;
                CaptionML=[ENU=Rate Group Description;
                           NOR=0];
                SourceExpr=RateGroupFromTxt;
                Editable=FALSE }

    { 1100525006;1;Group  ;
                CaptionML=[ENU=Copy to;
                           NOR=Kopier til;
                           SVE=Kopiera till];
                GroupType=Group }

    { 1100525014;2;Field  ;
                Name=SelectExistingEstimate;
                CaptionML=[ENU=Select Existing Estimate;
                           NOR=Velg eksisterende kalkyle;
                           SVE=V„lj befintlig kalkyl];
                SourceExpr=SelectExistingEstimate;
                OnValidate=BEGIN
                             IF SelectExistingEstimate = FALSE THEN BEGIN
                               EstTo := NewEst;
                               EstToTxt := EstFromTxt;
                             END ELSE BEGIN
                               EstTo := '';
                               LookupEstTo;
                             END;
                           END;
                            }

    { 1100525016;2;Field  ;
                Name=EstTo;
                CaptionML=[ENU=Estimate;
                           NOR=Kalkyle;
                           SVE=Kalkyl];
                SourceExpr=EstTo;
                OnValidate=BEGIN
                             EstToTxt := EstFromTxt;
                             IF SelectExistingEstimate THEN BEGIN
                               EstRec."No." := EstTo;
                               EstRec.DPA_FindRecWithDPAFilterAppld;
                               EstToTxt := EstRec.Description
                             END ELSE
                               IF EstRec.GET(EstTo) THEN
                                 EstRec.INSERT;

                             IF EstTo <>'' THEN BEGIN
                               NoSeriesMgt.TestManual(EstNos);
                             //"No. Series" := '';  //db, 26-08-08: No. Series of new (not old) estimate become empty.
                             END;
                           END;

                OnLookup=BEGIN
                           LookupEstTo;
                         END;
                          }

    { 1100525017;2;Field  ;
                Name=EstToTxt;
                CaptionML=[ENU=Estimate Description;
                           NOR=Kalkylebeskrivelse;
                           SVE=Kalkylbeskrivning];
                SourceExpr=EstToTxt }

    { 1100525018;2;Field  ;
                Name=CustTo;
                CaptionML=[ENU=Customer No.;
                           NOR=Kundenr.;
                           SVE=Kundnr];
                SourceExpr=CustTo;
                OnValidate=VAR
                             lvRateGrp@1100525000 : Text[30];
                           BEGIN
                             IF NOT CustRec.GET(CustTo) THEN BEGIN
                               CustTo := '';
                               CustToTxt := '';
                             END ELSE BEGIN
                               CustToTxt := CustRec.Name;
                               lvRateGrp := CustRec."Rate Group";
                               //lvRateGrp := CustRec."Rate Group (Gross)";
                               IF RateGroupRec.GET(lvRateGrp) THEN BEGIN
                                 RateGroupTo := RateGroupRec."No.";
                                 RateGroupToTxt := RateGroupRec.Description;
                               END;
                             END;
                             CheckCustContact(0);
                           END;
                            }

    { 1100525019;2;Field  ;
                Name=CustToTxt;
                CaptionML=[ENU=Customer Name;
                           NOR=Kundnavn;
                           SVE=Kundens namn];
                SourceExpr=CustToTxt;
                Editable=FALSE }

    { 1100525020;2;Field  ;
                Name=ContactTo;
                CaptionML=[ENU=Contact;
                           NOR=Kontaktperson;
                           SVE=Kontakt];
                SourceExpr=ContactTo;
                OnValidate=BEGIN
                             IF NOT ContactRec.GET(ContactTo) THEN BEGIN
                               ContactTo := '';
                               ContactToTxt := '';
                             END ELSE BEGIN
                               ContactToTxt := ContactRec.Name;
                             END;
                             CheckCustContact(1);
                           END;
                            }

    { 1100525021;2;Field  ;
                Name=ContactToTxt;
                CaptionML=[ENU=Contact Name;
                           NOR=Kontaktnavn;
                           SVE=Kontaktnamn];
                SourceExpr=ContactToTxt;
                Editable=FALSE }

    { 1100525022;2;Field  ;
                Name=ContactPersonTo;
                CaptionML=[ENU=Contact Person;
                           NOR=Kontaktperson;
                           SVE=Kontaktperson];
                SourceExpr=ContactPersonTo;
                OnValidate=BEGIN
                             IF NOT ContactRec.GET(ContactPersonTo) THEN BEGIN
                               ContactPersonTo := '';
                               ContactPersonToTxt := '';
                             END ELSE BEGIN
                               ContactPersonToTxt := ContactRec.Name;
                             END;
                           END;

                OnLookup=BEGIN
                           ContactRec.RESET;
                           ContactRec.SETRANGE("Company No.", ContactTo);
                           ContactRec.SETRANGE(Type, ContactRec.Type::Person);
                           PAGE.RUNMODAL(PAGE::"Contact List", ContactRec);
                         END;
                          }

    { 1100525010;2;Field  ;
                Name=ContactPersonToTxt;
                CaptionML=[ENU=Contact Person Name;
                           NOR=Kontaktpersonens navn;
                           SVE=Kontaktpersonens namn];
                SourceExpr=ContactPersonToTxt }

    { 1100525026;2;Field  ;
                Name=NormGroupTo;
                CaptionML=[ENU=Norm Group;
                           NOR=Normgruppe;
                           SVE=Normgrupp];
                SourceExpr=NormGroupTo;
                TableRelation="Norm Group".Code;
                OnValidate=BEGIN
                             IF NOT NormGroupRec.GET(NormGroupTo) THEN BEGIN
                               NormGroupTo := NormGroupFrom;
                               NormGroupToTxt := NormGroupFromTxt;
                             END ELSE BEGIN
                               NormGroupToTxt := COPYSTR(NormGroupRec.Description, 1, 50);
                             END;
                           END;
                            }

    { 1100525023;2;Field  ;
                Name=NormGroupToTxt;
                CaptionML=[ENU=Norm Group Description;
                           NOR=0];
                SourceExpr=NormGroupToTxt;
                Editable=FALSE }

    { 1100525025;2;Field  ;
                Name=RateGroupTo;
                CaptionML=[ENU=Rate Group;
                           NOR=Kostgruppe;
                           SVE=Kostnadsgrupp];
                SourceExpr=RateGroupTo;
                TableRelation="Rate Group".No.;
                OnValidate=BEGIN
                             IF NOT RateGroupRec.GET(RateGroupTo) THEN BEGIN
                               RateGroupTo := RateGroupFrom;
                               RateGroupToTxt := RateGroupFromTxt;
                             END ELSE BEGIN
                               RateGroupToTxt := RateGroupRec.Description;
                             END;
                           END;
                            }

    { 1100525024;2;Field  ;
                Name=RateGroupToTxt;
                CaptionML=[ENU=Rate Group Description;
                           NOR=0];
                SourceExpr=RateGroupToTxt;
                Editable=FALSE }

    { 1100525012;2;Field  ;
                Name=RefDateTo;
                CaptionML=[ENU=Reference Date Item Prices;
                           NOR=Referansedato for artikkelpriser;
                           SVE=Referensdatum f”r artikelpriser];
                SourceExpr=RefDateTo }

    { 1100525027;2;Field  ;
                Name=DiscRef1To;
                CaptionML=[ENU=Discount Term Group (Customer);
                           NOR=Rabattvilk†rsgruppe (Kunde);
                           SVE=Rabattvillkorsgrupp (kund)];
                SourceExpr=DiscRef1To;
                OnValidate=BEGIN
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, DiscRef1To) THEN BEGIN
                               DiscRef1To := DiscRef1From;
                               DiscRef1ToTxt := DiscRef1FromTxt;
                             END ELSE BEGIN
                               DiscRef1ToTxt := DiscRefRec.Description;
                             END;
                           END;
                            }

    { 1100525028;2;Field  ;
                Name=DiscRef1ToTxt;
                CaptionML=[ENU=Discount Term Group Description (Customer);
                           NOR=Beskrivelse av Rabattvilk†rsgruppe (kunde)];
                SourceExpr=DiscRef1ToTxt;
                Editable=FALSE }

    { 1100525029;2;Field  ;
                Name=DiscRef2To;
                CaptionML=[ENU=Discount Term Group (Job);
                           NOR=Rabattvilk†rsgruppe (jobb);
                           SVE=Rabattvillkorsgrupp (projekt)];
                SourceExpr=DiscRef2To;
                OnValidate=BEGIN
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, DiscRef2To) THEN BEGIN
                               DiscRef2To := DiscRef2From;
                               DiscRef2ToTxt := DiscRef2FromTxt;
                             END ELSE BEGIN
                               DiscRef2ToTxt := DiscRefRec.Description;
                             END;
                           END;
                            }

    { 1100525030;2;Field  ;
                Name=DiscRef2ToTxt;
                CaptionML=[ENU=Discount Term Group Description (Job);
                           NOR=Beskrivelse av rabattvilk†rsgruppe (jobb)];
                SourceExpr=DiscRef2ToTxt;
                Editable=FALSE }

    { 1100525031;1;Group  ;
                CaptionML=[ENU=Apply;
                           NOR=Koble;
                           SVE=Verkst„ll];
                GroupType=Group }

    { 1100525032;2;Field  ;
                Name=CopyTryOut;
                CaptionML=[ENU=Copy Try-Out Successor;
                           NOR=Kopier etterf›lger (prospekt);
                           SVE=Kopiera efterf”ljare, anbud];
                SourceExpr=CopyTryOut }

    { 1100525033;2;Field  ;
                Name=SkipLines;
                CaptionML=[ENU=Skip Lines;
                           NOR=Hopp over rader;
                           SVE=Hoppa ”ver rader];
                SourceExpr=SkipLines }

    { 1100525034;2;Field  ;
                Name=CopyPriceAgreement;
                CaptionML=[ENU=Copy Price Agreement;
                           NOR=Kopier prisavtale;
                           SVE=Kopiera prisavtal];
                SourceExpr=CopyPriceAgreement }

  }
  CODE
  {
    VAR
      EstFrom@1100525052 : Code[20];
      EstTo@1100525051 : Code[20];
      NewEst@1100525050 : Code[20];
      EstFromTxt@1100525049 : Text[50];
      EstToTxt@1100525048 : Text[50];
      EstNos@1100525047 : Code[20];
      RateGroupFrom@1100525042 : Code[20];
      NormGroupFrom@1100525041 : Code[20];
      RateGroupFromTxt@1100525040 : Text[50];
      NormGroupFromTxt@1100525039 : Text[50];
      RateGroupTo@1100525038 : Code[20];
      NormGroupTo@1100525037 : Code[20];
      RateGroupToTxt@1100525036 : Text[50];
      NormGroupToTxt@1100525035 : Text[50];
      ContactTo@1100525034 : Code[20];
      ContactToTxt@1100525033 : Text[50];
      ContactPersonTo@1100525032 : Code[20];
      ContactPersonToTxt@1100525031 : Text[50];
      CustTo@1100525030 : Code[20];
      CustToTxt@1100525029 : Text[50];
      CustRec@1100525028 : Record 18;
      ContactRec@1100525027 : Record 5050;
      RateGroupRec@1100525026 : Record 11012161;
      NormGroupRec@1100525025 : Record 11012164;
      EstRec@1100525024 : Record 11012151;
      EstSetupRec@1100525023 : Record 11012150;
      SerLineRec@1100525022 : Record 309;
      SerRelRec@1100525021 : Record 310;
      NoSeriesMgt@1100525020 : Codeunit 396;
      UpdateEst@1100525019 : Codeunit 11125671;
      CopyTryOut@1100525017 : Boolean;
      SkipLines@1100525016 : Boolean;
      SelectExistingEstimate@1100525015 : Boolean;
      RefDateTo@1100525014 : Date;
      CopySumSheet@1100525013 : 'EstFrom,EstSource,Empty';
      CopiedEstTo@1100525012 : Code[20];
      DiscRef1From@1100525011 : Code[20];
      DiscRef2From@1100525010 : Code[20];
      DiscRef1To@1100525009 : Code[20];
      DiscRef2To@1100525008 : Code[20];
      DiscRef1FromTxt@1100525007 : Text[50];
      DiscRef2FromTxt@1100525006 : Text[50];
      DiscRef1ToTxt@1100525005 : Text[50];
      DiscRef2ToTxt@1100525004 : Text[50];
      DiscRefRec@1100525003 : Record 11012338;
      RawSetup@1100525002 : Record 11125673;
      DPA_IsHardFilter@1100525001 : Boolean;
      CopyPriceAgreement@1100525000 : Boolean;
      Text001@1100525053 : TextConst 'ENU=Estimate already exists;NOR=Kalkylen finnes allerede;SVE=Kalkylen finns redan';
      CloseActionOK@1100528400 : Boolean;

    PROCEDURE FillDefaults@1(lEstFrom@11012000 : Code[20]);
    BEGIN
      EstFrom := lEstFrom;
      IF EstRec.GET(EstFrom) THEN BEGIN
        EstRec.TESTFIELD("RAW Estimate", TRUE);  //db, 12-04-16
        EstFromTxt  := EstRec.Description;

        NormGroupFrom := EstRec."Norm Group";
        IF NOT NormGroupRec.GET(NormGroupFrom) THEN NormGroupRec.INIT;
        NormGroupFromTxt := COPYSTR(NormGroupRec.Description, 1, 50);

        RateGroupFrom := EstRec."Rate Group";
        IF NOT RateGroupRec.GET(RateGroupFrom) THEN RateGroupRec.INIT;
        RateGroupFromTxt := RateGroupRec.Description;

        DiscRef1From := EstRec."Purch Discount Term Group 1";
        //DiscRef1From := EstRec."Sales Discount Term Group 1";
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, DiscRef1From) THEN DiscRefRec.INIT;
        DiscRef1FromTxt := DiscRefRec.Description;

        DiscRef2From := EstRec."Purch Discount Term Group 2";
        //DiscRef2From := EstRec."Sales Discount Term Group 2";
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, DiscRef2From) THEN DiscRefRec.INIT;
        DiscRef2FromTxt := DiscRefRec.Description;

        CustTo := EstRec."Customer No.";
        IF NOT CustRec.GET(CustTo) THEN CustRec.INIT;
        CustToTxt := CustRec.Name;

        EstRec.CALCFIELDS("Contact Name", "Contact Person Name");
        ContactTo := EstRec."Contact No.";
        ContactToTxt := EstRec."Contact Name";
        ContactPersonTo := EstRec."Contact Person No.";
        ContactPersonToTxt := EstRec."Contact Person Name";
        RefDateTo := EstRec."Reference Date (Item)";

        DetermineNewEstimate;
        EstTo    := NewEst;
        EstToTxt := EstFromTxt;
        NormGroupTo := NormGroupFrom;
        RateGroupTo := RateGroupFrom;
        DiscRef1To := DiscRef1From;
        DiscRef2To := DiscRef2From;
        NormGroupToTxt := NormGroupFromTxt;
        RateGroupToTxt := RateGroupFromTxt;
        DiscRef1ToTxt := DiscRef1FromTxt;
        DiscRef2ToTxt := DiscRef2FromTxt;
      END;
    END;

    PROCEDURE FillDefaultRentalContract@1100485002(ICustomerNo@1100485000 : Code[20];IContactNo@1100485001 : Code[20];IDescription@1100485002 : Text[50]);
    BEGIN
      CustTo := ICustomerNo;
      IF NOT CustRec.GET(CustTo) THEN CustRec.INIT;
      CustToTxt := CustRec.Name;
      ContactTo := IContactNo;
      IF NOT ContactRec.GET(ContactTo) THEN ContactRec.INIT;
      ContactToTxt := ContactRec.Name;
      EstToTxt := IDescription;
    END;

    PROCEDURE DetermineNewEstimate@1000000000();
    BEGIN
      CLEAR(NoSeriesMgt);

      IF EstRec."No. Series" <> '' THEN BEGIN
        EstNos := EstRec."No. Series";
      END ELSE BEGIN
        RawSetup.GET;
        EstNos := RawSetup."Estimate Nos.";
        EstSetupRec.GET;
      END;

      SerRelRec.SETRANGE(Code, EstNos);
      IF SerRelRec.FINDSET THEN BEGIN
        REPEAT
          SerLineRec.SETRANGE("Series Code", SerRelRec."Series Code");
          IF SerLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              IF (SerLineRec.Open = TRUE) AND
                 (EstFrom >= SerLineRec."Starting No.") AND
                 ((EstFrom < SerLineRec."Ending No.") OR (SerLineRec."Ending No." = '')) THEN
                EstNos := SerLineRec."Series Code";
            UNTIL SerLineRec.NEXT = 0;
          END;
        UNTIL SerRelRec.NEXT = 0;
      END;

      NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,FALSE);
    END;

    PROCEDURE ValidateEstimate@1210190001();
    VAR
      EstLineRec@1210190000 : Record 11125698;
      lvText000@1210190001 : TextConst 'ENU=Estimate Lines present in Destination.;NOR=Det finnes kalkylerader i Destinasjonen.;SVE=Det finns kalkylrader i destinationen.';
    BEGIN
      EstLineRec.RESET;
      EstLineRec.SETRANGE("Estimate No.", EstTo);
      IF EstLineRec.FINDFIRST THEN
        ERROR(lvText000);

      IF SelectExistingEstimate THEN BEGIN
        EstRec.GET(EstTo);
      END ELSE BEGIN
        IF EstRec.GET(EstTo) THEN BEGIN
          DetermineNewEstimate;
          EstTo := NewEst;
          ERROR(Text001);
        END;
      END;
    END;

    PROCEDURE StartUpdate@1210190000();
    VAR
      CopyCu@1210190000 : Codeunit 11125672;
      TryOutRec@1100485000 : Record 11012761;
      EstLineRec@1100485001 : Record 11125698;
      SelectType@1100485002 : Integer;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF EstRec.GET(EstTo) THEN
        EstRec.TESTFIELD(Fixed, FALSE);
      ValidateEstimate;

      SelectType := CopySumSheet;

      CopyCu.CopyEst(EstFrom, '', EstTo, EstToTxt,
        NormGroupTo, RateGroupTo, CustTo, RefDateTo, DiscRef1To, DiscRef2To, SkipLines, SelectType,
        CopyPriceAgreement);

      CLEAR(NoSeriesMgt);     //Enforce re-read of 'NoSeriesLine' record at next 'GetNextNo' (with FALSE)
      NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,FALSE);
      IF NewEst = EstTo THEN
        NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,TRUE);

      IF NormGroupFrom <> NormGroupTo THEN BEGIN
        NormGroupRec.GET(NormGroupTo);
        EstLineRec.SETRANGE("Estimate No.", EstTo);
        UpdateEst.ReplaceNormGroup(EstLineRec, NormGroupFrom, NormGroupTo, TRUE);
      END;
      IF RateGroupFrom <> RateGroupTo THEN BEGIN
        RateGroupRec.GET(RateGroupTo);
        //UpdateEst.ReplaceRateGroup(EstTo, RateGroupFrom, RateGroupTo, TRUE);
        UpdateEst.UpdateRate(EstTo, RateGroupFrom, RateGroupTo);  //C053585
      END;

      CopyEstimateAppliance;  //DP01619
      CopyEstimateSurcharge;  //DP01619

      IF CopyTryOut AND FPSLicenseManagement.LicenseAndReadPermissionForTable(TryOutRec) THEN
        TryOutRec.CopyRelation(1, 1, EstFrom, EstTo);

      //fill keyfields of sourcetable to refresh mainform with copied data:
      "No." := EstTo;
      GET("No.");
      "Contact No." := ContactTo;
      "Contact Person No." := ContactPersonTo;
      MODIFY;
    END;

    PROCEDURE CheckCustContact@1100485000(lvAction@1100485001 : Integer);
    VAR
      ContBusRel@1100485000 : Record 5054;
      NumContact@1100485002 : Integer;
    BEGIN
      IF lvAction = 0 THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table", "No.");
        ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.", CustTo);
        IF ContBusRel.FINDFIRST THEN BEGIN
          ContBusRel.CALCFIELDS("Contact Name");
          ContactTo := ContBusRel."Contact No.";
          ContactToTxt := ContBusRel."Contact Name";
        END;
      END;
      IF lvAction = 1 THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Contact No.", "Business Relation Code");
        ContBusRel.SETRANGE("Contact No.", ContactTo);
        ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
        IF ContBusRel.FINDFIRST THEN BEGIN
          ContBusRel.CALCFIELDS("Contact Name");
          CustTo := ContBusRel."No.";
          CustToTxt := ContBusRel."Contact Name";
        END;
      END;

      ContactPersonTo := '';
      ContactPersonToTxt := '';

      ContactRec.RESET;
      ContactRec.SETRANGE("Company No.", ContactTo);
      ContactRec.SETRANGE(Type, ContactRec.Type::Person);
      NumContact := ContactRec.COUNT;
      IF NumContact = 1 THEN BEGIN
        IF ContactRec.FINDFIRST THEN BEGIN
          ContactPersonTo := ContactRec."No.";
          ContactPersonToTxt := ContactRec.Name;
        END;
      END;
    END;

    PROCEDURE LookupEstTo@1100485001();
    BEGIN
      EstRec.RESET;
      IF PAGE.RUNMODAL(PAGE::"Estimate List", EstRec) = ACTION::LookupOK THEN BEGIN
        IF SelectExistingEstimate = FALSE THEN EXIT;
        EstTo := EstRec."No.";
        EstToTxt := EstRec.Description;
        ValidateEstimate;
      END;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE GetCopiedEstTo@1100485003(VAR EstNo@1100485000 : Code[20]);
    BEGIN
      EstNo := CopiedEstTo;
    END;

    LOCAL PROCEDURE StdDialogConfirm@1100528400() : Boolean;
    BEGIN
      CurrPage.RUNMODAL;
      EXIT(CloseActionOK);
    END;

    LOCAL PROCEDURE StdDialogDoAction@1100528401();
    BEGIN
      StartUpdate;
      CopiedEstTo := EstTo;
    END;

    PROCEDURE StdDialogRunModal@1100528404();
    BEGIN
      IF StdDialogConfirm THEN
        StdDialogDoAction;
    END;

    PROCEDURE GetNewEstimate@1100525000() : Code[20];
    BEGIN
      //C028591
      EXIT(EstTo);
    END;

    LOCAL PROCEDURE CopyEstimateAppliance@1100528900();
    VAR
      EstimateApplianceCodeRAW@1100528900 : Record 11125697;
      EstimateApplianceCodeRAW2@1100528901 : Record 11125697;
    BEGIN
      //DP01619
      EstimateApplianceCodeRAW.SETRANGE("Estimate No.", EstFrom);
      IF EstimateApplianceCodeRAW.FINDSET THEN BEGIN
        REPEAT
          EstimateApplianceCodeRAW2 := EstimateApplianceCodeRAW;
          EstimateApplianceCodeRAW2."Estimate No." := EstTo;
          IF EstimateApplianceCodeRAW2.INSERT THEN;
        UNTIL EstimateApplianceCodeRAW.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyEstimateSurcharge@1100528901();
    VAR
      EstimateRAWSurcharge@1100528900 : Record 11012236;
      EstimateRAWSurcharge2@1100528901 : Record 11012236;
    BEGIN
      //DP01619
      EstimateRAWSurcharge.SETRANGE("Estimate No.", EstFrom);
      IF EstimateRAWSurcharge.FINDSET THEN BEGIN
        REPEAT
          EstimateRAWSurcharge2 := EstimateRAWSurcharge;
          EstimateRAWSurcharge2."Estimate No." := EstTo;
          IF EstimateRAWSurcharge2.INSERT THEN;
        UNTIL EstimateRAWSurcharge.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

