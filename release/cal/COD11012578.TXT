OBJECT Codeunit 11012578 Plant External Rented Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CreateArrivalRentEntryExternal@6(IPlantNoRec@1100485000 : Record 11012552;IReceipt@1100485003 : Boolean;IDocument@1100485002 : Code[20];IDocLineNo@1100485001 : Integer;IExpectedEnddate@1100485005 : Date);
    VAR
      lvRentEntryRec@1100485004 : Record 11012535;
    BEGIN
      WITH lvRentEntryRec DO BEGIN
        INIT;
        Removed := FALSE;
        "Vendor No." := IPlantNoRec.Vendor;
        "Plant Type" := IPlantNoRec."Plant Type";
        "Plant No." := IPlantNoRec."No.";
        "Line No." := GetNextLineNo(lvRentEntryRec);
        Quantity := IPlantNoRec.Quantity;
        "Present from" := IPlantNoRec."Receipt Date";
        "Removed on" := 0D;
        IF (NOT IReceipt) THEN
          "Arrival Type" := "Arrival Type"::"Post Plant"
        ELSE BEGIN
          "Arrival Type" := "Arrival Type"::Receipt;
          "Arrival Document" := IDocument;
          "Arrival Line No." := IDocLineNo;
          IF IExpectedEnddate >= "Present from" THEN
            "Expected Ending Date" := IExpectedEnddate;
        END;

        INSERT;
      END;
    END;

    PROCEDURE ProcessExitOrderExternal@1100485000(IVendNo@1100485001 : Code[20];IPlantType@1100485004 : Code[20];IPlantNo@1100485002 : Code[20];IOrderNo@1100485007 : Code[20];IOrderLineNo@1100485008 : Integer;IQuantity@1100485005 : Decimal;IRemovalDate@1100485009 : Date);
    VAR
      lvRentEntryRec@1100485003 : Record 11012535;
      lvPlantNoRec@1100525000 : Record 11012552;
      lvQuantityPosted@1100485000 : Decimal;
      lvPostQuantity@1100485006 : Decimal;
      lvStartDate@1100525001 : Date;
      lvEndDate@1100525002 : Date;
    BEGIN
      WITH lvRentEntryRec DO BEGIN
        IF (IQuantity <= 0) THEN
          EXIT;

        lvQuantityPosted := 0;
        SETRANGE(Removed, FALSE);
        SETRANGE("Vendor No.", IVendNo);
        SETRANGE("Plant Type", IPlantType);
        SETRANGE("Plant No.", IPlantNo);
        SETFILTER(Quantity, '>%1', 0);
        IF FIND('-') THEN BEGIN
          REPEAT
            IF Quantity <= (IQuantity - lvQuantityPosted) THEN BEGIN
              lvPostQuantity := Quantity;
              DELETE;
            END ELSE BEGIN
              lvPostQuantity := IQuantity - lvQuantityPosted;
              Quantity := Quantity - lvPostQuantity;
              MODIFY;
            END;
            UpdateHistoryRemoved(lvRentEntryRec,"Removal Type"::"Exit Order",IOrderNo,IOrderLineNo,lvPostQuantity,IRemovalDate);
            lvQuantityPosted := lvQuantityPosted + lvPostQuantity;
          UNTIL (NEXT = 0) OR (lvQuantityPosted >= IQuantity);
          IF NOT FINDFIRST THEN BEGIN  //* If completely removed
            IF lvPlantNoRec.GET(IPlantType,IPlantNo) THEN BEGIN
              lvRentEntryRec.GetExtRentPeriod(IVendNo,IPlantType,IPlantNo,lvStartDate,lvEndDate);
              IF (lvEndDate <> 0D) AND (lvPlantNoRec."Ext. Rented Invoiced to" > lvEndDate) THEN BEGIN
                lvPlantNoRec."Ext. Rented Invoiced to" := lvEndDate;
                lvPlantNoRec.MODIFY;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE UpdateHistoryRemoved@1100485001(IRentEntryRec@1100485000 : Record 11012535;IRemovalType@1100485001 : Option;IRemovalDocNo@1100485003 : Code[20];IRemovalDocLineNo@1100485002 : Integer;IQuantity@1100485004 : Decimal;IRemovalDate@1100485006 : Date);
    VAR
      lvRentEntryRec@1100485005 : Record 11012535;
    BEGIN
      WITH lvRentEntryRec DO BEGIN
        lvRentEntryRec := IRentEntryRec;
        Removed := TRUE;
        "Line No." := GetNextLineNo(lvRentEntryRec);
        Quantity := IQuantity;
        "Removal Type" := IRemovalType;
        "Removal Document" := IRemovalDocNo;
        "Removal Line No." := IRemovalDocLineNo;
        "Removed on" := IRemovalDate;
        "Expected Ending Date" := 0D;
        INSERT;
      END;
    END;

    PROCEDURE GetNextLineNo@13(IRentEntryRec@1100485000 : Record 11012535) : Integer;
    VAR
      lvRentEntryRec@1100485001 : Record 11012535;
    BEGIN
      WITH lvRentEntryRec DO BEGIN
        SETRANGE(Removed, IRentEntryRec.Removed);
        SETRANGE("Vendor No.", IRentEntryRec."Vendor No.");
        SETRANGE("Plant Type", IRentEntryRec."Plant Type");
        SETRANGE("Plant No.", IRentEntryRec."Plant No.");
        IF FIND('+') THEN
          EXIT("Line No." + 1);

        EXIT(1);
      END;
    END;

    PROCEDURE GetExtRentAmountInPeriod@1100485005(IPlantNoRec@1100485023 : Record 11012552;IProcessType@1100485001 : Integer;IStartingDate@1100485003 : Date;IEndingDate@1100485004 : Date;VAR ILocFiltersRec@1100485012 : Record 11012554;IWithSpecs@1100485010 : Boolean;VAR IOTmpSpecsRec@1100485009 : TEMPORARY Record 11012539;VAR OPresent@1100485007 : Boolean) : Decimal;
    VAR
      lvRentEntryRec@1100485006 : Record 11012535;
      lvPlantInventRec@1100485013 : Record 11012555;
      lvLocRec@1100485015 : Record 11012554;
      lvStartingDate@1100485018 : Date;
      lvEndingDate@1100485017 : Date;
      lvLocationLevel@1100485000 : Boolean;
      lvOnlyLocCodeFilter@1100485014 : Boolean;
      lvLocOk@1100485016 : Boolean;
      lvRentDays@1100485008 : Integer;
      lvExtRentAmount@1100485005 : Decimal;
      lvAmount@1100485022 : Decimal;
      lvRate@1100485019 : Decimal;
      lvRateQtyPerUnit@1100485021 : Decimal;
      lvRateUnit@1100485020 : Code[10];
    BEGIN
      //* Alleen aanroepen voor extern materieel met 'Plant No.' gevuld!
      //* Het argument 'IOTmpSpecsRec' moet als 'Temporary' gedeclareerd zijn in het aanroepende proces/functie!
      //* ProcessType: 1 bij aanroep vanuit 'VJP boeken'; 2 bij aanroep vanuit inhuurposten ophalen

      OPresent := FALSE;
      lvExtRentAmount := 0;

      IPlantNoRec.CALCFIELDS(Bulk);
      IF IPlantNoRec.Bulk AND (IPlantNoRec."Stock No." = '0') THEN BEGIN
        lvLocationLevel := FALSE;                  //* Als bulk met volgnr. '0' in dan in de 'Inhuurposten' lezen,
        IF (ILocFiltersRec.GETFILTERS <> '') THEN  //* maar als er filters op locatie staan dan is dit niet mogelijk.
          EXIT(0);
      END ELSE BEGIN
        lvLocationLevel := TRUE;                  //* Lezen in de materieelvoorraad.
      END;

      IF lvLocationLevel THEN BEGIN
        lvLocRec.COPYFILTERS(ILocFiltersRec);
        lvLocRec.SETRANGE(Code);  //* Reset
        lvOnlyLocCodeFilter := (lvLocRec.GETFILTERS = '');

        WITH lvPlantInventRec DO BEGIN
          SETCURRENTKEY(Removed, "Plant Type", "Plant No.", "Rate Code", Location);
          SETRANGE("Plant Type", IPlantNoRec."Plant Type");
          SETRANGE("Plant No.", IPlantNoRec."No.");
          IF ILocFiltersRec.GETFILTER(Code) <> '' THEN
            ILocFiltersRec.COPYFILTER(Code, Location);
          SETRANGE("Vendor No.", IPlantNoRec.Vendor);
          SETFILTER(Quantity, '>%1', 0);
          SETFILTER("Present from", '..%1', IEndingDate);

          SETRANGE(Removed, FALSE);
          IF FIND('-') THEN BEGIN
            REPEAT
              lvLocOk := TRUE;
              IF (NOT lvOnlyLocCodeFilter) THEN BEGIN
                lvLocRec.SETRANGE(Code, Location);
                lvLocOk := lvLocRec.FIND('-');
              END;
              IF lvLocOk THEN BEGIN
                DetermineStartEndFromInventory(lvPlantInventRec,IProcessType,IStartingDate,IEndingDate,lvStartingDate,lvEndingDate);
                lvAmount := CalculateExtRentAmount(
                  IPlantNoRec.Vendor, "Plant Type", "Plant No.",
                  lvStartingDate, lvEndingDate, Quantity, lvRentDays, lvRate, lvRateUnit, lvRateQtyPerUnit);
                IF lvRentDays > 0 THEN BEGIN
                  OPresent := TRUE;
                  lvExtRentAmount := lvExtRentAmount + lvAmount;
                  IF IWithSpecs THEN
                    WriteTmpSpecifications(
                      "Plant Type", "Plant No.", IPlantNoRec.Vendor, Location,
                      lvStartingDate, lvEndingDate, Quantity, lvRentDays,
                      lvRate, lvRateUnit, lvRateQtyPerUnit, lvAmount,
                      "Arrival Order Type", "Arrival Order", "Removal Order Type", '',
                      IOTmpSpecsRec);
                END;
              END;
            UNTIL NEXT = 0;
          END;

          SETRANGE(Removed, TRUE);
          SETFILTER("Removed on", '%1..', IStartingDate);
          IF FIND('-') THEN BEGIN
            REPEAT
              lvLocOk := TRUE;
              IF (NOT lvOnlyLocCodeFilter) THEN BEGIN
                lvLocRec.SETRANGE(Code, Location);
                lvLocOk := lvLocRec.FIND('-');
              END;
              IF lvLocOk THEN BEGIN
                DetermineStartEndFromInventory(lvPlantInventRec,IProcessType,IStartingDate,IEndingDate,lvStartingDate,lvEndingDate);
                lvAmount := CalculateExtRentAmount(
                  IPlantNoRec.Vendor, "Plant Type", "Plant No.",
                  lvStartingDate, lvEndingDate, Quantity, lvRentDays, lvRate, lvRateUnit, lvRateQtyPerUnit);
                IF lvRentDays > 0 THEN BEGIN
                  OPresent := TRUE;
                  lvExtRentAmount := lvExtRentAmount + lvAmount;
                  IF IWithSpecs THEN
                    WriteTmpSpecifications(
                      "Plant Type", "Plant No.", IPlantNoRec.Vendor, Location,
                      lvStartingDate, lvEndingDate, Quantity, lvRentDays,
                      lvRate, lvRateUnit, lvRateQtyPerUnit, lvAmount,
                      "Arrival Order Type", "Arrival Order", "Removal Order Type", "Removal Order",
                      IOTmpSpecsRec);
                END;
              END;
            UNTIL NEXT = 0;
          END;
        END;

      END ELSE BEGIN

        WITH lvRentEntryRec DO BEGIN
          SETRANGE("Vendor No.", IPlantNoRec.Vendor);
          SETRANGE("Plant Type", IPlantNoRec."Plant Type");
          SETRANGE("Plant No.", IPlantNoRec."No.");
          SETFILTER(Quantity, '>%1', 0);
          SETFILTER("Present from", '..%1', IEndingDate);

          SETRANGE(Removed, FALSE);
          IF FIND('-') THEN BEGIN
            REPEAT
              lvStartingDate := GetMaxDate("Present from",IStartingDate);
              lvEndingDate := IEndingDate;
              lvAmount := CalculateExtRentAmount(
                IPlantNoRec.Vendor, "Plant Type", "Plant No.",
                lvStartingDate, lvEndingDate, Quantity, lvRentDays, lvRate, lvRateUnit, lvRateQtyPerUnit);
              IF lvRentDays > 0 THEN BEGIN
                OPresent := TRUE;
                lvExtRentAmount := lvExtRentAmount + lvAmount;
                IF IWithSpecs THEN
                  WriteTmpSpecifications(
                    "Plant Type", "Plant No.", IPlantNoRec.Vendor, '',
                    lvStartingDate, lvEndingDate, Quantity, lvRentDays,
                    lvRate, lvRateUnit, lvRateQtyPerUnit, lvAmount,
                    IOTmpSpecsRec."Arrival Order Type"::Receipt, "Arrival Document",
                    IOTmpSpecsRec."Removal Order Type"::"Exit Order" , '',
                    IOTmpSpecsRec);
              END;
            UNTIL NEXT = 0;
          END;

          SETRANGE(Removed, TRUE);
          SETFILTER("Removed on", '%1..', IStartingDate);
          IF FIND('-') THEN BEGIN
            REPEAT
              lvStartingDate := GetMaxDate("Present from",IStartingDate);
              lvEndingDate := GetMinDate("Removed on",IEndingDate);
              lvAmount := CalculateExtRentAmount(
                IPlantNoRec.Vendor, "Plant Type", "Plant No.",
                lvStartingDate, lvEndingDate, Quantity, lvRentDays, lvRate, lvRateUnit, lvRateQtyPerUnit);
              IF lvRentDays > 0 THEN BEGIN
                OPresent := TRUE;
                lvExtRentAmount := lvExtRentAmount + lvAmount;
                IF IWithSpecs THEN
                  WriteTmpSpecifications(
                    "Plant Type", "Plant No.", IPlantNoRec.Vendor, '',
                    lvStartingDate, lvEndingDate, Quantity, lvRentDays,
                    lvRate, lvRateUnit, lvRateQtyPerUnit, lvAmount,
                    IOTmpSpecsRec."Arrival Order Type"::Receipt, "Arrival Document",
                    IOTmpSpecsRec."Removal Order Type"::"Exit Order" , "Removal Document",
                    IOTmpSpecsRec);
              END;
            UNTIL NEXT = 0;
          END;
        END;
      END;

      EXIT(lvExtRentAmount);
    END;

    PROCEDURE DetermineStartEndFromInventory@1100485007(IPlantInventRec@1100485000 : Record 11012555;IProcessType@1100485008 : Integer;IStartingDate@1100485002 : Date;IEndingDate@1100485001 : Date;VAR OStartingDate@1100485004 : Date;VAR OEndingDate@1100485003 : Date);
    VAR
      lvPlantOrderRec@1100485007 : Record 11012556;
      lvPresentFrom@1100485006 : Date;
      lvRemovedOn@1100485005 : Date;
    BEGIN
      //* ProcessType: 1 bij aanroep vanuit 'VJP boeken'; 2 bij aanroep vanuit inhuurposten ophalen
      //*
      //* Bij verplaatsingen is de einddatum van 'Locatie Van' gelijk aan de begindatum van 'Locatie Naar', hierdoor zou de dag
      //* dubbel geteld worden. Een oplossing zou zijn om bij een verplaatsing de einddatum niet te tellen, maar dan worden
      //* locaties/depots waar materieel maar 1 dag staat overgeslagen.
      //* Zou ook nog veel complexer kunnen door nog rekening te houden met materieelordersoort en datum huurverschuiving (bij L->L),
      //* maar ook hiermee zijn weer problemen (bv L->W en op zelfde dag weer van W->L2, dan nog dag dubbel)
      //* In overleg (13-06-2006) met BNBM (Edwin Prinsen) is het volgende afgesproken:
      //*  - Bij het boeken van VJP's wordt bij een verplaatsing de einddatum niet geteld
      //*    Hier wil je geen dubbel telling, bij welke locatie het geteld wordt is hier niet zo belangrijk.
      //*  - Bij het ophalen van inhuurposten wordt alles geteld, dubbel tellen wordt daar geaccepteerd.
      //*    Dit omdat als men een locatiefilter zet ook alle dagen van die locatie wil tellen. Een verschil
      //*    bij het bepalen van het aantal dagen afhankelijk of er een filter op de locatie staat is niet
      //*    gewenst (resultaat moet steeds zelfde zijn, anders geeft dit verwarring).
      //* Moet nu (18-03-2008) bij ophalen inhuurposten wel rekening meegehouden worden (melding 11442). Wel simpel houden
      //* Alleen bij aanvoerorder (W->L) of afvoerorder (L->W) dag corrigeren (resp. afvoerdag / aanvoerdag op werf niet tellen).
      //* In alle andere situaties blijft het ongewijzigd, daar dus dan gewoon dubbel blijven tellen.

      WITH IPlantInventRec DO BEGIN
        lvPresentFrom := "Present from";
        lvRemovedOn := "Removed on";

        IF (IProcessType = 1) THEN BEGIN
          IF Removed AND ("Removal Order Type" = "Removal Order Type"::"Plant Order") THEN
            lvRemovedOn := lvRemovedOn - 1;

        END ELSE BEGIN
          IF Depot THEN BEGIN
            IF Removed AND ("Removal Order Type" = "Removal Order Type"::"Plant Order") THEN BEGIN
              IF lvPlantOrderRec.GET("Removal Order") THEN BEGIN
                IF lvPlantOrderRec.Type = lvPlantOrderRec.Type::Arrival THEN
                  lvRemovedOn := lvRemovedOn - 1;
              END;
            END;
            IF ("Arrival Order Type" = "Arrival Order Type"::"Plant Order") THEN BEGIN
              IF lvPlantOrderRec.GET("Arrival Order") THEN BEGIN
                IF lvPlantOrderRec.Type = lvPlantOrderRec.Type::Removal THEN
                  lvPresentFrom := lvPresentFrom + 1;
              END;
            END;
          END;
        END;

        OStartingDate := GetMaxDate(lvPresentFrom,IStartingDate);
        IF NOT Removed THEN
          OEndingDate := IEndingDate
        ELSE
          OEndingDate := GetMinDate(lvRemovedOn,IEndingDate);
      END;
    END;

    PROCEDURE CheckDateCorrectionInventory@1100485008(IOrderNo@1100485000 : Code[20];IOrderLine@1100485001 : Integer;IRefDate@1100485005 : Date) : Boolean;
    VAR
      lvPlantOrderRec@1100485004 : Record 11012556;
      lvPlantOrderLineRec@1100485003 : Record 11012557;
      lvLocRec@1100485002 : Record 11012554;
    BEGIN
      { Niet gebruikt zie opmerkingen vorige functie (13-06-2006)
      IF NOT lvPlantOrderRec.GET(IOrderNo) THEN
        EXIT(FALSE);

      CASE lvPlantOrderRec.Type OF
        lvPlantOrderRec.Type::Removal:
          EXIT(TRUE);
        lvPlantOrderRec.Type::"Other Transfers":
          BEGIN
            IF lvLocRec.GET(lvPlantOrderRec."From Location") AND (NOT lvLocRec.Depot) THEN BEGIN
              IF lvLocRec.GET(lvPlantOrderRec."To Location") THEN BEGIN
                IF lvLocRec.Depot THEN
                  EXIT(TRUE)
                ELSE BEGIN
                  IF lvPlantOrderLineRec.GET(IOrderNo, IOrderLine) AND
                     lvPlantOrderLineRec."Rental Shift" AND
                     (lvPlantOrderLineRec."Rental Startdate (To Location)" > IRefDate) AND
                     (lvPlantOrderLineRec."Rental Enddate (From Location)" >= IRefDate)
                  THEN
                    EXIT(TRUE)
                  ELSE BEGIN
                    IF lvPlantOrderRec."Rental Shift" AND
                       (lvPlantOrderRec."Rental Startdate (To Location)" > IRefDate) AND
                       (lvPlantOrderRec."Rental Enddate (From Location)" >= IRefDate)
                    THEN
                      EXIT(TRUE);
                  END;
                END;
              END;
            END;
          END;
      END;

      EXIT(FALSE);
      }
    END;

    PROCEDURE CalculateExtRentAmount@1100485004(IVendorNo@1100485008 : Code[20];IPlantType@1100485007 : Code[20];IPlantNo@1100485006 : Code[10];IStartingDate@1100485001 : Date;IEndingDate@1100485000 : Date;IQuantity@1100485009 : Decimal;VAR ODays@1100485017 : Integer;VAR ORate@1100485005 : Decimal;VAR ORateUnit@1100485018 : Code[10];VAR ORateQtyPerUnit@1100485019 : Decimal) : Decimal;
    VAR
      lvPlantTypeRec@1100485010 : Record 11012551;
      lvPlantUnitRec@1100485011 : Record 11012599;
      lvPurchHeadRec@1100485004 : Record 38;
      lvPurchLineRec@1100485003 : Record 39;
      lvPurchLineRec2@1100485014 : Record 39;
      lvPurchLineRec3@1100485015 : Record 39;
      lvPurchPriceCalcMgtCU@1100485002 : Codeunit 7010;
      lvFound@1100485012 : Boolean;
      lvFoundOnPlantNoLevel@1100485013 : Boolean;
      lvFoundOnLevelNo@1100485016 : Integer;
      lvRate2@1100485020 : Decimal;
      lvRate3@1100485021 : Decimal;
      lvQtyUnit2@1100485022 : Decimal;
      lvQtyUnit3@1100485023 : Decimal;
    BEGIN
      ODays := 0;
      ORate := 0;
      ORateQtyPerUnit := 0;
      ORateUnit := '';

      IF (IEndingDate < IStartingDate) THEN
        EXIT(0);
      IF NOT lvPlantTypeRec.GET(IPlantType) THEN
        EXIT(0);

      ODays := (IEndingDate - IStartingDate + 1) - NumberRentFreeDays(IVendorNo,IPlantType,IPlantNo,IStartingDate,IEndingDate);
      IF (ODays <= 0) THEN
        EXIT(0);

      WITH lvPurchHeadRec DO BEGIN
        "Document Type" := "Document Type"::Order;
        "Pay-to Vendor No." := IVendorNo;
        "Buy-from Vendor No." := IVendorNo;
        "Order Date" := IStartingDate;
        "Posting Date" := "Order Date";
      END;

      WITH lvPurchLineRec DO BEGIN
        "Document Type" := lvPurchHeadRec."Document Type"::Order;
        "Pay-to Vendor No." := lvPurchHeadRec."Pay-to Vendor No.";
        "Buy-from Vendor No." := lvPurchHeadRec."Buy-from Vendor No.";
        "Order Date" := lvPurchHeadRec."Order Date";
        "Posting Date" := "Order Date";
        "Plant Type" := IPlantType;
        "Plant No." := IPlantNo;
        Quantity := IQuantity;
        "Direct Unit Cost" := 0;
        "Unit of Measure Code" := lvPlantTypeRec."Unit of Measure";
        "Qty. per Unit of Measure" := 1;
      END;

      lvFound := FALSE;
      lvFoundOnPlantNoLevel := FALSE;

      lvPurchLineRec2 := lvPurchLineRec;
      lvFoundOnLevelNo := lvPurchPriceCalcMgtCU.FindPurchLinePricePlant(lvPurchHeadRec,lvPurchLineRec2,0,2);
      IF lvFoundOnLevelNo > 0 THEN BEGIN  //* 1=Mat.srt., 2=Mat.nr.
        lvPurchLineRec3 := lvPurchLineRec2;
        lvFound := TRUE;
        IF lvFoundOnLevelNo = 2 THEN
          lvFoundOnPlantNoLevel := TRUE;
      END;

      //* Inhuurtarief vaak met andere eenheid dan de mat.eenheid. Daardoor bleef tarief vaak nul.
      //* Daarom nu ook voor andere eenheden lezen (laagste nemen). Eigenlijk mist er dus een
      //* inhuurtarief-eenheid.
      lvPlantUnitRec.SETRANGE("Plant Type", IPlantType);
      lvPlantUnitRec.SETFILTER(Code, '<>%1', lvPlantTypeRec."Unit of Measure");
      lvPlantUnitRec.SETFILTER("Qty. per Unit of Measure", '>%1', 0);  //* Dan ook geen problemen met delen door nul.
      IF lvPlantUnitRec.FIND('-') THEN BEGIN
        REPEAT
          lvPurchLineRec2 := lvPurchLineRec;
          lvPurchLineRec2."Unit of Measure Code" := lvPlantUnitRec.Code;
          lvPurchLineRec2."Qty. per Unit of Measure" := lvPlantUnitRec."Qty. per Unit of Measure";
          lvFoundOnLevelNo := lvPurchPriceCalcMgtCU.FindPurchLinePricePlant(lvPurchHeadRec,lvPurchLineRec2,0,2);
          IF lvFoundOnLevelNo > 0 THEN BEGIN
            lvRate2 := lvPurchLineRec2."Direct Unit Cost";
            lvQtyUnit2 := lvPurchLineRec2."Qty. per Unit of Measure";
            lvRate3 := lvPurchLineRec3."Direct Unit Cost";
            lvQtyUnit3 := lvPurchLineRec3."Qty. per Unit of Measure";
            IF (lvFoundOnLevelNo = 2) THEN BEGIN
              //* Als dit eerste is op mat.nr. niveau, OF als lagere prijs
              IF (NOT lvFoundOnPlantNoLevel) OR (((lvRate2 / lvQtyUnit2) < (lvRate3 / lvQtyUnit3)) OR (NOT lvFound)) THEN
                lvPurchLineRec3 := lvPurchLineRec2;
              lvFoundOnPlantNoLevel := TRUE;
            END ELSE BEGIN
              //* Als hiervoor nog geen gevonden op mat.nr. niveau, EN als lagere prijs
              IF (NOT lvFoundOnPlantNoLevel) AND (((lvRate2 / lvQtyUnit2) < (lvRate3 / lvQtyUnit3)) OR (NOT lvFound)) THEN
                lvPurchLineRec3 := lvPurchLineRec2;
            END;
            lvFound := TRUE;
          END;
        UNTIL lvPlantUnitRec.NEXT = 0;
      END;

      IF lvFound THEN BEGIN
        lvPurchLineRec := lvPurchLineRec3;
        ORate := lvPurchLineRec."Direct Unit Cost";
        ORateUnit := lvPurchLineRec."Unit of Measure Code";
        ORateQtyPerUnit := lvPurchLineRec."Qty. per Unit of Measure";

        EXIT(IQuantity * ODays * ORate / ORateQtyPerUnit);
      END;

      EXIT(0);
    END;

    PROCEDURE NumberRentFreeDays@2(IVendorNo@1100485006 : Code[20];IPlantType@1100485005 : Code[20];IPlantNo@1100485004 : Code[10];IStartingDate@1100485003 : Date;IEndingDate@1100485001 : Date) : Integer;
    VAR
      lvPlantSetupRec@1100485007 : Record 11012550;
      lvPlantNoRec@1100485008 : Record 11012552;
      lvPlantVendRec@1100485009 : Record 11012596;
      lvVendRec@1100485010 : Record 23;
      lvRentFreeDayRec@1100485000 : Record 11012569;
      lvRentCalendar@1100485002 : Code[10];
    BEGIN
      //* Niveaus inhuurkalender:
      //* - 1 Materieelnummer (/ leverancier)
      //* - 2 Materieelsoort / leverancier
      //* - 3 Leverancier
      //* - 4 Algemeen

      lvRentCalendar := '';
      lvPlantNoRec.GET(IPlantType, IPlantNo);
      IF (lvPlantNoRec."External Rent Calendar" <> '') THEN
        lvRentCalendar := lvPlantNoRec."External Rent Calendar";
      IF (lvRentCalendar = '') THEN BEGIN
        IF lvPlantVendRec.GET(IPlantType, IVendorNo, lvPlantVendRec.Type::Rent) THEN
          IF (lvPlantVendRec."External Rent Calendar" <> '') THEN
            lvRentCalendar := lvPlantVendRec."External Rent Calendar";
      END;
      IF (lvRentCalendar = '') THEN BEGIN
        IF lvVendRec.GET(IVendorNo) THEN
          IF (lvVendRec."Plant External Rent Calendar" <> '') THEN
            lvRentCalendar := lvVendRec."Plant External Rent Calendar";
      END;
      IF (lvRentCalendar = '') THEN BEGIN
        lvPlantSetupRec.GET;
        IF (lvPlantSetupRec."External Rent Calendar" <> '') THEN
          lvRentCalendar := lvPlantSetupRec."External Rent Calendar";
      END;

      IF (lvRentCalendar = '') THEN
        EXIT(0);

      WITH lvRentFreeDayRec DO BEGIN
        SETRANGE(Type, Type::Plant);
        SETRANGE("Territory Code", '');
        SETRANGE("Plant Calendar", lvRentCalendar);
        SETRANGE(Date, IStartingDate, IEndingDate);
        EXIT(COUNT);
      END;
    END;

    PROCEDURE GetMinDate@1100485003(IDate1@1100485000 : Date;IDate2@1100485001 : Date) : Date;
    BEGIN
      IF IDate1 < IDate2 THEN
        EXIT(IDate1)
      ELSE
        EXIT(IDate2);
    END;

    PROCEDURE GetMaxDate@1100485002(IDate1@1100485001 : Date;IDate2@1100485000 : Date) : Date;
    BEGIN
      IF IDate1 > IDate2 THEN
        EXIT(IDate1)
      ELSE
        EXIT(IDate2);
    END;

    PROCEDURE WriteTmpSpecifications@1100485006(IPlantType@1100485005 : Code[20];IPlantNo@1100485004 : Code[10];IVendNo@1100485013 : Code[20];ILocation@1100485003 : Code[20];IStartingDate@1100485002 : Date;IEndingDate@1100485001 : Date;IQuantity@1100485008 : Decimal;INoOfDays@1100485007 : Decimal;IRate@1100485006 : Decimal;IRateUnit@1100485014 : Code[10];IRateQtyPerUnit@1100485015 : Decimal;IAmount@1100485016 : Decimal;IArrivalOrderType@1100485012 : Option;IArrivalOrder@1100485011 : Code[20];IRemovalOrderType@1100485010 : Option;IRemovalOrder@1100485009 : Code[20];VAR IOTmpSpecsRec@1100485000 : TEMPORARY Record 11012539);
    BEGIN
      //* Het argument 'IOTmpSpecsRec' moet als 'Temporary' gedeclareerd zijn in het aanroepende proces/functie.

      WITH IOTmpSpecsRec DO BEGIN
        INIT;
        "Plant Type" := IPlantType;
        "Plant No." := IPlantNo;
        Location := ILocation;
        "Starting Date" := IStartingDate;
        "Ending Date" := IEndingDate;
        "Line No." := 0;  //* Begint bij 1 (zie repeat-lus bij insert), zal er meestal niet zijn
        "Vendor No." := IVendNo;
        Quantity := IQuantity;
        "Number of Days" := INoOfDays;
        Rate := IRate;
        "Rate Unit" := IRateUnit;
        "Qty. per Unit of Measure" := IRateQtyPerUnit;
        Amount := IAmount;
        "Arrival Order Type" := IArrivalOrderType;
        "Arrival Order" := IArrivalOrder;
        "Removal Order Type" := IRemovalOrderType;
        "Removal Order" := IRemovalOrder;
        REPEAT
          "Line No." := "Line No." + 1;
        UNTIL INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

