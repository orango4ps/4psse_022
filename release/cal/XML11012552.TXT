OBJECT XMLport 11012552 Import Plant Invoices SO's
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Plant Invoices Service Orders;
    Direction=Import;
    DefaultFieldsValidation=No;
    PreserveWhiteSpace=Yes;
    TextEncoding=WINDOWS;
    OnInitXMLport=BEGIN
                    PurchSetup.GET;
                    PurchSetup.TESTFIELD("Invoice Nos.");
                    PurchSetup.TESTFIELD("Posted Invoice Nos.");
                    PurchSetup.TESTFIELD("Credit Memo Nos.");
                    PurchSetup.TESTFIELD("Posted Credit Memo Nos.");

                    NoSeriesInv := PurchSetup."Invoice Nos.";
                    NoSeriesCrMem := PurchSetup."Credit Memo Nos.";
                  END;

    OnPreXMLport=BEGIN
                   LineCounter := 0;

                   JobsSetup.GET;
                   JobsSetup.TESTFIELD("Plant Vendor No.");
                 END;

    OnPostXMLport=BEGIN
                    IF HoldDocumentNo <> '' THEN
                      ReWriteHeader;
                  END;

    Format=Variable Text;
  }
  ELEMENTS
  {
    { [{862E21D6-D637-4F95-93B8-2CE63C0F4A0D}];  ;Root                ;Element ;Text     }

    { [{3A4987DA-F676-43C8-9C56-FFF942701586}];1 ;PurchaseLine        ;Element ;Table   ;
                                                  SourceTable=Table39;
                                                  SourceTableView=SORTING(Field1,Field3,Field4);
                                                  AutoSave=No;
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              "Purchase Line".INIT;
                                                                              CLEAR(AmountInclVatTxt);
                                                                              CLEAR(VatBaseAmountTxt);
                                                                              CLEAR(AmountTxt);
                                                                              CLEAR(VATBusPostingGroup);
                                                                              CLEAR(VATProdPostingGroup);
                                                                              CLEAR(InvOrCredTxt);
                                                                              CLEAR(CountryOfOrigin);
                                                                              CLEAR(ItemNo);
                                                                              CLEAR(QuantityTxt);
                                                                              CLEAR(CountryDestination);
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 WITH "Purchase Line" DO BEGIN
                                                                                   Element := '';
                                                                                   ServiceOrder.GET("Service Order No.");
                                                                                   IF "Document No." <> HoldDocumentNo THEN BEGIN
                                                                                     IF HoldDocumentNo <> '' THEN
                                                                                       ReWriteHeader;
                                                                                     HoldDocumentNo := "Document No.";
                                                                                     WriteHeader;
                                                                                     LineCounter := 0;
                                                                                     HeaderAmount := 0;
                                                                                   END;
                                                                                   IF InvOrCredTxt = 'INVOICE' THEN
                                                                                     "Document Type" := "Document Type"::Invoice
                                                                                   ELSE
                                                                                     "Document Type" := "Document Type"::"Credit Memo";
                                                                                   "Document No." := PurchHeaderRec."No.";
                                                                                   "Buy-from Vendor No." := JobsSetup."Plant Vendor No.";
                                                                                   "Posting Date" := PurchHeaderRec."Posting Date";
                                                                                   HeaderAmount := HeaderAmount + AmountInclVAT;
                                                                                   "Line No." := LineCounter + 10000;
                                                                                   LineCounter := LineCounter + 10000;
                                                                                   Type := Type::"G/L Account";
                                                                                   Quantity := 1;
                                                                                   DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimValRec,FALSE,'');
                                                                                   VALIDATE("Service Order No.");
                                                                                   IF ItemNo <> '' THEN //hs
                                                                                     VALIDATE("Item No.",ItemNo); //hs
                                                                                   VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
                                                                                   VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
                                                                                   VALIDATE(Quantity,QuantityDec); //hs
                                                                                   VALIDATE("Line Amount",AmountDec);
                                                                                   VALIDATE(Amount,AmountDec);
                                                                                   VALIDATE("Amount Including VAT",AmountInclVAT);
                                                                                   VALIDATE("VAT Base Amount",VATBaseAmount);
                                                                                   "Unit of Measure" := DimValRec."Unit of Measure";
                                                                                   "Unit of Measure Code" := DimValRec."Unit of Measure";

                                                                                   RecRef.GETTABLE("Purchase Line");
                                                                                   XMLportStatusDialogMgt.ShowImportStatus(RecRef);

                                                                                   INSERT;

                                                                                   currXMLport.SKIP;

                                                                                 END; //Belongs to With statement.
                                                                               END;
                                                                                }

    { [{48968DC9-F9CB-4C58-8971-FE5AD568ED21}];2 ;PostingDate         ;Element ;Field   ;
                                                  DataType=Date;
                                                  SourceField=Purchase Line::Posting Date;
                                                  MinOccurs=Zero }

    { [{C6F3A22A-B0D6-4FCE-96C1-9CEACFA44A15}];2 ;DocumentNo          ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Purchase Line::Document No.;
                                                  MinOccurs=Zero }

    { [{800EA4E8-6B36-454A-BE2E-03EA4D1F38A0}];2 ;ServiceOrdeNo       ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Purchase Line::Service Order No.;
                                                  MinOccurs=Zero }

    { [{8A1E39D5-97D2-47C8-8244-1C649ECE71D1}];2 ;ShortcutDimension2Code;Element;Field  ;
                                                  DataType=Code;
                                                  SourceField=Purchase Line::Shortcut Dimension 2 Code;
                                                  MinOccurs=Zero }

    { [{4DCCFB67-8A43-47E5-B2B1-DC6F52041AE7}];2 ;Description         ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Purchase Line::Description;
                                                  MinOccurs=Zero }

    { [{70BBC22A-21BC-43A5-A6A1-CCFB4B9F27A7}];2 ;AmountInclVatTxt    ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(AmountInclVatTxt);
                                                                                  EVALUATE(AmountInclVAT, AmountInclVatTxt);
                                                                                END;
                                                                                 }

    { [{5D8C1CA8-E835-4371-AD1B-D1DCA9F31368}];2 ;VatBaseAmountTxt    ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(VatBaseAmountTxt);
                                                                                  EVALUATE(VATBaseAmount, VatBaseAmountTxt);
                                                                                END;
                                                                                 }

    { [{D393FF50-4BA5-4784-AFF6-9AE533BAC96F}];2 ;AmountTxt           ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(AmountTxt);
                                                                                  EVALUATE(AmountDec, AmountTxt);
                                                                                END;
                                                                                 }

    { [{9B7F71CA-029A-49D8-97A9-E71FF97FA9C7}];2 ;VATBusPostingGroup  ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{5DE7A12C-5A20-4C57-B286-5B8D2B45186E}];2 ;VATProdPostingGroup ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A2340E49-677A-4106-BEE5-F24F08BD0014}];2 ;InvOrCredTxt        ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{9483ADA7-8506-44A9-ACFF-DBBC67DC2295}];2 ;Element             ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Purchase Line::Element;
                                                  MinOccurs=Zero }

    { [{78E39BC9-6A55-4377-8EF3-A46FB213B7FD}];2 ;CountryOfOrigin     ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{E1D45236-E313-4D9A-B5E4-BDA5BC705343}];2 ;ItemNo              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{19BBE316-AF63-415E-B8CF-18A822E6311B}];2 ;QuantityTxt         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(QuantityTxt);
                                                                                  EVALUATE(QuantityDec, QuantityTxt);
                                                                                END;
                                                                                 }

    { [{C6200898-16BD-41C0-94CB-146CF4C201AB}];2 ;CountryDestination  ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{7EB1CA63-0EA4-4C4E-A30A-60BA134A144D}];2 ;PlantOrderNo        ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Purchase Line::Plant Order No.;
                                                  MinOccurs=Zero }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=NoSeriesInv;
                  CaptionML=[ENU=No. series Invoices;
                             SVE=Antal fakturaserier];
                  SourceExpr=NoSeriesInv;
                  OnValidate=BEGIN
                               IF NoSeriesInv <> '' THEN
                                 NoSeriesMgt.TestSeries(PurchSetup."Invoice Nos.",NoSeriesInv);
                             END;

                  OnLookup=BEGIN
                             IF NoSeriesMgt.LookupSeries(PurchSetup."Invoice Nos.",NoSeriesInv) THEN
                               NoSeriesMgt.TestSeries(PurchSetup."Invoice Nos.",NoSeriesInv);
                           END;
                            }

      { 1100525003;2;Field  ;
                  Name=NoSeriesCrMem;
                  CaptionML=[ENU=No. series Credit Memo's;
                             SVE=Nummerserier, kreditnotor];
                  SourceExpr=NoSeriesCrMem;
                  OnValidate=BEGIN
                               IF NoSeriesInv <> '' THEN
                                 NoSeriesMgt.TestSeries(PurchSetup."Credit Memo Nos.",NoSeriesCrMem);
                             END;

                  OnLookup=BEGIN
                             IF NoSeriesMgt.LookupSeries(PurchSetup."Credit Memo Nos.",NoSeriesCrMem) THEN
                               NoSeriesMgt.TestSeries(PurchSetup."Credit Memo Nos.",NoSeriesCrMem);
                           END;
                            }

    }
  }
  CODE
  {
    VAR
      PurchSetup@1100525022 : Record 312;
      JobsSetup@1100525021 : Record 315;
      DimValRec@1100525020 : Record 349;
      PurchHeaderRec@1100525019 : Record 38;
      ServiceOrder@1100525018 : Record 11012823;
      RecRef@1100525000 : RecordRef;
      XMLportStatusDialogMgt@1100525002 : Codeunit 11130006;
      DimMgt@1100525017 : Codeunit 408;
      NoSeriesMgt@1100525016 : Codeunit 396;
      HoldDocumentNo@1100525015 : Code[20];
      LineCounter@1100525014 : Integer;
      AmountDec@1100525013 : Decimal;
      AmountInclVAT@1100525012 : Decimal;
      VATBaseAmount@1100525011 : Decimal;
      HeaderAmount@1100525010 : Decimal;
      NoSeriesInv@1100525005 : Code[10];
      NoSeriesCrMem@1100525004 : Code[10];
      QuantityDec@1100525001 : Decimal;

    PROCEDURE WriteHeader@1210190000();
    BEGIN
      WITH PurchHeaderRec DO BEGIN
        INIT;
        IF InvOrCredTxt = 'INVOICE' THEN BEGIN
          "Document Type" := "Document Type"::Invoice;
          "No. Series" := NoSeriesInv;
        END ELSE BEGIN
          "Document Type" := "Document Type"::"Credit Memo";
          "No. Series" := NoSeriesCrMem;
        END;
        "No." := '';
        INSERT(TRUE);
        VALIDATE("Buy-from Vendor No.", JobsSetup."Plant Vendor No.");
        IF InvOrCredTxt = 'INVOICE' THEN
          VALIDATE("Vendor Invoice No.",HoldDocumentNo)
        ELSE
          VALIDATE("Vendor Cr. Memo No.",HoldDocumentNo);
        VALIDATE("VAT Prod. Posting Group","Purchase Line"."VAT Prod. Posting Group");
        "Document Date" := "Purchase Line"."Posting Date";
        "Posting Date" := "Purchase Line"."Posting Date";
        "Invoice Lines Input" := TRUE;
        VALIDATE("Country of Origin",CountryOfOrigin);
        VALIDATE("Country of Destination",CountryDestination);
        "VAT Country/Region Code" := CountryOfOrigin; //hs
        MODIFY;
      END;
    END;

    PROCEDURE ReWriteHeader@1210190001();
    BEGIN
      WITH PurchHeaderRec DO BEGIN
        CALCFIELDS("Amount Including VAT");
        "Amount incl. VAT" := "Amount Including VAT";
        MODIFY;
      END;
    END;

    PROCEDURE FillEmptyTextWithZero@1100525013(VAR Text@1100525000 : Text[1024]);
    BEGIN
      IF DELCHR(Text,'<>=',' ') = '' THEN
        Text := '0';
    END;

    PROCEDURE InitXMLport@1100529500(iNoSeriesInv@1100529501 : Code[10];iNoSeriesCrMem@1100529500 : Code[10]);
    BEGIN
      iNoSeriesInv := NoSeriesInv;
      iNoSeriesCrMem := NoSeriesCrMem;
    END;

    BEGIN
    {
      Copied from X11012553 'Import Plant Invoices Projects', and replaced "Job No."(Project No.) by "Service Order No."
    }
    END.
  }
}

