OBJECT Report 11012898 Get Lab Purchase Invoices
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Get Lab Purchase Invoices;
               NOR=Hent lab-innkj›psfakturaer;
               SVE=H„mta arbetsink”psfakturor];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  ALcontrolWebservice@1100525000 : Codeunit 11012830;
                  Response@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
                  InvoiceElements@1100525003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
                  i@1100525004 : Integer;
                BEGIN
                  IF StartDate = 0D THEN
                    ERROR(Text000);

                  IF EndDate = 0D THEN
                    ERROR(Text001);

                  LabOrderSetup.GET;
                  LabOrderSetup.TESTFIELD("Lab Invoice Vendor No.");

                  ALcontrolWebservice.GetInvoices(StartDate, EndDate, Response);

                  InvoiceElements := Response.DocumentElement.SelectNodes('invoice[pdf=''true'']');

                  NumTotal := InvoiceElements.Count;
                  NumSkipped := 0;
                  NumCreated := 0;

                  FOR i := 0 TO InvoiceElements.Count - 1 DO
                    CreatePurchaseInvoice(InvoiceElements.Item(i));

                  MESSAGE(Text020, NumTotal, NumCreated, NumSkipped);
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  Name=a;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[ENU=Starting Date;
                             NOR=Startdato;
                             SVE=Startdatum];
                  SourceExpr=StartDate }

      { 1100525003;2;Field  ;
                  CaptionML=[ENU=Ending Date;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  SourceExpr=EndDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      LabOrderSetup@1100525004 : Record 11071953;
      StartDate@1100525000 : Date;
      EndDate@1100525001 : Date;
      Text000@1100525002 : TextConst 'ENU=Please specify a starting date.;NOR=Vennligst spesifiser en startdato;SVE=Ange ett startdatum.';
      Text001@1100525003 : TextConst 'ENU=Please specify an ending date.;NOR=Vennligst spesifiser en sluttdato;SVE=Ange ett slutdatum.';
      Text010@1100525005 : TextConst 'ENU=A value for "%1" could not be retrieved from the lab invoice.;NOR=En verdi for "%1" kunne ikke hentes fra labfakturaen.;SVE=Ett v„rde f”r "%1" kunde inte h„mtas fr†n arbetsfakturan';
      Text011@1100525006 : TextConst 'ENU=Skipping invoice %1 because it contains more than one <invoiceproject> element.;NOR=Hopper over faktura %1 fordi den inneholder mer enn et <invoiceproject> element;SVE=Hoppar ”ver fakturan %1 eftersom den inneh†ller mer „n ett <invoiceproject>-element.';
      Text012@1100525007 : TextConst 'ENU=Skipping invoice %1 because it doesn''t contain any <invoiceproject> elements.;NOR=Hopper over faktura %1 fordi den ikke inneholder noen <invoiceproject> elementer;SVE=Hoppar ”ver fakturan %1 eftersom den inte inneh†ller n†got <invoiceproject>-element.';
      Text013@1100525008 : TextConst 'ENU=Skipping invoice %1 because it already exists in the system.;NOR=Hopper over faktura %1 fordi den allerede eksisterer i systemet;SVE=Hoppar ”ver fakturan %1 eftersom den redan finns i systemet.';
      Text020@1100525009 : TextConst 'ENU=%1 invoices received, of which %2 were created and %3 were skipped.;NOR=%1 fakturaer mottatt , hvorav %2 ble opprettet og %3 ble hoppet over;SVE=%1 fakturor har mottagits, varav %2 skapades och %3 hoppades ”ver.';
      NumTotal@1100525010 : Integer;
      NumCreated@1100525011 : Integer;
      NumSkipped@1100525012 : Integer;
      Text030@1100525014 : TextConst 'ENU=Purchase Invoice %1.pdf;NOR=Innkj›psfaktura %1.pdf;SVE=Ink”psfaktura %1.pdf';
      Text035@1100525015 : TextConst 'ENU=Lab Invoice for %1 %2;NOR=Labfaktura for %1 %2;SVE=Arbetsfaktura f”r %1 %2';

    LOCAL PROCEDURE CreatePurchaseInvoice@1100525009(InvoiceElement@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      ServiceOrder@1100525011 : Record 11012823;
      PurchaseHeader@1100525002 : Record 38;
      PurchaseLine@1100525007 : Record 39;
      DocumentProperties@1100525016 : Record 11012746;
      ALcontrolWebservice@1100525014 : Codeunit 11012830;
      DocumentLinkMgt@1100525019 : Codeunit 11012401;
      FileManagement@1100528400 : Codeunit 419;
      ExternalDocumentManagement@1100528406 : Codeunit 11012403;
      RecRef@1100525017 : RecordRef;
      DocLinkRID@1100525018 : ARRAY [5] OF RecordID;
      InvoiceProjectElement@1100525006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      InvoiceProjectElements@1100525005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ProjectDescription@1100525009 : Text[80];
      ProjectDescription2@1100525020 : Text[80];
      YourReference@1100525022 : Text[35];
      InvoiceFileName@1100525012 : Text[260];
      TempInvoiceFullPath@1100525013 : Text[260];
      TargetFileURI@1100528404 : Text;
      InvoiceNo@1100525001 : Code[20];
      ServiceOrderNo@1100525008 : Code[20];
      OrderNo@1100525015 : Code[20];
      InvoiceDate@1100525003 : Date;
      TargetStorageType@1100528403 : Option;
      InvoiceAmountExclVAT@1100525010 : Decimal;
      InvoiceAmountInclVAT@1100525004 : Decimal;
      NextLineNo@1100525021 : Integer;
    BEGIN
      YourReference := COPYSTR(
        TextValueFromLabInvoice(InvoiceElement, 'inv_number'), 1,
        MAXSTRLEN(PurchaseHeader."Your Reference"));
      InvoiceNo := COPYSTR(
        TextValueFromLabInvoice(InvoiceElement, 'inv_id'), 1,
        MAXSTRLEN(PurchaseHeader."Vendor Invoice No."));
      InvoiceDate := DateValueFromLabInvoice(InvoiceElement, 'inv_date');
      InvoiceAmountExclVAT := DecimalValueFromLabInvoice(InvoiceElement, 'inv_exclbtw');
      InvoiceAmountInclVAT := DecimalValueFromLabInvoice(InvoiceElement, 'inv_inclbtw');

      PurchaseHeader."Document Date" := InvoiceDate; //call 29942
      PurchaseHeader."Buy-from Vendor No." := LabOrderSetup."Lab Invoice Vendor No.";
      IF NOT PurchaseHeader.CheckVendorInvoiceNo(InvoiceNo, FALSE, FALSE) THEN BEGIN
        MESSAGE(Text013, InvoiceNo);
        NumSkipped := NumSkipped + 1;
        EXIT;
      END;

      InvoiceProjectElements := InvoiceElement.SelectNodes('invoiceprojects/invoiceproject');

      IF InvoiceProjectElements.Count > 1 THEN BEGIN
        MESSAGE(Text011, InvoiceNo);
        NumSkipped := NumSkipped + 1;
        EXIT;
      END;

      IF InvoiceProjectElements.Count < 1 THEN BEGIN
        MESSAGE(Text012, InvoiceNo);
        NumSkipped := NumSkipped + 1;
        EXIT;
      END;

      InvoiceProjectElement := InvoiceProjectElements.Item(0);
      ServiceOrderNo := TextValueFromLabInvoice(InvoiceProjectElement, 'project');
      OrderNo := TextValueFromLabInvoice(InvoiceProjectElement, 'ordernumber');
      ProjectDescription := COPYSTR(TextValueFromLabInvoice(InvoiceProjectElement, 'projectdescription'), 1,
        MAXSTRLEN(PurchaseLine.Description));
      ProjectDescription2 := COPYSTR(TextValueFromLabInvoice(InvoiceProjectElement, 'projectdescription'),
        MAXSTRLEN(PurchaseLine.Description) + 1, MAXSTRLEN(PurchaseLine."Description 2"));

      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type", PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.INSERT(TRUE);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.", LabOrderSetup."Lab Invoice Vendor No.");
      PurchaseHeader.VALIDATE("Posting Date", WORKDATE);
      PurchaseHeader.VALIDATE("Document Date", InvoiceDate);
      PurchaseHeader.VALIDATE("Vendor Invoice No.", InvoiceNo);
      PurchaseHeader.VALIDATE("Amount incl. VAT", InvoiceAmountInclVAT);
      PurchaseHeader.VALIDATE("Invoice Lines Input", FALSE);
      PurchaseHeader.VALIDATE("Your Reference", YourReference);
      PurchaseHeader.MODIFY(TRUE);

      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Invoice);
      PurchaseLine.SETRANGE("Document No.", PurchaseHeader."No.");
      IF NOT PurchaseLine.FINDLAST THEN;
      NextLineNo := PurchaseLine."Line No." + 10000;

      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type", PurchaseLine."Document Type"::Invoice);
      PurchaseLine.VALIDATE("Document No.", PurchaseHeader."No.");
      PurchaseLine.VALIDATE("Line No.", NextLineNo);

      // jhoek.180211.begin
      // IF ServiceOrder.GET(ServiceOrderNo) THEN
      IF (ServiceOrder.GET(ServiceOrderNo)) AND
         (ServiceOrder.Status < ServiceOrder.Status::"Administrative Finished")
      // jhoek.180211.end
      THEN
        PurchaseLine.VALIDATE("Service Order No.", ServiceOrderNo)
      ELSE BEGIN
        PurchaseLine.VALIDATE(Type, PurchaseLine.Type::"G/L Account");
        PurchaseLine.VALIDATE("No.", '44101'); // :(
      END;

      PurchaseLine.VALIDATE(Description, ProjectDescription);
      PurchaseLine.VALIDATE("Description 2", ProjectDescription2);
      PurchaseLine.VALIDATE("Cost Type", PurchaseLine."Cost Type"::Subcontracting);
      PurchaseLine.VALIDATE("Shortcut Dimension 2 Code", '310'); // :(
      PurchaseLine.VALIDATE(Quantity, 1);
      PurchaseLine.VALIDATE("Unit of Measure", 'st'); // :(
      PurchaseLine.VALIDATE("Direct Unit Cost", InvoiceAmountExclVAT);
      PurchaseLine.INSERT(TRUE);

      NumCreated := NumCreated + 1;

      InvoiceFileName := STRSUBSTNO(Text030, PurchaseHeader."No.");
      TempInvoiceFullPath := STRSUBSTNO('%1\%2', DELCHR(FileManagement.ClientTempFolderName, '>', '\'), InvoiceFileName);

      ALcontrolWebservice.GetInvoice(OrderNo, TempInvoiceFullPath);

      DocumentProperties.VALIDATE("External Document", TRUE);
      DocumentProperties.INSERT(TRUE);
      DocumentProperties.Description := STRSUBSTNO(Text035, ServiceOrder.TABLECAPTION, ServiceOrderNo);
      ExternalDocumentManagement.RegisterFile(
        TempInvoiceFullPath, DocumentProperties."Document Type", DocumentProperties."Creation Date",
        TargetFileURI, TargetStorageType);
      DocumentProperties.ValidateStorageURI(TargetStorageType, TargetFileURI);
      DocumentProperties.MODIFY(TRUE);

      RecRef.GETTABLE(PurchaseHeader);
      DocLinkRID[1] := RecRef.RECORDID(); //link to purchase header

      DocumentLinkMgt.CreateDocumentLink(DocumentProperties, DocLinkRID);
      DocumentProperties.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TextValueFromLabInvoice@1100525039(InvoiceElement@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";Name@1100525001 : Text[30]) : Text[1024];
    VAR
      Element@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      Element := InvoiceElement.SelectSingleNode(Name);
      IF ISNULL(Element) THEN
        ERROR(Text010, Name);
      EXIT(Element.Value);
    END;

    LOCAL PROCEDURE DateValueFromLabInvoice@1100525029(InvoiceElement@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";Name@1100525000 : Text[30]) : Date;
    VAR
      DateAsText@1100525002 : Text[30];
      Year@1100525003 : Integer;
      Month@1100525004 : Integer;
      Day@1100525005 : Integer;
    BEGIN
      DateAsText := TextValueFromLabInvoice(InvoiceElement, Name);

      EVALUATE(Year, COPYSTR(DateAsText, 1, 4));
      EVALUATE(Month, COPYSTR(DateAsText, 5, 2));
      EVALUATE(Day, COPYSTR(DateAsText, 7, 2));

      EXIT(DMY2DATE(Day, Month, Year));
    END;

    LOCAL PROCEDURE DecimalValueFromLabInvoice@1100525013(InvoiceElement@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";Name@1100525000 : Text[30]) Result : Decimal;
    VAR
      DecimalAsText@1100525002 : Text[30];
    BEGIN
      DecimalAsText := NormalizeDecimalSeparator(TextValueFromLabInvoice(InvoiceElement, Name));
      EVALUATE(Result, DecimalAsText);
    END;

    LOCAL PROCEDURE NormalizeDecimalSeparator@1100525014(DecimalAsText@1100525000 : Text[30]) : Text[30];
    BEGIN
      EXIT(CONVERTSTR(DecimalAsText, '.', DecimalSeparator));
    END;

    LOCAL PROCEDURE DecimalSeparator@1100525016() : Text[1];
    BEGIN
      EXIT(FORMAT(FORMAT(0.1, 0, '<Decimals>')[1]));
    END;

    BEGIN
    {
      In this report xml automation variables are still used, because it is difficult to test test this functionality
      after conversion to xml dotnet variables. The automation variables are used on the client and no events are used,
      so it should not be a problem to use automation here.
    }
    END.
  }
  RDLDATA
  {
  }
}

