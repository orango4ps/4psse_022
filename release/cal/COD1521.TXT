OBJECT Codeunit 1521 Workflow Response Handling
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotSupportedResponseErr@1004 : TextConst 'ENU=Response %1 is not supported in the workflow.;NOR=Svaret %1 stõttes ikke i arbeidsflyten.;SVE=Svar %1 stîds inte i arbetsflîdet.';
      CreateNotifEntryTxt@1014 : TextConst '@@@=Create a notification for NAVUser.;ENU=Create a notification for %1.;NOR=Opprett et varsel for %1.;SVE=Skapa ett meddelande fîr %1.';
      CreatePmtLineAsyncTxt@1013 : TextConst '@@@=Create a payment journal line in the background for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line in the background for journal template %1 and journal batch %2.;NOR=Opprett en betalingskladdelinje i bakgrunnen for kladdemalen %1 og kladden %2.;SVE=Skapa en utbetalningsjournalrad i bakgrunden fîr journalmall %1 och journalbatch %2.';
      CreatePmtLineTxt@1000 : TextConst '@@@=Create a payment journal line for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line for journal template %1 and journal batch %2.;NOR=Opprett en betalingskladdelinje for kladdemalen %1 og kladden %2.;SVE=Skapa en utbetalningsjournalrad fîr journalmall %1 och journalbatch %2.';
      DoNothingTxt@1012 : TextConst 'ENU=Do nothing.;NOR=Ikke gjõr noe.;SVE=Gîr ingenting.';
      CreateApprovalRequestsTxt@1030 : TextConst '@@@=Create an approval request for the record using approver type Approver and approver limit type Direct Approver.;ENU=Create an approval request for the record using approver type %1 and %2.;NOR=Opprett en godkjenningsforespõrsel for posten med godkjennertypen %1 og %2.;SVE=Skapa en godkÑnnandebegÑran fîr posten med godkÑnnartyp %1 och %2.';
      CreateApprovalWorkflowGroupTxt@1028 : TextConst '@@@="%1 = Workflow user group code";ENU=workflow user group code %1;NOR=kode for brukergruppe for arbeidsflyt %1;SVE=kod fîr arbetsflîdesanvÑndargrupp %1';
      CreateApprovalApprovalLimitTxt@1027 : TextConst '@@@="%1 = Approval limit type";ENU=approver limit type %1;NOR=godkjennergrensetype %1;SVE=grÑnstyp fîr godkÑnnare %1';
      GetApprovalCommentTxt@1010 : TextConst 'ENU=Open Approval Comments page.;NOR=èpne siden Godkjenningsmerknader.;SVE=ôppna sidan GodkÑnnandekommentarer.';
      OpenDocumentTxt@1009 : TextConst 'ENU=Reopen the document.;NOR=èpne dokumentet pÜ nytt.;SVE=ôppna dokumentet igen.';
      ReleaseDocumentTxt@1008 : TextConst 'ENU=Release the document.;NOR=Frigi dokumentet.;SVE=SlÑpp dokumentet.';
      SendApprReqForApprovalTxt@1007 : TextConst 'ENU=Send approval request for the record and create a notification.;NOR=Send godkjenningsforespõrsler for posten, og opprett et varsel.;SVE=Skapa godkÑnnandebegÑranden fîr posten och skapa ett meddelande.';
      ApproveAllApprReqTxt@1038 : TextConst 'ENU=Approve the approval request for the record.;NOR=Godkjenn godkjenningsforespõrselen for posten.;SVE=GodkÑnn godkÑnnandebegÑran fîr posten.';
      RejectAllApprReqTxt@1006 : TextConst 'ENU=Reject the approval request for the record and create a notification.;NOR=Avvis godkjenningsforespõrselen for posten, og opprett et varsel.;SVE=Avvisa godkÑnnandebegÑran fîr posten och skapa ett meddelande.';
      CancelAllAppReqTxt@1005 : TextConst 'ENU=Cancel the approval request for the record and create a notification.;NOR=Annuller godkjenningsforespõrselen for posten, og opprett et varsel.;SVE=Annullera godkÑnnandebegÑran fîr posten och skapa ett meddelande.';
      PostDocumentTxt@1015 : TextConst 'ENU=Post the sales or purchase document.;NOR=Bokfõr salgs- eller kjõpsdokumentet.;SVE=Bokfîr fîrsÑljnings- eller inkîpsdokumentet.';
      BackgroundDocumentPostTxt@1016 : TextConst 'ENU=Post the sales or purchase document in the background.;NOR=Bokfõr salgs- eller kjõpsdokumentet i bakgrunnen.;SVE=Bokfîr fîrsÑljnings- eller inkîpsdokumentet i bakgrunden.';
      BackgroundOCRReceiveIncomingDocTxt@1043 : TextConst 'ENU=Receive the incoming document from OCR in the background.;NOR=Motta det innkommende dokumentet fra OCR i bakgrunnen.;SVE=Ta emot inkommande dokument frÜn OCR i bakgrunden.';
      BackgroundOCRSendIncomingDocTxt@1044 : TextConst 'ENU=Send the incoming document to OCR in the background.;NOR=Send det innkommende dokumentet til OCR i bakgrunnen.;SVE=Skicka inkommande dokument till OCR i bakgrunden.';
      CheckCustomerCreditLimitTxt@1003 : TextConst 'ENU=Check if the customer credit limit is exceeded.;NOR=Kontroller om kundekredittgrensen er overskredet.;SVE=Kontrollerar om kundens kreditlimit har îverskridits.';
      CheckGeneralJournalBatchBalanceTxt@1032 : TextConst 'ENU=Check if the general journal batch is balanced.;NOR=Kontroller om finanskladden er avstemt.;SVE=Kontrollera om redovisningsjournalen Ñr balanserad.';
      CreateApproveApprovalRequestAutomaticallyTxt@1021 : TextConst 'ENU=Create and approve an approval request automatically.;NOR=Opprett og godkjenn automatisk en godkjenningsforespõrsel.;SVE=Skapa och godkÑnn en godkÑnnandebegÑran automatiskt.';
      SetStatusToPendingApprovalTxt@1025 : TextConst 'ENU=Set document status to Pending Approval.;NOR=Sett dokumentstatus til Venter pÜ godkjenning.;SVE=Ange dokumentstatus som VÑntar pÜ godkÑnnande.';
      UserIDTok@1019 : TextConst 'ENU=<User>;NOR=<Bruker>;SVE=<AnvÑndare>';
      TemplateTok@1018 : TextConst 'ENU=<Template>;NOR=<Mal>;SVE=<Mall>';
      GenJnlBatchTok@1017 : TextConst 'ENU=<Batch>;NOR=<Bunke>;SVE=<Batch>';
      UnsupportedRecordTypeErr@1020 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.;NOR=Posttypen %1 stõttes ikke av dette arbeidsflytsvaret.;SVE=Posttyp %1 stîds inte i arbetsflîdessvaret.';
      CreateOverdueNotifTxt@1022 : TextConst 'ENU=Create notification for overdue approval requests.;NOR=Opprett varsel for forfalte godkjenningsforespõrsler.;SVE=Skapa meddelande om fîrfallna begÑranden om godkÑnnande.';
      ResponseAlreadyExistErr@1023 : TextConst 'ENU=A response with description %1 already exists.;NOR=Et svar med beskrivelsen %1 finnes allerede.;SVE=Ett svar med beskrivning %1ˇfinns redan.';
      ApproverTypeTok@1002 : TextConst 'ENU=<Approver Type>;NOR=<Godkjennertype>;SVE=<GodkÑnnartyp>';
      ApproverLimitTypeTok@1024 : TextConst 'ENU=<Approver Limit Type>;NOR=<Godkjennergrensetype>;SVE=<GrÑnstyp fîr godkÑnnare>';
      WorkflowUserGroupTok@1011 : TextConst 'ENU=<Workflow User Group Code>;NOR=<Kode for brukergruppe for arbeidsflyt>;SVE=<Kod fîr arbetsflîdesanvÑndargrupp>';
      ShowMessageTxt@1033 : TextConst '@@@="%1 = The message to be shown";ENU=Show message "%1".;NOR=Vis meldingen %1.;SVE=Visa meddelandet %1.';
      ShowMessagePlaceholderMsg@1034 : TextConst '@@@={Locked};ENU=%1;NOR=%1;SVE=%1';
      MessageTok@1029 : TextConst 'ENU=<Message>;NOR=<Melding>;SVE=<Meddelande>';
      RestrictRecordUsageTxt@1035 : TextConst 'ENU=Add record restriction.;NOR=Legg til postbegrensning.;SVE=LÑgg till postbegrÑnsning.';
      AllowRecordUsageTxt@1036 : TextConst 'ENU=Remove record restriction.;NOR=Fjern postbegrensning.;SVE=Ta bort postbegrÑnsning.';
      RestrictUsageDetailsTxt@1037 : TextConst '@@@=The restriction was imposed by the PIW workflow, Purchase Invoice Workflow.;ENU=The restriction was imposed by the %1 workflow, %2.;NOR=Begrensningen ble pÜlagt av arbeidsflyten %1, %2.;SVE=BegrÑnsningen kommer frÜn %1-arbetsflîdet, %2.';
      MarkReadyForOCRTxt@1031 : TextConst 'ENU=Mark the incoming document ready for OCR.;NOR=Merk det inngÜende dokumentet som klart for OCR.;SVE=Markera det inkommande dokumentet som klart fîr OCR.';
      SendToOCRTxt@1040 : TextConst 'ENU=Send the incoming document to OCR.;NOR=Send det innkommende dokumentet til OCR.;SVE=Skicka inkommande dokument till OCR.';
      ReceiveFromOCRTxt@1042 : TextConst 'ENU=Receive the incoming document from OCR.;NOR=Motta det innkommende dokumentet fra OCR.;SVE=Ta emot inkommande dokument frÜn OCR.';
      CreateDocFromIncomingDocTxt@1045 : TextConst 'ENU=Create a purchase document from an incoming document.;NOR=Opprett et kjõpsdokument fra et innkommende dokument.;SVE=Skapa ett inkîpsdokument frÜn ett inkommande dokument.';
      CreateReleasedDocFromIncomingDocTxt@1047 : TextConst 'ENU=Create a released purchase document from an incoming document.;NOR=Opprett et frigitt kjõpsdokument fra et innkommende dokument.;SVE=Skapa ett slÑppt inkîpsdokument frÜn ett inkommande dokument.';
      CreateJournalFromIncomingDocTxt@1046 : TextConst 'ENU=Create journal line from incoming document.;NOR=Opprett en kladdelinje fra det innkommende dokumentet.;SVE=Skapa journalrad frÜn inkommande dokument.';
      RevertRecordValueTxt@1026 : TextConst '@@@=Revert the value of the Credit Limit (LCY) field on the record and save the change.;ENU=Revert the value of the %1 field on the record and save the change.;NOR=Tilbakestill verdien i feltet %1 i posten, og lagre endringen.;SVE=èterstÑll vÑrdet fîr fÑltet %1 fîr posten och spara Ñndringen.';
      RevertRecordFieldValueTok@1039 : TextConst 'ENU=<Field>;NOR=<Felt>;SVE=<FÑlt>';
      ApplyNewValuesTxt@1041 : TextConst 'ENU=Apply the new values.;NOR=Bruk de nye verdiene.;SVE=TillÑmpa nya vÑrden.';
      DiscardNewValuesTxt@1001 : TextConst 'ENU=Discard the new values.;NOR=Forkast de nye verdiene.;SVE=Makulera de nya vÑrdena.';
      Text11012005@1100529500 : TextConst 'ENU=Post %1 %2 not possible because %3 %4.';

    [External]
    PROCEDURE CreateResponsesLibrary@25();
    BEGIN
      AddResponseToLibrary(DoNothingCode,0,DoNothingTxt,'GROUP 0');
      AddResponseToLibrary(CreateNotificationEntryCode,0,CreateNotifEntryTxt,'GROUP 3');
      AddResponseToLibrary(ReleaseDocumentCode,0,ReleaseDocumentTxt,'GROUP 0');
      AddResponseToLibrary(OpenDocumentCode,0,OpenDocumentTxt,'GROUP 0');
      AddResponseToLibrary(SetStatusToPendingApprovalCode,0,SetStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(GetApprovalCommentCode,0,GetApprovalCommentTxt,'GROUP 0');
      AddResponseToLibrary(CreateApprovalRequestsCode,0,CreateApprovalRequestsTxt,'GROUP 5');
      AddResponseToLibrary(SendApprovalRequestForApprovalCode,0,SendApprReqForApprovalTxt,'GROUP 2');
      AddResponseToLibrary(ApproveAllApprovalRequestsCode,0,ApproveAllApprReqTxt,'GROUP 0');
      AddResponseToLibrary(RejectAllApprovalRequestsCode,0,RejectAllApprReqTxt,'GROUP 2');
      AddResponseToLibrary(CancelAllApprovalRequestsCode,0,CancelAllAppReqTxt,'GROUP 2');
      AddResponseToLibrary(PostDocumentCode,0,PostDocumentTxt,'GROUP 0');
      AddResponseToLibrary(PostDocumentAsyncCode,0,BackgroundDocumentPostTxt,'GROUP 0');

      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocAsyncCode,DATABASE::"Purch. Inv. Header",CreatePmtLineAsyncTxt,'GROUP 1');
      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocCode,DATABASE::"Purch. Inv. Header",CreatePmtLineTxt,'GROUP 1');

      AddResponseToLibrary(CreateOverdueNotificationCode,0,CreateOverdueNotifTxt,'GROUP 2');
      AddResponseToLibrary(CheckCustomerCreditLimitCode,0,CheckCustomerCreditLimitTxt,'GROUP 0');
      AddResponseToLibrary(CheckGeneralJournalBatchBalanceCode,0,CheckGeneralJournalBatchBalanceTxt,'GROUP 0');
      AddResponseToLibrary(CreateAndApproveApprovalRequestAutomaticallyCode,0,CreateApproveApprovalRequestAutomaticallyTxt,'GROUP 0');
      AddResponseToLibrary(ShowMessageCode,0,ShowMessageTxt,'GROUP 4');
      AddResponseToLibrary(RestrictRecordUsageCode,0,RestrictRecordUsageTxt,'GROUP 0');
      AddResponseToLibrary(AllowRecordUsageCode,0,AllowRecordUsageTxt,'GROUP 0');

      AddResponseToLibrary(GetMarkReadyForOCRCode,0,MarkReadyForOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRCode,0,ReceiveFromOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRAsyncCode,0,BackgroundOCRSendIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRAsyncCode,0,BackgroundOCRReceiveIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateDocFromIncomingDocCode,0,CreateDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateReleasedDocFromIncomingDocCode,0,CreateReleasedDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateJournalFromIncomingDocCode,0,CreateJournalFromIncomingDocTxt,'GROUP 0');

      AddResponseToLibrary(RevertValueForFieldCode,0,RevertRecordValueTxt,'GROUP 6');
      AddResponseToLibrary(ApplyNewValuesCode,0,ApplyNewValuesTxt,'GROUP 7');
      AddResponseToLibrary(DiscardNewValuesCode,0,DiscardNewValuesTxt,'GROUP 0');

      OnAddWorkflowResponsesToLibrary;
    END;

    LOCAL PROCEDURE AddResponsePredecessors@33(ResponseFunctionName@1002 : Code[128]);
    VAR
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      CASE ResponseFunctionName OF
        SetStatusToPendingApprovalCode:
          BEGIN
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(
              SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        CreateApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
          END;
        SendApprovalRequestForApprovalCode:
          BEGIN
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnDelegateApprovalRequestCode);
          END;
        ReleaseDocumentCode:
          BEGIN
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        RejectAllApprovalRequestsCode:
          AddResponsePredecessor(RejectAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        OpenDocumentCode:
          BEGIN
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        CancelAllApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(
              CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        RevertValueForFieldCode:
          BEGIN
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
          END;
        ApplyNewValuesCode:
          AddResponsePredecessor(ApplyNewValuesCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
        DiscardNewValuesCode:
          AddResponsePredecessor(DiscardNewValuesCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        GetMarkReadyForOCRCode:
          AddResponsePredecessor(GetMarkReadyForOCRCode,WorkflowEventHandling.RunWorkflowOnBinaryFileAttachedCode);
        CreateOverdueNotificationCode:
          AddResponsePredecessor(CreateOverdueNotificationCode,WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode);
        PostDocumentAsyncCode:
          AddResponsePredecessor(PostDocumentAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        PostDocumentCode:
          AddResponsePredecessor(PostDocumentCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocAsyncCode:
          AddResponsePredecessor(
            CreatePmtLineForPostedPurchaseDocAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocCode:
          AddResponsePredecessor(CreatePmtLineForPostedPurchaseDocCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CheckGeneralJournalBatchBalanceCode:
          AddResponsePredecessor(CheckGeneralJournalBatchBalanceCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        CheckCustomerCreditLimitCode:
          AddResponsePredecessor(CheckCustomerCreditLimitCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
        CreateAndApproveApprovalRequestAutomaticallyCode:
          AddResponsePredecessor(CreateAndApproveApprovalRequestAutomaticallyCode,
            WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
        GetReceiveFromOCRCode:
          AddResponsePredecessor(GetReceiveFromOCRCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetReceiveFromOCRAsyncCode:
          AddResponsePredecessor(GetReceiveFromOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetSendToOCRCode:
          AddResponsePredecessor(GetSendToOCRCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
        GetSendToOCRAsyncCode:
          AddResponsePredecessor(GetSendToOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
      END;
      OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName);
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowResponsesToLibrary@1();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowResponsePredecessorsToLibrary@49(ResponseFunctionName@1000 : Code[128]);
    BEGIN
    END;

    [Internal]
    PROCEDURE ExecuteResponse@2(VAR Variant@1000 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504;xVariant@1004 : Variant);
    VAR
      WorkflowResponse@1002 : Record 1521;
      WorkflowChangeRecMgt@1007 : Codeunit 1531;
      ResponseExecuted@1003 : Boolean;
    BEGIN
      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          DoNothingCode:
            DoNothing;
          CreateNotificationEntryCode:
            CreateNotificationEntry(Variant,ResponseWorkflowStepInstance);
          ReleaseDocumentCode:
            ReleaseDocument(Variant);
          OpenDocumentCode:
            OpenDocument(Variant);
          SetStatusToPendingApprovalCode:
            SetStatusToPendingApproval(Variant);
          GetApprovalCommentCode:
            GetApprovalComment(Variant,ResponseWorkflowStepInstance.ID);
          CreateApprovalRequestsCode:
            CreateApprovalRequests(Variant,ResponseWorkflowStepInstance);
          SendApprovalRequestForApprovalCode:
            SendApprovalRequestForApproval(Variant,ResponseWorkflowStepInstance);
          ApproveAllApprovalRequestsCode:
            ApproveAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          RejectAllApprovalRequestsCode:
            RejectAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          CancelAllApprovalRequestsCode:
            CancelAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          PostDocumentCode:
            PostDocument(Variant);
          PostDocumentAsyncCode:
            PostDocumentAsync(Variant);
          CreatePmtLineForPostedPurchaseDocAsyncCode:
            CreatePmtLineForPostedPurchaseDocAsync(ResponseWorkflowStepInstance);
          CreatePmtLineForPostedPurchaseDocCode:
            CreatePmtLineForPostedPurchaseDoc(ResponseWorkflowStepInstance);
          CreateOverdueNotificationCode:
            CreateOverdueNotifications(ResponseWorkflowStepInstance);
          CheckCustomerCreditLimitCode:
            CheckCustomerCreditLimit(Variant);
          CheckGeneralJournalBatchBalanceCode:
            CheckGeneralJournalBatchBalance(Variant);
          CreateAndApproveApprovalRequestAutomaticallyCode:
            CreateAndApproveApprovalRequestAutomatically(Variant,ResponseWorkflowStepInstance);
          ShowMessageCode:
            ShowMessage(ResponseWorkflowStepInstance);
          RestrictRecordUsageCode:
            RestrictRecordUsage(Variant,ResponseWorkflowStepInstance);
          AllowRecordUsageCode:
            AllowRecordUsage(Variant);
          GetMarkReadyForOCRCode:
            MarkReadyForOCR(Variant);
          GetSendToOCRCode:
            SendToOCR(Variant);
          GetSendToOCRAsyncCode:
            SendToOCRAsync(Variant);
          GetReceiveFromOCRCode:
            ReceiveFromOCR(Variant);
          GetReceiveFromOCRAsyncCode:
            ReceiveFromOCRAsync(Variant);
          GetCreateDocFromIncomingDocCode:
            CreateDocFromIncomingDoc(Variant);
          GetCreateReleasedDocFromIncomingDocCode:
            CreateReleasedDocFromIncomingDoc(Variant);
          GetCreateJournalFromIncomingDocCode:
            CreateJournalFromIncomingDoc(Variant);
          RevertValueForFieldCode:
            WorkflowChangeRecMgt.RevertValueForField(Variant,xVariant,ResponseWorkflowStepInstance);
          ApplyNewValuesCode:
            WorkflowChangeRecMgt.ApplyNewValues(Variant,ResponseWorkflowStepInstance);
          DiscardNewValuesCode:
            WorkflowChangeRecMgt.DiscardNewValues(Variant,ResponseWorkflowStepInstance);
          ELSE BEGIN
            OnExecuteWorkflowResponse(ResponseExecuted,Variant,xVariant,ResponseWorkflowStepInstance);
            IF NOT ResponseExecuted THEN
              ERROR(NotSupportedResponseErr,WorkflowResponse."Function Name");
          END;
        END;
    END;

    [Integration]
    LOCAL PROCEDURE OnExecuteWorkflowResponse@47(VAR ResponseExecuted@1000 : Boolean;VAR Variant@1002 : Variant;xVariant@1003 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504);
    BEGIN
    END;

    [External]
    PROCEDURE DoNothingCode@30() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DoNothing'));
    END;

    [External]
    PROCEDURE CreateNotificationEntryCode@34() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateNotificationEntry'));
    END;

    [External]
    PROCEDURE ReleaseDocumentCode@35() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReleaseDocument'));
    END;

    [External]
    PROCEDURE OpenDocumentCode@36() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenDocument'));
    END;

    [External]
    PROCEDURE SetStatusToPendingApprovalCode@24() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetStatusToPendingApproval'));
    END;

    [External]
    PROCEDURE GetApprovalCommentCode@38() : Code[128];
    BEGIN
      EXIT(UPPERCASE('GetApprovalComment'));
    END;

    [External]
    PROCEDURE CreateApprovalRequestsCode@39() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateApprovalRequests'));
    END;

    [External]
    PROCEDURE SendApprovalRequestForApprovalCode@40() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendApprovalRequestForApproval'));
    END;

    [External]
    PROCEDURE ApproveAllApprovalRequestsCode@59() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApproveAllApprovalRequests'));
    END;

    [External]
    PROCEDURE RejectAllApprovalRequestsCode@42() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RejectAllApprovalRequests'));
    END;

    [External]
    PROCEDURE CancelAllApprovalRequestsCode@43() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CancelAllApprovalRequests'));
    END;

    [External]
    PROCEDURE PostDocumentAsyncCode@44() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundPostApprovedPurchaseDoc'));
    END;

    [External]
    PROCEDURE PostDocumentCode@45() : Code[128];
    BEGIN
      EXIT(UPPERCASE('PostDocument'));
    END;

    [External]
    PROCEDURE CreatePmtLineForPostedPurchaseDocAsyncCode@46() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundCreatePmtLineForPostedDocument'));
    END;

    [External]
    PROCEDURE CreatePmtLineForPostedPurchaseDocCode@22() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreatePmtLineForPostedDocument'));
    END;

    [External]
    PROCEDURE CreateOverdueNotificationCode@16() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateOverdueNotifications'));
    END;

    [External]
    PROCEDURE CheckCustomerCreditLimitCode@20() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckCustomerCreditLimit'));
    END;

    [External]
    PROCEDURE CheckGeneralJournalBatchBalanceCode@50() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckGeneralJournalBatchBalance'));
    END;

    [External]
    PROCEDURE CreateAndApproveApprovalRequestAutomaticallyCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateAndApproveApprovalRequestAutomatically'));
    END;

    [External]
    PROCEDURE ShowMessageCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ShowMessage'));
    END;

    [External]
    PROCEDURE RestrictRecordUsageCode@58() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RestrictRecordUsage'));
    END;

    [External]
    PROCEDURE AllowRecordUsageCode@55() : Code[128];
    BEGIN
      EXIT(UPPERCASE('AllowRecordUsage'));
    END;

    [External]
    PROCEDURE GetMarkReadyForOCRCode@41() : Code[128];
    BEGIN
      EXIT(UPPERCASE('MarkReadyForOCR'));
    END;

    [External]
    PROCEDURE GetSendToOCRAsyncCode@68() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundSendToOCR'));
    END;

    [External]
    PROCEDURE GetSendToOCRCode@65() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendToOCR'));
    END;

    [External]
    PROCEDURE GetReceiveFromOCRAsyncCode@69() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundReceiveFromOCR'));
    END;

    [External]
    PROCEDURE GetReceiveFromOCRCode@66() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReceiveFromOCR'));
    END;

    [External]
    PROCEDURE GetCreateDocFromIncomingDocCode@83() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateDocFromIncomingDoc'));
    END;

    [External]
    PROCEDURE GetCreateReleasedDocFromIncomingDocCode@70() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateReleasedDocFromIncomingDoc'));
    END;

    [External]
    PROCEDURE GetCreateJournalFromIncomingDocCode@63() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateJournalFromIncomingDoc'));
    END;

    [External]
    PROCEDURE RevertValueForFieldCode@64() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RevertValueForField'));
    END;

    [External]
    PROCEDURE ApplyNewValuesCode@32() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApplyNewValues'));
    END;

    [External]
    PROCEDURE DiscardNewValuesCode@18() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DiscardNewValues'));
    END;

    LOCAL PROCEDURE DoNothing@3();
    BEGIN
    END;

    LOCAL PROCEDURE CreateNotificationEntry@4(Variant@1001 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      NotificationEntry@1004 : Record 1511;
      RecRef@1100527900 : RecordRef;
      UserSetup@1100527902 : Record 91;
      RecipientUserID@1100527903 : Code[50];
      ApprovalEntry@1100528500 : Record 454;
      TableID@1100528501 : Integer;
      EmployeeNo@1100528502 : Code[20];
      FieldRef@1100528503 : FieldRef;
    BEGIN
      //**4PS.so
      // IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
      //  NotificationEntry.CreateNew(NotificationEntry.Type::"New Record",
      //    WorkflowStepArgument."Notification User ID",Variant,WorkflowStepArgument."Link Target Page",
      //    WorkflowStepArgument."Custom Link");
      //**4PS.eo
      //**4PS.sn
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        CASE WorkflowStepArgument."Default Recipient" OF
          WorkflowStepArgument."Default Recipient"::RecipientID :
            NotificationEntry.CreateNew(NotificationEntry.Type::"New Record",
              WorkflowStepArgument."Notification User ID",Variant,WorkflowStepArgument."Link Target Page",
              WorkflowStepArgument."Custom Link");
          WorkflowStepArgument."Default Recipient"::SenderID :
            NotificationEntry.CreateNew(NotificationEntry.Type::"New Record",
              USERID,Variant,WorkflowStepArgument."Link Target Page",
              WorkflowStepArgument."Custom Link");
          WorkflowStepArgument."Default Recipient"::EmployeeNo :
            IF Variant.ISRECORD THEN BEGIN
              RecRef.GETTABLE(Variant);
              IF RecRef.NUMBER = DATABASE::"Approval Entry" THEN BEGIN
                FieldRef := RecRef.FIELD(ApprovalEntry.FIELDNO("Table ID"));
                TableID := FieldRef.VALUE;
                IF TableID IN [DATABASE::"Hour Accounting", DATABASE::"Site Mngmnt. Hours Header"] THEN BEGIN
                  FieldRef := RecRef.FIELD(ApprovalEntry.FIELDNO("Employee No."));
                  EmployeeNo := FieldRef.VALUE;
                  UserSetup.SETRANGE("Employee No.", EmployeeNo);
                  IF UserSetup.FINDFIRST THEN
                    RecipientUserID := UserSetup."User ID"
                  ELSE
                    RecipientUserID := USERID;
                  NotificationEntry.CreateNew(NotificationEntry.Type::"New Record",
                    RecipientUserID,Variant,WorkflowStepArgument."Link Target Page",
                    WorkflowStepArgument."Custom Link");
                END;
              END;
            END;
        END;
      //**4PS.en
    END;

    LOCAL PROCEDURE ReleaseDocument@5(VAR Variant@1001 : Variant);
    VAR
      ApprovalEntry@1000 : Record 454;
      WorkflowWebhookEntry@1007 : Record 467;
      ReleasePurchaseDocument@1006 : Codeunit 415;
      ReleaseSalesDocument@1005 : Codeunit 414;
      ReleaseIncomingDocument@1009 : Codeunit 132;
      RecRef@1004 : RecordRef;
      TargetRecRef@1008 : RecordRef;
      Handled@1002 : Boolean;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      PurchHeader@1100528201 : Record 38;
      PostingOK@1100528202 : Boolean;
      ApprovalsBridge4PSConstruct@1100528204 : Codeunit 11125348;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            ApprovalManagement4PSConstr.CheckFourEyesApproval(ApprovalEntry, TargetRecRef); //**4PS.n
            Variant := TargetRecRef;
            ReleaseDocument(Variant);
          END;
        DATABASE::"Workflow Webhook Entry":
          BEGIN
            WorkflowWebhookEntry := Variant;
            TargetRecRef.GET(WorkflowWebhookEntry."Record ID");
            Variant := TargetRecRef;
            ReleaseDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            ReleasePurchaseDocument.PerformManualCheckAndRelease(Variant);
            //**4PS.sn Call C022022
            //below is not actual becauss Purchheader is empty here.
            IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice, PurchHeader."Document Type"::"Credit Memo"] THEN BEGIN
              PurchHeader := Variant;
              PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");  //refresh current record
              PostingOK := FALSE;
              IF PurchHeader.Status = PurchHeader.Status::Released THEN BEGIN
                IF ApprovalManagement4PSConstr.ApprovePurchHeaderDC(PurchHeader) THEN
                  PostingOK := TRUE;
              END;
              IF NOT PostingOK THEN BEGIN
                PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");  //refresh current record
                IF PurchHeader.Status = PurchHeader.Status::Released THEN
                  ReleasePurchaseDocument.PerformManualReopen(PurchHeader);
                ApprovalsBridge4PSConstruct.SendApprovalRequest(PurchHeader);
              END;
            END;
            //**4PS.en Call C022022
            PurchHeader := Variant;
            PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");  //refresh current record
            IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice, PurchHeader."Document Type"::"Credit Memo"] THEN BEGIN
              IF PurchHeader.Status = PurchHeader.Status::Released THEN BEGIN
                PurchHeader."Approval Code" := '';
                PurchHeader.MODIFY;
              END;
            END;
          END;
        DATABASE::"Sales Header":
          ReleaseSalesDocument.PerformManualCheckAndRelease(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.PerformManualRelease(Variant);
        //**4PS.sn better to use approval bridge 4PS CU ???
        DATABASE::"Purch. Inv. Header":
          ApprovalManagement4PSConstr.ApprovePurchInvHeader4PS(Variant);
        DATABASE::"Purch. Cr. Memo Hdr.":
          ApprovalManagement4PSConstr.ApprovePurchCrMemo4PS(Variant);
        DATABASE::"Project Purchase Action":
          ApprovalManagement4PSConstr.ApproveProjectPurchaseAction(Variant);
        DATABASE::"Advice Order Line":
          ApprovalManagement4PSConstr.ApproveAdviceOrderLine(Variant);
        DATABASE::"Purchase Requisition":
          ApprovalManagement4PSConstr.ApprovePurchaseRequisition(Variant);
        DATABASE::"Site Mngmnt. Hours Header":
          ApprovalManagement4PSConstr.ApproveSiteMngmntHours(Variant);
        DATABASE::"Hour Accounting":
          ApprovalManagement4PSConstr.ApproveHourAccounting(Variant);
        //**4PS.en
        ELSE BEGIN
          OnReleaseDocument(RecRef,Handled);
          IF NOT Handled THEN
            ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
        END;
      END;
    END;

    LOCAL PROCEDURE OpenDocument@6(VAR Variant@1000 : Variant);
    VAR
      ApprovalEntry@1005 : Record 454;
      WorkflowWebhookEntry@1009 : Record 467;
      ReleasePurchaseDocument@1001 : Codeunit 415;
      ReleaseSalesDocument@1006 : Codeunit 414;
      ReleaseIncomingDocument@1008 : Codeunit 132;
      RecRef@1002 : RecordRef;
      TargetRecRef@1007 : RecordRef;
      Handled@1003 : Boolean;
      PurchaseRequisitionMgt@1100528200 : Codeunit 11229287;
      AdviceOrderManagement@1100528201 : Codeunit 11012041;
      SiteMngmntHours@1100528202 : Codeunit 11012178;
      PurchaseActionMgt@1100528206 : Codeunit 11229288;
      HourAccounting@1100528205 : Record 11012038;
      PurchaseRequisition@1100528207 : Record 11229330;
      UserSetup@1100528203 : Record 91;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            Variant := TargetRecRef;
            OpenDocument(Variant);
          END;
        DATABASE::"Workflow Webhook Entry":
          BEGIN
            WorkflowWebhookEntry := Variant;
            TargetRecRef.GET(WorkflowWebhookEntry."Record ID");
            Variant := TargetRecRef;
            OpenDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          ReleasePurchaseDocument.Reopen(Variant);
        DATABASE::"Sales Header":
          ReleaseSalesDocument.Reopen(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.Reopen(Variant);
        //**4PS.sn
        DATABASE::"Purchase Requisition":
          BEGIN
            PurchaseRequisition := Variant;
            PurchaseRequisition.SETRECFILTER;
            Variant := PurchaseRequisition ;
            PurchaseRequisitionMgt.ReopenRequisition(Variant);
          END;
        DATABASE::"Advice Order Line":
          AdviceOrderManagement.ReopenAdviceOrder(Variant);
        DATABASE::"Project Purchase Action":
          PurchaseActionMgt.ReopenPurchaseAction(Variant);
        DATABASE::"Site Mngmnt. Hours Header":
          SiteMngmntHours.Reopen(Variant);
        DATABASE::"Hour Accounting":
          BEGIN
            IF UserSetup.GET(USERID) THEN;
            HourAccounting := Variant;
            HourAccounting.SetStatus(FALSE, UserSetup."Employee No.");
            HourAccounting.MODIFY;
            Variant := HourAccounting ;
          END;
        //**4PS.en
        ELSE BEGIN
          OnOpenDocument(RecRef,Handled);
          IF NOT Handled THEN
            ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
        END;
      END;
    END;

    [External]
    PROCEDURE SetStatusToPendingApproval@31(VAR Variant@1000 : Variant);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.SetStatusToPendingApproval(Variant);
    END;

    LOCAL PROCEDURE GetApprovalComment@8(Variant@1000 : Variant;WorkflowStepInstanceID@1002 : GUID);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.GetApprovalCommentForWorkflowStepInstanceID(Variant,WorkflowStepInstanceID);
    END;

    LOCAL PROCEDURE CreateApprovalRequests@29(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1004 : Codeunit 1535;
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      ApprovalsMgmt.CreateApprovalRequests(RecRef,WorkflowStepInstance);
    END;

    LOCAL PROCEDURE BuildTheCreateApprovalReqDescription@124(WorkflowResponse@1001 : Record 1521;WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      ApproverLimitDesc@1002 : Text;
      WorkflowUserGroupDesc@1003 : Text;
    BEGIN
      ApproverLimitDesc := STRSUBSTNO(CreateApprovalApprovalLimitTxt,
          GetTokenValue(ApproverLimitTypeTok,FORMAT(WorkflowStepArgument."Approver Limit Type")));
      WorkflowUserGroupDesc := STRSUBSTNO(CreateApprovalWorkflowGroupTxt,
          GetTokenValue(WorkflowUserGroupTok,FORMAT(WorkflowStepArgument."Workflow User Group Code")));

      IF GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")) = ApproverTypeTok THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,ApproverTypeTok,
              STRSUBSTNO('%1/%2',ApproverLimitDesc,WorkflowUserGroupDesc)),1,250));

      IF WorkflowStepArgument."Approver Type" <> WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
              GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
              ApproverLimitDesc),1,250));

      EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
            GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
            WorkflowUserGroupDesc),1,250));
    END;

    LOCAL PROCEDURE SendApprovalRequestForApproval@9(Variant@1000 : Variant;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalsMgmt@1003 : Codeunit 1535;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          ApprovalsMgmt.SendApprovalRequestFromApprovalEntry(Variant,WorkflowStepInstance);
        ELSE
          ApprovalsMgmt.SendApprovalRequestFromRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ApproveAllApprovalRequests@60(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApproveAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.ApproveApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE RejectAllApprovalRequests@11(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            RejectAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.RejectApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE CancelAllApprovalRequests@12(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            CancelAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.CancelApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE PostDocumentAsync@13(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1003 : Record 36;
      RecRef@1004 : RecordRef;
      PurchCrMemoHdr@1100529500 : Record 124;
      PurchInvHeader@1100529501 : Record 122;
      InvoiceApprovalLine@1100529502 : Record 11012032;
      PostInvoiceApproval@1100529503 : Codeunit 11012027;
      ApprovalEntry@1100529504 : Record 454;
    BEGIN
      RecRef.GETTABLE(Variant);

      //**4PS.sn
      IF RecRef.NUMBER = DATABASE::"Approval Entry" THEN BEGIN
        ApprovalEntry := Variant;
        RecRef.GET(ApprovalEntry."Record ID to Approve");
        PostDocumentAsync(RecRef);
        EXIT;
      END;
      //**4PS.en

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            PurchaseHeader := Variant;
            PurchaseHeader.TESTFIELD(Status,PurchaseHeader.Status::Released);
            JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Purchase Post via Job Queue",PurchaseHeader.RECORDID);
          END;
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);
            JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Sales Post via Job Queue",SalesHeader.RECORDID);
          END;
        //**4PS.sn
        DATABASE::"Purch. Inv. Header":
          BEGIN
            PurchInvHeader := Variant;
            IF NOT PurchInvHeader."Invoice Approved" THEN BEGIN
              PurchInvHeader.AddToDMSWorkFlow();
              IF NOT PurchInvHeader.PostingAllowedInDMSStatus THEN
                MESSAGE(Text11012005, PurchInvHeader.TABLECAPTION, PurchInvHeader."No.",
                  PurchInvHeader.FIELDCAPTION("DMS Status"),PurchInvHeader."DMS Status")
              ELSE BEGIN
                InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
                InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Purchase Invoice");
                InvoiceApprovalLine.SETRANGE("Document No.", PurchInvHeader."No.");
                InvoiceApprovalLine.FINDFIRST;
                PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
              END;
            END;
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            PurchCrMemoHdr := Variant;
            IF NOT PurchCrMemoHdr."Credit Memo Approved" THEN BEGIN
              PurchCrMemoHdr.AddToDMSWorkFlow();
              IF NOT PurchCrMemoHdr.PostingAllowedInDMSStatus THEN
                MESSAGE(Text11012005, PurchCrMemoHdr.TABLECAPTION, PurchCrMemoHdr."No.",
                  PurchCrMemoHdr.FIELDCAPTION("DMS Status"),PurchCrMemoHdr."DMS Status")
              ELSE BEGIN
                InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchCrMemoHdr."Journal Template");
                InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Credit Memo");
                InvoiceApprovalLine.SETRANGE("Document No.", PurchCrMemoHdr."No.");
                InvoiceApprovalLine.FINDFIRST;
                PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
              END;
            END;
          END;
          //**4PS.en
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE PostDocument@14(Variant@1000 : Variant);
    VAR
      RecRef@1001 : RecordRef;
      PurchCrMemoHdr@1100529503 : Record 124;
      PurchInvHeader@1100529502 : Record 122;
      InvoiceApprovalLine@1100529501 : Record 11012032;
      PostInvoiceApproval@1100529500 : Codeunit 11012027;
      ApprovalEntry@1100529504 : Record 454;
    BEGIN
      RecRef.GETTABLE(Variant);

      //**4PS.sn
      IF RecRef.NUMBER = DATABASE::"Approval Entry" THEN BEGIN
        ApprovalEntry := Variant;
        RecRef.GET(ApprovalEntry."Record ID to Approve");
        PostDocument(RecRef);
        EXIT;
      END;
      //**4PS.en

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          CODEUNIT.RUN(CODEUNIT::"Purch.-Post",Variant);
        DATABASE::"Sales Header":
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",Variant);
        //**4PS.sn
        DATABASE::"Purch. Inv. Header":
          BEGIN
            PurchInvHeader := Variant;
            IF NOT PurchInvHeader."Invoice Approved" THEN BEGIN
              PurchInvHeader.AddToDMSWorkFlow();
              IF NOT PurchInvHeader.PostingAllowedInDMSStatus THEN
                MESSAGE(Text11012005, PurchInvHeader.TABLECAPTION, PurchInvHeader."No.",
                  PurchInvHeader.FIELDCAPTION("DMS Status"),PurchInvHeader."DMS Status")
              ELSE BEGIN
                InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
                InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Purchase Invoice");
                InvoiceApprovalLine.SETRANGE("Document No.", PurchInvHeader."No.");
                InvoiceApprovalLine.FINDFIRST;
                PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
              END;
            END;
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            PurchCrMemoHdr := Variant;
            IF NOT PurchCrMemoHdr."Credit Memo Approved" THEN BEGIN
              PurchCrMemoHdr.AddToDMSWorkFlow();
              IF NOT PurchCrMemoHdr.PostingAllowedInDMSStatus THEN
                MESSAGE(Text11012005, PurchCrMemoHdr.TABLECAPTION, PurchCrMemoHdr."No.",
                  PurchCrMemoHdr.FIELDCAPTION("DMS Status"),PurchCrMemoHdr."DMS Status")
              ELSE BEGIN
                InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchCrMemoHdr."Journal Template");
                InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Credit Memo");
                InvoiceApprovalLine.SETRANGE("Document No.", PurchCrMemoHdr."No.");
                InvoiceApprovalLine.FINDFIRST;
                PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
              END;
            END;
          END;
        //**4PS.en
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDocAsync@15(WorkflowStepInstance@1000 : Record 1504);
    VAR
      JobQueueEntry@1001 : Record 472;
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Workflow Create Payment Line",WorkflowStepArgument.RECORDID);
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDoc@17(WorkflowStepInstance@1000 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      WorkflowCreatePaymentLine@1001 : Codeunit 1512;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowCreatePaymentLine.CreatePmtLine(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CheckCustomerCreditLimit@53(Variant@1000 : Variant);
    VAR
      SalesHeader@1003 : Record 36;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.CheckAvailableCreditLimit;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckGeneralJournalBatchBalance@48(Variant@1000 : Variant);
    VAR
      GenJournalBatch@1002 : Record 232;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Gen. Journal Batch":
          BEGIN
            GenJournalBatch := Variant;
            GenJournalBatch.CheckBalance;
          END;
      END;
    END;

    LOCAL PROCEDURE CreateAndApproveApprovalRequestAutomatically@23(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
        DATABASE::Customer:
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ShowMessage@54(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      WorkflowStepArgument.GET(WorkflowStepInstance.Argument);
      MESSAGE(STRSUBSTNO(ShowMessagePlaceholderMsg,WorkflowStepArgument.Message));
    END;

    LOCAL PROCEDURE RestrictRecordUsage@56(Variant@1000 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      Workflow@1004 : Record 1501;
      RecordRestrictionMgt@1002 : Codeunit 1550;
    BEGIN
      Workflow.GET(WorkflowStepInstance."Workflow Code");
      RecordRestrictionMgt.RestrictRecordUsage(Variant,STRSUBSTNO(RestrictUsageDetailsTxt,Workflow.Code,Workflow.Description));
    END;

    LOCAL PROCEDURE AllowRecordUsage@57(Variant@1000 : Variant);
    VAR
      ApprovalEntry@1004 : Record 454;
      WorkflowWebhookEntry@1007 : Record 467;
      GenJournalBatch@1003 : Record 232;
      ItemJournalBatch@1005 : Record 233;
      FAJournalBatch@1006 : Record 5620;
      RecordRestrictionMgt@1002 : Codeunit 1550;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            RecordRestrictionMgt.AllowRecordUsage(Variant);
            RecRef.SETTABLE(ApprovalEntry);
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            AllowRecordUsage(RecRef);
          END;
        DATABASE::"Workflow Webhook Entry":
          BEGIN
            RecRef.SETTABLE(WorkflowWebhookEntry);
            RecRef.GET(WorkflowWebhookEntry."Record ID");
            AllowRecordUsage(RecRef);
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            RecRef.SETTABLE(GenJournalBatch);
            RecordRestrictionMgt.AllowGenJournalBatchUsage(GenJournalBatch);
          END;
        DATABASE::"Item Journal Batch":
          BEGIN
            RecRef.SETTABLE(ItemJournalBatch);
            RecordRestrictionMgt.AllowItemJournalBatchUsage(ItemJournalBatch);
          END;
        DATABASE::"FA Journal Batch":
          BEGIN
            RecRef.SETTABLE(FAJournalBatch);
            RecordRestrictionMgt.AllowFAJournalBatchUsage(FAJournalBatch);
          END
        ELSE
          RecordRestrictionMgt.AllowRecordUsage(Variant);
      END;
    END;

    [External]
    PROCEDURE AddResponseToLibrary@26(FunctionName@1002 : Code[128];TableID@1001 : Integer;Description@1000 : Text[250];ResponseOptionGroup@1004 : Code[20]);
    VAR
      WorkflowResponse@1003 : Record 1521;
      LogonManagement@1005 : Codeunit 9802;
    BEGIN
      IF WorkflowResponse.GET(FunctionName) THEN
        EXIT;

      WorkflowResponse.SETRANGE(Description,Description);
      IF NOT WorkflowResponse.ISEMPTY THEN BEGIN
        IF LogonManagement.IsLogonInProgress THEN
          EXIT;
        ERROR(ResponseAlreadyExistErr,Description);
      END;

      WorkflowResponse.INIT;
      WorkflowResponse."Function Name" := FunctionName;
      WorkflowResponse."Table ID" := TableID;
      WorkflowResponse.Description := Description;
      WorkflowResponse."Response Option Group" := ResponseOptionGroup;
      WorkflowResponse.INSERT;

      AddResponsePredecessors(WorkflowResponse."Function Name");
    END;

    [External]
    PROCEDURE AddResponsePredecessor@61(FunctionName@1000 : Code[128];PredecessorFunctionName@1001 : Code[128]);
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::Response;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [External]
    PROCEDURE GetDescription@28(WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      WorkflowResponse@1001 : Record 1521;
    BEGIN
      IF NOT WorkflowResponse.GET(WorkflowStepArgument."Response Function Name") THEN
        EXIT('');
      CASE WorkflowResponse."Function Name" OF
        CreateNotificationEntryCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(UserIDTok,WorkflowStepArgument."Notification User ID")),1,250));
        ShowMessageCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(MessageTok,WorkflowStepArgument.Message)),1,250));
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(TemplateTok,WorkflowStepArgument."General Journal Template Name"),
                GetTokenValue(GenJnlBatchTok,WorkflowStepArgument."General Journal Batch Name")),1,250));
        CreateApprovalRequestsCode:
          EXIT(BuildTheCreateApprovalReqDescription(WorkflowResponse,WorkflowStepArgument));
        SendApprovalRequestForApprovalCode,
        RejectAllApprovalRequestsCode,
        CancelAllApprovalRequestsCode,
        CreateOverdueNotificationCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description),1,250));
        RevertValueForFieldCode:
          BEGIN
            WorkflowStepArgument.CALCFIELDS("Field Caption");
            EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                  GetTokenValue(RevertRecordFieldValueTok,WorkflowStepArgument."Field Caption")),1,250));
          END;
        ELSE
          EXIT(WorkflowResponse.Description);
      END;
    END;

    LOCAL PROCEDURE GetTokenValue@27(TokenValue@1001 : Text;FieldValue@1000 : Text) : Text;
    BEGIN
      IF FieldValue <> '' THEN
        EXIT(FieldValue);

      EXIT(TokenValue);
    END;

    [External]
    PROCEDURE IsArgumentMandatory@10(ResponseFunctionName@1000 : Code[128]) : Boolean;
    VAR
      ArgumentMandatory@1001 : Boolean;
    BEGIN
      IF ResponseFunctionName IN
         [CreateNotificationEntryCode,CreatePmtLineForPostedPurchaseDocAsyncCode,CreateApprovalRequestsCode,
          CreatePmtLineForPostedPurchaseDocCode]
      THEN
        EXIT(TRUE);

      ArgumentMandatory := FALSE;
      OnCheckIsArgumentMandatory(ResponseFunctionName,ArgumentMandatory);
      EXIT(ArgumentMandatory);
    END;

    [External]
    PROCEDURE HasRequiredArguments@19(WorkflowStep@1001 : Record 1502) : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      HasRequiredArgument@1002 : Boolean;
    BEGIN
      IF NOT IsArgumentMandatory(WorkflowStep."Function Name") THEN
        EXIT(TRUE);

      IF NOT WorkflowStepArgument.GET(WorkflowStep.Argument) THEN
        EXIT(FALSE);

      CASE WorkflowStep."Function Name" OF
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          IF (WorkflowStepArgument."General Journal Template Name" = '') OR
             (WorkflowStepArgument."General Journal Batch Name" = '')
          THEN
            EXIT(FALSE);
        CreateApprovalRequestsCode:
          CASE WorkflowStepArgument."Approver Type" OF
            WorkflowStepArgument."Approver Type"::"Workflow User Group":
              BEGIN
                IF WorkflowStepArgument."Workflow User Group Code" = '' THEN
                  EXIT(FALSE);
              END;
            ELSE BEGIN
              IF WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"Specific Approver" THEN
                IF WorkflowStepArgument."Approver User ID" = '' THEN
                  EXIT(FALSE);
            END;
          END;
        CreateNotificationEntryCode:
          IF WorkflowStepArgument."Notification User ID" = '' THEN
            IF WorkflowStepArgument."Default Recipient" = WorkflowStepArgument."Default Recipient"::RecipientID THEN //**4PS.n
              EXIT(FALSE);
      END;

      HasRequiredArgument := TRUE;
      OnCheckHasRequiredArguments(WorkflowStep,WorkflowStepArgument,HasRequiredArgument);
      EXIT(HasRequiredArgument);
    END;

    LOCAL PROCEDURE CreateOverdueNotifications@7(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      NotificationManagement@1002 : Codeunit 1510;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        NotificationManagement.CreateOverdueNotifications(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MarkReadyForOCR@37(Variant@1000 : Variant);
    VAR
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocumentAttachment := Variant;
      IncomingDocument.GET(IncomingDocumentAttachment."Incoming Document Entry No.");
      IncomingDocument.SendToJobQueue(FALSE);
    END;

    LOCAL PROCEDURE SendToOCRAsync@71(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Ready);
      JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"OCR Inc. Doc. via Job Queue",IncomingDocument.RECORDID);
    END;

    LOCAL PROCEDURE SendToOCR@81(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.SendToOCR(FALSE);
    END;

    LOCAL PROCEDURE ReceiveFromOCRAsync@72(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
      OCRIncDocViaJobQueue@1003 : Codeunit 137;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Sent);
      OCRIncDocViaJobQueue.EnqueueIncomingDoc(IncomingDocument);
    END;

    LOCAL PROCEDURE ReceiveFromOCR@82(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.RetrieveFromOCR(FALSE);
    END;

    LOCAL PROCEDURE CreateDocFromIncomingDoc@51(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TryCreateDocumentWithDataExchange;
    END;

    LOCAL PROCEDURE CreateReleasedDocFromIncomingDoc@67(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.CreateReleasedDocumentWithDataExchange;
    END;

    LOCAL PROCEDURE CreateJournalFromIncomingDoc@62(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TryCreateGeneralJournalLineWithDataExchange;
    END;

    [Integration]
    LOCAL PROCEDURE OnOpenDocument@73(RecRef@1000 : RecordRef;VAR Handled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnReleaseDocument@75(RecRef@1001 : RecordRef;VAR Handled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckIsArgumentMandatory@74(ResponseFunctionName@1000 : Code[128];VAR ArgumentMandatory@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckHasRequiredArguments@77(WorkflowStep@1000 : Record 1502;WorkflowStepArgument@1002 : Record 1523;VAR HasRequiredArgument@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

