OBJECT Codeunit 11125361 Json Management 4PS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ReadFirstJSonValue@10000200(InString@10000200 : Text;ParameterName@10000201 : Text;VAR ParameterValue@1100529502 : Text);
    VAR
      JsonToken@10000203 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonToken";
      StringReader@1100529500 : DotNet "'mscorlib'.System.IO.StringReader";
      JsonTextReader@1100529501 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonTextReader";
      PropertyName@10000202 : Text;
    BEGIN
      StringReader := StringReader.StringReader(InString);
      JsonTextReader := JsonTextReader.JsonTextReader(StringReader);
      WHILE JsonTextReader.Read DO
        CASE TRUE OF
          JsonTextReader.TokenType.CompareTo(JsonToken.PropertyName) = 0 :
            PropertyName := FORMAT(JsonTextReader.Value,0,9);
          (PropertyName = ParameterName) AND NOT ISNULL(JsonTextReader.Value)  :
            BEGIN
              ParameterValue := FORMAT(JsonTextReader.Value,0,9);
              EXIT;
            END;
        END;
    END;

    PROCEDURE ReadJSon@5(InString@1000 : Text;VAR CurrDateTime@1100525001 : DateTime);
    VAR
      JsonToken@1001 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonToken";
      PrefixArray@1006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      PrefixString@1005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      StringReader@1100525000 : DotNet "'mscorlib'.System.IO.StringReader";
      JsonTextReader@1100525002 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonTextReader";
      PropertyName@1008 : Text;
      TestPropertyName@1100525005 : Text;
      PropertyPrefix@1100529501 : Text;
      ObjectName@1100529502 : ARRAY [12] OF Text;
      ArrayName@1100529503 : ARRAY [12] OF Text;
      ColumnNo@1003 : ARRAY [12] OF Integer;
      InArray@1007 : ARRAY [250] OF Boolean;
      LineNo@1100525003 : Integer;
      JsonMessage@1100525004 : Record 11229351;
    BEGIN
      CurrDateTime := CURRENTDATETIME;
      JsonMessage.DeleteOld(CurrDateTime);
      LineNo := 0;
      PrefixArray := PrefixArray.CreateInstance(GETDOTNETTYPE(InString),250);
      StringReader := StringReader.StringReader(InString);
      JsonTextReader := JsonTextReader.JsonTextReader(StringReader);
      WHILE JsonTextReader.Read DO
        CASE TRUE OF
          JsonTextReader.TokenType.CompareTo(JsonToken.StartObject) = 0 :
            BEGIN
              IF PropertyName <> '' THEN
                ObjectName[JsonTextReader.Depth + 1] := PropertyName;
              LineNo += 1;
              JsonMessage.INIT;
              JsonMessage."Date Time" := CurrDateTime;
              JsonMessage.Indent := JsonTextReader.Depth;
              JsonMessage."Line No." := LineNo;
              JsonMessage."Column No." := ColumnNo[JsonTextReader.Depth + 1];
              JsonMessage."Node Id" := ObjectName[JsonTextReader.Depth + 1];
              JsonMessage."Node Prefix" := '';
              JsonMessage.Value := '';
              JsonMessage.Type := JsonTextReader.TokenType.ToString;
              JsonMessage.INSERT;
            END;

          JsonTextReader.TokenType.CompareTo(JsonToken.StartArray) = 0 :
            BEGIN
              InArray[JsonTextReader.Depth + 1] := TRUE;
              ColumnNo[JsonTextReader.Depth + 2] := 1;
              ArrayName[JsonTextReader.Depth + 1] := PropertyName;
              LineNo += 1;
              JsonMessage.INIT;
              JsonMessage."Date Time" := CurrDateTime;
              JsonMessage.Indent := JsonTextReader.Depth;
              JsonMessage."Line No." := LineNo;
              JsonMessage."Column No." := ColumnNo[JsonTextReader.Depth + 1];
              JsonMessage."Node Id" := ArrayName[JsonTextReader.Depth + 1];
              JsonMessage."Node Prefix" := '';
              JsonMessage.Value := '';
              JsonMessage.Type := JsonTextReader.TokenType.ToString;
              JsonMessage.INSERT;
            END;

          JsonTextReader.TokenType.CompareTo(JsonToken.StartConstructor) = 0 :
            ;

          JsonTextReader.TokenType.CompareTo(JsonToken.PropertyName) = 0 :
            BEGIN
              TestPropertyName := FORMAT(JsonTextReader.Value,0,9);
              IF TestPropertyName <> '' THEN
                PropertyName := FORMAT(JsonTextReader.Value,0,9);
              PrefixArray.SetValue(JsonTextReader.Value,JsonTextReader.Depth - 1);
              IF JsonTextReader.Depth > 1 THEN BEGIN
                PrefixString := PrefixString.Join('.',PrefixArray,0,JsonTextReader.Depth - 1);
                IF PrefixString.Length > 0 THEN
                  PropertyPrefix := PrefixString.ToString + '.' + FORMAT(JsonTextReader.Value,0,9);
              END;
            END;

          JsonTextReader.TokenType.CompareTo(JsonToken.String) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Integer) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Float) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Boolean) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Date) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Bytes) = 0 :
            BEGIN
              LineNo += 1;
              JsonMessage.INIT;
              JsonMessage."Date Time" := CurrDateTime;
              JsonMessage.Indent := JsonTextReader.Depth;
              JsonMessage."Line No." := LineNo;
              JsonMessage."Column No." := ColumnNo[JsonTextReader.Depth + 1];
              JsonMessage."Node Id" := PropertyName;
              JsonMessage."Node Prefix" := PropertyPrefix;
              JsonMessage.Value := FORMAT(JsonTextReader.Value,-250,9);
              JsonMessage.Type := JsonTextReader.TokenType.ToString;
              JsonMessage.INSERT;
            END;

          JsonTextReader.TokenType.CompareTo(JsonToken.EndConstructor) = 0 :
            ;

          JsonTextReader.TokenType.CompareTo(JsonToken.EndArray) = 0 :
            BEGIN
              InArray[JsonTextReader.Depth + 1] := FALSE;
              LineNo += 1;
              JsonMessage.INIT;
              JsonMessage."Date Time" := CurrDateTime;
              JsonMessage.Indent := JsonTextReader.Depth;
              JsonMessage."Line No." := LineNo;
              JsonMessage."Column No." := ColumnNo[JsonTextReader.Depth + 1];
              JsonMessage."Node Id" := ArrayName[JsonTextReader.Depth + 1];
              JsonMessage."Node Prefix" := '';
              JsonMessage.Value := '';
              JsonMessage.Type := JsonTextReader.TokenType.ToString;
              JsonMessage.INSERT;
              PropertyName := '';
              ColumnNo[JsonTextReader.Depth + 2] := 1;
              ArrayName[JsonTextReader.Depth + 1] := '';
            END;

          JsonTextReader.TokenType.CompareTo(JsonToken.EndObject) = 0 :
            BEGIN
              LineNo += 1;
              JsonMessage.INIT;
              JsonMessage."Date Time" := CurrDateTime;
              JsonMessage.Indent := JsonTextReader.Depth;
              JsonMessage."Line No." := LineNo;
              JsonMessage."Column No." := ColumnNo[JsonTextReader.Depth + 1];
              JsonMessage."Node Id" := ObjectName[JsonTextReader.Depth + 1];
              JsonMessage."Node Prefix" := '';
              JsonMessage.Value := '';
              JsonMessage.Type := JsonTextReader.TokenType.ToString;
              JsonMessage.INSERT;
              PropertyName := '';
              IF JsonTextReader.Depth > 0 THEN BEGIN
                IF InArray[JsonTextReader.Depth] THEN
                  ColumnNo[JsonTextReader.Depth + 1] += 1;
                IF NOT InArray[JsonTextReader.Depth] THEN
                  ObjectName[JsonTextReader.Depth + 1] := '';
              END;
          END;
      END;
      COMMIT;
    END;

    PROCEDURE GetValueAsText@2(JObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";PropertyName@1001 : Text) : Text;
    BEGIN
      EXIT(JObject.GetValue(PropertyName).ToString);
    END;

    PROCEDURE GetValueAsInteger@8(JObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";PropertyName@1001 : Text) : Integer;
    VAR
      DotNetInteger@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Int32";
    BEGIN
      EXIT(DotNetInteger.Parse(JObject.GetValue(PropertyName).ToString));
    END;

    PROCEDURE GetValueAsDecimal@3(JObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";PropertyName@1001 : Text) : Decimal;
    VAR
      DotNetDecimal@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Decimal";
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      EXIT(DotNetDecimal.Parse(JObject.GetValue(PropertyName).ToString,CultureInfo.InvariantCulture));
    END;

    PROCEDURE GetValueAsDate@1100528800(JObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";PropertyName@1001 : Text) : Date;
    VAR
      DotNetDateTime@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      Type@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      Type := GETDOTNETTYPE(DotNetDateTime);
      DotNetDateTime := JObject.GetValue(PropertyName).ToObject(Type);
      EXIT(DT2DATE(DotNetDateTime));
    END;

    PROCEDURE GetValueAsTime@4(JObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";PropertyName@1001 : Text) : Time;
    VAR
      DotNetDateTime@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      Type@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      Type := GETDOTNETTYPE(DotNetDateTime);
      DotNetDateTime := JObject.GetValue(PropertyName).ToObject(Type);
      EXIT(DT2TIME(DotNetDateTime));
    END;

    PROCEDURE GetValueAsDateTime@6(JObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";PropertyName@1001 : Text) : DateTime;
    VAR
      DotNetDateTime@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      Type@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      Type := GETDOTNETTYPE(DotNetDateTime);
      DotNetDateTime := JObject.GetValue(PropertyName).ToObject(Type);
      EXIT(DotNetDateTime);
    END;

    PROCEDURE GetValueAsBoolean@7(JObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";PropertyName@1001 : Text) : Boolean;
    VAR
      DotNetBoolean@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Boolean";
    BEGIN
      EXIT(DotNetBoolean.Parse(JObject.GetValue(PropertyName).ToString));
    END;

    PROCEDURE GetODataErrorMessage@9(ErrorObject@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JToken") : Text;
    VAR
      JToken@1001 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      JToken := ErrorObject.SelectToken('$.[''odata.error''].[''message'']');
      EXIT(GetValueAsText(JToken,'value'));
    END;

    [TryFunction]
    PROCEDURE TryParse@1(json@1000 : Text;VAR JToken@1002 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JToken");
    BEGIN
      JToken := JToken.Parse(json);
    END;

    BEGIN
    {
      Codeunit to handle Json message.
      2017-01 by Aart Tulp
    }
    END.
  }
}

