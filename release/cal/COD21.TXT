OBJECT Codeunit 21 Item Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=83;
    OnRun=BEGIN
            RunCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot be a closing date;NOR=kan ikke v‘re en avslutningsdato;SVE=kan inte vara ett avslutsdatum';
      Text003@1002 : TextConst 'ENU=must not be negative when %1 is %2;NOR=kan ikke v‘re negativ n†r %1 er %2;SVE=f†r inte vara negativt n„r %1 „r %2';
      Text004@1003 : TextConst 'ENU=must have the same value as %1;NOR=m† ha samme verdi som %1;SVE=m†ste ha samma v„rde som %1';
      Text005@1004 : TextConst 'ENU=must be %1 or %2 when %3 is %4;NOR=m† v‘re %1 eller %2 n†r %3 er %4;SVE=m†ste vara %1 eller %2 n„r %3 „r %4';
      Text006@1005 : TextConst 'ENU=must equal %1 - %2 when %3 is %4 and %5 is %6;NOR=m† v‘re lik %1 - %2 n†r %3 er %4 og %5 er %6;SVE=m†ste vara lika %1 - %2 n„r %3 „r %4 och %5 „r %6';
      Text007@1006 : TextConst 'ENU="You cannot post these lines because you have not entered a quantity on one or more of the lines. ";NOR="Du kan ikke bokf›re disse linjene fordi du ikke har angitt noe antall p† ‚n eller flere av linjene. ";SVE="Du kan inte bokf”ra raderna eftersom antal inte registrerats f”r en eller flera rader. "';
      DimCombBlockedErr@1008 : TextConst '@@@="%1 = Journal Template Name; %2 = Journal Batch Name; %3 = Line No.";ENU=The combination of dimensions used in item journal line %1, %2, %3 is blocked. %4.;NOR=Kombinasjonen av dimensjoner som brukes i varekladdelinje %1, %2, %3, er sperret. %4.;SVE=Kombinationen av dimensioner som anv„nds p† artikeljournalraden %1, %2, %3 „r sp„rrad. %4.';
      DimCausedErr@1009 : TextConst '@@@="%1 = Journal Template Name; %2 = Journal Batch Name; %3 = Line No.";ENU=A dimension used in item journal line %1, %2, %3 has caused an error. %4.;NOR=En dimensjon som brukes i varekladdelinje %1, %2, %3, har for†rsaket en feil. %4.;SVE=En dimension som anv„nds p† artikeljournalraden %1, %2, %3 har orsakat ett fel. %4.';
      Text011@1019 : TextConst 'ENU=%1 must not be equal to %2;NOR=%1 kan ikke v‘re lik %2;SVE=%1 f†r inte vara lika med %2';
      Location@1018 : Record 14;
      InvtSetup@1010 : Record 313;
      GLSetup@1011 : Record 98;
      ItemLedgEntry@1007 : Record 32;
      ItemJnlLine2@1013 : Record 83;
      ItemJnlLine3@1014 : Record 83;
      ProdOrderLine@1023 : Record 5406;
      DimMgt@1015 : Codeunit 408;
      Text012@1021 : TextConst 'ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6.";NOR="Det kreves lagerh†ndtering for %1 = %2, %3 = %4, %5 = %6.";SVE="Dist.lager hantering kr„vs f”r %1 = %2, %3 = %4, %5 = %6."';
      CalledFromInvtPutawayPick@1022 : Boolean;
      CalledFromAdjustment@1020 : Boolean;
      UseInTransitLocationErr@1024 : TextConst 'ENU=You can use In-Transit location %1 for transfer orders only.;NOR=Du kan bare bruke transittlokasjonen %1 for overf›ringsordrer.;SVE=Du kan bara anv„nda transitlagerst„lle %1 f”r ”verf”ringsorder.';
      ServiceSetup@1100525000 : Record 11012800;
      JobSetup@1100525001 : Record 315;
      Text11012001@1100525002 : TextConst 'ENU=No destination filled, posting not allowed (%1 %2-%3 line no. %4).;NOR=Ingen destinasjon fylt ut, bokf›ring er ikke tillatt (%1 %2-%3 radnr %4).;SVE=Ingen destination har fyllts i, bokf”ring „r inte till†ten (%1 %2-%3 radnr %4).';
      Text11012002@1100528300 : TextConst 'ENU=%1 of item %2 in %3 (%4) must be equal to the one in %5 (%6).;NOR=%1 av artikkel %2 i %3 (%4) m† v‘re lik til den i %5 (%6)';
      SkipChangeCompany@1100525003 : Boolean;

    [External]
    PROCEDURE RunCheck@1(VAR ItemJnlLine@1000 : Record 83);
    VAR
      InvtPeriod@1004 : Record 5814;
      WorkCenter@1005 : Record 99000754;
      Item@1001 : Record 27;
      GenJnlPostPreview@1002 : Codeunit 19;
      UserSetupManagement@1003 : Codeunit 5700;
      IsHandled@1006 : Boolean;
      ServOrderRec@1100409000 : Record 11012823;
      CompName@1100409001 : Text[50];
    BEGIN
      GLSetup.GET;
      InvtSetup.GET;

      WITH ItemJnlLine DO BEGIN
        IF EmptyLine THEN BEGIN
          IF NOT IsValueEntryForDeletedItem THEN
            EXIT;
        END ELSE
          IF NOT OnlyStopTime THEN
            TESTFIELD("Item No.");

        IF Item.GET("Item No.") THEN
          Item.TESTFIELD("Base Unit of Measure");

        TESTFIELD("Posting Date");
        TESTFIELD("Document No.");
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN
          FIELDERROR("Posting Date",Text000);

        UserSetupManagement.CheckAllowedPostingDate("Posting Date");

        IF NOT InvtPeriod.IsValidDate("Posting Date") THEN
          InvtPeriod.ShowError("Posting Date");

        IF "Document Date" <> 0D THEN
          IF "Document Date" <> NORMALDATE("Document Date") THEN
            FIELDERROR("Document Date",Text000);

        TESTFIELD("Gen. Prod. Posting Group");

        IsHandled := FALSE;
        OnBeforeCheckLocation(ItemJnlLine,IsHandled);
        IF NOT IsHandled THEN
          IF InvtSetup."Location Mandatory" AND
             ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
             (Quantity <> 0) AND
             NOT Adjustment
          THEN BEGIN
            IF (Type <> Type::Resource) AND (Item.Type = Item.Type::Inventory) AND
               (NOT "Direct Transfer" OR ("Document Type" = "Document Type"::"Transfer Shipment"))
            THEN
              TESTFIELD("Location Code");
            IF ("Entry Type" = "Entry Type"::Transfer) AND
               (NOT "Direct Transfer" OR ("Document Type" = "Document Type"::"Transfer Receipt"))
            THEN
              TESTFIELD("New Location Code")
            ELSE
              TESTFIELD("New Location Code",'');
          END;

        IF (("Entry Type" <> "Entry Type"::Transfer) OR ("Order Type" <> "Order Type"::Transfer)) AND
           NOT Adjustment
        THEN BEGIN
          CheckInTransitLocation("Location Code");
          CheckInTransitLocation("New Location Code");
        END;

        CheckBins(ItemJnlLine);

        IF "Entry Type" IN ["Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt."] THEN
          TESTFIELD("Discount Amount",0);

        //**4PS.sn
      //  IF (GLSetup."Cost Component Mandatory") AND
      //     (("Job No." <> '') OR ("Service Order No." <> '')) AND
      //     ("Shortcut Dimension 2 Code" <> '') THEN
      //    TESTFIELD("Cost Component");

        IF "Entry Type" IN ["Entry Type"::"Positive Adjmt.", "Entry Type"::"Negative Adjmt."] THEN BEGIN
          TESTFIELD("Job No.", '');
          TESTFIELD("Service Order No.", '');
        END;

        IF ("Job No." <> '') THEN BEGIN
          TESTFIELD("Plant Type",'');
          TESTFIELD("Delivery Account No.",'');
          TESTFIELD("To Plant Inventory",FALSE);
          JobSetup.GET;
          IF (JobSetup."Cost Component Mandatory") AND
             ("Shortcut Dimension 2 Code" <> '') AND
             NOT CalledFromAdjustment
          THEN
            TESTFIELD("Cost Component");
        END;

        IF ("Service Order No." <> '') THEN BEGIN
          //db.sn, 03-09-12: C001693
          IF "Receiving Company" <> '' THEN
            CompName := "Receiving Company"
          ELSE
            CompName := COMPANYNAME;
          ServOrderRec.CHANGECOMPANY(CompName);  //db, 01-11-12: C003509
          ServOrderRec.GET("Service Order No.");
          ServOrderRec.TestServiceContractMandatory;
          //db.en, 03-09-12: C001693
          TESTFIELD("Plant Type",'');
          TESTFIELD("Delivery Account No.",'');
          TESTFIELD("To Plant Inventory",FALSE);
          ServiceSetup.GET;
          IF (ServiceSetup."Cost Component Mandatory") AND
             ("Shortcut Dimension 2 Code" <> '') AND
             NOT CalledFromAdjustment
          THEN
            TESTFIELD("Cost Component");
          IF ("Item No." <> '') AND (Item."Reason Code F-Gases Mandatory") THEN
            TESTFIELD("Service Object No.");
        END;

        IF ("Plant Type" <> '') THEN BEGIN
          TESTFIELD("Job No.", '');
          TESTFIELD("Service Order No.", '');
          TESTFIELD("Delivery Account No.",'');
          TESTFIELD("To Plant Inventory",FALSE);
          IF NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale]) THEN
            FIELDERROR("Entry Type");
        END;
        IF ("Delivery Account No." <> '') THEN BEGIN
          TESTFIELD("Job No.", '');
          TESTFIELD("Service Order No.", '');
          TESTFIELD("Plant Type",'');
          TESTFIELD("To Plant Inventory",FALSE);
          IF NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale]) THEN
            FIELDERROR("Entry Type");
        END;
        IF ("To Plant Inventory") THEN BEGIN
          TESTFIELD("Job No.", '');
          TESTFIELD("Service Order No.", '');
          TESTFIELD("Plant Type",'');
          TESTFIELD("Delivery Account No.",'');
        END;
        //**4PSmg.so, 29-03-11: M26443
      //  IF ("Shelf No." <> '') THEN BEGIN  // Same as in T83, OnValidate of field "Shelf No." (11012150)
      //    CompInfo.GET;
      //    IF (NOT InvtSetup."Shelfs by Location") THEN
      //      Shelf.GET(CompInfo."Location Code", "Shelf No.")
      //    ELSE
      //      Shelf.GET("Location Code", "Shelf No.");
      //  END;
        //**4PSmg.eo, 29-03-11: M26443
        IF (ItemJnlLine."Receiving Company" = '') THEN BEGIN //**4PS.n 130222, kzwerver, n, #C005576
          //Call 16034: check is temporarily disabled.    //*16893: Is enabled again
          IF InvtSetup."Check Destination in Item Jnl." THEN BEGIN  //* Call 16893
            IF "Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale] THEN BEGIN  //* Call 16012
              IF "Origin Type Line" = "Origin Type Line"::ItemJnlManual THEN BEGIN  //* Call 15291 (JR)
                IF ("Job No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '') AND ("To Plant Type" = '') AND
                   ("New Location Code" = '') AND ("Order No." = '') AND ("Delivery Account No." = '')
                THEN
                  ERROR(Text11012001, FIELDCAPTION("Journal Batch Name"), "Journal Template Name", "Journal Batch Name", "Line No.");
              END;
            END;
          END;
        END;
        IF ("Item No." <> '') AND (Item."Reason Code F-Gases Mandatory") THEN
          TESTFIELD("Reason Code");
        //**4PS.en

        IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
          IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
             ("Item Charge No." = '') AND
             NOT Adjustment
          THEN
            TESTFIELD(Amount,0);
          TESTFIELD("Discount Amount",0);
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Entry Type"),"Entry Type"));
          IF Quantity <> "Invoiced Quantity" THEN
            FIELDERROR("Invoiced Quantity",STRSUBSTNO(Text004,FIELDCAPTION(Quantity)));
        END;

        IF NOT "Phys. Inventory" THEN BEGIN
          IF "Entry Type" = "Entry Type"::Output THEN BEGIN
            IF ("Output Quantity (Base)" = 0) AND ("Scrap Quantity (Base)" = 0) AND
               TimeIsEmpty AND ("Invoiced Qty. (Base)" = 0)
            THEN
              ERROR(Text007)
          END ELSE BEGIN
            IF ("Quantity (Base)" = 0) AND ("Invoiced Qty. (Base)" = 0) THEN
              ERROR(Text007);
          END;
          TESTFIELD("Qty. (Calculated)",0);
          TESTFIELD("Qty. (Phys. Inventory)",0);
        END ELSE
          CheckPhysInventory(ItemJnlLine);

        IF "Entry Type" <> "Entry Type"::Output THEN BEGIN
          TESTFIELD("Run Time",0);
          TESTFIELD("Setup Time",0);
          TESTFIELD("Stop Time",0);
          TESTFIELD("Output Quantity",0);
          TESTFIELD("Scrap Quantity",0);
        END;

        IF "Applies-from Entry" <> 0 THEN BEGIN
          ItemLedgEntry.GET("Applies-from Entry");
          ItemLedgEntry.TESTFIELD("Item No.","Item No.");
          ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
          ItemLedgEntry.TESTFIELD(Positive,FALSE);
          IF "Applies-to Entry" = "Applies-from Entry" THEN
            ERROR(
              Text011,
              FIELDCAPTION("Applies-to Entry"),
              FIELDCAPTION("Applies-from Entry"));
        END;

        IF ("Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output]) AND
           NOT ("Value Entry Type" = "Value Entry Type"::Revaluation) AND
           NOT OnlyStopTime
        THEN BEGIN
          TESTFIELD("Source No.");
          TESTFIELD("Order Type","Order Type"::Production);
          IF NOT CalledFromAdjustment AND ("Entry Type" = "Entry Type"::Output) THEN
            IF CheckFindProdOrderLine(ProdOrderLine,"Order No.","Order Line No.") THEN
              TESTFIELD("Item No.",ProdOrderLine."Item No.");
          IF Subcontracting THEN BEGIN
            IsHandled := FALSE;
            OnBeforeCheckSubcontracting(ItemJnlLine,IsHandled);
            IF NOT IsHandled THEN BEGIN
              WorkCenter.GET("Work Center No.");
              WorkCenter.TESTFIELD("Subcontractor No.");
            END;
          END;
          IF NOT CalledFromInvtPutawayPick THEN
            CheckWarehouse(ItemJnlLine);
        END;

        CheckICStandardCost(ItemJnlLine); //**4PS.n C005014

        IF "Entry Type" = "Entry Type"::"Assembly Consumption" THEN
          CheckWarehouse(ItemJnlLine);

        IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR ("Item Charge No." <> '') THEN
          IF "Inventory Value Per" = "Inventory Value Per"::" " THEN
            TESTFIELD("Applies-to Entry");

        CheckDimensions(ItemJnlLine);

        IF ("Entry Type" IN
            ["Entry Type"::Purchase,"Entry Type"::Sale,"Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt."]) AND
           (NOT GenJnlPostPreview.IsActive)
        THEN
          CheckItemJournalLineRestriction;
      END;

      OnAfterCheckItemJnlLine(ItemJnlLine,CalledFromInvtPutawayPick,CalledFromAdjustment);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE CheckFindProdOrderLine@11(VAR ProdOrderLine@1002 : Record 5406;ProdOrderNo@1000 : Code[20];LineNo@1001 : Integer) : Boolean;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        SETFILTER(Status,'>=%1',Status::Released);
        SETRANGE("Prod. Order No.",ProdOrderNo);
        SETRANGE("Line No.",LineNo);
        EXIT(FINDFIRST);
      END;
    END;

    [External]
    PROCEDURE SetCalledFromInvtPutawayPick@47(NewCalledFromInvtPutawayPick@1000 : Boolean);
    BEGIN
      CalledFromInvtPutawayPick := NewCalledFromInvtPutawayPick;
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(ItemJnlLine@1000 : Record 83);
    VAR
      AssemblyLine@1001 : Record 901;
      ReservationEntry@1004 : Record 337;
      ItemJnlLineReserve@1005 : Codeunit 99000835;
      ReservEngineMgt@1006 : Codeunit 99000831;
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
      IsHandled@1007 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckWarehouse(ItemJnlLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF (ItemJnlLine.Quantity = 0) OR
         (ItemJnlLine."Item Charge No." <> '') OR
         (ItemJnlLine."Value Entry Type" IN
          [ItemJnlLine."Value Entry Type"::Revaluation,ItemJnlLine."Value Entry Type"::Rounding]) OR
         ItemJnlLine.Adjustment
      THEN
        EXIT;

      GetLocation(ItemJnlLine."Location Code");
      IF Location."Directed Put-away and Pick" THEN
        EXIT;

      CASE ItemJnlLine."Entry Type" OF
        ItemJnlLine."Entry Type"::Output:
          IF WhseOrderHandlingRequired(ItemJnlLine,Location) THEN BEGIN
            IF (ItemJnlLine.Quantity < 0) AND (ItemJnlLine."Applies-to Entry" = 0) THEN BEGIN
              ReservEngineMgt.InitFilterAndSortingLookupFor(ReservationEntry,FALSE);
              ItemJnlLineReserve.FilterReservFor(ReservationEntry,ItemJnlLine);
              ReservationEntry.ClearTrackingFilter;
              IF ReservationEntry.FINDSET THEN
                REPEAT
                  IF ReservationEntry."Appl.-to Item Entry" = 0 THEN
                    ShowError := TRUE;
                UNTIL (ReservationEntry.NEXT = 0) OR ShowError
              ELSE
                ShowError := ItemJnlLine.LastOutputOperation(ItemJnlLine);
            END;

            IF WhseValidateSourceLine.WhseLinesExist(
                 DATABASE::"Prod. Order Line",3,ItemJnlLine."Order No.",ItemJnlLine."Order Line No.",0,ItemJnlLine.Quantity)
            THEN
              ShowError := TRUE;
          END;
        ItemJnlLine."Entry Type"::Consumption:
          IF WhseOrderHandlingRequired(ItemJnlLine,Location) THEN
            IF WhseValidateSourceLine.WhseLinesExist(
                 DATABASE::"Prod. Order Component",
                 3,
                 ItemJnlLine."Order No.",
                 ItemJnlLine."Order Line No.",
                 ItemJnlLine."Prod. Order Comp. Line No.",
                 ItemJnlLine.Quantity)
            THEN
              ShowError := TRUE;
        ItemJnlLine."Entry Type"::"Assembly Consumption":
          IF WhseOrderHandlingRequired(ItemJnlLine,Location) THEN
            IF WhseValidateSourceLine.WhseLinesExist(
                 DATABASE::"Assembly Line",
                 AssemblyLine."Document Type"::Order,
                 ItemJnlLine."Order No.",
                 ItemJnlLine."Order Line No.",
                 0,
                 ItemJnlLine.Quantity)
            THEN
              ShowError := TRUE;
      END;
      IF ShowError THEN
        ERROR(
          Text012,
          ItemJnlLine.FIELDCAPTION("Entry Type"),
          ItemJnlLine."Entry Type",
          ItemJnlLine.FIELDCAPTION("Order No."),
          ItemJnlLine."Order No.",
          ItemJnlLine.FIELDCAPTION("Order Line No."),
          ItemJnlLine."Order Line No.");
    END;

    LOCAL PROCEDURE WhseOrderHandlingRequired@3(ItemJnlLine@1000 : Record 83;Location@1001 : Record 14) : Boolean;
    VAR
      InvtPutAwayLocation@1002 : Boolean;
      InvtPickLocation@1003 : Boolean;
    BEGIN
      InvtPutAwayLocation := NOT Location."Require Receive" AND Location."Require Put-away";
      OnAfterAssignInvtPutAwayRequired(ItemJnlLine,Location,InvtPutAwayLocation);
      IF InvtPutAwayLocation THEN
        CASE ItemJnlLine."Entry Type" OF
          ItemJnlLine."Entry Type"::Output:
            IF ItemJnlLine.Quantity >= 0 THEN
              EXIT(TRUE);
          ItemJnlLine."Entry Type"::Consumption,
          ItemJnlLine."Entry Type"::"Assembly Consumption":
            IF ItemJnlLine.Quantity < 0 THEN
              EXIT(TRUE);
        END;

      InvtPickLocation := NOT Location."Require Shipment" AND Location."Require Pick" ;
      OnAfterAssignInvtPickRequired(ItemJnlLine,Location,InvtPickLocation);
      IF InvtPickLocation THEN
        CASE ItemJnlLine."Entry Type" OF
          ItemJnlLine."Entry Type"::Output:
            IF ItemJnlLine.Quantity < 0 THEN
              EXIT(TRUE);
          ItemJnlLine."Entry Type"::Consumption,
          ItemJnlLine."Entry Type"::"Assembly Consumption":
            IF ItemJnlLine.Quantity >= 0 THEN
              EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE SetCalledFromAdjustment@49(NewCalledFromAdjustment@1000 : Boolean);
    BEGIN
      CalledFromAdjustment := NewCalledFromAdjustment;
    END;

    LOCAL PROCEDURE CheckBins@4(ItemJnlLine@1000 : Record 83);
    VAR
      WMSManagement@1001 : Codeunit 7302;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckBins(ItemJnlLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        IF ("Item Charge No." <> '') OR ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR (Quantity = 0) THEN
          EXIT;

        IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
          GetLocation("New Location Code");
          IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
            TESTFIELD("New Bin Code");
        END ELSE BEGIN
          GetLocation("Location Code");
          IF NOT Location."Bin Mandatory" OR Location."Directed Put-away and Pick" THEN
            EXIT;
        END;

        IF "Drop Shipment" OR OnlyStopTime OR ("Quantity (Base)" = 0) OR Adjustment OR CalledFromAdjustment THEN
          EXIT;

        IF ("Entry Type" = "Entry Type"::Output) AND NOT LastOutputOperation(ItemJnlLine) THEN
          EXIT;

        IF Quantity <> 0 THEN
          CASE "Entry Type" OF
            "Entry Type"::Purchase,
            "Entry Type"::"Positive Adjmt.",
            "Entry Type"::Output,
            "Entry Type"::"Assembly Output":
              WMSManagement.CheckInbOutbBin("Location Code","Bin Code",Quantity > 0);
            "Entry Type"::Sale,
            "Entry Type"::"Negative Adjmt.",
            "Entry Type"::Consumption,
            "Entry Type"::"Assembly Consumption":
              WMSManagement.CheckInbOutbBin("Location Code","Bin Code",Quantity < 0);
            "Entry Type"::Transfer:
              BEGIN
                GetLocation("Location Code");
                IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                  WMSManagement.CheckInbOutbBin("Location Code","Bin Code",Quantity < 0);
                IF ("New Location Code" <> '') AND ("New Bin Code" <> '') THEN
                  WMSManagement.CheckInbOutbBin("New Location Code","New Bin Code",Quantity > 0);
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckDimensions@5(ItemJnlLine@1000 : Record 83);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1001 : ARRAY [10] OF Code[20];
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckDimensions(ItemJnlLine,CalledFromAdjustment,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH ItemJnlLine DO
        IF NOT IsValueEntryForDeletedItem AND NOT Correction AND NOT CalledFromAdjustment THEN BEGIN

          IF NOT SkipChangeCompany THEN             //**4PS.n
            DimMgt.SetCompany("Receiving Company")  //**4PS.n
          ELSE                                      //**4PS.n
            SkipChangeCompany := FALSE;             //**4PS.n

          IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
            ERROR(DimCombBlockedErr,"Journal Template Name","Journal Batch Name","Line No.",DimMgt.GetDimCombErr);
          IF "Item Charge No." = '' THEN BEGIN
            TableID[1] := DATABASE::Item;
            No[1] := "Item No.";
          END ELSE BEGIN
            TableID[1] := DATABASE::"Item Charge";
            No[1] := "Item Charge No.";
          END;
          TableID[2] := DATABASE::"Salesperson/Purchaser";
          No[2] := "Salespers./Purch. Code";
          TableID[3] := DATABASE::"Work Center";
          No[3] := "Work Center No.";
          IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN BEGIN
            IF "Line No." <> 0 THEN
              ERROR(DimCausedErr,"Journal Template Name","Journal Batch Name","Line No.",DimMgt.GetDimValuePostingErr);
            ERROR(DimMgt.GetDimValuePostingErr);
          END;
          IF ("Entry Type" = "Entry Type"::Transfer) AND
             ("Value Entry Type" <> "Value Entry Type"::Revaluation)
          THEN
            IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN BEGIN
              IF "Line No." <> 0 THEN
                ERROR(DimCausedErr,"Journal Template Name","Journal Batch Name","Line No.",DimMgt.GetDimValuePostingErr);
              ERROR(DimMgt.GetDimValuePostingErr);
            END;
          DimMgt.SetCompany(''); //**4PS.n
        END;
    END;

    LOCAL PROCEDURE CheckPhysInventory@8(ItemJnlLine@1000 : Record 83);
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF NOT
           ("Entry Type" IN
            ["Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt."])
        THEN BEGIN
          ItemJnlLine2."Entry Type" := ItemJnlLine2."Entry Type"::"Positive Adjmt.";
          ItemJnlLine3."Entry Type" := ItemJnlLine3."Entry Type"::"Negative Adjmt.";
          FIELDERROR(
            "Entry Type",
            STRSUBSTNO(
              Text005,ItemJnlLine2."Entry Type",ItemJnlLine3."Entry Type",FIELDCAPTION("Phys. Inventory"),TRUE));
        END;
        IF ("Entry Type" = "Entry Type"::"Positive Adjmt.") AND
           ("Qty. (Phys. Inventory)" - "Qty. (Calculated)" <> Quantity)
        THEN
          FIELDERROR(
            Quantity,
            STRSUBSTNO(
              Text006,FIELDCAPTION("Qty. (Phys. Inventory)"),FIELDCAPTION("Qty. (Calculated)"),
              FIELDCAPTION("Entry Type"),"Entry Type",FIELDCAPTION("Phys. Inventory"),TRUE));
        IF ("Entry Type" = "Entry Type"::"Negative Adjmt.") AND
           ("Qty. (Calculated)" - "Qty. (Phys. Inventory)" <> Quantity)
        THEN
          FIELDERROR(
            Quantity,
            STRSUBSTNO(
              Text006,FIELDCAPTION("Qty. (Calculated)"),FIELDCAPTION("Qty. (Phys. Inventory)"),
              FIELDCAPTION("Entry Type"),"Entry Type",FIELDCAPTION("Phys. Inventory"),TRUE));
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckItemJnlLine@6(VAR ItemJnlLine@1000 : Record 83;CalledFromInvtPutawayPick@1001 : Boolean;CalledFromAdjustment@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE CheckInTransitLocation@7(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.IsInTransit(LocationCode) THEN
        ERROR(UseInTransitLocationErr,LocationCode)
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignInvtPickRequired@9(ItemJournalLine@1000 : Record 83;Location@1001 : Record 14;VAR InvtPickLocation@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignInvtPutAwayRequired@10(ItemJournalLine@1002 : Record 83;Location@1001 : Record 14;VAR InvtPutAwayLocation@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBins@13(VAR ItemJournalLine@1001 : Record 83;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckDimensions@12(VAR ItemJournalLine@1000 : Record 83;CalledFromAdjustment@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckLocation@14(VAR ItemJournalLine@1000 : Record 83;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckSubcontracting@15(VAR ItemJournalLine@1000 : Record 83;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckWarehouse@2(VAR ItemJournalLine@1000 : Record 83;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    PROCEDURE CheckICStandardCost@1100528300(ItemJnlLine@1100528301 : Record 83);
    VAR
      Item@1100528300 : Record 27;
      ItemReceivingCompany@1100528302 : Record 27;
    BEGIN
      //**4PS
      WITH ItemJnlLine DO BEGIN
        IF NOT IsInventoryICLine THEN
          EXIT;

        Item.GET("Item No.");

        //kzwerver, 130906, sn, #C008685
        IF (Item."Costing Method" = Item."Costing Method"::FIFO) THEN
          EXIT;
        //kzwerver, 130906, en, #C008685
        ItemReceivingCompany.CHANGECOMPANY("Receiving Company");
        ItemReceivingCompany.GET("Item No.");

        IF Item."Standard Cost" <> ItemReceivingCompany."Standard Cost" THEN
          ERROR(
            Text11012002, Item.FIELDCAPTION("Standard Cost"),"Item No.", "Receiving Company",
            ItemReceivingCompany."Standard Cost", COMPANYNAME,Item."Standard Cost");
      END;
    END;

    [External]
    PROCEDURE SetSkipChangeCompany@1100528200(NewValue@1000 : Boolean);
    BEGIN
      //4PS
      SkipChangeCompany := NewValue;
    END;

    BEGIN
    END.
  }
}

