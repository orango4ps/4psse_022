OBJECT Table 11071707 Contract Installment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServiceContract@1100528600 : Record 11012812;
             BEGIN
               IF ServiceContract.GET("Service Contract No.") THEN BEGIN
                 ServiceContract.TESTFIELD("Invoice Type", ServiceContract."Invoice Type"::Installments);
                 IF ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Framework Contract" THEN
                   ServiceContract.FIELDERROR("Contract Form");
               END;
               TestInvoiceDates;
               ChechAndResetInvoiceDirectly;
               DetermineChargeable;
             END;

    OnModify=VAR
               ServiceContract@1210190000 : Record 11012812;
             BEGIN
               IF ServiceContract.GET("Service Contract No.") THEN
                 ServiceContract.TESTFIELD("Invoice Type", ServiceContract."Invoice Type"::Installments);
               ChechAndResetInvoiceDirectly;
             END;

    OnDelete=VAR
               ContrInstallmAmntsRec@1100526200 : Record 11071708;
             BEGIN
               ContrInstallmAmntsRec.SETRANGE(Type,ContrInstallmAmntsRec.Type::Installment);
               ContrInstallmAmntsRec.SETRANGE("Service Contract No.","Service Contract No.");
               ContrInstallmAmntsRec.SETRANGE("Installment Line No.","Line No.");
               ContrInstallmAmntsRec.DELETEALL;
             END;

    CaptionML=[ENU=Contract Installments;
               NOR=Kontraktavdrag;
               SVE=Kontraktavbetalningar];
  }
  FIELDS
  {
    { 10  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 40  ;   ;Invoice From        ;Date          ;OnValidate=BEGIN
                                                                TestInvoiceDates;
                                                                IF "Invoice From" = 0D THEN
                                                                  CLEAR("Invoice Postpone Period");
                                                              END;

                                                   CaptionML=[ENU=Invoice From;
                                                              NOR=Faktura fra;
                                                              SVE=Faktura fr†n] }
    { 50  ;   ;Invoiced Until      ;Date          ;OnValidate=BEGIN
                                                                IF GUIALLOWED AND
                                                                   (CurrFieldNo = FIELDNO("Invoiced Until")) AND
                                                                   ("Invoiced Until" <> xRec."Invoiced Until")
                                                                THEN BEGIN
                                                                  IF (NOT CONFIRM(Text001, FALSE, FIELDCAPTION("Invoiced Until"), xRec."Invoiced Until", "Invoiced Until")) THEN
                                                                    "Invoiced Until" := xRec."Invoiced Until";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoiced Until;
                                                              NOR=Fakturert til;
                                                              SVE=Fakturerad till] }
    { 55  ;   ;Last Invoiced Until ;Date          ;CaptionML=[ENU=Last Invoice Until;
                                                              NOR=Siste faktura frem til;
                                                              SVE=Senaste faktura till] }
    { 60  ;   ;Invoice Interval    ;DateFormula   ;OnValidate=BEGIN
                                                                IF FORMAT("Invoice Interval") <> '' THEN BEGIN
                                                                  IF CALCDATE("Invoice Interval", TODAY) <= TODAY THEN
                                                                    FIELDERROR("Invoice Interval");
                                                                  IF FORMAT("Invoice Postpone Period") <> '' THEN
                                                                    IF (CALCDATE("Invoice Interval", TODAY) <= CALCDATE("Invoice Postpone Period", TODAY)) THEN
                                                                      FIELDERROR("Invoice Interval", STRSUBSTNO(Text002, FIELDCAPTION("Invoice Postpone Period")));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoice Interval;
                                                              NOR=Faktureringsintervall;
                                                              SVE=Faktureringsintervall] }
    { 70  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 80  ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 90  ;   ;Progress %          ;Integer       ;CaptionML=[ENU=Progress %;
                                                              NOR=Fremdrifts%;
                                                              SVE=F”rloppsprocent];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 100 ;   ;Invoice Directly    ;Boolean       ;CaptionML=[ENU=Invoice Directly;
                                                              NOR=Fakturer direkte;
                                                              SVE=Faktura direkt] }
    { 110 ;   ;Invoice Postpone Period;DateFormula;FieldClass=Normal;
                                                   OnValidate=VAR
                                                                ServiceContract@1100525000 : Record 11012812;
                                                              BEGIN
                                                                IF FORMAT("Invoice Postpone Period") <> '' THEN BEGIN
                                                                  ServiceContract.GET("Service Contract No.");
                                                                  ServiceContract.TESTFIELD("Invoicing via Collective List", FALSE);
                                                                  IF TODAY > CALCDATE("Invoice Postpone Period", TODAY) THEN
                                                                    FIELDERROR("Invoice Postpone Period", Text003);
                                                                  VALIDATE("Invoice Interval");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoice Postpone Period;
                                                              NOR=Fakturer Utsatt periode] }
    { 120 ;No ;Reserved 120 mg     ;Code10        ;CaptionML=;
                                                   Description=RESERVED }
    { 130 ;   ;Invoiced Price      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                                       Installment Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Invoiced Price;
                                                              NOR=Fakturert pris;
                                                              SVE=Fakturerat pris];
                                                   Editable=No }
    { 140 ;   ;Invoice in Process  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=FILTER(Invoice|Invoice Proposal),
                                                                                                      Service Invoice=CONST(Yes),
                                                                                                      Service Contract No.=FIELD(Service Contract No.),
                                                                                                      Installment Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Invoice in Process;
                                                              NOR=P†g†ende fakturering;
                                                              SVE=P†g†ende fakturering];
                                                   Editable=No }
    { 150 ;   ;Credit Memo in Process;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Credit Memo),
                                                                                                       Service Invoice=CONST(Yes),
                                                                                                       Service Contract No.=FIELD(Service Contract No.),
                                                                                                       Installment Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Credit Memo in Process;
                                                              NOR=Kreditnotaen behandles;
                                                              SVE=Kreditnotan behandlas];
                                                   Editable=No }
    { 160 ;   ;Invoicing via Collective List;Boolean;
                                                   OnValidate=VAR
                                                                ServiceContract@1100528600 : Record 11012812;
                                                              BEGIN
                                                                IF "Invoicing via Collective List" THEN BEGIN
                                                                  ServiceContract.GET("Service Contract No.");
                                                                  IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN
                                                                    ServiceContract.TESTFIELD("Invoice Interval");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoicing via Collective List;
                                                              NOR=Fakturering via samlingsfaktura;
                                                              SVE=Fakturering via samlingsfaktura] }
    { 170 ;   ;Invoice Period      ;Option        ;CaptionML=[ENU=Invoice Period;
                                                              NOR=Fakturaperiode;
                                                              SVE=Fakturaperiod];
                                                   OptionCaptionML=[ENU=Forehand,Afterwards;
                                                                    NOR=P† f†rh†nd,Etterp†;
                                                                    SVE=F”rhand,Efter†t];
                                                   OptionString=Forehand,Afterwards }
    { 180 ;   ;Contract Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract.Description WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Contract Description;
                                                              NOR=Kontraktbeskrivelse;
                                                              SVE=Kontraktsbeskrivning];
                                                   Editable=No }
    { 185 ;   ;Contract Description 2;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Description 2" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=ENU=Contract Description 2;
                                                   Editable=No }
    { 190 ;   ;Customer No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Customer No." WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Customer No.;
                                                              NOR=Kundenr;
                                                              SVE=Kundnr];
                                                   Editable=No }
    { 200 ;   ;Contract Manager    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Contract Manager" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Contract Manager;
                                                              NOR=Kontraktleder;
                                                              SVE=Kontrakthanterare];
                                                   Editable=No }
    { 210 ;   ;Bill-to Customer No.;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Bill-to Customer No. (Contr.)" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Bill-to Customer No. (Contract;
                                                              SVE=Faktureringskundnr (kontrakt)];
                                                   Editable=No }
    { 220 ;   ;Chargeable          ;Boolean       ;CaptionML=[ENU=Chargeable;
                                                              NOR=Belastbar;
                                                              SVE=Debiterbar] }
    { 230 ;   ;Contract Type       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Contract Type" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Contract Type;
                                                              SVE=Kontraktstyp];
                                                   Editable=No }
    { 240 ;   ;Contract Group      ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Contract Group" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Contract Group;
                                                              SVE=Kontraktsgrupp];
                                                   Editable=No }
    { 250 ;   ;Global Dimension 1 Code;Code20     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Global Dimension 1 Code" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              SVE=Global dimension 1 kod];
                                                   Editable=No;
                                                   CaptionClass=['1,1,1' ] }
    { 260 ;   ;Service Category    ;Code10        ;TableRelation="Service Category".Code WHERE (Service Contract No.=FIELD(Service Contract No.));
                                                   OnValidate=VAR
                                                                ServiceContract@1100527350 : Record 11012812;
                                                                SCRevenueDivision@1100529600 : Record 11071986;
                                                              BEGIN
                                                                IF "Service Category" <> '' THEN BEGIN
                                                                  IF ServiceContract.GET("Service Contract No.") THEN BEGIN
                                                                    SCRevenueDivision.SETRANGE("Service Contract No.", "Service Contract No.");
                                                                    IF NOT SCRevenueDivision.ISEMPTY THEN
                                                                      ERROR(Text004);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Category;
                                                              SVE=Servicekategori] }
    { 11128070;;Deferral Code      ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralPostDate@1000 : Date;
                                                              BEGIN
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Deferral Code;
                                                              NOR=Periodiseringskode;
                                                              SVE=Periodiseringskod] }
  }
  KEYS
  {
    {    ;Service Contract No.,Line No.           ;Clustered=Yes }
    {    ;Service Category                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=%1: %2 may not preceed %3;NOR=%1 kan ikke komme f›r %2;SVE=%1 f†r inte f”reg† %2';
      Text001@1100528300 : TextConst 'ENU=Are you sure you want to change the %1 from %2 into %3?;NOR=Er du sikker p† at du ikke vil endre %1 fra %2 til %3?;SVE=Žr du s„ker p† att du vill „ndra %1 fr†n %2 till %3?';
      Text002@1100528601 : TextConst 'ENU=must be positive and larger than %1';
      Text003@1100525000 : TextConst 'ENU=must be a positive value';
      Text004@1100527350 : TextConst 'ENU=Contract Revenue Division must be empty.';

    PROCEDURE TestInvoiceDates@1100528600();
    BEGIN
      IF ("Ending Date" <> 0D) AND ("Last Invoiced Until" > "Ending Date") THEN
        ERROR(Text000, TABLECAPTION, FIELDCAPTION("Ending Date"), FIELDCAPTION("Last Invoiced Until"));

      IF ("Ending Date" <> 0D) AND ("Invoice From" > "Ending Date") THEN
        ERROR(Text000, TABLECAPTION, FIELDCAPTION("Ending Date"), FIELDCAPTION("Invoice From"));
    END;

    PROCEDURE ChechAndResetInvoiceDirectly@1100528300();
    VAR
      ServiceContract@1100528300 : Record 11012812;
    BEGIN
      ServiceContract.GET("Service Contract No.");
      IF (NOT ServiceContract."Installments based on Progress") THEN
        "Invoice Directly" := FALSE;
    END;

    PROCEDURE HandleInstallmentAmountLookup@1100528601();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ContractAmountsbyDate@1100528601 : Record 11071708;
      ContractAmountsbyDatePAGE@1100528602 : Page 11125153;
    BEGIN
      ServiceContract.GET("Service Contract No.");
      ContractAmountsbyDate.SETRANGE(Type, ContractAmountsbyDate.Type::Installment);
      ContractAmountsbyDate.SETRANGE("Service Contract No.","Service Contract No.");
      ContractAmountsbyDate.SETRANGE("Service Object No.", '');
      ContractAmountsbyDate.SETRANGE("Installment Line No.", "Line No.");
      ContractAmountsbyDatePAGE.SETTABLEVIEW(ContractAmountsbyDate);
      ContractAmountsbyDatePAGE.EDITABLE :=
        (ServiceContract."Installment Type" = ServiceContract."Installment Type"::Contract) OR (ServiceContract."Installment Type" = ServiceContract."Installment Type"::Consumption) ;
      ContractAmountsbyDatePAGE.RUNMODAL;
    END;

    PROCEDURE NextInvoicingDate@1100528603() : Date;
    VAR
      InvoiceDate@1100528600 : Date;
    BEGIN
      InvoiceDate := "Invoice From";
      IF "Invoiced Until" <> 0D THEN
        InvoiceDate := "Invoiced Until" +1;
      IF InvoiceDate = 0D THEN
        EXIT;
      IF FORMAT("Invoice Postpone Period") <> '' THEN
        InvoiceDate := CALCDATE("Invoice Postpone Period", InvoiceDate);
      IF "Invoice Period" = "Invoice Period"::Afterwards THEN
        IF FORMAT("Invoice Interval") <> '' THEN
          InvoiceDate := CALCDATE("Invoice Interval", InvoiceDate) -1;
      IF ("Ending Date" <> 0D) AND (InvoiceDate > "Ending Date") THEN
        InvoiceDate := 0D;
      EXIT(InvoiceDate);
    END;

    PROCEDURE InvoicePayment@2() : Decimal;
    VAR
      CustLedgerEntry@11012000 : Record 21;
      ServiceLedgerEntry@11012001 : Record 11012819;
      PercentagePaid@11012002 : Decimal;
      PaidAmount@11012003 : Decimal;
    BEGIN
      IF  "Line No." = 0 THEN EXIT(0);  //C027600

      ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Installment Line No.");
      ServiceLedgerEntry.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceLedgerEntry.SETRANGE("Installment Line No.", "Line No.");
      ServiceLedgerEntry.SETFILTER("Document Type",'%1|%2',
        ServiceLedgerEntry."Document Type"::"Sales Invoice", ServiceLedgerEntry."Document Type"::"Sales Credit Memo");
      IF ServiceLedgerEntry.FIND('-') THEN
        REPEAT
          CustLedgerEntry.SETCURRENTKEY("Document No.");
          CustLedgerEntry.SETFILTER(
            "Document Type", '%1|%2', CustLedgerEntry."Document Type"::Invoice, CustLedgerEntry."Document Type"::"Credit Memo");
          CustLedgerEntry.SETRANGE("Document No.", ServiceLedgerEntry."Document No.");
          IF CustLedgerEntry.FIND('-') THEN BEGIN
            CustLedgerEntry.CALCFIELDS("Amount (LCY)", "Remaining Amt. (LCY)");
            IF CustLedgerEntry."Amount (LCY)" <> 0 THEN BEGIN
              PercentagePaid := ServiceLedgerEntry."Total Revenue (LCY)" / CustLedgerEntry."Amount (LCY)";
              PaidAmount += PercentagePaid * (CustLedgerEntry."Amount (LCY)" - CustLedgerEntry."Remaining Amt. (LCY)");
            END;
          END;
        UNTIL ServiceLedgerEntry.NEXT = 0;
      EXIT(PaidAmount);
    END;

    PROCEDURE InitRecord@1100528602();
    VAR
      ServiceContract@1100528600 : Record 11012812;
    BEGIN
      IF "Service Contract No." = '' THEN
        EXIT;
      IF ServiceContract.GET("Service Contract No.") THEN BEGIN
        "Invoice From" := ServiceContract."Starting Date";
        "Invoicing via Collective List" := ServiceContract."Invoicing via Collective List";
        "Invoice Period" := ServiceContract."Invoice Period";
        "Invoice Postpone Period" := ServiceContract."Invoice Postpone Period";
      END;
    END;

    PROCEDURE GetServiceSalesDiscount@1100528604(ISeekDate@1100528602 : Date;VAR OFoundServiceSalesDiscount@1100528600 : Record 11072237;VAR OPeriodEnd@1100528605 : Date) : Boolean;
    VAR
      ServiceSalesDiscount@1100528601 : Record 11072237;
      PeriodEnd@1100528603 : Date;
      EmptyDateFormula@1100528604 : DateFormula;
    BEGIN
      CLEAR(OFoundServiceSalesDiscount);
      ServiceSalesDiscount.SETRANGE(Type, ServiceSalesDiscount.Type::Contract);
      ServiceSalesDiscount.SETRANGE(Code, "Service Contract No.");
      ServiceSalesDiscount.SETRANGE("Object No.", '');
      ServiceSalesDiscount.SETRANGE("Discount/Surcharge", ServiceSalesDiscount."Discount/Surcharge"::Discount);
      ServiceSalesDiscount.SETFILTER("Starting Date", '<>%1&<=%2', 0D, ISeekDate);
      ServiceSalesDiscount.SETFILTER("Ending Date", '%1|>=%2', 0D, ISeekDate);
      ServiceSalesDiscount.SETFILTER(Period, '<>%1', EmptyDateFormula);
      IF ServiceSalesDiscount.FIND('+') THEN
        REPEAT
          PeriodEnd := CALCDATE(ServiceSalesDiscount.Period, "Invoice From") -1;
          IF (ISeekDate <= PeriodEnd) AND (OFoundServiceSalesDiscount.Percentage <= ServiceSalesDiscount.Percentage) THEN BEGIN
            OFoundServiceSalesDiscount := ServiceSalesDiscount;
            OPeriodEnd := PeriodEnd;
          END;
        UNTIL ServiceSalesDiscount.NEXT(-1) = 0;
      EXIT(OFoundServiceSalesDiscount.Code <> '');
    END;

    LOCAL PROCEDURE DetermineChargeable@1100528606();
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      Chargeable := NOT ServiceSetup."Release Installments Mandatory";
    END;

    BEGIN
    {
      ORANGO.PR 200604 New Field: "Deferral Code"
    }
    END.
  }
}

