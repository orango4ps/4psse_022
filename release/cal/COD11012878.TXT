OBJECT Codeunit 11012878 Limit Budget Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Budgetlimit %1 fÅr %2 %3 Åberschritten;ENU=Limit Budget %1 for %2 %3 exceeded;NLD=Mandaat %1 voor %2 %3 overschreden';
      Text001@1100528601 : TextConst 'DEU=Stunden;ENU=hours;NLD=uren;NOR=timer;SVE=Timmar';
      Text002@1100528602 : TextConst 'DEU=Arbeit;ENU=labor;NLD=arbeid;SVE=Arbete';
      Text003@1100528603 : TextConst 'DEU=Material;ENU=material;NLD=materiaal;SVE=Material';
      Text004@1100528604 : TextConst 'DEU=gesamt;ENU=total;NLD=totaal;SVE=total';
      Text005@1100528605 : TextConst 'DEU=" und ";ENU=and;NLD=en;NOR=og;SVE=och';

    PROCEDURE UpdateServiceOrderLimitBudgetExceeded@1100528600(VAR IOServiceOrder@1100528600 : Record 11012823) : Boolean;
    VAR
      ServiceSetup@1100528606 : Record 11012800;
      LimitBudgetExceeded@1100528601 : Boolean;
      LimitBudgetHoursExceedance@1100528602 : Decimal;
      LimitBudgetLaborExceedance@1100528603 : Decimal;
      LimitBudgetMaterialExceedance@1100528604 : Decimal;
      LimitBudgetTotalExceedance@1100528605 : Decimal;
    BEGIN
      ServiceSetup.GET;
      IF NOT ServiceSetup."Limit Budget Control Active" THEN
        EXIT;
      IF NOT (IOServiceOrder."Source Type" IN [IOServiceOrder."Source Type"::Call, IOServiceOrder."Source Type"::Direct]) THEN
        EXIT;
      LimitBudgetExceeded :=
        IsServiceOrderLimitBudgetExceeded(
          IOServiceOrder, TRUE, LimitBudgetHoursExceedance, LimitBudgetLaborExceedance, LimitBudgetMaterialExceedance, LimitBudgetTotalExceedance);
      IF ShowMessageServiceOrderLimitBudgetExceeded(IOServiceOrder, LimitBudgetExceeded, LimitBudgetHoursExceedance, LimitBudgetLaborExceedance, LimitBudgetMaterialExceedance, LimitBudgetTotalExceedance) THEN
        EXIT(TRUE);
    END;

    PROCEDURE UpdateServiceCallLimitBudgetExceeded@1100528601(VAR IOServiceCall@1100528600 : Record 11012822) : Boolean;
    VAR
      ServiceSetup@1100528605 : Record 11012800;
      LimitBudgetExceeded@1100528602 : Boolean;
      LimitBudgetHoursExceedance@1100528601 : Decimal;
      LimitBudgetLaborExceedance@1100528603 : Decimal;
      LimitBudgetTotalExceedance@1100528604 : Decimal;
    BEGIN
      ServiceSetup.GET;
      IF NOT ServiceSetup."Limit Budget Control Active" THEN
        EXIT;
      LimitBudgetExceeded :=
        IsServiceCallLimitBudgetExceeded(IOServiceCall, LimitBudgetHoursExceedance, LimitBudgetLaborExceedance, LimitBudgetTotalExceedance);
      IF IOServiceCall."Limit Budget Exceedance" <> LimitBudgetExceeded THEN BEGIN
        IOServiceCall.VALIDATE("Limit Budget Exceedance", LimitBudgetExceeded);
        IF LimitBudgetExceeded THEN
          MESSAGE(Text000,
            GenerateExceedanceText(LimitBudgetHoursExceedance, LimitBudgetLaborExceedance, 0, LimitBudgetTotalExceedance),
            IOServiceCall.TABLECAPTION,
            IOServiceCall."No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsServiceOrderLimitBudgetExceeded@1100528602(IServiceOrder@1100528600 : Record 11012823;IInitExceedance@1100528601 : Boolean;VAR OLimitBudgetHoursExceedance@1100528609 : Decimal;VAR OLimitBudgetLaborExceedance@1100528610 : Decimal;VAR OLimitBudgetMaterialExceedance@1100528611 : Decimal;VAR OLimitBudgetTotalExceedance@1100528612 : Decimal) : Boolean;
    VAR
      ServiceSetup@1100528613 : Record 11012800;
      TmpServiceOrderCostPlusEntry@1100528602 : TEMPORARY Record 11012825;
      ResourceWOP@1100528603 : Record 11229278;
      WorkOrder@1100528604 : Record 11229279;
      AdviceOrderLine@1100528607 : Record 11012055;
      ServiceExtraCost@1100528608 : Record 11020344;
      TotalExpectedHours@1100528605 : Decimal;
      TotalInvoicePrice@1100528606 : Decimal;
    BEGIN
      IF IInitExceedance THEN BEGIN
        OLimitBudgetHoursExceedance := 0;
        OLimitBudgetLaborExceedance := 0;
        OLimitBudgetMaterialExceedance := 0;
        OLimitBudgetTotalExceedance := 0;
      END;
      ServiceSetup.GET;
      IF NOT ServiceSetup."Limit Budget Control Active" THEN
        EXIT;
      IF NOT (IServiceOrder."Source Type" IN [IServiceOrder."Source Type"::Call, IServiceOrder."Source Type"::Direct]) THEN
        EXIT;

      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", IServiceOrder."No.");
      WorkOrder.SETFILTER("Resource Type", '%1|%2', WorkOrder."Resource Type"::" ", WorkOrder."Resource Type"::Employee);

      IF IServiceOrder."Limit Budget Hours" <> 0 THEN BEGIN
        WorkOrder.CALCSUMS("Expected Hours");
        IF WorkOrder.COUNT <> 0 THEN
          TotalExpectedHours := WorkOrder."Expected Hours" + OLimitBudgetHoursExceedance
        ELSE
          TotalExpectedHours := IServiceOrder."Expected Hours" + OLimitBudgetHoursExceedance;
        IF TotalExpectedHours > IServiceOrder."Limit Budget Hours" THEN
          OLimitBudgetHoursExceedance := TotalExpectedHours - IServiceOrder."Limit Budget Hours"
        ELSE
          OLimitBudgetHoursExceedance := 0;
      END;

      IF IServiceOrder."Limit Budget Labor" <> 0 THEN BEGIN
        TotalInvoicePrice := OLimitBudgetLaborExceedance;
        IF WorkOrder.FINDSET THEN
          REPEAT
            TmpServiceOrderCostPlusEntry.INIT;
            TmpServiceOrderCostPlusEntry."Posting Date" := WORKDATE;
            TmpServiceOrderCostPlusEntry."Service Order No." := IServiceOrder."No.";
            TmpServiceOrderCostPlusEntry."Service Contract No." := IServiceOrder."Service Contract No.";
            TmpServiceOrderCostPlusEntry."Object No." := GetFirstServiceOrderObjectNo(IServiceOrder."No.");
            TmpServiceOrderCostPlusEntry."Cost Type" := TmpServiceOrderCostPlusEntry."Cost Type"::Labor;
            IF IServiceOrder."Employee No." <> '' THEN
              ResourceWOP.GET(IServiceOrder."Employee No.");
            TmpServiceOrderCostPlusEntry.VALIDATE("Employee No.", ResourceWOP."Source No.");
            TmpServiceOrderCostPlusEntry.VALIDATE("Wage Component", GetWageComponent);
            TmpServiceOrderCostPlusEntry.VALIDATE(Quantity, WorkOrder."Expected Hours");
            TotalInvoicePrice += TmpServiceOrderCostPlusEntry."Invoice Price (LCY)";
          UNTIL WorkOrder.NEXT = 0;
        IF TotalInvoicePrice > IServiceOrder."Limit Budget Labor" THEN
          OLimitBudgetLaborExceedance := TotalInvoicePrice - IServiceOrder."Limit Budget Labor"
        ELSE
          OLimitBudgetLaborExceedance := 0;
      END;

      IF IServiceOrder."Limit Budget Material" <> 0 THEN BEGIN
        TotalInvoicePrice := OLimitBudgetMaterialExceedance;
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        AdviceOrderLine.SETRANGE("Service Order No.", IServiceOrder."No.");
        AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>%1', 0);
        AdviceOrderLine.SETRANGE("Cost Type", AdviceOrderLine."Cost Type"::Material);
        IF NOT AdviceOrderLine.ISEMPTY THEN BEGIN
            AdviceOrderLine.CALCSUMS("Amount (LCY)");
            TotalInvoicePrice += AdviceOrderLine."Amount (LCY)";
        END;
        ServiceExtraCost.SETRANGE("Entity Type", ServiceExtraCost."Entity Type"::"Service Order");
        ServiceExtraCost.SETRANGE("Entity Code", IServiceOrder."No.");
        IF ServiceExtraCost.FINDSET THEN
          REPEAT
            TmpServiceOrderCostPlusEntry.INIT;
            TmpServiceOrderCostPlusEntry."Posting Date" := WORKDATE;
            TmpServiceOrderCostPlusEntry."Service Order No." := IServiceOrder."No.";
            TmpServiceOrderCostPlusEntry."Object No." := GetFirstServiceOrderObjectNo(IServiceOrder."No.");
            TmpServiceOrderCostPlusEntry."Basic Price (LCY)" := ServiceExtraCost.Amount;
            TmpServiceOrderCostPlusEntry.VALIDATE(Quantity, 1);
            TotalInvoicePrice += TmpServiceOrderCostPlusEntry."Invoice Price (LCY)";
          UNTIL ServiceExtraCost.NEXT = 0;
        IF TotalInvoicePrice > IServiceOrder."Limit Budget Material" THEN
          OLimitBudgetMaterialExceedance := TotalInvoicePrice - IServiceOrder."Limit Budget Material"
        ELSE
          OLimitBudgetMaterialExceedance := 0;
      END;

      IF IServiceOrder."Limit Budget Total" <> 0 THEN BEGIN
        TotalInvoicePrice := OLimitBudgetTotalExceedance;
        AdviceOrderLine.RESET;
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        AdviceOrderLine.SETRANGE("Service Order No.", IServiceOrder."No.");
        AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>%1', 0);
        IF NOT AdviceOrderLine.ISEMPTY THEN BEGIN
            AdviceOrderLine.CALCSUMS("Amount (LCY)");
            TotalInvoicePrice += AdviceOrderLine."Amount (LCY)";
        END;
        IF WorkOrder.FINDSET THEN
          REPEAT
            TmpServiceOrderCostPlusEntry.INIT;
            TmpServiceOrderCostPlusEntry."Posting Date" := WORKDATE;
            TmpServiceOrderCostPlusEntry."Service Order No." := IServiceOrder."No.";
            TmpServiceOrderCostPlusEntry."Object No." := GetFirstServiceOrderObjectNo(IServiceOrder."No.");
            IF WorkOrder."Resource No." <> '' THEN
              ResourceWOP.GET(WorkOrder."Resource No.");
            TmpServiceOrderCostPlusEntry.VALIDATE("Employee No.", ResourceWOP."Source No.");
            TmpServiceOrderCostPlusEntry.VALIDATE("Wage Component", GetWageComponent);
            TmpServiceOrderCostPlusEntry.VALIDATE(Quantity, WorkOrder."Expected Hours");
            TotalInvoicePrice += TmpServiceOrderCostPlusEntry."Invoice Price (LCY)";
          UNTIL WorkOrder.NEXT = 0;
        ServiceExtraCost.SETRANGE("Entity Type", ServiceExtraCost."Entity Type"::"Service Order");
        ServiceExtraCost.SETRANGE("Entity Code", IServiceOrder."No.");
        IF ServiceExtraCost.FINDSET THEN
          REPEAT
            TmpServiceOrderCostPlusEntry.INIT;
            TmpServiceOrderCostPlusEntry."Posting Date" := WORKDATE;
            TmpServiceOrderCostPlusEntry."Service Order No." := IServiceOrder."No.";
            TmpServiceOrderCostPlusEntry."Object No." := GetFirstServiceOrderObjectNo(IServiceOrder."No.");
            TmpServiceOrderCostPlusEntry."Basic Price (LCY)" := ServiceExtraCost.Amount;
            TmpServiceOrderCostPlusEntry.VALIDATE(Quantity, 1);
            TotalInvoicePrice += TmpServiceOrderCostPlusEntry."Invoice Price (LCY)";
          UNTIL ServiceExtraCost.NEXT = 0;

        IF TotalInvoicePrice > IServiceOrder."Limit Budget Total" THEN
          OLimitBudgetTotalExceedance := TotalInvoicePrice - IServiceOrder."Limit Budget Total"
        ELSE
          OLimitBudgetTotalExceedance := 0;
      END;
      EXIT(OLimitBudgetHoursExceedance + OLimitBudgetLaborExceedance + OLimitBudgetMaterialExceedance + OLimitBudgetTotalExceedance > 0);
    END;

    PROCEDURE IsServiceCallLimitBudgetExceeded@1100528603(IServiceCall@1100528600 : Record 11012822;VAR OLimitBudgetHoursExceedance@1100528601 : Decimal;VAR OLimitBudgetLaborExceedance@1100528605 : Decimal;VAR OLimtBudgetTotalExceedance@1100528604 : Decimal) : Boolean;
    VAR
      ServiceSetup@1100528606 : Record 11012800;
      TmpServiceOrderCostPlusEntry@1100528602 : TEMPORARY Record 11012825;
      ResourceWOP@1100528603 : Record 11229278;
    BEGIN
      OLimitBudgetHoursExceedance := 0;
      OLimitBudgetLaborExceedance := 0;
      OLimtBudgetTotalExceedance := 0;

      ServiceSetup.GET;
      IF NOT ServiceSetup."Limit Budget Control Active" THEN
        EXIT;

      IF IServiceCall."Limit Budget Hours" <> 0 THEN
        IF IServiceCall."Expected Hours" > IServiceCall."Limit Budget Hours" THEN
          OLimitBudgetHoursExceedance := IServiceCall."Expected Hours" - IServiceCall."Limit Budget Hours";
      IF (IServiceCall."Limit Budget Labor" <> 0) OR (IServiceCall."Limit Budget Total" <> 0) THEN BEGIN
        TmpServiceOrderCostPlusEntry."Posting Date" := WORKDATE;
        TmpServiceOrderCostPlusEntry.SetOverruleServiceContractNo(IServiceCall."Service Contract No.");
        TmpServiceOrderCostPlusEntry."Object No." := IServiceCall."Object No.";
        TmpServiceOrderCostPlusEntry."Cost Type" := TmpServiceOrderCostPlusEntry."Cost Type"::Labor;
        IF IServiceCall."Employee No." <> '' THEN
          ResourceWOP.GET(IServiceCall."Employee No.");
        TmpServiceOrderCostPlusEntry.VALIDATE("Employee No.", ResourceWOP."Source No.");
        TmpServiceOrderCostPlusEntry.VALIDATE("Wage Component", GetWageComponent);
        TmpServiceOrderCostPlusEntry.VALIDATE(Quantity, IServiceCall."Expected Hours");
        IF TmpServiceOrderCostPlusEntry."Invoice Price (LCY)" > IServiceCall."Limit Budget Labor" THEN
          OLimitBudgetLaborExceedance := TmpServiceOrderCostPlusEntry."Invoice Price (LCY)" - IServiceCall."Limit Budget Labor";
        IF TmpServiceOrderCostPlusEntry."Invoice Price (LCY)" > IServiceCall."Limit Budget Total" THEN
          OLimtBudgetTotalExceedance := TmpServiceOrderCostPlusEntry."Invoice Price (LCY)" - IServiceCall."Limit Budget Total";
      END;
      EXIT(OLimitBudgetHoursExceedance + OLimitBudgetLaborExceedance + OLimtBudgetTotalExceedance <> 0);
    END;

    LOCAL PROCEDURE GetWageComponent@1100528604() : Code[10];
    VAR
      "4PSMobileSetup"@1100528600 : Record 11012676;
      WageComponent@1100528601 : Record 11012014;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable("4PSMobileSetup") THEN
        IF "4PSMobileSetup".GET THEN
          IF "4PSMobileSetup"."Def. Wage Comp. Working Hrs" <> '' THEN
            EXIT("4PSMobileSetup"."Def. Wage Comp. Working Hrs");

      WageComponent.SETRANGE("Component Type", WageComponent."Component Type"::Hours);
      WageComponent.SETRANGE(Overtime, FALSE);
      IF WageComponent.FINDFIRST THEN
        EXIT(WageComponent.Code);
    END;

    LOCAL PROCEDURE GetFirstServiceOrderObjectNo@1100528605(IServiceOrderNo@1100528601 : Code[20]) : Code[20];
    VAR
      ServiceOrderObject@1100528600 : Record 11071724;
    BEGIN
      ServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderObject.FINDFIRST THEN
        EXIT(ServiceOrderObject."Object No.");
    END;

    PROCEDURE IsSOLimitBudgetByCostPlusExceeded@1100528606(IServiceOrderNo@1100528600 : Code[20];VAR OLimitBudgetHoursExceedance@1100528604 : Decimal;VAR OLimitBudgetLaborExceedance@1100528603 : Decimal;VAR OLimitBudgetMaterialExceedance@1100528602 : Decimal;VAR OLimitBudgetTotalExceedance@1100528601 : Decimal;VAR OTotalExpectedHours@1100528611 : Decimal;VAR OTotalLaborAmount@1100528612 : Decimal;VAR OTotalMaterialAmount@1100528613 : Decimal;VAR OTotalInvoiceAmount@1100528614 : Decimal) : Boolean;
    VAR
      ServiceOrder@1100528608 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528605 : Record 11012825;
      TotalInvoicePrice@1100528606 : Decimal;
    BEGIN
      OLimitBudgetHoursExceedance := 0;
      OLimitBudgetLaborExceedance := 0;
      OLimitBudgetMaterialExceedance := 0;
      OLimitBudgetTotalExceedance := 0;
      OTotalExpectedHours := 0;
      OTotalLaborAmount := 0;
      OTotalMaterialAmount := 0;
      OTotalInvoiceAmount := 0;
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT(FALSE);
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          TotalInvoicePrice :=
            ServiceOrderCostPlusEntry."Invoice Price (LCY)" + ServiceOrderCostPlusEntry."Invoice in Process (LCY)" + ServiceOrderCostPlusEntry."Invoiced Price (LCY)";
          ServiceOrderCostPlusEntry.CALCFIELDS("Cost Type");
          CASE ServiceOrderCostPlusEntry."Cost Type" OF
            ServiceOrderCostPlusEntry."Cost Type"::Labor:
              BEGIN
                OTotalExpectedHours += ServiceOrderCostPlusEntry.Quantity;
                OTotalLaborAmount += TotalInvoicePrice;
              END;
            ServiceOrderCostPlusEntry."Cost Type"::Material:
              OTotalMaterialAmount += TotalInvoicePrice;
          END;
          OTotalInvoiceAmount += TotalInvoicePrice;
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;

      IF ServiceOrder."Limit Budget Hours" <> 0 THEN
        IF OTotalExpectedHours > ServiceOrder."Limit Budget Hours" THEN
          OLimitBudgetHoursExceedance := OTotalExpectedHours - ServiceOrder."Limit Budget Hours";

      IF ServiceOrder."Limit Budget Labor" <> 0 THEN
        IF OTotalLaborAmount > ServiceOrder."Limit Budget Labor" THEN
          OLimitBudgetLaborExceedance := OTotalLaborAmount - ServiceOrder."Limit Budget Labor";

      IF ServiceOrder."Limit Budget Material" <> 0 THEN
        IF OTotalMaterialAmount > ServiceOrder."Limit Budget Material" THEN
          OLimitBudgetMaterialExceedance := OTotalMaterialAmount - ServiceOrder."Limit Budget Material";

      IF ServiceOrder."Limit Budget Total" <> 0 THEN
        IF OTotalInvoiceAmount > ServiceOrder."Limit Budget Total" THEN
          OLimitBudgetTotalExceedance := OTotalInvoiceAmount - ServiceOrder."Limit Budget Total";

      EXIT(OLimitBudgetHoursExceedance + OLimitBudgetLaborExceedance + OLimitBudgetMaterialExceedance + OLimitBudgetTotalExceedance > 0);
    END;

    LOCAL PROCEDURE GenerateExceedanceText@1100528608(ILimitBudgetHoursExceedance@1100528600 : Decimal;ILimitBudgetLaborExceedance@1100528601 : Decimal;ILimitBudgetMaterialExceedance@1100528602 : Decimal;ILimitBudgetTotalExceedance@1100528603 : Decimal) ExceedanceText : Text;
    VAR
      ExceedanceTexts@1100528604 : ARRAY [4] OF Text;
      NoOfTexts@1100528605 : Integer;
      I@1100528606 : Integer;
    BEGIN
      IF ILimitBudgetHoursExceedance > 0 THEN
        ExceedanceTexts[1] := Text001;
      IF ILimitBudgetLaborExceedance > 0 THEN
        ExceedanceTexts[2] := Text002;
      IF ILimitBudgetMaterialExceedance > 0 THEN
        ExceedanceTexts[3] := Text003;
      IF ILimitBudgetTotalExceedance > 0 THEN
        ExceedanceTexts[4] := Text004;
      NoOfTexts := COMPRESSARRAY(ExceedanceTexts);
      FOR I := 1 TO NoOfTexts DO BEGIN
        IF I > 1 THEN
          IF I = NoOfTexts THEN
            ExceedanceText := STRSUBSTNO('%1 %2 ', ExceedanceText, Text005)
          ELSE
            ExceedanceText := STRSUBSTNO('%1%2 ', ExceedanceText, ',');
        ExceedanceText += ExceedanceTexts[I];
      END;
    END;

    PROCEDURE ShowMessageServiceOrderLimitBudgetExceeded@1100527560(VAR ServiceOrder@1100527550 : Record 11012823;LimitBudgetExceeded@1100527555 : Boolean;LimitBudgetHoursExceedance@1100527554 : Decimal;LimitBudgetLaborExceedance@1100527553 : Decimal;LimitBudgetMaterialExceedance@1100527552 : Decimal;LimitBudgetTotalExceedance@1100527551 : Decimal) : Boolean;
    VAR
      xServiceOrder@1100527556 : Record 11012823;
    BEGIN
      xServiceOrder.COPY(ServiceOrder);
      IF LimitBudgetTotalExceedance > 0 THEN
        IF ServiceOrder."Limit Budget Total Exceedance" THEN
          LimitBudgetTotalExceedance := 0
        ELSE
          ServiceOrder."Limit Budget Total Exceedance" := TRUE
      ELSE
        ServiceOrder."Limit Budget Total Exceedance" := FALSE;

      IF LimitBudgetHoursExceedance > 0 THEN
        IF ServiceOrder."Limit Budget Hours Exceedance" THEN
          LimitBudgetHoursExceedance := 0
        ELSE
          ServiceOrder."Limit Budget Hours Exceedance" := TRUE
      ELSE
        ServiceOrder."Limit Budget Hours Exceedance" := FALSE;

      IF LimitBudgetMaterialExceedance > 0 THEN
        IF ServiceOrder."Lm. Budg. Material Exceedance" THEN
          LimitBudgetMaterialExceedance := 0
        ELSE
          ServiceOrder."Lm. Budg. Material Exceedance" := TRUE
      ELSE
        ServiceOrder."Lm. Budg. Material Exceedance" := FALSE;

      IF LimitBudgetLaborExceedance > 0 THEN
        IF ServiceOrder."Limit Budget Labor Exceedance" THEN
          LimitBudgetLaborExceedance := 0
        ELSE
          ServiceOrder."Limit Budget Labor Exceedance" := TRUE
      ELSE
        ServiceOrder."Limit Budget Labor Exceedance" := FALSE;

      IF (ServiceOrder."Limit Budget Total Exceedance" <> xServiceOrder."Limit Budget Total Exceedance") OR (ServiceOrder."Limit Budget Hours Exceedance" <> xServiceOrder."Limit Budget Hours Exceedance") OR
        (ServiceOrder."Lm. Budg. Material Exceedance" <> xServiceOrder."Lm. Budg. Material Exceedance") OR (ServiceOrder."Limit Budget Labor Exceedance" <> xServiceOrder."Limit Budget Labor Exceedance")
      THEN BEGIN
        IF ServiceOrder."Limit Budget Exceedance" <> LimitBudgetExceeded THEN
            ServiceOrder.VALIDATE("Limit Budget Exceedance", LimitBudgetExceeded);
        IF LimitBudgetExceeded AND ((LimitBudgetTotalExceedance > 0) OR (LimitBudgetHoursExceedance > 0) OR (LimitBudgetMaterialExceedance > 0) OR (LimitBudgetLaborExceedance > 0)) THEN
          MESSAGE(Text000,
            GenerateExceedanceText(LimitBudgetHoursExceedance, LimitBudgetLaborExceedance, LimitBudgetMaterialExceedance, LimitBudgetTotalExceedance),
            ServiceOrder.TABLECAPTION,
            ServiceOrder."No.");
        EXIT(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

