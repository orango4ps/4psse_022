OBJECT Codeunit 11128077 VP XML Writer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE9.03 (12048903);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      gXMLDoc@12048878 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      gXMLNode@12048877 : ARRAY [100] OF DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      gNodeLevel@12048872 : Integer;
      PEB001@12048873 : TextConst 'ENU=Maximum one step up is allowed;SVE=Max ett steg upp „r till†tet';
      PEB002@12048874 : TextConst 'ENU=It is up to fall by %1 steps;SVE=Det g†r max att minska med %1 steg';
      PEB003@12048876 : TextConst 'ENU=Level %1 is clear;SVE=Niv† %1 „r tom';
      PEB004@12048879 : TextConst 'ENU=Level must be min 2;SVE=Niv† f†r min vara 2';
      PEB005@12048882 : TextConst 'ENU=Root Element must have a name;SVE=Rotelementet m†ste ha ett angivet namn.';
      PEB006@12048883 : TextConst 'ENU=There can be only one root element;SVE=Det kan endast finnas ett rotelement';
      gEncoding@12048884 : Text[30];
      gPrettyPrint@12048880 : Boolean;
      gTrim@12048885 : Boolean;
      PEB007@12048886 : TextConst 'ENU=You can only trim XML documents that''s set to "PrettyPrint";SVE=Det g†r endast att trimma XML-dokument som „r "PrettyPrint"';
      gNotBlankElement@12048900 : Boolean;
      gStackElementName@12048899 : ARRAY [50] OF Text;
      gStackElementLevel@12048898 : ARRAY [50] OF Integer;
      gStackLevel@12048897 : Integer;
      gStackRootNodeLevel@12048896 : Integer;

    PROCEDURE CreateDom@12048875(pEncoding@12048872 : Text;pComment@12048873 : Text;pRootElementName@12048875 : Text);
    BEGIN
      CreateDomNS(pEncoding,pComment,pRootElementName,'');
    END;

    PROCEDURE CreateDomNS@12048883(pEncoding@12048872 : Text;pComment@12048873 : Text;pRootElementName@12048875 : Text;pDefaultSchema@12048876 : Text);
    VAR
      XMLNodeTemp@12048874 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF pRootElementName = '' THEN
        ERROR(PEB005);
      gNodeLevel := 1;
      CLEAR(gXMLDoc);
      gXMLDoc := gXMLDoc.XmlDocument;
      IF pEncoding = '' THEN
        gEncoding := 'UTF-8'
      ELSE
        gEncoding := pEncoding;

      XMLNodeTemp := gXMLDoc.CreateXmlDeclaration('1.0',gEncoding, '');

      gXMLDoc.AppendChild(XMLNodeTemp);

      IF pComment <> '' THEN BEGIN
        XMLNodeTemp := gXMLDoc.CreateComment(pComment);
        gXMLDoc.AppendChild(XMLNodeTemp);
      END;
      gXMLNode[gNodeLevel] := gXMLDoc.CreateElement(pRootElementName);
      gXMLDoc.AppendChild(gXMLNode[gNodeLevel]);
      IF pDefaultSchema <> '' THEN
        AddAttribute('xmlns',pDefaultSchema);
    END;

    PROCEDURE SaveToFile@12048879(pFileName@12048872 : Text);
    VAR
      XMLDom@12048873 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      tXmlTempBlob@12048874 : TEMPORARY Record 11128071;
    BEGIN
      IF gPrettyPrint THEN BEGIN
        XMLDom := gXMLDoc;
        PrettyPrintXML;
        gXMLDoc.Save(pFileName); // Server Side
        gXMLDoc := XMLDom;
      END ELSE
        gXMLDoc.Save(pFileName); // Server Side

      IF gTrim THEN BEGIN
        tXmlTempBlob.ImportFromFile(pFileName); // Server side
        TrimBlob(tXmlTempBlob);
        tXmlTempBlob.ExportToFile(pFileName); // Server Side
      END;
    END;

    PROCEDURE SaveToBlob@12048874(VAR pvtXmlTempBlob@12048872 : TEMPORARY Record 11128071);
    VAR
      XMLDom@12048877 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      OS@12048874 : OutStream;
    BEGIN
      pvtXmlTempBlob.Blob.CREATEOUTSTREAM(OS);

      IF gPrettyPrint THEN BEGIN
        XMLDom := gXMLDoc;
        PrettyPrintXML;
        gXMLDoc.Save(OS);
        gXMLDoc := XMLDom;
      END ELSE
        gXMLDoc.Save(OS);

      IF gTrim THEN
        TrimBlob(pvtXmlTempBlob);
    END;

    PROCEDURE SaveToVariant@12048886(VAR pVariant@12048872 : Variant);
    BEGIN
      pVariant := gXMLDoc;
    END;

    PROCEDURE GetXML@12048887() rXML : Text;
    BEGIN
      EXIT(gXMLDoc.OuterXml);
    END;

    PROCEDURE AddElementRel@12048876(pStep@12048873 : Integer;pNodeName@12048872 : Text;pNodeValue@12048874 : Variant);
    BEGIN
      AddElementRelNS(pStep,pNodeName,pNodeValue,'');
    END;

    PROCEDURE AddElementRelNS@12048881(pStep@12048873 : Integer;pNodeName@12048872 : Text;pNodeValue@12048874 : Variant;pNameSpace@12048875 : Text);
    BEGIN
      IF pStep > 1 THEN
        ERROR(PEB001);
      IF (gNodeLevel + pStep) < 2 THEN
        ERROR(PEB002,gNodeLevel - 2);

      gNodeLevel += pStep;
      IF (gNodeLevel <=1) THEN
        ERROR(PEB006);

      IF gNotBlankElement THEN BEGIN
        IF FormatToXML(pNodeValue) <> '' THEN BEGIN
          AddElemetFromStack;
          AddElementNS(gXMLNode[gNodeLevel-1],pNodeName,FormatToXML(pNodeValue),pNameSpace,gXMLNode[gNodeLevel]);
        END ELSE
          AddElemetToStack(gNodeLevel,pNodeName);
      END ELSE
        AddElementNS(gXMLNode[gNodeLevel-1],pNodeName,FormatToXML(pNodeValue),pNameSpace,gXMLNode[gNodeLevel]);
    END;

    PROCEDURE AddElementAbs@12048873(pLevel@12048873 : Integer;pNodeName@12048872 : Text;pNodeValue@12048874 : Variant);
    BEGIN
      AddElementAbsNS(pLevel,pNodeName,pNodeValue,'');
    END;

    PROCEDURE AddElementAbsNS@12048888(pLevel@12048873 : Integer;pNodeName@12048872 : Text;pNodeValue@12048874 : Variant;pNameSapce@12048875 : Text);
    BEGIN
      IF pLevel < 2 THEN
        ERROR(PEB004);

      gNodeLevel := pLevel;

      IF gNotBlankElement THEN BEGIN
        IF FormatToXML(pNodeValue) <> '' THEN BEGIN
          AddElemetFromStack;

          IF NodeIsClear(pLevel-1) THEN
            ERROR(PEB003,pLevel-1);

          AddElementNS(gXMLNode[gNodeLevel-1],pNodeName,FormatToXML(pNodeValue),pNameSapce,gXMLNode[gNodeLevel]);
        END ELSE
          AddElemetToStack(gNodeLevel,pNodeName);
      END ELSE BEGIN
        IF NodeIsClear(pLevel-1) THEN
          ERROR(PEB003,pLevel-1);

        AddElementNS(gXMLNode[gNodeLevel-1],pNodeName,FormatToXML(pNodeValue),pNameSapce,gXMLNode[gNodeLevel]);
      END;
    END;

    PROCEDURE AddAttribute@12048872(pAttributeName@12048873 : Text;pAttributeValue@12048872 : Variant);
    BEGIN
      AddAttribute2(gXMLNode[gNodeLevel],pAttributeName,FormatToXML(pAttributeValue));
    END;

    PROCEDURE AddBase64ElementFromFileRelNS@12048878(pStep@12048873 : Integer;pName@12048872 : Text;pFileName@12048874 : Text;pNameSpace@12048859 : Text);
    VAR
      tXmlTempBlob@11128061 : TEMPORARY Record 11128071;
    BEGIN
      tXmlTempBlob.ImportFromFile(pFileName); // server side
      AddBase64ElementFromBlobRelNS(pStep,pName,tXmlTempBlob,pNameSpace);
    END;

    PROCEDURE AddBase64ElementFromBlobRelNS@12048882(pStep@12048878 : Integer;pName@12048877 : Text;VAR pvtXmlTempBlob@12048872 : TEMPORARY Record 11128071;pNameSpace@12048863 : Text);
    BEGIN
      AddElementRelNS(pStep,pName,'',pNameSpace);
      AddBase64ElementNS(pvtXmlTempBlob);
    END;

    PROCEDURE AddBase64ElementFromFileAbsNS@12048868(pLevel@12048873 : Integer;pName@12048872 : Text;pFileName@12048874 : Text;pNameSpace@12048859 : Text);
    VAR
      tXmlTempBlob@12048858 : TEMPORARY Record 11128071;
    BEGIN
      tXmlTempBlob.ImportFromFile(pFileName); // server side
      AddBase64ElementFromBlobAbsNS(pLevel,pName,tXmlTempBlob,pNameSpace);
    END;

    PROCEDURE AddBase64ElementFromBlobAbsNS@12048867(pLevel@12048878 : Integer;pName@12048877 : Text;VAR pvtXmlTempBlob@12048872 : TEMPORARY Record 11128071;pNameSpace@12048863 : Text);
    BEGIN
      AddElementAbsNS(pLevel,pName,'',pNameSpace);
      AddBase64ElementNS(pvtXmlTempBlob);
    END;

    PROCEDURE GetLevel@12048877() : Integer;
    BEGIN
      EXIT(gNodeLevel);
    END;

    PROCEDURE SetNotBlankElement@12048896(pNotBlankElement@12048896 : Boolean);
    BEGIN
      gNotBlankElement := pNotBlankElement;
    END;

    PROCEDURE SetPrettyPrint@12048889(pPrettyPrint@12048872 : Boolean);
    BEGIN
      gPrettyPrint := pPrettyPrint;
    END;

    PROCEDURE SetTrim@12048890(pTrim@12048872 : Boolean);
    BEGIN
      gTrim := pTrim;
    END;

    LOCAL PROCEDURE AddAttribute2@6(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text;Val@1003 : Text);
    VAR
      XMLTempAttribute@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLTempAttribute := XMLNode.OwnerDocument.CreateAttribute(Name);
      IF Val <> '' THEN
        XMLTempAttribute.InnerText := Val;
      XMLNode.Attributes.SetNamedItem(XMLTempAttribute);
    END;

    LOCAL PROCEDURE AddElementNS@1(VAR pvXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";pName@1002 : Text;pValue@1003 : Text;pNameSpace@1004 : Text;VAR pvNewXmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      TempElement@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TempElement := pvXmlNode.OwnerDocument.CreateNode('element', pName, pNameSpace);
      IF pValue <> '' THEN
        TempElement.InnerText := pValue;
      pvXmlNode.AppendChild(TempElement);
      pvNewXmlNode := TempElement;
      CLEAR(TempElement);
    END;

    LOCAL PROCEDURE AddBase64ElementNS@12048864(VAR pvtXmlTempBlob@12048872 : TEMPORARY Record 11128071);
    VAR
      Bytes@12048861 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@12048860 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      FormattingOptions@12048858 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Base64FormattingOptions";
      MemoryStream@12048859 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      IS@12048862 : InStream;
    BEGIN
      // http://www.kauffmann.nl/blog/index.php/2012/04/04/binary-data-with-nav-web-service/
      // Denna funktion l„gger till Base64-data i det senast skapade elementet
      pvtXmlTempBlob.Blob.CREATEINSTREAM(IS);
      MemoryStream := MemoryStream.MemoryStream();
      COPYSTREAM(MemoryStream, IS);
      Bytes := MemoryStream.ToArray(); // Enl Kauffmann ska GetBuffer anv„ndas, men det ger 0 bytes i slutet. S† ist„llet anv„nds ToArray
      gXMLNode[gNodeLevel].InnerText := Convert.ToBase64String(Bytes, FormattingOptions.InsertLineBreaks); // gXMLNode[gNodeLevel] har nyss skapas ovan i anropande funktion
    END;

    LOCAL PROCEDURE FormatToXML@12048880(pValue@12048872 : Variant) : Text;
    VAR
      VPMngt@12048858 : Codeunit 11128061;
    BEGIN
      IF pValue.ISTEXT OR pValue.ISCODE THEN
        EXIT(VPMngt.CleanTxt(pValue))
      ELSE
        EXIT(FORMAT(pValue,0,9));
    END;

    LOCAL PROCEDURE PrettyPrintXML@12048891();
    VAR
      XDoc@12048872 : DotNet "'System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Linq.XDocument";
      XmlDeclaration@12048873 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeType@12048874 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeType";
    BEGIN
      XmlDeclaration := gXMLDoc.FirstChild();
      XDoc := XDoc.Parse(gXMLDoc.OuterXml);
      gXMLDoc.LoadXml(XDoc.ToString());
      IF NOT ISNULL(XmlDeclaration) THEN
        IF XmlDeclaration.NodeType.Equals(XmlNodeType.XmlDeclaration) THEN
          gXMLDoc.InsertBefore(XmlDeclaration, gXMLDoc.DocumentElement());
    END;

    LOCAL PROCEDURE NodeIsClear@12048885(pNodeLevel@12048873 : Integer) : Boolean;
    VAR
      XMLNode@12048872 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLNode := gXMLNode[pNodeLevel];
      EXIT(ISNULL(XMLNode));
    END;

    LOCAL PROCEDURE TrimBlob@12048893(VAR pvtXmlTempBlob@12048872 : TEMPORARY Record 11128071);
    VAR
      tXmlTempBlob@12048873 : TEMPORARY Record 11128071;
      IS@12048874 : InStream;
      OS@12048875 : OutStream;
      TextLine@12048876 : Text;
      TrimStr@12048877 : Text;
    BEGIN
      IF NOT gPrettyPrint THEN
        ERROR(PEB007);

      pvtXmlTempBlob.Blob.CREATEINSTREAM(IS);
      tXmlTempBlob.Blob.CREATEOUTSTREAM(OS);
      TrimStr[1] := ' ';
      TrimStr[2] := 9;

      WHILE NOT IS.EOS DO BEGIN
        IS.READTEXT(TextLine);
        TextLine := DELCHR(TextLine, '<', TrimStr);
        OS.WRITETEXT(TextLine);
        OS.WRITETEXT;
      END;

      pvtXmlTempBlob := tXmlTempBlob;
    END;

    PROCEDURE AddElemetFromStack@12048900();
    VAR
      i@12048896 : Integer;
    BEGIN
      IF gStackLevel > 0 THEN BEGIN
        FOR i := 1 TO gStackLevel DO BEGIN
          IF gStackElementLevel[i] < gNodeLevel THEN
            AddElementNS(gXMLNode[gStackElementLevel[i]-1],gStackElementName[i],'','',gXMLNode[gStackElementLevel[i]]);
        END;
      END;

      gStackLevel := 0;
      gStackRootNodeLevel := 0;
      CLEAR(gStackElementLevel);
      CLEAR(gStackElementName);
    END;

    PROCEDURE AddElemetToStack@12048901(pLevel@12048896 : Integer;pName@12048897 : Text);
    BEGIN
      IF (gStackLevel = 0) OR ((gNodeLevel - gStackRootNodeLevel) < 0) THEN BEGIN
        gStackRootNodeLevel := gNodeLevel;
        CLEAR(gStackElementLevel);
        CLEAR(gStackElementName);
      END;

      gStackLevel := (gNodeLevel - gStackRootNodeLevel) +1;
      gStackElementLevel[gStackLevel] := pLevel;
      gStackElementName[gStackLevel] := pName;
    END;

    PROCEDURE AddAttributeNS@1100570000(pAttributeName@12048873 : Text;pAttributeValue@12048872 : Variant;pNameSapce@1100570000 : Text);
    BEGIN
      AddAttributeNS2(gXMLNode[gNodeLevel],pAttributeName,FormatToXML(pAttributeValue),pNameSapce);
    END;

    LOCAL PROCEDURE AddAttributeNS2@1100570001(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text;Val@1003 : Text;pNameSapce@1100570000 : Text);
    VAR
      XMLTempAttribute@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLTempAttribute := XMLNode.OwnerDocument.CreateAttribute(Name,pNameSapce);
      IF Val <> '' THEN
        XMLTempAttribute.Value := Val;
      XMLNode.Attributes.SetNamedItem(XMLTempAttribute);
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0103 Wrappers and Tools
      PEB
      PEB *** End ***
      190627 ORANGO.DL #24730 upgrade to 8.11 after bug found
    }
    END.
  }
}

