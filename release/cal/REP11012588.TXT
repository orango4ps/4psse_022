OBJECT Report 11012588 Process Inspection Test Data
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Testdaten Inspektion verarbeiten;
               ENU=Process Inspection Test Data;
               NLD=Testgegevens keuring verwerken;
               NOR=Behandle Testdata for Inspeksjon;
               SVE=Behandla inspektionstestdata];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  lvInspecDataBufRec@1100485000 : Record 11012538;
                BEGIN
                  InitProcessDone := FALSE;
                  lvInspecDataBufRec.COPY("Inspection Test Data Buffer");
                  lvInspecDataBufRec.SETCURRENTKEY("Test Device", "Line No.");
                  IF NOT lvInspecDataBufRec.FINDFIRST THEN
                    ERROR(Text000);
                  TestDevice := lvInspecDataBufRec."Test Device";

                  //* In 1 run only allowed to process data of 1 test device.
                  lvInspecDataBufRec.FINDLAST;
                  IF lvInspecDataBufRec."Test Device" <> TestDevice THEN
                    ERROR(Text004);

                  Window.OPEN(Text003);
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                   ProcessImportInspectionsCU.CheckPrintErrors();
                 END;

  }
  DATASET
  {
    { 5668;    ;DataItem;                    ;
               DataItemTable=Table11012538;
               DataItemTableView=SORTING(Test Device,Line No.);
               OnPreDataItem=BEGIN
                               //* Only allowed to set a filter on 'Test Device', not on 'Line No.' and 'Inspection Text'. For the reason that it can
                               //* be possible that only a part of test data of a plant number will be read.

                               IF (GETFILTER("Line No.") <> '') OR (GETFILTER("Inspection Text") <> '') THEN
                                 ERROR(Text002, FIELDCAPTION("Test Device"));
                             END;

               OnAfterGetRecord=VAR
                                  lvText@1100485003 : Text[1024];
                                  lvPlantTxt@1100485000 : Text[30];
                                  lvPlantTypeTxt@1100485006 : Text[20];
                                  lvPlantNoTxt@1100485005 : Text[10];
                                  lvInspectionType@1100485007 : Text[20];
                                  lvInspectedOn@1100485001 : Text[30];
                                  lvInspectedBy@1100485008 : Text[20];
                                  lvCertificateNo@1100485009 : Text[20];
                                  lvCertificateDate@1100485010 : Text[20];
                                  lvTestStatus@1100485004 : Text[30];
                                  lvComment@1100485002 : Text[250];
                                BEGIN
                                  Window.UPDATE(1, STRSUBSTNO('%1 - %2', "Line No.", "Inspection Text"));

                                  IF "Test Device" <> TestDevice THEN
                                    CurrReport.SKIP;

                                  CASE "Test Device" OF
                                    "Test Device"::"PAT Manager":
                                      BEGIN
                                        IF NOT InitProcessDone THEN BEGIN
                                          InitProcessDone := TRUE;
                                          ProcessImportInspectionsCU.PATManager_InitProcess(InspectionType);
                                        END;
                                        lvText := "Inspection Text" + "Inspection Text 2";
                                        lvPlantTxt := COPYSTR(SelectField(1, ';', lvText), 1, MAXSTRLEN(lvPlantTxt));
                                        lvInspectedOn :=COPYSTR(SelectField(10, ';', lvText), 1, MAXSTRLEN(lvInspectedOn));
                                        lvTestStatus := COPYSTR(SelectField(15, ';', lvText), 1, MAXSTRLEN(lvTestStatus));
                                        lvComment := COPYSTR(SelectField(18, ';', lvText), 1, MAXSTRLEN(lvComment));
                                        ProcessImportInspectionsCU.PATManager_ProcessLine(lvText,lvPlantTxt,lvInspectedOn,lvTestStatus,lvComment);
                                        DELETE;
                                      END;
                                    "Test Device"::"PAT 3140S",
                                    "Test Device"::"MultiPAT (XE)":
                                      BEGIN
                                        IF NOT InitProcessDone THEN BEGIN
                                          InitProcessDone := TRUE;
                                          IF "Test Device" = "Test Device"::"MultiPAT (XE)" THEN
                                            ProcessImportInspectionsCU.MultiPATXE_InitProcess(InspectionType)
                                          ELSE
                                            ProcessImportInspectionsCU.PAT3140S_InitProcess(InspectionType);
                                        END;
                                        ProcessImportInspectionsCU.PAT3140S_ProcessLine("Inspection Text" + "Inspection Text 2");
                                        DELETE;
                                      END;
                                    "Test Device"::Secutest:
                                      BEGIN
                                        IF NOT InitProcessDone THEN BEGIN
                                          InitProcessDone := TRUE;
                                          ProcessImportInspectionsCU.SECUTest_InitProcess(InspectionType);
                                        END;
                                        ProcessImportInspectionsCU.SECUTest_ProcessLine("Inspection Text" + "Inspection Text 2");
                                        DELETE;
                                      END;
                                    "Test Device"::"Secutest Windows":
                                      BEGIN
                                        IF NOT InitProcessDone THEN BEGIN
                                          InitProcessDone := TRUE;
                                          ProcessImportInspectionsCU.SECUWindows_InitProcess(InspectionType);
                                        END;
                                        lvText := "Inspection Text" + "Inspection Text 2";
                                        lvPlantTypeTxt := COPYSTR(SelectField(1, ',', lvText), 1, MAXSTRLEN(lvPlantTypeTxt));
                                        lvPlantNoTxt := COPYSTR(SelectField(2, ',', lvText), 1, MAXSTRLEN(lvPlantNoTxt));
                                        lvInspectionType := COPYSTR(SelectField(3, ',', lvText), 1, MAXSTRLEN(lvInspectionType));
                                        lvInspectedOn := COPYSTR(SelectField(4, ',', lvText), 1, MAXSTRLEN(lvInspectedOn));
                                        lvInspectedBy := COPYSTR(SelectField(5, ',', lvText), 1, MAXSTRLEN(lvInspectedBy));
                                        lvCertificateNo  := COPYSTR(SelectField(7, ',', lvText), 1, MAXSTRLEN(lvCertificateNo));
                                        lvCertificateDate  := COPYSTR(SelectField(8, ',', lvText), 1, MAXSTRLEN(lvCertificateDate));
                                        lvTestStatus := COPYSTR(SelectField(9, ',', lvText), 1, MAXSTRLEN(lvTestStatus));
                                        lvComment := COPYSTR(SelectField(10, ',', lvText), 1, MAXSTRLEN(lvComment));
                                        ProcessImportInspectionsCU.SECUWindows_ProcessLine(lvText,
                                          lvPlantTypeTxt,lvPlantNoTxt,lvInspectionType,lvInspectedOn,lvInspectedBy,
                                          lvCertificateNo,lvCertificateDate,lvTestStatus,lvComment);
                                        DELETE;
                                      END;
                                    ELSE
                                      ERROR(Text001, "Test Device");
                                  END;
                                END;

               ReqFilterFields=Test Device }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF InspectionTypeRec.COUNT = 1 THEN BEGIN
                     InspectionTypeRec.FIND('-');
                     InspectionType := InspectionTypeRec.Code;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100485000;2;Field  ;
                  Name=Inspection Type;
                  CaptionML=[DEU=Inspektionstyp;
                             ENU=Inspection Type;
                             NLD=Keuringstype;
                             NOR=Inspeksjonstype;
                             SVE=Inspektionstyp];
                  SourceExpr=InspectionType;
                  TableRelation="Inspection Type".Code }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      InspectionTypeRec@1100485001 : Record 11012562;
      ProcessImportInspectionsCU@1000000000 : Codeunit 11012580;
      Window@1100485005 : Dialog;
      InitProcessDone@1100485002 : Boolean;
      TestDevice@1100485006 : Option;
      InspectionType@1100485000 : Code[20];
      Text000@1100485008 : TextConst 'DEU=Es sind keine Testdaten Inspektion fÅr das ausgewÑhlte TestgerÑt vorhanden.;ENU=No Inspection Test Data present for selected Test Device.;NLD=Geen testgegevens keuring aanwezig voor geselecteerd testapparaat.;NOR=Det finnes ingen inspeksjonstestdata for den valgte testenheten.;SVE=Det finns inga inspektionstestdata fîr den valda testenheten.';
      Text001@1100485003 : TextConst 'DEU=Verarbeiten der Daten des TestgerÑts ''%1'' nicht verfÅgbar.;ENU=Process data of test divice ''%1'' not available.;NLD=Verwerken van gegevens testapparaat ''%1'' niet beschikbaar.;NOR=Prosessdata for testenheten ''%1'' er ikke tilgjengelig.;SVE=Processdata fîr testenheten ''%1'' Ñr inte tillgÑngliga.';
      Text002@1100485004 : TextConst 'DEU=Nur ein Filter darf auf ''%1'' eingestellt werden.;ENU=Only Filter on ''%1'' allowed.;NLD=Er mag alleen een filter op ''%1'' gezet worden.;NOR=Det er kun tillatt Ü filtrere pÜ ''%1''.;SVE=Det Ñr endast tillÜtet att filtrera pÜ ''%1''.';
      Text003@1100485007 : TextConst 'DEU=Zeile #1############################;ENU=Line #1############################;NLD=Regel #1############################;NOR=Rad #1############################;SVE=Rad  #1############################';
      Text004@1100485009 : TextConst 'DEU=Es darf nur ein TestgerÑt ausgewÑhlt werden.;ENU=There may only be selected one Test Device.;NLD=Er mag maar 1 testapparaat geselecteerd worden.;NOR=Kun Çn testenhet kan velges..;SVE=Bara en testenhet kan vÑljas.';

    PROCEDURE SelectField@1100485000(IFieldNo@1100485000 : Integer;ISeparator@1100485001 : Text[1];IText@1100485002 : Text[1024]) RetField : Text[1024];
    VAR
      lvNo@1100485005 : Integer;
      lvPos@1100485003 : Integer;
      lvStartPos@1100485004 : Integer;
      lvEndPos@1100485006 : Integer;
      lvStartFound@1100485007 : Boolean;
      lvEndFound@1100485008 : Boolean;
    BEGIN
      RetField := '';
      lvNo := 0;
      IF (IFieldNo = 1) THEN
        lvStartPos := 1;

      REPEAT
        lvNo := lvNo + 1;
        lvPos := STRPOS(IText, ISeparator);
        IF (lvPos > 0) THEN BEGIN
          IText[lvPos] := ' ';
          IF (lvNo = IFieldNo - 1) THEN BEGIN
            lvStartFound := TRUE;
            lvStartPos := lvPos + 1;
          END ELSE BEGIN
            IF (lvNo = IFieldNo) THEN BEGIN
              lvEndFound := TRUE;
              lvEndPos := lvPos - 1;
            END;
          END;
        END;
      UNTIL (lvNo = IFieldNo) OR (lvPos = 0);

      IF (NOT lvStartFound) AND (NOT lvEndFound) THEN
        EXIT;

      IF (NOT lvEndFound) THEN
        RetField := COPYSTR(IText,lvStartPos)
      ELSE BEGIN
        IF (lvStartPos <= lvEndPos) THEN
          RetField := COPYSTR(IText,lvStartPos, (lvEndPos - lvStartPos +1));
      END;
    END;

    BEGIN
    {
      //* This is created for PAT3140S, which is operational at BNBM.
      //* Now also developed for several other test devices, but this is not operational somewhere.
      //* So also not tested, so maybe need some modification.
    }
    END.
  }
  RDLDATA
  {
  }
}

