OBJECT Codeunit 802 Online Map Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OnlineMapSetup@1004 : Record 800;
      OnlineMapParameterSetup@1003 : Record 801;
      ThisAddressTxt@1007 : TextConst 'ENU=&This address;NOR=&Denne adressen;SVE=&Den h„r adressen';
      DirectionsFromLocationTxt@1009 : TextConst 'ENU=&Directions from my location;NOR=&Veibeskrivelse fra min posisjon;SVE=&V„gvisning fr†n min plats';
      OtherDirectionsTxt@1012 : TextConst 'ENU=&Other;NOR=&Annet;SVE=&™vrigt';
      OtherMenuQst@1000 : TextConst 'ENU=&Directions from my company,Directions to my &company,Directions from &another address,Directions to an&other address;NOR=&Veibeskrivelse fra mitt selskap,Veibeskrivelse til mitt &selskap,Veibeskrivelse fra en &annen adresse,Veibeskrivelse til &en annen adresse;SVE=&V„gvisning fr†n mitt f”retag,V„gvisning till mitt &f”retag, V„gvisning fr†n &annan adress, V„gvisning till &en annan adress';
      Text002@1008 : TextConst 'ENU=There is no default Map setup.;NOR=Det finnes ikke noe standard kartoppsett.;SVE=Det finns ingen standardkartinst„llning.';
      ShowMapQst@1002 : TextConst 'ENU=Show map with:;NOR=Vis kart med:;SVE=Visa karta med:';
      Text007@1011 : TextConst 'ENU=Table %1 has not been set up to use Online Map.;NOR=Tabellen %1 er ikke satt opp for † bruke Online Map.;SVE=Tabellen %1 har inte konfigurerats f”r anv„ndning av Online Map.';
      Text008@1010 : TextConst 'ENU=The specified record could not be found.;NOR=Finner ikke den angitte posten.;SVE=Den det gick inte att hitta den angivna posten.';
      Text015@1001 : TextConst 'ENU=Bing Maps;NOR=Bing-kart;SVE=Bing Maps';

    [External]
    PROCEDURE MakeSelection@1(TableID@1008 : Integer;Position@1009 : Text[1000]);
    VAR
      LocationProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.LocationProvider" RUNONCLIENT;
      MainMenu@1002 : Text;
      Selection@1001 : Integer;
    BEGIN
      IF LocationProvider.IsAvailable THEN
        MainMenu := STRSUBSTNO('%1,%2,%3',ThisAddressTxt,DirectionsFromLocationTxt,OtherDirectionsTxt)
      ELSE
        MainMenu := STRSUBSTNO('%1,%2',ThisAddressTxt,OtherDirectionsTxt);

      Selection := STRMENU(MainMenu,1,ShowMapQst);
      CASE Selection OF
        1:
          ProcessMap(TableID,Position);
        2:
          IF LocationProvider.IsAvailable THEN
            SelectAddress(TableID,Position,4)
          ELSE
            ShowOtherMenu(TableID,Position);
        3:
          ShowOtherMenu(TableID,Position);
      END;
    END;

    LOCAL PROCEDURE ShowOtherMenu@16(TableID@1003 : Integer;Position@1002 : Text[1000]);
    VAR
      Selection@1000 : Integer;
    BEGIN
      Selection := STRMENU(OtherMenuQst,1,ShowMapQst);
      CASE Selection OF
        0:
          MakeSelection(TableID,Position);
        1:
          SelectAddress(TableID,Position,3);
        2:
          SelectAddress(TableID,Position,2);
        3:
          SelectAddress(TableID,Position,1);
        4:
          SelectAddress(TableID,Position,0);
      END;
    END;

    LOCAL PROCEDURE ProcessWebMap@50(TableNo@1007 : Integer;ToRecPosition@1008 : Text[1000]);
    VAR
      Parameters@1010 : ARRAY [12] OF Text[100];
      url@1000 : Text[1024];
      IsHandled@1001 : Boolean;
    BEGIN
      GetSetup;
      BuildParameters(TableNo,ToRecPosition,Parameters,OnlineMapSetup."Distance In",OnlineMapSetup.Route);

      url := OnlineMapParameterSetup."Map Service";
      SubstituteParameters(url,Parameters);

      IsHandled := FALSE;
      OnAfterProcessWebMap(url,IsHandled);
      IF NOT IsHandled THEN
        HYPERLINK(url);
    END;

    LOCAL PROCEDURE ProcessWebDirections@51(FromNo@1010 : Integer;FromRecPosition@1011 : Text[1000];ToNo@1012 : Integer;ToRecPosition@1013 : Text[1000];Distance@1002 : 'Miles,Kilometers';Route@1001 : 'Quickest,Shortest');
    VAR
      Parameters@1015 : ARRAY [2,12] OF Text[100];
      url@1000 : Text[1024];
      IsHandled@1003 : Boolean;
    BEGIN
      GetSetup;
      BuildParameters(FromNo,FromRecPosition,Parameters[1],Distance,Route);
      BuildParameters(ToNo,ToRecPosition,Parameters[2],Distance,Route);

      IF FromNo = DATABASE::Geolocation THEN BEGIN
        url := OnlineMapParameterSetup."Directions from Location Serv.";
        SubstituteGPSParameters(url,Parameters[1]);
        SubstituteParameters(url,Parameters[2]);
      END ELSE BEGIN
        url := OnlineMapParameterSetup."Directions Service";
        SubstituteParameters(url,Parameters[1]);
        SubstituteParameters(url,Parameters[2]);
      END;

      IsHandled := FALSE;
      OnAfterProcessWebDirections(url,IsHandled);
      IF NOT IsHandled THEN
        HYPERLINK(url);
    END;

    LOCAL PROCEDURE ProcessMap@7(TableNo@1000 : Integer;ToRecPosition@1001 : Text[1000]);
    BEGIN
      TestSetupExists;
      ProcessWebMap(TableNo,ToRecPosition);
    END;

    [External]
    PROCEDURE ProcessDirections@5(FromNo@1002 : Integer;FromRecPosition@1003 : Text[1000];ToNo@1004 : Integer;ToRecPosition@1005 : Text[1000];Distance@1000 : Option;Route@1001 : Option);
    BEGIN
      TestSetupExists;
      ProcessWebDirections(FromNo,FromRecPosition,ToNo,ToRecPosition,Distance,Route);
    END;

    LOCAL PROCEDURE BuildParameters@13(TableNo@1000 : Integer;RecPosition@1001 : Text[1000];VAR Parameters@1002 : ARRAY [12] OF Text[100];Distance@1009 : 'Miles,Kilometers';Route@1008 : 'Quickest,Shortest');
    VAR
      CompanyInfo@1004 : Record 79;
      CountryRegion@1003 : Record 9;
      OnlineMapSetup@1005 : Record 800;
      OnlineMapParameterSetup@1006 : Record 801;
      i@1007 : Integer;
    BEGIN
      CLEAR(Parameters);
      IF ValidAddresses(TableNo) THEN
        GetAddress(TableNo,RecPosition,Parameters)
      ELSE
        ERROR(Text007,FORMAT(TableNo));
      IF TableNo = DATABASE::Geolocation THEN
        EXIT;
      OnlineMapSetup.GET;
      OnlineMapSetup.TESTFIELD("Map Parameter Setup Code");
      OnlineMapParameterSetup.GET(OnlineMapSetup."Map Parameter Setup Code");
      CompanyInfo.GET;

      IF Parameters[5] = '' THEN
        Parameters[5] := CompanyInfo."Country/Region Code";
      IF CountryRegion.GET(COPYSTR(Parameters[5],1,MAXSTRLEN(CountryRegion.Code))) THEN
        Parameters[6] := CountryRegion.Name;

      IF OnlineMapParameterSetup."URL Encode Non-ASCII Chars" THEN
        FOR i := 1 TO 6 DO
          Parameters[i] := COPYSTR(URLEncode(Parameters[i]),1,MAXSTRLEN(Parameters[i]));

      Parameters[7] := GetCultureInfo;
      IF OnlineMapParameterSetup."Miles/Kilometers Option List" <> '' THEN
        Parameters[8] := SELECTSTR(Distance + 1,OnlineMapParameterSetup."Miles/Kilometers Option List");
      IF OnlineMapParameterSetup."Quickest/Shortest Option List" <> '' THEN
        Parameters[9] := SELECTSTR(Route + 1,OnlineMapParameterSetup."Quickest/Shortest Option List");
    END;

    LOCAL PROCEDURE GetAddress@12(TableID@1001 : Integer;RecPosition@1002 : Text[1000];VAR Parameters@1000 : ARRAY [12] OF Text[100]);
    VAR
      Geolocation@1003 : Record 806;
      Location@1004 : Record 14;
      RecordRef@1005 : RecordRef;
      IsHandled@1007 : Boolean;
    BEGIN
      OnBeforeGetAddress(TableID,RecPosition,Parameters,IsHandled);
      IF IsHandled THEN
        EXIT;

      RecordRef.OPEN(TableID);
      RecordRef.SETPOSITION(RecPosition);
      IF NOT RecordRef.FIND('=') THEN
        ERROR(Text008);

      CASE TableID OF
        DATABASE::Location:
          BEGIN
            RecordRef.SETTABLE(Location);
            Parameters[1] := FORMAT(Location.Address);
            Parameters[2] := FORMAT(Location.City);
            Parameters[3] := FORMAT(Location.County);
            Parameters[4] := FORMAT(Location."Post Code");
            Parameters[5] := FORMAT(Location."Country/Region Code");
          END;
        DATABASE::Customer:
          SetParameters(RecordRef,Parameters,5,7,92,91,35);
        DATABASE::Vendor:
          SetParameters(RecordRef,Parameters,5,7,92,91,35);
        DATABASE::"Company Information":
          SetParameters(RecordRef,Parameters,4,6,31,30,36);
        DATABASE::Resource:
          SetParameters(RecordRef,Parameters,6,8,54,53,59);
        DATABASE::Job:
          SetParameters(RecordRef,Parameters,59,61,63,64,67);
        DATABASE::"Ship-to Address":
          SetParameters(RecordRef,Parameters,5,7,92,91,35);
        DATABASE::"Order Address":
          SetParameters(RecordRef,Parameters,5,7,92,91,35);
        DATABASE::"Bank Account":
          SetParameters(RecordRef,Parameters,5,7,92,91,35);
        DATABASE::Contact:
          SetParameters(RecordRef,Parameters,5,7,92,91,35);
        DATABASE::Employee:
          SetParameters(RecordRef,Parameters,8,10,12,11,25);
        DATABASE::Geolocation:
          BEGIN
            RecordRef.SETTABLE(Geolocation);
            Parameters[10] := FORMAT(Geolocation.Latitude,0,2);
            Parameters[11] := FORMAT(Geolocation.Longitude,0,2);
          END;
      END;

      OnAfterGetAddress(TableID,RecPosition,Parameters,RecordRef);
    END;

    LOCAL PROCEDURE ValidAddresses@53(TableID@1000 : Integer) : Boolean;
    VAR
      IsValid@1001 : Boolean;
    BEGIN
      OnBeforeValidAddress(TableID,IsValid);
      IF IsValid THEN
        EXIT(TRUE);

      IsValid :=
        TableID IN [DATABASE::"Bank Account",
                    DATABASE::"Company Information",
                    DATABASE::Contact,
                    DATABASE::Customer,
                    DATABASE::Employee,
                    DATABASE::Job,
                    DATABASE::Location,
                    DATABASE::Resource,
                    DATABASE::"Ship-to Address",
                    DATABASE::"Order Address",
                    DATABASE::Vendor,
                    DATABASE::Geolocation];

      OnAfterValidAddress(TableID,IsValid);
      EXIT(IsValid);
    END;

    LOCAL PROCEDURE URLEncode@10(InText@1000 : Text[250]) : Text[250];
    VAR
      SystemWebHttpUtility@1001 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      SystemWebHttpUtility := SystemWebHttpUtility.HttpUtility;
      EXIT(COPYSTR(SystemWebHttpUtility.UrlEncode(InText),1,MAXSTRLEN(InText)));
    END;

    LOCAL PROCEDURE GetCultureInfo@9() : Text[30];
    VAR
      CultureInfo@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.CultureInfo(WINDOWSLANGUAGE);
      EXIT(COPYSTR(CultureInfo.ToString,1,30));
    END;

    LOCAL PROCEDURE TestSetupExists@54() : Boolean;
    VAR
      OnlineMapSetup@1002 : Record 800;
    BEGIN
      IF NOT OnlineMapSetup.GET THEN
        ERROR(Text002);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE TestSetup@4() : Boolean;
    VAR
      OnlineMapSetup@1000 : Record 800;
    BEGIN
      EXIT(NOT OnlineMapSetup.ISEMPTY);
    END;

    LOCAL PROCEDURE SelectAddress@56(TableNo@1004 : Integer;RecPosition@1005 : Text[1000];Direction@1006 : 'To Other,From Other,To Company,From Company,From my location');
    VAR
      CompanyInfo@1002 : Record 79;
      OnlineMapSetup@1001 : Record 800;
      OnlineMapAddressSelector@1007 : Page 802;
      OnlineMapLocation@1008 : Page 806;
      Distance@1000 : 'Miles,Kilometers';
      Route@1003 : 'Quickest,Shortest';
    BEGIN
      IF Direction IN [Direction::"To Other",Direction::"From Other"] THEN BEGIN
        IF NOT (OnlineMapAddressSelector.RUNMODAL = ACTION::OK) THEN
          EXIT;
        IF OnlineMapAddressSelector.GetRecPosition = '' THEN
          EXIT;
        OnlineMapAddressSelector.Getdefaults(Distance,Route)
      END ELSE BEGIN
        OnlineMapSetup.GET;
        CompanyInfo.GET;
      END;

      CASE Direction OF
        Direction::"To Other":
          ProcessDirections(
            TableNo,RecPosition,
            OnlineMapAddressSelector.GetTableNo,OnlineMapAddressSelector.GetRecPosition,
            Distance,Route);
        Direction::"From Other":
          ProcessDirections(
            OnlineMapAddressSelector.GetTableNo,OnlineMapAddressSelector.GetRecPosition,
            TableNo,RecPosition,
            Distance,Route);
        Direction::"To Company":
          ProcessDirections(
            TableNo,RecPosition,
            DATABASE::"Company Information",CompanyInfo.GETPOSITION,
            OnlineMapSetup."Distance In",OnlineMapSetup.Route);
        Direction::"From Company":
          ProcessDirections(
            DATABASE::"Company Information",CompanyInfo.GETPOSITION,
            TableNo,RecPosition,
            OnlineMapSetup."Distance In",OnlineMapSetup.Route);
        Direction::"From my location":
          BEGIN
            OnlineMapLocation.SetRecordTo(TableNo,RecPosition);
            OnlineMapLocation.RUNMODAL;
          END;
      END;
    END;

    LOCAL PROCEDURE SubstituteParameters@8(VAR url@1000 : Text[1024];Parameters@1001 : ARRAY [12] OF Text[100]);
    VAR
      ParameterName@1004 : Text;
      parameterNumber@1002 : Integer;
      ParmPos@1003 : Integer;
    BEGIN
      FOR parameterNumber := 1 TO ARRAYLEN(Parameters) DO BEGIN
        ParameterName := STRSUBSTNO('{%1}',parameterNumber);
        ParmPos := STRPOS(url,ParameterName);

        IF ParmPos > 1 THEN
          url :=
            COPYSTR(
              COPYSTR(url,1,ParmPos - 1) + Parameters[parameterNumber] + COPYSTR(url,ParmPos + STRLEN(ParameterName)),
              1,MAXSTRLEN(url));
      END;
    END;

    LOCAL PROCEDURE SubstituteGPSParameters@18(VAR url@1000 : Text[1024];Parameters@1001 : ARRAY [12] OF Text[100]);
    VAR
      ParameterName@1004 : Text;
      parameterNumber@1002 : Integer;
      ParmPos@1003 : Integer;
    BEGIN
      FOR parameterNumber := 10 TO ARRAYLEN(Parameters) DO BEGIN
        ParameterName := STRSUBSTNO('{%1}',parameterNumber);
        ParmPos := STRPOS(url,ParameterName);

        IF ParmPos > 1 THEN
          url :=
            COPYSTR(
              COPYSTR(url,1,ParmPos - 1) + Parameters[parameterNumber] + COPYSTR(url,ParmPos + STRLEN(ParameterName)),
              1,MAXSTRLEN(url));
      END;
    END;

    [External]
    PROCEDURE SetupDefault@2();
    VAR
      OnlineMapSetup@1000 : Record 800;
      OnlineMapParameterSetup@1001 : Record 801;
    BEGIN
      OnlineMapSetup.DELETEALL;
      OnlineMapParameterSetup.DELETEALL;
      InsertParam(
        'BING',
        Text015,
        'http://bing.com/maps/default.aspx?where1={1}+{2}+{6}&v=2&mkt={7}',
        'http://bing.com/maps/default.aspx?rtp=adr.{1}+{2}+{6}~adr.{1}+{2}+{6}&v=2&mkt={7}&rtop={9}~0~0',
        'http://bing.com/maps/default.aspx?rtp=pos.{10}_{11}~adr.{1}+{2}+{6}&v=2&mkt={7}&rtop={9}~0~0',
        FALSE,'','0,1',
        'http://go.microsoft.com/fwlink/?LinkId=519372');
      OnlineMapSetup."Map Parameter Setup Code" := 'BING';
      OnlineMapSetup.INSERT;
    END;

    LOCAL PROCEDURE InsertParam@3(Code@1000 : Code[10];Name@1008 : Text[30];MapURL@1001 : Text[250];DirectionsURL@1002 : Text[250];DirectionsFromGpsURL@1009 : Text[250];URLEncode@1003 : Boolean;MilesKilometres@1004 : Text[250];QuickesShortest@1005 : Text[250];Comment@1007 : Text[250]);
    VAR
      OnlineMapParameterSetup@1006 : Record 801;
    BEGIN
      OnlineMapParameterSetup.INIT;
      OnlineMapParameterSetup.Code := Code;
      OnlineMapParameterSetup.Name := Name;
      OnlineMapParameterSetup."Map Service" := MapURL;
      OnlineMapParameterSetup."Directions Service" := DirectionsURL;
      OnlineMapParameterSetup."Directions from Location Serv." := DirectionsFromGpsURL;
      OnlineMapParameterSetup."URL Encode Non-ASCII Chars" := URLEncode;
      OnlineMapParameterSetup."Miles/Kilometers Option List" := MilesKilometres;
      OnlineMapParameterSetup."Quickest/Shortest Option List" := QuickesShortest;
      OnlineMapParameterSetup.Comment := Comment;
      OnlineMapParameterSetup.INSERT(TRUE);
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleMAPRegisterServiceConnection@11(VAR ServiceConnection@1000 : Record 1400);
    VAR
      OnlineMapSetup@1001 : Record 800;
      RecRef@1002 : RecordRef;
    BEGIN
      IF NOT OnlineMapSetup.GET THEN BEGIN
        IF NOT OnlineMapSetup.WRITEPERMISSION THEN
          EXIT;
        OnlineMapSetup.INIT;
        OnlineMapSetup.INSERT;
      END;
      RecRef.GETTABLE(OnlineMapSetup);

      ServiceConnection.Status := ServiceConnection.Status::Enabled;
      WITH OnlineMapSetup DO BEGIN
        IF "Map Parameter Setup Code" = '' THEN
          ServiceConnection.Status := ServiceConnection.Status::Disabled;
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,'',PAGE::"Online Map Setup");
      END;
    END;

    LOCAL PROCEDURE GetSetup@6();
    BEGIN
      OnlineMapSetup.GET;
      OnlineMapSetup.TESTFIELD("Map Parameter Setup Code");
      OnlineMapParameterSetup.GET(OnlineMapSetup."Map Parameter Setup Code");
    END;

    LOCAL PROCEDURE SetParameters@20(VAR RecordRef@1001 : RecordRef;VAR Parameters@1000 : ARRAY [12] OF Text[100];AddressFieldNo@1003 : Integer;CityFieldNo@1004 : Integer;CountyFieldNo@1005 : Integer;PostCodeFieldNo@1006 : Integer;CountryCodeFieldNo@1007 : Integer);
    VAR
      FieldRef@1002 : FieldRef;
    BEGIN
      FieldRef := RecordRef.FIELD(AddressFieldNo);
      Parameters[1] := FORMAT(FieldRef);
      FieldRef := RecordRef.FIELD(CityFieldNo);
      Parameters[2] := FORMAT(FieldRef);
      FieldRef := RecordRef.FIELD(CountyFieldNo);
      Parameters[3] := FORMAT(FieldRef);
      FieldRef := RecordRef.FIELD(PostCodeFieldNo);
      Parameters[4] := FORMAT(FieldRef);
      FieldRef := RecordRef.FIELD(CountryCodeFieldNo);
      Parameters[5] := FORMAT(FieldRef);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetAddress@15(TableID@1002 : Integer;RecPosition@1001 : Text;VAR Parameters@1000 : ARRAY [12] OF Text[100];VAR RecordRef@1003 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProcessWebMap@21(url@1002 : Text[1024];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProcessWebDirections@23(url@1001 : Text[1024];VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidAddress@19(TableID@1001 : Integer;VAR IsValid@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetAddress@14(TableID@1000 : Integer;RecPosition@1001 : Text;VAR Parameters@1002 : ARRAY [12] OF Text[100];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidAddress@17(TableID@1000 : Integer;VAR IsValid@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      4PS, Renumbered objects
    }
    END.
  }
}

