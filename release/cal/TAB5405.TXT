OBJECT Table 5405 Production Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5410=r;
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               InvtAdjmtEntryOrder@1000 : Record 5896;
             BEGIN
               MfgSetup.GET;
               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Due Date","No.","No. Series");
               END;

               IF Status = Status::Released THEN BEGIN
                 IF ProdOrder.GET(Status::Finished,"No.") THEN
                   ERROR(Text007,Status,TABLECAPTION,ProdOrder."No.",ProdOrder.Status);
                 InvtAdjmtEntryOrder.SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type"::Production);
                 InvtAdjmtEntryOrder.SETRANGE("Order No.","No.");
                 IF NOT InvtAdjmtEntryOrder.ISEMPTY THEN
                   ERROR(Text007,Status,TABLECAPTION,ProdOrder."No.",InvtAdjmtEntryOrder.TABLECAPTION);
               END;

               InitRecord;

               "Starting Time" := MfgSetup."Normal Starting Time";
               "Ending Time" := MfgSetup."Normal Ending Time";
               "Creation Date" := TODAY;
               UpdateDatetime;
               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               IF Status = Status::Finished THEN
                 ERROR(Text006);
             END;

    OnDelete=VAR
               ItemLedgEntry@1000 : Record 32;
               CapLedgEntry@1001 : Record 5832;
               PurchLine@1002 : Record 39;
               RefreshRecord@1003 : Boolean;
             BEGIN
               IF Status = Status::Released THEN BEGIN
                 ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
                 ItemLedgEntry.SETRANGE("Order No.","No.");
                 IF NOT ItemLedgEntry.ISEMPTY THEN
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"No.",ItemLedgEntry.TABLECAPTION);

                 CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
                 CapLedgEntry.SETRANGE("Order No.","No.");
                 IF NOT CapLedgEntry.ISEMPTY THEN
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);
               END;

               IF Status IN [Status::Released,Status::Finished] THEN BEGIN
                 PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                 PurchLine.SETRANGE(Type,PurchLine.Type::Item);
                 PurchLine.SETRANGE("Prod. Order No.","No.");
                 IF NOT PurchLine.ISEMPTY THEN
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"No.",PurchLine.TABLECAPTION);
               END;

               IF Status = Status::Finished THEN
                 DeleteFnshdProdOrderRelations
               ELSE
                 DeleteRelations;

               RefreshRecord := FALSE;
               OnAfterOnDelete(Rec,RefreshRecord);
               IF RefreshRecord THEN
                 GET(Status,"No.");
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Production Order;
               NOR=Produksjonsordre;
               SVE=Produktionsorder];
    LookupPageID=Page99000815;
    DrillDownPageID=Page99000815;
  }
  FIELDS
  {
    { 1   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    NOR=Simulert,Planlagt,Fast planlagt,Frigitt,Ferdig;
                                                                    SVE=Simulerad,Planerad,Fast planerad,Sl„ppt,F„rdig];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished }
    { 2   ;   ;No.                 ;Code20        ;TableRelation="Production Order".No. WHERE (Status=FIELD(Status));
                                                   AltSearchField=Search Description;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  MfgSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 3   ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                "Search Description" := Description;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 4   ;   ;Search Description  ;Code100       ;CaptionML=[ENU=Search Description;
                                                              NOR=S›kebeskrivelse;
                                                              SVE=S”kbeskrivning] }
    { 5   ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 6   ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              NOR=Opprettet den;
                                                              SVE=Uppl„ggningsdatum];
                                                   Editable=No }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              NOR=Endret den;
                                                              SVE=Uppdateringsdatum];
                                                   Editable=No }
    { 9   ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF "Source Type" <> xRec."Source Type" THEN
                                                                  CheckProdOrderStatus(FIELDCAPTION("Source Type"));
                                                              END;

                                                   CaptionML=[ENU=Source Type;
                                                              NOR=Kildetype;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=[ENU=Item,Family,Sales Header;
                                                                    NOR=Vare,Familie,Salgshode];
                                                   OptionString=Item,Family,Sales Header }
    { 10  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Item)) Item WHERE (Type=CONST(Inventory))
                                                                 ELSE IF (Source Type=CONST(Family)) Family
                                                                 ELSE IF (Status=CONST(Simulated),
                                                                          Source Type=CONST(Sales Header)) "Sales Header".No. WHERE (Document Type=CONST(Quote))
                                                                          ELSE IF (Status=FILTER(Planned..),
                                                                                   Source Type=CONST(Sales Header)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                                Family@1001 : Record 99000773;
                                                                SalesHeader@1002 : Record 36;
                                                              BEGIN
                                                                IF "Source No." <> xRec."Source No." THEN
                                                                  CheckProdOrderStatus(FIELDCAPTION("Source No."));

                                                                IF "Source No." = '' THEN
                                                                  EXIT;

                                                                CASE "Source Type" OF
                                                                  "Source Type"::Item:
                                                                    BEGIN
                                                                      Item.GET("Source No.");
                                                                      Item.TESTFIELD("Inventory Blocked", FALSE); //**4PS.n
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      InitFromSourceNo(
                                                                        Item.Description,Item."Description 2",Item."Routing No.",
                                                                        Item."Inventory Posting Group",Item."Gen. Prod. Posting Group",'',Item."Unit Cost");
                                                                      CreateDim(
                                                                        DATABASE::Item,"Source No.",
                                                                        DATABASE::Location,"Location Code"); //**4PS.n
                                                                      OnBeforeAssignItemNo(Rec,xRec,Item,CurrFieldNo);
                                                                    END;
                                                                  "Source Type"::Family:
                                                                    BEGIN
                                                                      Family.GET("Source No.");
                                                                      InitFromSourceNo(Family.Description,Family."Description 2",Family."Routing No.",'','','',0);
                                                                      OnBeforeAssignFamily(Rec,xRec,Family,CurrFieldNo);
                                                                    END;
                                                                  "Source Type"::"Sales Header":
                                                                    BEGIN
                                                                      IF Status = Status::Simulated THEN
                                                                        SalesHeader.GET(SalesHeader."Document Type"::Quote,"Source No.")
                                                                      ELSE
                                                                        SalesHeader.GET(SalesHeader."Document Type"::Order,"Source No.");
                                                                      InitFromSourceNo(SalesHeader."Ship-to Name",SalesHeader."Ship-to Name 2",'','','','',0);
                                                                      "Location Code" := SalesHeader."Location Code";
                                                                      "Due Date" := SalesHeader."Shipment Date";
                                                                      "Ending Date" := SalesHeader."Shipment Date";
                                                                      "Dimension Set ID" := SalesHeader."Dimension Set ID";
                                                                      "Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
                                                                      "Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";
                                                                      OnBeforeAssignSalesHeader(Rec,xRec,SalesHeader,CurrFieldNo);
                                                                    END;
                                                                END;
                                                                VALIDATE(Description);
                                                                InitRecord;
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              NOR=Kildenr.;
                                                              SVE=Ursprungsnr] }
    { 11  ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              NOR=Rutenr.;
                                                              SVE=Operationsf”ljdsnr] }
    { 15  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              NOR=Bokf›ringsgruppe - lager;
                                                              SVE=Lagerbokf”ringsmall] }
    { 16  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              NOR=Bokf›ringsgruppe - vare;
                                                              SVE=Produktbokf”ringsmall] }
    { 17  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              NOR=Bokf›ringsgruppe - firma;
                                                              SVE=Gen. r”relsebokf”ringsmall] }
    { 19  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Prod. Order Comment Line" WHERE (Status=FIELD(Status),
                                                                                                       Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar];
                                                   Editable=No }
    { 20  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                UpdateStartingEndingTime(0);
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              NOR=Starttidspunkt;
                                                              SVE=Starttid] }
    { 21  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 22  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                UpdateStartingEndingTime(1);
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              NOR=Sluttidspunkt;
                                                              SVE=Sluttid] }
    { 23  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 24  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                IF "Due Date" = 0D THEN
                                                                  EXIT;
                                                                IF (CurrFieldNo = FIELDNO("Due Date")) OR
                                                                   (CurrFieldNo = FIELDNO("Location Code")) OR
                                                                   UpdateEndDate
                                                                THEN BEGIN
                                                                  ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Planning Level Code");
                                                                  ProdOrderLine.ASCENDING(TRUE);
                                                                  ProdOrderLine.SETRANGE(Status,Status);
                                                                  ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                                                                  ProdOrderLine.SETFILTER("Item No.",'<>%1','');
                                                                  ProdOrderLine.SETFILTER("Planning Level Code",'>%1',0);
                                                                  IF NOT ProdOrderLine.ISEMPTY THEN BEGIN
                                                                    ProdOrderLine.SETRANGE("Planning Level Code",0);
                                                                    IF "Source Type" = "Source Type"::Family THEN BEGIN
                                                                      UpdateEndingDate(ProdOrderLine);
                                                                    END ELSE BEGIN
                                                                      IF ProdOrderLine.FIND('-') THEN
                                                                        "Ending Date" :=
                                                                          LeadTimeMgt.PlannedEndingDate(ProdOrderLine."Item No.","Location Code",'',"Due Date",'',2)
                                                                      ELSE
                                                                        "Ending Date" := "Due Date";
                                                                      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
                                                                      MultiLevelMessage;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    ProdOrderLine.SETRANGE("Planning Level Code");
                                                                    IF NOT ProdOrderLine.ISEMPTY THEN
                                                                      UpdateEndingDate(ProdOrderLine)
                                                                    ELSE BEGIN
                                                                      IF "Source Type" = "Source Type"::Item THEN
                                                                        "Ending Date" :=
                                                                          LeadTimeMgt.PlannedEndingDate(
                                                                            "Source No.",
                                                                            "Location Code",
                                                                            '',
                                                                            "Due Date",
                                                                            '',
                                                                            2)
                                                                      ELSE
                                                                        "Ending Date" := "Due Date";
                                                                      "Starting Date" := "Ending Date";
                                                                      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
                                                                      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
                                                                    END;
                                                                    AdjustStartEndingDate;
                                                                    MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              NOR=Forfallsdato;
                                                              SVE=F”rfallodatum] }
    { 25  ;   ;Finished Date       ;Date          ;CaptionML=[ENU=Finished Date;
                                                              NOR=Ferdig den];
                                                   Editable=No }
    { 28  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              NOR=Sperret;
                                                              SVE=Sp„rrad] }
    { 30  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              NOR=Snarveisdimensjon 1 - kode;
                                                              SVE=Genv„g dimension 1 kod];
                                                   CaptionClass='1,2,1' }
    { 31  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              NOR=Snarveisdimensjon 2 - kode;
                                                              SVE=Genv„g dimension 2 kod];
                                                   CaptionClass='1,2,2' }
    { 32  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                GetDefaultBin;

                                                                VALIDATE("Due Date"); // Scheduling consider Calendar assigned to Location

                                                                //**4PS.sn
                                                                CreateDim(
                                                                  DATABASE::Item,"Source No.",
                                                                  DATABASE::Location,"Location Code"); //**4PS.n
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Lokasjonskode;
                                                              SVE=Lagerst„llekod] }
    { 33  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Source Type=CONST(Item)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                              Item Filter=FIELD(Source No.))
                                                                                                              ELSE IF (Source Type=FILTER(<>Item)) Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN
                                                                  WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Production Order",
                                                                    FIELDCAPTION("Bin Code"),
                                                                    "Location Code",
                                                                    "Bin Code",0);
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              NOR=Hyllekode;
                                                              SVE=Lagerplatskod] }
    { 34  ;   ;Replan Ref. No.     ;Code20        ;CaptionML=[ENU=Replan Ref. No.;
                                                              NOR=Ref.nr. for ny planlegging];
                                                   Editable=No }
    { 35  ;   ;Replan Ref. Status  ;Option        ;CaptionML=[ENU=Replan Ref. Status;
                                                              NOR=Ref.status for ny planlegging];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    NOR=Simulert,Planlagt,Fast planlagt,Frigitt,Ferdig;
                                                                    SVE=Simulerad,Planerad,Fast planerad,Sl„ppt,F„rdig];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished;
                                                   Editable=No }
    { 38  ;   ;Low-Level Code      ;Integer       ;CaptionML=[ENU=Low-Level Code;
                                                              NOR=Lavniv†kode;
                                                              SVE=L„gsta-niv†-kod];
                                                   Editable=No }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF "Source Type" = "Source Type"::Item THEN
                                                                  "Cost Amount" := ROUND(Quantity * "Unit Cost")
                                                                ELSE
                                                                  "Cost Amount" := 0;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              NOR=Enhetskost;
                                                              SVE=Styckkostnad];
                                                   DecimalPlaces=2:5 }
    { 42  ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Cost Amount;
                                                              NOR=Kostbel›p;
                                                              SVE=Kostnadsbelopp];
                                                   DecimalPlaces=2:2 }
    { 47  ;   ;Work Center Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center Filter;
                                                              NOR=Arbeidssenterfilter] }
    { 48  ;   ;Capacity Type Filter;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Capacity Type Filter;
                                                              NOR=Kapasitetstypefilter];
                                                   OptionCaptionML=[ENU=Work Center,Machine Center;
                                                                    NOR=Arbeidssenter,Maskinsenter;
                                                                    SVE=Produktionsgrupp,Maskingrupp];
                                                   OptionString=Work Center,Machine Center }
    { 49  ;   ;Capacity No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=IF (Capacity Type Filter=CONST(Work Center)) "Machine Center"
                                                                 ELSE IF (Capacity Type Filter=CONST(Machine Center)) "Work Center";
                                                   CaptionML=[ENU=Capacity No. Filter;
                                                              NOR=Kapasitetsnr.filter] }
    { 50  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              NOR=Datofilter;
                                                              SVE=Datumfilter] }
    { 51  ;   ;Expected Operation Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE (Status=FIELD(Status),
                                                                                                                                    Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Expected Operation Cost Amt.;
                                                              NOR=Forventet operasjonskostbel›p;
                                                              SVE=F”rv„ntad operationskostnad];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 52  ;   ;Expected Component Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Cost Amount" WHERE (Status=FIELD(Status),
                                                                                                                Prod. Order No.=FIELD(No.),
                                                                                                                Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Expected Component Cost Amt.;
                                                              NOR=Forventet komponentkostbel›p;
                                                              SVE=F”rv„ntad komponentkostnad];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 55  ;   ;Actual Time Used    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Capacity Ledger Entry".Quantity WHERE (Order Type=CONST(Production),
                                                                                                           Order No.=FIELD(No.),
                                                                                                           Type=FIELD(Capacity Type Filter),
                                                                                                           No.=FIELD(Capacity No. Filter),
                                                                                                           Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Actual Time Used;
                                                              NOR=Reelt tidsforbruk];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 56  ;   ;Allocated Capacity Need;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Needed Time" WHERE (Status=FIELD(Status),
                                                                                                                    Prod. Order No.=FIELD(No.),
                                                                                                                    Type=FIELD(Capacity Type Filter),
                                                                                                                    No.=FIELD(Capacity No. Filter),
                                                                                                                    Work Center No.=FIELD(Work Center Filter),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Requested Only=CONST(No)));
                                                   CaptionML=[ENU=Allocated Capacity Need;
                                                              NOR=Tildelt kapasitetsbehov];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Expected Capacity Need;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Needed Time" WHERE (Status=FIELD(Status),
                                                                                                                    Prod. Order No.=FIELD(No.),
                                                                                                                    Type=FIELD(Capacity Type Filter),
                                                                                                                    No.=FIELD(Capacity No. Filter),
                                                                                                                    Work Center No.=FIELD(Work Center Filter),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Requested Only=CONST(No)));
                                                   CaptionML=[ENU=Expected Capacity Need;
                                                              NOR=Forventet kapasitetsbehov;
                                                              SVE=F”rv„ntat kap.behov];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 80  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr.serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 82  ;   ;Planned Order No.   ;Code20        ;CaptionML=[ENU=Planned Order No.;
                                                              NOR=Planl. ordrenr.] }
    { 83  ;   ;Firm Planned Order No.;Code20      ;CaptionML=[ENU=Firm Planned Order No.;
                                                              NOR=Fast planl. ordrenr.] }
    { 85  ;   ;Simulated Order No. ;Code20        ;CaptionML=[ENU=Simulated Order No.;
                                                              NOR=Simulert ordrenr.] }
    { 92  ;   ;Expected Material Ovhd. Cost;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Overhead Amount" WHERE (Status=FIELD(Status),
                                                                                                                    Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Expected Material Ovhd. Cost;
                                                              NOR=Forventet indir. matr.kostn.];
                                                   DecimalPlaces=2:2;
                                                   Editable=No }
    { 94  ;   ;Expected Capacity Ovhd. Cost;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Capacity Ovhd. Cost" WHERE (Status=FIELD(Status),
                                                                                                                                    Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Expected Capacity Ovhd. Cost;
                                                              NOR=Forventet indir. kap.kostn.;
                                                              SVE=F”rv„ntad kap.overh.kost.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 98  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date-Time;
                                                              NOR=Startdato-tidsp.;
                                                              SVE=Startdatum tid] }
    { 99  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date-Time;
                                                              NOR=Sluttdato-tidsp.;
                                                              SVE=Slutdatum tid] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              NOR=Dimensjonssett-ID;
                                                              SVE=Dimensionsupps„ttnings-ID];
                                                   Editable=No }
    { 7300;   ;Completely Picked   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Prod. Order Component"."Completely Picked" WHERE (Status=FIELD(Status),
                                                                                                                      Prod. Order No.=FIELD(No.),
                                                                                                                      Supplied-by Line No.=FILTER(0)));
                                                   CaptionML=[ENU=Completely Picked;
                                                              NOR=Ferdig plukket;
                                                              SVE=F„rdigplockat] }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Assigned User ID;
                                                              NOR=Tilordnet bruker-ID;
                                                              SVE=Tilldelat anv„ndar-ID] }
  }
  KEYS
  {
    {    ;Status,No.                              ;Clustered=Yes }
    {    ;No.,Status                               }
    {    ;Search Description                       }
    {    ;Low-Level Code,Replan Ref. No.,Replan Ref. Status }
    { No ;Source Type,Source No.                   }
    {    ;Description                              }
    {    ;Source No.                               }
    {    ;Starting Date                            }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Source No.,Source Type   }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1 = Document status; %2 = Table caption; %3 = Field value; %4 = Table Caption";ENU=You cannot delete %1 %2 %3 because there is at least one %4 associated with it.;NOR=Du kan ikke slette %1 %2 %3 fordi det finnes minst ‚n %4 tilknyttet.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;NOR=Du kan ikke gi nytt navn til en %1.;SVE=Du kan inte byta namn p† %1.';
      Text002@1002 : TextConst '@@@="%1 = Field caption; %2 = Document status; %3 = Table caption; %4 = Field value; %5 = Table Caption";ENU=You cannot change %1 on %2 %3 %4 because there is at least one %5 associated with it.;NOR=Du kan ikke endre %1 i %2 %3 %4 fordi det finnes minst ‚n %5 tilknyttet.';
      MultiLevelMsg@1003 : TextConst 'ENU=The production order contains lines connected in a multi-level structure and the production order lines have not been automatically rescheduled.\Use Refresh if you want to reschedule the lines.;NOR=Produksjonsordren inneholder linjer som er knyttet sammen i en flerniv†-struktur og produksjonsordrelinjene er ikke automatisk tidsplanlagt p† nytt.\Bruk Forny hvis du vil tidsplanlegge linjene p† nytt.';
      MfgSetup@1006 : Record 99000765;
      ProdOrder@1007 : Record 5405;
      ProdOrderLine@1008 : Record 5406;
      Location@1004 : Record 14;
      NoSeriesMgt@1010 : Codeunit 396;
      CalcProdOrder@1011 : Codeunit 99000773;
      LeadTimeMgt@1013 : Codeunit 5404;
      DimMgt@1014 : Codeunit 408;
      Text006@1016 : TextConst 'ENU=A Finished Production Order cannot be modified.;NOR=Du kan ikke endre en ferdig produksjonsordre.';
      Text007@1017 : TextConst 'ENU=%1 %2 %3 cannot be created, because a %4 %2 %3 already exists.;NOR=%1 %2 %3 kan ikke opprettes fordi det allerede finnes en %4 %2 %3.';
      ItemTrackingMgt@1020 : Codeunit 6500;
      HideValidationDialog@1018 : Boolean;
      Text008@1019 : TextConst 'ENU=Nothing to handle.;NOR=Ingenting † h†ndtere.;SVE=Inget att hantera.';
      UpdateEndDate@1012 : Boolean;
      Text010@1023 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;NOR=Du kan ha endret en dimensjon.\\Vil du oppdatere linjene?;SVE=Du kanske har „ndrat en dimension.\\Vill du uppdatera raderna?';
      Text011@1024 : TextConst 'ENU=You cannot change Finished Production Order dimensions.;NOR=Du kan ikke endre dimensjoner for en ferdig produksjonsordre.';
      DPA_Management@1100000999 : Codeunit 11012783;
      SkipModify@1100528400 : Boolean;

    [External]
    PROCEDURE InitRecord@10();
    BEGIN
      IF "Due Date" = 0D THEN
        VALIDATE("Due Date",WORKDATE);
      IF ("Source Type" = "Source Type"::Item) AND ("Source No." <> '') THEN
        "Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(
            "Source No.",
            "Location Code",
            '',
            "Due Date",
            '',
            2)
      ELSE
        "Ending Date" := "Due Date";
      "Starting Date" := "Ending Date";
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    [External]
    PROCEDURE TestNoSeries@5();
    BEGIN
      MfgSetup.GET;

      CASE Status OF
        Status::Simulated:
          MfgSetup.TESTFIELD("Simulated Order Nos.");
        Status::Planned:
          MfgSetup.TESTFIELD("Planned Order Nos.");
        Status::"Firm Planned":
          MfgSetup.TESTFIELD("Firm Planned Order Nos.");
        Status::Released:
          MfgSetup.TESTFIELD("Released Order Nos.");
      END;
    END;

    [External]
    PROCEDURE AssistEdit@7(OldProdOrder@1000 : Record 5405) : Boolean;
    BEGIN
      WITH ProdOrder DO BEGIN
        ProdOrder := Rec;
        MfgSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldProdOrder."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ProdOrder;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetNoSeriesCode@6() : Code[20];
    BEGIN
      MfgSetup.GET;

      CASE Status OF
        Status::Simulated:
          EXIT(MfgSetup."Simulated Order Nos.");
        Status::Planned:
          EXIT(MfgSetup."Planned Order Nos.");
        Status::"Firm Planned":
          EXIT(MfgSetup."Firm Planned Order Nos.");
        Status::Released:
          EXIT(MfgSetup."Released Order Nos.");
      END;
    END;

    LOCAL PROCEDURE CheckProdOrderStatus@3(Name@1000 : Text[80]);
    VAR
      ItemLedgEntry@1001 : Record 32;
      CapLedgEntry@1002 : Record 5832;
    BEGIN
      IF Status <> Status::Released THEN
        EXIT;

      IF Status IN [Status::Released,Status::Finished] THEN BEGIN
        ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
        ItemLedgEntry.SETRANGE("Order No.","No.");
        IF NOT ItemLedgEntry.ISEMPTY THEN
          ERROR(
            Text002,
            Name,Status,TABLECAPTION,"No.",ItemLedgEntry.TABLECAPTION);

        CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
        CapLedgEntry.SETRANGE("Order No.","No.");
        IF NOT CapLedgEntry.ISEMPTY THEN
          ERROR(
            Text002,
            Name,Status,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE DeleteRelations@2();
    VAR
      ProdOrderComment@1000 : Record 5414;
      WhseRequest@1001 : Record 7325;
      ReservMgt@1002 : Codeunit 99000845;
    BEGIN
      OnBeforeDeleteRelations(Rec);

      ProdOrderComment.SETRANGE(Status,Status);
      ProdOrderComment.SETRANGE("Prod. Order No.","No.");
      ProdOrderComment.DELETEALL;

      ReservMgt.DeleteDocumentReservation(DATABASE::"Prod. Order Line",Status,"No.",HideValidationDialog);

      ProdOrderLine.LOCKTABLE;
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderLine.DELETEALL(TRUE);

      WhseRequest.SETRANGE("Document Type",WhseRequest."Document Type"::Production);
      WhseRequest.SETRANGE("Document Subtype",Status);
      WhseRequest.SETRANGE("Document No.","No.");
      IF NOT WhseRequest.ISEMPTY THEN
        WhseRequest.DELETEALL(TRUE);
      ItemTrackingMgt.DeleteWhseItemTrkgLines(
        DATABASE::"Prod. Order Component",Status,"No.",'',0,0,'',FALSE);
    END;

    LOCAL PROCEDURE DeleteFnshdProdOrderRelations@12();
    VAR
      FnshdProdOrderRtngLine@1001 : Record 5409;
      FnshdProdOrderLine@1003 : Record 5406;
      FnshdProdOrderComp@1004 : Record 5407;
      FnshdProdOrderRtngTool@1005 : Record 5411;
      FnshdProdOrderRtngPers@1006 : Record 5412;
      FnshdProdOrderRtngQltyMeas@1007 : Record 5413;
      FnshdProdOrderComment@1008 : Record 5414;
      FnshdProdOrderRtngCmt@1009 : Record 5415;
      FnshdProdOrderBOMComment@1010 : Record 5416;
    BEGIN
      OnBeforeDeleteFnshdProdOrderRelations(Rec);

      FnshdProdOrderRtngLine.SETRANGE(Status,Status);
      FnshdProdOrderRtngLine.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngLine.DELETEALL;

      FnshdProdOrderLine.SETRANGE(Status,Status);
      FnshdProdOrderLine.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderLine.DELETEALL;

      FnshdProdOrderComp.SETRANGE(Status,Status);
      FnshdProdOrderComp.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderComp.DELETEALL;

      FnshdProdOrderRtngTool.SETRANGE(Status,Status);
      FnshdProdOrderRtngTool.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngTool.DELETEALL;

      FnshdProdOrderRtngPers.SETRANGE(Status,Status);
      FnshdProdOrderRtngPers.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngPers.DELETEALL;

      FnshdProdOrderRtngQltyMeas.SETRANGE(Status,Status);
      FnshdProdOrderRtngQltyMeas.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngQltyMeas.DELETEALL;

      FnshdProdOrderComment.SETRANGE(Status,Status);
      FnshdProdOrderComment.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderComment.DELETEALL;

      FnshdProdOrderRtngCmt.SETRANGE(Status,Status);
      FnshdProdOrderRtngCmt.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngCmt.DELETEALL;

      FnshdProdOrderBOMComment.SETRANGE(Status,Status);
      FnshdProdOrderBOMComment.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderBOMComment.DELETEALL;
    END;

    [External]
    PROCEDURE AdjustStartEndingDate@1();
    VAR
      EarliestLatestProdOrderLine@1000 : Record 5406;
      IsHandled@1001 : Boolean;
    BEGIN
      EarliestLatestProdOrderLine.SETRANGE(Status,Status);
      EarliestLatestProdOrderLine.SETRANGE("Prod. Order No.","No.");
      IF EarliestLatestProdOrderLine.ISEMPTY THEN
        EXIT;

      EarliestLatestProdOrderLine.SETCURRENTKEY("Starting Date-Time");
      EarliestLatestProdOrderLine.FINDFIRST;
      "Starting Date" := EarliestLatestProdOrderLine."Starting Date";
      "Starting Time" := EarliestLatestProdOrderLine."Starting Time";

      EarliestLatestProdOrderLine.SETCURRENTKEY("Ending Date-Time");
      EarliestLatestProdOrderLine.FINDLAST;
      "Ending Date" := EarliestLatestProdOrderLine."Ending Date";
      "Ending Time" := EarliestLatestProdOrderLine."Ending Time";

      EarliestLatestProdOrderLine.SETCURRENTKEY("Due Date");
      EarliestLatestProdOrderLine.FINDLAST;

      IsHandled := FALSE;
      OnAdjustStartEndingDateOnBeforeSetDueDate(Rec,EarliestLatestProdOrderLine,IsHandled);
      IF NOT IsHandled THEN
        "Due Date" := EarliestLatestProdOrderLine."Due Date";

      UpdateDatetime;
    END;

    LOCAL PROCEDURE MultiLevelMessage@4();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeMultiLevelMessage(IsHandled,Rec,xRec,CurrFieldNo);
      IF IsHandled THEN
        EXIT;

      MESSAGE(MultiLevelMsg);
    END;

    [External]
    PROCEDURE UpdateDatetime@11();
    BEGIN
      IF ("Starting Date" <> 0D) AND ("Starting Time" <> 0T) THEN
        "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time")
      ELSE
        "Starting Date-Time" := 0DT;

      IF ("Ending Date" <> 0D) AND ("Ending Time" <> 0T) THEN
        "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time")
      ELSE
        "Ending Date-Time" := 0DT;

      OnAfterUpdateDateTime(Rec,xRec,CurrFieldNo);
    END;

    [External]
    PROCEDURE CreateDim@8(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1100528251 : Integer;No2@1100528250 : Code[20]);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;

      //**4PS.sn
      TableID[2] := Type2;
      No[2] := No2;
      //**4PS.en

      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@13(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1002 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Production Order", ShortcutDimCode);
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        IF Status = Status::Finished THEN
          ERROR(Text011);
        IF NOT SkipModify THEN //**4PS.n
          MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    [External]
    PROCEDURE Navigate@9();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Due Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE CreatePick@7300(AssignedUserID@1009 : Code[50];SortingMethod@1008 : Option;SetBreakBulkFilter@1007 : Boolean;DoNotFillQtyToHandle@1006 : Boolean;PrintDocument@1005 : Boolean);
    VAR
      ProdOrderCompLine@1001 : Record 5407;
      WhseWkshLine@1004 : Record 7326;
      CreatePickFromWhseSource@1002 : Report 7305;
      ItemTrackingMgt@1003 : Codeunit 6500;
    BEGIN
      ProdOrderCompLine.RESET;
      ProdOrderCompLine.SETRANGE(Status,Status);
      ProdOrderCompLine.SETRANGE("Prod. Order No.","No.");
      IF ProdOrderCompLine.FIND('-') THEN
        REPEAT
          ItemTrackingMgt.InitItemTrkgForTempWkshLine(
            WhseWkshLine."Whse. Document Type"::Production,ProdOrderCompLine."Prod. Order No.",
            ProdOrderCompLine."Prod. Order Line No.",DATABASE::"Prod. Order Component",
            ProdOrderCompLine.Status,ProdOrderCompLine."Prod. Order No.",
            ProdOrderCompLine."Prod. Order Line No.",ProdOrderCompLine."Line No.");
        UNTIL ProdOrderCompLine.NEXT = 0;
      COMMIT;

      TESTFIELD(Status,Status::Released);
      CALCFIELDS("Completely Picked");
      IF "Completely Picked" THEN
        ERROR(Text008);

      ProdOrderCompLine.RESET;
      ProdOrderCompLine.SETRANGE(Status,Status);
      ProdOrderCompLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderCompLine.SETFILTER(
        "Flushing Method",'%1|%2|%3',
        ProdOrderCompLine."Flushing Method"::Manual,
        ProdOrderCompLine."Flushing Method"::"Pick + Forward",
        ProdOrderCompLine."Flushing Method"::"Pick + Backward");
      ProdOrderCompLine.SETRANGE("Planning Level Code",0);
      ProdOrderCompLine.SETFILTER("Expected Quantity",'>0');
      IF ProdOrderCompLine.FIND('-') THEN BEGIN
        CreatePickFromWhseSource.SetProdOrder(Rec);
        CreatePickFromWhseSource.SetHideValidationDialog(HideValidationDialog);
        IF HideValidationDialog THEN
          CreatePickFromWhseSource.Initialize(AssignedUserID,SortingMethod,PrintDocument,DoNotFillQtyToHandle,SetBreakBulkFilter);
        CreatePickFromWhseSource.USEREQUESTPAGE(NOT HideValidationDialog);
        CreatePickFromWhseSource.RUNMODAL;
        CreatePickFromWhseSource.GetResultMessage(2);
        CLEAR(CreatePickFromWhseSource);
      END ELSE
        IF NOT HideValidationDialog THEN
          MESSAGE(Text008);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@7301(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      WhseRequest.SETFILTER(
        "Source Document",'%1|%2',
        WhseRequest."Source Document"::"Prod. Consumption",
        WhseRequest."Source Document"::"Prod. Output");
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      "Bin Code" := '';
      IF "Source Type" <> "Source Type"::Item THEN
        EXIT;

      IF "Location Code" <> '' THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          "Bin Code" := Location."From-Production Bin Code";
      END;
      IF ("Bin Code" = '') AND ("Source No." <> '') THEN
        WMSManagement.GetDefaultBin("Source No.",'',"Location Code","Bin Code");
    END;

    LOCAL PROCEDURE GetLocation@15(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE SetUpdateEndDate@16();
    BEGIN
      UpdateEndDate := TRUE;
    END;

    LOCAL PROCEDURE UpdateStartingEndingTime@31(Direction@1000 : 'Forward,Backward');
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Planning Level Code");
      ProdOrderLine.ASCENDING(Direction = Direction::Backward);
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderLine.SETFILTER("Item No.",'<>%1','');
      ProdOrderLine.SETFILTER("Planning Level Code",'>%1',0);
      IF ProdOrderLine.FIND('-') THEN BEGIN
        CASE Direction OF
          Direction::Forward:
            "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
          Direction::Backward:
            "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
        END;
        MODIFY;
        MultiLevelMessage;
        EXIT;
      END;
      "Due Date" := 0D;
      ProdOrderLine.SETRANGE("Planning Level Code");
      IF ProdOrderLine.FIND('-') THEN
        REPEAT
          CASE Direction OF
            Direction::Forward:
              BEGIN
                ProdOrderLine."Starting Time" := "Starting Time";
                ProdOrderLine."Starting Date" := "Starting Date";
              END;
            Direction::Backward:
              BEGIN
                ProdOrderLine."Ending Time" := "Ending Time";
                ProdOrderLine."Ending Date" := "Ending Date";
              END;
          END;
          ProdOrderLine.MODIFY;
          CalcProdOrder.SetParameter(TRUE);
          CASE Direction OF
            Direction::Forward:
              CalcProdOrder.Recalculate(ProdOrderLine,0,TRUE);
            Direction::Backward:
              CalcProdOrder.Recalculate(ProdOrderLine,1,TRUE);
          END;
          IsHandled := FALSE;
          OnBeforeUpdateProdOrderLineDueDate(ProdOrderLine,IsHandled);
          IF NOT IsHandled THEN
            IF ProdOrderLine."Planning Level Code" > 0 THEN
              ProdOrderLine."Due Date" := ProdOrderLine."Ending Date"
            ELSE
              ProdOrderLine."Due Date" :=
                LeadTimeMgt.PlannedDueDate(
                  ProdOrderLine."Item No.",ProdOrderLine."Location Code",ProdOrderLine."Variant Code",
                  ProdOrderLine."Ending Date",'',2);
          IF "Due Date" = 0D THEN
            "Due Date" := ProdOrderLine."Due Date";
          CASE Direction OF
            Direction::Forward:
              "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
            Direction::Backward:
              "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
          END;
          ProdOrderLine.MODIFY(TRUE);
          ProdOrderLine.CheckEndingDate(CurrFieldNo <> 0);
        UNTIL ProdOrderLine.NEXT = 0
      ELSE
        CASE Direction OF
          Direction::Forward:
            BEGIN
              "Ending Date" := "Starting Date";
              "Ending Time" := "Starting Time";
            END;
          Direction::Backward:
            BEGIN
              "Starting Date" := "Ending Date";
              "Starting Time" := "Ending Time";
            END;
        END;

      AdjustStartEndingDate;
      MODIFY;
    END;

    LOCAL PROCEDURE UpdateEndingDate@17(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      IF ProdOrderLine.FINDSET(TRUE) THEN
        REPEAT
          ProdOrderLine."Due Date" := "Due Date";
          ProdOrderLine.MODIFY;
          CalcProdOrder.SetParameter(TRUE);
          ProdOrderLine."Ending Date" :=
            LeadTimeMgt.PlannedEndingDate(
              ProdOrderLine."Item No.",
              ProdOrderLine."Location Code",
              ProdOrderLine."Variant Code",
              ProdOrderLine."Due Date",
              '',
              2);
          CalcProdOrder.Recalculate(ProdOrderLine,1,TRUE);
          "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
          "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
          ProdOrderLine.MODIFY(TRUE);
          ProdOrderLine.CheckEndingDate(CurrFieldNo <> 0);
        UNTIL ProdOrderLine.NEXT = 0
    END;

    [External]
    PROCEDURE ShowDocDim@18();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      DimMgt.SetTableID(DATABASE::"Production Order"); //**4PS.n
      OldDimSetID := "Dimension Set ID";
      TESTFIELD("No.");
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        IF Status = Status::Finished THEN
          ERROR(Text011);
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE SalesLinesExist@14() : Boolean;
    BEGIN
      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderLine.SETRANGE(Status,Status);
      EXIT(ProdOrderLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
      OldDimSetID@1003 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text010) THEN
        EXIT;

      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.LOCKTABLE;
      IF ProdOrderLine.FIND('-') THEN
        REPEAT
          OldDimSetID := ProdOrderLine."Dimension Set ID";
          NewDimSetID := DimMgt.GetDeltaDimSetID(ProdOrderLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF ProdOrderLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            ProdOrderLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              ProdOrderLine."Dimension Set ID",ProdOrderLine."Shortcut Dimension 1 Code",ProdOrderLine."Shortcut Dimension 2 Code");
            ProdOrderLine.MODIFY;
            ProdOrderLine.UpdateProdOrderCompDim(NewDimSetID,OldDimSetID);
          END;
        UNTIL ProdOrderLine.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnAdjustStartEndingDateOnBeforeSetDueDate@27(VAR ProductionOrder@1000 : Record 5405;VAR ProdOrderLine@1001 : Record 5406;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE InitFromSourceNo@28(SourceDescription@1000 : Text[100];SourceDescription2@1001 : Text[50];RoutingNo@1002 : Code[20];InventoryPostingGroup@1003 : Code[20];GenProdPostingGroup@1004 : Code[20];GenBusPostingGroup@1005 : Code[20];UnitCost@1006 : Decimal);
    BEGIN
      Description := SourceDescription;
      "Description 2" := SourceDescription2;
      "Routing No." := RoutingNo;
      "Inventory Posting Group" := InventoryPostingGroup;
      "Gen. Prod. Posting Group" := GenProdPostingGroup;
      "Gen. Bus. Posting Group" := GenBusPostingGroup;
      "Unit Cost" := UnitCost;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR ProductionOrder@1000 : Record 5405;CallingFieldNo@1001 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDelete@30(VAR ProductionOrder@1000 : Record 5405;VAR RefreshOrder@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateDateTime@25(VAR ProductionOrder@1000 : Record 5405;VAR xProductionOrder@1002 : Record 5405;CallingFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAssignItemNo@20(VAR ProdOrder@1000 : Record 5405;xProdOrder@1001 : Record 5405;VAR Item@1002 : Record 27;CallingFieldNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAssignFamily@21(VAR ProdOrder@1003 : Record 5405;xProdOrder@1002 : Record 5405;VAR Family@1001 : Record 99000773;CallingFieldNo@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAssignSalesHeader@22(VAR ProdOrder@1003 : Record 5405;xProdOrder@1002 : Record 5405;VAR SalesHeader@1001 : Record 36;CallingFieldNo@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDeleteFnshdProdOrderRelations@24(VAR ProdOrder@1000 : Record 5405);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDeleteRelations@23(VAR ProdOrder@1000 : Record 5405);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMultiLevelMessage@19(VAR IsHandled@1000 : Boolean;VAR ProductionOrder@1001 : Record 5405;VAR xProductionOrder@1002 : Record 5405;CurrentFieldNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateProdOrderLineDueDate@26(VAR ProdOrderLine@1000 : Record 5406;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Shortcut Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Production Order");
      IF Dimension1Code <> '' THEN
        "Shortcut Dimension 1 Code" := Dimension1Code;

      IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Shortcut Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100528500 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(5405) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 5405');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Production Order", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    BEGIN
    END.
  }
}

