OBJECT Table 11071773 SUP Production
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServiceOrder@1100525000 : Record 11012823;
               SUPProduction@1100528600 : Record 11071773;
             BEGIN
               IF ServiceOrder.GET("Service Order No.") THEN BEGIN
                 ServiceOrder.CheckStatus(1);
                 ServiceOrder.TESTFIELD("Unit Price Status", ServiceOrder."Unit Price Status"::"Production Recording");
               END;

               IF "Seq. No." = 0 THEN BEGIN
                 SUPProduction.SETRANGE("Service Order No.", "Service Order No.");
                 IF SUPProduction.FINDLAST THEN
                   "Seq. No." := SUPProduction."Seq. No.";
                 "Seq. No." += 1;
               END;
               IF "Production Date" = 0D THEN
                 VALIDATE("Production Date", TODAY);
               IF "Production Time" = 0T THEN
                 VALIDATE("Production Time", TIME);
             END;

    OnModify=VAR
               ServiceOrder@1100525000 : Record 11012823;
             BEGIN
               IF ServiceOrder.GET("Service Order No.") THEN
                 ServiceOrder.CheckStatus(1);
             END;

    OnDelete=VAR
               SUPProductionLine@1100528600 : Record 11071774;
             BEGIN
               SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
               SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
               SUPProductionLine.DELETEALL(TRUE);

               RecalcNextProdLineFields;
             END;

    OnRename=BEGIN
               ERROR(Text000);
             END;

    CaptionML=[ENU=SUP Production;
               SVE=Enhetspris f”r produktionsregistrering];
    LookupPageID=Page11125302;
    DrillDownPageID=Page11125302;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr];
                                                   NotBlank=Yes }
    { 15  ;   ;Seq. No.            ;Integer       ;CaptionML=[ENU=Seq. No.;
                                                              NOR=Sekv. nr;
                                                              SVE=Sekv. nr];
                                                   Editable=No }
    { 20  ;   ;Production Date     ;Date          ;OnValidate=VAR
                                                                SUPProductionLine@1100409000 : Record 11071774;
                                                              BEGIN
                                                                SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
                                                                SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
                                                                SUPProductionLine.MODIFYALL("Production Date", "Production Date", TRUE);
                                                                IF xRec."Production Date" <> "Production Date" THEN
                                                                  UpdateProductionDateTime;
                                                              END;

                                                   CaptionML=[ENU=Production Date;
                                                              NOR=Produksjonsdato;
                                                              SVE=Produktionsdatum];
                                                   NotBlank=Yes }
    { 22  ;   ;Production Time     ;Time          ;OnValidate=VAR
                                                                SUPProductionLine@1100528600 : Record 11071774;
                                                              BEGIN
                                                                SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
                                                                SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
                                                                SUPProductionLine.MODIFYALL("Production Time", "Production Time", TRUE);
                                                                IF xRec."Production Time" <> "Production Time" THEN
                                                                  UpdateProductionDateTime;
                                                              END;

                                                   CaptionML=ENU=Production Time }
    { 25  ;   ;Production Date/Time;DateTime      ;OnValidate=VAR
                                                                SUPProductionLine@1100528600 : Record 11071774;
                                                              BEGIN
                                                                SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
                                                                SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
                                                                SUPProductionLine.MODIFYALL("Production Date/Time", "Production Date/Time", TRUE);
                                                                IF xRec."Production Date/Time" <> "Production Date/Time" THEN
                                                                  IF MODIFY THEN
                                                                    RecalcAllProdLineFields;
                                                              END;

                                                   CaptionML=ENU=Production Date/Time;
                                                   Editable=No }
    { 30  ;   ;Remarks             ;Text250       ;CaptionML=[ENU=Remarks;
                                                              NOR=Merknader;
                                                              SVE=Anm„rkningar] }
    { 40  ;   ;Status              ;Option        ;OnValidate=VAR
                                                                SUPProductionLine@1100525000 : Record 11071774;
                                                                PBInstallmentOverview@1100525001 : Record 11072317;
                                                              BEGIN
                                                                IF Status <> xRec.Status THEN BEGIN
                                                                  IF (Status = Status::Offered) OR ((Status = Status::Approved)) THEN BEGIN
                                                                    SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
                                                                    SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
                                                                    SUPProductionLine.SETFILTER("Alternative Unit Price Code", '=%1', '');
                                                                    IF SUPProductionLine.FINDFIRST THEN
                                                                      SUPProductionLine.TESTFIELD("Alternative Unit Price Code");
                                                                  END;
                                                                  IF Status = Status::Proposal THEN BEGIN
                                                                    SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
                                                                    SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
                                                                    SUPProductionLine.SETFILTER("Installment Overview No.", '<>%1', '');
                                                                    IF SUPProductionLine.FINDFIRST THEN
                                                                      IF PBInstallmentOverview.GET(SUPProductionLine."Installment Overview No.") THEN
                                                                        PBInstallmentOverview.TESTFIELD(Status, PBInstallmentOverview.Status::Open);
                                                                  END;
                                                                  IF xRec.Status = xRec.Status::Approved THEN
                                                                    CheckCostPlusEntriesCreated;
                                                                  IF (xRec.Status = xRec.Status::Approved) OR (Status = Status::Approved) THEN BEGIN
                                                                    IF MODIFY THEN
                                                                      UpdateServiceOrderBudgetByProductionQuantity;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Proposal,Offered,Approved,Expired,Rejected;
                                                                    SVE=F”rslag,Erbjuden,Godk„nd,F”rfallen,Nekad];
                                                   OptionString=Proposal,Offered,Approved,Expired,Rejected }
    { 50  ;   ;Total Production Value;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("SUP Production Line"."Production Value" WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                                   Production Date/Time=FIELD(Production Date/Time),
                                                                                                                   Production Seq. No.=FIELD(Seq. No.)));
                                                   CaptionML=[ENU=Total Production Value;
                                                              NOR=Total Produksjonsverdi;
                                                              SVE=Totalt produktionsv„rde];
                                                   DecimalPlaces=2:2;
                                                   Editable=No }
    { 100 ;   ;Sent To Dsp         ;DateTime      ;CaptionML=ENU=Sent To DSP;
                                                   Editable=No }
    { 110 ;   ;Processed By Dsp    ;DateTime      ;CaptionML=ENU=Processed By DSP;
                                                   Editable=No }
    { 120 ;   ;Dsp Assignment Id OLD;Text50       ;Editable=No }
    { 130 ;   ;Dsp Assignment Id   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object."Dsp Assignment Id" WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=DSP Assignment ID;
                                                   Editable=No }
    { 330 ;   ;Object No.          ;Code20        ;TableRelation="Service Order Object"."Object No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   CaptionML=[ENU=Object No.;
                                                              NOR=Objektnr.;
                                                              SVE=Objektnr];
                                                   Editable=No }
    { 550 ;   ;Xml Message         ;BLOB          ;CaptionML=ENU=XML Message }
    { 560 ;   ;Service Order Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Description WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Service Order Description;
                                                              SVE=Serviceorder beskrivning];
                                                   Editable=No }
    { 570 ;   ;Service Contract No.;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order"."Service Contract No." WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Service Contract No.;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 580 ;   ;Service Contract Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract.Description WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Service Contract Description;
                                                              SVE=Servicekontraktsbeskrivning];
                                                   Editable=No }
    { 590 ;   ;Service Location No.;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order"."Service Location No." WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Service Location No.;
                                                              SVE=Serviceplatsnr];
                                                   Editable=No }
    { 600 ;   ;Service Location Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Description WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=Service Location Description;
                                                              SVE=Serviceplatsbeskrivning];
                                                   Editable=No }
    { 610 ;   ;Price Book Code     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Extension"."Price Book Code" WHERE (Service Order No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Price Book Code;
                                                              SVE=Enhetspriskod];
                                                   Editable=No }
    { 620 ;   ;Price Book Index Date;Date         ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Extension"."Price Book Index Date" WHERE (Service Order No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Price Book Index Date;
                                                              SVE=Indexdatum f”r enhetspris];
                                                   Editable=No }
    { 630 ;   ;Address             ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Address WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Execution Address;
                                                   Editable=No }
    { 640 ;   ;City                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".City WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=City;
                                                              SVE=Ort];
                                                   Editable=No }
    { 650 ;   ;Post Code           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order"."Post Code" WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Post Code;
                                                              SVE=Postnr];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Order No.,Seq. No.              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CanNotBeDspTxt@1100528500 : TextConst 'ENU=%1 %2 has %3 %4. Use the DSP Function for this Action.';
      Text000@1100528600 : TextConst 'ENU=Rename is not allowed.;NOR=Gi nytt navn ikke tillatt;SVE=Att ge nytt namn „r inte till†tet.';
      Text001@1100528602 : TextConst 'ENU=There are already %1s present, %2 can''t be changed.;NOR=Det er allerede %1er tilstede, %2 kan ikke endres.;SVE=%1s finns redan, %2 kan inte „ndras.';
      Text002@1100528601 : TextConst 'ENU=Cost Plus Entries could be incorrect and needs to be changed for the following date(s):\%1;NOR=Selvkosttransaksjoner kan v‘re feil, og m† endres for f›lgende dato(er)::\%1';

    PROCEDURE CreateProdRecordingLines@1100528600();
    VAR
      ServiceOrder@1100528500 : Record 11012823;
    BEGIN
      ServiceOrder.GET("Service Order No.");
      IF (ServiceOrder.Origin = ServiceOrder.Origin::DSP) THEN
        ERROR(CanNotBeDspTxt, ServiceOrder.TABLECAPTION, "Service Order No.", ServiceOrder.FIELDCAPTION(Origin), ServiceOrder.Origin::DSP);

      CreateProdRecordingLines2('');
    END;

    PROCEDURE CreateProdRecordingLines2@1100528303(ObjectNo@1100528300 : Code[20]);
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderExtension@1100528601 : Record 11071727;
      SUPProductionLine@1100528603 : Record 11071774;
      SUPRecordingLine@1100528602 : Record 11071772;
      LineNo@1100528604 : Integer;
    BEGIN
      TESTFIELD("Seq. No.");
      TESTFIELD("Production Date");
      ServiceOrder.GET("Service Order No.");
      ServiceOrderExtension.GetServOrderExtension("Service Order No.");

      SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPRecordingLine.SETFILTER("Unit Price Type", '<>%1', SUPRecordingLine."Unit Price Type"::Administrative);
      IF (ObjectNo <> '') THEN
        SUPRecordingLine.SETRANGE("Object No."  , ObjectNo);
      IF NOT SUPRecordingLine.FINDSET THEN
        EXIT;

      SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
      IF SUPProductionLine.FINDLAST THEN
        LineNo := SUPProductionLine."Line No.";

      REPEAT
        SUPProductionLine.SETRANGE("Production Date", "Production Date");
        SUPProductionLine.SETRANGE("Recording Line No.", SUPRecordingLine."Line No.");

        IF SUPProductionLine.ISEMPTY THEN BEGIN
          SUPProductionLine.INIT;
          SUPProductionLine."Service Order No." := "Service Order No.";
          SUPProductionLine."Production Seq. No." := "Seq. No.";
          SUPProductionLine."Production Date" := "Production Date";
          SUPProductionLine."Production Time" := "Production Time";
          SUPProductionLine."Production Date/Time" := "Production Date/Time";
          SUPProductionLine."Price Book Type" := ServiceOrder."Price Book Type";
          SUPProductionLine."Price Book Code" := ServiceOrderExtension."Price Book Code";
          SUPProductionLine."Index Date" := ServiceOrderExtension."Price Book Index Date";
          SUPProductionLine.Room := SUPRecordingLine.Room;
          SUPProductionLine."Object No." := ObjectNo;
          LineNo += 10000;
          SUPProductionLine."Line No." := LineNo;
          SUPProductionLine."Sub-part of" := SUPRecordingLine."Sub-part of";
          SUPProductionLine."Unit Price Code" := SUPRecordingLine."Unit Price Code";
          SUPProductionLine."Alternative Unit Price Code" := SUPRecordingLine."Alternative Unit Price Code";
          SUPProductionLine.Description := SUPRecordingLine.Description;
          SUPProductionLine."Description 2" := SUPRecordingLine."Description 2";
          SUPProductionLine."Description 3" := SUPRecordingLine."Description 3";
          SUPProductionLine."Unit of Measure" := SUPRecordingLine."Unit of Measure";
          SUPProductionLine."Unit Price" := SUPRecordingLine."Unit Price";
          SUPProductionLine."VAT Prod. Posting Group" := SUPRecordingLine."VAT Prod. Posting Group";
          SUPProductionLine."Recording Line No." := SUPRecordingLine."Line No.";
          IF SUPProductionLine.INSERT(TRUE) THEN BEGIN
            SUPProductionLine.SETFILTER("Prev. Prod. Date/Time Filter", '<%1', "Production Date/Time");
            SUPProductionLine.SETFILTER("SUP Production Status", '<>%1', SUPProductionLine."SUP Production Status"::Expired);
            SUPProductionLine.CALCFIELDS("Previous Prod. Cumulative");
            SUPProductionLine.VALIDATE("Production Cumulative", SUPProductionLine."Previous Prod. Cumulative");
            SUPProductionLine.Comment := SUPRecordingLine.Comment;
            SUPProductionLine.Part := SUPRecordingLine.Part;
            SUPProductionLine.MODIFY(TRUE);
          END;
        END;
      UNTIL SUPRecordingLine.NEXT = 0;
    END;

    PROCEDURE CreateCostPlusEntries@1100528601();
    VAR
      ServiceUnitPriceManagement@1100528602 : Codeunit 11012846;
    BEGIN
      ServiceUnitPriceManagement.GenerateCostPlusEntries(Rec);
    END;

    PROCEDURE CheckCostPlusEntriesCreated@1100528603();
    VAR
      SUPProductionLine@1100528600 : Record 11071774;
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
    BEGIN
      SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
      SUPProductionLine.SETRANGE("Cost Plus Entries Created", TRUE);
      IF NOT SUPProductionLine.ISEMPTY THEN
        ERROR(Text001, ServiceOrderCostPlusEntry.TABLECAPTION, FIELDCAPTION(Status));
    END;

    PROCEDURE GetPrevUnitPriceProdRecording@1100528701(VAR IOSUPProduction@1100528700 : Record 11071773) : Boolean;
    BEGIN
      IOSUPProduction.SETRANGE("Service Order No.", "Service Order No.");
      IOSUPProduction.SETFILTER("Production Date/Time", '<%1', "Production Date/Time");
      EXIT(IOSUPProduction.FINDLAST);
    END;

    PROCEDURE GetNextUnitPriceProdRecording@1100528702(VAR IOSUPProduction@1100528700 : Record 11071773) : Boolean;
    BEGIN
      IOSUPProduction.SETRANGE("Service Order No.", "Service Order No.");
      IOSUPProduction.SETFILTER("Production Date/Time", '>%1', "Production Date/Time");
      EXIT(IOSUPProduction.FINDFIRST);
    END;

    PROCEDURE CopyRecordingToProduction@1100528704();
    VAR
      ServiceOrder@1100528500 : Record 11012823;
      SUPProductionLine@1100528700 : Record 11071774;
      Prod@1100528701 : Decimal;
    BEGIN
      ServiceOrder.GET("Service Order No.");

      SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPProductionLine.SETRANGE("Production Date/Time", "Production Date/Time");
      IF ("Object No." <> '') THEN
        SUPProductionLine.SETRANGE("Object No.", "Object No.");
      IF SUPProductionLine.FINDSET(TRUE) THEN
        REPEAT
          SUPProductionLine.CALCFIELDS("Recording Quantity");
          Prod := SUPProductionLine."Recording Quantity" - SUPProductionLine.GetPreviousProdCumulative;
          IF Prod < 0 THEN
            Prod := 0;
          SUPProductionLine.VALIDATE(Production, Prod);
          SUPProductionLine.MODIFY(TRUE);
        UNTIL SUPProductionLine.NEXT = 0;
    END;

    PROCEDURE RecalcAllProdLineFields@1100528605();
    VAR
      SUPProductionLine@1100528301 : Record 11071774;
      MessageStr@1100528600 : Text;
    BEGIN
      SUPProductionLine.SETCURRENTKEY("Service Order No.", "Production Date/Time");
      SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPProductionLine.SETFILTER("Production Date/Time", '>%1', "Production Date/Time");
      IF SUPProductionLine.FINDSET(TRUE) THEN BEGIN
        SUPProductionLine.SETFILTER("Prev. Prod. Date/Time Filter", '<%1', SUPProductionLine."Production Date/Time");
      //  SUPProductionLine.CALCFIELDS("Previous Production Date");
        REPEAT
          SUPProductionLine.VALIDATE(Production);
          IF NOT SUPProductionLine.CalculateFields THEN BEGIN
            IF SUPProductionLine."Cost Plus Entries Created" THEN BEGIN
              IF MessageStr <> '' THEN
                MessageStr += ', ';
              MessageStr := FORMAT(SUPProductionLine."Production Date/Time")
            END;
          END;
          SUPProductionLine.MODIFY(TRUE);
        UNTIL SUPProductionLine.NEXT = 0;
      END;
      IF (MessageStr <> '') AND GUIALLOWED THEN
        MESSAGE(Text002, MessageStr);
    END;

    PROCEDURE RecalcNextProdLineFields@1100528300();
    VAR
      SUPProductionLine@1100528301 : Record 11071774;
      NextProdDateTime@1100528303 : DateTime;
    BEGIN
      NextProdDateTime := GetNextUnitPriceProdRecDateTime;

      IF NextProdDateTime <> 0DT THEN BEGIN
        SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
        SUPProductionLine.SETRANGE("Production Date/Time", NextProdDateTime);
        IF SUPProductionLine.FINDSET(TRUE) THEN BEGIN
          SUPProductionLine.SETFILTER("Prev. Prod. Date/Time Filter", '<%1', SUPProductionLine."Production Date/Time");
          SUPProductionLine.CALCFIELDS("Previous Production Date");
          REPEAT
            SUPProductionLine.VALIDATE(Production);
            SUPProductionLine.MODIFY(TRUE);
          UNTIL SUPProductionLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE RecalcPrevProdLineFields@1100528606();
    VAR
      SUPProductionLine@1100528301 : Record 11071774;
      NextProdDateTime@1100528303 : DateTime;
    BEGIN
      NextProdDateTime := GetPrevUnitPriceProdRecDateTime;

      IF NextProdDateTime <> 0DT THEN BEGIN
        SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
        SUPProductionLine.SETRANGE("Production Date/Time", NextProdDateTime);
        IF SUPProductionLine.FINDSET(TRUE) THEN BEGIN
          SUPProductionLine.SETFILTER("Prev. Prod. Date/Time Filter", '<%1', SUPProductionLine."Production Date/Time");
          SUPProductionLine.CALCFIELDS("Previous Production Date");
          REPEAT
            SUPProductionLine.VALIDATE(Production);
            SUPProductionLine.MODIFY(TRUE);
          UNTIL SUPProductionLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ResetSentToDsp@1100528305();
    BEGIN
      "Sent To Dsp" := 0DT;
      MODIFY;
    END;

    PROCEDURE ShowXmlMessage@1100528306();
    VAR
      TempXMLBuffer@1100528302 : TEMPORARY Record 1235;
      XMLViewer4PS@1100528301 : Page 11129908;
      IStream@1100528300 : InStream;
    BEGIN
      IF (NOT "Xml Message".HASVALUE) THEN
        EXIT;

      CALCFIELDS("Xml Message");
      "Xml Message".CREATEINSTREAM(IStream);
      TempXMLBuffer.Load(IStream);
      XMLViewer4PS.SetTempTable(TempXMLBuffer);
      XMLViewer4PS.SetShowAttributes(FALSE);
      XMLViewer4PS.RUNMODAL;
    END;

    PROCEDURE GetPrevUnitPriceProdRecDateTime@1100528301() : DateTime;
    VAR
      SUPProduction@1100528300 : Record 11071773;
    BEGIN
      SUPProduction.SETRANGE("Service Order No.", "Service Order No.");
      SUPProduction.SETFILTER("Production Date/Time", '<%1', "Production Date/Time");
      IF SUPProduction.FINDLAST THEN
        EXIT(SUPProduction."Production Date/Time");
    END;

    PROCEDURE GetNextUnitPriceProdRecDateTime@1100528302() : DateTime;
    VAR
      SUPProduction@1100528300 : Record 11071773;
    BEGIN
      SUPProduction.SETRANGE("Service Order No.", "Service Order No.");
      SUPProduction.SETFILTER("Production Date/Time", '>%1', "Production Date/Time");
      IF SUPProduction.FINDFIRST THEN
        EXIT(SUPProduction."Production Date/Time");
    END;

    PROCEDURE UpdateProductionDateTime@1100528602();
    BEGIN
      IF "Production Date" <> 0D THEN
        VALIDATE("Production Date/Time", CREATEDATETIME("Production Date", "Production Time"))
      ELSE
        VALIDATE("Production Date/Time", 0DT);
    END;

    PROCEDURE GetTotalInvoicedLCY@1100528510() TotalInvoicedLCY : Decimal;
    VAR
      ServiceOrderCostPlusEntry@1100528500 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderCostPlusEntry.SETRANGE("Production Seq. No.", "Seq. No.");
      ServiceOrderCostPlusEntry.SETAUTOCALCFIELDS("Invoiced Price (LCY)");
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          TotalInvoicedLCY += ServiceOrderCostPlusEntry."Invoiced Price (LCY)";
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
    END;

    PROCEDURE SetDspStatusFields@1100528307(StatusIn@1100528300 : Option;SendDateTime@1100528302 : DateTime;ProcessDateTime@1100528303 : DateTime);
    BEGIN
      "Sent To Dsp" := SendDateTime;
      "Processed By Dsp" := ProcessDateTime;
      Status := StatusIn;
      MODIFY;
    END;

    LOCAL PROCEDURE "---Locals---"@1100528304();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateServiceOrderBudgetByProductionQuantity@1100528604();
    VAR
      ServiceSetup@1100528607 : Record 11012800;
      ServiceOrder@1100528606 : Record 11012823;
      SUPProductionLine@1100528603 : Record 11071774;
      SUPRecordingLine@1100528601 : Record 11071772;
      SUPInternalBudgetLine@1100528602 : Record 11071770;
      ServiceOrderBudgetLine@1100528600 : Record 11012875;
      ServiceUnitPriceManagement@1100528605 : Codeunit 11012846;
      LastLineNo@1100528604 : Integer;
    BEGIN
      ServiceSetup.GET;
      IF NOT ServiceSetup."Update Budget by Prod. Quan." THEN
        EXIT;
      ServiceOrder.GET("Service Order No.");
      IF NOT (ServiceOrder."Settlement Method" IN
        [ServiceOrder."Settlement Method"::"Collective Installment Overview", ServiceOrder."Settlement Method"::"Installment Overview by Service Order"])
      THEN
        EXIT;
      ServiceOrderBudgetLine.LOCKTABLE;
      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      IF ServiceOrderBudgetLine.FINDLAST THEN
        LastLineNo := ServiceOrderBudgetLine."Line No.";
      SUPProductionLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
      IF SUPProductionLine.FINDSET THEN
        REPEAT
          SUPRecordingLine.SETRANGE("Service Order No.", SUPProductionLine."Service Order No.");
          SUPRecordingLine.SETRANGE("Line No.", SUPProductionLine."Recording Line No.");
          IF SUPRecordingLine.FINDSET THEN
            REPEAT
              SUPInternalBudgetLine.SETRANGE("Price Book Code", SUPRecordingLine."Price Book Code");
              SUPInternalBudgetLine.SETRANGE("Index Date", SUPRecordingLine."Index Date");
              SUPInternalBudgetLine.SETRANGE("Unit Price Code", SUPRecordingLine."Unit Price Code");
              IF SUPInternalBudgetLine.FINDSET THEN
                REPEAT
                  ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
                  ServiceOrderBudgetLine.SETRANGE("Service Order No.", "Service Order No.");
                  ServiceOrderBudgetLine.SETRANGE("Unit Price Budget Line No.", SUPInternalBudgetLine."Line No.");
                  ServiceOrderBudgetLine.SETRANGE("Recording Line No.", SUPRecordingLine."Line No.");
                  IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
                    ServiceOrderBudgetLine.DELETEALL(TRUE);

                  SUPRecordingLine.CALCFIELDS("Prod. Rec. Quantity (Approved)");
                  IF SUPRecordingLine."Prod. Rec. Quantity (Approved)" <> 0 THEN
                    ServiceUnitPriceManagement.CreateSOBudgetLineByInternalBudgetLine(
                      ServiceOrder."No.", ServiceOrder."Service Contract No.", SUPRecordingLine, SUPInternalBudgetLine, SUPRecordingLine."Prod. Rec. Quantity (Approved)", LastLineNo);
                UNTIL SUPInternalBudgetLine.NEXT = 0;
            UNTIL SUPRecordingLine.NEXT = 0;
        UNTIL SUPProductionLine.NEXT = 0;
    END;

    PROCEDURE GetSumTotalProductionValue@1100528500() TotalProductionValue : Decimal;
    VAR
      SUPProductionLine@1100528500 : Record 11071774;
    BEGIN
      SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPProductionLine.SETRANGE("Production Seq. No.", "Seq. No.");
      SUPProductionLine.SETFILTER("Production Date/Time Filter", '<=%1', "Production Date/Time");
      IF SUPProductionLine.FINDFIRST THEN
        REPEAT
          SUPProductionLine.CALCFIELDS("Production Value Cumulative");
          TotalProductionValue += SUPProductionLine."Production Value Cumulative";
        UNTIL SUPProductionLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

