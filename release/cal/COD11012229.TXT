OBJECT Codeunit 11012229 Estimate Update Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 311=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text010@1210190003 : TextConst 'ENU=Estimatepart  #1################# @2@@@@@@@@@@@@@;NOR=Kalkyledel  #1################# @2@@@@@@@@@@@@@;SVE=Kalkyldel  #1################# @2@@@@@@@@@@@@@';
      Text011@1210190002 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@;NOR=Opptatt med       #1################# @2@@@@@@@@@@@@@;SVE=Upptagen med    #1################# @2@@@@@@@@@@@@@';
      Text012@1210190001 : TextConst 'ENU=Estimate Lines;NOR=Kalkylerader;SVE=Kalkylrader';
      Text013@1210190000 : TextConst 'ENU=Recipe Lines;NOR=Malrader;SVE=Mallrader';
      EstSetup@1210190005 : Record 11012150;
      EstRec@1210190004 : Record 11012151;
      SubEstRec@1210190016 : Record 11072074;
      EstPartRec@1210190015 : Record 11072073;
      EstLineRec@1210190012 : Record 11072072;
      RcpRec@1210190039 : Record 11020581;
      RcpLineRec@1210190011 : Record 11072075;
      LastRcpLineRec@1210190007 : Record 11072075;
      EstCodeRec@1210190031 : Record 11229772;
      QuanSheetRec@1210190030 : Record 11012186;
      QuanModelRec@1210190037 : Record 11012197;
      QuanRelationRec@1100409002 : Record 11020463;
      ChrgRec@1210190026 : Record 11229771;
      TextRec@1100409000 : Record 11020595;
      NormRec@1210190014 : Record 11012163;
      EstRateRec@1210190013 : Record 11012160;
      PurchLineRec@1210190019 : Record 39;
      PlantTypeRec@1100485004 : Record 11012551;
      LastProcLine@1210190006 : Text[250];
      Status@1210190010 : Dialog;
      maxrec@1210190009 : Integer;
      currec@1210190008 : Integer;
      TmpEstRec@1100485003 : TEMPORARY Record 11012151;
      TmpEstLineRec@1210190021 : TEMPORARY Record 11072072;
      TmpRcpLineRec@1210190020 : TEMPORARY Record 11072075;
      Text014@1210190022 : TextConst 'ENU=Surcharge Lines;NOR=Tilleggsgebyrsrader;SVE=Till„ggsavgiftsrader';
      Text015@1210190034 : TextConst 'ENU=Quantity Sheet;NOR=Antallspesifikasjon;SVE=Antalsspecifikation';
      Text016@1210190035 : TextConst 'ENU=Codes;NOR=Koder;SVE=Koder';
      TmpPartLineRec@1100528501 : TEMPORARY Record 11072076;
      TmpEstCodeRec@1210190033 : TEMPORARY Record 11229772;
      TmpQuanSheetRec@1210190032 : TEMPORARY Record 11012186;
      TmpQuanModelRec@1210190038 : TEMPORARY Record 11012197;
      TmpQuanRelationRec@1100409003 : TEMPORARY Record 11020463;
      TmpChrgRec@1210190023 : TEMPORARY Record 11229771;
      Text022@1210190028 : TextConst 'ENU=Condition: Estimate copied. Reshuffle Estimate Lines ?;NOR=Tilstand: Kalkyle kopiert. Vil du stokke om kalkylerader?;SVE=Villkor: Kalkyl kopierad. Vill du blanda om kalkylrader?';
      Text022a@1100529500 : TextConst 'ENU=Condition: Recipe copied. Reshuffle Recipe Lines ?';
      Text023@1210190029 : TextConst 'ENU=Initialize Adjustment Factor,Calculate Cumulative Adjustment Factor;NOR=Initier Justeringsfaktor, Beregn Akkumulert Justeringsfaktor;SVE=Initiera justeringsfaktor,ber„kna ackumulerad justeringsfaktor';
      TmpTextRec@1100409001 : TEMPORARY Record 11020595;
      TmpRelationRec@1210190025 : TEMPORARY Record 11072075;
      DimMgt@1100485001 : Codeunit 408;
      DimValRec@1100485000 : Record 349;
      Text004@1100485002 : TextConst 'ENU=No Vendors modified within Selection.;NOR=Ingen leverand›rer er endret i utvalget.;SVE=Inga leverant”rer har „ndrats i urvalet.';
      gvUseDialog@1210190024 : Boolean;
      "--EVRY--"@1004 : TextConst;
      EVRY001@1003 : TextConst 'ENU=Quick Estimate not allowed, %1 %2 has more than one %3s;NOR=Hurtigkalkyle ikke tillatt, %1 %2 har flere enn ‚n %3;SVE=Snabbestimat „r inte till†tet, %1 %2 har fler „n ett %3';
      EVRY002@1002 : TextConst 'ENU=Creating Project;NOR=Oppretter prosjekt;SVE=Skapar projekt';
      EVRY003@1001 : TextConst 'ENU=Updating Quick Estimate and adding Project Principal;NOR=Oppdaterer overslag og oppretter prosjekt Kunde;SVE=Uppdaterar snabbestimat och skapar projektkund';
      EVRY004@1000 : TextConst 'ENU=Updating Project Budget with Quick Estimate Lines;NOR=Oppdaterer prosjektbudsjett med overslagsrader;SVE=Uppdaterar projektbudget med snabbestimatsrader';
      SkipFixed@1100525000 : Boolean;

    PROCEDURE DeleteZeroLines@1(VAR lvEstLineRec@1100485003 : Record 11072072;DeleteEmptyPart@1100485002 : Boolean;EmptyRecipe@1100485004 : 'ZeroHeader,ZeroLines';UseDialog@1100409000 : Boolean);
    VAR
      RecordDeleted@1100525000 : Boolean;
      CommitEachRcds@1210190000 : Integer;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);
      EstSetup.GET;

      ClearTmpTables;
      IF UseDialog THEN
        Status.OPEN(Text010);

      CommitEachRcds := 10;
      //remove zerolines in recipe
      RcpLineRec.SETRANGE(Quantity, 0);
      RcpLineRec.SETRANGE("Quantity (Sales)", 0);  //C014296
      IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        RecordDeleted := FALSE;
        //C030221.sn
        REPEAT
          TmpRcpLineRec := RcpLineRec;
          TmpRcpLineRec.INSERT;
        UNTIL RcpLineRec.NEXT = 0;
        IF TmpRcpLineRec.FINDSET THEN;
        //C030221.en
        REPEAT
          RcpLineRec := TmpRcpLineRec;  //C030221
          currec := currec + 1;
          IF UseDialog THEN BEGIN
            Status.UPDATE(1,RcpLineRec.Part);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
          IF (RcpLineRec.Norm <> 0) OR (RcpLineRec."Net Cost Price" <> 0) OR
             (RcpLineRec."Norm (Sales)" <> 0) OR (RcpLineRec."Net Sales Price" <> 0) THEN BEGIN  //C014296
            CheckEstFixed(RcpLineRec."Estimate No.");
            RcpLineRec.SetFromEstimateLineDelete(TRUE);  //C030221: delete zero-recipeline will not influence total recipe header (skip update estimate line)
            RcpLineRec.DELETE(TRUE);
            RcpLineRec.SetFromEstimateLineDelete(FALSE);
            RecordDeleted := TRUE;
          END;
          IF RecordDeleted AND ((currec MOD CommitEachRcds) = 0) THEN BEGIN
            COMMIT;
            RecordDeleted := FALSE;
          END;
        UNTIL TmpRcpLineRec.NEXT = 0;  //C030221
        TmpRcpLineRec.DELETEALL;  //C030221
      END;
      RcpLineRec.RESET;
      IF RecordDeleted THEN
        COMMIT;

      //remove estimatelines with recipe and no recipelines left, or recipeheader disabled by zero quantities
      EstLineRec.SETFILTER(Recipe, '<>%1', '');
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        RecordDeleted := FALSE;
        //C030221.sn
        REPEAT
          TmpEstLineRec := EstLineRec;
          TmpEstLineRec.INSERT;
        UNTIL EstLineRec.NEXT = 0;
        IF TmpEstLineRec.FINDSET THEN;
        //C030221.en
        REPEAT
          EstLineRec := TmpEstLineRec;  //C030221
          currec := currec + 1;
          IF UseDialog THEN BEGIN
            Status.UPDATE(1,EstLineRec.Part);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
          IF EmptyRecipe = EmptyRecipe::ZeroHeader THEN BEGIN  //C025640
            IF (EstLineRec.Quantity = 0) AND (EstLineRec."Quantity (Sales)" = 0) THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
            END;
          END ELSE BEGIN
            EstLineRec.CALCFIELDS("Recipe Lines Exist");
            IF EstLineRec."Recipe Lines Exist" = FALSE THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
            END;
          END;
          IF RecordDeleted AND ((currec MOD CommitEachRcds) = 0) THEN BEGIN
            COMMIT;
            RecordDeleted := FALSE;
          END;
        UNTIL TmpEstLineRec.NEXT = 0;  //C030221
        TmpEstLineRec.DELETEALL;  //C030221
      END;
      IF RecordDeleted THEN
        COMMIT;

      //remove estimatelines
      EstLineRec.SETFILTER(Recipe, '%1', '');  //C025640
      EstLineRec.SETRANGE(Quantity, 0);
      EstLineRec.SETRANGE("Quantity (Sales)", 0);  //C014296
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        RecordDeleted := FALSE;
        //C030221.sn
        REPEAT
          TmpEstLineRec := EstLineRec;
          TmpEstLineRec.INSERT;
        UNTIL EstLineRec.NEXT = 0;
        IF TmpEstLineRec.FINDSET THEN;
        //C030221.en
        REPEAT
          EstLineRec := TmpEstLineRec;  //C030221
          currec := currec + 1;
          IF UseDialog THEN BEGIN
            Status.UPDATE(1,EstLineRec.Part);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
          IF (EstLineRec.Norm <> 0) OR (EstLineRec."Net Cost Price" <> 0) OR
             (EstLineRec."Norm (Sales)" <> 0) OR (EstLineRec."Net Sales Price" <> 0) THEN BEGIN  //C014296
            EstLineRec.CALCFIELDS(
              "Quantity Model Exist","Quantity Sheet Exist","Quantity Sheet Relation Exist");
            IF NOT EstSetup."Quantity Sheet with Relations" AND
               (EstLineRec."Quantity Model Exist" = FALSE) AND
               (EstLineRec."Quantity Sheet Exist" = FALSE) THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
              IF UseDialog THEN
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
            END;
            IF EstSetup."Quantity Sheet with Relations" AND
               (EstLineRec."Quantity Model Exist" = FALSE) AND
               (EstLineRec."Quantity Sheet Relation Exist" = FALSE) THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
            END;
          END ELSE BEGIN
            //db, 12-10-15: C025640
            //Norm and Price not filled for Recipe Header (only totals per Cost Type)
            //IF (EstLineRec.Recipe <> '') AND (EmptyRecipe = EmptyRecipe::ZeroHeader) THEN BEGIN  //DP00381
            //  CheckEstFixed(EstLineRec."Estimate No.");
            //  EstLineRec.DELETE(TRUE);
            //  RecordDeleted := TRUE;
            //END;
          END;
          IF RecordDeleted AND ((currec MOD CommitEachRcds) = 0) THEN BEGIN
            COMMIT;
            RecordDeleted := FALSE;
          END;
        UNTIL TmpEstLineRec.NEXT = 0;  //C030221
        TmpEstLineRec.DELETEALL;  //C030221
      END;
      IF RecordDeleted THEN
        COMMIT;

      IF DeleteEmptyPart THEN
        CheckEmptyParts(EstLineRec.GETFILTER("Estimate No."), EstLineRec.GETFILTER("Sub-Estimate No."));

      UpdateFromTmp;
      COMMIT;
      IF UseDialog THEN
        Status.CLOSE;
    END;

    PROCEDURE ReshuffleLines@1210190008(CurrEst@1210190000 : Code[20]);
    VAR
      NewEst@1210190004 : Code[20];
      NewEstLine@1210190001 : Integer;
      NewRcpLine@1210190005 : Integer;
      ChrgBln@1210190002 : Boolean;
      PrevPart@1210190003 : Text[100];
      EstimateMgmt@1100525000 : Codeunit 11012232;
      EstLineTotal@1100409000 : Record 11072077;
    BEGIN
      IF NOT CONFIRM(Text022, FALSE) THEN EXIT;

      ClearTmpTables;
      Status.OPEN(Text010);

      NewEst := 'RESHUFFLE_EST_MGT';
      PrevPart := '~';

      EstLineRec.RESET;
      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          IF PrevPart <> EstLineRec."Estimate No." + EstLineRec."Sub-Estimate No." +
                         EstLineRec."Part Group" + EstLineRec.Part THEN BEGIN
            PrevPart := EstLineRec."Estimate No." + EstLineRec."Sub-Estimate No." +
                        EstLineRec."Part Group" + EstLineRec.Part;
            NewEstLine := 0;
          END;
          NewEstLine := NewEstLine + 10000;
          currec := currec + 1;
          Status.UPDATE(1,EstLineRec.Part);
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));

          TmpEstLineRec := EstLineRec;
          TmpEstLineRec."Estimate No." := NewEst;
          EstimateMgmt.SetNewHeadLineNo(NewEstLine);
          EstimateMgmt.ModifyLinkedEstLines(2,EstLineRec,0);
          TmpEstLineRec."Line No." := NewEstLine;
          TmpEstLineRec.INSERT;

          ChrgBln := (EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" ");
          CheckCharge(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, ChrgBln, NewEst, NewEstLine, EstLineRec.Description);

          CheckQuanSheet(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          CheckQuanModel(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          CheckQuanRelation(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          CheckCode(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          CheckText(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          RcpLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
          RcpLineRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
          RcpLineRec.SETRANGE("Part Group", EstLineRec."Part Group");
          RcpLineRec.SETRANGE(Part, EstLineRec.Part);
          RcpLineRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
          IF RcpLineRec.FINDSET THEN BEGIN
            NewRcpLine := 0;
            REPEAT
              NewRcpLine := NewRcpLine + 10000;
              TmpRcpLineRec := RcpLineRec;
              TmpRcpLineRec."Estimate No." := NewEst;
              TmpRcpLineRec."Estimate Line" := NewEstLine;
              TmpRcpLineRec."Line No." := NewRcpLine;
              TmpRcpLineRec.INSERT;

              ChrgBln := (RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" ");
              CheckCharge(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                ChrgBln, NewEst, NewRcpLine, RcpLineRec.Description);

              CheckQuanSheet(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                NewEst, NewRcpLine);

              //CheckQuanModel(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
              //  RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
              //  RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
              //  NewEst, NewRcpLine);  //not implemented for recipe lines

              CheckQuanRelation(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                NewEst, NewRcpLine);  //DP00686

              CheckCode(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                NewEst, NewRcpLine);

              CheckText(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                NewEst, NewRcpLine);  //DP00686
            UNTIL RcpLineRec.NEXT = 0;
          END;
        UNTIL EstLineRec.NEXT = 0;
        EstLineRec.DELETEALL(TRUE);
      END;

      Status.UPDATE(1,Text012);
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstLineRec.COUNT;
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          EstLineRec."Estimate No." := CurrEst;
          EstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpRcpLineRec.COUNT;
        REPEAT
          RcpLineRec.COPY(TmpRcpLineRec);
          RcpLineRec."Estimate No." := CurrEst;
          RcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpRcpLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text014);
      IF TmpChrgRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpChrgRec.COUNT;
        REPEAT
          ChrgRec.COPY(TmpChrgRec);
          ChrgRec."Estimate No." := CurrEst;
          ChrgRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpChrgRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text015);
      IF TmpQuanSheetRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanSheetRec.COUNT;
        REPEAT
          QuanSheetRec.COPY(TmpQuanSheetRec);
          QuanSheetRec."Estimate No." := CurrEst;
          QuanSheetRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanSheetRec.NEXT = 0;
      END;

      Status.UPDATE(1,QuanModelRec.TABLECAPTION);
      IF TmpQuanModelRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanModelRec.COUNT;
        REPEAT
          QuanModelRec.COPY(TmpQuanModelRec);
          QuanModelRec."Estimate No." := CurrEst;
          QuanModelRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanModelRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text016);
      IF TmpEstCodeRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstCodeRec.COUNT;
        REPEAT
          EstCodeRec.COPY(TmpEstCodeRec);
          EstCodeRec."Estimate No." := CurrEst;
          EstCodeRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstCodeRec.NEXT = 0;
      END;

      Status.UPDATE(1,QuanRelationRec.TABLECAPTION);
      IF TmpQuanRelationRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanRelationRec.COUNT;
        REPEAT
          QuanRelationRec.COPY(TmpQuanRelationRec);
          QuanRelationRec."Estimate No." := CurrEst;
          QuanRelationRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanRelationRec.NEXT = 0;
      END;

      Status.UPDATE(1,TextRec.TABLECAPTION);
      IF TmpTextRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpTextRec.COUNT;
        REPEAT
          TextRec.COPY(TmpTextRec);
          TextRec."Estimate No." := CurrEst;
          TextRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpTextRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;

      //db.sn, 14-01-15: C020301
      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstLineTotal.SETRANGE("Estimate No.", EstRec."No.");
          EstLineTotal.DELETEALL;
          UpdateTotals(EstRec."No.", '','',TRUE);
        UNTIL EstRec.NEXT = 0;
      END;
      //db.en, 14-01-15: C020301
    END;

    PROCEDURE ReshuffleBaseRecipeLines@1100529500(CurrGroup@1210190000 : Code[20];CurrRecipe@1100525001 : Code[20];UseLock@1210190006 : Boolean);
    VAR
      NewEst@1210190004 : Code[20];
      NewRcpLine@1210190005 : Integer;
      ChrgBln@1210190002 : Boolean;
      PrevRecipe@1210190003 : Text[100];
      BaseRecipeLine@1100529500 : Record 11020582;
      CentrManagementCU@1100529501 : Codeunit 11012010;
    BEGIN
      //db, 04-11-16
      IF NOT CONFIRM(Text022a, FALSE) THEN EXIT;

      ClearTmpTables;
      Status.OPEN(Text010);

      NewEst := 'RESHUFFLE_STD_RCP';
      PrevRecipe := '~';
      IF CurrGroup <> '' THEN
        BaseRecipeLine.SETRANGE("Recipe Group", CurrGroup);
      IF CurrRecipe <> '' THEN
        BaseRecipeLine.SETRANGE(Recipe, CurrRecipe);
      IF BaseRecipeLine.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := BaseRecipeLine.COUNT;
        TmpRelationRec."Estimate No." := '';
        TmpRelationRec."Sub-Estimate No." := '';
        TmpRelationRec."Part Group" := '';
        TmpRelationRec.Part := '';
        TmpRelationRec."Estimate Line" := 0;
        TmpRelationRec."Recipe Group" := '';
        TmpRelationRec.Recipe := '';
        TmpRelationRec."Line No." := 0;
        TmpRelationRec.INSERT;
        REPEAT
          IF PrevRecipe <> BaseRecipeLine."Recipe Group" + BaseRecipeLine.Recipe THEN BEGIN
            PrevRecipe :=  BaseRecipeLine."Recipe Group" + BaseRecipeLine.Recipe;
            NewRcpLine := 0;
          END;
          NewRcpLine := NewRcpLine + 10000;
          currec := currec + 1;
          Status.UPDATE(1,BaseRecipeLine.Recipe);
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));

          TmpRcpLineRec.TRANSFERFIELDS(BaseRecipeLine);
          TmpRcpLineRec."Estimate No." := NewEst;
          TmpRcpLineRec."Line No." := NewRcpLine;
          TmpRcpLineRec.INSERT;

          ChrgBln := (BaseRecipeLine."Surcharge Type" <> BaseRecipeLine."Surcharge Type"::" ");
          CheckCharge('', '', '', '', 0,
            BaseRecipeLine."Recipe Group", BaseRecipeLine.Recipe, BaseRecipeLine."Line No.",
            ChrgBln, NewEst, NewRcpLine, BaseRecipeLine.Description);

          CheckCode('', '', '', '', 0,
            BaseRecipeLine."Recipe Group", BaseRecipeLine.Recipe, BaseRecipeLine."Line No.",
            NewEst, NewRcpLine);

        UNTIL BaseRecipeLine.NEXT = 0;
        BaseRecipeLine.DELETEALL(TRUE);
      END;

      Status.UPDATE(1,Text013);
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpRcpLineRec.COUNT;
        REPEAT
          BaseRecipeLine.TRANSFERFIELDS(TmpRcpLineRec);
          //BaseRecipeLine."Estimate No." := '';
          BaseRecipeLine.INSERT;
          CentrManagementCU.EditBaseRecipeLine(BaseRecipeLine,1,BaseRecipeLine);  //C033987
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpRcpLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text014);
      IF TmpChrgRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpChrgRec.COUNT;
        REPEAT
          ChrgRec.COPY(TmpChrgRec);
          ChrgRec."Estimate No." := '';
          ChrgRec.INSERT;
          CentrManagementCU.EditRecipeSurchargeNEW(ChrgRec,1,ChrgRec);  //C033987
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpChrgRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text016);
      IF TmpEstCodeRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstCodeRec.COUNT;
        REPEAT
          EstCodeRec.COPY(TmpEstCodeRec);
          EstCodeRec."Estimate No." := '';
          EstCodeRec.INSERT;
          CentrManagementCU.EditRecipeCodeNEW(EstCodeRec,1,EstCodeRec);  //C033987
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstCodeRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReshuffleBasePartLines@1100528500(CurrGroup@1210190000 : Code[20];CurrPart@1100525001 : Code[20];UseLock@1210190006 : Boolean);
    VAR
      NewPartLine@1210190005 : Integer;
      ChrgBln@1210190002 : Boolean;
      PrevPart@1210190003 : Text[100];
      BasePartLine@1100529500 : Record 11072076;
    BEGIN
      //DP02201
      ClearTmpTables;
      Status.OPEN(Text010);

      PrevPart := '~';
      IF CurrGroup <> '' THEN
        BasePartLine.SETRANGE("Part Group", CurrGroup);
      IF CurrPart <> '' THEN
        BasePartLine.SETRANGE(Part, CurrPart);
      IF BasePartLine.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := BasePartLine.COUNT;
        TmpRelationRec."Estimate No." := '';
        TmpRelationRec."Sub-Estimate No." := '';
        TmpRelationRec."Part Group" := '';
        TmpRelationRec.Part := '';
        TmpRelationRec."Estimate Line" := 0;
        TmpRelationRec."Recipe Group" := '';
        TmpRelationRec.Recipe := '';
        TmpRelationRec."Line No." := 0;
        TmpRelationRec.INSERT;
        REPEAT
          IF PrevPart <> BasePartLine."Part Group" + BasePartLine.Part THEN BEGIN
            PrevPart :=  BasePartLine."Part Group" + BasePartLine.Part;
            NewPartLine := 0;
          END;
          NewPartLine := NewPartLine + 10000;
          currec := currec + 1;
          Status.UPDATE(1,BasePartLine.Part);
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));

          TmpPartLineRec.TRANSFERFIELDS(BasePartLine);
          TmpPartLineRec."Line No." := NewPartLine;
          TmpPartLineRec.INSERT;

          ChrgBln := (BasePartLine."Surcharge Type" <> BasePartLine."Surcharge Type"::" ");
          CheckCharge('', '', BasePartLine."Part Group", BasePartLine.Part, BasePartLine."Line No.",
            '', '', 0, ChrgBln, '', NewPartLine, BasePartLine.Description);

          CheckCode('', '', BasePartLine."Part Group", BasePartLine.Part, BasePartLine."Line No.",
            '', '', 0, '', NewPartLine);

        UNTIL BasePartLine.NEXT = 0;
        BasePartLine.DELETEALL(TRUE);
      END;

      Status.UPDATE(1, BasePartLine.TABLECAPTION);
      IF TmpPartLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpPartLineRec.COUNT;
        REPEAT
          BasePartLine.TRANSFERFIELDS(TmpPartLineRec);
          BasePartLine.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpPartLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text014);
      IF TmpChrgRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpChrgRec.COUNT;
        REPEAT
          ChrgRec.COPY(TmpChrgRec);
          ChrgRec."Estimate No." := '';
          ChrgRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpChrgRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text016);
      IF TmpEstCodeRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstCodeRec.COUNT;
        REPEAT
          EstCodeRec.COPY(TmpEstCodeRec);
          EstCodeRec."Estimate No." := '';
          EstCodeRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstCodeRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ResetAdjustmentFactor@1210190006(CurrEst@1210190000 : Code[20];CurrSubEst@1210190006 : Code[20];CurrPartGrp@1210190008 : Code[20];CurrPart@1210190007 : Code[20];CurrLino@1210190009 : Integer;UseDialog@1210190001 : Boolean;UpdateLevel@1210190002 : Integer;IAdjType@1210190011 : Integer;iEstType@1100525002 : Integer);
    VAR
      lvSubEstRec@1210190003 : Record 11072074;
      SubEstimateOriginal@1210190020 : Record 11072074;
      lvEstPartRec@1210190004 : Record 11072073;
      SubEstPartOriginal@1210190005 : Record 11072073;
      EstimateLineOriginal@1210190018 : Record 11072072;
      RecipeLineOriginal@1210190019 : Record 11072075;
      lvSelect@1210190010 : Integer;
      lvDoAdjHours@1210190012 : Boolean;
      lvDoAdjMaterial@1210190013 : Boolean;
      lvDoAdjSubcontr@1210190014 : Boolean;
      lvDoAdjPlant@1210190015 : Boolean;
      lvDoAdjSundry@1100525000 : Boolean;
      lvFound@1210190016 : Boolean;
      lvSurch@1210190017 : Boolean;
      lvSubEst@1100485000 : Code[20];
      BaseRcpLineRec@1100525001 : Record 11020582;
      lvDoAdjHoursSales@1100525003 : Boolean;
    BEGIN
      //UpdateLevel: 0=Estimate; 1=Sub-Estimate; 2=EstimatePart; 3=EstimateLine; 4=RecipeLine; 5=BaseRecipe
      //IAdjType: 0=All; 1=Hours; 2=Material; 3=Subcontracting; 4=Plant; 5=Sundry

      IF (UpdateLevel = 0) OR ((UpdateLevel = 5) AND (CurrLino = 0)) THEN
        lvSelect := STRMENU(Text023, 2)  //1=initialize; 2=construct
      ELSE
        lvSelect := 2;
      IF (lvSelect <> 1) AND (lvSelect <> 2) THEN EXIT;

      IF (iEstType = 0) OR (iEstType = 2) THEN BEGIN  //DP00555 (0=both, 1=cost, 2=sales)
        lvDoAdjHoursSales := ((IAdjType = 1) OR (IAdjType = 0));
      END;
      IF (iEstType = 0) OR (iEstType = 1) THEN BEGIN  //DP00555 (0=both, 1=cost, 2=sales)
        lvDoAdjHours := ((IAdjType = 1) OR (IAdjType = 0));
        lvDoAdjMaterial := ((IAdjType = 2) OR (IAdjType = 0));
        lvDoAdjSubcontr := ((IAdjType = 3) OR (IAdjType = 0));
        lvDoAdjPlant := ((IAdjType = 4) OR (IAdjType = 0));
        lvDoAdjSundry := ((IAdjType = 5) OR (IAdjType = 0));
      END;

      ClearTmpTables;
      IF UseDialog THEN
        Status.OPEN(Text010);

      IF UpdateLevel <= 1 THEN BEGIN
        SubEstRec.RESET;
        SubEstRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          SubEstRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
        IF SubEstRec.FINDSET(FALSE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := SubEstRec.COUNT;
          REPEAT
            SubEstimateOriginal := SubEstRec;
            IF UseDialog THEN
              Status.UPDATE(1,SubEstRec."Sub-Estimate No.");
            currec := currec + 1;
            IF ((lvSelect = 1) AND lvDoAdjHours) OR (SubEstRec."Adjustment Factor Hours" = 0) THEN
              SubEstRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (SubEstRec."Adjustment Factor Material" = 0) THEN
              SubEstRec."Adjustment Factor Material" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSubcontr) OR (SubEstRec."Adjustment Factor Subcontr." = 0) THEN
              SubEstRec."Adjustment Factor Subcontr." := 1;
            IF ((lvSelect = 1) AND lvDoAdjPlant) OR (SubEstRec."Adjustment Factor Plant" = 0) THEN
              SubEstRec."Adjustment Factor Plant" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSundry) OR (SubEstRec."Adjustment Factor Sundry" = 0) THEN
              SubEstRec."Adjustment Factor Sundry" := 1;
            IF ((lvSelect = 1) AND lvDoAdjHoursSales) OR (SubEstRec."Adj. Factor Hours (Sales)" = 0) THEN
              SubEstRec."Adj. Factor Hours (Sales)" := 1;  //DP00555
            //
            SubEstRec."Cum. Adj. Factor Hours" := SubEstRec."Adjustment Factor Hours";
            SubEstRec."Cum. Adj. Factor Material" := SubEstRec."Adjustment Factor Material";
            SubEstRec."Cum. Adj. Factor Subcontr." := SubEstRec."Adjustment Factor Subcontr.";
            SubEstRec."Cum. Adj. Factor Plant" := SubEstRec."Adjustment Factor Plant";
            SubEstRec."Cum. Adj. Factor Sundry" := SubEstRec."Adjustment Factor Sundry";
            SubEstRec."Cum. Adj. Factor Hours (Sales)" := SubEstRec."Adj. Factor Hours (Sales)";  //DP00555
            IF SubEstRec.Level > 0 THEN BEGIN
              lvSubEst := '';
              IF SubEstRec.Level = 1 THEN
                lvSubEst := SubEstRec.Chapter;
              IF SubEstRec.Level = 2 THEN
                lvSubEst := SubEstRec.Paragraph;
              IF lvSubEstRec.GET(SubEstRec."Estimate No.", lvSubEst) THEN BEGIN
                SubEstRec."Cum. Adj. Factor Hours" :=
                  SubEstRec."Cum. Adj. Factor Hours" * lvSubEstRec."Cum. Adj. Factor Hours";
                SubEstRec."Cum. Adj. Factor Material" :=
                  SubEstRec."Cum. Adj. Factor Material" * lvSubEstRec."Cum. Adj. Factor Material";
                SubEstRec."Cum. Adj. Factor Subcontr." :=
                  SubEstRec."Cum. Adj. Factor Subcontr." * lvSubEstRec."Cum. Adj. Factor Subcontr.";
                SubEstRec."Cum. Adj. Factor Plant" :=
                  SubEstRec."Cum. Adj. Factor Plant" * lvSubEstRec."Cum. Adj. Factor Plant";
                SubEstRec."Cum. Adj. Factor Sundry" :=
                  SubEstRec."Cum. Adj. Factor Sundry" * lvSubEstRec."Cum. Adj. Factor Sundry";
                SubEstRec."Cum. Adj. Factor Hours (Sales)" :=
                  SubEstRec."Cum. Adj. Factor Hours (Sales)" * lvSubEstRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
              END;
            END;
            IF FORMAT(SubEstRec) <> FORMAT(SubEstimateOriginal) THEN
              SubEstRec.MODIFY;
            IF UseDialog THEN
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL SubEstRec.NEXT = 0;
        END;
      END;

      IF UpdateLevel <= 2 THEN BEGIN
        EstPartRec.RESET;
        EstPartRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
        EstPartRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          EstPartRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          EstPartRec.SETRANGE("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          EstPartRec.SETRANGE(Part, CurrPart);
        IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := EstPartRec.COUNT;
          REPEAT
            SubEstPartOriginal := EstPartRec;
            IF UseDialog THEN
              Status.UPDATE(1,EstPartRec.Part);
            currec := currec + 1;
            IF ((lvSelect = 1) AND lvDoAdjHours) OR (EstPartRec."Adjustment Factor Hours" = 0) THEN
              EstPartRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (EstPartRec."Adjustment Factor Material" = 0) THEN
              EstPartRec."Adjustment Factor Material" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSubcontr) OR (EstPartRec."Adjustment Factor Subcontr." = 0) THEN
              EstPartRec."Adjustment Factor Subcontr." := 1;
            IF ((lvSelect = 1) AND lvDoAdjPlant) OR (EstPartRec."Adjustment Factor Plant" = 0) THEN
              EstPartRec."Adjustment Factor Plant" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSundry) OR (EstPartRec."Adjustment Factor Sundry" = 0) THEN
              EstPartRec."Adjustment Factor Sundry" := 1;
            IF ((lvSelect = 1) AND lvDoAdjHoursSales) OR (EstPartRec."Adj. Factor Hours (Sales)" = 0) THEN
              EstPartRec."Adj. Factor Hours (Sales)" := 1;  //DP00555
            //
            EstPartRec."Cum. Adj. Factor Hours" := EstPartRec."Adjustment Factor Hours";
            EstPartRec."Cum. Adj. Factor Material" := EstPartRec."Adjustment Factor Material";
            EstPartRec."Cum. Adj. Factor Subcontr." := EstPartRec."Adjustment Factor Subcontr.";
            EstPartRec."Cum. Adj. Factor Plant" := EstPartRec."Adjustment Factor Plant";
            EstPartRec."Cum. Adj. Factor Sundry" := EstPartRec."Adjustment Factor Sundry";
            EstPartRec."Cum. Adj. Factor Hours (Sales)" := EstPartRec."Adj. Factor Hours (Sales)";  //DP00555
            IF EstPartRec.Level = 0 THEN BEGIN
              IF lvSubEstRec.GET(EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.") THEN BEGIN
                EstPartRec."Cum. Adj. Factor Hours" :=
                  EstPartRec."Cum. Adj. Factor Hours" * lvSubEstRec."Cum. Adj. Factor Hours";
                EstPartRec."Cum. Adj. Factor Material" :=
                  EstPartRec."Cum. Adj. Factor Material" * lvSubEstRec."Cum. Adj. Factor Material";
                EstPartRec."Cum. Adj. Factor Subcontr." :=
                  EstPartRec."Cum. Adj. Factor Subcontr." * lvSubEstRec."Cum. Adj. Factor Subcontr.";
                EstPartRec."Cum. Adj. Factor Plant" :=
                  EstPartRec."Cum. Adj. Factor Plant" * lvSubEstRec."Cum. Adj. Factor Plant";
                EstPartRec."Cum. Adj. Factor Sundry" :=
                  EstPartRec."Cum. Adj. Factor Sundry" * lvSubEstRec."Cum. Adj. Factor Sundry";
                EstPartRec."Cum. Adj. Factor Hours (Sales)" :=
                  EstPartRec."Cum. Adj. Factor Hours (Sales)" * lvSubEstRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
              END;
            END;
            IF (EstPartRec.Level = 1) OR (EstPartRec.Level = 2) OR (EstPartRec.Level = 3) THEN BEGIN
              lvFound := FALSE;
              IF EstPartRec.Level = 1 THEN BEGIN
                lvEstPartRec.SETRANGE("Estimate No.", EstPartRec."Estimate No.");
                lvEstPartRec.SETRANGE("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
                lvEstPartRec.SETRANGE("Part Group", EstPartRec."Part Group");
                lvEstPartRec.SETRANGE(Level, 0);
                lvFound := lvEstPartRec.FINDFIRST;
              END;
              IF EstPartRec.Level = 2 THEN
                lvFound := lvEstPartRec.GET(
                  EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.", EstPartRec."Part Group", EstPartRec.Chapter);
              IF EstPartRec.Level = 3 THEN
                lvFound := lvEstPartRec.GET(
                  EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.", EstPartRec."Part Group", EstPartRec.Paragraph);
              IF lvFound THEN BEGIN
                EstPartRec."Cum. Adj. Factor Hours" :=
                  EstPartRec."Cum. Adj. Factor Hours" * lvEstPartRec."Cum. Adj. Factor Hours";
                EstPartRec."Cum. Adj. Factor Material" :=
                  EstPartRec."Cum. Adj. Factor Material" * lvEstPartRec."Cum. Adj. Factor Material";
                EstPartRec."Cum. Adj. Factor Subcontr." :=
                  EstPartRec."Cum. Adj. Factor Subcontr." * lvEstPartRec."Cum. Adj. Factor Subcontr.";
                EstPartRec."Cum. Adj. Factor Plant" :=
                  EstPartRec."Cum. Adj. Factor Plant" * lvEstPartRec."Cum. Adj. Factor Plant";
                EstPartRec."Cum. Adj. Factor Sundry" :=
                  EstPartRec."Cum. Adj. Factor Sundry" * lvEstPartRec."Cum. Adj. Factor Sundry";
                EstPartRec."Cum. Adj. Factor Hours (Sales)" :=
                  EstPartRec."Cum. Adj. Factor Hours (Sales)" * lvEstPartRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
              END;
            END;
            IF FORMAT(EstPartRec) <> FORMAT(SubEstPartOriginal) THEN
              EstPartRec.MODIFY;
            IF UseDialog THEN
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL EstPartRec.NEXT = 0;
        END;
      END;

      IF UpdateLevel <= 3 THEN BEGIN
        EstLineRec.RESET;
        EstLineRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          EstLineRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          EstLineRec.SETRANGE("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          EstLineRec.SETRANGE(Part, CurrPart);
        IF CurrLino <> 0 THEN
          EstLineRec.SETRANGE("Line No.", CurrLino);
        IF EstLineRec.FINDSET THEN BEGIN
          currec := 0;
          maxrec := EstLineRec.COUNT;
          REPEAT
            EstimateLineOriginal := EstLineRec;
            IF UseDialog THEN
              Status.UPDATE(1,EstLineRec.Part);
            currec := currec + 1;
            lvSurch := (EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" ");

            IF ((lvSelect = 1) AND lvDoAdjHours) OR (EstLineRec."Adjustment Factor Hours" = 0) OR (lvSurch) THEN
              EstLineRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (EstLineRec."Adjustment Factor Price" = 0) OR (lvSurch) THEN
              EstLineRec."Adjustment Factor Price" := 1;
            IF ((lvSelect = 1) AND lvDoAdjHoursSales) OR (EstLineRec."Adj. Factor Hours (Sales)" = 0) OR (lvSurch) THEN
              EstLineRec."Adj. Factor Hours (Sales)" := 1;  //DP00555
            //
            EstLineRec."Cum. Adj. Factor Hours" := EstLineRec."Adjustment Factor Hours";
            EstLineRec."Cum. Adj. Factor Price" := EstLineRec."Adjustment Factor Price";
            EstLineRec."Cum. Adj. Factor Hours (Sales)" := EstLineRec."Adj. Factor Hours (Sales)";  //DP00555
            IF NOT lvSurch THEN BEGIN
              IF lvEstPartRec.GET(
                EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.", EstLineRec."Part Group", EstLineRec.Part)
              THEN BEGIN
                EstLineRec."Cum. Adj. Factor Hours" :=
                  EstLineRec."Cum. Adj. Factor Hours" * lvEstPartRec."Cum. Adj. Factor Hours";
                //DP00381.sn
                IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Material THEN
                  EstLineRec."Cum. Adj. Factor Price" :=
                    EstLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Material";
                IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Subcontracting THEN
                  EstLineRec."Cum. Adj. Factor Price" :=
                    EstLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Subcontr.";
                IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Plant THEN
                  EstLineRec."Cum. Adj. Factor Price" :=
                    EstLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Plant";
                IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Sundry THEN
                  EstLineRec."Cum. Adj. Factor Price" :=
                    EstLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Sundry";
                //DP00381.en
                EstLineRec."Cum. Adj. Factor Hours (Sales)" :=
                  EstLineRec."Cum. Adj. Factor Hours (Sales)" * lvEstPartRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
              END;
            END;
            EstLineRec.CalculateTotals;
            IF (FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal)) OR lvSurch
            THEN BEGIN
              TmpEstLineRec := EstLineRec;
              TmpEstLineRec.INSERT;
            END;
            IF UseDialog THEN
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL EstLineRec.NEXT = 0;
        END;
      END;

      IF UpdateLevel <= 4 THEN BEGIN
        RcpLineRec.RESET;
        RcpLineRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          RcpLineRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          RcpLineRec.SETRANGE("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          RcpLineRec.SETRANGE(Part, CurrPart);
        IF CurrLino <> 0 THEN
          RcpLineRec.SETRANGE("Estimate Line", CurrLino);
        IF RcpLineRec.FINDSET THEN BEGIN
          currec := 0;
          maxrec := RcpLineRec.COUNT;
          REPEAT
            RecipeLineOriginal := RcpLineRec;
            IF UseDialog THEN
              Status.UPDATE(1,RcpLineRec.Part);
            currec := currec + 1;
            lvSurch := (RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" ");

            IF ((lvSelect = 1) AND lvDoAdjHours) OR (RcpLineRec."Adjustment Factor Hours" = 0) OR (lvSurch) THEN
              RcpLineRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (RcpLineRec."Adjustment Factor Price" = 0) OR (lvSurch) THEN
              RcpLineRec."Adjustment Factor Price" := 1;
            IF ((lvSelect = 1) AND lvDoAdjHoursSales) OR (RcpLineRec."Adj. Factor Hours (Sales)" = 0) OR (lvSurch) THEN
              RcpLineRec."Adj. Factor Hours (Sales)" := 1;  //DP00555
            //
            RcpLineRec."Cum. Adj. Factor Hours" := RcpLineRec."Adjustment Factor Hours";
            RcpLineRec."Cum. Adj. Factor Price" := RcpLineRec."Adjustment Factor Price";
            RcpLineRec."Cum. Adj. Factor Hours (Sales)" := RcpLineRec."Adj. Factor Hours (Sales)";  //DP00555
            IF NOT lvSurch THEN BEGIN
              IF lvEstPartRec.GET(
                RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.", RcpLineRec."Part Group", RcpLineRec.Part)
              THEN BEGIN
                RcpLineRec."Cum. Adj. Factor Hours" :=
                 RcpLineRec."Cum. Adj. Factor Hours" * lvEstPartRec."Cum. Adj. Factor Hours";
                //DP00381.sn
                IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Material THEN
                  RcpLineRec."Cum. Adj. Factor Price" :=
                    RcpLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Material";
                IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting THEN
                  RcpLineRec."Cum. Adj. Factor Price" :=
                    RcpLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Subcontr.";
                IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Plant THEN
                  RcpLineRec."Cum. Adj. Factor Price" :=
                    RcpLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Plant";
                IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Sundry THEN
                  RcpLineRec."Cum. Adj. Factor Price" :=
                    RcpLineRec."Cum. Adj. Factor Price" * lvEstPartRec."Cum. Adj. Factor Sundry";
                //DP00381.en
                RcpLineRec."Cum. Adj. Factor Hours (Sales)" :=
                 RcpLineRec."Cum. Adj. Factor Hours (Sales)" * lvEstPartRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
              END;
            END;
            RcpLineRec.CalculateTotals;
            IF (FORMAT(RcpLineRec) <> FORMAT(RecipeLineOriginal)) OR lvSurch
            THEN BEGIN
              TmpRcpLineRec := RcpLineRec;
              TmpRcpLineRec.INSERT;
            END;
            IF UseDialog THEN
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL RcpLineRec.NEXT = 0;
        END;
      END;

      IF UpdateLevel = 5 THEN BEGIN
        BaseRcpLineRec.SETRANGE("Recipe Group", CurrPartGrp);
        BaseRcpLineRec.SETRANGE(Recipe, CurrPart);
        IF CurrLino <> 0 THEN
          BaseRcpLineRec.SETRANGE("Line No.", CurrLino);
        IF BaseRcpLineRec.FINDSET THEN BEGIN
          currec := 0;
          maxrec := BaseRcpLineRec.COUNT;
          REPEAT
            IF UseDialog THEN
              Status.UPDATE(1,BaseRcpLineRec.Recipe);
            currec := currec + 1;
            lvSurch := (BaseRcpLineRec."Surcharge Type" <> BaseRcpLineRec."Surcharge Type"::" ");

            IF ((lvSelect = 1) AND lvDoAdjHours) OR (BaseRcpLineRec."Adjustment Factor Hours" = 0) OR (lvSurch) THEN
              BaseRcpLineRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (BaseRcpLineRec."Adjustment Factor Price" = 0) OR (lvSurch) THEN
              BaseRcpLineRec."Adjustment Factor Price" := 1;
            IF ((lvSelect = 1) AND lvDoAdjHoursSales) OR (BaseRcpLineRec."Adj. Factor Hours (Sales)" = 0) OR (lvSurch) THEN
              BaseRcpLineRec."Adj. Factor Hours (Sales)" := 1;  //DP00555
            //
            BaseRcpLineRec."Cum. Adj. Factor Hours" := BaseRcpLineRec."Adjustment Factor Hours";
            BaseRcpLineRec."Cum. Adj. Factor Price" := BaseRcpLineRec."Adjustment Factor Price";
            BaseRcpLineRec."Cum. Adj. Factor Hours (Sales)" := BaseRcpLineRec."Adj. Factor Hours (Sales)";  //DP00555
            BaseRcpLineRec.CalculateTotals;
            BaseRcpLineRec.MODIFY(TRUE);
            IF UseDialog THEN
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL BaseRcpLineRec.NEXT = 0;
        END;
      END;


      UpdateFromTmp;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      IF UseDialog THEN
        Status.CLOSE;
    END;

    PROCEDURE ReplaceRecipe@1210190011(CurrEst@1210190009 : Code[20];CurrSubEst@1210190008 : Code[20];GrpCode@1210190007 : Code[20];RcpCode@1210190005 : Code[20];ActEstRcp@1100485001 : ' ,Update,Replace';UpdateCostSales@1100528900 : 'Cost,Sales,Both');
    VAR
      RcpRec@1000000001 : Record 11020581;
      SubEstRec@1000000000 : Record 11072074;
      EstLineRec@1000000002 : Record 11072072;
    BEGIN
      Status.OPEN(Text011);
      Status.UPDATE(1,Text013);

      IF GrpCode <> '' THEN
        RcpRec.SETFILTER("Recipe Group", GrpCode);
      IF RcpCode <> '' THEN
        RcpRec.SETFILTER("No.", RcpCode);
      IF RcpRec.FINDSET THEN BEGIN
        REPEAT
          SubEstRec.RESET;
          IF CurrEst <> '' THEN
            SubEstRec.SETFILTER("Estimate No.", CurrEst);
          IF CurrSubEst <> '' THEN
            SubEstRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
          IF SubEstRec.FINDSET THEN BEGIN
            REPEAT
              EstLineRec.SETRANGE("Estimate No.", SubEstRec."Estimate No.");
              EstLineRec.SETRANGE("Sub-Estimate No.", SubEstRec."Sub-Estimate No.");
              EstLineRec.SETRANGE("Recipe Group", RcpRec."Recipe Group");
              EstLineRec.SETRANGE(Recipe, RcpRec."No.");
              IF EstLineRec.FINDSET THEN BEGIN
                currec := 0;
                maxrec := EstLineRec.COUNT;
                REPEAT
                  CheckEstFixed(EstLineRec."Estimate No.");  //C033132
                  UpdateEstimateRecipe(EstLineRec, ActEstRcp, RcpRec."Recipe Group", RcpRec."No.", UpdateCostSales);  //C057728
                  currec := currec + 1;
                  Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
                UNTIL EstLineRec.NEXT = 0;
              END;
            UNTIL SubEstRec.NEXT = 0;
          END;
        UNTIL RcpRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceRateCode@1210190000(VAR lvEstLineRec@1100485000 : Record 11072072;OldRateCode@1210190008 : Code[20];NewRateCode@1210190007 : Code[20]);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldRateCode <> '' THEN
        EstLineRec.SETFILTER("Rate Code", OldRateCode)
      ELSE
        EstLineRec.SETFILTER("Rate Code", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec.VALIDATE("Rate Code", NewRateCode);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldRateCode <> '' THEN
        RcpLineRec.SETFILTER("Rate Code", OldRateCode)
      ELSE
        RcpLineRec.SETFILTER("Rate Code", '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          RcpLineRec.VALIDATE("Rate Code", NewRateCode);
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Rate Code");
      TmpRcpLineRec.SETRANGE("Rate Code");
      UpdateFromTmp;

      //DP01900.sn
      WITH EstLineRec DO BEGIN
        SubEstRec.RESET;
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF OldRateCode <> '' THEN
          SubEstRec.SETFILTER("Rate Code", OldRateCode);
        SubEstRec.MODIFYALL("Rate Code", NewRateCode);  //db, 09-04-18

        EstPartRec.RESET;
        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        IF OldRateCode <> '' THEN
          EstPartRec.SETFILTER("Rate Code", OldRateCode);
        EstPartRec.MODIFYALL("Rate Code", NewRateCode);  //db, 09-04-18
      END;
      //DP01900.en

      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        EstRec.SETFILTER("No.", EstLineRec.GETFILTER("Estimate No."));
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF (EstRec."Rate Code" = OldRateCode) OR (OldRateCode = '') THEN BEGIN
            IF (EstLineRec.GETFILTER("Sub-Estimate No.") = '') AND
               (EstLineRec.GETFILTER(Part) = '') THEN BEGIN  //C007957
              EstRec."Rate Code" := NewRateCode;
              EstRec.MODIFY;
            END;
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceCurrencyCode@1100528600(VAR lvEstLineRec@1100528602 : Record 11072072;OldCurrencyCode@1100528601 : Code[10];NewCurrencyCode@1100528600 : Code[10]);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);
      EstLineRec.SETRANGE(Recipe);

      ClearTmpTables;
      UpdateEstimateRates(EstLineRec.GETFILTER("Estimate No."),NewCurrencyCode);  //C054524

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldCurrencyCode <> '' THEN
        EstLineRec.SETFILTER("Currency Code", OldCurrencyCode)
      ELSE
        EstLineRec.SETFILTER("Currency Code", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec.VALIDATE("Currency Code", NewCurrencyCode);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldCurrencyCode <> '' THEN
        RcpLineRec.SETFILTER("Currency Code", OldCurrencyCode)
      ELSE
        RcpLineRec.SETFILTER("Currency Code", '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          RcpLineRec.VALIDATE("Currency Code", NewCurrencyCode);
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Currency Code");
      TmpRcpLineRec.SETRANGE("Currency Code");
      UpdateFromTmp;

      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        EstRec.SETFILTER("No.", EstLineRec.GETFILTER("Estimate No."));
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF (EstRec."Currency Code" = OldCurrencyCode) OR (OldCurrencyCode = '') THEN BEGIN
            IF (EstLineRec.GETFILTER("Sub-Estimate No.") = '') AND
               (EstLineRec.GETFILTER(Part) = '') THEN BEGIN
              EstRec."Currency Code" := NewCurrencyCode;
              EstRec.MODIFY;
            END;
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceElement@1100528902(VAR lvEstLineRec@1100528602 : Record 11072072;OldElement@1100528601 : Code[20];NewElement@1100528600 : Code[20]);
    BEGIN
      //DP01931
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);
      EstLineRec.SETRANGE(Recipe);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldElement <> '' THEN
        EstLineRec.SETFILTER(Element, OldElement)
      ELSE
        EstLineRec.SETFILTER(Element, '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec.VALIDATE(Element, NewElement);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldElement <> '' THEN
        RcpLineRec.SETFILTER(Element, OldElement)
      ELSE
        RcpLineRec.SETFILTER(Element, '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          RcpLineRec.VALIDATE(Element, NewElement);
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE(Element);
      TmpRcpLineRec.SETRANGE(Element);
      UpdateFromTmp;

      WITH EstLineRec DO BEGIN
        SubEstRec.RESET;
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF OldElement <> '' THEN
          SubEstRec.SETFILTER(Element, OldElement);
        //DP02460.sn
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            SubEstRec.Element := NewElement;
            SubEstRec.GetDisciplineByElement;
            SubEstRec.MODIFY;
          UNTIL SubEstRec.NEXT = 0;
        END;
        //DP02460.en

        EstPartRec.RESET;
        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        IF OldElement <> '' THEN
          EstPartRec.SETFILTER(Element, OldElement);
        EstPartRec.MODIFYALL(Element, NewElement);
        //DP02460.sn
        IF EstPartRec.FINDSET THEN BEGIN
          REPEAT
            EstPartRec.Element := NewElement;
            EstPartRec.GetDisciplineByElement;
            EstPartRec.MODIFY;
          UNTIL EstPartRec.NEXT = 0;
        END;
        //DP02460.en
      END;

      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        EstRec.SETFILTER("No.", EstLineRec.GETFILTER("Estimate No."));
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF (EstRec.Element = OldElement) OR (OldElement = '') THEN BEGIN
            IF (EstLineRec.GETFILTER("Sub-Estimate No.") = '') AND
               (EstLineRec.GETFILTER(Part) = '') THEN BEGIN
              EstRec.Element := NewElement;
              EstRec.MODIFY;
            END;
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateRate@1210190004(CurrEst@1210190006 : Code[20];OldGroupCode@1100525001 : Code[20];NewGroupCode@1100525000 : Code[20]);
    VAR
      lvEstLineRec@1100485000 : Record 11072072;
    BEGIN
      ClearTmpTables;
      EstSetup.GET;  //C025953

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
          IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN BEGIN
            //C025953.sn
            IF OldGroupCode <> NewGroupCode THEN BEGIN
              EstRec."Rate Group" := NewGroupCode;
              EstRec.MODIFY;
            END;
            EstRec.GetRateByRateGroup;
            //C025953.en
          END ELSE BEGIN
            EstRec.GetCostRate;  //DP00381
            EstRec.GetSalesRate;  //DP00381
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRateRec.SETFILTER("Estimate No.", CurrEst);
      IF EstRateRec.FINDSET THEN BEGIN
        REPEAT
          IF CurrEst <> '' THEN
            lvEstLineRec.SETFILTER("Estimate No.", CurrEst);
          ReplaceRateCode(lvEstLineRec, EstRateRec."Rate Code", EstRateRec."Rate Code");
        UNTIL EstRateRec.NEXT = 0;
      END;
    END;

    PROCEDURE ReplaceNormGroup@1210190001(VAR lvEstLineRec@1100485000 : Record 11072072;OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190005 : Code[20]);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      RcpLineRec.RESET;  //C012505
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldGroupCode <> '' THEN
        EstLineRec.SETFILTER("Norm Group", OldGroupCode)
      ELSE
        EstLineRec.SETFILTER("Sub Operation Code", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec."Norm Group" := NewGroupCode;
          IF NormRec.GET(EstLineRec."Sub Operation Code", EstLineRec."Norm Group") THEN BEGIN
            EstLineRec.Norm := NormRec.Norm;
            IF EstLineRec.Norm <> 0 THEN
              EstLineRec."Production Rate" := 1 / EstLineRec.Norm
            ELSE
              EstLineRec."Production Rate" := 0;
            EstLineRec.ConvertNorm(FALSE,FALSE);  //db, 19-08-04: incl. check on rate type and team size
          END;
          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldGroupCode <> '' THEN
        RcpLineRec.SETFILTER("Norm Group", OldGroupCode)
      ELSE
        RcpLineRec.SETFILTER("Sub Operation Code", '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          RcpLineRec."Norm Group" := NewGroupCode;
          IF NormRec.GET(RcpLineRec."Sub Operation Code", RcpLineRec."Norm Group") THEN BEGIN
            RcpLineRec.Norm := NormRec.Norm;
            IF RcpLineRec.Norm <> 0 THEN
              RcpLineRec."Production Rate" := 1 / RcpLineRec.Norm
            ELSE
              RcpLineRec."Production Rate" := 0;
            RcpLineRec.ConvertNorm(FALSE,FALSE);  //db, 19-08-04: incl. check on rate type and team size
          END;
          RcpLineRec.CalculateTotals;
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      WITH EstLineRec DO BEGIN
        SubEstRec.RESET;  //C012505
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF OldGroupCode <> '' THEN
          SubEstRec.SETFILTER("Norm Group", OldGroupCode);
        SubEstRec.MODIFYALL("Norm Group", NewGroupCode);

        EstPartRec.RESET;  //C012505
        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        IF OldGroupCode <> '' THEN
          EstPartRec.SETFILTER("Norm Group", OldGroupCode);
        EstPartRec.MODIFYALL("Norm Group", NewGroupCode);

        EstRec.RESET;  //C012505
        IF GETFILTER("Estimate No.") <> '' THEN
          EstRec.SETFILTER("No.", GETFILTER("Estimate No."));
        IF OldGroupCode <> '' THEN
          EstRec.SETFILTER("Norm Group", OldGroupCode);
        IF (GETFILTER("Sub-Estimate No.") = '') AND (GETFILTER(Part) = '') THEN  //C007957
          EstRec.MODIFYALL("Norm Group", NewGroupCode);
      END;

      TmpEstLineRec.SETRANGE("Norm Group");
      TmpRcpLineRec.SETRANGE("Norm Group");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceNormGroupSales@1100525002(VAR lvEstLineRec@1100485000 : Record 11072072;OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190005 : Code[20]);
    BEGIN
      //DP00381
      EstLineRec.COPY(lvEstLineRec);
      RcpLineRec.RESET;  //C012505
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldGroupCode <> '' THEN
        EstLineRec.SETFILTER("Norm Group (Sales)", OldGroupCode)
      ELSE
        EstLineRec.SETFILTER("Sub Operation Code", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec."Norm Group (Sales)" := NewGroupCode;
          IF NormRec.GET(EstLineRec."Sub Operation Code", EstLineRec."Norm Group (Sales)") THEN BEGIN
            EstLineRec."Norm (Sales)" := NormRec.Norm;
            IF EstLineRec."Norm (Sales)" <> 0 THEN
              EstLineRec."Production Rate (Sales)" := 1 / EstLineRec."Norm (Sales)"
            ELSE
              EstLineRec."Production Rate (Sales)" := 0;
            EstLineRec.ConvertNorm(FALSE,FALSE);  //db, 19-08-04: incl. check on rate type and team size
          END;
          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldGroupCode <> '' THEN
        RcpLineRec.SETFILTER("Norm Group (Sales)", OldGroupCode)
      ELSE
        RcpLineRec.SETFILTER("Sub Operation Code", '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          RcpLineRec."Norm Group (Sales)" := NewGroupCode;
          IF NormRec.GET(RcpLineRec."Sub Operation Code", RcpLineRec."Norm Group (Sales)") THEN BEGIN
            RcpLineRec."Norm (Sales)" := NormRec.Norm;
            IF RcpLineRec."Norm (Sales)" <> 0 THEN
              RcpLineRec."Production Rate (Sales)" := 1 / RcpLineRec."Norm (Sales)"
            ELSE
              RcpLineRec."Production Rate (Sales)" := 0;
            RcpLineRec.ConvertNorm(FALSE,FALSE);  //db, 19-08-04: incl. check on rate type and team size
          END;
          RcpLineRec.CalculateTotals;
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      WITH EstLineRec DO BEGIN
        SubEstRec.RESET;  //C012505
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF OldGroupCode <> '' THEN
          SubEstRec.SETFILTER("Norm Group (Sales)", OldGroupCode);
        SubEstRec.MODIFYALL("Norm Group (Sales)", NewGroupCode);

        EstPartRec.RESET;  //C012505
        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        IF OldGroupCode <> '' THEN
          EstPartRec.SETFILTER("Norm Group (Sales)", OldGroupCode);
        EstPartRec.MODIFYALL("Norm Group (Sales)", NewGroupCode);

        EstRec.RESET;  //C012505
        IF GETFILTER("Estimate No.") <> '' THEN
          EstRec.SETFILTER("No.", GETFILTER("Estimate No."));
        IF OldGroupCode <> '' THEN
          EstRec.SETFILTER("Norm Group (Sales)", OldGroupCode);
        IF (GETFILTER("Sub-Estimate No.") = '') AND (GETFILTER(Part) = '') THEN  //C007957
          EstRec.MODIFYALL("Norm Group (Sales)", NewGroupCode);
      END;

      TmpEstLineRec.SETRANGE("Norm Group (Sales)");
      TmpRcpLineRec.SETRANGE("Norm Group (Sales)");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceCondition@1100485001(VAR lvEstLineRec@1100485001 : Record 11072072;OldCondition@1210190007 : Code[20];NewCondition@1210190005 : Code[20]);
    VAR
      RcpRec2@1100485000 : Record 11020581;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE(Condition, OldCondition);
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          IF RcpRec.GET(EstLineRec."Recipe Group", EstLineRec.Recipe) THEN BEGIN
            RcpRec2.SETRANGE("Recipe Group", RcpRec."Recipe Group");
            RcpRec2.SETRANGE("Condition Group", RcpRec."Condition Group");
            RcpRec2.SETRANGE(Condition, NewCondition);
            IF RcpRec2.COUNT = 1 THEN BEGIN
              RcpRec2.FINDFIRST;
              EstLineRec.VALIDATE(Recipe, RcpRec2."No.");
              EstLineRec.MODIFY;
            END;
          END;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      WITH EstLineRec DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        SubEstRec.SETRANGE(Condition, OldCondition);
        SubEstRec.MODIFYALL(Condition, NewCondition);

        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        EstPartRec.SETRANGE(Condition, OldCondition);
        EstPartRec.MODIFYALL(Condition, NewCondition);

        IF GETFILTER("Estimate No.") <> '' THEN
          EstRec.SETFILTER("No.", GETFILTER("Estimate No."));
        EstRec.SETRANGE(Condition, OldCondition);
        EstRec.MODIFYALL(Condition, NewCondition);
      END;

      TmpEstLineRec.SETRANGE(Condition);

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceTradeVendor@1100485003(VAR lvEstLineRec@1100485007 : Record 11072072;OldTradeVendor@1210190007 : Code[20];NewTradeVendor@1210190005 : Code[20]);
    VAR
      Temp2RcpLineRec@1100485003 : TEMPORARY Record 11072075;
      Temp2EstLineRec@1100485004 : TEMPORARY Record 11072072;
      TradeItemRec@1100485006 : Record 11012317;
      UpdateRep@1100485005 : Report 11012318;
      NewTradeItem@1100485008 : Code[20];
      Final@1100485009 : 'Yes,No Report';
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Temp2RcpLineRec.DELETEALL;
      Temp2EstLineRec.DELETEALL;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldTradeVendor <> '' THEN
        EstLineRec.SETFILTER("Vendor (Trade Item)", OldTradeVendor)
      ELSE
        EstLineRec.SETFILTER("Vendor (Trade Item)", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          Temp2EstLineRec := EstLineRec;
          IF TradeItemRec.CheckReplaceVendor(
            EstLineRec."Vendor (Trade Item)", EstLineRec."Trade Item",
            NewTradeVendor, NewTradeItem) THEN
          BEGIN
            CheckEstFixed(EstLineRec."Estimate No.");

            EstLineRec."Trade Item" := '';
            EstLineRec.VALIDATE("Vendor (Trade Item)", NewTradeVendor);
            EstLineRec.VALIDATE("Trade Item", NewTradeItem);
            IF (EstLineRec."Vendor (Trade Item)" = NewTradeVendor) AND
               (EstLineRec."Trade Item" = NewTradeItem) THEN BEGIN
              //C037366.sn
              IF (EstLineRec."Item No." <> Temp2EstLineRec."Item No.") THEN BEGIN
                TradeItemRec.GET(NewTradeVendor, NewTradeItem);
                EstLineRec."Item No." := TradeItemRec.GetItemCode;
              END;
              //C037366.en
              TmpEstLineRec.COPY(EstLineRec);
              TmpEstLineRec.INSERT;
              Temp2EstLineRec.INSERT;
              currec := currec + 1;
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
            END;
          END;
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldTradeVendor <> '' THEN
        RcpLineRec.SETFILTER("Vendor (Trade Item)", OldTradeVendor)
      ELSE
        RcpLineRec.SETFILTER("Vendor (Trade Item)", '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          Temp2RcpLineRec := RcpLineRec;
          IF TradeItemRec.CheckReplaceVendor(
            RcpLineRec."Vendor (Trade Item)", RcpLineRec."Trade Item",
            NewTradeVendor, NewTradeItem) THEN
          BEGIN
            CheckEstFixed(RcpLineRec."Estimate No.");

            RcpLineRec."Trade Item" := '';
            RcpLineRec.VALIDATE("Vendor (Trade Item)", NewTradeVendor);
            RcpLineRec.VALIDATE("Trade Item", NewTradeItem);
            IF (RcpLineRec."Vendor (Trade Item)" = NewTradeVendor) AND
              (RcpLineRec."Trade Item" = NewTradeItem) THEN
            BEGIN
              //C037366.sn
              IF (RcpLineRec."Item No." <> Temp2RcpLineRec."Item No.") THEN BEGIN
                TradeItemRec.GET(NewTradeVendor, NewTradeItem);
                RcpLineRec."Item No." := TradeItemRec.GetItemCode;
              END;
              //C037366.en
              TmpRcpLineRec.COPY(RcpLineRec);
              TmpRcpLineRec.INSERT;
              Temp2RcpLineRec.INSERT;
              currec := currec + 1;
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
            END;
          END;
        UNTIL RcpLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Vendor (Trade Item)");
      TmpRcpLineRec.SETRANGE("Vendor (Trade Item)");
      UpdateFromTmp;

      COMMIT;
      Status.CLOSE;

      IF (Temp2EstLineRec.COUNT = 0) AND (Temp2RcpLineRec.COUNT = 0) THEN
        MESSAGE(Text004)
      ELSE BEGIN
        UpdateRep.SetTempEstimateLineNEW(Temp2EstLineRec,Temp2RcpLineRec,Final);  //DP00381
        UpdateRep.SETTABLEVIEW(EstLineRec);
        UpdateRep.SETTABLEVIEW(RcpLineRec);
        UpdateRep.RUNMODAL;
      END;
    END;

    PROCEDURE ReplaceItem@4(VAR ConvRec@1100525006 : Record 11012322;VAR lvEstLineRec@1100525000 : Record 11072072;VAR lvRcpLineRec@1100525010 : Record 11072075;VAR lvBaseRcpLineRec@1100525009 : Record 11020582;ActEst@1100525011 : Boolean;ActRcp@1100525012 : Boolean;ActBaseRcp@1100525014 : Boolean;SetRcpFilter@1100525013 : Boolean;ActPrice@1100525008 : Boolean);
    VAR
      DimValRec@1100525005 : Record 349;
      DimMgt@1100525004 : Codeunit 408;
      ItemTypeOpt@1100525007 : 'Item,Basic Item,Trade Item';
      Status@1100525003 : Dialog;
      maxrec@1100525002 : Integer;
      currec@1100525001 : Integer;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      IF SetRcpFilter THEN
        CheckEstFilters(EstLineRec, RcpLineRec)
      ELSE
        RcpLineRec.COPY(lvRcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);

      ConvRec.MARKEDONLY(TRUE);
      IF NOT ConvRec.FINDFIRST THEN BEGIN
        ConvRec.MARKEDONLY(FALSE);
        ConvRec.SETRANGE(Select, TRUE);
      END;
      IF ConvRec.FINDSET THEN BEGIN
        REPEAT
          ConvRec.VALIDATE(Select);

          IF ActEst = TRUE THEN BEGIN
            Status.UPDATE(1,Text012);
            EstLineRec.SETRANGE(Recipe, '');
            IF ConvRec."Trade Item (Old)" <> '' THEN BEGIN
              EstLineRec.SETRANGE("Trade Item", ConvRec."Trade Item (Old)");
              EstLineRec.SETRANGE("Vendor (Trade Item)", ConvRec."Vendor (Old)");
            END ELSE BEGIN
              IF ConvRec."Basic Item (Old)" <> '' THEN BEGIN
                EstLineRec.SETRANGE("Basic Item", ConvRec."Basic Item (Old)");
                EstLineRec.SETRANGE(Manufacturer, ConvRec."Manufacturer (Old)");
              END ELSE BEGIN
                IF ConvRec."Item No. (Old)" <> '' THEN BEGIN
                  EstLineRec.SETRANGE("Item No.", ConvRec."Item No. (Old)");
                END ELSE BEGIN
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    EstLineRec.SETFILTER("Trade Item", '%1', '');
                    EstLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                    EstLineRec.SETFILTER("Basic Item", '%1', '');
                    EstLineRec.SETFILTER(Manufacturer, '%1', '');
                    EstLineRec.SETFILTER("Item No.", '%1', '');
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (Old)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      EstLineRec.SETRANGE("Cost Object Labor", ConvRec."Cost Object (Old)")
                    ELSE
                      EstLineRec.SETRANGE("Cost Object Price", ConvRec."Cost Object (Old)");
                  END;
                END;
              END;
            END;
            IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              currec := 0;
              maxrec := EstLineRec.COUNT;
              REPEAT
                CheckEstFixed(EstLineRec."Estimate No.");
                IF EstRec.Fixed = FALSE THEN BEGIN  //C026777
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (New)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      EstLineRec."Cost Object Labor" := ConvRec."Cost Object (New)"
                    ELSE
                      EstLineRec."Cost Object Price" := ConvRec."Cost Object (New)";
                  END ELSE BEGIN
                    EstLineRec."Item No." := ConvRec."Item No. (New)";
                    EstLineRec."Basic Item" := ConvRec."Basic Item (New)";
                    EstLineRec."Trade Item" := ConvRec."Trade Item (New)";
                    EstLineRec.Manufacturer := ConvRec."Manufacturer (New)";
                    EstLineRec."Vendor (Trade Item)" := ConvRec."Vendor (New)";
                  END;
                  IF ActPrice = TRUE THEN BEGIN
                    IF ConvRec."Trade Item (New)" <> '' THEN
                      EstLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE)
                    ELSE
                      IF ConvRec."Basic Item (New)" <> '' THEN
                        EstLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE)
                      ELSE
                        IF ConvRec."Item No. (New)" <> '' THEN
                          EstLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, TRUE)
                        ELSE
                          IF ConvRec."Cost Object (New)" <> '' THEN
                            EstLineRec.CheckCostObject(ConvRec."Cost Object (New)");
                  END;
                  EstLineRec.CalculateTotals;
                  EstLineRec.MODIFY;
                END;
                currec := currec + 1;
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              UNTIL EstLineRec.NEXT = 0;
            END;
          END;

          IF ActRcp = TRUE THEN BEGIN
            Status.UPDATE(1,Text013);
            IF ConvRec."Trade Item (Old)" <> '' THEN BEGIN
              RcpLineRec.SETRANGE("Trade Item", ConvRec."Trade Item (Old)");
              RcpLineRec.SETRANGE("Vendor (Trade Item)", ConvRec."Vendor (Old)");
            END ELSE BEGIN
              IF ConvRec."Basic Item (Old)" <> '' THEN BEGIN
                RcpLineRec.SETRANGE("Basic Item", ConvRec."Basic Item (Old)");
                RcpLineRec.SETRANGE(Manufacturer, ConvRec."Manufacturer (Old)");
              END ELSE BEGIN
                IF ConvRec."Item No. (Old)" <> '' THEN BEGIN
                  RcpLineRec.SETRANGE("Item No.", ConvRec."Item No. (Old)");
                END ELSE BEGIN
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    RcpLineRec.SETFILTER("Trade Item", '%1', '');
                    RcpLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                    RcpLineRec.SETFILTER("Basic Item", '%1', '');
                    RcpLineRec.SETFILTER(Manufacturer, '%1', '');
                    RcpLineRec.SETFILTER("Item No.", '%1', '');
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (Old)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      RcpLineRec.SETRANGE("Cost Object Labor", ConvRec."Cost Object (Old)")
                    ELSE
                      RcpLineRec.SETRANGE("Cost Object Price", ConvRec."Cost Object (Old)");
                  END;
                END;
              END;
            END;
            IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              currec := 0;
              maxrec := RcpLineRec.COUNT;
              REPEAT
                CheckEstFixed(RcpLineRec."Estimate No.");
                IF EstRec.Fixed = FALSE THEN BEGIN  //C026777
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (New)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      RcpLineRec."Cost Object Labor" := ConvRec."Cost Object (New)"
                    ELSE
                      RcpLineRec."Cost Object Price" := ConvRec."Cost Object (New)";
                  END ELSE BEGIN
                    RcpLineRec."Item No." := ConvRec."Item No. (New)";
                    RcpLineRec."Basic Item" := ConvRec."Basic Item (New)";
                    RcpLineRec."Trade Item" := ConvRec."Trade Item (New)";
                    RcpLineRec.Manufacturer := ConvRec."Manufacturer (New)";
                    RcpLineRec."Vendor (Trade Item)" := ConvRec."Vendor (New)";
                  END;
                  IF ActPrice = TRUE THEN BEGIN
                    IF ConvRec."Trade Item (New)" <> '' THEN
                      RcpLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE)
                    ELSE
                      IF ConvRec."Basic Item (New)" <> '' THEN
                        RcpLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE)
                      ELSE
                        IF ConvRec."Item No. (New)" <> '' THEN
                          RcpLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, TRUE)
                        ELSE
                          IF ConvRec."Cost Object (New)" <> '' THEN
                            RcpLineRec.CheckCostObject(ConvRec."Cost Object (New)");
                  END;
                  RcpLineRec.CalculateTotals;
                  RcpLineRec.MODIFY;
                  RcpLineRec.UpdateEstLines;
                END;
                currec := currec + 1;
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              UNTIL RcpLineRec.NEXT = 0;
            END;
          END;

          IF ActBaseRcp = TRUE THEN BEGIN  //C014467
            Status.UPDATE(1,lvBaseRcpLineRec.TABLECAPTION);
            IF ConvRec."Trade Item (Old)" <> '' THEN BEGIN
              lvBaseRcpLineRec.SETRANGE("Trade Item", ConvRec."Trade Item (Old)");
              lvBaseRcpLineRec.SETRANGE("Vendor (Trade Item)", ConvRec."Vendor (Old)");
            END ELSE BEGIN
              IF ConvRec."Basic Item (Old)" <> '' THEN BEGIN
                lvBaseRcpLineRec.SETRANGE("Basic Item", ConvRec."Basic Item (Old)");
                lvBaseRcpLineRec.SETRANGE(Manufacturer, ConvRec."Manufacturer (Old)");
              END ELSE BEGIN
                IF ConvRec."Item No. (Old)" <> '' THEN BEGIN
                  lvBaseRcpLineRec.SETRANGE("Item No.", ConvRec."Item No. (Old)");
                END ELSE BEGIN
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    lvBaseRcpLineRec.SETFILTER("Trade Item", '%1', '');
                    lvBaseRcpLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                    lvBaseRcpLineRec.SETFILTER("Basic Item", '%1', '');
                    lvBaseRcpLineRec.SETFILTER(Manufacturer, '%1', '');
                    lvBaseRcpLineRec.SETFILTER("Item No.", '%1', '');
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (Old)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      lvBaseRcpLineRec.SETRANGE("Cost Object Labor", ConvRec."Cost Object (Old)")
                    ELSE
                      lvBaseRcpLineRec.SETRANGE("Cost Object Price", ConvRec."Cost Object (Old)");
                  END;
                END;
              END;
            END;
            IF lvBaseRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              currec := 0;
              maxrec := lvBaseRcpLineRec.COUNT;
              REPEAT
                IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                  DimMgt.GetDimValueRec(2, ConvRec."Cost Object (New)", DimValRec, TRUE, '');
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                    lvBaseRcpLineRec."Cost Object Labor" := ConvRec."Cost Object (New)"
                  ELSE
                    lvBaseRcpLineRec."Cost Object Price" := ConvRec."Cost Object (New)";
                END ELSE BEGIN
                  lvBaseRcpLineRec."Item No." := ConvRec."Item No. (New)";
                  lvBaseRcpLineRec."Basic Item" := ConvRec."Basic Item (New)";
                  lvBaseRcpLineRec."Trade Item" := ConvRec."Trade Item (New)";
                  lvBaseRcpLineRec.Manufacturer := ConvRec."Manufacturer (New)";
                  lvBaseRcpLineRec."Vendor (Trade Item)" := ConvRec."Vendor (New)";
                END;
                IF ActPrice = TRUE THEN BEGIN
                  IF ConvRec."Trade Item (New)" <> '' THEN
                    lvBaseRcpLineRec.ValidateItem(ItemTypeOpt::"Trade Item", TRUE)
                  ELSE
                    IF ConvRec."Basic Item (New)" <> '' THEN
                      lvBaseRcpLineRec.ValidateItem(ItemTypeOpt::"Basic Item", TRUE)
                    ELSE
                      IF ConvRec."Item No. (New)" <> '' THEN
                        lvBaseRcpLineRec.ValidateItem(ItemTypeOpt::Item, TRUE)
                      ELSE
                        IF ConvRec."Cost Object (New)" <> '' THEN
                          lvBaseRcpLineRec.CheckCostObject(ConvRec."Cost Object (New)");
                END;
                lvBaseRcpLineRec.CalculateTotals;
                lvBaseRcpLineRec.MODIFY(TRUE);    //Use TRUE because of central management.
                currec := currec + 1;
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              UNTIL lvBaseRcpLineRec.NEXT = 0;
            END;
          END;
        UNTIL ConvRec.NEXT = 0;
      END;

      Status.CLOSE;
    END;

    PROCEDURE UpdateQuotePrice@1100485007(VAR lvEstLineRec@1100485000 : Record 11072072;QuoteFilter@1100485002 : Text[250]);
    VAR
      PurchLineRec@1100485001 : Record 39;
      UnitPrice@1100525000 : Decimal;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1, PurchLineRec.TABLECAPTION);

      PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
      IF QuoteFilter <> '' THEN
        PurchLineRec.SETFILTER("Document No.", QuoteFilter);
      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        PurchLineRec.SETFILTER("Estimate No.", EstLineRec.GETFILTER("Estimate No."))
      ELSE
        PurchLineRec.SETFILTER("Estimate No.", '<>%1', '');
      PurchLineRec.SETFILTER("Purchase Route Reference", '<>%1', '');
      PurchLineRec.SETRANGE("Quote Selected", TRUE);
      IF PurchLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := PurchLineRec.COUNT;
        REPEAT
          EstLineRec.SETFILTER("Purchase Route Reference", PurchLineRec."Purchase Route Reference");
          IF EstLineRec.FINDSET THEN BEGIN
            REPEAT
              CheckEstFixed(EstLineRec."Estimate No.");
              //IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Material THEN BEGIN  //C010958
                EstLineRec."Price Agreement" := TRUE;
                EstLineRec."Gross Price" := PurchLineRec."Unit Price (LCY)";
                IF PurchLineRec."Line Discount %" <> 0 THEN  //C010958
                  EstLineRec."Purchase Discount %" := PurchLineRec."Line Discount %"
                ELSE
                  EstLineRec."Purchase Discount %" := PurchLineRec."Discount % (Item)";
                IF (EstLineRec."Gross Price" <> 0) AND (EstLineRec."Purchase Discount %" <> 0) THEN
                  UnitPrice := EstLineRec."Gross Price" * ((100-EstLineRec."Purchase Discount %")/ 100)  //C056247
                ELSE
                  UnitPrice := PurchLineRec."Unit Cost (LCY)";
                EstLineRec.VALIDATE("Net Cost Price", UnitPrice);
              //END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Subcontracting THEN  //C010958
                EstLineRec.Subcontractor := PurchLineRec."Buy-from Vendor No."
              ELSE
                EstLineRec.Vendor := PurchLineRec."Buy-from Vendor No.";
              EstLineRec.CalculateDiscount(FALSE);
              EstLineRec.CalculateTotals;
              TmpEstLineRec.COPY(EstLineRec);
              TmpEstLineRec.INSERT;
            UNTIL EstLineRec.NEXT = 0;
          END;

          RcpLineRec.SETFILTER("Purchase Route Reference", PurchLineRec."Purchase Route Reference");
          IF RcpLineRec.FINDSET THEN BEGIN
            REPEAT
              CheckEstFixed(RcpLineRec."Estimate No.");
              //IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Material THEN BEGIN  //C010958
                RcpLineRec."Price Agreement" := TRUE;
                RcpLineRec."Gross Price" := PurchLineRec."Unit Price (LCY)";
                IF PurchLineRec."Line Discount %" <> 0 THEN  //C010958
                  RcpLineRec."Purchase Discount %" := PurchLineRec."Line Discount %"
                ELSE
                  RcpLineRec."Purchase Discount %" := PurchLineRec."Discount % (Item)";
                IF (RcpLineRec."Gross Price" <> 0) AND (RcpLineRec."Purchase Discount %" <> 0) THEN
                  UnitPrice := RcpLineRec."Gross Price" * ((100-RcpLineRec."Purchase Discount %")/ 100)  //C056247
                ELSE
                  UnitPrice := PurchLineRec."Unit Cost (LCY)";
                RcpLineRec.VALIDATE("Net Cost Price", UnitPrice);
              //END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Subcontracting THEN  //C010958
                RcpLineRec.Subcontractor := PurchLineRec."Buy-from Vendor No."
              ELSE
                RcpLineRec.Vendor := PurchLineRec."Buy-from Vendor No.";
              RcpLineRec.CalculateDiscount(FALSE);
              RcpLineRec.CalculateTotals;
      //      RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
              TmpRcpLineRec.COPY(RcpLineRec);
              TmpRcpLineRec.INSERT;
            UNTIL RcpLineRec.NEXT = 0;
          END;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL PurchLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Purchase Route Reference");
      TmpRcpLineRec.SETRANGE("Purchase Route Reference");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateActualPrice@1210190002(VAR lvEstLineRec@1100485001 : Record 11072072;ActNorm@1210190013 : Boolean;ActPrice@1210190012 : Boolean;ActSubcPrice@1100528500 : Boolean;ActPlantPrice@1100485002 : Boolean;ActCostObject@1210190011 : Boolean;ActDesc@1210190010 : Boolean;ActSubOper@1210190021 : Boolean;PriceMethod@1210190017 : 'Actualise GP+DP+NP,Actualise GP + Fix DP + Calculate NP,Fix GP + Actualise DP + Calculate NP,Fix GP + Calculate DP + Actualise NP,Calculate GP + Fix DP + Actualise NP';UpdateCostSales@1100528901 : 'Cost,Sales,Both');
    VAR
      ItemTypeOpt@1210190009 : 'Item,Basic Item,Trade Item';
      OldCostObjectPrice@1210190015 : Code[20];
      OldCostObjectLabor@1210190002 : Code[20];
      OldCostComponent@1100485000 : Code[20];
      OldDesc@1210190014 : Text[100];
      OldGrossPrice@1210190018 : Decimal;
      OldPurchDisc@1210190019 : Decimal;
      OldSalesDisc@1100528900 : Decimal;
      UnitOld@1210190006 : Code[20];
      UnitNew@1210190005 : Code[20];
      SubOperNew@1210190022 : Code[20];
      OldEstLineRec@1210190008 : Record 11072072;
      NewEstLineRec@1210190007 : Record 11072072;
      OldRcpLineRec@1210190016 : Record 11072075;
      NewRcpLineRec@1210190020 : Record 11072075;
      EstimateLineOriginal@1210190000 : Record 11072072;
      RecipeLineOriginal@1210190001 : Record 11072075;
      SubOperRec@1100525001 : Record 11012166;
      OperRec@1100525000 : Record 11012165;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        //EstRec.GET(EstLineRec."Estimate No.");  //C013433 (problem with CheckEstFixed)
        REPEAT
          EstimateLineOriginal := EstLineRec;
          CheckEstFixed(EstLineRec."Estimate No.");

          OldCostObjectLabor := EstLineRec."Cost Object Labor";
          OldCostObjectPrice := EstLineRec."Cost Object Price";
          OldDesc := EstLineRec.Description;
          OldCostComponent := EstLineRec."Cost Component";
          OldGrossPrice := EstLineRec."Gross Price";
          OldPurchDisc := EstLineRec."Purchase Discount %";
          OldSalesDisc := EstLineRec."Sales Discount %";

          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(EstLineRec.Manufacturer, EstLineRec."Vendor (Trade Item)",
                EstLineRec."Item No.", EstLineRec."Basic Item", EstLineRec."Trade Item");
            IF SubOperNew <> '' THEN
              EstLineRec.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              EstLineRec.VALIDATE("Sub Operation Code");
            IF EstLineRec."Sub Operation Code" <> '' THEN BEGIN  //db, 08-06-15: C020235
              IF SubOperRec.GET(EstLineRec."Sub Operation Code") THEN BEGIN
                EstLineRec.Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(EstLineRec.Description));
                IF OperRec.GET(SubOperRec.Operation) THEN
                  IF OperRec."Cost Object" <> '' THEN
                    EstLineRec."Cost Object Labor" := OperRec."Cost Object";
               END;
            END;
          END;
          IF ActPrice = TRUE THEN BEGIN
            OldEstLineRec := EstLineRec;
            IF EstLineRec."Estimate No." <> EstRec."No." THEN
              EstRec.GET(EstLineRec."Estimate No.");  //db, 02-09-16: C032756
            IF EstLineRec."Trade Item" + EstLineRec."Basic Item" + EstLineRec."Item No." <> '' THEN BEGIN
              IF EstLineRec."Trade Item" <> '' THEN
                ItemTypeOpt := ItemTypeOpt::"Trade Item"
              ELSE
                IF EstLineRec."Basic Item" <> '' THEN
                  ItemTypeOpt := ItemTypeOpt::"Basic Item"
                ELSE
                  IF EstLineRec."Item No." <> '' THEN
                    ItemTypeOpt := ItemTypeOpt::Item;
              IF (UpdateCostSales = UpdateCostSales::Cost) OR (UpdateCostSales = UpdateCostSales::Both) THEN
                EstLineRec.CalcItemCostPriceAndDiscount(EstRec, ItemTypeOpt);
              IF (UpdateCostSales = UpdateCostSales::Sales) OR (UpdateCostSales = UpdateCostSales::Both) THEN
                EstLineRec.CalcItemSalesPriceAndDiscount(EstRec);  //C014487
              IF (EstLineRec."Gross Price" <> OldEstLineRec."Gross Price") AND
                 (EstLineRec."Net Sales Price" = OldEstLineRec."Net Sales Price") THEN  //C013433
                IF (EstLineRec."Gross Price" <> 0) THEN
                  EstLineRec."Sales Discount %" :=
                    ((EstLineRec."Gross Price" - EstLineRec."Net Sales Price") / EstLineRec."Gross Price") * 100;
            END;

            NewEstLineRec := EstLineRec;
            IF NewEstLineRec."Unit of Measure" <> OldEstLineRec."Unit of Measure" THEN BEGIN
              UnitOld := OldEstLineRec."Unit of Measure";
              UnitNew := NewEstLineRec."Unit of Measure";
              NewEstLineRec."Unit of Measure" := UnitOld;
              OldEstLineRec."Unit of Measure" := UnitNew;
              EstLineRec.CheckItemUnitConversion(NewEstLineRec, OldEstLineRec);
              EstLineRec."Unit of Measure" := UnitOld;
              EstLineRec."Gross Price":= NewEstLineRec."Gross Price";
              EstLineRec."Net Cost Price":= NewEstLineRec."Net Cost Price";
              EstLineRec."Net Sales Price":= NewEstLineRec."Net Sales Price";
            END;
            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              EstLineRec."Purchase Discount %" := OldPurchDisc;
              EstLineRec."Sales Discount %" := OldSalesDisc;
              EstLineRec.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              EstLineRec."Gross Price" := OldGrossPrice;
              EstLineRec.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              EstLineRec."Gross Price" := OldGrossPrice;
              IF (UpdateCostSales <> UpdateCostSales::Sales) THEN
                EstLineRec.CalculateDiscount(FALSE);
              IF (UpdateCostSales <> UpdateCostSales::Cost) THEN
                EstLineRec.CalculateDiscount(TRUE);
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              EstLineRec."Purchase Discount %" := OldPurchDisc;
              EstLineRec."Sales Discount %" := OldSalesDisc;
              EstLineRec.CalculateGrossPrice;
            END;
          END;

          IF ActSubcPrice = TRUE THEN
            IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Subcontracting THEN  //C056716
              EstLineRec.GetSubcontractorActivity(-1);

          IF ActPlantPrice = TRUE THEN
            EstLineRec.DeterminePlantPrice;

          IF (ActDesc) AND (EstLineRec."Plant Type" <> '') AND
             (FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantTypeRec)) THEN
          BEGIN
            IF PlantTypeRec.GET(EstLineRec."Plant Type") THEN  //DP01208
              EstLineRec.Description := PlantTypeRec.Description;
          END;

          IF ActCostObject = FALSE THEN BEGIN
            EstLineRec."Cost Object Labor" := OldCostObjectLabor;
            EstLineRec."Cost Object Price" := OldCostObjectPrice;
            EstLineRec."Cost Component" := OldCostComponent;
          END;
          IF ActDesc = FALSE THEN
            EstLineRec.Description := OldDesc;
          EstLineRec.CalculateTotals;
          IF FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal) THEN BEGIN
            TmpEstLineRec := EstLineRec;
            TmpEstLineRec.INSERT;
          END;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        //EstRec.GET(RcpLineRec."Estimate No.");  //C013433 (problem with CheckEstFixed)
        REPEAT
          RecipeLineOriginal := RcpLineRec;
          CheckEstFixed(RcpLineRec."Estimate No.");

          OldCostObjectLabor := RcpLineRec."Cost Object Labor";
          OldCostObjectPrice := RcpLineRec."Cost Object Price";
          OldDesc := RcpLineRec.Description;
          OldCostComponent := RcpLineRec."Cost Component";
          OldGrossPrice := RcpLineRec."Gross Price";
          OldPurchDisc := RcpLineRec."Purchase Discount %";
          OldSalesDisc := RcpLineRec."Sales Discount %";

          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(RcpLineRec.Manufacturer, RcpLineRec."Vendor (Trade Item)",
                RcpLineRec."Item No.", RcpLineRec."Basic Item", RcpLineRec."Trade Item");
            IF SubOperNew <> '' THEN
              RcpLineRec.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              RcpLineRec.VALIDATE("Sub Operation Code");
            IF RcpLineRec."Sub Operation Code" <> '' THEN BEGIN  //db, 08-06-15: C020235
              IF SubOperRec.GET(RcpLineRec."Sub Operation Code") THEN BEGIN
                RcpLineRec.Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(RcpLineRec.Description));
                IF OperRec.GET(SubOperRec.Operation) THEN
                  IF OperRec."Cost Object" <> '' THEN
                    RcpLineRec."Cost Object Labor" := OperRec."Cost Object";
               END;
            END;
          END;
          IF ActPrice = TRUE THEN BEGIN
            OldRcpLineRec := RcpLineRec;
            IF RcpLineRec."Estimate No." <> EstRec."No." THEN
              EstRec.GET(RcpLineRec."Estimate No.");  //db, 02-09-16: C032756
            IF RcpLineRec."Trade Item" + RcpLineRec."Basic Item" + RcpLineRec."Item No." <> '' THEN BEGIN
              IF RcpLineRec."Trade Item" <> '' THEN
                ItemTypeOpt := ItemTypeOpt::"Trade Item"
              ELSE
                IF RcpLineRec."Basic Item" <> '' THEN
                  ItemTypeOpt := ItemTypeOpt::"Basic Item"
                ELSE
                  IF RcpLineRec."Item No." <> '' THEN
                    ItemTypeOpt := ItemTypeOpt::Item;
              IF (UpdateCostSales = UpdateCostSales::Cost) OR (UpdateCostSales = UpdateCostSales::Both) THEN
                RcpLineRec.CalcItemCostPriceAndDiscount(EstRec, ItemTypeOpt);
              IF (UpdateCostSales = UpdateCostSales::Sales) OR (UpdateCostSales = UpdateCostSales::Both) THEN
                RcpLineRec.CalcItemSalesPriceAndDiscount(EstRec);  //C014487
              IF (RcpLineRec."Gross Price" <> OldRcpLineRec."Gross Price") AND
                 (RcpLineRec."Net Sales Price" = OldRcpLineRec."Net Sales Price") THEN  //C013433
                IF (RcpLineRec."Gross Price" <> 0) THEN
                  RcpLineRec."Sales Discount %" :=
                    ((RcpLineRec."Gross Price" - RcpLineRec."Net Sales Price") / RcpLineRec."Gross Price") * 100;
            END;

            NewRcpLineRec := RcpLineRec;
            IF NewRcpLineRec."Unit of Measure" <> OldRcpLineRec."Unit of Measure" THEN BEGIN
              UnitOld := OldRcpLineRec."Unit of Measure";
              UnitNew := NewRcpLineRec."Unit of Measure";
              NewRcpLineRec."Unit of Measure" := UnitOld;
              OldRcpLineRec."Unit of Measure" := UnitNew;
              RcpLineRec.CheckItemUnitConversion(NewRcpLineRec, OldRcpLineRec);
              RcpLineRec."Unit of Measure" := UnitOld;
              RcpLineRec."Gross Price":= NewRcpLineRec."Gross Price";
              RcpLineRec."Net Cost Price":= NewRcpLineRec."Net Cost Price";
              RcpLineRec."Net Sales Price":= NewRcpLineRec."Net Sales Price";
            END;

            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              RcpLineRec."Purchase Discount %" := OldPurchDisc;
              RcpLineRec."Sales Discount %" := OldSalesDisc;
              RcpLineRec.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              RcpLineRec.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              IF (UpdateCostSales <> UpdateCostSales::Sales) THEN
                RcpLineRec.CalculateDiscount(FALSE);
              IF (UpdateCostSales <> UpdateCostSales::Cost) THEN
                RcpLineRec.CalculateDiscount(TRUE);
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              RcpLineRec."Purchase Discount %" := OldPurchDisc;
              RcpLineRec."Sales Discount %" := OldSalesDisc;
              RcpLineRec.CalculateGrossPrice;
            END;
          END;

          IF ActSubcPrice = TRUE THEN
            IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting THEN  //C056716
              RcpLineRec.GetSubcontractorActivity(-1);

          IF ActPlantPrice = TRUE THEN  //C036770
            RcpLineRec.DeterminePlantPrice;

          IF (ActDesc) AND (RcpLineRec."Plant Type" <> '') AND
             (FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantTypeRec)) THEN
          BEGIN
            IF PlantTypeRec.GET(RcpLineRec."Plant Type") THEN  //DP01208
              RcpLineRec.Description := PlantTypeRec.Description;
          END;

          IF ActCostObject = FALSE THEN BEGIN
            RcpLineRec."Cost Object Labor" := OldCostObjectLabor;
            RcpLineRec."Cost Object Price" := OldCostObjectPrice;
            RcpLineRec."Cost Component" := OldCostComponent;
          END;
          IF ActDesc = FALSE THEN
            RcpLineRec.Description := OldDesc;

          RcpLineRec.CalculateTotals;
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec := RcpLineRec;
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdatePriceWithPercentage@1210190003(VAR lvEstLineRec@1100485000 : Record 11072072;PercNormCost@1210190011 : Decimal;PercNormSales@1100528900 : Decimal;PercItemCost@1210190010 : Decimal;PercItemSales@1210190000 : Decimal;PercSubcCost@1100528901 : Decimal;PercSubcSales@1210190009 : Decimal;PercEqmtCost@1210190008 : Decimal;PercEqmtSales@1100528902 : Decimal;PercSundryCost@1100528904 : Decimal;PercSundrySales@1100528903 : Decimal);
    VAR
      PurchDisc@1100528905 : Decimal;
      SalesDisc@1100528906 : Decimal;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");
          IF PercNormCost <> 0 THEN
            EstLineRec.Norm := ROUND(EstLineRec.Norm * (100+PercNormCost)/100, 0.00001);
          IF PercNormSales <> 0 THEN
            EstLineRec."Norm (Sales)" := ROUND(EstLineRec."Norm (Sales)" * (100+PercNormSales)/100, 0.00001);

          PurchDisc := 0;
          SalesDisc := 0;
          IF (EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Material) THEN BEGIN
            PurchDisc := PercItemCost;
            SalesDisc := PercItemSales;
          END;
          IF (EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Subcontracting) THEN BEGIN
            PurchDisc := PercSubcCost;
            SalesDisc := PercSubcSales;
          END;
          IF (EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Plant) THEN BEGIN
            PurchDisc := PercEqmtCost;
            SalesDisc := PercEqmtSales;
          END;
          IF (EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Sundry) THEN BEGIN
            PurchDisc := PercSundryCost;
            SalesDisc := PercSundrySales;
          END;

          IF (PurchDisc <> 0) THEN BEGIN
            EstLineRec."Net Cost Price" := ROUND(EstLineRec."Net Cost Price" * (100+PurchDisc)/100, 0.00001);
            IF EstLineRec."Purchase Discount %" = 0 THEN BEGIN
              EstLineRec."Gross Price":= EstLineRec."Net Cost Price";
            END ELSE BEGIN
              IF EstLineRec."Gross Price" <> 0 THEN
                EstLineRec."Purchase Discount %" :=
                  ROUND(100 * (EstLineRec."Gross Price" - EstLineRec."Net Cost Price")/(EstLineRec."Gross Price"), 0.00001);
            END;
          END;
          IF (SalesDisc <> 0) THEN BEGIN
            EstLineRec."Net Sales Price" := ROUND(EstLineRec."Net Sales Price" * (100+SalesDisc)/100, 0.00001);
            IF EstLineRec."Sales Discount %" = 0 THEN BEGIN
            //EstLineRec."Gross Price":= EstLineRec."Net Sales Price";
            END ELSE BEGIN
              IF EstLineRec."Gross Price" <> 0 THEN
                EstLineRec."Sales Discount %" :=
                  ROUND(100 * (EstLineRec."Gross Price" - EstLineRec."Net Sales Price")/(EstLineRec."Gross Price"), 0.00001);
            END;
          END;

          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          IF PercNormCost <> 0 THEN
            RcpLineRec.Norm := ROUND(RcpLineRec.Norm * (100+PercNormCost)/100, 0.00001);
          IF PercNormSales <> 0 THEN
            RcpLineRec."Norm (Sales)" := ROUND(RcpLineRec."Norm (Sales)" * (100+PercNormSales)/100, 0.00001);

          PurchDisc := 0;
          SalesDisc := 0;
          IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Material) THEN BEGIN
            PurchDisc := PercItemCost;
            SalesDisc := PercItemSales;
          END;
          IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting) THEN BEGIN
            PurchDisc := PercSubcCost;
            SalesDisc := PercSubcSales;
          END;
          IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Plant) THEN BEGIN
            PurchDisc := PercEqmtCost;
            SalesDisc := PercEqmtSales;
          END;
          IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Sundry) THEN BEGIN
            PurchDisc := PercSundryCost;
            SalesDisc := PercSundrySales;
          END;

          IF PurchDisc <> 0 THEN BEGIN
            RcpLineRec."Net Cost Price" := ROUND(RcpLineRec."Net Cost Price" * (100+PurchDisc)/100, 0.00001);
            IF RcpLineRec."Purchase Discount %" = 0 THEN BEGIN
              RcpLineRec."Gross Price":= RcpLineRec."Net Cost Price";
            END ELSE BEGIN
              IF RcpLineRec."Gross Price" <> 0 THEN
                RcpLineRec."Purchase Discount %" :=
                  ROUND(100 * (RcpLineRec."Gross Price" - RcpLineRec."Net Cost Price")/(RcpLineRec."Gross Price"), 0.00001);
            END;
          END;
          IF SalesDisc <> 0 THEN BEGIN
            RcpLineRec."Net Sales Price" := ROUND(RcpLineRec."Net Sales Price" * (100+SalesDisc)/100, 0.00001);
            IF RcpLineRec."Sales Discount %" = 0 THEN BEGIN
            //RcpLineRec."Gross Price":= RcpLineRec."Net Sales Price";
            END ELSE BEGIN
              IF RcpLineRec."Gross Price" <> 0 THEN
                RcpLineRec."Sales Discount %" :=
                  ROUND(100 * (RcpLineRec."Gross Price" - RcpLineRec."Net Sales Price")/(RcpLineRec."Gross Price"), 0.00001);
            END;
          END;

          RcpLineRec.CalculateTotals;
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateRecipe@1100409002(VAR lvEstLineRec@1100409001 : Record 11072072;RecipeMethod@1100409002 : ' ,Update,Replace';UpdateCostSales@1100528900 : 'Cost,Sales,Both');
    VAR
      RecipeRec@1100409000 : Record 11020581;
    BEGIN
      //DP00258
      EstLineRec.COPY(lvEstLineRec);
      IF RecipeMethod = RecipeMethod::" " THEN EXIT;  //C049451

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.GETFILTER("Recipe Group") = '' THEN
        EstLineRec.SETFILTER("Recipe Group", '<>%1', '');
      IF EstLineRec.GETFILTER(Recipe) = '' THEN
        EstLineRec.SETFILTER(Recipe, '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");
          IF RecipeRec.GET(EstLineRec."Recipe Group", EstLineRec.Recipe) THEN  //C004367
            UpdateEstimateRecipe(EstLineRec, RecipeMethod, EstLineRec."Recipe Group", EstLineRec.Recipe, UpdateCostSales);  //C057728
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateEstimateRecipe@1100409003(EstLineRec@1100409001 : Record 11072072;RecipeMethod@1100409000 : ' ,Update,Replace';RecipeGroup@1100409002 : Code[20];RecipeCode@1100409003 : Code[20];UpdateCostSales@1100528900 : 'Cost,Sales,Both');
    VAR
      RcpLineRec@1100409011 : Record 11020582;
      EstRcpLineRec@1100409010 : Record 11072075;
      EstRcpLineRec2@1100409009 : Record 11072075;
      EstRcpLineRec3@1100409008 : Record 11072075;
      LastLino@1100409004 : Integer;
    BEGIN
      //DP00258
      IF RecipeMethod = RecipeMethod::Replace THEN BEGIN
        EstLineRec.Recipe := '';
        EstLineRec.VALIDATE(Recipe, RecipeCode);
        EstLineRec.MODIFY;
      END ELSE BEGIN
        RcpLineRec.SETRANGE("Recipe Group", RecipeGroup);
        RcpLineRec.SETRANGE(Recipe, RecipeCode);
        IF RcpLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            EstRcpLineRec.RESET;
            EstRcpLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
            EstRcpLineRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
            EstRcpLineRec.SETRANGE("Part Group", EstLineRec."Part Group");
            EstRcpLineRec.SETRANGE(Part, EstLineRec.Part);
            EstRcpLineRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
            IF RcpLineRec."Trade Item" <> '' THEN BEGIN
              EstRcpLineRec.SETRANGE("Vendor (Trade Item)", RcpLineRec."Vendor (Trade Item)");
              EstRcpLineRec.SETRANGE("Trade Item", RcpLineRec."Trade Item");
            END ELSE BEGIN
              IF RcpLineRec."Basic Item" <> '' THEN BEGIN
                EstRcpLineRec.SETRANGE(Manufacturer, RcpLineRec.Manufacturer);
                EstRcpLineRec.SETRANGE("Basic Item", RcpLineRec."Basic Item");
                EstRcpLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                EstRcpLineRec.SETFILTER("Trade Item", '%1', '');
              END ELSE BEGIN
                IF RcpLineRec."Item No." <> '' THEN BEGIN
                  EstRcpLineRec.SETRANGE("Item No.", RcpLineRec."Item No.");
                END ELSE BEGIN
                  EstRcpLineRec.SETRANGE(Description, RcpLineRec.Description);
                END;
              END;
            END;
            //C049451.sn
            //in case of several lines with same item and different sub-operation all lines got norm of last base recipe line within selection
            IF (RcpLineRec."Trade Item" + RcpLineRec."Basic Item" + RcpLineRec."Item No." <> '') THEN
              EstRcpLineRec.SETRANGE("Sub Operation Code", RcpLineRec."Sub Operation Code");
            //C049451.en
            IF EstRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                EstRcpLineRec.Description := RcpLineRec.Description;
                IF (EstRcpLineRec."Recipe Header" = TRUE) THEN BEGIN
                  EstRcpLineRec."Cost Type (Price)" := RcpLineRec."Cost Type (Price)"::" ";  //C012356 (repair bug)
                END ELSE BEGIN
                  IF (EstRcpLineRec."Recipe (Child)" = RcpLineRec."Recipe (Child)") THEN BEGIN  //C012356
                    EstRcpLineRec."Cost Type (Price)" := RcpLineRec."Cost Type (Price)";  //DP00381
                    //C057728.sn
                    IF UpdateCostSales <> UpdateCostSales::Sales THEN BEGIN
                      IF RcpLineRec."Norm Group" <> '' THEN
                        EstRcpLineRec."Norm Group" := RcpLineRec."Norm Group";
                      IF RcpLineRec."Sub Operation Code" <> '' THEN
                        EstRcpLineRec.VALIDATE("Sub Operation Code", RcpLineRec."Sub Operation Code");  //calc.norm
                      IF RcpLineRec.Norm <> 0 THEN
                        EstRcpLineRec.Norm := RcpLineRec.Norm;
                      EstRcpLineRec."Gross Price" := RcpLineRec."Gross Price";
                      EstRcpLineRec."Purchase Discount %" := RcpLineRec."Purchase Discount %";
                      EstRcpLineRec."Net Cost Price" := RcpLineRec."Net Cost Price";
                    END;
                    IF UpdateCostSales <> UpdateCostSales::Cost THEN BEGIN
                      EstRcpLineRec."Sales Discount %" := RcpLineRec."Sales Discount %";
                      EstRcpLineRec."Net Sales Price" := RcpLineRec."Net Sales Price";
                      IF RcpLineRec."Surcharge % Labor" <> 0 THEN
                        EstRcpLineRec."Surcharge % Labor" := RcpLineRec."Surcharge % Labor";
                      IF RcpLineRec."Surcharge % Price" <> 0 THEN
                        EstRcpLineRec."Surcharge % Price" := RcpLineRec."Surcharge % Price";
                    END;
                    IF (RcpLineRec."Surcharge %" <> 0) AND (RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" ") THEN
                      EstRcpLineRec."Surcharge %" := RcpLineRec."Surcharge %";
                    IF RcpLineRec."Cost Object Labor" <> '' THEN
                      EstRcpLineRec."Cost Object Labor" := RcpLineRec."Cost Object Labor";
                    IF RcpLineRec."Cost Object Price" <> '' THEN
                      EstRcpLineRec."Cost Object Price" := RcpLineRec."Cost Object Price";
                    IF RcpLineRec."Cost Component" <> '' THEN
                      EstRcpLineRec."Cost Component" := RcpLineRec."Cost Component";
                    //C057728.en
                  END;
                END;
                EstRcpLineRec.CalculateTotals;
                EstRcpLineRec.MODIFY;
                EstRcpLineRec.UpdateEstLines;
              UNTIL EstRcpLineRec.NEXT = 0;
            END ELSE BEGIN
              EstRcpLineRec2.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
              EstRcpLineRec2.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
              EstRcpLineRec2.SETRANGE("Part Group", EstLineRec."Part Group");
              EstRcpLineRec2.SETRANGE(Part, EstLineRec.Part);
              EstRcpLineRec2.SETRANGE("Estimate Line", EstLineRec."Line No.");
              IF EstRcpLineRec2.FINDLAST THEN
                LastLino := EstRcpLineRec2."Line No."
              ELSE
                LastLino := 0;

              EstRcpLineRec2.TRANSFERFIELDS(RcpLineRec);  //DP00381
              EstRcpLineRec2."Estimate No." := EstLineRec."Estimate No.";
              EstRcpLineRec2."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
              EstRcpLineRec2."Part Group" := EstLineRec."Part Group";
              EstRcpLineRec2.Part := EstLineRec.Part;
              EstRcpLineRec2."Estimate Line" := EstLineRec."Line No.";
              EstRcpLineRec2."Line No." := LastLino + 10000;
              LastLino := EstRcpLineRec2."Line No.";
              EstRcpLineRec2.Quantity := 0;
              EstRcpLineRec2.INSERT(TRUE);  //db, 12-10-18: get default rate
              //C057728.sn
              IF RcpLineRec."Sub Operation Code" <> '' THEN
                EstRcpLineRec2.VALIDATE("Sub Operation Code", RcpLineRec."Sub Operation Code");  //calc.norm
              EstRcpLineRec2.CalculateTotals;
              EstRcpLineRec2.MODIFY;
              //C057728.en
            END;
          UNTIL RcpLineRec.NEXT = 0;
        END;
        EstRcpLineRec3.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
        EstRcpLineRec3.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
        EstRcpLineRec3.SETRANGE("Part Group", EstLineRec."Part Group");
        EstRcpLineRec3.SETRANGE(Part, EstLineRec.Part);
        EstRcpLineRec3.SETRANGE("Estimate Line", EstLineRec."Line No.");
        EstRcpLineRec3.SETFILTER("Recipe (Child)", '<>%1', '');
        EstRcpLineRec3.SETRANGE("Recipe Exploded", FALSE);  //C039861
        IF EstRcpLineRec3.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            EstRcpLineRec3.VALIDATE("Recipe (Child)");
            EstRcpLineRec3.MODIFY;
            EstRcpLineRec3.UpdateEstLines;
          UNTIL EstRcpLineRec3.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateCode@1210190016(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];CurrCode@1210190002 : Code[20]);
    BEGIN
      ClearTmpTables;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        EstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        EstLineRec.SETFILTER(Part, CurrPart);
      EstLineRec.SETFILTER(Recipe, '%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          EstLineRec.Code := GetCode(FALSE);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      RcpLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        RcpLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        RcpLineRec.SETFILTER(Part, CurrPart);
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          RcpLineRec.Code := GetCode(TRUE);
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      {
      //db, 26-06-15: update logbook not relevant for changing code; update problem when called from Estimate.
      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;
      }
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateTotals@1100485000(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];UseDialog@1210190004 : Boolean);
    VAR
      lvSubEstRec@1100485000 : Record 11072074;
      EstimatePart@1100528900 : Record 11072073;
      EstimateLineOriginal@1210190002 : Record 11072072;
      RecipeLineOriginal@1210190005 : Record 11072075;
      EstimateLine@1100409001 : Record 11072072;
      RecipeLine@1100409000 : Record 11072075;
      EstLineTotal@1100409002 : Record 11072077;
    BEGIN
      gvUseDialog := UseDialog;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      //db.sn, 20-02-15: C021576
      EstLineTotal.SETFILTER("Estimate No.", CurrEst);
      EstLineTotal.SETFILTER("Sub-Estimate No.", CurrSubEst);
      EstLineTotal.SETFILTER(Part, CurrPart);
      EstLineTotal.SETRANGE("Line Exist", FALSE);
      EstLineTotal.DELETEALL;
      //db.en, 20-02-15: C021576

      IF CurrPart = '' THEN BEGIN  //C039691
        lvSubEstRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          lvSubEstRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        IF lvSubEstRec.FINDSET THEN BEGIN
          //take care: this function uses same dialog-window and tmp-tables
          REPEAT
            //update Cumulative Adjustment Factors:
            ResetAdjustmentFactor(lvSubEstRec."Estimate No.", lvSubEstRec."Sub-Estimate No.", '', '', 0,
              UseDialog, 1, 0, 0);
          UNTIL lvSubEstRec.NEXT = 0;
        END;
      END ELSE BEGIN
        //C039691.sn
        EstimatePart.SETRANGE("Estimate No.", CurrEst);
        EstimatePart.SETRANGE("Sub-Estimate No.", CurrSubEst);
        EstimatePart.SETRANGE(Part, CurrPart);
        IF EstimatePart.FINDSET THEN BEGIN
          //take care: this function uses same dialog-window and tmp-tables
          REPEAT
            //update Cumulative Adjustment Factors:
            ResetAdjustmentFactor(EstimatePart."Estimate No.", EstimatePart."Sub-Estimate No.",
              EstimatePart."Part Group", EstimatePart.Part, 0,
              UseDialog, 2, 0, 0);
          UNTIL EstimatePart.NEXT = 0;
        END;
        //C039691.en
      END;

      ClearTmpTables;
      IF UseDialog THEN BEGIN
        Status.OPEN(Text011);
        Status.UPDATE(1, lvSubEstRec.TABLECAPTION);
      END;

      IF CurrPart = '' THEN BEGIN  //C039691
        lvSubEstRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          lvSubEstRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        IF lvSubEstRec.FINDSET THEN BEGIN
          currec := 0;
          maxrec := lvSubEstRec.COUNT;
          REPEAT
            //update Cumulative Frequency; skip calculate estimate lines
            lvSubEstRec.ProcessFrequency(lvSubEstRec."Estimate No.", lvSubEstRec."Sub-Estimate No.", FALSE);
            currec := currec + 1;
            IF UseDialog THEN
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL lvSubEstRec.NEXT = 0;
        END;
      END;

      IF UseDialog THEN
        Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        EstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        EstLineRec.SETFILTER(Part, CurrPart);
      EstLineRec.SETFILTER(Recipe, '%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          EstimateLineOriginal := EstLineRec;
          IF EstLineRec."Rate Code" <> '' THEN BEGIN
            EstRateRec.GET(EstLineRec."Estimate No.", EstLineRec."Rate Code");
            EstLineRec."Cost Rate" := EstRateRec."Cost Rate";
            EstLineRec."Sales Rate" := EstRateRec."Sales Rate";  //C012973
            EstLineRec."Rate Type" := EstRateRec."Rate Type";
            EstLineRec."Team Size" := EstRateRec."Team Size";
          END;
          IF EstLineRec."Currency Code" <> '' THEN
            EstLineRec.VALIDATE("Currency Code");  //C054524

          //includes update Part Quantity and functions UpdateRecipeTotals, CalculateTotals:
          EstLineRec.SetFromUpdateTotals(TRUE);  //db, 26-02-15: C021215
          EstLineRec.VALIDATE(Quantity);
          EstLineRec.SetFromUpdateTotals(FALSE);  //db, 26-02-15: C021215
          IF FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal) THEN BEGIN
            TmpEstLineRec := EstLineRec;
            TmpEstLineRec.INSERT;
          END;
          currec := currec + 1;
          IF UseDialog THEN
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      IF UseDialog THEN
        Status.UPDATE(1,Text013);

      RcpLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        RcpLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        RcpLineRec.SETFILTER(Part, CurrPart);
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          RecipeLineOriginal := RcpLineRec;
          IF RcpLineRec."Rate Code" <> '' THEN BEGIN
            EstRateRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Rate Code");
            RcpLineRec."Cost Rate" := EstRateRec."Cost Rate";
            RcpLineRec."Sales Rate" := EstRateRec."Sales Rate";  //C012973
            RcpLineRec."Rate Type" := EstRateRec."Rate Type";
            RcpLineRec."Team Size" := EstRateRec."Team Size";
          END;
          IF RcpLineRec."Currency Code" <> '' THEN
            RcpLineRec.VALIDATE("Currency Code");  //C054524

          RcpLineRec.SetFromUpdateTotals(TRUE);  //db, 26-02-15: C021215
          RcpLineRec.VALIDATE(Quantity);
          RcpLineRec.SetFromUpdateTotals(FALSE);  //db, 26-02-15: C021215
          IF FORMAT(RcpLineRec) <> FORMAT(RecipeLineOriginal) THEN BEGIN
            TmpRcpLineRec := RcpLineRec;
            TmpRcpLineRec.INSERT;
          END;
          currec := currec + 1;
          IF UseDialog THEN
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      //C005089.sn
      //- missing check diff EstLine-RcpLine, due to check on recordchange by format
      //- add at least 1 line for each recipe in Tmp-file to activate function CheckUpdateTotal
      EstimateLine.COPY(EstLineRec);
      EstimateLine.SETFILTER(Recipe, '<>%1', '');
      IF EstimateLine.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLine.COUNT;
        REPEAT
          TmpRcpLineRec.SETRANGE("Estimate No.", EstimateLine."Estimate No.");
          TmpRcpLineRec.SETRANGE("Sub-Estimate No.", EstimateLine."Sub-Estimate No.");
          TmpRcpLineRec.SETRANGE("Part Group", EstimateLine."Part Group");
          TmpRcpLineRec.SETRANGE(Part, EstimateLine.Part);
          TmpRcpLineRec.SETRANGE("Estimate Line", EstimateLine."Line No.");
          IF NOT TmpRcpLineRec.FINDFIRST THEN BEGIN
            RecipeLine.COPY(TmpRcpLineRec);
            IF RecipeLine.FINDFIRST THEN BEGIN
              TmpRcpLineRec := RecipeLine;
              TmpRcpLineRec.INSERT;
            END;
          END;
          currec := currec + 1;
          IF UseDialog THEN
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLine.NEXT = 0;
      END;
      TmpRcpLineRec.RESET;  //C015798
      //C005089.en

      UpdateFromTmp;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.SetSkipStatusWarning(TRUE);   //C032265 (ignore check status; force update date-time)
          EstRec.SetDateTimeRecalculated(CurrSubEst+CurrPart='');  //DP02080
          EstRec.UpdateLogbook(EstRec."No.");
          EstRec.SetDateTimeRecalculated(FALSE);  //DP02080
          EstRec.SetSkipStatusWarning(FALSE);  //C032265
          //db, 22-01-19: synchronise date/time Part after UpdateLogbook (Estimate)
          CreateAdditionalCost(EstRec."No.", CurrSubEst, CurrPart);  //DP02080
          UpdateDateTimeRecalculated(EstRec."No.", CurrSubEst, CurrPart);  //C057346
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      IF UseDialog THEN
        Status.CLOSE;
    END;

    PROCEDURE UpdateDiscountWithPercentage@1100485004(VAR lvEstLineRec@1100485001 : Record 11072072;iPercCost@1210190011 : Decimal;iPercSales@1100528900 : Decimal;DiscMethod@1100485000 : 'Replace,Add,Increase';UpdateCostSales@1100528901 : 'Cost,Sales,Both');
    VAR
      PurchDisc@1100525000 : Decimal;
      SalesDisc@1100528902 : Decimal;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          IF EstLineRec."Gross Price" <> 0 THEN BEGIN
            CheckEstFixed(EstLineRec."Estimate No.");
            CASE DiscMethod OF
              DiscMethod::Replace:
                BEGIN
                  PurchDisc := iPercCost;
                  SalesDisc := iPercSales;
                END;
              DiscMethod::Add:
                BEGIN
                  PurchDisc := EstLineRec."Purchase Discount %" + iPercCost;
                  SalesDisc := EstLineRec."Sales Discount %" + iPercSales;
                END;
              DiscMethod::Increase:
                BEGIN
                  PurchDisc := EstLineRec."Purchase Discount %" * (100+iPercCost)/100;
                  SalesDisc := EstLineRec."Sales Discount %" * (100+iPercSales)/100;
                END;
            END;
            IF UpdateCostSales <> UpdateCostSales::Sales THEN BEGIN
              IF PurchDisc < 0 THEN PurchDisc := 0;
              IF PurchDisc > 100 THEN PurchDisc := 100;
              EstLineRec.VALIDATE("Purchase Discount %", PurchDisc);
            END;
            IF UpdateCostSales <> UpdateCostSales::Cost THEN BEGIN
              IF SalesDisc < 0 THEN SalesDisc := 0;
              IF SalesDisc > 100 THEN SalesDisc := 100;
              EstLineRec.VALIDATE("Sales Discount %", SalesDisc);
            END;
          END;

          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          IF RcpLineRec."Gross Price" <> 0 THEN BEGIN
            CheckEstFixed(RcpLineRec."Estimate No.");
            CASE DiscMethod OF
              DiscMethod::Replace:
                BEGIN
                  PurchDisc := iPercCost;
                  SalesDisc := iPercSales;
                END;
              DiscMethod::Add:
                BEGIN
                  PurchDisc := RcpLineRec."Purchase Discount %" + iPercCost;
                  SalesDisc := RcpLineRec."Sales Discount %" + iPercSales;
                END;
              DiscMethod::Increase:
                BEGIN
                  PurchDisc := RcpLineRec."Purchase Discount %" * (100+iPercCost)/100;
                  SalesDisc := RcpLineRec."Sales Discount %" * (100+iPercSales)/100;
                END;
            END;
            IF UpdateCostSales <> UpdateCostSales::Sales THEN BEGIN
              IF PurchDisc < 0 THEN PurchDisc := 0;
              IF PurchDisc > 100 THEN PurchDisc := 100;
              RcpLineRec.VALIDATE("Purchase Discount %", PurchDisc);
            END;
            IF UpdateCostSales <> UpdateCostSales::Cost THEN BEGIN
              IF SalesDisc < 0 THEN SalesDisc := 0;
              IF SalesDisc > 100 THEN SalesDisc := 100;
              RcpLineRec.VALIDATE("Sales Discount %", SalesDisc);
            END;
          END;

          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateExchangeRate@1100528903(CurrEst@1100528900 : Code[20]);
    BEGIN
      //C054524
      EstRec.GET(CurrEst);
      UpdateEstimateRates(EstRec."No.", EstRec."Currency Code");
      UpdateTotals(EstRec."No.", '', '', TRUE);
    END;

    PROCEDURE DetermineRemovalContribution@1100485002(lvAction@1100485014 : Integer;CurrEst@1100485011 : Code[20];CurrSubEst@1100485008 : Code[20];CurrPartGrp@1100485007 : Code[20];CurrPart@1100485006 : Code[20];CurrRcpGrp@1100485013 : Code[20];CurrRcp@1100485012 : Code[20]);
    VAR
      lvEstLineRec@1100485003 : Record 11072072;
      lvEstLineRec2@1100485002 : Record 11072072;
      lvEstRcpLineRec@1100485009 : Record 11072075;
      lvEstRcpLineRec2@1100485010 : Record 11072075;
      lvBaseRcpLineRec@1100528901 : Record 11020582;
      lvBaseRcpLineRec2@1100528900 : Record 11020582;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      SalesReceivablesSetup@1100525000 : Record 311;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
    BEGIN
      //lvAction: 0=complete Estimate (1+3); 1=EstPart (based on EstLine); 2=BaseRcpLine; 3=EstRcpLine;

      //db.sn, 08-07-16: C032070
      IF (lvAction = 0) OR (lvAction = 1) THEN BEGIN
        lvEstLineRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          lvEstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          lvEstLineRec.SETFILTER("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          lvEstLineRec.SETFILTER(Part, CurrPart);
        lvEstLineRec.SETFILTER(Recipe, '%1', '');
        lvEstLineRec.SETRANGE("Removal Contribution", TRUE);
        lvEstLineRec.DELETEALL(TRUE);
      END;
      //
      IF (lvAction = 0) OR (lvAction = 3) THEN BEGIN
        IF CurrEst <> '' THEN
          lvEstRcpLineRec.SETFILTER("Estimate No.", CurrEst)
        ELSE
          lvEstRcpLineRec.SETFILTER("Estimate No.", '%1', '');
        IF CurrSubEst <> '' THEN
          lvEstRcpLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          lvEstRcpLineRec.SETFILTER("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          lvEstRcpLineRec.SETFILTER(Part, CurrPart);
        IF CurrRcpGrp <> '' THEN
          lvEstRcpLineRec.SETFILTER("Recipe Group", CurrRcpGrp);
        IF CurrRcp <> '' THEN
          lvEstRcpLineRec.SETFILTER(Recipe, CurrRcp);
        lvEstRcpLineRec.SETRANGE("Removal Contribution", TRUE);
        lvEstRcpLineRec.DELETEALL(TRUE);
      END;
      //
      IF (lvAction = 2) THEN BEGIN
        lvBaseRcpLineRec.SETFILTER("Recipe Group", CurrRcpGrp);
        IF CurrRcp <> '' THEN
          lvBaseRcpLineRec.SETFILTER(Recipe, CurrRcp);
        lvBaseRcpLineRec.SETRANGE("Removal Contribution", TRUE);
        lvBaseRcpLineRec.DELETEALL(TRUE);
      END;
      //
      SalesReceivablesSetup.GET;
      IF SalesReceivablesSetup."Charge Removal Contribution" = FALSE THEN
        EXIT;
      //db.en, 08-07-16: C032070

      IF (lvAction = 0) OR (lvAction = 1) THEN BEGIN
        lvEstLineRec.SETRANGE("Removal Contribution");
        IF lvEstLineRec.FINDSET THEN BEGIN
          REPEAT
            lvCostObject := '';
            lvRemovalContribution := 0;

            IF lvEstLineRec."Item No." <> '' THEN BEGIN
              IF lvItemRec.GET(lvEstLineRec."Item No.") THEN BEGIN
                lvCostObject := lvItemRec."Cost Object (Removal)";
                lvRemovalContribution := lvItemRec."Removal Contribution";
                IF lvRemovalContribution <> 0 THEN
                  lvItemRec.TESTFIELD("Cost Object (Removal)");
              END;
            END;

            IF lvEstLineRec."Trade Item" <> '' THEN BEGIN
              IF lvTradeItemRec.GET(lvEstLineRec."Vendor (Trade Item)", lvEstLineRec."Trade Item") THEN BEGIN
                lvCostObject := lvTradeItemRec."Cost Object (Removal)";
                lvRemovalContribution := lvTradeItemRec."Removal Contribution";
                IF lvRemovalContribution <> 0 THEN
                  lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
              END;
            END;

            IF lvRemovalContribution <> 0 THEN BEGIN
              lvEstLineRec2.INIT;
              lvEstLineRec2."Estimate No." := lvEstLineRec."Estimate No.";
              lvEstLineRec2.VALIDATE("Sub-Estimate No.", lvEstLineRec."Sub-Estimate No.");
              lvEstLineRec2."Part Group" := lvEstLineRec."Part Group";
              lvEstLineRec2.VALIDATE(Part, lvEstLineRec.Part);
              lvEstLineRec2.InitRecord;
              lvEstLineRec2."Line No." := lvEstLineRec."Line No.";
              REPEAT
                lvEstLineRec2."Line No." := lvEstLineRec2."Line No." + 1;
              UNTIL lvEstLineRec2.INSERT;

              DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, '');
              CASE DimValRec."Cost Type" OF
                DimValRec."Cost Type"::Material,
                DimValRec."Cost Type"::Subcontracting,
                DimValRec."Cost Type"::Plant,
                DimValRec."Cost Type"::Sundry:
                  BEGIN
                    lvEstLineRec2."Cost Type (Price)" := DimValRec."Cost Type";
                    lvEstLineRec2."Cost Object Price" := lvCostObject;
                    lvEstLineRec2.VALIDATE("Net Cost Price", lvRemovalContribution);
                  END;
                ELSE
                  DimValRec.FIELDERROR("Cost Type");
              END;
              //C013892.sn
              lvEstLineRec2."Time Quantity" := lvEstLineRec."Time Quantity";
              lvEstLineRec2."Unit of Time" := lvEstLineRec."Unit of Time";
              lvEstLineRec2."Line Status" := lvEstLineRec."Line Status";
              lvEstLineRec2."Cost Component" := lvEstLineRec."Cost Component";
              lvEstLineRec2.Discipline := lvEstLineRec.Discipline;
              lvEstLineRec2."Trade Speciality" := lvEstLineRec."Trade Speciality";
              lvEstLineRec2."Trade Expertise" := lvEstLineRec."Trade Expertise";
              //C013892.en
              lvEstLineRec2.Description := DimValRec.Name;
              lvEstLineRec2."Unit of Measure" := DimValRec."Unit of Measure";
              lvEstLineRec2.VALIDATE(Quantity, lvEstLineRec.Quantity);
              lvEstLineRec2."Removal Contribution" := TRUE;
              //lvEstLineRec2."Additional Cost (Service)" := lvEstLineRec."Additional Cost (Service)";
              lvEstLineRec2.MODIFY(TRUE);
            END;
          UNTIL lvEstLineRec.NEXT = 0;
        END;
      END;

      IF (lvAction = 0) OR (lvAction = 3) THEN BEGIN  //DP00381
        lvEstRcpLineRec.SETRANGE("Removal Contribution");
        IF lvEstRcpLineRec.FINDSET THEN BEGIN
          REPEAT
            lvCostObject := '';
            lvRemovalContribution := 0;

            IF lvEstRcpLineRec."Item No." <> '' THEN BEGIN
              IF lvItemRec.GET(lvEstRcpLineRec."Item No.") THEN BEGIN
                lvCostObject := lvItemRec."Cost Object (Removal)";
                lvRemovalContribution := lvItemRec."Removal Contribution";
                IF lvRemovalContribution <> 0 THEN
                  lvItemRec.TESTFIELD("Cost Object (Removal)");
              END;
            END;

            IF lvEstRcpLineRec."Trade Item" <> '' THEN BEGIN
              IF lvTradeItemRec.GET(lvEstRcpLineRec."Vendor (Trade Item)", lvEstRcpLineRec."Trade Item") THEN BEGIN
                lvCostObject := lvTradeItemRec."Cost Object (Removal)";
                lvRemovalContribution := lvTradeItemRec."Removal Contribution";
                IF lvRemovalContribution <> 0 THEN
                  lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
              END;
            END;

            IF lvRemovalContribution <> 0 THEN BEGIN
              lvEstRcpLineRec2.INIT;
              lvEstRcpLineRec2."Estimate No." := lvEstRcpLineRec."Estimate No.";
              lvEstRcpLineRec2.VALIDATE("Sub-Estimate No.", lvEstRcpLineRec."Sub-Estimate No.");
              lvEstRcpLineRec2."Part Group" := lvEstRcpLineRec."Part Group";
              lvEstRcpLineRec2.VALIDATE(Part, lvEstRcpLineRec.Part);
              lvEstRcpLineRec2.InitRecord;
              lvEstRcpLineRec2."Estimate Line" := lvEstRcpLineRec."Estimate Line";
              lvEstRcpLineRec2."Recipe Group" := lvEstRcpLineRec."Recipe Group";
              lvEstRcpLineRec2.Recipe := lvEstRcpLineRec.Recipe;
              lvEstRcpLineRec2."Line No." := lvEstRcpLineRec."Line No.";
              REPEAT
                lvEstRcpLineRec2."Line No." := lvEstRcpLineRec2."Line No." + 1;
              UNTIL lvEstRcpLineRec2.INSERT;

              DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, '');
              CASE DimValRec."Cost Type" OF
                DimValRec."Cost Type"::Material,
                DimValRec."Cost Type"::Subcontracting,
                DimValRec."Cost Type"::Plant,
                DimValRec."Cost Type"::Sundry:
                  BEGIN
                    lvEstRcpLineRec2."Cost Type (Price)" := DimValRec."Cost Type";
                    lvEstRcpLineRec2."Cost Object Price" := lvCostObject;
                    lvEstRcpLineRec2.VALIDATE("Net Cost Price", lvRemovalContribution);
                  END;
                ELSE
                  DimValRec.FIELDERROR("Cost Type");
              END;
              //C013892.sn
              lvEstRcpLineRec2."Time Quantity" := lvEstRcpLineRec."Time Quantity";
              lvEstRcpLineRec2."Unit of Time" := lvEstRcpLineRec."Unit of Time";
              lvEstRcpLineRec2."Line Status" := lvEstRcpLineRec."Line Status";
              lvEstRcpLineRec2."Cost Component" := lvEstRcpLineRec."Cost Component";
              lvEstRcpLineRec2.Discipline := lvEstRcpLineRec.Discipline;
              lvEstRcpLineRec2."Trade Speciality" := lvEstRcpLineRec."Trade Speciality";
              lvEstRcpLineRec2."Trade Expertise" := lvEstRcpLineRec."Trade Expertise";
              //C013892.en
              lvEstRcpLineRec2.Description := DimValRec.Name;
              lvEstRcpLineRec2."Unit of Measure" := DimValRec."Unit of Measure";
              lvEstRcpLineRec2.VALIDATE(Quantity, lvEstRcpLineRec.Quantity);
              lvEstRcpLineRec2."Removal Contribution" := TRUE;
              //lvEstRcpLineRec2."Additional Cost (Service)" := lvEstRcpLineRec."Additional Cost (Service)";
              lvEstRcpLineRec2.MODIFY(TRUE);
              lvEstRcpLineRec2.UpdateEstLines;
            END;
          UNTIL lvEstRcpLineRec.NEXT = 0;
        END;
      END;

      IF (lvAction = 2) THEN BEGIN  //DP00381
        lvBaseRcpLineRec.SETRANGE("Removal Contribution");
        IF lvBaseRcpLineRec.FINDSET THEN BEGIN
          REPEAT
            lvCostObject := '';
            lvRemovalContribution := 0;

            IF lvBaseRcpLineRec."Item No." <> '' THEN BEGIN
              IF lvItemRec.GET(lvBaseRcpLineRec."Item No.") THEN BEGIN
                lvCostObject := lvItemRec."Cost Object (Removal)";
                lvRemovalContribution := lvItemRec."Removal Contribution";
                IF lvRemovalContribution <> 0 THEN
                  lvItemRec.TESTFIELD("Cost Object (Removal)");
              END;
            END;

            IF lvBaseRcpLineRec."Trade Item" <> '' THEN BEGIN
              IF lvTradeItemRec.GET(lvBaseRcpLineRec."Vendor (Trade Item)", lvBaseRcpLineRec."Trade Item") THEN BEGIN
                lvCostObject := lvTradeItemRec."Cost Object (Removal)";
                lvRemovalContribution := lvTradeItemRec."Removal Contribution";
                IF lvRemovalContribution <> 0 THEN
                  lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
              END;
            END;

            IF lvRemovalContribution <> 0 THEN BEGIN
              lvBaseRcpLineRec2.INIT;
              lvBaseRcpLineRec2."Recipe Group" := lvBaseRcpLineRec."Recipe Group";
              lvBaseRcpLineRec2.Recipe := lvBaseRcpLineRec.Recipe;
              lvBaseRcpLineRec2."Line No." := lvBaseRcpLineRec."Line No.";
              REPEAT
                lvBaseRcpLineRec2."Line No." := lvBaseRcpLineRec2."Line No." + 1;
              UNTIL lvBaseRcpLineRec2.INSERT;

              DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, '');
              CASE DimValRec."Cost Type" OF
                DimValRec."Cost Type"::Material,
                DimValRec."Cost Type"::Subcontracting,
                DimValRec."Cost Type"::Plant,
                DimValRec."Cost Type"::Sundry:
                  BEGIN
                    lvBaseRcpLineRec2."Cost Type (Price)" := DimValRec."Cost Type";
                    lvBaseRcpLineRec2."Cost Object Price" := lvCostObject;
                    lvBaseRcpLineRec2.VALIDATE("Net Cost Price", lvRemovalContribution);
                  END;
                ELSE
                  DimValRec.FIELDERROR("Cost Type");
              END;
              lvBaseRcpLineRec2.Description := DimValRec.Name;
              lvBaseRcpLineRec2."Unit of Measure" := DimValRec."Unit of Measure";
              lvBaseRcpLineRec2.VALIDATE(Quantity, lvBaseRcpLineRec.Quantity);
              lvBaseRcpLineRec2."Removal Contribution" := TRUE;
              //lvBaseRcpLineRec2."Additional Cost (Service)" := lvBaseRcpLineRec."Additional Cost (Service)";
              lvBaseRcpLineRec2.MODIFY(TRUE);
            END;
          UNTIL lvBaseRcpLineRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateAdditionalCost@1100525010(CurrEst@1100525000 : Code[20];CurrSubEst@1100528501 : Code[20];CurrPart@1100528913 : Code[20]);
    VAR
      EstimateSetup@1100528505 : Record 11012150;
      Estimate@1100528504 : Record 11012151;
      SubEstimate@1100528500 : Record 11072074;
      EstimatePart@1100528900 : Record 11072073;
      EstimateLine@1100528502 : Record 11072072;
      CostTotal@1100528901 : Decimal;
      SalesTotal@1100528902 : Decimal;
      BaseAmountCost@1100528917 : ARRAY [3] OF Decimal;
      BaseAmountSales@1100528912 : ARRAY [3] OF Decimal;
    BEGIN
      //DP02080
      EstimateSetup.GET;
      Estimate.GET(CurrEst);
      IF Estimate."Surcharge Method" = Estimate."Surcharge Method"::Summary THEN EXIT;
      IF Estimate."Surcharge Method" <> Estimate."Surcharge Method"::"Surcharge By Part" THEN
        CurrPart := '';  //disable selection on marked record;Surcharges stored in predefined Part

      IF (Estimate."Percentage (GeneralCost)" <> 0) THEN
        EstimateSetup.TESTFIELD("Cost Object (GeneralCost)");
      IF (Estimate."Percentage (Profit/Risk)") <> 0 THEN
        EstimateSetup.TESTFIELD("Cost Object (Profit/Risk)");
      IF (Estimate."Percentage (ExecutionCost)" <> 0) THEN
        EstimateSetup.TESTFIELD("Cost Object (ExecutionCost)");

      SubEstimate.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        SubEstimate.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF SubEstimate.FINDSET THEN BEGIN
        REPEAT
          CLEAR(BaseAmountCost);
          CLEAR(BaseAmountSales);

          EstimateLine.SETRANGE("Estimate No.", SubEstimate."Estimate No.");
          EstimateLine.SETRANGE("Sub-Estimate No.", SubEstimate."Sub-Estimate No.");
          IF CurrPart <> '' THEN
            EstimateLine.SETRANGE(Part, CurrPart);
          EstimateLine.SETRANGE("Summary Line", TRUE);
          EstimateLine.DELETEALL(TRUE);

          EstimatePart.SETRANGE("Estimate No.", SubEstimate."Estimate No.");
          EstimatePart.SETRANGE("Sub-Estimate No.", SubEstimate."Sub-Estimate No.");
          IF CurrPart <> '' THEN
            EstimatePart.SETRANGE(Part, CurrPart);
          IF EstimatePart.FINDSET THEN BEGIN
            REPEAT
              EstimatePart.CALCFIELDS("Lines Exist");
              IF EstimatePart."Lines Exist" THEN BEGIN
                GetCurrentEstimatePartTotal(EstimatePart, CostTotal, SalesTotal);  //C056342
                IF Estimate."Surcharge Method" = Estimate."Surcharge Method"::"Surcharge By Part" THEN BEGIN
                  CLEAR(BaseAmountCost);
                  CLEAR(BaseAmountSales);
                END;
                IF (EstimatePart."Exclude Surcharge (GenCost)" = FALSE) THEN BEGIN
                  BaseAmountCost[1] := BaseAmountCost[1] + CostTotal;
                  BaseAmountSales[1] := BaseAmountSales[1] + SalesTotal;
                END;
                BaseAmountCost[2] := BaseAmountCost[2] + CostTotal;
                BaseAmountSales[2] := BaseAmountSales[2] + SalesTotal;
                BaseAmountCost[3] := BaseAmountCost[3] + CostTotal;
                BaseAmountSales[3] := BaseAmountSales[3] + SalesTotal;
                IF Estimate."Surcharge Method" = Estimate."Surcharge Method"::"Surcharge By Part" THEN
                  ProcessSurchargeType(EstimateSetup, Estimate, SubEstimate, EstimatePart, BaseAmountCost, BaseAmountSales);
              END;
            UNTIL EstimatePart.NEXT = 0;
            IF Estimate."Surcharge Method" = Estimate."Surcharge Method"::"Predefined Part" THEN
              ProcessSurchargeType(EstimateSetup, Estimate, SubEstimate, EstimatePart, BaseAmountCost, BaseAmountSales);
          END;
        UNTIL SubEstimate.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ProcessSurchargeType@1100528905(EstimateSetup@1100528908 : Record 11012150;Estimate@1100528909 : Record 11012151;SubEstimate@1100528914 : Record 11072074;EstimatePart@1100528915 : Record 11072073;BaseAmountCost@1100528916 : ARRAY [3] OF Decimal;BaseAmountSales@1100528902 : ARRAY [3] OF Decimal);
    VAR
      SurchargeType@1100528900 : Integer;
      CostAmount@1100528901 : Decimal;
      SalesAmount@1100528903 : Decimal;
      SurchargePerc@1100528907 : Decimal;
      CostObject@1100528906 : Code[20];
      DescriptionTxt@1100528905 : Text;
      EstimateNo@1100528913 : Text;
      SubEstimateNo@1100528912 : Text;
      PartGroup@1100528911 : Text;
      PartSurcharge@1100528910 : Text;
    BEGIN
      //DP02080
      IF Estimate."Surcharge Method" = Estimate."Surcharge Method"::"Predefined Part" THEN BEGIN
        Estimate.TESTFIELD("Part (Surcharge)");
        EstimateNo := SubEstimate."Estimate No.";
        SubEstimateNo := SubEstimate."Sub-Estimate No.";
        PartGroup := SubEstimate."Part Group";
        PartSurcharge := Estimate."Part (Surcharge)";
      END;

      IF Estimate."Surcharge Method" = Estimate."Surcharge Method"::"Surcharge By Part" THEN BEGIN
        EstimateNo := EstimatePart."Estimate No.";
        SubEstimateNo := EstimatePart."Sub-Estimate No.";
        PartGroup := EstimatePart."Part Group";
        PartSurcharge := EstimatePart.Part;
      END;

      FOR SurchargeType := 1 TO 3 DO BEGIN
        IF SurchargeType = 1 THEN BEGIN
          CostAmount := BaseAmountCost[1];
          SalesAmount := BaseAmountSales[1];
          CostObject := EstimateSetup."Cost Object (GeneralCost)";
          SurchargePerc := Estimate."Percentage (GeneralCost)";
          DescriptionTxt := Estimate.FIELDCAPTION("Percentage (GeneralCost)") + STRSUBSTNO(': %1%', SurchargePerc);
        END;
        IF SurchargeType = 2 THEN BEGIN
          CostAmount := BaseAmountCost[2];
          SalesAmount := BaseAmountSales[2];
          CostObject := EstimateSetup."Cost Object (Profit/Risk)";
          SurchargePerc := Estimate."Percentage (Profit/Risk)";
          DescriptionTxt := Estimate.FIELDCAPTION("Percentage (Profit/Risk)") + STRSUBSTNO(': %1%', SurchargePerc);
        END;
        IF SurchargeType = 3 THEN BEGIN
          CostAmount := BaseAmountCost[3];
          SalesAmount := BaseAmountSales[3];
          CostObject := EstimateSetup."Cost Object (ExecutionCost)";
          SurchargePerc := Estimate."Percentage (ExecutionCost)";
          DescriptionTxt := Estimate.FIELDCAPTION("Percentage (ExecutionCost)") + STRSUBSTNO(': %1%', SurchargePerc);
        END;
        InsertAdditionalCostBySurchargeType(SurchargeType, Estimate,
          EstimateNo, SubEstimateNo, PartGroup, PartSurcharge,
          CostAmount, SalesAmount, SurchargePerc, CostObject, DescriptionTxt);
      END;
    END;

    LOCAL PROCEDURE InsertAdditionalCostBySurchargeType@1100525012(SurchargeType@1100525003 : Integer;Estimate@1100528909 : Record 11012151;EstimateNo@1100528902 : Text;SubEstimateNo@1100528903 : Text;PartGroup@1100528904 : Text;PartSurcharge@1100528905 : Text;CostAmount@1100528901 : Decimal;SalesAmount@1100528910 : Decimal;SurchargePerc@1100528907 : Decimal;CostObject@1100528906 : Code[20];DescriptionTxt@1100528908 : Text);
    VAR
      EstimateLine@1100528900 : Record 11072072;
      DimMgt@1100525001 : Codeunit 408;
      DimValRec@1100525000 : Record 349;
      LastLine@1100525002 : Integer;
    BEGIN
      //DP02080
      IF (SurchargePerc <> 0) AND (CostAmount <> 0) THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');

        EstimateLine.SETRANGE("Estimate No.", EstimateNo);
        EstimateLine.SETRANGE("Sub-Estimate No.", SubEstimateNo);
        EstimateLine.SETRANGE("Part Group", PartGroup);
        EstimateLine.SETRANGE(Part, PartSurcharge);
        IF EstimateLine.FINDLAST THEN
          LastLine := EstimateLine."Line No."
        ELSE
          LastLine := 0;

        EstimateLine.INIT;
        EstimateLine."Estimate No." := EstimateNo;
        EstimateLine.VALIDATE("Sub-Estimate No.", SubEstimateNo);
        EstimateLine."Part Group" := PartGroup;
        EstimateLine.VALIDATE(Part, PartSurcharge); //fill Chapter+Paragraph for Cum.Totals
        EstimateLine."Line No." := LastLine + 10000;
        EstimateLine.INSERT;
        EstimateLine."Summary Line" := TRUE;
        EstimateLine."Ignore Part Quantity" := TRUE;
        EstimateLine.Quantity := 1;
        EstimateLine."Quantity (Sales)" := EstimateLine.Quantity;
        EstimateLine."Part Quantity" := 1;
        EstimateLine."Net Cost Price" := Estimate.CalculateAdditionalCost(SurchargeType, CostAmount);
        EstimateLine."Cost Type (Price)" := DimValRec."Cost Type";
        EstimateLine.VALIDATE("Cost Object Price", DimValRec.Code);
        IF Estimate."Calculate Surcharge on" = Estimate."Calculate Surcharge on"::CostOnly THEN  //C056578
          EstimateLine."Net Sales Price" := EstimateLine."Net Cost Price"
        ELSE
          EstimateLine."Net Sales Price" := Estimate.CalculateAdditionalCost(SurchargeType, SalesAmount);
        EstimateLine.Description := DescriptionTxt;
        EstimateLine."Unit of Measure" := DimValRec."Unit of Measure";
        EstimateLine."Cost Component" := DimValRec."Cost Component";
        EstimateLine.CalculateTotals;
        EstimateLine."Summary Line calculated on" := CREATEDATETIME(TODAY,TIME);
        EstimateLine.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CheckUpdateTotals@1210190010(lvUpdate@1210190000 : Boolean;RcpLineRec@1210190001 : Record 11072075);
    BEGIN
      IF LastProcLine <> (RcpLineRec."Estimate No." + '~' +
                          RcpLineRec."Sub-Estimate No." + '~' +
                          RcpLineRec."Part Group" + '~' +
                          RcpLineRec.Part + '~' +
                          STRSUBSTNO('%1', RcpLineRec."Estimate Line") ) THEN
        IF LastProcLine <> '' THEN
          lvUpdate := TRUE;

      IF lvUpdate = TRUE THEN BEGIN
        //LastRcpLineRec.CheckRecipeCharge;  //db, 15-06-06: moved to function UpdateFromTmp (18-07-06)
        LastRcpLineRec.UpdateEstLines;
      END;

      LastRcpLineRec.COPY(RcpLineRec);
      LastProcLine := RcpLineRec."Estimate No." + '~' +
                      RcpLineRec."Sub-Estimate No." +'~' +
                      RcpLineRec."Part Group" + '~' +
                      RcpLineRec.Part + '~' +
                      STRSUBSTNO('%1', RcpLineRec."Estimate Line");
    END;

    LOCAL PROCEDURE CheckEmptyParts@1210190007(CurrEst@1210190002 : Code[20];CurrSubEst@1100485001 : Code[20]);
    VAR
      curlvl@1210190000 : Integer;
      lvEstLineRec@1210190001 : Record 11072072;
      lvEstPartRec@1210190003 : Record 11072073;
    BEGIN
      curlvl := 3;
      REPEAT
        EstPartRec.RESET;
        IF CurrEst <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        EstPartRec.SETRANGE(Level, curlvl);
        IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := EstPartRec.COUNT;
          REPEAT
            Status.UPDATE(1,EstPartRec.Part);
            currec := currec + 1;
            lvEstPartRec.RESET;
            lvEstPartRec.SETRANGE("Estimate No.", EstPartRec."Estimate No.");
            lvEstPartRec.SETRANGE("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
            lvEstPartRec.SETRANGE("Part Group", EstPartRec."Part Group");
            IF curlvl = 2 THEN
              lvEstPartRec.SETRANGE(Paragraph, EstPartRec.Part);
            IF curlvl = 1 THEN
              lvEstPartRec.SETRANGE(Chapter, EstPartRec.Part);
            lvEstPartRec.SETRANGE(Level, curlvl + 1);
            IF NOT lvEstPartRec.FINDFIRST THEN BEGIN
              lvEstLineRec.SETRANGE("Estimate No.", EstPartRec."Estimate No.");
              lvEstLineRec.SETRANGE("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
              lvEstLineRec.SETRANGE(Part, EstPartRec.Part);
              lvEstLineRec.SETRANGE("Part Group", EstPartRec."Part Group");
              IF NOT lvEstLineRec.FINDFIRST THEN
                EstPartRec.DELETE;
            END;
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL EstPartRec.NEXT = 0;
        END;
        curlvl := curlvl - 1;
      UNTIL curlvl < 0;
    END;

    PROCEDURE CheckCharge@1210190014(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;ChrgBln@1210190011 : Boolean;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer;Desc@1210190000 : Text[100]);
    VAR
      SkipLine@1210190001 : Boolean;
    BEGIN
      TmpRelationRec."Estimate No." := lvEst;
      TmpRelationRec."Sub-Estimate No." := lvSubEst;
      TmpRelationRec."Part Group" := lvPartGrp;
      TmpRelationRec.Part := lvPart;
      TmpRelationRec."Estimate Line" := lvEstLine;
      TmpRelationRec."Recipe Group" := lvRcpGrp;
      TmpRelationRec.Recipe := lvRcp;
      TmpRelationRec."Line No." := lvRcpLine;
      TmpRelationRec.Description := Desc;
      TmpRelationRec.Quantity := NewLine;
      TmpRelationRec.INSERT;

      IF ChrgBln = FALSE THEN EXIT;

      ChrgRec.RESET;
      ChrgRec.SETRANGE("Estimate No.", lvEst);
      ChrgRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      ChrgRec.SETRANGE("Part Group", lvPartGrp);
      ChrgRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        ChrgRec.SETRANGE("Recipe Line", 0);
        ChrgRec.SETFILTER("Recipe Group", '%1', '');
        ChrgRec.SETFILTER(Recipe, '%1', '');
        ChrgRec.SETRANGE("Surcharge Line", lvEstLine);
      END ELSE BEGIN
        ChrgRec.SETRANGE("Recipe Line", lvEstLine);
        ChrgRec.SETRANGE("Recipe Group", lvRcpGrp);
        ChrgRec.SETRANGE(Recipe, lvRcp);
        ChrgRec.SETRANGE("Surcharge Line", lvRcpLine);
      END;
      IF ChrgRec.FINDSET THEN BEGIN
        REPEAT
          TmpChrgRec := ChrgRec;
          TmpChrgRec."Estimate No." := NewEst;
          TmpChrgRec."Surcharge Line" := NewLine;
          SkipLine := FALSE;
          IF lvRcp = '' THEN BEGIN
            IF NOT TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, ChrgRec."Basic Line", '', '', 0) THEN
              SkipLine := TRUE
            ELSE
              TmpChrgRec."Basic Line" := TmpRelationRec.Quantity;
          END ELSE BEGIN
            IF NOT TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, lvRcpGrp, lvRcp, ChrgRec."Basic Line") THEN
              SkipLine := TRUE
            ELSE
              TmpChrgRec."Basic Line" := TmpRelationRec.Quantity;
            IF NOT TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0) THEN
              SkipLine := TRUE
            ELSE
              TmpChrgRec."Recipe Line" := TmpRelationRec.Quantity;
          END;
          IF SkipLine = FALSE THEN
            TmpChrgRec.INSERT;
        UNTIL ChrgRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanSheet@1210190013(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanSheetRec.RESET;
      QuanSheetRec.SETRANGE("Estimate No.", lvEst);
      QuanSheetRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanSheetRec.SETRANGE("Part Group", lvPartGrp);
      QuanSheetRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Line", 0);
        QuanSheetRec.SETFILTER("Recipe Group", '%1', '');
        QuanSheetRec.SETFILTER(Recipe, '%1', '');
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Group", lvRcpGrp);
        QuanSheetRec.SETRANGE(Recipe, lvRcp);
        QuanSheetRec.SETRANGE("Recipe Line", lvRcpLine);
      END;
      IF QuanSheetRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanSheetRec := QuanSheetRec;
          TmpQuanSheetRec."Estimate No." := NewEst;
          IF lvRcp = '' THEN BEGIN
            TmpQuanSheetRec."Estimate Line" := NewLine;
          END ELSE BEGIN
            TmpQuanSheetRec."Recipe Line" := NewLine;
            TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0);
            TmpQuanSheetRec."Estimate Line" := TmpRelationRec.Quantity;
          END;
          TmpQuanSheetRec.INSERT;
        UNTIL QuanSheetRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanModel@1210190022(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanModelRec.RESET;
      QuanModelRec.SETRANGE("Estimate No.", lvEst);
      QuanModelRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanModelRec.SETRANGE("Part Group", lvPartGrp);
      QuanModelRec.SETRANGE(Part, lvPart);
      QuanModelRec.SETRANGE("Estimate Line", lvEstLine);
      IF QuanModelRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanModelRec := QuanModelRec;
          TmpQuanModelRec."Estimate No." := NewEst;
          TmpQuanModelRec."Estimate Line" := NewLine;
          TmpQuanModelRec.INSERT;
        UNTIL QuanModelRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanRelation@1100409000(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanRelationRec.RESET;
      QuanRelationRec.SETRANGE("Estimate No.", lvEst);
      QuanRelationRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanRelationRec.SETRANGE("Part Group", lvPartGrp);
      QuanRelationRec.SETRANGE(Part, lvPart);
      QuanRelationRec.SETRANGE("Estimate Line", lvEstLine);
      IF QuanRelationRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanRelationRec := QuanRelationRec;
          TmpQuanRelationRec."Estimate No." := NewEst;
          TmpQuanRelationRec."Estimate Line" := NewLine;
          TmpQuanRelationRec.INSERT;
        UNTIL QuanRelationRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCode@1210190015(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      EstCodeRec.RESET;
      EstCodeRec.SETRANGE("Estimate No.", lvEst);
      EstCodeRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      EstCodeRec.SETRANGE("Part Group", lvPartGrp);
      EstCodeRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        EstCodeRec.SETRANGE("Estimate Line", lvEstLine);
        EstCodeRec.SETRANGE("Recipe Line", 0);
        EstCodeRec.SETFILTER("Recipe Group", '%1', '');
        EstCodeRec.SETFILTER(Recipe, '%1', '');
      END ELSE BEGIN
        EstCodeRec.SETRANGE("Estimate Line", lvEstLine);
        EstCodeRec.SETRANGE("Recipe Group", lvRcpGrp);
        EstCodeRec.SETRANGE(Recipe, lvRcp);
        EstCodeRec.SETRANGE("Recipe Line", lvRcpLine);
      END;
      IF EstCodeRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstCodeRec := EstCodeRec;
          TmpEstCodeRec."Estimate No." := NewEst;
          IF lvRcp = '' THEN BEGIN
            TmpEstCodeRec."Estimate Line" := NewLine;
          END ELSE BEGIN
            TmpEstCodeRec."Recipe Line" := NewLine;
            TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0);
            TmpEstCodeRec."Estimate Line" := TmpRelationRec.Quantity;
          END;
          TmpEstCodeRec.INSERT;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckText@1100409001(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      TextRec.RESET;
      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETRANGE("Estimate No.", lvEst);
      TextRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      TextRec.SETRANGE("Part Group", lvPartGrp);
      TextRec.SETRANGE(Part, lvPart);
      TextRec.SETRANGE("Estimate Line No.", lvEstLine);
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TmpTextRec := TextRec;
          TmpTextRec."Estimate No." := NewEst;
          TmpTextRec."Estimate Line No." := NewLine;
          TmpTextRec.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckSubOperation@1210190017(lvManufacturer@1210190004 : Code[20];lvVendor@1210190005 : Code[20];lvItem@1210190000 : Code[20];lvBasicItem@1210190001 : Code[20];lvTradeItem@1210190002 : Code[20]) : Code[20];
    VAR
      TradeItemRec@1210190008 : Record 11012317;
      BasicItemRec@1210190007 : Record 11012316;
      ItemRec@1210190006 : Record 27;
    BEGIN
      IF lvTradeItem <> '' THEN BEGIN
        IF NOT TradeItemRec.GET(lvVendor, lvTradeItem) THEN TradeItemRec.INIT;
        IF TradeItemRec."Sub Operation Code" <> '' THEN
          EXIT(TradeItemRec."Sub Operation Code");
      END;

      IF lvBasicItem <> '' THEN BEGIN
        IF NOT BasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BasicItemRec.INIT;
        IF BasicItemRec."Sub Operation Code" <> '' THEN
          EXIT(BasicItemRec."Sub Operation Code");
      END;

      IF lvItem <> '' THEN BEGIN
        IF NOT ItemRec.GET(lvItem) THEN ItemRec.INIT;
        IF ItemRec."Sub Operation Code" <> '' THEN
          EXIT(ItemRec."Sub Operation Code");
      END;

      EXIT('');
    END;

    PROCEDURE CheckBackSlash@1210190019(lvDesc@1210190004 : Text[100]);
    VAR
      sep@1210190000 : Integer;
      desc1@1210190001 : Text[100];
      desc2@1210190002 : Text[100];
      lvText000@1210190003 : TextConst 'ENU=Part %1 of Description exceeds 50 characters: \%2;NOR=Del %1 av Beskrivelsen overskrider 50 tegn: \%2;SVE=Del %1 av beskrivningen ”verskrider 50 tecken: \%2';
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
        IF STRLEN(desc1) > 50 THEN ERROR(lvText000, '1', desc1);
        IF STRLEN(desc2) > 50 THEN ERROR(lvText000, '2', desc2);
      END;
    END;

    PROCEDURE GetCode@1210190018(RcpBln@1210190000 : Boolean) : Code[20];
    BEGIN
      EstCodeRec.RESET;
      EstPartRec.RESET;
      SubEstRec.RESET;

      IF RcpBln = FALSE THEN BEGIN
        EstCodeRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
        EstCodeRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
        EstCodeRec.SETRANGE("Part Group", EstLineRec."Part Group");
        EstCodeRec.SETRANGE(Part, EstLineRec.Part);
        EstCodeRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
        EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");

        EstPartRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
                       EstLineRec."Part Group", EstLineRec.Part);

        SubEstRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.");
      END ELSE BEGIN
        EstCodeRec.SETRANGE("Estimate No.", RcpLineRec."Estimate No.");
        EstCodeRec.SETRANGE("Sub-Estimate No.", RcpLineRec."Sub-Estimate No.");
        EstCodeRec.SETRANGE("Part Group", RcpLineRec."Part Group");
        EstCodeRec.SETRANGE(Part, RcpLineRec.Part);
        EstCodeRec.SETRANGE("Estimate Line", RcpLineRec."Estimate Line");
        EstCodeRec.SETRANGE("Recipe Group", RcpLineRec."Recipe Group");
        EstCodeRec.SETRANGE(Recipe, EstLineRec.Recipe);
        EstCodeRec.SETRANGE("Recipe Line", RcpLineRec."Line No.");
        EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");

        EstPartRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                       RcpLineRec."Part Group", RcpLineRec.Part);

        SubEstRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.");
      END;

      IF EstCodeRec.FINDFIRST THEN
        EXIT(EstCodeRec.Code);

      IF EstPartRec.Code <> '' THEN
        EXIT(EstPartRec.Code);

      IF SubEstRec.Code <> '' THEN
        EXIT(SubEstRec.Code);

      EXIT(EstRec.Code);
    END;

    LOCAL PROCEDURE UpdateFromTmp@1210190005();
    VAR
      TmpSubEstimatePart@1100525000 : TEMPORARY Record 11072073;
    BEGIN
      IF gvUseDialog THEN
        Status.UPDATE(1,Text012);
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstLineRec.COUNT;
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          IF EstLineRec."Removal Contribution" THEN BEGIN
            IF NOT TmpSubEstimatePart.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.", EstLineRec."Part Group",
              EstLineRec.Part) THEN BEGIN
              TmpSubEstimatePart.INIT;
              TmpSubEstimatePart."Estimate No." := EstLineRec."Estimate No.";
              TmpSubEstimatePart."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
              TmpSubEstimatePart."Part Group" := EstLineRec."Part Group";
              TmpSubEstimatePart.Part := EstLineRec.Part;
              TmpSubEstimatePart.INSERT;
            END;
          END ELSE
          BEGIN
            EstLineRec.FIND;
            IF FORMAT(EstLineRec) <> FORMAT(TmpEstLineRec) THEN BEGIN
              EstLineRec := TmpEstLineRec;
              EstLineRec.MODIFY;
            END;
          END;
          IF EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" " THEN
            EstLineRec.CheckEstimateCharge;  //db, 27-10-03: force update surcharge line.
          currec := currec + 1;
          IF gvUseDialog THEN
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      IF gvUseDialog THEN
        Status.UPDATE(1,Text013);
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpRcpLineRec.COUNT;
        LastProcLine := '';
        REPEAT
          RcpLineRec.COPY(TmpRcpLineRec);
          IF RcpLineRec."Removal Contribution" = TRUE THEN
            DetermineRemovalContribution(3, RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
              RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Recipe Group", RcpLineRec.Recipe)  //DP00381
          ELSE
          BEGIN
            RcpLineRec.FIND;
            IF FORMAT(RcpLineRec) <> FORMAT(TmpRcpLineRec) THEN BEGIN
              RcpLineRec := TmpRcpLineRec;
              RcpLineRec.MODIFY;
            END;
          END;

          IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
            RcpLineRec.CheckRecipeCharge;        //db, 15-06-06: force update surcharge line
          CheckUpdateTotals(FALSE, RcpLineRec);  //db, 18-07-06: restore update recipe totals
          currec := currec + 1;
          IF gvUseDialog THEN
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpRcpLineRec.NEXT = 0;
        CheckUpdateTotals(TRUE, RcpLineRec);     //db, 18-07-06: restore update recipe totals
      END;

      IF TmpSubEstimatePart.FINDSET THEN
        REPEAT
          DetermineRemovalContribution(1, TmpSubEstimatePart."Estimate No.", TmpSubEstimatePart."Sub-Estimate No.",
            TmpSubEstimatePart."Part Group", TmpSubEstimatePart.Part, '', '')
        UNTIL TmpSubEstimatePart.NEXT = 0;

      IF TmpEstRec.FIND('-') THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(TmpEstRec."No.");
          TmpEstRec.DELETE;
        UNTIL TmpEstRec.NEXT = 0;
      END;
    END;

    PROCEDURE ClearTmpTables@1210190009();
    BEGIN
      TmpEstRec.RESET;
      TmpEstRec.DELETEALL;

      TmpEstLineRec.RESET;
      TmpEstLineRec.DELETEALL;

      TmpRcpLineRec.RESET;
      TmpRcpLineRec.DELETEALL;

      TmpEstCodeRec.RESET;
      TmpEstCodeRec.DELETEALL;

      TmpQuanSheetRec.RESET;
      TmpQuanSheetRec.DELETEALL;

      TmpQuanModelRec.RESET;
      TmpQuanModelRec.DELETEALL;

      TmpQuanRelationRec.RESET;
      TmpQuanRelationRec.DELETEALL;

      TmpChrgRec.RESET;
      TmpChrgRec.DELETEALL;

      TmpTextRec.RESET;
      TmpTextRec.DELETEALL;

      TmpRelationRec.RESET;
      TmpRelationRec.DELETEALL;
    END;

    PROCEDURE CheckEstFilters@1100485006(VAR EstLineRec@1100485001 : Record 11072072;VAR RcpLineRec@1100485000 : Record 11072075);
    BEGIN
      //db, 10-08-07
      WITH EstLineRec DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          RcpLineRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."))
        ELSE
          RcpLineRec.SETFILTER("Estimate No.", '<>%1' , '');
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          RcpLineRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER("Part Group") <> '' THEN
          RcpLineRec.SETFILTER("Part Group", GETFILTER("Part Group"));
        IF GETFILTER(Part) <> '' THEN
          RcpLineRec.SETFILTER(Part, GETFILTER(Part));
        IF GETFILTER("Recipe Group") <> '' THEN
          RcpLineRec.SETFILTER("Recipe Group", GETFILTER("Recipe Group"));
        IF GETFILTER(Recipe) <> '' THEN
          RcpLineRec.SETFILTER(Recipe, GETFILTER(Recipe));

        IF GETFILTER("Item No.") <> '' THEN
          RcpLineRec.SETFILTER("Item No.", GETFILTER("Item No."));
        IF GETFILTER(Manufacturer) <> '' THEN
          RcpLineRec.SETFILTER(Manufacturer, GETFILTER(Manufacturer));
        IF GETFILTER("Basic Item") <> '' THEN
          RcpLineRec.SETFILTER("Basic Item", GETFILTER("Basic Item"));
        IF GETFILTER("Vendor (Trade Item)") <> '' THEN
          RcpLineRec.SETFILTER("Vendor (Trade Item)", GETFILTER("Vendor (Trade Item)"));
        IF GETFILTER("Trade Item") <> '' THEN
          RcpLineRec.SETFILTER("Trade Item", GETFILTER("Trade Item"));
        IF GETFILTER("Cost Object Labor") <> '' THEN
          RcpLineRec.SETFILTER("Cost Object Labor", GETFILTER("Cost Object Labor"));
        IF GETFILTER("Cost Object Price") <> '' THEN
          RcpLineRec.SETFILTER("Cost Object Price", GETFILTER("Cost Object Price"));
        IF GETFILTER("Cost Component") <> '' THEN
          RcpLineRec.SETFILTER("Cost Component", GETFILTER("Cost Component"));

        IF GETFILTER("Norm Group") <> '' THEN
          RcpLineRec.SETFILTER("Norm Group", GETFILTER("Norm Group"));
        IF GETFILTER("Norm Group (Sales)") <> '' THEN
          RcpLineRec.SETFILTER("Norm Group (Sales)", GETFILTER("Norm Group (Sales)")); //C012505

        IF GETFILTER("Sub Operation Code") <> '' THEN
          RcpLineRec.SETFILTER("Sub Operation Code", GETFILTER("Sub Operation Code"));
        IF GETFILTER("Rate Code") <> '' THEN
          RcpLineRec.SETFILTER("Rate Code", GETFILTER("Rate Code"));
        IF GETFILTER("Line Status") <> '' THEN
          RcpLineRec.SETFILTER("Line Status", GETFILTER("Line Status"));

        IF GETFILTER("Project No.") <> '' THEN
          RcpLineRec.SETFILTER("Project No.", GETFILTER("Project No."));
        IF GETFILTER(Element) <> '' THEN
          RcpLineRec.SETFILTER(Element, GETFILTER(Element));
        IF GETFILTER("Project Planning Activity Code") <> '' THEN
          RcpLineRec.SETFILTER("Project Planning Activity Code", GETFILTER("Project Planning Activity Code"));
        IF GETFILTER(Vendor) <> '' THEN
          RcpLineRec.SETFILTER(Vendor, GETFILTER(Vendor));
        IF GETFILTER(Subcontractor) <> '' THEN
          RcpLineRec.SETFILTER(Subcontractor, GETFILTER(Subcontractor));
        IF GETFILTER(Discipline) <> '' THEN
          RcpLineRec.SETFILTER(Discipline, GETFILTER(Discipline));
        IF GETFILTER("Trade Speciality") <> '' THEN
          RcpLineRec.SETFILTER("Trade Speciality", GETFILTER("Trade Speciality"));
        IF GETFILTER("Trade Expertise") <> '' THEN
          RcpLineRec.SETFILTER("Trade Expertise", GETFILTER("Trade Expertise"));

        SETFILTER(Recipe, '%1', '');  //db, 30-08-07 (do not pass on this filter to recipe line)
      END;
    END;

    PROCEDURE CheckEstFixed@1100485005(CurrEst@1100485000 : Code[20]);
    BEGIN
      IF CurrEst <> EstRec."No." THEN BEGIN
        EstRec.GET(CurrEst);
        IF SkipFixed = FALSE THEN  //C026777
          EstRec.TESTFIELD(Fixed, FALSE);
        TmpEstRec := EstRec;
        IF TmpEstRec.INSERT THEN; // C004183.n
      END;
    END;

    PROCEDURE CheckUncodedLines@1100525000(lvAction@1210190000 : Integer;EstNo@1100525002 : Code[20];ShowResult@1100525011 : Boolean);
    VAR
      lvEstLineRec@1100525001 : Record 11072072;
      lvRcpLineRec@1100525000 : Record 11072075;
      lvEstLine2@1100525010 : Record 11072072;
      lvRcpLine2@1100525009 : Record 11072075;
      lvAdmiRec@1100525008 : Record 11012390;
      lvCostObjLabor@1100525004 : Code[20];
      lvCostObjMaterial@1100525005 : Code[20];
      lvCostObjSubc@1100525006 : Code[20];
      lvCostObjPlant@1100525007 : Code[20];
      lvCostObjSundry@1100528900 : Code[20];
    BEGIN
      EstRec.GET(EstNo);
      EstRec.TESTFIELD("Estimate Based On", EstRec."Estimate Based On"::Item);  //db, 16-01-15: C020300

      IF lvAction = 1 THEN BEGIN
        WITH lvEstLineRec DO BEGIN
          SETRANGE("Estimate No.", EstNo);
          SETFILTER(Recipe, '%1', '');

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Sundry", TRUE);
          MODIFYALL("Uncoded Sundry", FALSE);
          SETRANGE("Uncoded Sundry");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");

          IF FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              lvCostObjLabor := "Cost Object Labor";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
                lvCostObjMaterial := "Cost Object Price";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
                lvCostObjSubc := "Cost Object Price";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
                lvCostObjPlant := "Cost Object Price";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
                lvCostObjSundry := "Cost Object Price";
              IF Admicode <> '' THEN BEGIN
                IF lvAdmiRec.GET(Admicode) THEN BEGIN
                  IF lvCostObjLabor = '' THEN
                    lvCostObjLabor := lvAdmiRec."Cost Object Labor";
                  IF lvCostObjMaterial = '' THEN
                    lvCostObjMaterial := lvAdmiRec."Cost Object Material";
                  IF lvCostObjSubc = '' THEN
                    lvCostObjSubc := lvAdmiRec."Cost Object Subcontracting";
                  IF lvCostObjPlant = '' THEN
                    lvCostObjPlant := lvAdmiRec."Cost Object Plant";
                  IF lvCostObjSundry = '' THEN
                    lvCostObjSundry := lvAdmiRec."Cost Object Sundry";
                END;
              END;

              IF (lvCostObjLabor = '') AND ("Labor Cost Amount" <> 0) THEN
                 "Uncoded Labor" := TRUE;
              IF (lvCostObjMaterial = '') AND ("Material Cost Amount" <> 0) THEN
                "Uncoded Material" := TRUE;
              IF (lvCostObjSubc = '') AND ("Subcontracting Cost Amount" <> 0) THEN
                "Uncoded Subcontracting" := TRUE;
              IF (lvCostObjPlant = '') AND ("Plant Cost Amount" <> 0) THEN
                "Uncoded Plant" := TRUE;
              IF (lvCostObjSundry = '') AND ("Sundry Cost Amount" <> 0) THEN
                "Uncoded Sundry" := TRUE;

              IF "Uncoded Labor" OR "Uncoded Material" OR "Uncoded Subcontracting" OR "Uncoded Plant" OR "Uncoded Sundry" THEN BEGIN
                "Uncoded Line" := TRUE;
                MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
          COMMIT;

          IF ShowResult=FALSE THEN EXIT;

          lvEstLine2.SETRANGE("Estimate No.",EstNo);
          PAGE.RUNMODAL(PAGE::"Uncoded Estimate Lines", lvEstLine2);

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Sundry", TRUE);
          MODIFYALL("Uncoded Sundry", FALSE);
          SETRANGE("Uncoded Sundry");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");

          COMMIT;
        END;
      END;

      IF lvAction = 2 THEN BEGIN
        WITH lvRcpLineRec DO BEGIN
          SETRANGE("Estimate No.", EstNo);

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Sundry", TRUE);
          MODIFYALL("Uncoded Sundry", FALSE);
          SETRANGE("Uncoded Sundry");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");

          IF FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              lvCostObjLabor := "Cost Object Labor";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
                lvCostObjMaterial := "Cost Object Price";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
                lvCostObjSubc := "Cost Object Price";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
                lvCostObjPlant := "Cost Object Price";
              IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
                lvCostObjSundry := "Cost Object Price";
              IF Admicode <> '' THEN BEGIN
                IF lvAdmiRec.GET(Admicode) THEN BEGIN
                  IF lvCostObjLabor = '' THEN
                    lvCostObjLabor := lvAdmiRec."Cost Object Labor";
                  IF lvCostObjMaterial = '' THEN
                    lvCostObjMaterial := lvAdmiRec."Cost Object Material";
                  IF lvCostObjSubc = '' THEN
                    lvCostObjSubc := lvAdmiRec."Cost Object Subcontracting";
                  IF lvCostObjPlant = '' THEN
                    lvCostObjPlant := lvAdmiRec."Cost Object Plant";
                  IF lvCostObjSundry = '' THEN
                    lvCostObjSundry := lvAdmiRec."Cost Object Sundry";
                END;
              END;

              IF (lvCostObjLabor = '') AND ("Labor Cost Amount" <> 0) THEN
                 "Uncoded Labor" := TRUE;
              IF (lvCostObjMaterial = '') AND ("Material Cost Amount" <> 0) THEN
                "Uncoded Material" := TRUE;
              IF (lvCostObjSubc = '') AND ("Subcontracting Cost Amount" <> 0) THEN
                "Uncoded Subcontracting" := TRUE;
              IF (lvCostObjPlant = '') AND ("Plant Cost Amount" <> 0) THEN
                "Uncoded Plant" := TRUE;
              IF (lvCostObjSundry = '') AND ("Sundry Cost Amount" <> 0) THEN
                "Uncoded Sundry" := TRUE;

              IF "Uncoded Labor" OR "Uncoded Material" OR "Uncoded Subcontracting" OR "Uncoded Plant" OR "Uncoded Sundry" THEN BEGIN
                "Uncoded Line" := TRUE;
                MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
          COMMIT;

          IF ShowResult=FALSE THEN EXIT;

          lvRcpLine2.SETRANGE("Estimate No.",EstNo);
          PAGE.RUNMODAL(PAGE::"Uncoded Recipe Lines", lvRcpLine2);

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Sundry", TRUE);
          MODIFYALL("Uncoded Sundry", FALSE);
          SETRANGE("Uncoded Sundry");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");

          COMMIT;
        END;
      END;
    END;

    PROCEDURE UpdateFullCostSalesPrice@1100525003(IEstimateNo@1100525000 : Code[20]);
    VAR
      Estimate@1100525001 : Record 11012151;
    BEGIN
      IF NOT Estimate.GET(IEstimateNo) THEN
        EXIT;
      IF Estimate.Fixed THEN
        EXIT;

      UpdateOfferAmounts(IEstimateNo);
      UpdateCalculatedAmounts(IEstimateNo);

      Estimate."Full Cost/Sales Price Updated" := TRUE;
      Estimate.MODIFY;
    END;

    LOCAL PROCEDURE UpdateOfferAmounts@1100525008(IEstimateNo@1100525002 : Code[20]);
    VAR
      SubEstimatePart@1100525001 : Record 11072073;
      LevelLoop@1100525000 : Integer;
      PartQuantity@1100525003 : Decimal;
    BEGIN
      SubEstimatePart.SETRANGE("Estimate No.", IEstimateNo);
      FOR LevelLoop := 3 DOWNTO 0 DO BEGIN
        SubEstimatePart.SETRANGE(Level, LevelLoop);
        IF SubEstimatePart.FINDSET THEN
          REPEAT
            IF SubEstimatePart.PartHasLowerLevels THEN
              SubEstimatePart."Offer Amount" := CalcAmountLowerLevels(SubEstimatePart."Estimate No.",
                SubEstimatePart."Sub-Estimate No.", SubEstimatePart."Part Group", SubEstimatePart.Chapter,
                SubEstimatePart.Paragraph, LevelLoop, 0);
            PartQuantity := SubEstimatePart.GetPartQuantity;
            IF PartQuantity <> 0 THEN
              SubEstimatePart."Offer Price" := SubEstimatePart."Offer Amount" / PartQuantity
            ELSE BEGIN
              SubEstimatePart."Offer Price" := SubEstimatePart."Offer Amount";
              SubEstimatePart."Offer Amount" := 0;
            END;
            SubEstimatePart.MODIFY;
         UNTIL SubEstimatePart.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateCalculatedAmounts@1100525001(IEstimateNo@1100525004 : Code[20]);
    VAR
      SubEstimatePart@1100525002 : Record 11072073;
      LevelLoop@1100525001 : Integer;
      PartQuantity@1100525000 : Decimal;
    BEGIN
      SubEstimatePart.SETRANGE("Estimate No.", IEstimateNo);
      FOR LevelLoop := 3 DOWNTO 0 DO BEGIN
        SubEstimatePart.SETRANGE(Level, LevelLoop);
        IF SubEstimatePart.FINDSET THEN
          REPEAT
            IF SubEstimatePart.PartHasLowerLevels THEN
              SubEstimatePart."Calculated Cost Amount" := CalcAmountLowerLevels(SubEstimatePart."Estimate No.",
                SubEstimatePart."Sub-Estimate No.", SubEstimatePart."Part Group", SubEstimatePart.Chapter,
                SubEstimatePart.Paragraph, LevelLoop, 1);
            PartQuantity := SubEstimatePart.GetPartQuantity;
            IF PartQuantity <> 0 THEN
              SubEstimatePart."Calculated Cost Price" := SubEstimatePart."Calculated Cost Amount" / PartQuantity
            ELSE BEGIN
              SubEstimatePart."Calculated Cost Price" := SubEstimatePart."Calculated Cost Amount";
              SubEstimatePart."Calculated Cost Amount" := 0;
            END;
            SubEstimatePart.MODIFY;
         UNTIL SubEstimatePart.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcAmountLowerLevels@1100525009(IEstimateNo@1100525001 : Code[20];ISubEstimateNo@1100525004 : Code[20];IPartGroup@1100525006 : Code[10];IChapter@1100525000 : Code[20];IParagraph@1100525005 : Code[20];ILevel@1100525002 : Integer;IAmountType@1100525007 : 'Offer Amount,Calculated Amount') retValue : Decimal;
    VAR
      SubEstimatePart@1100525003 : Record 11072073;
    BEGIN
      SubEstimatePart.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
      SubEstimatePart.SETRANGE("Estimate No.", IEstimateNo);
      SubEstimatePart.SETRANGE("Sub-Estimate No.", ISubEstimateNo);
      SubEstimatePart.SETRANGE("Part Group", IPartGroup);
      SubEstimatePart.SETRANGE(Level, ILevel +1);
      CASE ILevel +1 OF
        2:
          SubEstimatePart.SETRANGE(Chapter, IChapter);
        3:
          BEGIN
            SubEstimatePart.SETRANGE(Chapter, IChapter);
            SubEstimatePart.SETRANGE(Paragraph, IParagraph);
          END;
      END;
      IF NOT SubEstimatePart.FINDSET THEN
        EXIT;
      //REPEAT
      CASE IAmountType OF
        IAmountType::"Offer Amount":
          BEGIN
            SubEstimatePart.CALCSUMS("Offer Amount");
            retValue += SubEstimatePart."Offer Amount";
          END;
        IAmountType::"Calculated Amount":
          BEGIN
            SubEstimatePart.CALCSUMS("Calculated Cost Amount");
            retValue += SubEstimatePart."Calculated Cost Amount";
          END;
      END;
      //UNTIL SubEstimatePart.NEXT = 0;
      EXIT(retValue);
    END;

    PROCEDURE EditCommentLines@1100528900(iEst@1210190000 : Code[20];ISubEst@1210190001 : Code[20];iPartGrp@1210190002 : Code[20];iPart@1210190003 : Code[20];iEstLine@1210190004 : Integer;iRcpGrp@1210190005 : Code[20];iRcp@1210190006 : Code[20];iRcpLine@1100409000 : Integer;iPartLine@1100409001 : Integer);
    VAR
      TextRec@1100485000 : Record 11020595;
    BEGIN
      TextRec.FILTERGROUP(2);
      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETRANGE(Group, iRcpGrp);
      TextRec.SETRANGE("No.", iRcp);
      TextRec.SETRANGE("Estimate No.", iEst);
      TextRec.SETRANGE("Sub-Estimate No.", ISubEst);
      TextRec.SETRANGE("Part Group", iPartGrp);
      TextRec.SETRANGE(Part, iPart);
      //DP00686.sn
      TextRec.SETRANGE("Estimate Line No.", iEstLine);
      TextRec.SETRANGE("Recipe Line No.", iRcpLine);
      TextRec.SETRANGE("Part Line No.", iPartLine);
      //DP00686.en
      TextRec.FILTERGROUP(0);
      PAGE.RUNMODAL(0,TextRec);
    END;

    PROCEDURE InitSalesFromCost@1100528901(VAR lvEstLineRec@1100528908 : Record 11072072);
    VAR
      SubEstRec@1100528900 : Record 11072074;
      EstPartRec@1100528901 : Record 11072073;
    BEGIN
      //db, 14-01-15: C020101
      EstLineRec.COPY(lvEstLineRec);
      //CheckEstFilters(EstLineRec, RcpLineRec);  //C045042

      ClearTmpTables;

      WITH EstLineRec DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            CheckEstFixed(SubEstRec."Estimate No.");
            SubEstRec."Surcharge % Labor" := EstRec."Surcharge % Labor";
            SubEstRec."Surcharge % Material" := EstRec."Surcharge % Material";
            SubEstRec."Surcharge % Subcontracting" := EstRec."Surcharge % Subcontracting";
            SubEstRec."Surcharge % Plant" := EstRec."Surcharge % Plant";
            SubEstRec."Surcharge % Sundry" := EstRec."Surcharge % Sundry";
            SubEstRec.MODIFY;
          UNTIL SubEstRec.NEXT = 0;
        END;
        //
        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        IF EstPartRec.FINDSET THEN BEGIN
          REPEAT
            CheckEstFixed(EstPartRec."Estimate No.");
            EstPartRec."Surcharge % Labor" := EstRec."Surcharge % Labor";
            EstPartRec."Surcharge % Material" := EstRec."Surcharge % Material";
            EstPartRec."Surcharge % Subcontracting" := EstRec."Surcharge % Subcontracting";
            EstPartRec."Surcharge % Plant" := EstRec."Surcharge % Plant";
            EstPartRec."Surcharge % Sundry" := EstRec."Surcharge % Sundry";
            EstPartRec.MODIFY;
          UNTIL EstPartRec.NEXT = 0;
        END;
      END;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE(Recipe);  //C036470
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        EstRec.GET(EstLineRec."Estimate No.");
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");
          IF EstLineRec.Recipe <> '' THEN  //C036470
            EstLineRec."Quantity (Sales)" := EstLineRec.Quantity
          ELSE
            EstLineRec.InitSalesFromCost(TRUE);  //C020959+C041108
          TmpEstLineRec := EstLineRec;
          TmpEstLineRec.INSERT;
          //C045042.sn
          IF EstLineRec.Recipe <> '' THEN BEGIN
            RcpLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
            RcpLineRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
            RcpLineRec.SETRANGE("Part Group", EstLineRec."Part Group");
            RcpLineRec.SETRANGE(Part, EstLineRec.Part);
            RcpLineRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
            IF RcpLineRec.FINDSET THEN BEGIN
              REPEAT
                RcpLineRec.InitSalesFromCost(TRUE);
                TmpRcpLineRec := RcpLineRec;
                TmpRcpLineRec.INSERT;
              UNTIL RcpLineRec.NEXT = 0;
            END;
          END;
          //C045042.en
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateEstimateRates@1100528601(IEstimateNo@1100528600 : Code[20];CurrencyCode@1100528900 : Code[10]);
    VAR
      EstimateRate@1100528601 : Record 11012160;
      RatebyDate@1100528602 : Record 11012188;
    BEGIN
      EstimateRate.SETRANGE("Estimate No.", IEstimateNo);
      IF EstimateRate.FINDSET THEN
        REPEAT
          EstimateRate."Currency Code" := CurrencyCode;  //C054524
          EstimateRate.VALIDATE("Cost Rate");
          IF EstimateRate."Sales Rate Fixed" = EstimateRate."Sales Rate Fixed"::"Local Currency" THEN
            EstimateRate.VALIDATE("Sales Rate")
          ELSE
            EstimateRate.VALIDATE("Sales Rate (FCY)");
          EstimateRate.MODIFY(TRUE);
        UNTIL EstimateRate.NEXT = 0;

      RatebyDate.SETRANGE("Record Type", RatebyDate."Record Type"::Estimate);
      RatebyDate.SETRANGE("Estimate No.", IEstimateNo);
      RatebyDate.SETFILTER("Currency Code", '<>%1', '');
      IF RatebyDate.FINDSET THEN
        REPEAT
          RatebyDate."Currency Code" := CurrencyCode;  //C054524
          RatebyDate.VALIDATE("Cost Rate");
          RatebyDate.VALIDATE("Sales Rate");
          RatebyDate.MODIFY(TRUE);
        UNTIL RatebyDate.NEXT = 0;
    END;

    LOCAL PROCEDURE "---EVRY---"@1100290001();
    BEGIN
    END;

    PROCEDURE CreateQuickEstimate@1100290002(_estimate@1100290000 : Record 11012151);
    BEGIN
        NEWCreateQuickEstimate(_estimate);
    END;

    LOCAL PROCEDURE NEWCreateQuickEstimate@6(_estimate@1100290000 : Record 11012151);
    VAR
      SubEstimate@1009 : Record 11072074;
      SubEstimatePart@1008 : Record 11072073;
      EstimateLine@1007 : Record 11072072;
    BEGIN
      // LAHE 121203
      WITH _estimate DO BEGIN
        //Check sub-est exist
        //Error if more than one
        SubEstimate.RESET;
        SubEstimate.SETRANGE("Estimate No.","No.");
        IF SubEstimate.FINDSET THEN BEGIN
          IF SubEstimate.COUNT > 1 THEN
            ERROR(EVRY001,TABLECAPTION,"No.",SubEstimate.TABLECAPTION); //Quick Estimate not allowed, %1 %2 has more than one %3
        END ELSE BEGIN
          SubEstimate.VALIDATE("Estimate No.","No.");
          SubEstimate.VALIDATE("Sub-Estimate No.",'0');
          SubEstimate.INIT;
          SubEstimate.VALIDATE("Part Group",'1');
          SubEstimate.VALIDATE(Chapter,SubEstimate."Sub-Estimate No.");
          SubEstimate.INSERT;
        END;

        //Estimate No.,Sub-Estimate No.,Part Group,Part
        SubEstimatePart.VALIDATE("Estimate No.",SubEstimate."Estimate No.");
        SubEstimatePart.VALIDATE("Sub-Estimate No.",SubEstimate."Sub-Estimate No.");
        SubEstimatePart.VALIDATE("Part Group",SubEstimate."Part Group");
        SubEstimatePart.VALIDATE(Part,'1');
        SubEstimatePart.VALIDATE(Chapter,SubEstimate."Sub-Estimate No.");
        SubEstimatePart.INIT;
        SubEstimatePart.SETRECFILTER;
        SubEstimatePart.SETRANGE("Part Group");
        SubEstimatePart.SETRANGE(Part);
        IF NOT SubEstimatePart.FINDSET THEN
          SubEstimatePart.INSERT
        ELSE
          IF SubEstimatePart.COUNT > 1 THEN
            ERROR(EVRY001,TABLECAPTION,"No.",SubEstimatePart.TABLECAPTION); //Quick Estimate not allowed, %1 %2 has more than one %3

        //Open lines
        EstimateLine.RESET;
        EstimateLine.VALIDATE("Estimate No.",SubEstimatePart."Estimate No.");
        EstimateLine.VALIDATE("Sub-Estimate No.",SubEstimatePart."Sub-Estimate No.");
        EstimateLine.VALIDATE("Part Group",SubEstimatePart."Part Group");
        EstimateLine.VALIDATE(Part,SubEstimatePart.Part);
        EstimateLine.SETRECFILTER;
        EstimateLine.SETRANGE("Line No.");
        IF GUIALLOWED THEN
          PAGE.RUN(PAGE::"Estimate Line List",EstimateLine)
      END;
    END;

    PROCEDURE SetSkipFixed@1100525004();
    BEGIN
      //C026777
      SkipFixed := TRUE;
    END;

    LOCAL PROCEDURE GetCurrentEstimatePartTotal@1100528904(EstimatePart@1100528902 : Record 11072073;VAR CostTotal@1100528901 : Decimal;VAR SalesTotal@1100528900 : Decimal);
    BEGIN
      //C056342
      WITH EstimatePart DO BEGIN
        CALCFIELDS("Labor Part", "Material Part", "Subcontracting Part", "Plant Part", "Sundry Part",
          "Labor Sales Part", "Material Sales Part", "Subcontracting Sales Part", "Plant Sales Part", "Sundry Sales Part");
        CostTotal := "Labor Part" + "Material Part" + "Subcontracting Part" + "Plant Part" + "Sundry Part";
        SalesTotal := "Labor Sales Part" + "Material Sales Part" + "Subcontracting Sales Part" + "Plant Sales Part" + "Sundry Sales Part";
      END;
    END;

    LOCAL PROCEDURE UpdateDateTimeRecalculated@1100528906(CurrEst@1100528905 : Code[20];CurrSubEst@1100528901 : Code[20];CurrPart@1100528900 : Code[20]);
    VAR
      Estimate@1100528906 : Record 11012151;
      EstimatePart@1100528904 : Record 11072073;
      CurrDate@1100528902 : Date;
      CurrTime@1100528903 : Time;
    BEGIN
      //C057346
      Estimate.GET(CurrEst);
      IF (CurrSubEst = '') AND (CurrSubEst = '') THEN BEGIN
        //synchronise date/time (part) while complete estimate is calculated
        CurrDate := Estimate."Last Date Recalculated";
        CurrTime := Estimate."Last Time Recalculated";
      END ELSE BEGIN
        CurrDate := TODAY;
        CurrTime := TIME;
      END;
      EstimatePart.SETRANGE("Estimate No.", Estimate."No.");
      IF CurrSubEst <> '' THEN
        EstimatePart.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        EstimatePart.SETFILTER(Part, CurrPart);
      IF EstimatePart.FINDSET THEN BEGIN
        REPEAT
          EstimatePart."Last Date Recalculated" := CurrDate;
          EstimatePart."Last Time Recalculated" := CurrTime;
          EstimatePart.MODIFY;
        UNTIL EstimatePart.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

