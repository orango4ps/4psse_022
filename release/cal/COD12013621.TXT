OBJECT Codeunit 12013621 ExFlow Data Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF410000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            COMMIT;

            IF CONFIRM(Text009, FALSE) THEN
              StartImport(1);
          END;

  }
  CODE
  {
    VAR
      Text001@1240150001 : TextConst 'ENU=There was an unexpected error with Row No %1. The error was:\\ %2;SVE=Det var icke f”rv„ntat fel med radnr %1. Felet var:\\ %2';
      Text003@1240150003 : TextConst 'ENU=%1 is an unknown data type.;SVE=%1 „r en ok„nd data typ.';
      DoNotPerformValidateCheck@1240150004 : Boolean;
      Text004@1240150005 : TextConst 'ENU="""%1"" is not a supported Option Value.";SVE="""%1"" „r inte ett korrekt Option v„rde."';
      Text005@1240150008 : TextConst 'ENU="""%1"" is not a supported Boolean Value.";SVE="""%1"" „r inte ett korrekt Boolean v„rde."';
      Text006@1240150009 : TextConst 'ENU="""%1"" is not a supported Time Value.";SVE="""%1"" „r inte ett korrekt Time v„rde."';
      Text007@1240150000 : TextConst 'ENU="""%1"" is not a supported Date Value.";SVE="""%1"" „r inte ett korrekt Option v„rde."';
      ExFlowFilter@1100285000 : TextConst 'ENU=EXFLOW*;SVE=EXFLOW*';
      Text009@1100285002 : TextConst 'ENU=Do you want to run the import routine?;SVE=Vill du starta import rutinen?';
      Text010@1100285003 : TextConst 'ENU=ExFlow specific User Role;SVE=ExFlow specifika anv„ndarroller';
      Text011@1100285004 : TextConst 'ENU=ExFlow specific Permission;SVE=ExFlow specifika anv„ndarbeh”righeter';
      Text012@1100285001 : TextConst 'ENU=Operation aborted.;SVE=Funktionen avbryten.';

    PROCEDURE StartImport@1100285007(ImportType@1100285001 : 'ExFlowSetup,WorksheetLines');
    VAR
      ImportDataRowNo@1100285000 : Codeunit 12013622;
    BEGIN
      ImportDataRowNo.SetImportMode(TRUE);
      ImportDataRowNo.SetImportType(ImportType);
      ImportExFlowData; // 350003
      ImportDataRowNo.SetImportMode(FALSE);
    END;

    PROCEDURE StartExport@1100285008();
    BEGIN
      ExportExFlowSetups;
    END;

    PROCEDURE ImportExFlowData@1240150001();
    VAR
      ImportData@1240150000 : Codeunit 12013623;
      ImportLastRowNo@1240150002 : Codeunit 12013622;
      ErrorMessage@1240150001 : Text[1024];
    BEGIN
      CLEARLASTERROR;
      IF NOT ImportData.RUN THEN BEGIN
        ErrorMessage := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ErrorMessage));
        IF ErrorMessage <> '' THEN
          ERROR(STRSUBSTNO(Text001,ImportLastRowNo.GetLastRowNo,ErrorMessage));
      END;
    END;

    PROCEDURE GetFileInfo@1240150005(VAR DataStartsAtRowNo@1240150004 : Integer;VAR FieldNamesRowNo@1240150003 : Integer;VAR UpdateOption@1240150007 : 'Insert&Modify,Modify Only,Insert Only';VAR SkipUpdateIfErrorIsFound@1240150006 : Boolean;VAR FileName@1240150002 : Text[250];VAR ErrorFileName@1100285005 : Text[250];VAR DeleteExColumns@1100285001 : Boolean;VAR DeleteExCodingRules@1100285000 : Boolean;VAR DeleteTemplateRuleLines@1100285002 : Boolean;VAR DeleteExLineTypes@1100285003 : Boolean;VAR DeleteExDocs@1100285009 : Boolean;VAR ValidatePGBGFields@1100285004 : Boolean;VAR SheetName@1100285006 : Text[250]);
    VAR
      ImportFileForm@1100285008 : Page 12013676;
    BEGIN
      CLEAR(ImportFileForm);
      IF ImportFileForm.RUNMODAL <> ACTION::OK THEN
        ERROR(Text012);

      ImportFileForm.GetFileInfo(FileName,ErrorFileName,DataStartsAtRowNo,FieldNamesRowNo,UpdateOption,
                                 SkipUpdateIfErrorIsFound,DeleteExColumns,DeleteExCodingRules,DeleteTemplateRuleLines,
                                 DeleteExLineTypes,DeleteExDocs,
                                 ValidatePGBGFields,SheetName);
    END;

    PROCEDURE ReadXMLFile@1100285009(VAR TempExcelBuf@1240150002 : TEMPORARY Record 12013665;FileName@1240150001 : Text[250]);
    VAR
      ExFFileMgt@1100285005 : Codeunit 12013602;
      ExFlowSetupImportXMLport@1100285003 : XMLport 12013603;
      NVInStream@1100285004 : InStream;
      XMLFile@1100285000 : File;
      ToFileName@1100285001 : Text[1024];
      ToFolderName@1100285008 : Text[1024];
      TempFileName@1100285002 : Text[1024];
      FromFolderName@1100285006 : Text[1024];
      FromFileName@1100285007 : Text[1024];
    BEGIN
      IF ISSERVICETIER THEN BEGIN
        FromFileName := ExFFileMgt.GetFileName(FileName);
        FromFolderName := ExFFileMgt.Path(FileName);

        TempFileName := ExFFileMgt.ClientTempFileName(FromFileName,'');
        ToFolderName := ExFFileMgt.Path(TempFileName);
        ToFileName := ExFFileMgt.GetFileName(TempFileName);
        ExFFileMgt.Copy(FromFileName,ToFileName,FromFolderName,ToFolderName,FromFolderName);

        ToFileName := ExFFileMgt.ServerTempFileName(FromFileName,'');
        UPLOAD('', '<TEMP>', '', FileName, ToFileName);
        FileName := ToFileName;
      END;

      XMLFile.OPEN(FileName);
      XMLFile.CREATEINSTREAM(NVInStream);
      ExFlowSetupImportXMLport.SETSOURCE(NVInStream);
      ExFlowSetupImportXMLport.IMPORT;
      XMLFile.CLOSE;
      ExFlowSetupImportXMLport.GetTempData(TempExcelBuf);
    END;

    PROCEDURE ReadExcelSheet@1(VAR TempExcelBuf@1240150002 : TEMPORARY Record 370;FileName@1240150001 : Text[250];SheetName@1100285000 : Text[250]);
    BEGIN
      TempExcelBuf.OpenBook(FileName,SheetName);
      TempExcelBuf.ReadSheet;
    END;

    PROCEDURE InsertImportError@1000000005(VAR TempErrorRec@1240150007 : TEMPORARY Record 12013666;ErrorDesc@1000000000 : Text[1024];RowNo@1240150001 : Integer;ColumnNo@1240150002 : Integer;ColumnName@1240150003 : Text[10];FieldName@1240150004 : Text[100];PassedValue@1240150005 : Variant;PrimaryKey@1240150000 : Text[250]);
    BEGIN
      TempErrorRec.INIT;
      TempErrorRec."Entry No." += 1;

      TempErrorRec."Long Field Value" := COPYSTR(ErrorDesc,1,250);
      IF STRLEN(ErrorDesc) > 250 THEN
        TempErrorRec."Long Field Value 2" := COPYSTR(ErrorDesc,251,250);
      IF STRLEN(ErrorDesc) > 500 THEN
        TempErrorRec."Long Field Value 3" := COPYSTR(ErrorDesc,501,250);
      IF STRLEN(ErrorDesc) > 750 THEN
        TempErrorRec."Long Field Value 4" := COPYSTR(ErrorDesc,751,250);

      TempErrorRec."Row No." := RowNo;
      TempErrorRec."Column No." := ColumnNo;
      TempErrorRec."Field 1 Value" := FORMAT(RowNo);
      TempErrorRec."Field 2 Value" := FORMAT(ColumnNo);

      TempErrorRec."Column Name" := ColumnName;
      TempErrorRec."Field Name" := FieldName;
      TempErrorRec."Passed Value" := PassedValue;
      TempErrorRec."Primary Key" := PrimaryKey;
      TempErrorRec.INSERT;
    END;

    PROCEDURE ValidateField@1100802014(PassedFieldNo@1100802000 : Integer;PassedValue@1240150000 : Variant;RowNo@1240150009 : Integer;ColumnNo@1240150008 : Integer;ColumnName@1240150007 : Text[10];FieldName@1240150006 : Text[100];TableNo@1240150012 : Integer;FieldType@1240150016 : Integer;VAR TempRecRef@1240150015 : RecordRef;VAR TempErrorRec@1240150019 : TEMPORARY Record 12013666) : Boolean;
    VAR
      Field@1240150003 : Record 2000000041;
      FieldValidateTest@1240150020 : Codeunit 12013624;
      TempRecordRef@1240150001 : RecordRef;
      TempFieldRef@1240150002 : FieldRef;
      FieldError@1240150004 : Boolean;
      FieldErrorText@1240150013 : Text[1024];
      TempInt@1240150011 : Integer;
      TempBigInt@1100285002 : BigInteger;
      TempDec@1240150010 : Decimal;
      TempDate@1240150005 : Date;
      TempTime@1240150017 : Time;
      TempDateFormula@1240150014 : DateFormula;
      TempDateTime@1100285000 : DateTime;
      TempErrorDesc@1100285001 : Text[1024];
    BEGIN
      IF DoNotPerformValidateCheck THEN
        EXIT(TRUE);

      FieldValidateTest.SetRecordRef(TempRecRef);
      FieldValidateTest.SetFieldRef(PassedFieldNo);

      Field.Type := FieldType;

      CASE Field.Type OF
        Field.Type::Option:
          BEGIN
            TempRecordRef.OPEN(TableNo,TRUE);
            TempFieldRef := TempRecordRef.FIELD(PassedFieldNo);

            IF NOT ConvertOptionToInteger(TempInt, TempFieldRef.OPTIONCAPTION, FORMAT(PassedValue)) THEN BEGIN
              IF NOT ConvertOptionToInteger(TempInt, TempFieldRef.OPTIONSTRING, FORMAT(PassedValue)) THEN BEGIN
                FieldErrorText := STRSUBSTNO(Text004, FORMAT(PassedValue));
                FieldError := TRUE;
              END
              ELSE
                FieldValidateTest.SetOptionValue(TempInt);
            END
            ELSE
              FieldValidateTest.SetOptionValue(TempInt);
          END;
        Field.Type::Code:   FieldValidateTest.SetCodeValue(PassedValue);
        Field.Type::Date:
          BEGIN
            IF NOT ConvertTextToDate(TempDate, FORMAT(PassedValue)) THEN BEGIN
              FieldErrorText := STRSUBSTNO(Text007, FORMAT(PassedValue));
              FieldError := TRUE;
            END
            ELSE
              FieldValidateTest.SetDateValue(TempDate);
          END;
        Field.Type::Time:
          BEGIN
            IF NOT ConvertTextToTime(TempTime, FORMAT(PassedValue)) THEN BEGIN
              FieldErrorText := STRSUBSTNO(Text006, FORMAT(PassedValue));
              FieldError := TRUE;
            END
            ELSE
              FieldValidateTest.SetTimeValue(TempTime);
          END;
        Field.Type::Decimal:
          BEGIN
            EVALUATE(TempDec, FORMAT(PassedValue));
            FieldValidateTest.SetDecValue(TempDec);
          END;
        Field.Type::Integer:
          BEGIN
            IF FORMAT(PassedValue) = '' THEN
              TempInt := 0
            ELSE
              EVALUATE(TempInt, FORMAT(PassedValue));
            FieldValidateTest.SetIntValue(TempInt);
          END;
        Field.Type::BigInteger:
          BEGIN
            IF FORMAT(PassedValue) = '' THEN
              TempBigInt := 0
            ELSE
              EVALUATE(TempBigInt, FORMAT(PassedValue));
            FieldValidateTest.SetBigIntValue(TempBigInt);
          END;
        Field.Type::Boolean:
          BEGIN
            IF NOT EVALUATE(TempInt, FORMAT(PassedValue)) THEN
              IF UPPERCASE(FORMAT(PassedValue)) IN ['YES','Y','JA','J'] THEN
                TempInt := 1
              ELSE
                IF UPPERCASE(FORMAT(PassedValue)) IN ['NO','N','NEJ'] THEN
                  TempInt := 0;

            IF NOT (TempInt IN [0,1]) THEN BEGIN
              FieldErrorText := STRSUBSTNO(Text005, FORMAT(PassedValue));
              FieldError := TRUE;
            END
            ELSE
              FieldValidateTest.SetIntValue(TempInt)
          END;
        Field.Type::Text:   FieldValidateTest.SetTextValue(PassedValue);
        Field.Type::DateFormula:
          BEGIN
            EVALUATE(TempDateFormula, FORMAT(PassedValue));
            FieldValidateTest.SetDateFormulaValue(TempDateFormula);
          END;
        Field.Type::DateTime:
          BEGIN
            EVALUATE(TempDateTime, FORMAT(PassedValue));
            FieldValidateTest.SetDateTimeValue(TempDateTime);
          END;
        ELSE
          ERROR(STRSUBSTNO(Text003,Field.Type));
      END;

      IF FieldError THEN BEGIN
        InsertImportError(TempErrorRec,FieldErrorText,RowNo,ColumnNo,ColumnName,FieldName,PassedValue,
                          FORMAT(TempRecRef.RECORDID));
        EXIT(FALSE);
      END
      ELSE
        IF NOT FieldValidateTest.RUN THEN BEGIN
          TempErrorDesc := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(TempErrorDesc));
          InsertImportError(TempErrorRec,TempErrorDesc,RowNo,ColumnNo,ColumnName,FieldName,PassedValue,
                            FORMAT(TempRecRef.RECORDID));
          EXIT(FALSE);
        END
        ELSE
          EXIT(TRUE);
    END;

    PROCEDURE ExportErrorList@1240150000(VAR TempErrorRec@1240150004 : TEMPORARY Record 12013666;ErrorFileName@1100285000 : Text[250]);
    VAR
      XMLFile@1070000 : File;
      ExFlowSetupErrorList@1070001 : XMLport 12013604;
      NVoutStream@1070002 : OutStream;
      ToFileName@1100285001 : Text[1024];
      TempErrorFileName@1100285003 : Text[1024];
      ExFFileMgt@1100285002 : Codeunit 12013602;
    BEGIN
      TempErrorRec.RESET;
      IF TempErrorRec.COUNT = 0 THEN
        EXIT;

      TempErrorRec.INIT;
      TempErrorRec."Entry No." := -1;
      TempErrorRec."Sheet Name" := 'Sheet Name';
      TempErrorRec."Field 1 Value" := 'Row No.';
      TempErrorRec."Field 2 Value" := 'Column No.';
      TempErrorRec."Column Name" := 'Column Name';
      TempErrorRec."Primary Key" := 'Primary Key';
      TempErrorRec."Field Name" := 'Field Name';
      TempErrorRec."Passed Value" := 'Import Value';
      TempErrorRec."Long Field Value" := 'Error Description';
      TempErrorRec.INSERT;

      IF ISSERVICETIER THEN
        ErrorFileName := ExFFileMgt.ServerTempFileName(ExFFileMgt.GetFileName(ErrorFileName),'');

      XMLFile.CREATE(ErrorFileName);
      XMLFile.CREATEOUTSTREAM(NVoutStream);

      ExFlowSetupErrorList.SETDESTINATION(NVoutStream);
      ExFlowSetupErrorList.SetTempData(TempErrorRec);
      ExFlowSetupErrorList.EXPORT;

      ToFileName := XMLFile.NAME;
      XMLFile.CLOSE;

      IF ISSERVICETIER THEN BEGIN
        DOWNLOAD(ToFileName,'','<TEMP>','',TempErrorFileName);

        ExFFileMgt.Copy(ExFFileMgt.GetFileName(TempErrorFileName),
                        ExFFileMgt.GetFileName(ErrorFileName),
                        ExFFileMgt.Path(TempErrorFileName),
                        ExFFileMgt.Path(ErrorFileName),
                        ExFFileMgt.Path(TempErrorFileName));
      END;

      //HYPERLINK(ErrorFileName);
    END;

    LOCAL PROCEDURE AddExcelBuffer@1000000017(VAR TempExcelBuffer@1000000004 : TEMPORARY Record 12013665;Bold@1000000000 : Boolean;TextValue@1000000003 : Text[250];VAR TempLineNo@1000000002 : Integer;VAR TempColumnNo@1000000001 : Integer);
    BEGIN
      WITH TempExcelBuffer DO BEGIN
        INIT;
        Bold := Bold;
        VALIDATE("Row No.", TempLineNo);
        VALIDATE("Column No.", TempColumnNo);
        "Cell Value as Text" := TextValue;
        INSERT;
      END;

      TempColumnNo += 1;
    END;

    PROCEDURE ConvertOptionToInteger@1240150002(VAR OptionValue@1240150000 : Integer;OptionString@1240150001 : Text[1024];OptionValueString@1240150002 : Text[1024]) MatchFound : Boolean;
    VAR
      TempString@1240150003 : Text[1024];
      CommaPos@1240150004 : Integer;
      TempInt@1240150005 : Integer;
    BEGIN
      IF EVALUATE(TempInt, OptionValueString) THEN BEGIN
        MatchFound := TRUE;
        OptionValue := TempInt;
        EXIT;
      END;

      OptionValue := 0;
      MatchFound := FALSE;
      OptionString := UPPERCASE(OptionString);
      OptionValueString := UPPERCASE(OptionValueString);

      IF STRPOS(OptionString,',') = 0 THEN BEGIN
        MatchFound := OptionString = OptionValueString;
      END
      ELSE BEGIN
        CommaPos := STRPOS(OptionString,',');
        TempString := COPYSTR(OptionString,1,CommaPos - 1);
        OptionString := DELSTR(OptionString,1,CommaPos);
        MatchFound := TempString = OptionValueString;

        WHILE (NOT MatchFound) AND (CommaPos <> 0) DO BEGIN
          CommaPos := STRPOS(OptionString,',');
          IF CommaPos = 0 THEN BEGIN
            TempString := OptionString;
          END
          ELSE BEGIN
            TempString := COPYSTR(OptionString,1,CommaPos - 1);
            OptionString := DELSTR(OptionString,1,CommaPos);
          END;

          OptionValue += 1;
          MatchFound := TempString = OptionValueString;
        END;
      END;
    END;

    PROCEDURE ConvertTextToTime@1240150003(VAR OutTime@1240150001 : Time;InString@1240150000 : Text[250]) : Boolean;
    VAR
      TempDec@1240150002 : Decimal;
      Hour@1240150003 : Integer;
      Min@1240150005 : Integer;
      Sec@1240150004 : Integer;
    BEGIN
      IF EVALUATE (TempDec, InString) THEN BEGIN
        TempDec := TempDec * 24;
        Hour := ROUND(TempDec,1,'<');
        TempDec := (TempDec - Hour);
        TempDec := TempDec * 60;
        Min := ROUND(TempDec,1,'<');
        TempDec := TempDec - Min;
        TempDec := TempDec * 60;
        Sec := ROUND(TempDec, 1, '=');
        EVALUATE(OutTime, FORMAT(FORMAT(Hour) + '.' + FORMAT(Min) + '.' + FORMAT(Sec)));
        EXIT(TRUE);
      END
      ELSE
        IF NOT EVALUATE(OutTime,InString) THEN BEGIN
          IF STRPOS(InString,'AM') <> 0 THEN BEGIN
            InString := DELCHR(InString, '=', 'AM');
            EXIT(EVALUATE(OutTime,InString));
          END;
          IF STRPOS(InString,'PM') <> 0 THEN BEGIN
            InString := DELCHR(InString, '=', 'PM');
            IF EVALUATE(OutTime,InString) THEN BEGIN
              OutTime += 12;
              EXIT(TRUE);
            END
            ELSE
              EXIT(FALSE);
          END;
        END
        ELSE
          EXIT(TRUE);
    END;

    PROCEDURE ConvertTextToDate@1240150006(VAR OutDate@1240150002 : Date;InString@1240150001 : Text[250]) : Boolean;
    VAR
      TempInt@1240150000 : Integer;
      StartDate@1240150003 : Date;
    BEGIN
      IF EVALUATE(TempInt, InString) THEN BEGIN
        StartDate := DMY2DATE(1,3,1900);
        OutDate := StartDate + TempInt;
        EXIT(TRUE);
      END
      ELSE
        IF EVALUATE(OutDate, InString) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
    END;

    PROCEDURE SetValidateCheck@1240150004(_DoNotPerformValidateCheck@1240150000 : Boolean);
    BEGIN
      DoNotPerformValidateCheck := _DoNotPerformValidateCheck;
    END;

    PROCEDURE "***ExportRoutines***"@1100285000();
    BEGIN
    END;

    PROCEDURE GetExportFileInfo@1100285005(VAR FileName@1240150002 : Text[250];VAR TempCompanyList@1100285000 : TEMPORARY Record 12013666;VAR TempTableList@1100285001 : TEMPORARY Record 12013666);
    VAR
      ExFlowFileForm@1240150000 : Page 12013677;
    BEGIN
      ExFlowFileForm.LOOKUPMODE := TRUE;
      IF ExFlowFileForm.RUNMODAL <> ACTION::LookupOK THEN
        ERROR(Text012);

      ExFlowFileForm.GetFileInfo(FileName,TempCompanyList,TempTableList);
    END;

    PROCEDURE ExportExFlowSetups@1100285001();
    VAR
      TempTableList@1100285000 : TEMPORARY Record 12013666;
      FieldList@1100285001 : Record 2000000041;
      TempExcelBuf@1100285004 : TEMPORARY Record 12013665;
      TempCompanyList@1100285008 : TEMPORARY Record 12013666;
      ExportFieldRef@1100285002 : FieldRef;
      ExportRecordRef@1100285003 : RecordRef;
      TempLineNo@1100285005 : Integer;
      TempColumnNo@1100285006 : Integer;
      FileName@1100285007 : Text[250];
      FieldNamesExported@1070000 : Boolean;
    BEGIN
      GetExportFileInfo(FileName,TempCompanyList,TempTableList);

      UpdateExUser;
      COMMIT;

      TempExcelBuf.RESET;
      TempExcelBuf.DELETEALL;

      TempTableList.RESET;
      TempTableList.SETRANGE(Selected, TRUE);
      IF TempTableList.FIND('-') THEN BEGIN
        REPEAT
          TempLineNo := 0;

          CLEAR(ExportRecordRef);
          ExportRecordRef.OPEN(TempTableList."Field 1 Integer Value",FALSE);
          CASE TempTableList."Field 1 Integer Value" OF
            2000000004: // User Role
              BEGIN
                ExportFieldRef := ExportRecordRef.FIELD(1); // Role ID
                ExportFieldRef.SETFILTER(ExFlowFilter);
              END;
            2000000005: // Permission
              BEGIN
                ExportFieldRef := ExportRecordRef.FIELD(1); // Role ID
                ExportFieldRef.SETFILTER(ExFlowFilter);
              END;
          END;

          FieldNamesExported := FALSE;

          TempCompanyList.RESET;
          TempCompanyList.FIND('-');
          REPEAT
            //IF TempTableList."Field No" <> 0 THEN BEGIN
            //  ExportFieldRef := ExportRecordRef.FIELD(TempTableList."Field No"); // Company Name field
            //  ExportFieldRef.SETFILTER(TempCompanyList."Company Name");
            //END;

            IF ExportRecordRef.FINDSET THEN BEGIN
              TempLineNo += 1;
              TempColumnNo := 1;
              IF NOT FieldNamesExported THEN BEGIN
                FieldList.RESET;
                FieldList.SETFILTER(Type, '<>%1', FieldList.Type::BLOB);
                FieldList.SETRANGE(TableNo, TempTableList."Field 1 Integer Value");
                IF TempTableList."Field 1 Integer Value" = DATABASE::"EX User Company" THEN
                  FieldList.SETFILTER("No.", '<>%1', 20); // do not export passwords, which is encrypted
                IF FieldList.FINDSET THEN
                  REPEAT
                    AddExcelBufferExport(TempExcelBuf,TempTableList."Field 1 Integer Value",TempTableList."Entry No.",
                                         FieldList.FieldName,TempLineNo,TempColumnNo);
                  UNTIL FieldList.NEXT = 0;

                FieldNamesExported := TRUE;
              END;

              REPEAT
                TempLineNo += 1;
                FieldList.RESET;
                FieldList.SETFILTER(Type, '<>%1', FieldList.Type::BLOB);
                FieldList.SETRANGE(TableNo, TempTableList."Field 1 Integer Value");
                IF TempTableList."Field 1 Integer Value" = DATABASE::"EX User Company" THEN
                  FieldList.SETFILTER("No.", '<>%1', 20); // do not export passwords, which is encrypted

                IF FieldList.FINDSET THEN BEGIN
                  TempColumnNo := 1;

                  REPEAT
                    ExportFieldRef := ExportRecordRef.FIELD(FieldList."No.");
                    IF FieldList."No." = TempTableList."Field No" THEN
                      AddExcelBufferExport(TempExcelBuf,TempTableList."Field 1 Integer Value",TempTableList."Entry No.",
                                           TempCompanyList."New Company Name",TempLineNo,TempColumnNo)
                    ELSE
                      AddExcelBufferExport(TempExcelBuf,TempTableList."Field 1 Integer Value",TempTableList."Entry No.",
                                           FORMAT(ExportFieldRef.VALUE),TempLineNo,TempColumnNo);
                  UNTIL FieldList.NEXT = 0;

                  CLEAR(ExportFieldRef);
                END;
              UNTIL ExportRecordRef.NEXT = 0;
            END;
          UNTIL TempCompanyList.NEXT = 0;
        UNTIL TempTableList.NEXT = 0;

        ExportXMLData(TempExcelBuf,FileName);
      END;
    END;

    PROCEDURE CreateListofTables@1100285002(VAR TempTableList@1100285000 : TEMPORARY Record 12013666);
    VAR
      Object@1100285002 : Record 2000000001;
      TempLineNo@1100285001 : Integer;
    BEGIN
      TempLineNo := 1;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"ExFlow Setup";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX User Level Permission";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Column";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Line Type";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Coding Rule";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Commpany name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Ex Coding Rule Line";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX User Company";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX User Group";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX User Group Line";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Template Rule";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Template Rule Line";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Commpany name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Vendor ID Field";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Commpany name field
      TempTableList."Field 1 Integer Value" := 2000000004; // DATABASE::"User Role";
      TempTableList."Field 1 Value" := Text010;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Commpany name field
      TempTableList."Field 1 Integer Value" := 2000000005; // DATABASE::Permission;
      TempTableList."Field 1 Value" := Text011;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Commpany name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Standard Purchase Code";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Commpany name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Standard Purchase Line";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Commpany name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Reference";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Coding Rule Approval Group";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"ExFlow Vendor Adv. Option";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Line Advanced Option";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Ex Doc Purchase Header Mapping";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"ExFlow Email Header";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Dimension G/L Mapping Req.";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Requisition Rule";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 2; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Invoicing Code";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 2; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Web Codes";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 2; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Country";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 2; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Location";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 2; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Ex ReadSoft Online Export";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Location Adv Option";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Fraudulent Vendor ID Setup";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"OCR Format Conversion";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"OCR Unit Conversion";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"ExFlow Contract Matching";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 0; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"Dimension Owner";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := TRUE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Document";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := FALSE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Document Line";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := FALSE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Document Line Approver";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := FALSE;
      TempTableList.INSERT;

      TempTableList.INIT;
      TempTableList."Entry No." := TempLineNo;
      TempLineNo += 1;
      TempTableList."Field No" := 1; // Company name field
      TempTableList."Field 1 Integer Value" := DATABASE::"EX Document Line Dimension";
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TempTableList."Field 1 Integer Value");
      Object.FINDFIRST;
      Object.CALCFIELDS(Caption);
      TempTableList."Field 1 Value" := Object.Caption;
      TempTableList.Selected := FALSE;
      TempTableList.INSERT;
    END;

    LOCAL PROCEDURE AddExcelBufferExport@1100285003(VAR TempExcelBuffer@1000000004 : TEMPORARY Record 12013665;_TableNo@1000000000 : Integer;SortOrder@1070000 : Integer;TextValue@1000000003 : Text[250];VAR TempLineNo@1000000002 : Integer;VAR TempColumnNo@1000000001 : Integer);
    BEGIN
      WITH TempExcelBuffer DO BEGIN
        INIT;
        "Sort Order" := SortOrder;
        VALIDATE("Row No.", TempLineNo);
        VALIDATE("Column No.", TempColumnNo);
        "Cell Value as Text" := TextValue;
        TableNo := FORMAT(_TableNo);
        INSERT;
      END;

      TempColumnNo += 1;
    END;

    PROCEDURE ExportXMLData@1100285004(VAR TempExcelBuf@1100285003 : TEMPORARY Record 12013665;FileName@1100285004 : Text[250]);
    VAR
      NVOutStream@1100285001 : OutStream;
      XMLFile@1100285000 : File;
      ExFlowSetupExportXML@1100285002 : XMLport 12013603;
      ExFFileMgt@1100285006 : Codeunit 12013602;
      TempFileName@1100285005 : Text[1024];
    BEGIN
      IF FILE.EXISTS(FileName) THEN
        FILE.ERASE(FileName);

      IF ISSERVICETIER THEN
        TempFileName := ExFFileMgt.ServerTempFileName(ExFFileMgt.GetFileName(FileName),'')
      ELSE
        TempFileName := FileName;

      XMLFile.CREATE(TempFileName);
      XMLFile.CREATEOUTSTREAM(NVOutStream);
      ExFlowSetupExportXML.SetTempData(TempExcelBuf);
      ExFlowSetupExportXML.SETDESTINATION(NVOutStream);
      ExFlowSetupExportXML.EXPORT;
      XMLFile.CLOSE;

      IF ISSERVICETIER THEN BEGIN
        DOWNLOAD(TempFileName,'','<TEMP>','',TempFileName);

        ExFFileMgt.Copy(ExFFileMgt.GetFileName(TempFileName),
                        ExFFileMgt.GetFileName(FileName),
                        ExFFileMgt.Path(TempFileName),
                        ExFFileMgt.Path(FileName),
                        ExFFileMgt.Path(TempFileName));
      END;
    END;

    PROCEDURE UpdateExUser@1100285010();
    VAR
      ExUserCompany@1100285000 : Record 12013641;
      ExCodingRule@1100285001 : Record 12013660;
    BEGIN
      ExUserCompany.RESET;
      IF ExUserCompany.FINDSET(TRUE) THEN
        REPEAT
          IF ExCodingRule.GET(ExUserCompany."Coding Rule ID") THEN BEGIN
            ExUserCompany."Coding Rule Name" := ExCodingRule.Name;
            ExUserCompany.MODIFY;
          END
          ELSE BEGIN
            ExUserCompany."Coding Rule Name" := '';
            ExUserCompany.MODIFY;
          END;
        UNTIL ExUserCompany.NEXT = 0;
    END;

    BEGIN
    {
      FIX HYPERLINK
    }
    END.
  }
}

