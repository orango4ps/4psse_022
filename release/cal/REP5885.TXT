OBJECT Report 5885 Calc. Phys. Invt. Order (Bins)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Inventurauftrag berechnen (LagerplÑtze);
               ENU=Calc. Phys. Invt. Order (Bins);
               NLD=Inventarisatieorder berekenen (opslaglocaties);
               NOR=Ordre for beregnet vareopptelling (hyller)];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 7020;    ;DataItem;                    ;
               DataItemTable=Table7354;
               DataItemTableView=SORTING(Location Code,Code);
               OnPreDataItem=BEGIN
                               PhysInvtOrderHeader.TESTFIELD("No.");
                               PhysInvtOrderHeader.TESTFIELD(Status,PhysInvtOrderHeader.Status::Open);

                               PhysInvtOrderHeader.LOCKTABLE;
                               PhysInvtOrderLine.LOCKTABLE;

                               PhysInvtOrderLine.RESET;
                               PhysInvtOrderLine.SETRANGE("Document No.",PhysInvtOrderHeader."No.");
                               IF PhysInvtOrderLine.FINDLAST THEN
                                 NextLineNo := PhysInvtOrderLine."Line No." + 10000
                               ELSE
                                 NextLineNo := 10000;

                               IF NOT HideValidationDialog THEN
                                 Window.OPEN(CalculatingLinesMsg + LocationAndBinMsg);

                               LineCount := 0;
                               ItemsBlocked := FALSE;
                             END;

               OnAfterGetRecord=VAR
                                  Item@1000 : Record 27;
                                BEGIN
                                  Location.GET("Location Code");
                                  Location.TESTFIELD("Bin Mandatory");

                                  IF NOT HideValidationDialog THEN BEGIN
                                    Window.UPDATE(1,"Location Code");
                                    Window.UPDATE(2,Code);
                                  END;

                                  LastLocationCode := '';
                                  LastBinCode := '';
                                  LastItemNo := '';
                                  LastVariantCode := '';

                                  WhseEntry.RESET;
                                  WhseEntry.SETCURRENTKEY("Location Code","Bin Code","Item No.","Variant Code");
                                  WhseEntry.SETRANGE("Location Code","Location Code");
                                  WhseEntry.SETRANGE("Bin Code",Code);
                                  IF WhseEntry.FIND('-') THEN
                                    REPEAT
                                      IF Item.GET(WhseEntry."Item No.") THEN
                                        IF NOT Item.Blocked THEN
                                          IF (LastLocationCode <> WhseEntry."Location Code") OR
                                             (LastBinCode <> WhseEntry."Bin Code") OR
                                             (LastItemNo <> WhseEntry."Item No.") OR
                                             (LastVariantCode <> WhseEntry."Variant Code")
                                          THEN BEGIN
                                            LastLocationCode := WhseEntry."Location Code";
                                            LastBinCode := WhseEntry."Bin Code";
                                            LastItemNo := WhseEntry."Item No.";
                                            LastVariantCode := WhseEntry."Variant Code";
                                            IF PhysInvtOrderHeader.GetSamePhysInvtOrderLine(
                                                 WhseEntry."Item No.",WhseEntry."Variant Code",
                                                 WhseEntry."Location Code",
                                                 WhseEntry."Bin Code",
                                                 ErrorText,
                                                 PhysInvtOrderLine) = 0
                                            THEN
                                              CreateNewPhysInvtOrderLine;
                                          END ELSE
                                            ItemsBlocked := TRUE;
                                    UNTIL WhseEntry.NEXT = 0;
                                END;

               OnPostDataItem=BEGIN
                                IF NOT HideValidationDialog THEN BEGIN
                                  Window.CLOSE;
                                  IF ItemsBlocked THEN
                                    MESSAGE(BlockedItemMsg);
                                  MESSAGE(
                                    STRSUBSTNO(LinesCreatedMsg,LineCount));
                                END;
                              END;

               ReqFilterFields=Location Code,Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Erwartete Menge berechnen;
                             ENU=Calculate Qty. Expected;
                             NLD=Verwacht aantal berekenen;
                             NOR=Beregnet antall forventet];
                  ToolTipML=[DEU=Gibt an, ob das Programm den Inhalt des Felds "Erwartete Menge" fÅr die neu erstellten Inventurauftragszeilen berechnen und einfÅgen soll.;
                             ENU=Specifies if you want the program to calculate and insert the contents of the field quantity expected for new created physical inventory order lines.;
                             NLD=Hiermee wordt opgegeven of u wilt dat het programma de inhoud van het veld met het verwachte aantal berekent en invoegt voor nieuw gemaakte regels van inventarisatieorders.;
                             NOR=Angir om du vil at programmet skal beregne og sette inn innholdet i feltantallet som er forventet for nyopprettede ordrelinjer for vareopptelling.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CalcQtyExpected }

      { 2   ;2   ;Field     ;
                  CaptionML=[DEU=Artikel nicht auf Lager;
                             ENU=Items Not on Inventory;
                             NLD=Artikelen niet in voorraad;
                             NOR=Varer ikke pÜ lager];
                  ToolTipML=[DEU=Gibt an, ob Buch.-Blattzeilen fÅr Artikel erstellt werden sollen, die nicht am Lager sind, also fÅr Artikel, deren Wert im Feld "Menge (berechnet)" 0 ist.;
                             ENU=Specifies if journal lines should be created for items that are not on inventory, that is, items where the value in the Qty. (Calculated) field is 0.;
                             NLD=Hiermee wordt opgegeven of er dagboekregels moeten worden gemaakt voor artikelen die niet in voorraad zijn. Dat zijn artikelen waarvoor de waarde in het veld Aantal (berekend) 0 is.;
                             NOR=Angir om kladdelinjer skal opprettes for varer som ikke er pÜ lager, det vil si varer der verdien i feltet Antall (beregnet) er 0.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ZeroQty }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CalculatingLinesMsg@1000 : TextConst 'DEU=Berechne die Auftragszeilen...\\;ENU=Calculating the order lines...\\;NLD=De orderregels berekenen...\\;NOR=Beregner ordrelinjene...\\';
      LocationAndBinMsg@1001 : TextConst '@@@="%1,%2 = counters";DEU=Lagerort #1########   Lagerfach #2############;ENU=Location #1########   Bin #2############;NLD=Vestiging #1########   opslaglocatie #2############;NOR=Lokasjon #1########   Hylle #2############';
      LinesCreatedMsg@1002 : TextConst '@@@="%1 = counter";DEU=%1 neue Zeilen wurden erstellt.;ENU=%1 new lines have been created.;NLD=Er zijn %1 nieuwe regels gemaakt.;NOR=%1 nye linjer er opprettet.';
      BlockedItemMsg@1020 : TextConst 'DEU=Mindestens ein gesperrter Artikel wurde Åbersprungen.;ENU=There is at least one blocked item that was skipped.;NLD=Er is ten minste ÇÇn geblokkeerd artikel overgeslagen.;NOR=Det finnes minst Çn sperret vare som ble hoppet over.';
      PhysInvtOrderHeader@1003 : Record 5875;
      PhysInvtOrderLine@1004 : Record 5876;
      Location@1005 : Record 14;
      WhseEntry@1006 : Record 7312;
      Window@1007 : Dialog;
      ErrorText@1008 : Text[250];
      LastItemNo@1009 : Code[20];
      LastVariantCode@1010 : Code[10];
      LastLocationCode@1011 : Code[10];
      LastBinCode@1012 : Code[20];
      QtyExp@1013 : Decimal;
      LastItemLedgEntryNo@1014 : Integer;
      NextLineNo@1015 : Integer;
      LineCount@1016 : Integer;
      HideValidationDialog@1017 : Boolean;
      ZeroQty@1018 : Boolean;
      CalcQtyExpected@1019 : Boolean;
      ItemsBlocked@1021 : Boolean;

    [External]
    PROCEDURE SetPhysInvtOrderHeader@1(NewPhysInvtOrderHeader@1000 : Record 5875);
    BEGIN
      PhysInvtOrderHeader := NewPhysInvtOrderHeader;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@2(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE CreateNewPhysInvtOrderLine@3();
    BEGIN
      PhysInvtOrderLine.PrepareLine(
        PhysInvtOrderHeader."No.",NextLineNo,
        WhseEntry."Item No.",WhseEntry."Variant Code",WhseEntry."Location Code",WhseEntry."Bin Code",'',0);
      PhysInvtOrderLine.CalcQtyAndLastItemLedgExpected(QtyExp,LastItemLedgEntryNo);
      IF (QtyExp <> 0) OR ZeroQty THEN BEGIN
        PhysInvtOrderLine.INSERT(TRUE);
        PhysInvtOrderLine.CreateDim(DATABASE::Item,PhysInvtOrderLine."Item No.");
        IF CalcQtyExpected THEN
          PhysInvtOrderLine.CalcQtyAndTrackLinesExpected;
        PhysInvtOrderLine.MODIFY;
        NextLineNo := NextLineNo + 10000;
        LineCount := LineCount + 1;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

