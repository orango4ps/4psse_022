OBJECT Table 8632 Config. Record For Processing
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=Config. Record For Processing;
               NOR=Konfig. post for behandling];
  }
  FIELDS
  {
    { 1   ;   ;Package Code        ;Code20        ;TableRelation="Config. Package";
                                                   CaptionML=[ENU=Package Code;
                                                              NOR=Pakkekode;
                                                              SVE=Paketkod] }
    { 2   ;   ;Table ID            ;Integer       ;CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 3   ;   ;Rule No.            ;Integer       ;CaptionML=[ENU=Rule No.;
                                                              NOR=Regelnummer;
                                                              SVE=Regelnr] }
    { 4   ;   ;Record No.          ;Integer       ;CaptionML=[ENU=Record No.;
                                                              NOR=Postnr.;
                                                              SVE=Postnr] }
  }
  KEYS
  {
    {    ;Package Code,Table ID,Rule No.,Record No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE AddRecord@1(ConfigPackageRecord@1000 : Record 8614;ProcessingRuleNo@1001 : Integer);
    BEGIN
      INIT;
      "Package Code" := ConfigPackageRecord."Package Code";
      "Table ID" := ConfigPackageRecord."Table ID";
      "Rule No." := ProcessingRuleNo;
      "Record No." := ConfigPackageRecord."No.";
      INSERT;
    END;

    [External]
    PROCEDURE FindConfigRecord@3(VAR ConfigPackageRecord@1000 : Record 8614) : Boolean;
    BEGIN
      EXIT(ConfigPackageRecord.GET("Package Code","Table ID","Record No."));
    END;

    [External]
    PROCEDURE FindConfigRule@4(VAR ConfigTableProcessingRule@1000 : Record 8631) : Boolean;
    BEGIN
      CLEAR(ConfigTableProcessingRule);
      EXIT(ConfigTableProcessingRule.GET("Package Code","Table ID","Rule No."));
    END;

    [External]
    PROCEDURE FindInsertedRecord@2(VAR RecRef@1000 : RecordRef) : Boolean;
    VAR
      ConfigPackageField@1003 : Record 8616;
      FieldRef@1004 : FieldRef;
      FieldValue@1001 : Text;
    BEGIN
      RecRef.OPEN("Table ID");
      IF FindPrimaryKeyFields(ConfigPackageField) THEN
        REPEAT
          FieldRef := RecRef.FIELD(ConfigPackageField."Field ID");
          FieldValue := GetFieldValue(ConfigPackageField."Field ID");
          IF FieldValue <> '' THEN
            FieldRef.SETFILTER(FieldValue)
          ELSE
            FieldRef.SETFILTER('%1','');
        UNTIL ConfigPackageField.NEXT = 0;
      IF RecRef.HASFILTER THEN
        EXIT(RecRef.FINDFIRST);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindPrimaryKeyFields@5(VAR ConfigPackageField@1000 : Record 8616) : Boolean;
    BEGIN
      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.SETRANGE("Primary Key",TRUE);
      EXIT(ConfigPackageField.FINDSET);
    END;

    LOCAL PROCEDURE GetFieldValue@13(FieldId@1001 : Integer) : Text[250];
    VAR
      ConfigPackageData@1000 : Record 8615;
    BEGIN
      ConfigPackageData.GET("Package Code","Table ID","Record No.",FieldId);
      EXIT(ConfigPackageData.Value);
    END;

    BEGIN
    END.
  }
}

