OBJECT Codeunit 11012195 XML Encode (4PS-Mobile)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMMgtCU@1100485000 : Codeunit 11020220;
      FormatCU@1100485001 : Codeunit 11020221;
      StringFunctions@1100525000 : Codeunit 11012273;

    PROCEDURE MobileSetup@1100525003(FPSMobileSetup@1001 : Record 11012676;ServiceSetup@1100528100 : Record 11012800;ResourceNo@1100525000 : Code[20];VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      Employee@1100525001 : Record 5200;
      PlantSetup@1100527000 : Record 11012550;
      ResourceWOP@1100525002 : Record 11229278;
      DispatchSetup@1100525005 : Record 11072270;
      SignatureSetup@1100529900 : Record 11229866;
      DispatchInterface@1100525003 : Codeunit 11071685;
      IsDispatchWoonActive@1100525004 : Boolean;
      SignatureDecentralOrderMandatory@1100529901 : Boolean;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      XMLDocOut.LoadXml('<ResponseMobileSetup/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'MobileSetup','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        CASE FPSMobileSetup."Determine Def. CO Working Hrs." OF
          FPSMobileSetup."Determine Def. CO Working Hrs."::Setup:
            BEGIN
              IF AddElement(XMLCurrNode,'DefaultCostObjectWorkHrs',
                  FPSMobileSetup."Def. Cost Object Working Hrs",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateWorkingHoursService', FPSMobileSetup."Def. Hr.Ln. Templ. Wk. Serv.", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateWorkingHoursProject', FPSMobileSetup."Def. Hr.Ln. Templ. Wk. Proj.", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
            END;
          FPSMobileSetup."Determine Def. CO Working Hrs."::Employee:
            BEGIN
              ResourceWOP.GET(ResourceNo);
              Employee.CHANGECOMPANY(ResourceWOP.Company);
              Employee.GET(ResourceWOP."Source No.");
              IF AddElement(XMLCurrNode,'DefaultCostObjectWorkHrs',Employee."Global Dimension 2 Code",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateWorkingHoursService', Employee."Hour Line Templ. Code Service", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateWorkingHoursProject', Employee."Hour Line Templ. Code Project", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
            END;
        END;
        IF AddElement(XMLCurrNode,'DefaultWageCompWorkHrs',
            FPSMobileSetup."Def. Wage Comp. Working Hrs",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultCostObjectTravelHrs',
            FPSMobileSetup."Def. Cost Object Travel Hrs",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultWageCompTravelHrs',
            FPSMobileSetup."Def. Wage Comp. Travel Hrs",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultCostObjectItems',
            FPSMobileSetup."Def. Cost Object Items",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultCostCodePause',
            FPSMobileSetup."Def. Cost Code Pause",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultCostCodeUnderUtil',
            FPSMobileSetup."Def. Cost Code Under-util.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultCostCodeBreak',
            FPSMobileSetup."Def. Cost Code Break",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DaySheetPresentation', // obsolete from 210
            FormatDaysheetPresentation(FPSMobileSetup),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DaySheetPresentation2',
            FormatCU.FormatOptionNo(FPSMobileSetup."Daysheet Presentation 2"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'RoundWorkHrsOnMins',
            FORMAT(FPSMobileSetup."Round Working Hours on Minutes"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'RoundTravelHrsOnMins',
            FORMAT(FPSMobileSetup."Round Travel Hours on Minutes"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultInitialMinutesWorkingHours',
            FORMAT(FPSMobileSetup."Def. Init. Minutes Work. Hours"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultRoundWorkingHoursOnMinutes',
            FORMAT(FPSMobileSetup."Def. Round Work. Hours on Min."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DefaultRoundTravelHoursOnMinutes',
            FORMAT(FPSMobileSetup."Def. Round Trav. Hours on Min."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Field1MainForm',
            FPSMobileSetup."Field 1 Main Form",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Field2MainForm',
           FPSMobileSetup."Field 2 Main Form",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Field3MainForm',
            FPSMobileSetup."Field 3 Main Form",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Field4MainForm',
            FPSMobileSetup."Field 4 Main Form",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Field5MainForm',
            FPSMobileSetup."Field 5 Main Form",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UseObjectFunctionality', FormatCU.FormatBoolean(TRUE) ,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SyncConsignmentAndAbsence',
            FormatCU.FormatBoolean(FPSMobileSetup."Sync. Consignment and Absence"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UseDecentralPlanning',
            FormatCU.FormatBoolean(FPSMobileSetup."Use Decentral Planning"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DocumentMgmtMaxFileSize',
            FORMAT(FPSMobileSetup."Document Mgmt. Max. File Size" * 1024),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AnalysisCodeCallMandatory',
            FormatCU.FormatBoolean(FPSMobileSetup."Analysis Code Call Mandatory"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ServiceLocsOnlineAvail',
            FormatCU.FormatBoolean(FPSMobileSetup."Service Locs. Online Avail."),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ServiceObjectsOnlineAvail', // Only exists for backwards compatibility
            FormatCU.FormatBoolean(FPSMobileSetup."Add Existing Objects Allowed"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ItemsOnlineAvail',
            FormatCU.FormatBoolean(FPSMobileSetup."Items Online Available"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CanCreatePurchaseOrders',
            FormatCU.FormatBoolean(FPSMobileSetup."Create Purchase Order"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ObjectGroupFixedForObjects',
            FormatCU.FormatBoolean(FPSMobileSetup."Object Group Fixed for Objects"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        //DP00195 sn.
        IF AddElement(XMLCurrNode,'IsPlantActive',
            FormatCU.FormatBoolean(FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup)),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        //DP00195 en.
        IF AddElement(XMLCurrNode,'DescriptionCostPlusEntryService',
            FormatCU.FormatOptionNo(ServiceSetup."Description Cost Plus Entry"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AddEntryPostingDatetoCPE',
            FormatCU.FormatBoolean(ServiceSetup."OLDAdd Entry Posting Date to C"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UseQuantityAdviced',
            FormatCU.FormatBoolean(FPSMobileSetup."Use Quantity Adviced"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'OrderKindTypeEditable',
            FormatCU.FormatBoolean(FPSMobileSetup."Order Kind/Type Editable"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CostPlusLinesWithQtyZero',
            FormatCU.FormatBoolean(FPSMobileSetup."Cost Plus Lines with Qty Zero"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ObjectNoOnCPLinesMandatory',
            FormatCU.FormatBoolean(FPSMobileSetup."Object on CP Lines Mandatory"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'WorkOrdersOnlineAvailable',
            FormatCU.FormatBoolean(FPSMobileSetup."Work Orders Online Available"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AddExistingObjectsAllowed',
            FormatCU.FormatBoolean(FPSMobileSetup."Add Existing Objects Allowed"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'CreateNewObjectsAllowed',
            FormatCU.FormatBoolean(FPSMobileSetup."Create New Objects Allowed"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ReplaceObjectsAllowed',
            FormatCU.FormatBoolean(FPSMobileSetup."Replace Objects Allowed"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'StandardObjectEditable',
            FormatCU.FormatBoolean(FPSMobileSetup."Standard Object Editable"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP00826.sn
        IF AddElement(XMLCurrNode, 'SyncObjectBrandModelType',
            FormatCU.FormatBoolean(ServiceSetup."Sync. Object Brand/Model/Type"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP00826.en
        IF AddElement(XMLCurrNode,'CommunicationFieldsEditable',
            FormatCU.FormatBoolean(FPSMobileSetup."Communication Fields Editable"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DonotCreateWorkingTimesAut',
            FormatCU.FormatBoolean(FPSMobileSetup."Donot Create Working Times Aut"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'CustomersOnlineAvailable',
            FormatCU.FormatBoolean(FPSMobileSetup."Customers Online Available"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP01061.sn
        IF AddElement(XMLCurrNode, 'UseVesselFunctionality',
            FormatCU.FormatBoolean(FPSMobileSetup."Use Vessel Functionality"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP01061.en
        IsDispatchWoonActive := FALSE;
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DispatchSetup) THEN
          IsDispatchWoonActive := DispatchInterface.IsDispatchWoonActive;
        IF AddElement(XMLCurrNode, 'DispatchWoonActive',
            FormatCU.FormatBoolean(IsDispatchWoonActive), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'WorkDescriptionEditable',
            FormatCU.FormatBoolean(FPSMobileSetup."Work Description Editable"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AddUnitPricesAllowed',
            FormatCU.FormatBoolean(FPSMobileSetup."Add Unit Prices Allowed"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'CompanyDecOrderEditable',
            FormatCU.FormatBoolean(FPSMobileSetup."Company Dec. Order Editable"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UseHourLineTemplates',
            FormatCU.FormatBoolean(FPSMobileSetup."Use Hour Line Templates"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateTravelHoursService', FPSMobileSetup."Def. Hr.Ln. Templ. Tr. Serv.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateTravelHoursProject', FPSMobileSetup."Def. Hr.Ln. Templ. Tr. Proj.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'DefaultHourLineTemplatePause', FPSMobileSetup."Def. Hr.Ln. Templ. Pause", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateUnderUntil', FPSMobileSetup."Def. Hr.Ln. Templ. Under-util.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'DefaultHourLineTemplateBreak', FPSMobileSetup."Def. Hr.Ln. Templ. Break", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'MileageRegistration',
          FormatCU.FormatBoolean(FPSMobileSetup."Mileage Registration"), DocNameSpace, XMLNewChild) > 0 THEN
            EXIT(FALSE);
        SignatureSetup.RESET;
        SignatureSetup.SETRANGE("Source Type", SignatureSetup."Source Type"::Call);
        SignatureSetup.SETRANGE(Decentral, TRUE);
        SignatureSetup.SETRANGE("Signature Mandatory", TRUE);
        SignatureDecentralOrderMandatory := SignatureSetup.FINDFIRST;
        IF AddElement(XMLCurrNode, 'SignatureDecentralOrderMandatory',
          FormatCU.FormatBoolean(SignatureDecentralOrderMandatory), DocNameSpace, XMLNewChild) > 0 THEN
            EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'BreakInHoursAccounting',
          FormatCU.FormatBoolean(FPSMobileSetup."Break in Hours Accounting"), DocNameSpace, XMLNewChild) > 0 THEN
            EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE MobileUserSettings@1100409002(MobileUserSettings@1100409003 : Record 11125654;VAR XMLDocument@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100409012 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100409011 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100409010 : Text[50];
      FieldTable@1100409008 : Record 2000000041;
      RecRef@1100409007 : RecordRef;
      FldRef@1100409006 : FieldRef;
      OptionValue@1100409002 : Integer;
      FieldName@1100409009 : Text;
    BEGIN
      XMLDocument.LoadXml('<ResponseMobileUserSettings/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'MobileUserSettings', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        RecRef.GETTABLE(MobileUserSettings);
        FieldTable.SETRANGE(TableNo, RecRef.NUMBER);
        FieldTable.SETRANGE(Enabled, TRUE);
        IF FieldTable.FINDSET THEN
          REPEAT
            FldRef := RecRef.FIELD(FieldTable."No.");
            FieldName := DELCHR(FldRef.NAME, '=', ' ()[],.');
            CASE FieldTable.Type OF
              FieldTable.Type::Option :
                BEGIN
                  OptionValue := FldRef.VALUE;
                  IF AddElement(XMLCurrNode, FieldName, SELECTSTR(OptionValue + 1, FldRef.OPTIONSTRING), DocNameSpace, XMLNewChild) > 0 THEN
                    EXIT(FALSE);
                END;
              ELSE
                IF AddElement(XMLCurrNode, FieldName, FORMAT(FldRef.VALUE), DocNameSpace, XMLNewChild) > 0 THEN
                  EXIT(FALSE);
            END;
          UNTIL FieldTable.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FormatDaysheetPresentation@1100525006(iSetupRec@1100525000 : Record 11012676) : Text[30];
    BEGIN
      // obsolete from 210
      IF iSetupRec."Daysheet Presentation" = iSetupRec."Daysheet Presentation"::Hours THEN
        EXIT('uren')
      ELSE
        EXIT('tijdstippen');
    END;

    PROCEDURE ApplicationVersion@1100525004(Rec@1001 : Record 11012676;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DatabaseName@1100528100 : Text[1024]) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      ApplicationSystemConstants@1100525000 : Codeunit 9015;
    BEGIN
      XMLDocOut.LoadXml('<ResponseApplicationVersion/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Version','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'ApplicationVersion',ApplicationSystemConstants.ApplicationVersion,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Database', DatabaseName,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Company', COMPANYNAME,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);

      END;
      EXIT(TRUE);
    END;

    PROCEDURE OrderKind@1100485000(Rec@1001 : Record 11012837;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseOrderKind/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'OrderKind','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'FlowFSA',Rec."Flow FSA",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE OrderType@1100485002(Rec@1001 : Record 11012837;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseOrderType/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'OrderType','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Problem@1100485001(Rec@1001 : Record 11012842;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseProblem/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Problem','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Cause@1100485006(Rec@1001 : Record 11012842;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseCause/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Cause','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Solution@1100485007(Rec@1001 : Record 11012842;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseSolution/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Solution','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProblemDiscipline@1100409003(ServiceAnalysisDiscipline@1001 : Record 11072198;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseProblemDiscipline/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ProblemDiscipline', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'ProblemCode', ServiceAnalysisDiscipline."Analysis Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Discipline', ServiceAnalysisDiscipline.Discipline, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProblemCause@1100409005(ServiceAnalysisRelation@1001 : Record 11072199;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      // obsolete from version 210
      XMLDocument.LoadXml('<ResponseProblemCause/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ProblemCause', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'ProblemCode', ServiceAnalysisRelation."Problem Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'CauseCode', ServiceAnalysisRelation."Analysis Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProblemSolution@1100409007(ServiceAnalysisRelation@1001 : Record 11072199;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      // obsolete from version 210
      XMLDocument.LoadXml('<ResponseProblemSolution/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ProblemSolution', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'ProblemCode', ServiceAnalysisRelation."Problem Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SolutionCode', ServiceAnalysisRelation."Analysis Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceAnalysisRelation@1100409006(ServiceAnalysisRelation@1100528701 : Record 11072238;VAR XMLDocument@1100528700 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528705 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100528703 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100528702 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseServiceAnalysisRelation/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceAnalysisRelation', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'ProblemCode', ServiceAnalysisRelation."Problem Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'CauseCode', ServiceAnalysisRelation."Cause Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SolutionCode', ServiceAnalysisRelation."Solution Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceAnalysisSetup@1100528700(ServiceAnalysisSetup@1100528701 : Record 11072232;VAR XMLDocument@1100528700 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100528703 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100528702 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseServiceAnalysisSetup/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceAnalysisSetup', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'SourceType', FormatCU.FormatOptionNo(ServiceAnalysisSetup."Source Type"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ProblemCodeMandatory', FormatCU.FormatBoolean(ServiceAnalysisSetup."Problem Code Mandatory"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'CauseCodeMandatory', FormatCU.FormatBoolean(ServiceAnalysisSetup."Cause Code Mandatory"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SolutionCodeMandatory', FormatCU.FormatBoolean(ServiceAnalysisSetup."Solution Code Mandatory"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Decentral', FormatCU.FormatBoolean(ServiceAnalysisSetup.Decentral), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceLocationType@1100525019(ServiceLocationType@1100525001 : Record 11072280;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      // DP00981
      XMLDocument.LoadXml('<ResponseServiceLocationType/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceLocationType', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'Code', ServiceLocationType.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', ServiceLocationType.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceLocationTypeRoom@1100525023(ServiceLocationTypeRoom@1100525001 : Record 11072281;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      // DP00981
      XMLDocument.LoadXml('<ResponseServiceLocationTypeRoom/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceLocationTypeRoom', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'CustomerNo', ServiceLocationTypeRoom."Customer No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ServiceLocationType', ServiceLocationTypeRoom."Service Location Type", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Room', ServiceLocationTypeRoom."Room (SUP)", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SUPRoom@1100525020(SUPRoom@1100525001 : Record 11071950;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      // DP00981
      XMLDocument.LoadXml('<ResponseSupRoom/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'SupRoom', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'CustomerNo', SUPRoom."Customer No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Code', SUPRoom.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', SUPRoom.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SUPPart@1100525021(SUPPart@1100525001 : Record 11071951;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      // DP00981
      XMLDocument.LoadXml('<ResponseSupPart/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'SupPart', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'CustomerNo', SUPPart."Customer No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Code', SUPPart.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', SUPPart.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SUPRoomPart@1100525022(SUPRoomPart@1100525001 : Record 11072282;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      // DP00981
      XMLDocument.LoadXml('<ResponseSupRoomPart/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'SupRoomPart', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'CustomerNo', SUPRoomPart."Customer No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Room', SUPRoomPart."Room (SUP)", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Part', SUPRoomPart."Part (SUP)", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SUPPartProblem@1100525024(SUPPartServiceAnalysis@1100525001 : Record 11072283;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      // DP00981
      XMLDocument.LoadXml('<ResponseSupPartProblem/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'SupPartProblem', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'CustomerNo', SUPPartServiceAnalysis."Customer No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Part', SUPPartServiceAnalysis."Part (SUP)", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Problem', SUPPartServiceAnalysis."Analysis Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServicePriority@1100485016(Rec@1001 : Record 11012829;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponsePriority/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Priority','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Colour',FORMAT(Rec."Colour (4PS-Mobile)"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE UnitOfMeasure@1100485003(Rec@1001 : Record 204;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseUnitOfMeasure/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'UnitOfMeasure','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Territory@1100485017(Rec@1001 : Record 286;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseTerritory/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Territory','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Name',Rec.Name,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CostComponent@1100485005(Rec@1001 : Record 11012012;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseCostComponent/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'CostComponent','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CostCenter@1100485018(Rec@1001 : Record 349;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseCostCenter/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'CostCenter','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Name',Rec.Name,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CostObject@1100485009(Rec@1001 : Record 349;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      AllowedInExtraCosts@1100529100 : Boolean;
      IsTravelHourCostObject@1100525000 : Boolean;
      MobileSetup@1100529101 : Record 11012676;
      DimensionValue@1100529102 : Record 349;
      ExportFilterSetMgt@1100529103 : Codeunit 11012200;
    BEGIN
      XMLDocOut.LoadXml('<ResponseCostObject/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'CostObject','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Name,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'WageComponent',Rec."Wage Component",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CostType',FormatCU.FormatOptionNo(Rec."Cost Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CostTypeCaption',FORMAT(Rec."Cost Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        AllowedInExtraCosts := TRUE;
        MobileSetup.GET;
        IF MobileSetup."Filter Set Cost Obj. Ext. Cost" <> '' THEN BEGIN
          ExportFilterSetMgt.SetExportFiltersOnCostObject(MobileSetup."Filter Set Cost Obj. Ext. Cost", COMPANYNAME, DimensionValue);
          DimensionValue.FILTERGROUP(10);
          DimensionValue.SETRANGE("Dimension Code", Rec."Dimension Code");
          DimensionValue.SETRANGE(Code, Rec.Code);
          AllowedInExtraCosts := NOT DimensionValue.ISEMPTY;
          DimensionValue.FILTERGROUP(0);
        END;
        IF AddElement(XMLCurrNode,'AllowedInExtraCosts',FormatCU.FormatBoolean(AllowedInExtraCosts),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IsTravelHourCostObject := GetIsTravelHourCostObject(DimensionValue);
        IF AddElement(XMLCurrNode,'IsTravelHourCostObject',FormatCU.FormatBoolean(IsTravelHourCostObject),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE WageComponent@1100485004(Rec@1001 : Record 11012014;TimeshPortAllowancePerDay@1100528100 : Record 11125855;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      AllowedInWorkingTimes@1100528003 : Boolean;
      MobileSetup@1100528002 : Record 11012676;
      WageComponent@1100528001 : Record 11012014;
      ExportFilterSetMgt@1100528000 : Codeunit 11012200;
    BEGIN
      XMLDocOut.LoadXml('<ResponseWageComponent/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'WageComponent','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ComponentType',FormatCU.FormatOptionNo(Rec."Component Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ComponentTypeCaption',FORMAT(Rec."Component Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Overtime', FormatCU.FormatBoolean(Rec.Overtime),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'OvertimeSurchargePerc',
          FormatCU.FormatDecimal(Rec."Overtime Surcharge %"),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TypeOfDay',FormatCU.FormatOptionNo(Rec."Type of Day"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TypeOfDayCaption',FORMAT(Rec."Type of Day"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        AllowedInWorkingTimes := TRUE;
        MobileSetup.GET;
        IF MobileSetup."Filter Set Wage Comp. Wrk Hrs." <> '' THEN BEGIN
          ExportFilterSetMgt.SetExportFiltersOnWageComp(MobileSetup."Filter Set Wage Comp. Wrk Hrs.", COMPANYNAME, WageComponent);
          WageComponent.FILTERGROUP(10);
          WageComponent.SETRANGE(Code, Rec.Code);
          AllowedInWorkingTimes := NOT WageComponent.ISEMPTY;
          WageComponent.FILTERGROUP(0);
        END;
        IF AddElement(XMLCurrNode,'AllowedInWorkingTimes',FormatCU.FormatBoolean(AllowedInWorkingTimes),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AmountMonday',FormatCU.FormatDecimal(TimeshPortAllowancePerDay."Amount Monday"),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AmountTuesday',FormatCU.FormatDecimal(TimeshPortAllowancePerDay."Amount Tuesday"),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AmountWednesday',FormatCU.FormatDecimal(TimeshPortAllowancePerDay."Amount Wednesday"),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AmountThursday',FormatCU.FormatDecimal(TimeshPortAllowancePerDay."Amount Thursday"),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AmountFriday',FormatCU.FormatDecimal(TimeshPortAllowancePerDay."Amount Friday"),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AmountSaturday',FormatCU.FormatDecimal(TimeshPortAllowancePerDay."Amount Saturday"),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AmountSunday',FormatCU.FormatDecimal(TimeshPortAllowancePerDay."Amount Sunday"),
              DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CostCode@1100485010(Rec@1001 : Record 11012083;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseCostCode/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'CostCode','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'WageComponent',Rec.Component,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE DebriefTextRubric@1100485008(Rec@1001 : Record 11012885;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseDebriefTextRubric/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'DebriefTextRubric','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'Code',Rec.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'IsMandatory',FormatCU.FormatBoolean(Rec.Mandatory),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Item@1100485011(Rec@1001 : Record 27;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      ItemRelation@1100525000 : Record 11012319;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseItem/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Item','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'No',Rec."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description2',Rec."Description 2",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UnitOfMeasure',Rec."Base Unit of Measure",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CostObject',Rec."Global Dimension 2 Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        Rec.CALCFIELDS("Vendor (Trade Item)", "Item Vendor");
        IF AddElement(XMLCurrNode,'VendorTradeItem',Rec."Vendor (Trade Item)",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ItemVendor',Rec."Item Vendor",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF NOT ItemRelation.GET(Rec."No.") THEN
          ItemRelation.INIT;
        IF AddElement(XMLCurrNode,'Manufacturer',ItemRelation.Manufacturer,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'BasicItem',ItemRelation."Basic Item",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'GTINCode',ItemRelation."GTIN Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Inventory',FormatCU.FormatDecimal(Rec.Inventory),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Resource@1100529001(Rec@1001 : Record 11229278;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Employee@1100529000 : Record 5200;Vendor@1100525000 : Record 23) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseResource/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Resource','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'No',Rec."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Company',Rec.Company,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Name',Rec.Name,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SourceNo',Rec."Source No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Type',FormatCU.FormatOptionNo(Rec.Type),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TypeCaption',FORMAT(Rec.Type),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ActiveInFSA', FormatCU.FormatBoolean(Rec."Active in FSA") ,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Discipline',Rec.Discipline,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);

        IF Rec.Type = Rec.Type::Employee THEN
          IF AddElement(XMLCurrNode,'MobilePhoneNo',Employee."Company Mobile Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
           EXIT(FALSE);
        IF Rec.Type = Rec.Type::Subcontractor THEN
          IF AddElement(XMLCurrNode,'MobilePhoneNo',Vendor."Mobile Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
           EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceLocation@1100485021(Rec@1001 : Record 11012801;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      CountryRegion@1100409000 : Record 9;
      CompanyInformation@1100409001 : Record 79;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseServiceLocation/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        Rec.CALCFIELDS("Location Manager Name");

        IF AddElement(XMLCurrNode,'ServiceLocation','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'ServiceLocationNo',Rec."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description2',Rec."Description 2",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Address',Rec.Address,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Address2',Rec."Address 2",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PostCode',Rec."Post Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'City',Rec.City,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Country',Rec."Country/Region Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF NOT CountryRegion.GET(Rec."Country/Region Code") THEN BEGIN
          CompanyInformation.GET;
          IF NOT CountryRegion.GET(CompanyInformation."Country/Region Code") THEN
            CountryRegion.INIT;
        END;
        IF AddElement(XMLCurrNode,'ISOCountry',CountryRegion."EU Country/Region Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Latitude',Rec.Latitude,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Longitude',Rec.Longitude,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ContactName',Rec."Contact Name",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PhoneNo',Rec."Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PhoneNo2',Rec."Phone No. 2",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'MobilePhoneNo',Rec."Mobile Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'E-mail',Rec."E-Mail",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SalesPerson',Rec."Location Manager Name",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TerritoryCode',Rec."Territory Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Type',Rec.Type,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TravelDistance',FormatCU.FormatDecimal(Rec."Travel Distance"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TravelTime',FormatCU.FormatDecimal(Rec."Travel Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TravelCost',FormatCU.FormatDecimal(Rec.GetTravelCost),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'InitialMinsWorkHrs',FORMAT(Rec."Initial Minutes Working Hours"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'RoundWorkHrsOnMins',FORMAT(Rec."Round Working Hours on Minutes"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'RoundTravelHrsOnMins',FORMAT(Rec."Round Travel Hours on Minutes"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Blocked',FormatCU.FormatBoolean(Rec.Blocked),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        Rec.CALCFIELDS("Customer Name");
        IF AddElement(XMLCurrNode,'CustomerName',Rec."Customer Name",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE WorkOrder@2(Rec@1001 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      ServOrder@1100529000 : Record 11012823;
      ServiceOrderExtension@1100525001 : Record 11071727;
      ServiceContract@1100409003 : Record 11012812;
      Project@1100529001 : Record 11072003;
      ProjPrincipal@1100529002 : Record 11012005;
      ServLoc@1100525002 : Record 11012801;
      ContactPerson@1100409000 : Record 5050;
      Cust@1100525000 : Record 18;
      ServOrderInd@1100525005 : Record 11012837;
      ServCall@1100525004 : Record 11012822;
      PlantType@1100529300 : Record 11012551;
      PlantNumber@1100529301 : Record 11012552;
      CountryRegion@1100409001 : Record 9;
      CompanyInformation@1100409002 : Record 79;
      Port@1100525003 : Record 11071731;
      MobileSetup@1100528701 : Record 11012676;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      DeadLineDate@1100485001 : Date;
      DeadLineTime@1100485002 : Time;
      InitialMinutesWorkingHours@1100528704 : Integer;
      RoundWorkingHoursOnMinutes@1100528703 : Integer;
      RoundTravelHoursOnMinutes@1100528700 : Integer;
    BEGIN
      XMLDocOut.LoadXml('<ResponseWorkOrder/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        Cust.CHANGECOMPANY(Rec."Source Company");
        ContactPerson.CHANGECOMPANY(Rec."Source Company");
        CASE Rec."Source Type" OF
          Rec."Source Type"::ServiceOrder:
            BEGIN
              ServOrder.CHANGECOMPANY(Rec."Source Company");
              ServiceOrderExtension.CHANGECOMPANY(Rec."Source Company");
              ServiceContract.CHANGECOMPANY(Rec."Source Company");
              ServLoc.CHANGECOMPANY(Rec."Source Company");
              ServOrderInd.CHANGECOMPANY(Rec."Source Company");
              ServCall.CHANGECOMPANY(Rec."Source Company");
              CountryRegion.CHANGECOMPANY(Rec."Source Company");
              CompanyInformation.CHANGECOMPANY(Rec."Source Company");
              //
              IF NOT ServOrder.GET(Rec."Source No.") THEN ServOrder.INIT;
              IF NOT ServiceOrderExtension.GET(Rec."Source No.") THEN ServiceOrderExtension.INIT;
              IF (ServOrder."Service Contract No." = '' ) OR NOT ServiceContract.GET(ServOrder."Service Contract No.") THEN ServiceContract.INIT;
              IF (ServOrder."Service Location No." = '') OR NOT ServLoc.GET(ServOrder."Service Location No.") THEN ServLoc.INIT;
              IF NOT ServOrderInd.GET(ServOrderInd.Indication::Kind, ServOrder."Order Kind") THEN ServOrderInd.INIT;
              IF NOT ServCall.GET(ServOrder."Call No.") THEN ServCall.INIT;
              IF NOT Cust.GET(ServOrder."Customer No.") THEN Cust.INIT;
              IF NOT ContactPerson.GET(ServOrder."Contact Person No.") THEN ContactPerson.INIT;
              IF NOT CountryRegion.GET(ServOrder."Country/Region Code") THEN BEGIN
                CompanyInformation.GET;
                IF NOT CountryRegion.GET(CompanyInformation."Country/Region Code") THEN
                  CountryRegion.INIT;
              END;
              PlantType.Code := ServOrder."Plant Type";
              PlantNumber."No." := ServOrder."Plant Number";
              ServOrder.CALCFIELDS("Order Manager Name");
            END;
          Rec."Source Type"::Project:
            BEGIN
              Project.CHANGECOMPANY(Rec."Source Company");
              ProjPrincipal.CHANGECOMPANY(Rec."Source Company");
              //
              IF NOT Project.GET(Rec."Source No.") THEN Project.INIT;
              IF NOT Cust.GET(Project."Bill-to Customer No.") THEN Cust.INIT;
              IF NOT ProjPrincipal.GET(Rec."Source No.", Project."Bill-to Customer No.") THEN ProjPrincipal.INIT;
              IF NOT ContactPerson.GET(Project."Principal Contact Person") THEN ContactPerson.INIT;
              IF NOT CountryRegion.GET(Project."Country/Region Code") THEN BEGIN
                CompanyInformation.GET;
                IF NOT CountryRegion.GET(CompanyInformation."Country/Region Code") THEN
                  CountryRegion.INIT;
              END;
              PlantType.Code := Project."Plant Type";
              PlantNumber."No." := Project."Plant No.";
            END;
        END;
        IF PlantType.Code <> '' THEN BEGIN
          PlantType.CHANGECOMPANY(Rec."Source Company");
          IF PlantType.GET(PlantType.Code) THEN BEGIN
            IF PlantNumber."No." <> '' THEN BEGIN
              PlantNumber.CHANGECOMPANY(Rec."Source Company");
              IF NOT PlantNumber.GET(PlantType.Code, PlantNumber."No.") THEN PlantNumber.INIT;
            END;
          END;
        END;

        IF AddElement(XMLCurrNode,'WorkOrder','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        //
        IF AddElement(XMLCurrNode,'WorkOrderNo',Rec."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SourceCompany',Rec."Source Company",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SourceType',FormatCU.FormatOptionNo(Rec."Source Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SourceTypeCaption',FORMAT(Rec."Source Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SourceNo',Rec."Source No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'FirstPossibleStartingDateTime',
          FormatCU.FormatDateTime(Rec."First Possible Start.Date/Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LastPossibleEndingDateTime',
          FormatCU.FormatDateTime(Rec."Last Possible Ending Date/Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'StartingDateTime',FormatCU.FormatDateTime(Rec."Starting Date/Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'EndingDateTime', FormatCU.FormatDateTime(Rec."Ending Date/Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Hours',FormatCU.FormatDecimal(Rec."Expected Hours"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ISOCountry',CountryRegion."EU Country/Region Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SignatureMandatory',FormatCU.FormatBoolean(Rec."Signature Mandatory"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);

        CASE Rec."Source Type" OF
          Rec."Source Type"::ServiceOrder:
            BEGIN
              IF AddElement(XMLCurrNode,'SourceDescription',ServOrder.Description,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CustomerNo',ServOrder."Customer No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CustomerName',Cust.Name,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Name',ServOrder.Name,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Address',ServOrder.Address,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Address2',ServOrder."Address 2",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'PostCode',ServOrder."Post Code",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'City',ServOrder.City,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ContactName',ServOrder."Contact Name",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ContactPersonName',ContactPerson.Name,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ContactMobilePhoneNo',ContactPerson."Mobile Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CommisionDate',FormatCU.FormatDate(ServOrder."Commision Date"),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'PhoneNo',ServOrder."Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'PhoneNo2',ServOrder."Phone No. 2",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'MobilePhoneNo',ServOrder."Mobile Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'YourReference',ServOrder."Your Reference",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'OrderNoCustomer',ServOrder."Order No. Customer",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ServiceLocationNo',ServOrder."Service Location No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ServiceLocationDescription',ServLoc.Description,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              MobileSetup.DetermineHourCalcSettings(ServOrder, InitialMinutesWorkingHours, RoundWorkingHoursOnMinutes, RoundTravelHoursOnMinutes);
              IF AddElement(XMLCurrNode,'InitialMinsWorkHrs',FORMAT(InitialMinutesWorkingHours),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'RoundWorkHrsOnMins',FORMAT(RoundWorkingHoursOnMinutes),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'RoundTravelHrsOnMins',FORMAT(RoundTravelHoursOnMinutes),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Latitude',ServLoc.Latitude,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Longitude',ServLoc.Longitude,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Priority',ServOrder.Priority,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CallNo',ServOrder."Call No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CallingContact',ServCall."Calling Contact",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CallingPhoneNo',ServCall."Calling Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'FlowFSA',ServOrderInd."Flow FSA",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'OrderKind',ServOrder."Order Kind",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'OrderType',ServOrder."Order Type",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'PrevServiceOrderNo',ServOrder."Previous Service Order No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'OnHold',ServOrder."On Hold",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ContractNo',ServOrder."Service Contract No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ServiceContractDescription',ServiceContract.Description,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              GetDeadlineDateTime(1, Rec, DeadLineDate, DeadLineTime);
              IF AddElement(XMLCurrNode,'ResponseDeadlineDateTime', FormatCU.FormatDateAndTime(DeadLineDate,DeadLineTime),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              GetDeadlineDateTime(2, Rec, DeadLineDate, DeadLineTime);
              IF AddElement(XMLCurrNode,'RepairDeadlineDateTime', FormatCU.FormatDateAndTime(DeadLineDate,DeadLineTime),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'EMail',ServOrder."E-Mail",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'BaseServiceOrderNo',ServOrder."Base Service Order No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'LimitBudgetLabor',FormatCU.FormatDecimal(ServOrder."Limit Budget Labor"),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'LimitBudgetHours',FormatCU.FormatDecimal(ServOrder."Limit Budget Hours"),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'LimitBudgetMaterial',FormatCU.FormatDecimal(ServOrder."Limit Budget Material"),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'LimitBudgetTotal',FormatCU.FormatDecimal(ServOrder."Limit Budget Total"),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
      // Fields Decentral and DecentralCreated only exists for backwards compatibility
              IF AddElement(XMLCurrNode,'Decentral',FormatCU.FormatBoolean(ServOrder."Decentral Created"),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'DecentralCreated',FormatCU.FormatBoolean(ServOrder."Decentral Created"),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
      //
              IF AddElement(XMLCurrNode,'Source',FormatCU.FormatOptionNo(ServOrder."Source Type"),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'RemoteControl',FormatCU.FormatBoolean(ServLoc."Remote Control"),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'SendReport',FormatCU.FormatBoolean(ServOrder."Send Report"),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'SendReportEnabled',FormatCU.FormatBoolean(IsSendReportEnabled(ServOrder,Rec."Source Company")),
                   DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Problem',ServOrder.Problem,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Cause',ServOrder.Cause,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Solution',ServOrder.Solution,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CalcFieldServTravelCosts',
                   FormatCU.FormatBoolean(ServOrder.IsCalculateTravelHoursInFSA(ServOrder,Rec."Source Company")),DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'OrderManagerName',ServOrder."Order Manager Name",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Discipline',ServOrder.Discipline,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
      // DP00981.sn
              IF AddElement(XMLCurrNode, 'SupRoom', ServOrder."Room (SUP)", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'SupPart', ServOrder."Part (SUP)", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'ServiceLocationType', ServOrder."Service Location Type", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
      // DP00981.en
      // DP01061.sn
              IF AddElement(XMLCurrNode, 'VesselNo', ServOrder."Vessel No.", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'VesselName', ServiceOrderExtension."Vessel Name", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF NOT Port.GET(ServiceOrderExtension.Port) THEN
                Port.INIT;
              IF AddElement(XMLCurrNode, 'Port', Port.Description, DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode, 'QuayBerth', ServiceOrderExtension."Quay Berth", DocNameSpace, XMLNewChild) > 0 THEN
                EXIT(FALSE);
      // DP01061.en
            END;
          Rec."Source Type"::Project:
            BEGIN
              IF AddElement(XMLCurrNode,'SourceDescription',Project.Description,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CustomerNo',Project."Bill-to Customer No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'CustomerName',Cust.Name,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Address',Project.Address,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'Address2',Project."Address 2",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'PostCode',Project."Post Code",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'City',Project.City,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ContactName',Cust.Contact,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ContactPersonName',ContactPerson.Name,DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'ContactMobilePhoneNo',ContactPerson."Mobile Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'PhoneNo',Project."Phone No.",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'YourReference',ProjPrincipal."Principal Reference",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
              IF AddElement(XMLCurrNode,'OrderNoCustomer',ProjPrincipal."Order No. Customer",DocNameSpace,XMLNewChild) > 0 THEN
                EXIT(FALSE);
            END;
        END;
        IF AddElement(XMLCurrNode,'PlantType',PlantType.Code,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PlantTypeDescription',PlantType.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PlantNo',PlantNumber."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PlantNoDescription',PlantNumber.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDeadlineDateTime@1100529000(Type@1100529005 : Integer;WorkOrder@1100529004 : Record 11229279;VAR DeadLineDate@1100529003 : Date;VAR DeadLineTime@1100529002 : Time);
    VAR
      MobileSetup@1100529000 : Record 11012676;
      RefPeriod@1100529001 : Record 11020272;
      RefPeriodCode@1100529006 : Code[20];
    BEGIN
      //Type: 1=Response, 2=Repair
      DeadLineDate := 0D;
      DeadLineTime := 0T;

      MobileSetup.CHANGECOMPANY(WorkOrder."Source Company");
      MobileSetup.GET;

      CASE Type OF
        1: RefPeriodCode := MobileSetup."Reference Period Response";
        2: RefPeriodCode := MobileSetup."Reference Period Repair";
      END;
      IF RefPeriodCode = '' THEN
        EXIT;

      RefPeriod.CHANGECOMPANY(WorkOrder."Source Company");
      RefPeriod.SetOtherCompanyForCheckRefPeriod(WorkOrder."Source Company");
      RefPeriod.GetDeadlineDateAndTime(1, RefPeriod.Type::ServOrder, WorkOrder."Source No.", RefPeriodCode, 0, DeadLineDate, DeadLineTime);
    END;

    PROCEDURE IsSendReportEnabled@1210190001(ServiceOrder@1210190000 : Record 11012823;ServCompany@1100525000 : Text[30]) : Boolean;
    VAR
      ServiceContract@1210190001 : Record 11012812;
    BEGIN
      ServiceContract.CHANGECOMPANY(ServCompany);
      IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN BEGIN
        EXIT(NOT ServiceContract."Send Mail/Save Work Sheet");
      END;
      EXIT(TRUE);
    END;

    PROCEDURE DeletedWorkOrder@1100525009(Rec@1100525002 : Record 11229281;VAR XMLDocOut@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525003 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseDeletedWorkOrder/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'DeletedWorkOrder','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'WorkOrderNo',Rec."Work Order No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE BudgetLine@1100485014(Rec@1001 : Record 11012875;WorkOrder@1100525002 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      ServiceObject@1100528100 : Record 11071691;
      MaintenanceSchemeObjects@1100525001 : Record 11071745;
      ServiceOrder@1100525000 : Record 11012823;
      SUPRecordingLine@1100528600 : Record 11071772;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseBudgetLine/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'BudgetLine','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineNo',FORMAT(Rec."Line No."),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description2',Rec."Description 2",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Quantity',FormatCU.FormatDecimal(Rec.Quantity),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UnitOfMeasure',Rec."Unit of Measure",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'FollowUpJob',FormatCU.FormatBoolean(Rec."Follow-up Job"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Finished',FormatCU.FormatBoolean(Rec.Finished),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ObjectNo',Rec."Object No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'MaintenanceScheme',Rec."Maintenance Scheme",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceObject.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT ServiceObject.GET(Rec."Object No.") THEN
          ServiceObject.INIT;
        IF AddElement(XMLCurrNode,'ObjectCustomer',ServiceObject."Object Customer",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        MaintenanceSchemeObjects.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT MaintenanceSchemeObjects.GET(Rec."Maintenance Scheme") THEN
          MaintenanceSchemeObjects.INIT;
        IF AddElement(XMLCurrNode,'MaintenanceSchemeDescription',MaintenanceSchemeObjects.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CostType',FormatCU.FormatOptionNo(Rec."Cost Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        Rec.CALCFIELDS("SUP Room");
        SUPRecordingLine.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT SUPRecordingLine.GET(Rec."Service Order No.", Rec."Recording Line No.") THEN
          SUPRecordingLine.INIT;
        IF AddElement(XMLCurrNode, 'UnitPriceRoom', SUPRecordingLine.Room, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'PriceBookCode', SUPRecordingLine."Price Book Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UnitPriceIndexDate', FormatCU.FormatDate(SUPRecordingLine."Index Date"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UnitPriceCode', SUPRecordingLine."Unit Price Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'RecordingLineNo', FormatCU.FormatInteger(Rec."Recording Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT ServiceOrder.GET(WorkOrder."Source No.") THEN
          ServiceOrder.INIT;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE AdviceOrderLine@1100485020(Rec@1001 : Record 11012055;WorkOrder@1100525001 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseAdviceOrderLine/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'AdviceOrderLine','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineNo',FORMAT(Rec."Line No."),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ItemNo',Rec."Item No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TradeItem',Rec."Trade Item",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'VendorTradeItem',Rec."Vendor (Trade Item)",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description', Rec.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description2', Rec."Description 2", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'QuantityAdvice',
          FormatCU.FormatDecimal(Rec."Quantity (Advice)"),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'QuantityProcessed',
          FormatCU.FormatDecimal(Rec."Quantity (Processed)"),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'QuantityReceived',
          FormatCU.FormatDecimal(
            Rec.ReceivedPurchaseQuantity(WorkOrder."Source Company")),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UnitOfMeasure',Rec."Unit of Measure",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ShipmentDate',FormatCU.FormatDate(Rec."Receipt Date"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Deliver',FormatCU.FormatOptionNo(Rec.Deliver),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DeliverCaption',FORMAT(Rec.Deliver),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ShipToLocation',Rec."Ship To Location",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CreatedByWorkOrderNo',Rec."Created by Work Order No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ContractAgreement@1100485026(Rec@1001 : Record 11012882;WorkOrder@1100529000 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseContractAgreement/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ContractAgreement','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineNo',FORMAT(Rec."Line No."),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Date',FormatCU.FormatDate(Rec.Date),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Comment',Rec.Comment,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ReportProcedure@1100485015(Rec@1001 : Record 11012882;WorkOrderNo@1100527000 : Code[20];VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseReportProcedure/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ReportProcedure','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF WorkOrderNo <> '' THEN BEGIN                                       //**4PS02.n
          IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrderNo,DocNameSpace,XMLNewChild) > 0 THEN
            EXIT(FALSE);
        END;
        IF AddElement(XMLCurrNode,'ServiceLocationNo', Rec."No.",DocNameSpace,XMLNewChild) > 0 THEN      //**4PS02.n
          EXIT(FALSE);                                                                                   //**4PS02.n
        IF AddElement(XMLCurrNode,'LineNo',FORMAT(Rec."Line No."),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Date',FormatCU.FormatDate(Rec.Date),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Comment',Rec.Comment,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RelatedWorkOrders@1100485022(Rec@1001 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      FieldServiceCode@1100527000 : Record 11012274;
    BEGIN
      XMLDocOut.LoadXml('<ResponseRelatedWorkOrder/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'RelatedWorkOrder','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'WorkOrderNo',Rec."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ResourceNo',Rec."Resource No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'StartingDateTime',FormatCU.FormatDateTime(Rec."Starting Date/Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'EndingDateTime', FormatCU.FormatDateTime(Rec."Ending Date/Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ActualFieldServiceStatus',FORMAT(Rec."Actual Field Service Status"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        FieldServiceCode.CHANGECOMPANY(Rec."Source Company");
        IF NOT FieldServiceCode.GET(FieldServiceCode.Type::Status, Rec."Actual Field Service Status") THEN
          FieldServiceCode.INIT;
        IF AddElement(XMLCurrNode,'ActualFieldServiceStatusDesc',FieldServiceCode.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LeadingResource',FormatCU.FormatBoolean(Rec."Leading Resource"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE WorkOrderNoOfDecentralOrder@1100525005(Rec@1001 : Record 11125649;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      WorkOrder@1100528700 : Record 11229279;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseWorkOrderNoOfDecentralOrder/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'WorkOrderNoOfDecentralOrder','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'MobileWorkOrderNo',Rec."Mobile Work Order No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'WorkOrderNo',Rec."Work Order No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        WorkOrder.GET(Rec."Work Order No.");
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ObjectNoByDecentralObject@1100525014(MobileDecentralObject@1001 : Record 11012688;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      // dp00276
      XMLDocument.LoadXml('<ResponseObjectNoByDecentralObject/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ObjectNoByDecentralObject', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'MobileObjectNo', MobileDecentralObject."Mobile Service Object No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ObjectNo', MobileDecentralObject."Service Object No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ExtraCost@1100525007(Rec@1001 : Record 11020344;WorkOrder@1100529000 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseExtraCost/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ExtraCost','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ExtraCostLineNo',FORMAT(Rec."Line No."),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CostObject',Rec."Cost Object",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Quantity',FormatCU.FormatDecimal(Rec.Quantity),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UnitOfMeasure',Rec."Unit of Measure",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Amount',FormatCU.FormatDecimal(Rec.Amount),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CostPlus@1100525008(Rec@1001 : Record 11012825;WorkOrder@1100529000 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      Resource@1100527000 : Record 11229278;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ResourceNo@1100527001 : Code[20];
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseCostPlus/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'CostPlus','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CPLineNo',FORMAT(Rec."Line No."),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CostObject',Rec."Cost Object",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'WageComponent',Rec."Wage Component",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'HourLineTemplateCode',Rec."Hour Line Template Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description2',Rec."Description 2",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Quantity',FormatCU.FormatDecimal(Rec.Quantity),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UnitOfMeasure',Rec."Unit of Measure",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ItemNo',Rec."Item No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PostingDate',FormatCU.FormatDate(Rec."Posting Date"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'BasicPrice',FormatCU.FormatDecimal(Rec."Basic Price"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'AdditionalCost',FormatCU.FormatBoolean(Rec."Additional Cost"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ObjectNo',Rec."Object No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF Rec."Employee No." <> '' THEN BEGIN
          Resource.SETCURRENTKEY(Type, Company, "Source No.");
          Resource.SETRANGE(Type, Resource.Type::Employee);
          Resource.SETRANGE(Company, COMPANYNAME);
          Resource.SETRANGE("Source No.", Rec."Employee No.");
          IF Resource.FINDFIRST THEN
            ResourceNo := Resource."No."
        END;
        IF AddElement(XMLCurrNode,'ResourceNo',ResourceNo,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CreatedByWorkOrderNo',Rec."Created by Work Order No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);


      END;
      EXIT(TRUE);
    END;

    PROCEDURE CentralServiceOrderFields@1100525010(Rec@1001 : Record 11012823;WorkOrder@1100529000 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      ServiceContract@1100409000 : Record 11012812;
      ServiceLocation@1100528700 : Record 11012801;
      Customer@1100528701 : Record 18;
      MobileSetup@1100527000 : Record 11012676;
      DeadLineDate@1100525001 : Date;
      DeadLineTime@1100525000 : Time;
      InitialMinutesWorkingHours@1100528704 : Integer;
      RoundWorkingHoursOnMinutes@1100528703 : Integer;
      RoundTravelHoursOnMinutes@1100528702 : Integer;
    BEGIN
      XMLDocOut.LoadXml('<ResponseCentralServiceOrderFields/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceOrder', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SourceNo', WorkOrder."Source No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ContractNo', Rec."Service Contract No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceContract.CHANGECOMPANY(WorkOrder."Source Company");
        IF (Rec."Service Contract No." = '' ) OR NOT ServiceContract.GET(Rec."Service Contract No.") THEN ServiceContract.INIT;
        IF AddElement(XMLCurrNode, 'ServiceContractDescription', ServiceContract.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LimitBudgetLabor', FormatCU.FormatDecimal(Rec."Limit Budget Labor"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LimitBudgetHours', FormatCU.FormatDecimal(Rec."Limit Budget Hours"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LimitBudgetMaterial', FormatCU.FormatDecimal(Rec."Limit Budget Material"),
            DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LimitBudgetTotal', FormatCU.FormatDecimal(Rec."Limit Budget Total"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SignatureMandatory', FormatCU.FormatBoolean(WorkOrder."Signature Mandatory"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP00826.sn
        GetDeadlineDateTime(1, WorkOrder, DeadLineDate, DeadLineTime);
        IF AddElement(XMLCurrNode, 'ResponseDeadlineDateTime',
            FormatCU.FormatDateAndTime(DeadLineDate, DeadLineTime), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        GetDeadlineDateTime(2, WorkOrder, DeadLineDate, DeadLineTime);
        IF AddElement(XMLCurrNode, 'RepairDeadlineDateTime',
            FormatCU.FormatDateAndTime(DeadLineDate, DeadLineTime), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'CalcFieldServTravelCosts',
             FormatCU.FormatBoolean(Rec.IsCalculateTravelHoursInFSA(Rec, WorkOrder."Source Company")), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP00826.en
        Customer.CHANGECOMPANY(WorkOrder."Source Company");
        ServiceLocation.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT Customer.GET(Rec."Customer No.") THEN Customer.INIT;
        IF NOT ServiceLocation.GET(Rec."Service Location No.") THEN ServiceLocation.INIT;
        MobileSetup.DetermineHourCalcSettings(Rec, InitialMinutesWorkingHours, RoundWorkingHoursOnMinutes, RoundTravelHoursOnMinutes);
        IF AddElement(XMLCurrNode,'InitialMinsWorkHrs',FORMAT(InitialMinutesWorkingHours),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'RoundWorkHrsOnMins',FORMAT(RoundWorkingHoursOnMinutes),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'RoundTravelHrsOnMins',FORMAT(RoundTravelHoursOnMinutes),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE HistoricWorkOrder@1210190000(Rec@1001 : Record 11229279;HistServOrder@1100525000 : Record 11012823;WorkOrder@1100525001 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      // obsolete from version 011
      XMLDocOut.LoadXml('<ResponseHistoryWorkOrder/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'HistoryWorkOrder','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'HistoryWorkOrderNo',Rec."No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'StartingDateTime',FormatCU.FormatDateTime(Rec."Starting Date/Time"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ResourceNo', Rec."Resource No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ResourceType', FormatCU.FormatOptionNo(Rec."Resource Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'HistoryServiceOrderNo',HistServOrder."No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ServiceOrderSourceType', FormatCU.FormatOptionNo(HistServOrder."Source Type"),DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE HistoryServiceOrder@1100528703(WorkOrder@1001 : Record 11229279;ServiceOrder@1100525000 : Record 11012823;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      WorkOrder2@1100528700 : Record 11229279;
    BEGIN
      XMLDocument.LoadXml('<ResponseHistoryServiceOrder/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'HistoryServiceOrder', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'HistoryServiceOrderNo', ServiceOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', ServiceOrder.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'StartingDateTime', FormatCU.FormatDateTime(CREATEDATETIME(ServiceOrder."Starting Date", ServiceOrder."Starting Time")), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ServiceOrderSourceType', FormatCU.FormatOptionNo(ServiceOrder."Source Type"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        WorkOrder2.SETRANGE("Source Type", WorkOrder2."Source Type"::ServiceOrder);
        WorkOrder2.SETRANGE("Source No.", ServiceOrder."No.");
        WorkOrder2.SETRANGE("Source Company", WorkOrder."Source Company");
        WorkOrder2.SETRANGE("Leading Resource", TRUE);
        IF NOT WorkOrder2.FINDFIRST THEN
          WorkOrder2.INIT;
        IF AddElement(XMLCurrNode, 'ResourceNo', WorkOrder2."Resource No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE HistoryUsedItem@1100525001(ServiceOrderCostPlusEntry@1001 : Record 11012825;WorkOrder@1100528702 : Record 11229279;HistoryWorkOrder@1100525001 : Record 11229279;HistoryServiceOrderNo@1100528700 : Code[20];VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      ServiceObject@1100528701 : Record 11071691;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      // dp00563
      XMLDocument.LoadXml('<ResponseHistoryUsedItem/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'HistoryUsedItem', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'HistoryWorkOrderNo', HistoryWorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN // obsolete from version 011
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'HistoryServiceOrderNo', HistoryServiceOrderNo, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineNo',FORMAT(ServiceOrderCostPlusEntry."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'PostingDate',FormatCU.FormatDate(ServiceOrderCostPlusEntry."Posting Date"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ItemNo', ServiceOrderCostPlusEntry."Item No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', ServiceOrderCostPlusEntry.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Quantity', FormatCU.FormatDecimal(ServiceOrderCostPlusEntry.Quantity), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UnitOfMeasure', ServiceOrderCostPlusEntry."Unit of Measure", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ObjectNo', ServiceOrderCostPlusEntry."Object No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceObject.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT ServiceObject.GET(ServiceOrderCostPlusEntry."Object No.") THEN
          ServiceObject.INIT;
        IF AddElement(XMLCurrNode, 'ObjectDescription', ServiceObject.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE HistoryInspectionLine@1100525002(ServiceOrderInspectionLine@1001 : Record 11071753;WorkOrder@1100528701 : Record 11229279;HistoryWorkOrder@1100525002 : Record 11229279;HistoryServiceOrderNo@1100528700 : Code[20];VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      ServiceObject@1100525001 : Record 11071691;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      // dp00563
      XMLDocument.LoadXml('<ResponseHistoryInspectionLine/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'HistoryInspectionLine', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'HistoryWorkOrderNo', HistoryWorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN // obsolete from version 011
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'HistoryServiceOrderNo', HistoryServiceOrderNo, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ObjectNo', ServiceOrderInspectionLine."Service Object No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'MaintenanceSchemeCode', ServiceOrderInspectionLine."Maintenance Scheme Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineNo', FORMAT(ServiceOrderInspectionLine."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceObject.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT ServiceObject.GET(ServiceOrderInspectionLine."Service Object No.") THEN
          ServiceObject.INIT;
        IF AddElement(XMLCurrNode, 'ObjectDescription', ServiceObject.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', ServiceOrderInspectionLine.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Value', ServiceOrderInspectionLine.Value, DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LowerValue', FormatCU.FormatDecimal(ServiceOrderInspectionLine."Lower Value"), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UpperValue', FormatCU.FormatDecimal(ServiceOrderInspectionLine."Upper Value"), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UnitOfMeasure', ServiceOrderInspectionLine."Unit Of Measure", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE HistoryWorkOrder@1100528704(WorkOrder@1001 : Record 11229279;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      FieldServiceCode@1100527000 : Record 11012274;
    BEGIN
      XMLDocument.LoadXml('<ResponseHistoryWorkOrder2/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'HistoryWorkOrder', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode, 'HistoryWorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', WorkOrder.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ResourceNo', WorkOrder."Resource No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'StartingDateTime', FormatCU.FormatDateTime(WorkOrder."Starting Date/Time"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ActualFieldServiceStatus', FORMAT(WorkOrder."Actual Field Service Status"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        FieldServiceCode.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT FieldServiceCode.GET(FieldServiceCode.Type::Status, WorkOrder."Actual Field Service Status") THEN
          FieldServiceCode.INIT;
        IF AddElement(XMLCurrNode, 'ActualFieldServiceStatusDesc', FieldServiceCode.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ConsignmentRoster@1100528105(Rec@1001 : Record 11012865;EmplCompany@1100525000 : Text[30];VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      Watch@1100528100 : Record 11012861;
      ConsignmentTime@1100528101 : Record 11012864;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseConsignmentRoster/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ConsignmentRoster','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WatchCode',Rec."Watch Code" ,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        Watch.CHANGECOMPANY(EmplCompany);
        IF NOT Watch.GET(Rec."Watch Code") THEN
          Watch.INIT;
        IF AddElement(XMLCurrNode,'WatchDescription', Watch.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ConsignmentCode',Rec."Consignment Code" ,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'StartDateTime',FormatCU.FormatDateAndTime(Rec."Start Date",Rec."Start Time" ),
            DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ConsignmentTime.CHANGECOMPANY(EmplCompany);
        IF NOT ConsignmentTime.GET(Rec."Consignment Code",Rec."Start Date",Rec."Start Time") THEN
          ConsignmentTime.INIT;
        IF AddElement(XMLCurrNode,'EndDateTime',FormatCU.FormatDateAndTime(ConsignmentTime."End Date", ConsignmentTime."End Time"),
            DocNameSpace,XMLNewChild) > 0 THEN
            EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE EmployeeAbsence@1100528104(Rec@1001 : Record 5207;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      CauseOfAbsence@1100528700 : Record 5206;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseEmployeeAbsence/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'EmployeeAbsence','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'EntryNo',FORMAT(Rec."Entry No.") ,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'FromDateTime',
          FormatCU.FormatDateAndTime(Rec."From Date", Rec."From Time"),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ToDateTime',
          FormatCU.FormatDateAndTime(Rec."To Date", Rec."Until Time"),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',Rec.Description, DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF NOT CauseOfAbsence.GET(Rec."Cause of Absence Code") THEN
          CauseOfAbsence.INIT;
        IF AddElement(XMLCurrNode, 'CauseOfAbsenceCostCode', CauseOfAbsence."Cost Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'HourLineTemplateCode', CauseOfAbsence."Hour Line Template Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceLocStructureLine@1100528100(Rec@1001 : Record 11071720;WorkOrder@1100525001 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      ServObject@1100525002 : Record 11071691;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseServiceLocStructureLine/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ServiceLocStructureLine','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ServiceLocationNo',Rec."Service Location No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'StructureNo',FORMAT(Rec."Structure No."), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'No',Rec."No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Level',FORMAT(Rec.Level), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ElementLevel1',Rec."Element Level 1", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ElementLevel2',Rec."Element Level 2", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ServiceObjectNo',Rec."Service Object No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF NOT Rec."Object Line" THEN BEGIN
          IF AddElement(XMLCurrNode,'Description',Rec.Description, DocNameSpace,XMLNewChild) > 0 THEN
            EXIT(FALSE);
        END ELSE BEGIN
          ServObject.CHANGECOMPANY(WorkOrder."Source Company");
          IF NOT ServObject.GET(Rec."Service Object No.") THEN
            ServObject.INIT;
          IF AddElement(XMLCurrNode,'Description',ServObject.Description, DocNameSpace,XMLNewChild) > 0 THEN
            EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceOrderObject@1100528101(Rec@1001 : Record 11071724;WorkOrder@1100525003 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      ServicePackage@1100525001 : Record 11012806;
      ContractObject@1100525002 : Record 11071702;
      ServiceObject@1100525004 : Record 11071691;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      StandardObjectEditable@1100525000 : Boolean;
    BEGIN
      XMLDocOut.LoadXml('<ResponseServiceOrderObject/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceOrderObject', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ObjectNo', Rec."Object No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'MaintenanceScheme', Rec."Maintenance Scheme", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceObject.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT ServiceObject.GET(Rec."Object No.") THEN
          ServiceObject.INIT;
        IF AddElement(XMLCurrNode, 'Description', ServiceObject.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);

        ContractObject.CHANGECOMPANY(WorkOrder."Source Company");
        IF ContractObject.GET(Rec."Service Contract No.", Rec."Object No.") THEN BEGIN
          ServicePackage.CHANGECOMPANY(WorkOrder."Source Company");
          IF NOT ServicePackage.GET(ContractObject."Service Package") THEN
            ServicePackage.INIT;
        END;
        IF AddElement(XMLCurrNode,'ServicePackageDescription', ServicePackage.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // dp00276.sn
        IF AddElement(XMLCurrNode, 'StandardObjectNo', ServiceObject."Standard Object No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceObject.CALCFIELDS("Standard Object Description");
        IF AddElement(XMLCurrNode, 'StandardObjectDescription', ServiceObject."Standard Object Description", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Building', ServiceObject.Building, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Floor', ServiceObject.Floor, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Room', ServiceObject.Room, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ObjectCustomer', ServiceObject."Object Customer", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Quantity', FormatCU.FormatInteger(ServiceObject.Quantity), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // dp00276.en
        ServiceObject.CALCFIELDS("Object Group");
        IF AddElement(XMLCurrNode, 'ObjectGroup', ServiceObject."Object Group", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP00826.sn
        StandardObjectEditable := GetStandardObjectEditable(ServiceObject."Standard Object No.");
        IF AddElement(XMLCurrNode, 'StandardObjectEditable', FormatCU.FormatBoolean(StandardObjectEditable), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceObject.CALCFIELDS("Brand Description", "Model Description", "Type Description");
        IF AddElement(XMLCurrNode, 'BrandCode', ServiceObject."Brand Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'BrandDescription', ServiceObject."Brand Description", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ModelCode', ServiceObject."Model Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ModelDescription', ServiceObject."Model Description", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'TypeCode', ServiceObject."Type Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'TypeDescription', ServiceObject."Type Description", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP00826.en
        IF AddElement(XMLCurrNode, 'Latitude', ServiceObject.Latitude, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Longitude', ServiceObject.Longitude, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceOrderInspectionLine@1100528102(Rec@1001 : Record 11071753;WorkOrder@1100525002 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      MaintenanceSchemeObjects@1100525001 : Record 11071745;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseServiceOrderInspectionLine/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ServiceOrderInspectionLine','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ObjectNo', Rec."Service Object No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'MaintenanceScheme', Rec."Maintenance Scheme Code", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineNo', FORMAT(Rec."Line No."), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description', Rec.Description, DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'FieldType', FormatCU.FormatOptionNo(Rec."Field Type"), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      // DP00826.sn
        IF Rec."Field Type" IN [Rec."Field Type"::Option, Rec."Field Type"::"Yes/No"] THEN BEGIN
          IF AddElement(XMLCurrNode, 'Value', GetCodeForServiceInspectionLineValue(Rec, WorkOrder."Source Company"), DocNameSpace, XMLNewChild) > 0 THEN
            EXIT(FALSE);
        END ELSE
      // DP00826.en
          IF AddElement(XMLCurrNode,'Value', Rec.Value, DocNameSpace,XMLNewChild) > 0 THEN
            EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LowerValue', FormatCU.FormatDecimal(Rec."Lower Value"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UpperValue', FormatCU.FormatDecimal(Rec."Upper Value"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UnitOfMeasure', Rec."Unit Of Measure", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'InspectionGroupCode', Rec."Inspection Group Code", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Mandatory', FormatCU.FormatBoolean(Rec.Mandatory), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Type', FormatCU.FormatOptionNo(Rec.Type), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'InspectionCode', Rec."Inspection Code", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Comment', Rec.Comment, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        MaintenanceSchemeObjects.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT MaintenanceSchemeObjects.GET(Rec."Maintenance Scheme Code") THEN
           MaintenanceSchemeObjects.INIT;
        IF AddElement(XMLCurrNode,'MaintenanceSchemeDescription',MaintenanceSchemeObjects.Description,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCodeForServiceInspectionLineValue@1100525018(ServiceOrderInspectionLine@1100525001 : Record 11071753;SourceCompany@1100525002 : Text) : Code[10];
    VAR
      BaseServiceInspectionOption@1100525000 : Record 11071749;
    BEGIN
      // DP00826
      BaseServiceInspectionOption.CHANGECOMPANY(SourceCompany);
      BaseServiceInspectionOption.SETRANGE("Base Inspection Line Code", ServiceOrderInspectionLine."Inspection Code");
      BaseServiceInspectionOption.SETRANGE(Description, ServiceOrderInspectionLine.Value);
      IF BaseServiceInspectionOption.FINDFIRST THEN
        EXIT(BaseServiceInspectionOption.Code);
    END;

    PROCEDURE ServiceInspectionOption@1100528103(ServiceInspectionOption@1001 : Record 11071749;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseServiceInspectionOption/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ServiceInspectionOption','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'Code',ServiceInspectionOption.Code , DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'InspectionLineCode',ServiceInspectionOption."Base Inspection Line Code" ,
             DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'OptionDescription',ServiceInspectionOption.Description , DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceOrderObjSpecLine@1210190003(Rec@1001 : Record 11071782;WorkOrder@1100525001 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      TempDecimal@1100528100 : Decimal;
    BEGIN
      XMLDocOut.LoadXml('<ResponseServiceOrderObjectSpecificationLine/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'ServiceOrderObjectSpecificationLine','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ServiceObjectNo', Rec."Service Object No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SpecificationType', FormatCU.FormatOptionNo(Rec."Specification Type"),
            DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Code', Rec.Code, DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineNo', FORMAT(Rec."Line No."), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Type', FormatCU.FormatOptionNo(Rec.Type), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SpecificationCode', Rec."Specification Code", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description', Rec.Description, DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'FieldType', FormatCU.FormatOptionNo(Rec."Field Type"), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF Rec."Field Type" = Rec."Field Type"::Value THEN BEGIN
          IF NOT EVALUATE(TempDecimal, Rec."Old Value") THEN
            TempDecimal := 0;
          IF AddElement(XMLCurrNode,'Value', FormatCU.FormatDecimal(TempDecimal), DocNameSpace,XMLNewChild) > 0 THEN
            EXIT(FALSE);
        END ELSE BEGIN
          IF Rec."Field Type" = Rec."Field Type"::Option THEN BEGIN
            IF AddElement(XMLCurrNode,'Value',
                GetCodeForObjectSpecification(Rec,WorkOrder."Source Company"), DocNameSpace,XMLNewChild) > 0 THEN
              EXIT(FALSE);
          END ELSE BEGIN
            IF AddElement(XMLCurrNode,'Value', Rec."Old Value", DocNameSpace,XMLNewChild) > 0 THEN
              EXIT(FALSE);
          END;
        END;
        IF AddElement(XMLCurrNode,'UnitOfMeasure', Rec."Unit Of Measure", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SpecificationGroupCode', Rec."Specification Group Code", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SpecificationLineNo', FORMAT(Rec."Specification Line No."), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'EditableByFieldService', FormatCU.FormatBoolean(Rec."Editable by Field Service"),
            DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetCodeForObjectSpecification@1100409001(ServiceOrderObjSpecLine@1100409000 : Record 11071782;ServCompany@1100525000 : Text[30]) : Code[10];
    VAR
      BaseObjectSpecificationOpt@1100409001 : Record 11071780;
    BEGIN
      BaseObjectSpecificationOpt.CHANGECOMPANY(ServCompany);
      BaseObjectSpecificationOpt.SETRANGE("Base Object Spec. Line Code", ServiceOrderObjSpecLine."Specification Code");
      BaseObjectSpecificationOpt.SETRANGE(Description, ServiceOrderObjSpecLine."Old Value");
      IF BaseObjectSpecificationOpt.FINDFIRST THEN
        EXIT(BaseObjectSpecificationOpt.Code)
      ELSE
        EXIT('');
    END;

    PROCEDURE BaseObjectSpecificationOpt@1210190002(BaseObjectSpecificationOpt@1001 : Record 11071780;WorkOrder@1100529000 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      // obsolete C048719
      XMLDocOut.LoadXml('<ResponseBaseObjectSpecificationOption/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'BaseObjectSpecificationOption','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'BaseObjectSpecLineCode',BaseObjectSpecificationOpt."Base Object Spec. Line Code" ,
             DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Code',BaseObjectSpecificationOpt.Code , DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description',BaseObjectSpecificationOpt.Description , DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ObjectSpecificationOption@1100528500(BaseObjectSpecificationOpt@1001 : Record 11071780;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseObjectSpecificationOption/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ObjectSpecificationOption', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'SpecificationCode', BaseObjectSpecificationOpt."Base Object Spec. Line Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Code', BaseObjectSpecificationOpt.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', BaseObjectSpecificationOpt.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceText@1210190004(Rec@1001 : Record 11012882;WorkOrder@1100529000 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      Resource@1100525000 : Record 11229278;
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
      ResourceNo@1100525001 : Code[20];
    BEGIN
      XMLDocOut.LoadXml('<ResponseWorkOrderText/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'WorkOrderText','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WorkOrderNo',WorkOrder."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TextType',FORMAT(Rec."Table Field"), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineNo',FORMAT(Rec."Line No."), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Comment',StringFunctions.DeleteInvalidXMLCharacters(Rec.Comment), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineBreak',FormatCU.FormatBoolean(Rec."Line Break"), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF Rec."Created by Employee No." <> '' THEN BEGIN
          Resource.SETCURRENTKEY(Type, Company, "Source No.");
          Resource.SETRANGE(Type, Resource.Type::Employee);
          IF Rec."Created by Employee Company" <> '' THEN
            Resource.SETRANGE(Company, Rec."Created by Employee Company")
          ELSE
            Resource.SETRANGE(Company, Rec.CURRENTCOMPANY);
          Resource.SETRANGE("Source No.", Rec."Created by Employee No.");
          IF Resource.FINDFIRST THEN
            ResourceNo := Resource."No."
        END;
        IF AddElement(XMLCurrNode,'ResourceNo',ResourceNo,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE WorkOrderText@1100528600(Rec@1001 : Record 11229284;WorkOrder@1100529000 : Record 11229279;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseWorkOrderText/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'WorkOrderText', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'TextType', FORMAT(1000), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineNo', FORMAT(Rec."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Comment', StringFunctions.DeleteInvalidXMLCharacters(Rec.Comment), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineBreak', FormatCU.FormatBoolean(Rec."Line Break"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE DebriefText@1100528705(DebriefText@1001 : Record 11012886;WorkOrder@1100529000 : Record 11229279;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseWorkOrderText/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'WorkOrderText', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'TextType', FORMAT(2000), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineNo', FORMAT(DebriefText."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Comment', StringFunctions.DeleteInvalidXMLCharacters(DebriefText.Comment), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineBreak', FormatCU.FormatBoolean(TRUE), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ResourceNo', DebriefText."Modified by Resource", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProjectElementText@1100528706(ProjectElementText@1001 : Record 11229796;WorkOrder@1100529000 : Record 11229279;VAR XMLDocument@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseWorkOrderText/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'WorkOrderText', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'TextType', FORMAT(3000), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineNo', FORMAT(ProjectElementText."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Comment', StringFunctions.DeleteInvalidXMLCharacters(ProjectElementText.Comment), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineBreak', FormatCU.FormatBoolean(ProjectElementText."Line Break"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'ResourceNo', ProjectElementText."Created by Resource No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE MobileItemUsage@1100528106(Rec@1100528103 : Record 11229872;WorkOrder@1100528102 : Record 11229279;VAR XMLDocOut@1100528100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100528104 : Text[50];
      Resource@1100525000 : Record 11229278;
    BEGIN
      XMLDocOut.LoadXml('<ResponseMobileItemUsage/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'MobileItemUsage', '' , DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode,'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'LineNo', FORMAT(Rec."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Source', FormatCU.FormatOptionNo(Rec.Source), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PurchaseOrderNo', Rec."Purchase Order No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PurchaseOrderLineNo', FORMAT(Rec."Purchase Order Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'ItemNo', Rec."Item No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'TradeItem', Rec."Trade Item", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'VendorTradeItem', Rec."Vendor (Trade Item)", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description', Rec.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Description2', Rec."Description 2", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Quantity', FormatCU.FormatDecimal(Rec.Quantity), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'UnitofMeasure', Rec."Unit of Measure", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'VendorNo', Rec."Vendor No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'SourceDeleted', FormatCU.FormatBoolean(Rec."Source Deleted"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'CreatedByWorkOrderNo', Rec."Created by Work Order No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DecentralCreated', FormatCU.FormatBoolean(Rec."Decentral Created"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'DecentralCreatedGuid', Rec."Decentral Created Guid", DocNameSpace ,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        Resource.INIT;
        IF (Rec."Created by Employee No." <> '') THEN BEGIN
          Resource.SETRANGE(Type, Resource.Type::Employee);
          IF (Rec."Created by Employee Company" <> '') THEN
            Resource.SETRANGE(Company, Rec."Created by Employee Company")
          ELSE
            Resource.SETRANGE(Company, COMPANYNAME);
          Resource.SETRANGE("Source No.", Rec."Created by Employee No.");
          IF (NOT Resource.FINDFIRST) THEN
            Resource.INIT;
        END;
        IF AddElement(XMLCurrNode, 'ResourceNo', Resource."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Vendor@1100525011(Rec@1001 : Record 23;VAR XMLDocOut@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100528700 : Boolean) @1000 : Boolean;
    VAR
      XMLCurrNode@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1008 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseVendor/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode,'Vendor','',DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;

        IF AddElement(XMLCurrNode,'No',Rec."No.",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Name',Rec.Name,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'Address',Rec.Address,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'PostCode',Rec."Post Code",DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode,'City',Rec.City,DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE UnitPriceWorkOrder@1100525000(Rec@1100525002 : Record 11071772;WorkOrder@1100525001 : Record 11229279;VAR XMLDocOut@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      ServiceUnitPriceRoom@1100525006 : Record 11071950;
      ServiceUnitPricePart@1100525007 : Record 11071951;
      Discipline@1100525008 : Record 11020204;
      TradeSpeciality@1100525009 : Record 11020285;
      XMLCurrNode@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525003 : Text[50];
    BEGIN
      XMLDocOut.LoadXml('<ResponseUnitPriceWorkOrder/>');
      XMLCurrNode := XMLDocOut.DocumentElement;

      Rec.CALCFIELDS("Production Recording Quantity");

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'UnitPriceWorkOrder', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'RecordingLineNo', FORMAT(Rec."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'PriceBookType', FormatCU.FormatOptionNo(Rec."Price Book Type"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'PriceBookCode', Rec."Price Book Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'IndexDate', FormatCU.FormatDate(Rec."Index Date"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Room', Rec.Room, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceUnitPriceRoom.CHANGECOMPANY(WorkOrder."Source Company");
        CASE Rec."Price Book Type" OF
          Rec."Price Book Type"::Internal:
            IF NOT ServiceUnitPriceRoom.GET('', Rec.Room) THEN
              ServiceUnitPriceRoom.INIT;
          Rec."Price Book Type"::Customer:
            IF NOT ServiceUnitPriceRoom.GET(Rec."Price Book Code", Rec.Room) THEN BEGIN
              ServiceUnitPriceRoom.SETRANGE("Customer No.", Rec."Price Book Code");
              IF ServiceUnitPriceRoom.ISEMPTY THEN BEGIN
                IF NOT ServiceUnitPriceRoom.GET('', Rec.Room) THEN
                  ServiceUnitPriceRoom.INIT;
              END ELSE
                ServiceUnitPriceRoom.INIT;
            END;
        END;
        IF AddElement(XMLCurrNode, 'RoomDescription', ServiceUnitPriceRoom.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Part', Rec.Part, DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        ServiceUnitPricePart.CHANGECOMPANY(WorkOrder."Source Company");
        CASE Rec."Price Book Type" OF
          Rec."Price Book Type"::Internal:
            IF NOT ServiceUnitPricePart.GET('', Rec.Part) THEN
              ServiceUnitPricePart.INIT;
          Rec."Price Book Type"::Customer:
            IF NOT ServiceUnitPricePart.GET(Rec."Price Book Code", Rec.Part) THEN BEGIN
              ServiceUnitPricePart.SETRANGE("Customer No.", Rec."Price Book Code");
              IF ServiceUnitPricePart.ISEMPTY THEN BEGIN
                IF NOT ServiceUnitPricePart.GET('', Rec.Part) THEN
                  ServiceUnitPricePart.INIT;
              END ELSE
                ServiceUnitPricePart.INIT;
            END;
        END;
        IF AddElement(XMLCurrNode, 'PartDescription', ServiceUnitPricePart.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UnitPriceCode', Rec."Unit Price Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', Rec.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description2', Rec."Description 2", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description3', Rec."Description 3", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UnitOfMeasure', Rec."Unit of Measure", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'PreRecordingQuantity', FormatCU.FormatDecimal(Rec."Pre-Recording Quantity"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'RecordingQuantity', FormatCU.FormatDecimal(Rec."Recording Quantity"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'RealizationQuantity', FormatCU.FormatDecimal(Rec."Production Recording Quantity"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Comment', Rec.GetCommentText, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        Discipline.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT Discipline.GET(Rec.Discipline) THEN
          Discipline.INIT;
        IF AddElement(XMLCurrNode, 'DisciplineDescription', Discipline.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        TradeSpeciality.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT TradeSpeciality.GET(Rec.Discipline, Rec."Trade Speciality") THEN
          TradeSpeciality.INIT;
        IF AddElement(XMLCurrNode, 'TradeSpecialityDescription', TradeSpeciality.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceSourceEMail@1100525012(VAR ServiceSourceEMail@1100525002 : Record 11071711;WorkOrder@1100525001 : Record 11229279;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525003 : Text[50];
    BEGIN
      // dp00563
      XMLDocument.LoadXml('<ResponseServiceSourceEMail/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceSourceEMail', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'WorkOrderNo', WorkOrder."No.", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SourceType', FormatCU.FormatOptionNo(ServiceSourceEMail."Source Type"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SourceTypeCaption', FORMAT(ServiceSourceEMail."Source Type"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SourceEMail', FormatCU.FormatOptionNo(ServiceSourceEMail."Source E-Mail"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'SourceEMailCaption', FORMAT(ServiceSourceEMail."Source E-Mail"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'EMail',
          ServiceSourceEMail.GetMailContent(
            ServiceSourceEMail."Customer No.", ServiceSourceEMail."Service Contract No.", '', ServiceSourceEMail.GETFILTER("Service Order Filter")),
          DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'MailStatusUpdate', FormatCU.FormatBoolean(ServiceSourceEMail."Mail Status Update"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'MailWorkSheet', FormatCU.FormatBoolean(ServiceSourceEMail."Mail Work Sheet"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'MailToSubcontractor', FormatCU.FormatBoolean(ServiceSourceEMail."Mail to Subcontractor OLD"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE BaseServiceInspectionList@1100525013(BaseServiceInspectionList@1100525002 : Record 11071930;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525003 : Text[50];
    BEGIN
      // dp00626
      XMLDocument.LoadXml('<ResponseServiceInspectionList/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceInspectionList', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'Code', BaseServiceInspectionList.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', BaseServiceInspectionList.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ServiceInspectionLine@1100525015(ServiceInspectionLine@1100525002 : Record 11071751;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525003 : Text[50];
    BEGIN
      // dp00626
      XMLDocument.LoadXml('<ResponseServiceInspectionLine/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'ServiceInspectionLine', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'ServiceInspectionListCode', ServiceInspectionLine.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LineNo', FORMAT(ServiceInspectionLine."Line No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'IndexDate', FormatCU.FormatDate(ServiceInspectionLine."Index Date"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Type', FormatCU.FormatOptionNo(ServiceInspectionLine.Type), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'InspectionGroupCode', ServiceInspectionLine."Inspection Group Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'InspectionCode', ServiceInspectionLine."Inspection Code", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', ServiceInspectionLine.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'FieldType', FormatCU.FormatOptionNo(ServiceInspectionLine."Field Type"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UnitOfMeasure', ServiceInspectionLine."Unit Of Measure", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Mandatory', FormatCU.FormatBoolean(ServiceInspectionLine.Mandatory), DocNameSpace,XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'LowerValue', FormatCU.FormatDecimal(ServiceInspectionLine."Lower Value"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'UpperValue', FormatCU.FormatDecimal(ServiceInspectionLine."Upper Value"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE FieldServiceStatusReason@1100525016(FieldServiceStatusReason@1100525001 : Record 11229868;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      // dp00816
      XMLDocument.LoadXml('<ResponseFieldServiceStatusReason/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'FieldServiceStatusReason', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'FieldServiceStatus', FieldServiceStatusReason."Field Service Status", DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Code', FieldServiceStatusReason.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', FieldServiceStatusReason.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE DispatchAttachmentType@1100525026(DispatchAttachmentType@1100525001 : Record 11072277;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100525005 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseDispatchAttachmentType/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'DispatchAttachmentType', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'Code', DispatchAttachmentType.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', DispatchAttachmentType.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Location@1100529400(Location@1100525001 : Record 14;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Deleted@1100525005 : Boolean) : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseLocation/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'Location', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'Code', Location.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Name', Location.Name, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Deleted', FormatCU.FormatBoolean(Deleted), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Company@1100529401(Company@1100525001 : Record 2000000006;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseCompany/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'Company', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'Name', Company.Name, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE HourLineTemplate@1100528701(HourLineTemplate@1100525001 : Record 11229799;HourLineTemplateLine@1100528700 : Record 11012078;AllowanceperDay@1100529400 : Record 11125855;VAR XMLDocument@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100525002 : Text[50];
      GeneralLedgerSetup@1100528702 : Record 98;
      DimensionValue@1100528701 : Record 349;
      WageComponent@1100528703 : Record 11012014;
      IsTravelHour@1100528704 : Boolean;
    BEGIN
      XMLDocument.LoadXml('<ResponseHourLineTemplate/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'HourLineTemplate', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'Code', HourLineTemplate.Code, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', HourLineTemplate.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Type', FormatCU.FormatOptionNo(HourLineTemplate.Type), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AmountMonday', FormatCU.FormatDecimal(AllowanceperDay."Amount Monday"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AmountTuesday', FormatCU.FormatDecimal(AllowanceperDay."Amount Tuesday"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AmountWednesday', FormatCU.FormatDecimal(AllowanceperDay."Amount Wednesday"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AmountThursday', FormatCU.FormatDecimal(AllowanceperDay."Amount Thursday"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AmountFriday', FormatCU.FormatDecimal(AllowanceperDay."Amount Friday"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AmountSaturday', FormatCU.FormatDecimal(AllowanceperDay."Amount Saturday"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'AmountSunday', FormatCU.FormatDecimal(AllowanceperDay."Amount Sunday"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IsTravelHour := FALSE;
        GeneralLedgerSetup.GET;
        IF (HourLineTemplateLine."Cost Object" <> '') THEN BEGIN
          DimensionValue.SETRANGE("Dimension Code", GeneralLedgerSetup."Global Dimension 2 Code");
          DimensionValue.SETRANGE("Global Dimension No.", 2);
          DimensionValue.SETRANGE(Code, HourLineTemplateLine."Cost Object");
          IF DimensionValue.FINDFIRST THEN
            IsTravelHour := GetIsTravelHourCostObject(DimensionValue);
        END;
        IF AddElement(XMLCurrNode, 'IsTravelHour', FormatCU.FormatBoolean(IsTravelHour), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF NOT WageComponent.GET(HourLineTemplateLine."Wage Component") THEN
          WageComponent.INIT;
        IF AddElement(XMLCurrNode, 'Overtime', FormatCU.FormatBoolean(WageComponent.Overtime), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SynchronizeAction@1100528702(Resource@1100528702 : Record 11229278;VAR XMLDocument@1100528700 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100528703 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100528701 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseSynchronizeAction/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'SynchronizeAction', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'Synchronize', FormatCU.FormatOptionNo(Resource."Synchronize FSA"), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE DocumentType@1100528707(DocumentType@1100528702 : Record 11012405;VAR XMLDocument@1100528700 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100528703 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100528701 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseDocumentType/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'DocumentType', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'Code', DocumentType.Type, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'Description', DocumentType.Description, DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE MandatoryField@1100528708(MandatoryField@1100528702 : Record 11125651;VAR XMLDocument@1100528700 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLCurrNode@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100528703 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocNameSpace@1100528701 : Text[50];
    BEGIN
      XMLDocument.LoadXml('<ResponseMandatoryField/>');
      XMLCurrNode := XMLDocument.DocumentElement;

      WITH XMLDOMMgtCU DO BEGIN
        IF AddElement(XMLCurrNode, 'MandatoryField', '', DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        XMLCurrNode := XMLNewChild;
        IF AddElement(XMLCurrNode, 'TableNo', FormatCU.FormatInteger(MandatoryField."Table No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
        IF AddElement(XMLCurrNode, 'FieldNo', FormatCU.FormatInteger(MandatoryField."Field No."), DocNameSpace, XMLNewChild) > 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetStandardObjectEditable@1100525017(StandardObjectNo@1100525004 : Code[20]) : Boolean;
    VAR
      MobileSetup@1100525002 : Record 11012676;
      StandardObject@1100525003 : Record 11020334;
      StandardObjectEditable@1100525001 : Boolean;
      ExportFilterSetMgt@1100525000 : Codeunit 11012200;
    BEGIN
      // DP00826.sn
      StandardObjectEditable := TRUE;
      MobileSetup.GET;
      IF MobileSetup."Filter Set Editable Std Obj" <> '' THEN BEGIN
        ExportFilterSetMgt.SetExportFiltersOnStandardObject(MobileSetup."Filter Set Editable Std Obj", COMPANYNAME, StandardObject);
        StandardObject.FILTERGROUP(10);
        StandardObject.SETRANGE("No.", StandardObjectNo);
        StandardObjectEditable := NOT StandardObject.ISEMPTY;
        StandardObject.FILTERGROUP(0);
      END;
      EXIT(StandardObjectEditable);
      // DP00826.en
    END;

    LOCAL PROCEDURE GetIsTravelHourCostObject@1100528709(CostObject@1100528703 : Record 349) IsTravelHour : Boolean;
    VAR
      MobileSetup@1100528700 : Record 11012676;
      DimensionValue@1100528702 : Record 349;
      ExportFilterSetMgt@1100528701 : Codeunit 11012200;
    BEGIN
      IsTravelHour := FALSE;
      MobileSetup.GET;
      IF MobileSetup."Filter Set Cost Obj. Travel Hr" <> '' THEN BEGIN
        ExportFilterSetMgt.SetExportFiltersOnCostObject(MobileSetup."Filter Set Cost Obj. Travel Hr", COMPANYNAME, DimensionValue);
        DimensionValue.FILTERGROUP(10);
        DimensionValue.SETRANGE("Dimension Code", CostObject."Dimension Code");
        DimensionValue.SETRANGE(Code, CostObject.Code);
        IsTravelHour := NOT DimensionValue.ISEMPTY;
        DimensionValue.FILTERGROUP(0);
      END;

      EXIT(IsTravelHour);
    END;

    BEGIN
    {

      4PS01
      4PS02 JD 07-05-2009 Adjusted ReportProcedure to make is possible to return the report procedures of all servicelocation in one
                          message
      4PS03 JD 12-08-2009 Call 16243 When NAS runs in English daysheetpresentation on time ticks doesn't work
    }
    END.
  }
}

