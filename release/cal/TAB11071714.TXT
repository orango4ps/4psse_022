OBJECT Table 11071714 Object Imp. Worksheet Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ObjectImpWorksheetLine@1100528600 : Record 11071714;
             BEGIN
               IF "Line No." = 0 THEN BEGIN
                 ObjectImpWorksheetLine.SETRANGE("Worksheet No.", "Worksheet No.");
                 IF ObjectImpWorksheetLine.FINDLAST THEN
                   "Line No." := ObjectImpWorksheetLine."Line No." + 10000
                 ELSE
                   "Line No." := 10000;
               END;
               UpdateTypeAndCode;
               IF (Quantity = 0) OR ("Import Type" IN ["Import Type"::"Service Contract", "Import Type"::"Service Location+Object"]) THEN
                 Quantity := 1;
               IF "Quantity per Object" = 0 THEN
                 "Quantity per Object" := 1;
               CheckLine(FALSE);
             END;

    OnModify=BEGIN
               CheckLine(FALSE);
             END;

    CaptionML=[ENU=Object Import Worksheet Line;
               NOR=Objekt, importer regnearkrad;
               SVE=Kalkylbladsrad f”r objektsimport];
  }
  FIELDS
  {
    { 10  ;   ;Worksheet No.       ;Code10        ;TableRelation="Object Imp. Worksheet";
                                                   CaptionML=[ENU=Worksheet No.;
                                                              NOR=Regneark nr.;
                                                              SVE=Kalkylbladnr] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn];
                                                   Editable=Yes }
    { 40  ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              NOR=Navn 2;
                                                              SVE=Namn 2] }
    { 50  ;   ;Address             ;Text100       ;OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              NOR=Adresse;
                                                              SVE=Adress];
                                                   Editable=Yes }
    { 60  ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2];
                                                   Editable=Yes }
    { 70  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                IF ObjectImpWorkSheetMgtCU.NormalizePostCode("Post Code", "Country/Region Code", "Post Code (Normalized)") THEN
                                                                  VALIDATE("Post Code (Normalized)")
                                                                ELSE
                                                                  "Post Code (Normalized)" := '';
                                                                CheckLine(FALSE);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              NOR=Postnr;
                                                              SVE=Postnr];
                                                   Editable=Yes }
    { 80  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              NOR=Sted;
                                                              SVE=Ort];
                                                   Editable=Yes }
    { 85  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              NOR=Fylke/delstat;
                                                              SVE=Delstat];
                                                   Editable=Yes }
    { 90  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
    { 100 ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                "Phone No. (Normalized)" := ObjectImpWorkSheetMgtCU.NormalizePhoneNo("Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              NOR=Telefonnr.;
                                                              SVE=Telefonnr] }
    { 105 ;   ;Mobile Phone No.    ;Text30        ;OnValidate=BEGIN
                                                                "Mobile Phone No. (Normalized)" := ObjectImpWorkSheetMgtCU.NormalizePhoneNo("Mobile Phone No.");
                                                              END;

                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              NOR=Mobiltelefonnr;
                                                              SVE=Mobiltelefonnr] }
    { 110 ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                "Fax No. (Normalized)" := ObjectImpWorkSheetMgtCU.NormalizePhoneNo("Fax No.");
                                                              END;

                                                   CaptionML=[ENU=Fax No.;
                                                              NOR=Telefaxnr;
                                                              SVE=Telefaxnr] }
    { 120 ;   ;House No.           ;Text30        ;OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=House No.;
                                                              NOR=Husnr.;
                                                              SVE=Husnr] }
    { 125 ;   ;House No. Ext.      ;Code10        ;OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=House No. Extension;
                                                              NOR=Husnr ETA;
                                                              SVE=Husnr ÄTA] }
    { 130 ;   ;Found Location No.  ;Code20        ;TableRelation="Service Location";
                                                   OnValidate=VAR
                                                                ServiceLocation@1100528400 : Record 11012801;
                                                              BEGIN
                                                                IF "Found Location No." <> '' THEN
                                                                  IF NOT IsCorrectServiceLocationNo("Found Location No.") THEN
                                                                    IF PostCodeAndHouseNoAreUsed THEN
                                                                      ERROR(
                                                                        Text003, ServiceLocation.FIELDCAPTION("Post Code"), ServiceLocation.FIELDCAPTION("House No."),
                                                                        ServiceLocation.TABLECAPTION, "Found Location No.")
                                                                    ELSE
                                                                      ERROR(
                                                                        Text003, ServiceLocation.FIELDCAPTION(Latitude), ServiceLocation.FIELDCAPTION(Longitude),
                                                                        ServiceLocation.TABLECAPTION, "Found Location No.");
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceLocation@1100528600 : Record 11012801;
                                                            BEGIN
                                                              GetServiceLocationDS(ServiceLocation);
                                                              IF "Found Location No." <> '' THEN
                                                                IF ServiceLocation.GET("Found Location No.") THEN;
                                                              IF PAGE.RUNMODAL(0, ServiceLocation) = ACTION::LookupOK THEN
                                                                VALIDATE("Found Location No.", ServiceLocation."No.");
                                                            END;

                                                   CaptionML=[ENU=Found Location No.;
                                                              NOR=Funnet lokasjon nr.;
                                                              SVE=Hittat lagerst„llenr] }
    { 150 ;   ;Standard Object No. ;Code20        ;TableRelation="Standard Object" WHERE (Expired=CONST(No));
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);

                                                                IF ("Object Description" = '') AND ("Object Description 2" = '') THEN BEGIN
                                                                  CALCFIELDS("Standard Object Description", "Standard Object Description 2");
                                                                  "Object Description" := "Standard Object Description";
                                                                  "Object Description 2" := "Standard Object Description 2";
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceObjectManagement@1100528601 : Codeunit 11012808;
                                                            BEGIN
                                                              IF ServiceObjectManagement.HandleLookupStandardObject('', FALSE, "Standard Object No.") THEN
                                                                VALIDATE("Standard Object No.");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Standard Object No.;
                                                              NOR=Standardobjektnr;
                                                              SVE=Standardobjektsnr] }
    { 160 ;   ;Standard Object Description;Text100;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object".Description WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=[ENU=Standard Object Description;
                                                              NOR=Standard objektsbeskrivelse;
                                                              SVE=Standardobjektsbeskrivning];
                                                   Editable=No }
    { 165 ;   ;Standard Object Description 2;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Description 2" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=[ENU=Standard Object Description 2;
                                                              SVE=Standardobjektsbeskrivning 2];
                                                   Editable=No }
    { 170 ;   ;Serial No.          ;Text80        ;CaptionML=[ENU=Serial No.;
                                                              NOR=Serienr.;
                                                              SVE=Tillverkningsnr] }
    { 175 ;   ;Year of Manufacture ;Integer       ;CaptionML=[ENU=Year of Manufacture;
                                                              NOR=Produksjons†r;
                                                              SVE=Tillverknings†r] }
    { 180 ;   ;Building            ;Text30        ;CaptionML=[ENU=Building;
                                                              NOR=Byggning;
                                                              SVE=Byggnad] }
    { 185 ;   ;Floor               ;Text30        ;CaptionML=[ENU=Floor;
                                                              NOR=Gulv;
                                                              SVE=V†ning] }
    { 190 ;   ;Room                ;Text30        ;CaptionML=[ENU=Room;
                                                              NOR=Rom;
                                                              SVE=Rum] }
    { 195 ;   ;Customer Feature    ;Text30        ;CaptionML=[ENU=Customer Feature;
                                                              NOR=Kundefunksjon;
                                                              SVE=Kundfunktion] }
    { 200 ;   ;Address (Normalized);Text100       ;CaptionML=[ENU=Address (Normalized);
                                                              NOR=Adresse (normalisert);
                                                              SVE=Adress (normaliserad)] }
    { 220 ;   ;Post Code (Normalized);Code20      ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code (Normalized);
                                                              NOR=Postnummer (normalisert);
                                                              SVE=Postnr (normaliserad)] }
    { 230 ;   ;City (Normalized)   ;Text30        ;CaptionML=[ENU=City (Normalized);
                                                              NOR=Poststed (normalisert);
                                                              SVE=Ort (normaliserad)] }
    { 250 ;   ;Phone No. (Normalized);Text30      ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No. (Normalized);
                                                              NOR=Telefonnummer (normalisert);
                                                              SVE=Telefonnr (normaliserat)] }
    { 255 ;   ;Mobile Phone No. (Normalized);Text30;
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. (Normalized) }
    { 260 ;   ;Fax No. (Normalized);Text30        ;CaptionML=[ENU=Fax No. (Normalized);
                                                              NOR=Faxnr. (normalisert);
                                                              SVE=Faxnr (normaliserat)] }
    { 280 ;   ;Location Description;Text50        ;CaptionML=[ENU=Location Description;
                                                              NOR=Beskrivelse av lokasjon;
                                                              SVE=Beskrivning av lagerst„lle] }
    { 300 ;   ;Ready for Processing;Boolean       ;CaptionML=[ENU=Ready for Processing;
                                                              NOR=Klar til prosessering;
                                                              SVE=Klart f”r behandling] }
    { 330 ;   ;Created Location No.;Code20        ;TableRelation="Service Location";
                                                   CaptionML=[ENU=Created Location No.;
                                                              NOR=Opprettet lokasjonsnr.;
                                                              SVE=Skapat lagerst„llenr];
                                                   Editable=No }
    { 335 ;   ;Imported Survey Location Code;Code10;
                                                   TableRelation=IF (Import Type=CONST(Service Survey)) "Service Survey Location"."Location Code";
                                                   CaptionML=[ENU=Imported Survey Location Code;
                                                              NOR=Imprtert lokasjonskode for kartlegging;
                                                              SVE=Imp. kod kartl„ggningplats];
                                                   Editable=No }
    { 340 ;   ;Created Object No.  ;Code20        ;TableRelation=Service-Object;
                                                   CaptionML=[ENU=Created Object No.;
                                                              NOR=Opprettet objektnr.;
                                                              SVE=Skapat objektnr];
                                                   Editable=No }
    { 345 ;   ;Imported Surv. Loc. Object No.;Integer;
                                                   TableRelation=IF (Import Type=CONST(Service Survey)) "Serv. Surv. Location Object"."Seq. No.";
                                                   CaptionML=[ENU=Imported Survey Location Object No.;
                                                              NOR=Importert lokasjonsobjektnr. for kartlegging;
                                                              SVE=Imp. obj.nr kartl„ggningsplats];
                                                   Editable=No }
    { 360 ;   ;Create Location     ;Boolean       ;CaptionML=[ENU=Create Location;
                                                              NOR=Opprett lokasjon;
                                                              SVE=Skapa lagerst„lle] }
    { 370 ;   ;Create Object       ;Boolean       ;CaptionML=[ENU=Create Object;
                                                              NOR=Opprett objekt;
                                                              SVE=Skapa objekt] }
    { 380 ;   ;Plot No.            ;Code10        ;TableRelation=IF (Company Name=CONST()) Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Plot No.;
                                                              NOR=Tegningnr;
                                                              SVE=Ritningnr] }
    { 390 ;   ;Project No.         ;Code20        ;TableRelation=IF (Company Name=CONST()) Job;
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 400 ;   ;Company Name        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Object Imp. Worksheet"."Company Name" WHERE (No.=FIELD(Worksheet No.)));
                                                   CaptionML=[ENU=Company Name;
                                                              NOR=Navn p† selskap;
                                                              SVE=F”retagsnamn];
                                                   Editable=No }
    { 410 ;   ;Import Type         ;Option        ;CaptionML=[ENU=Import Type;
                                                              NOR=Importtype;
                                                              SVE=Import typ];
                                                   OptionCaptionML=ENU=Service Contract,Service Survey,Service Location + Object;
                                                   OptionString=Service Contract,Service Survey,Service Location+Object;
                                                   Editable=No }
    { 420 ;   ;Code                ;Code20        ;TableRelation=IF (Import Type=CONST(Service Contract)) Service-Contract
                                                                 ELSE IF (Import Type=CONST(Service Survey)) "Service Survey" WHERE (Input Method=CONST(Object));
                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   Editable=No }
    { 430 ;   ;Found Survey Location Code;Code20  ;TableRelation=IF (Import Type=CONST(Service Survey)) "Service Survey Location"."Location Code" WHERE (Survey No.=FIELD(Code));
                                                   CaptionML=[ENU=Found Survey Location Code;
                                                              NOR=Fant lokasjonskode for kartlegging;
                                                              SVE=Hittad platskod kartl„ggning];
                                                   Editable=No }
    { 440 ;   ;E-Mail              ;Text80        ;CaptionML=[ENU=Email;
                                                              NOR=E-post;
                                                              SVE=E-post] }
    { 450 ;   ;Customer Feature (Location);Text30 ;CaptionML=[ENU=Customer Feature (Location);
                                                              NOR=Kundefunksjon (Lokasjon)] }
    { 460 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 - kode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 470 ;   ;Travel Cost Code    ;Code10        ;TableRelation="Travel Cost Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Travel Cost Code;
                                                              NOR=Reisekostkode;
                                                              SVE=Resekostnadskod] }
    { 480 ;   ;Object Customer     ;Code20        ;CaptionML=[ENU=Object Customer;
                                                              NOR=Objektkunde;
                                                              SVE=Objektkund] }
    { 490 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor WHERE (Subcontractor Type=FILTER(Subcontractor|Self Employed|Employment Agency));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Subcontractor;
                                                              NOR=Underentrepren›r;
                                                              SVE=Underentrepren”r] }
    { 500 ;   ;Price Agreement     ;Decimal       ;CaptionML=[ENU=Price Agreement (LCY);
                                                              NOR=Prisavtale (NOK);
                                                              SVE=Prisavtal (LCY)];
                                                   BlankZero=Yes }
    { 510 ;   ;Starting Date Maintenance;Date     ;CaptionML=[ENU=Starting Date Maintenance;
                                                              NOR=Startdato, Vedlikehold;
                                                              SVE=Startdatum, underh†ll] }
    { 520 ;   ;Service Package     ;Code20        ;TableRelation="Service Package" WHERE (Source Type=CONST(None));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Service Package;
                                                              NOR=Servicepakke;
                                                              SVE=Servicepaket] }
    { 530 ;   ;Subcontracting      ;Boolean       ;CaptionML=[ENU=Subcontracting;
                                                              NOR=Underentrepen›r;
                                                              SVE=UE] }
    { 540 ;   ;In use since        ;Date          ;CaptionML=[ENU=In use since;
                                                              NOR=I bruk siden;
                                                              SVE=Anv„nds sedan] }
    { 550 ;   ;Quantity            ;Integer       ;InitValue=1;
                                                   OnValidate=VAR
                                                                ObjectImpWorksheet@1100528600 : Record 11071713;
                                                              BEGIN
                                                                IF Quantity <> 1 THEN BEGIN
                                                                  IF NOT ObjectImpWorksheet.GET("Worksheet No.") THEN
                                                                    ObjectImpWorksheet.INIT;
                                                                  ObjectImpWorksheet.TESTFIELD("Import Type", ObjectImpWorksheet."Import Type"::"Service Survey");
                                                                END;
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   MinValue=1;
                                                   BlankZero=Yes }
    { 560 ;   ;Quantity per Object ;Integer       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Quantity per Object;
                                                              NOR=Kvantum per objekt;
                                                              SVE=Antal per objekt];
                                                   MinValue=1;
                                                   BlankZero=Yes }
    { 570 ;   ;Complex Code        ;Code10        ;TableRelation=Complex;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Complex Code;
                                                              NOR=Komplekskode;
                                                              SVE=Servicekomplexkod] }
    { 580 ;   ;Object Description  ;Text100       ;CaptionML=[ENU=Object Description;
                                                              NOR=Objektbeskrivelse;
                                                              SVE=Objektbeskrivning] }
    { 590 ;   ;Object Description 2;Text50        ;CaptionML=ENU=Object Description 2 }
    { 600 ;   ;Object Specification 1;Text80      ;CaptionML=ENU=Object Specification 1 }
    { 610 ;   ;Object Specification 2;Text80      ;CaptionML=ENU=Object Specification 2 }
    { 620 ;   ;Object Specification 3;Text80      ;CaptionML=ENU=Object Specification 3 }
    { 630 ;   ;Object Specification 4;Text80      ;CaptionML=ENU=Object Specification 4 }
    { 640 ;   ;Object Specification 5;Text80      ;CaptionML=ENU=Object Specification 5 }
    { 650 ;   ;Object Specification 6;Text80      ;CaptionML=ENU=Object Specification 6 }
    { 660 ;   ;Object Specification 7;Text80      ;CaptionML=ENU=Object Specification 7 }
    { 670 ;   ;Object Specification 8;Text80      ;CaptionML=ENU=Object Specification 8 }
    { 680 ;   ;Object Specification 9;Text80      ;CaptionML=ENU=Object Specification 9 }
    { 690 ;   ;Object Specification 10;Text80     ;CaptionML=ENU=Object Specification 10 }
    { 700 ;   ;Object Status       ;Code10        ;TableRelation="Service Object Status";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object Status }
    { 710 ;   ;Warranty Code Customer;Code10      ;TableRelation="Service Warranty";
                                                   CaptionML=[ENU=Warranty Code Customer;
                                                              NOR=Garantikode kunde;
                                                              SVE=Grantikod kund] }
    { 720 ;   ;Warranty Starting Date Cust.;Date  ;CaptionML=[ENU=Warranty Starting Date Customer;
                                                              SVE=Kunds startdatum f”r garanti] }
    { 730 ;   ;Warranty Exp. Date Customer;Date   ;CaptionML=[ENU=Warranty Expiration Date Customer;
                                                              SVE=Kunds slutdatum f”r garanti] }
    { 740 ;   ;Warranty Code Vendor;Code10        ;TableRelation="Service Warranty";
                                                   CaptionML=[ENU=Warranty Code Vendor;
                                                              NOR=Garantikode leverand›r;
                                                              SVE=Grantikod leveran”r] }
    { 750 ;   ;Warranty Start Date Vendor;Date    ;CaptionML=[ENU=Warranty Start Date Vendor;
                                                              NOR=Garantistartdato leverand›r;
                                                              SVE=Garantistartdatum leverant”r] }
    { 760 ;   ;Warranty Exp. Date Vendor;Date     ;CaptionML=[ENU=Warranty Expiration Date Vendor;
                                                              SVE=Leverant”rs slutdatum f”r garanti] }
    { 770 ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverand›rnr.;
                                                              SVE=Leverant”rsnr] }
    { 780 ;   ;Bill-to Vendor No.  ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Vendor No.;
                                                              NOR=Fakturer til-leverand›rnr.;
                                                              SVE=Faktureras leverant”rsnr.] }
    { 790 ;   ;NEN2767 Element Code;Code20        ;TableRelation="NEN2767 Element".No.;
                                                   OnLookup=VAR
                                                              NEN2767LTMPSetup@1100528601 : Record 11128772;
                                                              NEN2767Element@1100528600 : Record 11128770;
                                                            BEGIN
                                                              NEN2767LTMPSetup.GET;
                                                              NEN2767LTMPSetup.TESTFIELD("Default Version Code");
                                                              NEN2767Element.SETRANGE("Version Code", NEN2767LTMPSetup."Default Version Code");
                                                              IF "NEN2767 Element Code" <> '' THEN BEGIN
                                                                NEN2767Element.SETRANGE("No.", "NEN2767 Element Code");
                                                                IF NEN2767Element.FINDFIRST THEN
                                                                NEN2767Element.SETRANGE("No.");
                                                              END;
                                                              IF PAGE.RUNMODAL(0, NEN2767Element) = ACTION::LookupOK THEN
                                                                VALIDATE("NEN2767 Element Code", NEN2767Element."No.");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=NEN2767 Element;
                                                              NOR=NEN2767-element;
                                                              SVE=NEN2767 Element] }
    { 800 ;   ;Object Text         ;Text250       ;CaptionML=ENU=Object Text }
    { 810 ;   ;Location Structure No.;Integer     ;TableRelation=IF (Found Location No.=FILTER(<>'')) "Service Location Structure".No. WHERE (Service Location No.=FIELD(Found Location No.));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Location Structure No.;
                                                   BlankZero=Yes }
    { 820 ;   ;Location Structure Line Code;Code20;TableRelation=IF (Found Location No.=FILTER(<>'')) "Service Loc. Structure Line".No. WHERE (Service Location No.=FIELD(Found Location No.),
                                                                                                                                               Structure No.=FIELD(Location Structure No.),
                                                                                                                                               Object Line=CONST(No));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Location Structure Line Code;
                                                   NotBlank=Yes }
    { 830 ;   ;Latitude (Location) ;Code30        ;OnValidate=BEGIN
                                                                ValidateGPSCoordinate("Latitude (Location)");
                                                              END;

                                                   CaptionML=ENU=Latitude (Location);
                                                   CharAllowed=09.. }
    { 840 ;   ;Longitude (Location);Code30        ;OnValidate=BEGIN
                                                                ValidateGPSCoordinate("Longitude (Location)");
                                                              END;

                                                   CaptionML=ENU=Longitude (Location);
                                                   CharAllowed=09.. }
    { 850 ;   ;Latitude (Object)   ;Code30        ;OnValidate=BEGIN
                                                                ValidateGPSCoordinate("Latitude (Object)");
                                                              END;

                                                   CaptionML=ENU=Latitude (Object);
                                                   CharAllowed=09.. }
    { 860 ;   ;Longitude (Object)  ;Code30        ;OnValidate=BEGIN
                                                                ValidateGPSCoordinate("Longitude (Object)");
                                                              END;

                                                   CaptionML=ENU=Longitude (Object);
                                                   CharAllowed=09.. }
    { 1000;   ;Message Text        ;Text250       ;CaptionML=[ENU=Message;
                                                              NOR=Melding;
                                                              SVE=Meddelande] }
  }
  KEYS
  {
    {    ;Worksheet No.,Line No.                  ;Clustered=Yes }
    {    ;Post Code (Normalized),House No.,House No. Ext. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1100526200 : Record 225;
      ObjectImpWorkSheetMgtCU@1100526202 : Codeunit 11012839;
      Text000@1100528600 : TextConst 'ENU=%1 not filled.;NOR=%1 er ikke fylt ut.;SVE=%1 har inte fyllts i.';
      Text001@1100528601 : TextConst 'ENU=%1 %2 doesn''t exist.;NOR=%1 %2 finnes ikke.;SVE=%1 %2 finns inte.';
      Text002@1100528602 : TextConst 'ENU=%1 could not be determined.';
      Text003@1100528603 : TextConst 'ENU=%1 and %2 do not match %3 %4.';
      Text004@1100528604 : TextConst 'ENU=Field %1 of %2 %3 not set.';
      Text005@1100528400 : TextConst 'ENU=%1 %2 is not valid.';

    PROCEDURE Normalize@1100526202(ISkipCheckCreateFlags@1100528600 : Boolean);
    VAR
      HouseNoExt@1100526200 : Code[10];
    BEGIN
      IF NOT ObjectImpWorkSheetMgtCU.NormalizePostCode("Post Code", "Country/Region Code", "Post Code (Normalized)") THEN
        "Post Code (Normalized)" := '';
      IF "House No." = '' THEN
        "House No." := ObjectImpWorkSheetMgtCU.DetermineHouseNo(Address, HouseNoExt);
      IF "House No. Ext." = '' THEN
        "House No. Ext." := HouseNoExt;
      IF ("Found Location No." = '') OR NOT IsCorrectServiceLocationNo("Found Location No.") THEN
        DetermineLocationNo("Found Location No.");
      DetermineSurveyLocationCode("Found Survey Location Code");

      IF NOT ISkipCheckCreateFlags THEN BEGIN
        IF PositionOfLocationHasBeenChanged THEN
          "Create Location" :=
            ((("Found Location No." = '') AND ("Import Type" IN ["Import Type"::"Service Contract", "Import Type"::"Service Location+Object"])) OR
             (("Found Survey Location Code" = '') AND ("Import Type" = "Import Type"::"Service Survey"))) AND
            NOT IsLocationCreatedElsewhere();
        IF "Create Location" AND IsLocationCreatedElsewhere THEN
          "Create Location" := FALSE;
      END;

      IF NOT ISkipCheckCreateFlags THEN BEGIN
        IF ("Import Type" IN ["Import Type"::"Service Contract", "Import Type"::"Service Location+Object"])  THEN BEGIN
          IF (xRec."Found Location No." <> "Found Location No.") OR
             (xRec."Standard Object No." <> "Standard Object No.") OR
             PositionOfObjectHasBeenChanged
          THEN
            "Create Object" := NOT ObjectExists() AND NOT IsObjectCreatedElsewhere;
        END ELSE
          "Create Object" := TRUE;
      END;

      "Address (Normalized)" := '';
      "City (Normalized)" := '';
      IF "Address (Normalized)" <> '' THEN
        IF "House No. Ext." <> '' THEN
          "Address (Normalized)" := STRSUBSTNO('%1 %2 %3', "Address (Normalized)", "House No.", "House No. Ext.")
        ELSE
          "Address (Normalized)" := STRSUBSTNO('%1 %2', "Address (Normalized)", "House No.");
    END;

    PROCEDURE DetermineLocationNo@1100526203(VAR OLocationNo@1100526202 : Code[20]);
    VAR
      ServiceLocation@1100526200 : Record 11012801;
    BEGIN
      OLocationNo := '';
      GetServiceLocationDS(ServiceLocation);
      IF ServiceLocation.FINDFIRST THEN
        OLocationNo := ServiceLocation."No.";
    END;

    PROCEDURE DetermineSurveyLocationCode@1100528611(VAR OLocationCode@1100526202 : Code[10]);
    VAR
      ServiceSurveyLocation@1100526200 : Record 11071804;
      HouseNrExt@1100526201 : Code[10];
    BEGIN
      IF "Import Type" <> "Import Type"::"Service Survey" THEN
        EXIT;

      OLocationCode := '';
      IF PostCodeAndHouseNoAreUsed THEN BEGIN
        ServiceSurveyLocation.SETCURRENTKEY("Survey No.", "Post Code");
        ServiceSurveyLocation.SETRANGE("Survey No.", Code);
        ServiceSurveyLocation.SETRANGE("Post Code", "Post Code (Normalized)");
        IF NOT ServiceSurveyLocation.FINDSET THEN
          EXIT;

        REPEAT
          IF (ObjectImpWorkSheetMgtCU.DetermineHouseNo(ServiceSurveyLocation.Address, HouseNrExt) = "House No.") AND
             (HouseNrExt = "House No. Ext.")
          THEN
            OLocationCode:= ServiceSurveyLocation."Location Code";
        UNTIL ServiceSurveyLocation.NEXT = 0;
      END ELSE
        IF "Latitude (Location)" + "Longitude (Location)" <> '' THEN BEGIN
          ServiceSurveyLocation.SETCURRENTKEY("Survey No.", Latitude, Longitude);
          ServiceSurveyLocation.SETRANGE("Survey No.", Code);
          ServiceSurveyLocation.SETRANGE("Post Code", '');
          ServiceSurveyLocation.SETRANGE("House No.", '');
          ServiceSurveyLocation.SETRANGE("House No. Ext.", '');
          ServiceSurveyLocation.SETRANGE(Latitude, "Latitude (Location)");
          ServiceSurveyLocation.SETRANGE(Longitude, "Longitude (Location)");
          IF ServiceSurveyLocation.FINDFIRST THEN
            OLocationCode := ServiceSurveyLocation."Location Code";
        END;
    END;

    PROCEDURE CreateLocation@1100525013() : Boolean;
    VAR
      ServiceLocation@1100525000 : Record 11012801;
      ServiceContract@1100526200 : Record 11012812;
      ObjectImpWorksheet@1100527300 : Record 11071713;
    BEGIN
      IF NOT "Create Location" THEN
        EXIT;

      IF "Created Location No." <> '' THEN
        EXIT;

      GetServiceContract(ServiceContract);

      ServiceLocation.INIT;
      ServiceLocation.INSERT(TRUE);

      ServiceLocation.VALIDATE(Description, "Location Description");
      ServiceLocation."Creation Date" := TODAY;
      ServiceLocation.Address := "Address (Normalized)";
      ServiceLocation."Address 2" := "Address 2";
      ServiceLocation.City := "City (Normalized)";
      ServiceLocation."Post Code" := "Post Code (Normalized)";
      ServiceLocation."Country/Region Code" := "Country/Region Code";
      IF "Import Type" = "Import Type"::"Service Location+Object" THEN BEGIN
        ObjectImpWorksheet.GET("Worksheet No.");
        ServiceLocation."Customer No." := ObjectImpWorksheet."Customer No.";
      END ELSE
        ServiceLocation."Customer No." := ServiceContract."Customer No.";
      ServiceLocation."Bill-to Customer No." := ServiceLocation."Customer No.";
      ServiceLocation."Customer Feature" := "Customer Feature (Location)";
      ServiceLocation."Phone No." := "Phone No. (Normalized)";
      ServiceLocation."Mobile Phone No." := "Mobile Phone No. (Normalized)";
      ServiceLocation.EvaluatePostCodeGroup;
      IF "Global Dimension 1 Code" <> '' THEN
        ServiceLocation.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
      ServiceLocation.VALIDATE("Travel Cost Code", "Travel Cost Code");
      ServiceLocation."Fax No." := "Fax No. (Normalized)";
      ServiceLocation."E-Mail" := "E-Mail";
      ServiceLocation."Complex Code" := "Complex Code";
      ServiceLocation.Latitude := "Latitude (Location)";
      ServiceLocation.Longitude := "Longitude (Location)";
      ServiceLocation.MODIFY(TRUE);

      "Created Location No." := ServiceLocation."No.";
      MODIFY;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocation@1100528615();
    VAR
      ServiceLocation@1100528600 : Record 11012801;
      ObjectImpWorksheet@1100528601 : Record 11071713;
    BEGIN
      IF ("Create Location" AND ("Created Location No." = '')) OR ("Found Location No." = '') THEN
        EXIT;
      IF NOT ServiceLocation.GET("Found Location No.") THEN
        EXIT;
      ObjectImpWorksheet.GET("Worksheet No.");
      IF NOT ObjectImpWorksheet."Update Existing Location" THEN
        EXIT;

      ServiceLocation.Address := "Address (Normalized)";
      ServiceLocation."Address 2" := "Address 2";
      ServiceLocation.City := "City (Normalized)";
      ServiceLocation."Country/Region Code" := "Country/Region Code";
      ServiceLocation."Phone No." := "Phone No. (Normalized)";
      ServiceLocation."Mobile Phone No." := "Mobile Phone No. (Normalized)";
      ServiceLocation."Fax No." := "Fax No. (Normalized)";
      ServiceLocation."E-Mail" := "E-Mail";
      ServiceLocation."Complex Code" := "Complex Code";
      ServiceLocation.Latitude := "Latitude (Location)";
      ServiceLocation.Longitude := "Longitude (Location)";

      ServiceLocation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateComplex@1100528610();
    VAR
      Complex@1100528600 : Record 11071816;
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF "Complex Code" = '' THEN
        EXIT;
      IF NOT Complex.GET("Complex Code") THEN BEGIN
        GetServiceContract(ServiceContract);

        Complex.VALIDATE(Code, "Complex Code");
        Complex.INSERT(TRUE);

        Complex.VALIDATE("Customer No.", ServiceContract."Customer No.");
        Complex.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateObject@1100525014() : Boolean;
    VAR
      ServiceObject@1100525000 : Record 11071691;
      ObjectImpWorksheet@1100528600 : Record 11071713;
      ServiceSetup@1100528602 : Record 11012800;
      ObjectSpecificationMgt@1100528601 : Codeunit 11012848;
    BEGIN
      IF NOT "Create Object" THEN
        EXIT;

      IF "Created Object No." <>  '' THEN
        EXIT;

      IF "Standard Object No." <> '' THEN BEGIN
        ServiceObject.INIT;
        ServiceObject."No." := '';
        ServiceObject.INSERT(TRUE);

        ServiceObject.VALIDATE("Standard Object No.", "Standard Object No.");
        IF "Created Location No." <> '' THEN
          ServiceObject.VALIDATE("Service Location No.", "Created Location No.")
        ELSE
          ServiceObject.VALIDATE("Service Location No.", "Found Location No.");
        ServiceObject."Warranty Starting Date Cust." := 0D;
        ServiceObject."In use since" := "In use since";
        ServiceObject.Building := Building;
        ServiceObject.Floor := Floor;
        ServiceObject.Room := Room;
        ServiceObject."Customer Feature" := "Customer Feature";
        ServiceObject."Object Customer" := "Object Customer";
        ServiceObject.Quantity := "Quantity per Object";
        ServiceObject.Description := "Object Description";
        ServiceObject."Description 2" := "Object Description 2";

        ObjectImpWorksheet.GET("Worksheet No.");
        ServiceObject.VALIDATE("Company Name", ObjectImpWorksheet."Company Name");
        ServiceObject.VALIDATE("Project No.", "Project No.");
        ServiceObject.VALIDATE("Plot No.", "Plot No.");
        ServiceObject.VALIDATE(Status, "Object Status");
        ServiceObject.VALIDATE("Warranty Code Customer", "Warranty Code Customer");
        ServiceObject.VALIDATE("Warranty Starting Date Cust.", "Warranty Starting Date Cust.");
        ServiceObject.VALIDATE("Warranty Exp. Date Customer", "Warranty Exp. Date Customer");
        ServiceObject.VALIDATE("Warranty Code Vendor", "Warranty Code Vendor");
        ServiceObject.VALIDATE("Warranty Starting Date Vendor", "Warranty Start Date Vendor");
        ServiceObject.VALIDATE("Warranty Exp. Date Vendor", "Warranty Exp. Date Vendor");
        ServiceObject.VALIDATE("Vendor No.", "Vendor No.");
        ServiceObject.VALIDATE("Bill-to Vendor No.", "Bill-to Vendor No.");
        IF "NEN2767 Element Code" <> '' THEN
          ServiceObject.VALIDATE("NEN2767 Element Code", "NEN2767 Element Code");
        ServiceObject.VALIDATE(Text, "Object Text");
        ServiceObject.Latitude := "Latitude (Object)";
        ServiceObject.Longitude := "Longitude (Object)";
        ServiceObject.MODIFY(TRUE);

        "Created Object No." := ServiceObject."No.";
        MODIFY;

        ServiceSetup.GET;
        IF "Serial No." <> '' THEN BEGIN
          ServiceSetup.TESTFIELD("Spec. Code Serial No.");
          ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Serial No.", "Serial No.");
        END;
        IF "Year of Manufacture" <> 0 THEN BEGIN
          ServiceSetup.TESTFIELD("Spec. Code Year of Manufact.");
          ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Year of Manufact.",
            FORMAT("Year of Manufacture"));
        END;

        HandleObjectSpecifications(ServiceObject."No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateObject@1100528618();
    VAR
      ServiceObject@1100528600 : Record 11071691;
      ObjectImpWorksheet@1100528601 : Record 11071713;
    BEGIN
      IF "Create Object" AND ("Created Object No." = '') THEN
        EXIT;
      ObjectImpWorksheet.GET("Worksheet No.");
      IF NOT ObjectImpWorksheet."Update Existing Object" THEN
        EXIT;
      IF NOT GetExistingServiceObject(ServiceObject) THEN
        EXIT;
      ServiceObject.Description := "Object Description";
      ServiceObject."Description 2" := "Object Description 2";
      ServiceObject.Building := Building;
      ServiceObject.Floor := Floor;
      ServiceObject.Room := Room;
      ServiceObject.Latitude := "Latitude (Object)";
      ServiceObject.Longitude := "Longitude (Object)";
      ServiceObject.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContractObject@1100528614();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ContractObject@1100528605 : Record 11071702;
      ContractObjectMaintenance@1100528604 : Record 11071692;
      ContractAmountsbyDate@1100528602 : Record 11071708;
      SubcontractorService@1100528601 : Record 11071789;
    BEGIN
      GetServiceContract(ServiceContract);
      IF ServiceContract."No." = '' THEN
        EXIT;
      ContractObject.INIT;
      ContractObject.SetDoNotCreateMaintenanceLines(TRUE);
      ContractObject.VALIDATE("Service Contract No.", ServiceContract."No.");
      ContractObject.VALIDATE("Service Object No.", "Created Object No.");
      ContractObject.VALIDATE("Starting Date", ServiceContract."Starting Date");
      ContractObject.VALIDATE("Ending Date", ServiceContract."Ending Date");
      ContractObject.Subcontracting := Subcontracting;
      ContractObject.INSERT(TRUE);
      ContractObject.SetDoNotCreateMaintenanceLines(FALSE);
      ContractObject.SetDoNotConfirmMaintenanceSchemeCreation(TRUE); //mg, 03-07-2015
      IF "Service Package" <> '' THEN
        ContractObject.VALIDATE("Service Package", "Service Package")
      ELSE
        ContractObject.VALIDATE("Service Package", ServiceContract."Service Package");
      ContractObject.MODIFY(TRUE);

      IF ("Starting Date Maintenance" <> 0D) OR (Subcontractor <> '') THEN BEGIN
        ContractObjectMaintenance.SETRANGE("Service Contract No.", ServiceContract."No.");
        ContractObjectMaintenance.SETRANGE("Object No.", ContractObject."Service Object No.");
        IF ContractObjectMaintenance.FINDSET(TRUE) THEN BEGIN
          REPEAT
            IF "Starting Date Maintenance" <> 0D THEN BEGIN
              ContractObjectMaintenance.VALIDATE("Starting Date Maintenance", "Starting Date Maintenance");
              ContractObjectMaintenance.MODIFY(TRUE);
            END;
            IF Subcontractor <> '' THEN BEGIN
              SubcontractorService.VALIDATE("Service Contract No.", ServiceContract."No.");
              SubcontractorService.VALIDATE("Object No.", ContractObject."Service Object No.");
              SubcontractorService.VALIDATE("Maintenance Scheme Code", ContractObjectMaintenance."Maintenance Scheme");
              SubcontractorService.VALIDATE(Subcontractor, Subcontractor);
              SubcontractorService.INSERT(TRUE);
            END;
          UNTIL ContractObjectMaintenance.NEXT = 0;
        END ELSE BEGIN
          CLEAR(SubcontractorService);
          SubcontractorService.SETRANGE("Service Contract No.", '');
          SubcontractorService.SETRANGE("Complex Code", '');
          SubcontractorService.SETRANGE("Service Location No.", GetLocationNo);
          SubcontractorService.SETRANGE("Object No.", '');
          SubcontractorService.SETRANGE("Maintenance Scheme Code", '');
          SubcontractorService.SETRANGE(Subcontractor, Subcontractor);
          IF SubcontractorService.ISEMPTY THEN BEGIN
            SubcontractorService.VALIDATE("Service Location No.", GetLocationNo);
            SubcontractorService.VALIDATE(Subcontractor, Subcontractor);
            SubcontractorService.INSERT(TRUE);
          END;
        END;
      END;

      IF "Price Agreement" <> 0 THEN BEGIN
        ContractAmountsbyDate.Type := ContractAmountsbyDate.Type::"Price Agreement";
        ContractAmountsbyDate."Service Contract No." := ServiceContract."No.";
        ContractAmountsbyDate."Service Object No." := ContractObject."Service Object No.";
        ContractAmountsbyDate."Index Date" := ServiceContract."Starting Date";
        ContractAmountsbyDate.VALIDATE("Amount (LCY)", "Price Agreement");
        ContractAmountsbyDate.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateLocationStructure@1100528616();
    VAR
      ServiceLocationStructure@1100528600 : Record 11071719;
      ServiceLocStructureLine@1100528601 : Record 11071720;
      FormatManagement@1100528603 : Codeunit 11012022;
      ServiceLocationNo@1100528602 : Code[20];
      StartElement@1100528607 : Code[20];
      Chapter@1100528604 : Code[20];
      Paragraph@1100528605 : Code[20];
      Part@1100528609 : Code[20];
      Level@1100528606 : Integer;
      LevelLoop@1100528608 : Integer;
    BEGIN
      IF "Created Location No." <> '' THEN
        ServiceLocationNo := "Created Location No."
      ELSE
        ServiceLocationNo := "Found Location No.";
      IF ServiceLocationNo = '' THEN
        EXIT;
      IF "Location Structure No." = 0 THEN
        EXIT;
      IF "Location Structure Line Code" = '' THEN
        EXIT;

      IF NOT ServiceLocationStructure.GET(ServiceLocationNo, "Location Structure No.") THEN BEGIN
        ServiceLocationStructure."Service Location No." := ServiceLocationNo;
        ServiceLocationStructure."No." := "Location Structure No.";
        ServiceLocationStructure.INSERT(TRUE);
      END;

      FormatManagement.CreateServLocStructureElement(
        ServiceLocationNo, "Location Structure No.", StartElement, Chapter, Paragraph, "Location Structure Line Code", Level, FALSE);

      WHILE LevelLoop <= Level DO BEGIN
        CASE LevelLoop OF
          0: Part := StartElement;
          1: Part := Chapter;
          2: Part := Paragraph;
          3: Part := "Location Structure Line Code";
        END;
        IF NOT ServiceLocStructureLine.GET(ServiceLocationNo, "Location Structure No.", Part, '') THEN BEGIN
          ServiceLocStructureLine.VALIDATE("Service Location No.", ServiceLocationNo);
          ServiceLocStructureLine.VALIDATE("Structure No.", "Location Structure No.");
          ServiceLocStructureLine.VALIDATE("No.", Part);
          ServiceLocStructureLine.INSERT(TRUE);
        END;
        LevelLoop += 1;
      END;
      IF NOT ServiceLocStructureLine.GET(ServiceLocationNo, "Location Structure No.", "Location Structure Line Code", "Created Object No.") THEN BEGIN
        ServiceLocStructureLine.VALIDATE("Service Location No.", ServiceLocationNo);
        ServiceLocStructureLine.VALIDATE("Structure No.", "Location Structure No.");
        ServiceLocStructureLine.VALIDATE("No.", "Location Structure Line Code");
        ServiceLocStructureLine.VALIDATE("Service Object No.", "Created Object No.");
        ServiceLocStructureLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE GetServiceContract@1100526206(VAR OServiceContract@1100526200 : Record 11012812);
    VAR
      ObjectImpWorksheet@1100526202 : Record 11071713;
    BEGIN
      CLEAR(OServiceContract);
      ObjectImpWorksheet.GET("Worksheet No.");
      IF ObjectImpWorksheet."Import Type" = ObjectImpWorksheet."Import Type"::"Service Contract" THEN
        IF ObjectImpWorksheet.Code <> '' THEN
          OServiceContract.GET(ObjectImpWorksheet.Code);
    END;

    PROCEDURE Process@1100526201();
    VAR
      ObjectImpWorksheet@1100528600 : Record 11071713;
    BEGIN
      IF NOT CheckLine(TRUE) THEN EXIT;

      IF NOT "Ready for Processing" THEN
        EXIT;

      ObjectImpWorksheet.GET("Worksheet No.");
      CASE ObjectImpWorksheet."Import Type" OF
        ObjectImpWorksheet."Import Type"::"Service Contract":
          BEGIN
            ObjectImpWorksheet.TESTFIELD(Code);
            CreateComplex;
            IF NOT CreateLocation THEN
              UpdateLocation;
            IF NOT CreateObject THEN
              UpdateObject
            ELSE BEGIN
              CreateAndUpdateLocationStructure;
              CreateContractObject;
            END;
          END;
        ObjectImpWorksheet."Import Type"::"Service Survey":
          BEGIN
            ObjectImpWorksheet.TESTFIELD(Code);
            CreateSurveyLocation;
            CreateSurveyLocObject;
          END;
        ObjectImpWorksheet."Import Type"::"Service Location+Object":
          BEGIN
            IF NOT CreateLocation THEN
              UpdateLocation;
            IF CreateObject THEN
              CreateAndUpdateLocationStructure
            ELSE
              UpdateObject;
          END;
      END;
    END;

    PROCEDURE IsLocationCreatedElsewhere@1100526207() : Boolean;
    VAR
      ObjectImpWorksheetLine@1100526200 : Record 11071714;
    BEGIN
      SetFiltersForMatchingLocations(ObjectImpWorksheetLine);
      ObjectImpWorksheetLine.SETRANGE("Create Location", TRUE);
      ObjectImpWorksheetLine.SETFILTER("Line No.", '<>%1', "Line No.");
      EXIT(NOT ObjectImpWorksheetLine.ISEMPTY);
    END;

    PROCEDURE IsObjectCreatedElsewhere@1100528604() : Boolean;
    VAR
      ObjectImpWorksheetLine@1100526200 : Record 11071714;
    BEGIN
      SetFiltersForMatchingObjects(ObjectImpWorksheetLine);
      ObjectImpWorksheetLine.SETRANGE("Create Object", TRUE);
      ObjectImpWorksheetLine.SETFILTER("Line No.", '<>%1', "Line No.");
      EXIT(NOT ObjectImpWorksheetLine.ISEMPTY);
    END;

    PROCEDURE CheckLine@1100528600(ISkipCheckCreateFlags@1100528603 : Boolean) : Boolean;
    VAR
      StandardObject@1100528600 : Record 11020334;
      Job@1100528601 : Record 11072003;
      Plot@1100528602 : Record 11012500;
      DimensionValue@1100528604 : Record 349;
      TravelCostCode@1100528605 : Record 11071801;
      Vendor@1100528606 : Record 23;
      ServicePackage@1100528607 : Record 11012806;
      ServiceLocation@1100528608 : Record 11012801;
      ServiceSetup@1100528609 : Record 11012800;
    BEGIN
      Normalize(ISkipCheckCreateFlags);

      "Message Text" := '';
      IF "Standard Object No." = '' THEN
        "Message Text" := STRSUBSTNO(Text000, FIELDCAPTION("Standard Object No."));

      IF NOT StandardObject.GET("Standard Object No.") THEN
        "Message Text" := STRSUBSTNO(Text001, FIELDCAPTION("Standard Object No."), "Standard Object No.");

      IF PostCodeAndHouseNoAreUsed OR
         ("Latitude (Location)" + "Longitude (Location)" = '')
      THEN BEGIN
        IF "Address (Normalized)" = '' THEN
          "Message Text" := STRSUBSTNO(Text002, FIELDCAPTION("Address (Normalized)"));
        IF "Post Code (Normalized)" = '' THEN
          "Message Text" := STRSUBSTNO(Text002, FIELDCAPTION("Post Code (Normalized)"));
        IF "City (Normalized)" = '' THEN
          "Message Text" := STRSUBSTNO(Text002, FIELDCAPTION("City (Normalized)"));
      END ELSE BEGIN
        IF "Latitude (Location)" = '' THEN
          "Message Text" := STRSUBSTNO(Text000, FIELDCAPTION("Latitude (Location)"));
        IF "Longitude (Location)" = '' THEN
          "Message Text" := STRSUBSTNO(Text000, FIELDCAPTION("Longitude (Location)"));
      END;

      CALCFIELDS("Company Name");
      IF "Project No." <> '' THEN BEGIN
        IF "Company Name" <> '' THEN
          Job.CHANGECOMPANY("Company Name");
        IF NOT Job.GET("Project No.") THEN
          "Message Text" := STRSUBSTNO(Text001, FIELDCAPTION("Project No."), "Project No.");
      END;

      IF "Plot No." <> '' THEN BEGIN
        IF "Company Name" <> '' THEN
          Plot.CHANGECOMPANY("Company Name");
        IF NOT Plot.GET("Project No.", "Plot No.") THEN
          "Message Text" := STRSUBSTNO(Text001, FIELDCAPTION("Plot No."), "Plot No.");
      END;

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        DimensionValue.SETRANGE("Global Dimension No.", 1);
        DimensionValue.SETRANGE(Code, "Global Dimension 1 Code");
        IF DimensionValue.ISEMPTY THEN
          "Message Text" := STRSUBSTNO(Text001, FIELDCAPTION("Global Dimension 1 Code"), "Global Dimension 1 Code");
      END;

      IF "Travel Cost Code" <> '' THEN
        IF NOT TravelCostCode.GET("Travel Cost Code") THEN
          "Message Text" := STRSUBSTNO(Text001, FIELDCAPTION("Travel Cost Code"), "Travel Cost Code");

      IF Subcontractor <> '' THEN BEGIN
        Vendor.SETRANGE("No.", Subcontractor);
        Vendor.SETFILTER("Subcontractor Type",'>%1',Vendor."Subcontractor Type"::" ");
        IF Vendor.ISEMPTY THEN
          "Message Text" := STRSUBSTNO(Text001, FIELDCAPTION(Subcontractor), Subcontractor);
      END;

      IF "Service Package" <> '' THEN BEGIN
        ServicePackage.SETRANGE(Code, "Service Package");
        ServicePackage.SETRANGE("Source Type", ServicePackage."Source Type"::None);
        IF ServicePackage.ISEMPTY THEN
          "Message Text" := STRSUBSTNO(Text001, FIELDCAPTION("Service Package"), "Service Package");
      END;

      IF Quantity = 0 THEN
        "Message Text" := STRSUBSTNO(Text000, FIELDCAPTION(Quantity));
      IF "Quantity per Object" = 0 THEN
        "Message Text" := STRSUBSTNO(Text000, FIELDCAPTION("Quantity per Object"));

      IF "Location Structure Line Code" <> '' THEN BEGIN
        IF ("Found Location No." <> '') AND NOT "Create Location" THEN BEGIN
          ServiceLocation.GET("Found Location No.");
          IF ServiceLocation."Location Structure Format" = '' THEN
            "Message Text" := STRSUBSTNO(Text004, ServiceLocation.FIELDCAPTION("Location Structure Format"), ServiceLocation.TABLECAPTION, ServiceLocation."No.");
        END ELSE BEGIN
          ServiceSetup.GET;
          IF ServiceSetup."Def. Location Structure Format" = '' THEN
            "Message Text" := STRSUBSTNO(Text004, ServiceSetup.FIELDCAPTION("Def. Location Structure Format"), ServiceSetup.TABLECAPTION, '');
        END;
      END;

      IF NOT ServiceLocation.GPSCoordinateIsValid("Latitude (Location)") THEN
        "Message Text" := STRSUBSTNO(Text005, FIELDCAPTION("Latitude (Location)"), "Latitude (Location)");
      IF NOT ServiceLocation.GPSCoordinateIsValid("Longitude (Location)") THEN
        "Message Text" := STRSUBSTNO(Text005, FIELDCAPTION("Longitude (Location)"), "Longitude (Location)");
      IF NOT ServiceLocation.GPSCoordinateIsValid("Latitude (Object)") THEN
        "Message Text" := STRSUBSTNO(Text005, FIELDCAPTION("Latitude (Object)"), "Latitude (Object)");
      IF NOT ServiceLocation.GPSCoordinateIsValid("Longitude (Object)") THEN
        "Message Text" := STRSUBSTNO(Text005, FIELDCAPTION("Longitude (Object)"), "Longitude (Object)");

      "Ready for Processing" := "Message Text" = '';
      EXIT("Message Text" = '');
    END;

    PROCEDURE ObjectExists@1100528602() : Boolean;
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF GetLocationNo = '' THEN
        EXIT;
      ServiceObject.SETCURRENTKEY("Service Location No.");
      ServiceObject.SETRANGE("Service Location No.", GetLocationNo);
      ServiceObject.SETRANGE("Standard Object No.", "Standard Object No.");
      IF NOT PostCodeAndHouseNoAreUsed THEN BEGIN
        ServiceObject.SETRANGE(Latitude, "Latitude (Object)");
        ServiceObject.SETRANGE(Longitude, "Longitude (Object)");
      END;
      EXIT(NOT ServiceObject.ISEMPTY);
    END;

    PROCEDURE GetNoOfObjects@1100528601() : Integer;
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF GetLocationNo = '' THEN
        EXIT;
      ServiceObject.SETCURRENTKEY("Service Location No.");
      ServiceObject.SETRANGE("Service Location No.", GetLocationNo);
      EXIT(ServiceObject.COUNT);
    END;

    PROCEDURE LookupObjects@1100528603();
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF GetLocationNo = '' THEN
        EXIT;

      ServiceObject.SETCURRENTKEY("Service Location No.");
      ServiceObject.SETRANGE("Service Location No.", GetLocationNo);
      PAGE.RUN(0,ServiceObject);
    END;

    PROCEDURE GetLocationNo@1100528606() : Code[20];
    BEGIN
      IF "Found Location No." <> '' THEN
        EXIT("Found Location No.")
      ELSE
        EXIT("Created Location No.");
    END;

    PROCEDURE CreateSurveyLocation@1100528608();
    VAR
      ObjectImpWorksheet@1100528601 : Record 11071713;
      ServiceSurveyLocation@1100528600 : Record 11071804;
      ServiceSetup@1100528603 : Record 11012800;
      LocationCode@1100528602 : Code[10];
    BEGIN
      IF NOT "Create Location" THEN
        EXIT;

      IF "Imported Survey Location Code" <> '' THEN
        EXIT;

      ServiceSetup.GET;
      ObjectImpWorksheet.GET("Worksheet No.");
      ObjectImpWorksheet.TESTFIELD("Import Type", ObjectImpWorksheet."Import Type"::"Service Survey");

      ServiceSurveyLocation.SETRANGE("Survey No.", ObjectImpWorksheet.Code);
      IF ServiceSurveyLocation.FINDLAST THEN
        LocationCode := ServiceSurveyLocation."Location Code";
      IF LocationCode = '' THEN
        LocationCode := '001'
      ELSE
        LocationCode := INCSTR(LocationCode);

      ServiceSurveyLocation.INIT;
      ServiceSurveyLocation."Survey No." := ObjectImpWorksheet.Code;
      ServiceSurveyLocation."Location Code" := LocationCode;
      ServiceSurveyLocation.Description := "Location Description";
      ServiceSurveyLocation.Address := "Address (Normalized)";
      ServiceSurveyLocation."Address 2" := "Address 2";
      ServiceSurveyLocation."Post Code" := "Post Code (Normalized)";
      ServiceSurveyLocation."Country/Region Code" := "Country/Region Code";
      ServiceSurveyLocation.City := "City (Normalized)";
      ServiceSurveyLocation."Phone No." := "Phone No. (Normalized)";
      ServiceSurveyLocation."Fax No." := "Fax No. (Normalized)";
      ServiceSurveyLocation."E-Mail" := '';
      ServiceSurveyLocation."Mobile Phone No." := "Mobile Phone No. (Normalized)";
      ServiceSurveyLocation."Customer Feature" := '';
      ServiceSurveyLocation."Complex Code" := "Complex Code";
      ServiceSurveyLocation."Location Structure Format" := ServiceSetup."Def. Location Structure Format";
      ServiceSurveyLocation."Include in Contract" := TRUE;
      ServiceSurveyLocation."Service Location No." := "Found Location No.";
      ServiceSurveyLocation."House No." := "House No.";
      ServiceSurveyLocation."House No. Ext." := "House No. Ext.";
      ServiceSurveyLocation."E-Mail" := "E-Mail";
      ServiceSurveyLocation.Latitude := "Latitude (Location)";
      ServiceSurveyLocation.Longitude := "Longitude (Location)";
      ServiceSurveyLocation.INSERT(TRUE);

      "Imported Survey Location Code" := ServiceSurveyLocation."Location Code";
      MODIFY;
    END;

    PROCEDURE CreateSurveyLocObject@1100528609();
    VAR
      ServiceSetup@1100528603 : Record 11012800;
      ObjectImpWorksheet@1100528600 : Record 11071713;
      ServSurvLocationObject@1100528601 : Record 11071813;
      ServiceSurvey@1100528602 : Record 11071803;
      ServiceSurveyManagement@1100528604 : Codeunit 11012852;
    BEGIN
      IF NOT "Create Object" THEN
        EXIT;
      IF "Imported Surv. Loc. Object No." <> 0 THEN
        EXIT;

      ObjectImpWorksheet.GET("Worksheet No.");
      ObjectImpWorksheet.TESTFIELD("Import Type", ObjectImpWorksheet."Import Type"::"Service Survey");
      ServiceSurvey.GET(ObjectImpWorksheet.Code);

      ServSurvLocationObject.INIT;
      ServSurvLocationObject."Survey No." := ObjectImpWorksheet.Code;
      IF "Imported Survey Location Code" <> '' THEN
        ServSurvLocationObject."Location Code" := "Imported Survey Location Code"
      ELSE
        ServSurvLocationObject."Location Code" := "Found Survey Location Code";
      ServSurvLocationObject.VALIDATE("Standard Object No.", "Standard Object No.");
      ServSurvLocationObject.INSERT(TRUE);
      ServSurvLocationObject.Description := "Object Description";
      ServSurvLocationObject."Description 2" := "Object Description 2";
      ServSurvLocationObject.Quantity := Quantity;
      ServSurvLocationObject."Quantity per Object" := "Quantity per Object";
      ServSurvLocationObject."Object Customer" := '';
      ServSurvLocationObject.Building := Building;
      ServSurvLocationObject.Floor := Floor;
      ServSurvLocationObject.Room := Room;
      ServSurvLocationObject."Customer Feature" := "Customer Feature";
      ServSurvLocationObject."Year of Manufacture" := "Year of Manufacture";
      ServSurvLocationObject."Serial No." := "Serial No.";
      ServSurvLocationObject."Customer Object Group" := '';
      IF "Service Package" <> '' THEN
        ServSurvLocationObject.VALIDATE("Service Package", "Service Package")
      ELSE
        ServSurvLocationObject.VALIDATE("Service Package");
      ServSurvLocationObject.Latitude := "Latitude (Object)";
      ServSurvLocationObject.Longitude := "Longitude (Object)";
      ServSurvLocationObject.MODIFY(TRUE);

      "Imported Surv. Loc. Object No." := ServSurvLocationObject."Seq. No.";
      MODIFY;

      ServiceSetup.GET;
      IF "Serial No." <> '' THEN BEGIN
        ServiceSetup.TESTFIELD("Spec. Code Serial No.");
        ServiceSurveyManagement.SetSurveyObjectSpecValue(
          ServiceSurvey."No.", ServSurvLocationObject."Location Code", ServSurvLocationObject."Seq. No.", ServiceSetup."Spec. Code Serial No.", "Serial No.");
      END;
      IF "Year of Manufacture" <> 0 THEN BEGIN
        ServiceSetup.TESTFIELD("Spec. Code Year of Manufact.");
        ServiceSurveyManagement.SetSurveyObjectSpecValue(
          ServiceSurvey."No.", ServSurvLocationObject."Location Code", ServSurvLocationObject."Seq. No.", ServiceSetup."Spec. Code Year of Manufact.", FORMAT("Year of Manufacture"));
      END;

      HandleSurveyObjectSpecifications(ServiceSurvey."No.", ServSurvLocationObject."Location Code", ServSurvLocationObject."Seq. No.");
    END;

    PROCEDURE UpdateTypeAndCode@1100528605();
    VAR
      ObjectImpWorksheet@1100528600 : Record 11071713;
    BEGIN
      IF ObjectImpWorksheet.GET("Worksheet No.") THEN BEGIN
        "Import Type" := ObjectImpWorksheet."Import Type";
        Code := ObjectImpWorksheet.Code;
      END;
    END;

    LOCAL PROCEDURE GetServiceLocationDS@1100528607(VAR OServiceLocation@1100528600 : Record 11012801);
    BEGIN
      OServiceLocation.RESET;
      IF PostCodeAndHouseNoAreUsed THEN BEGIN
        OServiceLocation.SETCURRENTKEY("Post Code");
        OServiceLocation.SETRANGE("Post Code", "Post Code (Normalized)");
        OServiceLocation.SETRANGE("House No.", "House No.");
        OServiceLocation.SETRANGE("House No. Ext.", "House No. Ext.");
      END ELSE BEGIN
        IF "Latitude (Location)" + "Longitude (Location)" <> '' THEN BEGIN
          OServiceLocation.SETCURRENTKEY(Latitude, Longitude);
          OServiceLocation.SETRANGE(Latitude, "Latitude (Location)");
          OServiceLocation.SETRANGE(Longitude, "Longitude (Location)");
        END ELSE
          OServiceLocation.MARKEDONLY(TRUE);
      END;
    END;

    LOCAL PROCEDURE IsCorrectServiceLocationNo@1100528613(IServiceLocationNo@1100528600 : Code[20]) : Boolean;
    VAR
      ServiceLocation@1100528601 : Record 11012801;
    BEGIN
      GetServiceLocationDS(ServiceLocation);
      ServiceLocation.SETRANGE("No.", IServiceLocationNo);
      EXIT(NOT ServiceLocation.ISEMPTY);
    END;

    LOCAL PROCEDURE HandleObjectSpecifications@1100528612(IServiceObjectNo@1100528600 : Code[20]);
    VAR
      ObjectImpWorksheetSpec@1100528601 : Record 11072286;
      ObjectSpecificationMgt@1100528602 : Codeunit 11012848;
    BEGIN
      IF IServiceObjectNo = '' THEN
        EXIT;
      ObjectImpWorksheetSpec.SETRANGE("Worksheet No.", "Worksheet No.");
      ObjectImpWorksheetSpec.SETFILTER("Specification Code", '<>%1', '');
      IF ObjectImpWorksheetSpec.FINDFIRST THEN
        REPEAT
          CASE ObjectImpWorksheetSpec."Specification No." OF
            ObjectImpWorksheetSpec."Specification No."::"Specification 1":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 1");
            ObjectImpWorksheetSpec."Specification No."::"Specification 2":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 2");
            ObjectImpWorksheetSpec."Specification No."::"Specification 3":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 3");
            ObjectImpWorksheetSpec."Specification No."::"Specification 4":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 4");
            ObjectImpWorksheetSpec."Specification No."::"Specification 5":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 5");
            ObjectImpWorksheetSpec."Specification No."::"Specification 6":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 6");
            ObjectImpWorksheetSpec."Specification No."::"Specification 7":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 7");
            ObjectImpWorksheetSpec."Specification No."::"Specification 8":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 8");
            ObjectImpWorksheetSpec."Specification No."::"Specification 9":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 9");
            ObjectImpWorksheetSpec."Specification No."::"Specification 10":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 10");
          END;
        UNTIL ObjectImpWorksheetSpec.NEXT = 0;
    END;

    LOCAL PROCEDURE HandleSurveyObjectSpecifications@1100528617(ISurveyNo@1100528605 : Code[20];ILocationCode@1100528604 : Code[10];ISeqNo@1100528603 : Integer);
    VAR
      ObjectImpWorksheetSpec@1100528601 : Record 11072286;
      ServiceSurveyManagement@1100528602 : Codeunit 11012852;
    BEGIN
      IF ISeqNo = 0 THEN
        EXIT;
      ObjectImpWorksheetSpec.SETRANGE("Worksheet No.", "Worksheet No.");
      ObjectImpWorksheetSpec.SETFILTER("Specification Code", '<>%1', '');
      IF ObjectImpWorksheetSpec.FINDFIRST THEN
        REPEAT
          CASE ObjectImpWorksheetSpec."Specification No." OF
            ObjectImpWorksheetSpec."Specification No."::"Specification 1":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 1");
            ObjectImpWorksheetSpec."Specification No."::"Specification 2":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 2");
            ObjectImpWorksheetSpec."Specification No."::"Specification 3":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 3");
            ObjectImpWorksheetSpec."Specification No."::"Specification 4":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 4");
            ObjectImpWorksheetSpec."Specification No."::"Specification 5":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 5");
            ObjectImpWorksheetSpec."Specification No."::"Specification 6":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 6");
            ObjectImpWorksheetSpec."Specification No."::"Specification 7":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 7");
            ObjectImpWorksheetSpec."Specification No."::"Specification 8":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 8");
            ObjectImpWorksheetSpec."Specification No."::"Specification 9":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 9");
            ObjectImpWorksheetSpec."Specification No."::"Specification 10":
              ServiceSurveyManagement.SetSurveyObjectSpecValue(ISurveyNo, ILocationCode, ISeqNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 10");
          END;
        UNTIL ObjectImpWorksheetSpec.NEXT = 0;
    END;

    LOCAL PROCEDURE ValidateGPSCoordinate@1100528405(Value@1100528400 : Code[30]);
    VAR
      ServiceLocation@1100528401 : Record 11012801;
    BEGIN
      ServiceLocation.ValidateGPSCoordinate(Value);
      CheckLine(FALSE);
    END;

    LOCAL PROCEDURE PositionOfLocationHasBeenChanged@1100528401() : Boolean;
    BEGIN
      IF xRec."Post Code (Normalized)" <> "Post Code (Normalized)" THEN
        EXIT(TRUE);
      IF xRec."House No." <> "House No." THEN
        EXIT(TRUE);
      IF xRec."House No. Ext." <> "House No. Ext." THEN
        EXIT(TRUE);

      IF NOT PostCodeAndHouseNoAreUsed THEN BEGIN
        IF xRec."Latitude (Location)" <> "Latitude (Location)" THEN
          EXIT(TRUE);
        IF xRec."Longitude (Location)" <> "Longitude (Location)" THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PositionOfObjectHasBeenChanged@1100528403() : Boolean;
    BEGIN
      IF PositionOfLocationHasBeenChanged THEN
        EXIT(TRUE);
      IF NOT PostCodeAndHouseNoAreUsed THEN BEGIN
        IF xRec."Latitude (Object)" <> "Latitude (Object)" THEN
          EXIT(TRUE);
        IF xRec."Longitude (Object)" <> "Longitude (Object)" THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostCodeAndHouseNoAreUsed@1100528413() : Boolean;
    BEGIN
      IF "Post Code (Normalized)" <> '' THEN
        EXIT(TRUE);
      IF "House No." <> '' THEN
        EXIT(TRUE);
      IF "House No. Ext." <> '' THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetNoOfMatchingLocations@1100528404() : Integer;
    VAR
      ObjectImpWorksheetLine@1100528400 : Record 11071714;
    BEGIN
      SetFiltersForMatchingLocations(ObjectImpWorksheetLine);
      EXIT(ObjectImpWorksheetLine.COUNT);
    END;

    PROCEDURE GetNoOfMatchingObjects@1100528406() : Integer;
    VAR
      ObjectImpWorksheetLine@1100528400 : Record 11071714;
    BEGIN
      SetFiltersForMatchingObjects(ObjectImpWorksheetLine);
      EXIT(ObjectImpWorksheetLine.COUNT);
    END;

    LOCAL PROCEDURE SetFiltersForMatchingLocations@1100528408(VAR ObjectImpWorksheetLine@1100528400 : Record 11071714);
    BEGIN
      ObjectImpWorksheetLine.SETRANGE("Worksheet No.", "Worksheet No.");
      IF PostCodeAndHouseNoAreUsed THEN BEGIN
        ObjectImpWorksheetLine.SETRANGE("Post Code (Normalized)", "Post Code (Normalized)");
        ObjectImpWorksheetLine.SETRANGE("House No.", "House No.");
        ObjectImpWorksheetLine.SETRANGE("House No. Ext.", "House No. Ext.");
      END ELSE BEGIN
        ObjectImpWorksheetLine.SETRANGE("Post Code (Normalized)", '');
        ObjectImpWorksheetLine.SETRANGE("House No.", '');
        ObjectImpWorksheetLine.SETRANGE("House No. Ext.", '');
        ObjectImpWorksheetLine.SETRANGE("Latitude (Location)", "Latitude (Location)");
        ObjectImpWorksheetLine.SETRANGE("Longitude (Location)", "Longitude (Location)");
      END;
    END;

    LOCAL PROCEDURE SetFiltersForMatchingObjects@1100528409(VAR ObjectImpWorksheetLine@1100528400 : Record 11071714);
    BEGIN
      SetFiltersForMatchingLocations(ObjectImpWorksheetLine);
      IF NOT PostCodeAndHouseNoAreUsed THEN BEGIN
        ObjectImpWorksheetLine.SETRANGE("Latitude (Object)", "Latitude (Object)");
        ObjectImpWorksheetLine.SETRANGE("Longitude (Object)", "Longitude (Object)");
      END;
      ObjectImpWorksheetLine.SETRANGE("Standard Object No.", "Standard Object No.");
    END;

    LOCAL PROCEDURE GetExistingServiceObject@1100528620(VAR OServiceObject@1100528600 : Record 11071691) : Boolean;
    BEGIN
      IF "Found Location No." = '' THEN
        EXIT;
      IF "Standard Object No." = '' THEN
        EXIT;
      OServiceObject.RESET;
      OServiceObject.SETCURRENTKEY("Service Location No.");
      OServiceObject.SETRANGE("Service Location No.", "Found Location No.");
      OServiceObject.SETRANGE("Standard Object No.", "Standard Object No.");
      EXIT((OServiceObject.FINDFIRST) AND (OServiceObject.NEXT = 0));
    END;

    BEGIN
    END.
  }
}

