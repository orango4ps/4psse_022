OBJECT Page 11129752 Project Control Tree
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Project Control;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=Yes;
    SourceTable=Table11229477;
    SourceTableView=SORTING(Project No.,Key Code 1,Key Code 2,Key Code 3,Key Code 4,Key Code 5,Level);
    PageType=List;
    OnInit=BEGIN
             SetVisibility;
           END;

    OnOpenPage=BEGIN
                 MainProjectView := Project."Single/Main/Sub Project" = Project."Single/Main/Sub Project"::"Main Project";

                 JobsSetup.GET;
               END;

    OnAfterGetRecord=BEGIN
                       HideValues;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           HideValues;

                           IF ProgressSliderReady THEN
                             PlaceCurrentValue;
                         END;

  }
  CONTROLS
  {
    { 1100529600;0;Container;
                ContainerType=ContentArea }

    { 1100528601;1;Group  ;
                CaptionML=ENU=Cumulative Progress %;
                GroupType=Group }

    { 1100528600;2;Field  ;
                Name=Slider;
                CaptionML=ENU=Slider;
                ControlAddIn=[Fps.Nav.Addin.UIComponents;PublicKeyToken=024bd013665211e9] }

    { 1100529601;1;Group  ;
                Name=Group;
                IndentationColumnName=Level;
                ShowAsTree=Yes;
                GroupType=Repeater;
                FreezeColumnID=Project No. }

    { 1100529616;2;Field  ;
                CaptionML=ENU=Level Description;
                SourceExpr=TreeDescription(MainProjectView);
                Editable=FALSE }

    { 1100529602;2;Field  ;
                SourceExpr="Project No.";
                Editable=FALSE }

    { 1100529603;2;Field  ;
                SourceExpr="Project Description";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529604;2;Field  ;
                SourceExpr="Main Project No.";
                Editable=FALSE }

    { 1100529617;2;Field  ;
                SourceExpr="Main Project Description";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529608;2;Field  ;
                SourceExpr="Cost Component";
                Visible=CostComponentVisible;
                Editable=FALSE;
                HideValue=HideCostComponent }

    { 1100529605;2;Field  ;
                SourceExpr="Cost Type";
                Editable=FALSE;
                HideValue=HideCostType }

    { 1100529606;2;Field  ;
                SourceExpr="Cost Object";
                Editable=FALSE;
                HideValue=HideCostObject }

    { 1100529607;2;Field  ;
                SourceExpr="Cost Object Description";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideCostObject }

    { 1100529609;2;Field  ;
                SourceExpr=Element;
                Visible=ElementVisible;
                Editable=FALSE;
                HideValue=HideElement }

    { 1100529610;2;Field  ;
                SourceExpr="Element Level";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideElement }

    { 1100529611;2;Field  ;
                SourceExpr="Element Chapter";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideElement }

    { 1100529612;2;Field  ;
                SourceExpr="Element Paragraph";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideElement }

    { 1100529613;2;Field  ;
                SourceExpr="Extension Contract";
                Visible=ExtensionContractVisible;
                Editable=FALSE;
                HideValue=HideExtensionContract }

    { 1100529618;2;Field  ;
                SourceExpr="Original Budget Amount";
                Editable=FALSE;
                OnDrillDown=BEGIN
                              OpenBudgetLine;
                            END;
                             }

    { 1100529619;2;Field  ;
                SourceExpr=Adjustments;
                Editable=FALSE }

    { 1100529620;2;Field  ;
                SourceExpr=Extension;
                Editable=FALSE }

    { 1100529621;2;Field  ;
                SourceExpr=Options;
                Editable=FALSE }

    { 1100529622;2;Field  ;
                CaptionML=ENU=Total Budget;
                SourceExpr="Original Budget Amount" + Adjustments + Extension + Options;
                Editable=FALSE }

    { 1100529614;2;Field  ;
                SourceExpr="Purchase Budget";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529623;2;Field  ;
                SourceExpr=Purchase;
                Visible=FALSE;
                Editable=FALSE }

    { 1100529624;2;Field  ;
                SourceExpr="Purchase Period";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529625;2;Field  ;
                SourceExpr="Open (Purchase)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529626;2;Field  ;
                SourceExpr="Open Ovh. Surch. Soft (Purch.)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529627;2;Field  ;
                SourceExpr="Received/Not Invoiced";
                Editable=FALSE;
                OnDrillDown=VAR
                              PurchaseOrderControlLine@1100528600 : Record 11020221;
                            BEGIN
                              PurchaseOrderControlLine.SETRANGE("Project No.", "Project No.");
                              IF NOT HideCostObject THEN
                                PurchaseOrderControlLine.SETRANGE("Shortcut Dimension 2 Code", "Cost Object");
                              IF NOT HideCostType THEN
                                PurchaseOrderControlLine.SETRANGE("Cost Type", "Cost Type");
                              IF NOT HideElement THEN
                                PurchaseOrderControlLine.SETRANGE(Element, Element);
                              IF NOT HideExtensionContract THEN
                                PurchaseOrderControlLine.SETRANGE("Extension Contract", "Extension Contract");
                              PurchaseOrderControlLine.SETFILTER(Date, '..%1', ProjectControlTreeMgt.GetEndingDate);
                              PAGE.RUN(0, PurchaseOrderControlLine);
                            END;
                             }

    { 1100529628;2;Field  ;
                SourceExpr="Open Ovh. Surch. Firm (Purch.)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529629;2;Field  ;
                SourceExpr="Received/Not Inv. Hours";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529630;2;Field  ;
                SourceExpr="Risc Coverage (Prognosis)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529631;2;Field  ;
                SourceExpr="Risc Coverage";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529632;2;Field  ;
                SourceExpr="Risc Coverage Withdraw";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529633;2;Field  ;
                SourceExpr="Open (Inventory)";
                Editable=FALSE }

    { 1100529634;2;Field  ;
                SourceExpr="Open Ovh. Surch. (Inventory)";
                Editable=FALSE }

    { 1100529635;2;Field  ;
                SourceExpr="Open Amount (Hours)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529636;2;Field  ;
                SourceExpr="Open Hours";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529637;2;Field  ;
                SourceExpr="Open Ovh. Surch. (Hours)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529638;2;Field  ;
                SourceExpr="Actual Costs";
                Editable=FALSE;
                OnDrillDown=BEGIN
                              OpenJobLedgerEntries;
                            END;
                             }

    { 1100529639;2;Field  ;
                SourceExpr="Actual Hours";
                Editable=FALSE;
                OnDrillDown=BEGIN
                              OpenJobLedgerEntries;
                            END;
                             }

    { 1100529615;2;Field  ;
                SourceExpr="Total Cost";
                Editable=FALSE }

    { 1100529642;2;Field  ;
                SourceExpr="Total Hours";
                Editable=FALSE }

    { 1100529640;2;Field  ;
                Name=Available;
                CaptionML=ENU=Available;
                SourceExpr=Budget - "Total Cost";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529643;2;Field  ;
                SourceExpr="Allowed Costs";
                Editable=FALSE }

    { 1100529644;2;Field  ;
                SourceExpr="Allowed Hours";
                Editable=FALSE }

    { 1100529641;2;Field  ;
                SourceExpr="Purchase Result";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529645;2;Field  ;
                SourceExpr=Result;
                Editable=FALSE }

    { 1100529646;2;Field  ;
                SourceExpr="Hours Result";
                Editable=FALSE }

    { 1100529647;2;Field  ;
                SourceExpr=Prognosis;
                Editable=ProjectPrognosisEditable;
                OnValidate=VAR
                             PrognosisLine@1100527401 : Record 11012035;
                             PrognosisDelta@1100527400 : Decimal;
                             PrognosisTotalCostDelta@1100527402 : Decimal;
                             PrognosisEndResultDelta@1100527403 : Decimal;
                           BEGIN
                             PrognosisDelta := Prognosis - xRec.Prognosis;
                             IF PrognosisLine.GET("Project No.", ProjectControlTreeMgt.GetEndingDate, "Cost Type", Element, "Cost Object") THEN BEGIN
                               PrognosisTotalCostDelta := PrognosisLine."Prognosis Total Cost";
                               PrognosisEndResultDelta := PrognosisLine."Prognosis End Result";
                               PrognosisLine.VALIDATE(Amount, Prognosis);
                               PrognosisLine.MODIFY(TRUE);
                             END ELSE BEGIN
                               PrognosisLine.VALIDATE("Project No.", "Project No.");
                               PrognosisLine.VALIDATE("Prognosis Date", ProjectControlTreeMgt.GetEndingDate);
                               PrognosisLine.VALIDATE("Cost Type", "Cost Type");
                               IF NOT HideElement THEN
                                 PrognosisLine.VALIDATE(Element, Element);
                               PrognosisLine.VALIDATE("Cost Object", "Cost Object");
                               PrognosisLine.INSERT(TRUE);
                             END;

                             "Calc Progn Total Cost" := PrognosisLine."Prognosis Total Cost";
                             "Calc. Prognosis End Result" := PrognosisLine."Prognosis End Result";

                             PrognosisTotalCostDelta := "Calc Progn Total Cost" - PrognosisTotalCostDelta;
                             PrognosisEndResultDelta := "Calc. Prognosis End Result" - PrognosisEndResultDelta;

                             UpdatePrognosisInfoInParents(Level - 1, PrognosisDelta, PrognosisTotalCostDelta, PrognosisEndResultDelta);
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1100529648;2;Field  ;
                SourceExpr="Hours Prognosis";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529656;2;Field  ;
                CaptionML=ENU=Prognosis Total Cost;
                SourceExpr="Calc Progn Total Cost";
                Editable=ProjectPrognosisEditable;
                OnValidate=VAR
                             PrognosisLine@1100528600 : Record 11012035;
                             PrognosisDelta@1100527402 : Decimal;
                             PrognosisTotalCostDelta@1100527401 : Decimal;
                             PrognosisEndResultDelta@1100527400 : Decimal;
                           BEGIN
                             PrognosisTotalCostDelta := "Calc Progn Total Cost" - xRec."Calc Progn Total Cost";
                             IF PrognosisLine.GET("Project No.", ProjectControlTreeMgt.GetEndingDate, "Cost Type", Element, "Cost Object") THEN BEGIN
                               PrognosisDelta := PrognosisLine.Amount;
                               PrognosisEndResultDelta := PrognosisLine."Prognosis End Result";
                               PrognosisLine.VALIDATE("Prognosis Total Cost", "Calc Progn Total Cost");
                               PrognosisLine.MODIFY(TRUE);
                             END ELSE BEGIN
                               PrognosisLine.VALIDATE("Project No.", "Project No.");
                               PrognosisLine.VALIDATE("Prognosis Date", ProjectControlTreeMgt.GetEndingDate);
                               PrognosisLine.VALIDATE("Cost Type", "Cost Type");
                               IF NOT HideElement THEN
                                 PrognosisLine.VALIDATE(Element, Element);
                               PrognosisLine.VALIDATE("Cost Object", "Cost Object");
                               PrognosisLine.INSERT(TRUE);
                             END;

                             Prognosis := PrognosisLine.Amount;
                             "Calc. Prognosis End Result" := PrognosisLine."Prognosis End Result";

                             PrognosisDelta := Prognosis - PrognosisDelta;
                             PrognosisEndResultDelta := "Calc. Prognosis End Result" - PrognosisEndResultDelta;

                             UpdatePrognosisInfoInParents(Level - 1, PrognosisDelta, PrognosisTotalCostDelta, PrognosisEndResultDelta);
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1100529657;2;Field  ;
                CaptionML=ENU=Prognosis Total Hours;
                SourceExpr="Calc Hours Prognosis";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529658;2;Field  ;
                CaptionML=ENU=Prognosis End Result;
                SourceExpr="Calc. Prognosis End Result";
                Editable=ProjectPrognosisEditable;
                OnValidate=VAR
                             PrognosisLine@1100527403 : Record 11012035;
                             PrognosisDelta@1100527402 : Decimal;
                             PrognosisTotalCostDelta@1100527401 : Decimal;
                             PrognosisEndResultDelta@1100527400 : Decimal;
                           BEGIN
                             PrognosisEndResultDelta := "Calc. Prognosis End Result" - xRec."Calc. Prognosis End Result";
                             IF PrognosisLine.GET("Project No.", ProjectControlTreeMgt.GetEndingDate, "Cost Type", Element, "Cost Object") THEN BEGIN
                               PrognosisDelta := PrognosisLine.Amount;
                               PrognosisTotalCostDelta := PrognosisLine."Prognosis Total Cost";
                               PrognosisLine.VALIDATE("Prognosis End Result", "Calc. Prognosis End Result");
                               PrognosisLine.MODIFY(TRUE);
                             END ELSE BEGIN
                               PrognosisLine.VALIDATE("Project No.", "Project No.");
                               PrognosisLine.VALIDATE("Prognosis Date", ProjectControlTreeMgt.GetEndingDate);
                               PrognosisLine.VALIDATE("Cost Type", "Cost Type");
                               IF NOT HideElement THEN
                                 PrognosisLine.VALIDATE(Element, Element);
                               PrognosisLine.VALIDATE("Cost Object", "Cost Object");
                               PrognosisLine.INSERT(TRUE);
                             END;

                             Prognosis := PrognosisLine.Amount;
                             "Calc Progn Total Cost" := PrognosisLine."Prognosis Total Cost";

                             PrognosisDelta := Prognosis - PrognosisDelta;
                             PrognosisTotalCostDelta := "Calc Progn Total Cost" - PrognosisTotalCostDelta;

                             UpdatePrognosisInfoInParents(Level - 1, PrognosisDelta, PrognosisTotalCostDelta, PrognosisEndResultDelta);
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1100529659;2;Field  ;
                CaptionML=ENU=Prognosis End Result Hours;
                SourceExpr="Calc. Progn. End Result Hours";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529660;2;Field  ;
                Name=Prognosis Result;
                CaptionML=ENU=Prognosis Result;
                SourceExpr="Allowed Costs" - "Actual Costs" - Prognosis;
                Visible=FALSE;
                Editable=FALSE }

    { 1100529649;2;Field  ;
                SourceExpr="Actuals Period";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529650;2;Field  ;
                SourceExpr="Actual Hours Period";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529651;2;Field  ;
                Name=Allowed Period;
                CaptionML=ENU=Allowed Period;
                SourceExpr="Allowed Costs" - "Allowed Costs Previous Period";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529652;2;Field  ;
                Name=Allowed Hours Period;
                CaptionML=ENU=Allowed Hours Period;
                SourceExpr="Allowed Hours" - "Allowed Hours Previous Period";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529653;2;Field  ;
                Name=Result Period;
                CaptionML=ENU=Result Period;
                SourceExpr=Result - "Prev Result";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529654;2;Field  ;
                Name=Period Hour Result;
                CaptionML=ENU=Period Hour Result;
                SourceExpr="Hours Result" - "Prev Hours Result";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529655;2;Field  ;
                Name=Total Cost Period;
                CaptionML=ENU=Total Cost Period;
                SourceExpr="Total Cost" - "Prev Period Total Cost";
                Visible=FALSE;
                Editable=FALSE }

    { 1100528602;2;Field  ;
                SourceExpr="Cumulative Progress %";
                Editable=ProjectProgressVisible;
                HideValue=NOT ProjectProgressVisible;
                OnValidate=BEGIN
                             UpdateValuesAfterProductionChange(Level, "Cumulative Progress %" / 100);
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 1100528603;2;Field  ;
                SourceExpr="Budget Hours";
                Editable=FALSE;
                OnDrillDown=BEGIN
                              OpenBudgetLine;
                            END;
                             }

    { 1100527400;2;Field  ;
                SourceExpr=Budget }

  }
  CODE
  {
    VAR
      JobsSetup@1100529605 : Record 315;
      Project@1100529610 : Record 11072003;
      CostComponentVisible@1100529600 : Boolean;
      ElementVisible@1100529603 : Boolean;
      ExtensionContractVisible@1100529604 : Boolean;
      HideCostComponent@1100529601 : Boolean;
      HideCostType@1100529602 : Boolean;
      HideCostObject@1100529606 : Boolean;
      HideElement@1100529607 : Boolean;
      HideExtensionContract@1100529608 : Boolean;
      MainProjectView@1100529609 : Boolean;
      ProgressSliderReady@1100528600 : Boolean;
      ProjectProgressVisible@1100528601 : Boolean;
      ProjectPrognosisEditable@1100528602 : Boolean;
      ProjectControlTreeMgt@1100528603 : Codeunit 11020231;

    PROCEDURE SetProject@1100529602(VAR NewProject@1100529601 : Record 11072003);
    BEGIN
      Project.COPY(NewProject);
    END;

    LOCAL PROCEDURE SetVisibility@1100529600();
    BEGIN
      CostComponentVisible := FALSE;
      ElementVisible := FALSE;
      ExtensionContractVisible := FALSE;

      JobsSetup.GET;
      CASE JobsSetup."Project Control Level" OF
        JobsSetup."Project Control Level"::"Element/CostObject":
          ElementVisible := TRUE;
        JobsSetup."Project Control Level"::"CostComponent/CostObject":
          CostComponentVisible := TRUE;
        JobsSetup."Project Control Level"::"Element/CostComponent/CostObject":
          BEGIN
            ElementVisible := TRUE;
            CostComponentVisible := TRUE;
          END;
        JobsSetup."Project Control Level"::"ExtensionContract/CostObject":
          ExtensionContractVisible := TRUE;
        JobsSetup."Project Control Level"::"ExtensionContract/Element/CostObject":
          BEGIN
            ExtensionContractVisible := TRUE;
            ElementVisible := TRUE;
          END;
      END;
    END;

    LOCAL PROCEDURE HideValues@1100529601();
    BEGIN
      HideCostType := NOT CheckSourceTypeFilter("Key Type 1"::"Cost Type");
      HideCostObject := NOT CheckSourceTypeFilter("Key Type 1"::"Cost Object");

      IF CostComponentVisible THEN
        HideCostComponent := NOT CheckSourceTypeFilter("Key Type 1"::"Cost Component")
      ELSE
        HideCostComponent := TRUE;
      IF ElementVisible THEN
        HideElement := NOT CheckSourceTypeFilter("Key Type 1"::Element)
      ELSE
        HideElement := TRUE;
      IF ExtensionContractVisible THEN
        HideExtensionContract := NOT CheckSourceTypeFilter("Key Type 1"::"Extension Contract")
      ELSE
        HideExtensionContract := TRUE;

      ProjectProgressVisible := ProgressAvailableOnThisRow;

      ProjectPrognosisEditable :=
        (("Key Type 1" = "Key Type 1"::"Cost Object") AND ("Key Code 1" <> '')) OR
        (("Key Type 2" = "Key Type 2"::"Cost Object") AND ("Key Code 2" <> '')) OR
        (("Key Type 3" = "Key Type 3"::"Cost Object") AND ("Key Code 3" <> '')) OR
        (("Key Type 4" = "Key Type 4"::"Cost Object") AND ("Key Code 4" <> '')) OR
        (("Key Type 5" = "Key Type 5"::"Cost Object") AND ("Key Code 5" <> ''));
    END;

    LOCAL PROCEDURE PlaceCurrentValue@1100528600();
    VAR
      SliderConfig@1100528600 : DotNet "'Fps.Nav.Addin.UIComponents,Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.UIComponents.SliderConfig";
    BEGIN
      IF ProgressAvailableOnThisRow THEN BEGIN
        SliderConfig := SliderConfig.SliderConfig;
        SliderConfig.minValue := 0;
        SliderConfig.maxValue := 100;
        SliderConfig.value := "Cumulative Progress %";
        SliderConfig.steps := 1;
        SliderConfig.isEnabled := TRUE;

        CurrPage.Slider.PlaceSlider(SliderConfig);
      END ELSE
        CurrPage.Slider.RemoveComponents;
    END;

    LOCAL PROCEDURE OpenBudgetLine@1100528601();
    VAR
      BudgetLine@1100528601 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Project No.", "Project No.");
      IF NOT HideCostObject THEN
        BudgetLine.SETRANGE("Cost Object", "Cost Object");
      IF NOT HideCostType THEN
        BudgetLine.SETRANGE("Cost Type", "Cost Type");
      IF NOT HideElement THEN
        BudgetLine.SETRANGE(Element, Element);
      IF NOT HideExtensionContract THEN
        BudgetLine.SETRANGE("Extension Contract", "Extension Contract");
      BudgetLine.SETFILTER("Version Date", '..%1', ProjectControlTreeMgt.GetEndingDate);
      PAGE.RUN(0, BudgetLine);
    END;

    LOCAL PROCEDURE OpenJobLedgerEntries@1100528604();
    VAR
      JobLedgerEntry@1100528600 : Record 11072005;
    BEGIN
      JobLedgerEntry.SETRANGE("Job No.", "Project No.");
      IF NOT HideCostObject THEN
        JobLedgerEntry.SETRANGE("Global Dimension 2 Code", Rec."Cost Object");
      IF NOT HideCostType THEN
        JobLedgerEntry.SETRANGE("Cost Type", "Cost Type");
      IF NOT HideElement THEN
        JobLedgerEntry.SETRANGE(Element, Element);
      IF NOT HideExtensionContract THEN
        JobLedgerEntry.SETRANGE("Extension Contract", "Extension Contract");
      JobLedgerEntry.SETFILTER("Date Filter", '..%1', ProjectControlTreeMgt.GetEndingDate);
      PAGE.RUN(0, JobLedgerEntry);
    END;

    LOCAL PROCEDURE ProgressAvailableOnThisRow@1100528602() : Boolean;
    BEGIN
      EXIT(
        (("Key Code 1" = (FORMAT("Cost Type"::Labor, 0, 2))) AND ("Key Code 2" <> '')) OR
        (("Key Code 2" = (FORMAT("Cost Type"::Labor, 0, 2))) AND ("Key Code 3" <> '')));
    END;

    LOCAL PROCEDURE UpdatePrognosisSumInParents@1100528603(CurrentLevel@1100528601 : Integer;PrognosisDelta@1100528603 : Decimal);
    VAR
      ProjectControlTree2@1100528602 : Record 11229477;
    BEGIN
      IF CurrentLevel < 1 THEN
        EXIT;

      ProjectControlTree2.SETRANGE("Project No.", "Project No.");
      ProjectControlTree2.SETRANGE(Level, CurrentLevel);

      IF CurrentLevel > 1 THEN
        ProjectControlTree2.SETRANGE("Key Code 1", "Key Code 1");
      IF CurrentLevel > 2 THEN
        ProjectControlTree2.SETRANGE("Key Code 2", "Key Code 2");
      IF CurrentLevel > 3 THEN
        ProjectControlTree2.SETRANGE("Key Code 3", "Key Code 3");
      IF CurrentLevel > 4 THEN
        ProjectControlTree2.SETRANGE("Key Code 4", "Key Code 4");
      IF CurrentLevel > 5 THEN
        ProjectControlTree2.SETRANGE("Key Code 5", "Key Code 5");

      IF ProjectControlTree2.FINDFIRST THEN BEGIN
        ProjectControlTree2."Calc Progn Total Cost" += PrognosisDelta;
        ProjectControlTree2.MODIFY(TRUE);
      END;

      UpdatePrognosisSumInParents(CurrentLevel - 1, PrognosisDelta);
    END;

    LOCAL PROCEDURE UpdateValuesAfterProductionChange@1100527404(CurrentLevel@1100528601 : Integer;ProductionValue@1100528603 : Decimal);
    VAR
      ProjectControlTree2@1100528602 : Record 11229477;
      AllowedHoursDelta@1100527402 : Decimal;
      AllowedCostsDelta@1100527401 : Decimal;
      ResultDelta@1100527400 : Decimal;
      ResultHoursDelta@1100527403 : Decimal;
    BEGIN
      IF CurrentLevel < 1 THEN
        EXIT;

      ProjectControlTree2.SETRANGE("Project No.", "Project No.");
      ProjectControlTree2.SETRANGE(Level, CurrentLevel);

      IF CurrentLevel > 1 THEN
        ProjectControlTree2.SETRANGE("Key Code 1", "Key Code 1");
      IF CurrentLevel > 2 THEN
        ProjectControlTree2.SETRANGE("Key Code 2", "Key Code 2");
      IF CurrentLevel > 3 THEN
        ProjectControlTree2.SETRANGE("Key Code 3", "Key Code 3");
      IF CurrentLevel > 4 THEN
        ProjectControlTree2.SETRANGE("Key Code 4", "Key Code 4");
      IF CurrentLevel > 5 THEN
        ProjectControlTree2.SETRANGE("Key Code 5", "Key Code 5");

      IF ProjectControlTree2.FINDFIRST THEN BEGIN
        AllowedHoursDelta := ("Budget Hours" * ProductionValue) - ProjectControlTree2."Allowed Hours";
        AllowedCostsDelta := (Budget * ProductionValue) - ProjectControlTree2."Allowed Costs";
        ResultDelta := (ProjectControlTree2."Allowed Costs" - ProjectControlTree2."Total Cost") - ProjectControlTree2.Result;
        ResultHoursDelta := (ProjectControlTree2."Allowed Hours" - ProjectControlTree2."Total Hours") - ProjectControlTree2."Hours Result";
        "Allowed Hours" += AllowedHoursDelta;
        "Allowed Costs" += AllowedCostsDelta;
        Result += ResultDelta;
        "Hours Result" += ResultHoursDelta;
      END;

      UpdateSumValuesAfterProductionChange(CurrentLevel - 1, AllowedHoursDelta, AllowedCostsDelta, ResultDelta, ResultHoursDelta);
    END;

    LOCAL PROCEDURE UpdateSumValuesAfterProductionChange@1100527400(CurrentLevel@1100528601 : Integer;AllowedHoursDelta@1100528603 : Decimal;AllowedCostsDelta@1100527400 : Decimal;ResultDelta@1100527401 : Decimal;ResultHoursDelta@1100527402 : Decimal);
    VAR
      ProjectControlTree2@1100528602 : Record 11229477;
    BEGIN
      IF CurrentLevel < 1 THEN
        EXIT;

      ProjectControlTree2.SETRANGE("Project No.", "Project No.");
      ProjectControlTree2.SETRANGE(Level, CurrentLevel);

      IF CurrentLevel > 1 THEN
        ProjectControlTree2.SETRANGE("Key Code 1", "Key Code 1");
      IF CurrentLevel > 2 THEN
        ProjectControlTree2.SETRANGE("Key Code 2", "Key Code 2");
      IF CurrentLevel > 3 THEN
        ProjectControlTree2.SETRANGE("Key Code 3", "Key Code 3");
      IF CurrentLevel > 4 THEN
        ProjectControlTree2.SETRANGE("Key Code 4", "Key Code 4");
      IF CurrentLevel > 5 THEN
        ProjectControlTree2.SETRANGE("Key Code 5", "Key Code 5");

      IF ProjectControlTree2.FINDFIRST THEN BEGIN
        ProjectControlTree2."Allowed Hours" += AllowedHoursDelta;
        ProjectControlTree2."Allowed Costs" += AllowedCostsDelta;
        ProjectControlTree2.Result += ResultDelta;
        ProjectControlTree2."Hours Result" += ResultHoursDelta;
        ProjectControlTree2.MODIFY(TRUE);
      END;

      UpdateSumValuesAfterProductionChange(CurrentLevel - 1, AllowedHoursDelta, AllowedCostsDelta, ResultDelta, ResultHoursDelta);
    END;

    LOCAL PROCEDURE UpdatePrognosisInfoInParents@1100527412(CurrentLevel@1100528601 : Integer;PrognosisDelta@1100527402 : Decimal;PrognosisTotalCostDelta@1100527401 : Decimal;PrognosisEndResultDelta@1100527400 : Decimal);
    VAR
      ProjectControlTree2@1100528602 : Record 11229477;
    BEGIN
      IF CurrentLevel < 1 THEN
        EXIT;

      ProjectControlTree2.SETRANGE("Project No.", "Project No.");
      ProjectControlTree2.SETRANGE(Level, CurrentLevel);

      IF CurrentLevel > 1 THEN
        ProjectControlTree2.SETRANGE("Key Code 1", "Key Code 1");
      IF CurrentLevel > 2 THEN
        ProjectControlTree2.SETRANGE("Key Code 2", "Key Code 2");
      IF CurrentLevel > 3 THEN
        ProjectControlTree2.SETRANGE("Key Code 3", "Key Code 3");
      IF CurrentLevel > 4 THEN
        ProjectControlTree2.SETRANGE("Key Code 4", "Key Code 4");
      IF CurrentLevel > 5 THEN
        ProjectControlTree2.SETRANGE("Key Code 5", "Key Code 5");

      IF ProjectControlTree2.FINDFIRST THEN BEGIN
        ProjectControlTree2."Calc Progn Total Cost" += PrognosisTotalCostDelta;
        ProjectControlTree2.Prognosis += PrognosisDelta;
        ProjectControlTree2."Calc. Prognosis End Result" += PrognosisEndResultDelta;
        ProjectControlTree2.MODIFY(TRUE);
      END;

      UpdatePrognosisInfoInParents(CurrentLevel - 1, PrognosisDelta, PrognosisTotalCostDelta, PrognosisEndResultDelta);
    END;

    EVENT Slider@-1100528600::ControlAddInReady@2();
    BEGIN
      ProgressSliderReady := TRUE;
      PlaceCurrentValue;
    END;

    EVENT Slider@-1100528600::UpdateSliderValue@3(value@1100528600 : Decimal);
    VAR
      ProgressLine@1100528601 : Record 11012037;
      ProjectControlTreeMgt@1100528602 : Codeunit 11020231;
    BEGIN
      IF ProgressAvailableOnThisRow THEN BEGIN
        VALIDATE("Cumulative Progress %", value);
        MODIFY;
        ProgressLine.SETRANGE("Project No.", "Project No.");
        ProgressLine.SETRANGE("Cost Object", "Cost Object");
        ProgressLine.SETRANGE(Element, Element);
        ProgressLine.SETRANGE("Extension Contract", "Extension Contract");
        ProgressLine.SETRANGE("Progress Date", ProjectControlTreeMgt.GetEndingDate);
        IF ProgressLine.FINDFIRST THEN BEGIN
          ProgressLine.VALIDATE("Cumulative Progress %", "Cumulative Progress %");
          ProgressLine.MODIFY(TRUE);
        END ELSE BEGIN
          ProgressLine.VALIDATE("Project No.", "Project No.");
          ProgressLine.VALIDATE("Cost Object", "Cost Object");
          IF NOT HideElement THEN
            ProgressLine.VALIDATE(Element, Element);
          ProgressLine.VALIDATE("Extension Contract", "Extension Contract");
          ProgressLine.VALIDATE("Progress Date", ProjectControlTreeMgt.GetEndingDate);
          ProgressLine.VALIDATE("Cumulative Progress %", "Cumulative Progress %");
          ProgressLine.INSERT(TRUE);
        END;

        UpdateValuesAfterProductionChange(Level, "Cumulative Progress %" / 100);
        CurrPage.UPDATE(FALSE);
      END;
    END;

    BEGIN
    END.
  }
}

