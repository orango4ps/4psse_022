OBJECT XMLport 81655 Imp. Project principal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS7.00Toolsv9.MC;
  }
  PROPERTIES
  {
    DefaultFieldsValidation=No;
    OnInitXMLport=BEGIN
                    XMLNo := 81655;
                    MainTableID := 11012005;
                  END;

    OnPreXMLport=BEGIN
                   IF NOT currXMLport.IMPORTFILE THEN BEGIN
                     AddConversionFileFormatLine;
                     FillConversionXMLPortFields;
                     COMMIT;
                     ERROR('');
                   END;

                   ConvMgt.CheckComCde(CreateNewNosBln,MainTableID,CommentCde);
                   ConvMgt.CheckComCde(LookupCustNoBln,18,CustCommentCde);
                   ConvMgt.CheckComCde(LookupMainProjNoBln,11072003,MainProjCommentCde);

                   ConvMgt.DeleteConComment(XMLNo);
                   ConvMgt.CreateConComment(XMLNo,'Start');
                 END;

    OnPostXMLport=BEGIN
                    IF NOT RunIsImportRunBln THEN
                      currXMLport.BREAK;

                    ConvMgt.CreateConComment(XMLNo,'Stop');
                    ConvMgt.CreateConComment(XMLNo,ConvMgt.CreateNoOfLinesCommentTxt(MainTableID,ImpLineCounter));
                    ConvMgt.CreateConComment(XMLNo,STRSUBSTNO(ConvMgt.CreateNoOfLinesCommentTxt(11012005,PrincipalCounter)));
                  END;

    Format=Variable Text;
    FieldSeparator=[;];
  }
  ELEMENTS
  {
    { [{755F5B7F-F062-4834-8364-DC4CD51C5A62}];  ;Root                ;Element ;Text     }

    { [{A7DBD164-8D3E-4F8D-B3A0-89F91BC12205}];1 ;ProjectPrincipal    ;Element ;Table   ;
                                                  SourceTable=Table11012005;
                                                  SourceTableView=SORTING(Field10,Field20);
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              ClearFields;
                                                                            END;

                                                  Import::OnBeforeInsertRecord=VAR
                                                                                 ContactPerson@1100409000 : Record 5050;
                                                                               BEGIN
                                                                                 StripData;
                                                                                 ImpLineCounter := ImpLineCounter + 1;
                                                                                 CLEAR("Project Principal");
                                                                                 CustCde := ConvMgt.DetermineNewCode(LookupCustNoBln,CommentRec."Table Name"::Customer,CustCommentCde,B);
                                                                                 Job.GET(A);
                                                                                 WITH "Project Principal" DO BEGIN
                                                                                   VALIDATE("Project No.",Job."No.");
                                                                                   VALIDATE(Principal,CustCde);
                                                                                   INSERT(TRUE);

                                                                                   VALIDATE("Main Project No.",Job."Main Project");
                                                                                   IF Job."Settlement Method" = Job."Settlement Method"::"Fixed Price" THEN
                                                                                     VALIDATE("Contract Amount (LCY)",DDec)
                                                                                   ELSE
                                                                                     "Cost Plus Customer" := TRUE;
                                                                                   IF E <> '' THEN
                                                                                     VALIDATE("Principal Reference",E);
                                                                                   IF C <> '' THEN
                                                                                     VALIDATE("VAT Prod. Posting Group",C);
                                                                                   IF FDate <> 0D THEN
                                                                                     VALIDATE("Order Date",FDate);
                                                                                   IF G <> '' THEN
                                                                                     VALIDATE("Invoice Text Installments",G);
                                                                                   IF H <> '' THEN
                                                                                     VALIDATE("Invoice Text Cost Plus",H);
                                                                                   IF I <> '' THEN
                                                                                     VALIDATE("Alternative Bill-to Address",I);
                                                                                   IF J <> '' THEN
                                                                                     VALIDATE("Cost Object",J);
                                                                                   IF K <> '' THEN
                                                                                     VALIDATE("Order No. Customer",K);

                                                                                   MODIFY(TRUE);

                                                                                 END;

                                                                                 ClearFields;
                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{5C900A9C-2240-4551-8D3B-A67A2D629F53}];2 ;A                   ;Element ;Text     }

    { [{5E5EE9AF-296C-4B48-B3A4-71FD1D3BDBB8}];2 ;B                   ;Element ;Text     }

    { [{81EF86E1-A401-49BA-998E-C96326459340}];2 ;C                   ;Element ;Text     }

    { [{A4D141C2-7800-4941-8428-EBDFE695445E}];2 ;D                   ;Element ;Text    ;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF D <> '' THEN
                                                                                    EVALUATE(DDec,D);
                                                                                END;
                                                                                 }

    { [{7009774A-5D5B-4893-B574-E0BA7086A95E}];2 ;E                   ;Element ;Text     }

    { [{61A54020-5A22-4777-8499-A876D2E08C7F}];2 ;F                   ;Element ;Text    ;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF F<>'' THEN
                                                                                    EVALUATE(FDate,F)
                                                                                END;
                                                                                 }

    { [{C3892DEF-6174-4845-A9BD-FA81350F4D61}];2 ;G                   ;Element ;Text     }

    { [{3B150350-762E-4D06-90AD-0B0A47DC3FEC}];2 ;H                   ;Element ;Text     }

    { [{9843402E-AD67-43E3-83FF-EC975E55B3F2}];2 ;I                   ;Element ;Text     }

    { [{E7CE1720-702B-4D9A-AEFC-4D3968919ABC}];2 ;J                   ;Element ;Text     }

    { [{5AE9AE13-7450-478C-8D9E-AC817D7F71FF}];2 ;K                   ;Element ;Text     }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=[ENU=Lookup Main Project No. based on old Main Project No.;
                 SVE=Val av huvudprojekt baserat p† gammalt huvudprojektnr];
      OnOpenPage=BEGIN
                   RunIsImportRunBln := TRUE;
                   CreateNewNosBln := TRUE;
                   LookupCustNoBln := TRUE;
                   LookupMainProjNoBln := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1100409010;;Container;
                  Name=Imp. Job;
                  ContainerType=ContentArea }

      { 1100409009;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[ENU=Create new Project Nos.;
                             SVE=Skapa nya projektnr];
                  SourceExpr=CreateNewNosBln }

      { 1100525003;2;Field  ;
                  Name=ComCde;
                  CaptionML=[ENU=Comment Code for storing old Project No.;
                             SVE=Kommentarskod f”r lagring av gammalt projektnr];
                  SourceExpr=CommentCde;
                  TableRelation="Comment Code" }

      { 1100525004;2;Field  ;
                  CaptionML=[ENU=Lookup Customer No. based on old Customer No.;
                             SVE=Val av kundnr baserat p† gammalt kundnr];
                  SourceExpr=LookupCustNoBln }

      { 1100525000;2;Field  ;
                  Name=CustComCde;
                  CaptionML=[ENU=Comment Code for searching Customer No.;
                             SVE=Kommentarskod f”r s”kning efter kundnr];
                  SourceExpr=CustCommentCde;
                  TableRelation="Comment Code" }

      { 1100525005;2;Field  ;
                  CaptionML=[ENU=Lookup Main Project No. based on old Main Project No.;
                             SVE=Val av huvudprojekt baserat p† gammalt huvudprojektnr];
                  SourceExpr=LookupMainProjNoBln }

      { 1100525006;2;Field  ;
                  Name=MainProjComCde;
                  OptionCaptionML=[ENU=Comment Code for searching Main Project No.;
                                   SVE=Kommentarskod f”r s”kning efter huvudprojektnr];
                  SourceExpr=MainProjCommentCde;
                  TableRelation="Comment Code" }

    }
  }
  CODE
  {
    VAR
      "// GENERAL"@1100525054 : Integer;
      CommentRec@1100525053 : Record 97;
      ConvMgt@1100525016 : Codeunit 11020212;
      NoSerieMgt@1100525051 : Codeunit 396;
      XMLNo@1100525049 : Integer;
      MainTableID@1100525048 : Integer;
      CreateNewNosBln@1100525047 : Boolean;
      ImpLineCounter@1100525046 : Integer;
      CommentCde@1100525045 : Code[10];
      ConversionFileFormat@1100525044 : Record 11020691;
      RunIsImportRunBln@1100525043 : Boolean;
      "//"@1100525042 : Integer;
      "// THIS DATAPORT"@1100525041 : Integer;
      AddressRec@1100525039 : Record 222;
      UseOlpMainProjectNoBln@1100525038 : Boolean;
      CustCde@1100525036 : Code[20];
      LookupCustNoBln@1100525035 : Boolean;
      CustCommentCde@1100525034 : Code[10];
      LookupMainProjNoBln@1100525033 : Boolean;
      MainProjCommentCde@1100525032 : Code[10];
      PrincipalCounter@1100525031 : Integer;
      Text001@1100525010 : TextConst 'ENU="<empty>=Fixed Price, [1]=Cost Plus";SVE="<tom>=Fast pris, [1]=Sj„lvkostnad"';
      Text002@1100525009 : TextConst 'ENU="<empty>=Maincontracting, [1]=Subcontracting";SVE="<empty>=Huvudkontrakt, [1]=Underentreprenad"';
      DefaultDimension@1100285000 : Record 352;
      NoSeries@1000000000 : Record 308;
      Job@1100285001 : Record 11072003;
      DDec@1100285003 : Decimal;
      FDate@1100285004 : Date;

    PROCEDURE StripData@1100485000();
    BEGIN
      A := DELCHR(A,'<>',' ');
      B := DELCHR(B,'<>',' ');
      C := DELCHR(C,'<>',' ');
      D := DELCHR(D,'<>',' ');
      E := DELCHR(E,'<>',' ');
      F := DELCHR(F,'<>',' ');
      G := DELCHR(G,'<>',' ');
      H := DELCHR(H,'<>',' ');
      I := DELCHR(I,'<>',' ');
      J := DELCHR(J,'<>',' ');
      K := DELCHR(K,'<>',' ');
    END;

    PROCEDURE CommentEmplNotPresent@1100525001(FieldCaption@1100525000 : Text[50];EmplNo@1100525001 : Code[20]);
    BEGIN
      ConvMgt.CreateConComment(XMLNo,ConvMgt.CreateFieldNotFilledCommentTxt(
        5200,
        EmplNo,
        FieldCaption,
        MainTableID,
        Job."No."));
    END;

    PROCEDURE AddConversionFileFormatLine@1100529901();
    VAR
      ProjectPrincipal@1100529900 : Record 11012005;
      ContactFeatureType@1100285000 : Record 11012753;
    BEGIN
      // This function stores the file format into table [Conversion File Format].
      // There is no other standard documentation; so please maintain this function in case of customization.
      //
      // Parameters: 1: [Dataport No.],
      //             2: [csv-Column],
      //             3: [NAV Table ID],
      //             4: [NAV Field Name],
      //             5: [Data Type of dataport field],
      //             6: [extra Comment].
      //
      WITH ConversionFileFormat DO BEGIN
        ConversionFileFormat.DeleteColumnLines(XMLNo);
        InsertColumnLine(XMLNo,'A',11012005,ProjectPrincipal.FIELDNAME("Project No."),'Code20','');
        InsertColumnLine(XMLNo,'B',11012005,ProjectPrincipal.FIELDNAME(Principal),'Code20','');
        InsertColumnLine(XMLNo,'C',11012005,ProjectPrincipal.FIELDNAME("VAT Prod. Posting Group"),'Code10','');
        InsertColumnLine(XMLNo,'D',11012005,ProjectPrincipal.FIELDNAME("Contract Amount"),'Decimal','');
        InsertColumnLine(XMLNo,'E',11012005,ProjectPrincipal.FIELDNAME("Principal Reference"),'Text50','');
        InsertColumnLine(XMLNo,'F',11012005,ProjectPrincipal.FIELDNAME("Order Date"),'Date','');
        InsertColumnLine(XMLNo,'G',11012005,ProjectPrincipal.FIELDNAME("Invoice Text Installments"),'Text250','');
        InsertColumnLine(XMLNo,'H',11012005,ProjectPrincipal.FIELDNAME("Invoice Text Cost Plus"),'Text250','');
        InsertColumnLine(XMLNo,'I',11012005,ProjectPrincipal.FIELDNAME("Alternative Bill-to Address"),'Code10','');
        InsertColumnLine(XMLNo,'J',11012005,ProjectPrincipal.FIELDNAME("Cost Object"),'Code20','');
        InsertColumnLine(XMLNo,'K',11012005,ProjectPrincipal.FIELDNAME("Order No. Customer"),'Text50','');




      END;
    END;

    PROCEDURE ClearFields@1210190000();
    BEGIN
      CLEAR(Job);
      CLEAR(CustCde);
      CLEAR("Project Principal");
      A := '';
      B := '';
      C := '';
      D := '';
      E := '';
      F := '';
      G := '';
      H := '';
      I := '';
      J := '';
      K := '';
      DDec:=0;
      FDate:=0D;
    END;

    PROCEDURE FillConversionXMLPortFields@1100409004();
    VAR
      ConversionXMLPort@1100409000 : Record 11020640;
    BEGIN
      ConversionXMLPort.GET(XMLNo);
      ConversionXMLPort."Main Table ID" := MainTableID;
      ConversionXMLPort."Page ID" := 11072004;
      ConversionXMLPort.MODIFY;
    END;

    BEGIN
    {
      // Old No.'s are stored in Comment Table (97), marked with [CommentCde].
      // Object No is stored in [XMLNo]. In case of customisation (copy of dataport) change in OnInitDataport;
      //
      // Please use [AddConversionFileFormatLine] in case Import file format is changed.

      140415 ITERO.SB Validate result of function, not 'P' in field
      140616 ITERO.SB Changed call for GetEmployeeNo
      140624 ITERO.SB Add no series
    }
    END.
  }
}

