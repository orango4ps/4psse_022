OBJECT Codeunit 11012158 Post Import Data (FSA)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012273;
    OnRun=BEGIN
            gImportLineRec := Rec;
            gLogbookRec."Date/Time" := gImportLineRec."Date/Time";
            gLogbookRec."Message Type" := gImportLineRec."Message Type";

            IF PostImportDataLineFSA() THEN
              DELETE;
          END;

  }
  CODE
  {
    VAR
      gImportLineRec@1100485000 : Record 11012273;
      gLogbookRec@1100485003 : Record 11012271;
      ErrorRec@1100485004 : Record 11012272;
      ServOrderRec@1100485001 : Record 11012823;
      Text000@1100485002 : TextConst 'DEU=%1 ''%2'' nicht vorhanden;ENU=%1 ''%2'' not present;NLD=%1 ''%2'' niet aanwezig;NOR=%1 ''%2'' finnes ikke;SVE=%1 ''%2'' finns inte';
      FSASetupRec@1100485010 : Record 11012138;
      GLSetupRec@1100485009 : Record 98;
      Text002@1100485007 : TextConst 'DEU=%1 soll eingegeben sein;ENU=%1 must be filled;NLD=%1 moet gevuld zijn;NOR=%1 mÜ fylles ut;SVE=%1 mÜste fyllas';
      Text003@1100485008 : TextConst 'DEU=bei %1 ''%2'';ENU=for %1 ''%2'';NLD=bij %1 ''%2'';NOR=for %1 ''%2'';SVE=fîr %1 ''%2''';
      Text004@1100485006 : TextConst 'DEU=%1 ''%2'' stimmt nicht Åberein mit dem des Servicestandorts.;ENU=%1 ''%2'' isn''t equal to the one from Service Location;NLD=%1 ''%2'' is ongelijk aan die van de servicelocatie;NOR=%1 ''%2'' er ikke den samme som tilsvarende fra servicelokasjon;SVE=%1 ''%2'' Ñr inte lika med en frÜn serviceplats';
      Text005@1100485011 : TextConst 'DEU=Anzahl Stunden berechnet aus ''%1'' und ''%2'' darf nicht Null sein;ENU="Number of Hours calculated from ''%1'' and ''%2'' may not be zero ";NLD=Aantal uren berekend uit ''%1'' en ''%2'' mag niet nul zijn;NOR=Antall timer kalkulert fra ''%1'' og ''%2'' kan ikke vëre null;SVE="Antal timma berÑknade frÜn ''%1'' och ''%2 fÜr inte vara noll "';
      SignatureRec@1100525000 : Record 11020349;
      ServOrderExtensionRec@1100528900 : Record 11071727;

    LOCAL PROCEDURE PostImportDataLineFSA@1100485001() : Boolean;
    BEGIN
      FSASetupRec.GET('');
      WITH gImportLineRec DO BEGIN
        CASE "Line Type" OF
          "Line Type"::ServOrder:
            BEGIN
              IF NOT PostDebriefServiceOrder() THEN
                EXIT(FALSE);
            END;
          "Line Type"::Budget:
            EXIT(PostDebriefBudgetLine());
          "Line Type"::CostPlus:
            BEGIN
              EXIT(PostDebriefCostPlusLine());
            END;
          "Line Type"::AdviceOrder:
            BEGIN
              EXIT(PostDebriefAdviceOrderLine());
            END;
          "Line Type"::Status:
            BEGIN
              EXIT(PostRefPointStatus());
            END;
          "Line Type"::Text:
            BEGIN
              EXIT(PostDebriefTextLine());
            END;
          "Line Type"::ServHours,
          "Line Type"::IndirectHours:
            BEGIN
              EXIT(PostHourAccLine());
            END;
        END;
      END;

      EXIT(TRUE);  //* Onbekende regelsoort, dan mag regel altijd verwijderd worden.
                   //* Zal normaal gesproken niet voor kunnen komen.
    END;

    LOCAL PROCEDURE PostDebriefServiceOrder@1100485004() : Boolean;
    VAR
      lvServAnalRec@1100485001 : Record 11012842;
      lvDisciplineRec@1100485003 : Record 11020204;
      lvEmplRec@1100485008 : Record 5200;
      lvCustRec@1100485006 : Record 18;
      lvServLocRec@1100485007 : Record 11012801;
      lvServiceOrderIndicationRec@1100485009 : Record 11012837;
      lvError@1100485000 : Boolean;
      lvUpdate@1100485002 : Boolean;
      lvNewDecentralOrder@1100485004 : Boolean;
      lvOrderExist@1100485005 : Boolean;
      Stream@1100526000 : InStream;
    BEGIN
      WITH gImportLineRec DO BEGIN
        //* Check
        lvNewDecentralOrder := FALSE;
        lvOrderExist := ServOrderRec.GET("Service Order No.");
        //DP00106.sn
        IF NOT ServOrderExtensionRec.GET("Service Order No.") THEN
          ServOrderExtensionRec.INIT;
        //DP00106.en
        IF ("Service Order No." = '') OR (NOT lvOrderExist) THEN BEGIN
          IF "Decentral Created Order" AND ("Service Order No." <> '') AND (NOT lvOrderExist) THEN
            lvNewDecentralOrder := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Service Order No."),"Service Order No."),ErrorRec.Type::Error,"Line No.");
            EXIT(FALSE); //* Als order niet aanwezig dan rest niet meer testen
          END;
        END;
        IF (Problem <> '') AND (Problem <> ServOrderRec.Problem) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Problem,Problem) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION(Problem),Problem),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF lvNewDecentralOrder THEN BEGIN
          lvUpdate := TRUE;
          IF ("Employee No." = '') OR (NOT lvEmplRec.GET("Employee No.")) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Employee No."),"Employee No."),ErrorRec.Type::Error,"Line No.");
          END;
          IF ("Customer No." <> '') THEN BEGIN
            IF NOT lvCustRec.GET("Customer No.") THEN BEGIN
              lvError := TRUE;
              gLogbookRec.WriteExchangeError(
                STRSUBSTNO(Text000,FIELDCAPTION("Customer No."),"Customer No."),ErrorRec.Type::Error,"Line No.");
            END;
          END;
          IF ("Service Location No." <> '') THEN BEGIN
            IF NOT lvServLocRec.GET("Service Location No.") THEN BEGIN
              lvError := TRUE;
              gLogbookRec.WriteExchangeError(
                STRSUBSTNO(Text000,FIELDCAPTION("Service Location No."),"Service Location No."),ErrorRec.Type::Error,"Line No.");
            END ELSE BEGIN
              IF ("Customer No." <> '') AND (lvServLocRec."Customer No." <> "Customer No.") THEN BEGIN
                lvError := TRUE;
                gLogbookRec.WriteExchangeError(
                  STRSUBSTNO(Text004,FIELDCAPTION("Customer No."),"Customer No."),
                  ErrorRec.Type::Error,"Line No.");
              END;
            END;
          END;
          IF ("Order Kind" <> '') THEN BEGIN
            IF NOT lvServiceOrderIndicationRec.GET(lvServiceOrderIndicationRec.Indication::Kind,"Order Kind") THEN BEGIN
              lvError := TRUE;
              gLogbookRec.WriteExchangeError(
                STRSUBSTNO(Text000,FIELDCAPTION("Order Kind"),"Order Kind"),ErrorRec.Type::Error,"Line No.");
            END;
          END;
          IF ("Order Type" <> '') THEN BEGIN
            IF NOT lvServiceOrderIndicationRec.GET(lvServiceOrderIndicationRec.Indication::Type,"Order Type") THEN BEGIN
              lvError := TRUE;
              gLogbookRec.WriteExchangeError(
                STRSUBSTNO(Text000,FIELDCAPTION("Order Type"),"Order Type"),ErrorRec.Type::Error,"Line No.");
            END;
          END;
          IF (Date <> 0D) AND (Times = 0T) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(STRSUBSTNO(Text002,FIELDCAPTION(Times)),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF (Cause <> '') AND (Cause <> ServOrderRec.Cause) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Cause,Cause) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION(Cause),Cause),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF (Solution <> '') AND (Solution <> ServOrderRec.Solution) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Solution,Solution) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION(Solution),Solution),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF (Discipline <> '') AND (Discipline <> ServOrderRec.Discipline) THEN BEGIN
          IF lvDisciplineRec.GET(Discipline) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION(Discipline),Discipline),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Your Reference" <> '') AND ("Your Reference" <> ServOrderRec."Your Reference") THEN
          lvUpdate := TRUE;
        IF ("Order No. Customer" <> '') AND ("Order No. Customer" <> ServOrderRec."Order No. Customer") THEN
          lvUpdate := TRUE;
        CALCFIELDS(Signature);
        IF Signature.HASVALUE THEN
          lvUpdate := TRUE;

        IF lvError THEN
          EXIT(FALSE);
        IF NOT lvUpdate THEN
          EXIT(TRUE);

        //* Post
        IF NOT lvNewDecentralOrder THEN
          ServOrderRec.GET("Service Order No.")
        ELSE BEGIN
          ServOrderRec.INIT;
          ServOrderRec.Origin := ServOrderRec.Origin::"4PS Field Service App";
          ServOrderRec."No." := "Service Order No.";
          ServOrderRec."Source Type" := ServOrderRec."Source Type"::Call;  //* 29-04-08 JH(Kuijpers): Call ipv Other
          ServOrderRec.SetUseFilledOrderDateTime(TRUE);
          IF (Date <> 0D) THEN BEGIN
            ServOrderRec."Order Date" := Date;
            ServOrderRec."Order Time" := Times;
          END;
          ServOrderRec.INSERT(TRUE);

          ServOrderRec.SetUseFilledOrderDateTime(FALSE);
          ServOrderRec."Date/Time Export to FSA" := CURRENTDATETIME;  //* Behandel deze order verder als aanwezig in BDA
          ServOrderRec."Decentral Created" := TRUE;
          ServOrderRec."Starting Date" := ServOrderRec."Order Date";
          ServOrderRec."Starting Time" := ServOrderRec."Order Time";
          //Wanneer FSA (FieldVision) ooit nog eens wordt overgezet naar NAV2013 dan omzetten naar Resource
          ServOrderRec.VALIDATE("Employee No.","Employee No.");
          IF ("Customer No." <> '') THEN
            ServOrderRec.VALIDATE("Customer No.","Customer No.");
          IF ("Service Location No." <> '') THEN
            ServOrderRec.VALIDATE("Service Location No.","Service Location No.");
          IF (Name <> '') THEN
            ServOrderRec.Name := Name;
          IF (Address <> '') THEN
            ServOrderRec.Address := Address;
          IF ("Post Code" <> '') THEN
            ServOrderRec."Post Code" := "Post Code";
          IF (City <> '') THEN
            ServOrderRec.City := City;
          IF ("Phone No." <> '') THEN
            ServOrderRec."Phone No." := "Phone No.";
          IF ("E-Mail" <> '') THEN
            ServOrderRec."E-Mail" := "E-Mail";
          IF ("Contact Name" <> '') THEN
            ServOrderRec."Contact Name" := "Contact Name";
          IF ("Order Kind" <> '') THEN
            ServOrderRec.VALIDATE("Order Kind","Order Kind");
          IF ("Order Type" <> '') THEN
            ServOrderRec.VALIDATE("Order Type","Order Type");
          IF (Description <> '') AND (Description <> ServOrderRec.Description) THEN
            ServOrderRec.VALIDATE(Description,Description);
        END;
        IF (Problem <> '') AND (Problem <> ServOrderRec.Problem) THEN
          ServOrderRec.VALIDATE(Problem,Problem);
        IF (Cause <> '') AND (Cause <> ServOrderRec.Cause) THEN
          ServOrderRec.VALIDATE(Cause,Cause);
        IF (Solution <> '') AND (Solution <> ServOrderRec.Solution) THEN
          ServOrderRec.VALIDATE(Solution,Solution);
        IF (Discipline <> '') AND (Discipline <> ServOrderRec.Discipline) THEN
          ServOrderRec.VALIDATE(Discipline,Discipline);
        IF ("Your Reference" <> '') AND ("Your Reference" <> ServOrderRec."Your Reference") THEN
          ServOrderRec.VALIDATE("Your Reference","Your Reference");
        IF ("Order No. Customer" <> '') AND ("Order No. Customer" <> ServOrderRec."Order No. Customer") THEN
          ServOrderRec.VALIDATE("Order No. Customer","Order No. Customer");

        ServOrderRec.MODIFY(TRUE);

        IF Signature.HASVALUE THEN BEGIN  //db, 21-05-10
          IF NOT SignatureRec.GET(ServOrderRec."No.") THEN BEGIN
            SignatureRec.INIT;
            SignatureRec."Service Order No." := ServOrderRec."No.";
            SignatureRec.INSERT;
          END;
          Signature.CREATEINSTREAM(Stream);
          SignatureRec.Signature.IMPORTSTREAM(Stream, '');
          SignatureRec.MODIFY;
        END;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefBudgetLine@1100485009() : Boolean;
    VAR
      lvBudgetRec@1100485004 : Record 11012875;
      lvDisciplineRec@1100485003 : Record 11020204;
      lvTradeSpecRec@1100485001 : Record 11020285;
      lvTradeExpRec@1100485005 : Record 11020286;
      lvError@1100485000 : Boolean;
      lvUpdate@1100485002 : Boolean;
      lvExist@1100485006 : Boolean;
    BEGIN
      WITH gImportLineRec DO BEGIN
        //* Check
        lvBudgetRec.SETRANGE("Budget Type", lvBudgetRec."Budget Type"::Order);
        lvBudgetRec.SETRANGE("Service Order No.", "Service Order No.");
        //lvBudgetRec.SETRANGE("Object No.", "Object No."); //TODO -> MG-JD
        lvBudgetRec.SETRANGE("Line No.", "Service Order Line No.");
        IF lvBudgetRec.FINDFIRST THEN
          lvExist := TRUE;  //db, 17-12-07  (get vervangen door find)
        IF ("Service Order No." = '') OR (lvExist = FALSE) THEN BEGIN  //db, 17-12-07
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text000,lvBudgetRec.TABLECAPTION,"Service Order No."+'-'+
            FORMAT("Service Order Line No.")),ErrorRec.Type::Error,"Line No.");
          EXIT(FALSE); //* Als budgetregel niet aanwezig dan rest niet meer testen
        END;
        IF (Discipline <> '') AND (Discipline <> lvBudgetRec.Discipline) THEN BEGIN
          IF lvDisciplineRec.GET(Discipline) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION(Discipline),Discipline),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Trade Speciality" <> '') AND ("Trade Speciality" <> lvBudgetRec."Trade Speciality") THEN BEGIN
          IF lvTradeSpecRec.GET(Discipline, "Trade Speciality") THEN  //db, 05-06-09
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Trade Speciality"),"Trade Speciality"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Trade Expertise" <> '') AND ("Trade Expertise" <> lvBudgetRec."Trade Expertise") THEN BEGIN
          IF lvTradeExpRec.GET("Trade Expertise") THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Trade Expertise"),"Trade Expertise"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Object No." <> '') AND ("Object No." <> lvBudgetRec."Object No.") THEN
          lvUpdate := TRUE;
        IF ("Object Customer" <> '') AND ("Object Customer" <> lvBudgetRec."Object Customer") THEN
          lvUpdate := TRUE;
        IF (Building <> '') AND (Building <> lvBudgetRec.Building) THEN
          lvUpdate := TRUE;
        IF (Floor <> '') AND (Floor <> lvBudgetRec.Floor) THEN
          lvUpdate := TRUE;
        IF (Room <> '') AND (Room <> lvBudgetRec.Room) THEN
          lvUpdate := TRUE;
        IF (Finished <> lvBudgetRec.Finished) THEN
          lvUpdate := TRUE;
        IF ("Follow-up Job" <> lvBudgetRec."Follow-up Job") THEN
          lvUpdate := TRUE;

        IF lvError THEN
          EXIT(FALSE);
        IF NOT lvUpdate THEN
          EXIT(TRUE);

        //* Post
        //29-02-08 GET kan niet meer, zie hierboven 'db, 17-12-07', is vervangen door FIND.
        //         Zou hier dan ook moeten, maar is helemaal niet nodig om hier nog een keer te lezen.
        //lvBudgetRec.GET("Service Order No.", "Service Order Line No.");
        IF (Discipline <> '') AND (Discipline <> lvBudgetRec.Discipline) THEN
          lvBudgetRec.VALIDATE(Discipline, Discipline);
        IF ("Trade Speciality" <> '') AND ("Trade Speciality" <> lvBudgetRec."Trade Speciality") THEN
          lvBudgetRec.VALIDATE("Trade Speciality", "Trade Speciality");
        IF ("Trade Expertise" <> '') AND ("Trade Expertise" <> lvBudgetRec."Trade Expertise") THEN
          lvBudgetRec.VALIDATE("Trade Expertise", "Trade Expertise");
        IF ("Object No." <> '') AND ("Object No." <> lvBudgetRec."Object No.") THEN
          lvBudgetRec.VALIDATE("Object No.", "Object No.");
        IF ("Object Customer" <> '') AND ("Object Customer" <> lvBudgetRec."Object Customer") THEN
          lvBudgetRec.VALIDATE("Object Customer", "Object Customer");
        IF (Building <> '') AND (Building <> lvBudgetRec.Building) THEN
          lvBudgetRec.VALIDATE(Building, Building);
        IF (Floor <> '') AND (Floor <> lvBudgetRec.Floor) THEN
          lvBudgetRec.VALIDATE(Floor, Floor);
        IF (Room <> '') AND (Room <> lvBudgetRec.Room) THEN
          lvBudgetRec.VALIDATE(Room, Room);
        IF (Finished <> lvBudgetRec.Finished) THEN
          lvBudgetRec.VALIDATE(Finished, Finished);
        IF ("Follow-up Job" <> lvBudgetRec."Follow-up Job") THEN
          lvBudgetRec.VALIDATE("Follow-up Job", "Follow-up Job");
        lvBudgetRec.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefCostPlusLine@1100485000() : Boolean;
    VAR
      lvCostPlusRec@1100485004 : Record 11012825;
      lvEmplRec@1100485001 : Record 5200;
      lvItemRec@1100485005 : Record 27;
      lvItemVendorRec@1100485002 : Record 11012304;
      lvBasicItemRec@1100485007 : Record 11012316;
      lvTradeItemRec@1100485008 : Record 11012317;
      lvDimValRec@1100485009 : Record 349;
      lvCostCompRec@1100485010 : Record 11012012;
      lvWageCompRec@1100485011 : Record 11012014;
      lvUnitRec@1100485012 : Record 204;
      lvError@1100485000 : Boolean;
      lvNextLineNo@1100485006 : Integer;
    BEGIN
      WITH gImportLineRec DO BEGIN
        GLSetupRec.GET;

        //* Check
        IF ("Service Order No." = '') OR (NOT ServOrderRec.GET("Service Order No.")) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text000,FIELDCAPTION("Service Order No."),"Service Order No."),ErrorRec.Type::Error,"Line No.");
          EXIT(FALSE); //* Als order niet aanwezig dan rest niet meer testen
        END;

        IF (Date = 0D) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text002,FIELDCAPTION(Date)),ErrorRec.Type::Error,"Line No.");
        END;
        IF ("Cost Object" <> '') THEN BEGIN
          IF NOT lvDimValRec.GET(GLSetupRec."Shortcut Dimension 2 Code","Cost Object") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Cost Object"),"Cost Object"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Employee No." <> '') THEN BEGIN
          IF NOT lvEmplRec.GET("Employee No.") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Employee No."),"Employee No."),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT lvItemRec.GET("Item No.") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Item No."),"Item No."),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF (Manufacturer <> '') THEN BEGIN
          IF NOT lvItemVendorRec.GET(Manufacturer) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION(Manufacturer),Manufacturer),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Basic Item" <> '') THEN BEGIN
          IF NOT lvBasicItemRec.GET(Manufacturer,"Basic Item") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Basic Item"),"Basic Item") + ' ' +
              STRSUBSTNO(Text003,FIELDCAPTION(Manufacturer),Manufacturer),
              ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT lvItemVendorRec.GET("Vendor (Trade Item)") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Vendor (Trade Item)"),"Vendor (Trade Item)"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT lvTradeItemRec.GET("Vendor (Trade Item)","Trade Item") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Trade Item"),"Trade Item") + ' ' +
              STRSUBSTNO(Text003,FIELDCAPTION("Vendor (Trade Item)"),"Vendor (Trade Item)"),
              ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Cost Component" <> '') THEN BEGIN
          IF NOT lvCostCompRec.GET("Cost Component") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Cost Component"),"Cost Component"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Wage Component" <> '') THEN BEGIN
          IF NOT lvWageCompRec.GET("Wage Component") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Wage Component"),"Wage Component"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT lvUnitRec.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Unit of Measure"),"Unit of Measure"),ErrorRec.Type::Error,"Line No.");
          END;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvCostPlusRec.RESET;
        lvCostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
        IF lvCostPlusRec.FINDLAST THEN
          lvNextLineNo := lvCostPlusRec."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        lvCostPlusRec.RESET;
        lvCostPlusRec.INIT;
        lvCostPlusRec.VALIDATE("Service Order No.", "Service Order No.");
        lvCostPlusRec."Line No." := lvNextLineNo;
        lvCostPlusRec."FSA-Created Entry" := TRUE; //mg, 19-09-11: M27981
        lvCostPlusRec.INSERT(TRUE);

        IF ("Object No." <> '') THEN
          lvCostPlusRec.VALIDATE("Object No.", "Object No.");
        IF ("Object Customer" <> '') THEN
          lvCostPlusRec.VALIDATE("Object Customer", "Object Customer");
        IF (Date <> 0D) THEN
          lvCostPlusRec.VALIDATE("Posting Date", Date);
        IF ("Item No." <> '') THEN
          lvCostPlusRec.VALIDATE("Item No.", "Item No.");
        IF (Manufacturer <> '') THEN
          lvCostPlusRec.VALIDATE(Manufacturer, Manufacturer);
        IF ("Basic Item" <> '') THEN
          lvCostPlusRec.VALIDATE("Basic Item", "Basic Item");
        IF ("Vendor (Trade Item)" <> '') THEN
          lvCostPlusRec.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
        IF ("Trade Item" <> '') THEN
          lvCostPlusRec.VALIDATE("Trade Item", "Trade Item");
        IF ("Cost Object" <> '') THEN
          lvCostPlusRec.VALIDATE("Cost Object", "Cost Object");
        IF ("Employee No." <> '') THEN
          lvCostPlusRec.VALIDATE("Employee No.", "Employee No.");
        {* 27-02-2008 Kostencomponent pas als laatste vullen, ivm met aanpassingen vullen veld op tabel niveau
        IF ("Cost Component" <> '') THEN
          lvCostPlusRec.VALIDATE("Cost Component", "Cost Component");
        }
        IF ("Wage Component" <> '') THEN
          lvCostPlusRec.VALIDATE("Wage Component", "Wage Component");
        IF ("Unit of Measure" <> '') THEN
          lvCostPlusRec.VALIDATE("Unit of Measure", "Unit of Measure");
        IF (Quantity <> 0) THEN
          lvCostPlusRec.VALIDATE(Quantity, ROUND(Quantity,0.00001));
        IF ("Unit Cost" <> 0) THEN
          lvCostPlusRec.VALIDATE("Basic Price (LCY)", ROUND("Unit Cost",0.00001));
        lvCostPlusRec.VALIDATE("Additional Cost", "Additional Cost");
        IF ("From Date" <> 0D) THEN
          lvCostPlusRec.VALIDATE("From Date", "From Date");
        IF ("From Time" <> 0T) THEN
          lvCostPlusRec.VALIDATE("From Time", "From Time");
        IF ("To Date" <> 0D) THEN
          lvCostPlusRec.VALIDATE("To Date", "To Date");
        IF ("To Time" <> 0T) THEN
          lvCostPlusRec.VALIDATE("To Time", "To Time");
        IF (Description <> '') THEN
          lvCostPlusRec.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          lvCostPlusRec.VALIDATE("Description 2", "Description 2");
        //* 27-02-2008 Kostencomponent pas als laatste vullen, ivm met aanpassingen vullen veld op tabel niveau
        IF ("Cost Component" <> '') THEN BEGIN
          lvCostPlusRec.VALIDATE("Cost Component", "Cost Component");  //* Wordt daar dan nu bijna altijd overruled
          IF lvCostPlusRec."Cost Component" <> "Cost Component" THEN   //* Dan toch die vanuit BDA nemen
            lvCostPlusRec."Cost Component" := "Cost Component";
        END;
        lvCostPlusRec.MODIFY(TRUE);
        WriteHistory();
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefAdviceOrderLine@1100485007() : Boolean;
    VAR
      lvAdvOrderRec@1100485004 : Record 11012055;
      lvItemRec@1100485005 : Record 27;
      lvItemVendorRec@1100485002 : Record 11012304;
      lvBasicItemRec@1100485007 : Record 11012316;
      lvTradeItemRec@1100485008 : Record 11012317;
      lvUnitRec@1100485012 : Record 204;
      lvError@1100485000 : Boolean;
      lvNextLineNo@1100485006 : Integer;
    BEGIN
      WITH gImportLineRec DO BEGIN
        //* Check
        IF ("Service Order No." = '') OR (NOT ServOrderRec.GET("Service Order No.")) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text000,FIELDCAPTION("Service Order No."),"Service Order No."),ErrorRec.Type::Error,"Line No.");
          EXIT(FALSE); //* Als order niet aanwezig dan rest niet meer testen
        END;

        IF ("Item No." <> '') THEN BEGIN
          IF NOT lvItemRec.GET("Item No.") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Item No."),"Item No."),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF (Manufacturer <> '') THEN BEGIN
          IF NOT lvItemVendorRec.GET(Manufacturer) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION(Manufacturer),Manufacturer),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Basic Item" <> '') THEN BEGIN
          IF NOT lvBasicItemRec.GET(Manufacturer,"Basic Item") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Basic Item"),"Basic Item") + ' ' +
              STRSUBSTNO(Text003,FIELDCAPTION(Manufacturer),Manufacturer),
              ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT lvItemVendorRec.GET("Vendor (Trade Item)") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Vendor (Trade Item)"),"Vendor (Trade Item)"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT lvTradeItemRec.GET("Vendor (Trade Item)","Trade Item") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Trade Item"),"Trade Item") + ' ' +
              STRSUBSTNO(Text003,FIELDCAPTION("Vendor (Trade Item)"),"Vendor (Trade Item)"),
              ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF (Quantity = 0) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text002,FIELDCAPTION(Quantity)),ErrorRec.Type::Error,"Line No.");
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT lvUnitRec.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Unit of Measure"),"Unit of Measure"),ErrorRec.Type::Error,"Line No.");
          END;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvAdvOrderRec.RESET;
        lvAdvOrderRec.SETRANGE("Record Type", lvAdvOrderRec."Record Type"::ServOrder);
        lvAdvOrderRec.SETRANGE("Project No.", '');
        lvAdvOrderRec.SETRANGE("Service Order No.", "Service Order No.");
        IF lvAdvOrderRec.FINDLAST THEN
          lvNextLineNo := lvAdvOrderRec."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        lvAdvOrderRec.RESET;
        lvAdvOrderRec.INIT;
        lvAdvOrderRec."Record Type" := lvAdvOrderRec."Record Type"::ServOrder;
        lvAdvOrderRec."Project No." := '';
        lvAdvOrderRec.VALIDATE("Service Order No.", "Service Order No.");
        lvAdvOrderRec."Line No." := lvNextLineNo;
        lvAdvOrderRec.INSERT(TRUE);

        IF ("Item No." <> '') THEN
          lvAdvOrderRec.VALIDATE("Item No.", "Item No.");
        IF (Manufacturer <> '') THEN
          lvAdvOrderRec.VALIDATE(Manufacturer, Manufacturer);
        IF ("Basic Item" <> '') THEN
          lvAdvOrderRec.VALIDATE("Basic Item", "Basic Item");
        IF ("Vendor (Trade Item)" <> '') THEN
          lvAdvOrderRec.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
        IF ("Trade Item" <> '') THEN
          lvAdvOrderRec.VALIDATE("Trade Item", "Trade Item");
        IF (Description <> '') THEN
          lvAdvOrderRec.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          lvAdvOrderRec.VALIDATE("Description 2", "Description 2");
        IF ("Unit of Measure" <> '') THEN
          lvAdvOrderRec.VALIDATE("Unit of Measure", "Unit of Measure");
        IF (Quantity <> 0) THEN
          lvAdvOrderRec.VALIDATE("Quantity (Advice)", ROUND(Quantity,0.00001));
        lvAdvOrderRec.MODIFY(TRUE);
        WriteHistory();
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostRefPointStatus@1100485002() : Boolean;
    VAR
      lvEmplRec@1100485001 : Record 5200;
      lvRefPointRec@1100485005 : Record 11020271;
      lvRefPeriodRec@1100485004 : Record 11020272;
      lvServOrderRec@1100485003 : Record 11012823;
      lvProgPhaseRec@1100485008 : Record 11020251;
      lvError@1100485000 : Boolean;
      lvUpdate@1100485002 : Boolean;
      ActRefPoint@1100525000 : Integer;
    BEGIN
      WITH gImportLineRec DO BEGIN
        //* Check
        IF ("Status Field Service" = '') THEN
          EXIT(TRUE);  //* Geen actie nodig, record mag verwijderd worden
        lvRefPointRec.SETRANGE(Apply,lvRefPointRec.Apply::ServOrder);
        lvRefPointRec.SETRANGE("Triggered by Field Service","Status Field Service");
        IF NOT lvRefPointRec.FINDFIRST THEN
          EXIT(TRUE);  //* Geen actie nodig, record mag verwijderd worden

        lvUpdate := TRUE;

        IF ("Service Order No." = '') OR (NOT ServOrderRec.GET("Service Order No.")) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text000,FIELDCAPTION("Service Order No."),"Service Order No."),ErrorRec.Type::Error,"Line No.");
          EXIT(FALSE); //* Als order niet aanwezig dan rest niet meer testen
        END;
        IF (Date = 0D) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text002,FIELDCAPTION(Date)),ErrorRec.Type::Error,"Line No.");
        END ELSE BEGIN
          IF (Times = 0T) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text002,FIELDCAPTION(Times)),ErrorRec.Type::Error,"Line No.");
          END;
       END;

        {
        IF ("Employee No." <> '') THEN BEGIN
          IF NOT lvEmplRec.GET("Employee No.") THEN    //* Modified by is toch alleen werknemer die logmoment gewijzigd heeft,
            "Employee No." := '';                      //* dus niet op blokkeren als het een onbekende is (ook niet als leeg).
        END;
        }

        IF lvError THEN
          EXIT(FALSE);
        IF NOT lvUpdate THEN
          EXIT(TRUE);

        //* Post
        lvRefPointRec.RESET;
        lvRefPointRec.SETRANGE(Apply,lvRefPointRec.Apply::ServOrder);
        lvRefPointRec.SETRANGE("Triggered by Field Service","Status Field Service");
        IF lvRefPointRec.FINDFIRST THEN BEGIN  //* Een BDA-trigger mag maar 1 keer voorkomen (kwestie van inrichten),
                                               //* daarom alleen eerste lezen.
          PostDocRefPoint(lvRefPointRec."No.",ActRefPoint);

          CLEAR(lvServOrderRec);
          lvServOrderRec.GET("Service Order No.");
          IF (lvRefPointRec."Triggered by Status ServOrder" > 0) AND
             (lvServOrderRec.Status <= lvServOrderRec.Status::"Technical Finished")
          THEN BEGIN
            lvServOrderRec.VALIDATE(Status,lvRefPointRec."Triggered by Status ServOrder" - 1);
            lvServOrderRec.SetSkipUpdateDocRefPoint(TRUE);
            lvServOrderRec.MODIFY(TRUE);
            lvProgPhaseRec.CheckProgressScheme(
              lvProgPhaseRec.Type::ServOrder,lvServOrderRec."Progress Scheme",
              lvServOrderRec."No.",lvServOrderRec.Status,Date,Times);
            lvServOrderRec.SetSkipUpdateDocRefPoint(FALSE);
          END ELSE BEGIN
            lvRefPeriodRec.SETCURRENTKEY(Type,"Document No.");
            lvRefPeriodRec.SETRANGE(Type, lvRefPeriodRec.Type::ServOrder);
            lvRefPeriodRec.SETRANGE("Document No.","Service Order No.");

            lvRefPeriodRec.SETRANGE("Reference Point Start",lvRefPointRec."No.");
            lvRefPeriodRec.SETRANGE("Starting Date",0D);  //* Only update if empty
            IF lvRefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
              REPEAT
                lvRefPeriodRec.VALIDATE("Starting Date",Date);
                lvRefPeriodRec.VALIDATE("Starting Time",Times);
                lvRefPeriodRec.MODIFY(TRUE);
              UNTIL lvRefPeriodRec.NEXT = 0;
            END;
            lvRefPeriodRec.SETRANGE("Reference Point Start"); //* Reset filter
            lvRefPeriodRec.SETRANGE("Starting Date");         //* Idem

            lvRefPeriodRec.SETRANGE("Reference Point End",lvRefPointRec."No.");
            lvRefPeriodRec.SETRANGE("Ending Date",0D);  //* Only update if empty
            IF lvRefPeriodRec.FINDSET(TRUE,FALSE) THEN
              REPEAT
                lvRefPeriodRec.VALIDATE("Ending Date",Date);
                lvRefPeriodRec.VALIDATE("Ending Time",Times);
                lvRefPeriodRec.MODIFY(TRUE);
              UNTIL lvRefPeriodRec.NEXT = 0;

            IF lvRefPointRec."No." <> 0 THEN BEGIN
              lvRefPeriodRec.SETRANGE("Reference Point End");
              lvRefPeriodRec.SETRANGE("Second Reference Point End",lvRefPointRec."No.");
              lvRefPeriodRec.SETRANGE("Ending Date",0D);  //* Only update if empty
              IF lvRefPeriodRec.FINDSET(TRUE,FALSE) THEN
                REPEAT
                  lvRefPeriodRec.VALIDATE("Ending Date",Date);
                  lvRefPeriodRec.VALIDATE("Ending Time",Times);
                  lvRefPeriodRec.MODIFY(TRUE);
                UNTIL lvRefPeriodRec.NEXT = 0;
            END;

          END;
        END;
        //C004169.sn
        IF ActRefPoint > 0 THEN
          lvServOrderRec."Actual Reference Point (Gantt)" := ActRefPoint;
        lvServOrderRec.MODIFY(FALSE);
        //C004169.sn
        EXIT(TRUE);
      END;
    END;

    PROCEDURE PostDocRefPoint@1100485006(IRefPointNo@1100485004 : Integer;VAR ActRefPoint@1100525000 : Integer);
    VAR
      lvDocRefPointRec@1100485000 : Record 11020296;
      lvDateTime@1100528900 : DateTime;
    BEGIN
      //* Vanuit de BDA wordt de tijd in secondes teruggegeven (dus geen msec). Meestal is dit geen probleem, maar nu
      //* zijn er toch enkele situaties waarin dit kan voorkomen. Bv. De status 58 'Getekend voor akkoord' en status
      //* 60 'Technisch gereed' staan in 1 bericht met beide dezelfde tijd.
      //* Daarom wordt bij de tweede en volgende nu msec toegevoegd. Dus meestal zal er maar 1 logmoment in een seconde
      //* zijn, soms 2, nog meer zal heel uitzonderlijk zijn.

      //db, 27-08-12: W014185 (Date+Time: decimal->datetime); first index changed (during conversion).

      WITH gImportLineRec DO BEGIN
        lvDateTime := CREATEDATETIME(Date, Times);
        lvDocRefPointRec.SETRANGE(Type, lvDocRefPointRec.Type::ServOrder);
        lvDocRefPointRec.SETRANGE("Document No.", "Service Order No.");
        lvDocRefPointRec.SETRANGE("Date-Time (registrated)", lvDateTime);
        IF lvDocRefPointRec.FINDFIRST THEN BEGIN
          lvDocRefPointRec.SETRANGE("Date-Time (registrated)", lvDateTime, lvDateTime + 999);
          lvDocRefPointRec.SETRANGE("Reference Point", IRefPointNo);
          IF lvDocRefPointRec.FINDLAST THEN
            EXIT;  //* Logmoment is al aanwezig op deze tijd (in deze seconde), dus niet nog een keer toevoegen

          lvDocRefPointRec.RESET;
          REPEAT
            lvDateTime := lvDateTime + 1;
          UNTIL NOT lvDocRefPointRec.GET(lvDocRefPointRec.Type::ServOrder, "Service Order No.", lvDateTime);
        END;

        lvDocRefPointRec.RESET;
        lvDocRefPointRec.INIT;
        lvDocRefPointRec.Type := lvDocRefPointRec.Type::ServOrder;
        lvDocRefPointRec."Document No." := "Service Order No.";
        lvDocRefPointRec."Date-Time (registrated)" := lvDateTime;
        lvDocRefPointRec."Reference Point" := IRefPointNo;
        lvDocRefPointRec.INSERT(TRUE);
        ActRefPoint := lvDocRefPointRec.GetNewActRefPoint;  //C004169.n

        IF (gImportLineRec."Employee No." <> '') THEN BEGIN
          lvDocRefPointRec."Modified by Employee" := "Employee No.";  //* Niet vullen mbv 'Validate'!
          lvDocRefPointRec.MODIFY(FALSE);                             //* Kan evt. onbekende zijn, zie opm in bovenstaande functie
        END;
      END;
    END;

    LOCAL PROCEDURE PostDebriefTextLine@1100485003() : Boolean;
    VAR
      lvDebriefTextRec@1100485004 : Record 11012886;
      lvRubricRec@1100485002 : Record 11012885;
      lvEmplRec@1100485001 : Record 5200;
      lvError@1100485000 : Boolean;
      lvNextLineNo@1100485006 : Integer;
    BEGIN
      //* Hier nooit blokkeren (behalve als onbekende SO), dan maar veld leeg maken. Dus
      //* bij 'Check' geen melding maar veld leeg maken of maar gewoon onbekende accepteren
      //* (rubric en empl. maar gewoon zoals ze zijn). Bij 'Post' geen validate en bij het
      //* wegschrijven met 'FALSE'. Bij deze tekstregels is dit geen probleem.
      //* Geimporteerde tekst kan namelijk gesplits zijn in meerdere tekstregels, het moet
      //* niet zo zijn dat eerste regel niet wordt geboekt en andere wel (anders komen ze
      //* niet in de juiste volgorde).

      WITH gImportLineRec DO BEGIN
        GLSetupRec.GET;

        //* Check
        IF ("Service Order No." = '') OR (NOT ServOrderRec.GET("Service Order No.")) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text000,FIELDCAPTION("Service Order No."),"Service Order No."),ErrorRec.Type::Error,"Line No.");
          EXIT(FALSE); //* Als order niet aanwezig dan rest niet meer testen
        END;

        { Toch maar onbekende accepteren, dus niet meer leeg maken
        IF ("Text Rubric" <> '') THEN BEGIN
          IF NOT lvRubricRec.GET("Text Rubric") THEN   //* Als onbekend dan kan men deze later altijd nog toevoegen
           "Text Rubric" := ''
        END;
        IF ("Employee No." <> '') THEN BEGIN
          IF NOT lvEmplRec.GET("Employee No.") THEN    //* Modified by is toch alleen werknemer die tekst ingegeven heeft
            "Employee No." := '';
        END;
        }

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvDebriefTextRec.RESET;
        lvDebriefTextRec.SETRANGE(Type, lvDebriefTextRec.Type::ServiceOrder);
        lvDebriefTextRec.SETRANGE("No.", "Service Order No.");
        IF lvDebriefTextRec.FINDLAST THEN
          lvNextLineNo := lvDebriefTextRec."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        lvDebriefTextRec.RESET;
        lvDebriefTextRec.INIT;
        lvDebriefTextRec.Type := lvDebriefTextRec.Type::ServiceOrder;
        lvDebriefTextRec.VALIDATE("No.", "Service Order No.");
        lvDebriefTextRec."Line No." := lvNextLineNo;
        IF (Date <> 0D) THEN
          lvDebriefTextRec.Date := Date;
        IF ("Text Rubric" <> '') THEN
          lvDebriefTextRec.Rubric := "Text Rubric";
        lvDebriefTextRec.Comment := Comment;

        lvDebriefTextRec.FillModifiedBy();
        //IF ("Employee No." <> '') THEN
        //  lvDebriefTextRec."Modified by Employee" := "Employee No.";
        //"Modified by Employee" is nu een resource als FSA (Tensing) ooit actief wordt in NAV2013 dan aanpassen (empl->resource)
        lvDebriefTextRec.INSERT(FALSE);  //* FALSE!

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostHourAccLine@1100485005() : Boolean;
    VAR
      lvHourAccRec@1100485012 : Record 11012038;
      lvHourAccLineRec@1100485004 : Record 11012039;
      lvEmplRec@1100485001 : Record 5200;
      lvCostCodeRec@1100485005 : Record 11012083;
      lvDimValRec@1100485009 : Record 349;
      lvCostCompRec@1100485010 : Record 11012012;
      lvWageCompRec@1100485011 : Record 11012014;
      lvError@1100485000 : Boolean;
      lvUseTimeQuan@1100485015 : Boolean;
      lvNextLineNo@1100485006 : Integer;
      lvYear@1100485003 : Integer;
      lvWeek@1100485008 : Integer;
      lvLineQuantity@1100485013 : Decimal;
      lvTimeQuantity@1100485014 : Decimal;
      lvDuration@1100485002 : Duration;
    BEGIN
      WITH gImportLineRec DO BEGIN
        GLSetupRec.GET;

        //* Check
        IF ("Employee No." = '') OR (NOT lvEmplRec.GET("Employee No.")) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text000,FIELDCAPTION("Employee No."),"Employee No."),ErrorRec.Type::Error,"Line No.");
        END;
        IF (Date = 0D) THEN BEGIN
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text002,FIELDCAPTION(Date)),ErrorRec.Type::Error,"Line No.");
        END;
        IF ("Line Type" = "Line Type"::IndirectHours) THEN BEGIN
          IF ("Cost Code" = '') OR (NOT lvCostCodeRec.GET("Cost Code")) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Cost Code"),"Cost Code"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Line Type" = "Line Type"::ServHours) THEN BEGIN
          IF ("Service Order No." = '') OR (NOT ServOrderRec.GET("Service Order No.")) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Service Order No."),"Service Order No."),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Cost Object" <> '') THEN BEGIN
          IF NOT lvDimValRec.GET(GLSetupRec."Shortcut Dimension 2 Code","Cost Object") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Cost Object"),"Cost Object"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Cost Component" <> '') THEN BEGIN
          IF NOT lvCostCompRec.GET("Cost Component") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Cost Component"),"Cost Component"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF ("Wage Component" <> '') THEN BEGIN
          IF NOT lvWageCompRec.GET("Wage Component") THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text000,FIELDCAPTION("Wage Component"),"Wage Component"),ErrorRec.Type::Error,"Line No.");
          END;
        END;
        IF (("From Time" <> 0T) OR ("To Time" <> 0T)) AND
           (NOT (("Wage Component" <> '') AND (lvWageCompRec."Component Type" = lvWageCompRec."Component Type"::Expenses)))
        THEN BEGIN
          //* Uitgangspunt is dat men deze velden alleen mag/zal gebruiken bij uren en dus niet bij vergoedingen.
          //* Als 1 van de 2 tijden gevuld, dan testen of ze beide gevuld zijn, dan aantal uren berekenen (dit
          //* overruled het geimporteerde aantal.
          IF ("From Time" = 0T) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(STRSUBSTNO(Text002,FIELDCAPTION("From Time")),ErrorRec.Type::Error,"Line No.");
          END;
          IF ("To Time" = 0T) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(STRSUBSTNO(Text002,FIELDCAPTION("To Time")),ErrorRec.Type::Error,"Line No.");
          END;
          lvDuration := "To Time" - "From Time";  //* Berekening zoals in tabel 'Urenverantwoordingsregel' (T11012039)
          IF "To Time" < "From Time" THEN
            lvDuration := (24 * 3600000) + lvDuration;  //* lvDuration is dan negatief
          lvUseTimeQuan := TRUE;
          lvTimeQuantity := lvDuration / 3600000;  //* Duration in msec, dus delen door 1000 * 60 * 60
          { //* 04-08-2007: Nu ook aantal uren is nul toegestaan
          IF (lvTimeQuantity = 0) THEN BEGIN
            lvError := TRUE;
            gLogbookRec.WriteExchangeError(
              STRSUBSTNO(Text005,FIELDCAPTION("From Time"),FIELDCAPTION("To Time")),ErrorRec.Type::Error,"Line No.");
          END;
          }
        END;
        { //* 04-08-2007: Eerst 0 helemaal niet toegestaan, toen alleen bij vergoedingen. Nu ook ook bij uren (moet van JH).
          //* Opmerking van Jules: Als men dit niet wil moet men er in de BDA maar voor zorgen dat dit niet opgestuurd wordt.
        IF (Quantity = 0) AND (NOT lvUseTimeQuan) AND
           ("Wage Component" <> '') AND (lvWageCompRec."Component Type" <> lvWageCompRec."Component Type"::Expenses)
        THEN BEGIN
          //* Bij vergoedingen is aantal is nul toegestaan (moet van JH nav melding 9393), dit kan hier alleen
          //* getest worden als de looncomponent al bekend is (wordt nu bij boeken nog een keer getest).
          lvError := TRUE;
          gLogbookRec.WriteExchangeError(
            STRSUBSTNO(Text002,FIELDCAPTION(Quantity)),ErrorRec.Type::Error,"Line No.");
        END;
        }

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvYear := DATE2DWY(Date, 3);
        lvWeek := DATE2DWY(Date, 2);
        IF NOT lvHourAccRec.GET(lvYear, lvWeek, "Employee No.") THEN BEGIN
          lvHourAccRec.INIT;
          lvHourAccRec.SetSuppressMessages(TRUE);
          lvHourAccRec.VALIDATE(Year, lvYear);
          lvHourAccRec.VALIDATE(Week, lvWeek);
          lvHourAccRec.VALIDATE("Employee No.", "Employee No.");
          lvHourAccRec.INSERT(TRUE);
        END;

        lvHourAccLineRec.RESET;
        lvHourAccLineRec.SETRANGE(Year, lvYear);
        lvHourAccLineRec.SETRANGE(Week, lvWeek);
        lvHourAccLineRec.SETRANGE("Employee No.", "Employee No.");
        IF lvHourAccLineRec.FINDLAST THEN
          lvNextLineNo := lvHourAccLineRec."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        lvHourAccLineRec.RESET;
        lvHourAccLineRec.INIT;
        lvHourAccLineRec.VALIDATE(Year, lvYear);
        lvHourAccLineRec.VALIDATE(Week, lvWeek);
        lvHourAccLineRec.VALIDATE("Employee No.", "Employee No.");
        lvHourAccLineRec."Line No." := lvNextLineNo;
        IF ("Line Type" = "Line Type"::IndirectHours) THEN BEGIN
          lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Indirect);
          lvHourAccLineRec.VALIDATE("Cost Code", "Cost Code");
        END;
        IF ("Line Type" = "Line Type"::ServHours) THEN BEGIN
          lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Service);
          IF ("Service Order No." <> '') THEN
            lvHourAccLineRec.VALIDATE("Service Order No.", "Service Order No."); //* Hier wordt ook de serv.locatie gevuld
          lvHourAccLineRec.VALIDATE("Additional Cost (Service)", "Additional Cost");
        END;
        IF ("Cost Object" <> '') THEN
          lvHourAccLineRec.VALIDATE("Cost Object", "Cost Object");
        IF ("Cost Component" <> '') THEN
          lvHourAccLineRec.VALIDATE("Cost Component", "Cost Component");
        IF ("Wage Component" <> '') THEN
          lvHourAccLineRec.VALIDATE("Wage Component", "Wage Component");

        //*gjk.sn  14-12-2006  Tijdelijke oplossing, moet later weer weg.
        //         Dit is Imtech specifiek. Tensing zal er voor zorgen dat de looncomponent van de
        //         kostencode teruggegeven wordt, vanwege tijdsdruk lukt dit nu even niet.
        //         JH bespreekt dit verder met Tensing.
        //         NB: Tag voor looncomponent v/d kostencode is al toegevoegd in de referentiele data.
        //
        IF (FSASetupRec."Field Service Administration" = FSASetupRec."Field Service Administration"::FieldVision) AND
           ("Line Type" = "Line Type"::IndirectHours)
        THEN BEGIN
          lvCostCodeRec.GET("Cost Code");
          IF (lvCostCodeRec.Component <> '') THEN
            lvHourAccLineRec.VALIDATE("Wage Component", lvCostCodeRec.Component);
        END;
        //*gjk.en

        lvHourAccLineRec.CALCFIELDS("Component Type");

        lvLineQuantity := Quantity;
        IF (lvHourAccLineRec."Component Type" <> lvHourAccLineRec."Component Type"::Expenses) THEN BEGIN
          IF lvUseTimeQuan THEN
            lvLineQuantity := lvTimeQuantity;  //* Pas hier vullen/overrulen

          { //* 04-08-2007: Nu ook aantal uren is nul toegestaan
          ELSE
            TESTFIELD(Quantity);  //* Kan tijdens boeken niet meer met 'gLogbookRec.WriteExchangeError'
          }
        END;
        lvLineQuantity := ROUND(lvLineQuantity,0.001);
        IF (lvHourAccLineRec."Component Type" = lvHourAccLineRec."Component Type"::Expenses) THEN BEGIN
          lvHourAccLineRec."Unit Cost (LCY)" := 0;     //* Afdwingen dat het tarief voor vergoedingen wordt bepaald. Dit
          lvHourAccLineRec.CalcRateAndAmount();  //* gebeurde niet altijd voor vergoedingen (zie testen deze functie).
          lvHourAccLineRec.VALIDATE(Quantity, lvLineQuantity);
        END ELSE BEGIN
          CASE DATE2DWY(Date, 1) OF
            1: lvHourAccLineRec.VALIDATE(Monday, lvLineQuantity);
            2: lvHourAccLineRec.VALIDATE(Tuesday, lvLineQuantity);
            3: lvHourAccLineRec.VALIDATE(Wednesday, lvLineQuantity);
            4: lvHourAccLineRec.VALIDATE(Thursday, lvLineQuantity);
            5: lvHourAccLineRec.VALIDATE(Friday, lvLineQuantity);
            6: lvHourAccLineRec.VALIDATE(Saturday, lvLineQuantity);
            7: lvHourAccLineRec.VALIDATE(Sunday, lvLineQuantity);
          END;
        END;
        IF (Comment <> '') THEN
          lvHourAccLineRec.VALIDATE(Comment, COPYSTR(Comment,1,MAXSTRLEN(lvHourAccLineRec.Comment)));
        lvHourAccLineRec."Posting Date" := Date;
        lvHourAccLineRec.INSERT(TRUE);

        IF (FSASetupRec."Reason Code Hours FSA" <> '') THEN BEGIN
          lvHourAccLineRec."Reason Code" := FSASetupRec."Reason Code Hours FSA";
          lvHourAccLineRec.MODIFY(TRUE);
        END;

        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckPermissionRefPoint@1100485010();
    BEGIN
      //db, 03-09-07
      //lege functie die permissie controleert van gebruiker om logmoment te herschrijven (tabel 11020296)
    END;

    PROCEDURE WriteHistory@1100525001();
    VAR
      lvHistLineRec@1100525000 : Record 11012275;
      lvHistLineRec2@1100525001 : Record 11012275;
    BEGIN
      WITH gImportLineRec DO BEGIN
        IF (NOT FSASetupRec."History Logbook Entries") THEN
          EXIT;
        IF NOT ("Line Type" IN  ["Line Type"::CostPlus, "Line Type"::AdviceOrder]) THEN
          EXIT;

        lvHistLineRec.INIT;
        lvHistLineRec."Line Type" := "Line Type";
        lvHistLineRec."Service Order No." := "Service Order No.";
        lvHistLineRec."Employee No." := "Employee No.";
        lvHistLineRec."Item No." := "Item No.";
        lvHistLineRec.Manufacturer := Manufacturer;
        lvHistLineRec."Basic Item" := "Basic Item";
        lvHistLineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        lvHistLineRec."Trade Item" := "Trade Item";
        lvHistLineRec."Cost Object" := "Cost Object";
        lvHistLineRec.Description := Description;
        lvHistLineRec."Description 2" := "Description 2";
        lvHistLineRec.Quantity := Quantity;
        lvHistLineRec."Unit of Measure" := "Unit of Measure";
        lvHistLineRec."Unit Cost" := "Unit Cost";
        lvHistLineRec."Additional Cost" := "Additional Cost";
        lvHistLineRec."Cost Component" := "Cost Component";
        lvHistLineRec."Wage Component" := "Wage Component";
        lvHistLineRec."Object No." := "Object No.";
        lvHistLineRec."Object Customer" := "Object Customer";
        lvHistLineRec.Date := Date;
        lvHistLineRec."From Date" := "From Date";
        lvHistLineRec."From Time" := "From Time";
        lvHistLineRec."To Date" := "To Date";
        lvHistLineRec."To Time" := "To Time";
        lvHistLineRec."Date/Time Received" := "Date/Time";
        lvHistLineRec."Date/Time Posted" := CURRENTDATETIME;

        lvHistLineRec2.SETRANGE("Line Type", lvHistLineRec."Line Type");
        lvHistLineRec2.SETRANGE("Service Order No.", lvHistLineRec."Service Order No.");
        IF lvHistLineRec2.FINDLAST THEN
          lvHistLineRec."Line No." := lvHistLineRec2."Line No." + 1
        ELSE
          lvHistLineRec."Line No." := 1;
        lvHistLineRec.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

