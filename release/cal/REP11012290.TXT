OBJECT Report 11012290 Generate Vendor Assessment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Generate Vendor Assessment;
               NOR=Generer leverand›rvurdering;
               SVE=Generera leverant”rsbed”mning];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CheckSelections;

                  TmpProjVendRec.RESET;
                  TmpProjVendRec.DELETEALL;
                END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               SETRANGE("No.", ProjectNo);
                             END;

               OnAfterGetRecord=BEGIN
                                  PurLineRec.RESET;
                                  PurLineRec.SETCURRENTKEY("Document Type", "Job No.");

                                  CASE AssessmentBasedOn OF
                                    AssessmentBasedOn::Quote:
                                      PurLineRec.SETRANGE("Document Type", PurLineRec."Document Type"::Quote);
                                    AssessmentBasedOn::Order:
                                      PurLineRec.SETRANGE("Document Type", PurLineRec."Document Type"::Order);
                                    AssessmentBasedOn::Both:
                                      PurLineRec.SETFILTER("Document Type",'%1|%2',PurLineRec."Document Type"::Quote, PurLineRec."Document Type"::Order);
                                  END;

                                  PurLineRec.SETRANGE("Job No.", "No.");
                                  IF SubcontractingOnly THEN                                                      // Call C021757.n
                                  PurLineRec.SETRANGE("Cost Type", PurLineRec."Cost Type"::Subcontracting);       // Call C021757.n
                                  PurLineRec.SETFILTER("Buy-from Vendor No.", '<>%1', '');
                                  IF PurLineRec.FINDSET THEN BEGIN
                                    TmpProjVendRec.RESET;
                                    REPEAT
                                      IF NOT TmpProjVendRec.GET(PurLineRec."Job No.", PurLineRec."Buy-from Vendor No.") THEN BEGIN
                                        TmpProjVendRec."Project No." := PurLineRec."Job No.";
                                        TmpProjVendRec.Principal := PurLineRec."Buy-from Vendor No.";
                                        VendAssCritRec.SETRANGE("Vendor No.", TmpProjVendRec.Principal);
                                        IF VendAssCritRec.FIND('-') THEN
                                          TmpProjVendRec."Generate Installments" := TRUE
                                        ELSE
                                          TmpProjVendRec."Generate Installments" := FALSE;
                                        // Call C021757.sn
                                        TmpProjVendRec."Cost Plus Customer" := FALSE;
                                        TmpProjVendRec."Contract Amount (LCY)" := 0;
                                        // Call C021757.en
                                        TmpProjVendRec.INSERT;
                                        // Call C021757.sn
                                        IF NOT TmpVendRec.GET(PurLineRec."Buy-from Vendor No.") THEN BEGIN
                                          TmpVendRec."No." := PurLineRec."Buy-from Vendor No.";
                                          TmpVendRec.INSERT;
                                        END;
                                        // Call C021757.en
                                      END;
                                      // Call C021757.sn
                                      IF (PurLineRec.Type <> PurLineRec.Type::" ") AND (PurLineRec."Cost Type" = PurLineRec."Cost Type"::Subcontracting) THEN
                                        TmpProjVendRec."Cost Plus Customer" := TRUE;
                                      TmpProjVendRec."Contract Amount (LCY)" := TmpProjVendRec."Contract Amount (LCY)" + PurLineRec."Amount (LCY)";
                                      TmpProjVendRec.MODIFY;
                                      // Call C021757.en
                                    UNTIL PurLineRec.NEXT = 0;
                                  END;
                                END;

               OnPostDataItem=VAR
                                TotalAmount@1100525000 : Decimal;
                              BEGIN
                                // Call C021757.sn
                                IF SubcontractingOnly OR (MinimumAmount > 0) THEN BEGIN

                                  TmpVendRec.RESET;

                                  IF TmpVendRec.FINDSET THEN BEGIN
                                    REPEAT

                                      IF SubcontractingOnly THEN BEGIN
                                        TmpProjVendRec.RESET;
                                        TmpProjVendRec.SETCURRENTKEY(Principal,"Project No.");
                                        TmpProjVendRec.SETRANGE("Cost Plus Customer", TRUE);
                                        TmpProjVendRec.SETRANGE(Principal, TmpVendRec."No.");
                                        IF TmpProjVendRec.ISEMPTY THEN BEGIN
                                          TmpProjVendRec.SETRANGE("Cost Plus Customer");
                                          TmpProjVendRec.DELETEALL;
                                        END;
                                      END;

                                      IF MinimumAmount > 0 THEN BEGIN
                                        TotalAmount := 0;
                                        TmpProjVendRec.RESET;
                                        TmpProjVendRec.SETCURRENTKEY(Principal,"Project No.");
                                        TmpProjVendRec.SETRANGE(Principal, TmpVendRec."No.");
                                        IF TmpProjVendRec.FINDSET THEN BEGIN
                                          REPEAT
                                            TotalAmount := TotalAmount + TmpProjVendRec."Contract Amount (LCY)";
                                          UNTIL TmpProjVendRec.NEXT = 0;
                                          IF TotalAmount < MinimumAmount THEN
                                            TmpProjVendRec.DELETEALL;
                                        END;
                                      END;

                                    UNTIL TmpVendRec.NEXT = 0;
                                  END;
                                END;
                                // Call C021757.en
                              END;
                               }

    { 2089;    ;DataItem;                    ;
               DataItemTable=Table11012291;
               DataItemTableView=SORTING(Department,Criterion);
               OnPreDataItem=VAR
                               CreateVendAss@1100527550 : Boolean;
                             BEGIN
                               TmpProjVendRec.RESET;
                               IF TmpProjVendRec.FIND('-') THEN BEGIN
                                 REPEAT
                                   CreateVendAss := FALSE;
                                   IF NewProjectVendorsOnly THEN BEGIN
                                     VendAssRec.SETRANGE("Project No.", TmpProjVendRec."Project No.");
                                     VendAssRec.SETRANGE("Vendor No.", TmpProjVendRec.Principal);
                                     IF NOT VendAssRec.FINDFIRST THEN
                                       CreateVendAss := TRUE;
                                   END ELSE
                                     IF NOT VendAssRec.GET(TmpProjVendRec."Project No.", AssDate, TmpProjVendRec.Principal) THEN
                                       CreateVendAss := TRUE;
                                   IF CreateVendAss THEN BEGIN
                                     VendAssRec."Project No." := TmpProjVendRec."Project No.";
                                     VendAssRec.Date := AssDate;
                                     VendAssRec."Vendor No." := TmpProjVendRec.Principal;
                                     VendAssRec.INSERT;
                                   END ELSE
                                     TmpProjVendRec.DELETE;
                                 UNTIL TmpProjVendRec.NEXT = 0;
                               END;

                               IF NOT TmpProjVendRec.FIND('-') THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  lvInsertCrit@1210190000 : Boolean;
                                BEGIN
                                  IF TmpProjVendRec.FIND('-') THEN BEGIN
                                    REPEAT
                                      lvInsertCrit := TRUE;
                                      IF (NOT Mandatory) AND TmpProjVendRec."Generate Installments" THEN BEGIN  //* Criterion by Vendor present
                                        IF NOT VendAssCritRec.GET(TmpProjVendRec.Principal, Department, Criterion) THEN
                                          lvInsertCrit := FALSE;
                                      END;
                                      IF lvInsertCrit THEN BEGIN
                                        VendAssLineRec.INIT;
                                        VendAssLineRec."Project No." := TmpProjVendRec."Project No.";
                                        VendAssLineRec.Date := AssDate;
                                        VendAssLineRec."Vendor No." := TmpProjVendRec.Principal;
                                        VendAssLineRec.Department := Department;
                                        VendAssLineRec.Criterion := Criterion;
                                        VendAssLineRec."Weight Factor" := "Weight Factor";
                                        VendAssLineRec.Score := 0;
                                        VendAssLineRec.Motivation := '';
                                        VendAssLineRec.INSERT;
                                      END;
                                    UNTIL TmpProjVendRec.NEXT = 0;
                                  END;
                                END;

               ReqFilterFields=Department,Criterion }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               AssessmentBasedOn := AssessmentBasedOn::Both;
             END;

      OnOpenPage=BEGIN
                   AssDate := 0D;
                 END;

      OnQueryClosePage=BEGIN
                         IF CloseAction = ACTION::OK THEN
                           CheckSelections;
                       END;

    }
    CONTROLS
    {
      { 1100409001;0;Container;
                  ContainerType=ContentArea }

      { 1100409000;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100525002;2;Field  ;
                  CaptionML=[ENU=Project No.;
                             NOR=Prosjektnr;
                             SVE=Projektnr];
                  NotBlank=Yes;
                  SourceExpr=ProjectNo;
                  TableRelation=Job }

      { 1100409002;2;Field  ;
                  CaptionML=[ENU=Assessment Date;
                             NOR=Vurderingsdato;
                             SVE=Bed”mningsdatum];
                  NotBlank=Yes;
                  SourceExpr=AssDate }

      { 1100409003;2;Field  ;
                  CaptionML=[ENU=Assessment based on;
                             NOR=Vurdering basert p†;
                             SVE=Bed”mning baserad p†];
                  OptionCaptionML=[ENU=Quote,Order,Both;
                                   NOR=Tilbud,Ordre,Begge;
                                   SVE=Offert,Order,B†da];
                  SourceExpr=AssessmentBasedOn }

      { 1100525000;2;Field  ;
                  CaptionML=[ENU=Subcontracting;
                             NOR=Underentrepen›r;
                             SVE=UE];
                  SourceExpr=SubcontractingOnly }

      { 1100525001;2;Field  ;
                  CaptionML=[ENU=Minimum Amount;
                             NOR=Minimumsbel›p;
                             SVE=Minimibelopp];
                  SourceExpr=MinimumAmount }

      { 1100527550;2;Field  ;
                  CaptionML=ENU=New project vendors only;
                  SourceExpr=NewProjectVendorsOnly }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PurLineRec@1210190002 : Record 39;
      VendAssRec@1210190005 : Record 11012292;
      VendAssLineRec@1210190006 : Record 11012293;
      VendAssCritRec@1210190007 : Record 11012296;
      TmpProjVendRec@1210190003 : TEMPORARY Record 11012005;
      AssDate@1210190000 : Date;
      Text000@1210190001 : TextConst 'ENU=%1 must be filled;NOR=%1 m† fylles ut;SVE=%1 m†ste fyllas';
      Text001@1210190004 : TextConst 'ENU=Assessment Date;NOR=Vurderingsdato;SVE=Bed”mningsdatum';
      AssessmentBasedOn@1210190008 : 'Quote,Order,Both';
      SubcontractingOnly@1100525000 : Boolean;
      MinimumAmount@1100525001 : Decimal;
      ProjectNo@1100525003 : Code[20];
      TmpVendRec@1100525002 : TEMPORARY Record 23;
      NewProjectVendorsOnly@1100527550 : Boolean;

    PROCEDURE SetDefaultProjectNo@1100525000(ProjNo@1100525000 : Code[20]);
    BEGIN
      ProjectNo := ProjNo;
    END;

    LOCAL PROCEDURE CheckSelections@1100525004();
    BEGIN
      IF ProjectNo = '' THEN
        ERROR(Text000, VendAssLineRec.FIELDCAPTION("Project No."));
      Job.GET(ProjectNo);
      IF (AssDate = 0D) THEN
        ERROR(Text000, Text001);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

