OBJECT Codeunit 49 GlobalTriggerManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExtFieldPropRead@1100525001 : Boolean;
      ExtFieldPropPresent@1100525000 : Boolean;

    [EventSubscriber(Codeunit,2000000002,GetGlobalTableTriggerMask)]
    LOCAL PROCEDURE GetGlobalTableTriggerMask@1(TableID@1000 : Integer;VAR TableTriggerMask@1001 : Integer);
    BEGIN
      OnAfterGetGlobalTableTriggerMask(TableID,TableTriggerMask);
    END;

    [EventSubscriber(Codeunit,2000000002,OnGlobalInsert)]
    LOCAL PROCEDURE OnGlobalInsert@2(RecRef@1000 : RecordRef);
    BEGIN
      OnAfterOnGlobalInsert(RecRef);
    END;

    [EventSubscriber(Codeunit,2000000002,OnGlobalModify)]
    LOCAL PROCEDURE OnGlobalModify@3(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    BEGIN
      OnAfterOnGlobalModify(RecRef,xRecRef);
    END;

    [EventSubscriber(Codeunit,2000000002,OnGlobalDelete)]
    LOCAL PROCEDURE OnGlobalDelete@4(RecRef@1000 : RecordRef);
    BEGIN
      OnAfterOnGlobalDelete(RecRef);
    END;

    [EventSubscriber(Codeunit,2000000002,OnGlobalRename)]
    LOCAL PROCEDURE OnGlobalRename@5(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    BEGIN
      OnAfterOnGlobalRename(RecRef,xRecRef);
    END;

    [EventSubscriber(Codeunit,2000000002,GetDatabaseTableTriggerSetup)]
    LOCAL PROCEDURE GetDatabaseTableTriggerSetup@6(TableId@1000 : Integer;VAR OnDatabaseInsert@1001 : Boolean;VAR OnDatabaseModify@1002 : Boolean;VAR OnDatabaseDelete@1003 : Boolean;VAR OnDatabaseRename@1004 : Boolean);
    VAR
      IntegrationManagement@1005 : Codeunit 5150;
      ChangeLogMgt@1006 : Codeunit 423;
    BEGIN
      ChangeLogMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
      IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
      OnAfterGetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    END;

    [EventSubscriber(Codeunit,2000000002,OnDatabaseInsert)]
    LOCAL PROCEDURE OnDatabaseInsert@7(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
      APIWebhookNotificationMgt@1003 : Codeunit 6153;
    BEGIN
      OnBeforeOnDatabaseInsert(RecRef);
      ChangeLogMgt.LogInsertion(RecRef);
      IntegrationManagement.OnDatabaseInsert(RecRef);
      APIWebhookNotificationMgt.OnDatabaseInsert(RecRef);
      OnAfterOnDatabaseInsert(RecRef);
    END;

    [EventSubscriber(Codeunit,2000000002,OnDatabaseModify)]
    LOCAL PROCEDURE OnDatabaseModify@8(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
      APIWebhookNotificationMgt@1003 : Codeunit 6153;
    BEGIN
      OnBeforeOnDatabaseModify(RecRef);
      ChangeLogMgt.LogModification(RecRef);
      CheckFieldAutorisation(RecRef); //**4PS.n
      IntegrationManagement.OnDatabaseModify(RecRef);
      APIWebhookNotificationMgt.OnDatabaseModify(RecRef);
      OnAfterOnDatabaseModify(RecRef);
    END;

    [EventSubscriber(Codeunit,2000000002,OnDatabaseDelete)]
    LOCAL PROCEDURE OnDatabaseDelete@9(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
      APIWebhookNotificationMgt@1003 : Codeunit 6153;
    BEGIN
      OnBeforeOnDatabaseDelete(RecRef);
      ChangeLogMgt.LogDeletion(RecRef);
      IntegrationManagement.OnDatabaseDelete(RecRef);
      APIWebhookNotificationMgt.OnDatabaseDelete(RecRef);
      OnAfterOnDatabaseDelete(RecRef);
    END;

    [EventSubscriber(Codeunit,2000000002,OnDatabaseRename)]
    LOCAL PROCEDURE OnDatabaseRename@10(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    VAR
      IntegrationManagement@1002 : Codeunit 5150;
      ChangeLogMgt@1003 : Codeunit 423;
      APIWebhookNotificationMgt@1004 : Codeunit 6153;
    BEGIN
      OnBeforeOnDatabaseRename(RecRef,xRecRef);
      ChangeLogMgt.LogRename(RecRef,xRecRef);
      CheckFieldAutorisation(RecRef); //**4PS.n
      IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
      APIWebhookNotificationMgt.OnDatabaseRename(RecRef,xRecRef);
      OnAfterOnDatabaseRename(RecRef,xRecRef);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetGlobalTableTriggerMask@11(TableID@1000 : Integer;VAR TableTriggerMask@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalInsert@12(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalModify@13(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalDelete@14(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalRename@15(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetDatabaseTableTriggerSetup@16(TableId@1000 : Integer;VAR OnDatabaseInsert@1001 : Boolean;VAR OnDatabaseModify@1002 : Boolean;VAR OnDatabaseDelete@1003 : Boolean;VAR OnDatabaseRename@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseInsert@17(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseModify@18(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseDelete@19(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseRename@20(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnDatabaseInsert@21(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnDatabaseModify@22(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnDatabaseDelete@23(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnDatabaseRename@24(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    BEGIN
    END;

    PROCEDURE CheckFieldAutorisation@1100525002(RecRef@1100525001 : RecordRef);
    VAR
      ExtendedFieldProperty@1100525002 : Record 11020567;
      FieldAutorisationMgt@1100525003 : Codeunit 11012395;
    BEGIN
      //**4PS
      IF NOT ExtFieldPropRead THEN BEGIN
        ExtendedFieldProperty.SETCURRENTKEY("Check Field Authorization");
        ExtendedFieldProperty.SETRANGE("Check Field Authorization",TRUE);
        ExtFieldPropPresent := NOT ExtendedFieldProperty.ISEMPTY;
        ExtFieldPropRead := TRUE;
      END;
      IF NOT ExtFieldPropPresent THEN
        EXIT;
      FieldAutorisationMgt.CheckFieldPermission(RecRef);
    END;

    BEGIN
    END.
  }
}

