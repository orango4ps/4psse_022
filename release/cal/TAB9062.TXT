OBJECT Table 9062 User Security Status
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    ReplicateData=No;
    CaptionML=[ENU=User Security Status;
               NOR=Sikkerhetsstatus for bruker;
               SVE=S„kerhetsstatus f”r anv„ndare];
    LookupPageID=Page9818;
  }
  FIELDS
  {
    { 1   ;   ;User Security ID    ;GUID          ;TableRelation=User."User Security ID";
                                                   CaptionML=[ENU=User Security ID;
                                                              NOR=Sikkerhets-ID for bruker;
                                                              SVE=S„kerhets-ID f”r anv„ndare] }
    { 2   ;   ;User Name           ;Code50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."User Name" WHERE (User Security ID=FIELD(User Security ID)));
                                                   CaptionML=[ENU=User Name;
                                                              NOR=Brukernavn;
                                                              SVE=Anv„ndarnamn] }
    { 3   ;   ;Full Name           ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."Full Name" WHERE (User Security ID=FIELD(User Security ID)));
                                                   CaptionML=[ENU=Full Name;
                                                              NOR=Fullt navn;
                                                              SVE=Fullst„ndigt namn] }
    { 13  ;   ;Reviewed            ;Boolean       ;CaptionML=[ENU=Reviewed;
                                                              NOR=Kontrollert;
                                                              SVE=Granskad] }
    { 14  ;   ;Belongs To Subscription Plan;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("User Plan" WHERE (User Security ID=FIELD(User Security ID)));
                                                   ObsoleteState=Pending;
                                                   ObsoleteReason=The table User Plan will be marked as internal so it will not be possible to query it using a CalcFormaula;
                                                   CaptionML=[ENU=Belongs To Subscription Plan;
                                                              NOR=Tilh›rer abonnementsplan] }
    { 15  ;   ;Belongs to User Group;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("User Group Member" WHERE (User Security ID=FIELD(User Security ID)));
                                                   CaptionML=[ENU=Belongs to User Group;
                                                              NOR=Tilh›rer brukergruppe] }
    { 20  ;   ;Users - To review   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=[Count("User Security Status" WHERE (Reviewed=CONST(No),
                                                                                                    User Security ID=FILTER(<>{00000000-0000-0000-0000-000000000000})))];
                                                   CaptionML=[ENU=Users - To review;
                                                              NOR=Brukere - til kontroll;
                                                              SVE=Anv„ndare - att granska] }
    { 21  ;   ;Users - Without Subscriptions;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=[Count("User Security Status" WHERE (Belongs To Subscription Plan=CONST(No),
                                                                                                    User Security ID=FILTER(<>{00000000-0000-0000-0000-000000000000})))];
                                                   ObsoleteState=Pending;
                                                   ObsoleteReason=The field refers to Belongs To Subscription Plan which is marked as pending;
                                                   CaptionML=[ENU=Users - Without Subscriptions;
                                                              NOR=Brukere - uten abonnementer] }
    { 22  ;   ;Users - Not Group Members;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=[Count("User Security Status" WHERE (Belongs to User Group=CONST(No),
                                                                                                    User Security ID=FILTER(<>{00000000-0000-0000-0000-000000000000})))];
                                                   CaptionML=[ENU=Users - Not Group Members;
                                                              NOR=Brukere - ikke gruppemedlemmer;
                                                              SVE=Anv„ndare - inte gruppmedlemmar] }
    { 25  ;   ;CDS Integration Errors;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Integration Synch. Job Errors");
                                                   CaptionML=[ENU=CDS Integration Errors;
                                                              NOR=Feil under integrering av CDS] }
    { 26  ;   ;Coupled Data Synch Errors;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("CRM Integration Record" WHERE (Skipped=CONST(Yes)));
                                                   CaptionML=[ENU=Coupled Data Synch Errors;
                                                              NOR=Feil under synkronisering av koblede data] }
  }
  KEYS
  {
    {    ;User Security ID                        ;Clustered=Yes }
    {    ;Reviewed                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UserNotReviewedTxt@1001 : TextConst '@@@="%1 = user name";ENU=User %1: not reviewed.;NOR=Brukeren %1 ikke kontrollert.';
      UserReviewedTxt@1000 : TextConst '@@@=%1: User name;ENU=User %1: reviewed.;NOR=Brukeren %1 kontrollert.';
      SecurityActivityTok@1003 : TextConst 'ENU=User review;NOR=Brukerkontroll';
      SecurityContextTok@1002 : TextConst 'ENU=Security administration;NOR=Sikkerhetsadministrasjon';

    [External]
    PROCEDURE KeepOnlyEnabledUsers@1();
    VAR
      User@1000 : Record 2000000120;
      UserSecurityStatus@1001 : Record 9062;
    BEGIN
      User.SETRANGE(State,User.State::Disabled);
      IF NOT User.FINDSET THEN
        EXIT;
      REPEAT
        IF UserSecurityStatus.GET(User."User Security ID") THEN
          UserSecurityStatus.DELETE;
      UNTIL User.NEXT = 0;
    END;

    [External]
    PROCEDURE LoadUsers@2();
    VAR
      User@1000 : Record 2000000120;
      UserSecurityStatus@1001 : Record 9062;
      UserPlan@1002 : Record 9005;
      PermissionManager@1003 : Codeunit 9002;
      IsSaaS@1004 : Boolean;
    BEGIN
      User.SETRANGE(State,User.State::Enabled);
      HideExternalUsers(User);
      IF NOT User.FINDSET THEN
        EXIT;

      IsSaaS := PermissionManager.SoftwareAsAService;
      REPEAT
        IF UserSecurityStatus.GET(User."User Security ID") THEN BEGIN
          UserPlan.SETRANGE("User Security ID","User Security ID");
          IF UserPlan.ISEMPTY AND IsSaaS THEN BEGIN
            UserSecurityStatus.Reviewed := FALSE;
            UserSecurityStatus.MODIFY(TRUE);
          END;
        END ELSE BEGIN
          UserSecurityStatus.INIT;
          UserSecurityStatus."User Security ID" := User."User Security ID";
          UserSecurityStatus.Reviewed := FALSE;
          UserSecurityStatus.INSERT;
        END;
      UNTIL User.NEXT = 0;
    END;

    [External]
    PROCEDURE LogUserReviewActivity@3();
    VAR
      ActivityLog@1001 : Record 710;
      ActivityMessage@1000 : Text[250];
    BEGIN
      CALCFIELDS("User Name");
      IF Reviewed THEN
        ActivityMessage := STRSUBSTNO(UserReviewedTxt,"User Name")
      ELSE
        ActivityMessage := STRSUBSTNO(UserNotReviewedTxt,"User Name");
      ActivityLog.LogActivity(RECORDID,ActivityLog.Status::Success,SecurityContextTok,SecurityActivityTok,ActivityMessage);
    END;

    LOCAL PROCEDURE HideExternalUsers@6(VAR User@1000 : Record 2000000120);
    VAR
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      IF PermissionManager.SoftwareAsAService THEN
        User.SETFILTER("License Type",'<>%1',User."License Type"::"External User");
    END;

    BEGIN
    END.
  }
}

