OBJECT Codeunit 12013685 Fraudulent Vendor ID Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF512000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LICENSEURL@1100285000 : TextConst 'ENU=https://navblackliststorage.blob.core.windows.net/blacklistblob/BlackList.xml;SVE="http://ftp.signup.se:90/GetBlackList.aspx?license="';
      EXF003@1100285003 : TextConst 'ENU=Save XML file as %1 and copy it to %2;SVE=Spara filen som %1 och placera i %2';
      EXF004@1100285006 : TextConst 'ENU=Company %1 is not setup for Fraud List Watch;SVE=F”retaget %1 „r inte aktiverat f”r blufflista varning';

    PROCEDURE ImportList@1100285006(VAR ExFlowSetup@1100285002 : Record 12013601;RunFromImport@1100285001 : Boolean);
    VAR
      ExfHttpDownload@1100285003 : Codeunit 12013684;
    BEGIN
      IF NOT ExFlowSetup."Check Fraud IDs" THEN BEGIN
        IF RunFromImport THEN
          EXIT
        ELSE
          ERROR(EXF004,COMPANYNAME);
      END;

      IF RunFromImport THEN BEGIN
        IF ExFlowSetup."Latest Fraud Update" <> 0D THEN
          IF TODAY - ExFlowSetup."Latest Fraud Update" >= 7  THEN
            EXIT;
      END;

      CLEARLASTERROR();
      IF NOT ExfHttpDownload.RUN THEN BEGIN
        ExFlowSetup."Fraud Error Count" := ExFlowSetup."Fraud Error Count" +1;
        ExFlowSetup.MODIFY;
        IF NOT RunFromImport THEN BEGIN
          COMMIT;
          ERROR(GETLASTERRORTEXT);
        END;
        EXIT;
      END;

      CheckAll;
      ExFlowSetup."Fraud Error Count" := 0;
      ExFlowSetup."Latest Fraud Update" := TODAY;
      ExFlowSetup.MODIFY;
    END;

    PROCEDURE CheckPurchHead@1100285003(VAR ExPurchHead@1100285000 : Record 12013587);
    VAR
      ExVendID@1100285001 : Record 12013667;
      BlackListed@1100285003 : Boolean;
      ExImpPurchHeadArchive@1100285004 : Record 12013650;
    BEGIN
      IF ExPurchHead."Pay-to Vendor No." <> '' THEN BEGIN
        ExVendID.RESET;
        ExVendID.SETCURRENTKEY("Vendor No.");
        ExVendID.SETRANGE("Vendor No.",ExPurchHead."Pay-to Vendor No.");
        ExVendID.SETRANGE("Fraud ID",TRUE);
        IF NOT ExVendID.ISEMPTY THEN
          BlackListed := TRUE;
      END;

      CheckID(ExPurchHead."Vendor ID", ExPurchHead."Pay-to Vendor No.",BlackListed);

      IF ExImpPurchHeadArchive.GET(ExPurchHead."Import Document No.") THEN BEGIN
        CheckID(ExImpPurchHeadArchive."Vendor ID",ExPurchHead."Pay-to Vendor No.",BlackListed);
        CheckID(ExImpPurchHeadArchive."Vendor ID2",ExPurchHead."Pay-to Vendor No.",BlackListed);
        CheckID(ExImpPurchHeadArchive."Vendor ID3",ExPurchHead."Pay-to Vendor No.",BlackListed);
        CheckID(ExImpPurchHeadArchive."Vendor ID4",ExPurchHead."Pay-to Vendor No.",BlackListed);
        CheckID(ExImpPurchHeadArchive."Vendor ID5",ExPurchHead."Pay-to Vendor No.",BlackListed);
      END;

      IF BlackListed THEN
        BlockVendor(ExPurchHead."Pay-to Vendor No.");
    END;

    PROCEDURE CheckAll@1100285004();
    VAR
      ExVendID@1100285000 : Record 12013667;
      ExBlackList@1100285001 : Record 12013685;
      ExPurchHead@1100285003 : Record 12013587;
    BEGIN
      ExVendID.RESET;
      ExVendID.SETRANGE(Type,ExVendID.Type::"Black List");
      ExVendID.DELETEALL;

      ExVendID.RESET;
      ExVendID.SETRANGE(ExVendID."Fraud ID",TRUE);
      ExVendID.MODIFYALL("Fraud ID",FALSE);

      ExBlackList.RESET;
      IF ExBlackList.FINDSET THEN
        REPEAT
          IF ExVendID.GET(ExBlackList."Vendor ID") THEN BEGIN
            ExVendID."Fraud ID" := TRUE;
            ExVendID.MODIFY;
            BlockVendor(ExVendID."Vendor No.");
          END;
        UNTIL ExBlackList.NEXT = 0;

      ExPurchHead.RESET;
      ExPurchHead.SETFILTER(ExPurchHead."Pay-to Vendor No.", '<>%1','');
      IF ExPurchHead.FINDSET THEN
        REPEAT
          CheckPurchHead(ExPurchHead);
        UNTIL ExPurchHead.NEXT = 0;
    END;

    PROCEDURE CheckID@1100285002(VendID@1100285001 : Code[100];PayToVendNo@1100285003 : Code[20];VAR BlackListed@1100285004 : Boolean);
    VAR
      ExVendID@1100285000 : Record 12013667;
      ExBlackList@1100285002 : Record 12013685;
    BEGIN
      IF VendID <> '' THEN
        IF ExVendID.GET(VendID) THEN BEGIN
          IF ExVendID."Fraud ID" THEN BEGIN
            IF ExVendID."Vendor No." <> PayToVendNo THEN BEGIN
              ExVendID."Vendor No." :=  PayToVendNo;
              ExVendID.MODIFY;
            END;
            BlackListed := TRUE;
          END;
        END ELSE BEGIN
          ExBlackList.RESET;
          ExBlackList.SETCURRENTKEY("Vendor ID");
          ExBlackList.SETRANGE("Vendor ID",VendID);
          IF ExBlackList.FINDFIRST THEN BEGIN
            ExVendID.INIT;
            ExVendID.ID := VendID;
            ExVendID."Vendor No." :=  PayToVendNo;
            ExVendID.Type := ExVendID.Type::"Black List";
            ExVendID."Fraud ID" := TRUE;
            ExVendID.INSERT;
            BlackListed := TRUE;
          END;
        END;
    END;

    PROCEDURE BlockVendor@1100285001(PayToVendNo@1100285000 : Code[20]);
    VAR
      Vend@1100285002 : Record 23;
    BEGIN
      Vend.GET(PayToVendNo);
      IF NOT Vend."Ignore on Fraud List" THEN BEGIN
        Vend.Blocked := Vend.Blocked::All;
        Vend."Latest Fraud Block" := CURRENTDATETIME;
        Vend."Last Date Modified" := TODAY;
        Vend.MODIFY;
      END;
    END;

    PROCEDURE GetLicenseURL@1100285007() : Text[250];
    BEGIN
      EXIT(LICENSEURL);
    END;

    PROCEDURE GetNumberOfBlockedIDs@1100285008() : Integer;
    VAR
      VendID@1100285001 : Record 12013667;
    BEGIN
      VendID.RESET;
      VendID.SETRANGE("Fraud ID",TRUE);
      EXIT(VendID.COUNT);
    END;

    PROCEDURE ViewBlacklistedVendIDs@1100285005();
    VAR
      VendIDs@1100285000 : Record 12013667;
      VendorIDForm@1100285001 : Page 12013678;
    BEGIN
      VendIDs.RESET;
      VendIDs.SETRANGE("Fraud ID",TRUE);
      CLEAR(VendorIDForm);
      VendorIDForm.EDITABLE := FALSE;
      VendorIDForm.SETTABLEVIEW(VendIDs);
      VendorIDForm.RUN;
    END;

    BEGIN
    END.
  }
}

