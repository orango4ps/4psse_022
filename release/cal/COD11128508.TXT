OBJECT Codeunit 11128508 E-Invoice Exp. Iss. Fin. Chrg.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO10.00.00.14199 (10617);
  }
  PROPERTIES
  {
    TableNo=304;
    Permissions=TableData 304=rm;
    OnRun=VAR
            TempEInvoiceExportHeader@1080005 : TEMPORARY Record 11128514;
            TempEInvoiceExportLine@1080007 : TEMPORARY Record 11128515;
            SalesSetup@1080001 : Record 311;
            IssuedFinChrgMemoLine@1080002 : Record 305;
            EInvoiceExportCommon@1080000 : Codeunit 11128519;
            EInvoiceCheckFinChrgMemo@1000000000 : Codeunit 11128504;
          BEGIN
            // Pre-Check
            IssuedFinChrgMemoLine.SETRANGE("Finance Charge Memo No.","No.");
            IF NOT IssuedFinChrgMemoLine.FINDSET THEN
              EXIT;

            //CODEUNIT.RUN(CODEUNIT::"E-Invoice Check Iss. Fin.Chrg.",Rec);
            EInvoiceCheckFinChrgMemo.CheckIssFinChrg(Rec);

            // Fill in the Common Tables
            FillHeaderTableData(TempEInvoiceExportHeader,Rec);

            REPEAT
              IF NOT IsRoundingLine(IssuedFinChrgMemoLine,"Customer No.") THEN
                FillLineTableData(TempEInvoiceExportLine,IssuedFinChrgMemoLine);
            UNTIL IssuedFinChrgMemoLine.NEXT = 0;

            EInvoiceExportCommon.SetEInvoiceCommonTables(TempEInvoiceExportHeader,TempEInvoiceExportLine);

            // Create XML Content
            EInvoiceExportCommon.CreateDocAndRootNode;
            EInvoiceExportCommon.AddHeaderCommonContent;
            EInvoiceExportCommon.AddHeaderAccountingSupplierParty;
            EInvoiceExportCommon.AddHeaderAccountingCustomerParty;
            EInvoiceExportCommon.AddHeaderTaxTotal;
            EInvoiceExportCommon.AddHeaderLegalMonetaryTotal;

            TempEInvoiceExportLine.FINDSET;
            REPEAT
              IF (TempEInvoiceExportLine.Type <> TempEInvoiceExportLine.Type::" ") OR (TempEInvoiceExportLine."No." <> '') OR
                 (TempEInvoiceExportLine.Description <> '')
              THEN BEGIN
                EInvoiceExportCommon.CreateLineNode(TempEInvoiceExportLine);
                EInvoiceExportCommon.AddLineReminderContent;
              END;
            UNTIL TempEInvoiceExportLine.NEXT = 0;

            // Save file
            SalesSetup.GET;
            EInvoiceExportCommon.SaveToXML(TempEInvoiceTransferFile,SalesSetup."E-Invoice Fin. Charge Path","No.");

            ModifyIssFinChrg("No.");
          END;

  }
  CODE
  {
    VAR
      TempEInvoiceTransferFile@1080000 : TEMPORARY Record 11128516;

    PROCEDURE GetExportedFileInfo@1080000(VAR EInvoiceTransferFile@1080000 : Record 11128516);
    BEGIN
      EInvoiceTransferFile := TempEInvoiceTransferFile;
    END;

    LOCAL PROCEDURE FillHeaderTableData@1080027(VAR TempEInvoiceExportHeader@1080001 : TEMPORARY Record 11128514;IssuedFinChrgMemoHeader@1080000 : Record 304);
    VAR
      EInvoiceDocumentEncode@1080009 : Codeunit 11128501;
    BEGIN
      IssuedFinChrgMemoHeader."Currency Code" :=
        EInvoiceDocumentEncode.GetEInvoiceCurrencyCode(IssuedFinChrgMemoHeader."Currency Code");

      WITH IssuedFinChrgMemoHeader DO BEGIN
        TempEInvoiceExportHeader.INIT;
        TempEInvoiceExportHeader.ID := 0;
        TempEInvoiceExportHeader."No." := "No.";
        TempEInvoiceExportHeader."Bill-to Customer No." := "Customer No.";
        TempEInvoiceExportHeader."Bill-to Name" := Name;
        TempEInvoiceExportHeader."Bill-to Address" := Address;
        TempEInvoiceExportHeader."Bill-to Address 2" := "Address 2";
        TempEInvoiceExportHeader."Bill-to City" := City;
        TempEInvoiceExportHeader."Your Reference" := "Your Reference";
        TempEInvoiceExportHeader."Posting Date" := "Posting Date";
        TempEInvoiceExportHeader."Currency Code" := "Currency Code";
        TempEInvoiceExportHeader."VAT Registration No." := "VAT Registration No.";
        TempEInvoiceExportHeader."Bill-to Post Code" := "Post Code";
        TempEInvoiceExportHeader."Bill-to County" := County;
        TempEInvoiceExportHeader."Bill-to Country/Region Code" := "Country/Region Code";
        TempEInvoiceExportHeader."Sell-to Country/Region Code" := "Country/Region Code";
        TempEInvoiceExportHeader."Schema Name" := 'Reminder';
        TempEInvoiceExportHeader."Schema Location" := 'urn:oasis:names:specification:ubl:schema:xsd:Reminder-2 UBL-Reminder-2.0.xsd';
        TempEInvoiceExportHeader.xmlns := 'urn:oasis:names:specification:ubl:schema:xsd:Reminder-2';
        TempEInvoiceExportHeader."Customization ID" := 'urn:www.cenbii.eu:transaction:biicoretrdm017:ver1.0' +
          ':#urn:www.cenbii.eu:profile:biixy:ver1.0#urn:www.difi.no:ehf:purring:ver1';
        TempEInvoiceExportHeader."Profile ID" := 'urn:www.cenbii.eu:profile:biixy:ver1.0';
        TempEInvoiceExportHeader."Uses Common Aggregate Comp." := TRUE;
        TempEInvoiceExportHeader."Uses Common Basic Comp." := TRUE;
        TempEInvoiceExportHeader."Uses Common Extension Comp." := TRUE;
        TempEInvoiceExportHeader."Sales Line Found" := TRUE;
        TempEInvoiceExportHeader.GLN := GLN;
      END;

      // Fill-in header fields related to tax amounts
      FillHeaderTaxAmounts(TempEInvoiceExportHeader);
    END;

    LOCAL PROCEDURE FillHeaderTaxAmounts@1080032(VAR TempEInvoiceExportHeader@1080000 : TEMPORARY Record 11128514);
    VAR
      IssuedFinChargeMemoLine@1080002 : Record 305;
    BEGIN
      IssuedFinChargeMemoLine.SETRANGE("Finance Charge Memo No.",TempEInvoiceExportHeader."No.");
      IF IssuedFinChargeMemoLine.FINDSET THEN BEGIN
        TempEInvoiceExportHeader."Sales Line Found" := TRUE;
        REPEAT
          IF IsRoundingLine(IssuedFinChargeMemoLine,TempEInvoiceExportHeader."Bill-to Customer No.") THEN
            TempEInvoiceExportHeader."Total Rounding Amount" += IssuedFinChargeMemoLine.Amount + IssuedFinChargeMemoLine."VAT Amount"
          ELSE BEGIN
            TempEInvoiceExportHeader."Legal Taxable Amount" += IssuedFinChargeMemoLine.Amount;
            TempEInvoiceExportHeader."Total Amount" += IssuedFinChargeMemoLine.Amount + IssuedFinChargeMemoLine."VAT Amount";
            TempEInvoiceExportHeader."Tax Amount" += IssuedFinChargeMemoLine."VAT Amount";
          END;
        UNTIL IssuedFinChargeMemoLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillLineTableData@1080024(VAR TempEInvoiceExportLine@1080000 : TEMPORARY Record 11128515;IssuedFinChrgMemoLine@1080001 : Record 305);
    VAR
      Id@1080002 : Integer;
    BEGIN
      WITH IssuedFinChrgMemoLine DO BEGIN
        Id := 0;
        IF TempEInvoiceExportLine.FINDLAST THEN
          Id := TempEInvoiceExportLine.ID + 1;
        TempEInvoiceExportLine.INIT;
        TempEInvoiceExportLine.ID := Id;
        TempEInvoiceExportLine."Document No." := "Document No.";
        TempEInvoiceExportLine."Line No." := "Line No.";
        TempEInvoiceExportLine.Type := Type;
        TempEInvoiceExportLine."No." := "No.";
        TempEInvoiceExportLine."Document Type" := "Document Type";
        TempEInvoiceExportLine.Description := Description;
        TempEInvoiceExportLine."Remaining Amount" := "Remaining Amount";
        TempEInvoiceExportLine."VAT %" := "VAT %";
        TempEInvoiceExportLine.Amount := Amount;
        TempEInvoiceExportLine."Amount Including VAT" := Amount + "VAT Amount";
        TempEInvoiceExportLine."VAT Calculation Type" := "VAT Calculation Type";
        TempEInvoiceExportLine."VAT Identifier" := "VAT Identifier";
        TempEInvoiceExportLine."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
        TempEInvoiceExportLine.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE IsRoundingLine@1080006(IssuedFinChargeMemoLine@1080000 : Record 305;CustomerNo@1080001 : Code[20]) : Boolean;
    VAR
      Customer@1080002 : Record 18;
      CustomerPostingGroup@1080003 : Record 92;
    BEGIN
      IF IssuedFinChargeMemoLine.Type = IssuedFinChargeMemoLine.Type::"G/L Account" THEN BEGIN
        Customer.GET(CustomerNo);
        CustomerPostingGroup.SETFILTER(Code,Customer."Customer Posting Group");
        IF CustomerPostingGroup.FINDFIRST THEN
          IF IssuedFinChargeMemoLine."No." = CustomerPostingGroup."Invoice Rounding Account" THEN
            EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ModifyIssFinChrg@1080005(DocumentNo@1080001 : Code[20]);
    VAR
      IssuedFinChargeMemoHeader2@1080000 : Record 304;
    BEGIN
      IssuedFinChargeMemoHeader2.GET(DocumentNo);
      IssuedFinChargeMemoHeader2."E-Invoice Created" := TRUE;
      IssuedFinChargeMemoHeader2.MODIFY;
    END;

    BEGIN
    END.
  }
}

