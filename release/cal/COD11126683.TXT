OBJECT Codeunit 11126683 Empoly Process Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11229430;
    OnRun=VAR
            EmpolyWarehouseOrder@1100528305 : Record 11126687;
            EmpolyWarehouseOrderArch@1100528304 : Record 11126689;
            RecRef@1100528302 : RecordRef;
            ProcessType@1100528300 : Option;
          BEGIN
            EmpolySetup.GET;
            SourceRecId := "Source Record Id";
            RecRef := SourceRecId.GETRECORD;
            RecRef.SETTABLE(EmpolyWarehouseOrder);
            IF (EmpolyWarehouseOrder.GET(EmpolyWarehouseOrder."No.")) THEN BEGIN
              ProcessType := EmpolyWarehouseOrder.Process;
            END ELSE BEGIN
              EmpolyWarehouseOrderArch.GET(EmpolyWarehouseOrder."No.");
              ProcessType := EmpolyWarehouseOrderArch.Process;
            END;

            GenericProcessQueue.COPY(Rec);
            EmpolyProcessTypeSetting.GET(ProcessType);
            SourceRecId := GenericProcessQueue."Source Record Id";
            StepRecId := GenericProcessQueue."Step Record Id";
            EmpolyWarehouseOrderNo := EmpolyWarehouseOrder."No.";

            AutoProcessWarehouseOrder;
          END;

  }
  CODE
  {
    VAR
      NoProcessStepDefinedTxt@1100528310 : TextConst 'DEU=%1 %2 ist nicht definiert.;ENU=%1 %2 is not defined.;NLD=%1 %2 is niet gedefinieerd.';
      PostSalesCreditMemoTxt@1100528305 : TextConst 'ENU=WHA Post Sales Credit Memo';
      PostSalesInvoiceTxt@1100528304 : TextConst 'ENU=WHA Post Sales Invoice';
      PostItemJournalTxt@1100528303 : TextConst 'ENU=WHA Post Item Journal';
      PostSalesOrderTxt@1100528302 : TextConst 'ENU=WHA Post Sales Order';
      PostSalesReturnOrderTxt@1100528324 : TextConst 'ENU=WHA Post Sales Return Order';
      PrintItemPackingSlipTxt@1100528313 : TextConst 'ENU=WHA Print Item Journal Packing Slip';
      PrintSalesCreditMemoTxt@1100528317 : TextConst 'ENU=WHA Print Sales Credit Memo';
      PrintSalesInvoiceTxt@1100528308 : TextConst 'ENU=WHA Print Sales Invoice';
      PrintSalesOrderPackingSlipTxt@1100528306 : TextConst 'ENU=WHA Print Sales Order Packing Slip';
      PrintSalesReturnOrderPackingSlipTxt@1100528325 : TextConst 'ENU=WHA Print Sales Return Order Packing Slip';
      ProcessWarehouseOrderTxt@1100528301 : TextConst 'ENU=WHA Process Warehouse Order';
      WhaTxt@1100528300 : TextConst 'ENU=4PS WHA';
      EmpolyProcessTypeSetting@1100528323 : Record 11126691;
      GenericProcessQueue@1100528315 : Record 11229430;
      EmpolySetup@1100528316 : Record 11126692;
      ReportSelections@1100528307 : Record 77;
      GenericProcessManagement@1100528314 : Codeunit 11229305;
      EmpolyWarehouseOrderNo@1100528319 : Code[20];
      SourceRecId@1100528312 : RecordID;
      StepRecId@1100528311 : RecordID;
      RecRef@1100528321 : RecordRef;
      PostPhysInventoryJournalTxt@1100527350 : TextConst 'ENU=WHA Post Phys. Inventory Journal';
      PostStockTransferJournalTxt@1100527351 : TextConst 'ENU=WHA Post Stock Transfer Journal';
      PrintPhysInventoryPackingSlipTxt@1100527352 : TextConst 'ENU=WHA Print Phys. Inventory Journal Packing Slip';
      PrintStockTransferPackingSlipTxt@1100527353 : TextConst 'ENU=WHA Print Stock Transfer Journal Packing Slip';

    PROCEDURE GetWhaTxt@1100528305() : Text;
    BEGIN
      EXIT(WhaTxt);
    END;

    PROCEDURE InitGenericProcessQueue@1100528306(EmpolyWarehouseOrder@1100528300 : Record 11126687);
    VAR
      EmpolyProcessTypeSetting@1100528301 : Record 11126691;
      GenericProcessQueue@1100528302 : Record 11229430;
      RecId@1100528304 : RecordID;
    BEGIN
      EmpolySetup.GET;
      EmpolyProcessTypeSetting.GET(EmpolyWarehouseOrder.Process);
      RecId := EmpolyWarehouseOrder.RECORDID;
      GenericProcessQueue.CheckQueueExists(COMPANYNAME, RecId, TRUE);

      IF (EmpolyProcessTypeSetting."Process Wharehouse App Order") THEN
        GenericProcessQueue.AddProcessQueueEntry(ProcessWarehouseOrderTxt, COMPANYNAME, RecId);

      IF (EmpolyProcessTypeSetting."Process Type" IN [
            EmpolyProcessTypeSetting."Process Type"::"Project Delivery",
            EmpolyProcessTypeSetting."Process Type"::"Project Return",
            EmpolyProcessTypeSetting."Process Type"::"Service Delivery",
            EmpolyProcessTypeSetting."Process Type"::"Service Return"]) AND
         (EmpolyProcessTypeSetting."Print Packing Slip")
      THEN
        GenericProcessQueue.AddProcessQueueEntry(PrintItemPackingSlipTxt, COMPANYNAME, RecId);

      IF (EmpolyProcessTypeSetting."Process Type" IN [
            EmpolyProcessTypeSetting."Process Type"::"Project Delivery",
            EmpolyProcessTypeSetting."Process Type"::"Project Return",
            EmpolyProcessTypeSetting."Process Type"::"Service Delivery",
            EmpolyProcessTypeSetting."Process Type"::"Service Return"]) AND
         (EmpolyProcessTypeSetting."Post Item Journal")
      THEN
        GenericProcessQueue.AddProcessQueueEntry(PostItemJournalTxt, COMPANYNAME, RecId);

      IF (EmpolyProcessTypeSetting."Process Type" IN [EmpolyProcessTypeSetting."Process Type"::Sales]) THEN BEGIN
        IF (EmpolySetup."Sales Type" = EmpolySetup."Sales Type"::Order) THEN BEGIN
          IF (EmpolyProcessTypeSetting."Post Sales Order") THEN
            GenericProcessQueue.AddProcessQueueEntry(PostSalesOrderTxt, COMPANYNAME, RecId);
          IF (EmpolyProcessTypeSetting."Print Packing Slip") THEN
            GenericProcessQueue.AddProcessQueueEntry(PrintSalesOrderPackingSlipTxt, COMPANYNAME, RecId);
        END;
        IF (EmpolyProcessTypeSetting."Post Sales Invoice") THEN
          GenericProcessQueue.AddProcessQueueEntry(PostSalesInvoiceTxt, COMPANYNAME, RecId);
        IF (EmpolyProcessTypeSetting."Print Sales Invoice") THEN
          GenericProcessQueue.AddProcessQueueEntry(PrintSalesInvoiceTxt, COMPANYNAME, RecId);
      END;

      IF (EmpolyProcessTypeSetting."Process Type" IN [EmpolyProcessTypeSetting."Process Type"::"Sales Return"]) THEN BEGIN
        IF (EmpolySetup."Sales Return Type" = EmpolySetup."Sales Return Type"::ReturnOrder) THEN BEGIN
          IF (EmpolyProcessTypeSetting."Post Sales Return Order") THEN
            GenericProcessQueue.AddProcessQueueEntry(PostSalesReturnOrderTxt, COMPANYNAME, RecId);
          IF (EmpolyProcessTypeSetting."Print Packing Slip") THEN
            GenericProcessQueue.AddProcessQueueEntry(PrintSalesReturnOrderPackingSlipTxt, COMPANYNAME, RecId);
        END;
        IF (EmpolyProcessTypeSetting."Post Sales Credit Memo") THEN
          GenericProcessQueue.AddProcessQueueEntry(PostSalesCreditMemoTxt, COMPANYNAME, RecId);
        IF (EmpolyProcessTypeSetting."Print Sales Credit Memo") THEN
          GenericProcessQueue.AddProcessQueueEntry(PrintSalesCreditMemoTxt, COMPANYNAME, RecId);
      END;

      IF (EmpolyProcessTypeSetting."Process Type" IN [EmpolyProcessTypeSetting."Process Type"::"Phys. Inventory"]) AND
         (EmpolyProcessTypeSetting."Print Packing Slip")
      THEN
        GenericProcessQueue.AddProcessQueueEntry(PrintPhysInventoryPackingSlipTxt, COMPANYNAME, RecId);

      IF (EmpolyProcessTypeSetting."Process Type" IN [EmpolyProcessTypeSetting."Process Type"::"Phys. Inventory"]) AND
         (EmpolyProcessTypeSetting."Post Phys. Inventory Journal")
      THEN
        GenericProcessQueue.AddProcessQueueEntry(PostPhysInventoryJournalTxt, COMPANYNAME, RecId);

      IF (EmpolyProcessTypeSetting."Process Type" IN [EmpolyProcessTypeSetting."Process Type"::"Stock Transfer"]) AND
         (EmpolyProcessTypeSetting."Print Packing Slip")
      THEN
        GenericProcessQueue.AddProcessQueueEntry(PrintStockTransferPackingSlipTxt, COMPANYNAME, RecId);

      IF (EmpolyProcessTypeSetting."Process Type" IN [EmpolyProcessTypeSetting."Process Type"::"Stock Transfer"]) AND
         (EmpolyProcessTypeSetting."Post Stock Transfer Journal")
      THEN
        GenericProcessQueue.AddProcessQueueEntry(PostStockTransferJournalTxt, COMPANYNAME, RecId);

      COMMIT;
    END;

    PROCEDURE InitWhaProcesses@1100528308();
    BEGIN
      GenericProcessManagement.InitJobQueue(UPPERCASE(GetWhaTxt), 5, 0);
      InitGenericProcessSteps;
    END;

    LOCAL PROCEDURE "---Locals---"@1100528301();
    BEGIN
    END;

    LOCAL PROCEDURE AddGenericProcessStep@1100528300(StepName@1100528300 : Text;CodeunitId@1100528301 : Integer;Priority@1100528302 : Integer);
    VAR
      GenericProcessStep@1100528304 : Record 11229408;
    BEGIN
      GenericProcessStep.AddGenericProcessStep(StepName, WhaTxt, CodeunitId, Priority);
      UpdateGenericProcessStepToStandard(GenericProcessStep);
    END;

    LOCAL PROCEDURE AutoProcessWarehouseOrder@1100528309();
    VAR
      ProcessType@1100527350 : 'Print Item Journal,Print Phys. Inventory,Print Stock Transfer';
    BEGIN
      CASE GenericProcessQueue."Step Name" OF
        PostSalesCreditMemoTxt:
          PostSalesCreditMemo;
        PostSalesInvoiceTxt:
          PostSalesInvoice;
        PostItemJournalTxt:
         PostItemJournal;
        PostSalesOrderTxt:
          PostSalesOrder;
        PostSalesReturnOrderTxt:
          PostSalesReturnOrder;
        PostPhysInventoryJournalTxt:
          PostItemJournal;
        PostStockTransferJournalTxt:
          PostItemJournal;
        PrintSalesCreditMemoTxt:
          PrintSalesCreditMemo;
        PrintSalesInvoiceTxt:
          PrintSalesInvoice;
        PrintItemPackingSlipTxt:
          PrintItemJournalPackingSlip(ProcessType::"Print Item Journal");
        PrintSalesOrderPackingSlipTxt:
          PrintSalesOrderPackingSlip;
        PrintSalesReturnOrderPackingSlipTxt:
          PrintSalesReturnOrderPackingSlip;
        PrintPhysInventoryPackingSlipTxt:
          PrintItemJournalPackingSlip(ProcessType::"Print Phys. Inventory");
        PrintStockTransferPackingSlipTxt:
          PrintItemJournalPackingSlip(ProcessType::"Print Stock Transfer");
        ProcessWarehouseOrderTxt:
          ProcessWarehouseOrder;
        ELSE
          ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.FIELDCAPTION("Step Name"), GenericProcessQueue."Step Name");
      END;
    END;

    LOCAL PROCEDURE InitGenericProcessSteps@1100528321();
    BEGIN
      AddGenericProcessStep(PrintSalesCreditMemoTxt, 11126683, 40);
      AddGenericProcessStep(PrintSalesInvoiceTxt, 11126683, 40);
      AddGenericProcessStep(PrintItemPackingSlipTxt, 11126683, 10);
      AddGenericProcessStep(PrintSalesOrderPackingSlipTxt, 11126683, 20);
      AddGenericProcessStep(PrintSalesReturnOrderPackingSlipTxt, 11126683, 20);
      AddGenericProcessStep(PrintPhysInventoryPackingSlipTxt, 11126683, 10);
      AddGenericProcessStep(PrintStockTransferPackingSlipTxt, 11126683, 10);
      AddGenericProcessStep(PostSalesCreditMemoTxt, 11126683, 30);
      AddGenericProcessStep(PostSalesInvoiceTxt, 11126683, 30);
      AddGenericProcessStep(PostItemJournalTxt, 11126683, 20);
      AddGenericProcessStep(PostSalesOrderTxt, 11126683, 10);
      AddGenericProcessStep(PostSalesReturnOrderTxt, 11126683, 10);
      AddGenericProcessStep(ProcessWarehouseOrderTxt, 11126683, 0);
      AddGenericProcessStep(PostPhysInventoryJournalTxt, 11126683, 20);
      AddGenericProcessStep(PostStockTransferJournalTxt, 11126683, 20);
    END;

    LOCAL PROCEDURE PostItemJournal@1100528328();
    VAR
      ItemJournalLine@1100528300 : Record 83;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Item Journal Line") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      ItemJournalLine.GET(StepRecId);
      ItemJournalLine.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");
      ItemJournalLine.SETRANGE("Document No.",
        GenericProcessQueue.GetParameter(StepRecId.TABLENO, ItemJournalLine.FIELDNO("Document No.")));

      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch", ItemJournalLine);
    END;

    LOCAL PROCEDURE PostSalesCreditMemo@1100528311();
    VAR
      SalesHeader@1100528300 : Record 36;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Sales Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      SalesHeader.GET(StepRecId);
      SalesHeader.TESTFIELD("Document Type", SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.Invoice := TRUE;

      ProcessSalesHeader(SalesHeader);
      UpdateGenericProcessQueueSalesCreditMemo(SalesHeader);
    END;

    LOCAL PROCEDURE PostSalesInvoice@1100528313();
    VAR
      SalesHeader@1100528300 : Record 36;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Sales Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      SalesHeader.GET(StepRecId);
      SalesHeader.TESTFIELD("Document Type", SalesHeader."Document Type"::Invoice);
      SalesHeader.Invoice := TRUE;

      ProcessSalesHeader(SalesHeader);
      UpdateGenericProcessQueueSalesInvoice(SalesHeader);
    END;

    LOCAL PROCEDURE PostSalesOrder@1100528315();
    VAR
      SalesHeader@1100528300 : Record 36;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Sales Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      SalesHeader.GET(StepRecId);
      SalesHeader.TESTFIELD("Document Type", SalesHeader."Document Type"::Order);
      SalesHeader.Ship := TRUE;
      SalesHeader.Invoice := TRUE;

      ProcessSalesHeader(SalesHeader);
      UpdateGenericProcessQueueSalesOrder(SalesHeader);
    END;

    LOCAL PROCEDURE PostSalesReturnOrder@1100528314();
    VAR
      SalesHeader@1100528300 : Record 36;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Sales Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      SalesHeader.GET(StepRecId);
      SalesHeader.TESTFIELD("Document Type", SalesHeader."Document Type"::"Return Order");
      SalesHeader.Receive := TRUE;
      SalesHeader.Invoice := TRUE;

      ProcessSalesHeader(SalesHeader);
      UpdateGenericProcessQueueSalesReturnOrder(SalesHeader);
    END;

    LOCAL PROCEDURE PrintItemJournalPackingSlip@1100528312(ProcessType@1100527350 : 'Print Item Journal,Print Phys. Inventory,Print Stock Transfer');
    VAR
      ItemJournalLine@1100528300 : Record 83;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Item Journal Line") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      ItemJournalLine.GET(StepRecId);
      ItemJournalLine.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");
      ItemJournalLine.SETRANGE("Document No.",
        GenericProcessManagement.GetQueueParameter(GenericProcessQueue, StepRecId.TABLENO,
          ItemJournalLine.FIELDNO("Document No.")));
      CASE ProcessType OF
        ProcessType::"Print Item Journal":
          BEGIN
            ReportSelections.PrintWithGUIYesNo(4001, ItemJournalLine, FALSE, FALSE, 0);
            UpdateGenericProcessQueueItemJnlLine(ItemJournalLine, ItemJournalLine."Document No.", PrintItemPackingSlipTxt, PostItemJournalTxt);
          END;
        ProcessType::"Print Phys. Inventory":
          BEGIN
            ReportSelections.PrintWithGUIYesNo(4000, ItemJournalLine, FALSE, FALSE, 0);
            UpdateGenericProcessQueueItemJnlLine(ItemJournalLine, ItemJournalLine."Document No.", PrintPhysInventoryPackingSlipTxt, PostPhysInventoryJournalTxt);
          END;
        ProcessType::"Print Stock Transfer":
          BEGIN
            ReportSelections.PrintWithGUIYesNo(4005, ItemJournalLine, FALSE, FALSE, 0);
            UpdateGenericProcessQueueItemJnlLine(ItemJournalLine, ItemJournalLine."Document No.", PrintStockTransferPackingSlipTxt, PostStockTransferJournalTxt);
          END;
      END;
    END;

    LOCAL PROCEDURE PrintSalesCreditMemo@1100528304();
    VAR
      SalesCrMemoHeader@1100528300 : Record 114;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Sales Cr.Memo Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      SalesCrMemoHeader.GET(StepRecId);
      SalesCrMemoHeader.SETRECFILTER;
      IF (SalesCrMemoHeader."Electronic Invoicing" = SalesCrMemoHeader."Electronic Invoicing"::"E-Mail") AND
         (SalesCrMemoHeader."E-Mail (Invoices)" <> '')
      THEN
        SalesCrMemoHeader.SendCreditMemoElectronic(FALSE, TRUE)
      ELSE
        SalesCrMemoHeader.PrintRecords(FALSE);
    END;

    LOCAL PROCEDURE PrintSalesInvoice@1100528307();
    VAR
      SalesInvoiceHeader@1100528300 : Record 112;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Sales Invoice Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      SalesInvoiceHeader.GET(StepRecId);
      SalesInvoiceHeader.SETRECFILTER;
      IF (SalesInvoiceHeader."Electronic Invoicing" = SalesInvoiceHeader."Electronic Invoicing"::"E-Mail") AND
         (SalesInvoiceHeader."E-Mail (Invoices)" <> '')
      THEN
        SalesInvoiceHeader.SendInvoiceElectronic(FALSE, TRUE)
      ELSE
        SalesInvoiceHeader.PrintRecords(FALSE, FALSE);
    END;

    LOCAL PROCEDURE PrintSalesOrderPackingSlip@1100528310();
    VAR
      SalesShipmentHeader@1100528305 : Record 110;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Sales Shipment Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      SalesShipmentHeader.GET(StepRecId);
      SalesShipmentHeader.SETRECFILTER;
      SalesShipmentHeader.PrintRecords(FALSE, FALSE);
    END;

    LOCAL PROCEDURE PrintSalesReturnOrderPackingSlip@1100528337();
    VAR
      ReturnReceiptHeader@1100528305 : Record 6660;
    BEGIN
      IF (StepRecId.TABLENO <> DATABASE::"Return Receipt Header") THEN
        ERROR(NoProcessStepDefinedTxt, GenericProcessQueue.TABLECAPTION, GenericProcessQueue."Step Record Id");
      ReturnReceiptHeader.GET(StepRecId);
      ReturnReceiptHeader.SETRECFILTER;
      ReturnReceiptHeader.PrintRecords(FALSE);
    END;

    LOCAL PROCEDURE ProcessSalesHeader@1100528319(VAR SalesHeader@1100528300 : Record 36);
    BEGIN
      SalesHeader.SETRECFILTER;
      CODEUNIT.RUN(CODEUNIT::"Sales-Post", SalesHeader);
    END;

    LOCAL PROCEDURE ProcessWarehouseOrder@1100528316();
    VAR
      EmpolyWarehouseOrder@1100528300 : Record 11126687;
      ItemJournalLine@1100528304 : Record 83;
      SalesHeader@1100528303 : Record 36;
      ProcessEmpolyWarehouseOrder@1100528301 : Report 11020312;
    BEGIN
      EmpolyWarehouseOrder.GET(SourceRecId);
      EmpolyWarehouseOrder.TESTFIELD(Status, EmpolyWarehouseOrder.Status::Finished);
      EmpolyWarehouseOrder.SETRECFILTER;
      EmpolyWarehouseOrder.SETRANGE("Order Date", EmpolyWarehouseOrder."Order Date");
      ProcessEmpolyWarehouseOrder.ProcessOrderHeader(EmpolyWarehouseOrder);
      ProcessEmpolyWarehouseOrder.ArchiveOrderHeader(EmpolyWarehouseOrder);
      ProcessEmpolyWarehouseOrder.GetRecId(StepRecId);

      CASE EmpolyWarehouseOrder.Process OF
        EmpolyWarehouseOrder.Process::"Project Delivery",
        EmpolyWarehouseOrder.Process::"Project Retour",
        EmpolyWarehouseOrder.Process::"Service Delivery",
        EmpolyWarehouseOrder.Process::"Service Retour": BEGIN
          ItemJournalLine.GET(StepRecId);
          UpdateGenericProcessQueueItemJnlLine(ItemJournalLine, EmpolyWarehouseOrder."No.", PrintItemPackingSlipTxt, PostItemJournalTxt);
        END;
        EmpolyWarehouseOrder.Process::Sales: BEGIN
          SalesHeader.GET(StepRecId);
          IF (EmpolySetup."Sales Type" = EmpolySetup."Sales Type"::Order) THEN
            GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PostSalesOrderTxt, StepRecId)
          ELSE
            GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PostSalesInvoiceTxt, StepRecId);
        END;
        EmpolyWarehouseOrder.Process::"Sales Return": BEGIN
          SalesHeader.GET(StepRecId);
          IF (EmpolySetup."Sales Return Type" = EmpolySetup."Sales Return Type"::ReturnOrder) THEN
            GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PostSalesReturnOrderTxt, StepRecId)
          ELSE
            GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PostSalesCreditMemoTxt, StepRecId);
        END;

        EmpolyWarehouseOrder.Process::"Phys. Inventory": BEGIN
          ItemJournalLine.GET(StepRecId);
          UpdateGenericProcessQueueItemJnlLine(ItemJournalLine, EmpolyWarehouseOrder."No.", PrintPhysInventoryPackingSlipTxt, PostPhysInventoryJournalTxt);
        END;

        EmpolyWarehouseOrder.Process::"Stock Transfer": BEGIN
          ItemJournalLine.GET(StepRecId);
          UpdateGenericProcessQueueItemJnlLine(ItemJournalLine, EmpolyWarehouseOrder."No.", PrintStockTransferPackingSlipTxt, PostStockTransferJournalTxt);
        END;

        EmpolyWarehouseOrder.Process::"Purch. Requisition":
          GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, ProcessWarehouseOrderTxt, StepRecId);
        ELSE
          EmpolyWarehouseOrder.FIELDERROR(Process);

      END;
    END;

    LOCAL PROCEDURE UpdateGenericProcessStepToStandard@1100528302(GenericProcessStep@1100528300 : Record 11229408);
    BEGIN
      GenericProcessStep."Is Standard OLD" := TRUE;
      GenericProcessStep.MODIFY;
    END;

    LOCAL PROCEDURE UpdateGenericProcessQueueItemJnlLine@1100528303(ItemJournalLine@1100528300 : Record 83;WarehouseOrderNo@1100528301 : Code[20];PrintPackingSlipTxt@1100527350 : Text[80];PostTxt@1100527351 : Text[80]);
    BEGIN
      GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue,PrintPackingSlipTxt, StepRecId);
      GenericProcessManagement.UpdateQueueParameterForStep(GenericProcessQueue, PrintPackingSlipTxt,
        StepRecId.TABLENO, ItemJournalLine.FIELDNO("Document No."), WarehouseOrderNo);
      GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue,PostTxt, StepRecId);
      GenericProcessManagement.UpdateQueueParameterForStep(GenericProcessQueue, PostTxt,
        StepRecId.TABLENO, ItemJournalLine.FIELDNO("Document No."), WarehouseOrderNo);
    END;

    LOCAL PROCEDURE UpdateGenericProcessQueueSalesCreditMemo@1100528323(SalesHeader@1100528300 : Record 36);
    VAR
      SalesCrMemoHeader@1100528301 : Record 114;
    BEGIN
      SalesCrMemoHeader.SETRANGE("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
      IF (EmpolySetup."Sales Return Type" = EmpolySetup."Sales Return Type"::ReturnOrder) THEN
        SalesCrMemoHeader.SETRANGE("Return Order No.", SalesHeader."No.")
      ELSE
        SalesCrMemoHeader.SETRANGE("Pre-Assigned No.", SalesHeader."No.");
      SalesCrMemoHeader.SETRANGE("Your Reference", SalesHeader."Your Reference");
      IF (SalesCrMemoHeader.FINDFIRST) THEN BEGIN
        StepRecId := SalesCrMemoHeader.RECORDID;
        GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PrintSalesCreditMemoTxt, StepRecId);
      END ELSE
        IF (GenericProcessQueue."Step Name" = PostSalesCreditMemoTxt) THEN
          GenericProcessManagement.SetQueueStepStatusForStep(GenericProcessQueue, PrintSalesCreditMemoTxt, GenericProcessQueue.Status::Processed);
    END;

    LOCAL PROCEDURE UpdateGenericProcessQueueSalesOrder@1100528322(SalesHeader@1100528300 : Record 36);
    VAR
      "SalesHeader-Invoice"@1100528301 : Record 36;
      SalesShipmentHeader@1100528302 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
      SalesShipmentHeader.SETRANGE("Order No.", SalesHeader."No.");
      SalesShipmentHeader.SETRANGE("Your Reference", SalesHeader."Your Reference");
      IF (SalesShipmentHeader.FINDFIRST) THEN BEGIN
        StepRecId := SalesShipmentHeader.RECORDID;
        GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PrintSalesOrderPackingSlipTxt, StepRecId);
      END ELSE
        GenericProcessManagement.SetQueueStepStatusForStep(GenericProcessQueue, PrintSalesOrderPackingSlipTxt, GenericProcessQueue.Status::Processed);

      "SalesHeader-Invoice".SETRANGE("Document Type", "SalesHeader-Invoice"."Document Type"::Invoice);
      "SalesHeader-Invoice".SETRANGE("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
      "SalesHeader-Invoice".SETRANGE("Related Sales Order No.", SalesHeader."No.");
      "SalesHeader-Invoice".SETRANGE("Your Reference", SalesHeader."Your Reference");
      IF ("SalesHeader-Invoice".FINDFIRST) THEN BEGIN
        StepRecId := "SalesHeader-Invoice".RECORDID;
        GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PostSalesInvoiceTxt, StepRecId);
      END ELSE
        GenericProcessManagement.SetQueueStepStatusForStep(GenericProcessQueue, PostSalesInvoiceTxt, GenericProcessQueue.Status::Processed);

      UpdateGenericProcessQueueSalesInvoice(SalesHeader);
    END;

    LOCAL PROCEDURE UpdateGenericProcessQueueSalesReturnOrder@1100528317(SalesHeader@1100528300 : Record 36);
    VAR
      "SalesHeader-CreditMemo"@1100528301 : Record 36;
      ReturnReceiptHeader@1100528302 : Record 6660;
    BEGIN
      ReturnReceiptHeader.SETRANGE("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
      ReturnReceiptHeader.SETRANGE("Return Order No.", SalesHeader."No.");
      ReturnReceiptHeader.SETRANGE("Your Reference", SalesHeader."Your Reference");
      ReturnReceiptHeader.FINDFIRST;
      StepRecId := ReturnReceiptHeader.RECORDID;
      GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PrintSalesReturnOrderPackingSlipTxt, StepRecId);

      "SalesHeader-CreditMemo".SETRANGE("Document Type", "SalesHeader-CreditMemo"."Document Type"::"Credit Memo");
      "SalesHeader-CreditMemo".SETRANGE("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
      "SalesHeader-CreditMemo".SETRANGE("Related Sales Order No.", SalesHeader."No.");
      "SalesHeader-CreditMemo".SETRANGE("Your Reference", SalesHeader."Your Reference");
      IF ("SalesHeader-CreditMemo".FINDFIRST) THEN BEGIN
        StepRecId := "SalesHeader-CreditMemo".RECORDID;
        GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PostSalesCreditMemoTxt, StepRecId);
      END ELSE
        GenericProcessManagement.SetQueueStepStatusForStep(GenericProcessQueue, PostSalesCreditMemoTxt, GenericProcessQueue.Status::Processed);

      UpdateGenericProcessQueueSalesCreditMemo(SalesHeader);
    END;

    LOCAL PROCEDURE UpdateGenericProcessQueueSalesInvoice@1100528326(SalesHeader@1100528300 : Record 36);
    VAR
      SalesInvoiceHeader@1100528301 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
      SalesInvoiceHeader.SETRANGE("Order No.", SalesHeader."No.");
      SalesInvoiceHeader.SETRANGE("Your Reference", SalesHeader."Your Reference");
      IF (SalesInvoiceHeader.FINDFIRST) THEN BEGIN
        StepRecId := SalesInvoiceHeader.RECORDID;
        GenericProcessManagement.UpdateQueueStepRecIdForStep(GenericProcessQueue, PrintSalesInvoiceTxt, StepRecId);
      END ELSE
        IF (GenericProcessQueue."Step Name" = PostSalesInvoiceTxt) THEN
          GenericProcessManagement.SetQueueStepStatusForStep(GenericProcessQueue, PrintSalesInvoiceTxt, GenericProcessQueue.Status::Processed);
    END;

    BEGIN
    END.
  }
}

