OBJECT Codeunit 81621 ImdokWS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=IMDOK,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TEXT000@1100285100 : TextConst 'ENU=User Name ''%1'' cannot be found in table User';
      TEXT001@1100285101 : TextConst 'ENU="Forecast Level for Project ''%1'' must be ''%2'' "';
      TEXT002@1100285102 : TextConst 'ENU=Project ''%1'' must have Project Status ''%2'', ''%3'', ''%4'' or  ''%5'',';
      TEXT003@1100285103 : TextConst 'ENU="All prognosis for Project ''%1'' must be ''Fixed'' "';
      TEXT004@1100285104 : TextConst 'ENU=Can not find at prognosis for Project ''%1'' with Date''%2''';
      TEXT005@1100285105 : TextConst 'ENU="Prognosis for Project ''%1'' with Date''%2'' is already ''Fixed'' "';
      TEXT006@1100285106 : TextConst 'ENU="Function can not be uset to set Prognosis to Fixed = False"';
      TEXT007@1100285107 : TextConst 'ENU=Not able to modify Prognosis for project ''%1'' with date ''%2''.''Fixed'' is set to ''Yes''';
      TEXT008@1100285108 : TextConst 'ENU="Cost Components for Surcharge is not allowed. Value=''%1''"';
      UserSetupMissingTxt@1100285109 : TextConst 'ENU=User Setup missing in 4PS for%1;NOR=Brukerinnstillinger mangler i 4PS for%1;SVE=Anv„ndarinst„llningar saknas i 4PS f”r %1';
      NotSuperConsenter@1100285110 : TextConst 'ENU=Current user is not selected as ''Super Consenter'';NOR=N†v‘rende bruker er ikke valgt som ''Super Consenter'';SVE=Aktuell anv„ndare „r inte markerad som ''™verordnad godk„nnare''';
      Text009@1100285111 : TextConst 'ENU=You are no approver for employee %1.;SVE=Du „r ingen godk„nnare f”r anst„lld %1.';
      Text010@1100285113 : TextConst 'ENU=No hour accounting lines present, release not allowed.;NOR=Det finnes ingen timerapporter, ikke tillatt † frigi.;SVE=Det finns inga tidrapporter, sl„ppning inte till†ten.';
      Text025@1100285114 : TextConst 'ENU=Number of hours (%1) different from norm hours (%2);NOR=Antall timer (%1) skiller seg fra normtimer (%2);SVE=Antal timmar (%1) skiljer sig fr†n normtimmar (%2)';
      Text11128000@1100285112 : TextConst 'ENU=Team Code must be filled for Hours and Expense Hours;NOR=Tidskode m† v‘re fylt ut for timer og forbrukstimer;SVE=Arbetslag kod m†ste fyllas i f”r timmar och kostnadstimmar';
      MissingValueInField@1100285115 : TextConst 'ENU=ERR: Missing value in field ''%1''';
      WrongValueInField@1100285117 : TextConst 'ENU=ERR: Wrong value in field ''%1'' %2';
      MissingValueInTable@1100285119 : TextConst 'ENU=ERR: Missing value in table ''%1''';
      TextMustBeMainPrj@1100285116 : TextConst 'ENU=Project %1 must be a main project.;NOR=Prosjekt %1 m† v‘re et hovedprosjekt.;SVE=Projekt %1 m†ste vara ett huvudprojekt.';
      Text11012019@1100285118 : TextConst 'ENU=Persons are managed centrally, insert is not allowed.;NOR=Personer h†ndteres sentralt, sette inn er ikke tillatt;SVE=Personer hanteras centralt, infogning „r inte till†tet';

    PROCEDURE GetInvoicePictureCount@1000000001(No@1000000000 : Code[20]) : Integer;
    VAR
      lvPurchInvoiceHdr@1000000001 : Record 122;
      lvPurchInvCrMemoHdr@1000000002 : Record 124;
      lvSourceCodeSetup@1000000004 : Record 242;
      RecRef@1000000005 : RecordRef;
      lvIsDebit@1000000003 : Boolean;
      lvSourceCode@1000000006 : Code[10];
      lvDocFilters@1000000007 : Codeunit 11012432;
      lvDocFilterRec@1000000008 : Record 11012073;
      lvGlobalTempDocumentProperties@1000000009 : TEMPORARY Record 11012746;
      lvDocumentCount@1000000010 : Integer;
    BEGIN
      // 161115 ITERO.AC
      // This function returns true if a Purhase Invoice or a Purchase Credit Memo has a linked external document
      // The purpose is to give information to Imdok if it is possible to retreive an image or not
      // If there is no picture file available, then Imdok should print the invoice based on data in in the Imdok_4PS_Link database instead

      lvDocumentCount := 0;

      IF NOT lvSourceCodeSetup.GET() THEN
        EXIT(lvDocumentCount);

      IF lvPurchInvoiceHdr.GET(No) THEN BEGIN
        lvIsDebit := TRUE;
        lvSourceCode := lvPurchInvoiceHdr."Source Code";
      END ELSE BEGIN
        IF lvPurchInvCrMemoHdr.GET(No) THEN BEGIN
          lvIsDebit := FALSE;
          lvSourceCode := lvPurchInvCrMemoHdr."Source Code";
        END ELSE BEGIN
          EXIT(lvDocumentCount);
        END;
      END;

      CASE lvSourceCode OF
        lvSourceCodeSetup.Purchases,'':
          BEGIN
            IF lvIsDebit THEN
              RecRef.GETTABLE(lvPurchInvoiceHdr)
            ELSE
              RecRef.GETTABLE(lvPurchInvCrMemoHdr);
          END;
        ELSE
          EXIT(lvDocumentCount);
      END;

      lvDocFilters.CreateTemporaryFilter(RecRef, lvDocFilterRec);

      lvDocFilters.ApplyDocumentFilter(lvDocFilterRec, lvGlobalTempDocumentProperties);
      lvGlobalTempDocumentProperties.SETRANGE("From Filter Form", FALSE);

      lvDocumentCount := lvGlobalTempDocumentProperties.COUNT;
      EXIT(lvDocumentCount);
    END;

    PROCEDURE GetInvoicePicture@1000000002(No@1000000013 : Code[20];PictureIndex@1000000012 : Integer;VAR Picture@1000000011 : BigText) : Boolean;
    VAR
      lvPurchInvoiceHdr@1000000001 : Record 122;
      lvPurchInvCrMemoHdr@1000000002 : Record 124;
      lvSourceCodeSetup@1000000004 : Record 242;
      RecRef@1000000005 : RecordRef;
      lvIsDebit@1000000003 : Boolean;
      lvSourceCode@1000000006 : Code[10];
      lvDocFilters@1000000007 : Codeunit 11012432;
      lvDocFilterRec@1000000008 : Record 11012073;
      lvGlobalTempDocumentProperties@1000000009 : TEMPORARY Record 11012746;
      lvDocumentCount@1000000010 : Integer;
      lvCounter@1000000000 : Integer;
      lvFileName@1000000014 : Text[250];
      lvDocumentType@1000000015 : Code[10];
      lvInternalCompany@1000000016 : Text[50];
      lvDocumentManagementCU@1000000017 : Codeunit 11012403;
      base64@1000000018 : DotNet "'base64, Version=1.0.0.0, Culture=neutral, PublicKeyToken=2ed5bff0965cbb98'.base64.base64";
    BEGIN
      // 161115 ITERO.AC
      // This function returns true if a Purhase Invoice och Purchase Credit Memo has a linked external document
      // and it was found in 4PS The purpose is that Imdok shoud be able to fetch an attachment and display the picture

      lvDocumentCount := 0;
      lvCounter := 0;

      IF NOT lvSourceCodeSetup.GET() THEN
        EXIT(FALSE);

      IF lvPurchInvoiceHdr.GET(No) THEN BEGIN
        lvIsDebit := TRUE;
        lvSourceCode := lvPurchInvoiceHdr."Source Code";
      END ELSE BEGIN
        IF lvPurchInvCrMemoHdr.GET(No) THEN BEGIN
          lvIsDebit := FALSE;
          lvSourceCode := lvPurchInvCrMemoHdr."Source Code";
        END ELSE BEGIN
          EXIT(FALSE);
        END;
      END;

      CASE lvSourceCode OF
        lvSourceCodeSetup.Purchases,'':
          BEGIN
            IF lvIsDebit THEN
              RecRef.GETTABLE(lvPurchInvoiceHdr)
            ELSE
              RecRef.GETTABLE(lvPurchInvCrMemoHdr);
          END;
        ELSE
          EXIT(FALSE);
      END;

      lvDocFilters.CreateTemporaryFilter(RecRef, lvDocFilterRec);

      lvDocFilters.ApplyDocumentFilter(lvDocFilterRec, lvGlobalTempDocumentProperties);
      lvGlobalTempDocumentProperties.SETRANGE("From Filter Form", FALSE);

      lvDocumentCount := lvGlobalTempDocumentProperties.COUNT;
      IF lvDocumentCount > 0 THEN BEGIN
        IF lvGlobalTempDocumentProperties.FINDSET(FALSE) THEN BEGIN
          REPEAT
            lvCounter += 1;
            IF lvCounter = PictureIndex THEN BEGIN
              lvFileName := TotalFileName( lvGlobalTempDocumentProperties."Document Type", lvGlobalTempDocumentProperties.File, lvGlobalTempDocumentProperties."Internal Company");
            END;

          UNTIL (lvGlobalTempDocumentProperties.NEXT = 0) OR (lvCounter = PictureIndex);
        END;
      END ELSE BEGIN
        EXIT(FALSE);
      END;

      IF lvFileName <> '' THEN BEGIN
        base64 := base64.base64();
        Picture.ADDTEXT(base64.encodeFromFile(lvFileName));

        EXIT(TRUE);
      END ELSE BEGIN
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE TotalFileName@1100485000(lDocType@1100485002 : Code[10];lFile@1100485001 : Text[250];Company@1100528700 : Text[30]) : Text[250];
    VAR
      lvDocumentManagementCU@1000000000 : Codeunit 11012403;
    BEGIN
      IF (lDocType <> '') AND (lFile <> '') AND (Company <> '') THEN
        EXIT(lvDocumentManagementCU.FolderName(lDocType, Company) + lFile)
      ELSE
        EXIT('');
    END;

    PROCEDURE CreatePrognosisCC@1100285100(StrFromImdok@1100285107 : Text) Return : Integer;
    VAR
      Prognosis@1100285101 : Record 11012034;
      PrognosisMgt@1100285103 : Codeunit 11020217;
      lvDate@1100285108 : Date;
      lvTime@1100285109 : Time;
      "Prognosis Date"@1100285102 : Date;
      lvDatetime@1100285100 : DateTime;
      "Project No."@1100285106 : Code[20];
      Comment@1100285105 : Text[50];
      "Created By"@1100285104 : Code[50];
    BEGIN
      SaveInputToLogfile(StrFromImdok,'CreatePrognosisCC');
      //RFC235+RFC236
      Return := 0;

      "Project No."     := SELECTSTR(1, StrFromImdok);
      "Prognosis Date"  := TextToDate(SELECTSTR(2, StrFromImdok));
      Comment           := SELECTSTR(3, StrFromImdok);
      "Created By"      := SELECTSTR(4, StrFromImdok);
      lvDate            := TextToDate(COPYSTR(SELECTSTR(5, StrFromImdok), 1, 11));
      EVALUATE(lvTime,   COPYSTR(SELECTSTR(5, StrFromImdok), 12, 17));
      lvDatetime        := CREATEDATETIME(lvDate, lvTime);

      CheckProjectStatus("Project No.");
      CheckProjectForecastLevel("Project No.");
      CheckUsername("Created By");
      LookForNotFixedPrognosis("Project No.");

      Prognosis.INIT;
      Prognosis."Project No."     := "Project No.";
      Prognosis."Prognosis Date"  := "Prognosis Date";
      // Prognosis.Comment           := Comment;
      Prognosis.INSERT(TRUE);

      Prognosis.Comment           := Comment;
      Prognosis."Modified by External" := "Created By";
      Prognosis."Last Datetime Modified" := lvDatetime;
      Prognosis.MODIFY(TRUE);

      PrognosisMgt.SetIsFromWebService(TRUE);
      PrognosisMgt.ProcessPrognosisCC(Prognosis);

      Return:=1;
    END;

    PROCEDURE SetPrognosisToFixed@1100285105(StrFromImdok@1100285102 : Text) Return : Integer;
    VAR
      "Project No."@1100285104 : Code[20];
      "Prognosis Date"@1100285103 : Date;
      Fixed@1100285100 : Integer;
      Prognosis@1100285101 : Record 11012034;
    BEGIN
      SaveInputToLogfile(StrFromImdok,'SetPrognosisToFixed');
      Return := 0;

      "Project No."           := SELECTSTR(1, StrFromImdok);
      "Prognosis Date" := TextToDate(SELECTSTR(2, StrFromImdok));
      EVALUATE(Fixed, SELECTSTR(3, StrFromImdok));

      IF Prognosis.GET("Project No.", "Prognosis Date") THEN BEGIN
        IF Fixed = 1 THEN BEGIN
          IF NOT Prognosis.Fixed THEN BEGIN
            Prognosis.Fixed := TRUE;
            Prognosis.MODIFY(TRUE);
            Return := 1;
          END ELSE ERROR(TEXT005, "Project No.", "Prognosis Date");
        END ELSE ERROR(TEXT006);
      END ELSE ERROR(TEXT004, "Project No.", "Prognosis Date");
    END;

    PROCEDURE UpdatePrognosisCC@1100285120(StrFromImdok@1100285100 : Text) ReturnValue : Integer;
    VAR
      Prognosis@1100285103 : Record 11012034;
      PrognosisLineCC@1100285104 : Record 11128270;
      CostComponent@1100285107 : Record 11012012;
      PrognosisManagement@1101285000 : Codeunit 11020217;
      "Prognosis Date"@1100285105 : Date;
      "Project No."@1100285111 : Code[20];
      "Prognosis Date Code"@1100285110 : Code[20];
      "Cost Component Code"@1100285109 : Code[10];
      "Prognosis Total"@1100285108 : Decimal;
      "Prognosis Total Code"@1100285101 : Code[20];
      LastPrognosisDate@1100285102 : Date;
    BEGIN
      SaveInputToLogfile(StrFromImdok,'UpdatePrognosisCC');
      //RFC235+RFC236
      ReturnValue := 0;
      "Project No."               := SELECTSTR(1, StrFromImdok);
      "Prognosis Date" := TextToDate(SELECTSTR(2, StrFromImdok));
      "Cost Component Code"       := SELECTSTR(3, StrFromImdok);
      EVALUATE("Prognosis Total",    SELECTSTR(4, StrFromImdok));

      CheckProjectStatus("Project No.");
      CheckProjectForecastLevel("Project No.");

      Prognosis.GET("Project No.", "Prognosis Date");
      IF Prognosis.Fixed THEN
        ERROR(TEXT007, "Project No.", "Prognosis Date");

      CostComponent.GET("Cost Component Code");
      IF CostComponent."Used for surcharge" THEN
        ERROR(TEXT008, "Cost Component Code");

      IF NOT PrognosisLineCC.GET("Project No.", "Prognosis Date", "Cost Component Code") THEN BEGIN
        PrognosisLineCC.INIT;
        PrognosisLineCC.VALIDATE("Project No.", "Project No.");
        PrognosisLineCC.VALIDATE("Prognosis Date", "Prognosis Date");
        PrognosisLineCC.VALIDATE("Cost Component Code", "Cost Component Code");
        PrognosisLineCC.INSERT;
      END;

      PrognosisLineCC.CALCFIELDS(Revenue);
      IF PrognosisLineCC.Revenue THEN BEGIN
        PrognosisLineCC.VALIDATE("Prognosis Amount Revenue", ("Prognosis Total" - PrognosisLineCC."Actual Revenues"));
        PrognosisLineCC.MODIFY(TRUE);
        ReturnValue := 1;
      END ELSE BEGIN
        PrognosisLineCC.VALIDATE("Prognosis Total Cost", "Prognosis Total");
        PrognosisLineCC.MODIFY(TRUE);
        ReturnValue := 1;
      END;

      PrognosisManagement.CalcPrognosisSurchargesCC(PrognosisLineCC);
    END;

    LOCAL PROCEDURE CheckUsername@1100285106("Created by"@1100285100 : Code[50]);
    VAR
      User@1100285101 : Record 2000000120;
    BEGIN
      //RFC235+RFC236
      User.SETRANGE("User Name", "Created by");
      IF User.ISEMPTY THEN
        ERROR(TEXT000, "Created by");
    END;

    LOCAL PROCEDURE CheckProjectForecastLevel@1100285111("Project No."@1100285100 : Code[20]);
    VAR
      Job@1100285101 : Record 11072003;
    BEGIN
      IF Job.GET("Project No.") THEN
        IF Job."Forecast Level" <> Job."Forecast Level"::"Cost Component" THEN
          ERROR(TEXT001, "Project No.", Job."Forecast Level"::"Cost Component");
    END;

    LOCAL PROCEDURE CheckProjectStatus@1100285116("Project No."@1100285100 : Code[20]);
    VAR
      Job@1100285101 : Record 11072003;
    BEGIN
       IF Job.GET("Project No.") THEN BEGIN
        IF NOT (Job."Project Status" IN [ Job."Project Status"::Estimation,
                                          Job."Project Status"::Preparation,
                                          Job."Project Status"::Production,
                                          Job."Project Status"::"Technical Finished" ]) THEN BEGIN
          ERROR(TEXT002, "Project No.",
                         Job."Project Status"::Estimation,
                         Job."Project Status"::Preparation,
                         Job."Project Status"::Production,
                         Job."Project Status"::"Technical Finished");
        END;
      END;
    END;

    LOCAL PROCEDURE LookForNotFixedPrognosis@1100285131("Project No."@1100285100 : Code[20]);
    VAR
      Prognosis@1100285101 : Record 11012034;
    BEGIN
      //RFC235+RFC236
      Prognosis.SETRANGE("Project No.", "Project No.");
      Prognosis.SETRANGE(Fixed, FALSE);
      IF NOT Prognosis.ISEMPTY THEN
        ERROR(TEXT003, "Project No.");
    END;

    LOCAL PROCEDURE TextToDate@1100285101(dateText@1100285100 : Code[20]) tmpDate : Date;
    VAR
      tmpYYstr@1100285102 : Code[4];
      tmpMMstr@1100285103 : Code[2];
      tmpDDstr@1100285104 : Code[2];
      tmpYY@1100285107 : Integer;
      tmpMM@1100285106 : Integer;
      tmpDD@1100285105 : Integer;
    BEGIN
      //RFC235+RFC236
      tmpYYstr := COPYSTR(dateText,1,4); IF (EVALUATE(tmpYY,tmpYYstr)) THEN;
      tmpMMstr := COPYSTR(dateText,6,2); IF (EVALUATE(tmpMM,tmpMMstr)) THEN;
      tmpDDstr := COPYSTR(dateText,9,2); IF (EVALUATE(tmpDD,tmpDDstr)) THEN;
      IF (tmpDD = 0) OR (tmpMM = 0) OR (tmpYY = 0) THEN EXIT(0D);
      tmpDate := DMY2DATE(tmpDD,tmpMM,tmpYY);
      EXIT(tmpDate);
    END;

    LOCAL PROCEDURE GetLastProdnosisDate@1100285102("Project No."@1100285100 : Code[20];"Prognosis Date"@1100285102 : Date) LastPrognosisDate : Date;
    VAR
      Prognosis@1100285101 : Record 11012034;
    BEGIN
      //RFC235+RFC236
      Prognosis.SETRANGE("Project No.", "Project No.");
      Prognosis.SETCURRENTKEY("Prognosis Date");
      IF Prognosis.FINDLAST THEN
        LastPrognosisDate := Prognosis."Prognosis Date";
    END;

    PROCEDURE ProcessIPS@1100285113(id@1100285108 : Integer;key1@1100285107 : Text[250];key2@1100285106 : Text[250];key3@1100285105 : Text[250];value1@1100285104 : Text[250];value2@1100285103 : Text[250];value3@1100285102 : Text[250]) : Integer;
    VAR
      lvBuffer@1100285101 : Record 81600;
      lvIPSManagement@1100285109 : Codeunit 81600;
      lvEntryID@1100285100 : Integer;
      lvStatus@1100285110 : Integer;
    BEGIN
      //pure283958
      lvBuffer.ID := id;
      lvBuffer.Key1 := key1;
      lvBuffer.Key2 := key2;
      lvBuffer.Key3 := key3;
      lvBuffer.Value1 := value1;
      lvBuffer.Value2 := value2;
      lvBuffer.Value3 := value3;

      lvBuffer."Entry No." := 0;
      lvBuffer.Status := 0;
      lvBuffer.ErrorMessage := '';
      lvBuffer.INSERT(TRUE);
      lvEntryID := lvBuffer."Entry No.";
      COMMIT;

      lvIPSManagement.BatchProcessIPS; //has COMMIT

      lvBuffer.GET(lvEntryID);
      lvStatus := lvBuffer.Status;
      EXIT(lvStatus);
    END;

    LOCAL PROCEDURE RemoveNamespace@1100285119(XMLDocIn@1100285100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDocOut@1100285101 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XslTransform@1100285102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Xsl.XslTransform";
      XMLStyleSheet@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      writer@1100285104 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringWriter";
      nullXsltArgumentList@1100285105 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Xsl.XsltArgumentList";
    BEGIN
      //RemoveNamespace(XMLDocIn : DotNet "System.Xml.XmlDocument";VAR XMLDocOut : DotNet "System.Xml.XmlDocument")
      // before this function your tag looks like this: <namespace:tagname>sample text</tagname>
      // after this function your tag looks like this: <tagname>sample text</tagname>
      // additionally all namespace references in the head are removed.
      XslTransform :=  XslTransform.XslTransform;
      XMLStyleSheet := XMLStyleSheet.XmlDocument;
      XMLStyleSheet.InnerXml(
      '<?xml version="1.0" encoding="UTF-8"?>' +
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' +
      '<xsl:output method="xml" encoding="UTF-8" />' +
      '<xsl:template match="/">' +
      '<xsl:copy>' +
      '<xsl:apply-templates />' +
      '</xsl:copy>' +
      '</xsl:template>' +
      '<xsl:template match="*">' +
      '<xsl:element name="{local-name()}">' +
      '<xsl:apply-templates select="@* | node()" />' +
      '</xsl:element>' +
      '</xsl:template>' +
      '<xsl:template match="@*">' +
      '<xsl:attribute name="{local-name()}"><xsl:value-of select="."/></xsl:attribute>' +
      '</xsl:template>' +
      '<xsl:template match="text() | processing-instruction() | comment()">' +
      '<xsl:copy />' +
      '</xsl:template>' +
      '</xsl:stylesheet>'
      );

      XslTransform.Load(XMLStyleSheet);
      writer := writer.StringWriter();
      XslTransform.Transform(XMLDocIn, nullXsltArgumentList, writer);
      XMLDocOut := XMLDocOut.XmlDocument;
      XMLDocOut.InnerXml(writer.ToString());
    END;

    PROCEDURE ReleaseHourAcc@1100285103(inputString@1100285101 : Text) : Text;
    VAR
      XMLDoc@1100285100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100285102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode2@1100285113 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100285104 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLDOMManagement@1100285106 : Codeunit 6224;
      Nodes@1100285107 : Integer;
      i@1100285108 : Integer;
      hourYearT@1100285109 : Text;
      hourYearI@1100285118 : Integer;
      hourWeekT@1100285117 : Text;
      hourWeekI@1100285110 : Integer;
      emplNo@1100285111 : Text;
      emplUserId@1100285112 : Text;
      HourAccounting@1100285114 : Record 11012038;
      UserSetup@1100285115 : Record 91;
      EmployeeSuper@1100285116 : Record 5200;
      EmployeeEmpl@1100285125 : Record 5200;
      lHourControllerRec@1100285124 : Record 11012008;
      lHourAccLineRec@1100285123 : Record 11012039;
      JobsSetup@1100285122 : Record 315;
      HourAccountingLine@1100285121 : Record 11012039;
      LvHourLines@1100285127 : Record 11012039;
      WageComponent@1100285120 : Record 11012014;
      HumanResourcesSetup@1100285119 : Record 5218;
      CheckHourLine@1100285126 : Codeunit 11012003;
      TotalNormHours@1101285000 : Decimal;
    BEGIN
      SaveInputToLogfile(inputString,'ReleaseHourAcc');
      //RFC242
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      RemoveNamespace(XMLDoc,XMLDocOut);
      XMLNodeList := XMLDocOut.GetElementsByTagName('ReleaseHourAcc');
      Nodes := XMLNodeList.Count;
      FOR i := 0 TO Nodes-1 DO BEGIN
        XMLNode := XMLNodeList.Item(i);

        hourYearT := XMLDOMManagement.FindNodeText(XMLNode, 'hourYear');
        hourWeekT := XMLDOMManagement.FindNodeText(XMLNode, 'hourWeek');
        emplNo := XMLDOMManagement.FindNodeText(XMLNode, 'emplNo');
        emplUserId := XMLDOMManagement.FindNodeText(XMLNode, 'emplUserId');

      END;

      IF NOT UserSetup.GET(emplUserId)  THEN
        EXIT(STRSUBSTNO(UserSetupMissingTxt,emplUserId));

      IF NOT EmployeeSuper.GET(UserSetup."Employee No.") THEN
        EXIT(STRSUBSTNO(UserSetupMissingTxt,emplUserId));

      IF NOT EmployeeSuper."Super Approver" THEN
        EXIT(NotSuperConsenter);

      IF (NOT EVALUATE(hourYearI,hourYearT)) OR (NOT EVALUATE(hourWeekI,hourWeekT)) THEN
        EXIT('invalid year/week');

      IF NOT HourAccounting.GET(hourYearI,hourWeekI,emplNo) THEN
        EXIT('');
      //  EXIT('HourAccounting.GET(hourYearI,hourWeekI,emplNo)'+hourYearT + hourWeekt+emplNo);

      IF HourAccounting.Status = HourAccounting.Status::Released THEN
        EXIT('');

      // HourAccounting.SetStatus(TRUE,EmployeeSuper."No.");
      //SetStatus(lRelease : Boolean;lControllerNo : Code[20])
      JobsSetup.GET;
      HumanResourcesSetup.GET;

      lHourControllerRec.SETRANGE("Employee No.", emplNo);
      IF NOT lHourControllerRec.ISEMPTY THEN BEGIN
        lHourControllerRec.SETRANGE("Controller No.", EmployeeSuper."No.");
        IF lHourControllerRec.ISEMPTY THEN
          EXIT(STRSUBSTNO(Text009, HourAccounting."Employee No."));
      END;

      HourAccountingLine.SETRANGE(Year, HourAccounting.Year);
      HourAccountingLine.SETRANGE(Week, HourAccounting.Week);
      HourAccountingLine.SETRANGE("Employee No.", HourAccounting."Employee No.");
      HourAccountingLine.SETFILTER("Team Code",'%1','');
      HourAccountingLine.SETFILTER(Type, '%1|%2',HourAccountingLine.Type::Project,HourAccountingLine.Type::Service);

      IF JobsSetup."Team Code mandatory for Hours" THEN
        IF HourAccountingLine.FINDSET(FALSE) THEN REPEAT
          IF EmployeeEmpl.GET(HourAccountingLine."Employee No.") THEN
            IF (NOT EmployeeEmpl.UTA) AND
                WageComponent.GET(HourAccountingLine."Wage Component") THEN
              IF (WageComponent."Component Type" IN [WageComponent."Component Type"::Hours,WageComponent."Component Type"::"Expense hours"]) THEN
                EXIT(Text11128000);
        UNTIL HourAccountingLine.NEXT=0;


      lHourAccLineRec.SETRANGE(Year, HourAccounting.Year);
      lHourAccLineRec.SETRANGE(Week, HourAccounting.Week);
      lHourAccLineRec.SETRANGE("Employee No.", HourAccounting."Employee No.");
      IF NOT lHourAccLineRec.FINDFIRST THEN
        EXIT(Text010);
      HourAccounting.Status := HourAccounting.Status::Released;
      HourAccounting."Released by" := emplUserId;

      HourAccounting.Consented := FALSE;
      HourAccounting.MODIFY(TRUE);
      IF JobsSetup."Explode Hour Lines at Release" THEN
        HourAccounting.ExplodeLines;

      IF HumanResourcesSetup."Check Hours on Release" THEN BEGIN
        HourAccountingLine.SETRANGE(Year, HourAccounting.Year);
        HourAccountingLine.SETRANGE(Week, HourAccounting.Week);
        HourAccountingLine.SETRANGE("Employee No.", HourAccounting."Employee No.");
        IF HourAccountingLine.FINDSET THEN
          REPEAT
            CheckHourLine.RunCheck(HourAccountingLine);
          UNTIL HourAccountingLine.NEXT = 0;
      END;

      IF HumanResourcesSetup."Consent Hours" THEN BEGIN
      //>>create hour consent lines
      //      HourAccounting.CreateConsentLines(lHourAccLineRec);
      //      CreateConsentLines(HourLine : Record "Hour Accounting Line")
        LvHourLines.SETRANGE(Year,lHourAccLineRec.Year);
        LvHourLines.SETRANGE(Week,lHourAccLineRec.Week);
        LvHourLines.SETRANGE("Employee No.",lHourAccLineRec."Employee No.");

      //  UserSetup.GET(UserId);
        IF EmployeeSuper.GET(UserSetup."Employee No.") AND EmployeeSuper."Super Approver" THEN BEGIN
      //        IF NOT CONFIRM(Text11128230) THEN BEGIN
            LvHourLines.MODIFYALL("Status SE",LvHourLines."Status SE"::Processed);
            HourAccounting.ChangeConsentSuperUser(lHourAccLineRec);
      //          EXIT;
      //        END;
        END ELSE
          IF LvHourLines.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              LvHourLines.CreateHoursConsentLine;
            UNTIL LvHourLines.NEXT = 0
          END;
      END;
      //<<create hour consent lines

      IF HumanResourcesSetup."Norm Check" THEN BEGIN
        EmployeeEmpl.GET(HourAccounting."Employee No.");
        IF EmployeeEmpl."Account Hours" = EmployeeEmpl."Account Hours"::"Required according to Norm" THEN
          IF NOT HourAccounting.CheckNormHoursConsent(lHourAccLineRec) THEN
            EXIT(STRSUBSTNO(Text025,TotalNormHours,EmployeeEmpl."Norm Hours")); //40 hours check
      END;

      IF HumanResourcesSetup."Check Hours" AND (HourAccounting."Supplying Company" = '') THEN BEGIN
      //      EmployeeEmpl.GET(HourAccounting."Employee No.");
        IF EmployeeEmpl."Check Hours" THEN
          HourAccounting.TESTFIELD("Date Checked");
      END;

      HourAccounting.UpdateLinesStatus; // SESB.031 VKO 26.07.2013
    END;

    PROCEDURE CreateSubProjectFromMainProject@1100285104(inputString@1100285100 : Text) : Text;
    VAR
      XMLDoc@1100285107 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100285106 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100285105 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLAttrib@1100285102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      XMLDOMManagement@1100285101 : Codeunit 6224;
      Nodes@1100285108 : Integer;
      i@1100285109 : Integer;
      inNo@1100285110 : Code[20];
      inMainProject@1100285111 : Code[20];
      inGlobalDimension1Code@1100285112 : Code[20];
      inDescription@1100285113 : Text[50];
      inDescription2@1100285114 : Text[50];
      inAddress@1100285115 : Text[50];
      inAddress2@1100285116 : Text[50];
      inPostCode@1100285117 : Code[20];
      inCity@1100285118 : Text[50];
      inProjectManager@1100285119 : Code[20];
      inProjectStatus@1100285120 : Text;
      inExpediter@1100285121 : Code[10];
      inStartingDate@1100285122 : Date;
      inEndingDate@1100285123 : Date;
      inModifiedBy@1100285124 : Code[50];
      inCreatedBy@1100285125 : Code[50];
      inBilltoCustomerNo@1100285126 : Code[20];
      inContractAmount@1100285127 : Text;
      inSettlementMethod@1100285128 : Text;
      inOrderNoCustomer@1100285129 : Text[50];
      inPrincipalReference@1100285130 : Text[50];
      inContactPersonNo@1100285131 : Code[20];
      inCode@1100285132 : Code[10];
      inComment@1100285133 : Text[80];
      inDate@1100285134 : Date;
      inDeliveryAddressNote@1100285148 : Text[30];
      Job@1100285135 : Record 11072003;
      xJob@1100285140 : Record 11072003;
      JobMain@1100285137 : Record 11072003;
      CommentLine@1100285136 : Record 97;
      ProjectPrincipal@1100285141 : Record 11012005;
      CreateSubProjFrm@1100285138 : Page 11012106;
      modif@1100285139 : Boolean;
      StandardText@1100285142 : Record 7;
      SalespersonPurchaser@1100285143 : Record 13;
      Employee@1100285144 : Record 5200;
      Contact@1100285145 : Record 5050;
      NoSeries@1100285146 : Record 308;
      valDec@1101285000 : Decimal;
      valInt@1101285001 : Integer;
      inInvReady@1100285104 : Text;
      valBool@1100285147 : Boolean;
    BEGIN
      SaveInputToLogfile(inputString,'CreateSubProjectFromMainProject');
      //RFC1118
      //read input
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      RemoveNamespace(XMLDoc,XMLDocOut);
      XMLNodeList := XMLDocOut.GetElementsByTagName('CreateSubProjectFromMainProject');
      Nodes := XMLNodeList.Count;
      FOR i := 0 TO Nodes-1 DO BEGIN
        XMLNode := XMLNodeList.Item(i);

        inNo := XMLDOMManagement.FindNodeText(XMLNode, 'no');
        inMainProject := XMLDOMManagement.FindNodeText(XMLNode, 'mainProject');
        inGlobalDimension1Code := XMLDOMManagement.FindNodeText(XMLNode, 'globalDimension1Code');
        inDescription := XMLDOMManagement.FindNodeText(XMLNode, 'description');
        inDescription2 := XMLDOMManagement.FindNodeText(XMLNode, 'description2');
        inAddress := XMLDOMManagement.FindNodeText(XMLNode, 'address');
        inAddress2 := XMLDOMManagement.FindNodeText(XMLNode, 'address2');
        inPostCode := XMLDOMManagement.FindNodeText(XMLNode, 'postCode');
        inCity := XMLDOMManagement.FindNodeText(XMLNode, 'city');
        inProjectManager := XMLDOMManagement.FindNodeText(XMLNode, 'projectManager');
        inProjectStatus := XMLDOMManagement.FindNodeText(XMLNode, 'projectStatus');
        inExpediter := XMLDOMManagement.FindNodeText(XMLNode, 'expediter');
        inStartingDate := TextToDate(XMLDOMManagement.FindNodeText(XMLNode, 'startingDate'));
        inEndingDate := TextToDate(XMLDOMManagement.FindNodeText(XMLNode, 'endingDate'));
        inModifiedBy := XMLDOMManagement.FindNodeText(XMLNode, 'modifiedBy');
        inCreatedBy := XMLDOMManagement.FindNodeText(XMLNode, 'createdBy');
        inBilltoCustomerNo := XMLDOMManagement.FindNodeText(XMLNode, 'billtoCustomerNo');
        inContractAmount := XMLDOMManagement.FindNodeText(XMLNode, 'contractAmount');
        inSettlementMethod := XMLDOMManagement.FindNodeText(XMLNode, 'settlementMethod');
        inOrderNoCustomer := XMLDOMManagement.FindNodeText(XMLNode, 'orderNoCustomer');
        inPrincipalReference := XMLDOMManagement.FindNodeText(XMLNode, 'principalReference');
        inContactPersonNo := XMLDOMManagement.FindNodeText(XMLNode, 'contactPersonNo');
        inCode := XMLDOMManagement.FindNodeText(XMLNode, 'code');
        inComment := XMLDOMManagement.FindNodeText(XMLNode, 'comment');
        inDate := TextToDate(XMLDOMManagement.FindNodeText(XMLNode, 'date'));
        inInvReady := XMLDOMManagement.FindNodeText(XMLNode,'invoiceReady'); //190114
        inDeliveryAddressNote := XMLDOMManagement.FindNodeText(XMLNode,'deliveryAddressNote'); //200117

      END;

      //check mandatory fields
      IF inMainProject = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Main Project")));
      IF inGlobalDimension1Code = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Global Dimension 1 Code")));
      IF inDescription = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION(Description)));
      IF inProjectManager = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Project Manager")));
      IF inProjectStatus = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Project Status")));
      // IF inExpediter = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION(Expediter)));
      IF inModifiedBy = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Modified by")));
      IF inCreatedBy = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Created by")));
      IF inBilltoCustomerNo = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Bill-to Customer No.")));
      IF inSettlementMethod = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Settlement Method")));
      IF (inComment <> '') AND (inCode = '') THEN EXIT(STRSUBSTNO(MissingValueInField,CommentLine.FIELDCAPTION(Code)));
      IF NOT (LOWERCASE(inInvReady) IN ['0','1','y','yes','n','no']) THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Invoiced (ready)")));  //190114

      //preCheck for values in sub-tables
      IF inCode <> '' THEN
        IF NOT StandardText.GET(inCode) THEN EXIT(STRSUBSTNO(WrongValueInField,StandardText.FIELDCAPTION(Code)));
      IF inProjectManager <> '' THEN
        IF NOT Employee.GET(inProjectManager) THEN EXIT(STRSUBSTNO(WrongValueInField,Employee.FIELDCAPTION("No.")));
      IF inExpediter <> '' THEN
        IF NOT SalespersonPurchaser.GET(inExpediter) THEN EXIT(STRSUBSTNO(WrongValueInField,SalespersonPurchaser.FIELDCAPTION(Code)));
      IF inContactPersonNo <> '' THEN
        IF NOT Contact.GET(inContactPersonNo)  THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION("No.")));

      IF inMainProject<>'' THEN IF NOT JobMain.GET(inMainProject) THEN CLEAR(JobMain);
      CLEAR(NoSeries);
      IF (inGlobalDimension1Code <> '') AND (JobMain."Global Dimension 1 Code"<>inGlobalDimension1Code) AND (JobMain."Global Dimension 1 Code"<>'') THEN BEGIN
        NoSeries.SETRANGE("Department Code",inGlobalDimension1Code);
        NoSeries.SETRANGE("Default Nos.",TRUE);
        IF NoSeries.FINDSET THEN
          IF NoSeries.COUNT <> 1 THEN
            CLEAR(NoSeries);
        IF NoSeries.Code = '' THEN
          EXIT(STRSUBSTNO(WrongValueInField,NoSeries.FIELDCAPTION("Department Code")));
      END;

      //create sub-project
      IF (inNo = '') AND JobMain.GET(inMainProject) THEN BEGIN
        IF JobMain."Single/Main/Sub Project" <> JobMain."Single/Main/Sub Project"::"Main Project" THEN
          EXIT(STRSUBSTNO(TextMustBeMainPrj,JobMain."No."));

        CreateSubProjFrm.FillDefaults(JobMain."No.");
        CreateSubProjFrm.SetNewProjNos(NoSeries.Code);
        CreateSubProjFrm.SetSelectionCreateSubProject;
        CreateSubProjFrm.CopyProject;
        CreateSubProjFrm.GetCreatedProjectNo(inNo);
        CLEAR(CreateSubProjFrm);
        Job.GET(inNo);
        xJob := Job;
        Job."Main Project":= JobMain."No.";
        Job."Single/Main/Sub Project" := Job."Single/Main/Sub Project"::"Sub Project";
        IF JobMain."Project Status" > JobMain."Project Status"::Production THEN
          Job."Project Status" := Job."Project Status"::Production
        ELSE
          Job."Project Status" := JobMain."Project Status";
        Job.OnModifyFunc(xJob);
        Job."Created by" := inCreatedBy;
        Job.MODIFY(FALSE);
      END;
      Job.GET(inNo);
      xJob := Job;

      modif := FALSE;

      IF (inBilltoCustomerNo <> '') AND (NOT ProjectPrincipal.GET(Job."No.",inBilltoCustomerNo)) THEN BEGIN
        ProjectPrincipal.INIT;
        ProjectPrincipal."Project No." := Job."No.";
        ProjectPrincipal.VALIDATE(Principal, inBilltoCustomerNo);
        ProjectPrincipal.INSERT(TRUE);
      END;

      IF (inBilltoCustomerNo <> '') AND (inBilltoCustomerNo <> Job."Bill-to Customer No.") THEN BEGIN
        Job.VALIDATE("Bill-to Customer No.", inBilltoCustomerNo);
        modif := TRUE;
      END;

      //>>181107
      CLEAR(ProjectPrincipal);
      ProjectPrincipal.SETRANGE("Project No.", Job."No.");
      ProjectPrincipal.SETFILTER(Principal,'<>%1',inBilltoCustomerNo);
      IF ProjectPrincipal.FINDSET(TRUE) THEN
        ProjectPrincipal.DELETEALL(TRUE);
      ProjectPrincipal.SETRANGE(Principal);
      ProjectPrincipal.GET(Job."No.",inBilltoCustomerNo);
      //<<181107

      IF (inGlobalDimension1Code <> '') AND (inGlobalDimension1Code <> Job."Global Dimension 1 Code") THEN BEGIN
        Job.VALIDATE("Global Dimension 1 Code",inGlobalDimension1Code);
        modif := TRUE;
      END;
      IF (inDescription <> '') AND (inDescription <> Job.Description) THEN BEGIN
        Job.VALIDATE(Description, inDescription);
        modif := TRUE;
      END;
      IF //(inDescription2 <> '') AND
        (inDescription2 <> Job."Description 2") THEN BEGIN
        Job."Description 2" := inDescription2;
        modif := TRUE;
      END;
      IF //(inAddress <> '') AND
        (inAddress <> Job.Address) THEN BEGIN
        Job.VALIDATE(Address, inAddress);
        modif := TRUE;
      END;
      IF //(inAddress2 <> '') AND
        (inAddress2 <> Job."Address 2") THEN BEGIN
        Job.VALIDATE("Address 2", inAddress2);
        modif := TRUE;
      END;
      IF //(inPostCode <> '') AND
        (inPostCode <> Job."Post Code") THEN BEGIN
        Job.VALIDATE("Post Code", inPostCode);
        modif := TRUE;
      END;
      IF //(inCity <> '') AND
        (inCity <> Job.City) THEN BEGIN
        Job.VALIDATE(City, inCity);
        modif := TRUE;
      END;
      IF (inProjectManager <> '') AND (inProjectManager <> Job."Project Manager") THEN BEGIN
        Job.VALIDATE("Project Manager", inProjectManager);
        modif := TRUE;
      END;
      IF EVALUATE(valInt, inProjectStatus) THEN
      //  IF (valInt <> 0) AND (valInt <> Job."Project Status") THEN BEGIN
        IF (inProjectStatus<>'') AND (valInt <> Job."Project Status") THEN BEGIN
          Job.VALIDATE("Project Status", valInt);
          modif := TRUE;
        END;
      IF //(inExpediter <> '') AND
        (inExpediter <> Job.Expediter) THEN BEGIN
        Job.VALIDATE(Expediter, inExpediter);
        modif := TRUE;
      END;
      IF //(inStartingDate <> 0D) AND
        (inStartingDate <> Job."Starting Date") THEN BEGIN
        Job.VALIDATE("Starting Date", inStartingDate);
        modif := TRUE;
      END;
      IF //(inEndingDate <> 0D) AND
        (inEndingDate <> Job."Ending Date") THEN BEGIN
        Job.VALIDATE("Ending Date", inEndingDate);
        modif := TRUE;
      END;
      IF EVALUATE(valInt,inSettlementMethod) THEN
      //  IF (valInt <> 0) AND (valInt <> Job."Settlement Method") THEN BEGIN
        IF (inSettlementMethod <> '') AND (valInt <> Job."Settlement Method") THEN BEGIN
          Job.VALIDATE("Settlement Method", valInt);
          modif := TRUE;
        END;

      //>>190114
      CASE LOWERCASE(inInvReady) OF
        '0','n','no': valBool := FALSE;
        '1','y','yes': valBool := TRUE;
      END;
      IF valBool <> Job."Invoiced (ready)" THEN BEGIN
        Job."Invoiced (ready)" := valBool;
        modif := TRUE;
      END;
      //<<190114

      //>>200117
      IF inDeliveryAddressNote <> Job."Delivery Address Note" THEN BEGIN
        Job."Delivery Address Note" := inDeliveryAddressNote;
        modif := TRUE;
      END;
      //<<200117

      IF modif THEN BEGIN
        Job.OnModifyFunc(xJob);
        Job."Modified by" := inModifiedBy;
        Job.MODIFY(FALSE);
      END;

      modif := FALSE;
      IF EVALUATE(valDec, inContractAmount) THEN
      //  IF (valDec <> 0) AND (valDec <> ProjectPrincipal."Contract Amount") THEN BEGIN
        IF (inContractAmount <> '') AND (valDec <> ProjectPrincipal."Contract Amount") THEN BEGIN
          ProjectPrincipal.VALIDATE("Contract Amount", valDec);
          modif := TRUE;
        END;
      IF //(inOrderNoCustomer <> '') AND
        (inOrderNoCustomer <> ProjectPrincipal."Order No. Customer") THEN BEGIN
        ProjectPrincipal.VALIDATE("Order No. Customer", inOrderNoCustomer);
        modif := TRUE;
      END;
      IF //(inPrincipalReference <> '') AND
        (inPrincipalReference <> ProjectPrincipal."Principal Reference") THEN BEGIN
        ProjectPrincipal.VALIDATE("Principal Reference", inPrincipalReference);
        modif := TRUE;
      END;
      IF //(inContactPersonNo <> '') AND
        (inContactPersonNo <> ProjectPrincipal."Contact Person No.") THEN BEGIN
        ProjectPrincipal.VALIDATE("Contact Person No.", inContactPersonNo);
        modif := TRUE;
      END;

      IF modif THEN
        ProjectPrincipal.MODIFY(TRUE);


      IF inComment <> '' THEN BEGIN
        CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Job);
        CommentLine.SETRANGE("No.", inNo);
        IF CommentLine.FINDLAST THEN;
        CommentLine."Table Name" := CommentLine."Table Name"::Job;
        CommentLine."No." := inNo;
        CommentLine."Line No." += 10000;
        CommentLine.Code := inCode;
        CommentLine.Comment := inComment;
        CommentLine."Created by" := inModifiedBy;
        CommentLine.Date := TODAY;
        CommentLine."Time Created" := TIME;
        CommentLine.INSERT(FALSE);
      END;

      EXIT(inNo);
    END;

    PROCEDURE UpdatePriceToInvoiceInJob@1100285108(inputString@1100285100 : Text) : Text;
    VAR
      XMLDoc@1100285107 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100285106 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100285105 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLAttrib@1100285102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      XMLDOMManagement@1100285101 : Codeunit 6224;
      Nodes@1100285108 : Integer;
      i@1100285109 : Integer;
      Job@1100285128 : Record 11072003;
      xJob@1100285133 : Record 11072003;
      ProjectPrincipal@1100285129 : Record 11012005;
      modif@1100285130 : Boolean;
      inNo@1100285110 : Code[20];
      inBilltoCustomerNo@1100285111 : Code[20];
      inPriceListCode@1100285112 : Code[10];
      inModifiedBy@1100285113 : Code[50];
      inSalesDiscountTermPercent@1100285114 : Text;
      inSalesDiscountGroup1@1100285115 : Code[20];
      inCostPlusCustomer@1100285116 : Text;
      inCostPriceBehaviour@1100285117 : Text;
      inSurchargeLabor@1100285118 : Text;
      inSurchargeMaterial@1100285119 : Text;
      inSurchargeSubcontr@1100285120 : Text;
      inSurchargePlant@1100285121 : Text;
      inSurchargeSundry@1100285122 : Text;
      inCostSurchargeLabor@1100285123 : Text;
      inCostSurchargeMaterial@1100285124 : Text;
      inCostSurchargeSubcontr@1100285125 : Text;
      inCostSurchargePlant@1100285126 : Text;
      inCostSurchargeSundry@1100285127 : Text;
      CustomerPriceList@1100285131 : Record 11128273;
      DiscountTermGroup@1100285132 : Record 11012338;
      inDec@1100285134 : Decimal;
      inBool@1100285135 : Boolean;
      inSalesDiscountTermPercentDec@1101285000 : Decimal;
    BEGIN
      SaveInputToLogfile(inputString,'UpdatePriceToInvoiceInJob');
      //RFC1119
      //read input
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      RemoveNamespace(XMLDoc,XMLDocOut);
      XMLNodeList := XMLDocOut.GetElementsByTagName('UpdatePriceToInvoiceInJob');
      Nodes := XMLNodeList.Count;
      FOR i := 0 TO Nodes-1 DO BEGIN
        XMLNode := XMLNodeList.Item(i);

        inNo := XMLDOMManagement.FindNodeText(XMLNode, 'no');
        inBilltoCustomerNo := XMLDOMManagement.FindNodeText(XMLNode, 'billtoCustomerNo');
        inPriceListCode := XMLDOMManagement.FindNodeText(XMLNode, 'priceListCode');
        inModifiedBy := XMLDOMManagement.FindNodeText(XMLNode, 'modifiedBy');
        inSalesDiscountTermPercent := XMLDOMManagement.FindNodeText(XMLNode, 'salesDiscountTermPercent');
        inSalesDiscountGroup1 := XMLDOMManagement.FindNodeText(XMLNode, 'salesDiscountGroup1');
        inCostPlusCustomer := XMLDOMManagement.FindNodeText(XMLNode, 'costPlusCustomer');
        inCostPriceBehaviour := XMLDOMManagement.FindNodeText(XMLNode, 'costPriceBehaviour');
        inSurchargeLabor := XMLDOMManagement.FindNodeText(XMLNode, 'surchargeLabor');
        inSurchargeMaterial := XMLDOMManagement.FindNodeText(XMLNode, 'surchargeMaterial');
        inSurchargeSubcontr := XMLDOMManagement.FindNodeText(XMLNode, 'surchargeSubcontr');
        inSurchargePlant := XMLDOMManagement.FindNodeText(XMLNode, 'surchargePlant');
        inSurchargeSundry := XMLDOMManagement.FindNodeText(XMLNode, 'surchargeSundry');
        inCostSurchargeLabor := XMLDOMManagement.FindNodeText(XMLNode, 'costSurchargeLabor');
        inCostSurchargeMaterial := XMLDOMManagement.FindNodeText(XMLNode, 'costSurchargeMaterial');
        inCostSurchargeSubcontr := XMLDOMManagement.FindNodeText(XMLNode, 'costSurchargeSubcontr');
        inCostSurchargePlant := XMLDOMManagement.FindNodeText(XMLNode, 'costSurchargePlant');
        inCostSurchargeSundry := XMLDOMManagement.FindNodeText(XMLNode, 'costSurchargeSundry');

      END;

      IF inNo = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("No.")));
      IF inBilltoCustomerNo = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Bill-to Customer No.")));
      IF inModifiedBy = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Job.FIELDCAPTION("Modified by")));
      IF inCostPlusCustomer = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("Cost Plus Customer")));
      IF inCostPriceBehaviour = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("Cost Price Behaviour")));
      IF inSurchargeLabor = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("Surcharge % Labor")));
      IF inSurchargeMaterial = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("Surcharge % Material")));
      IF inSurchargeSubcontr = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("Surcharge % Subcontr.")));
      IF inSurchargePlant = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("Surcharge % Plant")));
      IF inSurchargeSundry = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("Surcharge % Sundry")));
      IF inCostSurchargeLabor = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("CostSurcharge % Labor")));
      IF inCostSurchargeMaterial = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("CostSurcharge % Material")));
      IF inCostSurchargeSubcontr = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("CostSurcharge % Subcontr.")));
      IF inCostSurchargePlant = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("CostSurcharge % Plant")));
      IF inCostSurchargeSundry = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjectPrincipal.FIELDCAPTION("CostSurcharge % Sundry")));


      IF inNo <> '' THEN
        IF NOT Job.GET(inNo) THEN EXIT(STRSUBSTNO(WrongValueInField,Job.FIELDCAPTION("No.")));
      xJob.GET(inNo);
      modif := FALSE;

      IF inBilltoCustomerNo <> '' THEN
        IF NOT ProjectPrincipal.GET(inNo,inBilltoCustomerNo) THEN EXIT(STRSUBSTNO(WrongValueInField,ProjectPrincipal.FIELDCAPTION(Principal)));

      IF inPriceListCode <> '' THEN BEGIN
        IF NOT CustomerPriceList.GET(inPriceListCode) THEN EXIT(STRSUBSTNO(WrongValueInField,CustomerPriceList.FIELDCAPTION(Code)));
        IF NOT CustomerPriceList."Display Price List" THEN EXIT(STRSUBSTNO(WrongValueInField,CustomerPriceList.FIELDCAPTION("Display Price List")));
      END;
      IF inSalesDiscountGroup1 <> '' THEN
        IF NOT DiscountTermGroup.GET(DiscountTermGroup.Level::Customer,inSalesDiscountGroup1) THEN EXIT(STRSUBSTNO(WrongValueInField,DiscountTermGroup.FIELDCAPTION(Code)));

      IF NOT EVALUATE(inDec,inSalesDiscountTermPercent) THEN inDec := 0;
      IF (inSalesDiscountGroup1 <> '') AND (inDec <> 0) THEN
        EXIT(STRSUBSTNO(WrongValueInField,'salesDiscountTermPercent or salesDiscountGroup1, only one-of'));
      IF ABS(inDec)>=100 THEN
        EXIT(STRSUBSTNO(WrongValueInField,'salesDiscountTermPercent'));

      IF (inBilltoCustomerNo <> '') AND (inBilltoCustomerNo <> Job."Bill-to Customer No.") THEN BEGIN
        Job.VALIDATE("Bill-to Customer No.", inBilltoCustomerNo);
        modif := TRUE;
      END;
      IF //(inPriceListCode <> '') AND
        (inPriceListCode <> Job."Price List Code") THEN BEGIN
        Job.VALIDATE("Price List Code", inPriceListCode);
        modif := TRUE;
      END;

      //one of...
      IF NOT EVALUATE(inDec,inSalesDiscountTermPercent) THEN inDec := 0;
      // IF (inDec <> 0) AND (inSalesDiscountGroup1 = '') AND (inDec <> Job."Sales Discount Term Percent") THEN BEGIN
      IF (inSalesDiscountTermPercent <> '') AND (inSalesDiscountGroup1 = '') AND (inDec <> Job."Sales Discount Term Percent") THEN BEGIN
        Job.VALIDATE("Sales Discount Term Group 1", '');
        Job.VALIDATE("Sales Discount Term Percent", inDec);
        modif := TRUE;
      END;
      // IF (inSalesDiscountGroup1 <> '') AND (inDec = 0) AND (inSalesDiscountGroup1 <> Job."Sales Discount Term Group 1") THEN BEGIN
      IF //(inSalesDiscountGroup1 <> '') AND
        (inSalesDiscountTermPercent = '') AND (inSalesDiscountGroup1 <> Job."Sales Discount Term Group 1") THEN BEGIN
        Job.VALIDATE("Sales Discount Term Percent", 0);
        Job.VALIDATE("Sales Discount Term Group 1", inSalesDiscountGroup1);
        modif := TRUE;
      END;

      IF modif THEN BEGIN
        Job.OnModifyFunc(xJob);
        Job."Modified by" := inModifiedBy;
        Job.MODIFY(FALSE);
        modif := FALSE;
      END;

      ProjectPrincipal.GET(inNo,inBilltoCustomerNo);
      IF (inCostPlusCustomer <> '') AND EVALUATE(inBool, inCostPlusCustomer) THEN
        IF (inBool <> ProjectPrincipal."Cost Plus Customer") THEN BEGIN
          ProjectPrincipal.VALIDATE("Cost Plus Customer", inBool);
          modif := TRUE;
        END;
      IF (inCostPriceBehaviour <> '') AND EVALUATE(inBool,inCostPriceBehaviour) THEN
        IF (inBool <> ProjectPrincipal."Cost Price Behaviour") THEN BEGIN
          ProjectPrincipal.VALIDATE("Cost Price Behaviour", inBool);
          modif := TRUE;
        END;
      IF (inSurchargeLabor <> '') AND EVALUATE(inDec, inSurchargeLabor) THEN
        IF (inDec <> ProjectPrincipal."Surcharge % Labor") THEN BEGIN
          ProjectPrincipal.VALIDATE("Surcharge % Labor", inDec);
          modif := TRUE;
        END;
      IF (inSurchargeMaterial <> '') AND EVALUATE(inDec, inSurchargeMaterial) THEN
        IF (inDec <> ProjectPrincipal."Surcharge % Material") THEN BEGIN
          ProjectPrincipal.VALIDATE("Surcharge % Material", inDec);
          modif := TRUE;
        END;
      IF (inSurchargeSubcontr <> '') AND EVALUATE(inDec, inSurchargeSubcontr) THEN
        IF (inDec <> ProjectPrincipal."Surcharge % Subcontr.") THEN BEGIN
          ProjectPrincipal.VALIDATE("Surcharge % Subcontr.", inDec);
          modif := TRUE;
        END;
      IF (inSurchargePlant <> '') AND EVALUATE(inDec, inSurchargePlant) THEN
        IF (inDec <> ProjectPrincipal."Surcharge % Plant") THEN BEGIN
          ProjectPrincipal.VALIDATE("Surcharge % Plant", inDec);
          modif := TRUE;
        END;
      IF (inSurchargeSundry <> '') AND EVALUATE(inDec, inSurchargeSundry) THEN
        IF (inDec <> ProjectPrincipal."Surcharge % Sundry") THEN BEGIN
          ProjectPrincipal.VALIDATE("Surcharge % Sundry", inDec);
          modif := TRUE;
        END;
      IF (inCostSurchargeLabor <> '') AND EVALUATE(inDec, inCostSurchargeLabor) THEN
        IF (inDec <> ProjectPrincipal."CostSurcharge % Labor") THEN BEGIN
          ProjectPrincipal.VALIDATE("CostSurcharge % Labor", inDec);
          modif := TRUE;
        END;
      IF (inCostSurchargeMaterial <> '') AND EVALUATE(inDec, inCostSurchargeMaterial) THEN
        IF (inDec <> ProjectPrincipal."CostSurcharge % Material") THEN BEGIN
          ProjectPrincipal.VALIDATE("CostSurcharge % Material", inDec);
          modif := TRUE;
        END;
      IF (inCostSurchargeSubcontr <> '') AND EVALUATE(inDec, inCostSurchargeSubcontr) THEN
        IF (inDec <> ProjectPrincipal."CostSurcharge % Subcontr.") THEN BEGIN
          ProjectPrincipal.VALIDATE("CostSurcharge % Subcontr.", inDec);
          modif := TRUE;
        END;
      IF (inCostSurchargePlant <> '') AND EVALUATE(inDec, inCostSurchargePlant) THEN
        IF (inDec <> ProjectPrincipal."CostSurcharge % Plant") THEN BEGIN
          ProjectPrincipal.VALIDATE("CostSurcharge % Plant", inDec);
          modif := TRUE;
        END;
      IF (inCostSurchargeSundry <> '') AND EVALUATE(inDec, inCostSurchargeSundry) THEN
        IF (inDec <> ProjectPrincipal."CostSurcharge % Sundry") THEN BEGIN
          ProjectPrincipal.VALIDATE("CostSurcharge % Sundry", inDec);
          modif := TRUE;
        END;

      IF modif THEN BEGIN
        ProjectPrincipal.MODIFY(TRUE);
        modif := FALSE;
      END;
    END;

    PROCEDURE UpdateSalesPriceByWageComponent@1100285110(inputString@1100285100 : Text) : Text;
    VAR
      XMLDoc@1100285107 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100285106 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100285105 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLAttrib@1100285102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      XMLDOMManagement@1100285101 : Codeunit 6224;
      Nodes@1100285108 : Integer;
      i@1100285109 : Integer;
      inDec@1100285117 : Decimal;
      inBool@1100285116 : Boolean;
      Job@1100285128 : Record 11072003;
      xJob@1100285133 : Record 11072003;
      modif@1100285130 : Boolean;
      ProjCostObWageSPrice@1100285111 : Record 11020384;
      inProjectno@1100285110 : Text;
      inCostObject@1100285112 : Text;
      inWageComponent@1100285113 : Text;
      inSalesPrice@1100285114 : Text;
      inModifiedBy@1100285115 : Text;
      DimensionValue@1100285118 : Record 349;
      GeneralLedgerSetup@1100285119 : Record 98;
      WageComponent@1100285120 : Record 11012014;
    BEGIN
      SaveInputToLogfile(inputString,'UpdateSalesPriceByWageComponent');
      //RFC1120
      //read input
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      RemoveNamespace(XMLDoc,XMLDocOut);
      XMLNodeList := XMLDocOut.GetElementsByTagName('UpdateSalesPriceByWageComponent');
      Nodes := XMLNodeList.Count;
      FOR i := 0 TO Nodes-1 DO BEGIN
        XMLNode := XMLNodeList.Item(i);

        inProjectno := XMLDOMManagement.FindNodeText(XMLNode, 'projectno');
        inCostObject := XMLDOMManagement.FindNodeText(XMLNode, 'costObject');
        inWageComponent := XMLDOMManagement.FindNodeText(XMLNode, 'wageComponent');
        inSalesPrice := XMLDOMManagement.FindNodeText(XMLNode, 'salesPrice');
        inModifiedBy := XMLDOMManagement.FindNodeText(XMLNode, 'modifiedBy');

      END;

      IF inProjectno = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjCostObWageSPrice.FIELDCAPTION("Project No.")));
      IF inCostObject = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjCostObWageSPrice.FIELDCAPTION("Cost Object")));
      IF inWageComponent = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjCostObWageSPrice.FIELDCAPTION("Wage Component")));
      IF inSalesPrice = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjCostObWageSPrice.FIELDCAPTION("Sales Price")));
      IF inModifiedBy = '' THEN EXIT(STRSUBSTNO(MissingValueInField,ProjCostObWageSPrice.FIELDCAPTION("Modified by")));

      IF STRLEN(inProjectno) > MAXSTRLEN(ProjCostObWageSPrice."Project No.") THEN EXIT(STRSUBSTNO(WrongValueInField,ProjCostObWageSPrice.FIELDCAPTION("Project No.")));
      IF STRLEN(inCostObject) > MAXSTRLEN(ProjCostObWageSPrice."Cost Object") THEN EXIT(STRSUBSTNO(WrongValueInField,ProjCostObWageSPrice.FIELDCAPTION("Cost Object")));
      IF STRLEN(inWageComponent) > MAXSTRLEN(ProjCostObWageSPrice."Wage Component") THEN EXIT(STRSUBSTNO(WrongValueInField,ProjCostObWageSPrice.FIELDCAPTION("Wage Component")));
      IF STRLEN(inModifiedBy) > MAXSTRLEN(ProjCostObWageSPrice."Modified by") THEN EXIT(STRSUBSTNO(WrongValueInField,ProjCostObWageSPrice.FIELDCAPTION("Modified by")));

      IF inProjectno <> '' THEN
        IF NOT Job.GET(inProjectno) THEN EXIT(STRSUBSTNO(WrongValueInField,Job.FIELDCAPTION("No.")));
      GeneralLedgerSetup.GET;
      IF inCostObject <> '' THEN
        IF NOT DimensionValue.GET(GeneralLedgerSetup."Global Dimension 2 Code",inCostObject) THEN
          EXIT(STRSUBSTNO(WrongValueInField,ProjCostObWageSPrice.FIELDCAPTION("Cost Object")));
      IF inWageComponent <> '' THEN
        IF NOT WageComponent.GET(inWageComponent) THEN
          EXIT(STRSUBSTNO(WrongValueInField,ProjCostObWageSPrice.FIELDCAPTION("Wage Component")));

      //"Project No.","Cost Object","Wage Component","Starting Date"
      ProjCostObWageSPrice.SETRANGE("Project No.", inProjectno);
      ProjCostObWageSPrice.SETRANGE("Cost Object", inCostObject);
      ProjCostObWageSPrice.SETRANGE("Wage Component", inWageComponent);
      ProjCostObWageSPrice.SETFILTER("Starting Date",'%1|..%2',0D,TODAY);
      ProjCostObWageSPrice.SETFILTER("Ending Date",'%1|%2..',0D,TODAY);
      IF NOT ProjCostObWageSPrice.FINDLAST THEN BEGIN
        ProjCostObWageSPrice."Project No." := inProjectno;
        ProjCostObWageSPrice."Cost Object" := inCostObject;
        ProjCostObWageSPrice."Wage Component" := inWageComponent;
        ProjCostObWageSPrice."Starting Date" := 0D;
        ProjCostObWageSPrice."Modified by" := inModifiedBy;
        ProjCostObWageSPrice."Creation Date" := CURRENTDATETIME;
        ProjCostObWageSPrice.INSERT(FALSE);
      END;
      modif := FALSE;

      IF (inSalesPrice <> '') AND EVALUATE(inDec,inSalesPrice) THEN
        IF (inDec <> ProjCostObWageSPrice."Sales Price") THEN BEGIN
        ProjCostObWageSPrice.VALIDATE("Sales Price", inDec);
          modif := TRUE;
        END;

      IF modif THEN BEGIN
        ProjCostObWageSPrice."Modified by" := inModifiedBy;
        ProjCostObWageSPrice.MODIFY(FALSE);
        modif := FALSE;
      END;

      EXIT('0'); //Success
    END;

    PROCEDURE CreateUpdatePrincipalContactPerson@1100285107(inputString@1100285100 : Text) : Text;
    VAR
      XMLDoc@1100285107 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100285106 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100285105 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLAttrib@1100285102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      XMLDOMManagement@1100285101 : Codeunit 6224;
      Nodes@1100285108 : Integer;
      i@1100285109 : Integer;
      j@1100285125 : Integer;
      modif@1100285130 : Boolean;
      inDec@1100285134 : Decimal;
      inBool@1100285135 : Boolean;
      Job@1100285128 : Record 11072003;
      ProjectPrincipal@1100285129 : Record 11012005;
      inCustNo@1100285104 : Text;
      inContNo@1100285111 : Text;
      inFirstName@1100285113 : Text;
      inSurname@1100285114 : Text;
      inPhoneNo@1100285115 : Text;
      inMobilePhoneNo@1100285116 : Text;
      inEMail@1100285117 : Text;
      inJobTitle@1100285118 : Text;
      inModifiedBy@1100285119 : Text;
      Customer@1100285120 : Record 18;
      Contact@1100285121 : Record 5050;
      ContactPerson@1100285131 : Record 5050;
      RMSetup@1100285110 : Record 5079;
      NoSeriesMgt@1100285112 : Codeunit 396;
      ContactBusinessRelation@1100285122 : Record 5054;
      CompRelationRec@1100285124 : Record 11012059;
      LeadingCompany@1100285123 : Text[50];
      CompNo@1100285126 : Code[20];
      ContPersID@1100285127 : Code[20];
      ContactFeatureType@1100285132 : Record 11012753;
    BEGIN
      SaveInputToLogfile(inputString,'CreateUpdatePrincipalContactPerson');
      //RFC1122
      //read input
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      RemoveNamespace(XMLDoc,XMLDocOut);
      XMLNodeList := XMLDocOut.GetElementsByTagName('CreateUpdatePrincipalContactPerson');
      Nodes := XMLNodeList.Count;
      FOR i := 0 TO Nodes-1 DO BEGIN
        XMLNode := XMLNodeList.Item(i);

        inCustNo := XMLDOMManagement.FindNodeText(XMLNode, 'custNo');
        inContNo := XMLDOMManagement.FindNodeText(XMLNode, 'contNo');
        inFirstName := XMLDOMManagement.FindNodeText(XMLNode, 'firstName');
        inSurname := XMLDOMManagement.FindNodeText(XMLNode, 'surName');
        inPhoneNo := XMLDOMManagement.FindNodeText(XMLNode, 'phoneNo');
        inMobilePhoneNo := XMLDOMManagement.FindNodeText(XMLNode, 'mobilePhoneNo');
        inEMail := XMLDOMManagement.FindNodeText(XMLNode, 'eMail');
        inJobTitle := XMLDOMManagement.FindNodeText(XMLNode, 'jobTitle');
        inModifiedBy := XMLDOMManagement.FindNodeText(XMLNode, 'modifiedBy');

      END;

      IF inCustNo = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Customer.TABLECAPTION+' '+Customer.FIELDCAPTION("No.")));
      IF inFirstName = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Contact.FIELDCAPTION("First Name")));
      IF inSurname = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Contact.FIELDCAPTION(Surname)));
      IF inModifiedBy = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Contact.FIELDCAPTION("Modified by")));

      IF STRLEN(inCustNo) > MAXSTRLEN(Customer."No.") THEN EXIT(STRSUBSTNO(WrongValueInField,Customer.TABLECAPTION+' '+Customer.FIELDCAPTION("No.")));
      IF STRLEN(inContNo) > MAXSTRLEN(Contact."No.") THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.TABLECAPTION+' '+Contact.FIELDCAPTION("No.")));
      IF STRLEN(inFirstName) > MAXSTRLEN(Contact."First Name") THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION("First Name")));
      IF STRLEN(inSurname) > MAXSTRLEN(Contact.Surname) THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION(Surname)));
      IF STRLEN(inPhoneNo) > MAXSTRLEN(Contact."Phone No.") THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION("Phone No.")));
      IF STRLEN(inMobilePhoneNo) > MAXSTRLEN(Contact."Mobile Phone No.") THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION("Mobile Phone No.")));
      IF STRLEN(inEMail) > MAXSTRLEN(Contact."E-Mail") THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION("E-Mail")));
      IF STRLEN(inJobTitle) > MAXSTRLEN(Contact."Job Title") THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION("Job Title")));
      IF STRLEN(inModifiedBy) > MAXSTRLEN(Contact."Modified by") THEN EXIT(STRSUBSTNO(WrongValueInField,Contact.FIELDCAPTION("Modified by")));

      RMSetup.GET;
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",RMSetup."Central Management");
      IF RMSetup."Central Management" AND (LeadingCompany<>'') AND (LeadingCompany <> COMPANYNAME) AND (RMSetup.Persons) THEN
        EXIT(STRSUBSTNO(WrongValueInField,'LeadingCompany'));

      IF NOT Customer.GET(inCustNo) THEN
        EXIT(STRSUBSTNO(WrongValueInField,Customer.TABLECAPTION+' '+Customer.FIELDCAPTION("No.")));

      ContactBusinessRelation.SETRANGE("Business Relation Code",RMSetup."Bus. Rel. Code for Customers");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.", inCustNo);
      IF NOT ContactBusinessRelation.FINDSET(FALSE) THEN
        EXIT(STRSUBSTNO(WrongValueInField,Customer.TABLECAPTION+' '+Customer.FIELDCAPTION("No.")+' '+STRSUBSTNO(MissingValueInTable,ContactBusinessRelation.TABLECAPTION)));

      Contact.RESET;
      Contact.SETRANGE("Company No.",ContactBusinessRelation."Contact No.");
      IF Contact.FINDFIRST THEN
        CompNo := Contact."Company No."
      ELSE
        EXIT(STRSUBSTNO(WrongValueInField,Customer.TABLECAPTION+' '+Customer.FIELDCAPTION("No.")+' '+STRSUBSTNO(MissingValueInTable,Contact.TABLECAPTION)));
      Contact.RESET;

      IF NOT Contact.InsertingPersonIsAllowed(FALSE) THEN
        EXIT(Text11012019);

      IF (NOT Contact.GET(inContNo)) OR (inContNo='') THEN BEGIN
        j:=0;
        REPEAT
          Contact.SETRANGE("Company No.",ContactBusinessRelation."No.");
          Contact.SETRANGE(Type,Contact.Type::Person);
          i := Contact.COUNT;
          IF (i > j) AND Contact.FINDFIRST THEN
            CompNo := Contact."Company No.";
          j := i;
        UNTIL ContactBusinessRelation.NEXT = 0;

        ContactPerson.INIT;
        ContPersID := '';
        RMSetup.GET;
        RMSetup.TESTFIELD("Person Nos.");

        ContactPerson.INIT;

        NoSeriesMgt.InitSeries(RMSetup."Person Nos.", '', 0D, ContactPerson."No.", ContactPerson."No. Series");
        ContactPerson.Type := ContactPerson.Type::Person;
        ContactPerson.INSERT(TRUE);

        UpdateContactPersonData(ContactPerson,inFirstName,inSurname,inPhoneNo,inMobilePhoneNo,inEMail,inJobTitle,inModifiedBy);
        ContPersID := ContactPerson."No.";

        CLEAR(Contact);
        Contact."Company No." := CompNo;
        Contact."Person No." := ContPersID;
        Contact.TESTFIELD("Company No.");
        Contact.TESTFIELD("Person No.");
        RMSetup.GET;
        RMSetup.TESTFIELD("Contact Nos.");
        Contact.INIT;
        NoSeriesMgt.InitSeries(RMSetup."Contact Nos.", '', 0D, Contact."No.", Contact."No. Series");
        Contact.Type := Contact.Type::Person;
        Contact.INSERT(TRUE);
        Contact.VALIDATE("Company No.", CompNo);
        Contact."Person No." := ContPersID;
        Contact.InheritFromPerson(ContactPerson);
        Contact.MODIFY(TRUE);
        ContactFeatureType.SETRANGE("Relation Type", ContactFeatureType."Relation Type"::Person);
        ContactFeatureType.SETRANGE(Code, Contact."No.");
        IF ContactFeatureType.FINDSET THEN
          REPEAT
            ContactFeatureType."Feature Group" := ''; // This avoids obligatory check error in delete trigger
            ContactFeatureType.DELETE(TRUE);
          UNTIL ContactFeatureType.NEXT = 0;
        Contact.CheckContactFeatures;

        inContNo := Contact."No.";
        UpdateContactPersonData(Contact,inFirstName,inSurname,inPhoneNo,inMobilePhoneNo,inEMail,inJobTitle,inModifiedBy);
      END;

      IF NOT Contact.ChangingPersonIsAllowed THEN
        EXIT(Text11012019);
      IF ContactPerson.GET(Contact."Person No.") THEN
        UpdateContactPersonData(ContactPerson,inFirstName,inSurname,inPhoneNo,inMobilePhoneNo,inEMail,inJobTitle,inModifiedBy);
      IF Contact.GET(Contact."No.") THEN
        UpdateContactPersonData(Contact,inFirstName,inSurname,inPhoneNo,inMobilePhoneNo,inEMail,inJobTitle,inModifiedBy);

      EXIT(inContNo);
    END;

    LOCAL PROCEDURE UpdateContactPersonData@1100285125(VAR Contact@1100285100 : Record 5050;inFirstName@1100285107 : Text;inSurname@1100285106 : Text;inPhoneNo@1100285105 : Text;inMobilePhoneNo@1100285104 : Text;inEMail@1100285103 : Text;inJobTitle@1100285102 : Text;inModifiedBy@1100285101 : Text);
    VAR
      modif@1100285108 : Boolean;
    BEGIN
      modif := FALSE;
      IF (inFirstName <> '') AND (inFirstName <> Contact."First Name") THEN BEGIN
        Contact.VALIDATE("First Name", inFirstName);
        modif := TRUE;
      END;
      IF (inSurname <> '') AND (inSurname <> Contact.Surname) THEN BEGIN
        Contact.VALIDATE(Surname, inSurname);
        modif := TRUE;
      END;
      IF //(inPhoneNo <> '') AND
        (inPhoneNo <> Contact."Phone No.") THEN BEGIN
        Contact.VALIDATE("Phone No.", inPhoneNo);
        modif := TRUE;
      END;
      IF //(inMobilePhoneNo <> '') AND
        (inMobilePhoneNo <> Contact."Mobile Phone No.") THEN BEGIN
        Contact.VALIDATE("Mobile Phone No.", inMobilePhoneNo);
        modif := TRUE;
      END;
      IF //(inEMail <> '') AND
        (inEMail <> Contact."E-Mail") THEN BEGIN
        Contact.VALIDATE("E-Mail", inEMail);
        modif := TRUE;
      END;
      IF //(inJobTitle <> '') AND
        (inJobTitle <> Contact."Job Title") THEN BEGIN
        Contact.VALIDATE("Job Title", inJobTitle);
        modif := TRUE;
      END;
      IF modif THEN BEGIN
        Contact.MODIFY(TRUE);
        Contact.VALIDATE("Modified by", inModifiedBy);
        Contact.MODIFY(FALSE);
        modif := FALSE;
      END;
    END;

    PROCEDURE AddProjDokToProforma@1100285109(inputString@1100285101 : Text) : Text;
    VAR
      XMLDoc@1100285100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100285102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode2@1100285113 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100285104 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLDOMManagement@1100285106 : Codeunit 6224;
      Nodes@1100285107 : Integer;
      i@1100285108 : Integer;
      modif@1100285110 : Boolean;
      inProjNo@1100285109 : Text;
      inFilenamn@1100285118 : Text;
      DocumentProperties@1100285112 : Record 11012746;
      RecRef@1100285111 : RecordRef;
      Job@1100285105 : Record 11072003;
      SalesHeader@1100285115 : Record 36;
      SalesLine@1100285116 : Record 37;
      DocumentLinkMgt@1100285124 : Codeunit 11012401;
      FileMgt@1100285123 : Codeunit 419;
      ExternalDocumentManagement@1100285122 : Codeunit 11012403;
      TargetDirectory@1100285121 : Text;
      TargetFileName@1100285120 : Text;
      TargetDocumentServiceURL@1100285119 : Text;
      DocumentLinkManagement@1100285117 : Codeunit 11012401;
      FolderAndFile@1100285125 : Text[250];
      SESetup@1100285126 : Record 11128004;
      TargetStorageType@1100285114 : Option;
      TargetFileURI@1100285127 : Text;
    BEGIN
      SaveInputToLogfile(inputString,'AddProjDokToProforma');
      //RFC1121
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      RemoveNamespace(XMLDoc,XMLDocOut);
      XMLNodeList := XMLDocOut.GetElementsByTagName('AddProjDokToProforma');
      Nodes := XMLNodeList.Count;
      FOR i := 0 TO Nodes-1 DO BEGIN
        XMLNode := XMLNodeList.Item(i);

        inProjNo  := XMLDOMManagement.FindNodeText(XMLNode, 'projectNo');
        inFilenamn  := XMLDOMManagement.FindNodeText(XMLNode, 'filename');
      END;

      IF inProjNo = '' THEN EXIT(STRSUBSTNO(MissingValueInField,SalesHeader.FIELDCAPTION("Job No.")));
      IF inFilenamn = '' THEN EXIT(STRSUBSTNO(MissingValueInField,'filename'));
      IF STRLEN(inProjNo) > MAXSTRLEN(SalesHeader."Job No.") THEN EXIT(STRSUBSTNO(WrongValueInField,SalesHeader.FIELDCAPTION("Job No.")));
      IF NOT Job.GET(inProjNo) THEN EXIT(STRSUBSTNO(WrongValueInField,Job.FIELDCAPTION("No."),'no job'));

      //Filnamn f†r vara max 25 tecken l†nga och m†ste ha fil„ndelsen pdf.
      IF STRLEN(inFilenamn) > 25 THEN EXIT(STRSUBSTNO(WrongValueInField,'filename','length'));
      IF UPPERCASE(FileMgt.GetExtension(inFilenamn)) <> 'PDF' THEN EXIT(STRSUBSTNO(WrongValueInField,'filename','extension'));

      //Filnamn f†r inte inneh†lla specialtecken, anv„nd enbart A-Z och 0-9.
      IF NOT FileMgt.IsValidFileName(inFilenamn) THEN EXIT(STRSUBSTNO(WrongValueInField,DocumentProperties.FIELDCAPTION(File),'invalid'));
      FolderAndFile := FileMgt.GetFileNameWithoutExtension(inFilenamn);
      FOR i:=1 TO STRLEN(FolderAndFile) DO
        IF NOT (UPPERCASE(FORMAT(FolderAndFile[i])) IN ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9']) THEN
          EXIT(STRSUBSTNO(WrongValueInField,DocumentProperties.FIELDCAPTION(File),'(AZ09) "'+FORMAT(FolderAndFile[i])+'"'));
      FolderAndFile := '';

      SalesHeader.SETFILTER("Document Type",'%1|%2',SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice);
      SalesHeader.SETRANGE("Job No.",inProjNo);
      // Om det inte finns n†gon KFF/Pro Forma-faktura i projektet skall ett fel returneras.
      IF SalesHeader.ISEMPTY THEN
        EXIT(STRSUBSTNO('ERR: Project %1 has NO orders/invoices created',inProjNo));
      // Om det finns fler „n en KFF/Pro Forma-faktura liggande i det aktuella projektet skall ett fel returneras, eftersom det d† inte g†r att avg”ra var bilagan skall sparas.
      IF SalesHeader.COUNT > 1 THEN
        EXIT(STRSUBSTNO('ERR: Project %1 has %2 orders/invoices created',inProjNo,SalesHeader.COUNT));
      SalesHeader.FINDFIRST;

      // Imdok kommer (innan detta Webbservice-anrop g”rs) att ha sammanst„llt ett antal bilagor i projektet som en sammanslagen PDF-fil som skall skickas med en kommande kundfaktura.
      // Imdok skall allts† lagra en PDF-fil p† en f”rutbest„mnd plats och sedan anropa 4PS f”r att lagra den aktuella filen p† Êr„tt platsË utifr†n 4PS dokumenthantering.
      // S”kv„g till en utdelad katalog d„r Imdok tillf„lligt placerar pdf-filer definieras i 4PS som en variabel under ÊNordiska inst„llningarË.
      // Det inneb„r att 4PS kan ha en inst„llning per f”retag.
      // Motsvarande inst„llning till den utdelade katalogen skall ocks† finnas i Imdok.
      IF NOT SESetup.GET(SESetup."Line type"::Setup,'IMDOKWS','INVDOCPATH') THEN BEGIN
        SESetup.INIT;
        SESetup."Line type" := SESetup."Line type"::Setup;
        SESetup.Code := 'IMDOKWS';
        SESetup."Code 2" := 'INVDOCPATH';
        SESetup.Description := 'S”kv„g till en utdelad katalog d„r Imdok tillf„lligt placerar pdf-filer "Value (txt)"';
        SESetup.INSERT;
      END;
      IF SESetup."Value (txt)" = '' THEN
        EXIT('ERR: missing setup');
      FolderAndFile := SESetup."Value (txt)"+'\'+inFilenamn;

      //Om det av n†gon anledning inte g†r att hitta eller behandla den fil som Imdok (s„ger att det systemet har lagrat) s† skall ett fel returneras.
      IF NOT FileMgt.ClientFileExists(FolderAndFile) THEN
        EXIT('ERR: missing file');

      DocumentProperties.INIT;
      DocumentProperties."External Document" := TRUE;
      DocumentProperties."Document Type" := 'HM-INV';
      DocumentProperties."No.":='';
      DocumentProperties.Description:=inFilenamn;
      DocumentProperties.INSERT(TRUE);
      RecRef.GETTABLE(SalesHeader);

      // ExternalDocumentManagement.RegisterFileCopyOnly(
      //  FolderAndFile,//SourceFileName
      //  DocumentProperties."Document Type",//DocumentTypeCode
      //  TargetDirectory,//TargetDirectory
      //  TargetFileName,//TargetFileName
      //  TargetDocumentServiceURL);//TargetDocumentServiceURL
      ExternalDocumentManagement.RegisterFileCopyOnly(
        FolderAndFile,//SourceFileURI
        DocumentProperties."Document Type",//DocumentTypeCode
        TODAY,//CreationDate
        TargetFileURI,//TargetFileURI
        TargetStorageType);//TargetStorageType
      FileMgt.SplitFileURI(TargetStorageType,TargetFileURI,TargetDirectory,TargetFileName);

      DocumentProperties.VALIDATE(File, TargetFileName);
      DocumentProperties.VALIDATE("Document Service URL", TargetDocumentServiceURL);
      DocumentProperties.MODIFY(TRUE);
      DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, RecRef.RECORDID);

      IF NOT FileMgt.DeleteClientFile(FolderAndFile) THEN
        EXIT('ERR: failed to delete file');

      EXIT('0');
    END;

    PROCEDURE UpdateEmployee@1100285112(inputString@1100285100 : Text) : Text;
    VAR
      XMLDoc@1100285109 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocOut@1100285108 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100285107 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode2@1100285106 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100285105 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLDOMManagement@1100285104 : Codeunit 6224;
      Nodes@1100285103 : Integer;
      i@1100285102 : Integer;
      modif@1100285101 : Boolean;
      inSalaryNo@1100285110 : Text;
      inTradeAssociation@1100285111 : Text;
      Employee@1100285112 : Record 5200;
      TradeAssociation@1100285113 : Record 11012015;
    BEGIN
      //RFC1132
      SaveInputToLogfile(inputString,'UpdateEmployee');

      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      RemoveNamespace(XMLDoc,XMLDocOut);
      XMLNodeList := XMLDocOut.GetElementsByTagName('UpdateEmployee');
      Nodes := XMLNodeList.Count;
      FOR i := 0 TO Nodes-1 DO BEGIN
        XMLNode := XMLNodeList.Item(i);

        inSalaryNo := XMLDOMManagement.FindNodeText(XMLNode, 'salaryNo');
        inTradeAssociation := XMLDOMManagement.FindNodeText(XMLNode, 'tradeAssociation');
      END;

      IF inSalaryNo = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Employee.FIELDCAPTION("Salary No.")));
      IF inTradeAssociation = '' THEN EXIT(STRSUBSTNO(MissingValueInField,Employee.FIELDCAPTION("Trade Association")));
      IF STRLEN(inSalaryNo) > MAXSTRLEN(Employee."Salary No.") THEN EXIT(STRSUBSTNO(WrongValueInField,Employee.FIELDCAPTION("Salary No."),'length'));
      IF STRLEN(inTradeAssociation) > MAXSTRLEN(Employee."Trade Association") THEN EXIT(STRSUBSTNO(WrongValueInField,Employee.FIELDCAPTION("Trade Association"),'length'));

      Employee.SETCURRENTKEY("Salary No.");
      Employee.SETRANGE("Salary No.",inSalaryNo);
      IF Employee.COUNT <> 1 THEN
        EXIT(STRSUBSTNO(WrongValueInField,Employee.FIELDCAPTION("Salary No."),'count'));
      IF NOT Employee.FINDFIRST THEN
        EXIT(STRSUBSTNO(WrongValueInField,Employee.FIELDCAPTION("Salary No.")));

      IF NOT TradeAssociation.GET(inTradeAssociation) THEN
        EXIT(STRSUBSTNO(WrongValueInField,Employee.FIELDCAPTION("Trade Association"),'missing'));

      modif := FALSE;
      IF (inTradeAssociation <> '') AND (inTradeAssociation <> Employee."Trade Association") THEN BEGIN
        Employee.VALIDATE("Trade Association", inTradeAssociation);
        modif := TRUE;
      END;

      IF modif THEN BEGIN
        Employee.MODIFY(TRUE);
        modif := FALSE;
      END;
      EXIT('0');
    END;

    LOCAL PROCEDURE SaveInputToLogfile@1101285000(inputString@1101285000 : Text;functName@1101285001 : Text);
    VAR
      SESetup@1101285002 : Record 11128004;
      f@1101285003 : File;
      XMLDoc@1101285009 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMManagement@1101285004 : Codeunit 6224;
      fullFile@1101285005 : Text;
    BEGIN
      IF NOT SESetup.GET(SESetup."Line type"::Setup,'IMDOKWS','WSLOG') THEN
        EXIT;
      IF (NOT SESetup."Value (bool)") OR (inputString='') OR (functName='') THEN
        EXIT;

      // fullFile := SESetup."Value (txt)"+'\'+functName+FORMAT(TIME,0,'<Minutes,2><Seconds,2>')+'.xml';
      fullFile := SESetup."Value (txt)"+'\'+functName+FORMAT(TIME,0,'<Seconds,2>')+'.xml';
      IF FILE.EXISTS(fullFile) THEN
        FILE.ERASE(fullFile);

      XMLDoc := XMLDoc.XmlDocument;
      //>>190114
      // XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc);
      // XMLDoc.Save(fullFile);
      IF XMLDOMManagement.LoadXMLDocumentFromText(inputString,XMLDoc) THEN BEGIN
        XMLDoc.Save(fullFile);
        EXIT;
      END;

      //not XML then TXT
      fullFile := SESetup."Value (txt)"+'\'+functName+FORMAT(TIME,0,'<Seconds,2>')+'.txt';
      IF FILE.EXISTS(fullFile) THEN
        FILE.ERASE(fullFile);
      f.TEXTMODE(TRUE);
      f.WRITEMODE(TRUE);
      IF f.CREATE(fullFile) THEN BEGIN
        f.WRITE(inputString);
        f.CLOSE;
        EXIT;
      END;
      //<<190114
    END;

    BEGIN
    {
      161115 ITERO.AC First version of Web Service used by Imdok
                      The purpose is that Imdok should be able to call
      1712xx ITERO.FH RFC235+RFC236
      180102 ITERO.DL pure283958 replace NAS-service with WS-call

      181010 ORANGO.DL RFC242 Webbservice f”r att sl„ppa en viss tidrapport; ReleaseHourAcc()
      181012 ORANGO.DL RFC1118 Webbservice f”r att kunna l„gga upp ett underprojekt fr†n Imdok; CreateSubProjectFromMainProject()
      181015 ORANGO.DL RFC1119 Webbservice f”r att kunna uppdatera prisinformation f”r fakturering i ett projekt; UpdatePriceToInvoiceInJob()
      181016 ORANGO.DL RFC1120 Webbservice f”r att kunna uppdatera f”rs„ljningspriser per l”neart i ett projekt; UpdateSalesPriceByWageComponent()
      181017 ORANGO.DL RFC1122 Webbservice f”r att kunna l„gga till eller uppdatera en kontaktperson hos en kund; CreateUpdatePrincipalContactPerson() + UpdateContactPersonData()
      181022 ORANGO.DL RFC1121 Webbservice f”r att kunna l„gga till en kundfakturabilaga fr†n Imdok (Serviceordermodul SOM) i ett befintlig projekt i 4PS.; AddProjDokToProforma()
      181024 ORANGO.DL RFC1132 Webbservice f”r uppdatering av information p† personalkortet; UpdateEmployee()
      181101 ORANGO.DL RFC1118,1119 justeringar efter test
      181107 ORANGO.DL RFC1118,1119 justeringar efter test
      181108 ORANGO.DL till„gg av loggning av anrop
      181112 ORANGO.DL RFC1118b, borttag av kontroll att 10 f„lt har v„rden -> m”jlighet att blanka ut v„rden.
                       RFC1119b, borttag av kontroll att 2 f„lt har v„rden -> m”jlighet att blanka ut v„rden.
                       RFC1122b, borttag av kontroll att 4 f„lt har v„rden -> m”jlighet att blanka ut v„rden.
      181114 ORANGO.DL RFC242 justeringar efter test
      200117 ORANGO.FH RFC1168 Lagt till "deliveryAddressNote"
    }
    END.
  }
}

