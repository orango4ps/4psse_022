OBJECT Table 11012913 Investm. Proposal Rubric Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckFixed();
             END;

    OnModify=BEGIN
               CheckFixed();
             END;

    OnDelete=BEGIN
               CheckFixed();

               DeleteBudgetToDistribute(Rec);
               DeleteInvPropBudgetLines(Rec);
               CASE Type OF
                 Type::Costs,
                 Type::Revenues:
                   UpdateSurcharges(Rec, FALSE);
                 Type::"Percentage Costs",
                 Type::"Percentage Revenues",
                 Type::"Costs as Perc. Revenues",
                 Type::"Revenues as Perc. Costs",
                 Type::"Costs to Distr. as Perc. Rev.":
                   BEGIN
                     Percentage := 0;
                     UpdateSurcharges(Rec, TRUE);
                   END;
               END;
             END;

    OnRename=BEGIN
               CheckFixed();
             END;

    CaptionML=[ENU=Investment Proposal Rubric Line;
               NOR=Investeringsforslag, rubrikkrad;
               SVE=Investeringsf”rslag, rubriksrad];
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation="Project Development"."Project No.";
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Version             ;Code10        ;TableRelation="Investment Proposal".Version WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Version;
                                                              NOR=Versjon;
                                                              SVE=Version];
                                                   NotBlank=Yes }
    { 30  ;   ;Rubric Code         ;Code10        ;CaptionML=[ENU=Rubric Code;
                                                              NOR=Rubrikkode;
                                                              SVE=Rubrikkod];
                                                   NotBlank=Yes }
    { 40  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF (Type = Type::Line) THEN
                                                                  Description := '';
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 50  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF NOT (Type IN [Type::Subtotal, Type::Balance, Type::"Perc. (Sub)Totals"]) THEN  //*15625.c
                                                                  TESTFIELD(Totaling, '');

                                                                IF NOT (Type IN [Type::"Percentage Costs", Type::"Percentage Revenues",
                                                                                 Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                                                                                 Type::"Costs to Distr. as Perc. Rev."])
                                                                THEN BEGIN
                                                                  TESTFIELD(Percentage, 0);
                                                                  IF (Type <> Type::"Perc. (Sub)Totals") THEN  //*15625.n
                                                                    TESTFIELD("Percentage Filter", '');
                                                                END;

                                                                IF NOT (Type IN [Type::Costs, Type::Revenues, Type::"Percentage Costs", Type::"Percentage Revenues",
                                                                                 Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                                                                                 Type::"Costs to Distr. as Perc. Rev."])
                                                                THEN
                                                                  TESTFIELD("Cost Object Filter", '');

                                                                IF (Type = Type::Line) THEN
                                                                  TESTFIELD(Description, '');

                                                                IF NOT (Type IN [Type::Costs, Type::Revenues, Type::"Costs to Distr. as Perc. Rev."]) THEN BEGIN
                                                                  "Budget Distribution" := "Budget Distribution"::" ";
                                                                  "Released Budget Manual" := 0;
                                                                END;

                                                                IF (Type <> Type::"Perc. (Sub)Totals") THEN  //*15625.sn
                                                                  "Tot.Type for Perc. (Sub)Totals" := 0
                                                                ELSE BEGIN
                                                                  IF "Tot.Type for Perc. (Sub)Totals" = 0 THEN
                                                                    "Tot.Type for Perc. (Sub)Totals" := "Tot.Type for Perc. (Sub)Totals"::"Subtotal (P) - Subtotal (T)";
                                                                END;  //*15625.en

                                                                IF (xRec.Type <> Type) THEN BEGIN
                                                                  IF ((xRec.Type = Type::Costs) OR (xRec.Type = Type::Revenues)) AND (CurrFieldNo = FIELDNO(Type)) THEN BEGIN
                                                                    CASE CheckInvPropBudgetLinesPresent() OF
                                                                      1:
                                                                        IF NOT CONFIRM(Text001) THEN
                                                                          ERROR('');
                                                                      2:
                                                                        IF NOT CONFIRM(Text002) THEN
                                                                          ERROR('');
                                                                      3:
                                                                        IF NOT CONFIRM(Text003) THEN
                                                                          ERROR('');
                                                                    END;
                                                                  END;
                                                                  IF (xRec.Type = Type::Costs) OR
                                                                     (xRec.Type = Type::Revenues) OR
                                                                     (xRec.Type = Type::"Percentage Costs") OR
                                                                     (xRec.Type = Type::"Percentage Revenues") OR
                                                                     (xRec.Type = Type::"Costs as Perc. Revenues") OR
                                                                     (xRec.Type = Type::"Revenues as Perc. Costs") OR
                                                                     (xRec.Type = Type::"Costs to Distr. as Perc. Rev.")
                                                                  THEN BEGIN
                                                                    DeleteInvPropBudgetLines(Rec);
                                                                    UpdateSurcharges(Rec, TRUE);
                                                                  END ELSE BEGIN
                                                                    DeleteInvPropBudgetLines(Rec);
                                                                  END;
                                                                  DeleteBudgetToDistribute(Rec);
                                                                  IF (Type = Type::"Costs to Distr. as Perc. Rev.") AND ("Budget Distribution" = 0) THEN
                                                                    "Budget Distribution" := "Budget Distribution"::Scheme;
                                                                  IF (Type IN [Type::Title, Type::Subtotal, Type::Balance]) THEN
                                                                    Bold := TRUE
                                                                  ELSE
                                                                    Indentation := 1;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Text,Title,Costs,Revenues,Percentage Costs,Percentage Revenues,Subtotal,Balance,ROS,EPV,PRI,Line,Costs as Perc. Revenues,Revenues as Perc. Costs,Costs to Distribute as Perc. Revenues,Perc. (Sub)Totals;
                                                                    NOR=Tekst,tittel,Kostnader,Inntekter,Prosent kostnader,Prosent inntekter,Subtotal,Saldo,ROS,EPV,PRI,Rad,Kostnader som prosent av inntekter,Inntekter som prosent av kostnader,Kostnader † distribuere som prosent av inntekter,Prosent av (Sub)Totaler;
                                                                    SVE=Text,Titel,Kostnader,Int„kter,Pocentkostnader,Procentint„kter,Subtotal,Balans,ROS,EPV,PRI,Rad,Kostnader som proc. Int„kter,Int„kter som proc. Kostnader,Kostnader att f”rdela som proc. Int„kter,Proc. (Sub)totalt];
                                                   OptionString=Text,Title,Costs,Revenues,Percentage Costs,Percentage Revenues,Subtotal,Balance,ROS,EPV,PRI,Line,Costs as Perc. Revenues,Revenues as Perc. Costs,Costs to Distr. as Perc. Rev.,Perc. (Sub)Totals }
    { 55  ;   ;Percentage          ;Decimal       ;OnValidate=BEGIN
                                                                IF (Percentage <> 0) AND
                                                                   (NOT (Type IN [Type::"Percentage Costs", Type::"Percentage Revenues",
                                                                                  Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                                                                                  Type::"Costs to Distr. as Perc. Rev."]))
                                                                THEN
                                                                  FIELDERROR(Percentage, STRSUBSTNO(Text000, FIELDCAPTION(Type), Type));

                                                                CASE Type OF
                                                                  Type::"Percentage Costs",
                                                                  Type::"Percentage Revenues",
                                                                  Type::"Costs as Perc. Revenues",
                                                                  Type::"Revenues as Perc. Costs",
                                                                  Type::"Costs to Distr. as Perc. Rev.":
                                                                    UpdateSurcharges(Rec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Percentage;
                                                              NOR=Prosent;
                                                              SVE=Procent] }
    { 60  ;   ;Totaling            ;Text250       ;OnValidate=BEGIN
                                                                IF (Totaling <> '') AND (NOT (Type IN [Type::Subtotal, Type::Balance, Type::"Perc. (Sub)Totals"])) THEN  //*15625.c
                                                                  FIELDERROR(Totaling, STRSUBSTNO(Text000, FIELDCAPTION(Type), Type));

                                                                Totaling := UPPERCASE(Totaling);
                                                              END;

                                                   CaptionML=[ENU=Totaling;
                                                              NOR=Summering;
                                                              SVE=Summeringsintervall] }
    { 70  ;   ;Budget Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Investment Proposal Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                              Version=FIELD(Version),
                                                                                                              Rubric Code=FIELD(Rubric Code),
                                                                                                              Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Budget;
                                                              NOR=Budsjett;
                                                              SVE=Budget] }
    { 80  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              NOR=Dato filter;
                                                              SVE=Datumfilter] }
    { 95  ;   ;Revenue Budget      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Investment Proposal Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                              Version=FIELD(Version),
                                                                                                              Budget Type=CONST(Revenue),
                                                                                                              Rubric Code=FIELD(Rubric Filter),
                                                                                                              Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Revenue Budget;
                                                              NOR=Inntektsbudsjett;
                                                              SVE=Int„ktsbudget] }
    { 96  ;   ;Cost Budget         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Investment Proposal Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                              Version=FIELD(Version),
                                                                                                              Budget Type=CONST(Cost),
                                                                                                              Rubric Code=FIELD(Rubric Filter),
                                                                                                              Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Cost Budget;
                                                              NOR=Kostbudsjett;
                                                              SVE=Kostnadsbudget] }
    { 100 ;   ;Percentage Filter   ;Text250       ;OnValidate=BEGIN
                                                                IF ("Percentage Filter" <> '') AND
                                                                   (NOT (Type IN [Type::"Percentage Costs", Type::"Percentage Revenues",
                                                                                  Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                                                                                  Type::"Costs to Distr. as Perc. Rev.",
                                                                                  Type::"Perc. (Sub)Totals"]))  //*15625.n
                                                                THEN
                                                                  FIELDERROR("Percentage Filter", STRSUBSTNO(Text000, FIELDCAPTION(Type), Type));

                                                                "Percentage Filter" := UPPERCASE("Percentage Filter");

                                                                CASE Type OF
                                                                  Type::"Percentage Costs",
                                                                  Type::"Percentage Revenues",
                                                                  Type::"Costs as Perc. Revenues",
                                                                  Type::"Revenues as Perc. Costs",
                                                                  Type::"Costs to Distr. as Perc. Rev.":
                                                                    UpdateSurcharges(Rec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Percentage Filter;
                                                              NOR=Prosentfilter;
                                                              SVE=Procentfilter];
                                                   Description=Filter on Rubric }
    { 110 ;   ;Cost Object Filter  ;Text250       ;TableRelation=IF (Type=FILTER(Revenues|Percentage Revenues|Revenues as Perc. Costs)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                                                      Cost Type=CONST(Revenue))
                                                                                                                                                                      ELSE IF (Type=FILTER(Costs|Percentage Costs|Costs as Perc. Revenues|Costs to Distr. as Perc. Rev.)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                        Cost Type=FILTER(<>Revenue));
                                                   OnValidate=BEGIN
                                                                IF ("Cost Object Filter" <> '') AND
                                                                   (NOT (Type IN [Type::Costs, Type::Revenues, Type::"Percentage Costs", Type::"Percentage Revenues",
                                                                                  Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                                                                                  Type::"Costs to Distr. as Perc. Rev."]))
                                                                THEN
                                                                  FIELDERROR("Cost Object Filter", STRSUBSTNO(Text000, FIELDCAPTION(Type), Type));

                                                                "Cost Object Filter" := UPPERCASE("Cost Object Filter");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              NOR=Kostnadsobjekt, filter;
                                                              SVE=Filter f”r kostnadsb„rare];
                                                   CaptionClass='1,3,2' }
    { 120 ;   ;Rubric Filter       ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Investm. Proposal Rubric Line"."Rubric Code" WHERE (Project No.=FIELD(Project No.),
                                                                                                                      Version=FIELD(Version));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Rubric Filter;
                                                              NOR=Rubrikkfilter;
                                                              SVE=Rubrikfilter] }
    { 130 ;   ;Indentation         ;Integer       ;OnValidate=BEGIN
                                                                CheckFixed();
                                                                IF (Indentation <> 0) AND (Type = Type::Line) THEN
                                                                  Indentation := 0;  // Make zero, no error

                                                                IF (Indentation < 0) OR (Indentation > MaxValueIndentation()) THEN
                                                                  FIELDERROR(Indentation, STRSUBSTNO(Text004, Indentation, MaxValueIndentation()));
                                                              END;

                                                   CaptionML=[ENU=Indentation;
                                                              NOR=Innrykking;
                                                              SVE=Indrag];
                                                   MinValue=0;
                                                   Editable=No }
    { 140 ;   ;Bold                ;Boolean       ;OnValidate=BEGIN
                                                                CheckFixed();
                                                                IF Bold AND (Type = Type::Line) THEN
                                                                  Bold := FALSE;  // Make false, no error
                                                              END;

                                                   CaptionML=[ENU=Bold;
                                                              NOR=Fet;
                                                              SVE=Fet] }
    { 150 ;   ;Budget Distribution ;Option        ;OnValidate=BEGIN
                                                                IF NOT (Type IN [Type::Costs, Type::Revenues, Type::"Costs to Distr. as Perc. Rev."]) THEN
                                                                  "Budget Distribution" := "Budget Distribution"::" ";

                                                                IF (Type = Type::"Costs to Distr. as Perc. Rev.") THEN
                                                                  TESTFIELD("Budget Distribution");

                                                                IF ("Budget Distribution" <> xRec."Budget Distribution") AND (CurrFieldNo = FIELDNO("Budget Distribution")) AND
                                                                   (Percentage <> 0) AND ("Percentage Filter" <> '') AND (Type = Type::"Costs to Distr. as Perc. Rev.")
                                                                THEN
                                                                  UpdateSurcharges(Rec, TRUE);
                                                              END;

                                                   CaptionML=[ENU=Budget Distribution;
                                                              NOR=Budsjettdistribusjon;
                                                              SVE=Budgetf”rdelning];
                                                   OptionCaptionML=[ENU=" ,Linear,Scheme";
                                                                    NOR=" ,Line‘rt,Skjema";
                                                                    SVE=" ,Linj„r,Plan"];
                                                   OptionString=[ ,Linear,Scheme] }
    { 160 ;   ;Tot.Type for Perc. (Sub)Totals;Option;
                                                   OnValidate=BEGIN
                                                                //*15625.n
                                                                IF (Type <> Type::"Perc. (Sub)Totals") THEN
                                                                  TESTFIELD("Tot.Type for Perc. (Sub)Totals", 0)
                                                                ELSE
                                                                  TESTFIELD("Tot.Type for Perc. (Sub)Totals");
                                                              END;

                                                   CaptionML=[ENU=Total Type for Perc. (Sub)Totals;
                                                              NOR=Totaltype for prosent av (sub)totaler;
                                                              SVE=Totalt typ f”r procent (Sub)totalt];
                                                   OptionCaptionML=[ENU=" ,Subtotal (Perc.Filter) - Subtotal (Totaling),Subtotal (Perc.Filter) - Balance (Totaling),Balance (Perc.Filter) - Subtotal (Totaling),Balance (Perc.Filter) - Balance (Totaling)";
                                                                    NOR=" ,Subtotal (Pros.Filter) - Subtotal (Totalt),Subtotal (Pros.Filter) - Balanse (Totalt),Balance (Pros.Filter) - Subtotal (Totalt),Balance (Pros.Filter) - Balanse (Totalt)";
                                                                    SVE=" ,Delsumma (Proc.filter) - Delsumma (totalt), Delsumma (Proc.filter) - Balans (totalt), Balans (Proc.filter) - Delsumma (totalt), Balans (Proc.filter) - Balans (totalt)"];
                                                   OptionString=[ ,Subtotal (P) - Subtotal (T),Subtotal (P) - Balance (T),Balance (P) - Subtotal (T),Balance (P) - Balance (T)] }
    { 170 ;   ;Released Budget Manual;Decimal     ;OnValidate=BEGIN
                                                                IF NOT (Type IN [Type::Costs, Type::Revenues]) THEN
                                                                  "Released Budget Manual" := 0;
                                                              END;

                                                   CaptionML=[ENU=Released Budget (Manual);
                                                              NOR=Frigitt budsjett (manuell);
                                                              SVE=Sl„ppt budget (manuell)];
                                                   BlankZero=Yes;
                                                   Description=Informative, nothing is done with it (Heilijgers) }
    { 171 ;   ;Released Cost Budget Manual;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Investm. Proposal Rubric Line"."Released Budget Manual" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                   Version=FIELD(Version),
                                                                                                                                   Rubric Code=FIELD(Rubric Filter),
                                                                                                                                   Type=FILTER(Costs|Percentage Costs|Costs as Perc. Revenues|Costs to Distr. as Perc. Rev.)));
                                                   CaptionML=[ENU=Released Cost Budget (Manual);
                                                              NOR=Frigitt kostbudsjett (manuell);
                                                              SVE=Sl„ppt kostnadsbudget (manuell)];
                                                   Description=For type 'Subtotal' and 'Balance';
                                                   Editable=No }
    { 172 ;   ;Released Revenue Budget Manual;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Investm. Proposal Rubric Line"."Released Budget Manual" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                   Version=FIELD(Version),
                                                                                                                                   Rubric Code=FIELD(Rubric Filter),
                                                                                                                                   Type=FILTER(Revenues|Percentage Revenues|Revenues as Perc. Costs)));
                                                   CaptionML=[ENU=Released Revenue Budget (Manual);
                                                              NOR=Frigitt inntektsbudsjett (manuell);
                                                              SVE=Sl„ppt int„ktsbudget (manuell)];
                                                   Description=For type 'Subtotal' and 'Balance';
                                                   Editable=No }
    { 205 ;   ;Actual Revenues     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry"."Total Price (LCY)" WHERE (Job No.=FIELD(Project No.),
                                                                                                                  Global Dimension 2 Code=FIELD(FILTER(Cost Object Filter)),
                                                                                                                  Posting Date=FIELD(Date Filter),
                                                                                                                  Advance Payment=CONST(No)));
                                                   CaptionML=[ENU=Actual Revenues;
                                                              NOR=Faktiske inntekter;
                                                              SVE=Int„kter] }
    { 210 ;   ;Actual Cost         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Total Cost (LCY)" WHERE (Job No.=FIELD(Project No.),
                                                                                                                Global Dimension 2 Code=FIELD(FILTER(Cost Object Filter)),
                                                                                                                Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Actual Cost;
                                                              NOR=Faktisk kost;
                                                              SVE=Faktisk kostnad];
                                                   Editable=No }
    { 220 ;   ;Fixed               ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Investment Proposal".Fixed WHERE (Project No.=FIELD(Project No.),
                                                                                                         Version=FIELD(Version)));
                                                   CaptionML=[ENU=Fixed;
                                                              NOR=Fast;
                                                              SVE=Fast];
                                                   Editable=No }
    { 230 ;   ;Reference Date      ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Investment Proposal"."Reference Date" WHERE (Project No.=FIELD(Project No.),
                                                                                                                    Version=FIELD(Version)));
                                                   CaptionML=[ENU=Reference Date;
                                                              NOR=Referansedato;
                                                              SVE=Referensdatum];
                                                   NotBlank=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Version,Rubric Code         ;Clustered=Yes }
    {    ;Project No.,Version,Type,Rubric Code    ;SumIndexFields=Released Budget Manual }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1210190002 : TextConst 'ENU="not allowed for %1 ''%2'' ";NOR=Ikke tillatt for %1 ''%2'';SVE="till†ts inte f”r %1 ''%2'' "';
      Text001@1100485000 : TextConst 'ENU=There is already budget present of this rubric, this will be deleted. Continue?;NOR=Budsjett finnes allerede i denne rubrikken, dette vil slettes. Fortsette?;SVE=Budget finns redan i denna rubrik, detta kommer att tas bort. Forts„tta?';
      Text002@1100485001 : TextConst 'ENU=There is already budget to distribute present of this rubric, this will be deleted. Continue?;NOR=Budsjett som skal distribueres finnes allerede i denne rubrikken, dette vil slettes. Fortsette?;SVE=Budget som ska f”rdelas finns redan i denna rubrik, detta kommer att tas bort. Forts„tta?';
      Text003@1100485002 : TextConst 'ENU=There is already budget and budget to distribute present of this rubric, these will be deleted. Continue?;NOR=Budsjett og budsjett som skal distribueres finnes allerede i denne rubrikken. Disse vil slettes. Fortsette?;SVE=Budget och budget som ska f”rdelas finns redan i denna rubrik, dessa kommer att tas bort. Forts„tta?';
      Text004@1100529000 : TextConst 'ENU=''%1'' not allowed (min. 0 / max. %2);NOR=''%1'' ikke tillatt (min. 0 / max. %2);SVE=''%1'' inte till†tet (min. 0 / max. %2)';

    PROCEDURE UpdateSurcharges@1210190002(IInvPropRubricRec@1210190004 : Record 11012913;IUseNotSaved@1210190001 : Boolean);
    VAR
      lvInvPropRubricRec@1210190000 : Record 11012913;
      lvDoSecondRun@1100485000 : Boolean;
    BEGIN
      //* Assumptions for working with rubric kinds for percentage (is up to the user, no test on it)
      //*  - Percentage is always over previous lines (rubrics), especially of interest for perc. of perc.
      //*  - For cost as perc. of revenues (or vice versa) this is not possible, for that reason run will be performed twice.
      //*    Keep this simple, so no costs depending of revenues and these again of (same) costs. Run will be performed maximum twice.

      CheckFixed();

      WITH lvInvPropRubricRec DO BEGIN
        SETRANGE("Project No.", IInvPropRubricRec."Project No.");
        SETRANGE(Version, IInvPropRubricRec.Version);
        SETFILTER(Type, '%1|%2|%3|%4|%5',
          Type::"Percentage Costs", Type::"Percentage Revenues",
          Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
          Type::"Costs to Distr. as Perc. Rev.");
        IF FIND('-') THEN BEGIN
          REPEAT
            DeleteInvPropBudgetLines(lvInvPropRubricRec);  //* At first run beforehand delete all
            IF (Type = Type::"Costs to Distr. as Perc. Rev.") THEN
              ResetDeleteBudgetToDistribute(lvInvPropRubricRec);
          UNTIL NEXT = 0;
        END;
        IF FIND('-') THEN BEGIN
          REPEAT
            IF IUseNotSaved AND ("Rubric Code" = IInvPropRubricRec."Rubric Code") THEN BEGIN
              lvInsertSurcharges(IInvPropRubricRec, lvDoSecondRun);
              CheckDistrBudget(IInvPropRubricRec);
            END ELSE BEGIN
              lvInsertSurcharges(lvInvPropRubricRec, lvDoSecondRun);
              CheckDistrBudget(lvInvPropRubricRec);
            END;
          UNTIL NEXT = 0;
        END;

        IF lvDoSecondRun THEN BEGIN
          IF FIND('-') THEN BEGIN
            REPEAT
              DeleteInvPropBudgetLines(lvInvPropRubricRec);  //* At second run only delete of current rubric
              IF (Type = Type::"Costs to Distr. as Perc. Rev.") THEN
                ResetDeleteBudgetToDistribute(lvInvPropRubricRec);
              IF IUseNotSaved AND ("Rubric Code" = IInvPropRubricRec."Rubric Code") THEN BEGIN
                lvInsertSurcharges(IInvPropRubricRec, lvDoSecondRun);
                CheckDistrBudget(IInvPropRubricRec);
              END ELSE BEGIN
                lvInsertSurcharges(lvInvPropRubricRec, lvDoSecondRun);
                CheckDistrBudget(lvInvPropRubricRec);
              END;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE lvInsertSurcharges@1210190004(IInvPropRubricRec@1210190002 : Record 11012913;VAR IO_DoSecondRun@1100485002 : Boolean);
    VAR
      lvInvPropBudgetRec@1210190000 : Record 11012914;
      lvInvPropBudgetRec2@1210190004 : Record 11012914;
      lvBudgToDistrRec@1100485000 : Record 11012909;
      lvNextLineNo@1210190003 : Integer;
      lvAmount@1100485001 : Decimal;
    BEGIN
      // Before calling this function, all the surcharge budget lines of the rubric must be delete.
      WITH IInvPropRubricRec DO BEGIN
        IF (Percentage = 0) OR ("Percentage Filter" = '') OR
           (NOT (Type IN [Type::"Percentage Costs", Type::"Percentage Revenues",
                          Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                          Type::"Costs to Distr. as Perc. Rev."]))
        THEN
          EXIT;

        IF (NOT IO_DoSecondRun) AND
           (Type IN [Type::"Costs as Perc. Revenues",Type::"Revenues as Perc. Costs",Type::"Costs to Distr. as Perc. Rev."])
        THEN
          IO_DoSecondRun := TRUE;
      END;

      WITH lvInvPropBudgetRec DO BEGIN
        lvNextLineNo := 1;
        lvInvPropBudgetRec2.SETCURRENTKEY("Project No.", Version, "Rubric Code", "Budget Type", Date);
        lvInvPropBudgetRec2.SETRANGE("Project No.", IInvPropRubricRec."Project No.");
        lvInvPropBudgetRec2.SETRANGE(Version, IInvPropRubricRec.Version);
        lvInvPropBudgetRec2.SETRANGE("Rubric Code", IInvPropRubricRec."Rubric Code");

        SETCURRENTKEY("Project No.", Version, "Rubric Code", "Budget Type", Date);
        SETRANGE("Project No.", IInvPropRubricRec."Project No.");
        SETRANGE(Version, IInvPropRubricRec.Version);
        SETFILTER("Rubric Code", IInvPropRubricRec."Percentage Filter");
        FILTERGROUP(9);
        SETFILTER("Rubric Code", '<>%1', IInvPropRubricRec."Rubric Code");
        FILTERGROUP(0);
        IF (IInvPropRubricRec.Type IN
            [IInvPropRubricRec.Type::"Percentage Costs", IInvPropRubricRec.Type::"Revenues as Perc. Costs"])
        THEN
          SETRANGE("Budget Type", "Budget Type"::Cost)
        ELSE
          SETRANGE("Budget Type", "Budget Type"::Revenue);
        IF FIND('-') THEN BEGIN
          REPEAT
            lvAmount := Amount * (IInvPropRubricRec.Percentage / 100);
            IF (IInvPropRubricRec.Type <> IInvPropRubricRec.Type::"Costs to Distr. as Perc. Rev.") THEN BEGIN
              lvInvPropBudgetRec2.SETRANGE(Date, Date);
              IF lvInvPropBudgetRec2.FIND('-') THEN BEGIN
                lvInvPropBudgetRec2.VALIDATE("Unit Price",(lvInvPropBudgetRec2.Amount + lvAmount));
                lvInvPropBudgetRec2.MODIFY;
              END ELSE BEGIN
                lvInvPropBudgetRec2.INIT;
                lvInvPropBudgetRec2."Project No." := IInvPropRubricRec."Project No.";
                lvInvPropBudgetRec2.Version := IInvPropRubricRec.Version;
                lvInvPropBudgetRec2."Rubric Code" := IInvPropRubricRec."Rubric Code";
                lvInvPropBudgetRec2."House Model" := '';
                lvInvPropBudgetRec2."Line No." := lvNextLineNo;
                lvInvPropBudgetRec2.Date := Date;
                lvInvPropBudgetRec2.Description := IInvPropRubricRec.Description;
                lvInvPropBudgetRec2.Frequency := 1;
                lvInvPropBudgetRec2.Quantity := 1;
                lvInvPropBudgetRec2."Unit of Measure" := '';
                lvInvPropBudgetRec2.VALIDATE("Unit Price", lvAmount);
                IF (IInvPropRubricRec.Type IN
                    [IInvPropRubricRec.Type::"Percentage Costs", IInvPropRubricRec.Type::"Costs as Perc. Revenues"])
                THEN
                  lvInvPropBudgetRec2."Budget Type" := "Budget Type"::Cost
                ELSE
                  lvInvPropBudgetRec2."Budget Type" := "Budget Type"::Revenue;
                lvInvPropBudgetRec2.INSERT;
                lvNextLineNo := lvNextLineNo + 1;
              END;
            END ELSE BEGIN
              IF lvBudgToDistrRec.GET(
                IInvPropRubricRec."Project No.",IInvPropRubricRec.Version,IInvPropRubricRec."Rubric Code",'',10000)
              THEN BEGIN
                lvBudgToDistrRec.Amount := lvBudgToDistrRec.Amount + lvAmount;
                lvBudgToDistrRec.MODIFY;
              END ELSE BEGIN
                lvBudgToDistrRec.INIT;
                lvBudgToDistrRec."Project No." := IInvPropRubricRec."Project No.";
                lvBudgToDistrRec.Version := IInvPropRubricRec.Version;
                lvBudgToDistrRec."Rubric Code" := IInvPropRubricRec."Rubric Code";
                lvBudgToDistrRec."House Model" := '';
                lvBudgToDistrRec."Line No." := 10000;
                lvBudgToDistrRec.CALCFIELDS("Rubric Description");
                lvBudgToDistrRec.Description := lvBudgToDistrRec."Rubric Description";
                lvBudgToDistrRec.Amount := lvAmount;
                lvBudgToDistrRec.INSERT;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckInvPropBudgetLinesPresent@1100485000() : Integer;
    VAR
      lvInvPropBudgetRec@1210190000 : Record 11012914;
      lvBudgetToDistrRec@1100485000 : Record 11012909;
      lvReturnNo@1100485001 : Integer;
    BEGIN
      lvReturnNo := 0;

      lvInvPropBudgetRec.SETRANGE("Project No.", "Project No.");
      lvInvPropBudgetRec.SETRANGE(Version, Version);
      lvInvPropBudgetRec.SETRANGE("Rubric Code", "Rubric Code");
      IF lvInvPropBudgetRec.FIND('-') THEN
        lvReturnNo := lvReturnNo + 1;

      lvBudgetToDistrRec.SETRANGE("Project No.", "Project No.");
      lvBudgetToDistrRec.SETRANGE(Version, Version);
      lvBudgetToDistrRec.SETRANGE("Rubric Code", "Rubric Code");
      IF lvBudgetToDistrRec.FIND('-') THEN
        lvReturnNo := lvReturnNo + 2;

      EXIT(lvReturnNo);  //* 0:None, 1: Only Budget, 2: Only Budget to Distribute, 3: Both
    END;

    PROCEDURE DeleteInvPropBudgetLines@1210190003(IInvPropRubricRec@1210190001 : Record 11012913);
    VAR
      lvInvPropBudgetRec@1210190000 : Record 11012914;
    BEGIN
      CheckFixed();

      WITH lvInvPropBudgetRec DO BEGIN
        SETRANGE("Project No.", IInvPropRubricRec."Project No.");
        SETRANGE(Version, IInvPropRubricRec.Version);
        SETRANGE("Rubric Code", IInvPropRubricRec."Rubric Code");
        DELETEALL;
      END;
    END;

    PROCEDURE DeleteBudgetToDistribute@1100485002(IInvPropRubricRec@1210190001 : Record 11012913);
    VAR
      lvBudgetToDistrRec@1100485000 : Record 11012909;
    BEGIN
      CheckFixed();

      WITH lvBudgetToDistrRec DO BEGIN
        SETRANGE("Project No.", IInvPropRubricRec."Project No.");
        SETRANGE(Version, IInvPropRubricRec.Version);
        SETRANGE("Rubric Code", IInvPropRubricRec."Rubric Code");
        DELETEALL;
      END;
    END;

    PROCEDURE ResetDeleteBudgetToDistribute@1100485003(IInvPropRubricRec@1210190001 : Record 11012913);
    VAR
      lvBudgetToDistrRec@1100485000 : Record 11012909;
    BEGIN
      WITH lvBudgetToDistrRec DO BEGIN
        SETRANGE("Project No.", IInvPropRubricRec."Project No.");
        SETRANGE(Version, IInvPropRubricRec.Version);
        SETRANGE("Rubric Code", IInvPropRubricRec."Rubric Code");
        IF FIND('-') THEN BEGIN
          REPEAT
            IF ("House Model" = '') AND ("Line No." = 10000) THEN BEGIN
              Amount := 0;
              MODIFY;
            END ELSE BEGIN
              DELETE;
            END;
         UNTIL NEXT = 0;
       END;
      END;
    END;

    PROCEDURE CheckFixed@1100485001();
    BEGIN
      CALCFIELDS(Fixed);
      TESTFIELD(Fixed, FALSE);
    END;

    PROCEDURE CheckDistrBudget@1100485010(IInvPropRubricRec@1100485000 : Record 11012913);
    VAR
      lvProjDevRec@1100485001 : Record 11012915;
      lvBudgToDistrRec@1100485002 : Record 11012909;
      lvBudgDistrRpt@1100485003 : Report 11012900;
    BEGIN
      WITH IInvPropRubricRec DO BEGIN
        IF (Type <> Type::"Costs to Distr. as Perc. Rev.") THEN
          EXIT;
        IF NOT lvProjDevRec.GET("Project No.") THEN
          EXIT;


        lvBudgToDistrRec.SETRANGE("Project No.", "Project No.");
        lvBudgToDistrRec.SETRANGE(Version, Version);
        lvBudgToDistrRec.SETRANGE("Rubric Code", "Rubric Code");
        lvBudgToDistrRec.SETRANGE("House Model", '');
        lvBudgToDistrRec.SETRANGE("Line No.", 10000);

        IF NOT lvBudgToDistrRec.FIND('-') THEN
          lvBudgToDistrRec.INIT;
        IF (lvBudgToDistrRec.Amount <> 0) THEN BEGIN  //* Test if at distribute no error will appear, then no call
                                                      //* When something will be changed at distribute, possible it is also necessary here.
          CASE "Budget Distribution" OF
            "Budget Distribution"::Linear:
              IF (FORMAT(lvBudgToDistrRec."Frequency Budget Distr.") = '') AND
                 (FORMAT(lvProjDevRec."Frequency Cost Budget Distr.") = '')
              THEN
                EXIT;
            "Budget Distribution"::Scheme:
              IF (lvBudgToDistrRec."Scheme Budget Distr." = '') AND (lvProjDevRec."Scheme Cost Budget Distr." = '') THEN
                EXIT;
          END;
          IF ((lvBudgToDistrRec."Start Date Budget Distr." = 0D) OR (lvBudgToDistrRec."End Date Budget Distr." = 0D)) AND
             ((lvProjDevRec."Start Date Cost Budget Distr." = 0D) OR (lvProjDevRec."End Date Cost Budget Distr." = 0D))
          THEN
            EXIT;
        END;

        lvBudgDistrRpt.SETTABLEVIEW(lvBudgToDistrRec);
        lvBudgDistrRpt.USEREQUESTPAGE(FALSE);
        lvBudgDistrRpt.SetFromSurchCostDistrAsPercRev(IInvPropRubricRec);
        lvBudgDistrRpt.RUNMODAL;
      END;
    END;

    PROCEDURE MaxValueIndentation@1100529000() : Integer;
    BEGIN
      EXIT(2);  //* Max. value must be the same in T11012917
    END;

    PROCEDURE CollAdjustIndentation@1210190005(VAR InvPropRubric@1100529001 : Record 11012913;IndentStep@1100529000 : Integer);
    BEGIN
      //* IndentStep: Pos=Indent, Neg=Outdent
      IF InvPropRubric.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          InvPropRubric.VALIDATE(Indentation, InvPropRubric.Indentation + IndentStep);
          InvPropRubric.MODIFY;
        UNTIL InvPropRubric.NEXT = 0;
      END;
    END;

    PROCEDURE CollSwitchBold@1210190006(VAR InvPropRubric@1100529000 : Record 11012913);
    BEGIN
      IF InvPropRubric.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          InvPropRubric.VALIDATE(Bold, NOT InvPropRubric.Bold);
          InvPropRubric.MODIFY;
        UNTIL InvPropRubric.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

