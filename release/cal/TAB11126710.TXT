OBJECT Table 11126710 Scanned Invoice WhiteVision
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               TESTFIELD(Processed, FALSE);
             END;

    CaptionML=ENU=Scanned Invoice WhiteVision;
  }
  FIELDS
  {
    { 10  ;   ;Document ID         ;Code20        ;CaptionML=[ENU=Document ID;
                                                              NOR=Dokument-ID;
                                                              SVE=Dokument-ID] }
    { 20  ;   ;Document Type       ;Text20        ;CaptionML=[ENU=Document Type;
                                                              NOR=Bilagstype;
                                                              SVE=Dokumenttyp] }
    { 30  ;   ;Version             ;Text30        ;CaptionML=[ENU=Version;
                                                              NOR=Versjon;
                                                              SVE=Version] }
    { 40  ;   ;Scan Date           ;Date          ;CaptionML=ENU=Scan Date }
    { 50  ;   ;Administration Code ;Text30        ;CaptionML=ENU=Administration Code }
    { 60  ;   ;IBAN                ;Code50        ;CaptionML=[ENU=IBAN;
                                                              NOR=IBAN;
                                                              SVE=IBAN] }
    { 70  ;   ;Bank Account No.    ;Code30        ;CaptionML=[ENU=Bank Account No.;
                                                              NOR=Bankkontonr.;
                                                              SVE=Bankkontonr] }
    { 80  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              NOR=Momsregistreringsnr;
                                                              SVE=Momsregistreringsnr] }
    { 90  ;   ;COC Registration No.;Text20        ;CaptionML=[ENU=COC Registration No.;
                                                              NOR=Organisasjonsnr;
                                                              SVE=Person-/Organisationsnr] }
    { 100 ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=[ENU=Vendor Invoice No.;
                                                              NOR=Leverand›rs fakturanr.;
                                                              SVE=Leverant”rens fakturanr] }
    { 110 ;   ;Invoice Date        ;Date          ;CaptionML=[ENU=Invoice Date;
                                                              NOR=Fakturadato;
                                                              SVE=Kundens momssats] }
    { 130 ;   ;Amount excl. VAT    ;Decimal       ;CaptionML=[ENU=Amount excl. VAT;
                                                              NOR=Bel›p eksklusive moms;
                                                              SVE=Belopp exklusive moms];
                                                   AutoFormatType=1 }
    { 140 ;   ;Amount incl. VAT    ;Decimal       ;CaptionML=[ENU=Amount incl. VAT;
                                                              NOR=Bel›p inkludert moms;
                                                              SVE=Summa inkl. Moms];
                                                   AutoFormatType=1 }
    { 150 ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              NOR=Mva-bel›p;
                                                              SVE=Momsbelopp];
                                                   AutoFormatType=1 }
    { 160 ;   ;Project No.         ;Code20        ;CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 170 ;   ;Purchase Order No.  ;Code20        ;CaptionML=[ENU=Purchase Order No.;
                                                              NOR=Innkj›psordrenr.;
                                                              SVE=Ink”psordernr] }
    { 180 ;   ;Service Order No.   ;Code20        ;CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr] }
    { 500 ;   ;Processed           ;Boolean       ;CaptionML=[ENU=Processed;
                                                              NOR=Behandlede;
                                                              SVE=Behandlades] }
    { 510 ;   ;Document No.        ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FILTER(Invoice|Credit Memo));
                                                   OnLookup=BEGIN
                                                              LookupDocumentNo;
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
  }
  KEYS
  {
    {    ;Document ID                             ;Clustered=Yes }
    {    ;Document No.                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528400 : TextConst 'ENU=No XML file found in folder %1.';
      Text001@1100528405 : TextConst 'ENU=Importing XML files  @1@@@@@@@@@@@@@@@@';
      Text002@1100528402 : TextConst 'ENU=No XML-tag Document found in file %1.';

    PROCEDURE ImportXMLFiles@1100528400();
    VAR
      ScanApplicationsSetup@1100528400 : Record 11012134;
      PurchasesPayablesSetup@1100528407 : Record 312;
      ScannedInvoiceWhiteVision@1100528408 : Record 11126710;
      TempNameValueBuffer@1100528402 : TEMPORARY Record 823;
      FileManagement@1100528401 : Codeunit 419;
      Window@1100528405 : Dialog;
      NoOfFiles@1100528403 : Integer;
      Counter@1100528404 : Integer;
    BEGIN
      ScanApplicationsSetup.GET;
      ScanApplicationsSetup.TESTFIELD("Pathname Import Files");
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.TESTFIELD("File Location Scanned Invoices");
      FileManagement.GetClientDirectoryFilesList(
        TempNameValueBuffer, ScanApplicationsSetup."Pathname Import Files");
      TempNameValueBuffer.SETFILTER(Name, '@*.xml');
      IF TempNameValueBuffer.FINDSET THEN BEGIN
        Window.OPEN(Text001);
        NoOfFiles := TempNameValueBuffer.COUNT;
        REPEAT
          IF ImportXMLFile(
            TempNameValueBuffer.Name, ScannedInvoiceWhiteVision)
          THEN BEGIN
            ScannedInvoiceWhiteVision.ProcessScannedInvoice;
            COMMIT; //To prevent moving files after importing or processing failed.
            MoveFiles(
              TempNameValueBuffer.Name, PurchasesPayablesSetup."File Location Scanned Invoices",
              ScannedInvoiceWhiteVision."Document ID");
          END;
          Counter := Counter + 1;
          Window.UPDATE(1, ROUND(10000 * Counter / NoOfFiles, 1));
        UNTIL TempNameValueBuffer.NEXT = 0;
        Window.CLOSE;
      END ELSE
        ERROR(Text000, CONVERTSTR(ScanApplicationsSetup."Pathname Import Files", '\', '/'));
    END;

    LOCAL PROCEDURE ImportXMLFile@1100528401(FileName@1100528400 : Text;VAR ScannedInvoiceWhiteVision@1100528402 : Record 11126710) : Boolean;
    BEGIN
      CLEAR(ScannedInvoiceWhiteVision);
      ScannedInvoiceWhiteVision.ReadXML(FileName);
      IF LOWERCASE(ScannedInvoiceWhiteVision."Document Type") <> 'factuur' THEN
        EXIT(FALSE);

      ScannedInvoiceWhiteVision.INSERT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE MoveFiles@1100528416(OrigXMLFileName@1100528400 : Text;FileLocationScannedInvoices@1100528401 : Text;DocumentID@1100528405 : Code[20]);
    VAR
      FileManagement@1100528406 : Codeunit 419;
      OrigPDFFileName@1100528402 : Text;
      DestXMLFileName@1100528403 : Text;
      DestPDFFileName@1100528404 : Text;
    BEGIN
      OrigPDFFileName := FileManagement.ChangeExtension(OrigXMLFileName, 'pdf');
      DestXMLFileName := STRSUBSTNO(
        '%1%2.xml', FileLocationScannedInvoices, DocumentID);
      DestPDFFileName := FileManagement.ChangeExtension(DestXMLFileName, 'pdf');
      IF FileManagement.ClientFileExists(OrigXMLFileName) THEN
        FileManagement.RenameClientFile(OrigXMLFileName, DestXMLFileName, TRUE);
      IF FileManagement.ClientFileExists(OrigPDFFileName) THEN
        FileManagement.RenameClientFile(OrigPDFFileName, DestPDFFileName, TRUE);
    END;

    PROCEDURE ReadXML@1100528418(FileName@1100528400 : Text);
    VAR
      XMLDOMManagement4PS@1100528404 : Codeunit 11020220;
      XmlDocument@1100528403 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528402 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocumentNode@1100528405 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrentNode@1100528401 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlDocument := XmlDocument.XmlDocument;
      XMLDOMManagement4PS.LoadXMLFromClientFile(XmlDocument, FileName, TRUE);
      RootNode := XmlDocument.DocumentElement;
      IF NOT XMLDOMManagement4PS.FindNode(RootNode, 'Document', DocumentNode) THEN
        ERROR(Text002, FileName);

      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Documentid', CurrentNode) THEN
        "Document ID" := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Document ID"));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Documenttype', CurrentNode) THEN
        "Document Type" := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Document Type"));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Versie', CurrentNode) THEN
        Version := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN(Version));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Scandatum', CurrentNode) THEN
        "Scan Date" := GetDate(CurrentNode.InnerText);
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Administratiecode', CurrentNode) THEN
        "Administration Code" := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Administration Code"));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Ibannummerherkend', CurrentNode) THEN
        IBAN := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN(IBAN));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Bankrekeningnummerherkend', CurrentNode) THEN
        "Bank Account No." := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Bank Account No."));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Btwnummerherkend', CurrentNode) THEN
        "VAT Registration No." := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("VAT Registration No."));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Kvknummerherkend', CurrentNode) THEN
        "COC Registration No." := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("COC Registration No."));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Factuurnummer', CurrentNode) THEN
        "Vendor Invoice No." := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Vendor Invoice No."));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Factuurdatum', CurrentNode) THEN
        "Invoice Date" := GetDate(CurrentNode.InnerText);
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Nettobedrag', CurrentNode) THEN
        IF EVALUATE("Amount excl. VAT", CurrentNode.InnerText, 9) THEN;
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Brutobedrag', CurrentNode) THEN
        IF EVALUATE("Amount incl. VAT", CurrentNode.InnerText, 9) THEN;
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Btwbedrag', CurrentNode) THEN
        IF EVALUATE("VAT Amount", CurrentNode.InnerText, 9) THEN;
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Projectnummer', CurrentNode) THEN
        "Project No." := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Project No."));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Ordernummer', CurrentNode) THEN
        "Purchase Order No." := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Purchase Order No."));
      IF XMLDOMManagement4PS.FindNode(DocumentNode, 'Serviceordernummer', CurrentNode) THEN
        "Service Order No." := COPYSTR(CurrentNode.InnerText, 1, MAXSTRLEN("Service Order No."));
    END;

    LOCAL PROCEDURE GetDate@1100528409(DateTxt@1100528400 : Text) Date : Date;
    VAR
      StringFunctions@1100528401 : Codeunit 11012273;
      SplitStrings@1100528402 : ARRAY [10] OF Text[10];
      Day@1100528404 : Integer;
      Month@1100528405 : Integer;
      Year@1100528406 : Integer;
    BEGIN
      StringFunctions.SplitString(DateTxt, '-', SplitStrings);
      IF EVALUATE(Day, SplitStrings[1]) THEN;
      IF EVALUATE(Month, SplitStrings[2]) THEN;
      IF EVALUATE(Year, SplitStrings[3]) THEN;
      IF (Day > 0) AND
         (Month > 0) AND
         (Year > 0)
      THEN
        Date := DMY2DATE(Day , Month, Year);
    END;

    PROCEDURE ProcessScannedInvoice@1100528411();
    VAR
      PurchaseHeader@1100528400 : Record 38;
    BEGIN
      InsertPurchaseHeader(PurchaseHeader);
      FillVendorNoOfPurchaseHeader(PurchaseHeader);
      IF NOT FillRelatedPurchaseOrderNoOfPurchaseHeader(PurchaseHeader) THEN
        IF NOT FillProjectNoOfPurchaseHeader(PurchaseHeader) THEN
          FillServiceOrderNoOfPurchaseHeader(PurchaseHeader);
      PurchaseHeader."Vendor Invoice No." := "Vendor Invoice No.";
      PurchaseHeader.VALIDATE("Posting Date", "Invoice Date");
      FillAmountsOfPurchaseHeader(PurchaseHeader);
      PurchaseHeader."Ext. Document ID":= "Document ID";
      PurchaseHeader.MODIFY(TRUE);
      Processed := TRUE;
      "Document No." := PurchaseHeader."No.";
      MODIFY;
    END;

    LOCAL PROCEDURE InsertPurchaseHeader@1100528438(VAR PurchaseHeader@1100528400 : Record 38);
    BEGIN
      IF "Amount excl. VAT" < 0 THEN
        PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::"Credit Memo"
      ELSE
        PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
      PurchaseHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE FillVendorNoOfPurchaseHeader@1100528440(VAR PurchaseHeader@1100528400 : Record 38);
    VAR
      VendorNo@1100528401 : Code[20];
    BEGIN
      VendorNo := GetVendorNo;
      IF VendorNo <> '' THEN
        PurchaseHeader.VALIDATE("Buy-from Vendor No.", VendorNo);
    END;

    LOCAL PROCEDURE FillRelatedPurchaseOrderNoOfPurchaseHeader@1100528444(VAR PurchaseHeader@1100528400 : Record 38) : Boolean;
    VAR
      PurchaseOrderNo@1100528401 : Code[20];
    BEGIN
      PurchaseOrderNo := GetPurchaseOrderNo(PurchaseHeader."Buy-from Vendor No.");
      IF PurchaseOrderNo <> '' THEN BEGIN
        PurchaseHeader.VALIDATE("Related Purch. Order No.", PurchaseOrderNo);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FillProjectNoOfPurchaseHeader@1100528450(VAR PurchaseHeader@1100528400 : Record 38) : Boolean;
    VAR
      ProjectNo@1100528401 : Code[20];
    BEGIN
      ProjectNo := GetProjectNo;
      IF ProjectNo <> '' THEN BEGIN
        PurchaseHeader.VALIDATE("Job No.", ProjectNo);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FillServiceOrderNoOfPurchaseHeader@1100528452(VAR PurchaseHeader@1100528400 : Record 38) : Boolean;
    VAR
      ServiceOrderNo@1100528401 : Code[20];
    BEGIN
      ServiceOrderNo := GetServiceOrderNo;
      IF ServiceOrderNo <> '' THEN BEGIN
        PurchaseHeader.VALIDATE("Service Order No.", ServiceOrderNo);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FillAmountsOfPurchaseHeader@1100528456(VAR PurchaseHeader@1100528400 : Record 38);
    VAR
      VATPostingSetup@1100528401 : Record 325;
    BEGIN
      PurchaseHeader.VALIDATE("Amount incl. VAT", ABS("Amount incl. VAT"));
      IF (PurchaseHeader."Amount excl. VAT" <> ABS("Amount excl. VAT")) AND
         ("VAT Amount" <> 0)
      THEN BEGIN
        VATPostingSetup.SETRANGE("VAT Bus. Posting Group", PurchaseHeader."VAT Bus. Posting Group");
        VATPostingSetup.SETRANGE(Manually, TRUE);
        IF VATPostingSetup.FINDFIRST THEN BEGIN
          PurchaseHeader.VALIDATE("VAT Prod. Posting Group", VATPostingSetup."VAT Prod. Posting Group");
          PurchaseHeader.VALIDATE("Amount excl. VAT", ABS("Amount excl. VAT"));
          PurchaseHeader.VALIDATE("VAT Amount", ABS("VAT Amount"));
          PurchaseHeader.VALIDATE("Amount incl. VAT", ABS("Amount incl. VAT"));
        END;
      END;
    END;

    LOCAL PROCEDURE GetVendorNo@1100528404() VendorNo : Code[20];
    BEGIN
      VendorNo := GetVendorNoViaIBAN;
      IF VendorNo = '' THEN
        VendorNo := GetVendorNoViaBankAccountNo;
      IF VendorNo = '' THEN
        VendorNo := GetVendorNoViaVATRegistrationNo;
      IF VendorNo = '' THEN
        VendorNo := GetVendorNoViaCOCRegistrationNo;
    END;

    LOCAL PROCEDURE GetVendorNoViaIBAN@1100528406() : Code[20];
    VAR
      VendorBankAccount@1100528401 : Record 288;
    BEGIN
      IF IBAN = '' THEN
        EXIT('');
      VendorBankAccount.SETCURRENTKEY(IBAN);
      VendorBankAccount.SETRANGE(IBAN, IBAN);
      IF VendorBankAccount.FINDFIRST THEN
        EXIT(VendorBankAccount."Vendor No.");
    END;

    LOCAL PROCEDURE GetVendorNoViaBankAccountNo@1100528407() : Code[20];
    VAR
      VendorBankAccount@1100528400 : Record 288;
    BEGIN
      IF "Bank Account No." = '' THEN
        EXIT('');
      VendorBankAccount.SETCURRENTKEY("Bank Account No.");
      VendorBankAccount.SETRANGE("Bank Account No.", "Bank Account No.");
      IF VendorBankAccount.FINDFIRST THEN
        EXIT(VendorBankAccount."Vendor No.");
    END;

    LOCAL PROCEDURE GetVendorNoViaVATRegistrationNo@1100528408() : Code[20];
    VAR
      Vendor@1100528400 : Record 23;
    BEGIN
      IF "VAT Registration No." = '' THEN
        EXIT('');
      Vendor.SETCURRENTKEY("VAT Registration No.");
      Vendor.SETRANGE("VAT Registration No.", "VAT Registration No.");
      IF Vendor.FINDFIRST THEN
        EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE GetVendorNoViaCOCRegistrationNo@1100528410() : Code[20];
    VAR
      Vendor@1100528400 : Record 23;
    BEGIN
      IF "COC Registration No." = '' THEN
        EXIT('');
      Vendor.SETRANGE("COC Registration No.", "COC Registration No.");
      IF Vendor.FINDFIRST THEN
        EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE GetPurchaseOrderNo@1100528422(VendorNo@1100528401 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1100528400 : Record 38;
    BEGIN
      IF (VendorNo = '') OR
         ("Purchase Order No." = '')
      THEN
        EXIT('');
      PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("Buy-from Vendor No.", VendorNo);
      PurchaseHeader.SETRANGE(Status, PurchaseHeader.Status::Open, PurchaseHeader.Status::"Pending Prepayment");
      PurchaseHeader.SETRANGE("No.", "Purchase Order No.");
      IF PurchaseHeader.FINDFIRST THEN
        EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE GetProjectNo@1100528426() : Code[20];
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF "Project No." = '' THEN
        EXIT('');
      Job.SETRANGE("Project Status", Job."Project Status"::Estimation, Job."Project Status"::"Technical Finished");
      Job.SETRANGE(Blocked, Job.Blocked::" ");
      Job.SETRANGE("No.", "Project No.");
      IF Job.FINDFIRST THEN
        EXIT(Job."No.");
    END;

    LOCAL PROCEDURE GetServiceOrderNo@1100528427() : Code[20];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      IF "Service Order No." = '' THEN
        EXIT('');
      ServiceOrder.SETRANGE(Status, ServiceOrder.Status::Open, ServiceOrder.Status::"Technical Finished");
      ServiceOrder.SETRANGE("No.", "Service Order No.");
      IF ServiceOrder.FINDFIRST THEN
        EXIT(ServiceOrder."No.");
    END;

    LOCAL PROCEDURE LookupDocumentNo@1100528402();
    VAR
      PurchaseHeader@1100528400 : Record 38;
      PurchaseInvoice@1100528401 : Page 51;
      PurchaseCreditMemo@1100528402 : Page 52;
    BEGIN
      IF "Amount excl. VAT" < 0 THEN
        PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::"Credit Memo")
      ELSE
        PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.SETRANGE("No.", "Document No.");
      IF PurchaseHeader.FINDFIRST THEN
        CASE PurchaseHeader."Document Type" OF
          PurchaseHeader."Document Type"::Invoice:
            BEGIN
              PurchaseInvoice.SETRECORD(PurchaseHeader);
              PurchaseInvoice.RUNMODAL;
            END;
          PurchaseHeader."Document Type"::"Credit Memo":
            BEGIN
              PurchaseCreditMemo.SETRECORD(PurchaseHeader);
              PurchaseCreditMemo.RUNMODAL;
            END;
        END;
    END;

    BEGIN
    END.
  }
}

