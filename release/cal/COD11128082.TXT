OBJECT Codeunit 11128082 Base Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE8.08 part (12047960);
  }
  PROPERTIES
  {
    Permissions=TableData 21=rm,
                TableData 25=rm,
                TableData 11128066=rim,
                TableData 11128069=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      gFSO@1100570002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      gGLSetup@1100570004 : Record 98;
      gSetupOK@1100570005 : Boolean;
      gVPSetup@12047958 : Record 11128066;
      gTextMgt@12047959 : Codeunit 11128088;
      gMiscSetup@12047961 : Record 11128069;

    PROCEDURE FormatOCRInvNo@12047960(pDocNo@12047959 : Code[20]) : Code[22];
    VAR
      Length@12047958 : Integer;
    BEGIN
      IF pDocNo = '' THEN
        EXIT;

      GetSetup;
      IF NOT gVPSetup."Format Invoice No. as OCR" THEN
        EXIT(pDocNo);

      Length := STRLEN(pDocNo) + 2;
      IF Length >= 10 THEN
        Length := Length MOD 10;

      EXIT(pDocNo+FORMAT(Length)+CheckSum10(pDocNo+FORMAT(Length)));
    END;

    PROCEDURE GetLatestCodingFromVendor@1100570013(pPurchaseHeader@1100570003 : Record 38);
    VAR
      VendLedgerEntry@1100570002 : Record 25;
      i@1100570005 : Integer;
    BEGIN
      // PEB0042
      VendLedgerEntry.RESET;
      VendLedgerEntry.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
      VendLedgerEntry.SETRANGE("Vendor No.",pPurchaseHeader."Pay-to Vendor No.");
      VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
      IF NOT VendLedgerEntry.FINDLAST THEN
        EXIT;

      i := 0;
      REPEAT
        i += 1; // Max Loops backwards = 10 to find a Posted Inv with GL/Accont Lines
      UNTIL InsertLinesWithGLAccounts(VendLedgerEntry,pPurchaseHeader) OR (VendLedgerEntry.NEXT(-1) = 0) OR (i = 11);
      // 0042
    END;

    PROCEDURE InsertLinesWithGLAccounts@1100570014(pVendLedgerEntry@1100570002 : Record 25;pPurchaseHeader@1100570004 : Record 38) : Boolean;
    VAR
      PurchInvLine@1100570003 : Record 123;
      PurchaseLine@1100570000 : Record 39;
      PEB001@1100570001 : TextConst 'ENU=Get latest coding from vendor %1;SVE=H„mta senaste konteringen f”r leverant”r %1';
    BEGIN
      // PEB0042
      PurchInvLine.SETRANGE("Document No.",pVendLedgerEntry."Document No.");
      PurchInvLine.SETRANGE(Type,PurchInvLine.Type::"G/L Account");
      //PurchInvLine.SETRANGE("Charge Type",0);
      PurchInvLine.SETFILTER(Amount,'<>0');
      IF PurchInvLine.ISEMPTY THEN
        EXIT(FALSE);

      IF NOT CONFIRM(PEB001,FALSE,pPurchaseHeader."Pay-to Name") THEN
        EXIT(TRUE);

      PurchaseLine.SETRANGE("Document Type",pPurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",pPurchaseHeader."No.");
      IF NOT PurchaseLine.FINDLAST THEN BEGIN
        CLEAR(PurchaseLine);
        PurchaseLine."Document Type" :=pPurchaseHeader."Document Type";
        PurchaseLine."Document No." := pPurchaseHeader."No.";
      END;

      IF PurchInvLine.FINDSET THEN REPEAT
        PurchaseLine.INIT;
        PurchaseLine."Line No." += 10000;
        PurchaseLine.INSERT(TRUE);

        PurchaseLine.Type := PurchInvLine.Type;
        PurchaseLine.VALIDATE("No.",PurchInvLine."No.");
        PurchaseLine.Description := PurchInvLine.Description;
        PurchaseLine.VALIDATE(Quantity,PurchInvLine.Quantity);
        PurchaseLine.VALIDATE("Direct Unit Cost",PurchInvLine."Direct Unit Cost");
        PurchaseLine."VAT Prod. Posting Group" := PurchInvLine."VAT Prod. Posting Group";
        PurchaseLine.VALIDATE("VAT Bus. Posting Group",PurchInvLine."VAT Bus. Posting Group");

        PurchaseLine."Shortcut Dimension 1 Code" := PurchInvLine."Shortcut Dimension 1 Code";
        PurchaseLine."Shortcut Dimension 2 Code" := PurchInvLine."Shortcut Dimension 2 Code";
        PurchaseLine."Dimension Set ID" := PurchInvLine."Dimension Set ID";
        PurchaseLine.MODIFY(TRUE);
      UNTIL PurchInvLine.NEXT = 0;

      EXIT(TRUE);
      // 0042
    END;

    PROCEDURE ChangeReportSelection@1100570019();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeReport@1100570015(pOld@1100570000 : Integer;pNew@1100570001 : Integer);
    BEGIN
    END;

    PROCEDURE Date2Text@1000000003(pDate@1000 : Date;pLength@1001 : Integer) : Text[8];
    VAR
      PEB002@1100570013 : TextConst 'ENU=The value for the parametr is to long for the function Date2Text. The value is %1.;SVE=V„rdet p† parametern l„ngd till funktionen Date2Text „r felaktig. V„rdet „r %1.';
    BEGIN
      // PEB0049
      IF (pLength < 1) AND (pLength > 8) THEN
        ERROR(PEB002,pLength);
      IF pDate <> 0D THEN
        EXIT(COPYSTR(FORMAT(pDate,0,'<Year4,4><Month,2><Day,2>'),8-pLength+1))
      ELSE
        EXIT(PADSTR('',pLength));
      // 0049
    END;

    PROCEDURE ClearNonNumeric@1000000004(pText@1000 : Text[1024]) : Text[1024];
    VAR
      VPManagement@12047958 : Codeunit 11128061;
    BEGIN
      // PEB0049
      EXIT(VPManagement.ClearNonNumeric(pText));
      // 0049
    END;

    PROCEDURE Value1@1000000005(pDec@1000 : Decimal;pLength@1001 : Integer) : Text[1024];
    BEGIN
      // PEB0049
      EXIT(TextFormatRightAdj(ClearNonNumeric(FORMAT(ROUND(pDec,1.0))),pLength));
      // 0049
    END;

    PROCEDURE Value100@1000000006(pDec@1000 : Decimal;pLength@1001 : Integer) : Text[1024];
    BEGIN
      // PEB0049
      IF pDec = 0 THEN
        EXIT(TextFormatRightAdj('000',pLength));
      EXIT(NumericFormatLeftPad(ClearNonNumeric(FORMAT(ROUND(pDec)*100)),pLength));
      // 0049
    END;

    PROCEDURE NumericFormatLeftPad@1000000007(pText@1000 : Text[1024];pLength@1001 : Integer) : Text[1024];
    VAR
      PEB003@1100570012 : TextConst 'ENU=The value for the parametr is to long for the function NumericFormatLeftPad. The value is %1;SVE=V„rdet p† parametern l„ngd till funktionen NumericFormatLeftPad „r felaktig. V„rdet „r %1.';
    BEGIN
      // PEB0049
      pText := DELCHR(pText,'<>');
      IF (pLength < 1) AND (pLength > 1024) THEN
        ERROR(PEB003,pLength);
      IF STRLEN(pText) > pLength THEN
        pText := COPYSTR(pText,STRLEN(pText)-pLength+1);
      EXIT(PADSTR('', pLength - STRLEN(pText),'0') + pText);
      // 0049
    END;

    PROCEDURE NumericFormatRightPad@1000000008(pText@1000 : Text[1024];pLength@1001 : Integer) : Text[1024];
    VAR
      PEB004@1100570011 : TextConst 'ENU=The value for the parametr is to long for the function NumericFormatRightPad. The value is %1;SVE=V„rdet p† parametern l„ngd till funktionen NumericFormatRightPad „r felaktig. V„rdet „r %1.';
    BEGIN
      // PEB0049
      pText := DELCHR(pText,'<>');
      IF (pLength < 1) AND (pLength > 1024) THEN
        ERROR(PEB004,pLength);
      EXIT(PADSTR(pText,pLength,'0'));
      // 0049
    END;

    PROCEDURE TextFormatRightAdj@1000000009(pText@1000 : Text[1024];pLength@1001 : Integer) : Text[1024];
    VAR
      PEB005@1100570010 : TextConst 'ENU=The value for the parametr is to long for the function TextFormatRightAdj. The value is %1;SVE=V„rdet p† parametern l„ngd till funktionen TextFormatRightAdj „r felaktig. V„rdet „r %1.';
    BEGIN
      // PEB0049
      pText := DELCHR(pText,'<>');
      IF (pLength < 1) AND (pLength > 1024) THEN
        ERROR(PEB005,pLength);
      pText := COPYSTR(pText,1,pLength);
      EXIT(PADSTR('', pLength - STRLEN(pText),' ') + pText);
      // 0049
    END;

    PROCEDURE TextFormatLeftAdj@1000000010(pText@1000 : Text[1024];pLength@1001 : Integer) : Text[1024];
    VAR
      PEB006@1100570009 : TextConst 'ENU=The value for the parametr is to long for the function TextFormatLeftAdj. The value is %1;SVE=V„rdet p† parametern l„ngd till funktionen TextFormatLeftAdj „r felaktig. V„rdet „r %1.';
    BEGIN
      // PEB0049
      pText := DELCHR(pText,'<>');
      IF (pLength < 1) AND (pLength > 1024) THEN
        ERROR(PEB006,pLength);
      EXIT(UPPERCASE(PADSTR(pText,pLength)));
      // 0049
    END;

    PROCEDURE BlankField@1000000011(pLength@1000 : Integer) : Text[1024];
    VAR
      PEB007@1100570008 : TextConst 'ENU=The value for the parametr is to long for the function BlankField. The value is %1;SVE=V„rdet p† parametern l„ngd till funktionen BlankField „r felaktig. V„rdet „r %1.';
    BEGIN
      // PEB0049
      IF (pLength < 1) AND (pLength > 1024) THEN
        ERROR(PEB007,pLength);
      EXIT(PADSTR('',pLength));
      // 0049
    END;

    PROCEDURE CheckSum10@1000000012(pCode@1000 : Code[20]) : Code[1];
    VAR
      ChSum@1001 : Decimal;
      C@1002 : Decimal;
      i@1003 : Integer;
      Pos@12047958 : Integer;
    BEGIN
      // PEB0049
      pCode := ClearNonNumeric(pCode);

      FOR i := STRLEN(pCode) DOWNTO 1 DO BEGIN
        Pos += 1;
        EVALUATE(C, COPYSTR(pCode, i, 1));
        ChSum := ChSum + ((C * ((Pos MOD 2) + 1)) MOD 10);
        ChSum := ChSum + ((C * ((Pos MOD 2) + 1)) DIV 10);
      END;
      ChSum := (10 - (ChSum MOD 10)) MOD 10;
      EXIT(FORMAT(ChSum));
      // 0049
    END;

    PROCEDURE CheckSum10Control@1000000013(pCode@1000 : Code[20]) : Boolean;
    BEGIN
      // PEB0049
      pCode := ClearNonNumeric(pCode);
      EXIT(COPYSTR(pCode,STRLEN(pCode),1) = CheckSum10(COPYSTR(pCode,1,STRLEN(pCode)-1)));
      // 0049
    END;

    PROCEDURE NegativeSign@1000000014(pDec@1000 : Decimal) : Text[1];
    BEGIN
      // PEB0049
      IF pDec < 0 THEN
        EXIT('-')
      ELSE
        EXIT(' ');
      // 0049
    END;

    PROCEDURE FillField@1000000015(pField1@1000 : Text[1024];pField2@1001 : Text[1024]) : Text[1024];
    BEGIN
      // PEB0049
      IF pField1 <> '' THEN
        EXIT(pField1);
      EXIT(pField2);
      // 0049
    END;

    PROCEDURE CheckAndCreatePath@1000000021(VAR pvFolderName@1000000000 : Text[1000];pCreateFolder@1000000005 : Boolean) : Boolean;
    VAR
      i@1000000003 : Integer;
      DriverName@1000000001 : Text[1000];
      PathName@1000000006 : Text[1000];
    BEGIN
      // PEB0063
      IF ISCLEAR(gFSO) THEN
        CREATE(gFSO,FALSE,TRUE);

      EvaluatePath(pvFolderName,DriverName,PathName);

      pvFolderName := DELCHR(pvFolderName,'>','\')+'\';

      IF gFSO.FolderExists(pvFolderName) THEN
        EXIT(TRUE);

      IF NOT pCreateFolder THEN
        EXIT(FALSE);

      // Create folders for all levels
      FOR i := 1 TO  STRLEN(DELCHR(DELCHR(PathName,'>','\'),'=',DELCHR(PathName,'=','\'))) DO BEGIN
        IF NOT gFSO.FolderExists(DriverName + GetPathLevel(i,PathName)) THEN
          gFSO.CreateFolder(DriverName + GetPathLevel(i,PathName));
      END;
      EXIT(TRUE);
      // 0063
    END;

    LOCAL PROCEDURE EvaluatePath@1000000022(VAR pvFolderName@1000000000 : Text[1000];VAR pvDriverName@1000000003 : Text[1000];VAR pvPathName@1000000005 : Text[1000]);
    VAR
      i@1000000001 : Integer;
      LastChr@1000000002 : Text[1];
      ChrOK@1070000 : Text[100];
      PEB008@1100570007 : TextConst 'ENU=The path "%1" contains illegal characters:\%2;SVE=S”kv„gen "%1" inneh†ller otill†tna tecken:\%2';
      PEB009@1100570006 : TextConst 'ENU=Drive %1 does not exist;SVE=Enhet %1 finns inte';
      PEB010@1100570005 : TextConst 'ENU=There must be a Name in Path for all Levels.\Path: "%1";SVE=Det m†ste finnas ett namn p† s”kv„gen i alla niv†er.\S”kv„g: "%1"';
    BEGIN
      // PEB0063
      IF COPYSTR(pvFolderName,2,1) = ':' THEN BEGIN
        // Drive is selected like "c:"
        pvDriverName := COPYSTR(pvFolderName,1,2);
        pvPathName := COPYSTR(pvFolderName,3);

        ChrOK := ':ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        IF DELCHR(UPPERCASE(pvDriverName),'=',ChrOK) <> '' THEN
          ERROR(PEB008,pvFolderName,DELCHR(UPPERCASE(pvPathName),'=',ChrOK));

        IF NOT gFSO.DriveExists(pvDriverName) THEN
          ERROR(PEB009,pvFolderName);
      END ELSE BEGIN
        // UNC
        IF COPYSTR(pvFolderName,1,2) <> '\\' THEN
          ERROR(PEB009,pvFolderName);
        pvDriverName := COPYSTR(pvFolderName,3);
        pvPathName := COPYSTR(pvDriverName,STRPOS(pvDriverName,'\'));
        pvDriverName := '\\'+COPYSTR(pvDriverName,1,STRPOS(pvDriverName,'\')-1);
      END;

      IF DELCHR(gTextMgt.CleanTxt(UPPERCASE(pvPathName)),'=','<>:"/|?*') <> UPPERCASE(pvPathName) THEN
        ERROR(PEB008,pvFolderName,DELCHR(UPPERCASE(pvPathName),'=',DELCHR(gTextMgt.CleanTxt(UPPERCASE(pvPathName)),'=','<>:"/|?*')));

      FOR i := 1 TO STRLEN(pvPathName) DO BEGIN
        IF (COPYSTR(pvPathName,i,1) = '\') AND (LastChr = '\') THEN
          ERROR(PEB010,pvFolderName);
        LastChr := COPYSTR(pvPathName,i,1);
      END;
      // 0063
    END;

    LOCAL PROCEDURE GetPathLevel@1000000023(pLevel@1000000001 : Integer;pFolderName@1000000000 : Text[1024]) rPathStr : Text[1024];
    VAR
      i@1000000002 : Integer;
      j@1100585000 : Integer;
      PEB011@1100570000 : TextConst 'ENU=The folder name must not end with a space or dot.\Path: "%1";SVE=Namnet p† en mapp f†r inte sluta med en punkt eller mellanslag.\S”kv„g: "%1"';
    BEGIN
      // PEB0063
      pFolderName := DELCHR(pFolderName,'<>','\') + '\';

      FOR i := 1 TO pLevel DO BEGIN
        j := STRPOS(pFolderName, '\');
        IF DELCHR(COPYSTR(pFolderName, 1, j-1),'>','. ') <> COPYSTR(pFolderName, 1, j-1) THEN
          ERROR(PEB011, rPathStr + '\' + pFolderName);
        rPathStr += '\'+ COPYSTR(pFolderName, 1, j-1);
        pFolderName := COPYSTR(pFolderName,j+1);
      END;

      // 0063
    END;

    PROCEDURE MoveFile@1000000024(pFromPathFileName@1000000001 : Text[1000];pToPath@1000000002 : Text[1000];pFileName@1000000003 : Text[100]);
    BEGIN
      // PEB0063
      IF ISCLEAR(gFSO) THEN
        CREATE(gFSO,FALSE,TRUE);

      CheckAndCreatePath(pToPath,TRUE);

      IF pFileName <> '' THEN
        gFSO.MoveFile(pFromPathFileName,pToPath+pFileName)
      ELSE
        gFSO.MoveFile(pFromPathFileName,pToPath);
      // 0063
    END;

    PROCEDURE GetInvNoFromString@1100570005(pInValue@1000000006 : Text) rOutCode : Code[30];
    VAR
      Str1@1000000004 : Text[30];
      Str2@1000000005 : Text[30];
      NoSeStr@1000000007 : Code[20];
      NoSeStrPlace@1000000008 : 'None,Begining,End';
      CashReceiptInvNoseries@1100570000 : Record 11128059;
    BEGIN
      // PEB0065
      CashReceiptInvNoseries.FINDSET;
      REPEAT
        CASE TRUE OF
          CashReceiptInvNoseries.Prefix <> '':
            BEGIN
              CashReceiptInvNoseries.TESTFIELD(Suffix,'');
              NoSeStr := CashReceiptInvNoseries.Prefix;
              NoSeStrPlace := NoSeStrPlace::Begining
            END;
          CashReceiptInvNoseries.Suffix <> '':
            BEGIN
              CashReceiptInvNoseries.TESTFIELD(Prefix,'');
              NoSeStr := CashReceiptInvNoseries.Suffix;
              NoSeStrPlace := NoSeStrPlace::"End";
            END;
          ELSE BEGIN
            NoSeStr := '';
            NoSeStrPlace := NoSeStrPlace::None;
          END;
        END;
        Str1 := CashReceiptInvNoseries."From No.";
        Str2 := CashReceiptInvNoseries."To No.";

        rOutCode := GetInvNo(pInValue,Str1,Str2,NoSeStr,NoSeStrPlace);
        IF (rOutCode <> '') AND InvCredExist(rOutCode) THEN
          EXIT(rOutCode);
      UNTIL CashReceiptInvNoseries.NEXT = 0;
      // 0065
    END;

    LOCAL PROCEDURE GetInvNo@1100570004(pInValue@1000000003 : Text;pInFromValue@1000000001 : Code[20];pInToValue@1000000002 : Code[20];pNoSeStr@1000000000 : Code[20];pNoSeStrPlace@1000000008 : 'None,Begining,End') rOutCode : Code[20];
    VAR
      StartPos@1000000004 : Integer;
      Length1@1000000005 : Integer;
      Length2@1000000006 : Integer;
      DoubleCheck@1000000007 : Boolean;
      PEB012@1100570001 : TextConst 'ENU=Min and Max Must Be Only one Sign Difference i Length;SVE=Min och max f†r endast vara ett tecken i l„ngdskillnad';
      PEB013@1100570000 : TextConst 'ENU=Max must be Equal or one Sign longer than Min;SVE=Max m†ste vara lika eller ett tecken l„ngre „n min';
    BEGIN
      // PEB0065
      Length1 := STRLEN(pInFromValue);
      Length2 := STRLEN(pInToValue);

      IF (Length2 - Length1) > 1 THEN
        ERROR(PEB012);

      IF Length1 > Length2 THEN
        ERROR(PEB013);

      DoubleCheck := Length1 <> Length2;

      FOR StartPos := 1 TO (STRLEN(pInValue) - Length1 + 1) DO BEGIN
        rOutCode := COPYSTR(pInValue,StartPos,Length1);
        IF (GetInvValue(rOutCode,Length1) IN [pInFromValue..pInToValue]) AND
           FindInvNo(pInValue,rOutCode,pNoSeStr,pNoSeStrPlace) THEN BEGIN
          CASE pNoSeStrPlace OF
            pNoSeStrPlace::Begining: EXIT(pNoSeStr + rOutCode);
            pNoSeStrPlace::"End": EXIT(rOutCode + pNoSeStr);
            pNoSeStrPlace::None: EXIT(rOutCode);
          END;
        END;
        IF DoubleCheck THEN BEGIN
          rOutCode := COPYSTR(pInValue,StartPos,Length2);
          IF (GetInvValue(rOutCode,Length2) IN [pInFromValue..pInToValue]) AND
             FindInvNo(pInValue,rOutCode,pNoSeStr,pNoSeStrPlace) THEN BEGIN
            CASE pNoSeStrPlace OF
              pNoSeStrPlace::Begining: EXIT(pNoSeStr + rOutCode);
              pNoSeStrPlace::"End": EXIT(rOutCode + pNoSeStr);
              pNoSeStrPlace::None: EXIT(rOutCode);
            END;
          END;
        END;
      END;
      EXIT('');
      // 0065
    END;

    LOCAL PROCEDURE GetInvValue@1000000027(VAR pInCode@1000000000 : Code[20];pInLength@1000000002 : Integer) rOutValue : Code[20];
    BEGIN
      // PEB0065
      pInCode := DELCHR(pInCode,'<>',DELCHR(pInCode,'=','0123456789'));

      IF DELCHR(pInCode,'=','0123456789')  <> '' THEN BEGIN
        CLEAR(pInCode);
        EXIT('');
      END;

      rOutValue := pInCode;

      IF STRLEN(FORMAT(rOutValue)) <> pInLength THEN BEGIN
        CLEAR(pInCode);
        EXIT('');
      END;
      // 0065
    END;

    PROCEDURE FindInvNo@1100570003(pInValue@1100570004 : Text;pFoundStr@1100570002 : Code[30];pNoSeStr@1100570001 : Code[20];pNoSeStrPlace@1100570000 : 'None,Begining,End') : Boolean;
    VAR
      SearchStr@1100570003 : Code[50];
    BEGIN
      CASE pNoSeStrPlace OF
        pNoSeStrPlace::Begining: SearchStr := pNoSeStr + pFoundStr;
        pNoSeStrPlace::"End": SearchStr := pFoundStr + pNoSeStr;
        pNoSeStrPlace::None: SearchStr := pFoundStr;
      END;
      EXIT(STRPOS(pInValue,SearchStr) <> 0);
    END;

    PROCEDURE ShellNoWarning@1100585038(pProgramPath@1000000000 : Text[1024];pArgs@1000000002 : Text[1024];pWaitOnReturn@1100585000 : Boolean;pHidden@1100585001 : Boolean) rReturnCode : Integer;
    VAR
      WshShell@1000000001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      WindowStyle@1000000003 : Integer;
    BEGIN
      // PEB0049
      // If pArgs contains paths with spaces must be enclosed by "
      // Ex. "C:\My Documents\Test\"
      // Documentation: http://msdn.microsoft.com/en-us/library/d5fk67ky (VS.85). aspx
      // pWaitOnReturn = TRUE: Runs "half" modally. Some things can be done in NAV during the period.
      // pHidden = TRUE: The program runs without being called to appear.

      CREATE(WshShell,FALSE,TRUE);

      IF pHidden THEN
        WindowStyle := 0 // Hides the window and activates another window
      ELSE
        WindowStyle := 1; // Activates and displays a window
      IF pArgs <> '' THEN
        rReturnCode := WshShell.Run(STRSUBSTNO('"%1" %2', pProgramPath, pArgs),WindowStyle,pWaitOnReturn)
      ELSE
        rReturnCode := WshShell.Run(STRSUBSTNO('"%1"', pProgramPath),WindowStyle,pWaitOnReturn);
      CLEAR(WshShell);
      // 0049
    END;

    PROCEDURE Tx@1100570018(pText@1100570001 : Text[1024];pLanguageCode@1100570002 : Code[10];pObject@1100570003 : Code[20]) : Text[1024];
    BEGIN
    END;

    PROCEDURE ReservGlobal@12047982(pCode@1100570000 : Code[20]);
    VAR
      RecordRef@1100570003 : RecordRef;
      FieldRef@1100570002 : FieldRef;
    BEGIN
      // Reservs a new Global
      // Max 18 Globals at the same time.

      // Make the reservation by an Event from Codeunit 1 like this.
      // LOCAL [EventSubscriber] OnAfterCompanyOpen()
      // BaseMgt.ReservGlobal('Var1');

      RecordRef.OPEN(DATABASE::"Global Parameters");
      FieldRef := RecordRef.FIELD(20 + GetGlobalNextFreeID(pCode));
      RecordRef.FILTERGROUP(1);
      FieldRef.SETRANGE(pCode);
    END;

    PROCEDURE SetGlobal@1100570000(pCode@1100570000 : Code[20];pTxt@1100570001 : Text[1024]);
    VAR
      RecordRef@1100570003 : RecordRef;
      FieldRef@1100570002 : FieldRef;
    BEGIN
      // Here is the value set for a global variable
      //SetGlobal('Name','Value');
      RecordRef.OPEN(DATABASE::"Global Parameters");
      FieldRef := RecordRef.FIELD(GetGlobalID(pCode,TRUE));
      RecordRef.FILTERGROUP(1);
      FieldRef.SETRANGE(pTxt);
    END;

    PROCEDURE GetGlobal@1100570007(pCode@1100570000 : Code[20]) : Text[1024];
    VAR
      RecordRef@1100570001 : RecordRef;
      FieldRef@1100570002 : FieldRef;
    BEGIN
      // Here fetches the values for a global variable
      //ValueVar := GetGlobal('Name');
      RecordRef.OPEN(DATABASE::"Global Parameters");
      FieldRef := RecordRef.FIELD(GetGlobalID(pCode,TRUE));
      RecordRef.FILTERGROUP(1);
      EXIT(FieldRef.GETFILTER);
    END;

    LOCAL PROCEDURE GetGlobalNextFreeID@12047988(pCode@12047959 : Code[20]) : Integer;
    VAR
      IDArray@12047958 : ARRAY [20] OF Code[20];
      i@12047960 : Integer;
    BEGIN
      IF GetGlobalID(pCode,FALSE) <> 0 THEN
        ERROR('Global ID "%1" is already in use',pCode);
      GetGlobalIDArray(pCode,IDArray);
      FOR i := 1 TO 19 DO BEGIN
        IF IDArray[i] = '' THEN
          EXIT(i);
      END;
      ERROR('There is no free Global all 18 are in use',pCode);
    END;

    LOCAL PROCEDURE GetGlobalID@12047970(pCode@12047959 : Code[20];pWithError@12047961 : Boolean) : Integer;
    VAR
      IDArray@12047958 : ARRAY [20] OF Code[20];
      i@12047960 : Integer;
    BEGIN
      GetGlobalIDArray(pCode,IDArray);
      FOR i := 1 TO 19 DO BEGIN
        IF IDArray[i] = pCode THEN
          EXIT(i);
      END;
      IF pWithError THEN
        ERROR('Array ID "%1" is not Reservd in the Globals',pCode);
    END;

    LOCAL PROCEDURE GetGlobalIDArray@12047962(pCode@1100570000 : Code[20];VAR pvIDArray@12047958 : ARRAY [20] OF Code[20]) : Text[1024];
    VAR
      RecordRef@1100570001 : RecordRef;
      FieldRef@1100570002 : FieldRef;
      i@12047959 : Integer;
    BEGIN
      RecordRef.OPEN(DATABASE::"Global Parameters");
      FOR i := 1 TO 19 DO BEGIN
        FieldRef := RecordRef.FIELD(20 + i);
        RecordRef.FILTERGROUP(1);
        pvIDArray[i] := FieldRef.GETFILTER;
      END;
    END;

    LOCAL PROCEDURE GetSetup@1100570011();
    BEGIN
      IF gSetupOK THEN
        EXIT;
      gGLSetup.GET;
      IF NOT gVPSetup.GET THEN BEGIN
        gVPSetup.INIT;
        gVPSetup.INSERT;
      END;
      gSetupOK := TRUE;
    END;

    PROCEDURE InvCredExist@12047958(pApplyToDocNo@1000000000 : Code[20]) : Boolean;
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      IF pApplyToDocNo = '' THEN
        EXIT(FALSE);
      CustLedgerEntry.SETCURRENTKEY("Document No.");
      CustLedgerEntry.SETRANGE("Document No.",pApplyToDocNo);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      EXIT(CustLedgerEntry.FIND('-'));
    END;

    PROCEDURE Initialize@12047959();
    VAR
      PermSet@12047966 : Record 2000000004;
      Read@12047965 : ' ,Yes,Inderect';
      DoInsert@12047964 : ' ,Yes,Inderect';
      DoModify@12047963 : ' ,Yes,Inderect';
      DoDelete@12047962 : ' ,Yes,Inderect';
      MiscSetup@12047958 : Record 11128069;
      InitVersion@12047959 : Integer;
      VendorLedgerEntry@12047968 : Record 25;
      CustLedgerEntry@12047960 : Record 21;
      VPPackEntry@12047969 : Record 11128063;
      Rec@12047972 : Record 2000000026;
      VPSetup@12047974 : Record 11128066;
      HasError@12047976 : Boolean;
      BaseVersion@12047977 : Codeunit 11128083;
      CountryRegion@12047978 : Record 9;
      SetContactToNone@12047979 : Boolean;
      GeneralLedgerSetup@12047980 : Record 98;
    BEGIN

      // Set new level for InitVersion if enything will be Initialized
      InitVersion := 11;

      IF NOT MiscSetup.GET THEN BEGIN
        MiscSetup.INIT;
        MiscSetup.INSERT;
      END;

      IF MiscSetup."Last Init SweBase Version" = BaseVersion.GetSweBaseVersion THEN
        EXIT;


      IF MiscSetup."Initialize Version" = InitVersion THEN
        EXIT;
      // PE6.03
      IF MiscSetup."Initialize Version" < 5 THEN BEGIN
        // Cleanup VP Pack
        VendorLedgerEntry.RESET;
        VendorLedgerEntry.SETCURRENTKEY("VP Pack No.");
        VendorLedgerEntry.SETFILTER("VP Pack No.",'<>0');
        VendorLedgerEntry.SETRANGE(Open,FALSE);
        IF  VendorLedgerEntry.FINDSET THEN REPEAT
          VendorLedgerEntry."VP Pack No." := 0;

          VPPackEntry.SETRANGE(Type, VPPackEntry.Type::Vendor);
          VPPackEntry.SETRANGE("Ledger Entry No.",VendorLedgerEntry."Entry No.");
          IF VPPackEntry.FINDSET THEN REPEAT
            VPPackEntry.Status := VPPackEntry.Status::Closed;
            VPPackEntry.MODIFY;
          UNTIL VPPackEntry.NEXT = 0;
          VendorLedgerEntry.MODIFY;
        UNTIL VendorLedgerEntry.NEXT = 0;

        IF FORMAT(MiscSetup."Extend Allow Posting To") = '' THEN BEGIN
          EVALUATE(MiscSetup."Extend Allow Posting To" ,'<4Y>');
        END;

      END;
      // PE8.08
      IF MiscSetup."Initialize Version" < 11 THEN BEGIN
        // Cleanup VP Pack
        WITH VendorLedgerEntry DO BEGIN
          RESET;
          SETCURRENTKEY("VP Pack No.");
          SETFILTER("VP Pack No.",'<>0');
          SETRANGE(Open,FALSE);
          IF FINDSET THEN REPEAT
            "VP Pack No." := 0;

            VPPackEntry.SETRANGE(Type, VPPackEntry.Type::Vendor);
            VPPackEntry.SETRANGE("Ledger Entry No.","Entry No.");
            IF VPPackEntry.FINDSET THEN REPEAT
              VPPackEntry.Status := VPPackEntry.Status::Closed;
              VPPackEntry.MODIFY;
            UNTIL VPPackEntry.NEXT = 0;
            MODIFY;
          UNTIL NEXT = 0;
        END;

        WITH CustLedgerEntry DO BEGIN
          RESET;
          SETCURRENTKEY("VP Pack No.");
          SETFILTER("VP Pack No.",'<>0');
          SETRANGE(Open,FALSE);
          IF FINDSET THEN REPEAT
            "VP Pack No." := 0;

            VPPackEntry.SETRANGE(Type, VPPackEntry.Type::Customer);
            VPPackEntry.SETRANGE("Ledger Entry No.","Entry No.");
            IF VPPackEntry.FINDSET THEN REPEAT
              VPPackEntry.Status := VPPackEntry.Status::Closed;
              VPPackEntry.MODIFY;
            UNTIL VPPackEntry.NEXT = 0;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;

      MiscSetup."Initialize Version" := InitVersion;
      MiscSetup.MODIFY;
    END;

    [EventSubscriber(Codeunit,40,OnAfterCompanyClose)]
    LOCAL PROCEDURE ClearGlobalsOnAfterCompanyClose@12047963();
    VAR
      RecordRef@12047960 : RecordRef;
      FieldRef@12047959 : FieldRef;
      i@12047958 : Integer;
    BEGIN
      // Clear of all variables
      RecordRef.OPEN(DATABASE::"Global Parameters");
      FOR i := 1 TO RecordRef.FIELDCOUNT DO BEGIN
        FieldRef := RecordRef.FIELDINDEX(i);
        RecordRef.FILTERGROUP(1);
        FieldRef.SETRANGE;
      END;
    END;

    PROCEDURE CheckSupportForDotNetComponents@12047964();
    VAR
      FileMgt@12047958 : Codeunit 419;
      VPManagement@12047959 : Codeunit 11128061;
    BEGIN
      VPManagement.CheckSupportForDotNetComponents;
    END;

    LOCAL PROCEDURE InsertSweBaseModules@12047961();
    BEGIN
    END;

    LOCAL PROCEDURE InsertModule@12047965(PEBCode@12047958 : Code[10];DescriptionSWE@12047959 : Text;DescriptionENU@12047960 : Text);
    BEGIN
    END;

    PROCEDURE Module@12047966(PEBCode@12047959 : Code[10]) : Boolean;
    BEGIN
    END;

    PROCEDURE ModuleInActiveError@12047967(PEBCode@12047958 : Code[10]);
    BEGIN
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0042 Get Coding from Latest Invoice
      PEB0063 Function for Test and Creation of File Paths
      PEB0065 BG-Max
      PEB0049 Misc. Functions such as Ansii to Ascii, Modulas 10 etc.
      PEB
      PEB *** End ***

      170704 ITERO.DL extend result from GetInvNoFromString  20->30
      190627 ORANGO.DL #24730 upgrade to 8.11 after bug found
    }
    END.
  }
}

