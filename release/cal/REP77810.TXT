OBJECT Report 77810 Import AL Translation File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=TTool;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import AL Translation File;
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  ImportFile@1100525001 : File;
                  InputStream@1100525000 : InStream;
                BEGIN
                  WindowOpen;

                  ImportFile.TEXTMODE := TRUE;
                  ImportFile.WRITEMODE := FALSE;
                  ImportFile.OPEN(FileName);
                  ImportFile.CREATEINSTREAM(InputStream);

                  IF NOT XmlDocumentTryLoadFromStream(InputStream) THEN
                    ERROR(DocumentFormatErr,FileName);

                  CheckLanguageMeta;

                  ImportTranslationUnits;

                  WindowClose;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               IsSourceFile := FALSE;
             END;

    }
    CONTROLS
    {
      { 1100525007;;Container;
                  ContainerType=ContentArea }

      { 1100525006;1;Field  ;
                  Name=Translate Text File;
                  CaptionML=ENU=Translate Text File;
                  SourceExpr=FileName;
                  OnAssistEdit=VAR
                                 FileMgt@1100525000 : Codeunit 419;
                               BEGIN
                                 IF FileName = '' THEN
                                   FileName := '.xlf';
                                 FileName := FileMgt.OpenFileDialog('Import Translate Text File',FileName,'');
                               END;
                                }

      { 1100525005;1;Field  ;
                  Name=Project Code;
                  CaptionML=ENU=Project Code;
                  SourceExpr=TTProject.Code;
                  TableRelation="TT NAV Project" }

      { 1100525008;1;Field  ;
                  Name=Is Source File;
                  CaptionML=ENU=Is Source File;
                  SourceExpr=IsSourceFile }

      { 1100525009;1;Field  ;
                  Name=Create Missing Captions;
                  CaptionML=ENU=Create Missing Captions;
                  SourceExpr=CreateMissingSource }

      { 1100525004;1;Field  ;
                  Name=Skip Empty Captions;
                  CaptionML=ENU=Skip Empty Captions;
                  SourceExpr=SkipEmptyCaptions }

      { 1100525003;1;Field  ;
                  Name=Overwrite Existing Captions;
                  CaptionML=ENU=Overwrite Existing Captions;
                  SourceExpr=OverwriteExistingCaption }

      { 1100525000;1;Field  ;
                  Name=Overwrite Notes;
                  CaptionML=ENU=Overwrite Notes;
                  SourceExpr=OverwriteNotes }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FileName@1100525003 : Text[250];
      IsSourceFile@1100525013 : Boolean;
      CreateMissingSource@1100525020 : Boolean;
      SkipEmptyCaptions@1100525002 : Boolean;
      OverwriteExistingCaption@1100525001 : Boolean;
      OverwriteNotes@1100525004 : Boolean;
      TTProject@1100525000 : Record 77810;
      FileXmlDocument@1100525006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DocumentFormatErr@1100525007 : TextConst 'ENU=File %1 is not a valid .xlf file.';
      XmlNamespaceManager@1100525008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XmlDOMMgt@1100525009 : Codeunit 6224;
      SourceTargetNoMatchErr@1100525010 : TextConst 'ENU=Source language and target language should be equal for source file import';
      TargetLanguageWithSourceErr@1100525011 : TextConst 'ENU=Target language should differ from source language';
      SourceLanguageProjectErr@1100525012 : TextConst 'ENU=Source language should be equal to %1 for project %2';
      TargetLanguageProjectErr@1100525014 : TextConst 'ENU=Target language should be equal to %1 or %2 for project %3';
      OriginNoMatchErr@1100525015 : TextConst 'ENU=Origin tag doesn''t match to project origin';
      GroupingErr@1100525025 : TextConst 'ENU=Grouping of current file do not match with previous one imported';
      ReplaceOriginBlankQst@1100525016 : TextConst 'ENU=Origin file for project %1 is left blank. Do you want to use %1 origin?';
      Window@1100525017 : Dialog;
      CurrentLanguage@1100525018 : Code[20];
      SourceNotFoundErr@1100525019 : TextConst 'ENU="Source caption %1 was not found. Make sure that .xlf file is valid or import it with ""Create missing source captions"". "';
      WindowPlaceholdersLbl@1100525021 : TextConst 'ENU=#1#################\@2@@@@@@@@@@@@@@@@@';
      ValidatingXLFLbl@1100525022 : TextConst 'ENU=Validating .xlf file';
      CheckMetaLbl@1100525023 : TextConst 'ENU=Checking meta data';
      ImportingTranslationsLbl@1100525024 : TextConst 'ENU=Importing translations';

    PROCEDURE SetTTProject@1100525000(LocProject@1100525000 : Record 77810);
    BEGIN
      TTProject.GET(LocProject.Code);
    END;

    [TryFunction]
    LOCAL PROCEDURE XmlDocumentTryLoadFromStream@1100525003(VAR IStream@1100525000 : InStream);
    VAR
      XmlReader@1100525003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReader";
      XmlReaderSettings@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReaderSettings";
      XmlValidationType@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.ValidationType";
    BEGIN
      WindowUpdateCaption(ValidatingXLFLbl);
      XmlReaderSettings := XmlReaderSettings.XmlReaderSettings;
      XmlReaderSettings.ValidationType := XmlValidationType.Schema;
      XmlReaderSettings.Schemas.Add('urn:oasis:names:tc:xliff:document:1.2', 'https://docs.oasis-open.org/xliff/v1.2/os/xliff-core-1.2-transitional.xsd');

      XmlReader := XmlReader.Create(IStream,XmlReaderSettings);

      FileXmlDocument := FileXmlDocument.XmlDocument;

      FileXmlDocument.Load(XmlReader);

      XmlNamespaceManager := XmlNamespaceManager.XmlNamespaceManager(FileXmlDocument.NameTable);
      XmlNamespaceManager.AddNamespace('xlf',FileXmlDocument.DocumentElement.NamespaceURI);

      XmlReader.Close;
    END;

    LOCAL PROCEDURE CheckLanguageMeta@1100525001();
    VAR
      XmlNode@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SourceLanguage@1100525001 : Text;
      TargetLanguage@1100525002 : Text;
      OriginFile@1100525005 : Text;
      TTLanguage@1100525003 : Record 77781;
      TTLanguage2@1100525004 : Record 77781;
    BEGIN
      WindowUpdateCaption(CheckMetaLbl);
      XmlDOMMgt.FindNodeNs(FileXmlDocument.DocumentElement,'/xlf:xliff/xlf:file',XmlNamespaceManager,XmlNode);

      SourceLanguage := XmlDOMMgt.GetAttributeValue(XmlNode,'source-language');
      TargetLanguage := XmlDOMMgt.GetAttributeValue(XmlNode,'target-language');
      OriginFile := XmlDOMMgt.GetAttributeValue(XmlNode,'original');

      IF IsSourceFile THEN BEGIN
        IF SourceLanguage <> TargetLanguage THEN
          ERROR(SourceTargetNoMatchErr);
      END ELSE
        IF SourceLanguage = TargetLanguage THEN
          ERROR(TargetLanguageWithSourceErr);

      TTLanguage.GET(TTProject."Source Language ID");
      IF NOT (UPPERCASE(SourceLanguage) IN [TTLanguage."ISO Code Short",TTLanguage."ISO Code Long"]) THEN
        ERROR(SourceLanguageProjectErr,TTLanguage."ISO Code Long",TTProject.Code);

      IF NOT IsSourceFile THEN BEGIN
        TTLanguage.GET(TTProject."Target Language ID");
        IF TTLanguage2.GET(TTProject."Third Language ID") THEN;

        IF (UPPERCASE(TargetLanguage) IN [TTLanguage."ISO Code Short",TTLanguage."ISO Code Long"]) THEN
          CurrentLanguage := TTLanguage.ID
        ELSE IF (UPPERCASE(TargetLanguage) IN [TTLanguage2."ISO Code Short",TTLanguage2."ISO Code Long"]) THEN
          CurrentLanguage := TTLanguage2.ID
        ELSE
          ERROR(TargetLanguageProjectErr,TTLanguage."ISO Code Long",TTLanguage2."ISO Code Long",TTProject.Code);
      END;

      IF TTProject."Original File" = '' THEN BEGIN
        IF CONFIRM(ReplaceOriginBlankQst,FALSE,TTProject.Code,OriginFile) THEN BEGIN
          TTProject.VALIDATE("Original File",OriginFile);
          TTProject.MODIFY;
        END;
      END;

      IF TTProject."Original File" <> OriginFile THEN
        ERROR(OriginNoMatchErr);
    END;

    LOCAL PROCEDURE ImportTranslationUnits@1100525002();
    VAR
      XmlNodeList@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNode@1100525005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TranslationUnitCount@1100525000 : Integer;
      Counter@1100525002 : Integer;
    BEGIN
      WindowUpdateCaption(ImportingTranslationsLbl);

      TranslationUnitCount := XmlDOMMgt.FindNodeCountNs(FileXmlDocument.DocumentElement,'//xlf:trans-unit',XmlNamespaceManager);

      IF XmlDOMMgt.FindNodesWithNamespaceManager(FileXmlDocument.DocumentElement,'//xlf:trans-unit',XmlNamespaceManager,XmlNodeList) THEN
        FOREACH XmlNode IN XmlNodeList DO BEGIN
          Counter += 1;
          ProcessTransUnit(XmlNode);
          WindowUpdateCounter((Counter / TranslationUnitCount * 10000) DIV 1);
        END;
    END;

    LOCAL PROCEDURE ProcessTransUnit@1100525030(VAR TransUnitXmlNode@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      IdTxt@1100525001 : Text;
      SizeUnitTxt@1100525002 : Text;
      XmlSpaceTxt@1100525003 : Text;
      TTObject@1100525004 : Record 77811;
      TTCaption@1100525007 : Record 77812;
      TTCaption2@1100525009 : Record 77812;
      SourceText@1100525005 : Text;
      TargetText@1100525006 : Text;
      NextCNo@1100525008 : Integer;
      ParentNode@1100525010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      GroupName@1100525011 : Text;
      DeveloperNote@1100525012 : Text;
      XliffGeneratorNote@1100525013 : Text;
    BEGIN
      SourceText := XmlDOMMgt.FindNodeTextNs(TransUnitXmlNode,'xlf:source', XmlNamespaceManager);
      TargetText := XmlDOMMgt.FindNodeTextNs(TransUnitXmlNode,'xlf:target', XmlNamespaceManager);
      IF (SourceText = '') AND SkipEmptyCaptions THEN
        EXIT;

      IF NOT IsSourceFile AND SkipEmptyCaptions THEN
        EXIT;

      IdTxt := XmlDOMMgt.GetAttributeValue(TransUnitXmlNode,'id');
      IF IdTxt = '' THEN
        EXIT;
      ParentNode := TransUnitXmlNode.ParentNode;

      IF ParentNode.Name = 'group' THEN
        GroupName := XmlDOMMgt.GetAttributeValue(ParentNode,'id')
      ELSE
        GroupName := '';

      DeveloperNote := XmlDOMMgt.FindNodeTextNs(TransUnitXmlNode,'xlf:note[@from=''Developer'']',XmlNamespaceManager);
      XliffGeneratorNote := XmlDOMMgt.FindNodeTextNs(TransUnitXmlNode,'xlf:note[@from=''Xliff Generator'']',XmlNamespaceManager);

      GetTTObject(TTObject,IdTxt,DeveloperNote,XliffGeneratorNote);

      TTCaption.INIT;
      TTCaption."Object No." := TTObject."Entry No.";
      TTCaption."Project Code" := TTProject.Code;

      IF IsSourceFile THEN BEGIN
        TTCaption."Language ID" := TTProject."Source Language ID";
        TTCaption.SetCaption(SourceText);
        TTCaption.Length := STRLEN(SourceText);
      END ELSE BEGIN
        IF NOT TTCaption2.GET(TTCaption."Project Code", TTProject."Source Language ID", TTCaption."Object No.") THEN BEGIN
          IF CreateMissingSource THEN BEGIN
            TTCaption2.INIT;
            TTCaption2."Entry No." := GetNextTTCaptionNo;
            TTCaption2."Language ID" := TTProject."Source Language ID";
            TTCaption2."Object No." := TTObject."Entry No.";
            TTCaption2."Project Code" := TTProject.Code;
            TTCaption2.SetCaption(SourceText);
            TTCaption2.Length := STRLEN(SourceText);
            TTCaption2.Status := TTCaption.Status::Generated;
            TTCaption2."Group Name" := GroupName;
            TTCaption2.VALIDATE(Caption1);
            TTCaption2.INSERT(TRUE);
          END ELSE
            ERROR(SourceNotFoundErr, SourceText);
        END ELSE BEGIN
          IF TTCaption2."Group Name" <> GroupName THEN
            ERROR(GroupingErr);
        END;
        TTCaption."Language ID" := CurrentLanguage;
        TTCaption.SetCaption(TargetText);
        TTCaption.Length := STRLEN(TargetText);
      END;

      TTCaption."Entry No." := GetNextTTCaptionNo;
      TTCaption."Group Name" := GroupName;
      TTCaption.Status := TTCaption.Status::Imported;
      TTCaption.VALIDATE(Caption1);

      IF NOT TTCaption.INSERT(TRUE) THEN
        IF TTCaption.GetCaption <> ''  THEN BEGIN
          TTCaption2.GET(TTCaption."Project Code", TTCaption."Language ID", TTCaption."Object No.");
          IF OverwriteExistingCaption OR TTCaption2.ImportAllowed THEN BEGIN
            IF TTCaption2.GetCaption <> TTCaption.GetCaption THEN
              TTCaption2.Status := TTCaption2.Status::Modified;
            TTCaption2.SetCaption(TTCaption.GetCaption);
            TTCaption2.MODIFY(TRUE);
          END;
        END;
    END;

    LOCAL PROCEDURE GetTTObject@1100525031(VAR TTObject@1100525000 : Record 77811;IdTxt@1100525001 : Text;DeveloperNoteTxt@1100525016 : Text;XliffGeneratorNoteTxt@1100525017 : Text);
    VAR
      Txt@1100525004 : Text;
      SpacePos@1100525002 : Integer;
      Token@1100525003 : Text;
      Stage@1100525005 : Integer;
      CurrType@1100525006 : Text;
      CurrValue@1100525007 : Text;
      ObjectType@1100525008 : ',Table,TableExtension,Report,,Codeunit,XMLport,,Page,PageExtension,Enum,EnumExtension,Query,Profile';
      ObjectID@1100525009 : Code[20];
      ValueType@1100525010 : ',NamedType,Property,ReportLabel';
      ValueID@1100525011 : Code[20];
      ContainerType@1100525012 : ' ,Field,Control,Action,EnumValue,Method,ReportDataItem,QueryColumn,RequestPage,ReportColumn,View,QueryFilter,XmlPortNode';
      ContainerID@1100525013 : Code[20];
      SubContainerType@1100525018 : ' ,Method';
      SubContainerID@1100525019 : Code[20];
      NextNo@1100525014 : Integer;
      TTObject2@1100525015 : Record 77811;
    BEGIN
      Txt := IdTxt;
      REPEAT
        SpacePos := STRPOS(Txt,' ');
        IF SpacePos = 0 THEN
          Token := COPYSTR(Txt,1)
        ELSE
          Token := COPYSTR(Txt,1,SpacePos - 1);

        IF (Token <> '-') AND (Token <> '') THEN BEGIN
          IF Stage MOD 2 = 0 THEN
            CurrType := Token
          ELSE BEGIN
            CurrValue := Token;
            CASE Stage OF
              1:
                BEGIN
                  EVALUATE(ObjectType,CurrType);
                  EVALUATE(ObjectID,CurrValue);
                END;
              3:
                BEGIN
                  IF STRLEN(Txt) - STRLEN(Token) > 0 THEN BEGIN
                    EVALUATE(ContainerType,CurrType);
                    EVALUATE(ContainerID,CurrValue);
                  END ELSE BEGIN
                    EVALUATE(ValueType,CurrType);
                    EVALUATE(ValueID,CurrValue);
                  END;
                END;
              5:
                BEGIN
                  IF STRLEN(Txt) - STRLEN(Token) > 0 THEN BEGIN
                    EVALUATE(SubContainerType,CurrType);
                    EVALUATE(SubContainerID,CurrValue);
                  END ELSE BEGIN
                    EVALUATE(ValueType,CurrType);
                    EVALUATE(ValueID,CurrValue);
                  END;
                END;
              7:
                BEGIN
                  EVALUATE(ValueType,CurrType);
                  EVALUATE(ValueID,CurrValue);
                END;
            END;
          END;
          Stage += 1;
        END;
        Txt := COPYSTR(Txt, SpacePos + 1);
      UNTIL (STRPOS(Txt,' ') = 0) AND (Stage IN [4, 6, 8]);


      TTObject.SETCURRENTKEY("Object Type","Object ID","Container Type","Container ID","Sub. Container Type","Sub. Container ID","Value Type","Value ID");
      TTObject.SETRANGE("Object Type",ObjectType);
      TTObject.SETRANGE("Object ID",ObjectID);
      TTObject.SETRANGE("Container Type",ContainerType);
      TTObject.SETRANGE("Container ID",ContainerID);
      TTObject.SETRANGE("Sub. Container Type",SubContainerType);
      TTObject.SETRANGE("Sub. Container ID",SubContainerID);
      TTObject.SETRANGE("Value Type",ValueType);
      TTObject.SETRANGE("Value ID",ValueID);

      IF NOT TTObject.FINDLAST THEN BEGIN
        TTObject.INIT;
        IF TTObject2.FINDLAST THEN
          NextNo := TTObject2."Entry No." + 1
        ELSE
          NextNo := 1;

        TTObject."Entry No." := NextNo;
        TTObject."Object Type" := ObjectType;
        TTObject."Object ID" := ObjectID;
        TTObject."Container Type" := ContainerType;
        TTObject."Container ID" := ContainerID;
        TTObject."Sub. Container Type" := SubContainerType;
        TTObject."Sub. Container ID" := SubContainerID;
        TTObject."Value Type" := ValueType;
        TTObject."Value ID" := ValueID;
        TTObject."Developer Note" := COPYSTR(DeveloperNoteTxt,1,MAXSTRLEN(TTObject."Developer Note"));
        TTObject."Xliff Generator Note" := COPYSTR(XliffGeneratorNoteTxt,1,MAXSTRLEN(TTObject."Xliff Generator Note"));

        TTObject.INSERT;
      END ELSE BEGIN
        IF (TTObject."Developer Note" = '') OR OverwriteNotes THEN
          TTObject."Developer Note" := COPYSTR(DeveloperNoteTxt,1,MAXSTRLEN(TTObject."Developer Note"));
        IF (TTObject."Xliff Generator Note" = '') OR OverwriteNotes THEN
          TTObject."Xliff Generator Note" := COPYSTR(XliffGeneratorNoteTxt,1,MAXSTRLEN(TTObject."Xliff Generator Note"));
        TTObject.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetNextTTCaptionNo@1100525005() NextCNo : Integer;
    VAR
      TTCaption2@1100525000 : Record 77812;
    BEGIN
      TTCaption2.SETCURRENTKEY("Entry No.");
      IF TTCaption2.FINDLAST THEN
        NextCNo := TTCaption2."Entry No." + 1
      ELSE
        NextCNo := 1;
    END;

    LOCAL PROCEDURE WindowOpen@1100525004();
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(WindowPlaceholdersLbl);
    END;

    LOCAL PROCEDURE WindowUpdateCaption@1100525006(Msg@1100525000 : Text);
    BEGIN
      IF GUIALLOWED THEN
        Window.UPDATE(1,Msg);
    END;

    LOCAL PROCEDURE WindowUpdateCounter@1100525007(Value@1100525000 : Integer);
    BEGIN
      IF GUIALLOWED THEN
        Window.UPDATE(2,Value);
    END;

    LOCAL PROCEDURE WindowClose@1100525008();
    BEGIN
      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

