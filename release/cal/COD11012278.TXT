OBJECT Codeunit 11012278 Document Mailing
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1210190000 : TextConst 'DEU=M”chten Sie einen Beleg erstellen und per E-Mail versenden?;ENU=Do you want to create a document and send this by e-mail?;NLD=Wilt u een document aanmaken en versturen per e-mail?;NOR=Vil du opprette et dokument og sende det med e-post?;SVE=Vill du skapa ett dokument och s„nda det med e-post?';
      Text004@1210190001 : TextConst 'DEU=Mail wurde nicht in der Mappe mit gesendeten Elemente gefunden. M”chten Sie warten?;ENU=Mail is not found in the sent items folder. Do you want to wait?;NLD=Mail is nog niet gevonden in verzonden items folder. Wilt u wachten?;NOR=Kan ikke finne E-Mail i ''Sendt''-mappen. Vil du vente?;SVE=E-post kan inte hittas i ''Skickade mail''. Vill du v„nta?';

    PROCEDURE AskMailDocument@1210190000() : Boolean;
    VAR
      GranulePermissionManagment@1210190001 : Codeunit 11012279;
    BEGIN
      IF GranulePermissionManagment.PermissionDocumentMgtExtra THEN
        EXIT(CONFIRM(Text003, TRUE));
    END;

    PROCEDURE EditDocumentsSignHost@1100528402(DocumentTemplateTypeFilter@1210190000 : Text[250];DocumentLinkRIDs@1210190001 : ARRAY [5] OF RecordID;DepartmentCode@1210190006 : Code[20];ContactNo@1210190002 : Code[20];ContactPersonNo@1210190007 : Code[20]) : Boolean;
    BEGIN
      EditDocuments2(DocumentTemplateTypeFilter, DocumentLinkRIDs, DepartmentCode, ContactNo, ContactPersonNo, '', FALSE, '', TRUE);
    END;

    PROCEDURE EditDocuments@1210190001(DocumentTemplateTypeFilter@1210190000 : Text[250];DocumentLinkRIDs@1210190001 : ARRAY [5] OF RecordID;DepartmentCode@1210190006 : Code[20];ContactNo@1210190002 : Code[20];ContactPersonNo@1210190007 : Code[20];SendMail@1210190003 : Boolean;Recipient@1100528700 : Text[120]) : Boolean;
    BEGIN
      EditDocuments2(DocumentTemplateTypeFilter, DocumentLinkRIDs, DepartmentCode, ContactNo, ContactPersonNo, '', SendMail, Recipient, FALSE);
    END;

    PROCEDURE EditDocuments2@1100528700(DocumentTemplateTypeFilter@1210190000 : Text[250];DocumentLinkRIDs@1210190001 : ARRAY [5] OF RecordID;DepartmentCode@1210190006 : Code[20];ContactNo@1210190002 : Code[20];ContactPersonNo@1210190007 : Code[20];DocumentAction@1100528701 : Code[20];SendMail@1210190003 : Boolean;Recipient@1100528700 : Text[120];EnableSignhost@1100528400 : Boolean) : Boolean;
    VAR
      Contact@1210190004 : Record 5050;
      DocumentTemplate@11012002 : Record 11012401;
      DocumentMgtSetup@1100529600 : Record 11071831;
      EditWordDocuments@1100525000 : Page 11012405;
    BEGIN
      Contact.GET(ContactNo);
      Contact.TESTFIELD("Document Group");
      DocumentMgtSetup.GET;

      DocumentTemplate.FILTERGROUP(10);
      IF NOT DocumentMgtSetup."Filter on Template Doc. Gr." THEN
        DocumentTemplate.SETRANGE("Document Group", Contact."Document Group");
      DocumentTemplate.SETFILTER(Type, DocumentTemplateTypeFilter);
      DocumentTemplate.FILTERGROUP(0);

      EditWordDocuments.SetVars(DocumentLinkRIDs, DepartmentCode, ContactNo, ContactPersonNo, DocumentAction);
      IF SendMail THEN
        EditWordDocuments.SetMailVars(Recipient);
      IF EnableSignhost THEN
        EditWordDocuments.SetEnableSignhost(TRUE);

      EditWordDocuments.SETTABLEVIEW(DocumentTemplate);
      EditWordDocuments.RUNMODAL;
    END;

    PROCEDURE MailDocument@1100528701(Recipient@1100528723 : Text[250];VAR DocumentProperties@1100528722 : Record 11012746;SendAsAttachment@1100528701 : Boolean) : Boolean;
    VAR
      Attachments@1100528700 : ARRAY [5] OF Code[20];
    BEGIN
      EXIT(MailDocumentLocal(Recipient, DocumentProperties, SendAsAttachment, Attachments, TRUE));
    END;

    PROCEDURE MailDocumentWithAttachments@1100528703(Recipient@1100528702 : Text[250];VAR DocumentProperties@1100528701 : Record 11012746;SendAsAttachment@1100528700 : Boolean;Attachments@1100528703 : ARRAY [5] OF Code[20]) : Boolean;
    BEGIN
      EXIT(MailDocumentLocal(Recipient, DocumentProperties, SendAsAttachment, Attachments, TRUE));
    END;

    PROCEDURE MailDocumentWithAttachments2@1100528705(Recipient@1100528702 : Text[250];VAR DocumentProperties@1100528701 : Record 11012746;SendAsAttachment@1100528700 : Boolean;Attachments@1100528703 : ARRAY [5] OF Code[20];ShowMailBeforeSend@1100528704 : Boolean) : Boolean;
    BEGIN
      EXIT(MailDocumentLocal(Recipient, DocumentProperties, SendAsAttachment, Attachments, ShowMailBeforeSend));
    END;

    LOCAL PROCEDURE MailDocumentLocal@1100528704(Recipient@1100528705 : Text[250];VAR DocumentProperties@1100528704 : Record 11012746;SendAsAttachment@1100528703 : Boolean;Attachments@1100528719 : ARRAY [5] OF Code[20];ShowMailBeforeSend@1100528721 : Boolean) : Boolean;
    VAR
      FileSystemOnPremiseSetup@1100529602 : Record 11125739;
      DocumentTemplate@1100525001 : Record 11012401;
      DocumentPropertiesAttachment@1100528720 : Record 11012746;
      DocumentPropertiesExt@1100528716 : Record 11012746;
      OutlookEnumeration@1100528713 : Codeunit 11012376;
      OutlookAutomation@1100528715 : Codeunit 11012030;
      DocumentLinkManagement@1100528712 : Codeunit 11012401;
      ExternalDocumentManagement@1100528711 : Codeunit 11012403;
      FileMgt@1100525000 : Codeunit 419;
      DocumentMailing@1100529600 : Codeunit 260;
      ExploderIsActive@1100528710 : Boolean;
      MailGUIDValue@1100528709 : Text[120];
      MailFound@1100528708 : Boolean;
      ClientFileName@1100528724 : Text;
      Directory@1100528707 : Text[1024];
      MailFileName@1100528706 : Text[1024];
      MailPathFileName@1100528702 : Text[1024];
      TmpClientMailPathFileName@1100529601 : Text[1024];
      TargetFileName@1100528722 : Text;
      Extension@1100528701 : Text[30];
      I@1100528700 : Integer;
      Cont@1210190000 : Boolean;
      IsTemporary@1100528725 : Boolean;
      TargetStorageOption@1100525002 : Option;
    BEGIN
      FileSystemOnPremiseSetup.GET;
      FileSystemOnPremiseSetup.TESTFIELD("Default Source Dir.Ext.Doc");

      DocumentTemplate.GET(DocumentProperties."Document Group", DocumentProperties."Document Template");

      IF NOT FileMgt.ClientAvailable THEN
        EXIT(DocumentMailing.EmailSingleDocumentProperty(Recipient, DocumentProperties, SendAsAttachment, Attachments, ShowMailBeforeSend, DocumentTemplate."E-Mail Subject"));

      IF NOT OutlookAutomation.StartOutlookIfNotRunning THEN
        EXIT(FALSE);

      // Create E-Mail
      OutlookAutomation.InitOutlook;
      ExploderIsActive := OutlookAutomation.IsExploderActive;
      OutlookAutomation.InitNewMail;
      IF Recipient <> '' THEN
        OutlookAutomation.AddMailRecipient(Recipient);
      OutlookAutomation.SetMailSubject(DocumentTemplate."E-Mail Subject");
      OutlookAutomation.SetMailInspector; // Add signature

      ClientFileName := DocumentProperties.GetClientFile(IsTemporary);
      IF IsTemporary THEN BEGIN
        TargetFileName := FileMgt.GetUniqueClientFileName(
          FileMgt.GetDirectoryName(ClientFileName) + '\' + FileMgt.GetFileName(DocumentProperties."Document Service URL"));
        ClientFileName := FileMgt.MoveAndRenameClientFile(
          ClientFileName,
          FileMgt.GetFileName(TargetFileName),
          '');
      END;
      IF SendAsAttachment THEN
        OutlookAutomation.AddMailAttachment(ClientFileName)
      ELSE
        OutlookAutomation.ImportWordDocumentInMailBody(ClientFileName);

      IF IsTemporary THEN
        FileMgt.DeleteClientFile(ClientFileName);

      FOR I := 1 TO ARRAYLEN(Attachments) DO BEGIN
        IF Attachments[I] <> '' THEN BEGIN
          IF DocumentPropertiesAttachment.GET(Attachments[I]) THEN BEGIN
            ClientFileName := DocumentPropertiesAttachment.GetClientFile(IsTemporary);
            IF IsTemporary THEN BEGIN
              TargetFileName := FileMgt.GetUniqueClientFileName(
                FileMgt.GetDirectoryName(ClientFileName) + '\' + FileMgt.GetFileName(DocumentPropertiesAttachment."Document Service URL"));
              ClientFileName := FileMgt.MoveAndRenameClientFile(
                ClientFileName,
                FileMgt.GetFileName(TargetFileName),
                '');
            END;
            OutlookAutomation.AddMailAttachment(ClientFileName);
            IF IsTemporary THEN
              FileMgt.DeleteClientFile(ClientFileName);
          END;
        END;
      END;

      MailGUIDValue := FORMAT(CREATEGUID);
      OutlookAutomation.SetMailGUID(MailGUIDValue);
      IF ShowMailBeforeSend THEN
        OutlookAutomation.DisplayMailModal
      ELSE
        OutlookAutomation.SendMail;

      // Search sent mail
      Cont := TRUE;
      REPEAT
        I := 0;
        REPEAT
          IF ExploderIsActive THEN
            MailFound := OutlookAutomation.FindMailByGUID(OutlookEnumeration.OlDefaultFolders_olFolderSentMail, MailGUIDValue)
          ELSE
            MailFound := OutlookAutomation.FindMailByGUID(OutlookEnumeration.OlDefaultFolders_olFolderOutbox, MailGUIDValue);
          I := I + 1;
          IF I > 1 THEN
            SLEEP(1000);
        UNTIL MailFound OR (I > 10);
        IF NOT MailFound THEN BEGIN
          IF NOT CONFIRM(Text004, TRUE) THEN
            Cont := FALSE;
        END ELSE
          Cont := FALSE;
      UNTIL Cont = FALSE;

      IF MailFound THEN BEGIN
        DocumentProperties.Description := COPYSTR(OutlookAutomation.GetMailSubject, 1, MAXSTRLEN(DocumentProperties.Description));
        DocumentProperties."E-Mail Sent On" := CURRENTDATETIME;
        DocumentProperties."E-Mail Sent By" := USERID;
        DocumentProperties."E-Mail Sent To" :=
          COPYSTR(OutlookAutomation.GetMailRecipients, 1, MAXSTRLEN(DocumentProperties."E-Mail Sent To"));
        DocumentProperties.MODIFY;

        FileMgt.SplitFileAbsPathName(DocumentProperties.File, Directory, MailFileName);

        IF SendAsAttachment THEN BEGIN
          // Save Word attachment (for possible user changes)
          IF OutlookAutomation.GetMailAttachmentByFileName(MailFileName + Extension) THEN BEGIN
            IF Extension <> '' THEN
              TmpClientMailPathFileName := FileMgt.ClientTempFileName(Extension)
            ELSE
              TmpClientMailPathFileName := FileMgt.ClientTempFileName(FileMgt.GetExtension(DocumentProperties.File));
            OutlookAutomation.SaveMailAttachmentAs(TmpClientMailPathFileName);
            FileMgt.UploadFileSilentToServerPath(TmpClientMailPathFileName, DocumentProperties.File + Extension);
          END;
          // Remove attachment from mail
          OutlookAutomation.RemoveMailAttachmentByFileName(MailFileName + Extension);
        END;

        // Save mail message on disk
        TmpClientMailPathFileName := FileMgt.ClientTempFileName('.msg');
        OutlookAutomation.SaveMailAs(TmpClientMailPathFileName, OutlookEnumeration.OlSaveAsType_olMSG);
        MailPathFileName := FileMgt.GetDirectoryNameWithBackSlash(TmpClientMailPathFileName) + MailFileName + '.msg';
        FileMgt.RenameClientFile(TmpClientMailPathFileName, MailPathFileName, TRUE);

        // Register mail message as external document
        DocumentPropertiesExt.INIT;
        DocumentPropertiesExt."External Document" := TRUE;
        DocumentPropertiesExt.Description := DocumentProperties.Description;
        DocumentPropertiesExt."Document No." := DocumentProperties."Document No.";
        DocumentPropertiesExt."E-Mail Sent On" := DocumentProperties."E-Mail Sent On";
        DocumentPropertiesExt."E-Mail Sent By" := DocumentProperties."E-Mail Sent By";
        DocumentPropertiesExt."E-Mail Sent To" := DocumentProperties."E-Mail Sent To";
        DocumentPropertiesExt.INSERT(TRUE);
        IF DocumentProperties."Contact No." <> '' THEN
          DocumentPropertiesExt.VALIDATE("Contact No.", DocumentProperties."Contact No.");
        IF DocumentProperties."Contact Person No." <> '' THEN
          DocumentPropertiesExt.VALIDATE("Contact Person No.", DocumentProperties."Contact Person No.");
        ExternalDocumentManagement.RegisterFile(
          MailPathFileName, DocumentPropertiesExt."Document Type", DocumentPropertiesExt."Creation Date",
          TargetFileName, TargetStorageOption);
        DocumentPropertiesExt.ValidateStorageURI(TargetStorageOption, TargetFileName);

        //kzwerver, 130913, sn, #C009142
        DocumentPropertiesExt."Project Portal Subsite" := DocumentProperties."Project Portal Subsite";
        DocumentPropertiesExt."Document Type" := DocumentProperties."Document Type";
        //kzwerver, 130913, en, #C009142
        DocumentPropertiesExt.MODIFY(TRUE);

        // Create document relations
        CreateDocumentRelations(DocumentProperties."No.", DocumentPropertiesExt."No.");

        // Create document link for external document
        DocumentLinkManagement.CopyDocumentLink(DocumentProperties."No.", DocumentPropertiesExt."No.", TRUE);
      END;

      OutlookAutomation.TermOutlook;

      IF NOT MailFound THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateDocumentRelations@1100528702(No@1100528700 : Code[20];No2@1100528701 : Code[20]);
    VAR
      DocumentRelation@1100528702 : Record 11012407;
    BEGIN
      DocumentRelation.INIT;
      DocumentRelation."Document Type" := DocumentRelation."Document Type"::Document;
      DocumentRelation."No." := No;
      DocumentRelation.VALIDATE("Related Document No.", No2);
      DocumentRelation."Send by E-Mail" := FALSE;
      DocumentRelation.Print := FALSE;
      DocumentRelation.INSERT(TRUE);

      DocumentRelation.INIT;
      DocumentRelation."Document Type" := DocumentRelation."Document Type"::Document;
      DocumentRelation."No." := No2;
      DocumentRelation.VALIDATE("Related Document No.", No);
      DocumentRelation."Send by E-Mail" := FALSE;
      DocumentRelation.Print := FALSE;
      DocumentRelation.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

