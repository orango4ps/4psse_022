OBJECT Codeunit 12013635 Web Service Search Routine
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000,4PS;
  }
  PROPERTIES
  {
    OnRun=VAR
            _xmlDoc@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
            _bigText@1100285001 : BigText;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      DecFormat@1100285003 : TextConst 'ENU=<Sign><Integer><Decimals><Comma,.>';
      Error001@1100285000 : TextConst 'ENU=Company name cannot be blank!;SVE=F”retagsnamn kan inte vara tomt!';
      Error002@1100285001 : TextConst 'ENU=Column %1 is not setup!;SVE=Kolumn %1 finns ej uppsatt!';
      Error003@1100285002 : TextConst 'ENU=Atleast one search critera must be selected.;SVE=Minst ett s”kkriterie m†ste v„ljas.';

    PROCEDURE SearchUserDocuments@1100285001(VAR _bigTextOut@1100285000 : BigText;_bigTextIn@1100285031 : BigText);
    VAR
      TempExDoc@1100285035 : TEMPORARY Record 12013608;
      WebCompID@1100285005 : Record 12013630;
      arrDimWebColumnID@1100285026 : ARRAY [10] OF Code[20];
      arrDimValue@1100285027 : ARRAY [10] OF Code[1024];
      xmlDoc@1100285051 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlNodeList@1100285049 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNode@1100285046 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLMgt@1100285052 : Codeunit 6224;
      i@1100285001 : Integer;
      y@1100285030 : Integer;
      TempSearchRec@1100285002 : TEMPORARY Record 12057116;
      MultiCompSearch@1100285003 : Boolean;
      MaxDocs@1100285004 : Integer;
      MaxDocsCount@1100285006 : Integer;
    BEGIN
      // serve web search window
      xmlDoc := xmlDoc.XmlDocument;
      xmlDoc.LoadXml(_bigTextIn);
      xmlNode := xmlDoc.SelectSingleNode('Params'); // case sensitive
      xmlNodeList := xmlNode.ChildNodes;
      TempSearchRec.INIT;
      WITH TempSearchRec DO BEGIN
        FOR i := 0 TO xmlNodeList.Count -1 DO BEGIN
          xmlNode := xmlNodeList.Item(i);
          CASE LOWERCASE(xmlNode.Name) OF
            'docno': docNo := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(docNo));
            'doctype': docType := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(docType));
            'vendor': vendorNo := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(vendorNo));
            'vendorname': vendorName := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(vendorName));
            'docstatus': docStatus := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(docStatus));
            'flowstatus': flowstatus := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(flowstatus));
            'approverstatus': approverstatus := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(approverstatus));
            'maxamount': maxAmount := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(maxAmount));
            'minamount': minAmount := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(minAmount));
            'duedate_from': duedate_from := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(duedate_from));
            'duedate_to': duedate_to := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(duedate_to));
            'postingdate_from': postingdate_from := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(postingdate_from));
            'postingdate_to': postingdate_to := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(postingdate_to));
            'approver': approver := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(approver));
            'compname': CompName := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(CompName));
            'initiator': initiator := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(initiator));
            'vendordocno': vendorDocNo := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(vendorDocNo));
            'createdate_from': createDate_From := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(createDate_From));
            'createdate_to': createDate_To := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(createDate_To));
            'approvercomment': approverComment := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(approverComment));
            'linedescription': lineDescription := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(lineDescription));
            'docadmincomment': docAdminComment := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(docAdminComment));
            'approvaldate_from': approvaldate_from := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(approvaldate_from));
            'approvedby': approvedBy := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(approvedBy));
            'dyn': dyn := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(dyn));
            'orderby': orderby := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(orderby));
            'dims': // dimensions, arr of 10
              FOR y := 1 TO ARRAYLEN(arrDimWebColumnID) DO BEGIN
                arrDimWebColumnID[y] := XMLMgt.FindNodeText(xmlNode,FORMAT(y,0,'ColC<Integer>'));  // Col ID
                arrDimValue[y] := XMLMgt.FindNodeText(xmlNode,FORMAT(y,0,'ColV<Integer>'));   // Value
              END;
          END;
        END;

        //Parse out standard web folder search strings
        IF NOT SearchBox(TempExDoc,TempSearchRec) THEN BEGIN
          //Web search page
          //Max number of hits
          MaxDocs := 99;
          IF CompName <> '' THEN
            WebCompID.SETRANGE("Company Name",CompName);
          WebCompID.SETRANGE("Web enabled", TRUE);
          IF WebCompID.COUNT > 1 THEN
            MultiCompSearch := TRUE;
          IF WebCompID.FINDFIRST THEN
            REPEAT
              CompName := WebCompID."Company Name";
              WebSearchPage(TempExDoc,TempSearchRec,arrDimWebColumnID,arrDimValue,MultiCompSearch);
            UNTIL WebCompID.NEXT = 0;
        END;
      END;

      CreateXMLDoc('SearchResult',xmlDoc,xmlNode);
      TempExDoc.RESET;
      IF MaxDocs > 0 THEN BEGIN
        TempExDoc.SETCURRENTKEY("Document Date");
        TempExDoc.SETASCENDING("Document Date",FALSE);
      END;
      IF TempExDoc.FINDSET THEN
        REPEAT
          //For boxsearches MaxDocs is always zero -> which by design will miss exit condition
          MaxDocsCount := MaxDocsCount + 1;
          XMLMgt.AddElement(xmlNode,'SearchResult','','',xmlNode);
          XmlCreateDocHeader(TempExDoc,xmlNode);
          xmlNode := xmlNode.ParentNode;
        UNTIL (TempExDoc.NEXT = 0) OR (MaxDocsCount = MaxDocs);

      IF MaxDocsCount = MaxDocs THEN
        XMLMgt.AddElement(xmlNode,'SearchResultCompressed','TRUE','',xmlNode);

      _bigTextOut.ADDTEXT(xmlDoc.OuterXml);
    END;

    LOCAL PROCEDURE SearchBox@1100285024(VAR TempExDoc@1100285001 : TEMPORARY Record 12013608;VAR TempSearchRec@1100285000 : TEMPORARY Record 12057116) : Boolean;
    BEGIN
      WITH TempSearchRec DO BEGIN
        //All box searches has blank Comp filter and orderby requested
        IF CompName <> '' THEN
          EXIT(FALSE);

        IF orderby = '' THEN
          EXIT(FALSE);

        //Parse out which box to reatrieve from
        IF (docStatus = '1') AND  (approverstatus = '1') AND (approver <> '') AND (duedate_to = '')  THEN BEGIN
          SearchInbox(CompName,approver,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus = '1') AND  (approverstatus = '1') AND (approver <> '') AND(duedate_to <> '') THEN BEGIN
          SearchDue(CompName,approver,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus = '1') AND  (approverstatus = '0') AND (approver <> '') THEN BEGIN
          SearchFuture(CompName,approver,TempExDoc);
          EXIT(TRUE);
        END;

        IF (approver <> '') AND (approvedBy <> '') AND (approvaldate_from <> '') THEN BEGIN
          SearchRecent(CompName,approver,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus = '1') AND  (approverstatus = '4') AND (approver <> '') THEN BEGIN
          SearchHold(CompName,approver,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus = '-2') AND  (docType = '1') AND (initiator <> '') AND (dyn = '[Requisition Status]=0') THEN BEGIN
          SearchApproved(CompName,initiator,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus = '-2') AND  (docType = '1') AND (initiator <> '') AND (dyn = '[Requisition Status]=1') THEN BEGIN
          SearchSent(CompName,initiator,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus = '1') AND  (docType = '0') AND (initiator <> '') AND (flowstatus = '3') AND (approvaldate_from <> '') THEN BEGIN
          SearchRejected(CompName,initiator,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus IN ['1','100']) AND  (docType = '0') AND (initiator <> '') THEN BEGIN
          SearchPending(CompName,initiator,TempExDoc);
          EXIT(TRUE);
        END;

        IF (docStatus = '5') AND  (docType = '1') AND (initiator <> '') THEN BEGIN
          SearchComplete(CompName,initiator,TempExDoc);
          EXIT(TRUE);
        END;
      END;

      //No match means WebSearchpage
      EXIT(FALSE);
    END;

    PROCEDURE GetUserCurrentDocuments@1100285015(CompName@1100285001 : Text[30];InUserID@1100285000 : Code[50];VAR TempEXDoc@1100285015 : TEMPORARY Record 12013608);
    VAR
      ExDoc@1100285010 : Record 12013608;
      EXDocLineApp@1100285009 : Record 12013610;
      WebCompID@1100285002 : Record 12013630;
      TempUser@1100285003 : Text;
    BEGIN
      // serve emails sent to user
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          GetUserCurrentDocuments(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT;
      END;

      // put all docs represented on lines in memory
      EXDocLineApp.RESET;
      EXDocLineApp.SETCURRENTKEY(Approver);
      EXDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT;

      EXDocLineApp.SETRANGE(Flowstatus,EXDocLineApp.Flowstatus::Current);
      EXDocLineApp.SETFILTER(Approver, TempUser);
      IF EXDocLineApp.FINDSET THEN REPEAT
        ExDoc.GET(EXDocLineApp."Document ID");
        IF ExDoc.Status = ExDoc.Status::Active THEN
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc."Temp ID" := TempEXDoc.ID;
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
      UNTIL EXDocLineApp.NEXT = 0;
    END;

    LOCAL PROCEDURE SearchInbox@1100285028(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchInbox(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Current);
      ExDocLineApp.SETFILTER(Approver,TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchDue@1100285029(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchDue(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Current);
      ExDocLineApp.SETFILTER(Approver,TempUser);
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              IF ExDoc."Due Date" <= TODAY THEN BEGIN
                TempEXDoc.INIT;
                TempEXDoc.TRANSFERFIELDS(ExDoc);
                TempEXDoc.ID := ExDoc."Web ID";
                TempEXDoc."Temp Company Name" := CompName;
                TempEXDoc.INSERT;
             END;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchFuture@1100285032(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchFuture(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"Not processed");
      ExDocLineApp.SETFILTER(Approver,TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchRecent@1100285030(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      PostedExDoc@1100285008 : Record 12013626;
      PostedExDocLineApp@1100285007 : Record 12013628;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
      TempApprovalDate@1100285009 : DateTime;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchRecent(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved,ExDocLineApp.Flowstatus::Rejected);
      ExDocLineApp.SETFILTER(Approver,TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      TempApprovalDate := CREATEDATETIME(TODAY-30,0T);
      ExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc."Temp Approval Date" := ExDocLineApp."Approval Date";
            TempEXDoc.INSERT;
          END;
        UNTIL ExDocLineApp.NEXT = 0;

      ExDocLineApp.RESET;
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      ExDocLineApp.SETCURRENTKEY("Approved By");
      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved,ExDocLineApp.Flowstatus::Rejected);
      ExDocLineApp.SETFILTER("Approved By",TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      ExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc."Temp Approval Date" := ExDocLineApp."Approval Date";
            TempEXDoc.INSERT;
          END;
        UNTIL ExDocLineApp.NEXT = 0;

      // Posted docs
      PostedExDocLineApp.RESET;
      PostedExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      PostedExDocLineApp.CHANGECOMPANY(CompName);
      PostedExDoc.CHANGECOMPANY(CompName);

      PostedExDocLineApp.SETRANGE(Flowstatus,PostedExDocLineApp.Flowstatus::Approved,PostedExDocLineApp.Flowstatus::Rejected);
      PostedExDocLineApp.SETFILTER(Approver,TempUser);
      PostedExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF PostedExDocLineApp.FINDSET THEN
        REPEAT
          PostedExDoc.GET(PostedExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(PostedExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(PostedExDoc);
            TempEXDoc.ID := PostedExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc."Temp Approval Date" := PostedExDocLineApp."Approval Date";
            TempEXDoc.INSERT;
          END;
        UNTIL PostedExDocLineApp.NEXT = 0;

      PostedExDocLineApp.RESET;
      PostedExDocLineApp.CHANGECOMPANY(CompName);
      PostedExDoc.CHANGECOMPANY(CompName);

      PostedExDocLineApp.SETCURRENTKEY("Approved By");
      PostedExDocLineApp.SETRANGE(Flowstatus,PostedExDocLineApp.Flowstatus::Approved,PostedExDocLineApp.Flowstatus::Rejected);
      PostedExDocLineApp.SETFILTER("Approved By",TempUser);
      PostedExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF PostedExDocLineApp.FINDSET THEN
        REPEAT
          PostedExDoc.GET(PostedExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(PostedExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(PostedExDoc);
            TempEXDoc.ID := PostedExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc."Temp Approval Date" := PostedExDocLineApp."Approval Date";
            TempEXDoc.INSERT;
          END;
        UNTIL PostedExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchHold@1100285031(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchHold(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"On hold");
      ExDocLineApp.SETFILTER(Approver, TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchApproved@1100285034(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      WebCompID@1100285000 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchApproved(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY(Initiator);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Order);
      ExDoc.SETRANGE(Status,ExDoc.Status::Approved);
      ExDoc.SETRANGE("Requisition Status",ExDoc."Requisition Status"::Unsubmitted);
      ExDoc.SETFILTER(Initiator,TempUser);
      IF ExDoc.FINDSET THEN
        REPEAT
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchRejected@1100285035(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285000 : Record 12013608;
      WebCompID@1100285004 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchRejected(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY("Created By");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
      ExDoc.SETFILTER("Created By",TempUser);
      IF ExDoc.FINDSET THEN REPEAT
        IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
          ExDoc.CALCFIELDS(Rejected);
          IF ExDoc.Rejected THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        END;
      UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchSent@1100285042(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285000 : Record 12013608;
      WebCompID@1100285004 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchSent(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY("Assigned Receipt Group");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Order);
      ExDoc.SETRANGE(Status,ExDoc.Status::Approved);
      ExDoc.SETRANGE("Requisition Status",ExDoc."Requisition Status"::"Submitted to Vendor");
      ExDoc.SETFILTER("Assigned Receipt Group",TempUser);
      IF ExDoc.FINDSET THEN REPEAT
        IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
          TempEXDoc.INIT;
          TempEXDoc.TRANSFERFIELDS(ExDoc);
          TempEXDoc.ID := ExDoc."Web ID";
          TempEXDoc."Temp Company Name" := CompName;
          TempEXDoc.INSERT;
        END;
      UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchPending@1100285043(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      WebCompID@1100285005 : Record 12013630;
      Skip@1100285000 : Boolean;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchPending(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY("Created By");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
      ExDoc.SETRANGE(Status,ExDoc.Status::Inactive,ExDoc.Status::Approved);
      ExDoc.SETRANGE("Change Jnl Processed PO",FALSE);
      ExDoc.SETFILTER("Created By",TempUser);
      IF ExDoc.FINDSET THEN
        REPEAT
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            // Always show for Creator, skip if Creator = Purch/Receipt grp
            Skip := FALSE;
            IF (ExDoc.Status = ExDoc.Status::Approved) AND ExDoc."Change Jnl Processed PO" THEN BEGIN
              IF ExDoc."Requisition Status" = ExDoc."Requisition Status"::Unsubmitted THEN
                IF ExDoc."Created By" = ExDoc.Initiator THEN
                  Skip := TRUE;

              IF ExDoc."Requisition Status" = ExDoc."Requisition Status"::"Submitted to Vendor" THEN
                IF ExDoc."Created By" = ExDoc."Assigned Receipt Group" THEN
                  Skip := TRUE;
            END;
            IF NOT Skip THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
          END;
        UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchComplete@1100285046(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285000 : Record 12013608;
      WebCompID@1100285004 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchComplete(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY(Status,"Document Type");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
      ExDoc.SETFILTER(Status,'%1|%2',ExDoc.Status::Received,ExDoc.Status::Invoiced);
      IF ExDoc.FINDSET THEN
        REPEAT
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            IF (STRPOS(TempUser, ExDoc."Created By") + STRPOS(TempUser, ExDoc.Initiator) + STRPOS(TempUser, ExDoc."Assigned Receipt Group")) > 0 THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
          END;
      UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    PROCEDURE GetCount@1100285022(InboxName@1100285000 : Text[50];CompName@1100285001 : Text[50];InUserID@1100285002 : Code[50]) : Integer;
    VAR
      tempEXDoc@1100285003 : TEMPORARY Record 12013608;
    BEGIN
      CASE LOWERCASE(InboxName) OF
        'inbox': EXIT(SearchInbox(CompName,InUserID,tempEXDoc));
        'due': EXIT(SearchDue(CompName,InUserID,tempEXDoc));
        'future': EXIT(SearchFuture(CompName,InUserID,tempEXDoc));
        'recent': EXIT(SearchRecent(CompName,InUserID,tempEXDoc));
        'on hold','onhold','on_hold': EXIT(SearchHold(CompName,InUserID,tempEXDoc));
        'approved': EXIT(SearchApproved(CompName,InUserID,tempEXDoc));
        'sent': EXIT(SearchSent(CompName,InUserID,tempEXDoc));
        'pending': EXIT(SearchPending(CompName,InUserID,tempEXDoc));
        'rejected': EXIT(SearchRejected(CompName,InUserID,tempEXDoc));
        'complete': EXIT(SearchComplete(CompName,InUserID,tempEXDoc));
      ELSE
        ERROR('Unknown inbox type (%1)',InboxName); // not for end-user
      END;
    END;

    PROCEDURE GetUserGroupFilter@1100285000(CompName@1100285003 : Text[30];InUserID@1100285000 : Code[50]) : Text[1024];
    VAR
      EXUserGrpLine@1100285002 : Record 12013607;
      ReturnString@1100285004 : Text[250];
    BEGIN
      EXUserGrpLine.RESET;
      EXUserGrpLine.CHANGECOMPANY(CompName);

      EXUserGrpLine.SETCURRENTKEY("User ID",Code);
      EXUserGrpLine.SETRANGE("User ID",InUserID);
      EXUserGrpLine.SETFILTER("Starting Date",'..%1',WORKDATE);
      EXUserGrpLine.SETFILTER("Ending Date",'''''|%1..',WORKDATE);
      IF EXUserGrpLine.FINDSET THEN BEGIN
        ReturnString := EXUserGrpLine.Code;
        IF EXUserGrpLine.NEXT = 1 THEN
          REPEAT
            ReturnString := ReturnString +'|' +EXUserGrpLine.Code;
          UNTIL EXUserGrpLine.NEXT = 0;
      END;

      EXIT(ReturnString);
    END;

    PROCEDURE GetColumnValues@1100285021(_bigTextIn@1100285000 : BigText;VAR _bigTextOut@1100285001 : BigText);
    VAR
      TempExColumn@1100285006 : TEMPORARY Record 12013661;
      DimVal@1100285034 : Record 349;
      ServiceHeader@1100285033 : Record 5900;
      ServInvLine@1100285032 : Record 5993;
      Location@1100285031 : Record 14;
      UoM@1100285029 : Record 204;
      Cust@1100285028 : Record 18;
      EXInvCode@1100285026 : Record 12013597;
      ExColumn@1100285012 : Record 12013661;
      TempData@1100285041 : TEMPORARY Record 12013609;
      WebCompID@1100285045 : Record 12013630;
      Exflow@1100285022 : Codeunit 12013601;
      ExPeriodicMgt@1100285011 : Codeunit 12013599;
      _i@1100285002 : Integer;
      _j@1100285005 : Integer;
      _k@1100285008 : Integer;
      TempID@1100285044 : BigInteger;
      _colID@1100285003 : BigInteger;
      _colID2@1100285007 : BigInteger;
      _action@1100285004 : Text[250];
      _range@1100285009 : Text[1024];
      _subset@1100285010 : Text[1024];
      _filter@1100285023 : Text[250];
      _userID@1100285047 : Text[250];
      xmlDoc@1100285020 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlNodeList@1100285018 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNodeList2@1100285017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNodeList3@1100285016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNode@1100285015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode2@1100285014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode3@1100285013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Writer@1100285043 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
      strWriter@1100285042 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringWriter";
      trigVal@1100285021 : Text[100];
      CustWebSvcMgt@1100285025 : Codeunit 12013638;
      "***4PS***"@1101285000 : Integer;
      Element_4PS@1101285001 : Record 11012010;
      Extcontr_4PS@1101285002 : Record 11012004;
      ServiceOrder@1101285003 : Record 11012823;
      CostFilterRec@1101285005 : Record 12057160;
      CostFilterTxt@1101285006 : Text;
    BEGIN
      xmlDoc := xmlDoc.XmlDocument;
      xmlDoc.LoadXml(_bigTextIn);

      xmlNode := xmlDoc.SelectSingleNode('GetColumnValues'); // case sensitive
      xmlNodeList := xmlNode.ChildNodes;
      _colID := -1;

      GetWebComp(WebCompID,COMPANYNAME);

      FOR _i := 0 TO xmlNodeList.Count -1 DO BEGIN
        xmlNode := xmlNodeList.Item(_i);
        CASE LOWERCASE(xmlNode.Name) OF
          'columnid': EVALUATE(_colID,xmlNode.InnerText);
          'action': _action := xmlNode.InnerText;
          'filter': _filter := xmlNode.InnerText;
          'columnvalues':
            BEGIN
              xmlNodeList2 := xmlNode.ChildNodes;
              FOR _j := 0 TO xmlNodeList2.Count -1 DO BEGIN
                xmlNode2 := xmlNodeList2.Item(_j);
                xmlNodeList3 := xmlNode2.ChildNodes;
                FOR _k := 0 TO xmlNodeList3.Count -1 DO BEGIN
                  xmlNode3 := xmlNodeList3.Item(_k);
                  CASE LOWERCASE(xmlNode3.Name) OF
                    'columnid':
                      IF EVALUATE(_colID2,xmlNode3.InnerText) THEN
                        IF NOT TempExColumn.GET(_colID2-WebCompID."Web Company ID") THEN BEGIN
                          // save related info in memory for ev. later use (get actual record first when/if needed)
                          TempExColumn.ID := _colID2 - WebCompID."Web Company ID";
                          TempExColumn.INSERT;
                        END;
                    'value':
                      BEGIN
                        TempExColumn.Code := xmlNode3.InnerText;
                        TempExColumn.MODIFY;
                      END;
                  END;
                END;
              END;
            END;
          'coding':
            BEGIN
              xmlNodeList2 := xmlNode.ChildNodes;
              FOR _j := 0 TO xmlNodeList2.Count -1 DO BEGIN
                xmlNode2 := xmlNodeList2.Item(_j);
                CASE LOWERCASE(xmlNode2.Name) OF
                  'cid':
                    IF EVALUATE(_colID2,xmlNode2.InnerText) THEN
                      IF NOT TempExColumn.GET(_colID2-WebCompID."Web Company ID") THEN BEGIN
                        TempExColumn.ID := _colID2 - WebCompID."Web Company ID";
                        TempExColumn.INSERT;
                      END;
                  'v':
                    BEGIN
                      IF _colID = _colID2 THEN
                        trigVal:= xmlNode2.InnerText;
                      TempExColumn.Code := xmlNode2.InnerText;
                      TempExColumn.MODIFY;
                    END;
                END;
              END;
            END;
          'range': _range := xmlNode.InnerText;
          'subset': _subset := xmlNode.InnerText;
          'userid': _userID := xmlNode.InnerText;
        END;
      END;

      _colID := _colID - WebCompID."Web Company ID";

      ExColumn.RESET;
      ExColumn.SETRANGE(ID,_colID);
      IF NOT ExColumn.FINDFIRST THEN
        ERROR(STRSUBSTNO(Error002,_colID));

      IF LOWERCASE(_action) = 'autofill' THEN BEGIN
        CASE ExColumn."Is Autofill Trigger" OF
          ExColumn."Is Autofill Trigger"::"Default dim": AutofillByDefaultDim(ExColumn,trigVal,WebCompID,_bigTextOut);
          ExColumn."Is Autofill Trigger"::Customized: CustWebSvcMgt.Autofill(ExColumn,trigVal,WebCompID,_bigTextOut);
        END;
        EXIT;
      END;

      CASE UPPERCASE(ExColumn.Source) OF
        'G_LACCOUNT','GLB_G_LACCOUNT':
          CreateGLAccTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send");
        'ITEM','GLB_ITEM':
          CreateItemTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send");
        'FIXEDASSET','GLB_FIXEDASSET':
          CreateFATempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send");
        'CHARGE','GLB_CHARGE':
          CreateChargeItemTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send");
        'JOB','GLB_JOB':
          CreateJobTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send");
        'JOBTASK','GLB_JOBTASK':
          CreateJobTaskTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send", TempExColumn);
        'VATPRODPOSTGRP':
          CreateVATProdPosGrpTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send");
        'PERCODE','GLB_PERCODE':
          ExPeriodicMgt.GetPerCodes(TempData,TempID,COMPANYNAME);
        //4PS
        //'1014_SERVICEORDERNO':
        //  WITH ServiceHeader DO BEGIN
        //    RESET;
        //    SETFILTER("No.",'<>%1','');
        //    IF FINDSET THEN
         //     REPEAT
           //     InsertTempData(TempData, TempID, "No.", Description);
         //     UNTIL (NEXT = 0);
         // END;
         'SERVICEORDERNO':
            WITH ServiceOrder DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              SETFILTER(Status,'%1|%2|%3',Status::Open,Status::"In Process",Status::"Technical Finished");
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
            'ELEMENT_4PS':
            WITH Element_4PS DO BEGIN
              _colID2 := Exflow.GetColumnID('JOB');
              TempExColumn.RESET;
              TempExColumn.SETRANGE(ID,_colID2);
              RESET;
              IF TempExColumn.FINDFIRST THEN BEGIN
                SETRANGE("Project No.",TempExColumn.Code);
                IF FINDSET THEN REPEAT
                  TempData.ID := TempID;
                  TempData."No." := Element;
                  TempData.Description := Description;
                  TempData.INSERT;
                  TempID := TempID + 1;
                UNTIL NEXT = 0;
              END;
            END;
            'EXTCONTR_4PS':
            WITH Extcontr_4PS DO BEGIN
              _colID2 := Exflow.GetColumnID('JOB');
              TempExColumn.RESET;
              TempExColumn.SETRANGE(ID,_colID2);
              RESET;
              IF TempExColumn.FINDFIRST THEN BEGIN
                SETRANGE("Project No.",TempExColumn.Code);
                IF FINDSET THEN REPEAT
                  TempData.ID := TempID;
                  TempData."No." := "Contract No.";
                  TempData.Description := Description;
                  TempData.INSERT;
                  TempID := TempID + 1;
                UNTIL NEXT = 0;
              END;
            END;
          //4PS
        '1014_SERVICEDESCRIPTION':
          WITH ServInvLine DO BEGIN
            RESET;
            SETFILTER(Description,'<>%1','');
            IF FINDSET THEN
              REPEAT
                InsertTempData(TempData, TempID, "No.", COPYSTR(Description,1,20));
              UNTIL (NEXT = 0);
          END;
        '1014_LOCATION':
          WITH Location DO BEGIN
            RESET;
            SETFILTER(Code,'<>%1','');
            IF FINDSET THEN
              REPEAT
                InsertTempData(TempData, TempID, Code, Name);
              UNTIL (NEXT = 0);
          END;
        'UOM':
          WITH UoM DO BEGIN
            RESET;
            SETFILTER(Code,'<>%1','');
            IF FINDSET THEN
              REPEAT
                InsertTempData(TempData, TempID, Code, Description);
              UNTIL (NEXT = 0);
          END;
        'CUSTOMER','GLB_CUSTOMER':
          CreateCustomerTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send");
        'INV_CODE':
          WITH EXInvCode DO BEGIN
            RESET;
            SETFILTER("Invoicing Code",'<>%1','');
            IF FINDSET THEN
              REPEAT
                InsertTempData(TempData, TempID, "Invoicing Code", Description);
              UNTIL (NEXT = 0);
          END;

          //4PS
          ELSE IF COPYSTR(ExColumn.Source,1,4) = 'DIM2' THEN BEGIN
            WITH DimVal DO BEGIN
              RESET;
              SETFILTER(Code,'<>%1','');
              SETRANGE("Dimension Value Type",DimVal."Dimension Value Type"::Standard);
              SETRANGE(Blocked,FALSE);
              SETRANGE("Dimension Code",ExColumn.Code);
              _colID2 := Exflow.GetColumnID('JOB');
              TempExColumn.RESET;
              TempExColumn.SETRANGE(ID,_colID2);
              IF TempExColumn.FINDFIRST THEN BEGIN
                CostFilterTxt := CostFilterRec.GetFilter(TempExColumn.Code);
                IF CostFilterTxt <> '' THEN
                  SETFILTER(Code,CostFilterTxt)
                //SICH190221
                ELSE BEGIN
                  CostFilterRec.SETRANGE(Enabled,TRUE);
                  IF CostFilterRec.ISEMPTY THEN
                    SETFILTER("Cost Type",'%1|%2|%3|%4|%5', "Cost Type"::Labor,"Cost Type"::Material,"Cost Type"::Subcontracting,"Cost Type"::Plant,"Cost Type"::Sundry)
                  ELSE
                    SETFILTER(Code,'%1','');
                END;
              END ELSE
                SETFILTER(Code,'%1','');
              //SICH190221
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := Code;
                TempData.Description := Name;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          END ELSE
          //4PS
            IF COPYSTR(ExColumn.Source,1,3) = 'DIM' THEN
              CreateDimTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send", ExColumn.Code)
            ELSE IF COPYSTR(ExColumn.Source,1,7) = 'GLB_DIM' THEN
              CreateDimTempData(TempData, _filter, _range, _subset, ExColumn."No of Values to Send", ExColumn.Code)
      END;

      _colID := _colID + WebCompID."Web Company ID";

      strWriter := strWriter.StringWriter;
      Writer := Writer.XmlTextWriter(strWriter);

      TempData.RESET;
      IF TempData.FINDSET THEN BEGIN
        Writer.WriteStartElement('Values');
        REPEAT
          Writer.WriteStartElement('Value');
          WITH TempData DO BEGIN
            Writer.WriteElementString('ColumnID',FORMAT(_colID,0,9));
            Writer.WriteElementString('Value',"No.");
            Writer.WriteElementString('Description',Description);
          END;
          Writer.WriteEndElement;
        UNTIL TempData.NEXT = 0;
        Writer.WriteEndElement;
      END;

      _bigTextOut.ADDTEXT(strWriter.ToString);
    END;

    LOCAL PROCEDURE InsertTempData@1100285025(VAR TempData@1100285003 : TEMPORARY Record 12013609;VAR TempID@1100285004 : BigInteger;"No."@1100285001 : Code[20];Description@1100285002 : Text[100]);
    BEGIN
      TempData.INIT;
      TempData.ID := TempID;
      TempData."No." := "No.";
      TempData.Description := Description;
      IF TempData.INSERT THEN
        TempID += 1;
    END;

    LOCAL PROCEDURE CreateGLAccTempData@1100285036(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[50];GenFilterRule@1100285008 : Text[1024];UserCodingRule@1100285009 : Text[1024];NoOfValuesToSend@1100285005 : Integer);
    VAR
      GLAcc@1100285001 : Record 15;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH GLAcc DO BEGIN
        RESET;
        FILTERGROUP(10);
        SETRANGE(Blocked,FALSE);
        SETRANGE("Account Type",GLAcc."Account Type"::Posting);
        IF UserCodingRule <> '' THEN
          SETFILTER("No.", UserCodingRule)
        ELSE
          SETFILTER("No.", '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER("No.", GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Name);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER("No.", '%1', UserFilter + '*');
          SETFILTER(Name, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Name);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateItemTempData@1100285044(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285009 : Text[1024];UserCodingRule@1100285008 : Text[1024];NoOfValuesToSend@1100285005 : Integer);
    VAR
      Item@1100285001 : Record 27;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH Item DO BEGIN
        RESET;
        FILTERGROUP(10);
        SETRANGE(Blocked,FALSE);
        IF UserCodingRule <> '' THEN
          SETFILTER("No.", UserCodingRule)
        ELSE
          SETFILTER("No.", '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER("No.", GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER("No.", '%1', UserFilter + '*');
          SETFILTER(Description, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateFATempData@1100285045(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285003 : Text[1024];UserCodingRule@1100285002 : Text[1024];NoOfValuesToSend@1100285005 : Integer);
    VAR
      FixedAsset@1100285001 : Record 5600;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH FixedAsset DO BEGIN
        RESET;
        FILTERGROUP(10);
        SETRANGE(Blocked,FALSE);
        IF UserCodingRule <> '' THEN
          SETFILTER("No.", UserCodingRule)
        ELSE
          SETFILTER("No.", '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER("No.", GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER("No.", '%1', UserFilter + '*');
          SETFILTER(Description, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateChargeItemTempData@1100285048(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285009 : Text[1024];UserCodingRule@1100285008 : Text[1024];NoOfValuesToSend@1100285005 : Integer);
    VAR
      ItemCharge@1100285001 : Record 5800;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH ItemCharge DO BEGIN
        RESET;
        FILTERGROUP(10);
        IF UserCodingRule <> '' THEN
          SETFILTER("No.", UserCodingRule)
        ELSE
          SETFILTER("No.", '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER("No.", GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER("No.", '%1', UserFilter + '*');
          SETFILTER(Description, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateDimTempData@1100285049(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285003 : Text[1024];UserCodingRule@1100285002 : Text[1024];NoOfValuesToSend@1100285005 : Integer;DimensionCode@1100285008 : Code[20]);
    VAR
      DimensionValue@1100285001 : Record 349;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH DimensionValue DO BEGIN
        RESET;
        FILTERGROUP(10);
        SETRANGE("Dimension Value Type",DimensionValue."Dimension Value Type"::Standard);
        SETRANGE(Blocked,FALSE);
        SETRANGE("Dimension Code",DimensionCode);
        IF UserCodingRule <> '' THEN
          SETFILTER(Code, UserCodingRule)
        ELSE
          SETFILTER(Code, '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER(Code, GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, Code, Name);
            UNTIL NEXT = 0
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER(Code, '%1', UserFilter + '*');
          SETFILTER(Name, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, Code, Name);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateJobTempData@1100285060(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285003 : Text[1024];UserCodingRule@1100285002 : Text[1024];NoOfValuesToSend@1100285005 : Integer);
    VAR
      Job@1100285001 : Record 11072003;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH Job DO BEGIN
        RESET;
        FILTERGROUP(10);
        //4PS
        SETFILTER("Project Status",'%1|%2|%3|%4',"Project Status"::Estimation,"Project Status"::Preparation,"Project Status"::Production,"Project Status"::"Technical Finished");
        //4PS
        SETRANGE(Blocked,Blocked::" ");
        IF UserCodingRule <> '' THEN
          SETFILTER("No.", UserCodingRule)
        ELSE
          SETFILTER("No.", '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER("No.", GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER("No.", '%1', UserFilter + '*');
          SETFILTER(Description, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Description);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateJobTaskTempData@1100285061(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285003 : Text[1024];UserCodingRule@1100285002 : Text[1024];NoOfValuesToSend@1100285005 : Integer;VAR TempExColumn@1100285008 : TEMPORARY Record 12013661);
    VAR
      ExFlow@1100285010 : Codeunit 12013601;
      TempID@1100285006 : BigInteger;
      ColumnID@1100285009 : BigInteger;
    BEGIN
      //4PS
      {
      WITH JobTask DO BEGIN
        ColumnID := ExFlow.GetColumnID('JOB');
        TempExColumn.RESET;
        TempExColumn.SETRANGE(ID,ColumnID);
        IF NOT TempExColumn.FINDFIRST THEN
          EXIT;

        RESET;
        FILTERGROUP(10);
        SETRANGE("Job No.",TempExColumn.Code);
        SETRANGE("Job Task Type","Job Task Type"::Posting);
        IF UserCodingRule <> '' THEN
          SETFILTER("Job Task No.", UserCodingRule)
        ELSE
          SETFILTER("Job Task No.", '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER("Job Task No.", GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "Job Task No.", Description);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER("Job Task No.", '%1', UserFilter + '*');
          SETFILTER(Description, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "Job Task No.", Description);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
      }
      //4PS
    END;

    LOCAL PROCEDURE CreateCustomerTempData@1100285066(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285003 : Text[1024];UserCodingRule@1100285002 : Text[1024];NoOfValuesToSend@1100285005 : Integer);
    VAR
      Customer@1100285001 : Record 18;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH Customer DO BEGIN
        RESET;
        FILTERGROUP(10);
        SETRANGE(Blocked,Blocked::" ");
        IF UserCodingRule <> '' THEN
          SETFILTER("No.", UserCodingRule)
        ELSE
          SETFILTER("No.", '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER("No.", GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Name);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER("No.", '%1', UserFilter + '*');
          SETFILTER(Name, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, "No.", Name);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateVATProdPosGrpTempData@1100285026(VAR TempData@1100285000 : TEMPORARY Record 12013609;UserFilter@1100285004 : Text[250];GenFilterRule@1100285003 : Text[1024];UserCodingRule@1100285002 : Text[1024];NoOfValuesToSend@1100285005 : Integer);
    VAR
      VATProdPostGrp@1100285001 : Record 324;
      TempID@1100285006 : BigInteger;
    BEGIN
      WITH VATProdPostGrp DO BEGIN
        RESET;
        FILTERGROUP(10);
        IF UserCodingRule <> '' THEN
          SETFILTER(Code, UserCodingRule)
        ELSE
          SETFILTER(Code, '<>%1', '');
        FILTERGROUP(11);
        IF GenFilterRule <> '' THEN
          SETFILTER(Code, GenFilterRule);
        FILTERGROUP(0);

        IF NoOfValuesToSend = 0 THEN BEGIN
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, Code, Description);
            UNTIL NEXT = 0;
        END ELSE BEGIN
          FILTERGROUP(-1);
          SETFILTER(Code, '%1', UserFilter + '*');
          SETFILTER(Description, '%1', '*'+UserFilter+'*');
          FILTERGROUP(0);
          IF FINDSET THEN
            REPEAT
              InsertTempData(TempData, TempID, Code, Description);
            UNTIL (NEXT = 0) OR (TempID >= NoOfValuesToSend);
        END;
      END;
    END;

    LOCAL PROCEDURE XMLFORMAT@1100285002(_text@1100285000 : Text[250]) : Text[250];
    BEGIN
      EXIT(FORMAT(DELCHR(_text,'=',' .,%&/'),0,9));
    END;

    LOCAL PROCEDURE XmlCreateDocHeader@1100285012(VAR TempExDoc@1100285000 : TEMPORARY Record 12013608;VAR xmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLMgt@1100285001 : Codeunit 6224;
      GeneralLedgerSetup@1100285003 : Record 98;
    BEGIN
      // used for singe node results such as searchDocument, get Inbox etc.
      WITH TempExDoc DO BEGIN
        XMLMgt.AddNode(xmlNode,'ID', FORMAT(ID,0,9));
        XMLMgt.AddNode(xmlNode,'CompName',"Temp Company Name");
        XMLMgt.AddNode(xmlNode,'DocType',FORMAT("Document Type",0,9));
        XMLMgt.AddNode(xmlNode,'DocNo',"Document No.");
        IF "Vendor No." <> '' THEN
          XMLMgt.AddNode(xmlNode,'VendorNo',"Vendor No.");
        XMLMgt.AddNode(xmlNode,'AdminComment',"Admin Comment");
        IF "Create Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'CreateDate',FORMAT("Create Date",0,9));
        IF "Due Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'DueDate',FORMAT("Due Date",0,9));
        IF "Posting Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'PostingDate',FORMAT("Posting Date",0,9));
        IF "Document Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'DocDate',FORMAT("Document Date",0,9));
        XMLMgt.AddNode(xmlNode,'Status',FORMAT(Status,0,9));
        XMLMgt.AddNode(xmlNode,'ImageName',"Image Name");
        XMLMgt.AddNode(xmlNode,'PostingNo',"Predefind Posting No.");
        IF "Currency Code" <> '' THEN
          XMLMgt.AddNode(xmlNode,'CurrencyCode',"Currency Code")
        ELSE BEGIN
          GeneralLedgerSetup.GET;
          XMLMgt.AddNode(xmlNode,'CurrencyCode',GeneralLedgerSetup."LCY Code");
        END;
        XMLMgt.AddNode(xmlNode,'VendorName',"Vendor Name");
        XMLMgt.AddNode(xmlNode,'VendorDocNo',FORMAT("Vendor Document No."));
        //IF "Temp Approval Date" <> 0DT THEN
          XMLMgt.AddNode(xmlNode,'ApprovalDate',FORMAT("Temp Approval Date",0,9));
        CASE "Document Type" OF
          "Document Type"::"Credit Memo",
          "Document Type"::"Return Order",
          7: // posted credit memo
            BEGIN
              XMLMgt.AddNode(xmlNode,'Amount', '-'+ FORMAT(ABS("Gross Amount"),0,DecFormat));
              XMLMgt.AddNode(xmlNode,'NetAmount', '-'+ FORMAT(ABS("Net Amount"),0,DecFormat));
              XMLMgt.AddNode(xmlNode,'VATAmount', '-'+ FORMAT(ABS("VAT Amount"),0,DecFormat));
            END;
          ELSE
            BEGIN
              XMLMgt.AddNode(xmlNode,'Amount', FORMAT("Gross Amount",0,DecFormat));
              XMLMgt.AddNode(xmlNode,'NetAmount', FORMAT("Net Amount",0,DecFormat));
              XMLMgt.AddNode(xmlNode,'VATAmount', FORMAT("VAT Amount",0,DecFormat));
            END
        END;
      END;
    END;

    PROCEDURE CheckXMLDate@1100285099(_dateText@1100285000 : Text[50]) Text : Text[50];
    BEGIN
      IF(STRPOS(_dateText,'T') > 0) THEN
        _dateText := COPYSTR(_dateText,1,STRPOS(_dateText,'T') -1)
      ELSE
        IF(STRPOS(_dateText,'Z') > 0) THEN
          _dateText := COPYSTR(_dateText,1,STRPOS(_dateText,'Z') -1);
      EXIT(_dateText);
    END;

    LOCAL PROCEDURE CreateXMLDoc@1100285020(DSName@1100285000 : Text[50];VAR xmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR xmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLMgt@1100285001 : Codeunit 6224;
    BEGIN
      xmlDoc := xmlDoc.XmlDocument();
      xmlNode := xmlDoc.CreateElement(DSName);
      XMLMgt.AddAttribute(xmlNode,'xmlns', 'http://tempuri.org/'+DSName+'.xsd');
      xmlNode := xmlDoc.AppendChild(xmlNode);
    END;

    PROCEDURE GetWebComp@1100285004(VAR WebCompID@1100285001 : Record 12013630;CompName@1100285000 : Text[30]);
    BEGIN
      IF CompName = '' THEN
        ERROR(Error001);

      IF NOT WebCompID.GET(CompName) THEN BEGIN
        WebCompID.INIT;
        WebCompID."Company Name" := CompName;
        WebCompID.INSERT(TRUE);
      END;
    END;

    PROCEDURE WebSearchPage@1100285003(VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608;TempSearchRec@1100285001 : TEMPORARY Record 12057116;arrDimWebColumnID@1100285003 : ARRAY [10] OF Code[20];arrDimValue@1100285002 : ARRAY [10] OF Code[1024];MultiCompSearch@1100285008 : Boolean);
    VAR
      "***FilterRecs***"@1100285005 : Integer;
      ExDoc@1100285026 : Record 12013608;
      ExDocLineApp@1100285021 : Record 12013610;
      ExDocLineApprovedBy@1100285011 : Record 12013610;
      PostedExDoc@1100285020 : Record 12013626;
      PostedExDocLineApp@1100285018 : Record 12013628;
      PostedExDocLineAppovedBy@1100285023 : Record 12013628;
      "***Other***"@1100285010 : Integer;
      CreateQuotefromReq@1100285006 : Codeunit 12013614;
      TempUserFilter@1100285030 : Text;
      RefNoSearch@1100285029 : Boolean;
      SearchByCreatedDate@1100285012 : Boolean;
      SearchByPostingDate@1100285053 : Boolean;
      DimFilterCount@1100285054 : Integer;
      FiltersApplied@1100285004 : Boolean;
      ApproverFilterExists@1100285007 : Boolean;
      arrLocalColumnID@1100285009 : ARRAY [10] OF BigInteger;
    BEGIN
      //Change company on all search recs, pass them to appropritate sub funcs
      //Dim recs are taken care of in internal funcations as no other filters will be applied until that stage
      WITH TempSearchRec DO BEGIN
        TESTFIELD(CompName);
        ExDoc.CHANGECOMPANY(CompName);
        ExDocLineApp.CHANGECOMPANY(CompName);
        ExDocLineApprovedBy.CHANGECOMPANY(CompName);
        PostedExDoc.CHANGECOMPANY(CompName);
        PostedExDocLineApp.CHANGECOMPANY(CompName);
        PostedExDocLineAppovedBy.CHANGECOMPANY(CompName);

        CASE docStatus OF
          '0','Inactive':
            BEGIN
              ExDoc.SETRANGE(Status,ExDoc.Status::Inactive);
              PostedExDoc.SETRANGE(Status,-1);
            END;
          '1','Active':
            BEGIN
              ExDoc.SETRANGE(Status,ExDoc.Status::Active);
              PostedExDoc.SETRANGE(Status,-1);
            END;
          '2','Approved':
            BEGIN
              ExDoc.SETFILTER(Status,'%1|%2|%3',ExDoc.Status::"Ready for posting",ExDoc.Status::Approved,ExDoc.Status::Invoiced);
            END;
          '3','Completed': ; // Covered by Searchbox
        END;

        CASE docType OF
          '0','Requisition':
            BEGIN
              ExDoc.SETFILTER("Document Type",'%1|%2',ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
              PostedExDoc.SETRANGE("Document Type",-1);
            END;

          '1','Order':
            BEGIN
              ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Order);
              PostedExDoc.SETRANGE("Document Type",-1);
            END;

          '2','Invoice':
            BEGIN
              ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Invoice);
              PostedExDoc.SETRANGE("Document Type",PostedExDoc."Document Type"::"Posted Invoice");
            END;

          '3','Credit':
            BEGIN
              ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::"Credit Memo");
              PostedExDoc.SETRANGE("Document Type", PostedExDoc."Document Type"::"Posted Credit Memo");
            END;

          '-43': SearchByCreatedDate := TRUE;

          '-50': SearchByPostingDate := TRUE;

          '-101':  RefNoSearch := TRUE;  //Referencenumber search
        END;

        //Set filters
        IF vendorNo <> '' THEN BEGIN
          ExDoc.SETFILTER("Vendor No.",vendorNo);
          PostedExDoc.SETFILTER("Vendor No.",vendorNo);
        END ELSE IF vendorName <> '' THEN BEGIN
          vendorNo := CheckVendorNameFilter(vendorName,MultiCompSearch, TempSearchRec.CompName);
          IF vendorNo = '' THEN BEGIN
            ExDoc.SETFILTER("Vendor Name",'%1',vendorName);
            PostedExDoc.SETFILTER("Vendor Name",'%1',vendorName);
          END ELSE BEGIN
            ExDoc.SETFILTER("Vendor No.",vendorNo);
            PostedExDoc.SETFILTER("Vendor No.",vendorNo);
          END;
        END;

        // Initiator Created by is populated on create
        IF initiator <> '' THEN BEGIN
          TempUserFilter := GetUserGroupFilter(CompName,initiator);
          IF TempUserFilter = '' THEN
            EXIT;

          ExDoc.SETRANGE("Created By", TempUserFilter);
          PostedExDoc.SETRANGE("Created By", TempUserFilter);
        END;

        IF  minAmount + maxAmount <> '' THEN BEGIN
          ExDoc.SETFILTER("Gross Amount",minAmount +'..' +maxAmount);
          PostedExDoc.SETFILTER("Gross Amount",minAmount +'..' +maxAmount);
        END;

        IF (duedate_from + duedate_to) <> '' THEN BEGIN
          duedate_from := FORMAT(CreateQuotefromReq.DateField(duedate_from));
          duedate_to := FORMAT(CreateQuotefromReq.DateField(duedate_to));
          ExDoc.SETFILTER("Due Date", duedate_from + '..' + duedate_to);
          PostedExDoc.SETFILTER("Due Date", duedate_from + '..' + duedate_to);
        END;

        IF (postingdate_from + postingdate_to) <> '' THEN BEGIN
          postingdate_from := FORMAT(CreateQuotefromReq.DateField(postingdate_from));
          postingdate_to := FORMAT(CreateQuotefromReq.DateField(postingdate_to));
          IF SearchByCreatedDate THEN BEGIN
            ExDoc.SETFILTER("Create Date", postingdate_from + '..' + postingdate_to);
            PostedExDoc.SETFILTER("Create Date", postingdate_from + '..' + postingdate_to);
          END ELSE IF SearchByPostingDate THEN BEGIN
            ExDoc.SETFILTER("Posting Date", postingdate_from + '..' + postingdate_to);
            PostedExDoc.SETFILTER("Posting Date", postingdate_from + '..' + postingdate_to);
          END ELSE BEGIN
            ExDoc.SETFILTER("Document Date", postingdate_from + '..' + postingdate_to);
            PostedExDoc.SETFILTER("Document Date", postingdate_from + '..' + postingdate_to);
          END;
        END;

        IF RefNoSearch THEN BEGIN
          ExDoc.SETRANGE("Text Field 1",docNo);
          PostedExDoc.SETRANGE("Text Field 1",docNo);
        END ELSE IF docNo <> '' THEN BEGIN
          ExDoc.SETRANGE("Document No.",docNo);
          PostedExDoc.SETRANGE("Document No.",docNo);
        END;

        IF vendorDocNo <> '' THEN BEGIN
          ExDoc.SETFILTER("Vendor Document No.",'%1',vendorDocNo);
          PostedExDoc.SETFILTER("Vendor Document No.",'%1',vendorDocNo);
        END;

        IF docAdminComment <> '' THEN BEGIN
          ExDoc.SETFILTER("Admin Comment",docAdminComment);
          PostedExDoc.SETFILTER("Admin Comment",docAdminComment);
        END;

        //If initiator is specified approvers are ignored
        IF initiator = '' THEN
          IF (approver <> '') THEN BEGIN
            ExDocLineApp.SETRANGE(Approver,approver);
            PostedExDocLineApp.SETRANGE(Approver,approver);
            //Only need to search approvedby where approver is diffrent user than approver
            ExDocLineApprovedBy.SETRANGE("Approved By",approver);
            ExDocLineApprovedBy.SETFILTER(Approver,'<>%1',approver);
            PostedExDocLineAppovedBy.SETRANGE("Approved By",approver);
            PostedExDocLineAppovedBy.SETFILTER(Approver,'<>%1',approver);
            ApproverFilterExists := TRUE;
          END;

        //add wildcard search
        IF approverComment <> '' THEN BEGIN
          ExDocLineApp.SETFILTER(Comment,approverComment);
          PostedExDocLineApp.SETFILTER(Comment,approverComment);
        END;

        CASE approverstatus OF
          '0','Not Processed':
            BEGIN
              ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"Not processed");
              ExDocLineApprovedBy.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"Not processed"); //shouldnt occur but will ensure no hit
              PostedExDocLineApp.SETRANGE(Flowstatus,-1);
              PostedExDocLineAppovedBy.SETRANGE(Flowstatus,-1)
            END;
          '1','Current':
            BEGIN
              ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Current);
              ExDocLineApprovedBy.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Current); //shouldnt occur but will ensure no hit
              PostedExDocLineApp.SETRANGE(Flowstatus,-1);
              PostedExDocLineAppovedBy.SETRANGE(Flowstatus,-1)
            END;
          '2','Approved':
            BEGIN
              ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved);
              ExDocLineApprovedBy.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved);
              PostedExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved);
              PostedExDocLineAppovedBy.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved);
            END;
          '3','Rejected':
            BEGIN
              ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Rejected);
              ExDocLineApprovedBy.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Rejected);
              PostedExDocLineApp.SETRANGE(Flowstatus,-1);
              PostedExDocLineAppovedBy.SETRANGE(Flowstatus,-1)
            END;
          '4','On Hold':
            BEGIN
              ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"On hold");
              ExDocLineApprovedBy.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"On hold");
              PostedExDocLineApp.SETRANGE(Flowstatus,-1);
              PostedExDocLineAppovedBy.SETRANGE(Flowstatus,-1)
            END;
        END;
      END;

      //Check that filters are applied and convert dim array to local comp id
      CheckFilters(ExDoc,ExDocLineApp,arrLocalColumnID,arrDimWebColumnID,arrDimValue,TempSearchRec.CompName,DimFilterCount);

      //Search docs, headers first, consecutive searches will be based on filterd temp list or source table.
      FiltersApplied := SearchByHeaders(TempEXDoc,ExDoc,PostedExDoc,TempSearchRec.CompName);

      IF FiltersApplied THEN
        SearchByFilteredDocLineApp(TempEXDoc,ExDocLineApp,ExDocLineApprovedBy,PostedExDocLineApp,PostedExDocLineAppovedBy,TempSearchRec.CompName)
      ELSE
        FiltersApplied := SearchByDocLineApp(TempEXDoc,ExDocLineApp,ExDocLineApprovedBy,PostedExDocLineApp,PostedExDocLineAppovedBy,
                                             ExDoc,PostedExDoc,ApproverFilterExists,TempSearchRec.CompName);
      CASE DimFilterCount OF
        0 : EXIT;
        1 :
          BEGIN
            IF FiltersApplied THEN
              SearchByFilteredDim(TempEXDoc,arrLocalColumnID,arrDimValue,TempSearchRec.CompName)
            ELSE
              SearchByOneDim(TempEXDoc,arrLocalColumnID,arrDimValue,ExDoc,PostedExDoc,TempSearchRec.CompName);
          END;
        ELSE
          BEGIN
            IF FiltersApplied THEN
              SearchByFilteredDim(TempEXDoc,arrLocalColumnID,arrDimValue,TempSearchRec.CompName)
            ELSE
              SearchByMultiDim(TempEXDoc,arrLocalColumnID,arrDimValue,ExDoc,PostedExDoc,TempSearchRec.CompName);
          END;
      END;
    END;

    LOCAL PROCEDURE SearchByHeaders@1100285006(VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608;VAR ExDoc@1100285001 : Record 12013608;VAR PostedExDoc@1100285002 : Record 12013626;CompName@1100285004 : Text[100]) FilteExist : Boolean;
    BEGIN
      IF (ExDoc.GETFILTERS = '') AND (CompName = '') THEN
        EXIT(FALSE);

      IF ExDoc.FINDSET THEN
        REPEAT
          InsertTempExDoc(TempEXDoc,ExDoc,CompName);
        UNTIL ExDoc.NEXT = 0;

      IF PostedExDoc.FINDSET THEN
        REPEAT
          InsertTempPostedExDoc(TempEXDoc,PostedExDoc,CompName);
        UNTIL PostedExDoc.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SearchByDocLineApp@1100285008(VAR TempEXDoc@1100285004 : TEMPORARY Record 12013608;VAR ExDocLineApp@1100285003 : Record 12013610;VAR ExDocLineApprovedBy@1100285002 : Record 12013610;VAR PostedExDocLineApp@1100285001 : Record 12013628;VAR PostedExDocLineApprovedBy@1100285000 : Record 12013628;VAR ExDoc@1100285006 : Record 12013608;VAR PostedExDoc@1100285005 : Record 12013626;ApproverFilterExist@1100285007 : Boolean;CompName@1100285008 : Text[100]) FiltersApplied : Boolean;
    BEGIN
      //Same filters are applied to all recs
      IF ExDocLineApp.GETFILTERS = '' THEN
        EXIT(FALSE);

      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          InsertTempExDoc(TempEXDoc,ExDoc,CompName);
        UNTIL ExDocLineApp.NEXT = 0;

      IF PostedExDocLineApp.FINDSET THEN
        REPEAT
          PostedExDoc.GET(PostedExDocLineApp."Document ID");
          InsertTempPostedExDoc(TempEXDoc,PostedExDoc,CompName);
        UNTIL PostedExDocLineApp.NEXT = 0;

      //No need to search Approved By recs if no apporver filter is applied
      IF ApproverFilterExist THEN BEGIN
        IF ExDocLineApprovedBy.FINDSET THEN
          REPEAT
            ExDoc.GET(ExDocLineApprovedBy."Document ID");
            InsertTempExDoc(TempEXDoc,ExDoc,CompName);
          UNTIL ExDocLineApprovedBy.NEXT = 0;

      IF PostedExDocLineApprovedBy.FINDSET THEN
        REPEAT
          PostedExDoc.GET(PostedExDocLineApprovedBy."Document ID");
          InsertTempPostedExDoc(TempEXDoc,PostedExDoc,CompName);
        UNTIL PostedExDocLineApp.NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SearchByFilteredDocLineApp@1100285009(VAR TempEXDoc@1100285004 : TEMPORARY Record 12013608;VAR ExDocLineApp@1100285003 : Record 12013610;VAR ExDocLineApprovedBy@1100285002 : Record 12013610;VAR PostedExDocLineApp@1100285001 : Record 12013628;VAR PostedExDocLineApprovedBy@1100285000 : Record 12013628;CompName@1100285005 : Text[100]);
    BEGIN
      IF ExDocLineApp.GETFILTERS = '' THEN
        EXIT;

      //Search temp table and remove records without approver match
      TempEXDoc.RESET;
      TempEXDoc.SETRANGE("Temp Company Name",CompName);
      IF TempEXDoc.FINDSET THEN
        REPEAT
          CASE TempEXDoc."Temp Source Table" OF
            DATABASE::"EX Document" :
              BEGIN
                ExDocLineApp.SETRANGE("Document ID",TempEXDoc."Temp ID");
                ExDocLineApprovedBy.SETRANGE("Document ID",TempEXDoc."Temp ID");
                IF ExDocLineApp.ISEMPTY AND ExDocLineApprovedBy.ISEMPTY THEN
                  TempEXDoc.DELETE;
              END;
             DATABASE::"EX Posted Document" :
              BEGIN
                PostedExDocLineApp.SETRANGE("Document ID",TempEXDoc."Temp ID");
                PostedExDocLineApprovedBy.SETRANGE("Document ID",TempEXDoc."Temp ID");
                IF PostedExDocLineApp.ISEMPTY AND PostedExDocLineApprovedBy.ISEMPTY THEN
                  TempEXDoc.DELETE;
              END;
            END;
        UNTIL TempEXDoc.NEXT = 0;
    END;

    LOCAL PROCEDURE SearchByOneDim@1100285011(VAR TempEXDoc@1100285002 : TEMPORARY Record 12013608;arrLocalColumnID@1100285001 : ARRAY [10] OF BigInteger;arrDimValue@1100285000 : ARRAY [10] OF Code[1024];VAR ExDoc@1100285006 : Record 12013608;VAR PostedExDoc@1100285005 : Record 12013626;CompName@1100285007 : Text[50]);
    VAR
      ExDocLineDim@1100285004 : Record 12013611;
      PostedExDocLineDim@1100285003 : Record 12013629;
      i@1100285008 : Integer;
    BEGIN
      //Change comp on locals
      ExDocLineDim.CHANGECOMPANY(CompName);
      PostedExDocLineDim.CHANGECOMPANY(CompName);

      FOR i := 1 TO ARRAYLEN(arrLocalColumnID) DO
        IF arrLocalColumnID[i] <> 0 THEN BEGIN
          ExDocLineDim.RESET;
          ExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
          ExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
          IF ExDocLineDim.FINDSET THEN
            REPEAT
              ExDoc.GET(ExDocLineDim."Document ID");
              InsertTempExDoc(TempEXDoc,ExDoc,CompName);
            UNTIL ExDocLineDim.NEXT = 0;

          //Find posted docs
          PostedExDocLineDim.RESET;
          PostedExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
          PostedExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
          IF PostedExDocLineDim.FINDSET THEN
            REPEAT
              PostedExDoc.GET(PostedExDocLineDim."Document ID");
              InsertTempPostedExDoc(TempEXDoc,PostedExDoc,CompName);
            UNTIL PostedExDocLineDim.NEXT  = 0;
        END;
    END;

    LOCAL PROCEDURE SearchByFilteredDim@1100285007(VAR TempEXDoc@1100285006 : TEMPORARY Record 12013608;arrLocalColumnID@1100285005 : ARRAY [10] OF BigInteger;arrDimValue@1100285004 : ARRAY [10] OF Code[50];CompName@1100285003 : Text[100]);
    VAR
      ExDocLineDim@1100285001 : Record 12013611;
      PostedExDocLineDim@1100285000 : Record 12013629;
      i@1100285002 : Integer;
      DimMiss@1100285007 : Boolean;
    BEGIN
      ExDocLineDim.CHANGECOMPANY(CompName);
      PostedExDocLineDim.CHANGECOMPANY(CompName);

      //Delete temp results based on dim misses
      TempEXDoc.RESET;
      TempEXDoc.SETRANGE("Temp Company Name",CompName);
      IF TempEXDoc.FINDSET THEN
        REPEAT
          FOR i := 1 TO ARRAYLEN(arrLocalColumnID) DO BEGIN
            IF arrLocalColumnID[i] <> 0 THEN
              CASE TempEXDoc."Temp Source Table" OF
                DATABASE::"EX Document" :
                  BEGIN
                    ExDocLineDim.RESET;
                    ExDocLineDim.SETRANGE("Document ID",TempEXDoc."Temp ID");
                    ExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
                    ExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
                    IF ExDocLineDim.ISEMPTY THEN BEGIN
                      //Delete and exit for-loop
                      TempEXDoc.DELETE;
                      i := ARRAYLEN(arrLocalColumnID);
                    END;
                  END;
                DATABASE::"EX Posted Document" :
                  BEGIN
                    PostedExDocLineDim.RESET;
                    PostedExDocLineDim.SETRANGE("Document ID",TempEXDoc."Temp ID");
                    PostedExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
                    PostedExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
                    IF PostedExDocLineDim.ISEMPTY THEN BEGIN
                      //Delete and exit for-loop
                      TempEXDoc.DELETE;
                      i := ARRAYLEN(arrLocalColumnID);
                    END;
                  END;
                END;
          END;
        UNTIL TempEXDoc.NEXT = 0;
    END;

    LOCAL PROCEDURE SearchByMultiDim@1100285013(VAR TempEXDoc@1100285006 : TEMPORARY Record 12013608;arrLocalColumnID@1100285005 : ARRAY [10] OF BigInteger;arrDimValue@1100285015 : ARRAY [10] OF Code[1024];VAR ExDoc@1100285003 : Record 12013608;VAR PostedExDoc@1100285002 : Record 12013626;CompName@1100285004 : Text[100]);
    VAR
      ExDocLineDim@1100285011 : Record 12013611;
      PostedExDocLineDim@1100285010 : Record 12013629;
      TempExDocLineDim@1100285008 : TEMPORARY Record 12013611;
      TempPostedExDocLineDim@1100285007 : TEMPORARY Record 12013629;
      i@1100285012 : Integer;
      FirstHitPos@1100285013 : Integer;
      TmpFilter@1100285000 : Text;
    BEGIN
      ExDocLineDim.CHANGECOMPANY(CompName);
      PostedExDocLineDim.CHANGECOMPANY(CompName);

      FOR i := 1 TO ARRAYLEN(arrLocalColumnID) DO
        IF arrLocalColumnID[i] <> 0 THEN BEGIN
          ExDocLineDim.RESET;
          ExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
          ExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
          //save position and exit outuer loop
          FirstHitPos := i;
          i := ARRAYLEN(arrLocalColumnID);
          IF ExDocLineDim.FINDSET THEN
            REPEAT
              //Store temp recs
              InsertTempExDocLineDim(TempExDocLineDim,ExDocLineDim);
            UNTIL ExDocLineDim.NEXT = 0;
        END;

      //loop though first dim set and delete if miss dim filter N
      TempExDocLineDim.RESET;
      IF TempExDocLineDim.FINDSET THEN
        REPEAT
          FOR i := FirstHitPos + 1 TO ARRAYLEN(arrLocalColumnID) DO
            IF arrLocalColumnID[i] <> 0 THEN BEGIN
              ExDocLineDim.RESET;
              ExDocLineDim.SETRANGE("Document ID",TempExDocLineDim."Document ID");
              ExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
              ExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
              TmpFilter := arrDimValue[i];
              IF ExDocLineDim.ISEMPTY THEN BEGIN
                TempExDocLineDim.DELETE;
                i := ARRAYLEN(arrLocalColumnID);
              END;
            END;
        UNTIL TempExDocLineDim.NEXT = 0;

      FOR i := 1 TO ARRAYLEN(arrLocalColumnID) DO
        IF arrLocalColumnID[i] <> 0 THEN BEGIN
          PostedExDocLineDim.RESET;
          PostedExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
          PostedExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
          //save position and exit outuer loop
          FirstHitPos := i;
          i := ARRAYLEN(arrLocalColumnID);
          IF PostedExDocLineDim.FINDSET THEN
            REPEAT
              //Store temp recs
              InsertTempPostedExDocLineDim(TempPostedExDocLineDim,PostedExDocLineDim);
            UNTIL PostedExDocLineDim.NEXT = 0;
        END;

      //loop though first dim set and delete if miss dim filter N
      TempPostedExDocLineDim.RESET;
      IF TempPostedExDocLineDim.FINDSET THEN
        REPEAT
          FOR i := FirstHitPos + 1 TO ARRAYLEN(arrLocalColumnID) DO
            IF arrLocalColumnID[i] <> 0 THEN BEGIN
              PostedExDocLineDim.RESET;
              PostedExDocLineDim.SETRANGE("Document ID",TempPostedExDocLineDim."Document ID");
              PostedExDocLineDim.SETRANGE("Column ID",arrLocalColumnID[i]);
              PostedExDocLineDim.SETFILTER("Dimension Value",arrDimValue[i]);
              IF PostedExDocLineDim.ISEMPTY THEN BEGIN
                TempPostedExDocLineDim.DELETE;
                i := ARRAYLEN(arrLocalColumnID);
              END;
            END;
        UNTIL TempPostedExDocLineDim.NEXT = 0;

      //Insert search result based on found TempExDocLin recs
      TempExDocLineDim.RESET;
      IF TempExDocLineDim.FINDSET THEN
        REPEAT
          ExDoc.GET(TempExDocLineDim."Document ID");
          InsertTempExDoc(TempEXDoc,ExDoc,CompName);
        UNTIL TempExDocLineDim.NEXT = 0;

      TempPostedExDocLineDim.RESET;
      IF TempPostedExDocLineDim.FINDSET THEN
        REPEAT
          PostedExDoc.GET(TempPostedExDocLineDim."Document ID");
          InsertTempPostedExDoc(TempEXDoc,PostedExDoc,CompName);
        UNTIL TempPostedExDocLineDim.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckFilters@1100285014(VAR ExDoc@1100285006 : Record 12013608;VAR ExDocLineApp@1100285005 : Record 12013610;VAR arrLocalColumnID@1100285004 : ARRAY [10] OF BigInteger;arrDimWebColumnID@1100285003 : ARRAY [10] OF Code[20];arrDimValue@1100285002 : ARRAY [10] OF Code[50];CompName@1100285001 : Text[100];VAR DimFilterCount@1100285000 : Integer);
    BEGIN
      IF CompName <> '' THEN
        EXIT;

      GetDimFilterCount(arrLocalColumnID,arrDimWebColumnID,arrDimValue,CompName,DimFilterCount);
      IF DimFilterCount = 0 THEN
        IF ExDoc.GETFILTERS = '' THEN
          IF ExDocLineApp.GETFILTERS = '' THEN
            ERROR(Error003);
    END;

    LOCAL PROCEDURE GetDimFilterCount@1100285010(VAR arrLocalColumnID@1100285006 : ARRAY [10] OF BigInteger;arrDimWebColumnID@1100285002 : ARRAY [10] OF Code[20];arrDimValue@1100285001 : ARRAY [10] OF Code[50];CompName@1100285005 : Text[100];VAR DimFilterCount@1100285008 : Integer);
    VAR
      i@1100285000 : Integer;
      ExColumn@1100285003 : Record 12013661;
      WebCompID@1100285004 : Record 12013630;
      WebColumnID@1100285007 : BigInteger;
    BEGIN
      IF NOT WebCompID.GET(CompName) THEN
        EXIT;

      IF NOT WebCompID."Web enabled" THEN
        EXIT;

      //Find local comp Column ID
      ExColumn.CHANGECOMPANY(CompName);
      FOR i := 1 TO ARRAYLEN(arrDimValue) DO
        IF arrDimValue[i] <> '' THEN
          IF EVALUATE(WebColumnID,arrDimWebColumnID[i]) THEN
            IF ExColumn.GET(WebColumnID-WebCompID."Web Company ID") THEN BEGIN
              DimFilterCount := DimFilterCount + 1;
              arrLocalColumnID[i] := ExColumn.ID;
            END;
    END;

    LOCAL PROCEDURE InsertTempExDoc@1100285005(VAR TempEXDoc@1100285001 : TEMPORARY Record 12013608;ExDoc@1100285000 : Record 12013608;CompName@1100285002 : Text[100]);
    BEGIN
      IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
        TempEXDoc.INIT;
        TempEXDoc.TRANSFERFIELDS(ExDoc);
        TempEXDoc."Temp ID" := TempEXDoc.ID;
        TempEXDoc."Temp Company Name" := CompName;
        TempEXDoc."Temp Source Table" := DATABASE::"EX Document";
        TempEXDoc.ID := ExDoc."Web ID";
        TempEXDoc.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertTempPostedExDoc@1100285016(VAR TempEXDoc@1100285001 : TEMPORARY Record 12013608;PostedExDoc@1100285000 : Record 12013626;CompName@1100285003 : Text[100]);
    BEGIN
      IF NOT TempEXDoc.GET(PostedExDoc."Web ID") THEN BEGIN
        TempEXDoc.INIT;
        TempEXDoc.TRANSFERFIELDS(PostedExDoc);
        TempEXDoc."Temp ID" := TempEXDoc.ID;
        TempEXDoc.ID := PostedExDoc."Web ID";
        TempEXDoc."Temp Source Table" := DATABASE::"EX Posted Document";
        TempEXDoc."Temp Company Name" := CompName;
        TempEXDoc.INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckVendorNameFilter@1100285017(VendorName@1100285000 : Text;MultiCompSearch@1100285004 : Boolean;CompName@1100285005 : Text[100]) VendorNo : Code[20];
    VAR
      WebUsedVendors@1100285001 : Record 12013631;
      MissMatch@1100285002 : Boolean;
      FirstVendNo@1100285003 : Code[20];
    BEGIN
      //For multi comp, use vendorname - If Only 1 vendorno matches search, return vendorno filter
      IF MultiCompSearch THEN
        EXIT('');

      WebUsedVendors.SETFILTER("Vendor Name",'%1',VendorName);
      WebUsedVendors.SETRANGE("Company Name",CompName);
      IF WebUsedVendors.FINDSET THEN BEGIN
        FirstVendNo := WebUsedVendors."Vendor No.";
        REPEAT
          IF FirstVendNo <> WebUsedVendors."Vendor No." THEN
            MissMatch := TRUE;
        UNTIL (WebUsedVendors.NEXT = 0) OR MissMatch;
      END;

      IF NOT MissMatch THEN
        EXIT(FirstVendNo)
      ELSE
        EXIT('');
    END;

    LOCAL PROCEDURE AutofillByDefaultDim@1100285018(ExColumn@1100285003 : Record 12013661;trigVal@1100285004 : Text[100];WebCompID@1100285007 : Record 12013630;VAR _bigTextOut@1100285000 : BigText);
    VAR
      TableNo@1100285001 : Integer;
      Writer@1100285006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
      strWriter@1100285005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringWriter";
      DefDim@1100285002 : Record 352;
      DimVal@1100285008 : Record 349;
    BEGIN
      CASE UPPERCASE(ExColumn.Source) OF
        'G_LACCOUNT','GLB_G_LACCOUNT': TableNo := DATABASE::"G/L Account";
        'FIXEDASSET','GLB_FIXEDASSET': TableNo := DATABASE::"Fixed Asset";
        'ITEM','GLB_ITEM':             TableNo := DATABASE::Item;
        'CHARGE','GLB_CHARGE':         TableNo := DATABASE::"Item Charge";
        'JOB','GLB_JOB':               TableNo := DATABASE::Job;
      END;

      strWriter := strWriter.StringWriter;
      Writer := Writer.XmlTextWriter(strWriter);
      Writer.WriteStartElement('Values');
      ExColumn.RESET;
      ExColumn.SETFILTER("Dimension Code",'<>%1','');
      IF ExColumn.FINDSET THEN
        REPEAT
          DefDim.SETRANGE("Table ID",TableNo);
          DefDim.SETRANGE("No.",trigVal);
          DefDim.SETRANGE("Dimension Code",ExColumn."Dimension Code");
          DefDim.SETFILTER("Value Posting",'<>%1',DefDim."Value Posting"::"No Code");
          IF DefDim.FINDFIRST THEN BEGIN
            IF DefDim."Dimension Value Code" <> '' THEN BEGIN
              Writer.WriteStartElement('Value');
              Writer.WriteElementString('ColumnID',FORMAT(ExColumn.ID + WebCompID."Web Company ID",0,9));
              Writer.WriteElementString('Value',DefDim."Dimension Value Code");
              IF DimVal.GET(DefDim."Dimension Code",DefDim."Dimension Value Code") THEN
                Writer.WriteElementString('Description',DimVal.Name);
              Writer.WriteEndElement;
            END;
          END;
        UNTIL ExColumn.NEXT = 0;
      Writer.WriteEndElement;

      CLEAR(_bigTextOut);
      _bigTextOut.ADDTEXT(strWriter.ToString);
    END;

    LOCAL PROCEDURE InsertTempExDocLineDim@1100285023(VAR TempEXDocLineDim@1100285001 : TEMPORARY Record 12013611;ExDocLineDim@1100285000 : Record 12013611);
    BEGIN
      TempEXDocLineDim.RESET;
      TempEXDocLineDim.SETRANGE("Document ID",ExDocLineDim."Document ID");
      IF TempEXDocLineDim.ISEMPTY THEN BEGIN
        TempEXDocLineDim.INIT;
        TempEXDocLineDim.TRANSFERFIELDS(ExDocLineDim);
        TempEXDocLineDim.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertTempPostedExDocLineDim@1100285019(VAR TempPostedExDocLineDim@1100285001 : TEMPORARY Record 12013629;PostedExDocLineDim@1100285000 : Record 12013629);
    BEGIN
      TempPostedExDocLineDim.RESET;
      TempPostedExDocLineDim.SETRANGE("Document ID",PostedExDocLineDim."Document ID");
      IF TempPostedExDocLineDim.ISEMPTY THEN BEGIN
        TempPostedExDocLineDim.INIT;
        TempPostedExDocLineDim.TRANSFERFIELDS(PostedExDocLineDim);
        TempPostedExDocLineDim.INSERT;
      END;
    END;

    BEGIN
    {
      SICH190221 -4PS Cost Obj list will display full 4PS cost obj list if no enable advanced cost object filters exists
    }
    END.
  }
}

