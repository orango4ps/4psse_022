OBJECT Codeunit 2333 O365 Net Promoter Score Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      InvDisplayDataTxt@1003 : TextConst '@@@={Locked};ENU="display/invoicing/?puid=%1";NOR="display/invoicing/?puid=%1"';
      InvRenderDataTxt@1004 : TextConst '@@@={Locked};ENU="render/invoicing/?culture=%1&puid=%2";NOR="render/invoicing/?culture=%1&puid=%2"';
      NetPromoterScoreMgt@1005 : Codeunit 1432;
      ClientTypeManagement@1000 : Codeunit 4030;
      InvDeviceRenderDataTxt@1001 : TextConst '@@@={Locked};ENU="render/invoicing/?culture=%1&puid=%2&client=%3";NOR="render/invoicing/?culture=%1&puid=%2&client=%3"';
      UniversalWindowsPlatformTxt@1002 : TextConst '@@@={Locked};ENU=wp;NOR=wp';
      NpsCategoryLbl@1009 : TextConst '@@@={Locked};ENU=AL NPS Prompt;NOR=AL NPS Prompt';
      NPSPageTelemetryTxt@1006 : TextConst '@@@={Locked};ENU=NPS prompt is displayed.;NOR=NPS prompt is displayed.';

    [External]
    PROCEDURE ShowNpsDialog@1() : Boolean;
    VAR
      NetPromoterScoreSetup@1002 : Record 1432;
    BEGIN
      IF NOT ShouldNpsBePromptedForInvoicing THEN
        EXIT(FALSE);

      IF NetPromoterScoreSetup.GetApiUrl = '' THEN
        EXIT(FALSE);

      NetPromoterScoreMgt.DisableRequestSending;

      COMMIT;
      PAGE.RUNMODAL(PAGE::"BC O365 Net Promoter Score");
      SENDTRACETAG('00006ZF',NpsCategoryLbl,VERBOSITY::Normal,NPSPageTelemetryTxt,DATACLASSIFICATION::SystemMetadata);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ShouldNpsBePromptedForInvoicing@4() : Boolean;
    VAR
      NetPromoterScore@1001 : Record 1433;
      DisplayUrl@1004 : Text;
      RenderUrl@1000 : Text;
      Response@1010 : Text;
      Display@1006 : Boolean;
    BEGIN
      IF NOT NetPromoterScore.ShouldSendRequest THEN
        EXIT(FALSE);

      IF NOT NetPromoterScoreMgt.ShouldNpsRun THEN
        EXIT(FALSE);

      DisplayUrl := GetInvDisplayUrl;
      IF DisplayUrl = '' THEN
        EXIT(FALSE);

      RenderUrl := GetInvRenderUrl;
      IF RenderUrl = '' THEN
        EXIT(FALSE);

      IF NOT NetPromoterScoreMgt.ExecuteWebRequest(DisplayUrl,Response) THEN
        EXIT(FALSE);

      IF NOT NetPromoterScoreMgt.TryGetDisplayProperty(Response,Display) THEN
        EXIT(FALSE);

      EXIT(Display);
    END;

    [External]
    PROCEDURE TestInvConnection@5(BaseUrl@1001 : Text;VAR Response@1000 : Text;VAR ErrorMessage@1002 : Text) : Boolean;
    VAR
      TestUrl@1003 : Text;
      Success@1004 : Boolean;
    BEGIN
      TestUrl := GetInvTestUrl(BaseUrl);
      Success := NetPromoterScoreMgt.ExecuteWebRequest(TestUrl,Response);
      IF NOT Success THEN
        ErrorMessage := GETLASTERRORTEXT;
      EXIT(Success);
    END;

    [External]
    PROCEDURE GetInvDisplayUrl@12() : Text;
    VAR
      Data@1001 : Text;
      BaseUrl@1002 : Text;
      FullUrl@1000 : Text;
    BEGIN
      Data := GetInvDisplayData;
      BaseUrl := GetApiUrl;
      FullUrl := NetPromoterScoreMgt.GetFullUrl(BaseUrl,Data);
      EXIT(FullUrl);
    END;

    [External]
    PROCEDURE GetInvRenderUrl@13() : Text;
    VAR
      Data@1002 : Text;
      BaseUrl@1001 : Text;
      FullUrl@1000 : Text;
    BEGIN
      Data := GetInvRenderData;
      BaseUrl := GetApiUrl;
      FullUrl := NetPromoterScoreMgt.GetFullUrl(BaseUrl,Data);
      EXIT(FullUrl);
    END;

    [External]
    PROCEDURE GetInvTestUrl@27(BaseUrl@1000 : Text) : Text;
    VAR
      Data@1001 : Text;
      FullUrl@1002 : Text;
    BEGIN
      Data := GetInvTestData;
      FullUrl := NetPromoterScoreMgt.GetFullUrl(BaseUrl,Data);
      EXIT(FullUrl);
    END;

    LOCAL PROCEDURE GetApiUrl@2() : Text;
    VAR
      NetPromoterScoreSetup@1000 : Record 1432;
      Url@1001 : Text;
    BEGIN
      Url := NetPromoterScoreSetup.GetApiUrl;
      EXIT(Url);
    END;

    LOCAL PROCEDURE GetInvTestData@15() : Text;
    VAR
      Data@1001 : Text;
    BEGIN
      Data := STRSUBSTNO(InvDisplayDataTxt,'');
      EXIT(Data);
    END;

    LOCAL PROCEDURE GetInvDisplayData@18() : Text;
    VAR
      Puid@1000 : Text;
      Data@1001 : Text;
    BEGIN
      Puid := NetPromoterScoreMgt.GetPuid;
      Data := STRSUBSTNO(InvDisplayDataTxt,Puid);
      EXIT(Data);
    END;

    LOCAL PROCEDURE GetInvRenderData@17() : Text;
    VAR
      TypeHelper@1003 : Codeunit 10;
      Culture@1002 : Text;
      Puid@1000 : Text;
      Data@1001 : Text;
    BEGIN
      Culture := LOWERCASE(TypeHelper.LanguageIDToCultureName(GLOBALLANGUAGE));
      Puid := NetPromoterScoreMgt.GetPuid;
      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Phone,CLIENTTYPE::Tablet] THEN
        Data := STRSUBSTNO(InvDeviceRenderDataTxt,Culture,Puid,UniversalWindowsPlatformTxt)
      ELSE
        Data := STRSUBSTNO(InvRenderDataTxt,Culture,Puid);
      EXIT(Data);
    END;

    BEGIN
    END.
  }
}

