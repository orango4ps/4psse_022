OBJECT Codeunit 7301 Whse. Jnl.-Register Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    TableNo=7311;
    Permissions=TableData 7312=imd,
                TableData 7313=imd;
    OnRun=BEGIN
            RegisterWhseJnlLine(Rec);
          END;

  }
  CODE
  {
    VAR
      Location@1005 : Record 14;
      WhseJnlLine@1000 : Record 7311;
      Item@1008 : Record 27;
      Bin@1003 : Record 7354;
      WhseReg@1002 : Record 7313;
      ItemTrackingMgt@1004 : Codeunit 6500;
      WMSMgt@1009 : Codeunit 7302;
      WhseEntryNo@1001 : Integer;
      Text000@1006 : TextConst '@@@="%1 = the value of the Quantity that is in the bin; %2 = the value of the Quantity that is not available.";ENU=is not sufficient to complete this action. The quantity in the bin is %1. %2 units are not available;NOR=er ikke tilstrekkelig for † fullf›re denne handlingen. Antallet i hyllen er %1. %2 enheter er ikke tilgjengelige;SVE=r„cker inte f”r att slutf”ra †tg„rden. Kvantiteten p† lagerplatsen „r %1. %2 enheter saknas';
      Text001@1007 : TextConst 'ENU=Serial No. %1 is found in inventory .;NOR=Serienr. %1 finnes i beholdningen.;SVE=Serienr %1 fanns i lagret.';
      OnMovement@1010 : Boolean;

    LOCAL PROCEDURE Code@2();
    VAR
      GlobalWhseEntry@1000 : Record 7312;
    BEGIN
      OnBeforeCode(WhseJnlLine);

      WITH WhseJnlLine DO BEGIN
        IF ("Qty. (Absolute)" = 0) AND ("Qty. (Base)" = 0) AND (NOT "Phys. Inventory") THEN
          EXIT;
        TESTFIELD("Item No.");
        GetLocation("Location Code");
        IF WhseEntryNo = 0 THEN BEGIN
          GlobalWhseEntry.LOCKTABLE;
          IF GlobalWhseEntry.FINDLAST THEN
            WhseEntryNo := GlobalWhseEntry."Entry No.";
        END;
        OnMovement := FALSE;
        IF "From Bin Code" <> '' THEN BEGIN
          InitWhseEntry(GlobalWhseEntry,"From Zone Code","From Bin Code",-1);
          IF "To Bin Code" <> '' THEN BEGIN
            InsertWhseEntry(GlobalWhseEntry);
            OnMovement := TRUE;
            InitWhseEntry(GlobalWhseEntry,"To Zone Code","To Bin Code",1);
          END;
        END ELSE
          InitWhseEntry(GlobalWhseEntry,"To Zone Code","To Bin Code",1);

        InsertWhseEntry(GlobalWhseEntry);
      END;
    END;

    LOCAL PROCEDURE InitWhseEntry@4(VAR WhseEntry@1000 : Record 7312;ZoneCode@1002 : Code[10];BinCode@1003 : Code[20];Sign@1001 : Integer);
    VAR
      ToBinContent@1004 : Record 7302;
      WMSMgt@1005 : Codeunit 7302;
    BEGIN
      WhseEntryNo := WhseEntryNo + 1;

      WITH WhseJnlLine DO BEGIN
        WhseEntry.INIT;
        WhseEntry."Entry No." := WhseEntryNo;
        WhseEntryNo := WhseEntry."Entry No.";
        WhseEntry."Journal Template Name" := "Journal Template Name";
        WhseEntry."Journal Batch Name" := "Journal Batch Name";
        IF "Entry Type" <> "Entry Type"::Movement THEN BEGIN
          IF Sign >= 0 THEN
            WhseEntry."Entry Type" := WhseEntry."Entry Type"::"Positive Adjmt."
          ELSE
            WhseEntry."Entry Type" := WhseEntry."Entry Type"::"Negative Adjmt.";
        END ELSE
          WhseEntry."Entry Type" := "Entry Type";
        WhseEntry."Line No." := "Line No.";
        WhseEntry."Whse. Document No." := "Whse. Document No.";
        WhseEntry."Whse. Document Type" := "Whse. Document Type";
        WhseEntry."Whse. Document Line No." := "Whse. Document Line No.";
        WhseEntry."No. Series" := "Registering No. Series";
        WhseEntry."Location Code" := "Location Code";
        WhseEntry."Zone Code" := ZoneCode;
        WhseEntry."Bin Code" := BinCode;
        GetBin("Location Code",BinCode);
        WhseEntry.Dedicated := Bin.Dedicated;
        WhseEntry."Bin Type Code" := Bin."Bin Type Code";
        WhseEntry."Item No." := "Item No.";
        WhseEntry.Description := GetItemDescription("Item No.",Description);
        IF Location."Directed Put-away and Pick" THEN BEGIN
          WhseEntry.Quantity := "Qty. (Absolute)" * Sign;
          WhseEntry."Unit of Measure Code" := "Unit of Measure Code";
          WhseEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        END ELSE BEGIN
          WhseEntry.Quantity := "Qty. (Absolute, Base)" * Sign;
          WhseEntry."Unit of Measure Code" := WMSMgt.GetBaseUOM("Item No.");
          WhseEntry."Qty. per Unit of Measure" := 1;
        END;
        WhseEntry."Qty. (Base)" := "Qty. (Absolute, Base)" * Sign;
        WhseEntry."Registering Date" := "Registering Date";
        WhseEntry."User ID" := "User ID";
        WhseEntry."Variant Code" := "Variant Code";
        WhseEntry."Source Type" := "Source Type";
        WhseEntry."Source Subtype" := "Source Subtype";
        WhseEntry."Source No." := "Source No.";
        WhseEntry."Source Line No." := "Source Line No.";
        WhseEntry."Source Subline No." := "Source Subline No.";
        WhseEntry."Source Document" := "Source Document";
        WhseEntry."Reference Document" := "Reference Document";
        WhseEntry."Reference No." := "Reference No.";
        WhseEntry."Source Code" := "Source Code";
        WhseEntry."Reason Code" := "Reason Code";
        WhseEntry.Cubage := Cubage * Sign;
        WhseEntry.Weight := Weight * Sign;
        WhseEntry."Serial No." := "Serial No.";
        WhseEntry."Lot No." := "Lot No.";
        WhseEntry."Expiration Date" := "Expiration Date";
        IF OnMovement AND ("Entry Type" = "Entry Type"::Movement) THEN BEGIN
          IF "New Serial No." <> '' THEN
            WhseEntry."Serial No." := "New Serial No.";
          IF "New Lot No." <> '' THEN
            WhseEntry."Lot No." := "New Lot No.";
          IF ("New Expiration Date" <> "Expiration Date") AND (WhseEntry."Entry Type" = WhseEntry."Entry Type"::Movement) THEN
            WhseEntry."Expiration Date" := "New Expiration Date";
        END;
        WhseEntry."Warranty Date" := "Warranty Date";
        WhseEntry."Phys Invt Counting Period Code" := "Phys Invt Counting Period Code";
        WhseEntry."Phys Invt Counting Period Type" := "Phys Invt Counting Period Type";

        OnInitWhseEntryCopyFromWhseJnlLine(WhseEntry,WhseJnlLine,OnMovement,Sign);

        IF Sign > 0 THEN BEGIN
          IF BinCode <> Location."Adjustment Bin Code" THEN BEGIN
            IF NOT ToBinContent.GET(
                 "Location Code",BinCode,"Item No.","Variant Code","Unit of Measure Code")
            THEN
              InsertToBinContent(WhseEntry)
            ELSE
              IF Location."Default Bin Selection" = Location."Default Bin Selection"::"Last-Used Bin" THEN
                UpdateDefaultBinContent("Item No.","Variant Code","Location Code",BinCode);
          END
        END ELSE BEGIN
          IF BinCode <> Location."Adjustment Bin Code" THEN
            DeleteFromBinContent(WhseEntry);
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteFromBinContent@1(VAR WhseEntry@1000 : Record 7312);
    VAR
      FromBinContent@1001 : Record 7302;
      WhseEntry2@1002 : Record 7312;
      WhseSNRequired@1102601001 : Boolean;
      WhseLNRequired@1102601000 : Boolean;
      Sign@1003 : Integer;
      IsHandled@1004 : Boolean;
    BEGIN
      WITH WhseEntry DO BEGIN
        FromBinContent.GET("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code");
        ItemTrackingMgt.CheckWhseItemTrkgSetup(FromBinContent."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
        IF WhseLNRequired THEN
          FromBinContent.SETRANGE("Lot No. Filter","Lot No.");
        IF WhseSNRequired THEN
          FromBinContent.SETRANGE("Serial No. Filter","Serial No.");
        OnDeleteFromBinContentOnAfterSetFiltersForBinContent(FromBinContent,WhseEntry);
        FromBinContent.CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
        IF FromBinContent."Quantity (Base)" + "Qty. (Base)" = 0 THEN BEGIN
          WhseEntry2.SETCURRENTKEY(
            "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code");
          WhseEntry2.SETRANGE("Item No.","Item No.");
          WhseEntry2.SETRANGE("Bin Code","Bin Code");
          WhseEntry2.SETRANGE("Location Code","Location Code");
          WhseEntry2.SETRANGE("Variant Code","Variant Code");
          WhseEntry2.SETRANGE("Unit of Measure Code","Unit of Measure Code");
          IF WhseLNRequired THEN
            WhseEntry2.SETRANGE("Lot No.","Lot No.");
          IF WhseSNRequired THEN
            WhseEntry2.SETRANGE("Serial No.","Serial No.");
          OnDeleteFromBinContentOnAfterSetFiltersForWhseEntry(WhseEntry2,FromBinContent,WhseEntry);
          WhseEntry2.CALCSUMS(Cubage,Weight,"Qty. (Base)");
          Cubage := -WhseEntry2.Cubage;
          Weight := -WhseEntry2.Weight;
          IF WhseEntry2."Qty. (Base)" + "Qty. (Base)" <> 0 THEN
            RegisterRoundResidual(WhseEntry,WhseEntry2);

          FromBinContent.SETRANGE("Lot No. Filter");
          FromBinContent.SETRANGE("Serial No. Filter");
          FromBinContent.CALCFIELDS("Quantity (Base)");
          IF FromBinContent."Quantity (Base)" + "Qty. (Base)" = 0 THEN
            IF (FromBinContent."Positive Adjmt. Qty. (Base)" = 0) AND
               (FromBinContent."Put-away Quantity (Base)" = 0) AND
               (NOT FromBinContent.Fixed)
            THEN
              FromBinContent.DELETE;
        END ELSE BEGIN
          FromBinContent.CALCFIELDS(Quantity);
          IF FromBinContent.Quantity + Quantity = 0 THEN BEGIN
            "Qty. (Base)" := -FromBinContent."Quantity (Base)";
            Sign := WhseJnlLine."Qty. (Base)" / WhseJnlLine."Qty. (Absolute, Base)";
            WhseJnlLine."Qty. (Base)" := "Qty. (Base)" * Sign;
            WhseJnlLine."Qty. (Absolute, Base)" := ABS("Qty. (Base)");
          END ELSE
            IF FromBinContent."Quantity (Base)" + "Qty. (Base)" < 0 THEN BEGIN
              IsHandled := FALSE;
              OnDeleteFromBinContentOnBeforeFieldError(FromBinContent,WhseEntry,IsHandled);
              IF NOT IsHandled THEN
                FromBinContent.FIELDERROR(
                  "Quantity (Base)",
                  STRSUBSTNO(Text000,FromBinContent."Quantity (Base)",-(FromBinContent."Quantity (Base)" + "Qty. (Base)")));
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE RegisterRoundResidual@12(VAR WhseEntry@1002 : Record 7312;WhseEntry2@1003 : Record 7312);
    VAR
      WhseJnlLine2@1001 : Record 7311;
      WhseJnlRegLine@1000 : Codeunit 7301;
    BEGIN
      WITH WhseEntry DO BEGIN
        WhseJnlLine2 := WhseJnlLine;
        GetBin(WhseJnlLine2."Location Code",Location."Adjustment Bin Code");
        WhseJnlLine2.Quantity := 0;
        WhseJnlLine2."Qty. (Base)" := WhseEntry2."Qty. (Base)" + "Qty. (Base)";
        IF WhseEntry2."Qty. (Base)" > ABS("Qty. (Base)") THEN BEGIN
          WhseJnlLine2."To Zone Code" := Bin."Zone Code";
          WhseJnlLine2."To Bin Code" := Bin.Code;
        END ELSE BEGIN
          WhseJnlLine2."To Zone Code" := WhseJnlLine2."From Zone Code";
          WhseJnlLine2."To Bin Code" := WhseJnlLine2."From Bin Code";
          WhseJnlLine2."From Zone Code" := Bin."Zone Code";
          WhseJnlLine2."From Bin Code" := Bin.Code;
          WhseJnlLine2."Qty. (Base)" := -WhseJnlLine2."Qty. (Base)";
        END;
        WhseJnlLine2."Qty. (Absolute)" := 0;
        WhseJnlLine2."Qty. (Absolute, Base)" := ABS(WhseJnlLine2."Qty. (Base)");
        WhseJnlRegLine.SetWhseRegister(WhseReg);
        WhseJnlRegLine.RUN(WhseJnlLine2);
        WhseJnlRegLine.GetWhseRegister(WhseReg);
        WhseEntryNo := WhseReg."To Entry No." + 1;
        "Entry No." := WhseReg."To Entry No." + 1;
      END;
    END;

    LOCAL PROCEDURE InsertWhseEntry@7(VAR WhseEntry@1000 : Record 7312);
    VAR
      ItemTrackingCode@1002 : Record 6502;
      ExistingExpDate@1003 : Date;
    BEGIN
      WITH WhseEntry DO BEGIN
        GetItem("Item No.");
        IF ItemTrackingCode.GET(Item."Item Tracking Code") THEN
          IF ("Serial No." <> '') AND
             ("Bin Code" <> Location."Adjustment Bin Code") AND
             (Quantity > 0) AND
             ItemTrackingCode."SN Specific Tracking"
          THEN
            IF WMSMgt.SerialNoOnInventory("Location Code","Item No.","Variant Code","Serial No.") THEN
              ERROR(Text001,"Serial No.");

        IF ItemTrackingCode."Man. Expir. Date Entry Reqd." AND ("Entry Type" = "Entry Type"::"Positive Adjmt.")
           AND (ItemTrackingCode."Lot Warehouse Tracking" OR ItemTrackingCode."SN Warehouse Tracking")
        THEN BEGIN
          TESTFIELD("Expiration Date");
          ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",ExistingExpDate);
          IF (ExistingExpDate <> 0D) AND ("Expiration Date" <> ExistingExpDate) THEN
            TESTFIELD("Expiration Date",ExistingExpDate)
        END;

        OnBeforeInsertWhseEntry(WhseEntry);
        INSERT;
        InsertWhseReg("Entry No.");
        UpdateBinEmpty(WhseEntry);
      END;

      OnAfterInsertWhseEntry(WhseEntry);
    END;

    LOCAL PROCEDURE UpdateBinEmpty@21(NewWarehouseEntry@1000 : Record 7312);
    VAR
      WarehouseEntry@1002 : Record 7312;
      IsHandled@1001 : Boolean;
    BEGIN
      OnBeforeUpdateBinEmpty(NewWarehouseEntry,Bin,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH NewWarehouseEntry DO
        IF Quantity > 0 THEN
          ModifyBinEmpty(FALSE)
        ELSE BEGIN
          WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code");
          WarehouseEntry.SETRANGE("Bin Code","Bin Code");
          WarehouseEntry.SETRANGE("Location Code","Location Code");
          WarehouseEntry.CALCSUMS("Qty. (Base)");
          ModifyBinEmpty(WarehouseEntry."Qty. (Base)" = 0);
        END;
    END;

    LOCAL PROCEDURE ModifyBinEmpty@27(NewEmpty@1000 : Boolean);
    BEGIN
      IF Bin.Empty <> NewEmpty THEN BEGIN
        Bin.Empty := NewEmpty;
        Bin.MODIFY;
      END;
    END;

    LOCAL PROCEDURE InsertToBinContent@13(WhseEntry@1000 : Record 7312);
    VAR
      BinContent@1001 : Record 7302;
      WhseIntegrationMgt@1002 : Codeunit 7317;
    BEGIN
      WITH WhseEntry DO BEGIN
        GetBin("Location Code","Bin Code");
        BinContent.INIT;
        BinContent."Location Code" := "Location Code";
        BinContent."Zone Code" := "Zone Code";
        BinContent."Bin Code" := "Bin Code";
        BinContent.Dedicated := Bin.Dedicated;
        BinContent."Bin Type Code" := Bin."Bin Type Code";
        BinContent."Block Movement" := Bin."Block Movement";
        BinContent."Bin Ranking" := Bin."Bin Ranking";
        BinContent."Cross-Dock Bin" := Bin."Cross-Dock Bin";
        BinContent."Warehouse Class Code" := Bin."Warehouse Class Code";
        BinContent."Item No." := "Item No.";
        BinContent."Variant Code" := "Variant Code";
        BinContent."Unit of Measure Code" := "Unit of Measure Code";
        BinContent."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        BinContent.Fixed := WhseIntegrationMgt.IsOpenShopFloorBin("Location Code","Bin Code");
        IF NOT Location."Directed Put-away and Pick" THEN BEGIN
          IF WMSMgt.CheckDefaultBin("Item No.","Variant Code","Location Code","Bin Code") THEN BEGIN
            IF Location."Default Bin Selection" = Location."Default Bin Selection"::"Last-Used Bin" THEN BEGIN
              DeleteDefaultBinContent("Item No.","Variant Code","Location Code");
              BinContent.Default := TRUE;
            END
          END ELSE
            BinContent.Default := TRUE;
          BinContent.Fixed := BinContent.Default;
        END;
        BinContent.INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateDefaultBinContent@8(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];BinCode@1003 : Code[20]);
    VAR
      BinContent@1004 : Record 7302;
      BinContent2@1005 : Record 7302;
    BEGIN
      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,TRUE);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      IF BinContent.FINDFIRST THEN
        IF BinContent."Bin Code" <> BinCode THEN BEGIN
          BinContent.Default := FALSE;
          BinContent.MODIFY;
        END;

      IF BinContent."Bin Code" <> BinCode THEN BEGIN
        BinContent2.SETRANGE("Location Code",LocationCode);
        BinContent2.SETRANGE("Item No.",ItemNo);
        BinContent2.SETRANGE("Variant Code",VariantCode);
        BinContent2.SETRANGE("Bin Code",BinCode);
        BinContent2.FINDFIRST;
        BinContent2.Default := TRUE;
        BinContent2.MODIFY;
      END;
    END;

    LOCAL PROCEDURE DeleteDefaultBinContent@10(ItemNo@1004 : Code[20];VariantCode@1003 : Code[10];LocationCode@1002 : Code[10]);
    VAR
      BinContent@1005 : Record 7302;
    BEGIN
      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,TRUE);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      IF BinContent.FINDFIRST THEN BEGIN
        BinContent.Default := FALSE;
        BinContent.MODIFY;
      END;
    END;

    LOCAL PROCEDURE InsertWhseReg@3(WhseEntryNo@1000 : Integer);
    BEGIN
      WITH WhseJnlLine DO
        IF WhseReg."No." = 0 THEN BEGIN
          WhseReg.LOCKTABLE;
          IF WhseReg.FIND('+') THEN
            WhseReg."No." := WhseReg."No." + 1
          ELSE
            WhseReg."No." := 1;
          WhseReg.INIT;
          WhseReg."From Entry No." := WhseEntryNo;
          WhseReg."To Entry No." := WhseEntryNo;
          WhseReg."Creation Date" := TODAY;
          WhseReg."Creation Time" := TIME;
          WhseReg."Journal Batch Name" := "Journal Batch Name";
          WhseReg."Source Code" := "Source Code";
          WhseReg."User ID" := USERID;
          WhseReg.INSERT;
        END ELSE BEGIN
          IF ((WhseEntryNo < WhseReg."From Entry No.") AND (WhseEntryNo <> 0)) OR
             ((WhseReg."From Entry No." = 0) AND (WhseEntryNo > 0))
          THEN
            WhseReg."From Entry No." := WhseEntryNo;
          IF WhseEntryNo > WhseReg."To Entry No." THEN
            WhseReg."To Entry No." := WhseEntryNo;
          WhseReg.MODIFY;
        END;
    END;

    LOCAL PROCEDURE GetBin@14(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      IF (Bin."Location Code" <> LocationCode) OR
         (Bin.Code <> BinCode)
      THEN
        Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE GetLocation@5(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetItemDescription@15(ItemNo@1000 : Code[20];Description2@1001 : Text[100]) : Text[100];
    BEGIN
      GetItem(ItemNo);
      IF Item.Description = Description2 THEN
        EXIT('');
      EXIT(Description2);
    END;

    LOCAL PROCEDURE GetItem@6(ItemNo@1000 : Code[20]);
    BEGIN
      IF Item."No." <> ItemNo THEN
        Item.GET(ItemNo);
    END;

    [External]
    PROCEDURE SetWhseRegister@25(WhseRegDef@1000 : Record 7313);
    BEGIN
      WhseReg := WhseRegDef;
    END;

    [External]
    PROCEDURE GetWhseRegister@26(VAR WhseRegDef@1000 : Record 7313);
    BEGIN
      WhseRegDef := WhseReg;
    END;

    [External]
    PROCEDURE RegisterWhseJnlLine@9(VAR WarehouseJournalLine@1000 : Record 7311);
    BEGIN
      WhseJnlLine.COPY(WarehouseJournalLine);
      Code;
      WarehouseJournalLine := WhseJnlLine;
    END;

    [Integration]
    LOCAL PROCEDURE OnInitWhseEntryCopyFromWhseJnlLine@11(VAR WarehouseEntry@1000 : Record 7312;WarehouseJournalLine@1001 : Record 7311;OnMovement@1002 : Boolean;Sign@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertWhseEntry@17(VAR WarehouseEntry@1000 : Record 7312);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCode@19(VAR WarehouseJournalLine@1000 : Record 7311);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertWhseEntry@16(VAR WarehouseEntry@1000 : Record 7312);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateBinEmpty@23(WarehouseEntry@1000 : Record 7312;Bin@1001 : Record 7354;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDeleteFromBinContentOnAfterSetFiltersForWhseEntry@18(VAR WarehouseEntry2@1000 : Record 7312;VAR BinContent@1002 : Record 7302;WarehouseEntry@1001 : Record 7312);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDeleteFromBinContentOnAfterSetFiltersForBinContent@20(VAR BinContent@1000 : Record 7302;WarehouseEntry@1001 : Record 7312);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDeleteFromBinContentOnBeforeFieldError@22(BinContent@1000 : Record 7302;WarehouseEntry@1001 : Record 7312;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

