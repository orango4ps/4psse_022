OBJECT Table 11020207 Surcharge Read Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Overhead Surcharge Read Order Line;
               NOR=Overheadkost for repetisjonsordrerad;
               SVE=Overheadkostnad f”r l„sorderrad];
  }
  FIELDS
  {
    { 10  ;   ;Surcharge Type      ;Option        ;CaptionML=[ENU=Surcharge Type;
                                                              NOR=Tilleggsgebyrtype;
                                                              SVE=Till„ggsavgiftstyp];
                                                   OptionCaptionML=[ENU=Project,Service,Indirect,InterCompany;
                                                                    NOR=Prosjekt,Service,Indirekte,Konsernintern;
                                                                    SVE=Projekt,Service,Indirekt,Koncernintern];
                                                   OptionString=Project,Service,Indirect,InterCompany,,Project - External Employee,Service - External Employee,Indirect - External Employee,Plant - External Employee;
                                                   Editable=No }
    { 20  ;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              NOR=Niv†;
                                                              SVE=Niv†];
                                                   Editable=No }
    { 30  ;   ;Read Order          ;Integer       ;OnValidate=BEGIN
                                                                IF "Read Order" > 0 THEN BEGIN
                                                                  SurchargeReadOrderLine.RESET;
                                                                  SurchargeReadOrderLine.SETCURRENTKEY("Surcharge Type", "Read Order");
                                                                  SurchargeReadOrderLine.SETRANGE("Surcharge Type", "Surcharge Type");
                                                                  SurchargeReadOrderLine.SETRANGE("Read Order", "Read Order");
                                                                  SurchargeReadOrderLine.SETFILTER(Level, '<>%1', Level);
                                                                  IF SurchargeReadOrderLine.FINDFIRST THEN
                                                                    ERROR(Text001, FIELDCAPTION("Read Order"), "Read Order");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Read Order;
                                                              NOR=Les Ordre;
                                                              SVE=L„sorder];
                                                   BlankZero=Yes }
    { 40  ;   ;No. of Surcharges   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Overhead Surcharge" WHERE (Level=FIELD(Level)));
                                                   CaptionML=[ENU=No. of Surcharges;
                                                              NOR=Antall tilleggsgebyrer;
                                                              SVE=Antal till„ggsavgifter];
                                                   BlankZero=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Surcharge Type,Level                    ;Clustered=Yes }
    {    ;Surcharge Type,Read Order                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServSetup@1100485003 : Record 11012800;
      SurchargeReadOrderLine@1100485000 : Record 11020207;
      Text001@1100485001 : TextConst 'ENU=%1 %2 may only be used once.;NOR=%1 %2 kan kun brukes en g†ng.;SVE=%1 %2 kan endast anv„ndas en g†ng.';
      Text002@1100485005 : TextConst 'ENU=%1 %2 is not involved in a Surcharge Read Order.;NOR=%1 %2 er ikke involvert i en tilleggsgebyr-leseordre.;SVE=%1 %2 „r inte inblandad i en till„ggs-l„sorder.';
      Text003@1100485002 : TextConst 'ENU=Exceptions;NOR=Unntak;SVE=Undantag';

    PROCEDURE CreateReadOrderLines@1100485000();
    VAR
      lSurchargeType@1100485001 : 'Project,Service,Indirect,InterCompany';
      lLevel@1100485004 : Integer;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //Project
      lSurchargeType := lSurchargeType::Project;
      lLevel := 0;
      REPEAT
        lLevel := lLevel + 10;
        IF lLevel IN [10,20,50,80,110,140,170,200,230,260..370] THEN
          CreateReadOrderLine(lSurchargeType,lLevel);
      UNTIL lLevel = 370;
      // 30166.sn
      CreateReadOrderLine(lSurchargeType,233);
      CreateReadOrderLine(lSurchargeType,236);
      // 30166.en

      //Service
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN
        lSurchargeType := lSurchargeType::Service;
        lLevel := 0;
        REPEAT
          lLevel := lLevel + 10;
          IF lLevel IN [10,30,60,90,120,150,180,210,240,260..370] THEN
            CreateReadOrderLine(lSurchargeType,lLevel);
        UNTIL lLevel = 370;
        CreateReadOrderLine(lSurchargeType,245);
      END;

      //Indirect
      lSurchargeType := lSurchargeType::Indirect;
      lLevel := 0;
      REPEAT
        lLevel := lLevel + 10;
        IF lLevel IN [10,40,70,100,130,160,190,220,250,260..370] THEN
          CreateReadOrderLine(lSurchargeType,lLevel);
      UNTIL lLevel = 370;

      //Intercompany
      lSurchargeType := lSurchargeType::InterCompany;
      lLevel := 0;
      REPEAT
        lLevel := lLevel + 10;
      //  IF lLevel IN [380..450] THEN
        IF lLevel IN [380..460] THEN   //CALL 31147
          CreateReadOrderLine(lSurchargeType,lLevel);
      //UNTIL lLevel = 450;
      UNTIL lLevel = 460;   //CALL 31147
    END;

    LOCAL PROCEDURE CreateReadOrderLine@1100485001(NewSurchargeType@1100485001 : Option;NewLevel@1100485002 : Integer);
    VAR
      lReadOrderLine@1100485000 : Record 11020207;
    BEGIN
      WITH lReadOrderLine DO BEGIN
        IF NOT GET(NewSurchargeType, NewLevel) THEN BEGIN
          INIT;
          "Surcharge Type" := NewSurchargeType;
          Level := NewLevel;
          INSERT;
        END;
      END;
    END;

    PROCEDURE ShowSurchargeLevel@1100485002() LevelTxt : Text[80];
    VAR
      lSurchargeOverheadRec@1100485000 : Record 11020208;
    BEGIN
      WITH lSurchargeOverheadRec DO
        CASE Rec.Level OF
          10: LevelTxt := Text003;
          20: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION("Wage Component") + ' - ' + FIELDCAPTION(Department);
          30: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION("Wage Component") + ' - ' + FIELDCAPTION(Department);
          40: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION("Wage Component") + ' - ' + FIELDCAPTION(Department);
          50: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION("Wage Component");
          60: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION("Wage Component");
          70: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION("Wage Component");
          80: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION(Department);
          90: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION(Department);
          100: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Object") + ' - ' +
            FIELDCAPTION(Department);
          110: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Object");
          120: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Object");
          130: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Object");
          140: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION("Wage Component") + ' - ' + FIELDCAPTION(Department);
          150: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION("Wage Component") + ' - ' + FIELDCAPTION(Department);
          160: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION("Wage Component") + ' - ' + FIELDCAPTION(Department);
          170: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION("Wage Component");
          180: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION("Wage Component");
          190: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION("Wage Component");
          200: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION(Department);
          210: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION(Department);
          220: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Type") + ' - ' +
            FIELDCAPTION(Department);
          230: LevelTxt :=
            FIELDCAPTION("Project Type") + ' - ' + FIELDCAPTION("Cost Type");
          // 30166.sn
          233: LevelTxt :=
            FIELDCAPTION("Job No.") + ' - ' + FIELDCAPTION("Cost Object");
          236: LevelTxt :=
            FIELDCAPTION("Job No.") + ' - ' + FIELDCAPTION("Cost Type");
          // 30166.en
          240: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Type");
          245: LevelTxt :=
            FIELDCAPTION("Service Type") + ' - ' + FIELDCAPTION("Cost Component");
          250: LevelTxt :=
            FIELDCAPTION("Cost Code") + ' - ' + FIELDCAPTION("Cost Type");
          260: LevelTxt :=
            FIELDCAPTION("Cost Object") + ' - ' + FIELDCAPTION("Wage Component") + ' - ' +
            FIELDCAPTION(Department);
          270: LevelTxt :=
            FIELDCAPTION("Cost Object") + ' - ' + FIELDCAPTION("Wage Component");
          280: LevelTxt :=
            FIELDCAPTION("Cost Object") + ' - ' + FIELDCAPTION(Department);
          290: LevelTxt :=
            FIELDCAPTION("Cost Object");
          300: LevelTxt :=
            FIELDCAPTION("Cost Type") + ' - ' + FIELDCAPTION("Wage Component") + ' - ' +
            FIELDCAPTION(Department);
          310: LevelTxt :=
            FIELDCAPTION("Cost Type") + ' - ' + FIELDCAPTION("Wage Component");
          320: LevelTxt :=
            FIELDCAPTION("Cost Type") + ' - ' + FIELDCAPTION(Department);
          330: LevelTxt :=
            FIELDCAPTION("Cost Type");
          340: LevelTxt :=
            FIELDCAPTION("Trade Association") + ' - ' + FIELDCAPTION(Department);
          350: LevelTxt :=
            FIELDCAPTION("Trade Association");
          360: LevelTxt :=
            FIELDCAPTION("Cost Component") + ' - ' + FIELDCAPTION(Department);
          370: LevelTxt :=
            FIELDCAPTION("Cost Component");
          //For surcharges in supplying company at hour mutations
          380: LevelTxt :=
            FIELDCAPTION("Cost Type") + ' - ' + FIELDCAPTION("Wage Component") + ' - ' +
            FIELDCAPTION(Department);
          390: LevelTxt :=
            FIELDCAPTION("Cost Type") + ' - ' + FIELDCAPTION("Wage Component");
          400: LevelTxt :=
            FIELDCAPTION("Cost Type") + ' - ' + FIELDCAPTION(Department);
          410: LevelTxt :=
            FIELDCAPTION("Cost Type");
      //Call 31147 sn
          420: LevelTxt :=
            FIELDCAPTION("Trade Association") + ' - ' + FIELDCAPTION("Wage Component");
      //Call 31147 and also added 10 to the next levels. 420-->430, 430-->440,,,450-->460
          430: LevelTxt :=
            FIELDCAPTION("Trade Association") + ' - ' + FIELDCAPTION(Department);
          440: LevelTxt :=
            FIELDCAPTION("Trade Association");
          450: LevelTxt :=
            FIELDCAPTION("Cost Component") + ' - ' + FIELDCAPTION(Department);
          460: LevelTxt :=
            FIELDCAPTION("Cost Component");
        END;

      IF GLOBALLANGUAGE = 1043 THEN
        LevelTxt := COPYSTR(LevelTxt,1,1) + LOWERCASE(COPYSTR(LevelTxt,2));
    END;

    PROCEDURE EditSurcharges@1100485005();
    VAR
      lSurchargeOverheadRec@1100485000 : Record 11020208;
    BEGIN
      lSurchargeOverheadRec.FILTERGROUP(2);
      lSurchargeOverheadRec.SETRANGE(Level, Level);
      lSurchargeOverheadRec.FILTERGROUP(0);
      lSurchargeOverheadRec.Level := Level;
      PAGE.RUNMODAL(0, lSurchargeOverheadRec);
    END;

    PROCEDURE CheckSurchargeInReadOrder@1100485004(lLevel@1100485000 : Integer);
    BEGIN
      WITH SurchargeReadOrderLine DO BEGIN
        RESET;
        SETFILTER("Read Order", '1..');
        SETRANGE(Level, lLevel);
        IF ISEMPTY THEN BEGIN
          Level := lLevel;
          MESSAGE(Text002, FIELDCAPTION(Level), ShowSurchargeLevel());
        END;
      END;
    END;

    BEGIN
    END.
  }
}

