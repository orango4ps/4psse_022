OBJECT Report 6086312 Batch Post Expenses
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW17.00.00.3.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Batch-Erstellung Buchungsvorschlag;
               ENU=Batch Post Expenses;
               NLD=Batchboeken uitgaven];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   EMSetup.GET;
                 END;

    OnPreReport=BEGIN
                  IF ReplacePostingDate AND (PostingDatePolicy = PostingDatePolicy::"Specific Date") AND (PostingDateReq = 0D) THEN
                    ERROR(Text000);

                  IF Group THEN BEGIN
                    IF NOT ReplacePostingDate THEN
                      ERROR(ReplacePostingDateTxt);

                    IF NOT (EMSetup."Enable Settlement" AND EMSetup."Post Bank Trans. on Import") THEN
                      ERROR(GroupingNotAllowed);
                  END;
                END;

    OnPostReport=BEGIN
                   ExpensePost.ForcePIApprovalAll;
                   IF Group THEN
                     ExpensePost.PostSettlement;

                   Window.CLOSE;

                   IF CounterOK <> 0 THEN
                     MESSAGE(Text004,CounterOK,Counter);
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table6086320;
               DataItemTableView=SORTING(Posted,Continia User ID,Status);
               OnPreDataItem=BEGIN
                               SETRANGE(Posted,FALSE);
                               SETRANGE(Status,Status::Released);

                               CounterTotal := COUNT;

                               Window.OPEN(Text001 + Text002 + Text003);

                               IF Group THEN
                                 Expense.SETCURRENTKEY("Continia User ID",Status,Posted);
                             END;

               OnAfterGetRecord=VAR
                                  Expense2@1000 : Record 6086320;
                                BEGIN
                                  Counter := Counter + 1;
                                  IF Expense.AllocationExists THEN BEGIN
                                    CALCFIELDS("Allocated Amount (LCY)");
                                    IF "Allocated Amount (LCY)" <> "Amount (LCY)" THEN
                                      CurrReport.SKIP;
                                  END;

                                  CODEUNIT.RUN(CODEUNIT::"Expense-Validate",Expense);
                                  IF Expense.HasErrorComment(FALSE,FALSE) THEN
                                    CurrReport.SKIP;

                                  Window.UPDATE(1,ROUND(Counter / CounterTotal * 10000,1));

                                  COMMIT;

                                  ExpensePost.SetPostingDate(ReplacePostingDate,PostingDatePolicy,PostingDateReq);
                                  Expense2 := Expense;
                                  IF ExpenseCheck.RUN(Expense2) THEN BEGIN
                                    TempExpenseToPost.COPY(Expense2);
                                    TempExpenseToPost.INSERT;

                                    IF MARKEDONLY THEN
                                      MARK(FALSE);
                                  END;
                                END;

               ReqFilterFields=Continia User ID,Document Date,Entry No. }

    { 2   ;0   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               CounterTotal := TempExpenseToPost.COUNT;
                               SETRANGE(Number,1,CounterTotal);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    TempExpenseToPost.FINDFIRST
                                  ELSE
                                    TempExpenseToPost.NEXT;

                                  Expense.GET(TempExpenseToPost."Entry No.");
                                  Window.UPDATE(2,ROUND(Number / CounterTotal * 10000,1));

                                  ExpensePost.SetPostingDate(ReplacePostingDate,PostingDatePolicy,PostingDateReq);
                                  ExpensePost.SetGroup(Group);
                                  ExpensePost.RunWithoutCheck(Expense);

                                  CounterOK := CounterOK + 1;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=[DEU=Batch-Erstellung Buchungsvorschlag;
                 ENU=Batch Post Expenses;
                 NLD=Batchboeken uitgaven];
      OnOpenPage=BEGIN
                   PostingDateEditable := PostingDatePolicy = PostingDatePolicy::"Specific Date";
                   PostingDatePolicyEditable :=  ReplacePostingDate;
                 END;

    }
    CONTROLS
    {
      { 5   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 4   ;1   ;Group     ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1160040000;2;Field  ;
                  Name=Group by Settlement;
                  CaptionML=[DEU=Einschlie·lich Abgelehnte mit Erstattung;
                             ENU=Group by Settlement;
                             NLD=Groepeer in afrekening];
                  SourceExpr=Group;
                  OnValidate=BEGIN

                               IF Group THEN
                                 ReplacePostingDate := TRUE
                               ELSE
                                 ReplacePostingDate := FALSE;
                             END;
                              }

      { 1   ;2   ;Field     ;
                  Name=Replace Posting Date;
                  CaptionML=[DEU=Einschlie·lich Abgelehnte mit Erstattung;
                             ENU=Replace Posting Date;
                             NLD=Vervang boekingsdatum;
                             SVE=ErsÑtt bokfîringsdatum];
                  SourceExpr=ReplacePostingDate;
                  OnValidate=BEGIN
                               PostingDatePolicyEditable :=  ReplacePostingDate;
                               CLEAR(PostingDatePolicy);
                               CLEAR(PostingDateReq);
                             END;
                              }

      { 1160040001;2;Field  ;
                  Name=Posting Date Policy;
                  CaptionML=[DEU=Buchungsdatumpolitik;
                             ENU=Posting Date Policy;
                             NLD=Boekingsdatumbeleid];
                  OptionCaptionML=[DEU=Erste Ausgabe/Kilometerleistungsdatum,Letzte Ausgabe/Kilometerleistungsdatum,Spezifisches Datum;
                                   ENU=First Expense/Mileage Date,Last Expense/Mileage Date,Specific Date;
                                   NLD=Eerste uitgave/kilometragedatum,Laatste uitgave/kilometragedatum,Specifieke datum];
                  SourceExpr=PostingDatePolicy;
                  Editable=PostingDatePolicyEditable;
                  OnValidate=BEGIN
                               IF PostingDatePolicy <> PostingDatePolicy::"Specific Date" THEN
                                 CLEAR(PostingDateReq);

                               PostingDateEditable := PostingDatePolicy = PostingDatePolicy::"Specific Date";
                             END;
                              }

      { 2   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[DEU=Buchungsdatum;
                             ENU=Posting Date;
                             NLD=Boekingsdatum;
                             NOR=Bokfõringsdato;
                             SVE=Bokfîringsdatum];
                  SourceExpr=PostingDateReq;
                  Editable=PostingDateEditable }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExpensePost@1010 : Codeunit 6086330;
      ExpenseCheck@1001 : Codeunit 6086333;
      EMSetup@1002 : Record 6086300;
      SettlementPost@1016 : Codeunit 6086338;
      TempExpenseToPost@1000 : TEMPORARY Record 6086320;
      Window@1009 : Dialog;
      Counter@1008 : Integer;
      CounterOK@1007 : Integer;
      CounterTotal@1006 : Integer;
      PostingDateReq@1005 : Date;
      ReplacePostingDate@1004 : Boolean;
      ReplaceDocumentDate@1003 : Boolean;
      Text000@1015 : TextConst 'DEU=Bitte das Buchungsdatum eingeben.;ENU=Please enter the posting date.;NLD=Geef de boekingsdatum in a.u.b.;NOR=Angi bokfõringsdatoen.;SVE=Skriv in bokfîringsdatum.';
      Text001@1014 : TextConst 'DEU=AusgabenbuchungsvorschlÑge werden erstellt...;ENU=Posting Expenses...;NLD=Uitgaven boeken...';
      Text002@1013 : TextConst 'DEU=\PrÅfung der Zeilen @1@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=\Checking lines @1@@@@@@@@@@@@@@@@@@@@@@@@@@;NLD=\Regels controleren @1@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text003@1012 : TextConst 'DEU=\Buchung der Zeilen @2@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=\Posting lines  @2@@@@@@@@@@@@@@@@@@@@@@@@@@;NLD=\Boeken regels      @2@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text004@1011 : TextConst 'DEU=Buchungsvorschlag fÅr %1 Ausgaben von insgesamt %2 wurde erstellt.;ENU=%1 expenses out of a total of %2 have been posted.;NLD=%1 van in totaal %2 uitgaven zijn geboekt.';
      Group@1017 : Boolean;
      PostingDatePolicy@1160040011 : 'First Expense/Mileage Date,Last Expense/Mileage Date,Specific Date';
      ReplacePostingDateTxt@1019 : TextConst 'DEU=Das Buchungsdatum muss beim Gruppieren ersetzt werden.;ENU=The posting date needs to be replaced when grouping.;NLD=De boekingsdatum moet worden vervangen bij het groeperen.';
      GroupingNotAllowed@1020 : TextConst 'DEU=Gruppierung ist nur relevant beim Gebrauch von Ausgleichen.;ENU=Settlements have not been enabled in the Expense Management Setup.;NLD=Groepering is alleen relevant bij het gebruik van afrekeningen.';
      PostingDateEditable@1021 : Boolean INDATASET;
      PostingDatePolicyEditable@6086300 : Boolean INDATASET;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

