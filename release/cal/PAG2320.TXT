OBJECT Page 2320 BC O365 Payment Terms Card
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payment Terms;
               NOR=Betalingsbetingelser;
               SVE=Betalningsvillkor];
    LinksAllowed=No;
    PageType=Card;
    OnOpenPage=BEGIN
                 Days := CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY;
                 PaymentTermsCode := PaymentTerms.Code;
                 IF PaymentTermsCode = '' THEN
                   CurrPage.CAPTION := NewPaymentTermTxt;
               END;

    OnQueryClosePage=VAR
                       O365SalesInitialSetup@1002 : Record 2110;
                       LocalPaymentTerms@1003 : Record 3;
                       PaymentTermTranslation@1004 : Record 462;
                       DateFormula@1000 : DateFormula;
                     BEGIN
                       IF CloseAction = ACTION::LookupCancel THEN
                         EXIT;

                       IF PaymentTermsCode = '' THEN
                         ERROR(MustSpecifyCodeErr);

                       // Handle the code
                       IF NOT PaymentTerms.GET(PaymentTerms.Code) THEN BEGIN
                         IF LocalPaymentTerms.GET(PaymentTermsCode) THEN
                           ERROR(PaymentTermsAlreadyExistErr);
                         PaymentTerms.Code := PaymentTermsCode;
                         PaymentTerms.Description := PaymentTermsCode;
                         PaymentTerms.INSERT(TRUE);
                       END ELSE
                         IF PaymentTerms.Code <> PaymentTermsCode THEN BEGIN
                           IF LocalPaymentTerms.GET(PaymentTermsCode) THEN
                             ERROR(PaymentTermsAlreadyExistErr);
                           PaymentTermTranslation.SETRANGE("Payment Term",PaymentTerms.Code);
                           PaymentTermTranslation.DELETEALL;
                           PaymentTerms.RENAME(PaymentTermsCode);
                           PaymentTerms.Description := PaymentTermsCode;
                           IF O365SalesInitialSetup.GET AND (O365SalesInitialSetup."Default Payment Terms Code" = PaymentTermsCode) THEN
                             O365SalesInitialSetup.UpdateDefaultPaymentTerms(PaymentTermsCode);
                         END;

                       // Handle the date
                       EVALUATE(DateFormula,STRSUBSTNO(DayDueDateCalculationTxt,Days));
                       PaymentTerms.VALIDATE("Due Date Calculation",DateFormula);
                       PaymentTerms.MODIFY(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 4   ;1   ;Group     ;
                GroupType=Group;
                InstructionalTextML=[ENU=Specify when payment is due for invoices that use this payment term.;
                                     NOR=Angi n†r betalingen forfaller for fakturaer som bruker denne betalingsbetingelsen.;
                                     SVE=Ange n„r betalningen f”rfaller f”r fakturor med det h„r betalningsvillkoret.] }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Short name;
                           NOR=Kort navn;
                           SVE=Kortnamn];
                ToolTipML=[ENU=Specifies the short name of the payment term.;
                           NOR=Angir det korte navnet p† betalingsbetingelsen.;
                           SVE=Anger kortnamnet p† betalningsvillkoret.];
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=PaymentTermsCode }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Days;
                           NOR=Dager;
                           SVE=Dagar];
                ToolTipML=[ENU=Specifies the number of days until payments are due when this payment term is used.;
                           NOR=Angir antall dager f›r betalinger forfaller n†r denne betalingsbetingelsen brukes.;
                           SVE=Anger antalet dagar innan betalningar f”rfaller n„r det h„r betalningsvillkoret anv„nds.];
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Days;
                OnValidate=BEGIN
                             IF Days < 0 THEN
                               ERROR(DaysMustBePositiveErr);
                           END;
                            }

  }
  CODE
  {
    VAR
      PaymentTerms@1001 : Record 3;
      Days@1000 : Integer;
      DayDueDateCalculationTxt@1002 : TextConst '@@@={Locked};ENU=<%1D>;NOR=<%1D>;SVE=<%1D>';
      PaymentTermsCode@1003 : Code[10];
      PaymentTermsAlreadyExistErr@1005 : TextConst 'ENU=You already have payment terms with this name. Please use a different name.;NOR=Du har allerede betalingsbetingelser med dette navnet. Bruk et annet navn.;SVE=Du har redan betalningsvillkor med det h„r namnet. Anv„nd ett annat namn.';
      DaysMustBePositiveErr@1006 : TextConst 'ENU=Please specify 0 or more days. If you want to be paid immediately, then set the number of days to 0.;NOR=Angi 0 eller flere dager. Hvis du vil betales umiddelbart, setter du antall dager til 0.;SVE=Ange 0 eller fler dagar. Om du vill f† betalt omedelbart anger du antalet dagar till 0.';
      MustSpecifyCodeErr@1007 : TextConst 'ENU=You must specify a short name for these payment terms.;NOR=Du m† angi et kort navn for disse betalingsbetingelsene.;SVE=Du m†ste ange ett kortnamn f”r de h„r betalningsvillkoren.';
      NewPaymentTermTxt@1009 : TextConst 'ENU=New payment term;NOR=Ny betalingsbetingelse;SVE=Nytt betalningsvillkor';

    [External]
    PROCEDURE SetPaymentTerms@1(NewPaymentTerms@1000 : Record 3);
    BEGIN
      PaymentTerms := NewPaymentTerms;
    END;

    BEGIN
    END.
  }
}

