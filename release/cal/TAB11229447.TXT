OBJECT Table 11229447 Budget by Proj. Element Phase
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Budget by Proj. Element Phase;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Project No.;
                                                              SVE=Projektnr] }
    { 20  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Element;
                                                              SVE=Element] }
    { 21  ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=[ENU=Element Description;
                                                              SVE=Elementbeskrivning];
                                                   Editable=No }
    { 22  ;   ;Element Phase Code  ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element"."Phase Code" WHERE (Project No.=FIELD(Project No.),
                                                                                                            Element=FIELD(Element)));
                                                   CaptionML=ENU=Element Phase Code;
                                                   Editable=No }
    { 23  ;   ;Element Phase Description;Text30   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element Phase".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                 Code=FIELD(Element Phase Code)));
                                                   CaptionML=ENU=Element Phase Description;
                                                   Editable=No }
    { 30  ;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              SVE=Niv†];
                                                   Editable=No }
    { 40  ;   ;Original Phase 1    ;Decimal       ;CaptionML=ENU=Original Phase 1;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(1,1) }
    { 50  ;   ;Adjustments Phase 1 ;Decimal       ;CaptionML=ENU=Adjustments Phase 1;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(1,2) }
    { 60  ;   ;Extension Phase 1   ;Decimal       ;CaptionML=ENU=Extension Phase 1;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(1,3) }
    { 70  ;   ;Total Phase 1       ;Decimal       ;CaptionML=ENU=Total Phase 1;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(1,4) }
    { 71  ;   ;Total (Excl. Ext.) Phase 1;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 1;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(1,5) }
    { 80  ;   ;Original Phase 2    ;Decimal       ;CaptionML=ENU=Original Phase 2;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(2,1) }
    { 90  ;   ;Adjustments Phase 2 ;Decimal       ;CaptionML=ENU=Adjustments Phase 2;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(2,2) }
    { 100 ;   ;Extension Phase 2   ;Decimal       ;CaptionML=ENU=Extension Phase 2;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(2,3) }
    { 110 ;   ;Total Phase 2       ;Decimal       ;CaptionML=ENU=Total Phase 2;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(2,4) }
    { 111 ;   ;Total (Excl. Ext.) Phase 2;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 2;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(2,5) }
    { 120 ;   ;Original Phase 3    ;Decimal       ;CaptionML=ENU=Original Phase 3;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(3,1) }
    { 130 ;   ;Adjustments Phase 3 ;Decimal       ;CaptionML=ENU=Adjustments Phase 3;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(3,2) }
    { 140 ;   ;Extension Phase 3   ;Decimal       ;CaptionML=ENU=Extension Phase 3;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(3,3) }
    { 150 ;   ;Total Phase 3       ;Decimal       ;CaptionML=ENU=Total Phase 3;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(3,4) }
    { 151 ;   ;Total (Excl. Ext.) Phase 3;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 3;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(3,5) }
    { 160 ;   ;Original Phase 4    ;Decimal       ;CaptionML=ENU=Original Phase 4;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(4,1) }
    { 170 ;   ;Adjustments Phase 4 ;Decimal       ;CaptionML=ENU=Adjustments Phase 4;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(4,2) }
    { 180 ;   ;Extension Phase 4   ;Decimal       ;CaptionML=ENU=Extension Phase 4;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(4,3) }
    { 190 ;   ;Total Phase 4       ;Decimal       ;CaptionML=ENU=Total Phase 4;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(4,4) }
    { 191 ;   ;Total (Excl. Ext.) Phase 4;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 4;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(4,5) }
    { 200 ;   ;Original Phase 5    ;Decimal       ;CaptionML=ENU=Original Phase 5;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(5,1) }
    { 210 ;   ;Adjustments Phase 5 ;Decimal       ;CaptionML=ENU=Adjustments Phase 5;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(5,2) }
    { 220 ;   ;Extension Phase 5   ;Decimal       ;CaptionML=ENU=Extension Phase 5;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(5,3) }
    { 230 ;   ;Total Phase 5       ;Decimal       ;CaptionML=ENU=Total Phase 5;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(5,4) }
    { 231 ;   ;Total (Excl. Ext.) Phase 5;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 5;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(5,5) }
    { 240 ;   ;Original Phase 6    ;Decimal       ;CaptionML=ENU=Original Phase 6;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(6,1) }
    { 250 ;   ;Adjustments Phase 6 ;Decimal       ;CaptionML=ENU=Adjustments Phase 6;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(6,2) }
    { 260 ;   ;Extension Phase 6   ;Decimal       ;CaptionML=ENU=Extension Phase 6;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(6,3) }
    { 270 ;   ;Total Phase 6       ;Decimal       ;CaptionML=ENU=Total Phase 6;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(6,4) }
    { 271 ;   ;Total (Excl. Ext.) Phase 6;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 6;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(6,5) }
    { 280 ;   ;Original Phase 7    ;Decimal       ;CaptionML=ENU=Original Phase 7;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(7,1) }
    { 290 ;   ;Adjustments Phase 7 ;Decimal       ;CaptionML=ENU=Adjustments Phase 7;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(7,2) }
    { 300 ;   ;Extension Phase 7   ;Decimal       ;CaptionML=ENU=Extension Phase 7;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(7,3) }
    { 310 ;   ;Total Phase 7       ;Decimal       ;CaptionML=ENU=Total Phase 7;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(7,4) }
    { 311 ;   ;Total (Excl. Ext.) Phase 7;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 7;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(7,5) }
    { 320 ;   ;Original Phase 8    ;Decimal       ;CaptionML=ENU=Original Phase 8;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(8,1) }
    { 330 ;   ;Adjustments Phase 8 ;Decimal       ;CaptionML=ENU=Adjustments Phase 8;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(8,2) }
    { 340 ;   ;Extension Phase 8   ;Decimal       ;CaptionML=ENU=Extension Phase 8;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(8,3) }
    { 350 ;   ;Total Phase 8       ;Decimal       ;CaptionML=ENU=Total Phase 8;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(8,4) }
    { 351 ;   ;Total (Excl. Ext.) Phase 8;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 8;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(8,5) }
    { 360 ;   ;Original Phase 9    ;Decimal       ;CaptionML=ENU=Original Phase 9;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(9,1) }
    { 370 ;   ;Adjustments Phase 9 ;Decimal       ;CaptionML=ENU=Adjustments Phase 9;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(9,2) }
    { 380 ;   ;Extension Phase 9   ;Decimal       ;CaptionML=ENU=Extension Phase 9;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(9,3) }
    { 390 ;   ;Total Phase 9       ;Decimal       ;CaptionML=ENU=Total Phase 9;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(9,4) }
    { 391 ;   ;Total (Excl. Ext.) Phase 9;Decimal ;CaptionML=ENU=Total (Excl. Ext.) Phase 9;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(9,5) }
    { 400 ;   ;Original Phase 10   ;Decimal       ;CaptionML=ENU=Original Phase 10;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(10,1) }
    { 410 ;   ;Adjustments Phase 10;Decimal       ;CaptionML=ENU=Adjustments Phase 10;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(10,2) }
    { 420 ;   ;Extension Phase 10  ;Decimal       ;CaptionML=ENU=Extension Phase 10;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(10,3) }
    { 430 ;   ;Total Phase 10      ;Decimal       ;CaptionML=ENU=Total Phase 10;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(10,4) }
    { 431 ;   ;Total (Excl. Ext.) Phase 10;Decimal;CaptionML=ENU=Total (Excl. Ext.) Phase 10;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(10,5) }
    { 440 ;   ;Zero Line           ;Boolean       ;CaptionML=[ENU=Zero Line;
                                                              SVE=Nollrad] }
    { 450 ;   ;First Original Budget;Decimal      ;CaptionML=ENU=First Original Budget;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,6) }
    { 460 ;   ;First Extension     ;Decimal       ;CaptionML=ENU=First Extension;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,7) }
    { 470 ;   ;First Total         ;Decimal       ;CaptionML=ENU=First Total;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,8) }
    { 480 ;   ;Current Original Budget;Decimal    ;CaptionML=ENU=Current Original Budget;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,9) }
    { 490 ;   ;Current Adjustments ;Decimal       ;CaptionML=ENU=Current Adjustments;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,10) }
    { 500 ;   ;Current Extension   ;Decimal       ;CaptionML=ENU=Current Extension;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,11) }
    { 510 ;   ;Current Total       ;Decimal       ;CaptionML=ENU=Current Total;
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,12) }
    { 520 ;   ;Current Total (Excl. Ext.);Decimal ;CaptionML=ENU=Current Total (Excl. Ext.);
                                                   AutoFormatType=1;
                                                   CaptionClass=GetCaptionClass(0,13) }
  }
  KEYS
  {
    {    ;Project No.,Element                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528400 : TextConst 'ENU=Original;SVE=Ursprunglig';
      Text001@1100528401 : TextConst 'ENU=Adjustments;SVE=Justeringar';
      Text002@1100528402 : TextConst 'ENU=Extension;SVE=Extension';
      Text003@1100528403 : TextConst 'ENU=Total;SVE=Totalt';
      Text004@1100528404 : TextConst 'ENU=Phase;SVE=Fas';
      ProjectElementPhaseArray@1100528405 : ARRAY [10] OF Record 11229446;
      ProgressDialog@1100528409 : Dialog;
      TotalNoOfProjectElementPhases@1100528407 : Integer;
      ProjectElementPhaseArrayHasBeenFilled@1100528406 : Boolean;
      Text005@1100528408 : TextConst 'ENU=Progress:\Creating Lines: @1@@@@@\Calculating Lines: @2@@@@@\Updating lines: @3@@@@@';
      Text006@1100528410 : TextConst 'ENU=Total (Excl. Ext.)';
      Text007@1100528411 : TextConst 'ENU=Current Total - First Total';
      Text008@1100528412 : TextConst 'ENU=First Total - Current Total';

    PROCEDURE CalculateBudgetByProjElementPhase@1100528403();
    VAR
      ProjectElement@1100528400 : Record 11012010;
      BudgetByProjElementPhase@1100528401 : Record 11229447;
      TotalNoOfProjectElements@1100528403 : Integer;
      NoOfProjectElements@1100528402 : Integer;
    BEGIN
      FillProjectElementPhaseArray;

      BudgetByProjElementPhase.SETRANGE("Project No.", "Project No.");
      BudgetByProjElementPhase.DELETEALL;

      IF GUIALLOWED THEN
        ProgressDialog.OPEN(STRSUBSTNO(Text005, 0, 0, 0));

      ProjectElement.SETRANGE("Project No.", "Project No.");
      TotalNoOfProjectElements := ProjectElement.COUNT;
      IF ProjectElement.FINDSET THEN
        REPEAT
          NoOfProjectElements += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(1, ROUND(NoOfProjectElements / TotalNoOfProjectElements * 10000, 1));
          BudgetByProjElementPhase."Project No." := ProjectElement."Project No.";
          BudgetByProjElementPhase.Element := ProjectElement.Element;
          BudgetByProjElementPhase.Level := ProjectElement.Level;
          BudgetByProjElementPhase.INSERT;
        UNTIL ProjectElement.NEXT = 0;

      CalculateAmountsOfLines;

      UpdateLines;

      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;
    END;

    PROCEDURE GetCaptionClass@1100528400(PhaseNo@1100528400 : Integer;BudgetType@1100528401 : Integer) CaptionClassText : Text[80];
    VAR
      CurrentProjectElementPhase@1100528402 : Record 11229446;
    BEGIN
      IF NOT ProjectElementPhaseArrayHasBeenFilled THEN
        FillProjectElementPhaseArray;
      IF (PhaseNo > 0) AND (PhaseNo <= TotalNoOfProjectElementPhases) THEN
        CurrentProjectElementPhase := ProjectElementPhaseArray[PhaseNo];
      CaptionClassText := GetProjectElementPhaseLabel(CurrentProjectElementPhase.Code, BudgetType);
      IF CaptionClassText <> '' THEN
        EXIT;
      CASE BudgetType OF
        1:
          CaptionClassText := Text000;
        2:
          CaptionClassText := Text001;
        3:
          CaptionClassText := Text002;
        4:
          CaptionClassText := Text003;
        5:
          CaptionClassText := Text006;
        6:
          CaptionClassText := FIELDCAPTION("First Original Budget");
        7:
          CaptionClassText := FIELDCAPTION("First Extension");
        8:
          CaptionClassText := FIELDCAPTION("First Total");
        9:
          CaptionClassText := FIELDCAPTION("Current Original Budget");
        10:
          CaptionClassText := FIELDCAPTION("Current Adjustments");
        11:
          CaptionClassText := FIELDCAPTION("Current Extension");
        12:
          CaptionClassText := FIELDCAPTION("Current Total");
        13:
          CaptionClassText := FIELDCAPTION("Current Total (Excl. Ext.)");
        14:
          CaptionClassText := Text007;
        15:
          CaptionClassText := Text008;
      END;
      IF (BudgetType <= 5) AND (PhaseNo > 0) THEN
        IF CurrentProjectElementPhase.Code <> '' THEN BEGIN
          CaptionClassText := CurrentProjectElementPhase.Code + ' ' + CaptionClassText
        END ELSE BEGIN
          CaptionClassText := CaptionClassText + ' ' + Text004 + ' ' + FORMAT(PhaseNo);
          CaptionClassText := UPPERCASE(COPYSTR(CaptionClassText, 1, 1)) + COPYSTR(CaptionClassText, 2);
        END;
    END;

    LOCAL PROCEDURE GetProjectElementPhaseLabel@1100528416(PhaseCode@1100528401 : Code[10];BudgetType@1100528400 : Integer) : Text;
    VAR
      ProjectElementPhaseLabel@1100528402 : Record 11229463;
    BEGIN
      IF ProjectElementPhaseLabel.GET("Project No.", BudgetType, PhaseCode) THEN
        EXIT(ProjectElementPhaseLabel.Label);
    END;

    LOCAL PROCEDURE FillProjectElementPhaseArray@1100528408();
    VAR
      ProjectElementPhase@1100528400 : Record 11229446;
      PhaseNo@1100528401 : Integer;
    BEGIN
      CLEAR(ProjectElementPhaseArray);
      CLEAR(TotalNoOfProjectElementPhases);
      IF "Project No." <> '' THEN BEGIN
        ProjectElementPhase.SETCURRENTKEY("Sequence No.");
        ProjectElementPhase.SETRANGE("Project No.", "Project No.");
        IF ProjectElementPhase.FINDSET THEN
          REPEAT
            PhaseNo := PhaseNo + 1;
            IF PhaseNo <= 10 THEN
              ProjectElementPhaseArray[PhaseNo] := ProjectElementPhase;
          UNTIL ProjectElementPhase.NEXT = 0;
        TotalNoOfProjectElementPhases := PhaseNo;
      END;
      ProjectElementPhaseArrayHasBeenFilled := TRUE;
    END;

    LOCAL PROCEDURE CalculateAmountsOfLines@1100528401();
    VAR
      BudgetLine@1100528401 : Record 11012001;
      PhaseNo@1100528400 : Integer;
      TotalNoOfBudgetLines@1100528402 : Integer;
      NoOfBudgetLines@1100528403 : Integer;
    BEGIN
      FOR PhaseNo := 1 TO TotalNoOfProjectElementPhases DO BEGIN
        SetFilterOfProjectElementPhaseOnBudgetLines(PhaseNo, FALSE, TRUE, BudgetLine);
        TotalNoOfBudgetLines := BudgetLine.COUNT;
        NoOfBudgetLines := 0;
        IF BudgetLine.FINDSET THEN
          REPEAT
            NoOfBudgetLines += 1;
            IF GUIALLOWED THEN
              ProgressDialog.UPDATE(2, GetCalculationProgress(PhaseNo, NoOfBudgetLines, TotalNoOfBudgetLines));
            AddBudgetLineAmountToBudgetByProjElementPhaseLines(PhaseNo, BudgetLine);
          UNTIL BudgetLine.NEXT = 0;
        IF GUIALLOWED THEN
          ProgressDialog.UPDATE(2, GetCalculationProgress(PhaseNo, NoOfBudgetLines, TotalNoOfBudgetLines));
      END;
    END;

    LOCAL PROCEDURE GetCalculationProgress@1100528413(PhaseNo@1100528400 : Integer;NoOfBudgetLines@1100528401 : Integer;TotalNoOfBudgetLines@1100528402 : Integer) CalculationProgress : Integer;
    BEGIN
      IF (TotalNoOfProjectElementPhases <> 0) AND (TotalNoOfBudgetLines <> 0) THEN BEGIN
        CalculationProgress :=
          ROUND((PhaseNo - 1) / TotalNoOfProjectElementPhases * 10000, 1) +
          ROUND(NoOfBudgetLines / (TotalNoOfProjectElementPhases * TotalNoOfBudgetLines) * 10000, 1)
      END ELSE
        IF (TotalNoOfProjectElementPhases <> 0) AND (TotalNoOfBudgetLines = 0) THEN
          CalculationProgress :=
            ROUND(PhaseNo / TotalNoOfProjectElementPhases * 10000, 1);
    END;

    LOCAL PROCEDURE SetFilterOfProjectElementPhaseOnBudgetLines@1100528404(PhaseNo@1100528400 : Integer;ShowAllPhases@1100528404 : Boolean;ShowNegativeCorrectionLines@1100528403 : Boolean;VAR BudgetLine@1100528401 : Record 11012001);
    BEGIN
      BudgetLine.RESET;
      BudgetLine.SETRANGE("Project No.", "Project No.");
      BudgetLine.SETFILTER(
        "Extension Contract Status", '%1|%2|%3',
        BudgetLine."Extension Contract Status"::"Not Applicable",
        BudgetLine."Extension Contract Status"::Order,
        BudgetLine."Extension Contract Status"::"Invoicing Allowed");
      IF NOT ShowNegativeCorrectionLines THEN
        BudgetLine.SETFILTER(
          "Generated by Phase Change", '<>%1', BudgetLine."Generated by Phase Change"::Negative);

      IF NOT ShowAllPhases THEN
        IF PhaseNo <= TotalNoOfProjectElementPhases THEN
          BudgetLine.SETRANGE("Element Phase Code", ProjectElementPhaseArray[PhaseNo].Code);
    END;

    LOCAL PROCEDURE AddBudgetLineAmountToBudgetByProjElementPhaseLines@1100528409(PhaseNo@1100528400 : Integer;BudgetLine@1100528401 : Record 11012001);
    VAR
      BudgetByProjElementPhase@1100528402 : Record 11229447;
      ProjectElement@1100528403 : Record 11012010;
      UpdatedElement@1100528404 : Code[20];
    BEGIN
      BudgetByProjElementPhase.SETRANGE("Project No.", "Project No.");
      BudgetByProjElementPhase.SETRANGE(Level, 0);
      IF BudgetByProjElementPhase.FINDFIRST THEN BEGIN
        AddBudgetLineAmountToBudgetByProjElementPhaseLine(PhaseNo, BudgetLine, BudgetByProjElementPhase);
        UpdatedElement := BudgetByProjElementPhase.Element;
      END;
      BudgetByProjElementPhase.SETRANGE(Level);

      IF ProjectElement.GET("Project No.", BudgetLine.Element) THEN BEGIN
        IF (ProjectElement.Level >= 1) AND (BudgetLine.Chapter <> UpdatedElement) THEN
          IF BudgetByProjElementPhase.GET("Project No.", BudgetLine.Chapter) THEN BEGIN
            AddBudgetLineAmountToBudgetByProjElementPhaseLine(PhaseNo, BudgetLine, BudgetByProjElementPhase);
            UpdatedElement := BudgetLine.Chapter;
          END;
        IF (ProjectElement.Level >= 2) AND (BudgetLine.Paragraph <> UpdatedElement) THEN
          IF BudgetByProjElementPhase.GET("Project No.", BudgetLine.Paragraph) THEN BEGIN
            AddBudgetLineAmountToBudgetByProjElementPhaseLine(PhaseNo, BudgetLine, BudgetByProjElementPhase);
            UpdatedElement := BudgetLine.Paragraph;
          END;
        IF (ProjectElement.Level = 3) AND (BudgetLine.Element <> UpdatedElement) THEN
          IF BudgetByProjElementPhase.GET("Project No.", BudgetLine.Element) THEN
            AddBudgetLineAmountToBudgetByProjElementPhaseLine(PhaseNo, BudgetLine, BudgetByProjElementPhase);
      END;
    END;

    LOCAL PROCEDURE AddBudgetLineAmountToBudgetByProjElementPhaseLine@1100528410(PhaseNo@1100528400 : Integer;BudgetLine@1100528401 : Record 11012001;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    VAR
      BudgetType@1100528402 : Integer;
    BEGIN
      BudgetType := DetermineBudgetType(BudgetLine);
      IF NOT (BudgetLine."Generated by Phase Change" = BudgetLine."Generated by Phase Change"::Negative) THEN
        UpdatePhaseFieldsOfBudgetByProjElementPhaseLine(BudgetType, PhaseNo, BudgetLine, BudgetByProjElementPhase);
      UpdatePhaseIndependentFieldsOfBudgetByProjElementPhaseLine(BudgetType, BudgetLine, BudgetByProjElementPhase);
      BudgetByProjElementPhase.MODIFY;
    END;

    LOCAL PROCEDURE UpdatePhaseFieldsOfBudgetByProjElementPhaseLine@1100528448(BudgetType@1100528404 : Integer;PhaseNo@1100528400 : Integer;BudgetLine@1100528401 : Record 11012001;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    BEGIN
      CASE BudgetType OF
        1: // Original budget
          BEGIN
            AddBudgetLineAmountToOriginalPhase(PhaseNo, BudgetLine."Amount (LCY)", BudgetByProjElementPhase);
            AddBudgetLineAmountToTotalExclExtPhase(PhaseNo, BudgetLine."Amount (LCY)", BudgetByProjElementPhase);
          END;
        2: // Adjustments
          BEGIN
            AddBudgetLineAmountToAdjustmentsPhase(PhaseNo, BudgetLine."Amount (LCY)", BudgetByProjElementPhase);
            AddBudgetLineAmountToTotalExclExtPhase(PhaseNo, BudgetLine."Amount (LCY)", BudgetByProjElementPhase);
          END;
        3: // Extension contracts
          AddBudgetLineAmountToExtensionPhase(PhaseNo, BudgetLine."Amount (LCY)", BudgetByProjElementPhase);
      END;
      AddBudgetLineAmountToTotalPhase(PhaseNo, BudgetLine."Amount (LCY)", BudgetByProjElementPhase);
    END;

    LOCAL PROCEDURE UpdatePhaseIndependentFieldsOfBudgetByProjElementPhaseLine@1100528449(BudgetType@1100528400 : Integer;BudgetLine@1100528401 : Record 11012001;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    BEGIN
      BudgetType := DetermineBudgetType(BudgetLine);
      CASE BudgetType OF
        1: // Original budget
          BEGIN
            BudgetByProjElementPhase."Current Original Budget" += BudgetLine."Amount (LCY)";
            BudgetByProjElementPhase."Current Total (Excl. Ext.)" += BudgetLine."Amount (LCY)";
            IF BudgetLine.Adjustment = '' THEN BEGIN
              BudgetByProjElementPhase."First Original Budget" += BudgetLine."Amount (LCY)";
              BudgetByProjElementPhase."First Total" += BudgetLine."Amount (LCY)";
            END;
          END;
        2: // Adjustments
          BEGIN
            BudgetByProjElementPhase."Current Adjustments" += BudgetLine."Amount (LCY)";
            BudgetByProjElementPhase."Current Total (Excl. Ext.)" += BudgetLine."Amount (LCY)";
          END;
        3: // Extension contracts
          BEGIN
            BudgetByProjElementPhase."Current Extension" += BudgetLine."Amount (LCY)";
            IF (BudgetLine.Adjustment = '') THEN BEGIN
              BudgetByProjElementPhase."First Extension" += BudgetLine."Amount (LCY)";
              BudgetByProjElementPhase."First Total" += BudgetLine."Amount (LCY)";
            END;
          END;
      END;
      BudgetByProjElementPhase."Current Total" += BudgetLine."Amount (LCY)";
    END;

    LOCAL PROCEDURE DetermineBudgetType@1100528415(BudgetLine@1100528400 : Record 11012001) BudgetType : Integer;
    BEGIN
      IF (BudgetLine.Adjustment = '') OR BudgetLine."Adjustment by Phase Change" THEN BEGIN
        // Adjustments by Phase Change are no 'real' adjustments.
        IF BudgetLine."Extension Contract" = '' THEN
          BudgetType := 1 // Original
        ELSE
          BudgetType := 3; // Extension Contracts
      END ELSE
        BudgetType := 2; // Adjustments
    END;

    LOCAL PROCEDURE AddBudgetLineAmountToAdjustmentsPhase@1100528423(PhaseNo@1100528400 : Integer;Amount@1100528401 : Decimal;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    BEGIN
      CASE PhaseNo OF
        1:
          BudgetByProjElementPhase."Adjustments Phase 1" += Amount;
        2:
          BudgetByProjElementPhase."Adjustments Phase 2" += Amount;
        3:
          BudgetByProjElementPhase."Adjustments Phase 3" += Amount;
        4:
          BudgetByProjElementPhase."Adjustments Phase 4" += Amount;
        5:
          BudgetByProjElementPhase."Adjustments Phase 5" += Amount;
        6:
          BudgetByProjElementPhase."Adjustments Phase 6" += Amount;
        7:
          BudgetByProjElementPhase."Adjustments Phase 7" += Amount;
        8:
          BudgetByProjElementPhase."Adjustments Phase 8" += Amount;
        9:
          BudgetByProjElementPhase."Adjustments Phase 9" += Amount;
        10:
          BudgetByProjElementPhase."Adjustments Phase 10" += Amount;
      END;
    END;

    LOCAL PROCEDURE AddBudgetLineAmountToExtensionPhase@1100528402(PhaseNo@1100528400 : Integer;Amount@1100528401 : Decimal;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    BEGIN
      CASE PhaseNo OF
        1:
          BudgetByProjElementPhase."Extension Phase 1" += Amount;
        2:
          BudgetByProjElementPhase."Extension Phase 2" += Amount;
        3:
          BudgetByProjElementPhase."Extension Phase 3" += Amount;
        4:
          BudgetByProjElementPhase."Extension Phase 4" += Amount;
        5:
          BudgetByProjElementPhase."Extension Phase 5" += Amount;
        6:
          BudgetByProjElementPhase."Extension Phase 6" += Amount;
        7:
          BudgetByProjElementPhase."Extension Phase 7" += Amount;
        8:
          BudgetByProjElementPhase."Extension Phase 8" += Amount;
        9:
          BudgetByProjElementPhase."Extension Phase 9" += Amount;
        10:
          BudgetByProjElementPhase."Extension Phase 10" += Amount;
      END;
    END;

    LOCAL PROCEDURE AddBudgetLineAmountToOriginalPhase@1100528405(PhaseNo@1100528400 : Integer;Amount@1100528401 : Decimal;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    BEGIN
      CASE PhaseNo OF
        1:
          BudgetByProjElementPhase."Original Phase 1" += Amount;
        2:
          BudgetByProjElementPhase."Original Phase 2" += Amount;
        3:
          BudgetByProjElementPhase."Original Phase 3" += Amount;
        4:
          BudgetByProjElementPhase."Original Phase 4" += Amount;
        5:
          BudgetByProjElementPhase."Original Phase 5" += Amount;
        6:
          BudgetByProjElementPhase."Original Phase 6" += Amount;
        7:
          BudgetByProjElementPhase."Original Phase 7" += Amount;
        8:
          BudgetByProjElementPhase."Original Phase 8" += Amount;
        9:
          BudgetByProjElementPhase."Original Phase 9" += Amount;
        10:
          BudgetByProjElementPhase."Original Phase 10" += Amount;
      END;
    END;

    LOCAL PROCEDURE AddBudgetLineAmountToTotalPhase@1100528406(PhaseNo@1100528400 : Integer;Amount@1100528401 : Decimal;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    BEGIN
      CASE PhaseNo OF
        1:
          BudgetByProjElementPhase."Total Phase 1" += Amount;
        2:
          BudgetByProjElementPhase."Total Phase 2" += Amount;
        3:
          BudgetByProjElementPhase."Total Phase 3" += Amount;
        4:
          BudgetByProjElementPhase."Total Phase 4" += Amount;
        5:
          BudgetByProjElementPhase."Total Phase 5" += Amount;
        6:
          BudgetByProjElementPhase."Total Phase 6" += Amount;
        7:
          BudgetByProjElementPhase."Total Phase 7" += Amount;
        8:
          BudgetByProjElementPhase."Total Phase 8" += Amount;
        9:
          BudgetByProjElementPhase."Total Phase 9" += Amount;
        10:
          BudgetByProjElementPhase."Total Phase 10" += Amount;
      END;
    END;

    LOCAL PROCEDURE AddBudgetLineAmountToTotalExclExtPhase@1100528421(PhaseNo@1100528400 : Integer;Amount@1100528401 : Decimal;VAR BudgetByProjElementPhase@1100528403 : Record 11229447);
    BEGIN
      CASE PhaseNo OF
        1:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 1" += Amount;
        2:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 2" += Amount;
        3:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 3" += Amount;
        4:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 4" += Amount;
        5:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 5" += Amount;
        6:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 6" += Amount;
        7:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 7" += Amount;
        8:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 8" += Amount;
        9:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 9" += Amount;
        10:
          BudgetByProjElementPhase."Total (Excl. Ext.) Phase 10" += Amount;
      END;
    END;

    PROCEDURE DrillDownOnAmount@1100528407(PhaseNo@1100528401 : Integer;BudgetType@1100528400 : Integer);
    VAR
      BudgetLine@1100528402 : Record 11012001;
      ShowAllPhases@1100528404 : Boolean;
      ShowNegativeCorrectionLines@1100528403 : Boolean;
    BEGIN
      IF PhaseNo > TotalNoOfProjectElementPhases THEN
        EXIT;
      IF (BudgetType > 5) THEN BEGIN // Not phase specific
        ShowAllPhases := TRUE;
        ShowNegativeCorrectionLines := TRUE
      END;
      SetFilterOfProjectElementPhaseOnBudgetLines(
        PhaseNo, ShowAllPhases, ShowNegativeCorrectionLines, BudgetLine);
      CASE Level OF
        1:
          BudgetLine.SETRANGE(Chapter, Element);
        2:
          BudgetLine.SETRANGE(Paragraph, Element);
        3:
          BudgetLine.SETRANGE(Element, Element);
      END;
      CASE BudgetType OF
        1:  // Original of phase
          AddOriginalBudgetFilterToBudgetLines(BudgetLine);
        2:  // Adjustments of phase
          AddAdjustmentFilterToBudgetLines(BudgetLine);
        3:  // Extension contracts of phase
          AddExtensionFilterToBudgetLines(BudgetLine);
        4:  // Total of phase
          ; // No extra filter needed
        5:  // Total (excl. ext.) of phase
          AddTotalExcludingExtensionFilterToBudgetLines(BudgetLine);
        6:  // First original budget
          AddFirstOriginalBudgetFilterToBudgetLines(BudgetLine);
        7:  // First extension
          AddFirstExtensionFilterToBudgetLines(BudgetLine);
        8:  // First total
          AddFirstTotalFilterToBudgetLines(BudgetLine);
        9:  // Current original budget
          AddOriginalBudgetFilterToBudgetLines(BudgetLine);
        10: // Current adjustments
          AddAdjustmentFilterToBudgetLines(BudgetLine);
        11: // Current extension
          AddExtensionFilterToBudgetLines(BudgetLine);
        12: // Current total
          ; // No extra filter needed
        13: // Current total (excl. ext.)
          AddTotalExcludingExtensionFilterToBudgetLines(BudgetLine);
      END;
      PAGE.RUN(PAGE::"Budget List", BudgetLine);
    END;

    LOCAL PROCEDURE AddOriginalBudgetFilterToBudgetLines@1100528424(VAR BudgetLine@1100528401 : Record 11012001);
    VAR
      MarkedBudgetLine@1100528400 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Extension Contract", '');
      MarkNonAdjustmentBudgetLines(BudgetLine, MarkedBudgetLine);
      MarkedBudgetLine.MARKEDONLY(TRUE);
      BudgetLine.COPY(MarkedBudgetLine);
    END;

    LOCAL PROCEDURE AddAdjustmentFilterToBudgetLines@1100528425(VAR BudgetLine@1100528401 : Record 11012001);
    VAR
      MarkedBudgetLine@1100528400 : Record 11012001;
    BEGIN
      BudgetLine.SETFILTER(Adjustment, '<>%1', '');
      // Adjustments by Phase Change are no 'real' adjustments.
      BudgetLine.SETRANGE("Adjustment by Phase Change", FALSE);
      MarkBudgetLines(BudgetLine, MarkedBudgetLine);
      MarkedBudgetLine.MARKEDONLY(TRUE);
      BudgetLine.COPY(MarkedBudgetLine);
    END;

    LOCAL PROCEDURE AddExtensionFilterToBudgetLines@1100528426(VAR BudgetLine@1100528401 : Record 11012001);
    VAR
      MarkedBudgetLine@1100528400 : Record 11012001;
    BEGIN
      BudgetLine.SETFILTER("Extension Contract", '<>%1', '');
      MarkNonAdjustmentBudgetLines(BudgetLine, MarkedBudgetLine);
      MarkedBudgetLine.MARKEDONLY(TRUE);
      BudgetLine.COPY(MarkedBudgetLine);
    END;

    LOCAL PROCEDURE AddTotalExcludingExtensionFilterToBudgetLines@1100528427(VAR BudgetLine@1100528401 : Record 11012001);
    VAR
      MarkedBudgetLine@1100528400 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Extension Contract", '');
      MarkBudgetLines(BudgetLine, MarkedBudgetLine);
      BudgetLine.SETFILTER("Extension Contract", '<>%1', '');
      BudgetLine.SETFILTER(Adjustment, '<>%1', '');
      BudgetLine.SETRANGE("Adjustment by Phase Change", FALSE);
      MarkBudgetLines(BudgetLine, MarkedBudgetLine);
      MarkedBudgetLine.MARKEDONLY(TRUE);
      BudgetLine.COPY(MarkedBudgetLine);
    END;

    LOCAL PROCEDURE AddFirstOriginalBudgetFilterToBudgetLines@1100528428(VAR BudgetLine@1100528401 : Record 11012001);
    BEGIN
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETRANGE("Extension Contract", '');
    END;

    LOCAL PROCEDURE AddFirstExtensionFilterToBudgetLines@1100528440(VAR BudgetLine@1100528401 : Record 11012001);
    BEGIN
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETFILTER("Extension Contract", '<>%1', '');
    END;

    LOCAL PROCEDURE AddFirstTotalFilterToBudgetLines@1100528441(VAR BudgetLine@1100528401 : Record 11012001);
    BEGIN
      BudgetLine.SETRANGE(Adjustment, '');
    END;

    LOCAL PROCEDURE MarkNonAdjustmentBudgetLines@1100528419(VAR BudgetLine@1100528401 : Record 11012001;VAR MarkedBudgetLine@1100528400 : Record 11012001);
    BEGIN
      BudgetLine.SETRANGE(Adjustment, '');
      MarkBudgetLines(BudgetLine, MarkedBudgetLine);
      BudgetLine.SETRANGE(Adjustment);
      // Adjustments by Phase Change are no 'real' adjustments.
      BudgetLine.SETRANGE("Adjustment by Phase Change", TRUE);
      MarkBudgetLines(BudgetLine, MarkedBudgetLine);
    END;

    LOCAL PROCEDURE MarkBudgetLines@1100528417(VAR BudgetLine@1100528400 : Record 11012001;VAR MarkedBudgetLine@1100528401 : Record 11012001);
    BEGIN
      IF BudgetLine.FINDSET THEN
        REPEAT
          IF MarkedBudgetLine.GET(
            BudgetLine."Project No.", BudgetLine.Adjustment, BudgetLine."Extension Contract",
            BudgetLine.Option, BudgetLine."Line No.")
          THEN
            MarkedBudgetLine.MARK(TRUE);
        UNTIL BudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateLines@1100528411();
    VAR
      BudgetByProjElementPhase@1100528400 : Record 11229447;
      TotalNoOfBudgetByProjElementPhaseLines@1100528401 : Integer;
      NoOfBudgetByProjElementPhaseLines@1100528402 : Integer;
    BEGIN
      BudgetByProjElementPhase.SETRANGE("Project No.", "Project No.");
      TotalNoOfBudgetByProjElementPhaseLines := BudgetByProjElementPhase.COUNT;
      IF BudgetByProjElementPhase.FINDSET(TRUE) THEN
        REPEAT
          NoOfBudgetByProjElementPhaseLines += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(
              3, ROUND(NoOfBudgetByProjElementPhaseLines / TotalNoOfBudgetByProjElementPhaseLines * 10000, 1));
          BudgetByProjElementPhase."Zero Line" := BudgetByProjElementPhase.DetermineZeroLine;
          BudgetByProjElementPhase.MODIFY;
        UNTIL BudgetByProjElementPhase.NEXT = 0;
    END;

    PROCEDURE DetermineZeroLine@1100528414() : Boolean;
    BEGIN
      IF ("Original Phase 1" = 0) AND ("Adjustments Phase 1" = 0) AND ("Extension Phase 1" = 0) AND ("Total Phase 1" = 0) AND
         ("Original Phase 2" = 0) AND ("Adjustments Phase 2" = 0) AND ("Extension Phase 2" = 0) AND ("Total Phase 2" = 0) AND
         ("Original Phase 3" = 0) AND ("Adjustments Phase 3" = 0) AND ("Extension Phase 3" = 0) AND ("Total Phase 3" = 0) AND
         ("Original Phase 4" = 0) AND ("Adjustments Phase 4" = 0) AND ("Extension Phase 4" = 0) AND ("Total Phase 4" = 0) AND
         ("Original Phase 5" = 0) AND ("Adjustments Phase 5" = 0) AND ("Extension Phase 5" = 0) AND ("Total Phase 5" = 0) AND
         ("Original Phase 6" = 0) AND ("Adjustments Phase 6" = 0) AND ("Extension Phase 6" = 0) AND ("Total Phase 6" = 0) AND
         ("Original Phase 7" = 0) AND ("Adjustments Phase 7" = 0) AND ("Extension Phase 7" = 0) AND ("Total Phase 7" = 0) AND
         ("Original Phase 8" = 0) AND ("Adjustments Phase 8" = 0) AND ("Extension Phase 8" = 0) AND ("Total Phase 8" = 0) AND
         ("Original Phase 9" = 0) AND ("Adjustments Phase 9" = 0) AND ("Extension Phase 9" = 0) AND ("Total Phase 9" = 0) AND
         ("Original Phase 10" = 0) AND ("Adjustments Phase 10" = 0) AND ("Extension Phase 10" = 0) AND ("Total Phase 10" = 0)
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetTotalNoOfProjectElementPhases@1100528412() : Integer;
    BEGIN
      IF NOT ProjectElementPhaseArrayHasBeenFilled THEN
        FillProjectElementPhaseArray;
      EXIT(TotalNoOfProjectElementPhases);
    END;

    BEGIN
    END.
  }
}

