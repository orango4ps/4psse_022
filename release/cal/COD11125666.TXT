OBJECT Codeunit 11125666 Imp. Construction Spec. (RAW)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FileMgt@1100528300 : Codeunit 419;
      LineNo@1100525000 : Integer;
      MaxFldLen@1100525001 : Integer;

    PROCEDURE ImportConstructionSpecRAW@1100525001(ConstrSpecNo@1100525000 : Code[20];FileName@1100525001 : Text[260]);
    VAR
      ConstrSpecUserDefRAW@1100525009 : Record 11125669;
      ConstrSpecBidFormRAW@1100525006 : Record 11125672;
      FileMgt@1100525500 : Codeunit 419;
      ConstrSpecFile@1100525002 : File;
      Line@1100525003 : Text[1024];
      ServerTempFileName@1100525501 : Text[1024];
    BEGIN
      InitConstrSpecTables(ConstrSpecNo, FileName);

      LineNo := 0;

      ConstrSpecFile.TEXTMODE := TRUE;
      ConstrSpecFile.WRITEMODE := FALSE;

      ServerTempFileName := FileMgt.UploadFileSilent(FileName);
      ConstrSpecFile.OPEN(ServerTempFileName,TEXTENCODING::Windows);

      WHILE ConstrSpecFile.POS < ConstrSpecFile.LEN DO BEGIN
        ConstrSpecFile.READ(Line);

        CASE TRUE OF
          StartsWith(Line, '001001'): ImportGeneralConstrSpecInfo(ConstrSpecNo, Line);
          StartsWith(Line, '001002'): ImportConstrSpecStatusInfo(ConstrSpecNo, Line);
          StartsWith(Line, '0020'): ImportPageHeaderLine(ConstrSpecNo, Line);
          StartsWith(Line, '05'): ImportUserDefinedLine(ConstrSpecNo, Line, ConstrSpecUserDefRAW.Type::Preface);
          StartsWith(Line, '10'): ImportTextLine(ConstrSpecNo, Line);
          StartsWith(Line, '11'): ImportTextLine(ConstrSpecNo, Line);
          StartsWith(Line, '21'): ImportTextLine(ConstrSpecNo, Line);
          StartsWith(Line, '20'): ImportBidFormLine(ConstrSpecNo, Line, ConstrSpecBidFormRAW.Type::"Bid Form Specification");
          StartsWith(Line, '22'): ImportTextLine(ConstrSpecNo, Line);
          StartsWith(Line, '23'): ImportElementLine(ConstrSpecNo, Line);
          StartsWith(Line, '30'): ImportConditionsLine(ConstrSpecNo, Line);
          StartsWith(Line, '32'): ImportUserDefinedLine(ConstrSpecNo, Line, ConstrSpecUserDefRAW.Type::Postface);
          StartsWith(Line, '38'): ImportUserDefinedLine(ConstrSpecNo, Line, ConstrSpecUserDefRAW.Type::"Bid Forms");
          StartsWith(Line, '40'): ImportBidFormLine(ConstrSpecNo, Line, ConstrSpecBidFormRAW.Type::"Bid Form");
        END;
      END;

      ConstrSpecFile.CLOSE;
      ERASE(ServerTempFileName);

      CompressBidFormLines(ConstrSpecNo, '''*5)''');
      CompressBidFormLines(ConstrSpecNo, '''*7)''');
      SetContractorNo(ConstrSpecNo);
      FixQuantityTypes(ConstrSpecNo);
    END;

    PROCEDURE InitConstrSpecTables@1100528302(ConstrSpecNo@1100528308 : Code[20];FileName@1100528307 : Text[260]);
    VAR
      ConstructionSpecRAW@1100528306 : Record 11125666;
      ConstrSpecPageHdrRAW@1100528305 : Record 11125667;
      ConstrSpecTextLineRAW@1100528304 : Record 11125668;
      ConstrSpecUserDefRAW@1100528303 : Record 11125669;
      ConstrSpecElemLineRAW@1100528302 : Record 11125670;
      ConstrSpecCondLineRAW@1100528301 : Record 11125671;
      ConstrSpecBidFormRAW@1100528300 : Record 11125672;
    BEGIN
      ConstrSpecPageHdrRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecPageHdrRAW.DELETEALL;

      ConstrSpecTextLineRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecTextLineRAW.DELETEALL;

      ConstrSpecUserDefRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecUserDefRAW.DELETEALL;

      ConstrSpecElemLineRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecElemLineRAW.DELETEALL;

      ConstrSpecCondLineRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecCondLineRAW.DELETEALL;

      ConstrSpecBidFormRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecBidFormRAW.DELETEALL;

      ConstructionSpecRAW.GET(ConstrSpecNo);
      ConstructionSpecRAW."Import File Name" := FileName;
      ConstructionSpecRAW.MODIFY;
    END;

    PROCEDURE ImportGeneralConstrSpecInfo@1100525022(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024]);
    VAR
      ConstructionSpecRAW@1100525002 : Record 11125666;
    BEGIN
      // 4.2.2.
      ConstructionSpecRAW.GET(ConstrSpecNo);
      ConstructionSpecRAW."Catalog Version" := COPYSTR(Line, 13, 6);
      ConstructionSpecRAW."Nature of Specification" := ContractNatureFromCode(COPYSTR(Line, 20, 1));
      ConstructionSpecRAW."Specification ID" := DELCHR(COPYSTR(Line, 23, 27), '>');
      //ConstructionSpecRAW."RAW Version" := COPYSTR(Line, 62, 6);
      ConstructionSpecRAW."RAW Version" := ConstructionSpecRAW."Catalog Version";  //C060508
      ConstructionSpecRAW."Creation Date" := DateFromCode(COPYSTR(Line, 68, 8));
      ConstructionSpecRAW."RAW User No. (Creator)" := COPYSTR(Line, 76, 4);
      EVALUATE(ConstructionSpecRAW.Currency, COPYSTR(Line, 80, 3));
      ConstructionSpecRAW.Description := COPYSTR(Line, 100, 65);  //C060508
      ConstructionSpecRAW.MODIFY;
    END;

    PROCEDURE ImportConstrSpecStatusInfo@1100525023(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024]);
    VAR
      ConstructionSpecRAW@1100525002 : Record 11125666;
    BEGIN
      // 4.2.3.
      ConstructionSpecRAW.GET(ConstrSpecNo);
      ConstructionSpecRAW."RAW User No. (Payer)" := COPYSTR(Line, 7, 4);
      ConstructionSpecRAW."Registration No." := COPYSTR(Line, 11, 5);
      ConstructionSpecRAW."Unlock Code" := COPYSTR(Line, 16, 32);
      ConstructionSpecRAW.MODIFY;
    END;

    PROCEDURE ImportPageHeaderLine@1100525003(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024]);
    VAR
      ConstructionSpecRAW@1100525003 : Record 11125666;
      ConstrSpecPageHdrRAW@1100525002 : Record 11125667;
    BEGIN
      // 4.2.4.
      LineNo := LineNo + 10000;

      ConstrSpecPageHdrRAW."Specification No." := ConstrSpecNo;
      ConstrSpecPageHdrRAW."Line No." := LineNo;
      ConstrSpecPageHdrRAW."Record No." := COPYSTR(Line, 5, 2);
      ConstrSpecPageHdrRAW.Text := DELCHR(COPYSTR(Line, 13, 65), '>');

      CASE ConstrSpecPageHdrRAW."Record No." OF
        '01'..'03': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"Entire Specification";
        '11'..'13': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"User-Defined Preface";
        '21'..'23': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"0. Contract Realization";
        '26'..'28': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"1. General";
        '31'..'33': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"2.1 Description";
        '41'..'43': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"2.2 Explanation";
        '51'..'53': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"2.3 Elements";
        '61'..'63': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"3. Conditions";
        '71'..'73': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"Bid Form";
        '81'..'83': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"Cover Page";
        '87'..'89': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"User-Defined Postface";
        '93'..'95': ConstrSpecPageHdrRAW.Section := ConstrSpecPageHdrRAW.Section::"User-Defined Bid Form";
      END;

      ConstrSpecPageHdrRAW."First Line" :=
        (ConstrSpecPageHdrRAW."Record No." IN ['01', '11', '21', '26', '31', '41', '51', '61', '71', '81', '87', '93']);
      {
      IF ConstrSpecPageHdrRAW."Record No." = '02' THEN BEGIN
        ConstructionSpecRAW.GET(ConstrSpecNo);
        ConstructionSpecRAW.Description := ConstrSpecPageHdrRAW.Text;  //C060508: use header text (raw.bestek.omschrijving)
        ConstructionSpecRAW.MODIFY;
      END;
      }
      ConstrSpecPageHdrRAW.INSERT;
    END;

    PROCEDURE ImportUserDefinedLine@1100525010(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024];Type@1100525002 : Integer);
    VAR
      ConstrSpecUserDefRAW@1100525003 : Record 11125669;
    BEGIN
      // 4.3.2.
      LineNo := LineNo + 10000;

      ConstrSpecUserDefRAW."Specification No." := ConstrSpecNo;
      ConstrSpecUserDefRAW."Line No." := LineNo;
      ConstrSpecUserDefRAW.Type := Type;
      ConstrSpecUserDefRAW."Paragraph No." := COPYSTR(Line, 3, 2);
      ConstrSpecUserDefRAW."Page Break Before" := COPYSTR(Line, 14, 1) = '1';
      ConstrSpecUserDefRAW.Bold := COPYSTR(Line, 15, 1) = '1';
      ConstrSpecUserDefRAW.Text := DELCHR(COPYSTR(Line, 16, 65), '>');
      ConstrSpecUserDefRAW.INSERT;
    END;

    PROCEDURE ImportTextLine@1100525015(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024]);
    VAR
      ConstrSpecTextLineRAW@1100525002 : Record 11125668;
    BEGIN
      // 4.4.2.
      LineNo := LineNo + 10000;

      ConstrSpecTextLineRAW."Specification No." := ConstrSpecNo;
      ConstrSpecTextLineRAW."Line No." := LineNo;
      ConstrSpecTextLineRAW."Section Code" := COPYSTR(Line, 1, 2);
      ConstrSpecTextLineRAW."Paragraph No." := COPYSTR(Line, 3, 2);
      ConstrSpecTextLineRAW.Text := DELCHR(COPYSTR(Line, 15, 65), '>');
      ConstrSpecTextLineRAW."Paragraph Title" := COPYSTR(Line, 11, 3) = '000';
      ConstrSpecTextLineRAW."Page Break Before" := COPYSTR(Line, 14, 1) = '1';
      ConstrSpecTextLineRAW."RAW Version" := COPYSTR(Line, 81, 6);

      ConstrSpecTextLineRAW.Text := DELCHR(ConstrSpecTextLineRAW.Text, '=', '~');

      IF COPYSTR(ConstrSpecTextLineRAW.Text, 1, STRLEN('TABS')) <> 'TABS' THEN
        ConstrSpecTextLineRAW.INSERT;
    END;

    PROCEDURE ImportElementLine@1100525004(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024]);
    VAR
      ConstrSpecElemLineRAW@1100525002 : Record 11125670;
    BEGIN
      // 4.5.2.
      LineNo := LineNo + 10000;

      ConstrSpecElemLineRAW."Specification No." := ConstrSpecNo;
      ConstrSpecElemLineRAW."No." := LineNo;
      ConstrSpecElemLineRAW."Tender Paragraph No." := DELCHR(COPYSTR(Line, 3, 6), '>');
      ConstrSpecElemLineRAW."Defi Code Position 1" := GetDefiCode('1', COPYSTR(Line, 9, 2), COPYSTR(Line, 72, 2));
      ConstrSpecElemLineRAW."Defi Code Position 2" := GetDefiCode('2', COPYSTR(Line, 9, 2), COPYSTR(Line, 72, 2));
      ConstrSpecElemLineRAW."Defi Code Position 3" := GetDefiCode('3', COPYSTR(Line, 9, 2), COPYSTR(Line, 72, 2));
      ConstrSpecElemLineRAW."Defi Code Position 4" := GetDefiCode('4', COPYSTR(Line, 9, 2), COPYSTR(Line, 72, 2));
      ConstrSpecElemLineRAW."Defi Code Position 5" := GetDefiCode('5', COPYSTR(Line, 9, 2), COPYSTR(Line, 72, 2));
      ConstrSpecElemLineRAW."Defi Code Position 6" := GetDefiCode('6', COPYSTR(Line, 9, 2), COPYSTR(Line, 72, 2));
      ConstrSpecElemLineRAW."Line No." := COPYSTR(Line, 11, 2);
      ConstrSpecElemLineRAW."Page Break Before" := COPYSTR(Line, 13, 1) = '1';
      IF EVALUATE(ConstrSpecElemLineRAW."Modifications Allowed", COPYSTR(Line, 14, 1)) THEN;  //db, 18-03-10: M18706
      ConstrSpecElemLineRAW.Text := DELCHR(COPYSTR(Line, 15, 50), '>');
      ConstrSpecElemLineRAW.Title := ConstrSpecElemLineRAW."Line No." = '00'; // STRLEN(ConstrSpecElemLineRAW."Element No.") < 6;

      CASE STRLEN(ConstrSpecElemLineRAW."Tender Paragraph No.") = 6 OF
        TRUE: ConstrSpecElemLineRAW.Indentation := 4;
        FALSE: ConstrSpecElemLineRAW.Indentation := STRLEN(ConstrSpecElemLineRAW."Tender Paragraph No.") - 1;
      END;

      ConstrSpecElemLineRAW.Activity := COPYSTR(Line, 66, 6);
      ConstrSpecElemLineRAW.Commitment :=
        (ConstrSpecElemLineRAW.AreDefiCodesBlank) AND
        (ConstrSpecElemLineRAW."Line No." IN ['00', '01']) AND
        (STRLEN(ConstrSpecElemLineRAW."Tender Paragraph No.") = 6) AND
        (COPYSTR(ConstrSpecElemLineRAW."Tender Paragraph No.", STRLEN(ConstrSpecElemLineRAW."Tender Paragraph No.")) = '0');
      ConstrSpecElemLineRAW.Type :=
        GetElementType(ConstrSpecElemLineRAW."Tender Paragraph No.", ConstrSpecElemLineRAW."Line No.", ConstrSpecElemLineRAW.Commitment);
      ConstrSpecElemLineRAW."External Unit of Measure Code" := COPYSTR(Line, 74, 4);
      ConstrSpecElemLineRAW."Internal Unit of Measure Code" :=
        MapExternalUnitOfMeasure(ConstrSpecElemLineRAW."External Unit of Measure Code");
      ConstrSpecElemLineRAW.Quantity := GetQuantity(COPYSTR(Line, 78, 9), 2);
      ConstrSpecElemLineRAW."Quantity Type" :=
        QuantityTypeFromCode(ConstrSpecElemLineRAW.Commitment, COPYSTR(Line, 87, 1));
      ConstrSpecElemLineRAW."Description Status" := DescriptionStatusFromCode(COPYSTR(Line, 89, 1));
      ConstrSpecElemLineRAW."RAW Version" := COPYSTR(Line, 90, 6);

      ConstrSpecElemLineRAW."Print on Bid Form" :=
        ((STRLEN(ConstrSpecElemLineRAW."Tender Paragraph No.") < 6) OR (ConstrSpecElemLineRAW.Commitment)) AND
        (ConstrSpecElemLineRAW."Line No." = '00');

      ConstrSpecElemLineRAW.Text := CONVERTSTR(ConstrSpecElemLineRAW.Text, '{}', '  ');

      IF ConstrSpecElemLineRAW.Text <> '' THEN
        ConstrSpecElemLineRAW.INSERT;
    END;

    PROCEDURE ImportConditionsLine@1100525006(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024]);
    VAR
      ConstrSpecCondLineRAW@1100525002 : Record 11125671;
    BEGIN
      // 4.6.2.
      LineNo := LineNo + 10000;

      ConstrSpecCondLineRAW."Specification No." := ConstrSpecNo;
      ConstrSpecCondLineRAW."Line No." := LineNo;
      ConstrSpecCondLineRAW."Chapter No." := COPYSTR(Line, 3, 2);
      ConstrSpecCondLineRAW."Paragraph No." := COPYSTR(Line, 5, 2);
      ConstrSpecCondLineRAW."Section No." := COPYSTR(Line, 7, 2);
      ConstrSpecCondLineRAW."Subsection No." := COPYSTR(Line, 9, 2);
      ConstrSpecCondLineRAW.Text := DELCHR(COPYSTR(Line, 14, 59), '>');
      ConstrSpecCondLineRAW.Title := COPYSTR(Line, 11, 2) = '00';

      IF ConstrSpecCondLineRAW."Paragraph No." <> '00' THEN
        ConstrSpecCondLineRAW.Indentation := ConstrSpecCondLineRAW.Indentation + 1;
      IF ConstrSpecCondLineRAW."Section No." <> '00' THEN
        ConstrSpecCondLineRAW.Indentation := ConstrSpecCondLineRAW.Indentation + 1;
      IF ConstrSpecCondLineRAW."Subsection No." <> '00' THEN
        ConstrSpecCondLineRAW.Indentation := ConstrSpecCondLineRAW.Indentation + 1;

      ConstrSpecCondLineRAW."Page Break Before" := COPYSTR(Line, 13, 1) = '1';
      ConstrSpecCondLineRAW."Master Spec. Version No." := COPYSTR(Line, 75, 6);

      ConstrSpecCondLineRAW.Text := DELCHR(ConstrSpecCondLineRAW.Text, '=', '~');

      IF COPYSTR(ConstrSpecCondLineRAW.Text, 1, STRLEN('TABS')) <> 'TABS' THEN
        ConstrSpecCondLineRAW.INSERT;
    END;

    PROCEDURE ImportBidFormLine@1100525009(ConstrSpecNo@1100525000 : Code[20];Line@1100525001 : Text[1024];Type@1100525003 : Integer);
    VAR
      ConstrSpecBidFormRAW@1100525002 : Record 11125672;
    BEGIN
      // 4.7.2.
      LineNo := LineNo + 10000;

      ConstrSpecBidFormRAW."Specification No." := ConstrSpecNo;
      ConstrSpecBidFormRAW."Line No." := LineNo;
      ConstrSpecBidFormRAW.Type := Type;

      CASE Type OF
        ConstrSpecBidFormRAW.Type::"Bid Form":
          BEGIN
            ConstrSpecBidFormRAW."Page Break Before" := COPYSTR(Line, 14, 1) = '1';
            IF MaxFldLen > 65 THEN BEGIN  //DP01053
              //xml-version
              ConstrSpecBidFormRAW.Text := DELCHR(COPYSTR(Line, 15, MaxFldLen), '>');  //DP01053
            END ELSE BEGIN
              //fixed layout (old ascii-version)
              ConstrSpecBidFormRAW.Text := DELCHR(COPYSTR(Line, 15, 65), '>');
              ConstrSpecBidFormRAW."Master Spec. Release Version" := COPYSTR(Line, 81, 6);
            END;
          END;
        ConstrSpecBidFormRAW.Type::"Bid Form Specification":
          BEGIN
            ConstrSpecBidFormRAW."Page Break Before" := COPYSTR(Line, 13, 1) = '1';
            IF MaxFldLen > 65 THEN BEGIN  //DP01053
              //xml-version
              ConstrSpecBidFormRAW.Text := DELCHR(COPYSTR(Line, 14, MaxFldLen), '>');  //DP01053
            END ELSE BEGIN
              //fixed layout (old ascii-version)
              ConstrSpecBidFormRAW.Text := DELCHR(COPYSTR(Line, 14, 65), '>');
              ConstrSpecBidFormRAW."Master Spec. Release Version" := COPYSTR(Line, 80, 6);
            END;
          END;
      END;

      ConstrSpecBidFormRAW.Text := DELCHR(ConstrSpecBidFormRAW.Text, '=', '~');
      ConstrSpecBidFormRAW.INSERT;
    END;

    LOCAL PROCEDURE ContractNatureFromCode@1100525000(Code@1100525000 : Code[1]) : Integer;
    VAR
      ConstructionSpecRAW@1100525001 : Record 11125666;
    BEGIN
      CASE Code OF
        '0': EXIT(ConstructionSpecRAW."Nature of Specification"::Contract);
        '2': EXIT(ConstructionSpecRAW."Nature of Specification"::Overrun);
        '3': EXIT(ConstructionSpecRAW."Nature of Specification"::Underrun);
        '5': EXIT(ConstructionSpecRAW."Nature of Specification"::"Overrun and Underrun");
      END;
    END;

    LOCAL PROCEDURE QuantityTypeFromCode@1100525014(Commitment@1100525002 : Boolean;Code@1100525000 : Code[1]) : Integer;
    VAR
      ConstrSpecElemLineRAW@1100525001 : Record 11125670;
    BEGIN
      CASE Commitment OF
        TRUE:
          CASE Code OF
            '0', 'V': EXIT(ConstrSpecElemLineRAW."Quantity Type"::V);
            '1', 'N': EXIT(ConstrSpecElemLineRAW."Quantity Type"::N);
            '2': EXIT(ConstrSpecElemLineRAW."Quantity Type"::M);
            '3', 'O': EXIT(ConstrSpecElemLineRAW."Quantity Type"::O);
            '4', 'A': EXIT(ConstrSpecElemLineRAW."Quantity Type"::A);
            'F': EXIT(ConstrSpecElemLineRAW."Quantity Type"::F);  //C036780 (O->F)
          END;
        FALSE:
          CASE Code OF
            '0', 'L': EXIT(ConstrSpecElemLineRAW."Quantity Type"::L);
            '1', 'T': EXIT(ConstrSpecElemLineRAW."Quantity Type"::T);
            '2', 'I': EXIT(ConstrSpecElemLineRAW."Quantity Type"::I);
          END;
      END;
    END;

    LOCAL PROCEDURE DescriptionStatusFromCode@1100525013(Code@1100525000 : Code[1]) : Integer;
    VAR
      ConstrSpecElemLineRAW@1100525001 : Record 11125670;
    BEGIN
      CASE Code OF
        'D': EXIT(ConstrSpecElemLineRAW."Description Status"::Final);
        'V': EXIT(ConstrSpecElemLineRAW."Description Status"::Tentative);
        'E': EXIT(ConstrSpecElemLineRAW."Description Status"::"User-Defined");
      END;
    END;

    LOCAL PROCEDURE DateFromCode@1100525005(Code@1100525000 : Code[8]) : Date;
    VAR
      Day@1100525001 : Integer;
      Month@1100525002 : Integer;
      Year@1100525003 : Integer;
    BEGIN
      IF STRLEN(Code) <> MAXSTRLEN(Code) THEN
        EXIT(0D);

      EVALUATE(Day, COPYSTR(Code, 7, 2));
      EVALUATE(Month, COPYSTR(Code, 5, 2));
      EVALUATE(Year, COPYSTR(Code, 1, 4));

      EXIT(DMY2DATE(Day, Month, Year));
    END;

    LOCAL PROCEDURE GetDefiCode@1100525008(Position@1100525000 : Code[1];PositionCode@1100525001 : Code[2];ValueCode@1100525002 : Code[2]) : Code[1];
    VAR
      i@1100525003 : Integer;
    BEGIN
      PositionCode := DELCHR(PositionCode, '>', '0');
      ValueCode := DELCHR(ValueCode, '<', '0');

      FOR i := 1 TO STRLEN(PositionCode) DO
        IF COPYSTR(PositionCode, i, 1) = Position THEN
          EXIT(COPYSTR(ValueCode, i, 1));
    END;

    LOCAL PROCEDURE GetQuantity@1100525011(Code@1100525000 : Code[10];NumDecimals@1100525001 : Integer) Result : Decimal;
    BEGIN
      IF NOT EVALUATE(Result, Code) THEN
        EXIT(0);

      Result := Result / POWER(10, NumDecimals);
    END;

    PROCEDURE MapExternalUnitOfMeasure@1100525018(ExternalUnitOfMeasureCode@1100525001 : Code[10]) : Code[10];
    VAR
      EstimateRAWUnitMapping@1100525000 : Record 11125675;
    BEGIN
      IF EstimateRAWUnitMapping.GET(ExternalUnitOfMeasureCode) THEN
        EXIT(EstimateRAWUnitMapping."Internal Unit of Measure Code");
    END;

    PROCEDURE GetElementType@1100525016(ElementNo@1100525000 : Code[6];LineNo@1100525001 : Code[2];Commitment@1100525003 : Boolean) : Integer;
    VAR
      ConstrSpecElemLineRAW@1100525002 : Record 11125670;
    BEGIN
      CASE TRUE OF
        STRLEN(ElementNo) = 1:
          EXIT(ConstrSpecElemLineRAW.Type::Chapter);
        STRLEN(ElementNo) = 2:
          EXIT(ConstrSpecElemLineRAW.Type::Paragraph);
        STRLEN(ElementNo) = 3:
          EXIT(ConstrSpecElemLineRAW.Type::Subparagraph);
        STRLEN(ElementNo) = 4:
          EXIT(ConstrSpecElemLineRAW.Type::Subsubparagraph);
        (STRLEN(ElementNo) = 6) AND (Commitment) AND (LineNo IN ['00', '01']):
          EXIT(ConstrSpecElemLineRAW.Type::"Commitment (Main Line)");
        (STRLEN(ElementNo) = 6) AND (Commitment):
          EXIT(ConstrSpecElemLineRAW.Type::"Commitment (Sub Line)");
        (STRLEN(ElementNo) = 6) AND (NOT Commitment) AND (LineNo IN ['00', '01']):
          EXIT(ConstrSpecElemLineRAW.Type::"Commitment Description (Main Line)");
        (STRLEN(ElementNo) = 6) AND (NOT Commitment):
          EXIT(ConstrSpecElemLineRAW.Type::"Commitment Description (Sub Line)");
      END;
    END;

    LOCAL PROCEDURE StartsWith@1100525007(String@1100525000 : Text[1024];SubString@1100525001 : Text[1024]) : Boolean;
    BEGIN
      EXIT(COPYSTR(String, 1, STRLEN(SubString)) = SubString);
    END;

    PROCEDURE CompressBidFormLines@1100525017(ConstrSpecNo@1100525001 : Code[20];Filter@1100525004 : Text[10]);
    VAR
      ClosingLine@1100525000 : Record 11125672;
      BlankLine@1100525002 : Record 11125672;
      OpeningLine@1100525003 : Record 11125672;
    BEGIN
      ClosingLine.SETRANGE("Specification No.", ConstrSpecNo);
      ClosingLine.SETRANGE(Type, ClosingLine.Type::"Bid Form");
      ClosingLine.SETFILTER(Text, Filter);

      IF ClosingLine.FINDLAST THEN BEGIN
        ClosingLine.SETRANGE(Text);
        BlankLine.COPY(ClosingLine);
        IF BlankLine.NEXT(-1) <> 0 THEN BEGIN
          IF BlankLine.Text = '' THEN BEGIN
            OpeningLine.COPY(BlankLine);
            IF OpeningLine.NEXT(-1) <> 0 THEN BEGIN
              IF OpeningLine.Text = '(' THEN BEGIN
                // jhoek.250210.begin
                // OpeningLine.Text := OpeningLine.Text + ClosingLine.Text;
                OpeningLine.Text := OpeningLine.Text + DELCHR(ClosingLine.Text, '<');
                // jhoek.250210.end
                OpeningLine.MODIFY;
                BlankLine.DELETE;
                ClosingLine.DELETE;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE SetContractorNo@1100525019(ConstrSpecNo@1100525000 : Code[20]);
    VAR
      ConstrSpecBidFormRAW@1100525001 : Record 11125672;
    BEGIN
      ConstrSpecBidFormRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecBidFormRAW.SETRANGE(Type, ConstrSpecBidFormRAW.Type::"Bid Form");
      ConstrSpecBidFormRAW.SETFILTER(Text, '''*1)''');

      IF ConstrSpecBidFormRAW.FINDFIRST THEN BEGIN
        ConstrSpecBidFormRAW."Contractor No." := 1;
        ConstrSpecBidFormRAW.MODIFY;
      END;

      ConstrSpecBidFormRAW.SETFILTER(Text, '''*2)''');

      IF ConstrSpecBidFormRAW.NEXT <> 0 THEN BEGIN
        ConstrSpecBidFormRAW."Contractor No." := 1;
        ConstrSpecBidFormRAW.MODIFY;
      END;

      ConstrSpecBidFormRAW.SETFILTER(Text, '''*1)''');

      IF ConstrSpecBidFormRAW.NEXT <> 0 THEN BEGIN
        ConstrSpecBidFormRAW."Contractor No." := 2;
        ConstrSpecBidFormRAW.MODIFY;
      END;

      ConstrSpecBidFormRAW.SETFILTER(Text, '''*2)''');

      IF ConstrSpecBidFormRAW.NEXT <> 0 THEN BEGIN
        ConstrSpecBidFormRAW."Contractor No." := 2;
        ConstrSpecBidFormRAW.MODIFY;
      END;

      ConstrSpecBidFormRAW.SETFILTER(Text, '''*1)''');

      IF ConstrSpecBidFormRAW.NEXT <> 0 THEN BEGIN
        ConstrSpecBidFormRAW."Contractor No." := 3;
        ConstrSpecBidFormRAW.MODIFY;
      END;

      ConstrSpecBidFormRAW.SETFILTER(Text, '''*2)''');

      IF ConstrSpecBidFormRAW.NEXT <> 0 THEN BEGIN
        ConstrSpecBidFormRAW."Contractor No." := 3;
        ConstrSpecBidFormRAW.MODIFY;
      END;
    END;

    PROCEDURE FixQuantityTypes@1100525021(ConstrSpecNo@1100525000 : Code[20]);
    VAR
      ConstrSpecElemLineRAW@1100525001 : Record 11125670;
      ConstrSpecElemLineRAW2@1100525002 : Record 11125670;
    BEGIN
      // jhoek.070610
      // Call #18431: deal with construction specifications where the quantity type
      // is specified on the so called 00-line, but not on the 01-line.
      ConstrSpecElemLineRAW.SETCURRENTKEY("Specification No.", "Line No.", "Quantity Type");
      ConstrSpecElemLineRAW.SETRANGE("Specification No.", ConstrSpecNo);
      ConstrSpecElemLineRAW.SETRANGE("Line No.", '00');
      ConstrSpecElemLineRAW.SETFILTER("Quantity Type", '<>%1', ConstrSpecElemLineRAW."Quantity Type"::" ");

      IF ConstrSpecElemLineRAW.FINDSET THEN
        REPEAT
          ConstrSpecElemLineRAW2.SETCURRENTKEY("Specification No.", "Tender Paragraph No.", "Line No.");
          ConstrSpecElemLineRAW2.SETRANGE("Specification No.", ConstrSpecNo);
          ConstrSpecElemLineRAW2.SETRANGE("Tender Paragraph No.", ConstrSpecElemLineRAW."Tender Paragraph No.");
          ConstrSpecElemLineRAW2.SETRANGE("Line No.", '01');
          IF ConstrSpecElemLineRAW2.FINDFIRST THEN
            IF ConstrSpecElemLineRAW2."Quantity Type" = ConstrSpecElemLineRAW2."Quantity Type"::" " THEN BEGIN
              ConstrSpecElemLineRAW2."Quantity Type" := ConstrSpecElemLineRAW."Quantity Type";
              ConstrSpecElemLineRAW2.MODIFY;
            END;
        UNTIL ConstrSpecElemLineRAW.NEXT = 0;
    END;

    PROCEDURE SetMaxFldLen@1100525020(iFldLen@1100525000 : Integer);
    BEGIN
      //DP01053
      MaxFldLen := iFldLen;
    END;

    BEGIN
    END.
  }
}

