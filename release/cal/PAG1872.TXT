OBJECT Page 1872 Item Availability Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Availability Check;
               NOR=Tilgjengelighetskontroll;
               SVE=Kontrollera disponibelt];
    SaveValues=No;
    MultipleNewLines=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table27;
    DelayedInsert=No;
    PopulateAllFields=No;
    SourceTableTemporary=No;
    AutoSplitKey=No;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Manage;
                                NOR=Ny,Prosess,Rapport,Administrer;
                                SVE=Ny,Process,Rapport,Hantera];
    ShowFilter=Yes;
    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      Name=Action1;
                      CaptionML=;
                      ActionContainerType=RelatedInformation }
      { 7       ;1   ;ActionGroup;
                      CaptionML=[ENU=&Manage;
                                 NOR=&Administrer;
                                 SVE=&Hantera] }
      { 8       ;2   ;Action    ;
                      Name=Page Item Card;
                      CaptionML=[ENU=Item;
                                 NOR=Vare;
                                 SVE=Artikel];
                      ToolTipML=[ENU=View and edit detailed information for the item.;
                                 NOR=Vis og rediger detaljert informasjon for varen.;
                                 SVE=Visa och redigera detaljerad information f”r artikeln.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 30;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      PromotedIsBig=No;
                      Image=Item;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      RunPageMode=View }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=Create;
                                 NOR=Opprett;
                                 SVE=Skapa] }
      { 10      ;2   ;Action    ;
                      Name=Purchase Invoice;
                      CaptionML=[ENU=Create Purchase Invoice;
                                 NOR=Opprett kj›psfaktura;
                                 SVE=Skapa ink”psfaktura];
                      ToolTipML=[ENU=Create a new purchase invoice.;
                                 NOR=Opprett en ny kj›psfaktura.;
                                 SVE=Skapa en ny ink”psfaktura.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=No;
                      Image=NewPurchaseInvoice;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ShowNewPurchaseDocument(DummyPurchaseHeader."Document Type"::Invoice);
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=Purchase Order;
                      CaptionML=[ENU=Create Purchase Order;
                                 NOR=Opprett bestilling;
                                 SVE=Skapa ink”psorder];
                      ToolTipML=[ENU=Create a new purchase order.;
                                 NOR=Opprett en ny bestilling.;
                                 SVE=Skapa en ny ink”psorder.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=No;
                      Image=NewOrder;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ShowNewPurchaseDocument(DummyPurchaseHeader."Document Type"::Order);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Control1;
                ContainerType=ContentArea }

    { 6   ;1   ;Field     ;
                Name=Control2;
                ApplicationArea=#Basic,#Suite;
                CaptionClass=Heading }

    { 13  ;1   ;Group     ;
                CaptionML=[ENU=Inventory;
                           NOR=Lager;
                           SVE=Lagersaldo];
                GroupType=Group }

    { 4   ;2   ;Field     ;
                Name=InventoryQty;
                ToolTipML=[ENU=Specifies the quantity of the item that is currently in inventory and not reserved for other demand.;
                           NOR=Angir antallet av varen som for ›yeblikket er p† lager og som ikke er reservert for andre behov.;
                           SVE=Visar antalet artiklar som f”r n„rvarande finns i lager och som inte „r reserverade f”r andra „ndam†l.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=InventoryQty;
                CaptionClass=AvailableInventoryCaption;
                Editable=false }

    { 5   ;2   ;Field     ;
                Name=TotalQuantity;
                CaptionML=[ENU=Inventory Shortage;
                           NOR=Manglende beholdning;
                           SVE=Lagerbrist];
                ToolTipML=[ENU="Specifies the total quantity of the item that is currently in inventory. The Total Quantity field is used to calculate the Available Inventory field as follows: Available Inventory = Total Quantity - Reserved Quantity.";
                           NOR="Angir det totale antallet for varen som for ›yeblikket finnes p† lager.Feltet Antall i alt brukes til † beregne feltet Disponibel beholdning p† f›lgende m†te: Disponibel beholdning = Antall i alt - Reservert antall.";
                           SVE="Anger det totala antalet av artikeln som f”r n„rvarande finns i lager. F„ltet Totalt antal anv„nds f”r att ber„kna f„ltet Disponibelt lager som f”ljer: Disponibelt lager = Totalt antal - Reserverat antal."];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalQuantity;
                Editable=false }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=All locations;
                           NOR=Alle lokasjoner;
                           SVE=Alla lagerst„llen];
                ToolTipML=[ENU=Specifies the total quantity of the item that is currently in inventory at all locations.;
                           NOR=Angir det totale antallet av varen som for ›yeblikket er p† lager p† alle lokasjoner.;
                           SVE=Visar det totala antalet artiklar som f”r n„rvarande finns i lager p† alla lagerst„llen.];
                ApplicationArea=#Location;
                DecimalPlaces=0:5;
                SourceExpr=Inventory;
                OnDrillDown=BEGIN
                              PAGE.RUNMODAL(PAGE::"Item Availability by Location",Rec)
                            END;
                             }

    { 3   ;1   ;Part      ;
                Name=AvailabilityCheckDetails;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page1873;
                Editable=FALSE;
                PartType=Page }

  }
  CODE
  {
    VAR
      DummyPurchaseHeader@1007 : Record 38;
      TotalQuantity@1000 : Decimal;
      InventoryQty@1001 : Decimal;
      LocationCode@1004 : Code[10];
      Heading@1003 : Text;
      SelectVentorTxt@1002 : TextConst 'ENU=Select a vendor to buy from.;NOR=Velg en leverand›r som det skal kj›pes fra.;SVE=V„lj en leverant”r att k”pa fr†n.';
      AvailableInventoryLbl@1005 : TextConst 'ENU=Available Inventory;NOR=Disponibel beholdning;SVE=Disponibelt lager';
      AvailableInventoryCaption@1006 : Text;

    [External]
    PROCEDURE PopulateDataOnNotification@1(VAR AvailabilityCheckNotification@1000 : Notification;ItemNo@1012 : Code[20];UnitOfMeasureCode@1011 : Code[20];InventoryQty@1010 : Decimal;GrossReq@1009 : Decimal;ReservedReq@1008 : Decimal;SchedRcpt@1007 : Decimal;ReservedRcpt@1006 : Decimal;CurrentQuantity@1005 : Decimal;CurrentReservedQty@1004 : Decimal;TotalQuantity@1003 : Decimal;EarliestAvailDate@1002 : Date;LocationCode@1001 : Code[10]);
    BEGIN
      AvailabilityCheckNotification.SETDATA('ItemNo',ItemNo);
      AvailabilityCheckNotification.SETDATA('UnitOfMeasureCode',UnitOfMeasureCode);
      AvailabilityCheckNotification.SETDATA('GrossReq',FORMAT(GrossReq));
      AvailabilityCheckNotification.SETDATA('ReservedReq',FORMAT(ReservedReq));
      AvailabilityCheckNotification.SETDATA('SchedRcpt',FORMAT(SchedRcpt));
      AvailabilityCheckNotification.SETDATA('ReservedRcpt',FORMAT(ReservedRcpt));
      AvailabilityCheckNotification.SETDATA('CurrentQuantity',FORMAT(CurrentQuantity));
      AvailabilityCheckNotification.SETDATA('CurrentReservedQty',FORMAT(CurrentReservedQty));
      AvailabilityCheckNotification.SETDATA('TotalQuantity',FORMAT(TotalQuantity));
      AvailabilityCheckNotification.SETDATA('InventoryQty',FORMAT(InventoryQty));
      AvailabilityCheckNotification.SETDATA('EarliestAvailDate',FORMAT(EarliestAvailDate));
      AvailabilityCheckNotification.SETDATA('LocationCode',LocationCode);
    END;

    PROCEDURE InitializeFromNotification@4(AvailabilityCheckNotification@1000 : Notification);
    VAR
      GrossReq@1007 : Decimal;
      SchedRcpt@1006 : Decimal;
      ReservedReq@1005 : Decimal;
      ReservedRcpt@1004 : Decimal;
      CurrentQuantity@1003 : Decimal;
      CurrentReservedQty@1002 : Decimal;
      EarliestAvailDate@1001 : Date;
    BEGIN
      GET(AvailabilityCheckNotification.GETDATA('ItemNo'));
      SETRANGE("No.",AvailabilityCheckNotification.GETDATA('ItemNo'));
      EVALUATE(TotalQuantity,AvailabilityCheckNotification.GETDATA('TotalQuantity'));
      EVALUATE(InventoryQty,AvailabilityCheckNotification.GETDATA('InventoryQty'));
      EVALUATE(LocationCode,AvailabilityCheckNotification.GETDATA('LocationCode'));
      CurrPage.AvailabilityCheckDetails.PAGE.SetUnitOfMeasureCode(
        AvailabilityCheckNotification.GETDATA('UnitOfMeasureCode'));

      IF AvailabilityCheckNotification.GETDATA('GrossReq') <> '' THEN BEGIN
        EVALUATE(GrossReq,AvailabilityCheckNotification.GETDATA('GrossReq'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetGrossReq(GrossReq);
      END;
      IF AvailabilityCheckNotification.GETDATA('ReservedReq') <> '' THEN BEGIN
        EVALUATE(ReservedReq,AvailabilityCheckNotification.GETDATA('ReservedReq'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetReservedReq(ReservedReq);
      END;
      IF AvailabilityCheckNotification.GETDATA('SchedRcpt') <> '' THEN BEGIN
        EVALUATE(SchedRcpt,AvailabilityCheckNotification.GETDATA('SchedRcpt'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetSchedRcpt(SchedRcpt);
      END;
      IF AvailabilityCheckNotification.GETDATA('ReservedRcpt') <> '' THEN BEGIN
        EVALUATE(ReservedRcpt,AvailabilityCheckNotification.GETDATA('ReservedRcpt'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetReservedRcpt(ReservedRcpt);
      END;
      IF AvailabilityCheckNotification.GETDATA('CurrentQuantity') <> '' THEN BEGIN
        EVALUATE(CurrentQuantity,AvailabilityCheckNotification.GETDATA('CurrentQuantity'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetCurrentQuantity(CurrentQuantity);
      END;
      IF AvailabilityCheckNotification.GETDATA('CurrentReservedQty') <> '' THEN BEGIN
        EVALUATE(CurrentReservedQty,AvailabilityCheckNotification.GETDATA('CurrentReservedQty'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetCurrentReservedQty(CurrentReservedQty);
      END;
      IF AvailabilityCheckNotification.GETDATA('EarliestAvailDate') <> '' THEN BEGIN
        EVALUATE(EarliestAvailDate,AvailabilityCheckNotification.GETDATA('EarliestAvailDate'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetEarliestAvailDate(EarliestAvailDate);
      END;

      IF LocationCode = '' THEN
        AvailableInventoryCaption := AvailableInventoryLbl
      ELSE
        AvailableInventoryCaption := STRSUBSTNO('%1 (%2)',AvailableInventoryLbl,LocationCode);
    END;

    [External]
    PROCEDURE SetHeading@21(Value@1000 : Text);
    BEGIN
      Heading := Value;
    END;

    LOCAL PROCEDURE SelectVendor@2(VAR Vendor@1000 : Record 23) : Boolean;
    VAR
      VendorList@1003 : Page 27;
    BEGIN
      VendorList.LOOKUPMODE(TRUE);
      VendorList.CAPTION(SelectVentorTxt);
      IF VendorList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        VendorList.GETRECORD(Vendor);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ShowNewPurchaseDocument@3(DocumentType@1000 : Integer);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      IF CreateNewPurchaseDocument(DocumentType,PurchaseHeader) THEN
        CASE DocumentType OF
          PurchaseHeader."Document Type"::Invoice:
            PAGE.RUN(PAGE::"Purchase Invoice",PurchaseHeader);
          PurchaseHeader."Document Type"::Order:
            PAGE.RUN(PAGE::"Purchase Order",PurchaseHeader);
        END;
    END;

    LOCAL PROCEDURE CreateNewPurchaseDocument@6(DocumentType@1000 : Integer;VAR PurchaseHeader@1004 : Record 38) : Boolean;
    VAR
      PurchaseLine@1002 : Record 39;
      Vendor@1001 : Record 23;
    BEGIN
      IF "Vendor No." = '' THEN BEGIN
        IF NOT SelectVendor(Vendor) THEN
          EXIT(FALSE);

        "Vendor No." := Vendor."No."
      END;
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",DocumentType);
      PurchaseHeader.INSERT(TRUE);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.","Vendor No.");
      PurchaseHeader.MODIFY(TRUE);

      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      PurchaseLine.VALIDATE("Line No.",10000);
      PurchaseLine.INSERT(TRUE);

      PurchaseLine.VALIDATE(Type,PurchaseLine.Type::Item);
      PurchaseLine.VALIDATE("No.","No.");
      PurchaseLine.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

