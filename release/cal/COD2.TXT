OBJECT Codeunit 2 Company-Initialize
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,NAVSE.DK,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 79=i,
                TableData 98=i,
                TableData 131=i,
                TableData 311=i,
                TableData 312=i,
                TableData 313=i,
                TableData 314=i,
                TableData 315=i,
                TableData 326=i,
                TableData 743=i,
                TableData 843=i,
                TableData 870=i,
                TableData 905=i,
                TableData 1006=i,
                TableData 1108=i,
                TableData 1806=i,
                TableData 5079=i,
                TableData 5122=i,
                TableData 5218=i,
                TableData 5603=i,
                TableData 5719=i,
                TableData 5769=i,
                TableData 5911=i,
                TableData 8627=i,
                TableData 11128513=ri;
    OnRun=VAR
            BankPmtApplRule@1003 : Record 1252;
            TransformationRule@1005 : Record 1237;
            ApplicationLaunchMgt@1001 : Codeunit 403;
            AddOnIntegrMgt@1000 : Codeunit 5403;
            WorkflowSetup@1004 : Codeunit 1502;
            VATRegistrationLogMgt@1006 : Codeunit 249;
            Window@1002 : Dialog;
            WorkflowSetup4PS@1100529200 : Codeunit 11125360;
          BEGIN
            Window.OPEN(Text000);

            OnBeforeOnRun;

            InitSetupTables;
            AddOnIntegrMgt.InitMfgSetup;
            InitSourceCodeSetup;
            InitStandardTexts;
            InitReportSelection;
            InitJobWIPMethods;
            InitBankExportImportSetup;
            InitBankDataConversionPmtType;
            InitBankClearingStandard;
            InitBankDataConvServiceSetup;
            InitDocExchServiceSetup;
            BankPmtApplRule.InsertDefaultMatchingRules;
            ApplicationLaunchMgt.InsertStyleSheets;
            //InsertClientAddIns; //**4PS.o
            VATRegistrationLogMgt.InitServiceSetup;
            WorkflowSetup.InitWorkflow;
            WorkflowSetup4PS.InitWorkflowNotMigrationProcess; //**4PS.n
            TransformationRule.CreateDefaultTransformations;
            InitElectronicFormats;
            InitApplicationAreasForSaaS;
            //**4PS.sn
            InsertVmaAppFeatures;
            InsertSalesReportTextSetup;
            //**4PS.en

            OnCompanyInitialize;

            Window.CLOSE;

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Initializing company...;NOR=Initialiserer selskap...;SVE=Initierar fîretag...';
      SEPACTCodeTxt@1076 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPACT;NOR=SEPAKO;SVE=SEPACT';
      SEPACTNameTxt@1083 : TextConst 'ENU=SEPA Credit Transfer;NOR=SEPA-kredittoverfõring;SVE=SEPA Kreditîverfîring';
      SEPADDCodeTxt@1033 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPADD;NOR=SEPADD;SVE=SEPADD';
      SEPADDNameTxt@1020 : TextConst 'ENU=SEPA Direct Debit;NOR=SEPA Direct Debit;SVE=SEPA Autogiro';
      LegacyBankExportCodeTxt@1090001 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPACT V02';
      LegacyBankExportNameTxt@1090000 : TextConst 'ENU="SEPA Credit Transfer pain.001.001.02 "';
      ExportRemittanceCodeTxt@1080000 : TextConst 'ENU=Remittance;NOR=Remittering;SVE=Remittering';
      ExportRemittanceNameTxt@1080001 : TextConst 'ENU=Export Remittance;NOR=Eksporter remittering';
      Text001@1001 : TextConst 'ENU=SALES;NOR=SALG;SVE=FôRS';
      Text002@1002 : TextConst 'ENU=Sales;NOR=Salg;SVE=FîrsÑljning';
      Text003@1003 : TextConst 'ENU=PURCHASES;NOR=KJùP;SVE=INKôP';
      Text004@1004 : TextConst 'ENU=Purchases;NOR=Kjõp;SVE=Inkîp';
      Text005@1005 : TextConst 'ENU=DELETE;NOR=SLETT;SVE=TABORT';
      Text006@1006 : TextConst 'ENU=INVTPCOST;NOR=BOKFLAGER;SVE=BOKLAGKOST';
      Text007@1007 : TextConst 'ENU=EXCHRATADJ;NOR=VALUTAJUST;SVE=VALUKURJUS';
      Text010@1010 : TextConst 'ENU=CLSINCOME;NOR=LUKKRES;SVE=AVSLRESKTO';
      Text011@1011 : TextConst 'ENU=CONSOLID;NOR=KONSOLID;SVE=KONSOLID';
      Text012@1012 : TextConst 'ENU=Consolidation;NOR=Konsolidering;SVE=Konsolidering';
      Text013@1013 : TextConst 'ENU=GENJNL;NOR=FINKLD;SVE=REDOVJNL';
      Text014@1014 : TextConst 'ENU=SALESJNL;NOR=SALGSKLD;SVE=FôRSJNL';
      Text015@1015 : TextConst 'ENU=PURCHJNL;NOR=KJùPSKLD;SVE=INKôPJNL';
      Text016@1016 : TextConst 'ENU=CASHRECJNL;NOR=INNBKLD;SVE=INBETALJNL';
      Text017@1017 : TextConst 'ENU=PAYMENTJNL;NOR=BETALKLD;SVE=BETALJNL';
      Text018@1018 : TextConst 'ENU=ITEMJNL;NOR=VAREKLD;SVE=ARTJNL';
      Text020@1019 : TextConst 'ENU=PHYSINVJNL;NOR=OPPTKLD;SVE=INVJNL';
      Text022@1021 : TextConst 'ENU=RESJNL;NOR=RESKLD;SVE=RESJNL';
      Text023@1022 : TextConst 'ENU=JOBJNL;NOR=PROSJKLD;SVE=PROJJNL';
      Text024@1023 : TextConst 'ENU=SALESAPPL;NOR=SALGSUTL;SVE=FôRSMOD';
      Text025@1024 : TextConst 'ENU=Sales Entry Application;NOR=Kundeetterutligning;SVE=FîrsÑljningstrans. koppling';
      PaymentReconJnlTok@1169 : TextConst '@@@=Payment Reconciliation Journal Code;ENU=PAYMTRECON;NOR=Utbe.avst.;SVE=UTBET.AVST';
      Text026@1025 : TextConst 'ENU=PURCHAPPL;NOR=KJùPSUTL;SVE=INKôPMOD';
      Text027@1026 : TextConst 'ENU=Purchase Entry Application;NOR=Leverandõretterutligning;SVE=Inkîpstrans. koppling';
      EmployeeEntryApplicationCodeTxt@1175 : TextConst '@@@=EMPL stands for employee, APPL stands for application;ENU=EMPLAPPL;NOR=ANSUTLIGN;SVE=ANSTPROGR';
      EmployeeEntryApplicationTxt@1174 : TextConst 'ENU=Employee Entry Application;NOR=Ansattetterutligning;SVE=Personaltrans. koppling';
      Text028@1027 : TextConst 'ENU=VATSTMT;NOR=MVAOPPG;SVE=MOMSKTOUTD';
      Text029@1028 : TextConst 'ENU=COMPRGL;NOR=KOMPRFIN;SVE=KOMPRREDOV';
      Text030@1029 : TextConst 'ENU=COMPRVAT;NOR=KOMPRMVA;SVE=KOMPRMOMS';
      Text031@1030 : TextConst 'ENU=COMPRCUST;NOR=KOMPRKUNDE;SVE=KOMPRKUND';
      Text032@1031 : TextConst 'ENU=COMPRVEND;NOR=KOMPRLEV;SVE=KOMPRLEV';
      Text035@1034 : TextConst 'ENU=COMPRRES;NOR=KOMPRRES;SVE=KOMPRRES';
      Text036@1035 : TextConst 'ENU=COMPRJOB;NOR=KOMPRPROSJ;SVE=KOMPRPROJ';
      Text037@1036 : TextConst 'ENU=COMPRBANK;NOR=KOMPRBANK;SVE=KOMPRBANK';
      Text038@1037 : TextConst 'ENU=COMPRCHECK;NOR=KOMPRSJEKK;SVE=KOMPRCHECK';
      Text039@1038 : TextConst 'ENU=FINVOIDCHK;NOR=FINKANSJ;SVE=ANNULCHECK';
      Text040@1039 : TextConst 'ENU=Financially Voided Check;NOR=Finansielt kansellert sjekk;SVE=Annullerad check';
      Text041@1040 : TextConst 'ENU=REMINDER;NOR=PURRING;SVE=BETALPèM';
      Text042@1041 : TextConst 'ENU=Reminder;NOR=Purring;SVE=BetalningspÜminnelse';
      Text043@1042 : TextConst 'ENU=FINCHRG;NOR=RENTENOTA;SVE=RéNTA';
      Text044@1043 : TextConst 'ENU=Finance Charge Memo;NOR=Rentenota;SVE=RÑntefaktura';
      Text045@1044 : TextConst 'ENU=FAGLJNL;NOR=AKTKLD;SVE=ANLREDJNL';
      Text046@1045 : TextConst 'ENU=FAJNL;NOR=AKTIVAKLD;SVE=ANLJNL';
      Text047@1046 : TextConst 'ENU=INSJNL;NOR=FORSKLD;SVE=FôRSéKJNL';
      Text048@1047 : TextConst 'ENU=COMPRFA;NOR=KOMPRAKT;SVE=KOMPRANL';
      Text049@1048 : TextConst 'ENU=COMPRMAINT;NOR=KOMPRVEDL;SVE=KOMPRUNDER';
      Text050@1049 : TextConst 'ENU=COMPRINS;NOR=KOMPRFORS;SVE=KOMPRFôRSé';
      Text051@1050 : TextConst 'ENU=ADJADDCURR;NOR=JUSTILLVAL;SVE=JUSTALTVAL';
      Text052@1051 : TextConst 'ENU=MD;NOR=MND.AVSKR;SVE=MA';
      Text053@1052 : TextConst 'ENU=Monthly Depreciation;NOR=MÜnedlig avskrivning;SVE=MÜnatlig avskrivning';
      Text054@1053 : TextConst 'ENU=SC;NOR=LEVBET;SVE=LEVNSAVG';
      Text055@1054 : TextConst 'ENU=Shipping Charge;NOR=Leveringsbelastning;SVE=Leveransavgifter';
      Text056@1055 : TextConst 'ENU=SUC;NOR=SUK;SVE=KFôRS';
      Text057@1056 : TextConst 'ENU=Sale under Contract;NOR=Salg under kontrakt;SVE=KontraktsfîrsÑljning';
      Text058@1057 : TextConst 'ENU=TE;NOR=RK;SVE=RK';
      Text059@1058 : TextConst 'ENU=Travel Expenses;NOR=Reisekostnader;SVE=Resekostnader';
      Text063@1062 : TextConst 'ENU=TRANSFER;NOR=OVERFùR;SVE=ôVERFôRING';
      Text064@1063 : TextConst 'ENU=Transfer;NOR=Overfõr;SVE=ôverfîring';
      Text065@1064 : TextConst 'ENU=RECLASSJNL;NOR=REKLASSKLD;SVE=GRUPPJNL';
      Text066@1065 : TextConst 'ENU=REVALJNL;NOR=REVALKLD;SVE=OMVéRJNL';
      Text067@1066 : TextConst 'ENU=CONSUMPJNL;NOR=FORBRUKKLD;SVE=FôRBRUKJNL';
      Text068@1067 : TextConst 'ENU=INVTADJMT;NOR=LAGERJUST;SVE=LAGJUST';
      Text069@1069 : TextConst 'ENU=POINOUTJNL;NOR=POINNUTKLD;SVE=POINUTJNL';
      Text070@1073 : TextConst 'ENU=CAPACITJNL;NOR=KAPASITKLD;SVE=KAPJNL';
      Text071@1107 : TextConst 'ENU=WHITEM;NOR=LAGERVARE;SVE=DLARTIKEL';
      Text072@1105 : TextConst 'ENU=WHPHYSINVT;NOR=LAGEROPPT;SVE=DLINVENT';
      Text073@1068 : TextConst 'ENU=WHRCLSSJNL;NOR=LGROVFKLD;SVE=DLOMGRUJNL';
      Text074@1070 : TextConst 'ENU=SERVICE;NOR=SERVICE;SVE=SERVICE';
      Text075@1074 : TextConst 'ENU=Service Management;NOR=Service;SVE=Service';
      Text076@1075 : TextConst 'ENU=BANKREC;NOR=BANKPOST;SVE=BANKIN';
      Text077@1077 : TextConst 'ENU=WHPUTAWAY;NOR=LAGPLASSER;SVE=DLARTINF';
      Text078@1078 : TextConst 'ENU=WHPICK;NOR=PLUKK;SVE=DLPLOCK';
      Text079@1079 : TextConst 'ENU=WHMOVEMENT;NOR=LAGERFLYTT;SVE=DLTRANSP';
      Text080@1080 : TextConst 'ENU=Whse. Put-away;NOR=Plassering;SVE=Dist.lager art.infîrsel';
      Text081@1081 : TextConst 'ENU=Whse. Pick;NOR=Plukk;SVE=Dist.lager plockning';
      Text082@1082 : TextConst 'ENU=Whse. Movement;NOR=Lag.flytting;SVE=Dist.lager transport';
      Text083@1100 : TextConst 'ENU=COMPRWHSE;NOR=KOMPRLAGER;SVE=KOMPRDL';
      Text084@1106 : TextConst 'ENU=INTERCOMP;NOR=KONSERNINT;SVE=KONCERNINT';
      Text085@1108 : TextConst 'ENU=Intercompany;NOR=Konsernintern;SVE=Koncernintern';
      Text086@1114 : TextConst 'ENU=UNAPPSALES;NOR=UPLASSALG;SVE=BORTKFôRS';
      Text087@1113 : TextConst 'ENU=Unapplied Sales Entry Application;NOR=Ikke utlignet kundeetterutligning;SVE=Borttagen fîrsÑljningstrans. koppling';
      UnappliedEmplEntryApplnCodeTxt@1173 : TextConst '@@@=EMPL stands for employee, UNAPP stands for unapply;ENU=UNAPPEMPL;NOR=OPPHANSUTL;SVE=TABORTANST';
      UnappliedEmplEntryApplnTxt@1059 : TextConst 'ENU=Unapplied Employee Entry Application;NOR=Ikke utlignet ansattetterutligning;SVE=Borttagen personaltrans. koppling';
      Text088@1112 : TextConst 'ENU=UNAPPPURCH;NOR=UPLASSKJùP;SVE=BORTKINKôP';
      Text089@1111 : TextConst 'ENU=Unapplied Purchase Entry Application;NOR=Ikke utlignet leverandõretterutligning;SVE=Borttagen inkîpstrans. koppling';
      Text090@1110 : TextConst 'ENU=REVERSAL;NOR=TILBAKEFùR;SVE=èTERFôRING';
      Text091@1109 : TextConst 'ENU="Reversal Entry ";NOR="Tilbakefõringspost ";SVE="èterfîringspost "';
      Text092@1115 : TextConst 'ENU=PRODORDER;NOR=PRODORDRE;SVE=PRODORDER';
      Text99000004@1071 : TextConst 'ENU=FLUSHING;NOR=LAGERTREKK;SVE=BOKFMETOD';
      Text99000005@1072 : TextConst 'ENU=Flushing;NOR=Lagertrekk;SVE=Bokf.metod';
      Text096@1008 : TextConst 'ENU=JOBGLJNL;NOR=PRJFINKLAD;SVE=PROJREDJNL';
      Text097@1009 : TextConst 'ENU=JOBGLWIP;NOR=PRJFINVIA;SVE=PROJREDPIA';
      Text098@1122 : TextConst 'ENU=WIP Entry;NOR=VIA-post;SVE=PIA-transaktion';
      Text099@1123 : TextConst 'ENU=Date Compress Job Ledger;NOR=Datokomprimer prosjektpost;SVE=Datumkompr. projekttrans.';
      Text100@1032 : TextConst '@@@={Locked};ENU=COMPRIBUDG;NOR=COMPRIBUDG;SVE=COMPRIBUDG';
      Text101@1117 : TextConst 'ENU=Completed Contract;NOR=Ved avslutning;SVE=Slutfîrt kontrakt';
      Text102@1116 : TextConst 'ENU=Cost of Sales;NOR=Kostnad for salg;SVE=FîrsÑljningskostnad';
      Text103@1101 : TextConst 'ENU=Cost Value;NOR=Kostverdi;SVE=KostnadsvÑrde';
      Text104@1061 : TextConst 'ENU=Sales Value;NOR=Salgsverdi;SVE=FîrsÑljningsvÑrde';
      Text105@1060 : TextConst 'ENU=Percentage of Completion;NOR=Lõpende;SVE=Procent fÑrdigstÑllt';
      Text106@1084 : TextConst 'ENU=POC;NOR=LùPENDE;SVE=PROCFéRDIGT';
      Text109@1127 : TextConst '@@@=Uppercase of the translation of cash flow work sheet with a max of 10 char;ENU=CFWKSH;NOR=KSFORSLAG;SVE=KFKALKB';
      Text110@1128 : TextConst 'ENU=Cash Flow Worksheet;NOR=Kontantstrõmforslag;SVE=Kalkylblad fîr kassaflîde';
      Text107@1121 : TextConst '@@@=Uppercase of the translation of assembly with a max of 10 char;ENU=ASSEMBLY;NOR=MONTERING;SVE=MONTERING';
      Text108@1125 : TextConst 'ENU=Assembly;NOR=Montering;SVE=Montering';
      Text111@1130 : TextConst 'ENU=GL;NOR=FINANS;SVE=REDOV';
      Text112@1131 : TextConst 'ENU=G/L Entry to Cost Accounting;NOR=Finanspost til kostregnskap;SVE=Redovisningstransaktion till kostnadsredovisning';
      Text113@1132 : TextConst '@@@=Uppercase of the translation of cost accounting journal with a max of 10 char;ENU=CAJOUR;NOR=KTKLADD;SVE=KFJOUR';
      Text114@1133 : TextConst 'ENU=Cost Journal;NOR=Kostkladd;SVE=Kostnadsjournal';
      Text115@1134 : TextConst '@@@=Uppercase of the translation of allocation with a max of 10 char;ENU=ALLOC;NOR=FORDEL;SVE=FôRD';
      Text116@1135 : TextConst 'ENU=Cost Allocation;NOR=Kostfordeling;SVE=Kostnadsfîrdelning';
      Text117@1137 : TextConst '@@@=Uppercase of the translation of Transfer Budget to Actual with a max of 10 char;ENU=TRABUD;NOR=OVRBUD;SVE=ôVERFBUD';
      Text118@1138 : TextConst 'ENU=Transfer Budget to Actual;NOR=Overfõr budsjett til faktisk;SVE=ôverfîr budget till utfall';
      InvtOrderTxt@1176 : TextConst '@@@=INVENTORY ORDERS;ENU=INVTORDER;NOR=LAGERORDRE';
      Text11012000@11012000 : TextConst 'ENU=PLANTINV;NOR=MASKINFAKT;SVE=MASKINFAKT';
      Text11012001@11012001 : TextConst 'ENU=Plant Invoice;NOR=Maskinfaktura;SVE=Maskinfaktura';
      Text11012002@1210190000 : TextConst 'ENU=COMPRSERV;NOR=COMPRSERV;SVE=JéMFSERV';
      Text11012003@1100528800 : TextConst 'ENU=COMPRLEAVE;NOR=COMPRLEAVE;SVE=JéMFFRèNV';
      BankClearingStandardCode1Tok@1085 : TextConst '@@@={Locked};ENU=AustrianBankleitzahl;NOR=AustrianBankleitzahl;SVE=AustrianBankleitzahl';
      BankClearingStandardDesc1Txt@1086 : TextConst 'ENU=Austrian BLZ number;NOR=ùsterriksk BLZ-nummer;SVE=ôsterrikiskt BLZ-nummer';
      BankClearingStandardCode2Tok@1088 : TextConst '@@@={Locked};ENU=CanadianPaymentsARN;NOR=CanadianPaymentsARN;SVE=CanadianPaymentsARN';
      BankClearingStandardDesc2Txt@1087 : TextConst 'ENU=Canadian ARN number;NOR=Kanadisk ARN-nummer;SVE=Kanadensiskt ARN-nummer';
      BankClearingStandardCode3Tok@1090 : TextConst '@@@={Locked};ENU=CHIPSParticipant;NOR=CHIPSParticipant;SVE=CHIPSParticipant';
      BankClearingStandardDesc3Txt@1089 : TextConst 'ENU=American CHIPS number;NOR=Amerikansk CHIPS-nummer;SVE=Amerikanskt CHIPS-nummer';
      BankClearingStandardCode4Tok@1092 : TextConst '@@@={Locked};ENU=CHIPSUniversal;NOR=CHIPSUniversal;SVE=CHIPSUniversal';
      BankClearingStandardDesc4Txt@1091 : TextConst 'ENU=American CHIPS universal number;NOR=Amerikansk CHIPS-universalnummer;SVE=Amerikanskt CHIPS-universalnummer';
      BankClearingStandardCode5Tok@1094 : TextConst '@@@={Locked};ENU=ExtensiveBranchNetwork;NOR=ExtensiveBranchNetwork;SVE=ExtensiveBranchNetwork';
      BankClearingStandardDesc5Txt@1093 : TextConst 'ENU=Extensive branch network number;NOR=Omfattende nettverk av bankfilialer;SVE=Utîkat kontorsnÑtverksnummer';
      BankClearingStandardCode6Tok@1096 : TextConst '@@@={Locked};ENU=FedwireRoutingNumber;NOR=FedwireRoutingNumber;SVE=FedwireRoutingNumber';
      BankClearingStandardDesc6Txt@1095 : TextConst 'ENU=American Fedwire/ABA routing number;NOR=Amerikansk Fedwire-/ABA-rutenummer;SVE=Amerikanskt Fedwire/ABA-clearingnummer';
      BankClearingStandardCode7Tok@1098 : TextConst '@@@={Locked};ENU=GermanBankleitzahl;NOR=GermanBankleitzahl;SVE=GermanBankleitzahl';
      BankClearingStandardDesc7Txt@1097 : TextConst 'ENU=German BLZ number;NOR=Tysk BLZ-nummer;SVE=Tyskt BLZ-nummer';
      BankClearingStandardCode8Tok@1102 : TextConst '@@@={Locked};ENU=HongKongBank;NOR=HongKongBank;SVE=HongKongBank';
      BankClearingStandardDesc8Txt@1099 : TextConst 'ENU=Hong Kong branch number;NOR=Hongkong-registreringsnummer;SVE=Hongkong-kontorsnummer';
      BankClearingStandardCode9Tok@1104 : TextConst '@@@={Locked};ENU=IrishNSC;NOR=IrishNSC;SVE=IrishNSC';
      BankClearingStandardDesc9Txt@1103 : TextConst 'ENU=Irish NSC number;NOR=Irsk NSC-nummer;SVE=IrlÑndskt NSC-nummer';
      BankClearingStandardCode10Tok@1119 : TextConst '@@@={Locked};ENU=ItalianDomestic;NOR=ItalianDomestic;SVE=ItalianDomestic';
      BankClearingStandardDesc10Txt@1118 : TextConst 'ENU=Italian domestic code;NOR=Italiensk innlandskode;SVE=Italiensk inhemsk kod';
      BankClearingStandardCode11Tok@1124 : TextConst '@@@={Locked};ENU=NewZealandNCC;NOR=NewZealandNCC;SVE=NewZealandNCC';
      BankClearingStandardDesc11Txt@1120 : TextConst 'ENU=New Zealand NCC number;NOR=Newzealandsk NCC-nummer;SVE=NyzeelÑndskt NCC-nummer';
      BankClearingStandardCode12Tok@1129 : TextConst '@@@={Locked};ENU=PortugueseNCC;NOR=PortugueseNCC;SVE=PortugueseNCC';
      BankClearingStandardDesc12Txt@1126 : TextConst 'ENU=Portuguese NCC number;NOR=Portugisisk NCC-nummer;SVE=Portugisiskt NCC-nummer';
      BankClearingStandardCode13Tok@1139 : TextConst '@@@={Locked};ENU=RussianCentralBankIdentificationCode;NOR=RussianCentralBankIdentificationCode;SVE=RussianCentralBankIdentificationCode';
      BankClearingStandardDesc13Txt@1136 : TextConst 'ENU=Russian CBI code;NOR=Russisk CBI-kode;SVE=Rysk CBI-kod';
      BankClearingStandardCode14Tok@1143 : TextConst '@@@={Locked};ENU=SouthAfricanNCC;NOR=SouthAfricanNCC;SVE=SouthAfricanNCC';
      BankClearingStandardDesc14Txt@1142 : TextConst 'ENU=South African NCC number;NOR=Sõrafrikansk NCC-nummer;SVE=Sydafrikanskt NCC-nummer';
      BankClearingStandardCode15Tok@1145 : TextConst '@@@={Locked};ENU=SpanishDomesticInterbanking;NOR=SpanishDomesticInterbanking;SVE=SpanishDomesticInterbanking';
      BankClearingStandardDesc15Txt@1144 : TextConst 'ENU=Spanish domestic interbanking number;NOR=Spansk innenlandsk nummer mellom banker;SVE=Spanskt inhemskt interbanknummer';
      BankClearingStandardCode16Tok@1147 : TextConst '@@@={Locked};ENU=SwissBC;NOR=SwissBC;SVE=SwissBC';
      BankClearingStandardDesc16Txt@1146 : TextConst 'ENU=Swiss BC number;NOR=Sveitsisk BC-nummer;SVE=Schweiziskt BC-nummer';
      BankClearingStandardCode17Tok@1151 : TextConst '@@@={Locked};ENU=SwissSIC;NOR=SwissSIC;SVE=SwissSIC';
      BankClearingStandardDesc17Txt@1150 : TextConst 'ENU=Swiss SIC number;NOR=Sveitsisk SIC-nummer;SVE=Schweiziskt SIC-nummer';
      BankClearingStandardCode18Tok@1149 : TextConst '@@@={Locked};ENU=UKDomesticSortCode;NOR=UKDomesticSortCode;SVE=UKDomesticSortCode';
      BankClearingStandardDesc18Txt@1148 : TextConst 'ENU=British sorting code;NOR=Britisk sorteringskode;SVE=Brittisk sorteringskod';
      BankDataConvPmtTypeCode1Tok@1140 : TextConst '@@@={Locked};ENU=IntAcc2Acc;NOR=IntAcc2Acc;SVE=IntAcc2Acc';
      BankDataConvPmtTypeDesc1Txt@1141 : TextConst 'ENU=International account to account transfer (standard);NOR=Internasjonal overfõring mellom kontoer (standard);SVE=Internationell îverfîring mellan konton (standard)';
      BankDataConvPmtTypeCode2Tok@1152 : TextConst '@@@={Locked};ENU=IntAcc2AccExp;NOR=IntAcc2AccExp;SVE=IntAcc2AccExp';
      BankDataConvPmtTypeDesc2Txt@1153 : TextConst 'ENU=International account to account transfer (express);NOR=Internasjonal overfõring mellom kontoer (ekspress);SVE=Internationell îverfîring mellan konton (express)';
      BankDataConvPmtTypeCode3Tok@1155 : TextConst '@@@={Locked};ENU=IntAcc2AccFoFa;NOR=IntAcc2AccFoFa;SVE=IntAcc2AccFoFa';
      BankDataConvPmtTypeDesc3Txt@1154 : TextConst 'ENU=International account to account transfer;NOR=Internasjonal overfõring mellom kontoer;SVE=Internationell îverfîring mellan konton';
      BankDataConvPmtTypeCode4Tok@1157 : TextConst '@@@={Locked};ENU=IntAcc2AccHighVal;NOR=IntAcc2AccHighVal;SVE=IntAcc2AccHighVal';
      BankDataConvPmtTypeDesc4Txt@1156 : TextConst 'ENU=International account to account transfer (high value);NOR=Internasjonal overfõring mellom kontoer (hõy verdi);SVE=Internationell îverfîring mellan konton (hîgt vÑrde)';
      BankDataConvPmtTypeCode5Tok@1159 : TextConst '@@@={Locked};ENU=IntAcc2AccInterComp;NOR=IntAcc2AccInterComp;SVE=IntAcc2AccInterComp';
      BankDataConvPmtTypeDesc5Txt@1158 : TextConst 'ENU=International account to account transfer (inter company);NOR=Internasjonal overfõring mellom kontoer (konsernintern);SVE=Internationell îverfîring mellan konton (koncernintern)';
      BankDataConvPmtTypeCode6Tok@1161 : TextConst '@@@={Locked};ENU=DomAcc2Acc;NOR=DomAcc2Acc;SVE=DomAcc2Acc';
      BankDataConvPmtTypeDesc6Txt@1160 : TextConst 'ENU=Domestic account to account transfer;NOR=Innenlandsk overfõring mellom kontoer;SVE=Inrikes îverfîring mellan konton';
      BankDataConvPmtTypeCode7Tok@1163 : TextConst '@@@={Locked};ENU=DomAcc2AccHighVal;NOR=DomAcc2AccHighVal;SVE=DomAcc2AccHighVal';
      BankDataConvPmtTypeDesc7Txt@1162 : TextConst 'ENU=Domestic account to account transfer (high value);NOR=Innenlandsk overfõring mellom kontoer (hõy verdi);SVE=Inrikes îverfîring mellan konton (hîgt vÑrde)';
      BankDataConvPmtTypeCode8Tok@1165 : TextConst '@@@={Locked};ENU=DomAcc2AccInterComp;NOR=DomAcc2AccInterComp;SVE=DomAcc2AccInterComp';
      BankDataConvPmtTypeDesc8Txt@1164 : TextConst 'ENU=Domestic account to account transfer (inter company);NOR=Innenlandsk overfõring mellom kontoer (konsernintern);SVE=Inrikes îverfîring mellan konton (koncernintern)';
      BankDataConvPmtTypeCode9Tok@1167 : TextConst '@@@={Locked};ENU=EurAcc2AccSepa;NOR=EurAcc2AccSepa;SVE=EurAcc2AccSepa';
      BankDataConvPmtTypeDesc9Txt@1166 : TextConst 'ENU=SEPA credit transfer;NOR=SEPA-kredittoverfõring;SVE=SEPA-kreditîverfîring';
      PEPPOL21_ElectronicFormatTxt@1168 : TextConst '@@@={Locked};ENU=PEPPOL 2.1;NOR=PEPPOL 2.1;SVE=PEPPOL 2.1';
      PEPPOL21_ElectronicFormatDescriptionTxt@1170 : TextConst 'ENU=PEPPOL 2.1 Format (Pan-European Public Procurement Online);NOR=PEPPOL 2.1-format (Pan-European Public Procurement Online);SVE=PEPPOL 2.1-format (Pan-European Public Procurement Online)';
      PEPPOL20_ElectronicFormatTxt@1172 : TextConst '@@@={Locked};ENU=PEPPOL 2.0;NOR=PEPPOL 2.0;SVE=PEPPOL 2.0';
      PEPPOL20_ElectronicFormatDescriptionTxt@1171 : TextConst 'ENU=PEPPOL 2.0 Format (Pan-European Public Procurement Online);NOR=PEPPOL 2.0-format (Pan-European Public Procurement Online);SVE=PEPPOL 2.0-format (Pan-European Public Procurement Online)';
      PEPPOLBIS3_ElectronicFormatTxt@1177 : TextConst '@@@={Locked};ENU=PEPPOL BIS3;NOR=PEPPOL BIS3;SVE=PEPPOL BIS3';
      PEPPOLBIS3_ElectronicFormatDescriptionTxt@1178 : TextConst 'ENU=PEPPOL BIS3 Format (Pan-European Public Procurement Online);NOR=PEPPOL BIS3-format (Pan-European Public Procurement Online);SVE=PEPPOL BIS3-format (Pan-European Public Procurement Online)';
      OIOUBLFormatTxt@1060001 : TextConst '@@@=Locked;ENU=OIOUBL';
      OIOUBLFormatDescriptionTxt@1060000 : TextConst 'ENU=OIOUBL Format (Offentlig Information Online Universal Business Language)';

    [External]
    PROCEDURE InitSetupTables@3();
    VAR
      GLSetup@1025 : Record 98;
      SalesSetup@1024 : Record 311;
      PurchSetup@1023 : Record 312;
      InvtSetup@1022 : Record 313;
      ResourcesSetup@1021 : Record 314;
      JobsSetup@1020 : Record 315;
      HumanResourcesSetup@1019 : Record 5218;
      MarketingSetup@1018 : Record 5079;
      InteractionTemplateSetup@1017 : Record 5122;
      ServiceMgtSetup@1016 : Record 5911;
      NonstockItemSetup@1015 : Record 5719;
      FASetup@1014 : Record 5603;
      CashFlowSetup@1007 : Record 843;
      CostAccSetup@1006 : Record 1108;
      WhseSetup@1004 : Record 5769;
      AssemblySetup@1002 : Record 905;
      VATReportSetup@1000 : Record 743;
      TaxSetup@1026 : Record 326;
      ConfigSetup@1001 : Record 8627;
      DataMigrationSetup@1009 : Record 1806;
      IncomingDocumentsSetup@1008 : Record 131;
      CompanyInfo@1003 : Record 79;
      PayrollIntegrationSetup@1080000 : Record 11128513;
      OCRSetup@1080001 : Record 11128512;
      SocialListeningSetup@1005 : Record 870;
      "4PSDataUpgrade"@1100529200 : Codeunit 11125347;
    BEGIN
      WITH GLSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SalesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH MarketingSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InteractionTemplateSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ServiceMgtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SocialListeningSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT(TRUE);
        END;

      WITH PurchSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InvtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH JobsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
          "4PSDataUpgrade".ExecuteDataPerCompanyUpgrade;  //**4PS.n
        END;

      WITH FASetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH HumanResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH WhseSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH NonstockItemSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CashFlowSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CostAccSetup DO
        IF WRITEPERMISSION THEN
          IF NOT FINDFIRST THEN BEGIN
            INIT;
            INSERT;
          END;

      WITH AssemblySetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH VATReportSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH TaxSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ConfigSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH DataMigrationSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH IncomingDocumentsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CompanyInfo DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          "Created DateTime" := CURRENTDATETIME;
          "Language Code Data Upgrade" := GLOBALLANGUAGE;  //** 4PS.n
          INSERT;
        END;

      //>>NAVNO
      WITH PayrollIntegrationSetup DO
        //IF ISEMPTY THEN BEGIN
        IF WRITEPERMISSION AND ISEMPTY THEN BEGIN
          INIT;
          IF INSERT THEN;
        END;

      WITH OCRSetup DO
        //IF ISEMPTY THEN BEGIN
        IF WRITEPERMISSION AND ISEMPTY THEN BEGIN
          INIT;
          IF INSERT THEN;
        END;
      //>>NAVNO
    END;

    LOCAL PROCEDURE InitSourceCodeSetup@9();
    VAR
      SourceCode@1001 : Record 230;
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      IF NOT (SourceCodeSetup.FINDFIRST OR SourceCode.FINDFIRST) THEN
        WITH SourceCodeSetup DO BEGIN
          INIT;
          InsertSourceCode(Sales,Text001,Text002);
          InsertSourceCode(Purchases,Text003,Text004);
          InsertSourceCode("Deleted Document",Text005,COPYSTR(FIELDCAPTION("Deleted Document"),1,30));
          InsertSourceCode("Inventory Post Cost",Text006,ReportName(REPORT::"Post Inventory Cost to G/L"));
          InsertSourceCode("Exchange Rate Adjmt.",Text007,ReportName(REPORT::"Adjust Exchange Rates"));
          InsertSourceCode("Close Income Statement",Text010,ReportName(REPORT::"Close Income Statement"));
          InsertSourceCode(Consolidation,Text011,Text012);
          InsertSourceCode("General Journal",Text013,PageName(PAGE::"General Journal"));
          InsertSourceCode("Sales Journal",Text014,PageName(PAGE::"Sales Journal"));
          InsertSourceCode("Purchase Journal",Text015,PageName(PAGE::"Purchase Journal"));
          InsertSourceCode("Cash Receipt Journal",Text016,PageName(PAGE::"Cash Receipt Journal"));
          InsertSourceCode("Payment Journal",Text017,PageName(PAGE::"Payment Journal"));
          InsertSourceCode("Payment Reconciliation Journal",PaymentReconJnlTok,PageName(PAGE::"Payment Reconciliation Journal"));
          InsertSourceCode("Item Journal",Text018,PageName(PAGE::"Item Journal"));
          InsertSourceCode(Transfer,Text063,Text064);
          InsertSourceCode("Item Reclass. Journal",Text065,PageName(PAGE::"Item Reclass. Journal"));
          InsertSourceCode("Phys. Inventory Journal",Text020,PageName(PAGE::"Phys. Inventory Journal"));
          InsertSourceCode("Revaluation Journal",Text066,PageName(PAGE::"Revaluation Journal"));
          InsertSourceCode("Consumption Journal",Text067,PageName(PAGE::"Consumption Journal"));
          InsertSourceCode("Output Journal",Text069,PageName(PAGE::"Output Journal"));
          InsertSourceCode("Production Journal",Text092,PageName(PAGE::"Production Journal"));
          InsertSourceCode("Capacity Journal",Text070,PageName(PAGE::"Capacity Journal"));
          InsertSourceCode("Resource Journal",Text022,PageName(PAGE::"Resource Journal"));
          InsertSourceCode("Job Journal",Text023,PageName(PAGE::"Job Journal"));
          InsertSourceCode("Job G/L Journal",Text096,PageName(PAGE::"Job G/L Journal"));
          InsertSourceCode("Job G/L WIP",Text097,Text098);
          InsertSourceCode("Sales Entry Application",Text024,Text025);
          InsertSourceCode("Unapplied Sales Entry Appln.",Text086,Text087);
          InsertSourceCode("Unapplied Purch. Entry Appln.",Text088,Text089);
          InsertSourceCode("Unapplied Empl. Entry Appln.",UnappliedEmplEntryApplnCodeTxt,UnappliedEmplEntryApplnTxt);
          InsertSourceCode(Reversal,Text090,Text091);
          InsertSourceCode("Purchase Entry Application",Text026,Text027);
          InsertSourceCode("Employee Entry Application",EmployeeEntryApplicationCodeTxt,EmployeeEntryApplicationTxt);
          InsertSourceCode("VAT Settlement",Text028,ReportName(REPORT::"Calc. and Post VAT Settlement"));
          InsertSourceCode("Compress G/L",Text029,ReportName(REPORT::"Date Compress General Ledger"));
          InsertSourceCode("Compress VAT Entries",Text030,ReportName(REPORT::"Date Compress VAT Entries"));
          InsertSourceCode("Compress Cust. Ledger",Text031,ReportName(REPORT::"Date Compress Customer Ledger"));
          InsertSourceCode("Compress Vend. Ledger",Text032,ReportName(REPORT::"Date Compress Vendor Ledger"));
          InsertSourceCode("Compress Res. Ledger",Text035,ReportName(REPORT::"Date Compress Resource Ledger"));
          //InsertSourceCode("Compress Job Ledger",Text036,Text099); //**4PS.o
          InsertSourceCode("Compress Job Ledger",Text036,ReportName(REPORT::"Date Compress Job Ledger")); //**4PS.n
          InsertSourceCode("Compress Bank Acc. Ledger",Text037,ReportName(REPORT::"Date Compress Bank Acc. Ledger"));
          InsertSourceCode("Compress Check Ledger",Text038,ReportName(REPORT::"Delete Check Ledger Entries"));
          InsertSourceCode("Financially Voided Check",Text039,Text040);
          InsertSourceCode(Reminder,Text041,Text042);
          InsertSourceCode("Finance Charge Memo",Text043,Text044);
          InsertSourceCode("Trans. Bank Rec. to Gen. Jnl.",Text076,ReportName(REPORT::"Trans. Bank Rec. to Gen. Jnl."));
          InsertSourceCode("Fixed Asset G/L Journal",Text045,PageName(PAGE::"Fixed Asset G/L Journal"));
          InsertSourceCode("Fixed Asset Journal",Text046,PageName(PAGE::"Fixed Asset Journal"));
          InsertSourceCode("Insurance Journal",Text047,PageName(PAGE::"Insurance Journal"));
          InsertSourceCode("Compress FA Ledger",Text048,ReportName(REPORT::"Date Compress FA Ledger"));
          InsertSourceCode("Compress Maintenance Ledger",Text049,ReportName(REPORT::"Date Compress Maint. Ledger"));
          InsertSourceCode("Compress Insurance Ledger",Text050,ReportName(REPORT::"Date Compress Insurance Ledger"));
          InsertSourceCode("Adjust Add. Reporting Currency",Text051,ReportName(REPORT::"Adjust Add. Reporting Currency"));
          InsertSourceCode(Flushing,Text99000004,Text99000005);
          InsertSourceCode("Adjust Cost",Text068,ReportName(REPORT::"Adjust Cost - Item Entries"));
          InsertSourceCode("Compress Item Budget",Text100,ReportName(REPORT::"Date Comp. Item Budget Entries"));
          InsertSourceCode("Whse. Item Journal",Text071,PageName(PAGE::"Whse. Item Journal"));
          InsertSourceCode("Whse. Phys. Invt. Journal",Text072,PageName(PAGE::"Whse. Phys. Invt. Journal"));
          InsertSourceCode("Whse. Reclassification Journal",Text073,PageName(PAGE::"Whse. Reclassification Journal"));
          InsertSourceCode("Compress Whse. Entries",Text083,ReportName(REPORT::"Date Compress Whse. Entries"));
          InsertSourceCode("Whse. Put-away",Text077,Text080);
          InsertSourceCode("Whse. Pick",Text078,Text081);
          InsertSourceCode("Whse. Movement",Text079,Text082);
          InsertSourceCode("Service Management",Text074,Text075);
          InsertSourceCode("IC General Journal",Text084,Text085);
          InsertSourceCode("Cash Flow Worksheet",Text109,Text110);
          InsertSourceCode(Assembly,Text107,Text108);
          InsertSourceCode("G/L Entry to CA",Text111,Text112);
          InsertSourceCode("Cost Journal",Text113,Text114);
          InsertSourceCode("Cost Allocation",Text115,Text116);
          InsertSourceCode("Transfer Budget to Actual",Text117,Text118);
          InsertSourceCode("Phys. Invt. Orders",InvtOrderTxt,PageName(PAGE::"Physical Inventory Order"));
          //**4PS.sn
          InsertSourceCode("Plant Invoice",Text11012000,Text11012001);
          InsertSourceCode("Compress Service Ledger",Text11012002,ReportName(REPORT::"Date Compress Service Ledger"));
          InsertSourceCode("Compress Leave Ledger",Text11012003,ReportName(REPORT::"Date Compress Leave Ledger"));
          //**4PS.en
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitStandardTexts@11();
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      IF NOT StandardText.FINDFIRST THEN BEGIN
        InsertStandardText(Text052,Text053);
        InsertStandardText(Text054,Text055);
        InsertStandardText(Text056,Text057);
        InsertStandardText(Text058,Text059);
      END;
    END;

    LOCAL PROCEDURE InitReportSelection@13();
    VAR
      ReportSelectionMgt@1000 : Codeunit 1901;
    BEGIN
      ReportSelectionMgt.InitReportSelectionSales;
      ReportSelectionMgt.InitReportSelectionPurch;
      ReportSelectionMgt.InitReportSelectionBank;
      ReportSelectionMgt.InitReportSelectionCust;
      ReportSelectionMgt.InitReportSelectionInvt;
      ReportSelectionMgt.InitReportSelectionProd;
      ReportSelectionMgt.InitReportSelectionServ;
      ReportSelectionMgt.InitReportSelectionWhse;

      ReportSelectionMgt.InitReportSelection4PS; //**4PS.n
    END;

    LOCAL PROCEDURE InitJobWIPMethods@15();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      IF NOT JobWIPMethod.FINDFIRST THEN BEGIN
        InsertJobWIPMethod(Text101,Text101,JobWIPMethod."Recognized Costs"::"At Completion",
          JobWIPMethod."Recognized Sales"::"At Completion",4);
        InsertJobWIPMethod(Text102,Text102,JobWIPMethod."Recognized Costs"::"Cost of Sales",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",2);
        InsertJobWIPMethod(Text103,Text103,JobWIPMethod."Recognized Costs"::"Cost Value",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",0);
        InsertJobWIPMethod(Text104,Text104,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Sales Value",1);
        InsertJobWIPMethod(Text106,Text105,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Percentage of Completion",3);
      END;
    END;

    LOCAL PROCEDURE InitBankExportImportSetup@14();
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      IF NOT BankExportImportSetup.FINDFIRST THEN BEGIN
        InsertBankExportImportSetup(SEPACTCodeTxt,SEPACTNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA CT-Export File",XMLPORT::"SEPA CT pain.001.001.03",CODEUNIT::"SEPA CT-Check Line");
        InsertBankExportImportSetup(SEPADDCodeTxt,SEPADDNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA DD-Export File",XMLPORT::"SEPA DD pain.008.001.02",CODEUNIT::"SEPA DD-Check Line");

        //NAVFI
        InsertBankExportImportSetup(LegacyBankExportCodeTxt,LegacyBankExportNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"Export SEPA Payment File",0,0);

        //NAVNO
        InsertBankExportImportSetup(ExportRemittanceCodeTxt,ExportRemittanceNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"Export Remittance",0,0);

      END;
    END;

    LOCAL PROCEDURE InitBankClearingStandard@18();
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      IF NOT BankClearingStandard.FINDFIRST THEN BEGIN
        InsertBankClearingStandard(BankClearingStandardCode1Tok,BankClearingStandardDesc1Txt);
        InsertBankClearingStandard(BankClearingStandardCode2Tok,BankClearingStandardDesc2Txt);
        InsertBankClearingStandard(BankClearingStandardCode3Tok,BankClearingStandardDesc3Txt);
        InsertBankClearingStandard(BankClearingStandardCode4Tok,BankClearingStandardDesc4Txt);
        InsertBankClearingStandard(BankClearingStandardCode5Tok,BankClearingStandardDesc5Txt);
        InsertBankClearingStandard(BankClearingStandardCode6Tok,BankClearingStandardDesc6Txt);
        InsertBankClearingStandard(BankClearingStandardCode7Tok,BankClearingStandardDesc7Txt);
        InsertBankClearingStandard(BankClearingStandardCode8Tok,BankClearingStandardDesc8Txt);
        InsertBankClearingStandard(BankClearingStandardCode9Tok,BankClearingStandardDesc9Txt);
        InsertBankClearingStandard(BankClearingStandardCode10Tok,BankClearingStandardDesc10Txt);
        InsertBankClearingStandard(BankClearingStandardCode11Tok,BankClearingStandardDesc11Txt);
        InsertBankClearingStandard(BankClearingStandardCode12Tok,BankClearingStandardDesc12Txt);
        InsertBankClearingStandard(BankClearingStandardCode13Tok,BankClearingStandardDesc13Txt);
        InsertBankClearingStandard(BankClearingStandardCode14Tok,BankClearingStandardDesc14Txt);
        InsertBankClearingStandard(BankClearingStandardCode15Tok,BankClearingStandardDesc15Txt);
        InsertBankClearingStandard(BankClearingStandardCode16Tok,BankClearingStandardDesc16Txt);
        InsertBankClearingStandard(BankClearingStandardCode17Tok,BankClearingStandardDesc17Txt);
        InsertBankClearingStandard(BankClearingStandardCode18Tok,BankClearingStandardDesc18Txt);
      END;
    END;

    LOCAL PROCEDURE InitBankDataConvServiceSetup@19();
    VAR
      BankDataConvServiceSetup@1000 : Record 1260;
    BEGIN
      WITH BankDataConvServiceSetup DO BEGIN
        IF NOT GET THEN BEGIN
          INIT;
          INSERT(TRUE);
        END;
        IF "Sign-up URL" = 'http://www.amcbanking.dk/nav/register' THEN BEGIN
          "Sign-up URL" := 'https://amcbanking.com/store/amc-banking/microsoft-dynamics-nav/version-2015-2016/';
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE InitDocExchServiceSetup@25();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO
        IF NOT GET THEN BEGIN
          INIT;
          SetURLsToDefault;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitBankDataConversionPmtType@21();
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      IF NOT BankDataConversionPmtType.FINDFIRST THEN BEGIN
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode1Tok,BankDataConvPmtTypeDesc1Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode2Tok,BankDataConvPmtTypeDesc2Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode3Tok,BankDataConvPmtTypeDesc3Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode4Tok,BankDataConvPmtTypeDesc4Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode5Tok,BankDataConvPmtTypeDesc5Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode6Tok,BankDataConvPmtTypeDesc6Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode7Tok,BankDataConvPmtTypeDesc7Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode8Tok,BankDataConvPmtTypeDesc8Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode9Tok,BankDataConvPmtTypeDesc9Txt);
      END;
    END;

    LOCAL PROCEDURE InitElectronicFormats@23();
    VAR
      ElectronicDocumentFormat@1000 : Record 61;
    BEGIN
      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.1",0,ElectronicDocumentFormat.Usage::"Sales Invoice");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.1",0,ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.1",0,ElectronicDocumentFormat.Usage::"Service Invoice");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.1",0,ElectronicDocumentFormat.Usage::"Service Credit Memo");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",0,ElectronicDocumentFormat.Usage::"Sales Validation");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",0,ElectronicDocumentFormat.Usage::"Service Validation");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.0",0,ElectronicDocumentFormat.Usage::"Sales Invoice");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.0",0,ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.0",0,ElectronicDocumentFormat.Usage::"Service Invoice");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.0",0,ElectronicDocumentFormat.Usage::"Service Credit Memo");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",0,ElectronicDocumentFormat.Usage::"Sales Validation");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",0,ElectronicDocumentFormat.Usage::"Service Validation");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOLBIS3_ElectronicFormatTxt,PEPPOLBIS3_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Sales Inv. PEPPOL BIS3.0",0,ElectronicDocumentFormat.Usage::"Sales Invoice");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOLBIS3_ElectronicFormatTxt,PEPPOLBIS3_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Sales CrM. PEPPOL BIS3.0",0,ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOLBIS3_ElectronicFormatTxt,PEPPOLBIS3_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Sales Inv. PEPPOL BIS3.0",0,ElectronicDocumentFormat.Usage::"Service Invoice");

      ElectronicDocumentFormat.InsertElectronicFormat(
        PEPPOLBIS3_ElectronicFormatTxt,PEPPOLBIS3_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Sales CrM. PEPPOL BIS3.0",0,ElectronicDocumentFormat.Usage::"Service Credit Memo");

      // OIOUBL
      ElectronicDocumentFormat.InsertElectronicFormat(
        OIOUBLFormatTxt,OIOUBLFormatDescriptionTxt,
        CODEUNIT::"OIOUBL Export Sales Invoice",0,ElectronicDocumentFormat.Usage::"Sales Invoice");

      ElectronicDocumentFormat.InsertElectronicFormat(
        OIOUBLFormatTxt,OIOUBLFormatDescriptionTxt,
        CODEUNIT::"OIOUBL Export Sales Cr. Memo",0,ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      ElectronicDocumentFormat.InsertElectronicFormat(
        OIOUBLFormatTxt,OIOUBLFormatDescriptionTxt,
        CODEUNIT::"OIOUBL Check Sales Header",0,ElectronicDocumentFormat.Usage::"Sales Validation");
    END;

    LOCAL PROCEDURE InsertSourceCode@1(VAR SourceCodeDefCode@1000 : Code[10];Code@1001 : Code[10];Description@1002 : Text[50]);
    VAR
      SourceCode@1003 : Record 230;
    BEGIN
      SourceCodeDefCode := Code;
      SourceCode.INIT;
      SourceCode.Code := Code;
      SourceCode.Description := Description;
      SourceCode.INSERT;
    END;

    LOCAL PROCEDURE InsertStandardText@4(Code@1000 : Code[20];Description@1001 : Text[50]);
    VAR
      StandardText@1002 : Record 7;
    BEGIN
      StandardText.INIT;
      StandardText.Code := Code;
      StandardText.Description := Description;
      StandardText.INSERT;
    END;

    LOCAL PROCEDURE PageName@5(PageID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Page,PageID),1,30));
    END;

    LOCAL PROCEDURE ReportName@6(ReportID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Report,ReportID),1,30));
    END;

    PROCEDURE InsertClientAddIns@8();
    VAR
      ClientAddIn@1000 : Record 2000000069;
    BEGIN
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.DynamicsOnlineConnect','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics Online Connect control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.BusinessChart','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics BusinessChart control add-in',
        APPLICATIONPATH + 'Add-ins\BusinessChart\Microsoft.Dynamics.Nav.Client.BusinessChart.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.TimelineVisualization','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Interactive visualizion for a timeline of events','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PingPong','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics PingPong control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.VideoPlayer','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics VideoPlayer control add-in',
        APPLICATIONPATH + 'Add-ins\VideoPlayer\Microsoft.Dynamics.Nav.Client.VideoPlayer.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PageReady','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics PageReady control add-in',
        APPLICATIONPATH + 'Add-ins\PageReady\Microsoft.Dynamics.Nav.Client.PageReady.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.SocialListening','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Social Listening control add-in',
        APPLICATIONPATH + 'Add-ins\SocialListening\Microsoft.Dynamics.Nav.Client.SocialListening.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.WebPageViewer','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Web Page Viewer control add-in',
        APPLICATIONPATH + 'Add-ins\WebPageViewer\Microsoft.Dynamics.Nav.Client.WebPageViewer.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.OAuthIntegration','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft OAuth Integration control add-in',
        APPLICATIONPATH + 'Add-ins\OAuthIntegration\Microsoft.Dynamics.Nav.Client.OAuthIntegration.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.FlowIntegration','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Flow Integration control add-in',
        APPLICATIONPATH + 'Add-ins\FlowIntegration\Microsoft.Dynamics.Nav.Client.FlowIntegration.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.RoleCenterSelector','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Role Center Selector control add-in',
        APPLICATIONPATH + 'Add-ins\RoleCenterSelector\Microsoft.Dynamics.Nav.Client.RoleCenterSelector.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.WelcomeWizard','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Welcome Wizard control add-in',
        APPLICATIONPATH + 'Add-ins\WelcomeWizard\Microsoft.Dynamics.Nav.Client.WelcomeWizard.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PowerBIManagement','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Power BI Management control add-in',
        APPLICATIONPATH + 'Add-ins\PowerBIManagement\Microsoft.Dynamics.Nav.Client.PowerBIManagement.zip');
    END;

    PROCEDURE InsertClientAddIn@17(ControlAddInName@1000 : Text[220];PublicKeyToken@1001 : Text[20];Version@1002 : Text[25];Category@1006 : Option;Description@1003 : Text[250];ResourceFilePath@1005 : Text[250]);
    VAR
      ClientAddIn@1004 : Record 2000000069;
    BEGIN
      IF ClientAddIn.GET(ControlAddInName,PublicKeyToken,Version) THEN
        EXIT;

      ClientAddIn.INIT;
      ClientAddIn."Add-in Name" := ControlAddInName;
      ClientAddIn."Public Key Token" := PublicKeyToken;
      ClientAddIn.Version := Version;
      ClientAddIn.Category := Category;
      ClientAddIn.Description := Description;
      IF EXISTS(ResourceFilePath) THEN
        ClientAddIn.Resource.IMPORT(ResourceFilePath);
      IF ClientAddIn.INSERT THEN;
    END;

    LOCAL PROCEDURE InsertJobWIPMethod@7(Code@1000 : Code[20];Description@1001 : Text[50];RecognizedCosts@1002 : Option;RecognizedSales@1003 : Option;SystemDefinedIndex@1004 : Integer);
    VAR
      JobWIPMethod@1005 : Record 1006;
    BEGIN
      JobWIPMethod.INIT;
      JobWIPMethod.Code := Code;
      JobWIPMethod.Description := Description;
      JobWIPMethod."WIP Cost" := TRUE;
      JobWIPMethod."WIP Sales" := TRUE;
      JobWIPMethod."Recognized Costs" := RecognizedCosts;
      JobWIPMethod."Recognized Sales" := RecognizedSales;
      JobWIPMethod.Valid := TRUE;
      JobWIPMethod."System Defined" := TRUE;
      JobWIPMethod."System-Defined Index" := SystemDefinedIndex;
      JobWIPMethod.INSERT;
    END;

    LOCAL PROCEDURE InsertBankExportImportSetup@16(CodeTxt@1000 : Text[20];NameTxt@1001 : Text[100];DirectionOpt@1002 : Option;CodeunitID@1003 : Integer;XMLPortID@1004 : Integer;CheckCodeunitID@1006 : Integer);
    VAR
      BankExportImportSetup@1005 : Record 1200;
    BEGIN
      WITH BankExportImportSetup DO BEGIN
        INIT;
        Code := CodeTxt;
        Name := NameTxt;
        Direction := DirectionOpt;
        "Processing Codeunit ID" := CodeunitID;
        "Processing XMLport ID" := XMLPortID;
        "Check Export Codeunit" := CheckCodeunitID;
        "Preserve Non-Latin Characters" := FALSE;
        // PEB0033
        //INSERT;
        IF INSERT THEN;
        // 0033
      END;
    END;

    LOCAL PROCEDURE InsertBankClearingStandard@12(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      WITH BankClearingStandard DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertBankDataConversionPmtType@20(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      WITH BankDataConversionPmtType DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InitApplicationAreasForSaaS@22();
    VAR
      ExperienceTierSetup@1004 : Record 9176;
      Company@1005 : Record 2000000006;
      CompanyInformationMgt@1002 : Codeunit 1306;
      ApplicationAreaMgmtFacade@1006 : Codeunit 9179;
      PermissionManager@1000 : Codeunit 9002;
      ExperienceTier@1003 : Text;
    BEGIN
      ApplicationAreaMgmtFacade.SetHideApplicationAreaError(TRUE);
      IF NOT ApplicationAreaMgmtFacade.GetExperienceTierCurrentCompany(ExperienceTier) THEN
        IF PermissionManager.SoftwareAsAService THEN BEGIN
          Company.GET(COMPANYNAME);

          IF NOT (CompanyInformationMgt.IsDemoCompany OR Company."Evaluation Company") THEN
            ApplicationAreaMgmtFacade.SaveExperienceTierCurrentCompany(ExperienceTierSetup.FIELDCAPTION(Essential))
          ELSE
            ApplicationAreaMgmtFacade.SaveExperienceTierCurrentCompany(ExperienceTierSetup.FIELDCAPTION(Basic));
          EXIT;
        END;

      IF ExperienceTier <> ExperienceTierSetup.FIELDCAPTION(Custom) THEN
        ApplicationAreaMgmtFacade.RefreshExperienceTierCurrentCompany;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnRun@2();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCompanyInitialize@27();
    BEGIN
    END;

    [EventSubscriber(Table,2000000006,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterCompanyDeleteRemoveReferences@10(VAR Rec@1000 : Record 2000000006;RunTrigger@1001 : Boolean);
    VAR
      AssistedCompanySetupStatus@1002 : Record 1802;
      UserGroupMember@1003 : Record 9001;
      UserGroupAccessControl@1004 : Record 9002;
      ApplicationAreaSetup@1005 : Record 9178;
      CustomReportLayout@1006 : Record 9650;
      ReportLayoutSelection@1007 : Record 9651;
      ExperienceTierSetup@1008 : Record 9176;
    BEGIN
      IF Rec.ISTEMPORARY THEN
        EXIT;

      AssistedCompanySetupStatus.SETRANGE("Company Name",Rec.Name);
      AssistedCompanySetupStatus.DELETEALL;
      UserGroupMember.SETRANGE("Company Name",Rec.Name);
      UserGroupMember.DELETEALL;
      UserGroupAccessControl.SETRANGE("Company Name",Rec.Name);
      UserGroupAccessControl.DELETEALL;
      ApplicationAreaSetup.SETRANGE("Company Name",Rec.Name);
      ApplicationAreaSetup.DELETEALL;
      CustomReportLayout.SETRANGE("Company Name",Rec.Name);
      CustomReportLayout.DELETEALL;
      ReportLayoutSelection.SETRANGE("Company Name",Rec.Name);
      ReportLayoutSelection.DELETEALL;

      IF ExperienceTierSetup.GET(Rec.Name) THEN
        ExperienceTierSetup.DELETE;
    END;

    LOCAL PROCEDURE InsertVmaAppFeatures@1100525001();
    VAR
      VMAAppFeature@1000 : Record 11125888;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //4PS
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(VMAAppFeature) THEN
        VMAAppFeature.InitializeFeatures;
    END;

    PROCEDURE InsertSalesReportTextSetup@1100525000();
    VAR
      InitializeSlsTextLineSetup@1100525000 : Codeunit 11012373;
    BEGIN
      //**4PS
      InitializeSlsTextLineSetup.RUN;
    END;

    BEGIN
    {
      4PS, dbeekman, 22-10-2008:
        - ReportSelection changed.
      NAVSE11.00.00.20348
    }
    END.
  }
}

