OBJECT Table 25 Vendor Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00,NAVSE.FI.DK.NO,4PSSE,PN,PE5;
  }
  PROPERTIES
  {
    Permissions=TableData 25=m,
                TableData 122=rm,
                TableData 124=rm;
    CaptionML=[ENU=Vendor Ledger Entry;
               NOR=Leverandõrpost;
               SVE=Lev.reskontratransaktion];
    LookupPageID=Page29;
    DrillDownPageID=Page29;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              NOR=Lõpenr.;
                                                              SVE=Lîpnr] }
    { 3   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverandõrnr.;
                                                              SVE=Leverantîrsnr] }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokfõringsdato;
                                                              SVE=Bokfîringsdatum] }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              NOR=Bilagstype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    NOR=" ,Betaling,Faktura,Kreditnota,Rentenota,Purring,Refusjon";
                                                                    SVE=" ,Betalning,Faktura,Kreditnota,RÑntefaktura,BetalningspÜminnelse,èterbetalning"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record 130;
                                                            BEGIN
                                                              //IncomingDocument.HyperlinkToDocument("Document No.","Posting Date"); //**4PS.o
                                                              LookupDocument; //**4PS.n
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
    { 7   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 8   ;   ;Vendor Name         ;Text100       ;CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverandõrnavn;
                                                              SVE=Leverantîrsnamn] }
    { 11  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 13  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                               Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Amount;
                                                              NOR=Belõp;
                                                              SVE=Belopp];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Remaining Amount;
                                                              NOR=Restbelõp;
                                                              SVE=èterstÜende belopp];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Original Amt. (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Entry Type=FILTER(Initial Entry),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Original Amt. (LCY);
                                                              NOR=Opprinnelig belõp (NOK);
                                                              SVE=Ursprungligt belopp (BVA)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Remaining Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Remaining Amt. (LCY);
                                                              NOR=Restbelõp (NOK);
                                                              SVE=èterstÜende belopp (BVA)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 17  ;   ;Amount (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                       Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Amount (LCY);
                                                              NOR=Belõp (NOK);
                                                              SVE=Belopp (BVA)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Purchase (LCY)      ;Decimal       ;CaptionML=[ENU=Purchase (LCY);
                                                              NOR=Kjõp (NOK);
                                                              SVE=Inkîp (BVA)];
                                                   AutoFormatType=1 }
    { 20  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=[ENU=Inv. Discount (LCY);
                                                              NOR=Fakturarabatt (NOK);
                                                              SVE=Fakturarabatt (BVA)];
                                                   AutoFormatType=1 }
    { 21  ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              NOR=Kjõp fra-leverandõrnr.;
                                                              SVE=Inkîpsleverantîrsnr] }
    { 22  ;   ;Vendor Posting Group;Code20        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              NOR=Bokfõringsgruppe - leverandõr;
                                                              SVE=Leverantîrsbokfîringsmall] }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 - kode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Global dimensjon 2 - kode;
                                                              SVE=Global dimension 2 kod];
                                                   CaptionClass='1,1,2' }
    { 25  ;   ;Purchaser Code      ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Purchaser Code;
                                                              NOR=Innkjõperkode;
                                                              SVE=Inkîparkod] }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              NOR=Bruker-ID;
                                                              SVE=AnvÑndar-ID] }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              NOR=Kildespor;
                                                              SVE=Ursprungskod] }
    { 33  ;   ;On Hold             ;Code3         ;TableRelation="On Hold Code".Code;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1100528200 : Record 454;
                                                              BEGIN
                                                                //**4PS.sn
                                                                //**4PS.sn DC
                                                                IF (CurrFieldNo = FIELDNO("On Hold")) AND
                                                                   FPSLicenseManagement.LicenseAndReadPermissionForTable(ApprovalEntry) AND
                                                                   ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"])
                                                                THEN BEGIN
                                                                  IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                    ApprovalEntry.SETRANGE("Table ID", 122);
                                                                    ApprovalEntry.SETRANGE("Document Type", ApprovalEntry."Document Type"::Invoice);
                                                                  END ELSE BEGIN
                                                                    ApprovalEntry.SETRANGE("Table ID",124);
                                                                    ApprovalEntry.SETRANGE("Document Type", ApprovalEntry."Document Type"::"Credit Memo");
                                                                  END;
                                                                  ApprovalEntry.SETRANGE("Document No.", "Document No.");
                                                                  ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Created, ApprovalEntry.Status::Open);
                                                                  IF NOT ApprovalEntry.ISEMPTY THEN
                                                                    ERROR(Text11012010);

                                                                  ApprovalEntry.SETFILTER(Status, '%1', ApprovalEntry.Status::Rejected);
                                                                  IF NOT ApprovalEntry.ISEMPTY THEN
                                                                    ERROR(Text11012011);

                                                                END;
                                                                //**4PS.sn DC

                                                                IF OnHoldRec.GET("On Hold") THEN
                                                                  "Approvement Initials" := OnHoldRec."Default Approvement Initials";

                                                                UpdatePostedDocument;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=[ENU=On Hold;
                                                              NOR=Avvent;
                                                              SVE=Stoppad] }
    { 34  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              NOR=Utligningsbilagstype;
                                                              SVE=Kopplas till dokumenttyp];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    NOR=" ,Betaling,Faktura,Kreditnota,Rentenota,Purring,Refusjon";
                                                                    SVE=" ,Betalning,Faktura,Kreditnota,RÑntefaktura,BetalningspÜminnelse,èterbetalning"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 35  ;   ;Applies-to Doc. No. ;Code20        ;CaptionML=[ENU=Applies-to Doc. No.;
                                                              NOR=Utligningsbilagsnr.;
                                                              SVE=Kopplas till ver.nr] }
    { 36  ;   ;Open                ;Boolean       ;CaptionML=[ENU=Open;
                                                              NOR=èpne;
                                                              SVE=ôppen] }
    { 37  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              NOR=Forfallsdato;
                                                              SVE=Fîrfallodatum] }
    { 38  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              NOR=Kont.rabattdato;
                                                              SVE=Kassarabattsdatum] }
    { 39  ;   ;Original Pmt. Disc. Possible;Decimal;
                                                   CaptionML=[ENU=Original Pmt. Disc. Possible;
                                                              NOR=Mulig opprinnelig kont.rab.;
                                                              SVE=Urspr. kassarabatt mîjlig];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 40  ;   ;Pmt. Disc. Rcd.(LCY);Decimal       ;CaptionML=[ENU=Pmt. Disc. Rcd.(LCY);
                                                              NOR=Mott. kont.rabatt (NOK);
                                                              SVE=ErhÜllna kassarabatter (BVA)];
                                                   AutoFormatType=1 }
    { 43  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              NOR=Positiv;
                                                              SVE=Positiv] }
    { 44  ;   ;Closed by Entry No. ;Integer       ;TableRelation="Vendor Ledger Entry";
                                                   CaptionML=[ENU=Closed by Entry No.;
                                                              NOR=Lukket av lõpenr.;
                                                              SVE=Avslutat med lîpnr] }
    { 45  ;   ;Closed at Date      ;Date          ;CaptionML=[ENU=Closed at Date;
                                                              NOR=Lukket per dato;
                                                              SVE=Avslutat med datum] }
    { 46  ;   ;Closed by Amount    ;Decimal       ;CaptionML=[ENU=Closed by Amount;
                                                              NOR=Lukket av belõp;
                                                              SVE=Avslutat med belopp];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 47  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              NOR=Utlignings-ID;
                                                              SVE=Koppla till ID] }
    { 49  ;   ;Journal Batch Name  ;Code10        ;TestTableRelation=No;
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              NOR=Kladdenavn;
                                                              SVE=Journalnamn] }
    { 50  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              NOR=èrsaksspor;
                                                              SVE=Uppfîljningskod] }
    { 51  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              NOR=Motkontotype;
                                                              SVE=Motkontotyp];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                                    NOR=Finans,Kunde,Leverandõr,Bank,Aktiva;
                                                                    SVE=Redov.konto,Kund,Leverantîr,Bankkonto,AnlÑggningstillgÜng];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 52  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              NOR=Motkontonr.;
                                                              SVE=Motkonto] }
    { 53  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              NOR=Transaksjonsnr.;
                                                              SVE=Verifikationslîpnr] }
    { 54  ;   ;Closed by Amount (LCY);Decimal     ;CaptionML=[ENU=Closed by Amount (LCY);
                                                              NOR=Lukket av belõp (NOK);
                                                              SVE=Avslutat med belopp (BVA)];
                                                   AutoFormatType=1 }
    { 58  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                       Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount;
                                                              NOR=Debetbelõp;
                                                              SVE=Debetbelopp];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                        Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                        Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount;
                                                              NOR=Kreditbelõp;
                                                              SVE=Kreditbelopp];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                             Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                             Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              NOR=Debetbelõp (NOK);
                                                              SVE=Debetbelopp (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 61  ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                              Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                              Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              NOR=Kreditbelõp (NOK);
                                                              SVE=Kreditbelopp (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              NOR=Bilagsdato;
                                                              SVE=Dokumentdatum] }
    { 63  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              NOR=Eksterndokumentnr.;
                                                              SVE=Externt dokumentnr] }
    { 64  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr.serie;
                                                              SVE=Nr-serie] }
    { 65  ;   ;Closed by Currency Code;Code10     ;TableRelation=Currency;
                                                   CaptionML=[ENU=Closed by Currency Code;
                                                              NOR=Lukket av valutakode;
                                                              SVE=Avslutat med valutakod] }
    { 66  ;   ;Closed by Currency Amount;Decimal  ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Closed by Currency Amount;
                                                              NOR=Lukket av valutabelõp;
                                                              SVE=Avslutat med valutabelopp];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Closed by Currency Code" }
    { 73  ;   ;Adjusted Currency Factor;Decimal   ;CaptionML=[ENU=Adjusted Currency Factor;
                                                              NOR=Justert valutafaktor;
                                                              SVE=Justerad valutafaktor];
                                                   DecimalPlaces=0:15 }
    { 74  ;   ;Original Currency Factor;Decimal   ;CaptionML=[ENU=Original Currency Factor;
                                                              NOR=Opprinnelig valutafaktor;
                                                              SVE=Ursprunglig valutafaktor];
                                                   DecimalPlaces=0:15 }
    { 75  ;   ;Original Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Entry Type=FILTER(Initial Entry),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Original Amount;
                                                              NOR=Opprinnelig belõp;
                                                              SVE=Ursprungligt belopp];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 76  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              NOR=Datofilter;
                                                              SVE=Datumfilter] }
    { 77  ;   ;Remaining Pmt. Disc. Possible;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   CaptionML=[ENU=Remaining Pmt. Disc. Possible;
                                                              NOR=Mulig resterende kont.rab.;
                                                              SVE=èterstÜende kassarabatt mîjlig];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 78  ;   ;Pmt. Disc. Tolerance Date;Date     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Disc. Tolerance Date;
                                                              NOR=Dato for kontantrabattoleranse;
                                                              SVE=Datum fîr kassarabattolerans] }
    { 79  ;   ;Max. Payment Tolerance;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Remaining Amount");

                                                                IF "Max. Payment Tolerance" * Amount < 0 THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Max. Payment Tolerance") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   CaptionML=[ENU=Max. Payment Tolerance;
                                                              NOR=Maks. betalingstoleranse;
                                                              SVE=Max. betalningstolerans];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 81  ;   ;Accepted Payment Tolerance;Decimal ;CaptionML=[ENU=Accepted Payment Tolerance;
                                                              NOR=Tillatt betalingstoleranse;
                                                              SVE=Accepterad betalningstolerans];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 82  ;   ;Accepted Pmt. Disc. Tolerance;Boolean;
                                                   CaptionML=[ENU=Accepted Pmt. Disc. Tolerance;
                                                              NOR=Godkjent kont.rab.toleranse;
                                                              SVE=Accepterad kassarabattolerans] }
    { 83  ;   ;Pmt. Tolerance (LCY);Decimal       ;CaptionML=[ENU=Pmt. Tolerance (LCY);
                                                              NOR=Bet.toleranse (NOK);
                                                              SVE=Betal.tolerans (BVA)];
                                                   AutoFormatType=1 }
    { 84  ;   ;Amount to Apply     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS("Remaining Amount");

                                                                IF "Amount to Apply" * "Remaining Amount" < 0 THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION("Remaining Amount")));

                                                                IF ABS("Amount to Apply") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   CaptionML=[ENU=Amount to Apply;
                                                              NOR=Belõp som skal utlignes;
                                                              SVE=Belopp att koppla];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 85  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              NOR=KI-partnerkode;
                                                              SVE=Konc.int. partnerkod] }
    { 86  ;   ;Applying Entry      ;Boolean       ;CaptionML=[ENU=Applying Entry;
                                                              NOR=Utligningspost;
                                                              SVE=Kopplingstransaktion] }
    { 87  ;   ;Reversed            ;Boolean       ;CaptionML=[ENU=Reversed;
                                                              NOR=Tilbakefõrt;
                                                              SVE=èterfîrd] }
    { 88  ;   ;Reversed by Entry No.;Integer      ;TableRelation="Vendor Ledger Entry";
                                                   CaptionML=[ENU=Reversed by Entry No.;
                                                              NOR=Tilbakefõrt ved lõpenr.;
                                                              SVE=èterfîrd per lîpnr];
                                                   BlankZero=Yes }
    { 89  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="Vendor Ledger Entry";
                                                   CaptionML=[ENU=Reversed Entry No.;
                                                              NOR=Tilbakefõrt lõpenr.;
                                                              SVE=èterfîrt lîpnr];
                                                   BlankZero=Yes }
    { 90  ;   ;Prepayment          ;Boolean       ;CaptionML=[ENU=Prepayment;
                                                              NOR=Forskudd;
                                                              SVE=Fîrskottsbetalning] }
    { 170 ;   ;Creditor No.        ;Code20        ;OnValidate=BEGIN
                                                                IF ("Creditor No." <> '') AND ("Recipient Bank Account" <> '') THEN
                                                                  FIELDERROR("Recipient Bank Account",
                                                                    STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Creditor No."),FIELDCAPTION("Recipient Bank Account")))
                                                                ELSE

                                                                //>>NAVDK
                                                                GLSetup.GET;
                                                                //>> PN-01
                                                                //IF GLSetup."Danish localization active" THEN
                                                                  IF GLSetup."Danish Localization Active" AND ("Recipient Bank Account" = '') AND ("Creditor No." <> '') THEN
                                                                //<< PN-01
                                                                  "Creditor No." := PADSTR('',MAXSTRLEN("Creditor No.") - STRLEN("Creditor No."),'0') + "Creditor No.";
                                                              END;

                                                   CaptionML=[ENU=Creditor No.;
                                                              NOR=Kreditornr.;
                                                              SVE=FordringsÑgarenr.] }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=VAR
                                                                PaymentMethod@1060001 : Record 289;
                                                                FIKManagement@1060000 : Codeunit 11128589;
                                                              BEGIN
                                                                IF "Payment Reference" <> '' THEN BEGIN
                                                                //  TESTFIELD("Creditor No.");
                                                                  //>>NAVDK
                                                                  GLSetup.GET;
                                                                  IF GLSetup."Danish Localization Active" THEN BEGIN
                                                                    TESTFIELD("Payment Method Code");
                                                                    PaymentMethod.GET("Payment Method Code");
                                                                    BEGIN
                                                                      PaymentMethod.TESTFIELD("Payment Type Validation");
                                                                      CASE PaymentMethod."Payment Type Validation" OF
                                                                        PaymentMethod."Payment Type Validation"::"FIK 01",
                                                                        PaymentMethod."Payment Type Validation"::"FIK 73":
                                                                          ERROR(PmtReferenceErr,FIELDCAPTION("Payment Reference"),PaymentMethod.TABLECAPTION,"Payment Method Code");
                                                                      END;
                                                                      "Payment Reference" := FIKManagement.EvaluateFIK("Payment Reference","Payment Method Code");
                                                                    END;
                                                                  END;
                                                                  //<<NAVDK
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Reference;
                                                              NOR=Betalingsreferanse;
                                                              SVE=Betalningsreferens];
                                                   Numeric=Yes }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                BankAccount@1060001 : Record 270;
                                                                PaymentMethod@1060000 : Record 289;
                                                                VendBankAcc@1060002 : Record 288;
                                                                FIKManagement@1060003 : Codeunit 11128589;
                                                                PmtExportMgt@1060004 : Codeunit 1210;
                                                              BEGIN
                                                                IF GLSetup."Danish Localization Active" THEN BEGIN
                                                                  TESTFIELD(Open,TRUE);
                                                                  IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                                                                    IF PaymentMethod.GET("Payment Method Code") THEN BEGIN
                                                                      IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::" " THEN
                                                                        EXIT;
                                                                      BankAccount.GET("Bal. Account No.");
                                                                      CASE PaymentMethod."Payment Type Validation" OF
                                                                        PaymentMethod."Payment Type Validation"::"FIK 01",PaymentMethod."Payment Type Validation"::"FIK 73":
                                                                          "Payment Reference" := '';
                                                                        PaymentMethod."Payment Type Validation"::"FIK 04",PaymentMethod."Payment Type Validation"::"FIK 71":
                                                                          "Payment Reference" := FIKManagement.EvaluateFIK("Payment Reference","Payment Method Code");
                                                                      END;
                                                                      IF VendBankAcc.GET("Vendor No.","Recipient Bank Account") THEN
                                                                        PmtExportMgt.CheckBankTransferCountryRegion(BankAccount."Country/Region Code",VendBankAcc."Country/Region Code",PaymentMethod);
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              NOR=BetalingsmÜte - kode;
                                                              SVE=BetalningssÑtt] }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=[ENU=Applies-to Ext. Doc. No.;
                                                              NOR=Ekst. utligningsdok.nr.;
                                                              SVE=Kopplas till externt dok.nr] }
    { 288 ;   ;Recipient Bank Account;Code20      ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF ("Recipient Bank Account" <> '') AND ("Creditor No." <> '') THEN
                                                                  FIELDERROR("Creditor No.",
                                                                    STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));
                                                              END;

                                                   CaptionML=[ENU=Recipient Bank Account;
                                                              NOR=Mottakerbankkonto;
                                                              SVE=Mottagarens bankkonto] }
    { 289 ;   ;Message to Recipient;Text140       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Message to Recipient;
                                                              NOR=Melding til mottaker;
                                                              SVE=Meddelande till mottagare] }
    { 290 ;   ;Exported to Payment File;Boolean   ;CaptionML=[ENU=Exported to Payment File;
                                                              NOR=Lest ut til betalingsfil;
                                                              SVE=Exporterat till betalningsfil];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              NOR=Dimensjonssett-ID;
                                                              SVE=DimensionsuppsÑttnings-ID];
                                                   Editable=No }
    { 13650;  ;Giro Acc. No.       ;Code8         ;OnValidate=BEGIN
                                                                IF ("Giro Acc. No." <> '') THEN BEGIN
                                                                  IF ("Recipient Bank Account" <> '') THEN
                                                                    FIELDERROR("Recipient Bank Account",
                                                                      STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Giro Acc. No."),FIELDCAPTION("Recipient Bank Account")))
                                                                  ELSE
                                                                    "Giro Acc. No." := PADSTR('',MAXSTRLEN("Giro Acc. No.") - STRLEN("Giro Acc. No."),'0') + "Giro Acc. No.";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Giro Acc. No.;
                                                   Description=NAVDK }
    { 11012000;;Subcontracting Invoice;Boolean    ;OnValidate=BEGIN
                                                                IF NOT Open OR NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
                                                                  FIELDERROR("Subcontracting Invoice",Text11012000);

                                                                IF ("Subcontracting Invoice" <> xRec."Subcontracting Invoice") AND ("Subcontracting Invoice" = FALSE) THEN
                                                                  "WKA approval" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Subcontracting Invoice;
                                                              NOR=Underentrepenõrsfaktura;
                                                              SVE=Underentreprenadsfaktura];
                                                   Editable=Yes }
    { 11012010;;Payment Agreement  ;Code20        ;TableRelation="Payment Agreement".Code WHERE (Sub Contractor=FIELD(Vendor No.));
                                                   OnValidate=VAR
                                                                AgreementRec@1000000000 : Record 11012028;
                                                              BEGIN
                                                                IF AgreementRec.GET("Payment Agreement") THEN BEGIN
                                                                  AgreementRec.TESTFIELD(Date);
                                                                  AgreementRec.TESTFIELD(Description);
                                                                  AgreementRec.TESTFIELD("Signed Return Date");
                                                                  IF "Currency Code" = '' THEN
                                                                    "Avg. Wage Rate" := AgreementRec."Avg. Wage Rate"
                                                                  ELSE
                                                                    "Avg. Wage Rate" :=
                                                                      ROUND(
                                                                        CurrencyExchRate.ExchangeAmtLCYToFCY(
                                                                          0,'',"Posting Date","Currency Code",
                                                                          AgreementRec."Avg. Wage Rate",
                                                                          CurrencyExchRate.ExchangeRate(0,'',"Posting Date","Currency Code",FALSE),FALSE));

                                                                  "Contribution Percentage Labor" := AgreementRec."Contribution Percentage Labor";
                                                                  "Contribution Percentage Total" := AgreementRec."Contribution Percentage Total";
                                                                  "Pay To Tax Authority" := AgreementRec."Pay To Tax Authority";
                                                                  "Actual Effective Date" := AgreementRec."Expected Effective Date";
                                                                  "Actual End Date" := AgreementRec."Expected Enddate";
                                                                END;

                                                                IF "Payment Agreement" <> '' THEN
                                                                  VALIDATE("Number of Hours", 1)
                                                                ELSE
                                                                  VALIDATE("Number of Hours", 0);
                                                              END;

                                                   CaptionML=[ENU=Payment Agreement;
                                                              NOR=BetalingsvilkÜr;
                                                              SVE=Betalningsvillkor] }
    { 11012020;;Actual Effective Date;Date        ;OnValidate=BEGIN
                                                                IF ("Actual Effective Date" > "Actual End Date") AND ("Actual End Date" <> 0D) THEN
                                                                  FIELDERROR("Actual Effective Date",STRSUBSTNO(Text11012001,FIELDCAPTION("Actual End Date")));
                                                              END;

                                                   CaptionML=[ENU=Actual Effective Date;
                                                              NOR=Faktisk effektueringsdato;
                                                              SVE=Verkligt ikrafttrÑdandedatum] }
    { 11012030;;Actual End Date    ;Date          ;OnValidate=BEGIN
                                                                IF ("Actual Effective Date" > "Actual End Date") AND ("Actual End Date" <> 0D) THEN
                                                                  FIELDERROR("Actual End Date",STRSUBSTNO(Text11012002,FIELDCAPTION("Actual Effective Date")));
                                                              END;

                                                   CaptionML=[ENU=Actual End Date;
                                                              NOR=Faktisk sluttdato;
                                                              SVE=Verkligt slutdatum] }
    { 11012033;;Applied Amount (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Entry Type=CONST(Application),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Applied Amount (LCY);
                                                              NOR=Utlignet belõp (NOK);
                                                              SVE=TillÑmpat belopp (BVA)];
                                                   Editable=No }
    { 11012040;;Number of Hours    ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateWageCharge("Number of Hours","Avg. Wage Rate","Currency Code","Labor Amount");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=[ENU=Number of Hours;
                                                              NOR=Antall timer;
                                                              SVE=Antal timmar];
                                                   MinValue=0 }
    { 11012050;;Avg. Wage Rate     ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateWageCharge("Number of Hours","Avg. Wage Rate","Currency Code","Labor Amount");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=[ENU=Avg. Wage Rate;
                                                              NOR=Gjennomsnitlig lõnnssats;
                                                              SVE=Gen. Lîneavgift];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 11012060;;Labor Amount       ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateRate("Number of Hours","Labor Amount","Avg. Wage Rate");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=[ENU=Labor Amount;
                                                              NOR=Arbeidskraftsbelõp;
                                                              SVE=Arbetskraftsbelopp];
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012070;;Contribution Percentage Labor;Decimal;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Contribution Percentage Labor" = 0) AND ("Contribution Percentage Labor" <> 0) THEN BEGIN
                                                                  "Contribution Percentage Total" := 0;
                                                                  "Fixed B Amount per Hour" := 0;
                                                                END;
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   OnLookup=VAR
                                                              ContBusRel@1000000001 : Record 5054;
                                                              ContIndustGroup@11012000 : Record 5058;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.", "Vendor No.");
                                                              IF NOT ContBusRel.FIND('-') THEN
                                                                ERROR(Text11012003,ContBusRel.TABLECAPTION,FIELDCAPTION("Vendor No."),"Vendor No.");

                                                              ContIndustGroup.SETRANGE("Contact No.",ContBusRel."Contact No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGroup) = ACTION::LookupOK THEN BEGIN
                                                                "Contribution Percentage Labor" := ContIndustGroup."Contribution Percentage Labor";
                                                                "Contribution Percentage Total" := ContIndustGroup."Contribution Percentage Total";
                                                                 VALIDATE("Contribution Percentage Labor");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Contribution Percentage Labor;
                                                              NOR=Dekningsbidrag, arbeidskraft;
                                                              SVE=TÑckningsbidrag, arbetskraft];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012071;;Contribution Percentage Total;Decimal;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Contribution Percentage Total" = 0) AND ("Contribution Percentage Total" <> 0) THEN BEGIN
                                                                  "Contribution Percentage Labor" := 0;
                                                                  "Fixed B Amount per Hour" := 0;
                                                                END;
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   OnLookup=VAR
                                                              ContBusRel@1000000001 : Record 5054;
                                                              ContIndustGroup@11012000 : Record 5058;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.", "Vendor No.");
                                                              IF NOT ContBusRel.FIND('-') THEN
                                                                ERROR(Text11012003,ContBusRel.TABLECAPTION,FIELDCAPTION("Vendor No."),"Vendor No.");

                                                              ContIndustGroup.SETRANGE("Contact No.",ContBusRel."Contact No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGroup) = ACTION::LookupOK THEN BEGIN
                                                                "Contribution Percentage Labor" := ContIndustGroup."Contribution Percentage Labor";
                                                                "Contribution Percentage Total" := ContIndustGroup."Contribution Percentage Total";
                                                                 VALIDATE("Contribution Percentage Total");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Contribution Percentage Invoice Total;
                                                              NOR=Dekningsbidrag, faktura totalt;
                                                              SVE=TÑckningsbidrag, faktura totalt];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012073;;Fixed B Amount per Hour;Decimal   ;OnValidate=BEGIN
                                                                IF (xRec."Fixed B Amount per Hour" = 0) AND ("Fixed B Amount per Hour" <> 0) THEN BEGIN
                                                                  "Contribution Percentage Labor" := 0;
                                                                  "Contribution Percentage Total" := 0;
                                                                END;
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   OnLookup=VAR
                                                              ContBusRel@1100528201 : Record 5054;
                                                              ContIndustGroup@1100528200 : Record 5058;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.", "Vendor No.");
                                                              IF NOT ContBusRel.FIND('-') THEN
                                                                ERROR(Text11012003,ContBusRel.TABLECAPTION,FIELDCAPTION("Vendor No."),"Vendor No.");

                                                              ContIndustGroup.SETRANGE("Contact No.",ContBusRel."Contact No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGroup) = ACTION::LookupOK THEN BEGIN
                                                                "Contribution Percentage Total" := ContIndustGroup."Contribution Percentage Total";
                                                                "Contribution Percentage Labor" := ContIndustGroup."Contribution Percentage Labor";
                                                                "Fixed B Amount per Hour" := ContIndustGroup."Fixed B Amount per Hour";
                                                                 VALIDATE("Fixed B Amount per Hour");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Fixed B Amount per Hour;
                                                              SVE=Fast B-belopp per timme] }
    { 11012080;;Pay To Tax Authority;Boolean      ;OnValidate=BEGIN
                                                                TESTFIELD("Pay To Tax Authority", FALSE);
                                                                WKACalculationCu.CalculateWageChart
                                                                  ("Vendor No.","Labor Amount","Contribution Percentage Labor","Pay To Tax Authority",
                                                                   "Currency Code","Wage Charge (to B Account)","Wage Charge (to Tax Authority)","Contribution Percentage Total",
                                                                   "Fixed B Amount per Hour","Number of Hours",GetInvoiceAmount);
                                                              END;

                                                   CaptionML=[ENU=Pay To Tax Authority;
                                                              NOR=Betal til skattemyndighet;
                                                              SVE=Betala till skattemyndighet] }
    { 11012090;;Wage Charge (to B Account);Decimal;OnValidate=BEGIN
                                                                WKACalculationCu.ValidateWageCharge(
                                                                  "Labor Amount","Currency Code","Wage Charge (to B Account)",
                                                                  "Contribution Percentage Labor","Contribution Percentage Total","Fixed B Amount per Hour",GetInvoiceAmount);
                                                              END;

                                                   CaptionML=[ENU=Wage Charge (to B Account);
                                                              NOR=Lõnnsgebyr (til B-konto);
                                                              SVE=Lîneavgift (till B-konto)];
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012100;;Wage Charge (to Tax Authority);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Wage Charge (to Tax Authority)", 0);
                                                                WKACalculationCu.ValidateWageTax(
                                                                  "Vendor No.","Labor Amount","Currency Code","Contribution Percentage Labor",
                                                                  "Wage Charge (to Tax Authority)","Contribution Percentage Total","Fixed B Amount per Hour",GetInvoiceAmount);
                                                              END;

                                                   CaptionML=[ENU=Wage Charge (to Tax Authority);
                                                              NOR=Lõnnsgebyr (til skattemyndighet);
                                                              SVE=Lîneavgift (till skattemyndigheten)];
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012110;;Nat.Ins.Contr.     ;Decimal       ;CaptionML=[ENU=Nat.Ins.Contr.;
                                                              NOR=Nat.Ins.Contr.;
                                                              SVE=Sociala lînefîrmÜner];
                                                   MinValue=0;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012120;;Memo               ;Text250       ;CaptionML=[ENU=Memo;
                                                              NOR=Merknad;
                                                              SVE=PM] }
    { 11012130;;Transaction Mode B Payments;Code20;CaptionML=[ENU=Transaction Mode Code B Payments;
                                                              NOR=Transaksjonsmodus for Kode B-betalninger;
                                                              SVE=TransaktionslÑge fîr kod B-betalningar] }
    { 11012140;;Bank Account Code B Payments;Code20;
                                                   TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Vendor No.),
                                                                                                   B-Account=CONST(Yes));
                                                   CaptionML=[ENU=Bank Account Code B Payments;
                                                              NOR=Bankkontokode B-betalinger;
                                                              SVE=Bankkontokod B-betalningar] }
    { 11012150;;Approved           ;Boolean       ;CaptionML=[ENU=Approved;
                                                              NOR=Godkjent;
                                                              SVE=GodkÑnda] }
    { 11012160;;WKA approval       ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT (Open AND "Subcontracting Invoice" AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])) THEN
                                                                  FIELDERROR("WKA approval",Text11012004);
                                                              END;

                                                   CaptionML=[ENU=WKA approval;
                                                              NOR=WKA-godkjenning;
                                                              SVE=WKA-godkÑnnande] }
    { 11012170;;Applies-to ID Tax  ;Code50        ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID Tax;
                                                              NOR=Utlignings-ID-skatt;
                                                              SVE=GÑller ID skatt] }
    { 11012180;;Applies-to ID Enf.Inst.;Code50    ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID Enf.Inst.;
                                                              NOR=Utlignings-ID enf.inst.;
                                                              SVE=GÑller ID enf.inst.] }
    { 11012190;;Approvement Initials;Code10       ;TableRelation="Invoice Approval Initials".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                UpdatePostedDocument;
                                                              END;

                                                   CaptionML=[ENU=Approvement Initials;
                                                              NOR=Godkjenningsinitialer;
                                                              SVE=GodkÑnnandeinitialer] }
    { 11012200;;Applies-to ID B    ;Code50        ;CaptionML=[ENU=Applies-to ID B;
                                                              NOR=Utlignings-ID B;
                                                              SVE=GÑller ID B] }
    { 11012220;;Remaining Amt. Due Date (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Remaining Amt. Due Date (LCY);
                                                              NOR=GjenstÜende bel. Forfallsdato (NOK);
                                                              SVE=èterstÜende bel. Fîrfallodatum (BVA)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012230;;Remaining Amt. Doc. Date (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Document Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Remaining Amt. Doc. Date (LCY);
                                                              NOR=GjenstÜende bel. Dok.dato (NOK);
                                                              SVE=èterstÜende bel. dok.ddatum (BVA)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012235;;Open Approval Entry Present;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Approval Entry" WHERE (Document Type=FIELD(Document Type),
                                                                                             Document No.=FIELD(Document No.),
                                                                                             Status=FILTER(Open|Created),
                                                                                             Table ID=FILTER(122|124)));
                                                   CaptionML=[ENU=Open Approval Entry Present;
                                                              NOR=Attestrad finnes;
                                                              SVE=GodkÑnnanderad finns];
                                                   Editable=No }
    { 11012240;;Comment Line Present;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Comment Line Present;
                                                              NOR=Kommentarrad finnes;
                                                              SVE=Kommentarsrad finns];
                                                   Editable=No }
    { 11012250;;Your Reference     ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              NOR=Din referanse;
                                                              SVE=Er referens] }
    { 11012260;;Project No.        ;Code20        ;TableRelation=Job;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   Editable=No }
    { 11012270;;Purchase Order No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header"."Order No." WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              NOR=Innkjõpsordrenr.;
                                                              SVE=Inkîpsordernr];
                                                   Editable=No }
    { 11012280;;Actual Vendor Name ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=[ENU=Actual Vendor Name;
                                                              NOR=Leverandõrsnavn;
                                                              SVE=Leverantîrsnamn];
                                                   Editable=No }
    { 11012290;;Description 2      ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 11012291;;Pmt. Discount Date 2;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date 2;
                                                              NOR=Kontantrabattdato 2;
                                                              SVE=Kassa Rabattdatum 2];
                                                   Description=4PS }
    { 11012292;;Original Pmt. Disc. Possible 2;Decimal;
                                                   CaptionML=[ENU=Original Pmt. Disc. Possible 2;
                                                              NOR=Opprinnelig kontantrabatt mulig 2;
                                                              SVE=Urspr. kassarabatt mîjlig 2];
                                                   Description=4PS;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012293;;Pmt. Disc. Tolerance Date 2;Date  ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Disc. Tolerance Date 2;
                                                              NOR=Kontantrabatt, toleransedato 2;
                                                              SVE=Betalingsrabatt, toleransdatum 2];
                                                   Description=4PS }
    { 11012294;;Pmt. Discount Date 3;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date 3;
                                                              NOR=Kontantrabattdato 3;
                                                              SVE=Kassa Rabattdatum 3];
                                                   Description=4PS }
    { 11012295;;Original Pmt. Disc. Possible 3;Decimal;
                                                   CaptionML=[ENU=Original Pmt. Disc. Possible 3;
                                                              NOR=Opprinnelig kontantrabatt mulig 3;
                                                              SVE=Urspr. kassarabatt mîjlig 3];
                                                   Description=4PS;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012296;;Pmt. Disc. Tolerance Date 3;Date  ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Disc. Tolerance Date 3;
                                                              NOR=Kontantrabatt, toleransedato 3;
                                                              SVE=Betalingsrabatt, toleransdatum 3];
                                                   Description=4PS }
    { 11012297;;Remain. Pmt. Disc. Possible 2;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   CaptionML=[ENU=Remaining Pmt. Disc. Possible 2;
                                                              NOR=GjenstÜende kontantrabatt mulig 2;
                                                              SVE=èterstÜende kassarabatt mîjlig 2];
                                                   Description=4PS;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012298;;Remain. Pmt. Disc. Possible 3;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   CaptionML=[ENU=Remaining Pmt. Disc. Possible 3;
                                                              NOR=GjenstÜende kontantrabatt mulig 3;
                                                              SVE=èterstÜende kassarabatt mîjlig 3];
                                                   Description=4PS;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012300;;Last Application Date;Date        ;FieldClass=FlowField;
                                                   CalcFormula=Max("Detailed Vendor Ledg. Entry"."Posting Date" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Entry Type=FILTER(Application)));
                                                   CaptionML=[ENU=Last Application Date;
                                                              NOR=Siste utligningsdato;
                                                              SVE=Senaste programdatum];
                                                   Editable=No }
    { 11012310;;Subcontract No.    ;Code20        ;TableRelation="Subcontractor Contract".No. WHERE (Vendor No.=FIELD(Vendor No.),
                                                                                                     Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Subcontract No.;
                                                              NOR=Underentreprenõrnr.;
                                                              SVE=Underentreprenîrsnr];
                                                   Description=Retention }
    { 11012320;;Invoice DMS Status ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header"."DMS Status" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                               No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Invoice DMS Status;
                                                              NOR=Faktura, DMS-status];
                                                   OptionCaptionML=[ENU=" ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected";
                                                                    NOR=" ,,,Venter pÜ radtransaksjon,,,Start arbeidsflyt,,,I arbeidsflyt,,,Godkjent,,,Avvist";
                                                                    SVE=" ,,,InvÑntar ifyllande av rad,,,Starta arbetsflîde,,,I arbetsflîde,,,GodkÑnt,,,Avvisad"];
                                                   OptionString=[ ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected];
                                                   Editable=No }
    { 11012321;;Invoice DMS Status Text;Text80    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header"."DMS Status Text" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                                    No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Invoice DMS Status Text;
                                                              NOR=Faktura, DMS-statustekst];
                                                   Editable=No }
    { 11012322;;Credit Memo DMS Status;Option     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Cr. Memo Hdr."."DMS Status" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                                 No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Credit Memo DMS Status;
                                                              NOR=Kreditnota DMS-status];
                                                   OptionCaptionML=[ENU=" ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected";
                                                                    NOR=" ,,,Venter pÜ radtransaksjon,,,Start arbeidsflyt,,,I arbeidsflyt,,,Godkjent,,,Avvist";
                                                                    SVE=" ,,,InvÑntar ifyllande av rad,,,Starta arbetsflîde,,,I arbetsflîde,,,GodkÑnt,,,Avvisad"];
                                                   OptionString=[ ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected];
                                                   Editable=No }
    { 11012323;;Credit Memo DMS Status Text;Text80;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Cr. Memo Hdr."."DMS Status Text" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                                      No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Credit Memo DMS Status Text;
                                                              NOR=Kreditnota DMS-statustekst];
                                                   Editable=No }
    { 11012330;;Service Order No.  ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr;
                                                              SVE=Serviceordernr];
                                                   Editable=No }
    { 11012340;;Pay VAT Amt. on B-Acc. Vendor;Boolean;
                                                   CaptionML=ENU=Pay VAT Amount on B-Account Vendor }
    { 11012350;;IBAN               ;Code50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Bank Account".IBAN WHERE (Vendor No.=FIELD(Vendor No.),
                                                                                                        Code=FIELD(Recipient Bank Account)));
                                                   CaptionML=[ENU=IBAN;
                                                              SVE=IBAN];
                                                   Editable=No }
    { 11012360;;IBAN B-Acc.        ;Code50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Bank Account".IBAN WHERE (Vendor No.=FIELD(Vendor No.),
                                                                                                        Code=FIELD(Bank Account Code B Payments)));
                                                   CaptionML=[ENU=IBAN B-Acc.;
                                                              SVE=IBAN B-Konto];
                                                   Editable=No }
    { 11012370;;Reversal VAT       ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Reversal VAT;
                                                   Editable=No }
    { 11012371;;Reversal VAT Posted on;Date       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Reversal VAT Posted on }
    { 11012380;;Unpaid Invoice     ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Unpaid Invoice }
    { 11128000;;Last VP Pack No.   ;Integer       ;TableRelation="VP Pack";
                                                   CaptionML=[ENU=Last VP Pack No.;
                                                              SVE=Senaste LB Buntnr];
                                                   BlankZero=Yes;
                                                   Description=RFC1078 }
    { 11128010;;Code for Bank of Sweden;Code3     ;CaptionML=[ENU=Code for Bank of Sweden;
                                                              NOR=Kode for Bank of Sweden;
                                                              SVE=Riksbankskod];
                                                   Numeric=Yes }
    { 11128012;;Initial Entry Due Date;Date       ;OnValidate=BEGIN
                                                                ERROR(''); //140304, forbidden to modify :)
                                                              END;

                                                   CaptionML=[ENU=Initial Entry Due Date;
                                                              NOR=Opprinnelig transaksjon forfallsdato;
                                                              SVE=Initialt fîrfallodatum];
                                                   Editable=No }
    { 11128270;;Symbrio Export Date;Date          ;OnValidate=VAR
                                                                Text11128270@1101285000 : TextConst 'ENU=You do not have permission to change the Symbrio export date!;NOR=Du har ikke tillatelse til Ü endre Symbrio-eksportdatoen;SVE=Du saknar behîrighet att Ñndra Symbrio exportdatum!';
                                                                UserSetup@1101285001 : Record 91;
                                                              BEGIN
                                                                //RFC-1220
                                                                IF UserSetup.GET(USERID) THEN BEGIN
                                                                  IF NOT UserSetup."Allow Symbrio Export Date" THEN BEGIN
                                                                    MESSAGE('%1',Text11128270);
                                                                    "Symbrio Export Date" := xRec."Symbrio Export Date";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Symbrio Export Date" := xRec."Symbrio Export Date";
                                                                END;
                                                                //RFC-1220
                                                              END;

                                                   CaptionML=[ENU=Symbrio Export Date;
                                                              NOR="Eksportdato for symbrio ";
                                                              SVE=Symbrio exportdatum];
                                                   Description=I045#P8;
                                                   Editable=No }
    { 12048858;;VP Pack No.        ;Integer       ;TableRelation="VP Pack";
                                                   CaptionML=ENU=VP Pack No.;
                                                   BlankZero=Yes;
                                                   Description=PEB0091 }
    { 12048859;;OCR No.            ;Code30        ;CaptionML=[ENU=OCR No.;
                                                              SVE=OCR nr];
                                                   Description=PEB0091 }
    { 12048860;;Name               ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=[ENU=Name;
                                                              SVE=Namn];
                                                   Description=PEB0091;
                                                   Editable=No }
    { 15000000;;Remittance ID      ;Integer       ;TableRelation="Remittance Payment Order".ID;
                                                   CaptionML=[ENU=Remittance ID;
                                                              NOR=Remitterings ID];
                                                   Description=NAVNO }
    { 15000001;;KID                ;Code30        ;OnValidate=VAR
                                                                Tools@1080000 : Codeunit 11128515;
                                                                ErrorMess@1080001 : Text[250];
                                                              BEGIN
                                                                IF KID <> '' THEN BEGIN
                                                                  ErrorMess := Tools.CheckKID(KID);
                                                                  IF ErrorMess <> '' THEN
                                                                    ERROR(ErrorMess);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=KID;
                                                              NOR=KID;
                                                              SVE=KID];
                                                   Description=NAVNO }
    { 15000014;;Payment Type Code Abroad;Code2    ;TableRelation="Payment Type Code Abroad";
                                                   CaptionML=[ENU=Payment Type Code Abroad;
                                                              NOR=Betalingsartkode utland;
                                                              SVE=Betalningstypkod, utland];
                                                   Description=NAVNO }
    { 15000015;;Specification (Norges Bank);Code60;CaptionML=[ENU=Specification (Norges Bank);
                                                              NOR=Spesifikasjon (Norges Bank)];
                                                   Description=NAVNO }
    { 32000000;;Message Type       ;Option        ;InitValue=Reference No.;
                                                   CaptionML=[ENU=Message Type;
                                                              SVE=Meddelandetyp];
                                                   OptionCaptionML=ENU=Reference No.,Invoice Information,Message,Long Message,Tax Message;
                                                   OptionString=Reference No.,Invoice Information,Message,Long Message,Tax Message;
                                                   Description=NAVFI }
    { 32000001;;Invoice Message    ;Text128       ;CaptionML=ENU=Invoice Message;
                                                   Description=NAVFI 250->128 }
    { 32000002;No;Invoice Message 2;Text250       ;CaptionML=ENU=Invoice Message 2;
                                                   Description=NAVFI }
    { 32000003;;Payment Date       ;Date          ;CaptionML=[ENU=Payment Date;
                                                              SVE=Betalningsdatum];
                                                   Description=NAVFI }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Vendor No.,Posting Date,Currency Code   ;SumIndexFields=Purchase (LCY),Inv. Discount (LCY) }
    { No ;Vendor No.,Currency Code,Posting Date    }
    {    ;Document No.                             }
    {    ;External Document No.                    }
    {    ;Vendor No.,Open,Positive,Due Date,Currency Code }
    {    ;Open,Due Date                            }
    {    ;Document Type,Vendor No.,Posting Date,Currency Code;
                                                   SumIndexFields=Purchase (LCY),Inv. Discount (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Closed by Entry No.                      }
    {    ;Transaction No.                          }
    { No ;Vendor No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code;
                                                   SumIndexFields=Purchase (LCY),Inv. Discount (LCY) }
    { No ;Vendor No.,Open,Global Dimension 1 Code,Global Dimension 2 Code,Positive,Due Date,Currency Code }
    { No ;Open,Global Dimension 1 Code,Global Dimension 2 Code,Due Date }
    { No ;Document Type,Vendor No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Vendor No.,Applies-to ID,Open,Positive,Due Date }
    {    ;Vendor Posting Group                     }
    {    ;Pmt. Discount Date                       }
    {    ;Document Type,Due Date,Open              }
    {    ;Open,Vendor No.,Currency Code,Posting Date }
    {    ;Open,Document No.,Global Dimension 1 Code,Global Dimension 2 Code,Document Date,Due Date }
    {    ;VP Pack No.,Currency Code                }
    {    ;Open,Document Type,On Hold,Symbrio Export Date }
    {    ;Vendor No.                               }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Description,Vendor No.,Posting Date,Document Type,Document No. }
    { 2   ;Brick               ;Document No.,Description,Remaining Amt. (LCY),Due Date }
  }
  CODE
  {
    VAR
      FieldIsNotEmptyErr@1002 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 cannot be used while %2 has a value.;NOR=%1 kan ikke brukes mens %2 har en verdi.;SVE=%1 kan inte anvÑndas medan %2 har ett vÑrde.';
      MustHaveSameSignErr@1000 : TextConst 'ENU=must have the same sign as %1;NOR=mÜ ha samme fortegn som %1;SVE=mÜste ha samma tecken som %1';
      MustNotBeLargerErr@1001 : TextConst 'ENU=must not be larger than %1;NOR=kan ikke vëre stõrre enn %1;SVE=fÜr inte vara stîrre Ñn %1';
      Text11012000@11012000 : TextConst 'ENU=only editable for Document Type Invoice or Credit Memo and Open;NOR=kun redigerbar for dokumenttypen faktura eller kreditnota og Üpne;SVE=endast redigerbar fîr dokumenttypen Faktura eller Kreditnota och ôppna';
      Text11012001@11012001 : TextConst 'ENU=must occur before %1;NOR=mÜ inntreffe fõr %1;SVE=mÜste intrÑffa fîre %1';
      Text11012002@11012002 : TextConst 'ENU=must occur after  %1;NOR=mÜ forekomme etter %1;SVE=mÜste intrÑffa efter %1';
      Text11012003@11012003 : TextConst 'ENU=No %1 known for %2 %3;NOR=Ingen %1 kjent for %2 %3;SVE=Ingen %1 kÑnns till fîr %2 %3';
      Text11012004@11012004 : TextConst 'ENU=only editable for Document Type Invoice or Credit Memo, Subcontracting and Open;NOR=kun redigerbar for dokumenttypen faktura eller kreditnota, underentrepenõr og Üpne;SVE=endast redigerbar fîr dokumenttypen Faktura eller Kreditnota, Underentreprenad och ôppna';
      CurrencyExchRate@11012007 : Record 330;
      OnHoldRec@1100525000 : Record 11012031;
      WKACalculationCu@11012005 : Codeunit 11012020;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012005@1100528800 : TextConst 'ENU=On Hold Code cannot be blank. This is taken from the Purchase Setup.';
      Text11012006@1100525001 : TextConst 'ENU=%1 %2 is already existing as a Proposal Entry;NOR=%1 %2 finnes allerede som forslagspost;SVE=%1 %2 finns redan som fîrslagstransaktion';
      Text11012007@1100528400 : TextConst 'ENU=The %1 of %2 cannot be removed because the %3 of %4 %5 is empty.;NOR=%1 av %2 kan ikke fjernes fordi %3 av %4 %5 tom';
      Text11012008@1100528401 : TextConst 'ENU=The %1 of %2 cannot be removed because the %3 and %4 of %5 %6 are empty.;NOR=%1 av %2 kan ikke fjernes fordi %3 og %4 av %5 %6 er tom';
      Text11012010@1100528200 : TextConst 'ENU=On Hold Code may not be blank. It is part of the approval flow.';
      Text11012011@1100409000 : TextConst 'ENU=On Hold Code may not be blank. Restart the approval pocedure.';
      DCSetupRead@1100525002 : Boolean;
      DocumentCaptureSetup@1100525003 : Record 6085573;
      FPSLicenseManagement@1100528500 : Codeunit 11229289;
      GLSetup@1101285000 : Record 98;
      GenJnlLineExt@111280000 : Record 11128091;
      PmtReferenceErr@1060000 : TextConst '@@@="%1=Field;%2=Table;%3=Field";ENU=%1 should be blank for %2 %3.';

    [External]
    PROCEDURE ShowDoc@7() : Boolean;
    VAR
      PurchInvHeader@1003 : Record 122;
      PurchCrMemoHdr@1002 : Record 124;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
            EXIT(TRUE);
          END;
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
            EXIT(TRUE);
          END
      END;

      OnAfterShowDoc(Rec);
    END;

    [External]
    PROCEDURE ShowPostedDocAttachment@15();
    VAR
      PurchInvHeader@1003 : Record 122;
      PurchCrMemoHdr@1002 : Record 124;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN
            OpenDocumentAttachmentDetails(PurchInvHeader);
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN
            OpenDocumentAttachmentDetails(PurchCrMemoHdr);
      END;
    END;

    LOCAL PROCEDURE OpenDocumentAttachmentDetails@17(Record@1000 : Variant);
    VAR
      DocumentAttachmentDetails@1002 : Page 1173;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Record);
      DocumentAttachmentDetails.OpenForRecRef(RecRef);
      DocumentAttachmentDetails.RUNMODAL;
    END;

    [External]
    PROCEDURE HasPostedDocAttachment@16() : Boolean;
    VAR
      PurchInvHeader@1007 : Record 122;
      PurchCrMemoHdr@1006 : Record 124;
      DocumentAttachment@1005 : Record 1173;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN
            EXIT(DocumentAttachment.HasPostedDocumentAttachment(PurchInvHeader));
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN
            EXIT(DocumentAttachment.HasPostedDocumentAttachment(PurchCrMemoHdr));
      END;
    END;

    [External]
    PROCEDURE DrillDownOnEntries@1(VAR DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      VendLedgEntry.RESET;
      DtldVendLedgEntry.COPYFILTER("Vendor No.",VendLedgEntry."Vendor No.");
      DtldVendLedgEntry.COPYFILTER("Currency Code",VendLedgEntry."Currency Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",VendLedgEntry."Global Dimension 1 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Due Date",VendLedgEntry."Due Date");
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETRANGE(Open,TRUE);
      OnBeforeDrillDownEntries(VendLedgEntry,DtldVendLedgEntry);
      PAGE.RUN(0,VendLedgEntry);
    END;

    [External]
    PROCEDURE DrillDownOnOverdueEntries@4(VAR DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      VendLedgEntry.RESET;
      DtldVendLedgEntry.COPYFILTER("Vendor No.",VendLedgEntry."Vendor No.");
      DtldVendLedgEntry.COPYFILTER("Currency Code",VendLedgEntry."Currency Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",VendLedgEntry."Global Dimension 1 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETFILTER("Date Filter",'..%1',WORKDATE);
      VendLedgEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      VendLedgEntry.SETFILTER("Remaining Amount",'<>%1',0);
      OnBeforeDrillDownOnOverdueEntries(VendLedgEntry,DtldVendLedgEntry);
      PAGE.RUN(0,VendLedgEntry);
    END;

    [External]
    PROCEDURE GetOriginalCurrencyFactor@2() : Decimal;
    BEGIN
      IF "Original Currency Factor" = 0 THEN
        EXIT(1);
      EXIT("Original Currency Factor");
    END;

    [External]
    PROCEDURE GetAdjustedCurrencyFactor@11() : Decimal;
    BEGIN
      IF "Adjusted Currency Factor" = 0 THEN
        EXIT(1);
      EXIT("Adjusted Currency Factor");
    END;

    [External]
    PROCEDURE ShowDimensions@3();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    [External]
    PROCEDURE SetStyle@5() : Text;
    BEGIN
      IF Open THEN BEGIN
        IF WORKDATE > "Due Date" THEN
          EXIT('Unfavorable')
      END ELSE
        IF "Closed at Date" > "Due Date" THEN
          EXIT('Attention');
      EXIT('');
    END;

    [External]
    PROCEDURE CopyFromGenJnlLine@6(GenJnlLine@1000 : Record 81);
    BEGIN
      "Vendor No." := GenJnlLine."Account No.";
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document Type" := GenJnlLine."Document Type";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      //>>NAVFI
      GLSetup.GET;
      IF GLSetup."Finnish localization active" THEN BEGIN
        GenJnlLineExt.InitGetLine(GenJnlLine);//4PSSE
        "Message Type" := GenJnlLineExt."Message Type";
        "Invoice Message" := GenJnlLineExt."Invoice Message";
        //"Invoice Message 2" := GenJnlLine."Invoice Message 2";
        "Payment Date" := GenJnlLineExt."Payment date";
        IF GenJnlLineExt."Payment date" = 0D THEN
          "Payment Date" := GenJnlLine."Due Date";
      END;
      //<<NAVFI
      Description := GenJnlLine.Description;
      "Currency Code" := GenJnlLine."Currency Code";
      "Purchase (LCY)" := GenJnlLine."Sales/Purch. (LCY)";
      "Inv. Discount (LCY)" := GenJnlLine."Inv. Discount (LCY)";
      "Buy-from Vendor No." := GenJnlLine."Sell-to/Buy-from No.";
      "Vendor Posting Group" := GenJnlLine."Posting Group";
      "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlLine."Dimension Set ID";
      "Purchaser Code" := GenJnlLine."Salespers./Purch. Code";
      "Source Code" := GenJnlLine."Source Code";
      "On Hold" := GenJnlLine."On Hold";
      "Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type";
      "Applies-to Doc. No." := GenJnlLine."Applies-to Doc. No.";
      "Due Date" := GenJnlLine."Due Date";
      "Pmt. Discount Date" := GenJnlLine."Pmt. Discount Date";
      "Applies-to ID" := GenJnlLine."Applies-to ID";
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "User ID" := USERID;
      "Bal. Account Type" := GenJnlLine."Bal. Account Type";
      "Bal. Account No." := GenJnlLine."Bal. Account No.";
      "No. Series" := GenJnlLine."Posting No. Series";
      "IC Partner Code" := GenJnlLine."IC Partner Code";
      Prepayment := GenJnlLine.Prepayment;
      "Recipient Bank Account" := GenJnlLine."Recipient Bank Account";
      "Message to Recipient" := GenJnlLine."Message to Recipient";
      "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
      "Creditor No." := GenJnlLine."Creditor No.";
      "Payment Reference" := GenJnlLine."Payment Reference";
      "Payment Method Code" := GenJnlLine."Payment Method Code";
      "Exported to Payment File" := GenJnlLine."Exported to Payment File";
      //>>NAVNO
      GenJnlLineExt.InitGetLine(GenJnlLine);//4PSSE
      KID := GenJnlLineExt.KID;
      "Payment Type Code Abroad" := GenJnlLineExt."Payment Type Code Abroad";
      "Specification (Norges Bank)" := GenJnlLineExt."Specification (Norges Bank)";
      //<<NAVNO

      //**4PS.sn
      "Description 2" := GenJnlLine."Description 2";  //**4PS01.n
      "Pmt. Discount Date 2" := GenJnlLine."Pmt. Discount Date 2";
      "Pmt. Discount Date 3" := GenJnlLine."Pmt. Discount Date 3";
      "Subcontracting Invoice" := GenJnlLine."Subcontracting Invoice";
      "Payment Agreement" := GenJnlLine."Payment Agreement";
      "Actual Effective Date" := GenJnlLine."Expected Effective Date";
      "Actual End Date" := GenJnlLine."Expected Enddate";
      "Number of Hours" := GenJnlLine."Number of Hours";
      "Avg. Wage Rate" := GenJnlLine."Avg. Wage Rate";
      "Labor Amount" := GenJnlLine."Labor Amount";
      "Contribution Percentage Labor" := GenJnlLine."Contribution Percentage Labor";
      "Contribution Percentage Total" := GenJnlLine."Contribution Percentage Total"; // C002607
      "Fixed B Amount per Hour" := GenJnlLine."Fixed B Amount per Hour";
      "Pay To Tax Authority" := GenJnlLine."Pay To Tax Authority";
      "Wage Charge (to B Account)" := GenJnlLine."Wage Charge (to B Account)";
      "Wage Charge (to Tax Authority)" := GenJnlLine."Wage Charge (to Tax Authority)";
      Memo := GenJnlLine.Memo;
      "Transaction Mode B Payments" := GenJnlLine."Transaction Mode B Payments";
      "Bank Account Code B Payments" := GenJnlLine."Bank Account Code B Payments";
      Approved := GenJnlLine.Approved;
      "Approvement Initials" := GenJnlLine."Approvement Initials";
      "Your Reference" := GenJnlLine."Your Reference"; //20060706-JE
      "Project No." := GenJnlLine."Closed Project No."; //20090709
      "Subcontract No." := GenJnlLine."Subcontract No.";
      "Service Order No." := GenJnlLine."Service Order No.";
      "Pay VAT Amt. on B-Acc. Vendor" := GenJnlLine."Pay VAT Amt. on B-Acc. Vendor";
      //**4PS.en
      "Giro Acc. No." := GenJnlLine."Giro Acc. No.";  //NAVDK

      OnAfterCopyVendLedgerEntryFromGenJnlLine(Rec,GenJnlLine);
    END;

    [External]
    PROCEDURE CopyFromCVLedgEntryBuffer@9(VAR CVLedgerEntryBuffer@1000 : Record 382);
    BEGIN
      "Entry No." := CVLedgerEntryBuffer."Entry No.";
      "Vendor No." := CVLedgerEntryBuffer."CV No.";
      "Posting Date" := CVLedgerEntryBuffer."Posting Date";
      "Document Type" := CVLedgerEntryBuffer."Document Type";
      "Document No." := CVLedgerEntryBuffer."Document No.";
      Description := CVLedgerEntryBuffer.Description;
      "Currency Code" := CVLedgerEntryBuffer."Currency Code";
      Amount := CVLedgerEntryBuffer.Amount;
      "Remaining Amount" := CVLedgerEntryBuffer."Remaining Amount";
      "Original Amount" := CVLedgerEntryBuffer."Original Amount";
      "Original Amt. (LCY)" := CVLedgerEntryBuffer."Original Amt. (LCY)";
      "Remaining Amt. (LCY)" := CVLedgerEntryBuffer."Remaining Amt. (LCY)";
      "Amount (LCY)" := CVLedgerEntryBuffer."Amount (LCY)";
      "Purchase (LCY)" := CVLedgerEntryBuffer."Sales/Purchase (LCY)";
      "Inv. Discount (LCY)" := CVLedgerEntryBuffer."Inv. Discount (LCY)";
      "Buy-from Vendor No." := CVLedgerEntryBuffer."Bill-to/Pay-to CV No.";
      "Vendor Posting Group" := CVLedgerEntryBuffer."CV Posting Group";
      "Global Dimension 1 Code" := CVLedgerEntryBuffer."Global Dimension 1 Code";
      "Global Dimension 2 Code" := CVLedgerEntryBuffer."Global Dimension 2 Code";
      "Dimension Set ID" := CVLedgerEntryBuffer."Dimension Set ID";
      "Purchaser Code" := CVLedgerEntryBuffer."Salesperson Code";
      "User ID" := CVLedgerEntryBuffer."User ID";
      "Source Code" := CVLedgerEntryBuffer."Source Code";
      "On Hold" := CVLedgerEntryBuffer."On Hold";
      "Applies-to Doc. Type" := CVLedgerEntryBuffer."Applies-to Doc. Type";
      "Applies-to Doc. No." := CVLedgerEntryBuffer."Applies-to Doc. No.";
      Open := CVLedgerEntryBuffer.Open;
      "Due Date" := CVLedgerEntryBuffer."Due Date" ;
      "Pmt. Discount Date" := CVLedgerEntryBuffer."Pmt. Discount Date";
      "Original Pmt. Disc. Possible" := CVLedgerEntryBuffer."Original Pmt. Disc. Possible";
      "Remaining Pmt. Disc. Possible" := CVLedgerEntryBuffer."Remaining Pmt. Disc. Possible";
      "Pmt. Disc. Rcd.(LCY)" := CVLedgerEntryBuffer."Pmt. Disc. Given (LCY)";
      Positive := CVLedgerEntryBuffer.Positive;
      "Closed by Entry No." := CVLedgerEntryBuffer."Closed by Entry No.";
      "Closed at Date" := CVLedgerEntryBuffer."Closed at Date";
      "Closed by Amount" := CVLedgerEntryBuffer."Closed by Amount";
      "Applies-to ID" := CVLedgerEntryBuffer."Applies-to ID";
      "Journal Batch Name" := CVLedgerEntryBuffer."Journal Batch Name";
      "Reason Code" := CVLedgerEntryBuffer."Reason Code";
      "Bal. Account Type" := CVLedgerEntryBuffer."Bal. Account Type";
      "Bal. Account No." := CVLedgerEntryBuffer."Bal. Account No.";
      "Transaction No." := CVLedgerEntryBuffer."Transaction No.";
      "Closed by Amount (LCY)" := CVLedgerEntryBuffer."Closed by Amount (LCY)";
      "Debit Amount" := CVLedgerEntryBuffer."Debit Amount";
      "Credit Amount" := CVLedgerEntryBuffer."Credit Amount";
      "Debit Amount (LCY)" := CVLedgerEntryBuffer."Debit Amount (LCY)";
      "Credit Amount (LCY)" := CVLedgerEntryBuffer."Credit Amount (LCY)";
      "Document Date" := CVLedgerEntryBuffer."Document Date";
      "External Document No." := CVLedgerEntryBuffer."External Document No.";
      "No. Series" := CVLedgerEntryBuffer."No. Series";
      "Closed by Currency Code" := CVLedgerEntryBuffer."Closed by Currency Code";
      "Closed by Currency Amount" := CVLedgerEntryBuffer."Closed by Currency Amount";
      "Adjusted Currency Factor" := CVLedgerEntryBuffer."Adjusted Currency Factor";
      "Original Currency Factor" := CVLedgerEntryBuffer."Original Currency Factor";
      "Pmt. Disc. Tolerance Date" := CVLedgerEntryBuffer."Pmt. Disc. Tolerance Date";
      "Max. Payment Tolerance" := CVLedgerEntryBuffer."Max. Payment Tolerance";
      "Accepted Payment Tolerance" := CVLedgerEntryBuffer."Accepted Payment Tolerance";
      "Accepted Pmt. Disc. Tolerance" := CVLedgerEntryBuffer."Accepted Pmt. Disc. Tolerance";
      "Pmt. Tolerance (LCY)" := CVLedgerEntryBuffer."Pmt. Tolerance (LCY)";
      "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
      Prepayment := CVLedgerEntryBuffer.Prepayment;

      //**4PS.sn
      "Pmt. Discount Date 2" := CVLedgerEntryBuffer."Pmt. Discount Date 2";
      "Original Pmt. Disc. Possible 2" := CVLedgerEntryBuffer."Original Pmt. Disc. Possible 2";
      "Remain. Pmt. Disc. Possible 2" := CVLedgerEntryBuffer."Remain. Pmt. Disc. Possible 2";
      "Pmt. Disc. Tolerance Date 2" := CVLedgerEntryBuffer."Pmt. Disc. Tolerance Date 2";
      "Pmt. Discount Date 3" := CVLedgerEntryBuffer."Pmt. Discount Date 3";
      "Original Pmt. Disc. Possible 3" := CVLedgerEntryBuffer."Original Pmt. Disc. Possible 3";
      "Remain. Pmt. Disc. Possible 3" := CVLedgerEntryBuffer."Remain. Pmt. Disc. Possible 3";
      "Pmt. Disc. Tolerance Date 3" := CVLedgerEntryBuffer."Pmt. Disc. Tolerance Date 3";
      //**4PS.en

      OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer);
    END;

    [External]
    PROCEDURE RecalculateAmounts@36(FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];PostingDate@1003 : Date);
    VAR
      CurrExchRate@1004 : Record 330;
    BEGIN
      IF ToCurrencyCode = FromCurrencyCode THEN
        EXIT;

      "Remaining Amount" :=
      //CurrExchRate.ExchangeAmount("Remaining Amount",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Remaining Amount",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
      "Remaining Pmt. Disc. Possible" :=
      //CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
      //**4PS.sn
      "Remain. Pmt. Disc. Possible 2" :=
        CurrExchRate.ExchangeAmount("Remain. Pmt. Disc. Possible 2",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE);
      "Remain. Pmt. Disc. Possible 3" :=
        CurrExchRate.ExchangeAmount("Remain. Pmt. Disc. Possible 3",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE);
      //**4PS.en
      "Accepted Payment Tolerance" :=
      //CurrExchRate.ExchangeAmount("Accepted Payment Tolerance",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Accepted Payment Tolerance",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
      "Amount to Apply" :=
      //CurrExchRate.ExchangeAmount("Amount to Apply",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Amount to Apply",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyVendLedgerEntryFromGenJnlLine@8(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer@18(VAR VendorLedgerEntry@1000 : Record 25;CVLedgerEntryBuffer@1001 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShowDoc@13(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDrillDownEntries@10(VAR VendorLedgerEntry@1000 : Record 25;VAR DetailedVendorLedgEntry@1001 : Record 380);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDrillDownOnOverdueEntries@12(VAR VendorLedgerEntry@1000 : Record 25;VAR DetailedVendorLedgEntry@1001 : Record 380);
    BEGIN
    END;

    PROCEDURE UpdatePostedDocument@1100525000();
    BEGIN
      //**4PS
      // dp00206.sn
      IF "On Hold" = '' THEN
        UpdateOnHoldWithSetupOnHold;
      // dp00206.en

      UpdatePostedDocumentWithoutChk;
    END;

    PROCEDURE UpdatePostedDocumentWithoutChk@1100409000();
    VAR
      lPurchInvHeader@1100525001 : Record 122;
      lPurchCrMemoHeader@1100525000 : Record 124;
      l_OnHoldRec@1100285100 : Record 11012031;
    BEGIN
      //**4PS.n
      // dp00206.n
      CLEAR(OnHoldRec);
      IF "On Hold" <> '' THEN
        OnHoldRec.GET("On Hold");

      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF lPurchInvHeader.GET("Document No.") THEN BEGIN

      //>>RFC139
            IF ("On Hold" = '') AND (lPurchInvHeader."Export to Symbrio Type" = lPurchInvHeader."Export to Symbrio Type"::Prelimary) THEN BEGIN
              l_OnHoldRec.RESET;
              l_OnHoldRec.SETRANGE("Default Value Purchase Invoice",TRUE);
              IF l_OnHoldRec.FINDFIRST THEN BEGIN
                IF l_OnHoldRec.Code <> lPurchInvHeader."On Hold" THEN
                  "On Hold" := l_OnHoldRec.Code;
              END;
            END;
      //<<RFC139

            lPurchInvHeader."On Hold" := "On Hold";
            lPurchInvHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
            lPurchInvHeader."Approvement Initials" := "Approvement Initials";
            lPurchInvHeader.MODIFY;
          END;
        "Document Type"::"Credit Memo":
          IF lPurchCrMemoHeader.GET("Document No.") THEN BEGIN
      //>>RFC139
            IF ("On Hold" = '') AND (lPurchCrMemoHeader."Export to Symbrio Type" = lPurchCrMemoHeader."Export to Symbrio Type"::Prelimary) THEN BEGIN
              l_OnHoldRec.RESET;
              l_OnHoldRec.SETRANGE("Default Value Credit Memo",TRUE);
              IF l_OnHoldRec.FINDFIRST THEN BEGIN
                IF l_OnHoldRec.Code <> lPurchCrMemoHeader."On Hold" THEN
                  "On Hold" := l_OnHoldRec.Code;
              END;
            END;
      //<<RFC139
            lPurchCrMemoHeader."On Hold" := "On Hold";
            lPurchCrMemoHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
            lPurchCrMemoHeader."Approvement Initials" := "Approvement Initials";
            lPurchCrMemoHeader.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateOnHoldWithSetupOnHold@1100525022();
    VAR
      PurchInvHeader@1100528801 : Record 122;
      CommonPurchInvFunctions@1100528400 : Codeunit 11229296;
      RelatedPurchOrderNoCausingOnHold@1100528401 : Code[20];
    BEGIN
      //**4PS
      IF "Document Type" = "Document Type"::Invoice THEN
        IF PurchInvHeader.GET("Document No.") THEN
          "On Hold" := CommonPurchInvFunctions.DetermineOnHoldCodeBasedOnOrdersRelatedToInvoice(
            PurchInvHeader, FALSE, RelatedPurchOrderNoCausingOnHold);

      IF "On Hold" <> '' THEN BEGIN
        MODIFY;
        MESSAGE(Text11012005);
      END;
    END;

    PROCEDURE GetInvoiceAmount@1210190000() InvoiceAmountDec : Decimal;
    VAR
      lPurchInvHeader@1210190001 : Record 122;
      lPurchCrMemoHeader@1210190000 : Record 124;
    BEGIN
      //**4PS
      InvoiceAmountDec := 0;
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF lPurchInvHeader.GET("Document No.") THEN BEGIN
            lPurchInvHeader.CALCFIELDS(Amount);
            InvoiceAmountDec := lPurchInvHeader.Amount;
          END;
        "Document Type"::"Credit Memo":
          IF lPurchCrMemoHeader.GET("Document No.") THEN BEGIN
            lPurchCrMemoHeader.CALCFIELDS(Amount);
            InvoiceAmountDec := lPurchCrMemoHeader.Amount;
          END;
      END;
    END;

    PROCEDURE HasOpenConsentLines@1100528400() : Boolean;
    VAR
      PurchInvHeader@1100528400 : Record 122;
      PurchCrMemoHdr@1100528401 : Record 124;
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN BEGIN
            PurchInvHeader.CALCFIELDS("Open Approval Entry");
            EXIT(PurchInvHeader."Open Approval Entry");
          END;
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN BEGIN
            PurchCrMemoHdr.CALCFIELDS("Open Approval Entry");
            EXIT(PurchCrMemoHdr."Open Approval Entry");
          END;
      END;
    END;

    LOCAL PROCEDURE OnHoldCodeCanBeRemoved@1100528401(VAR RelatedPurchOrderNoCausingOnHold@1100528405 : Code[20];VAR OnHoldCodeNoContract@1100528403 : Code[3];VAR OnHoldCodeNoLetterOfCr@1100528404 : Code[3]) : Boolean;
    VAR
      RelatedPurchOrderHeader@1100528402 : Record 38;
      PurchInvHeader@1100528401 : Record 122;
      CommonPurchInvFunctions@1100528406 : Codeunit 11229296;
      OnHoldCode@1100528407 : Code[3];
    BEGIN
      //**4PS, C008247
      RelatedPurchOrderNoCausingOnHold := '';
      OnHoldCodeNoContract := '';
      OnHoldCodeNoLetterOfCr := '';

      IF NOT ("Document Type" = "Document Type"::Invoice) THEN
        EXIT(TRUE);

      IF PurchInvHeader.GET("Document No.") THEN BEGIN
        OnHoldCode := CommonPurchInvFunctions.DetermineOnHoldCodeBasedOnOrdersRelatedToInvoice(
          PurchInvHeader, FALSE, RelatedPurchOrderNoCausingOnHold);
        IF OnHoldCode = '' THEN
          EXIT(TRUE);
      END;

      IF NOT RelatedPurchOrderHeader.GET(
        RelatedPurchOrderHeader."Document Type"::Order, RelatedPurchOrderNoCausingOnHold)
      THEN
        EXIT(TRUE);

      OnHoldCodeNoContract := RelatedPurchOrderHeader.DetermineOnHoldNoContract;
      OnHoldCodeNoLetterOfCr := RelatedPurchOrderHeader.DetermineOnHoldNoLetterOfCr;
      IF (OnHoldCodeNoContract = '') AND
         (OnHoldCodeNoLetterOfCr = '')
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckIfOnHoldCodeCanBeRemoved@1100528402() ReturnOnHoldCode : Code[3];
    VAR
      PurchaseHeader@1100528403 : Record 38;
      OnHoldCode@1100528404 : Record 11012031;
      RelatedPurchOrderNo@1100528402 : Code[20];
      OnHoldCodeNoContract@1100528401 : Code[3];
      OnHoldCodeNoLetterOfCr@1100528400 : Code[3];
    BEGIN
      //**4PS, C008247
      ReturnOnHoldCode := '';   // C010724.n
      IF NOT OnHoldCodeCanBeRemoved(
        RelatedPurchOrderNo,
        OnHoldCodeNoContract,
        OnHoldCodeNoLetterOfCr)
      THEN
        CASE TRUE OF
          (OnHoldCodeNoContract <> '') AND (OnHoldCodeNoLetterOfCr = ''):
            MESSAGE(              //Call C010724.modify
              Text11012007, OnHoldCode.TABLECAPTION, "Document No.",
              PurchaseHeader.FIELDCAPTION("Return Date Signed Contract"),
              PurchaseHeader.FIELDCAPTION("Related Purch. Order No."),
              RelatedPurchOrderNo);
          (OnHoldCodeNoContract = '') AND (OnHoldCodeNoLetterOfCr <> ''):
            MESSAGE(              //Call C010724.modify
              Text11012007, OnHoldCode.TABLECAPTION, "Document No.",
              PurchaseHeader.FIELDCAPTION("Return Date Letter of Credit"),
              PurchaseHeader.FIELDCAPTION("Related Purch. Order No."),
              RelatedPurchOrderNo);
          (OnHoldCodeNoContract <> '') AND (OnHoldCodeNoLetterOfCr <> ''):
            MESSAGE(               //Call C010724.modify
              Text11012008, OnHoldCode.TABLECAPTION, "Document No.",
              PurchaseHeader.FIELDCAPTION("Return Date Signed Contract"),
              PurchaseHeader.FIELDCAPTION("Return Date Letter of Credit"),
              PurchaseHeader.FIELDCAPTION("Related Purch. Order No."),
              RelatedPurchOrderNo);
          ELSE
            ERROR(
              Text11012008, FIELDCAPTION("On Hold"), "Document No.");
        END;

      // C010724.sn
      ReturnOnHoldCode := OnHoldCodeNoLetterOfCr;
      IF OnHoldCodeNoContract <> '' THEN
        ReturnOnHoldCode := OnHoldCodeNoContract;
      //Usually only one (or none) of the 2 codes above will be filled, if both are then OnHoldCodeNoContract has the priority
      // C010724.en
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(25) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 25');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Vendor Ledger Entry", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    LOCAL PROCEDURE LookupDocument@1100528403();
    VAR
      PurchInvHeader@1100528403 : Record 122;
      PurchCrMemoHdr@1100528402 : Record 124;
      PostedPurchaseInvoice@1100528401 : Page 138;
      PostedPurchaseCreditMemo@1100528400 : Page 140;
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Invoice:
          BEGIN
            PurchInvHeader.SETRANGE("No.","Document No.");
            IF PurchInvHeader.FINDFIRST THEN BEGIN
              PostedPurchaseInvoice.SETRECORD(PurchInvHeader);
              PostedPurchaseInvoice.RUNMODAL;
            END;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            PurchCrMemoHdr.SETRANGE("No.","Document No.");
            IF PurchCrMemoHdr.FINDFIRST THEN BEGIN
              PostedPurchaseCreditMemo.SETRECORD(PurchCrMemoHdr);
              PostedPurchaseCreditMemo.RUNMODAL;
            END;
          END;
      END;
    END;

    PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    BEGIN
      //**4PS  CALL C020437
      IF NOT DCSetupRead THEN BEGIN
        IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentCaptureSetup) THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    PROCEDURE SetDocumentTypeFilterCommentLine@1100528404(VAR PurchCommentLine@1100528400 : Record 43);
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Invoice:
          PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::"Posted Invoice");
        "Document Type"::"Credit Memo":
          PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::"Posted Credit Memo");
        "Document Type"::Payment:
          PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::Payment);
        "Document Type"::Refund:
          PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::Refund);
      END;
    END;

    PROCEDURE HasOpenApprovalEntries@1100527300() : Boolean;
    VAR
      ApprovalsMgmt@1100528500 : Codeunit 1535;
      PurchInvHeader@1100528502 : Record 122;
      PurchCrMemoHdr@1100528501 : Record 124;
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN
            EXIT(ApprovalsMgmt.HasOpenApprovalEntries(PurchInvHeader.RECORDID));
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN
            EXIT(ApprovalsMgmt.HasOpenApprovalEntries(PurchCrMemoHdr.RECORDID))
      END;
    END;

    BEGIN
    {
      151109 ITERO.DL IME424 new key: Open,Document Type,On Hold

      PEB *** Begin ***
      PEB0091 Banking
      PEB
        - New Key:
            "VP Pack No.","Currency Code"
      PEB *** End ***

      160825 ITERO.DL RFC139 Vendor invoices are paid even if they have been set to On hold
      NAVFI: reduced size of "Invoice Message" from 250 -> 128, due to full table-definition
      181011 ORANGO.EE Added "Last VP Pack No." RFC1078
      190510 ORANGO.PR Added code and locals - "Symbrio Export Date" RFC-1220
    }
    END.
  }
}

