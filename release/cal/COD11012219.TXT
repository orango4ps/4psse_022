OBJECT Codeunit 11012219 Gen. Imp. Dataport
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      _CR@1100485000 : Text[1];
      _LF@1100485001 : Text[1];
      _CRLF@1100485012 : Text[2];
      _SQ@1100485002 : Text[2];
      _QS@1100485003 : Text[2];
      _QQ@1100485004 : Text[2];
      _QSQ@1100485005 : Text[3];
      _Q@1100485006 : Text[1];
      _S@1100485007 : Text[1];
      f@1100485011 : File;
      InS@1100485010 : InStream;
      OutS@1100485009 : OutStream;
      Text000@1100485013 : TextConst 'DEU=W„hlen Sie Exportdatei;ENU=Select export filename;NLD=Kies exportbestand;NOR=Velg eksportfilnavn;SVE=V„lj exportfilnamn';
      Text002@1100485014 : TextConst 'DEU=Kein %1 gew„hlt.;ENU=No %1 selected.;NLD=Geen %1 gekozen.;NOR=Ingen %1 er valgt;SVE=Ingen %1 har valts.';
      Text003@1100485015 : TextConst 'DEU=W„hlen Sie die Importdatei;ENU=Select import filename;NLD=Kies importbestand;NOR=Velg importfilnamn;SVE=V„lj importfilnamn';
      Text004@1100485016 : TextConst 'DEU=M”chten Sie die Zeilen von %1 %2 l”schen und aufs neue importieren?;ENU=Do you want to delete the lines from %1 %2 and import them again?;NLD="Wilt U de regels van %1 %2 verwijderen en ze opnieuw importeren? ";NOR=Vil du fjerne radene fra %1 %2 og importere dem p† nytt?;SVE=Vill du ta bort raderna fr†n %1 %2 och importera dem igen?';
      Text005@1100485017 : TextConst 'DEU=šberlauf in %1\%2: %3, %4 (%5)\\%6;ENU=Overflow in %1\%2: %3, %4 (%5)\\%6;NLD=Overflow in %1\%2: %3, %4 (%5)\\%6;NOR=Overflyt i %1\%2: %3, %4 (%5)\\%6;SVE=Spill i %1\%2: %3, %4 (%5)\\%6';
      Window@1100485021 : Dialog;
      Counter@1100485020 : Integer;
      MaxCounter@1100485019 : Integer;
      WindowLastUpdated@1100485018 : Time;
      Text006@1100485024 : TextConst 'DEU=Importieren...\\;ENU=Importing...\\;NLD=Importeren...\\;NOR=Importererÿ...\\;SVE=Importerarÿ...\\';
      Text007@1100485025 : TextConst 'DEU=Exportieren...\\;ENU=Exporting...\\;NLD=Exporteren...\\;NOR=Exporterer ...\\;SVE=Exporterar ...\\';
      Text008@1100485026 : TextConst 'DEU=Dateiname #1##################\;ENU=File Name #1##################\;NLD=Bestandsnaam #1##################\;NOR=Filnavn #1##################\;SVE=Filnamn   #1##################\';
      Text009@1100485022 : TextConst 'DEU=@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@;NLD=@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@;NOR=@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@;SVE=@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@';

    PROCEDURE ImportFromContext@1100485011(RecRef@1100485000 : RecordRef);
    VAR
      i@1100485001 : Integer;
      j@1100485003 : Integer;
      GenImpBatch@1100485005 : Record 11020483;
      GenImportContextLine@1100485002 : Record 11020482;
      FldRef@1100485004 : FieldRef;
    BEGIN
      GenImpBatch.SETRANGE("Target Table No.",RecRef.NUMBER);
      IF NOT (ACTION::LookupOK = PAGE.RUNMODAL(0,GenImpBatch)) THEN
        ERROR(Text002,GenImpBatch.TABLECAPTION);

      GenImportContextLine.SETRANGE("Batch Name",GenImpBatch.Name);
      GenImportContextLine.SETRANGE("System Created",TRUE);
      GenImportContextLine.DELETEALL;
      GenImportContextLine."Batch Name" := GenImpBatch.Name;
      GenImportContextLine."Validate Field" := TRUE;

      FOR i := 2 TO 4 DO BEGIN
        RecRef.FILTERGROUP(i);
        IF RecRef.GETFILTERS <> '' THEN BEGIN
          FOR j := 1 TO RecRef.FIELDCOUNT DO BEGIN
            FldRef := RecRef.FIELDINDEX(j);
            IF FldRef.GETFILTER <> '' THEN BEGIN
              IF FldRef.GETRANGEMIN = FldRef.GETRANGEMAX THEN BEGIN
                GenImportContextLine."Value Text" := FORMAT(FldRef.GETRANGEMIN);
                GenImportContextLine."System Created" := TRUE;
              END ELSE BEGIN
                GenImportContextLine."Value Text" := '';
                GenImportContextLine."System Created" := FALSE;
              END;
              GenImportContextLine."Target Field No." := FldRef.NUMBER;
              IF NOT GenImportContextLine.INSERT THEN
                GenImportContextLine.MODIFY;
            END;
          END;
        END;
      END;

      IF CONFIRM(STRSUBSTNO(Text004,GenImpBatch.TABLECAPTION,GenImpBatch.Name)) THEN BEGIN
        GenImportContextLine.SETRANGE("Batch Name",GenImpBatch.Name);
        GenImportContextLine.SETRANGE("System Created",FALSE);
        GenImportContextLine.DELETEALL;
        ImportFile('',GenImpBatch);
      END;
      COMMIT;

      {FIXM  create Page11125387
      GenImpJournal.SetCurrentBatchName(GenImpBatch.Name);
      GenImpJournal.RUNMODAL;
      }

      GenImportContextLine.SETRANGE("Batch Name",GenImpBatch.Name);
      GenImportContextLine.SETRANGE("System Created",TRUE);
      GenImportContextLine.DELETEALL;
    END;

    PROCEDURE ExportFromBatch@1210190000(GenImpBatch@1210190000 : Record 11020483);
    VAR
      GenImpManagement@1210190001 : Codeunit 11012217;
      SourceRecRef@1210190002 : RecordRef;
    BEGIN
      GenImpManagement.FilterSourceWithContext(GenImpBatch, SourceRecRef);
      ExportFile(GenImpBatch."File Name", SourceRecRef);
    END;

    PROCEDURE ExportFile@1100485002(FileName@1100485010 : Text[1024];RecRef@1100485007 : RecordRef);
    VAR
      GenImpMapping@1100485003 : Record 11020484;
      TempMappingLine@1100485004 : TEMPORARY Record 11020485;
      FileManagement@1100525000 : Codeunit 419;
      FilterString@1100525001 : Text;
    BEGIN
      FilterString := FileManagement.GetToFilterText('', '.csv');
      FileName := FileManagement.SaveFileDialog(Text000, FileName, FilterString);
      IF FileName = '' THEN
        ERROR('');
      FileOpenOutStream(f,OutS,FileName);

      GenImpMapping.SETRANGE("Target Table No.",RecRef.NUMBER);
      IF NOT (ACTION::LookupOK = PAGE.RUNMODAL(0,GenImpMapping)) THEN
        ERROR(Text002,GenImpMapping.TABLECAPTION);
      SetGlobalConstants(GenImpMapping);
      CopyGenImpMappingLinesToTemp(1,GenImpMapping.Code,TempMappingLine);

      IF RecRef.FINDSET THEN BEGIN
        MaxCounter := RecRef.COUNT;
        OpenWindow(Text007,MaxCounter);
        ExportLine(FALSE,RecRef,TempMappingLine);
        REPEAT
          Counter := Counter + 1;
          UpdateWindow;
          ExportLine(TRUE,RecRef,TempMappingLine);
        UNTIL RecRef.NEXT = 0;
        Window.CLOSE;
      END;

      FileClose(f,FileName);
    END;

    PROCEDURE ExportLine@1100485008(Line@1100485007 : Boolean;RecRef@1100485000 : RecordRef;VAR TempMappingLine@1100485002 : TEMPORARY Record 11020485);
    VAR
      FldRef@1100485001 : FieldRef;
      FirstFld@1100485003 : Boolean;
      FieldRec@1100485004 : Record 2000000041;
      i@1100485005 : Integer;
      LastFieldNo@1100485006 : Integer;
    BEGIN
      FirstFld := TRUE;
      LastFieldNo := 0;
      TempMappingLine.SETCURRENTKEY("Mapping Code","File Column No.");
      TempMappingLine.FINDFIRST;
      REPEAT
        IF NOT FirstFld THEN
          OutS.WRITETEXT(_S);
        OutS.WRITETEXT(PADSTR('',TempMappingLine."File Column No." - LastFieldNo - 1,_S));
        OutS.WRITETEXT(_Q);
        FieldRec.GET(TempMappingLine."NAV Table No.",TempMappingLine."NAV Field No.");
        IF Line THEN BEGIN
          FldRef := RecRef.FIELD(TempMappingLine."NAV Field No.");
          IF FieldRec.Class = FieldRec.Class::FlowField THEN
            FldRef.CALCFIELD;
          CASE FieldRec.Type OF
            FieldRec.Type::Option:
              BEGIN
                EVALUATE(i,FORMAT(FldRef.VALUE));
                OutS.WRITETEXT(ReplaceSpecialChars(SELECTSTR(i + 1,FldRef.OPTIONCAPTION)));
              END;
            ELSE
              OutS.WRITETEXT(ReplaceSpecialChars(FORMAT(FldRef.VALUE)));
          END;
        END ELSE
          OutS.WRITETEXT(ReplaceSpecialChars(FieldRec."Field Caption"));
        FirstFld := FALSE;
        LastFieldNo := TempMappingLine."File Column No.";
        OutS.WRITETEXT(_Q);
      UNTIL TempMappingLine.NEXT = 0;
      OutS.WRITETEXT(_CRLF);
    END;

    PROCEDURE ReplaceSpecialChars@1100485009(InTxt@1100485000 : Text[1024]) OutTxt : Text[1024];
    VAR
      i@1100485001 : Integer;
    BEGIN
      // quotes replaced by double quotes
      // function can be extended for other special characters
      i := STRPOS(InTxt,_Q);
      WHILE (i <> 0) AND (InTxt <> '') DO BEGIN
        OutTxt := OutTxt + COPYSTR(InTxt,1,i - 1) + _QQ;
        InTxt := COPYSTR(InTxt,i + 1);
        i := STRPOS(InTxt,_Q);
      END;
      OutTxt := OutTxt + InTxt;
    END;

    PROCEDURE ImportFile@1100485000(FileName@1100485002 : Text[1024];VAR GenImpBatch@1100485003 : Record 11020483);
    VAR
      GenImpJnlLine@1100485011 : Record 11020481;
      TempMappingLine@1100485009 : TEMPORARY Record 11020485;
      GenImpMapping@1210190000 : Record 11020484;
      FilterString@1100525000 : Text;
      T1@1100485001 : Text[1024];
      InTxt@1100485007 : Text[1024];
      MaxLenInTxt@1100485008 : Integer;
      RemainLen@1100485005 : Integer;
      EOB@1100485004 : Boolean;
      EOL@1100485006 : Boolean;
      i@1100485000 : Integer;
      FileManagement@1100525001 : Codeunit 419;
    BEGIN
      GenImpMapping.GET(GenImpBatch."Mapping Code");
      SetGlobalConstants(GenImpMapping);
      FilterString := FileManagement.GetToFilterText('', '.csv');
      FileName := FileManagement.OpenFileDialog(Text003, GenImpBatch."File Name", FilterString);
      IF FileName = '' THEN
        ERROR('');
      FileOpenInStream(f,InS,FileName);

      CopyGenImpMappingLinesToTemp(0,GenImpBatch."Mapping Code",TempMappingLine);
      InitImportJournal(GenImpJnlLine,GenImpBatch.Name);

      MaxLenInTxt :=MAXSTRLEN(InTxt);
      MaxCounter := f.LEN;
      OpenWindow(Text006,MaxCounter);
      WHILE NOT InS.EOS DO BEGIN
        Counter := f.POS;
        UpdateWindow;
        EOL := (InS.READTEXT(InTxt,MaxLenInTxt - RemainLen) < (MaxLenInTxt - RemainLen)); //to handle lines > maxlenInTxt (1024)
        EOB := FALSE;
        InTxt := T1 + InTxt;
        WHILE NOT EOB DO BEGIN
          EOB := NOT GetField(T1,InTxt,EOL);
          IF EOL OR NOT EOB THEN BEGIN
            i := i + 1;
            FillImpBufferField(T1,GenImpJnlLine,i,TempMappingLine);
          END;
        END;
        IF NOT EOL THEN
          RemainLen := STRLEN(T1)
        ELSE BEGIN
          GenImpJnlLine.INSERT;
          T1 := '';
          RemainLen := 0;
          i := 0;
          GenImpJnlLine."Line No." := GenImpJnlLine."Line No." + 100;
          GenImpJnlLine.INIT;
          //GenImpJnlLine.Type := GenImpJnlLine.Type::Data;
          //GenImpJnlLine.Status := GenImpJnlLine.Status::Imported;
        END;
      END;
      Window.CLOSE;
      f.CLOSE;
    END;

    PROCEDURE FillImpBufferField@1100485022(T1@1100485000 : Text[1024];VAR GenImpJnlLine@1100485001 : Record 11020481;i@1100485002 : Integer;VAR TempMappingLine@1100485003 : TEMPORARY Record 11020485);
    VAR
      RecRef@1100485004 : RecordRef;
      FldRef@1100485005 : FieldRef;
      FldRec@1100485006 : Record 2000000041;
    BEGIN
      TempMappingLine.SETRANGE(TempMappingLine."File Column No.",i);
      IF TempMappingLine.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(GenImpJnlLine);
        FldRef := RecRef.FIELD(TempMappingLine."Buffer Field No.");
        FldRec.GET(RecRef.NUMBER,FldRef.NUMBER);
        FldRec.TESTFIELD(FldRec.Type,FldRec.Type::Text);
        IF STRLEN(T1) > FldRec.Len THEN BEGIN
          TempMappingLine.CALCFIELDS(TempMappingLine."Buffer Field Caption");
          ERROR(Text005,
            GenImpJnlLine.TABLECAPTION,
            TempMappingLine.TABLECAPTION,
            TempMappingLine."Mapping Code",
            TempMappingLine."Buffer Field Caption",
            FldRec."Type Name",
            T1);
        END;
        FldRef.VALUE(T1);
        RecRef.SETTABLE(GenImpJnlLine);
        //IF NOT CONFIRM('%1',TRUE,GenImpJnlLine) THEN ERROR('');
      END;
    END;

    PROCEDURE InitImportJournal@1100485010(VAR GenImpJnlLine@1100485000 : Record 11020481;GenImpBatchName@1100485001 : Code[10]);
    VAR
      GenImportErrorLog@1100485002 : Record 11020486;
    BEGIN
      GenImportErrorLog.SETCURRENTKEY("Batch Name","Error No.");
      GenImportErrorLog.SETRANGE("Batch Name",GenImpBatchName);
      GenImportErrorLog.DELETEALL;
      GenImpJnlLine.SETRANGE("Batch Name",GenImpBatchName);
      GenImpJnlLine.DELETEALL;

      GenImpJnlLine."Batch Name" := GenImpBatchName;
      GenImpJnlLine."Line No." := 10000;
      GenImpJnlLine.Type := GenImpJnlLine.Type::Data;
      GenImpJnlLine.Status := GenImpJnlLine.Status::Imported;
    END;

    PROCEDURE GetField@1100485003(VAR Head@1100485000 : Text[1024];VAR Tail@1100485001 : Text[1024];VAR EOL@1100485005 : Boolean) : Boolean;
    VAR
      Tail2@1100485002 : Text[1024];
    BEGIN
      Tail2 := Tail;

      IF STRPOS(Tail,_Q) = 1 THEN
        GetEmbracedField(Head,Tail,EOL)
      ELSE
        GetUnEmbracedField(Head,Tail);

      IF Tail <> '' THEN BEGIN
        Tail := COPYSTR(Tail,2);
        EXIT(TRUE);
      END ELSE BEGIN
        IF NOT EOL THEN BEGIN
          Head := Tail2;
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE GetEmbracedField@1100485001(VAR Head@1100485000 : Text[1024];VAR Tail@1100485001 : Text[1024];VAR EOL@1100485007 : Boolean);
    VAR
      Q@1100485003 : Integer;
      QQ@1100485005 : Integer;
      EOField@1100485004 : Boolean;
      Tail2@1100485006 : Text[1024];
    BEGIN
      Head := '';
      Tail2 := Tail;
      Tail := COPYSTR(Tail,2);

      //CRLF := STRPOS(Tail,_CRLF);

      WHILE NOT EOField DO BEGIN
        QQ := STRPOS(Tail,_QQ); //check double quotes
        Q := STRPOS(Tail,_Q);
        IF (QQ = 0) OR (QQ > Q) THEN BEGIN
          IF (Q = 0) THEN BEGIN
            Head := Tail2;
            Tail := '';
            EOL := FALSE;
          END ELSE BEGIN
            Head := Head + COPYSTR(Tail,1,Q - 1);
            IF (Q + 1) <= STRLEN(Tail) THEN
              Tail := COPYSTR(Tail,Q + 1)
            ELSE
              Tail := '';
          END;
          EOField := TRUE;
        END ELSE BEGIN
          Head := Head + COPYSTR(Tail,1,QQ);
          Tail := COPYSTR(Tail,QQ + 2);
        END;
      END;
    END;

    PROCEDURE GetUnEmbracedField@1100485004(VAR Head@1100485000 : Text[1024];VAR Tail@1100485001 : Text[1024]);
    VAR
      S@1100485002 : Integer;
    BEGIN
      S := STRPOS(Tail,_S);

      IF S = 0 THEN BEGIN
        Head := Tail;
        Tail := '';
      END ELSE BEGIN
        Head := COPYSTR(Tail,1,S - 1);
        Tail := COPYSTR(Tail,S);
      END;
    END;

    PROCEDURE CopyGenImpMappingLinesToTemp@1100485021(Direction@1100485003 : 'Import,Export';MappingCode@1100485001 : Code[10];VAR TempMappingLine@1100485000 : TEMPORARY Record 11020485);
    VAR
      GenImpMappingLine@1100485002 : Record 11020485;
    BEGIN
      TempMappingLine.DELETEALL;

      GenImpMappingLine.SETRANGE("Mapping Code",MappingCode);
      GenImpMappingLine.SETFILTER("Line No.",'<>%1',0);
      IF Direction = Direction::Import THEN BEGIN
        GenImpMappingLine.SETFILTER("Imp/Exp",'<>%1',GenImpMappingLine."Imp/Exp"::Export);
        GenImpMappingLine.SETFILTER("Buffer Field No.",'<>%1',0);
      END ELSE
        GenImpMappingLine.SETFILTER("Imp/Exp",'<>%1',GenImpMappingLine."Imp/Exp"::Import);

      GenImpMappingLine.FINDSET;
      REPEAT
        TempMappingLine := GenImpMappingLine;
        TempMappingLine.INSERT;
      UNTIL GenImpMappingLine.NEXT = 0;
    END;

    PROCEDURE SetGlobalConstants@1100485006(GenImpMapping@1210190000 : Record 11020484);
    BEGIN
      _CR[1] := 13;
      _LF[1] := 10;
      _CRLF[1] := 13;
      _CRLF[2] := 10;

      _S := GenImpMapping.Seperator;
      _SQ := _S + '"';
      _QS := '"' + _S;
      _QQ := '""';
      _QSQ := '"' + _S + '"';
      _Q := '"';
    END;

    PROCEDURE FileOpenInStream@1100485007(VAR f@1100485002 : File;VAR InS@1100485001 : InStream;FileName@1100485000 : Text[1024]);
    BEGIN
      f.TEXTMODE(TRUE);
      f.OPEN(FileName,TEXTENCODING::Windows);
      f.CREATEINSTREAM(InS);
    END;

    PROCEDURE FileOpenOutStream@1100485014(VAR f@1100485000 : File;VAR OutS@1100485001 : OutStream;FileName@1100485002 : Text[1024]);
    BEGIN
      f.CREATE(FileName,TEXTENCODING::Windows);
      f.CREATEOUTSTREAM(OutS);
    END;

    PROCEDURE FileClose@1100485012(VAR f@1100485000 : File;FileName@1100485002 : Text[1024]);
    BEGIN
      f.CLOSE;
      f.OPEN(FileName);
      f.SEEK(f.LEN - 2);
      f.TRUNC;
      f.CLOSE;
    END;

    PROCEDURE OpenWindow@1100485027(Txt@1100485000 : Text[80];VAR MaxCounter2@1100485001 : Integer);
    BEGIN
      Window.OPEN(Txt + Text008 + Text009);
      Counter := 0;
      Window.UPDATE(1,f.NAME);
      WindowLastUpdated := TIME;
    END;

    PROCEDURE UpdateWindow@1100485028();
    BEGIN
      IF TIME - WindowLastUpdated > 300 THEN BEGIN
        Window.UPDATE(2,ROUND(Counter / MaxCounter * 10000,1));
        WindowLastUpdated := TIME;
      END;
    END;

    BEGIN
    {
      //TODO.RTC kkleermaker: Filehandling does not work on RTC yet.
    }
    END.
  }
}

