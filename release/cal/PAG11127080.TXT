OBJECT Page 11127080 Extended Service Order FB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Totals;
    SourceTable=Table11012823;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 SETRANGE("Company Filter", COMPANYNAME);
               END;

    OnAfterGetRecord=VAR
                       Revenue@1100528201 : Decimal;
                       OpenOvhSurchSoftPurchase@1100528202 : Decimal;
                     BEGIN
                       IF IsBaseServiceOrder THEN BEGIN
                         ServiceOrderInfoMgt.GetBaseOrderCostRevenue(
                          "Base Service Order No.", BudgetAmount, BudgetHours, ActualCost, ActualHours, OpenPurchase, ReceivedNotInvoicedPurchase, OpenAmountHours, OpenHours,
                           ReceivedNotInvoicedHours, OpenInventory, Revenue, InvoicePrice, InvoiceInProcess, InvoicedPrice,
                           OpenOvhSurchSoftPurchase, OpenOvhSurchFirmPurchase, OpenOvhSurchHours, OpenOvhSurchInventory,
                           InvoiceCost);
                         ServiceOrderInfoMgt.GetBaseOrderCostRevenue2(
                           "Base Service Order No.",BudgetHoursPlant, OpenHoursSiteMngmnt, InvoicedLCY,
                           ChargedonProject, ChargedonProjectCost, InvoiceInProcessLCY,
                           CreditMemoInProcess, LatestExpectedReceiptDate,
                           PreRecordingAmount, RecordingAmount, ProductionAmount, ChargedtoPlant, ChargedtoPlantLocation);
                       END ELSE BEGIN
                         CALCFIELDS(
                           "Budget Amount","Budget Hours", "Budget Hours Plant", "Actual Costs", "Actual Hours", "Open Amount (Hours)", "Open Hours",
                           "Open Hours (Site Mngmnt.)", "Open (Purchase)", "Open (Inventory)");
                         CALCFIELDS(
                           "Open (Purchase)", "Received/Not Invoiced",
                           "Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. (Hours)", "Open Ovh. Surch. (Inventory)", "Open Hours (Site Mngmnt.)");
                         CALCFIELDS(
                           "Invoice Cost","Invoice Price", "Invoiced (LCY)",
                           "Invoice Price", "Invoiced Price", "Invoice in Process", "Credit Memo in Process","Received/Not Inv. Hours");
                         CALCFIELDS(
                           "Latest Expected Receipt Date", "Pre-Recording Amount", "Recording Amount", "Charged to Plant", "Charged to Plant Location",
                           "Charged on Project", "Charged on Project (Cost)");
                         BudgetAmount := "Budget Amount";
                         BudgetHours := "Budget Hours";
                         BudgetHoursPlant := "Budget Hours Plant";
                         ActualCost := "Actual Costs";
                         ActualHours :="Actual Hours";
                         OpenAmountHours := "Open Amount (Hours)";
                         OpenHours := "Open Hours";
                         OpenHoursSiteMngmnt := "Open Hours (Site Mngmnt.)";
                         OpenPurchase := "Open (Purchase)";
                         OpenInventory := "Open (Inventory)";
                         ReceivedNotInvoicedPurchase := "Received/Not Invoiced";
                         InvoiceCost := "Invoice Cost";
                         InvoicePrice := "Invoice Price";
                         InvoicedLCY := "Invoiced (LCY)";
                         ChargedonProject := "Charged on Project";
                         ChargedonProjectCost := "Charged on Project (Cost)";
                         InvoiceInProcessLCY := GetInvoiceInProcessLCY();
                         InvoicedPrice := "Invoiced Price";
                         InvoiceInProcess := "Invoice in Process";
                         CreditMemoInProcess := "Credit Memo in Process";
                         OpenOvhSurchFirmPurchase := "Open Ovh. Surch. Firm (Purch.)";
                         OpenOvhSurchHours := "Open Ovh. Surch. (Hours)";
                         OpenOvhSurchInventory := "Open Ovh. Surch. (Inventory)";
                         ReceivedNotInvoicedHours := "Received/Not Inv. Hours";
                         LatestExpectedReceiptDate := "Latest Expected Receipt Date";
                         PreRecordingAmount := "Pre-Recording Amount";
                         RecordingAmount := "Recording Amount";
                         ProductionAmount := ServiceUnitPriceManagement.GetProductionAmount("No.");
                         ChargedtoPlant := "Charged to Plant";
                         ChargedtoPlantLocation := "Charged to Plant Location";
                       END;
                       TotalOpenSurcharge := OpenOvhSurchFirmPurchase + OpenOvhSurchHours + OpenOvhSurchInventory;
                       TotCostDec :=
                           ActualCost + OpenPurchase + ReceivedNotInvoicedPurchase + OpenAmountHours + ReceivedNotInvoicedHours +
                           OpenInventory + TotalOpenSurcharge;
                       RevenueAmnt := InvoicePrice + InvoicedPrice + InvoiceInProcess + CreditMemoInProcess;
                       IF TotCostDec <> 0 THEN
                         ResultPerc := 100 * (RevenueAmnt - TotCostDec) / TotCostDec
                       ELSE
                         ResultPerc := 0;
                       ResultDec := RevenueAmnt - TotCostDec;
                     END;

  }
  CONTROLS
  {
    { 1210190000;;Container;
                ContainerType=ContentArea }

    { 1100528200;1;Field  ;
                Name=BudgetAmount;
                CaptionML=ENU=Budget Amount;
                SourceExpr=BudgetAmount;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderBudgetLines("Base Service Order No.")
                              ELSE BEGIN
                                ServiceOrderBudgetLine.RESET;
                                ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
                                ServiceOrderBudgetLine.SETRANGE("Service Order No.", "No.");
                                IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
                                  PAGE.RUN(0, ServiceOrderBudgetLine);
                              END;
                            END;
                             }

    { 1100528201;1;Field  ;
                Name=BudgetHours;
                CaptionML=ENU=Budget Hours;
                SourceExpr=BudgetHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderBudgetHourLines("Base Service Order No.")
                              ELSE BEGIN
                                ServiceOrderBudgetLine.RESET;
                                ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
                                ServiceOrderBudgetLine.SETRANGE("Service Order No.", "No.");
                                ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Labor);
                                IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
                                  PAGE.RUN(0, ServiceOrderBudgetLine);
                              END;
                            END;
                             }

    { 1100528202;1;Field  ;
                Name=BudgetHoursPlant;
                CaptionML=ENU=Budget Hours Plant;
                SourceExpr=BudgetHoursPlant;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderBudgetPlantLines("Base Service Order No.")
                              ELSE BEGIN
                                ServiceOrderBudgetLine.RESET;
                                ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
                                ServiceOrderBudgetLine.SETRANGE("Service Order No.", "No.");
                                ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Plant);
                                IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
                                  PAGE.RUN(0, ServiceOrderBudgetLine);
                              END;
                            END;
                             }

    { 1100528203;1;Field  ;
                Name=ActualCost;
                CaptionML=ENU=Actual Costs;
                SourceExpr=ActualCost;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderActual("Base Service Order No.")
                              ELSE BEGIN
                                ServiceLedgerEntry.RESET;
                                ServiceLedgerEntry.SETCURRENTKEY("Service Order No.");
                                ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
                                ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
                                IF NOT ServiceLedgerEntry.ISEMPTY THEN
                                  PAGE.RUN(0, ServiceLedgerEntry);
                              END;
                            END;
                             }

    { 1100528204;1;Field  ;
                Name=ActualHours;
                CaptionML=ENU=Actual Hours;
                SourceExpr=ActualHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderActualHours("Base Service Order No.")
                              ELSE BEGIN
                                ServiceLedgerEntry.RESET;
                                ServiceLedgerEntry.SETCURRENTKEY("Service Order No.");
                                ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
                                ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
                                ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Labor);
                                IF NOT ServiceLedgerEntry.ISEMPTY THEN
                                  PAGE.RUN(0, ServiceLedgerEntry);
                              END;
                            END;
                             }

    { 1100528205;1;Field  ;
                Name=OpenAmountHours;
                CaptionML=ENU=Open Hours;
                SourceExpr=OpenAmountHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderOpenAmountHours("Base Service Order No.")
                              ELSE BEGIN
                                HourAccountingLine.RESET;
                                HourAccountingLine.SETRANGE("Service Order No.", "No.");
                                HourAccountingLine.SETRANGE("Receiving Company", '');
                                CLEAR(HourAccountingLines);
                                HourAccountingLines.SetSelection(DATABASE::"Service Order Cost Plus Entry", "No.", '', '', '', FALSE);
                                HourAccountingLines.SETTABLEVIEW(HourAccountingLine);
                                HourAccountingLines.EDITABLE(FALSE);
                                HourAccountingLines.RUNMODAL();
                              END;
                            END;
                             }

    { 1100528206;1;Field  ;
                Name=OpenHours;
                CaptionML=ENU=Open Hours;
                SourceExpr=OpenHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderOpenAmountHours("Base Service Order No.")
                              ELSE BEGIN
                                HourAccountingLine.RESET;
                                HourAccountingLine.SETRANGE("Service Order No.", "No.");
                                HourAccountingLine.SETRANGE("Receiving Company", '');
                                CLEAR(HourAccountingLines);
                                HourAccountingLines.SetSelection(DATABASE::"Service Order Cost Plus Entry", "No.", '', '', '', FALSE);
                                HourAccountingLines.SETTABLEVIEW(HourAccountingLine);
                                HourAccountingLines.EDITABLE(FALSE);
                                HourAccountingLines.RUNMODAL();
                              END;
                            END;
                             }

    { 1100528207;1;Field  ;
                Name=OpenHoursSiteMngmnt;
                CaptionML=ENU=Open Hours (Site Mngmnt.);
                SourceExpr=OpenHoursSiteMngmnt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderSiteMngmntHours("Base Service Order No.")
                              ELSE BEGIN
                                SiteMngmntHoursLine.RESET;
                                SiteMngmntHoursLine.SETRANGE(Type, SiteMngmntHoursLine.Type::Service);
                                SiteMngmntHoursLine.SETRANGE("Object No.", "No.");
                                SiteMngmntHoursLine.SETRANGE("Receiving Company", '');
                                SiteMngmntHoursLine.SETFILTER(Status, '<%1', SiteMngmntHoursLine.Status::Posted);
                                CLEAR(SiteMngmntHoursLineList);
                                SiteMngmntHoursLineList.SETTABLEVIEW(HourAccountingLine);
                                SiteMngmntHoursLineList.EDITABLE(FALSE);
                                SiteMngmntHoursLineList.RUNMODAL();
                              END;
                            END;
                             }

    { 1100528208;1;Field  ;
                Name=OpenPurchase;
                CaptionML=ENU=Open (Purchase);
                SourceExpr=OpenPurchase;
                Editable=FALSE;
                OnDrillDown=VAR
                              PurchaseLine@1100527550 : Record 39;
                            BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderOpenPurchase("Base Service Order No.", FALSE)
                              ELSE BEGIN
                                PurchaseLine.SETRANGE("Service Order No.", "No.");
                                CLEAR(OpenPurchaseListServOrder);
                                OpenPurchaseListServOrder.LOOKUPMODE(TRUE);
                                OpenPurchaseListServOrder.SETTABLEVIEW(PurchaseLine);
                                OpenPurchaseListServOrder.RUNMODAL;
                              END;
                            END;
                             }

    { 1100528209;1;Field  ;
                Name=OpenInventory;
                CaptionML=ENU=Open (Inventory);
                SourceExpr=OpenInventory;
                Editable=FALSE;
                OnDrillDown=VAR
                              ItemJournalLine@1100528201 : Record 83;
                              ItemJournalLinesFrm@1100528200 : Page 519;
                            BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderOpenInventory("Base Service Order No.")
                              ELSE BEGIN
                                ItemJournalLine.RESET;
                                ItemJournalLine.SETRANGE("Service Order No.", "No.");
                                CLEAR(ItemJournalLinesFrm);
                                ItemJournalLinesFrm.SetSelection(DATABASE::"Service Order Cost Plus Entry", "No.", '', '', '', 0, 0, FALSE);
                                ItemJournalLinesFrm.SETTABLEVIEW(ItemJournalLine);
                                ItemJournalLinesFrm.RUNMODAL();
                              END;
                            END;
                             }

    { 1100528227;1;Field  ;
                Name=TotalOpenSurcharge;
                CaptionML=ENU=Open (Overhead Surcharge);
                SourceExpr=TotalOpenSurcharge;
                Editable=FALSE }

    { 1100528226;1;Field  ;
                Name=ReceivedNotInvoicedPurchase;
                CaptionML=ENU=Received/Not Invoiced;
                SourceExpr=ReceivedNotInvoicedPurchase;
                Editable=FALSE;
                OnDrillDown=VAR
                              PurchaseLine@1100527550 : Record 39;
                            BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderOpenPurchase("Base Service Order No.", FALSE)
                              ELSE BEGIN
                                PurchaseLine.SETRANGE("Service Order No.", "No.");
                                CLEAR(OpenPurchaseListServOrder);
                                OpenPurchaseListServOrder.LOOKUPMODE(TRUE);
                                OpenPurchaseListServOrder.SETTABLEVIEW(PurchaseLine);
                                OpenPurchaseListServOrder.RUNMODAL;
                              END;
                            END;
                             }

    { 1100528225;1;Field  ;
                Name=InvoiceCost;
                CaptionML=ENU=Invoice Cost;
                SourceExpr=InvoiceCost;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderInvoiceCost("Base Service Order No.")
                              ELSE BEGIN
                                ServiceLedgerEntry.RESET;
                                ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
                                ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
                                ServiceLedgerEntry.SETRANGE(Chargeable, TRUE);
                                ServiceLedgerEntry.SETRANGE("Cost Plus Entry Created", FALSE);
                                PAGE.RUN(0, ServiceLedgerEntry);
                              END;
                            END;
                             }

    { 1100528224;1;Field  ;
                Name=InvoicePrice;
                CaptionML=ENU=Invoice Price;
                SourceExpr=InvoicePrice;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderCPEToInvoice("Base Service Order No.")
                              ELSE BEGIN
                                ServiceOrderCostPlusEntry.RESET;
                                ServiceOrderCostPlusEntry.FILTERGROUP(4);
                                ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "No.");
                                ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
                                ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
                                ServiceOrderCostPlusEntry.FILTERGROUP(0);
                                PAGE.RUN(0, ServiceOrderCostPlusEntry);
                              END;
                            END;
                             }

    { 1100528223;1;Field  ;
                Name=InvoicedLCY;
                CaptionML=ENU=Invoiced (LCY);
                SourceExpr=InvoicedLCY;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderInvoiced("Base Service Order No.")
                              ELSE BEGIN
                                ServiceLedgerEntry.RESET;
                                ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
                                ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Revenues);
                                PAGE.RUN(0, ServiceLedgerEntry);
                              END;
                            END;
                             }

    { 1100528222;1;Field  ;
                Name=ChargedonProject;
                CaptionML=ENU=Charged on Project;
                SourceExpr=ChargedonProject;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderChargedOnProject("Base Service Order No.")
                              ELSE BEGIN
                                ServiceLedgerEntry.RESET;
                                ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
                                ServiceLedgerEntry.SETRANGE("Transfer to Project", ServiceLedgerEntry."Transfer to Project"::Processed);
                                PAGE.RUN(0, ServiceLedgerEntry);
                              END;
                            END;
                             }

    { 1100528221;1;Field  ;
                Name=ChargedonProjectCost;
                CaptionML=ENU=Charged on Project (Cost);
                SourceExpr=ChargedonProjectCost;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderChargedOnProject("Base Service Order No.")
                              ELSE BEGIN
                                ServiceLedgerEntry.RESET;
                                ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
                                ServiceLedgerEntry.SETRANGE("Transfer to Project", ServiceLedgerEntry."Transfer to Project"::Processed);
                                PAGE.RUN(0, ServiceLedgerEntry);
                              END;
                            END;
                             }

    { 1100528220;1;Field  ;
                Name=Invoice in Process (LCY);
                CaptionML=ENU=Invoice in Process (LCY);
                SourceExpr=InvoiceInProcessLCY;
                Editable=FALSE }

    { 1100528219;1;Field  ;
                Name=RevenueAmnt;
                CaptionML=ENU=Total Revenues;
                SourceExpr=RevenueAmnt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderServiceEntries("Base Service Order No.",1)
                              ELSE
                                ShowServiceEntries(1);
                            END;
                             }

    { 1100528218;1;Field  ;
                Name=TotCostDec;
                CaptionML=ENU=Total Cost;
                SourceExpr=TotCostDec;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderServiceEntries("Base Service Order No.",0)
                              ELSE
                                ShowServiceEntries(0);
                            END;
                             }

    { 1100528217;1;Field  ;
                Name=ResultDec;
                CaptionML=ENU=Result;
                SourceExpr=ResultDec;
                Editable=FALSE }

    { 1100528216;1;Field  ;
                Name=ResultPerc;
                CaptionML=ENU=Result (%);
                SourceExpr=ResultPerc;
                Editable=FALSE }

    { 1100528215;1;Field  ;
                Name=LatestExpectedReceiptDate;
                CaptionML=ENU=Latest Expected Receipt Date;
                SourceExpr=LatestExpectedReceiptDate;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              PurchaseLine.RESET;
                              IF IsBaseServiceOrder THEN
                                PurchaseLine.SETRANGE("Base Service Order No.","Base Service Order No.")
                              ELSE
                                PurchaseLine.SETRANGE("Service Order No.","No.");
                              PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
                              PAGE.RUN(0, PurchaseLine);
                            END;
                             }

    { 1100528214;1;Field  ;
                Name=PreRecordingAmount;
                CaptionML=ENU=Pre-Recording Amount;
                SourceExpr=PreRecordingAmount;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderSUPRecordingLines("Base Service Order No.")
                              ELSE BEGIN
                                SUPRecordingLine.RESET;
                                SUPRecordingLine.SETRANGE("Service Order No.", "No.");
                                PAGE.RUN(0,SUPRecordingLine);
                              END;
                            END;
                             }

    { 1100528213;1;Field  ;
                Name=RecordingAmount;
                CaptionML=ENU=Recording Amount;
                SourceExpr=RecordingAmount;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderSUPRecordingLines("Base Service Order No.")
                              ELSE BEGIN
                                SUPRecordingLine.RESET;
                                SUPRecordingLine.SETRANGE("Service Order No.", "No.");
                                PAGE.RUN(0,SUPRecordingLine);
                              END;
                            END;
                             }

    { 1100528212;1;Field  ;
                Name=ProductionAmount;
                CaptionML=ENU=Production Recording Amount;
                SourceExpr=ProductionAmount;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderSUPProductionLines("Base Service Order No.")
                              ELSE BEGIN
                                ServiceUnitPriceManagement.LookupProductionAmount("No.");
                              END;
                            END;
                             }

    { 1100528211;1;Field  ;
                Name=ChargedtoPlant;
                CaptionML=ENU=Charged to Plant;
                SourceExpr=ChargedtoPlant;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderPlantEntries("Base Service Order No.", FALSE)
                              ELSE BEGIN
                                PlantLedgerEntry.RESET;
                                PlantLedgerEntry.SETRANGE("Plant Invoice Origin", PlantLedgerEntry."Plant Invoice Origin"::"Service Order");
                                PlantLedgerEntry.SETRANGE("Service Order No.", "No.");
                                PAGE.RUN(0, PlantLedgerEntry);
                              END;
                            END;
                             }

    { 1100528210;1;Field  ;
                Name=ChargedtoPlantLocation;
                CaptionML=ENU=Charged to Plant Location;
                SourceExpr=ChargedtoPlantLocation;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              IF IsBaseServiceOrder THEN
                                ServiceOrderInfoMgt.ShowBaseOrderPlantEntries("Base Service Order No.", TRUE)
                              ELSE BEGIN
                                PlantLedgerEntry.RESET;
                                PlantLedgerEntry.SETRANGE("Plant Invoice Origin", PlantLedgerEntry."Plant Invoice Origin"::"Service Order");
                                PlantLedgerEntry.SETRANGE("Service Order No.", "No.");
                                PlantLedgerEntry.SETFILTER("Plant Location", '<>%1', '');
                                PAGE.RUN(0, PlantLedgerEntry);
                              END;
                            END;
                             }

  }
  CODE
  {
    VAR
      ServiceOrderInfoMgt@1100528208 : Codeunit 11012841;
      ServiceUnitPriceManagement@1100528207 : Codeunit 11012846;
      IsBaseServiceOrder@1100528200 : Boolean;
      TotCostDec@1100528603 : Decimal;
      RevenueAmnt@1100528602 : Decimal;
      ResultPerc@1100528601 : Decimal;
      ResultDec@1100528600 : Decimal;
      BudgetAmount@1100528224 : Decimal;
      BudgetHours@1100528223 : Decimal;
      BudgetHoursPlant@1100528225 : Decimal;
      ActualCost@1100528222 : Decimal;
      ActualHours@1100528221 : Decimal;
      OpenPurchase@1100528220 : Decimal;
      ReceivedNotInvoicedPurchase@1100528219 : Decimal;
      OpenAmountHours@1100528218 : Decimal;
      OpenHours@1100528217 : Decimal;
      OpenHoursSiteMngmnt@1100528226 : Decimal;
      ReceivedNotInvoicedHours@1100528216 : Decimal;
      OpenInventory@1100528215 : Decimal;
      InvoicePrice@1100528213 : Decimal;
      InvoiceInProcess@1100528212 : Decimal;
      OpenOvhSurchFirmPurchase@1100528205 : Decimal;
      OpenOvhSurchHours@1100528204 : Decimal;
      OpenOvhSurchInventory@1100528203 : Decimal;
      TotalOpenSurcharge@1100528202 : Decimal;
      InvoiceCost@1100528201 : Decimal;
      InvoicedLCY@1100528227 : Decimal;
      ChargedonProject@1100528228 : Decimal;
      ChargedonProjectCost@1100528229 : Decimal;
      InvoiceInProcessLCY@1100528230 : Decimal;
      InvoicedPrice@1100528231 : Decimal;
      CreditMemoInProcess@1100528232 : Decimal;
      LatestExpectedReceiptDate@1100528209 : Date;
      PreRecordingAmount@1100528210 : Decimal;
      RecordingAmount@1100528233 : Decimal;
      ProductionAmount@1100528234 : Decimal;
      ChargedtoPlant@1100528235 : Decimal;
      ChargedtoPlantLocation@1100528236 : Decimal;
      ServiceOrderBudgetLine@1100528206 : Record 11012875;
      ServiceLedgerEntry@1100528211 : Record 11012819;
      HourAccountingLine@1100528214 : Record 11012039;
      SiteMngmntHoursLine@1100528238 : Record 11012361;
      ServiceOrder@1100528240 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528242 : Record 11012825;
      PurchaseLine@1100528243 : Record 39;
      SUPRecordingLine@1100528244 : Record 11071772;
      PlantLedgerEntry@1100528245 : Record 11012572;
      HourAccountingLines@1100528237 : Page 11012277;
      SiteMngmntHoursLineList@1100528239 : Page 11130642;
      OpenPurchaseListServOrder@1100528241 : Page 11125133;

    PROCEDURE SetBaseServiceOrder@1100528200(BaseServiceOrder@1100528200 : Boolean);
    BEGIN
        IsBaseServiceOrder := BaseServiceOrder;
    END;

    BEGIN
    END.
  }
}

