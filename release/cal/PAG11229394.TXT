OBJECT Page 11229394 Hours Chart (Stats)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Stundendiagramm (Statistik);
               ENU=Hours Chart (Statistics);
               NLD=Urendiagram (statistiek)];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11072215;
    PageType=ListPlus;
    OnInit=BEGIN
             PeriodType := PeriodType::Month;
             NoOfColumns := 12;

             DetermineMeasurementIndexes;
           END;

    OnOpenPage=BEGIN
                 GetUserDefaults;
                 Date."Period Start" := WORKDATE;
                 PeriodFormManagement.FindDate('=<', Date, PeriodType);
                 BaseDate := Date."Period Start";
               END;

    ActionList=ACTIONS
    {
      { 1100528615;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528614;1 ;Action    ;
                      CaptionML=[DEU=ZurÅck;
                                 ENU=Previous;
                                 NLD=Vorige;
                                 NOR=Forrige;
                                 SVE=FîregÜende];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('<', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
      { 1100528613;1 ;Action    ;
                      CaptionML=[DEU=Weiter;
                                 ENU=Next;
                                 NLD=Volgende;
                                 NOR=Neste;
                                 SVE=NÑsta];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('>', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528612;;Container;
                ContainerType=ContentArea }

    { 1100528611;1;Group  ;
                CaptionML=[DEU=Allgemein;
                           ENU=General;
                           NLD=Algemeen;
                           NOR=Generell;
                           SVE=AllmÑnt];
                GroupType=Group }

    { 1100528610;2;Field  ;
                CaptionML=[NOR=Filter for Kostsenter;
                           SVE=Filter fîr kostnadsstÑlle];
                SourceExpr=CostCenterCodeFilter;
                CaptionClass='1,3,1';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528605;2;Field  ;
                CaptionML=[DEU=Managerfilter;
                           ENU=Manager Filter;
                           NLD=Managerfilter];
                SourceExpr=ManagerNoFilter;
                TableRelation=Employee;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528606;2;Field  ;
                CaptionML=[DEU=Fachgruppenfilter;
                           ENU=Trade Association Filter;
                           NLD=Vakgroepfilter];
                SourceExpr=TradeAssociationFilter;
                TableRelation="Trade Association";
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528607;2;Field  ;
                CaptionML=[DEU=Diagrammart;
                           ENU=Chart Type;
                           NLD=Diagramtype;
                           NOR=Diagramtype;
                           SVE=Diagramtyp];
                OptionCaptionML=[DEU=Gesamt,Prozentsatz;
                                 ENU=Total,Percentage;
                                 NLD=Totaal,Percentage];
                SourceExpr=UserChartType;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528603;1;Group  ;
                CaptionML=[DEU=Diagramm;
                           ENU=Diagram;
                           NLD=Diagram];
                GroupType=Group }

    { 1100528604;2;Field  ;
                Name=Chart;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

    { 1100528602;1;Group  ;
                CaptionML=[DEU=Optionen;
                           ENU=Options;
                           NLD=Opties;
                           NOR=Alternativer;
                           SVE=Alternativ];
                GroupType=Group }

    { 1100528601;2;Field  ;
                CaptionML=[DEU=Anzeigen nach;
                           ENU=View by;
                           NLD=Weergeven per;
                           NOR=Vis per;
                           SVE=Visa per];
                OptionCaptionML=[DEU=Tag,Woche,Monat,Quartal,Jahr,Periode;
                                 ENU=Day,Week,Month,Quarter,Year,Period;
                                 NLD=Dag,Week,Maand,Kwartaal,Jaar,Periode;
                                 NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;
                                 SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             PeriodFormManagement.FindDate('=<>', Date, PeriodType);
                             UpdateChart;
                           END;
                            }

    { 1100528600;2;Field  ;
                CaptionML=[DEU=Anz. der Perioden;
                           ENU=No. Of Periods;
                           NLD=Aantal perioden];
                SourceExpr=NoOfColumns;
                OnValidate=BEGIN
                             IF NoOfColumns <= 0 THEN
                               ERROR(Text001);
                             UpdateChart;
                           END;
                            }

  }
  CODE
  {
    VAR
      BusinessChartBuffer@1100528602 : Record 485;
      Date@1100528601 : Record 2000000007;
      PeriodFormManagement@1100528600 : Codeunit 359;
      PeriodType@1100528603 : ',Week,Month,Quarter,Year';
      Text000@1100528614 : TextConst 'DEU=Tag,Woche,Monat,Quartal,Jahr,Periode;ENU=Day,Week,Month,Quarter,Year,Period;NLD=Dag,Week,Maand,Kwartaal,Jaar,Periode;NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period';
      Text001@1100528613 : TextConst 'DEU=Die Anz. der Perioden muss mindestens 1 sein;ENU=No. of Periods must be at least 1;NLD=Aantal perioden dient minimaal 1 te zijn';
      TextNoOfDirectHours@1100528607 : TextConst 'DEU=Direkte Stunden;ENU=Direct Hours;NLD=Directe uren';
      TextNoOfIndirectHours@1100528606 : TextConst 'DEU=Indirekte Stunden;ENU=Indirect Hours;NLD=Indirecte uren';
      TextNoOfTravelHours@1100528605 : TextConst 'DEU=FAHRTZEITEN;ENU=Travel Hours;NLD=Reisuren;NOR=Reisetimer;SVE=Restimmar';
      BaseDate@1100528610 : Date;
      NoOfDirectHoursIndex@1100528609 : Integer;
      NoOfIndirectHoursIndex@1100528608 : Integer;
      NoOfTravelHoursIndex@1100528604 : Integer;
      NoOfNormHoursIndex@1100528615 : Integer;
      NoOfColumns@1100528611 : Integer;
      TradeAssociationFilter@1100528612 : Text;
      TextNoOfNormHours@1100528616 : TextConst 'DEU=Normstunden;ENU=Norm Hours;NLD=Norm uren;NOR=Normtimer;SVE=Norm (timmar)';
      CostCenterCodeFilter@1100528617 : Text;
      ManagerNoFilter@1100528618 : Text;
      UserChartType@1100528619 : 'Total,Percentage';
      AgeFilter@1100528620 : Text;

    PROCEDURE UpdateChart@1100528601();
    VAR
      HoursStats@1100528608 : Record 11072215;
      Date@1100528604 : Record 2000000007;
      Offset@1100528602 : Integer;
      ColumnName@1100528601 : Text[30];
      PeriodDate@1100528600 : Date;
      DirectHoursValue@1100528603 : Decimal;
      IndirectHoursValue@1100528605 : Decimal;
      TravelHoursValue@1100528606 : Decimal;
      NormHoursValue@1100528607 : Decimal;
      ChartType@1100528609 : Option;
    BEGIN
      WITH BusinessChartBuffer DO BEGIN
        Initialize;
        IF UserChartType = UserChartType::Total THEN
          ChartType := "Chart Type"::Line
        ELSE
          ChartType := "Chart Type"::StackedColumn;
        AddMeasure(TextNoOfDirectHours, NoOfDirectHoursIndex, "Data Type"::Decimal, ChartType);
        AddMeasure(TextNoOfIndirectHours, NoOfIndirectHoursIndex, "Data Type"::Decimal, ChartType);
        AddMeasure(TextNoOfTravelHours, NoOfTravelHoursIndex, "Data Type"::Decimal, ChartType);
        IF UserChartType = UserChartType::Total THEN
          AddMeasure(TextNoOfNormHours, NoOfNormHoursIndex, "Data Type"::Decimal, ChartType);
        SetXAxis(GetPeriodTypeText(PeriodType), "Data Type"::String);

        Date."Period Start" := BaseDate;
        PeriodFormManagement.FindDate('=<>', Date, PeriodType);

        FOR Offset := 0 TO NoOfColumns -1 DO BEGIN
          IF Offset > 0 THEN
            PeriodFormManagement.NextDate(1, Date, PeriodType);
          PeriodDate := Date."Period Start";
          ColumnName := PeriodFormManagement.CreatePeriodFormat(PeriodType, Date."Period Start");

          AddColumn(ColumnName);

          HoursStats.RESET;
          HoursStats.SETRANGE("Posting Date", Date."Period Start", Date."Period End");
          IF TradeAssociationFilter <> '' THEN
            HoursStats.SETFILTER("Trade Association", TradeAssociationFilter);
          IF CostCenterCodeFilter <> '' THEN
            HoursStats.SETFILTER("Cost Center Code", CostCenterCodeFilter);
          IF ManagerNoFilter <> '' THEN
            HoursStats.SETFILTER("Manager No.", ManagerNoFilter);
          HoursStats.CALCSUMS("Direct Hours", "Indirect Hours", "Travel Hours", "Norm Hours");

          DirectHoursValue := HoursStats."Direct Hours";
          IndirectHoursValue := HoursStats."Indirect Hours";
          TravelHoursValue := HoursStats."Travel Hours";
          NormHoursValue := HoursStats."Norm Hours";
          IF UserChartType = UserChartType::Percentage THEN BEGIN
            IF HoursStats."Norm Hours" <> 0 THEN BEGIN
              DirectHoursValue /= HoursStats."Norm Hours" / 100;
              IndirectHoursValue /= HoursStats."Norm Hours" / 100;
              TravelHoursValue /= HoursStats."Norm Hours" / 100;
              NormHoursValue := 100;
            END ELSE BEGIN
              DirectHoursValue := 0;
              IndirectHoursValue := 0;
              TravelHoursValue := 0;
              NormHoursValue := 0;
            END;
          END;

          BusinessChartBuffer.SetValueByIndex(NoOfDirectHoursIndex -1, Offset, DirectHoursValue);
          BusinessChartBuffer.SetValueByIndex(NoOfIndirectHoursIndex -1, Offset, IndirectHoursValue);
          BusinessChartBuffer.SetValueByIndex(NoOfTravelHoursIndex -1, Offset, TravelHoursValue);
          IF UserChartType = UserChartType::Total THEN
            BusinessChartBuffer.SetValueByIndex(NoOfNormHoursIndex -1, Offset, NormHoursValue);
        END;
        Update(CurrPage.Chart);
      END;
    END;

    PROCEDURE GetPeriod@1100528604(IOffset@1100528600 : Integer;VAR ODate@1100528601 : Record 2000000007);
    BEGIN
      ODate."Period Start" := BaseDate;
      PeriodFormManagement.FindDate('=<>', ODate, PeriodType);
      IF IOffset <> 0 THEN
        PeriodFormManagement.NextDate(IOffset, ODate, PeriodType);
    END;

    PROCEDURE GetPeriodTypeText@1100528610(IPeriodType@1100528600 : Option) PeriodTypeText : Text;
    VAR
      OptionFieldTools@1100528601 : Codeunit 11012271;
    BEGIN
      OptionFieldTools.OptionValueToReadableOption(Text000, IPeriodType, PeriodTypeText);
    END;

    PROCEDURE DetermineMeasurementIndexes@1100528611();
    BEGIN
      NoOfDirectHoursIndex := 1;
      NoOfIndirectHoursIndex := 2;
      NoOfTravelHoursIndex := 3;
      NoOfNormHoursIndex := 4;
    END;

    PROCEDURE GetUserDefaults@1100528600();
    VAR
      UserDefaultsStats@1100528600 : Record 11072218;
      PeriodFilter@1100528601 : Text;
    BEGIN
      UserDefaultsStats.GetUserDefaults(PeriodType, PeriodFilter, AgeFilter);
    END;

    PROCEDURE ShowHours@1100528602(IOffset@1100528600 : Integer;IType@1100528601 : 'Direct,Indirect,Travel,Norm');
    VAR
      HoursStats@1100528602 : Record 11072215;
    BEGIN
      GetPeriod(IOffset, Date);
      HoursStats.SETRANGE("Reporting Date", "Reporting Date");
      HoursStats.SETRANGE("Posting Date", Date."Period Start", Date."Period End");
      CASE IType OF
        IType::Direct:
          PAGE.RUNMODAL(0, HoursStats, HoursStats."Direct Hours");
        IType::Indirect:
          PAGE.RUNMODAL(0, HoursStats, HoursStats."Indirect Hours");
        IType::Travel:
          PAGE.RUNMODAL(0, HoursStats, HoursStats."Travel Hours");
        IType::Norm:
          PAGE.RUNMODAL(0, HoursStats, HoursStats."Norm Hours");
      END;
    END;

    EVENT Chart@-1100528604::DataPointClicked@1(point@1100525000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    VAR
      DrillDownIndex@1100525001 : Integer;
    BEGIN
      BusinessChartBuffer.SetDrillDownIndexes(point);
      DrillDownIndex := BusinessChartBuffer."Drill-Down X Index";
      CASE BusinessChartBuffer."Drill-Down Measure Index" +1 OF
        NoOfDirectHoursIndex:
          ShowHours(DrillDownIndex, 0);
        NoOfIndirectHoursIndex:
          ShowHours(DrillDownIndex, 1);
        NoOfTravelHoursIndex:
          ShowHours(DrillDownIndex, 2);
        NoOfNormHoursIndex:
          ShowHours(DrillDownIndex, 3);
      END;
    END;

    EVENT Chart@-1100528604::DataPointDoubleClicked@2(point@1100525000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT Chart@-1100528604::AddInReady@3();
    BEGIN
      UpdateChart;
    END;

    EVENT Chart@-1100528604::Refresh@4();
    BEGIN
    END;

    BEGIN
    END.
  }
}

