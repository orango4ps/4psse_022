OBJECT Codeunit 1720 Deferral Utilities
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DeferralHeader@1000 : Record 1701;
      GenJnlCheckLine@1008 : Codeunit 11;
      AmountRoundingPrecision@1011 : Decimal;
      InvalidPostingDateErr@1007 : TextConst '@@@="%1=The date passed in for the posting date.";ENU=%1 is not within the range of posting dates for your company.;NOR=%1 er ikke innenfor tillatte bokf›ringsdatoer for selskapet.;SVE=%1 „r inte inom det till†tna intervallet f”r bokf”ringsdatum f”r ditt f”retag.';
      DeferSchedOutOfBoundsErr@1022 : TextConst 'ENU=The deferral schedule falls outside the accounting periods that have been set up for the company.;NOR=Tidsplanen for periodisering er utenfor regnskapsperiodene som er konfigurert for selskapet.;SVE=Periodiseringsschemat hamnar utanf”r bokf”ringsperioderna som har angetts av f”retaget.';
      SelectDeferralCodeMsg@1023 : TextConst 'ENU=A deferral code must be selected for the line to view the deferral schedule.;NOR=Periodiseringskoden m† velges for linjen for † vise tidsplanen for periodisering.;SVE=En periodiseringskod m†ste v„ljas f”r raden f”r att visa periodiseringsschemat.';

    [External]
    PROCEDURE CreateRecurringDescription@4(PostingDate@1000 : Date;Description@1001 : Text[100];DocumentLineDescription@1100528400 : Text[100]) FinalDescription : Text[100];
    VAR
      AccountingPeriod@1007 : Record 50;
      Day@1006 : Integer;
      Week@1005 : Integer;
      Month@1004 : Integer;
      Year@1002 : Integer;
      MonthText@1003 : Text[30];
      StringFunctions@1100528401 : Codeunit 11012273;
      TempDescription@1100528402 : Text;
    BEGIN
      TempDescription := StringFunctions.ReplaceString(Description,'%99',DocumentLineDescription); //**4PS.n
      Day := DATE2DMY(PostingDate,1);
      Week := DATE2DWY(PostingDate,2);
      Month := DATE2DMY(PostingDate,2);
      MonthText := FORMAT(PostingDate,0,'<Month Text>');
      Year := DATE2DMY(PostingDate,3);
      IF IsAccountingPeriodExist(AccountingPeriod,PostingDate) THEN BEGIN
        AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
        IF NOT AccountingPeriod.FINDLAST THEN
          AccountingPeriod.Name := '';
      END;
      //**4PS.sn
      FinalDescription :=
        COPYSTR(STRSUBSTNO(TempDescription,Day,Week,Month,MonthText,AccountingPeriod.Name,Year),1,MAXSTRLEN(Description));
      //**4PS.en
    END;

    [External]
    PROCEDURE CreateDeferralSchedule@1(DeferralCode@1008 : Code[10];DeferralDocType@1011 : Integer;GenJnlTemplateName@1012 : Code[10];GenJnlBatchName@1013 : Code[10];DocumentType@1003 : Integer;DocumentNo@1004 : Code[20];LineNo@1016 : Integer;AmountToDefer@1017 : Decimal;CalcMethod@1018 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';StartDate@1019 : Date;NoOfPeriods@1020 : Integer;ApplyDeferralPercentage@1026 : Boolean;DeferralDescription@1028 : Text[100];AdjustStartDate@1001 : Boolean;CurrencyCode@1002 : Code[10];DocumentLineDescription@1100528400 : Text[100]);
    VAR
      DeferralTemplate@1010 : Record 1700;
      DeferralHeader@1021 : Record 1701;
      DeferralLine@1000 : Record 1702;
      AdjustedStartDate@1024 : Date;
      AdjustedDeferralAmount@1027 : Decimal;
      IsHandled@1005 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCreateDeferralSchedule(
        DeferralCode,DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,AmountToDefer,CalcMethod,
        StartDate,NoOfPeriods,ApplyDeferralPercentage,DeferralDescription,AdjustStartDate,CurrencyCode,IsHandled);
      IF IsHandled THEN
        EXIT;

      InitCurrency(CurrencyCode);
      DeferralTemplate.GET(DeferralCode);
      // "Start Date" passed in needs to be adjusted based on the Deferral Code's Start Date setting
      IF AdjustStartDate THEN
        AdjustedStartDate := SetStartDate(DeferralTemplate,StartDate)
      ELSE
        AdjustedStartDate := StartDate;

      AdjustedDeferralAmount := AmountToDefer;
      IF ApplyDeferralPercentage THEN
        AdjustedDeferralAmount := ROUND(AdjustedDeferralAmount * (DeferralTemplate."Deferral %" / 100),AmountRoundingPrecision);

      SetDeferralRecords(DeferralHeader,DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,
        CalcMethod,NoOfPeriods,AdjustedDeferralAmount,AdjustedStartDate,
        DeferralCode,DeferralDescription,AmountToDefer,AdjustStartDate,CurrencyCode);

      CASE CalcMethod OF
        CalcMethod::"Straight-Line":
          //CalculateStraightline(DeferralHeader,DeferralLine,DeferralTemplate); //**4PS.o
          CalculateStraightline(DeferralHeader,DeferralLine,DeferralTemplate,DocumentLineDescription); //**4PS.n
        CalcMethod::"Equal per Period":
          //CalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate); //**4PS.o
          CalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate,DocumentLineDescription); //**4PS.n
        CalcMethod::"Days per Period":
          //CalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate); //**4PS.o
          CalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate,DocumentLineDescription); //**4PS.n
        CalcMethod::"User-Defined":
          //CalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate); //**4PS.o
          CalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate,DocumentLineDescription); //**4PS.n
      END;

      OnAfterCreateDeferralSchedule(DeferralHeader,DeferralLine,DeferralTemplate);
    END;

    [External]
    PROCEDURE CalcDeferralNoOfPeriods@205(CalcMethod@1003 : Option;NoOfPeriods@1004 : Integer;StartDate@1002 : Date) : Integer;
    VAR
      DeferralTemplate@1000 : Record 1700;
      AccountingPeriod@1001 : Record 50;
    BEGIN
      CASE CalcMethod OF
        DeferralTemplate."Calc. Method"::"Equal per Period",
        DeferralTemplate."Calc. Method"::"User-Defined":
          EXIT(NoOfPeriods);
        DeferralTemplate."Calc. Method"::"Straight-Line",
        DeferralTemplate."Calc. Method"::"Days per Period":
          BEGIN
            IF IsAccountingPeriodExist(AccountingPeriod,StartDate) THEN BEGIN
              AccountingPeriod.SETFILTER("Starting Date",'>=%1',StartDate);
              AccountingPeriod.FINDFIRST;
            END;
            IF AccountingPeriod."Starting Date" = StartDate THEN
              EXIT(NoOfPeriods);

            EXIT(NoOfPeriods + 1);
          END;
      END;

      DeferralTemplate."Calc. Method" := CalcMethod;
      DeferralTemplate.FIELDERROR("Calc. Method");
    END;

    LOCAL PROCEDURE CalculateStraightline@2(DeferralHeader@1001 : Record 1701;VAR DeferralLine@1000 : Record 1702;DeferralTemplate@1002 : Record 1700;DocumentLineDescription@1100528400 : Text[100]);
    VAR
      AccountingPeriod@1006 : Record 50;
      AmountToDefer@1010 : Decimal;
      AmountToDeferFirstPeriod@1015 : Decimal;
      FractionOfPeriod@1016 : Decimal;
      PeriodicDeferralAmount@1003 : Decimal;
      RunningDeferralTotal@1014 : Decimal;
      PeriodicCount@1004 : Integer;
      HowManyDaysLeftInPeriod@1017 : Integer;
      NumberOfDaysInPeriod@1013 : Integer;
      PostDate@1005 : Date;
      FirstPeriodDate@1011 : Date;
      SecondPeriodDate@1012 : Date;
      PerDiffSum@1009 : Decimal;
    BEGIN
      // If the Start Date passed in matches the first date of a financial period, this is essentially the same
      // as the "Equal Per Period" deferral method, so call that function.
      OnBeforeCalculateStraightline(DeferralHeader,DeferralLine,DeferralTemplate);

      IF IsAccountingPeriodExist(AccountingPeriod,DeferralHeader."Start Date") THEN BEGIN
        AccountingPeriod.SETFILTER("Starting Date",'>=%1',DeferralHeader."Start Date");
        IF NOT AccountingPeriod.FINDFIRST THEN
          ERROR(DeferSchedOutOfBoundsErr);
      END;
      IF AccountingPeriod."Starting Date" = DeferralHeader."Start Date" THEN BEGIN
        //CalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate); //**4PS.o
        CalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate,DocumentLineDescription); //**4PS.n
        EXIT;
      END;

      PeriodicDeferralAmount := ROUND(DeferralHeader."Amount to Defer" / DeferralHeader."No. of Periods",AmountRoundingPrecision);

      FOR PeriodicCount := 1 TO (DeferralHeader."No. of Periods" + 1) DO BEGIN
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        IF (PeriodicCount = 1) OR (PeriodicCount = (DeferralHeader."No. of Periods" + 1)) THEN BEGIN
          IF PeriodicCount = 1 THEN BEGIN
            CLEAR(RunningDeferralTotal);

            // Get the starting date of the accounting period of the posting date is in
            FirstPeriodDate := GetPeriodStartingDate(PostDate);

            // Get the starting date of the next accounting period
            SecondPeriodDate := GetNextPeriodStartingDate(PostDate);

            HowManyDaysLeftInPeriod := (SecondPeriodDate - DeferralHeader."Start Date");
            NumberOfDaysInPeriod := (SecondPeriodDate - FirstPeriodDate);
            FractionOfPeriod := (HowManyDaysLeftInPeriod / NumberOfDaysInPeriod);

            AmountToDeferFirstPeriod := (PeriodicDeferralAmount * FractionOfPeriod);
            AmountToDefer := ROUND(AmountToDeferFirstPeriod,AmountRoundingPrecision);
            RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
          END ELSE
            // Last period
            AmountToDefer := (DeferralHeader."Amount to Defer" - RunningDeferralTotal);
        END ELSE BEGIN
          AmountToDefer := ROUND(PeriodicDeferralAmount,AmountRoundingPrecision);
          RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
        END;

        DeferralLine."Posting Date" := PostDate;
        //DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description"); //**4PS.o
        //**4PS.sn
        DeferralLine.Description := CreateRecurringDescription(
          PostDate,DeferralTemplate."Period Description",DocumentLineDescription);
        //**4PS.en

        IF GenJnlCheckLine.DateNotAllowed(PostDate) THEN
          ERROR(InvalidPostingDateErr,PostDate);

        PerDiffSum := PerDiffSum + ROUND(AmountToDefer / DeferralHeader."No. of Periods",AmountRoundingPrecision);

        DeferralLine.Amount := AmountToDefer;

        DeferralLine.INSERT;
      END;

      OnAfterCalculateStraightline(DeferralHeader,DeferralLine,DeferralTemplate);
    END;

    LOCAL PROCEDURE CalculateEqualPerPeriod@3(DeferralHeader@1001 : Record 1701;VAR DeferralLine@1000 : Record 1702;DeferralTemplate@1002 : Record 1700;DocumentLineDescription@1100528400 : Text[100]);
    VAR
      PeriodicCount@1009 : Integer;
      PostDate@1008 : Date;
      AmountToDefer@1007 : Decimal;
      RunningDeferralTotal@1010 : Decimal;
    BEGIN
      OnBeforeCalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);

      FOR PeriodicCount := 1 TO DeferralHeader."No. of Periods" DO BEGIN
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        DeferralLine.VALIDATE("Posting Date",PostDate);
        //DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description"); //**4PS.o
        //**4PS.sn
        DeferralLine.Description := CreateRecurringDescription(
          PostDate,DeferralTemplate."Period Description",DocumentLineDescription);
        //**4PS.en

        AmountToDefer := DeferralHeader."Amount to Defer";
        IF PeriodicCount = 1 THEN
          CLEAR(RunningDeferralTotal);

        IF PeriodicCount <> DeferralHeader."No. of Periods" THEN BEGIN
          AmountToDefer := ROUND(AmountToDefer / DeferralHeader."No. of Periods",AmountRoundingPrecision);
          RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
        END ELSE
          AmountToDefer := (DeferralHeader."Amount to Defer" - RunningDeferralTotal);

        DeferralLine.Amount := AmountToDefer;
        DeferralLine.INSERT;
      END;

      OnAfterCalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);
    END;

    LOCAL PROCEDURE CalculateDaysPerPeriod@5(DeferralHeader@1001 : Record 1701;VAR DeferralLine@1000 : Record 1702;DeferralTemplate@1002 : Record 1700;DocumentLineDescription@1100528400 : Text);
    VAR
      AccountingPeriod@1003 : Record 50;
      AmountToDefer@1016 : Decimal;
      PeriodicCount@1012 : Integer;
      NumberOfDaysInPeriod@1010 : Integer;
      NumberOfDaysInSchedule@1022 : Integer;
      NumberOfDaysIntoCurrentPeriod@1018 : Integer;
      NumberOfPeriods@1020 : Integer;
      PostDate@1009 : Date;
      FirstPeriodDate@1008 : Date;
      SecondPeriodDate@1007 : Date;
      EndDate@1019 : Date;
      TempDate@1021 : Date;
      NoExtraPeriod@1017 : Boolean;
      DailyDeferralAmount@1023 : Decimal;
      RunningDeferralTotal@1024 : Decimal;
    BEGIN
      OnBeforeCalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);

      IF IsAccountingPeriodExist(AccountingPeriod,DeferralHeader."Start Date") THEN BEGIN
        AccountingPeriod.SETFILTER("Starting Date",'>=%1',DeferralHeader."Start Date");
        IF NOT AccountingPeriod.FINDFIRST THEN
          ERROR(DeferSchedOutOfBoundsErr);
      END;
      IF AccountingPeriod."Starting Date" = DeferralHeader."Start Date" THEN
        NoExtraPeriod := TRUE
      ELSE
        NoExtraPeriod := FALSE;

      // If comparison used <=, it messes up the calculations
      IF NOT NoExtraPeriod THEN BEGIN
        IF IsAccountingPeriodExist(AccountingPeriod,DeferralHeader."Start Date") THEN BEGIN
          AccountingPeriod.SETFILTER("Starting Date",'<%1',DeferralHeader."Start Date");
          AccountingPeriod.FINDLAST;
        END;
        NumberOfDaysIntoCurrentPeriod := (DeferralHeader."Start Date" - AccountingPeriod."Starting Date");
      END ELSE
        NumberOfDaysIntoCurrentPeriod := 0;

      IF NoExtraPeriod THEN
        NumberOfPeriods := DeferralHeader."No. of Periods"
      ELSE
        NumberOfPeriods := (DeferralHeader."No. of Periods" + 1);

      FOR PeriodicCount := 1 TO NumberOfPeriods DO BEGIN
        // Figure out the end date...
        IF PeriodicCount = 1 THEN
          TempDate := DeferralHeader."Start Date";

        IF PeriodicCount <> NumberOfPeriods THEN
          TempDate := GetNextPeriodStartingDate(TempDate)
        ELSE
          // Last Period, special case here...
          IF NoExtraPeriod THEN BEGIN
            TempDate := GetNextPeriodStartingDate(TempDate);
            EndDate := TempDate;
          END ELSE
            EndDate := (TempDate + NumberOfDaysIntoCurrentPeriod);
      END;
      NumberOfDaysInSchedule := (EndDate - DeferralHeader."Start Date");
      DailyDeferralAmount := (DeferralHeader."Amount to Defer" / NumberOfDaysInSchedule);

      FOR PeriodicCount := 1 TO NumberOfPeriods DO BEGIN
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        IF PeriodicCount = 1 THEN BEGIN
          CLEAR(RunningDeferralTotal);
          FirstPeriodDate := DeferralHeader."Start Date";

          // Get the starting date of the next accounting period
          SecondPeriodDate := GetNextPeriodStartingDate(PostDate);
          NumberOfDaysInPeriod := (SecondPeriodDate - FirstPeriodDate);

          AmountToDefer := ROUND(NumberOfDaysInPeriod * DailyDeferralAmount,AmountRoundingPrecision);
          RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
        END ELSE BEGIN
          // Get the starting date of the accounting period of the posting date is in
          FirstPeriodDate := GetCurPeriodStartingDate(PostDate);

          // Get the starting date of the next accounting period
          SecondPeriodDate := GetNextPeriodStartingDate(PostDate);

          NumberOfDaysInPeriod := (SecondPeriodDate - FirstPeriodDate);

          IF PeriodicCount <> NumberOfPeriods THEN BEGIN
            // Not the last period
            AmountToDefer := ROUND(NumberOfDaysInPeriod * DailyDeferralAmount,AmountRoundingPrecision);
            RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
          END ELSE
            AmountToDefer := (DeferralHeader."Amount to Defer" - RunningDeferralTotal);
        END;

        DeferralLine."Posting Date" := PostDate;
        //DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description"); //**4PS.o
        //**4PS.sn
        DeferralLine.Description := CreateRecurringDescription(
          PostDate,DeferralTemplate."Period Description",DocumentLineDescription);
        //**4PS.en

        IF GenJnlCheckLine.DateNotAllowed(PostDate) THEN
          ERROR(InvalidPostingDateErr,PostDate);

        DeferralLine.Amount := AmountToDefer;

        DeferralLine.INSERT;
      END;

      OnAfterCalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);
    END;

    LOCAL PROCEDURE CalculateUserDefined@6(DeferralHeader@1001 : Record 1701;VAR DeferralLine@1000 : Record 1702;DeferralTemplate@1006 : Record 1700;DocumentLineDescription@1100528400 : Text[100]);
    VAR
      PeriodicCount@1002 : Integer;
      PostDate@1003 : Date;
    BEGIN
      OnBeforeCalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate);

      FOR PeriodicCount := 1 TO DeferralHeader."No. of Periods" DO BEGIN
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        DeferralLine."Posting Date" := PostDate;
        //DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description"); //**4PS.o
        //**4PS.sn
        DeferralLine.Description := CreateRecurringDescription(
          PostDate,DeferralTemplate."Period Description",DocumentLineDescription);
        //**4PS.en

        IF GenJnlCheckLine.DateNotAllowed(PostDate) THEN
          ERROR(InvalidPostingDateErr,PostDate);

        // For User-Defined, user must enter in deferral amounts
        DeferralLine.INSERT;
      END;

      OnAfterCalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate);
    END;

    [External]
    PROCEDURE FilterDeferralLines@124(VAR DeferralLine@1006 : Record 1702;DeferralDocType@1001 : Option;GenJnlTemplateName@1000 : Code[10];GenJnlBatchName@1005 : Code[10];DocumentType@1002 : Integer;DocumentNo@1003 : Code[20];LineNo@1004 : Integer);
    BEGIN
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",GenJnlTemplateName);
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",GenJnlBatchName);
      DeferralLine.SETRANGE("Document Type",DocumentType);
      DeferralLine.SETRANGE("Document No.",DocumentNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
    END;

    LOCAL PROCEDURE SetStartDate@12(DeferralTemplate@1000 : Record 1700;StartDate@1001 : Date) AdjustedStartDate : Date;
    VAR
      AccountingPeriod@1003 : Record 50;
      DeferralStartOption@1002 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';
    BEGIN
      // "Start Date" passed in needs to be adjusted based on the Deferral Code's Start Date setting;
      CASE DeferralTemplate."Start Date" OF
        DeferralStartOption::"Posting Date":
          AdjustedStartDate := StartDate;
        DeferralStartOption::"Beginning of Period":
          BEGIN
            IF AccountingPeriod.ISEMPTY THEN
              EXIT(CALCDATE('<-CM>',StartDate));
            AccountingPeriod.SETRANGE("Starting Date",0D,StartDate);
            IF AccountingPeriod.FINDLAST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
        DeferralStartOption::"End of Period":
          BEGIN
            IF AccountingPeriod.ISEMPTY THEN
              EXIT(CALCDATE('<CM>',StartDate));
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := CALCDATE('<-1D>',AccountingPeriod."Starting Date");
          END;
        DeferralStartOption::"Beginning of Next Period":
          BEGIN
            IF AccountingPeriod.ISEMPTY THEN
              EXIT(CALCDATE('<CM + 1D>',StartDate));
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
      END;
    END;

    [External]
    PROCEDURE SetDeferralRecords@7(VAR DeferralHeader@1001 : Record 1701;DeferralDocType@1006 : Integer;GenJnlTemplateName@1013 : Code[10];GenJnlBatchName@1012 : Code[10];DocumentType@1010 : Integer;DocumentNo@1009 : Code[20];LineNo@1008 : Integer;CalcMethod@1007 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';NoOfPeriods@1005 : Integer;AdjustedDeferralAmount@1003 : Decimal;AdjustedStartDate@1004 : Date;DeferralCode@1011 : Code[10];DeferralDescription@1014 : Text[100];AmountToDefer@1000 : Decimal;AdjustStartDate@1002 : Boolean;CurrencyCode@1015 : Code[10]);
    BEGIN
      IF NOT DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) THEN BEGIN
        // Need to create the header record.
        DeferralHeader."Deferral Doc. Type" := DeferralDocType;
        DeferralHeader."Gen. Jnl. Template Name" := GenJnlTemplateName;
        DeferralHeader."Gen. Jnl. Batch Name" := GenJnlBatchName;
        DeferralHeader."Document Type" := DocumentType;
        DeferralHeader."Document No." := DocumentNo;
        DeferralHeader."Line No." := LineNo;
        DeferralHeader.INSERT;
      END;
      DeferralHeader."Amount to Defer" := AdjustedDeferralAmount;
      IF AdjustStartDate THEN
        DeferralHeader."Initial Amount to Defer" := AmountToDefer;
      DeferralHeader."Calc. Method" := CalcMethod;
      DeferralHeader."Start Date" := AdjustedStartDate;
      DeferralHeader."No. of Periods" := NoOfPeriods;
      DeferralHeader."Schedule Description" := DeferralDescription;
      DeferralHeader."Deferral Code" := DeferralCode;
      DeferralHeader."Currency Code" := CurrencyCode;
      DeferralHeader.MODIFY;
      // Remove old lines as they will be recalculated/recreated
      RemoveDeferralLines(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
    END;

    [External]
    PROCEDURE RemoveOrSetDeferralSchedule@9(DeferralCode@1006 : Code[10];DeferralDocType@1001 : Integer;GenJnlTemplateName@1013 : Code[10];GenJnlBatchName@1012 : Code[10];DocumentType@1008 : Integer;DocumentNo@1007 : Code[20];LineNo@1009 : Integer;Amount@1010 : Decimal;PostingDate@1011 : Date;Description@1002 : Text[100];CurrencyCode@1004 : Code[10];AdjustStartDate@1014 : Boolean);
    VAR
      DeferralHeader@1005 : Record 1701;
      DeferralTemplate@1003 : Record 1700;
    BEGIN
      IF DeferralCode = '' THEN
        // If the user cleared the deferral code, we should remove the saved schedule...
        IF DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) THEN BEGIN
          DeferralHeader.DELETE;
          RemoveDeferralLines(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
        END;
      IF DeferralCode <> '' THEN
        IF LineNo <> 0 THEN
          IF DeferralTemplate.GET(DeferralCode) THEN BEGIN
            ValidateDeferralTemplate(DeferralTemplate);

            CreateDeferralSchedule(DeferralCode,DeferralDocType,
              GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Amount,
              DeferralTemplate."Calc. Method",PostingDate,DeferralTemplate."No. of Periods",
              TRUE,GetDeferralDescription(GenJnlBatchName,DocumentNo,Description),
            //AdjustStartDate,CurrencyCode);  //**4PS.o
              AdjustStartDate,CurrencyCode,Description); //**4PS.n
          END;
    END;

    [External]
    PROCEDURE CreateScheduleFromGL@22(GenJournalLine@1008 : Record 81;FirstEntryNo@1010 : Integer);
    VAR
      DeferralHeader@1001 : Record 1701;
      DeferralLine@1002 : Record 1702;
      DeferralTemplate@1007 : Record 1700;
      PostedDeferralHeader@1004 : Record 1704;
      PostedDeferralLine@1005 : Record 1705;
      CustPostingGr@1009 : Record 92;
      VendPostingGr@1011 : Record 93;
      BankAcc@1013 : Record 270;
      BankAccPostingGr@1014 : Record 277;
      GenJnlPostLine@1003 : Codeunit 12;
      DeferralAccount@1006 : Code[20];
      Account@1000 : Code[20];
      GLAccount@1012 : Code[20];
      GLAccountType@1015 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';
    BEGIN
      IF DeferralHeader.GET(DeferralHeader."Deferral Doc. Type"::"G/L",
           GenJournalLine."Journal Template Name",
           GenJournalLine."Journal Batch Name",0,'',
           GenJournalLine."Line No.")
      THEN BEGIN
        IF DeferralTemplate.GET(DeferralHeader."Deferral Code") THEN
          DeferralAccount := DeferralTemplate."Deferral Account";

        IF (GenJournalLine."Account No." = '') AND (GenJournalLine."Bal. Account No." <> '') THEN BEGIN
          GLAccount := GenJournalLine."Bal. Account No.";
          GLAccountType := GenJournalLine."Bal. Account Type";
        END ELSE BEGIN
          GLAccount := GenJournalLine."Account No.";
          GLAccountType := GenJournalLine."Account Type";
        END;

        // Account types not G/L are not storing a GL account in the GenJnlLine's Account field, need to retrieve
        CASE GLAccountType OF
          GenJournalLine."Account Type"::Customer:
            BEGIN
              CustPostingGr.GET(GenJournalLine."Posting Group");
              Account := CustPostingGr.GetReceivablesAccount;
            END;
          GenJournalLine."Account Type"::Vendor:
            BEGIN
              VendPostingGr.GET(GenJournalLine."Posting Group");
              Account := VendPostingGr.GetPayablesAccount;
            END;
          GenJournalLine."Account Type"::"Bank Account":
            BEGIN
              BankAcc.GET(GLAccount);
              BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");
              Account := BankAccPostingGr."G/L Bank Account No.";
            END;
          ELSE
            Account := GLAccount;
        END;

        // Create the Posted Deferral Schedule with the Document Number created from the posted GL Trx...
        PostedDeferralHeader.INIT;
        PostedDeferralHeader.TRANSFERFIELDS(DeferralHeader);
        PostedDeferralHeader."Deferral Doc. Type" := DeferralHeader."Deferral Doc. Type"::"G/L";
        // Adding document number so we can connect the Ledger and Deferral Schedule details...
        PostedDeferralHeader."Gen. Jnl. Document No." := GenJournalLine."Document No.";
        PostedDeferralHeader."Account No." := Account;
        PostedDeferralHeader."Document Type" := 0;
        PostedDeferralHeader."Document No." := '';
        PostedDeferralHeader."Line No." := GenJournalLine."Line No.";
        PostedDeferralHeader."Currency Code" := GenJournalLine."Currency Code";
        PostedDeferralHeader."Deferral Account" := DeferralAccount;
        PostedDeferralHeader."Posting Date" := GenJournalLine."Posting Date";
        PostedDeferralHeader."Entry No." := FirstEntryNo;
        OnBeforePostedDeferralHeaderInsert(PostedDeferralHeader,GenJournalLine);
        PostedDeferralHeader.INSERT(TRUE);
        FilterDeferralLines(
          DeferralLine,DeferralHeader."Deferral Doc. Type"::"G/L",
          GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
          0,'',GenJournalLine."Line No.");
        IF DeferralLine.FINDSET THEN BEGIN
          REPEAT
            PostedDeferralLine.INIT;
            PostedDeferralLine.TRANSFERFIELDS(DeferralLine);
            PostedDeferralLine."Deferral Doc. Type" := DeferralHeader."Deferral Doc. Type"::"G/L";
            PostedDeferralLine."Gen. Jnl. Document No." := GenJournalLine."Document No.";
            PostedDeferralLine."Account No." := Account;
            PostedDeferralLine."Document Type" := 0;
            PostedDeferralLine."Document No." := '';
            PostedDeferralLine."Line No." := GenJournalLine."Line No.";
            PostedDeferralLine."Currency Code" := GenJournalLine."Currency Code";
            PostedDeferralLine."Deferral Account" := DeferralAccount;
            OnBeforePostedDeferralLineInsert(PostedDeferralLine,GenJournalLine);
            PostedDeferralLine.INSERT(TRUE);
          UNTIL DeferralLine.NEXT = 0;
        END;
      END;

      OnAfterCreateScheduleFromGL(GenJournalLine,PostedDeferralHeader);

      GenJnlPostLine.RemoveDeferralSchedule(GenJournalLine);
    END;

    [External]
    PROCEDURE DeferralCodeOnValidate@13(DeferralCode@1007 : Code[10];DeferralDocType@1006 : Integer;GenJnlTemplateName@1014 : Code[10];GenJnlBatchName@1013 : Code[10];DocumentType@1011 : Integer;DocumentNo@1010 : Code[20];LineNo@1009 : Integer;Amount@1001 : Decimal;PostingDate@1008 : Date;Description@1002 : Text[100];CurrencyCode@1012 : Code[10]);
    VAR
      DeferralHeader@1005 : Record 1701;
      DeferralLine@1004 : Record 1702;
      DeferralTemplate@1003 : Record 1700;
    BEGIN
      DeferralHeader.INIT;
      DeferralLine.INIT;
      IF DeferralCode = '' THEN
        // If the user cleared the deferral code, we should remove the saved schedule...
        DeferralCodeOnDelete(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo)
      ELSE
        IF LineNo <> 0 THEN
          IF DeferralTemplate.GET(DeferralCode) THEN BEGIN
            ValidateDeferralTemplate(DeferralTemplate);

            CreateDeferralSchedule(DeferralCode,DeferralDocType,
              GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Amount,
              DeferralTemplate."Calc. Method",PostingDate,DeferralTemplate."No. of Periods",
            //TRUE,GetDeferralDescription(GenJnlBatchName,DocumentNo,Description),TRUE,CurrencyCode);  //**4PS.o
              TRUE,GetDeferralDescription(GenJnlBatchName,DocumentNo,Description),TRUE,CurrencyCode,Description); //**4PS.n
          END;
    END;

    [External]
    PROCEDURE DeferralCodeOnDelete@14(DeferralDocType@1000 : Integer;GenJnlTemplateName@1006 : Code[10];GenJnlBatchName@1005 : Code[10];DocumentType@1003 : Integer;DocumentNo@1002 : Code[20];LineNo@1001 : Integer);
    VAR
      DeferralHeader@1004 : Record 1701;
    BEGIN
      IF LineNo <> 0 THEN
        // Deferral Additions
        IF DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) THEN BEGIN
          DeferralHeader.DELETE;
          RemoveDeferralLines(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
        END;
    END;

    [External]
    PROCEDURE OpenLineScheduleEdit@15(DeferralCode@1006 : Code[10];DeferralDocType@1002 : Integer;GenJnlTemplateName@1015 : Code[10];GenJnlBatchName@1014 : Code[10];DocumentType@1005 : Integer;DocumentNo@1004 : Code[20];LineNo@1003 : Integer;Amount@1001 : Decimal;PostingDate@1000 : Date;Description@1010 : Text[100];CurrencyCode@1011 : Code[10]) : Boolean;
    VAR
      DeferralTemplate@1007 : Record 1700;
      DeferralHeader@1008 : Record 1701;
      DeferralSchedule@1012 : Page 1702;
      Changed@1013 : Boolean;
    BEGIN
      IF DeferralCode = '' THEN
        MESSAGE(SelectDeferralCodeMsg)
      ELSE
        IF DeferralTemplate.GET(DeferralCode) THEN
          IF DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) THEN BEGIN
            //**4PS.so
            //DeferralSchedule.SetParameter(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
            //**4PS.eo
            //**4PS.sn
            DeferralSchedule.SetParameter(
              DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Description);
            //**4PS.en
            DeferralSchedule.RUNMODAL;
            Changed := DeferralSchedule.GetParameter;
            CLEAR(DeferralSchedule);
          END ELSE BEGIN
            CreateDeferralSchedule(DeferralCode,DeferralDocType,
              GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Amount,
              DeferralTemplate."Calc. Method",PostingDate,DeferralTemplate."No. of Periods",TRUE,
            //GetDeferralDescription(GenJnlBatchName,DocumentNo,Description),TRUE,CurrencyCode); //**4PS.o
              GetDeferralDescription(GenJnlBatchName,DocumentNo,Description),TRUE,CurrencyCode,Description); //**4PS.n
            COMMIT;
            IF DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) THEN BEGIN
              //**4PS.so
              //DeferralSchedule.SetParameter(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
              //**4PS.eo
              //**4PS.sn
              DeferralSchedule.SetParameter(
                DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Description);
              //**4PS.en
              DeferralSchedule.RUNMODAL;
              Changed := DeferralSchedule.GetParameter;
              CLEAR(DeferralSchedule);
            END;
          END;
      EXIT(Changed);
    END;

    [External]
    PROCEDURE OpenLineScheduleView@16(DeferralCode@1006 : Code[10];DeferralDocType@1000 : Integer;GenJnlTemplateName@1005 : Code[10];GenJnlBatchName@1004 : Code[10];DocumentType@1002 : Integer;DocumentNo@1001 : Code[20];LineNo@1003 : Integer);
    VAR
      DeferralTemplate@1010 : Record 1700;
      PostedDeferralHeader@1009 : Record 1704;
    BEGIN
      // On view nothing will happen if the record does not exist
      IF DeferralCode <> '' THEN
        IF DeferralTemplate.GET(DeferralCode) THEN BEGIN
          IF PostedDeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) THEN
            PAGE.RUNMODAL(PAGE::"Deferral Schedule View",PostedDeferralHeader);
        END;
    END;

    [External]
    PROCEDURE OpenLineScheduleArchive@19(DeferralCode@1008 : Code[10];DeferralDocType@1007 : Integer;DocumentType@1001 : Integer;DocumentNo@1000 : Code[20];DocNoOccurence@1010 : Integer;VersionNo@1011 : Integer;LineNo@1004 : Integer);
    VAR
      DeferralHeaderArchive@1009 : Record 5127;
    BEGIN
      // On view nothing will happen if the record does not exist
      IF DeferralCode <> '' THEN
        IF DeferralHeaderArchive.GET(DeferralDocType,DocumentType,DocumentNo,DocNoOccurence,VersionNo,LineNo) THEN
          PAGE.RUNMODAL(PAGE::"Deferral Schedule Archive",DeferralHeaderArchive);
    END;

    LOCAL PROCEDURE RemoveDeferralLines@17(DeferralDocType@1000 : Integer;GenJnlTemplateName@1008 : Code[10];GenJnlBatchName@1007 : Code[10];DocumentType@1003 : Integer;DocumentNo@1002 : Code[20];LineNo@1001 : Integer);
    VAR
      DeferralLine@1004 : Record 1702;
    BEGIN
      FilterDeferralLines(DeferralLine,DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
      DeferralLine.DELETEALL;
    END;

    LOCAL PROCEDURE ValidateDeferralTemplate@18(DeferralTemplate@1000 : Record 1700);
    BEGIN
      WITH DeferralTemplate DO BEGIN
        TESTFIELD("Deferral Account");
        TESTFIELD("Deferral %");
        TESTFIELD("No. of Periods");
      END;
    END;

    [External]
    PROCEDURE RoundDeferralAmount@20(VAR DeferralHeader@1018 : Record 1701;CurrencyCode@1009 : Code[10];CurrencyFactor@1000 : Decimal;PostingDate@1007 : Date;VAR AmtToDefer@1015 : Decimal;VAR AmtToDeferLCY@1014 : Decimal;ProjectNo@1100529600 : Code[20]);
    VAR
      DeferralLine@1006 : Record 1702;
      CurrExchRate@1010 : Record 330;
      UseDate@1008 : Date;
      DeferralCount@1011 : Integer;
      TotalAmountLCY@1012 : Decimal;
      TotalDeferralCount@1013 : Integer;
    BEGIN
      // Calculate the LCY amounts for posting
      IF PostingDate = 0D THEN
        UseDate := WORKDATE
      ELSE
        UseDate := PostingDate;

      DeferralHeader."Amount to Defer (LCY)" :=
      //ROUND(CurrExchRate.ExchangeAmtFCYToLCY(UseDate,CurrencyCode,DeferralHeader."Amount to Defer",CurrencyFactor)); //**4PS.o
      //**4PS.sn
        ROUND(CurrExchRate.ExchangeAmtFCYToLCY(1,ProjectNo,UseDate,CurrencyCode,DeferralHeader."Amount to Defer",CurrencyFactor,
              DeferralHeader."Deferral Doc. Type" = DeferralHeader."Deferral Doc. Type"::Sales));
      //**4PS.en
      DeferralHeader.MODIFY;
      AmtToDefer := DeferralHeader."Amount to Defer";
      AmtToDeferLCY := DeferralHeader."Amount to Defer (LCY)";
      FilterDeferralLines(
        DeferralLine,DeferralHeader."Deferral Doc. Type",
        DeferralHeader."Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Batch Name",
        DeferralHeader."Document Type",DeferralHeader."Document No.",DeferralHeader."Line No.");
      IF DeferralLine.FINDSET THEN BEGIN
        TotalDeferralCount := DeferralLine.COUNT;
        REPEAT
          DeferralCount := DeferralCount + 1;
          IF DeferralCount = TotalDeferralCount THEN BEGIN
            DeferralLine."Amount (LCY)" := DeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
            DeferralLine.MODIFY;
          END ELSE BEGIN
            DeferralLine."Amount (LCY)" :=
      //      ROUND(CurrExchRate.ExchangeAmtFCYToLCY(UseDate,CurrencyCode,DeferralLine.Amount,CurrencyFactor)); //**4PS.o
      //**4PS.sn
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(1,ProjectNo,UseDate,CurrencyCode,DeferralLine.Amount,CurrencyFactor,
                    DeferralHeader."Deferral Doc. Type" = DeferralHeader."Deferral Doc. Type"::Sales));
      //**4PS.en
            TotalAmountLCY := TotalAmountLCY + DeferralLine."Amount (LCY)";
            DeferralLine.MODIFY;
          END;
        UNTIL DeferralLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InitCurrency@21(CurrencyCode@1000 : Code[10]);
    VAR
      Currency@1001 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    [External]
    PROCEDURE GetSalesDeferralDocType@23() : Integer;
    BEGIN
      EXIT(DeferralHeader."Deferral Doc. Type"::Sales)
    END;

    LOCAL PROCEDURE InitializeDeferralHeaderAndSetPostDate@29(VAR DeferralLine@1000 : Record 1702;DeferralHeader@1003 : Record 1701;PeriodicCount@1002 : Integer;VAR PostDate@1001 : Date);
    VAR
      AccountingPeriod@1004 : Record 50;
    BEGIN
      DeferralLine.INIT;
      DeferralLine."Deferral Doc. Type" := DeferralHeader."Deferral Doc. Type";
      DeferralLine."Gen. Jnl. Template Name" := DeferralHeader."Gen. Jnl. Template Name";
      DeferralLine."Gen. Jnl. Batch Name" := DeferralHeader."Gen. Jnl. Batch Name";
      DeferralLine."Document Type" := DeferralHeader."Document Type";
      DeferralLine."Document No." := DeferralHeader."Document No.";
      DeferralLine."Line No." := DeferralHeader."Line No.";
      DeferralLine."Currency Code" := DeferralHeader."Currency Code";

      IF PeriodicCount = 1 THEN BEGIN
        IF NOT AccountingPeriod.ISEMPTY THEN BEGIN
          AccountingPeriod.SETFILTER("Starting Date",'..%1',DeferralHeader."Start Date");
          IF NOT AccountingPeriod.FINDFIRST THEN
            ERROR(DeferSchedOutOfBoundsErr);
        END;
        PostDate := DeferralHeader."Start Date";
      END ELSE BEGIN
        IF IsAccountingPeriodExist(AccountingPeriod,CALCDATE('<CM>',PostDate) + 1) THEN BEGIN
          AccountingPeriod.SETFILTER("Starting Date",'>%1',PostDate);
          IF NOT AccountingPeriod.FINDFIRST THEN
            ERROR(DeferSchedOutOfBoundsErr);
        END;
        PostDate := AccountingPeriod."Starting Date";
      END;
    END;

    LOCAL PROCEDURE IsAccountingPeriodExist@30(VAR AccountingPeriod@1000 : Record 50;PostingDate@1001 : Date) : Boolean;
    VAR
      AccountingPeriodMgt@1002 : Codeunit 360;
    BEGIN
      AccountingPeriod.RESET;
      IF NOT AccountingPeriod.ISEMPTY THEN
        EXIT(TRUE);

      AccountingPeriodMgt.InitDefaultAccountingPeriod(AccountingPeriod,PostingDate);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetPurchDeferralDocType@24() : Integer;
    BEGIN
      EXIT(DeferralHeader."Deferral Doc. Type"::Purchase)
    END;

    [External]
    PROCEDURE GetGLDeferralDocType@10() : Integer;
    BEGIN
      EXIT(DeferralHeader."Deferral Doc. Type"::"G/L")
    END;

    [External]
    PROCEDURE GetDeferralStartDate@26(DeferralDocType@1004 : Integer;RecordDocumentType@1003 : Integer;RecordDocumentNo@1002 : Code[20];RecordLineNo@1001 : Integer;DeferralCode@1006 : Code[10];PostingDate@1007 : Date) : Date;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralTemplate@1005 : Record 1700;
    BEGIN
      IF DeferralHeader.GET(DeferralDocType,'','',RecordDocumentType,RecordDocumentNo,RecordLineNo) THEN
        EXIT(DeferralHeader."Start Date");

      IF DeferralTemplate.GET(DeferralCode) THEN
        EXIT(SetStartDate(DeferralTemplate,PostingDate));

      EXIT(PostingDate);
    END;

    [External]
    PROCEDURE AdjustTotalAmountForDeferrals@8(DeferralCode@1000 : Code[10];VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR TotalAmount@1004 : Decimal;VAR TotalAmountACY@1005 : Decimal;VAR TotalVATBase@1006 : Decimal;VAR TotalVATBaseACY@1007 : Decimal);
    BEGIN
      TotalVATBase := TotalAmount;
      TotalVATBaseACY := TotalAmountACY;
      IF DeferralCode <> '' THEN
        IF (AmtToDefer = TotalAmount) AND (AmtToDeferACY = TotalAmountACY) THEN BEGIN
          AmtToDefer := 0;
          AmtToDeferACY := 0;
        END ELSE BEGIN
          TotalAmount := TotalAmount - AmtToDefer;
          TotalAmountACY := TotalAmountACY - AmtToDeferACY;
        END;
    END;

    [External]
    PROCEDURE AdjustTotalAmountForDeferralsNoBase@11(DeferralCode@1000 : Code[10];VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR TotalAmount@1004 : Decimal;VAR TotalAmountACY@1005 : Decimal);
    BEGIN
      IF DeferralCode <> '' THEN
        IF (AmtToDefer = TotalAmount) AND (AmtToDeferACY = TotalAmountACY) THEN BEGIN
          AmtToDefer := 0;
          AmtToDeferACY := 0;
        END ELSE BEGIN
          TotalAmount := TotalAmount - AmtToDefer;
          TotalAmountACY := TotalAmountACY - AmtToDeferACY;
        END;
    END;

    LOCAL PROCEDURE GetPeriodStartingDate@28(PostingDate@1002 : Date) : Date;
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      IF AccountingPeriod.ISEMPTY THEN
        EXIT(CALCDATE('<-CM>',PostingDate));

      AccountingPeriod.SETFILTER("Starting Date",'<%1',PostingDate);
      IF AccountingPeriod.FINDLAST THEN
        EXIT(AccountingPeriod."Starting Date");

      ERROR(DeferSchedOutOfBoundsErr);
    END;

    LOCAL PROCEDURE GetNextPeriodStartingDate@32(PostingDate@1002 : Date) : Date;
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      IF AccountingPeriod.ISEMPTY THEN
        EXIT(CALCDATE('<CM+1D>',PostingDate));

      AccountingPeriod.SETFILTER("Starting Date",'>%1',PostingDate);
      IF AccountingPeriod.FINDFIRST THEN
        EXIT(AccountingPeriod."Starting Date");

      ERROR(DeferSchedOutOfBoundsErr);
    END;

    LOCAL PROCEDURE GetCurPeriodStartingDate@38(PostingDate@1001 : Date) : Date;
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      IF AccountingPeriod.ISEMPTY THEN
        EXIT(CALCDATE('<-CM>',PostingDate));

      AccountingPeriod.SETFILTER("Starting Date",'<=%1',PostingDate);
      AccountingPeriod.FINDLAST;
      EXIT(AccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE GetDeferralDescription@35(GenJnlBatchName@1002 : Code[10];DocumentNo@1001 : Code[20];Description@1000 : Text[100]) : Text[100];
    BEGIN
      IF GenJnlBatchName <> '' THEN
        EXIT(COPYSTR(STRSUBSTNO('%1-%2',GenJnlBatchName,Description),1,100));
      EXIT(COPYSTR(STRSUBSTNO('%1-%2',DocumentNo,Description),1,100));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateDaysPerPeriod@43(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateEqualPerPeriod@41(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateStraightline@37(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateUserDefined@45(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDeferralSchedule@34(DeferralHeader@1000 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1002 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateScheduleFromGL@33(VAR GenJournalLine@1000 : Record 81;VAR PostedDeferralHeader@1001 : Record 1704);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalculateDaysPerPeriod@42(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalculateEqualPerPeriod@40(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalculateStraightline@36(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalculateUserDefined@44(DeferralHeader@1002 : Record 1701;VAR DeferralLine@1001 : Record 1702;DeferralTemplate@1000 : Record 1700);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateDeferralSchedule@31(DeferralCode@1014 : Code[10];DeferralDocType@1013 : Integer;GenJnlTemplateName@1012 : Code[10];GenJnlBatchName@1011 : Code[10];DocumentType@1010 : Integer;DocumentNo@1009 : Code[20];LineNo@1008 : Integer;AmountToDefer@1007 : Decimal;CalcMethod@1006 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';StartDate@1005 : Date;NoOfPeriods@1004 : Integer;ApplyDeferralPercentage@1003 : Boolean;DeferralDescription@1002 : Text[100];AdjustStartDate@1001 : Boolean;CurrencyCode@1000 : Code[10];VAR IsHandled@1015 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedDeferralHeaderInsert@25(VAR PostedDeferralHeader@1000 : Record 1704;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedDeferralLineInsert@27(VAR PostedDeferralLine@1000 : Record 1705;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    BEGIN
    END.
  }
}

