OBJECT Codeunit 6086310 Bank Trans. Inbox-Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00.07;
  }
  PROPERTIES
  {
    TableNo=6086331;
    OnRun=BEGIN
            Code(Rec);
          END;

  }
  CODE
  {
    VAR
      BusCountryCodeNotFound@1160040002 : TextConst 'DEU=%1 %2 kann in %3 nicht gefunden werden. Bitte ÅberprÅfen Sie das Mapping und versuchen Sie es erneut.;ENU=The %1 %2 cannot be found in %3. Please check the mapping and try again.;NLD=De %1 %2 kan niet gevonden worden in %3. Controleer de mapping en probeer opnieuw.';
      CreditCardNotFound@1160040001 : TextConst 'DEU=%1 kann nicht vorgefunden werden mit diesen Filtern: %2;ENU=%1 cannot be found with these filters: %2;NLD=%1 kan niet worden gevonden met deze filters: %2';
      MappingRulesNotFound@1160040000 : TextConst 'DEU=%1 nicht vorgefunden. Wenn Sie duplizierte Karten zulassen, mÅssen weitere Zuweisungszeilen in %2 eingegeben werden.;ENU=%1 not found. When allowing duplicated cards, further mapping rules need to be specified in %2.;NLD=%1 niet gevonden. Wanneer u gedupliceerde kaarten toestaat, moeten verdere toewijzingsregels worden opgegeven in %2.';
      MissingCountryMapping@1160040003 : TextConst 'DEU=%1 darf nicht leer sein in %2 fÅr %3 %4.;ENU=The %1 cannot be empty in %2 for %3 %4.;NLD=De %1 kan niet leeg zijn in %2 voor %3 %4.';

    LOCAL PROCEDURE Code@1160040000(VAR BnkTransInbox@1160040009 : Record 6086331);
    VAR
      Currency@1160040008 : Record 4;
      CountryRegion@1160040007 : Record 9;
      EMSetup@1160040006 : Record 6086300;
      BankCurrMap@1160040005 : Record 6086310;
      ContiniaUserCreditCard@1160040012 : Record 6086311;
      EmployeeCard@1160040002 : Record 6086311;
      BankCountryMap@1160040004 : Record 6086312;
      Transaction@1160040001 : Record 6086330;
      CreditCardMapping@1160040010 : Record 6086351;
      MappingFieldCount@1160040011 : Integer;
    BEGIN
      EMSetup.GET;
      MappingFieldCount := CreditCardMapping.COUNT;

      WITH BnkTransInbox DO BEGIN
        Transaction.TRANSFERFIELDS(BnkTransInbox,FALSE);
        Transaction."Entry No." := "Entry No.";
        Transaction.VALIDATE("Card No.","Card No.");
        Transaction.VALIDATE("Card Name","Card Name");
        Transaction.VALIDATE("Posting Date","Posting Date");
        Transaction.VALIDATE("Document Date","Document Date");
        IF "Currency Code" <> '' THEN
          IF Currency.GET("Currency Code") THEN
            VALIDATE("Currency Code","Currency Code")
          ELSE BEGIN
            BankCurrMap.GET("Bank Code","Bank Country/Region","Currency Code");
            Transaction.VALIDATE("Currency Code",BankCurrMap."Currency Code (NAV)");
          END;

        Transaction."Currency Exch. Rate" := "Currency Exch. Rate";
        Transaction.VALIDATE(Amount,Amount);
        TESTFIELD("Bank-Currency Amount");
        Transaction."Bank-Currency Amount" := "Bank-Currency Amount";
        Transaction."Business Category ID" := "Business Category ID";
        Transaction."Business No." := "Business No.";
        Transaction."Business Name" := "Business Name";
        Transaction."Business Address" := "Business Address";
        Transaction."Business Address 2" := "Business Address 2";
        Transaction."Business Address 3" := "Business Address 3";

        IF (STRLEN("Business Country/Region") <= MAXSTRLEN(CountryRegion.Code)) AND ("Business Country/Region" <> '') THEN
          IF CountryRegion.GET("Business Country/Region") THEN
            Transaction."Business Country/Region" := "Business Country/Region"
          ELSE BEGIN
            IF NOT BankCountryMap.GET("Bank Code","Bank Country/Region","Business Country/Region") THEN
              ERROR(BusCountryCodeNotFound,FIELDCAPTION("Business Country/Region"),"Business Country/Region",BankCountryMap.TABLENAME);
            IF BankCountryMap."Country/Region Code (NAV)" = '' THEN
              ERROR(MissingCountryMapping,BankCountryMap.FIELDCAPTION("Country/Region Code (NAV)"),BankCountryMap.TABLENAME,
                BankCountryMap.TABLENAME,"Business Country/Region");
            Transaction."Business Country/Region" := BankCountryMap."Country/Region Code (NAV)";
          END;

        Transaction."Business Post Code" := "Business Post Code";

        Transaction."Exclude Entry" := "Exclude Entry";
        Transaction."Transaction ID" := "Transaction ID";
        IF Transaction."Continia User ID" = '' THEN BEGIN
          IF NOT EMSetup."Allow duplicate Card ID" THEN BEGIN
            EmployeeCard.SETRANGE("Card No.","Card No.");
            EmployeeCard.FINDFIRST;
          END ELSE
            IF NOT EmployeeCard.GET(GetMappingCreditCard(BnkTransInbox,MappingFieldCount),"Card No.") THEN
              ERROR(CreditCardNotFound,ContiniaUserCreditCard.TABLECAPTION,GetMappingFilters(BnkTransInbox,MappingFieldCount));
          EmployeeCard.TESTFIELD("Continia User ID");
          Transaction.VALIDATE("Continia User ID",EmployeeCard."Continia User ID");
        END ELSE
          EmployeeCard.GET(Transaction."Continia User ID","Card No.");

        Transaction.VALIDATE(Duplicate,Duplicate);
        Transaction."Bank Currency Code" := EmployeeCard.GetAccountCurrencyCode(EmployeeCard."Account Type",EmployeeCard."Account No.");

        Transaction.INSERT(TRUE);
      END;

      Transaction.ApplyMappingRule;

      IF NOT BnkTransInbox."Bank Statement Transaction" THEN BEGIN
        IF EMSetup."Post Bank Trans. on Import" THEN
          IF NOT Transaction."Exclude Entry" THEN
            CODEUNIT.RUN(CODEUNIT::"Bank Transaction-Post",Transaction);

        IF EMSetup."Create Expense w. Transaction" THEN
          Transaction.MatchAndCreateExpense;
      END;
    END;

    PROCEDURE GetMappingCreditCard@1160040001(BankTransactionInbox@1160040000 : Record 6086331;MappingFieldCount@1160040006 : Integer) : Code[50];
    VAR
      ContiniaUserCreditCard@1160040002 : Record 6086311;
      CreditCardUserMapping@1160040001 : Record 6086344;
      RecRef@1160040005 : RecordRef;
      FieldMatchCount@1160040004 : Integer;
      NoFieldMatch@1160040003 : Boolean;
    BEGIN
      // MORE THAN ONE CARD FOUND. CHECK THE FIELD MAPPING TO FIND USER
      RecRef.GETTABLE(BankTransactionInbox);
      ContiniaUserCreditCard.SETCURRENTKEY("Card No.");
      ContiniaUserCreditCard.SETRANGE("Card No.",BankTransactionInbox."Card No.");
      IF ContiniaUserCreditCard.FINDSET THEN
        REPEAT
          NoFieldMatch := FALSE;
          FieldMatchCount := 0;
          CreditCardUserMapping.SETRANGE("Card No.",ContiniaUserCreditCard."Card No.");
          CreditCardUserMapping.SETRANGE("Continia User ID",ContiniaUserCreditCard."Continia User ID");
          IF CreditCardUserMapping.FINDSET THEN
            REPEAT
              IF CreditCardUserMapping.Value = FORMAT(RecRef.FIELD(CreditCardUserMapping."Field No.").VALUE) THEN BEGIN
                FieldMatchCount += 1;
                IF FieldMatchCount = MappingFieldCount THEN
                  EXIT(CreditCardUserMapping."Continia User ID");
              END ELSE
                NoFieldMatch := TRUE;
            UNTIL NoFieldMatch OR (CreditCardUserMapping.NEXT = 0);
        UNTIL ContiniaUserCreditCard.NEXT = 0;
    END;

    LOCAL PROCEDURE GetMappingFilters@1160040002(BankTransactionInbox@1160040000 : Record 6086331;MappingFieldCount@1160040006 : Integer) : Text[1024];
    VAR
      EMSetup@1160040004 : Record 6086300;
      CreditCardMapping@1160040001 : Record 6086351;
      RecRef@1160040005 : RecordRef;
      FieldNameAndValue@1160040003 : Text[1024];
      MappingCounter@1160040002 : Integer;
    BEGIN
      RecRef.GETTABLE(BankTransactionInbox);

      IF CreditCardMapping.FINDSET THEN
        REPEAT
          CreditCardMapping.CALCFIELDS("Field Name");
          MappingCounter += 1;
          IF MappingCounter > 1 THEN
            FieldNameAndValue += ', ';
          FieldNameAndValue += '"' + CreditCardMapping."Field Name" + '" = "' +
            FORMAT(RecRef.FIELD(CreditCardMapping."Field No.").VALUE) + '"';
        UNTIL CreditCardMapping.NEXT = 0
      ELSE
        ERROR(MappingRulesNotFound,CreditCardMapping.TABLECAPTION,EMSetup.TABLECAPTION);

      EXIT(COPYSTR(FieldNameAndValue,1,250));
    END;

    BEGIN
    END.
  }
}

