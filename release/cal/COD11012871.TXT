OBJECT Codeunit 11012871 SC Category Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ShowSCCategoryPrognosisTexts@1100528600(VAR ISCCategoryControl@1100528602 : Record 11071988);
    VAR
      SCCategoryPrognosisText@1100528600 : Record 11071996;
    BEGIN
      SCCategoryPrognosisText.SETRANGE("Reporting Date", ISCCategoryControl."Reporting Date");
      SCCategoryPrognosisText.SETRANGE("Service Contract No.", ISCCategoryControl."Service Contract No.");
      SCCategoryPrognosisText.SETRANGE("Service Category", ISCCategoryControl."Service Category");
      SCCategoryPrognosisText.SETRANGE("Control Period Code", ISCCategoryControl."Control Period Code");
      SCCategoryPrognosisText.SETRANGE("Table Field", 0);
      PAGE.RUN(0, SCCategoryPrognosisText);
    END;

    PROCEDURE CalcPrognosisValues@1100528601(VAR ISCCategoryControl@1100528600 : Record 11071988;IControlType@1100528602 : 'Maintenance,Calls,Additional';VAR OBudgetRate@1100528601 : Decimal;VAR OAverageRate@1100528603 : Decimal;VAR OPrognosisProgressPerc@1100528604 : Decimal;VAR OCalcPrognosisHours@1100528626 : Decimal;VAR OCalcPrognosisLabor@1100528627 : Decimal;VAR OCalcPrognosisOtherCost@1100528628 : Decimal;VAR OCalcPrognosisRevenue@1100528629 : Decimal);
    VAR
      BudgetHours@1100528605 : Decimal;
      BudgetLabor@1100528606 : Decimal;
      BudgetCostOther@1100528618 : Decimal;
      BudgetRevenue@1100528619 : Decimal;
      ActualHours@1100528607 : Decimal;
      ActualCostLabor@1100528608 : Decimal;
      ActualCostOther@1100528617 : Decimal;
      ActualCost@1100528625 : Decimal;
      ExpandCost@1100528611 : Decimal;
      InvoicedRevenue@1100528620 : Decimal;
      PrognosisHours@1100528621 : Decimal;
      PrognosisLabor@1100528622 : Decimal;
      PrognosisOther@1100528623 : Decimal;
      PrognosisRevenue@1100528624 : Decimal;
      TotalPrognosisLabor@1100528609 : Decimal;
      TotalPrognosisOther@1100528610 : Decimal;
    BEGIN
      OBudgetRate := 0;
      OAverageRate := 0;
      OPrognosisProgressPerc := 0;

      ISCCategoryControl.SetControlPeriodFilter;
      CASE IControlType OF
        IControlType::Maintenance:
          BEGIN
            ISCCategoryControl.CALCFIELDS(
              "Budget Hours (Maintenance)", "Budget Labor (Maintenance)", "Budget Other Cost (Maint.)", "Budget Revenue (Maintenance)",
              "Actual Hours (Maintenance)", "Actual Cost (Labor) (Maint.)", "Actual Cost (Other) (Maint.)", "Actual Cost (Maintenance)",
              "Revenue (Maintenance)",
              "Expand Cost (Labor) (Maint.)", "Expand Cost (Other) (Maint.)");
            BudgetHours := ISCCategoryControl."Budget Hours (Maintenance)";
            BudgetLabor := ISCCategoryControl."Budget Labor (Maintenance)";
            BudgetCostOther := ISCCategoryControl."Budget Other Cost (Maint.)";
            BudgetRevenue := ISCCategoryControl."Budget Revenue (Maintenance)";
            ActualHours := ISCCategoryControl."Actual Hours (Maintenance)";
            ActualCostLabor := ISCCategoryControl."Actual Cost (Labor) (Maint.)";
            ActualCostOther := ISCCategoryControl."Actual Cost (Other) (Maint.)";
            ActualCost := ISCCategoryControl."Actual Cost (Maintenance)";
            InvoicedRevenue := ISCCategoryControl."Contract Revenue (Maint.)" + ISCCategoryControl."Revenue (Maintenance)";
            PrognosisHours := ISCCategoryControl."Prognosis Hours (Maint.)";
            PrognosisLabor := ISCCategoryControl."Prognosis Labor (Maint.)";
            PrognosisOther := ISCCategoryControl."Prognosis Other (Maint.)";
            PrognosisRevenue := ISCCategoryControl."Prognosis Revenue (Maint.)";
            TotalPrognosisLabor := ISCCategoryControl."Prognosis Total Labor (Maint.)";
            TotalPrognosisOther := ISCCategoryControl."Prognosis Total Other (Maint.)";
            ExpandCost := ISCCategoryControl."Expand Cost (Labor) (Maint.)" + ISCCategoryControl."Expand Cost (Other) (Maint.)";
          END;
        IControlType::Calls:
          BEGIN
            ISCCategoryControl.CALCFIELDS(
              "Budget Hours (Calls)", "Budget Labor (Calls)", "Budget Other Cost (Calls)", "Budget Revenue (Calls)",
              "Actual Hours (Calls)", "Actual Cost (Labor) (Calls)", "Actual Cost (Other) (Calls)", "Actual Cost (Calls)",
              "Revenue (Calls)",
              "Expand Cost (Labor) (Calls)", "Expand Cost (Other) (Calls)");
            BudgetHours := ISCCategoryControl."Budget Hours (Calls)";
            BudgetLabor := ISCCategoryControl."Budget Labor (Calls)";
            BudgetCostOther := ISCCategoryControl."Budget Other Cost (Calls)";
            BudgetRevenue := ISCCategoryControl."Budget Revenue (Calls)";
            ActualHours := ISCCategoryControl."Actual Hours (Calls)";
            ActualCostLabor := ISCCategoryControl."Actual Cost (Labor) (Calls)";
            ActualCostOther := ISCCategoryControl."Actual Cost (Other) (Calls)";
            ActualCost := ISCCategoryControl."Actual Cost (Calls)";
            InvoicedRevenue := ISCCategoryControl."Contract Revenue (Calls)" + ISCCategoryControl."Revenue (Calls)";
            PrognosisHours := ISCCategoryControl."Prognosis Hours (Calls)";
            PrognosisLabor := ISCCategoryControl."Prognosis Labor (Calls)";
            PrognosisOther := ISCCategoryControl."Prognosis Other (Calls)";
            PrognosisRevenue := ISCCategoryControl."Prognosis Revenue (Calls)";
            TotalPrognosisLabor := ISCCategoryControl."Prognosis Total Labor (Calls)";
            TotalPrognosisOther := ISCCategoryControl."Prognosis Total Other (Calls)";
            ExpandCost := ISCCategoryControl."Expand Cost (Labor) (Calls)" + ISCCategoryControl."Expand Cost (Other) (Calls)";
          END;
        IControlType::Additional:
          BEGIN
            ISCCategoryControl.CALCFIELDS(
              "Budget Hours (Additional)", "Budget Labor (Additional)", "Budget Other Cost (Additional)", "Budget Revenue (Additional)",
              "Actual Hours (Additional)", "Actual Cost (Labor) (Add.)", "Actual Cost (Other) (Add.)", "Actual Cost (Additional)",
              "Revenue (Additional)",
              "Expand Cost (Labor) (Add.)", "Expand Cost (Other) (Add.)");
            BudgetHours := ISCCategoryControl."Budget Hours (Additional)";
            BudgetLabor := ISCCategoryControl."Budget Labor (Additional)";
            BudgetCostOther := ISCCategoryControl."Budget Other Cost (Additional)";
            BudgetRevenue := ISCCategoryControl."Budget Revenue (Additional)";
            ActualHours := ISCCategoryControl."Actual Hours (Additional)";
            ActualCostLabor := ISCCategoryControl."Actual Cost (Labor) (Add.)";
            ActualCostOther := ISCCategoryControl."Actual Cost (Other) (Add.)";
            ActualCost := ISCCategoryControl."Actual Cost (Additional)";
            InvoicedRevenue := ISCCategoryControl."Revenue (Additional)";
            PrognosisHours := ISCCategoryControl."Prognosis Hours (Add.)";
            PrognosisLabor := ISCCategoryControl."Prognosis Labor (Add.)";
            PrognosisOther := ISCCategoryControl."Prognosis Other (Add.)";
            PrognosisRevenue := ISCCategoryControl."Prognosis Revenue (Add.)";
            TotalPrognosisLabor := ISCCategoryControl."Prognosis Total Labor (Add.)";
            TotalPrognosisOther := ISCCategoryControl."Prognosis Total Other (Add.)";
            ExpandCost := ISCCategoryControl."Expand Cost (Labor) (Add.)" + ISCCategoryControl."Expand Cost (Other) (Add.)";
          END;
      END;
      IF BudgetHours <> 0 THEN
        OBudgetRate := BudgetLabor / BudgetHours;
      IF ActualHours <> 0 THEN
        OAverageRate := ActualCostLabor / ActualHours;
      OCalcPrognosisHours := BudgetHours - ActualHours;
      OCalcPrognosisLabor := BudgetLabor - ActualCostLabor;
      OCalcPrognosisOtherCost := BudgetCostOther - ActualCostOther;
      OCalcPrognosisRevenue := BudgetRevenue - InvoicedRevenue;
      IF TotalPrognosisLabor + TotalPrognosisOther <> 0 THEN
        OPrognosisProgressPerc := ExpandCost / (TotalPrognosisLabor + TotalPrognosisOther) * 100;
      IF OPrognosisProgressPerc > 100 THEN
        OPrognosisProgressPerc := 100;
    END;

    BEGIN
    END.
  }
}

