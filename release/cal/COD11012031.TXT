OBJECT Codeunit 11012031 Create Progress Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012036;
    OnRun=VAR
            BudgetLine@1100525000 : Record 11012001;
          BEGIN
            ProgressRec.COPY(Rec);
            WITH ProgressRec DO BEGIN
              RESET;
              TESTFIELD("Progress Date");
              TESTFIELD("Project No.");
              ProjRec.GET("Project No.");

              //Create Quantities
              BudgetRec.RESET;
              BudgetRec.SETRANGE("Project No.","Project No.");
              BudgetRec.SETFILTER(
                "Extension Contract Status",
                '%1|(>=%2&<%3)',
                BudgetRec."Extension Contract Status"::"Not Applicable",
                BudgetRec."Extension Contract Status"::Order,
                BudgetRec."Extension Contract Status"::Expired);
              CODEUNIT.RUN(CODEUNIT::"Create Quantities",BudgetRec);

              //Create Progress
              ProgressLineRec.RESET;
              ProgressLineRec.SETRANGE("Project No.","Project No.");
              ProgressLineRec.SETRANGE("Progress Date","Progress Date");

              //Remove progress which were created on a different Project Setup
              ProgressLineRec.SETFILTER("Progress Method", '<>%1', ProjRec."Progress Method");
              ProgressLineRec.DELETEALL(TRUE);
              ProgressLineRec.SETRANGE("Progress Method");
              IF ProjRec."Progress Registry" = ProjRec."Progress Registry"::Quantities THEN
                ProgressLineRec.SETRANGE("Progress Registry",ProgressLineRec."Progress Registry"::Percentages)
              ELSE
                ProgressLineRec.SETRANGE("Progress Registry",ProgressLineRec."Progress Registry"::Quantities);
              ProgressLineRec.DELETEALL(TRUE);
              ProgressLineRec.SETRANGE("Progress Registry");

              IF ProgressLineRec.FINDSET(TRUE, FALSE) THEN
                REPEAT
                  ProgrLineRemoved := FALSE;
                  //Remove progress wherefor no budget lines or element-cost objects exist
                  CASE ProjRec."Progress Method" OF
                    ProjRec."Progress Method"::"Element - Cost Object":
                      BEGIN
                        ProgressLineRec.CALCFIELDS("Present Element-Cost Object");
                        IF NOT ProgressLineRec."Present Element-Cost Object" THEN
                          RemoveProgrLine;
                      END;
                    ProjRec."Progress Method"::"Cost Object":
                      BEGIN
                        ProgressLineRec.CALCFIELDS("Present Cost Object");
                        IF NOT ProgressLineRec."Present Cost Object" THEN
                          RemoveProgrLine;
                      END;
                    ProjRec."Progress Method"::"Budget Line":
                      BEGIN
                        ProgressLineRec.CALCFIELDS("Budget Line Present");
                        IF NOT ProgressLineRec."Budget Line Present" THEN
                          RemoveProgrLine;
                      END;
                  END;

                  //Remove Cost Objects wherefor no progress will be recorded
                  IF NOT ProgrLineRemoved THEN BEGIN
                    DimValRec.SETRANGE("Global Dimension No.", 2);
                    DimValRec.SETRANGE(Code,ProgressLineRec."Cost Object");
                    DimValRec.SETRANGE("Record Progress",TRUE);
                    IF NOT DimValRec.FINDFIRST THEN
                      RemoveProgrLine;
                  END;

                  //Remove not entrusted Extensions
                  IF NOT ProgrLineRemoved THEN BEGIN
                    IF ProgressLineRec."Extension Contract" <> '' THEN BEGIN
                      IF NOT MM.GET(ProgressLineRec."Project No.", ProgressLineRec."Extension Contract") THEN
                        MM.INIT;
                      //IF (MM.Status < MM.Status::Order) OR (MM.Status > MM.Status::"Invoicing Allowed") THEN  //25889.o
                      //25889.sn
                      IF ((MM.Status < MM.Status::Order) OR (MM.Status > MM.Status::"Invoicing Allowed")) AND
                         (NOT ((MM.Status = MM.Status::Offered) AND MM."Treat like Order"))
                      THEN
                      //25889.en
                        RemoveProgrLine;
                    END;
                  END;

                UNTIL ProgressLineRec.NEXT = 0;

              Window.OPEN(Text001);
              LineCounter := 0;

              QuantityRec.RESET;
              QuantityRec.SETRANGE("Project No.","Project No.");
              IF QuantityRec.FINDSET(FALSE, FALSE) THEN
                REPEAT
                  LineCounter += 1;
                  Window.UPDATE(1,LineCounter);

                  DimValRec.SETCURRENTKEY(Code,"Global Dimension No.");
                  DimValRec.SETRANGE("Global Dimension No.", 2);
                  DimValRec.SETRANGE(Code,QuantityRec."Cost Object");
                  DimValRec.SETRANGE("Record Progress",TRUE);
                  IF DimValRec.FINDFIRST THEN BEGIN
                    ProgressLineRec.SETRANGE("Project No.","Project No.");
                    ProgressLineRec.SETRANGE("Progress Date","Progress Date");
                    ProgressLineRec.SETRANGE(Adjustment,QuantityRec.Adjustment);
                    ProgressLineRec.SETRANGE("Extension Contract",QuantityRec."Extension Contract");
                    ProgressLineRec.SETRANGE(Option,QuantityRec.Option);
                    ProgressLineRec.SETRANGE("Line No.",QuantityRec."Line No.");
                    ProgressLineRec.SETRANGE(Element,QuantityRec.Element);
                    ProgressLineRec.SETRANGE("Cost Object",QuantityRec."Cost Object");
                    IF NOT ProgressLineRec.FINDFIRST THEN BEGIN
                      ProgressLineRec.INIT;
                      ProgressLineRec."Project No." := "Project No.";
                      ProgressLineRec.VALIDATE("Progress Date","Progress Date");
                      ProgressLineRec.Adjustment := QuantityRec.Adjustment;
                      ProgressLineRec."Extension Contract" := QuantityRec."Extension Contract";
                      ProgressLineRec.Option := QuantityRec.Option;
                      ProgressLineRec."Line No." := QuantityRec."Line No.";
                      ProgressLineRec.Element := QuantityRec.Element;
                      ProgressLineRec."Cost Object" := QuantityRec."Cost Object";
                      ProgressLineRec."Cost Type" := DimValRec."Cost Type";
                      ProgressLineRec."Progress Method" := ProjRec."Progress Method";
                      ProgressLineRec."Progress Registry" := ProjRec."Progress Registry";
                      IF ProjRec."Progress Method" = ProjRec."Progress Method"::"Budget Line" THEN BEGIN
                        BudgetLine.RESET;
                        BudgetLine.SETRANGE("Project No.", "Project No.");
                        BudgetLine.SETRANGE(Adjustment, QuantityRec.Adjustment);
                        BudgetLine.SETRANGE("Extension Contract", QuantityRec."Extension Contract");
                        BudgetLine.SETRANGE(Option, QuantityRec.Option);
                        BudgetLine.SETRANGE("Line No.", QuantityRec."Line No.");
                        IF BudgetLine.FINDFIRST THEN BEGIN
                          ProgressLineRec."Cost Component" := BudgetLine."Cost Component";
                          ProgressLineRec."Plot No." := BudgetLine."Plot No.";
                        END;
                      END ELSE
                        ProgressLineRec."Cost Component" := DimValRec."Cost Component";
                      IF ProjRec."Progress on base of Tender" THEN BEGIN
                        ProgressLineRec.VALIDATE("Cumulative Progress %",CalcProgressPerc(ProgressLineRec));
                        ProgressLineRec.CalculateAllowed;
                      END;
                      ProgressLineRec.INSERT(TRUE);
                    END ELSE
                      ProgressLineRec.MODIFY(TRUE); //This command executes the calculateallowed function
                  END;
                UNTIL QuantityRec.NEXT = 0;

              Window.CLOSE;

            END;
            Rec := ProgressRec;
          END;

  }
  CODE
  {
    VAR
      Text001@11012012 : TextConst 'DEU=Zeile #1#####;ENU=Line #1#####;NLD=Regel #1#####;NOR=Rad #1#####;SVE=Rad  #1#####';
      Text002@11012013 : TextConst 'DEU=Diese Funktion kann nur vewendet werden fÅr ProduktionsstÑnde, die in ProzentsÑtze eingetragen wurden.;ENU=This function is only applicable for Progress in percentages.;NLD=Deze functie kan alleen worden gebruikt voor productiestanden die in percentages worden ingegeven.;NOR=Denne funksjonen gjelder kun for forlõp i prosent.;SVE=Denna funktion gÑller endast fîr fîrlopp i procent.';
      ProgressRec@11012000 : Record 11012036;
      ProjRec@11012001 : Record 11072003;
      BudgetRec@11012002 : Record 11012001;
      ProgressLineRec@11012003 : Record 11012037;
      DimValRec@11012004 : Record 349;
      QuantityRec@11012005 : Record 11012002;
      ProgressPercRec@11012006 : Record 11012054;
      MM@11012007 : Record 11012004;
      Window@11012008 : Dialog;
      LineCounter@11012009 : Integer;
      ProgrLineRemoved@11012010 : Boolean;
      Text003@1100525000 : TextConst 'DEU=Fertigungsstand ist eingefroren. énderungen sind nicht zugelassen.;ENU=Progress is fixed, Changes not allowed.;NLD=Productiestand is bevroren, wijzigen niet toegestaan.;NOR=Fremdrift er fast, endringer tilates ikke.;SVE=Fîrloppet Ñr fast, Ñndringar tillÜts inte.';

    PROCEDURE InputProgressPerc@1(ProgressRec@11012000 : Record 11012036;Level@11012001 : 'Project,Element,Cost Type - Element,Cost Component,Element - Cost Object,Element - Cost Object - Plot');
    BEGIN
      WITH ProgressRec DO BEGIN
        ProgressLineRec.RESET;
        ProgressLineRec.SETRANGE("Project No.","Project No.");
        ProgressLineRec.SETRANGE("Progress Date","Progress Date");
        ProgressLineRec.SETRANGE("Progress Registry",ProgressLineRec."Progress Registry"::Quantities);
        IF ProgressLineRec.FINDFIRST THEN
          ERROR(Text002);
        ProgressLineRec.SETRANGE("Progress Registry");

        CreateProgressPerc(ProgressRec,Level);

        ProgressPercRec.RESET;
        ProgressPercRec.SETRANGE("Project No.","Project No.");
        ProgressPercRec.SETRANGE("Progress Date","Progress Date");
        ProgressPercRec.SETRANGE(Level,Level);
        CASE Level OF
          Level::Project:
            IF PAGE.RUNMODAL(PAGE::"% Project Progress",ProgressPercRec) <> ACTION::LookupOK THEN
              EXIT;
          Level::Element:
            IF PAGE.RUNMODAL(PAGE::"% Element Progress",ProgressPercRec) <> ACTION::LookupOK THEN
              EXIT;
          Level::"Cost Type - Element":
          //**4PS DJN 18-10-12 W022017  SN
            IF PAGE.RUNMODAL(PAGE::"% Progress Cost Type-Element",ProgressPercRec) <> ACTION::LookupOK THEN
              EXIT;
          //**4PS DJN 18-10-12 W022017  EN
          Level::"Cost Component":
            IF PAGE.RUNMODAL(PAGE::"% Cost Component Progress",ProgressPercRec) <> ACTION::LookupOK THEN
              EXIT;
          Level::"Element - Cost Object":
            IF PAGE.RUNMODAL(PAGE::"% Progress Element-Cost Obj.",ProgressPercRec) <> ACTION::LookupOK THEN
              EXIT;
          Level::"Element - Cost Object - Plot":
            IF PAGE.RUNMODAL(PAGE::"% Progress El.-Cost Obj.-Plot",ProgressPercRec) <> ACTION::LookupOK THEN
              EXIT;
          ELSE
            EXIT;
        END;

        ProgressPercRec.SETRANGE(Process,TRUE);
        IF ProgressPercRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            CASE ProgressPercRec.Level OF
              ProgressPercRec.Level::Element:
                ProgressLineRec.SETRANGE(Element,ProgressPercRec.Element);
              ProgressPercRec.Level::"Cost Type - Element":
                BEGIN
                  ProgressLineRec.SETRANGE(Element,ProgressPercRec.Element);
                  ProgressLineRec.SETRANGE("Cost Type",ProgressPercRec."Cost Type");
                END;
              ProgressPercRec.Level::"Cost Component":
                ProgressLineRec.SETRANGE("Cost Component",ProgressPercRec."Cost Component");
              ProgressPercRec.Level::"Element - Cost Object":
                BEGIN
                  ProgressLineRec.SETRANGE(Element,ProgressPercRec.Element);
                  ProgressLineRec.SETRANGE("Cost Object",ProgressPercRec."Global Dimension 2 Code");
                END;
              ProgressPercRec.Level::"Element - Cost Object - Plot":
                BEGIN
                  ProgressLineRec.SETRANGE(Element,ProgressPercRec.Element);
                  ProgressLineRec.SETRANGE("Cost Object",ProgressPercRec."Global Dimension 2 Code");
                  ProgressLineRec.SETRANGE("Plot No.",ProgressPercRec."Plot No.");
                END;
            END;
            IF ProgressLineRec.FINDSET(TRUE, FALSE) THEN
              REPEAT
                ProgressLineRec.VALIDATE("Cumulative Progress %",ProgressPercRec."Cumulative Progress %");
                ProgressLineRec.MODIFY(TRUE);
              UNTIL ProgressLineRec.NEXT = 0;
          UNTIL ProgressPercRec.NEXT = 0;

      END;
    END;

    PROCEDURE CreateProgressPerc@3(ProgressRec@11012000 : Record 11012036;Level@11012001 : 'Project,Element,Cost Type - Element,Cost Component,Element - Cost Object,Element - Cost Object - Plot');
    VAR
      AddLine@1100485000 : Boolean;
    BEGIN
      WITH ProgressRec DO BEGIN

        IF "Progress Fixed" THEN
          ERROR(Text003);

        ProgressLineRec.RESET;
        ProgressLineRec.SETRANGE("Project No.","Project No.");
        ProgressLineRec.SETRANGE("Progress Date","Progress Date");
        ProgressLineRec.SETRANGE("Progress Registry",ProgressLineRec."Progress Registry"::Percentages);
        IF NOT ProgressLineRec.FINDFIRST THEN BEGIN
          ProgressPercRec.RESET;
          ProgressPercRec.SETRANGE("Project No.","Project No.");
          ProgressPercRec.SETRANGE("Progress Date","Progress Date");
          ProgressPercRec.DELETEALL(TRUE);
          COMMIT;
          EXIT;
        END;

        TESTFIELD("Progress Date");
        TESTFIELD("Project No.");
        REPEAT
          AddLine := TRUE;
          CASE Level OF
            Level::Project:
              BEGIN
                ProgressPercRec.Element := '';
                ProgressPercRec."Cost Type" := 0;
                ProgressPercRec."Cost Component" := '';
                ProgressPercRec."Global Dimension 2 Code" := '';
                ProgressPercRec."Plot No." := '';
              END;
            Level::Element:
              BEGIN
                ProgressPercRec.Element := ProgressLineRec.Element;
                ProgressPercRec."Cost Type" := 0;
                ProgressPercRec."Cost Component" := '';
                ProgressPercRec."Global Dimension 2 Code" := '';
                ProgressPercRec."Plot No." := '';
              END;
            Level::"Cost Type - Element":
              BEGIN
                ProgressPercRec.Element := ProgressLineRec.Element;
                ProgressPercRec."Cost Type" := ProgressLineRec."Cost Type";
                ProgressPercRec."Cost Component" := '';
                ProgressPercRec."Global Dimension 2 Code" := '';
                ProgressPercRec."Plot No." := '';
              END;
            Level::"Cost Component":
              BEGIN
                ProgressPercRec.Element := '';
                //ProgressLineRec.CALCFIELDS("Cost Component");
                //ProgressPercRec."Cost Component" := ProgressLineRec."Cost Component";

                IF ProgressLineRec."Cost Object" <> '' THEN
                  ProgressPercRec."Cost Component" := GetDefaultCostComponent;
                AddLine := (ProgressPercRec."Cost Component" <> '');
                ProgressPercRec."Global Dimension 2 Code" := '';
                ProgressPercRec."Plot No." := '';
              END;
            Level::"Element - Cost Object":
              BEGIN
                ProgressPercRec.Element := ProgressLineRec.Element;
                ProgressPercRec."Cost Type" := 0;
                ProgressPercRec."Cost Component" := '';
                ProgressPercRec."Global Dimension 2 Code" := ProgressLineRec."Cost Object";
                ProgressPercRec."Plot No." := '';
              END;
            Level::"Element - Cost Object - Plot":
              BEGIN
                ProgressPercRec.Element := ProgressLineRec.Element;
                ProgressPercRec."Cost Type" := 0;
                ProgressPercRec."Cost Component" := '';
                ProgressPercRec."Global Dimension 2 Code" := ProgressLineRec."Cost Object";
                ProgressPercRec."Plot No." := ProgressLineRec."Plot No.";
              END;
            ELSE
              EXIT;
          END;

          IF AddLine THEN
            IF NOT ProgressPercRec.GET(
              "Project No.","Progress Date",Level,ProgressPercRec.Element,ProgressPercRec."Cost Type",
              ProgressPercRec."Cost Component",ProgressPercRec."Global Dimension 2 Code",ProgressPercRec."Plot No.")
            THEN BEGIN
              ProgressPercRec.INIT;
              ProgressPercRec."Project No." := "Project No.";
              ProgressPercRec.Level := Level;
              ProgressPercRec.VALIDATE("Progress Date","Progress Date");
              ProgressPercRec.INSERT(TRUE);
            END;
        UNTIL ProgressLineRec.NEXT = 0;

        COMMIT;

      END;
    END;

    PROCEDURE RemoveProgrLine@2();
    BEGIN
      ProgressLineRec.DELETE(TRUE);
      ProgrLineRemoved := TRUE;
    END;

    [External]
    PROCEDURE InputProgressPercFromRecording@1100485001(ProgressRec@11012000 : Record 11012036;iProgressPerc@1100485000 : Decimal);
    BEGIN
      WITH ProgressRec DO BEGIN
        ProgressLineRec.RESET;
        ProgressLineRec.SETRANGE("Project No.","Project No.");
        ProgressLineRec.SETRANGE("Progress Date","Progress Date");
        ProgressLineRec.SETRANGE("Progress Registry",ProgressLineRec."Progress Registry"::Quantities);
        IF ProgressLineRec.FINDFIRST THEN
          ERROR(Text002);
        ProgressLineRec.SETRANGE("Progress Registry");

        CreateProgressPerc(ProgressRec,ProgressPercRec.Level::Project);

        ProgressPercRec.RESET;
        ProgressPercRec.SETRANGE("Project No.","Project No.");
        ProgressPercRec.SETRANGE("Progress Date","Progress Date");
        ProgressPercRec.SETRANGE(Level,ProgressPercRec.Level::Project);
        IF NOT ProgressPercRec.FINDFIRST THEN
          EXIT
        ELSE BEGIN
          ProgressPercRec.VALIDATE("Cumulative Progress %", iProgressPerc);
          ProgressPercRec.MODIFY;
        END;

        ProgressPercRec.SETRANGE(Process,TRUE);
        IF ProgressPercRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF ProgressLineRec.FINDSET(TRUE, FALSE) THEN
              REPEAT
                ProgressLineRec.VALIDATE("Cumulative Progress %",ProgressPercRec."Cumulative Progress %");
                ProgressLineRec.MODIFY(TRUE);
              UNTIL ProgressLineRec.NEXT = 0;
          UNTIL ProgressPercRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE GetDefaultCostComponent@1100525000() : Code[20];
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      DimMgt.GetDimValueRec(2, ProgressLineRec."Cost Object", DimValRec, TRUE, ProgressLineRec."Project No.");
      EXIT(DimValRec."Cost Component");
    END;

    [External]
    PROCEDURE CalcProgressPerc@1100525001(ProgressLine@1100525000 : Record 11012037) : Decimal;
    VAR
      BudgetLine@1100525004 : Record 11012001;
      ProgressLinePTE@1100525003 : Record 11012268;
      TotalBudgetLine@1100525001 : Decimal;
      TotalCalculated@1100525002 : Decimal;
    BEGIN
      BudgetLine.SETRANGE("Project No.",ProgressLine."Project No.");
      BudgetLine.SETRANGE(Adjustment,ProgressLine.Adjustment);
      BudgetLine.SETRANGE("Extension Contract",ProgressLine."Extension Contract");
      BudgetLine.SETRANGE(Option,ProgressLine.Option);
      CASE ProgressLine."Progress Method" OF
        ProgressLine."Progress Method"::"Element - Cost Object":
          BEGIN
            BudgetLine.SETRANGE(Element,ProgressLine.Element);
            BudgetLine.SETRANGE("Cost Object",ProgressLine."Cost Object");
          END;
        ProgressLine."Progress Method"::"Cost Object":
          BudgetLine.SETRANGE("Cost Object",ProgressLine."Cost Object");
        ProgressLine."Progress Method"::"Budget Line":
          BudgetLine.SETRANGE("Line No.",ProgressLine."Line No.");
        ELSE
          EXIT(0)
      END;

      IF BudgetLine.FINDSET THEN BEGIN
        REPEAT
          TotalBudgetLine += BudgetLine."Amount (LCY)";

          //According To Call C009745 Progress is only registered on the Tender Pargraph with last digit = 0
          //The related Tender Paragraphs (...1, ...2, ...3, etc.) should inherit their progress from the 'main' paragraph.
          IF STRLEN(BudgetLine."Tender Paragraph") = 6 THEN BEGIN
            IF COPYSTR(BudgetLine."Tender Paragraph",6,1) <> '0' THEN
              BudgetLine."Tender Paragraph" := COPYSTR(BudgetLine."Tender Paragraph",1,5) + '0';
          END;
          //Call C009745 en

          IF ProgressLinePTE.GET(ProgressLine."Project No.",ProgressLine."Progress Date",BudgetLine."Tender Paragraph") THEN BEGIN
            ProgressLinePTE.SETFILTER("Date Filter",'..%1',ProgressLine."Progress Date");
            ProgressLinePTE.SETFILTER("Prev. Progress Date Filter",'..%1',ProgressLine."Progress Date" - 1);
            ProgressLinePTE.CALCFIELDS("Cumulative Progress %");
            TotalCalculated += BudgetLine."Amount (LCY)" * (ProgressLinePTE."Cumulative Progress %" / 100);
          END;
        UNTIL BudgetLine.NEXT = 0;
        IF TotalBudgetLine <> 0 THEN
          EXIT(TotalCalculated / (TotalBudgetLine / 100))
        ELSE
          EXIT(0);
      END;
    END;

    [External]
    PROCEDURE FillProgressFromProjectPlanningActivity@1100529400(ProgressLevel@1100529400 : Record 11012036);
    VAR
      BudgetLine@1100529401 : Record 11012001;
      BudgetPlanningActivity@1100529405 : Record 11229302;
      ProjectPlanningActivity@1100529406 : Record 11012431;
      ProgressLine@1100529403 : Record 11012037;
      DimValue@1100529404 : Record 349;
      DimMgt@1100529402 : Codeunit 408;
      Percentage@1100529407 : Decimal;
    BEGIN
      //**4PS.sn BI045 KD 09-08-16
      ProgressLevel.TESTFIELD("Progress Date");
      ProgressLevel.TESTFIELD("Project No.");

      ProjRec.GET(ProgressLevel."Project No.");
      ProjRec.TESTFIELD("Progress Method", ProjRec."Progress Method"::"Budget Line");
      ProjRec.TESTFIELD("Progress Registry", ProjRec."Progress Registry"::Percentages);

      BudgetLine.SETRANGE("Project No.", ProgressLevel."Project No.");
      BudgetLine.SETFILTER("Extension Contract Status", '%1|(>=%2&<%3)',
        BudgetLine."Extension Contract Status"::"Not Applicable",
        BudgetLine."Extension Contract Status"::Order,
        BudgetLine."Extension Contract Status"::Expired);
      BudgetLine.SETFILTER("Cost Object", '<>%1', '');
      IF BudgetLine.ISEMPTY THEN
        EXIT;

      ProgressLine.SETRANGE("Project No.",ProgressLevel."Project No.");
      ProgressLine.SETRANGE("Progress Date",ProgressLevel."Progress Date");

      BudgetPlanningActivity.SETRANGE("Project No.",ProgressLevel."Project No.");

      BudgetLine.FINDSET;
      REPEAT
        Percentage := 0;
        DimMgt.GetDimValueRec(2,BudgetLine."Cost Object",DimValue,TRUE,BudgetLine."Project No.");
        IF DimValue."Record Progress" THEN BEGIN
          ProgressLine.SETRANGE(Adjustment,BudgetLine.Adjustment);
          ProgressLine.SETRANGE("Extension Contract",BudgetLine."Extension Contract");
          ProgressLine.SETRANGE(Option,BudgetLine.Option);
          ProgressLine.SETRANGE("Line No.",BudgetLine."Line No.");
          IF NOT ProgressLine.FINDFIRST THEN
            ERROR(Text003);

          BudgetPlanningActivity.SETRANGE(Adjustment,BudgetLine.Adjustment);
          BudgetPlanningActivity.SETRANGE("Extension Contract",BudgetLine."Extension Contract");
          BudgetPlanningActivity.SETRANGE(Option,BudgetLine.Option);
          BudgetPlanningActivity.SETRANGE("Budget Line No.",BudgetLine."Line No.");
          IF BudgetPlanningActivity.FINDSET THEN
            REPEAT
              IF ProjectPlanningActivity.GET(BudgetPlanningActivity."Project Planning Activity No.") THEN
                Percentage += ProjectPlanningActivity."Completed Perc." * BudgetPlanningActivity.Percentage / 100
            UNTIL BudgetPlanningActivity.NEXT = 0
          ELSE
            IF ProjectPlanningActivity.GET(BudgetLine."Project Planning Activity No.") THEN
              Percentage += ProjectPlanningActivity."Completed Perc." * BudgetPlanningActivity.Percentage / 100;

          ProgressLine.VALIDATE("Cumulative Progress %", ROUND(Percentage,0.01));
          ProgressLine.MODIFY(TRUE);
        END;
      UNTIL BudgetLine.NEXT = 0;
      //**4PS.en BI045 KD 09-08-16
    END;

    BEGIN
    {
      4PS 09-08-16 UKR-C25269 KD: Fill forecast & progress with planning activities (BI045) - Added trigger FillProgressFromProjectPlanningActivity
    }
    END.
  }
}

