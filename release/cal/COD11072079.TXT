OBJECT Codeunit 11072079 Approval Management (SiB)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'ENU=On %1 invoice line(s) is ''%2'' and/or ''%3 not filled;NOR=%2'' og/eller ''%3'' er ikke fylt ut p† %1 fakturarader;SVE=%2'' och/eller ''%3'' har inte fyllts i p† %1 fakturarader';
      Text002@1100525003 : TextConst 'ENU=%1 ''%2'' not present;NOR=%1 ''%2'' finnes ikke;SVE=%1 ''%2'' finns inte';
      Text003@1100525004 : TextConst 'ENU=, compare with approved not possible;NOR=, sammenlikne med godkjent ikke mulig;SVE=, j„mf”rande med godk„nda inte m”jligt';
      Text004@1100525001 : TextConst 'ENU=Invoiced quantity/unit %1/%2 is unequal to approved quantiy/unit %3/%4;NOR=Fakturert antall/enhet %1/%2 er ikke lik med godkjent antall/enhet %3/%4;SVE=Fakturerat antal/enhet %1/%2 „r inte lika med godk„nt antal/enhet %3/%4';
      Text005@1100525002 : TextConst 'ENU=%1 %2 (%3%) is unequal to %2 (%4%) of the invoice line;NOR=%1 %2 (%3%) er ikke lik med %2 (%4%) p† fakturaraden;SVE=%1 %2 (%3%) „r inte lika med %2 (%4%) p† fakturaraden';
      SiBSetup@1100525009 : Record 11072650;
      GLSetup@1100525006 : Record 98;
      InvMessAccepted@1100525005 : Boolean;
      Text006@1100525007 : TextConst 'ENU=No price found for trade item ''%1-%2'';NOR=Ingen pris funnet for katalogartikkel ''%1-%2'';SVE=Det gick inte att hitta n†got pris f”r skaffningsartikeln ''%1-%2''';
      Text007@1100525008 : TextConst 'ENU=Calculated amount (%1) based on item data differs from line amount (%2);NOR=Kalkulert bel›p (%1) basert p† artikkeldata skiller seg fra radbel›pet (%2);SVE=Ber„knat belopp (%1) baserat p† artikeldata skiljer sig fr†n radbeloppet (%2)';
      Text008@1100529900 : TextConst 'ENU=Approve Credit Note ''%1''?';
      AutomaticProcessing@1100529901 : Boolean;
      Text100@1100525010 : TextConst 'ENU=(%1) is not equal to entries balance (%2) As a result of the Currency Invoice Rounding Precision and/or the Setup of the Invoice/Receipt Margin Amount.';

    PROCEDURE DispatchNoteApprovedIsDeliver@1100525000(VAR iDispatchNoteLineRec@1100525001 : Record 11072652);
    VAR
      lvDispatchNoteLineRec@1100525000 : Record 11072652;
    BEGIN
      //* Fill the 'Approved Quantity' of the Dispatch Note Lines with the 'Delivered Quantity' (if marked then only marked lines).
      WITH lvDispatchNoteLineRec DO BEGIN
        COPY(iDispatchNoteLineRec);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF "Approved Quantity" <> "Delivered Quantity" THEN BEGIN
              "Approved Quantity" := "Delivered Quantity";
              MODIFY;
            END;
          UNTIL NEXT = 0
        END;
      END;
    END;

    PROCEDURE RunApproveDispatchNote@1100525001(VAR VarRec@1100525000 : Record 11072651);
    VAR
      lvDispatchNoteRec@1100525001 : Record 11072651;
      lvDispatchNoteLineRec@1100525004 : Record 11072652;
      lvText000@1100525003 : TextConst 'ENU=Approve Dispatch Note ''%1''?;NOR=Godkjenne f›lgeseddel ''%1''?;SVE=Godk„nna leveransbesked ''%1''?';
      lvLines@1100525005 : Integer;
      lvUnequal@1100525006 : Integer;
      lvText001@1100525007 : TextConst 'ENU=For %1 of %2 lines ''Approved'' is unequal to ''Delivered''.\Approve Dispatch Note ''%3''?;NOR=For %1 av %2 rader er ''godkjent'' ulik ''levert''.\Godkjenne f›lgeseddel ''%3''?;SVE=F”r %1 av %2 rader „r ''Godk„nd'' inte lika med ''Levererad''.\Vill du godk„nna leveransbeskedet ''%3''?';
      lvText002@1100528900 : TextConst 'ENU=At least 1 of next fields should be filled: %1, %2, %3, %4, %5;SVE=Minst 1 av n„stkommande f„lt ska fyllas i: %1, %2, %3';
    BEGIN
      WITH lvDispatchNoteRec DO BEGIN
        COPY(VarRec);

        lvDispatchNoteLineRec.SETRANGE("Dispatch Note No.", "No.");
        IF lvDispatchNoteLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            //DP00065.sn
            IF (lvDispatchNoteLineRec."Project No." = '') AND
               (lvDispatchNoteLineRec."Service Order No." = '') AND
               (lvDispatchNoteLineRec."Plant Type" = '') AND  //db, 04-02-14: T004213
               (lvDispatchNoteLineRec."Location Code" = '') AND  //db, 14-10-14: C017265
               (lvDispatchNoteLineRec."G/L Account" = '') THEN
              ERROR(lvText002,
                lvDispatchNoteLineRec.FIELDCAPTION("Project No."),
                lvDispatchNoteLineRec.FIELDCAPTION("Service Order No."),
                lvDispatchNoteLineRec.FIELDCAPTION("Plant Type"),  //db, 04-02-14: T004213
                lvDispatchNoteLineRec.FIELDCAPTION("Location Code"),  //db, 14-10-14: C017265
                lvDispatchNoteLineRec.FIELDCAPTION("G/L Account"));
            //DP00065.en
            lvLines := lvLines + 1;
            IF lvDispatchNoteLineRec."Approved Quantity" <> lvDispatchNoteLineRec."Delivered Quantity" THEN
              lvUnequal := lvUnequal + 1;
          UNTIL lvDispatchNoteLineRec.NEXT = 0
        END;
        IF lvUnequal = 0 THEN BEGIN
          IF NOT CONFIRM(lvText000, TRUE, "No.") THEN
            ERROR('');
        END ELSE BEGIN
          IF NOT CONFIRM(lvText001, TRUE, lvUnequal, lvLines, "No.") THEN
            ERROR('');
        END;

        TESTFIELD("No.");
        TESTFIELD(Approved, FALSE);
        //DP00065.sn
        //TESTFIELD("Project No.");
        //lvProjRec.GET("Project No.");
        //DP00065.en
        VALIDATE(Approved, TRUE);  //* With 'Validate', so also 'Approved by' And 'Approved Date/Time' will be filled.
        //DP00065.sn
        IF NOT CreatePurchOrder(lvDispatchNoteRec) THEN
          MatchPurchOrder(lvDispatchNoteRec);
        //DP00065.en
        MODIFY;
      END;
      VarRec := lvDispatchNoteRec;
    END;

    PROCEDURE RunCheckInvoice@1100525002(Rec@1100525000 : Record 11072653);
    BEGIN
      GLSetup.GET;
      CheckInvoice(Rec);
      ShowInvoiceMessages(Rec."No.", FALSE);
    END;

    PROCEDURE RunApproveInvoice@1100525003(VAR VarRec@1100525000 : Record 11072653);
    VAR
      lvInvoiceRec@1100525001 : Record 11072653;
      lvInvMessRec@1100525002 : Record 11072655;
      lvText000@1100525003 : TextConst 'ENU=Approve invoice ''%1''?;NOR=Godkjenne faktura ''%1''?;SVE=Godk„nna faktura ''%1''?';
      lvText001@1100525004 : TextConst 'ENU=%1 ''%2'' is created. Show?;NOR=%1 ''%2'' er opprettet. Vise?;SVE=%1 ''%2'' har skapats Vill du visa?';
      lvPurchHeaderRec@1100525005 : Record 38;
      PurchSetup@1100528900 : Record 312;
      PurchInvoiceHeader@1100528901 : Record 122;
      PurchCreditHeader@1100528902 : Record 124;
      ApprPurchInvoices@1100529000 : Page 11012066;
      ApprCredMemos@1100529001 : Page 11012068;
      InvoiceIsPosted@1100525006 : Boolean;
    BEGIN
      GLSetup.GET;
      WITH lvInvoiceRec DO BEGIN
        COPY(VarRec);
        CheckInvoice(lvInvoiceRec);
        IF GUIALLOWED THEN BEGIN
          InvMessAccepted := FALSE;
          ShowInvoiceMessages("No.", TRUE);
          lvInvMessRec.SETRANGE("Invoice No.", "No.");
          IF lvInvMessRec.FINDFIRST THEN BEGIN
            IF NOT InvMessAccepted THEN
              ERROR('');
          END ELSE BEGIN
            IF "Purch. Invoice Type" = "Purch. Invoice Type"::Invoice THEN BEGIN
              IF NOT CONFIRM(lvText000, TRUE, "No.") THEN
                ERROR('');
            END
            ELSE BEGIN
              IF NOT CONFIRM(Text008, TRUE, "No.") THEN
                ERROR('');
            END;
          END;
        END ELSE BEGIN
          lvInvMessRec.SETRANGE("Invoice No.", "No.");
          IF NOT lvInvMessRec.ISEMPTY THEN
            ERROR('');
        END;

        GET("No.");
        IF RestartUnfinishedApproval(lvInvoiceRec) = FALSE THEN  //db, 18-09-14: C017265
          CreatePurchInvoice(lvInvoiceRec);

        CreateExternalPlantRentInvoice(lvInvoiceRec);

        VALIDATE(Approved, TRUE);  //* With 'Validate', so also 'Approved by' And 'Approved Date/Time' will be filled.
        MODIFY;

        COMMIT;  //* First 'Commit' before the 'Confirm'
        IF GUIALLOWED AND CONFIRM(lvText001, TRUE, lvInvoiceRec."Purch. Invoice Type", lvInvoiceRec."Purchase Invoice No.") THEN BEGIN
          PurchSetup.GET;
          IF PurchSetup."Approve Purchase Invoices" THEN BEGIN  //DP00065
            IF "Purch. Invoice Type" <> "Purch. Invoice Type"::CreditMemo THEN BEGIN
              PurchInvoiceHeader.SETRANGE("No.", "Purchase Invoice No.");
              InvoiceIsPosted := PurchInvoiceHeader.FINDFIRST;
              IF InvoiceIsPosted THEN BEGIN
                ApprPurchInvoices.SETTABLEVIEW(PurchInvoiceHeader);
                ApprPurchInvoices.SetJournalTemplate(PurchInvoiceHeader."Journal Template");
                ApprPurchInvoices.RUNMODAL;
              END;
            END ELSE BEGIN
              PurchCreditHeader.SETRANGE("No.", "Purchase Invoice No.");
              InvoiceIsPosted := PurchCreditHeader.FINDFIRST;
              IF InvoiceIsPosted THEN BEGIN
                ApprCredMemos.SETTABLEVIEW(PurchCreditHeader);
                ApprCredMemos.SetJournalTemplate(PurchCreditHeader."Journal Template");
                ApprCredMemos.RUNMODAL;
              END;
            END;
          END;
          IF NOT InvoiceIsPosted THEN BEGIN
            lvPurchHeaderRec.FILTERGROUP(9);
            IF "Purch. Invoice Type" <> "Purch. Invoice Type"::CreditMemo THEN
              lvPurchHeaderRec.SETRANGE("Document Type", lvPurchHeaderRec."Document Type"::Invoice)
            ELSE
              lvPurchHeaderRec.SETRANGE("Document Type", lvPurchHeaderRec."Document Type"::"Credit Memo");
            lvPurchHeaderRec.FILTERGROUP(0);
            lvPurchHeaderRec.SETRANGE("No.", "Purchase Invoice No.");
            IF "Purch. Invoice Type" <> "Purch. Invoice Type"::CreditMemo THEN
              PAGE.RUNMODAL(PAGE::"Purchase Invoice", lvPurchHeaderRec)
            ELSE
              PAGE.RUNMODAL(PAGE::"Purchase Credit Memo", lvPurchHeaderRec);
          END;
        END;
      END;
      VarRec := lvInvoiceRec;
    END;

    LOCAL PROCEDURE CheckInvoice@1100525009(iInvoiceRec@1100525000 : Record 11072653);
    VAR
      lvInvoiceLineRec@1100525002 : Record 11072654;
      lvDispatchNoteRec@1100525005 : Record 11072651;
      lvDispatchNoteLineRec@1100525004 : Record 11072652;
      lvVendRec@1100525006 : Record 23;
      lvVendRelRec@1100525011 : Record 11012313;
      lvProjRec@1100525003 : Record 11072003;
      lvDimValRec@1100525001 : Record 349;
      lvTradeItemRec@1100525007 : Record 11012317;
      lvVATPostingSetupRec@1100525008 : Record 325;
      lvServiceOrder@1100525013 : Record 11012823;
      lvPlantTypeRec@1100525014 : Record 11012551;
      lvPlantNumberRec@1100525015 : Record 11012552;
      lvDimMgtCU@1100525009 : Codeunit 408;
      lvCounterNotFilledDispatch@1100525012 : Integer;
      lvVatPercHeader@1100525010 : Decimal;
      VendorCode@1100528900 : Code[20];
      HelpTxt@1100525016 : Text[30];
      PurchaseLine@1100525017 : Record 39;
      Item@1100525018 : Record 27;
      TradeItem@1100525019 : Record 11012317;
      ProjSetup@1100525020 : Record 315;
      VendorNoTradeItem@1100528500 : Code[15];
      TradeItemTested@1100529900 : Boolean;
    BEGIN
      WITH iInvoiceRec DO BEGIN
        DeleteInvoiceMessages("No.");

        TESTFIELD("No.");
        TESTFIELD(Approved, FALSE);
        TESTFIELD("Vendor No.");

        lvVendRec.GET("Vendor No.");
        VendorNoTradeItem := lvVendRec."Vendor (Trade Item)";
        IF VendorNoTradeItem = '' THEN BEGIN
          CALCFIELDS("GLN Alternative Vendor");
          IF "GLN Alternative Vendor" <> '' THEN
            VendorCode := "GLN Alternative Vendor"
          ELSE
            VendorCode := "GLN Vendor";
          IF VendorCode <> '' THEN BEGIN
            lvVendRelRec.GET(VendorCode);
            lvVendRelRec.TESTFIELD("Vendor (Purchase)");
            TESTFIELD("Vendor No.", lvVendRelRec."Vendor (Purchase)");
          END;
        END;
        TESTFIELD("VAT Bus. Posting Group");
        TESTFIELD("VAT Prod. Posting Group");
        lvVATPostingSetupRec.GET("VAT Bus. Posting Group", "VAT Prod. Posting Group");
        lvVatPercHeader := lvVATPostingSetupRec."VAT %";
      END;

      WITH lvInvoiceLineRec DO BEGIN
        SETRANGE("Invoice No.", iInvoiceRec."No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          lvCounterNotFilledDispatch := 0;
          REPEAT
            IF NOT IsInvoiceTextLine() THEN BEGIN
              IF ("Project No." <> '') OR ("Service Order No." <> '') OR ("Plant Type" <> '') THEN BEGIN  //db, 04-02-14: T004213
                //* check Project, Service Order or Plant Type is filled; Cost Object is mandatory: so WIP account can be determined
                IF "Project No." <> '' THEN BEGIN
                  lvProjRec.GET("Project No.");
                  //lvProjRec.CheckProjectStatus(1);  //db, 08-02-16
                  ProjSetup.GET;
                  IF ProjSetup."Provisions at Closure" THEN
                   lvProjRec.CheckProjectStatus(-1)
                  ELSE
                    lvProjRec.CheckProjectStatus(1);
                  IF ProjSetup."Posting Element Mandatory" THEN   //db, 08-02-16
                    TESTFIELD(Element);
                END;
                IF "Service Order No." <> '' THEN BEGIN
                  lvServiceOrder.GET("Service Order No.");
                  lvServiceOrder.CheckStatus(1);  //db, 08-02-16
                END;
                //db.sn, 04-02-14: T004213
                IF "Plant Type" <> '' THEN
                  lvPlantTypeRec.GET("Plant Type");
                IF "Plant No." <> '' THEN
                  lvPlantNumberRec.GET("Plant Type","Plant No.");
                //db.en, 04-02-14: T004213
                TESTFIELD("Cost Object");
                lvDimMgtCU.GetDimValueRec(2, "Cost Object", lvDimValRec, TRUE, '');
              END ELSE BEGIN
                IF "Item No." = '' THEN  //DP00065
                  TESTFIELD("G/L Account");
                IF "Item No." <> '' THEN
                  TESTFIELD("Location Code");  //db, 14-10-14: C017265
                IF "Cost Object" <> '' THEN
                  lvDimMgtCU.GetDimValueRec(2, "Cost Object", lvDimValRec, TRUE, '');
              END;

              TradeItemTested := FALSE;
              //db.sn, 08-02-16
              IF "Trade Item" <> '' THEN BEGIN
                TradeItem.GET("Vendor (Trade Item)", "Trade Item");
                TradeItemTested := TRUE;
                TradeItem.TESTFIELD(Expired,FALSE);
                TradeItemTested := TRUE;
              END ELSE BEGIN
                IF "Item No." <> '' THEN BEGIN
                  Item.GET("Item No.");
                  Item.TESTFIELD(Blocked,FALSE);
                END;
              END;
              //db.en, 08-02-16

              IF Department <> '' THEN
                lvDimMgtCU.GetDimValueRec(1, Department, lvDimValRec, TRUE, '');

              IF VatPostingGroupsOnLineLevel(lvInvoiceLineRec) THEN BEGIN
                //* If on line level then both must be filed on this level.
                TESTFIELD("VAT Bus. Posting Group");
                TESTFIELD("VAT Prod. Posting Group");
                lvVATPostingSetupRec.GET("VAT Bus. Posting Group", "VAT Prod. Posting Group");
              END;

              IF "No Dispatch Required" = '0' THEN BEGIN                   //**evdb.n
                IF ("Dispatch Note No." = '') OR ("Dispatch Note Line No." = 0) THEN BEGIN
                  lvCounterNotFilledDispatch := lvCounterNotFilledDispatch + 1;
                END ELSE BEGIN
                  IF NOT lvDispatchNoteRec.GET("Dispatch Note No.") THEN BEGIN
                    CreateInvoiceMessage("Invoice No.", "Line No.",
                      STRSUBSTNO(Text002, FIELDCAPTION("Dispatch Note No."), "Dispatch Note No.") + Text003);
                  END ELSE BEGIN
                    lvDispatchNoteRec.TESTFIELD(Approved);
                    IF NOT lvDispatchNoteLineRec.GET("Dispatch Note No.", "Dispatch Note Line No.") THEN BEGIN
                      lvDispatchNoteLineRec.INIT;
                      CreateInvoiceMessage("Invoice No.", "Line No.",
                        STRSUBSTNO(Text002,
                          FIELDCAPTION("Dispatch Note Line No."),
                          "Dispatch Note No." + '-' + FORMAT("Dispatch Note Line No.")) + Text003);
                    END ELSE BEGIN
                      IF ("Invoiced Quantity" <> lvDispatchNoteLineRec."Approved Quantity") OR
                         ("Unit of Measure Code" <> lvDispatchNoteLineRec."Unit of Measure Code")
                      THEN BEGIN
                        CreateInvoiceMessage("Invoice No.", "Line No.",
                          STRSUBSTNO(Text004,
                            "Invoiced Quantity", "Unit of Measure Code",
                            lvDispatchNoteLineRec."Approved Quantity", lvDispatchNoteLineRec."Unit of Measure Code"));
                      END;
                    END;
                  END;
                END;
              END;
              IF "Order Line No. Buyer" <> 0 THEN BEGIN  //db, 04-06-15
                IF STRLEN("Order No. Buyer") > MAXSTRLEN(PurchaseLine."Document No.") THEN BEGIN
                  HelpTxt := "Order No. Buyer" + '-' + STRSUBSTNO('%1', "Order Line No. Buyer");
                  CreateInvoiceMessage("Invoice No.", "Line No.", STRSUBSTNO(Text002, PurchaseLine.TABLECAPTION, HelpTxt));
                END ELSE
                  IF NOT PurchaseLine.GET(PurchaseLine."Document Type"::Order, "Order No. Buyer", "Order Line No. Buyer" ) THEN BEGIN
                    HelpTxt := "Order No. Buyer" + '-' + STRSUBSTNO('%1', "Order Line No. Buyer");
                    CreateInvoiceMessage("Invoice No.", "Line No.", STRSUBSTNO(Text002, PurchaseLine.TABLECAPTION, HelpTxt));
                  END;
              END;
              IF NOT TradeItemTested THEN
                IF ("Item No. Vendor" <> '') OR ("GTIN Item" <> '') THEN BEGIN
                  IF NOT CheckTradeItem(lvTradeItemRec, VendorNoTradeItem, "Item No. Vendor", "GTIN Item") THEN BEGIN  //DP00065
                    IF ("Item No. Vendor" <> '') THEN
                      CreateInvoiceMessage("Invoice No.", "Line No.",
                        STRSUBSTNO(Text002, FIELDCAPTION("Item No. Vendor"), VendorNoTradeItem + ' - ' + "Item No. Vendor"));  //DP00065
                  END ELSE BEGIN
                    IF ("Invoiced Quantity" > 0) AND (iInvoiceRec.Source <> iInvoiceRec.Source::INSBOU) THEN
                      CheckInvoiceLinePriceDiscount(iInvoiceRec, lvInvoiceLineRec, lvTradeItemRec);
                  END;
                END;
              IF VatPostingGroupsOnLineLevel(lvInvoiceLineRec) THEN BEGIN
                IF lvVATPostingSetupRec."VAT %" <> "VAT %" THEN BEGIN
                  CreateInvoiceMessage("Invoice No.", "Line No.", STRSUBSTNO(Text005,
                    lvVATPostingSetupRec.TABLECAPTION, FIELDCAPTION("VAT %"), lvVATPostingSetupRec."VAT %", "VAT %"));
                END;
              END ELSE BEGIN
                IF lvVatPercHeader <> "VAT %" THEN BEGIN
                  CreateInvoiceMessage("Invoice No.", "Line No.", STRSUBSTNO(Text005,
                    lvVATPostingSetupRec.TABLECAPTION, FIELDCAPTION("VAT %"), lvVatPercHeader, "VAT %"));
                END;
              END;
            END;
          UNTIL NEXT = 0;
          IF lvCounterNotFilledDispatch > 0 THEN BEGIN
            CreateInvoiceMessage("Invoice No.", "Line No.",
              STRSUBSTNO(Text001, FIELDCAPTION("Dispatch Note No."), FIELDCAPTION("Dispatch Note Line No.")) + Text003);
          END;
        END;
      END;
    END;

    PROCEDURE CheckInvoiceLinePriceDiscount@1100525010(iInvoiceRec@1100525002 : Record 11072653;iInvoiceLineRec@1100525001 : Record 11072654;iTradeItemRec@1100525004 : Record 11012317);
    VAR
      lvPriceHistRec@1100525000 : Record 11012315;
      NetPrice@1100525005 : Decimal;
      NetAmount@1100525003 : Decimal;
      VendorCode@1100528900 : Code[20];
    BEGIN
      WITH iInvoiceLineRec DO BEGIN
        //DP00065.sn
        iInvoiceRec.CALCFIELDS("GLN Alternative Vendor");
        IF iInvoiceRec."GLN Alternative Vendor" <> '' THEN
          VendorCode := iInvoiceRec."GLN Alternative Vendor"
        ELSE
          VendorCode := iInvoiceRec."GLN Vendor";
        //DP00065.en
        lvPriceHistRec.SETRANGE(Vendor, VendorCode);  //DP00065
        lvPriceHistRec.SETRANGE("Item Code", "Item No. Vendor");
        lvPriceHistRec.SETFILTER("Starting Date", '..%1', "Delivery Date");
        IF NOT lvPriceHistRec.FINDLAST THEN BEGIN
          CreateInvoiceMessage("Invoice No.", "Line No.", STRSUBSTNO(Text006, VendorCode, "Item No. Vendor"));  //DP00065
          EXIT;
        END;
        //T006403.sn (db, 09-01-17)
        IF lvPriceHistRec."Net Price" = 0 THEN BEGIN
          iTradeItemRec.GetActualPrice(iInvoiceLineRec."Delivery Date", '', '');
          NetPrice := iTradeItemRec."Net Price";
        END ELSE BEGIN
          NetPrice := lvPriceHistRec."Net Price";
        END;
        IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
          NetPrice := NetPrice / lvPriceHistRec."Quantity Per Price";
        //T006403.en (db, 09-01-17)
        IF (iTradeItemRec."Factor Price-Purchase Unit" <> 0) AND
           (lvPriceHistRec."Price ID" <> "Unit of Measure Code")             // "Unit of Measure" is the invoiced unit
        THEN BEGIN
          IF ("Unit of Measure Code" = iTradeItemRec."Order ID") THEN
            NetPrice := NetPrice * iTradeItemRec."Factor Price-Purchase Unit";
        END;
        NetAmount := ROUND(NetPrice * iInvoiceLineRec."Invoiced Quantity", 0.01); //DP00928
        IF (NetAmount < iInvoiceLineRec."Net Line Amount"-0.01) OR (NetAmount > iInvoiceLineRec."Net Line Amount"+0.01) THEN
          CreateInvoiceMessage("Invoice No.", "Line No.", STRSUBSTNO(Text007, NetAmount, iInvoiceLineRec."Net Line Amount"));
      END;
    END;

    PROCEDURE CreatePurchInvoice@1100525013(VAR ioInvoiceRec@1100525000 : Record 11072653);
    VAR
      lvPurchHeaderRec@1100525002 : Record 38;
      lvInvoiceLineRec@1100528903 : Record 11072654;
      lvDispatchNoteRec@1100528904 : Record 11072651;
      lvVendorRec@1100528902 : Record 23;
      PurchSetup@1100528900 : Record 312;
      PurchPost@1100528901 : Codeunit 90;
      PurchInvHeader@1100528906 : Record 122;
      PurchCreditHeader@1100528905 : Record 124;
      DocType@1100528907 : Integer;
      DocNo@1100528908 : Code[20];
      RelatedPurchaseOrderNo@1100528402 : Code[20];
      BankAccountRec@1100525001 : Record 288;
      LenBankAccount@1100525003 : Integer;
      LenCheck@1100525004 : Integer;
      AmountHeader@1100525006 : Decimal;
      AmountLines@1100525005 : Decimal;
      PurchaseLine@1100529902 : Record 39;
      Lineno@1100529901 : Integer;
      HoldPurchaseLine@1100529900 : Record 39;
    BEGIN
      //* Do not use all field from the imported invoice (header/line) table, because for some fields the setups in
      //* Navision are leading (AO). see also comment in codeunit 11072076.
      PurchSetup.GET;  //DP00065
      SiBSetup.GET; //DP00065

      WITH ioInvoiceRec DO BEGIN
        lvPurchHeaderRec.INIT;
        IF ("Total Invoice Amount" >= 0) AND ("Purch. Invoice Type" = "Purch. Invoice Type"::Invoice) THEN BEGIN
          lvPurchHeaderRec."Document Type" := lvPurchHeaderRec."Document Type"::Invoice;
          lvPurchHeaderRec."Processing Status SiB Invoice" := lvPurchHeaderRec."Processing Status SiB Invoice"::"No (Complete) Match";
          lvPurchHeaderRec."Processing Result SiB Invoice" := lvPurchHeaderRec."Processing Result SiB Invoice"::Waiting;
        END
        ELSE BEGIN
          lvPurchHeaderRec."Document Type" := lvPurchHeaderRec."Document Type"::"Credit Memo";
          lvPurchHeaderRec."Processing Status SiB Invoice" := lvPurchHeaderRec."Processing Status SiB Invoice"::"No (Complete) Match";
          lvPurchHeaderRec."Processing Result SiB Invoice" := lvPurchHeaderRec."Processing Result SiB Invoice"::Failure;
        END;

        lvPurchHeaderRec."No." := '';
        lvPurchHeaderRec."No. Series" := SiBSetup."Invoice Nos. (Purch. Invoice)";  //DP00065
        lvPurchHeaderRec."Order Type (SiB)" := lvPurchHeaderRec."Order Type (SiB)"::Invoice;  //DP00065
        lvPurchHeaderRec.INSERT(TRUE);
        lvPurchHeaderRec.TESTFIELD("No.");

        "Purchase Invoice No." := lvPurchHeaderRec."No.";
        IF lvPurchHeaderRec."Document Type" = lvPurchHeaderRec."Document Type"::Invoice THEN
          "Purch. Invoice Type" := "Purch. Invoice Type"::Invoice
        ELSE
          "Purch. Invoice Type" := "Purch. Invoice Type"::CreditMemo;

        IF ("Order Response Number" = '') AND ("Despatch Advice Number" = '') AND ("Related Purch. Order No." = '') AND
           (lvPurchHeaderRec."Document Type" = lvPurchHeaderRec."Document Type"::Invoice)  THEN BEGIN
          lvPurchHeaderRec."Processing Status SiB Invoice" := lvPurchHeaderRec."Processing Status SiB Invoice"::"No OrderNumber Filled In";
          lvPurchHeaderRec."Processing Result SiB Invoice" := lvPurchHeaderRec."Processing Result SiB Invoice"::Failure;
        END;

        lvPurchHeaderRec.VALIDATE("Buy-from Vendor No.", "Vendor No.");
        IF "Posting Date" <> 0D THEN  //DP00065
          lvPurchHeaderRec.VALIDATE("Posting Date", "Posting Date");
        IF "Invoice Date" <> 0D THEN  //DP00065
          lvPurchHeaderRec.VALIDATE("Document Date", "Invoice Date");
        IF "Project No." <> '' THEN
          lvPurchHeaderRec.VALIDATE("Job No.", "Project No.");
        IF "Service Order No." <> '' THEN
          lvPurchHeaderRec.VALIDATE("Service Order No.", "Service Order No.");
        lvPurchHeaderRec."Ext. Document ID" := "Ext. Document ID";  //28-01-14: T004213 (document with same name as xml-file)
        lvPurchHeaderRec."Your Reference" := "Our Reference";
        IF "On Hold" <> '' THEN
          lvPurchHeaderRec.VALIDATE("On Hold", "On Hold");  //DP00065
        IF "Approvement Initials" <> '' THEN
          lvPurchHeaderRec.VALIDATE("Approvement Initials", "Approvement Initials");  //db, 05-09-14: C017265
        IF "Project No." <> '' THEN
          lvPurchHeaderRec.VALIDATE("Job No.", "Project No.")
        ELSE BEGIN
          IF "Service Order No." <> '' THEN
            lvPurchHeaderRec.VALIDATE("Service Order No.", "Service Order No.");
        END;

        //db.sn, 21-03-13: C006265
        IF PurchSetup."Bank Account Check" THEN BEGIN
        END;
        //db.en, 21-03-13: C006265

        IF GUIALLOWED THEN
          lvPurchHeaderRec.VALIDATE("Invoice Lines Input", (PurchSetup."Approve Purchase Invoices"=FALSE))  //DP00065
        ELSE
          lvPurchHeaderRec.VALIDATE("Invoice Lines Input", TRUE);

        IF ("Amount B-Account" <> 0) THEN BEGIN
          lvVendorRec.GET("Vendor No.");
          lvVendorRec.TESTFIELD("Default Payment Agreement");
          lvPurchHeaderRec.VALIDATE("Subcontracting Invoice", TRUE);
          lvPurchHeaderRec.VALIDATE("Contribution Percentage Labor", 100);
          lvPurchHeaderRec.VALIDATE("Labor Amount", "Amount B-Account");
        END ELSE
          lvPurchHeaderRec.VALIDATE("Subcontracting Invoice", FALSE);
        lvPurchHeaderRec.VALIDATE("Amounts only", FALSE);
        IF lvPurchHeaderRec."Document Type" = lvPurchHeaderRec."Document Type"::Invoice THEN
          lvPurchHeaderRec."Vendor Invoice No." := "No."
        ELSE
          lvPurchHeaderRec."Vendor Cr. Memo No." := "No.";

        // IF ("Currency Code" <> '') AND ("Currency Code" <> GLSetup."LCY Code") THEN //C036849.o
        //C036849.sn
        IF ("Currency Code" <> lvPurchHeaderRec."Currency Code") AND
           (("Currency Code" <> GLSetup."LCY Code") OR (lvPurchHeaderRec."Currency Code" <> ''))
        THEN
          IF "Currency Code" = GLSetup."LCY Code" THEN
            lvPurchHeaderRec.VALIDATE("Currency Code", '')
          ELSE
        //C036849.en
            lvPurchHeaderRec.VALIDATE("Currency Code", "Currency Code");

        lvPurchHeaderRec.VALIDATE("VAT Bus. Posting Group", "VAT Bus. Posting Group");
        lvPurchHeaderRec.VALIDATE("VAT Prod. Posting Group", "VAT Prod. Posting Group");

        lvPurchHeaderRec.VALIDATE("Amount incl. VAT", "Total Invoice Amount");
        //DP00065.sn (34418.n / 34418.o)
        //IF PurchSetup."Approve Purchase Invoices" THEN BEGIN
        //  SiBSetup.TESTFIELD("Approval Template");
        //  lvPurchHeaderRec."Inv.Appr.Journal Template" := SiBSetup."Approval Template";
        //END;
        //DP00065.en
        lvPurchHeaderRec.MODIFY(TRUE);
        LinkInvoiceDocument(ioInvoiceRec, lvPurchHeaderRec); //DP00881
        //DP00065.sn (34418)
        IF PurchSetup."Approve Purchase Invoices" AND GUIALLOWED THEN
          lvPurchHeaderRec.TESTFIELD("Inv.Appr.Journal Template");
        //DP00065.en
        CopyCommentLines("Purch. Invoice Type" = "Purch. Invoice Type"::CreditMemo,"No.", lvPurchHeaderRec."No.", 0, 0);
      END;

      //DP00065.sn
      WITH lvInvoiceLineRec DO BEGIN
        //function GetReceiptLines based on "Related Purch. Order No."; fill info by Dispatch Note: assumed to be 1 document on invoice
        SETRANGE("Invoice No.", ioInvoiceRec."No.");
        SETFILTER("Dispatch Note No.", '<>%1', '');
        IF FINDFIRST THEN BEGIN
          IF lvDispatchNoteRec.GET("Dispatch Note No.") THEN BEGIN
            lvPurchHeaderRec."Related Purch. Order No." := lvDispatchNoteRec."Related Purch. Order No.";
            lvPurchHeaderRec.MODIFY(TRUE);
          END;
        END;
      END;
      IF lvPurchHeaderRec."Related Purch. Order No." = '' THEN BEGIN
        RelatedPurchaseOrderNo := ioInvoiceRec.GetRelatedPurchaseOrderNo;
        IF RelatedPurchaseOrderNo <> '' THEN BEGIN
          lvPurchHeaderRec."Related Purch. Order No." := RelatedPurchaseOrderNo;
          lvPurchHeaderRec.MODIFY(TRUE);
        END;
      END;
      IF lvPurchHeaderRec."Related Purch. Order No." = '' THEN BEGIN
        lvPurchHeaderRec."Processing Status SiB Invoice" := lvPurchHeaderRec."Processing Status SiB Invoice"::"No OrderNumber Filled In";
        lvPurchHeaderRec.MODIFY(TRUE);
        IF (ioInvoiceRec."Order Response Number" = '') AND (ioInvoiceRec."Despatch Advice Number" = '') AND (ioInvoiceRec."Related Purch. Order No." = '') THEN BEGIN
          PurchaseLine.SETRANGE("Document Type",lvPurchHeaderRec."Document Type");
          PurchaseLine.SETRANGE("Document No.", lvPurchHeaderRec."No.");
          IF PurchaseLine.COUNT = 1 THEN BEGIN
            PurchaseLine.FINDSET;
            HoldPurchaseLine := PurchaseLine;

            Lineno := 0;
            lvInvoiceLineRec.RESET;
            lvInvoiceLineRec.SETRANGE("Invoice No.", ioInvoiceRec."No.");
            IF lvInvoiceLineRec.FINDSET THEN
              REPEAT
                Lineno += 10000;

                IF PurchaseLine."Line No." = Lineno THEN BEGIN
                  PurchaseLine.VALIDATE(Quantity, lvInvoiceLineRec."Invoiced Quantity");
                  PurchaseLine.VALIDATE("Direct Unit Cost", lvInvoiceLineRec.Price);
                  PurchaseLine.VALIDATE("VAT Prod. Posting Group", lvInvoiceLineRec."VAT Prod. Posting Group");
                  PurchaseLine.MODIFY;
                END ELSE BEGIN
                  PurchaseLine.INIT;
                  PurchaseLine := HoldPurchaseLine;
                  PurchaseLine."Line No." := Lineno;
                  PurchaseLine.VALIDATE(Quantity, lvInvoiceLineRec."Invoiced Quantity");
                  PurchaseLine.VALIDATE("Direct Unit Cost", lvInvoiceLineRec.Price);
                  PurchaseLine.VALIDATE("VAT Prod. Posting Group", lvInvoiceLineRec."VAT Prod. Posting Group");
                  PurchaseLine.INSERT;
                END;
              UNTIL lvInvoiceLineRec.NEXT = 0;
          END;
        END;
        EXIT;
      END;

      IF GUIALLOWED THEN BEGIN
        IF PurchSetup."Approve Purchase Invoices" AND (NOT lvPurchHeaderRec."Invoice Lines Input") THEN BEGIN
      //    IF lvPurchHeaderRec."Document Type" = lvPurchHeaderRec."Document Type"::Invoice THEN

          IF NOT InvoiceMarginCheck(lvPurchHeaderRec,AmountHeader,AmountLines) THEN
            ERROR(STRSUBSTNO(Text100,AmountHeader,AmountLines));

          PurchPost.RUN(lvPurchHeaderRec);
      //    ELSE
      //      BEGIN
      //        GetReceiptLines(lvPurchHeaderRec, 0, '', FALSE);
      //        MatchPurchInvoice(ioInvoiceRec, lvPurchHeaderRec);
      //        CheckPurchaseCheckAllLinesHaveQuantityAssigned(lvPurchHeaderRec);
      //        lvPurchHeaderRec.Invoice := TRUE;
      //        lvPurchHeaderRec.MODIFY;
      //        COMMIT;
      //        lvPurchHeaderRec.SendToPosting(CODEUNIT::"Purch.-Post (Yes/No)");
      //      END;
          IF lvPurchHeaderRec."Document Type" = lvPurchHeaderRec."Document Type"::"Credit Memo" THEN BEGIN
          //IF lvPurchHeaderRec.Amount < 0 THEN BEGIN
            PurchCreditHeader.SETCURRENTKEY("Pre-Assigned No.");
            PurchCreditHeader.SETRANGE("Pre-Assigned No.", lvPurchHeaderRec."No.");
            PurchCreditHeader.SETRANGE("Related Purch. Order No.", lvPurchHeaderRec."Related Purch. Order No.");
            IF NOT PurchCreditHeader.FINDLAST THEN
              EXIT;
            DocType := 1;
            DocNo := PurchCreditHeader."No.";
          END ELSE BEGIN
            PurchInvHeader.SETCURRENTKEY("Pre-Assigned No.");
            PurchInvHeader.SETRANGE("Pre-Assigned No.", lvPurchHeaderRec."No.");
            PurchInvHeader.SETRANGE("Related Purch. Order No.", lvPurchHeaderRec."Related Purch. Order No.");
            IF NOT PurchInvHeader.FINDLAST THEN
              EXIT;
            DocType := 0; //option in codeunit 11012023 (0=invoice, 1=credit)
            DocNo := PurchInvHeader."No.";
          END;
          GetReceiptLines(lvPurchHeaderRec, DocType, DocNo, TRUE);
          MatchPurchApproval(ioInvoiceRec, DocType, DocNo, lvPurchHeaderRec."Inv.Appr.Journal Template");  //34418.c
        END ELSE BEGIN
          GetReceiptLines(lvPurchHeaderRec, 0, '', FALSE);
          MatchPurchInvoice(ioInvoiceRec, lvPurchHeaderRec);
        END;
      //DP00065.en
      END ELSE
        IF lvPurchHeaderRec."Document Type" = lvPurchHeaderRec."Document Type"::Invoice THEN
          GetReceiptAndMatchInvoice(lvPurchHeaderRec,ioInvoiceRec);
    END;

    PROCEDURE CreatePurchInvoiceLine@1100528913(PurchHeaderRec@1100528900 : Record 38;VAR PurchLineRec@1100528902 : Record 39;NextLine@1100528901 : Integer;DescLine@1100528903 : Text[100]);
    BEGIN
      //DP00065
      PurchLineRec.INIT;
      PurchLineRec."Document Type" := PurchHeaderRec."Document Type";
      PurchLineRec."Document No." := PurchHeaderRec."No.";
      PurchLineRec."Line No." := NextLine;
      PurchLineRec.Description := DescLine;
      PurchLineRec.INSERT(TRUE);
    END;

    PROCEDURE UpdatePurchInvoiceLine@1100528912(InvoiceRec@1100528901 : Record 11072653;InvoiceLineRec@1100528911 : Record 11072654;PurchLineRec@1100528908 : Record 39;LineMatched@1100528912 : Boolean);
    VAR
      lvTradeItemRec@1100528910 : Record 11012317;
      lvDiscAmt@1100528907 : Decimal;
      lvDiscPerc@1100528906 : Decimal;
      lvUnitCode@1100528905 : Code[10];
      ItemMgt@1100528904 : Codeunit 11012033;
      HelpTxt@1100528903 : Text[50];
      VendorCode@1100528902 : Code[20];
    BEGIN
      //DP00065
      InvoiceRec.CALCFIELDS("GLN Alternative Vendor");
      IF InvoiceRec."GLN Alternative Vendor" <> '' THEN
        VendorCode := InvoiceRec."GLN Alternative Vendor"
      ELSE
        VendorCode := InvoiceRec."GLN Vendor";

      WITH InvoiceLineRec DO BEGIN
        PurchLineRec.SetFromExternalInvoice(TRUE);
        IF IsInvoiceTextLine() THEN BEGIN
          PurchLineRec.Type := PurchLineRec.Type::" ";
          PurchLineRec.Description := COPYSTR(Description, 1, MAXSTRLEN(PurchLineRec.Description));
        END ELSE BEGIN
          IF NOT LineMatched THEN BEGIN
            PurchLineRec.Type := PurchLineRec.Type::"G/L Account";
            IF ("Project No." + "Service Order No." + "Plant Type" = '') THEN BEGIN  //db, 04-02-14: T004213
              PurchLineRec.VALIDATE("No.", "G/L Account");
            END ELSE BEGIN
              IF "Project No." <> '' THEN
                PurchLineRec.VALIDATE("Job No.", "Project No.");
              IF Element <> '' THEN
                PurchLineRec.VALIDATE(Element, Element);
              IF "Service Order No." <> '' THEN
                PurchLineRec.VALIDATE("Service Order No.", "Service Order No.");
              //db.sn, 04-02-14: T004213
              IF "Plant Type" <> '' THEN
                PurchLineRec.VALIDATE("Plant Type", "Plant Type");
              IF "Plant No." <> '' THEN
                PurchLineRec.VALIDATE("Plant No.", "Plant No.");
              IF "Cost Component Plant" <> '' THEN
                PurchLineRec.VALIDATE("Cost Component Plant", "Cost Component Plant");
              //db.en, 04-02-14: T004213
            END;
          END;
          //*C-018789.sn
          HelpTxt := '';
          IF ("Item No. Vendor" <> '') OR ("GTIN Item" <> '') THEN BEGIN
            IF CheckTradeItem(lvTradeItemRec, VendorCode, "Item No. Vendor", "GTIN Item") THEN BEGIN
              PurchLineRec.VALIDATE("Vendor (Trade Item)", lvTradeItemRec.Vendor);
              IF ("Item No. Vendor" <> '') THEN
                PurchLineRec.VALIDATE("Trade Item", "Item No. Vendor")
              ELSE
                PurchLineRec.VALIDATE("Trade Item", "GTIN Item");
            END ELSE BEGIN
              HelpTxt := GetHelpTxt("Item No. Vendor", "GTIN Item");
            END;
          END;
          //*C-018789.en
          IF "Trade Item" <> '' THEN BEGIN
            PurchLineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
            PurchLineRec.VALIDATE("Trade Item", "Trade Item");
          END ELSE BEGIN
            IF "Basic Item" <> '' THEN BEGIN
              PurchLineRec.Manufacturer := Manufacturer;
              PurchLineRec.VALIDATE("Basic Item", "Basic Item");
            END ELSE BEGIN
              IF "Item No." <> '' THEN
                PurchLineRec.VALIDATE("Item No.", "Item No.");
            END;
          END;

          IF ("Cost Object" <> '') AND ("Cost Object" <> PurchLineRec."Shortcut Dimension 2 Code") THEN
            PurchLineRec.VALIDATE("Shortcut Dimension 2 Code", "Cost Object");
          IF Department <> '' THEN
            PurchLineRec.VALIDATE("Shortcut Dimension 1 Code", Department);

          PurchLineRec.VALIDATE(Quantity, "Invoiced Quantity");
          lvUnitCode := ItemMgt.CheckUnitConversion("Unit of Measure Code");
          //IF lvUnitCode = '' THEN
          //  lvUnitCode := "Unit of Measure Code";
          //IF (PurchLineRec."Unit of Measure Code" <> lvUnitCode) THEN
          //  PurchLineRec.VALIDATE("Unit of Measure Code", lvUnitCode);
          IF PurchLineRec."Unit of Measure Code" = '' THEN
            PurchLineRec.VALIDATE("Unit of Measure Code", lvUnitCode);  //db, 02-02-12: M32830

          IF PurchLineRec."Line Discount %" <> 0 THEN
            PurchLineRec.VALIDATE("Line Discount %", 0);
          lvDiscAmt := "Discount/Surcharge Amount";
          lvDiscPerc := "Discount/Surcharge %";
          IF "Discount/Surcharge Type" = "Discount/Surcharge Type"::Surcharge THEN BEGIN
            IF lvDiscAmt <> 0 THEN
              lvDiscAmt := -lvDiscAmt;
            IF lvDiscPerc <> 0 THEN
              lvDiscPerc := -lvDiscPerc;
          END;
          IF "Price Base Quantity" <> 0 THEN
            PurchLineRec.VALIDATE("Direct Unit Cost", Price / "Price Base Quantity")
          ELSE
            PurchLineRec.VALIDATE("Direct Unit Cost", Price);
          IF lvDiscAmt <> 0 THEN
            PurchLineRec.VALIDATE("Line Discount Amount", lvDiscAmt)
          ELSE BEGIN
            IF lvDiscPerc <> 0 THEN
              PurchLineRec.VALIDATE("Line Discount %", lvDiscPerc);
          END;
          PurchLineRec.VALIDATE("Line Amount", "Net Line Amount");

          IF NOT VatPostingGroupsOnLineLevel(InvoiceLineRec) THEN BEGIN
            PurchLineRec.VALIDATE("VAT Bus. Posting Group", InvoiceRec."VAT Bus. Posting Group");
            PurchLineRec.VALIDATE("VAT Prod. Posting Group", InvoiceRec."VAT Prod. Posting Group");
          END ELSE BEGIN
            PurchLineRec.VALIDATE("VAT Bus. Posting Group", "VAT Bus. Posting Group");
            PurchLineRec.VALIDATE("VAT Prod. Posting Group", "VAT Prod. Posting Group");
          END;
          IF Description <> '' THEN
            PurchLineRec.Description := COPYSTR(Description, 1, MAXSTRLEN(PurchLineRec.Description));
          IF HelpTxt <> '' THEN
            PurchLineRec."Description 2" := COPYSTR(HelpTxt, 1, MAXSTRLEN(PurchLineRec."Description 2"));
        END;
        PurchLineRec.MODIFY(TRUE);
        PurchLineRec.SetFromExternalInvoice(FALSE);
      END;
    END;

    PROCEDURE VatPostingGroupsOnLineLevel@1100525008(iInvoiceLineRec@1100525000 : Record 11072654) : Boolean;
    BEGIN
      EXIT((iInvoiceLineRec."VAT Bus. Posting Group" <> '') OR (iInvoiceLineRec."VAT Prod. Posting Group" <> ''));
    END;

    LOCAL PROCEDURE DeleteInvoiceMessages@1100525004(iInvoiceNo@1100525001 : Code[20]);
    VAR
      lvInvMessRec@1100525000 : Record 11072655;
    BEGIN
      lvInvMessRec.SETRANGE("Invoice No.", iInvoiceNo);
      lvInvMessRec.DELETEALL;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateInvoiceMessage@1100525005(iInvoiceNo@1100525001 : Code[20];iInvoiceLine@1100525002 : Integer;iMessText@1100525003 : Text[250]);
    VAR
      lvInvMessRec@1100525000 : Record 11072655;
      lvNextLineNo@1100525004 : Integer;
    BEGIN
      WITH lvInvMessRec DO BEGIN
        SETRANGE("Invoice No.", iInvoiceNo);
        SETRANGE("Invoice Line No.", iInvoiceLine);
        IF FINDLAST THEN
          lvNextLineNo := "Line No.";
        lvNextLineNo := lvNextLineNo + 1;

        INIT;
        "Invoice No." := iInvoiceNo;
        "Invoice Line No." := iInvoiceLine;
        "Line No." := lvNextLineNo;
        Message := iMessText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ShowInvoiceMessages@1100525006(iInvoiceNo@1100525001 : Code[20];iPostMode@1100525002 : Boolean);
    VAR
      lvInvMessRec@1100525000 : Record 11072655;
      lvInvMessFrm@1100409000 : Page 11072659;
    BEGIN
      WITH lvInvMessRec DO BEGIN
        FILTERGROUP(9);
        SETRANGE("Invoice No.", iInvoiceNo);
        FILTERGROUP(0);
        IF FINDFIRST THEN BEGIN
          COMMIT;
          IF NOT iPostMode THEN
            PAGE.RUNMODAL(0, lvInvMessRec)
          ELSE BEGIN
            lvInvMessFrm.SETTABLEVIEW(lvInvMessRec);
            lvInvMessFrm.LOOKUPMODE(TRUE);  //* Show 'Cancel' button
            lvInvMessFrm.SetPostMode();
            lvInvMessFrm.RUNMODAL;
            InvMessAccepted := lvInvMessFrm.GetAccepted();
          END;
        END;
      END;
    END;

    PROCEDURE CheckTradeItem@1100525014(VAR TradeItemRec@1100525000 : Record 11012317;GlnVendor@1100525001 : Code[20];ItemNoVend@1100525002 : Code[20];GtinItem@1100525003 : Code[20]) : Boolean;
    BEGIN
      //*C-018789  IF ItemNo-Vendor is empty then read with GTIN-Item
      IF ItemNoVend <> '' THEN BEGIN
        IF TradeItemRec.GET(GlnVendor, ItemNoVend) THEN
          EXIT(TRUE);
      END ELSE BEGIN
        IF GtinItem <> '' THEN BEGIN
          SiBSetup.GET;
          IF SiBSetup."Fill Item No. With GTIN Item" THEN BEGIN
            IF TradeItemRec.GET(GlnVendor, GtinItem) THEN
              EXIT(TRUE);
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CreatePurchOrder@1210190000(VAR ioDispatchNoteRec@1100525000 : Record 11072651) : Boolean;
    VAR
      lvPurchHeaderRec@1100525002 : Record 38;
      lvPurchLineRec@1100525001 : Record 39;
      lvDispatchLineRec@1210190001 : Record 11072652;
      lvTradeItemRec@1100525004 : Record 11012317;
      lvNextLineNo@1100525005 : Integer;
      lvUnitCode@1100525008 : Code[10];
      ItemMgt@1210190000 : Codeunit 11012033;
      HelpTxt@1100528900 : Text[250];
      VendorCode@1100528901 : Code[20];
    BEGIN
      //DP00065
      IF lvPurchHeaderRec.GET(lvPurchHeaderRec."Document Type"::Order, ioDispatchNoteRec."Related Purch. Order No.") THEN BEGIN
        lvPurchLineRec.SETRANGE("Document Type", lvPurchHeaderRec."Document Type");
        lvPurchLineRec.SETRANGE("Document No.", ioDispatchNoteRec."Related Purch. Order No.");
        IF lvPurchLineRec.FINDFIRST THEN EXIT(FALSE);
      END;

      SiBSetup.GET;
      WITH ioDispatchNoteRec DO BEGIN
        CALCFIELDS("GLN Alternative Vendor");
        IF "GLN Alternative Vendor" <> '' THEN
          VendorCode := "GLN Alternative Vendor"
        ELSE
          VendorCode := "GLN Vendor";

        IF ioDispatchNoteRec."Related Purch. Order No." = '' THEN BEGIN
          lvPurchHeaderRec.INIT;
          lvPurchHeaderRec."Document Type" := lvPurchHeaderRec."Document Type"::Order;
          lvPurchHeaderRec."No." := '';
          lvPurchHeaderRec."No. Series" := SiBSetup."Order Nos. (Dispatch Notes)";
          lvPurchHeaderRec."Order Type (SiB)" := lvPurchHeaderRec."Order Type (SiB)"::DispatchNote;
          lvPurchHeaderRec.INSERT(TRUE);
          "Related Purch. Order No." := lvPurchHeaderRec."No.";

          lvPurchHeaderRec.TESTFIELD("No.");
          lvPurchHeaderRec.VALIDATE("Buy-from Vendor No.", DetermineVendor);
          lvPurchHeaderRec.VALIDATE("Document Date", Date);
          lvPurchHeaderRec.VALIDATE("Posting Date", WORKDATE);
          IF "Service Order No." <> '' THEN BEGIN  //db, 07-10-14: C017265
            lvPurchHeaderRec.VALIDATE("Service Order No.", "Service Order No.");
          END;
          IF "Project No." <> '' THEN BEGIN
            IF DispatchLineOtherSpecFilled("No.", "Project No.") = FALSE THEN
              lvPurchHeaderRec.VALIDATE("Job No.", "Project No.");
          END;
          lvPurchHeaderRec.Deliver := lvPurchHeaderRec.Deliver::"Default (Company Address)";
          lvPurchHeaderRec."Ship-to Location" := '';
          lvPurchHeaderRec."Ship-to Name" := "Name Delivery";
          lvPurchHeaderRec."Ship-to Name 2" := '';
          lvPurchHeaderRec."Ship-to Address" := "Address Delivery";
          lvPurchHeaderRec."Ship-to Address 2" := '';
          lvPurchHeaderRec."Ship-to Post Code" := "Post Code Delivery";
          lvPurchHeaderRec."Ship-to City" := "City Delivery";
          lvPurchHeaderRec."Ship-to Country/Region Code" := "Country Delivery";
          lvPurchHeaderRec."Ship-to Contact" := '';
          lvPurchHeaderRec.MODIFY(TRUE);
        END;
      END;

      WITH lvDispatchLineRec DO BEGIN
        SETRANGE("Dispatch Note No.", ioDispatchNoteRec."No.");
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            lvPurchLineRec.INIT;
            lvPurchLineRec."Document Type" := lvPurchHeaderRec."Document Type";
            lvPurchLineRec."Document No." := lvPurchHeaderRec."No.";
            lvPurchLineRec."Line No." := lvNextLineNo + 10000;
            lvNextLineNo := lvPurchLineRec."Line No.";

            lvPurchLineRec.Type := lvPurchLineRec.Type::"G/L Account";
            IF ("Project No." + "Service Order No." + "Plant Type" = '') THEN BEGIN  //db, 04-02-14: T004213
              IF "Item No." <> '' THEN BEGIN  //db, 07-10-14: C017265
                lvPurchLineRec.Type := lvPurchLineRec.Type::Item;
                lvPurchLineRec.VALIDATE("No.", "Item No.");
                lvPurchLineRec."Location Code" := "Location Code";
                lvPurchLineRec."Bin Code" := "Bin Code";
              END ELSE BEGIN
                lvPurchLineRec.VALIDATE("No.", "G/L Account");
              END;
            END ELSE BEGIN
              IF "Project No." <> '' THEN
                lvPurchLineRec.VALIDATE("Job No.", "Project No.");
              IF Element <> '' THEN
                lvPurchLineRec.VALIDATE(Element, Element);
              IF "Service Order No." <> '' THEN
                lvPurchLineRec.VALIDATE("Service Order No.", "Service Order No.");
              //db.sn, 04-02-14: T004213
              IF "Plant Type" <> '' THEN
                lvPurchLineRec.VALIDATE("Plant Type", "Plant Type");
              IF "Plant No." <> '' THEN
                lvPurchLineRec.VALIDATE("Plant No.", "Plant No.");
              IF "Cost Component Plant" <> '' THEN
                lvPurchLineRec.VALIDATE("Cost Component Plant", "Cost Component Plant");
              //db.en, 04-02-14: T004213
            END;

            IF "Plant Type" = '' THEN BEGIN  //db, 14-10-14: C017265 (ignore item-data if plant type filled)
              HelpTxt := '';
              IF ("Item No. Vendor" <> '') OR ("GTIN Item" <> '') THEN BEGIN
                IF CheckTradeItem(lvTradeItemRec, VendorCode, "Item No. Vendor", "GTIN Item") THEN BEGIN
                  lvPurchLineRec."Vendor (Trade Item)" := lvTradeItemRec.Vendor;
                  lvPurchLineRec.VALIDATE("Trade Item", lvTradeItemRec."Item Code");
                END ELSE BEGIN
                  HelpTxt := GetHelpTxt("Item No. Vendor", "GTIN Item");
                END;
              END;
              IF "Trade Item" <> '' THEN BEGIN
                lvPurchLineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
                lvPurchLineRec.VALIDATE("Trade Item", "Trade Item");
              END ELSE BEGIN
                IF "Basic Item" <> '' THEN BEGIN
                  lvPurchLineRec.Manufacturer := Manufacturer;
                  lvPurchLineRec.VALIDATE("Basic Item", "Basic Item");
                END ELSE BEGIN
                  IF "Item No." <> '' THEN
                    lvPurchLineRec.VALIDATE("Item No.", "Item No.");
                END;
              END;
            END;

            IF ("Cost Object" <> '') AND ("Cost Object" <> lvPurchLineRec."Shortcut Dimension 2 Code") THEN
              lvPurchLineRec.VALIDATE("Shortcut Dimension 2 Code", "Cost Object");
            IF Department <> '' THEN
              lvPurchLineRec.VALIDATE("Shortcut Dimension 1 Code", Department);

            lvPurchLineRec.VALIDATE(Quantity, "Approved Quantity");
            lvPurchLineRec.VALIDATE("Qty. to Receive", "Approved Quantity");  //Match not depending on Direct Posting

            lvUnitCode := ItemMgt.CheckUnitConversion("Unit of Measure Code");
            //db: 02-02-12: M32830
            //-Quantity DispatchNoteLine assumed to be defined on PurchUnit.
            //-Unit/Price already validated by ItemCode; assign Unit only for missing items or lines based on CostObject
            //IF lvUnitCode = '' THEN
            //  lvUnitCode := "Unit of Measure Code";
            //IF (lvPurchLineRec."Unit of Measure Code" <> lvUnitCode) THEN
            //  lvPurchLineRec.VALIDATE("Unit of Measure Code", lvUnitCode);
            IF lvPurchLineRec."Unit of Measure Code" = '' THEN
              lvPurchLineRec.VALIDATE("Unit of Measure Code", lvUnitCode);  //db, 02-02-12: M32830
            IF Description <> '' THEN
              lvPurchLineRec.Description := COPYSTR(Description, 1, MAXSTRLEN(lvPurchLineRec.Description));
            IF HelpTxt <> '' THEN
              lvPurchLineRec."Description 2" := COPYSTR(HelpTxt, 1, MAXSTRLEN(lvPurchLineRec."Description 2"));
            lvPurchLineRec.INSERT(TRUE);

            "Line Matched" := TRUE;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;

      ProcessPurchOrder(lvPurchHeaderRec);

      EXIT(TRUE);
    END;

    PROCEDURE DispatchLineOtherSpecFilled@1100528900(iDispatchNote@1100528900 : Code[20];iProject@1100528902 : Code[20]) : Boolean;
    VAR
      lvDispatchLineRec@1100528901 : Record 11072652;
    BEGIN
      //DP00065
      WITH lvDispatchLineRec DO BEGIN
        RESET;
        SETRANGE("Dispatch Note No.", iDispatchNote);
        SETFILTER("Project No.", '<>%1&<>%2', '', iProject);
        IF FINDFIRST THEN EXIT(TRUE);

        RESET;
        SETRANGE("Dispatch Note No.", iDispatchNote);
        SETFILTER("Service Order No.", '<>%1', '');
        IF FINDFIRST THEN EXIT(TRUE);

        //db.sn, 04-02-14: T004213
        RESET;
        SETRANGE("Dispatch Note No.", iDispatchNote);
        SETFILTER("Plant Type", '<>%1', '');
        IF FINDFIRST THEN EXIT(TRUE);
        //db.en, 04-02-14: T004213

        RESET;
        SETRANGE("Dispatch Note No.", iDispatchNote);
        SETFILTER("G/L Account", '<>%1', '');
        IF FINDFIRST THEN EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE MatchPurchOrder@1100528901(VAR ioDispatchNoteRec@1100528900 : Record 11072651);
    VAR
      lvDispatchLineRec@1100528902 : Record 11072652;
      lvPurchHeaderRec@1100528904 : Record 38;
      lvPurchLineRec@1100528901 : Record 39;
      LineMatched@1100528903 : Boolean;
      TmpPurchLineRec@1100528905 : TEMPORARY Record 39;
    BEGIN
      //DP00065
      WITH lvDispatchLineRec DO BEGIN
        SETRANGE("Dispatch Note No.", ioDispatchNoteRec."No.");
        SETRANGE("Line Matched" , FALSE);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            LineMatched := FALSE;
            lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::Order);
            lvPurchLineRec.SETRANGE("Document No.", ioDispatchNoteRec."Related Purch. Order No.");
            IF lvPurchLineRec.FINDSET THEN BEGIN
              REPEAT
                //db, 04-02-14: T004213 (check Plant Type)
                IF ((lvPurchLineRec."Job No." = "Project No.") AND
                    (lvPurchLineRec."Service Order No." = "Service Order No.") AND
                    (lvPurchLineRec."Plant Type" = "Plant Type")) OR
                   ((lvPurchLineRec.Type = lvPurchLineRec.Type::"G/L Account") AND (lvPurchLineRec."No." = "G/L Account") AND
                    (lvPurchLineRec."Job No." + lvPurchLineRec."Service Order No." + lvPurchLineRec."Plant Type"= '')) OR
                   ((lvPurchLineRec.Type = lvPurchLineRec.Type::Item) AND (lvPurchLineRec."No." = "Item No.")) THEN
                BEGIN
                  IF (lvPurchLineRec."Trade Item"  <> '') THEN BEGIN
                    IF (lvPurchLineRec."Trade Item"  = "Trade Item") AND
                       (lvPurchLineRec."Vendor (Trade Item)"  = "Vendor (Trade Item)") THEN
                      LineMatched := TRUE;
                  END ELSE BEGIN
                    IF (lvPurchLineRec."Basic Item"  <> '') THEN BEGIN
                      IF (lvPurchLineRec."Basic Item"  = "Basic Item") AND
                         (lvPurchLineRec.Manufacturer  = Manufacturer) THEN
                        LineMatched := TRUE;
                    END ELSE BEGIN
                      IF (lvPurchLineRec."Item No."  <> '') THEN BEGIN
                        IF (lvPurchLineRec."Item No."  = "Item No.") THEN
                          LineMatched := TRUE;
                      END ELSE BEGIN
                        //diff length (50/100); description 2 may be filled with HelpTxt
                        IF (COPYSTR(lvPurchLineRec.Description, 1, MAXSTRLEN(lvPurchLineRec.Description)) =
                            COPYSTR(Description, 1, MAXSTRLEN(lvPurchLineRec.Description))) THEN
                          LineMatched := TRUE;
                      END;
                    END;
                  END;
                END;
                IF LineMatched THEN BEGIN
                  lvPurchLineRec.VALIDATE("Qty. to Receive", "Approved Quantity");
                  lvPurchLineRec."Modified by" := USERID; //DP00469
                  lvPurchLineRec."Last Date Modified" := TODAY;//DP00469
                  lvPurchLineRec.MODIFY;
                  TmpPurchLineRec := lvPurchLineRec;
                  TmpPurchLineRec."Input by" := USERID; //DP00469
                  TmpPurchLineRec."Input Date" := TODAY; //DP00469
                  IF TmpPurchLineRec.INSERT THEN;
                END;
              UNTIL (lvPurchLineRec.NEXT = 0) OR LineMatched;
            END;
            IF LineMatched THEN BEGIN
              "Line Matched" := LineMatched;
              MODIFY;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      IF TmpPurchLineRec.FINDFIRST THEN BEGIN
        lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::Order);
        lvPurchLineRec.SETRANGE("Document No.", ioDispatchNoteRec."Related Purch. Order No.");
        IF lvPurchLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF NOT TmpPurchLineRec.GET(lvPurchLineRec."Document Type", lvPurchLineRec."Document No.", lvPurchLineRec."Line No.") THEN
            BEGIN
              lvPurchLineRec.VALIDATE("Qty. to Receive", 0);
              lvPurchLineRec."Modified by" := USERID; //DP00469
              lvPurchLineRec."Last Date Modified" := TODAY;//DP00469
              lvPurchLineRec.MODIFY;
            END;
          UNTIL lvPurchLineRec.NEXT = 0;
        END;
        TmpPurchLineRec.DELETEALL;
      END;

      COMMIT;
      lvPurchHeaderRec.SETRANGE("Document Type", lvPurchHeaderRec."Document Type"::Order);
      lvPurchHeaderRec.SETRANGE("No.", ioDispatchNoteRec."Related Purch. Order No.");
      PAGE.RUNMODAL(PAGE::"Purchase Order", lvPurchHeaderRec);
    END;

    PROCEDURE ProcessPurchOrder@1100528903(PurchHeaderRec@1100528900 : Record 38);
    VAR
      PurchPostYN@1100528901 : Codeunit 91;
      lvText000@1100528902 : TextConst 'ENU=Receipt posted;NOR=Leveranse er bokf›rt;SVE=Inleverans har bokf”rts';
    BEGIN
      //DP00065: copy from Purchase Order Receipt Card
      PurchPostYN.SetSelectionOnlyReceipt;
      PurchPostYN.RUN(PurchHeaderRec);
      COMMIT;
      PurchHeaderRec.CheckInwardLines(PurchHeaderRec."No.",TRUE);
      MESSAGE(lvText000);
    END;

    PROCEDURE GetHelpTxt@1100528905(ItemCode@1100528900 : Code[20];GtinCode@1100528902 : Code[20]) HelpTxt : Text[50];
    VAR
      lvText000@1100528903 : TextConst 'ENU=Item: %1;NOR=Artikkel: %1;SVE=Artikel: %1';
      lvText001@1100528901 : TextConst 'ENU=GTIN: %1;NOR=Gtin: %1;SVE=GTIN: %1';
    BEGIN
      //DP00065
      IF (ItemCode <> '') THEN
        HelpTxt := STRSUBSTNO(lvText000, ItemCode);
      IF (GtinCode <> '') THEN BEGIN
        IF HelpTxt <> '' THEN
          HelpTxt := HelpTxt + ';';
        HelpTxt := HelpTxt + STRSUBSTNO(lvText001, GtinCode);
      END;
      EXIT(HelpTxt);
    END;

    PROCEDURE GetReceiptLines@1100525015(VAR PurchHeader@1100525000 : Record 38;iDocType@1100528904 : Integer;iDocNo@1100528903 : Code[20];iApprove@1100528900 : Boolean);
    VAR
      PurchRcptLine@1100525001 : Record 121;
      PurchReceiptCU@1100525002 : Codeunit 74;
      PurchApprovalCU@1100528901 : Codeunit 11012023;
      ProcessingRestarted@1100525003 : Boolean;
      PurchaseLine@1100525004 : Record 39;
    BEGIN
      //DP00065: copy from function of codeunit 11012792 (Process ICF Invoice)
      IF PurchHeader."Related Purch. Order No." = '' THEN EXIT;  //db, 12-01-12
      IF AutomaticProcessing THEN BEGIN
        IF PurchHeader."Processing Result SiB Invoice" = PurchHeader."Processing Result SiB Invoice"::Failure THEN
          EXIT;

        ProcessingRestarted := FALSE;
        IF (PurchHeader."Processing Status SiB Invoice" = PurchHeader."Processing Status SiB Invoice"::"No (Complete) Match") THEN
          ProcessingRestarted := TRUE;
      END;
      PurchRcptLine.RESET;
      PurchRcptLine.SETCURRENTKEY("Order No.", "Order Line No.");
      PurchRcptLine.SETRANGE("Order No.", PurchHeader."Related Purch. Order No.");
      IF NOT PurchRcptLine.FINDSET THEN BEGIN
        IF AutomaticProcessing THEN BEGIN
          PurchHeader."Processing Status SiB Invoice" := PurchHeader."Processing Status SiB Invoice"::"No ReceiptLines found";
          PurchHeader."Processing Result SiB Invoice" := PurchHeader."Processing Result SiB Invoice"::Waiting;
        END;
        EXIT;
      END;
      IF AutomaticProcessing THEN
        PurchHeader."Processing Status SiB Invoice" := PurchHeader."Processing Status SiB Invoice"::"No (Complete) Match";
      REPEAT
        PurchRcptLine.MARK := TRUE;
      UNTIL PurchRcptLine.NEXT = 0;
      PurchRcptLine.MARKEDONLY(TRUE);

      PurchRcptLine.SETCURRENTKEY("Buy-from Vendor No.","Document No.");
      PurchRcptLine.SETRANGE("Buy-from Vendor No.", PurchHeader."Buy-from Vendor No.");

      IF ProcessingRestarted THEN BEGIN
        PurchaseLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchaseLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchaseLine.DELETEALL;
      END;

      IF iApprove THEN BEGIN
        PurchApprovalCU.SetPurchHeader(iDocType, iDocNo);
        PurchApprovalCU.CreateInvLines(PurchRcptLine);
      END ELSE BEGIN
        PurchReceiptCU.SetPurchHeader(PurchHeader);
        PurchReceiptCU.CreateInvLines(PurchRcptLine);
      END;
    END;

    PROCEDURE MatchPurchInvoice@1100528906(InvoiceRec@1100528901 : Record 11072653;VAR PurchHeaderRec@1100528900 : Record 38);
    VAR
      lvPurchLineRec@1100528902 : Record 39;
      lvInvoiceLineRec@1100528904 : Record 11072654;
      PurchLineRec1@1100528910 : Record 39;
      PurchLineRec2@1100528909 : Record 39;
      DescLine@1100528908 : Text[100];
      LastLine@1100528903 : Integer;
      NextLine@1100528906 : Integer;
      LineMatched@1100528905 : Boolean;
      FirstTime@1100528907 : Boolean;
      LinesAlreadyCreated@1100529900 : Boolean;
    BEGIN
      IF (PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Invoice) AND
         (PurchHeaderRec."Related Purch. Order No." = '') AND NOT AutomaticProcessing
      THEN
        EXIT;
      IF AutomaticProcessing THEN BEGIN
        IF PurchHeaderRec."Processing Status SiB Invoice" <> PurchHeaderRec."Processing Status SiB Invoice"::"No OrderNumber Filled In" THEN BEGIN
          IF PurchHeaderRec."Related Purch. Order No." = '' THEN
            EXIT;
          IF PurchHeaderRec."Processing Result SiB Invoice" = PurchHeaderRec."Processing Result SiB Invoice"::Failure THEN
            EXIT;
        END;

        LinesAlreadyCreated := FALSE;
        IF (PurchHeaderRec."Processing Status SiB Invoice" = PurchHeaderRec."Processing Status SiB Invoice"::"No (Complete) Match") AND
           (PurchHeaderRec."Processing Result SiB Invoice" = PurchHeaderRec."Processing Result SiB Invoice"::Waiting) THEN
          LinesAlreadyCreated := TRUE;
      END;

      lvPurchLineRec.SETRANGE("Document Type", PurchHeaderRec."Document Type");
      lvPurchLineRec.SETRANGE("Document No.", PurchHeaderRec."No.");
      IF lvPurchLineRec.FINDLAST THEN
        LastLine := lvPurchLineRec."Line No.";

      FirstTime := TRUE;
      IF AutomaticProcessing AND (PurchHeaderRec."Processing Status SiB Invoice" <> PurchHeaderRec."Processing Status SiB Invoice"::"No OrderNumber Filled In") THEN BEGIN
        PurchHeaderRec."Processing Status SiB Invoice" := PurchHeaderRec."Processing Status SiB Invoice"::"Complete Match";
        PurchHeaderRec."Processing Result SiB Invoice" := PurchHeaderRec."Processing Result SiB Invoice"::Success;
      END;
      WITH lvInvoiceLineRec DO BEGIN
        SETRANGE("Invoice No.", InvoiceRec."No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            LineMatched := FALSE;
            lvPurchLineRec.SETFILTER("Line No.", '..%1', LastLine);
            IF lvPurchLineRec.FINDSET THEN BEGIN
              REPEAT
                //db, 04-02-14: T004213 (check Plant Type)
                IF ((lvPurchLineRec."Job No." = "Project No.") AND
                    (lvPurchLineRec."Service Order No." = "Service Order No.") AND
                    (lvPurchLineRec."Plant Type" = "Plant Type")) OR
                   ((lvPurchLineRec.Type = lvPurchLineRec.Type::"G/L Account") AND (lvPurchLineRec."No." = "G/L Account") AND
                    (lvPurchLineRec."Job No." + lvPurchLineRec."Service Order No." + lvPurchLineRec."Plant Type" = '')) OR
                   ((lvPurchLineRec.Type = lvPurchLineRec.Type::Item) AND (lvPurchLineRec."No." = "Item No.")) THEN
                BEGIN
                  LineMatched := "Line Matched";  //db, 04-06-15
                  IF NOT LineMatched THEN BEGIN   //manual check by user on page: "Order (Line) No. Buyer" exist as Purchase Line
                    IF (lvPurchLineRec."Trade Item"  <> '') THEN BEGIN
                      IF (lvPurchLineRec."Trade Item"  = "Trade Item") AND
                         (lvPurchLineRec."Vendor (Trade Item)"  = "Vendor (Trade Item)") THEN
                        LineMatched := TRUE;
                    END ELSE BEGIN
                      IF (lvPurchLineRec."Basic Item"  <> '') THEN BEGIN
                        IF (lvPurchLineRec."Basic Item"  = "Basic Item") AND
                           (lvPurchLineRec.Manufacturer  = Manufacturer) THEN
                          LineMatched := TRUE;
                      END ELSE BEGIN
                        IF (lvPurchLineRec."Item No."  <> '') THEN BEGIN
                          IF (lvPurchLineRec."Item No."  = "Item No.") THEN
                            LineMatched := TRUE;
                        END ELSE BEGIN
                          //diff length (50/100); description 2 may be filled with HelpTxt
                          IF (COPYSTR(lvPurchLineRec.Description, 1, MAXSTRLEN(lvPurchLineRec.Description)) =
                              COPYSTR(Description, 1, MAXSTRLEN(lvPurchLineRec.Description))) THEN
                            LineMatched := TRUE;
                        END;
                      END;
                    END;
                  END;
                  IF LineMatched THEN
                    LineMatched := CheckInvoiceMargin("Net Line Amount", lvPurchLineRec."Line Amount");  //db, 07-02-12: M32549
                  IF (lvPurchLineRec.Quantity <> "Invoiced Quantity") THEN
                      LineMatched := FALSE;
                  IF LineMatched THEN
                    PurchLineRec1 := lvPurchLineRec;
                END;
              UNTIL (lvPurchLineRec.NEXT = 0) OR LineMatched;
            END;
            IF LineMatched THEN BEGIN
              UpdatePurchInvoiceLine(InvoiceRec, lvInvoiceLineRec, PurchLineRec1, LineMatched);
              CopyCommentLines(PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::"Credit Memo", InvoiceRec."No.", PurchHeaderRec."No.", lvInvoiceLineRec."Line No.", PurchLineRec2."Line No.");
            END ELSE BEGIN
              IF FirstTime AND NOT LinesAlreadyCreated THEN BEGIN
                DescLine := InvoiceRec.TABLECAPTION + ': ' + InvoiceRec."No.";
                NextLine := LastLine + 10000;
                CreatePurchInvoiceLine(PurchHeaderRec, PurchLineRec2, NextLine, DescLine);
                CopyCommentLines(PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::"Credit Memo", InvoiceRec."No.", PurchHeaderRec."No.", lvInvoiceLineRec."Line No.", PurchLineRec2."Line No.");
                FirstTime := FALSE;
                DescLine := '';
              END;
              IF NOT LinesAlreadyCreated THEN BEGIN
                NextLine := NextLine + 10000;
                CreatePurchInvoiceLine(PurchHeaderRec, PurchLineRec2, NextLine, DescLine);
                CopyCommentLines(PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::"Credit Memo", InvoiceRec."No.", PurchHeaderRec."No.", lvInvoiceLineRec."Line No.", PurchLineRec2."Line No.");
                UpdatePurchInvoiceLine(InvoiceRec, lvInvoiceLineRec, PurchLineRec2, LineMatched);
              END;
              IF (PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Invoice) AND AutomaticProcessing THEN BEGIN
                PurchHeaderRec."Processing Status SiB Invoice" := PurchHeaderRec."Processing Status SiB Invoice"::"No (Complete) Match";
                PurchHeaderRec."Processing Result SiB Invoice" := PurchHeaderRec."Processing Result SiB Invoice"::Waiting;
              END;
            END;
          UNTIL lvInvoiceLineRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE MatchPurchApproval@1100528909(InvoiceRec@1100528901 : Record 11072653;iDocType@1100528911 : Integer;iDocNo@1100528912 : Code[20];JnlTemplName@1210190000 : Code[10]);
    VAR
      lvApprLineRec@1100528902 : Record 11012032;
      lvInvoiceLineRec@1100528904 : Record 11072654;
      ApprLineRec1@1100528910 : Record 11012032;
      ApprLineRec2@1100528909 : Record 11012032;
      DescLine@1100528908 : Text[50];
      LastLine@1100528903 : Integer;
      NextLine@1100528906 : Integer;
      LineMatched@1100528905 : Boolean;
      FirstTime@1100528907 : Boolean;
    BEGIN
      //DP00065
      //SiBSetup.GET;  //34418.o
      //SiBSetup.TESTFIELD("Approval Template");  //34418.o

      //lvApprLineRec.SETRANGE("Journal Template Name", SiBSetup."Approval Template");  //34418.o
      lvApprLineRec.SETRANGE("Journal Template Name", JnlTemplName);  //34418.n
      lvApprLineRec.SETRANGE("Document Type", iDocType);
      lvApprLineRec.SETRANGE("Document No.", iDocNo);
      IF lvApprLineRec.FINDLAST THEN
        LastLine := lvApprLineRec."Line No.";

      FirstTime := TRUE;

      WITH lvInvoiceLineRec DO BEGIN
        SETRANGE("Invoice No.", InvoiceRec."No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            LineMatched := FALSE;
            lvApprLineRec.SETFILTER("Line No.", '..%1', LastLine);
            IF lvApprLineRec.FINDSET THEN BEGIN
              REPEAT
                //db, 04-02-14: T004213 (check Plant Type)
                IF ((lvApprLineRec."Project No." = "Project No.") AND
                    (lvApprLineRec."Service Order No." = "Service Order No.") AND
                    (lvApprLineRec."Plant Type" = "Plant Type")) OR
                   ((lvApprLineRec.Type = lvApprLineRec.Type::"G/L Account") AND (lvApprLineRec."Account No." = "G/L Account")) THEN
                BEGIN
                  IF (lvApprLineRec."Trade Item"  <> '') THEN BEGIN
                    IF (lvApprLineRec."Trade Item"  = "Trade Item") AND
                       (lvApprLineRec."Vendor (Trade Item)"  = "Vendor (Trade Item)") THEN
                      LineMatched := TRUE;
                  END ELSE BEGIN
                    IF (lvApprLineRec."Basic Item"  <> '') THEN BEGIN
                      IF (lvApprLineRec."Basic Item"  = "Basic Item") AND
                         (lvApprLineRec.Manufacturer  = Manufacturer) THEN
                        LineMatched := TRUE;
                    END ELSE BEGIN
                      IF (lvApprLineRec."Item No."  <> '') THEN BEGIN
                        IF (lvApprLineRec."Item No."  = "Item No.") THEN
                          LineMatched := TRUE;
                      END ELSE BEGIN
                        //diff length (50/100); description 2 may be filled with HelpTxt
                        IF (COPYSTR(lvApprLineRec.Description, 1, MAXSTRLEN(lvApprLineRec.Description)) =
                            COPYSTR(Description, 1, MAXSTRLEN(lvApprLineRec.Description))) THEN
                          LineMatched := TRUE;
                      END;
                    END;
                  END;
                  IF LineMatched THEN
                    LineMatched := CheckInvoiceMargin("Net Line Amount", lvApprLineRec.Amount);  //db, 07-02-12: M32549
                    IF (lvApprLineRec.Quantity <> "Invoiced Quantity") THEN
                      LineMatched := FALSE;
                  IF LineMatched THEN
                    ApprLineRec1 := lvApprLineRec;
                END;
              UNTIL (lvApprLineRec.NEXT = 0) OR LineMatched;
            END;
            IF LineMatched THEN BEGIN
              UpdateApprovalLine(InvoiceRec, lvInvoiceLineRec, ApprLineRec1, LineMatched);
            END ELSE BEGIN
              IF FirstTime THEN BEGIN
                DescLine := InvoiceRec.TABLECAPTION + ': ' + InvoiceRec."No.";
                NextLine := LastLine + 10000;
                CreateApprovalLine(iDocType, iDocNo, ApprLineRec2, NextLine, DescLine, JnlTemplName);  //34418.c
                FirstTime := FALSE;
                DescLine := '';
              END;
              NextLine := NextLine + 10000;
              CreateApprovalLine(iDocType, iDocNo, ApprLineRec2, NextLine, DescLine, JnlTemplName);  //34418.c
              UpdateApprovalLine(InvoiceRec, lvInvoiceLineRec, ApprLineRec2, LineMatched);
            END;
          UNTIL lvInvoiceLineRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateApprovalLine@1100528904(iDocType@1100528904 : Integer;iDocNo@1100528905 : Code[20];VAR ApprLineRec@1100528902 : Record 11012032;NextLine@1100528901 : Integer;DescLine@1100528903 : Text[100];JnlTemplName@1210190000 : Code[10]);
    BEGIN
      //DP00065
      //SiBSetup.GET;  //34418.o
      //SiBSetup.TESTFIELD("Approval Template");  //34418.o

      ApprLineRec.INIT;
      //ApprLineRec."Journal Template Name" := SiBSetup."Approval Template";  //34418.o
      ApprLineRec."Journal Template Name" := JnlTemplName;  //34418.n
      ApprLineRec."Document Type" := iDocType;
      ApprLineRec."Document No." := iDocNo;
      ApprLineRec."Line No." := NextLine;
      ApprLineRec.Description := DescLine;
      ApprLineRec.INSERT(TRUE);
    END;

    PROCEDURE UpdateApprovalLine@1100528907(InvoiceRec@1100528901 : Record 11072653;InvoiceLineRec@1100528911 : Record 11072654;ApprLineRec@1100528908 : Record 11012032;LineMatched@1100528912 : Boolean);
    VAR
      lvTradeItemRec@1100528900 : Record 11012317;
      lvUnitCode@1100528905 : Code[10];
      ItemMgt@1100528904 : Codeunit 11012033;
      HelpTxt@1100528903 : Text[50];
      VendorCode@1100528902 : Code[20];
    BEGIN
      //DP00065
      InvoiceRec.CALCFIELDS("GLN Alternative Vendor");
      IF InvoiceRec."GLN Alternative Vendor" <> '' THEN
        VendorCode := InvoiceRec."GLN Alternative Vendor"
      ELSE
        VendorCode := InvoiceRec."GLN Vendor";

      WITH InvoiceLineRec DO BEGIN
        ApprLineRec.SetFromExternalInvoice(TRUE);
        IF IsInvoiceTextLine() THEN BEGIN
          ApprLineRec.Description := COPYSTR(Description, 1, MAXSTRLEN(ApprLineRec.Description));
        END ELSE BEGIN
          IF NOT LineMatched THEN BEGIN
            IF ("Project No." + "Service Order No." + "Plant Type" = '') THEN BEGIN  //db, 04-02-14: T004213
              ApprLineRec.VALIDATE("Account No.", "G/L Account");
            END ELSE BEGIN
              IF "Project No." <> '' THEN
                ApprLineRec.VALIDATE("Project No.", "Project No.");
              IF Element <> '' THEN
                ApprLineRec.VALIDATE(Element, Element);
              IF "Service Order No." <> '' THEN
                ApprLineRec.VALIDATE("Service Order No.", "Service Order No.");
              //db.sn, 04-02-14: T004213
              IF "Plant Type" <> '' THEN
                ApprLineRec.VALIDATE("Plant Type", "Plant Type");
              IF "Plant No." <> '' THEN
                ApprLineRec.VALIDATE("Plant No.", "Plant No.");
              IF "Cost Component Plant" <> '' THEN
                ApprLineRec.VALIDATE("Cost Component Plant", "Cost Component Plant");
              //db.en, 04-02-14: T004213
            END;
          END;
          //*C-018789.sn
          HelpTxt := '';
          IF ("Item No. Vendor" <> '') OR ("GTIN Item" <> '') THEN BEGIN
            IF CheckTradeItem(lvTradeItemRec, VendorCode, "Item No. Vendor", "GTIN Item") THEN BEGIN
              ApprLineRec.VALIDATE("Vendor (Trade Item)", lvTradeItemRec.Vendor);
              IF ("Item No. Vendor" <> '') THEN
                ApprLineRec.VALIDATE("Trade Item", "Item No. Vendor")
              ELSE
                ApprLineRec.VALIDATE("Trade Item", "GTIN Item");
            END ELSE BEGIN
              HelpTxt := GetHelpTxt("Item No. Vendor", "GTIN Item");
            END;
          END;
          //*C-018789.en
          IF "Trade Item" <> '' THEN BEGIN
            ApprLineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
            ApprLineRec.VALIDATE("Trade Item", "Trade Item");
          END ELSE BEGIN
            IF "Basic Item" <> '' THEN BEGIN
              ApprLineRec.Manufacturer := Manufacturer;
              ApprLineRec.VALIDATE("Basic Item", "Basic Item");
            END ELSE BEGIN
              IF "Item No." <> '' THEN
                ApprLineRec.VALIDATE("Item No.", "Item No.");
            END;
          END;

          IF ("Cost Object" <> '') AND ("Cost Object" <> ApprLineRec."Shortcut Dimension 2 Code") THEN
            ApprLineRec.VALIDATE("Shortcut Dimension 2 Code", "Cost Object");
          IF Department <> '' THEN
            ApprLineRec.VALIDATE("Shortcut Dimension 1 Code", Department);

          ApprLineRec.VALIDATE(Quantity, "Invoiced Quantity");
          lvUnitCode := ItemMgt.CheckUnitConversion("Unit of Measure Code");
          //IF lvUnitCode = '' THEN
          //  lvUnitCode := "Unit of Measure Code";
          //IF (ApprLineRec."Unit of Measure Code" <> lvUnitCode) THEN
          //  ApprLineRec.VALIDATE("Unit of Measure Code", lvUnitCode);
          IF ApprLineRec."Unit of Measure Code" = '' THEN BEGIN
            IF (ApprLineRec."Qty. per Unit of Measure" = 0) THEN //GS1-INSBOU003.n
              ApprLineRec."Qty. per Unit of Measure" := 1; //GS1-INSBOU003.n
            ApprLineRec.VALIDATE("Unit of Measure Code", lvUnitCode);  //db, 02-02-12: M32830
          END;
          //lvDiscAmt := "Discount/Surcharge Amount";
          //lvDiscPerc := "Discount/Surcharge %";
          //IF "Discount/Surcharge Type" = "Discount/Surcharge Type"::Surcharge THEN BEGIN
          //  IF lvDiscAmt <> 0 THEN
          //    lvDiscAmt := -lvDiscAmt;
          //  IF lvDiscPerc <> 0 THEN
          //    lvDiscPerc := -lvDiscPerc;
          //END;
          IF "Price Base Quantity" <> 0 THEN
            ApprLineRec.VALIDATE(Price, Price / "Price Base Quantity")
          ELSE
            ApprLineRec.VALIDATE(Price, Price);
          ApprLineRec.VALIDATE(Amount, "Net Line Amount");

          IF NOT VatPostingGroupsOnLineLevel(InvoiceLineRec) THEN BEGIN
            ApprLineRec.VALIDATE("VAT Bus. Posting Group", InvoiceRec."VAT Bus. Posting Group");
            ApprLineRec.VALIDATE("VAT Prod. Posting Group", InvoiceRec."VAT Prod. Posting Group");
          END ELSE BEGIN
            ApprLineRec.VALIDATE("VAT Bus. Posting Group", "VAT Bus. Posting Group");
            ApprLineRec.VALIDATE("VAT Prod. Posting Group", "VAT Prod. Posting Group");
          END;
          IF Description <> '' THEN
            ApprLineRec.Description := COPYSTR(Description, 1, MAXSTRLEN(ApprLineRec.Description));
          IF HelpTxt <> '' THEN
            ApprLineRec."Description 2" := COPYSTR(HelpTxt, 1, MAXSTRLEN(ApprLineRec."Description 2"));
        END;
        ApprLineRec.MODIFY(TRUE);
        ApprLineRec.SetFromExternalInvoice(FALSE);
      END;
    END;

    PROCEDURE CheckInvoiceMargin@1100485000(OrigAmnt@1100528900 : Decimal;DestAmnt@1100528901 : Decimal) : Boolean;
    VAR
      PurchSetup@1100528902 : Record 312;
      lvPriceDiff@1100485000 : Decimal;
    BEGIN
      //DP00065
      //db, 07-02-12: M32549 (copy from ICF-function table 39)
      lvPriceDiff := ABS(DestAmnt - OrigAmnt);
      IF lvPriceDiff <> 0 THEN BEGIN
        PurchSetup.GET;
        IF (PurchSetup."Margin Amount (Detail)" = 0) AND (PurchSetup."Margin % (Detail)" = 0) THEN
          EXIT(FALSE);
        IF PurchSetup."Margin Amount (Detail)" <> 0 THEN
          IF lvPriceDiff > PurchSetup."Margin Amount (Detail)" THEN
            EXIT(FALSE);
        IF PurchSetup."Margin % (Detail)" <> 0 THEN
          IF (100 * lvPriceDiff/DestAmnt) > PurchSetup."Margin % (Detail)" THEN
            EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RestartUnfinishedApproval@1100525017(VAR ioInvoiceRec@1100525000 : Record 11072653) : Boolean;
    VAR
      PurchSetup@1100525003 : Record 312;
      VendorLedgerEntry@1100525002 : Record 25;
      PurchInvHeader@1100525004 : Record 122;
      PurchCreditMemoHeader@1100525009 : Record 124;
      PurchHeader@1100525007 : Record 38;
      InvApprLine@1100525008 : Record 11012032;
      DocType@1100525005 : Integer;
      DocNo@1100525006 : Code[20];
      DocDate@1100525001 : Date;
    BEGIN
      //db, 18-09-14: C017265
      PurchSetup.GET;

      WITH ioInvoiceRec DO BEGIN
        //db.sn, 06-03-15: C021797
        DocDate := "Invoice Date";
        IF DocDate = 0D THEN DocDate := "Posting Date";
        IF DocDate = 0D THEN DocDate := TODAY;
        //db.en, 06-03-15: C021797
        VendorLedgerEntry.SETCURRENTKEY("External Document No.");
        VendorLedgerEntry.SETRANGE("External Document No.","No.");
        VendorLedgerEntry.SETRANGE("Vendor No.","Vendor No.");
        VendorLedgerEntry.SETRANGE("Document Date",CALCDATE('<-CY>',DocDate),CALCDATE('<CY>', DocDate));  //db, 06-03-15: C021797
        IF VendorLedgerEntry.FINDFIRST THEN BEGIN
          DocNo := VendorLedgerEntry."Document No.";
          IF VendorLedgerEntry."Document Type" = VendorLedgerEntry."Document Type"::"Credit Memo" THEN
            DocType := 1;  //(0=invoice, 1=credit)
          IF PurchSetup."Approve Purchase Invoices" THEN BEGIN
            InvApprLine.SETRANGE("Document Type", DocType);
            InvApprLine.SETRANGE("Document No.", DocNo);
            IF NOT InvApprLine.FINDFIRST THEN BEGIN
              IF DocType = 1 THEN BEGIN
                IF NOT PurchCreditMemoHeader.GET(DocNo) THEN EXIT(FALSE);
                PurchHeader.TRANSFERFIELDS(PurchCreditMemoHeader);
                PurchHeader."Document Type" := PurchHeader."Document Type"::"Credit Memo"
              END ELSE BEGIN
                IF NOT PurchInvHeader.GET(DocNo) THEN EXIT(FALSE);
                PurchHeader.TRANSFERFIELDS(PurchInvHeader);
                PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
              END;
              "Purch. Invoice Type" := DocType+1;
              "Purchase Invoice No." := DocNo;
              GetReceiptLines(PurchHeader, DocType, DocNo, TRUE);
              MatchPurchApproval(ioInvoiceRec, DocType, DocNo, PurchHeader."Inv.Appr.Journal Template");
              EXIT(TRUE);
            END;
          END;
        END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LinkInvoiceDocument@1100528300(InvoiceSiB@1100528300 : Record 11072653;PurchaseHeader@1100528301 : Record 38);
    VAR
      DocumentProperties@1100528303 : Record 11012746;
      DocumentLinkManagement@1100528304 : Codeunit 11012401;
      RecRef@1100528302 : RecordRef;
    BEGIN
      RecRef.GETTABLE(InvoiceSiB);
      DocumentLinkManagement.GetDocumentsComp(DocumentProperties, RecRef, COMPANYNAME);
      DocumentProperties.MARKEDONLY(TRUE);
      IF (NOT DocumentProperties.FINDSET) THEN
        EXIT;

      RecRef.GETTABLE(PurchaseHeader);
      REPEAT
        DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, RecRef.RECORDID);
      UNTIL (DocumentProperties.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckPurchaseCheckAllLinesHaveQuantityAssigned@7(VAR PurchaseHeader@1100529900 : Record 38);
    VAR
      LinesInstructionMgt@1001 : Codeunit 1320;
    BEGIN
        LinesInstructionMgt.PurchaseCheckAllLinesHaveQuantityAssigned(PurchaseHeader);
    END;

    LOCAL PROCEDURE GetReceiptAndMatchInvoice@1100525007(VAR PurchaseHeader@1100525000 : Record 38;InvoiceSiB@1100525007 : Record 11072653);
    VAR
      PurchPost@1100529900 : Codeunit 90;
    BEGIN
      AutomaticProcessing := TRUE;
      GetReceiptLines(PurchaseHeader, 0, '', FALSE);
      MatchPurchInvoice(InvoiceSiB, PurchaseHeader);
      IF (PurchaseHeader."Processing Status SiB Invoice" = PurchaseHeader."Processing Status SiB Invoice"::"Complete Match") AND
         (PurchaseHeader."Processing Result SiB Invoice" = PurchaseHeader."Processing Result SiB Invoice"::Success) THEN
        PurchPost.RUN(PurchaseHeader);
    END;

    PROCEDURE RunGetReceiptAndMatchInvoice@1100529900(VAR PurchaseHeader@1100525000 : Record 38);
    VAR
      InvoiceSiB@1100529900 : Record 11072653;
    BEGIN
      InvoiceSiB.GET(PurchaseHeader."Vendor Invoice No.");
      GetReceiptAndMatchInvoice(PurchaseHeader,InvoiceSiB);
    END;

    LOCAL PROCEDURE CopyCommentLines@6(IsCreditMemo@1001 : Boolean;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20];FromLineNo@1100525000 : Integer;UptoLineNo@1100525001 : Integer);
    VAR
      PurchCommentLine@1004 : Record 43;
      PurchCommentLine2@1005 : Record 43;
    BEGIN
      PurchCommentLine.SETRANGE("Document Type", PurchCommentLine."Document Type"::"INSBOU Invoice");
      PurchCommentLine.SETRANGE("No.", FromNumber);
      PurchCommentLine.SETRANGE("Document Line No.", FromLineNo);
      IF PurchCommentLine.FINDSET THEN
        REPEAT
          PurchCommentLine2 := PurchCommentLine;
          IF IsCreditMemo THEN
            PurchCommentLine2."Document Type" := PurchCommentLine2."Document Type"::"Credit Memo"
          ELSE
            PurchCommentLine2."Document Type" := PurchCommentLine2."Document Type"::Invoice;
          PurchCommentLine2."No." := ToNumber;
          PurchCommentLine2."Document Line No." := UptoLineNo;
          PurchCommentLine2.INSERT;
        UNTIL PurchCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InvoiceMarginCheck@1210190007(PurchHeader@1100525000 : Record 38;VAR AmountHeader@1100529400 : Decimal;VAR AmountLines@1100529401 : Decimal) : Boolean;
    VAR
      lvGenPostSetupRec@1210190012 : Record 252;
      lvVendRec@1210190000 : Record 23;
      lvPurchLineRec@1210190004 : Record 39;
      lvMarginAmount@1210190001 : Decimal;
      lvMarginPerc@1210190002 : Decimal;
      lvDiffAmount@1210190003 : Decimal;
      lvText11012000@1210190009 : TextConst 'ENU=Correction purchace variance;NOR=Rettelse av innkj›psavvik;SVE=R„ttning av ink”psavvikelse';
      Currency@1100525001 : Record 4;
      PurchSetup@1100525002 : Record 312;
    BEGIN
      //**4PS.n
      WITH PurchHeader DO BEGIN
        GetCurrency("Currency Code", Currency);
        CALCFIELDS("Amount Including VAT");

        AmountHeader := "Amount incl. VAT";
        AmountLines := ROUND(
          "Amount Including VAT",
          Currency."Invoice Rounding Precision",
          Currency.InvoiceRoundingDirection);

        IF AmountLines = AmountHeader THEN
          EXIT(TRUE);

        lvVendRec.GET("Buy-from Vendor No.");
        lvMarginAmount := lvVendRec."Invoice/Receipt Margin Amount";
        lvMarginPerc := lvVendRec."Invoice/Receipt Margin Perc.";
        IF (lvMarginAmount = 0) AND (lvMarginPerc = 0) THEN BEGIN
          PurchSetup.GET;
          lvMarginAmount := PurchSetup."Margin Amount (Header)";
          lvMarginPerc := PurchSetup."Margin % (Header)";
        END;
        IF (lvMarginAmount = 0) AND (lvMarginPerc = 0) THEN
          EXIT(FALSE);

        AmountLines := "Amount Including VAT";
        lvDiffAmount := AmountHeader - AmountLines;
        IF (lvMarginAmount <> 0) AND (ABS(lvDiffAmount) > lvMarginAmount) THEN
          EXIT(FALSE);
        IF (lvMarginPerc <> 0) THEN BEGIN
          IF (AmountLines = 0) THEN
            EXIT(FALSE)
          ELSE BEGIN
            IF (ABS(lvDiffAmount / AmountLines * 100)  > lvMarginPerc) THEN
              EXIT(FALSE);
          END;
        END;

        lvPurchLineRec.RESET;
        lvPurchLineRec.SETRANGE("Document Type", "Document Type");
        lvPurchLineRec.SETRANGE("Document No.", "No.");
        lvPurchLineRec.SETFILTER(Type, '<>%1', lvPurchLineRec.Type::" ");
        IF NOT lvPurchLineRec.FINDSET THEN
          EXIT(FALSE);

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetCurrency@17(CurrencyCode@1000 : Code[10];VAR Currency@1100525000 : Record 4);
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE CreateExternalPlantRentInvoice@1100529001(InvoiceSiB@1100529000 : Record 11072653);
    VAR
      PlantSetup@1100529002 : Record 11012550;
      PlantType@1100529003 : Record 11012551;
      PlantNumber@1100529004 : Record 11012552;
      InvoiceLineSiB@1100529001 : Record 11072654;
      ExternalPlantRentInvoice@1100529005 : Record 11126149;
    BEGIN
      InvoiceLineSiB.SETRANGE("Invoice No.", InvoiceSiB."No.");
      InvoiceLineSiB.SETFILTER("Plant Type", '<>%1', '');
      IF InvoiceLineSiB.FINDSET THEN BEGIN
        PlantSetup.GET;
        IF NOT PlantSetup."Ext. Plant Rental Invoicing" THEN
          EXIT;
        REPEAT
          PlantType.GET(InvoiceLineSiB."Plant Type");
          IF PlantType."Ext. Plant Rental Invoicing" THEN BEGIN
            PlantNumber.GET(InvoiceLineSiB."Plant Type", InvoiceLineSiB."Plant No.");
            IF PlantNumber.External THEN BEGIN
              IF ExternalPlantRentInvoice.GET(InvoiceSiB."Vendor No.", InvoiceSiB."No.") THEN
                ExternalPlantRentInvoice.TESTFIELD(Status, ExternalPlantRentInvoice.Status::Open)
              ELSE
                InsertExternalPlantRentInvoiceHeader(InvoiceSiB);
              InsertExternalPlantRentInvoiceLine(InvoiceSiB, InvoiceLineSiB);
            END;
          END;
        UNTIL InvoiceLineSiB.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertExternalPlantRentInvoiceHeader@1100529000(InvoiceSiB@1100529000 : Record 11072653);
    VAR
      ExternalPlantRentInvoice@1100529002 : Record 11126149;
    BEGIN
      ExternalPlantRentInvoice.INIT;
      ExternalPlantRentInvoice.VALIDATE("Vendor No.", InvoiceSiB."Vendor No.");
      ExternalPlantRentInvoice."External Invoice No." :=  InvoiceSiB."No.";
      ExternalPlantRentInvoice."Invoice Date" := InvoiceSiB."Invoice Date";
      ExternalPlantRentInvoice.Status := ExternalPlantRentInvoice.Status::Open;
      ExternalPlantRentInvoice.INSERT;
    END;

    LOCAL PROCEDURE InsertExternalPlantRentInvoiceLine@1100529002(InvoiceSiB@1100529001 : Record 11072653;InvoiceLineSiB@1100529000 : Record 11072654);
    VAR
      ExtPlantRentInvoiceLine@1100529002 : Record 11126150;
    BEGIN
      ExtPlantRentInvoiceLine.INIT;
      ExtPlantRentInvoiceLine."Vendor No." := InvoiceSiB."Vendor No.";
      ExtPlantRentInvoiceLine."External Invoice No." :=  InvoiceSiB."No.";
      ExtPlantRentInvoiceLine."Line No." := InvoiceLineSiB."Line No.";
      ExtPlantRentInvoiceLine."Purchase Order No." := InvoiceSiB."Related Purch. Order No.";
      ExtPlantRentInvoiceLine.VALIDATE("Plant Type", InvoiceLineSiB."Plant Type");
      ExtPlantRentInvoiceLine.VALIDATE("Plant No.", InvoiceLineSiB."Plant No.");
      ExtPlantRentInvoiceLine.VALIDATE("From Date", InvoiceLineSiB."Starting Date");
      ExtPlantRentInvoiceLine.VALIDATE("Until Date", InvoiceLineSiB."Ending Date");
      ExtPlantRentInvoiceLine.Quantity := InvoiceLineSiB."Invoiced Quantity";
      ExtPlantRentInvoiceLine."Time Quantity" := InvoiceLineSiB."Time Quantity";
      IF (ExtPlantRentInvoiceLine."Time Quantity" = 0) AND (ExtPlantRentInvoiceLine.Quantity <> 0) THEN
        ExtPlantRentInvoiceLine."Time Quantity" := 1;
      ExtPlantRentInvoiceLine."Time Unit" := InvoiceLineSiB."Time Unit";
      ExtPlantRentInvoiceLine.VALIDATE(Amount, InvoiceLineSiB."Net Line Amount");
      ExtPlantRentInvoiceLine.INSERT;
    END;

    BEGIN
    END.
  }
}

