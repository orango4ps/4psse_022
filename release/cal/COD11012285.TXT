OBJECT Codeunit 11012285 Project Element Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Fortschritt: @1@@@@@@@@;ENU=Progress: @1@@@@@@@@;NLD=Voorgang: @1@@@@@@@@;SVE=F”rlopp:  @1@@@@@@@@';
      OccupiedType@1100528601 : ' ,Base Calendar,Employee Time Table,Pause,Service Time Table,Employee Absence,Planned Work Order,Maintenance Proposal,Reserved for Calls,Outside Maintenance Window,Consignment,To Plan Work Order';
      LastEntryNo@1100528602 : Integer;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE CreateWorkOrder@1100528600(IProjectElement@1100528603 : Record 11012010) : Code[20];
    VAR
      WorkOrder@1100528600 : Record 11229279;
      ProjectElementText@1100528601 : Record 11229796;
      WorkOrderText@1100528602 : Record 11229284;
    BEGIN
      WorkOrder.VALIDATE("Source Company", COMPANYNAME);
      WorkOrder.VALIDATE("Source Type", WorkOrder."Source Type"::Project);
      WorkOrder.VALIDATE("Source No.", IProjectElement."Project No.");
      WorkOrder.VALIDATE("Project Element", IProjectElement.Element);
      WorkOrder.INSERT(TRUE);

      ProjectElementText.SETRANGE("Project No.", IProjectElement."Project No.");
      ProjectElementText.SETRANGE(Element, IProjectElement.Element);
      IF ProjectElementText.FINDSET THEN
        REPEAT
          WorkOrderText.INIT;
          WorkOrderText."Table Name" := WorkOrderText."Table Name"::"Work Order";
          WorkOrderText."No." := WorkOrder."No.";
          WorkOrderText."Table Field" := 0;
          WorkOrderText."Line No." := ProjectElementText."Line No.";
          WorkOrderText.Date := ProjectElementText.Date;
          WorkOrderText."Time Created" := ProjectElementText."Time Created";
          WorkOrderText.Code := ProjectElementText.Code;
          WorkOrderText.Comment := ProjectElementText.Comment;
          WorkOrderText."Line Break" := ProjectElementText."Line Break";
          WorkOrderText.INSERT(TRUE);
        UNTIL ProjectElementText.NEXT = 0;
      EXIT(WorkOrder."No.");
    END;

    PROCEDURE CreateWorkOrders@1100528603(VAR IProjectElement@1100528600 : Record 11012010) : Integer;
    VAR
      ProjectElement@1100528601 : Record 11012010;
      NoOfWorkOrdersCreated@1100528602 : Integer;
    BEGIN
      ProjectElement.COPY(IProjectElement);
      IF ProjectElement.FINDSET THEN
        REPEAT
          ProjectElement.TESTFIELD("Project No.");
          ProjectElement.TESTFIELD(Element);
          CreateWorkOrder(ProjectElement);
          NoOfWorkOrdersCreated += 1;
        UNTIL ProjectElement.NEXT = 0;
      EXIT(NoOfWorkOrdersCreated);
    END;

    PROCEDURE DeleteWorkOrders@1100528602(VAR IProjectElement@1100528600 : Record 11012010);
    VAR
      ProjectElement@1100528601 : Record 11012010;
      WorkOrder@1100528602 : Record 11229279;
    BEGIN
      ProjectElement.COPY(IProjectElement);
      IF ProjectElement.FINDSET THEN
        REPEAT
          WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
          WorkOrder.SETRANGE("Source Company", COMPANYNAME);
          WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
          WorkOrder.SETRANGE("Source No.", ProjectElement."Project No.");
          WorkOrder.SETRANGE("Project Element", ProjectElement.Element);
          WorkOrder.DELETEALL(TRUE);
        UNTIL ProjectElement.NEXT = 0;
    END;

    PROCEDURE ShowWorkOrders@1100528640(VAR IProjectElement@1100528601 : Record 11012010);
    VAR
      WorkOrder@1100528600 : Record 11229279;
      WorkOrders@1100528602 : Page 11229284;
    BEGIN
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
      WorkOrder.SETRANGE("Source No.", IProjectElement."Project No.");
      WorkOrder.SETRANGE("Project Element", IProjectElement.Element);
      WorkOrders.SetSelections(WorkOrder."Source Type"::Project, IProjectElement."Project No.", '');
      WorkOrders.SETTABLEVIEW(WorkOrder);
      WorkOrders.RUN;
    END;

    PROCEDURE CreateWorkOrderByResource@1100528628(IProjectElementResource@1100528600 : Record 11229886);
    VAR
      ProjectElement@1100528601 : Record 11012010;
      WorkOrder@1100528603 : Record 11229279;
      ResourceWOP@1100528604 : Record 11229278;
      WorkOrderNo@1100528602 : Code[20];
    BEGIN
      ProjectElement.GET(IProjectElementResource."Project No.", IProjectElementResource.Element);
      WorkOrderNo := CreateWorkOrder(ProjectElement);
      WorkOrder.GET(WorkOrderNo);
      ResourceWOP.GET(IProjectElementResource."Resource No.");
      WorkOrder.VALIDATE("Resource Type", ResourceWOP.Type);
      WorkOrder.VALIDATE("Resource No.", IProjectElementResource."Resource No.");
      WorkOrder.MODIFY(TRUE);
    END;

    PROCEDURE CreateWorkOrdersByResource@1100528631(VAR IProjectElementResource@1100528600 : Record 11229886);
    VAR
      ProjectElementResource@1100528605 : Record 11229886;
    BEGIN
      ProjectElementResource.COPY(IProjectElementResource);
      IF ProjectElementResource.FINDSET THEN
        REPEAT
          CreateWorkOrderByResource(ProjectElementResource);
        UNTIL ProjectElementResource.NEXT = 0;
    END;

    LOCAL PROCEDURE GetTextLinesDS@1100528606(IProjectElement@1100528601 : Record 11012010;VAR OProjectElementText@1100528600 : Record 11229796);
    BEGIN
      OProjectElementText.SETRANGE("Project No.", IProjectElement."Project No.");
      OProjectElementText.SETRANGE(Element, IProjectElement.Element);
    END;

    PROCEDURE GetNoOfTextLines@1100528608(IProjectElement@1100528601 : Record 11012010) : Integer;
    VAR
      ProjectElementText@1100528600 : Record 11229796;
    BEGIN
      GetTextLinesDS(IProjectElement, ProjectElementText);
      EXIT(ProjectElementText.COUNT);
    END;

    PROCEDURE EditTextLines@1100528609(IProjectElement@1100528600 : Record 11012010);
    VAR
      ProjectElementText@1100528602 : Record 11229796;
    BEGIN
      GetTextLinesDS(IProjectElement, ProjectElementText);
      PAGE.RUNMODAL(0, ProjectElementText);
    END;

    LOCAL PROCEDURE GetAdviceOrderLinesDS@1100528612(IProjectElement@1100528600 : Record 11012010;VAR OAdviceOrderLine@1100528601 : Record 11012055);
    BEGIN
      OAdviceOrderLine.SETCURRENTKEY("Record Type", "Project No.", "Service Order No.");
      OAdviceOrderLine.FILTERGROUP(4);
      OAdviceOrderLine.SETRANGE("Record Type", OAdviceOrderLine."Record Type"::Project);
      OAdviceOrderLine.SETRANGE("Project No.", IProjectElement."Project No.");
      OAdviceOrderLine.SETRANGE("Service Order No.", '');
      OAdviceOrderLine.SETRANGE(Element, IProjectElement.Element);
      OAdviceOrderLine.FILTERGROUP(2);
    END;

    PROCEDURE GetNoOfAdviceOrderLines@1100528615(IProjectElement@1100528600 : Record 11012010) : Integer;
    VAR
      AdviceOrderLine@1100528601 : Record 11012055;
    BEGIN
      GetAdviceOrderLinesDS(IProjectElement, AdviceOrderLine);
      EXIT(AdviceOrderLine.COUNT);
    END;

    PROCEDURE ShowAdviceOrderLines@1100528618(IProjectElement@1100528600 : Record 11012010);
    VAR
      AdviceOrderLine@1100528601 : Record 11012055;
    BEGIN
      GetAdviceOrderLinesDS(IProjectElement, AdviceOrderLine);
      PAGE.RUN(PAGE::"Advice Orders by Project", AdviceOrderLine);
    END;

    LOCAL PROCEDURE GetOpenPurchaseLinesDS@1100528621(IProjectElement@1100528600 : Record 11012010;VAR OPurchaseLine@1100528601 : Record 39);
    BEGIN
      GetPurchaseLinesDS(IProjectElement, OPurchaseLine);
      OPurchaseLine.FILTERGROUP(4);
      OPurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      OPurchaseLine.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfOpenPurchaseLines@1100528623(IProjectElement@1100528600 : Record 11012010) : Integer;
    VAR
      PurchaseLine@1100528601 : Record 39;
    BEGIN
      GetOpenPurchaseLinesDS(IProjectElement, PurchaseLine);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowOpenPurchaseLines@1100528626(IProjectElement@1100528600 : Record 11012010);
    VAR
      PurchaseLine@1100528601 : Record 39;
    BEGIN
      GetOpenPurchaseLinesDS(IProjectElement, PurchaseLine);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    LOCAL PROCEDURE GetOpenItemJournalLinesDS@1100528629(IProjectElement@1100528600 : Record 11012010;VAR OItemJournalLine@1100528601 : Record 83);
    BEGIN
      OItemJournalLine.SETCURRENTKEY("Job No.");
      OItemJournalLine.FILTERGROUP(4);
      OItemJournalLine.SETRANGE("Job No.", IProjectElement."Project No.");
      OItemJournalLine.SETRANGE(Element, IProjectElement.Element);
      OItemJournalLine.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfOpenItemJournalLines@1100528630(IProjectElement@1100528600 : Record 11012010) : Integer;
    VAR
      ItemJournalLine@1100528601 : Record 83;
    BEGIN
      GetOpenItemJournalLinesDS(IProjectElement, ItemJournalLine);
      EXIT(ItemJournalLine.COUNT);
    END;

    PROCEDURE ShowOpenItemJournalLines@1100528632(IProjectElement@1100528600 : Record 11012010);
    VAR
      ItemJournalLine@1100528601 : Record 83;
    BEGIN
      GetOpenItemJournalLinesDS(IProjectElement, ItemJournalLine);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    LOCAL PROCEDURE GetPurchaseLinesDS@1100528633(IProjectElement@1100528600 : Record 11012010;VAR OPurchaseLine@1100528601 : Record 39);
    BEGIN
      OPurchaseLine.SETCURRENTKEY("Document Type", "Job No.");
      OPurchaseLine.FILTERGROUP(4);
      OPurchaseLine.SETRANGE("Document Type", OPurchaseLine."Document Type"::Order);
      OPurchaseLine.SETRANGE("Job No.", IProjectElement."Project No.");
      OPurchaseLine.SETRANGE(Element, IProjectElement.Element);
      OPurchaseLine.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfPurchaseLines@1100528636(IProjectElement@1100528600 : Record 11012010) : Integer;
    VAR
      PurchaseLine@1100528601 : Record 39;
    BEGIN
      GetPurchaseLinesDS(IProjectElement, PurchaseLine);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowPurchaseLines@1100528638(IProjectElement@1100528600 : Record 11012010);
    VAR
      PurchaseLine@1100528601 : Record 39;
    BEGIN
      GetPurchaseLinesDS(IProjectElement, PurchaseLine);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfWorkOrdersText@1100528601(IProjectElement@1100528600 : Record 11012010) : Text;
    VAR
      WorkOrder@1100528601 : Record 11229279;
    BEGIN
      IProjectElement.SETRANGE("Company Filter", COMPANYNAME);
      IProjectElement.CALCFIELDS("No. of Work Orders");
      CASE IProjectElement."No. of Work Orders" OF
        0: EXIT;
        1: BEGIN
             WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
             WorkOrder.SETRANGE("Source Company", COMPANYNAME);
             WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
             WorkOrder.SETRANGE("Source No.", IProjectElement."Project No.");
             WorkOrder.SETRANGE("Project Element", IProjectElement.Element);
             IF WorkOrder.FINDFIRST THEN
               EXIT(WorkOrder."No.");
           END;
      ELSE
        EXIT(STRSUBSTNO('[%1]', IProjectElement."No. of Work Orders"));
      END;
    END;

    PROCEDURE GetStartWorkTime@1100528604(IStartingDate@1100528600 : Date) StartingTime : Time;
    VAR
      JobsSetup@1100528601 : Record 315;
      ProjectTimeTable@1100528602 : Record 11020684;
    BEGIN
      IF IStartingDate = 0D THEN
        EXIT;
      JobsSetup.GET;
      IF JobsSetup."Project Time Table" = '' THEN
        EXIT;
      ProjectTimeTable.GET(JobsSetup."Project Time Table");
      CASE DATE2DWY(IStartingDate, 1) OF
        1: StartingTime := ProjectTimeTable."Monday Work From";
        2: StartingTime := ProjectTimeTable."Tuesday Work From";
        3: StartingTime := ProjectTimeTable."Wednesday Work From";
        4: StartingTime := ProjectTimeTable."Thursday Work From";
        5: StartingTime := ProjectTimeTable."Friday Work From";
        6: StartingTime := ProjectTimeTable."Saturday Work From";
        7: StartingTime := ProjectTimeTable."Sunday Work From";
      END;
    END;

    PROCEDURE GetEndWorkTime@1100528605(IEndingDate@1100528600 : Date) EndingTime : Time;
    VAR
      JobsSetup@1100528602 : Record 315;
      ProjectTimeTable@1100528601 : Record 11020684;
    BEGIN
      IF IEndingDate = 0D THEN
        EXIT;
      JobsSetup.GET;
      IF JobsSetup."Project Time Table" = '' THEN
        EXIT;
      ProjectTimeTable.GET(JobsSetup."Project Time Table");
      CASE DATE2DWY(IEndingDate, 1) OF
        1: EndingTime := ProjectTimeTable."Monday Work Until";
        2: EndingTime := ProjectTimeTable."Tuesday Work Until";
        3: EndingTime := ProjectTimeTable."Wednesday Work Until";
        4: EndingTime := ProjectTimeTable."Thursday Work Until";
        5: EndingTime := ProjectTimeTable."Friday Work Until";
        6: EndingTime := ProjectTimeTable."Saturday Work Until";
        7: EndingTime := ProjectTimeTable."Sunday Work Until";
      END;
    END;

    PROCEDURE UseProjectElementPlanFunctionality@1100528607() : Boolean;
    VAR
      JobsSetup@1100528600 : Record 315;
    BEGIN
      JobsSetup.GET;
      EXIT(JobsSetup."Project Element Plan Funct.");
    END;

    PROCEDURE TestProjectElementPlanFunctionality@1100528634() : Boolean;
    VAR
      JobsSetup@1100528600 : Record 315;
    BEGIN
      JobsSetup.GET;
      JobsSetup.TESTFIELD("Project Element Plan Funct.");
    END;

    PROCEDURE GetProjectElementTextSummary@1100528635(IProjectElement@1100528601 : Record 11012010) SummaryText : Text[1024];
    VAR
      ProjectElementText@1100528600 : Record 11229796;
    BEGIN
      ProjectElementText.SETRANGE("Project No.", IProjectElement."Project No.");
      ProjectElementText.SETRANGE(Element, IProjectElement.Element);
      IF ProjectElementText.FINDSET THEN
        REPEAT
          IF SummaryText <> '' THEN
            SummaryText := SummaryText + ' ';
          SummaryText += COPYSTR(ProjectElementText.Comment, 1, MAXSTRLEN(SummaryText) - STRLEN(SummaryText));
        UNTIL (ProjectElementText.NEXT = 0) OR (STRLEN(SummaryText) = MAXSTRLEN(SummaryText));
    END;

    PROCEDURE ShowResources@1100528641(IProjectElement@1100528601 : Record 11012010) : Boolean;
    VAR
      ProjectElementResource@1100528600 : Record 11229886;
      ProjectElementResources@1100528602 : Page 11126552;
    BEGIN
      ProjectElementResource.SETCURRENTKEY("Project No.", Element, "Sequence No.");
      ProjectElementResource.SETRANGE("Project No.", IProjectElement."Project No.");
      ProjectElementResource.SETRANGE(Element, IProjectElement.Element);

      ProjectElementResources.SETTABLEVIEW(ProjectElementResource);
      ProjectElementResources.LOOKUPMODE(FALSE);
      EXIT(ProjectElementResources.RUNMODAL = ACTION::LookupOK);
    END;

    PROCEDURE "----"@1100528610();
    BEGIN
    END;

    PROCEDURE GetAvailablePlanTimeBuffer@1100528613(IProjectElement@1100528612 : Record 11012010;ISeekDate@1100528613 : Date;IStartingDate@1100528622 : Date;IStartingTime@1100528619 : Time;IEndingDate@1100528623 : Date;IEndingTime@1100528620 : Time;IPlanWindowInDays@1100528611 : Integer;ICalculateTravelTime@1100528621 : Boolean;IMaxNoOfResults@1100528625 : Integer;IMinimalAvailableHours@1100528603 : Decimal;IResourceType@1100528605 : ' ,Employee,Subcontractor';IDisciplineFilter@1100528610 : Text[250];VAR OTempEmplAvailPlanTimeBuffer@1100528607 : TEMPORARY Record 11229888);
    VAR
      Resource@1100525000 : Record 11229278;
      TmpOccupiedTimeBuffer@1100528608 : TEMPORARY Record 11229889;
      ProgressDialog@1100528606 : Dialog;
      EntryNo@1100528602 : Integer;
      ResourceCount@1100528601 : Integer;
      ResourceCounter@1100528600 : Integer;
    BEGIN
      OTempEmplAvailPlanTimeBuffer.RESET;
      OTempEmplAvailPlanTimeBuffer.DELETEALL;

      IF Resource.UseVisibleResources THEN BEGIN
        Resource.SETFILTER("User ID Filter", USERID);
        Resource.SETRANGE("Visible in Navision", TRUE);
      END;
      Resource.SetCompanyPlanGroupFilters;
      Resource.SETFILTER(Schedule, '%1|%2', Resource.Schedule::Project, Resource.Schedule::Both);
      //Resource.SETRANGE(Type, Resource.Type::Employee);
      IF IResourceType <> IResourceType::" " THEN
        Resource.SETRANGE(Type, IResourceType);
      EntryNo := 1;
      IF IPlanWindowInDays < 1 THEN
        IPlanWindowInDays := 1;
      IF GUIALLOWED THEN BEGIN
        ProgressDialog.OPEN(Text000);
        ResourceCount := Resource.COUNT;
      END;
      SetResourceFilterByReadPermission(Resource);
      SetResourceFilterByDisciplineFilter(Resource, IDisciplineFilter);
      IF Resource.FINDSET THEN
        REPEAT
          IF GUIALLOWED THEN BEGIN
            ResourceCounter += 1;
            ProgressDialog.UPDATE(1, ROUND(ResourceCounter / ResourceCount * 9999, 1));
          END;
          BuildResourceOccupiedTimeBuffer(
            Resource."No.", ISeekDate, ISeekDate +IPlanWindowInDays -1, IStartingDate, IStartingTime, IEndingDate, IEndingTime,
            TmpOccupiedTimeBuffer);
      //  COMMIT;
      //  PAGE.RUNMODAL(0, TmpOccupiedTimeBuffer);
          BuildResourceAvailPlanBuffer(IProjectElement, Resource."No.", IMinimalAvailableHours, EntryNo, TmpOccupiedTimeBuffer, ICalculateTravelTime, OTempEmplAvailPlanTimeBuffer);
          ClearOccupiedTimeBuffer(Resource."No.", TmpOccupiedTimeBuffer);
        UNTIL (Resource.NEXT = 0) OR ((IMaxNoOfResults > 0) AND (OTempEmplAvailPlanTimeBuffer.COUNT >= IMaxNoOfResults));
      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;

      OTempEmplAvailPlanTimeBuffer.SETCURRENTKEY("Plan Date", "Travel Time from Prev. Address");
      IF OTempEmplAvailPlanTimeBuffer.FINDFIRST THEN;
    END;

    PROCEDURE BuildResourceOccupiedTimeBuffer@1100528611(IResourceNo@1100528600 : Code[20];IFromDate@1100528601 : Date;IToDate@1100528602 : Date;IStartingDate@1100528610 : Date;IStartingTime@1100528608 : Time;IEndingDate@1100528611 : Date;IEndingTime@1100528609 : Time;VAR OOccupiedTimeBuffer@1100528603 : TEMPORARY Record 11229889);
    VAR
      AgendaDate@1100528604 : Date;
      dt@1100528612 : DateTime;
      StartingTime@1100409000 : Time;
    BEGIN
      IF ((IToDate < IStartingDate) AND (IStartingDate <> 0D)) OR ((IFromDate > IEndingDate) AND (IEndingDate <> 0D)) THEN
        EXIT;
      IF (IEndingDate <> 0D) AND (IEndingDate < IToDate) THEN
        IToDate := IEndingDate;
      IF (IStartingDate <> 0D) AND (IStartingDate > IFromDate) THEN
        IFromDate := IStartingDate;
      IF IFromDate > IToDate THEN
        EXIT;
      FOR AgendaDate := IFromDate TO IToDate DO BEGIN
        StartingTime := IStartingTime;
        IF (AgendaDate = TODAY) AND (StartingTime < TIME) THEN BEGIN
          dt := ROUNDDATETIME(CREATEDATETIME(TODAY, TIME), 5 * 60 * 1000, '>');
          StartingTime := DT2TIME(dt);
        END;
        IF AgendaDate >= TODAY THEN
          FillOccupiedTimeBuffer(
            AgendaDate, StartingTime, IEndingTime, IResourceNo, OOccupiedTimeBuffer);
      END;
    END;

    LOCAL PROCEDURE FillOccupiedTimeBuffer@1100528625(IDate@1100528601 : Date;IStartingTime@1100528616 : Time;IEndingTime@1100528623 : Time;IResourceNo@1100528606 : Code[20];VAR OTmpOccupiedTimeBuffer@1100528613 : TEMPORARY Record 11229889);
    VAR
      CompanyInformation@1100528602 : Record 79;
      EmployeeTimeTable@1100528600 : Record 11012923;
      JobsSetup@1100528608 : Record 315;
      ProjectTimeTable@1100528607 : Record 11020684;
      EmployeeAbsence@1100528609 : Record 5207;
      Resource@1100528625 : Record 11229278;
      WorkOrder@1100528618 : Record 11229279;
      ServiceOrder@1100528611 : Record 11012823;
      Job@1100528617 : Record 11072003;
      CalendarManagement@1100528604 : Codeunit 7600;
      NonWorking@1100528603 : Boolean;
      Description@1100528605 : Text[30];
      DOW@1100528610 : Integer;
      StartingTime@1100528614 : Time;
      EndingTime@1100528615 : Time;
      EmployeeNo@1100528624 : Code[20];
      HasPermission@1100528612 : Boolean;
    BEGIN
      ResetOccupiedTimeBufferFilter(IResourceNo, OTmpOccupiedTimeBuffer);
      OTmpOccupiedTimeBuffer.SETRANGE("Starting Date", IDate);
      IF NOT OTmpOccupiedTimeBuffer.ISEMPTY THEN
        EXIT;

      EmployeeNo := '';
      IF IResourceNo <> '' THEN BEGIN
        IF Resource.GET(IResourceNo) THEN BEGIN
          IF Resource.Type = Resource.Type::Employee THEN
            EmployeeNo := Resource."Source No.";
        END;
      END;
      IF (EmployeeNo <> '') AND (Resource.Company <> COMPANYNAME) THEN BEGIN
        CompanyInformation.CHANGECOMPANY(Resource.Company);
        EmployeeTimeTable.CHANGECOMPANY(Resource.Company);
        ProjectTimeTable.CHANGECOMPANY(Resource.Company);
        EmployeeAbsence.CHANGECOMPANY(Resource.Company);
        JobsSetup.CHANGECOMPANY(Resource.Company);
      END;


      CompanyInformation.GET;
      NonWorking := CalendarManagement.CheckDateStatus(CompanyInformation."Base Calendar Code", IDate, Description);
      IF NonWorking THEN BEGIN
        InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Base Calendar", '', OTmpOccupiedTimeBuffer);
        EXIT;
      END;

      DOW := DATE2DWY(IDate, 1);
      EmployeeTimeTable.SETRANGE("Employee No.", EmployeeNo);
      EmployeeTimeTable.SETFILTER("Effective Date", '..%1', IDate);
      IF (EmployeeNo <> '') AND EmployeeTimeTable.FINDLAST THEN BEGIN
        CASE DOW OF
          1:
            BEGIN
              IF EmployeeTimeTable."Monday Work From" <> 0T THEN BEGIN
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, EmployeeTimeTable."Monday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                InsertOccupiedTimeEntry(IResourceNo, IDate, EmployeeTimeTable."Monday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              END ELSE
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              IF (EmployeeTimeTable."Monday Pause From" <> 0T) AND (EmployeeTimeTable."Monday Pause Until" <> 0T) THEN
                InsertOccupiedTimeEntry(
                  IResourceNo, IDate, EmployeeTimeTable."Monday Pause From", EmployeeTimeTable."Monday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
            END;
          2:
            BEGIN
              IF EmployeeTimeTable."Tuesday Work From" <> 0T THEN BEGIN
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, EmployeeTimeTable."Tuesday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                InsertOccupiedTimeEntry(IResourceNo, IDate, EmployeeTimeTable."Tuesday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              END ELSE
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              IF (EmployeeTimeTable."Tuesday Pause From" <> 0T) AND (EmployeeTimeTable."Tuesday Pause Until" <> 0T) THEN
                InsertOccupiedTimeEntry(
                  IResourceNo, IDate, EmployeeTimeTable."Tuesday Pause From", EmployeeTimeTable."Tuesday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
            END;
          3:
            BEGIN
              IF EmployeeTimeTable."Wednesday Work From" <> 0T THEN BEGIN
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, EmployeeTimeTable."Wednesday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                InsertOccupiedTimeEntry(IResourceNo, IDate, EmployeeTimeTable."Wednesday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              END ELSE
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              IF (EmployeeTimeTable."Wednesday Pause From" <> 0T) AND (EmployeeTimeTable."Wednesday Pause Until" <> 0T) THEN
                InsertOccupiedTimeEntry(
                  IResourceNo, IDate, EmployeeTimeTable."Wednesday Pause From", EmployeeTimeTable."Wednesday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
            END;
          4:
            BEGIN
              IF EmployeeTimeTable."Thursday Work From" <> 0T THEN BEGIN
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, EmployeeTimeTable."Thursday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                InsertOccupiedTimeEntry(IResourceNo, IDate, EmployeeTimeTable."Thursday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              END ELSE
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              IF (EmployeeTimeTable."Thursday Pause From" <> 0T) AND (EmployeeTimeTable."Thursday Pause Until" <> 0T) THEN
                InsertOccupiedTimeEntry(
                  IResourceNo, IDate, EmployeeTimeTable."Thursday Pause From", EmployeeTimeTable."Thursday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
            END;
          5:
            BEGIN
              IF EmployeeTimeTable."Friday Work From" <> 0T THEN BEGIN
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, EmployeeTimeTable."Friday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                InsertOccupiedTimeEntry(IResourceNo, IDate, EmployeeTimeTable."Friday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              END ELSE
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              IF (EmployeeTimeTable."Friday Pause From" <> 0T) AND (EmployeeTimeTable."Friday Pause Until" <> 0T) THEN
                InsertOccupiedTimeEntry(
                  IResourceNo, IDate, EmployeeTimeTable."Friday Pause From", EmployeeTimeTable."Friday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
            END;
          6:
            BEGIN
              IF EmployeeTimeTable."Saturday Work From" <> 0T THEN BEGIN
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, EmployeeTimeTable."Saturday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                InsertOccupiedTimeEntry(IResourceNo, IDate, EmployeeTimeTable."Saturday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              END ELSE
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              IF (EmployeeTimeTable."Saturday Pause From" <> 0T) AND (EmployeeTimeTable."Saturday Pause Until" <> 0T) THEN
                InsertOccupiedTimeEntry(
                  IResourceNo, IDate, EmployeeTimeTable."Saturday Pause From", EmployeeTimeTable."Saturday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
            END;
          7:
            BEGIN
              IF EmployeeTimeTable."Sunday Work From" <> 0T THEN BEGIN
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, EmployeeTimeTable."Sunday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                InsertOccupiedTimeEntry(IResourceNo, IDate, EmployeeTimeTable."Sunday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              END ELSE
                InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
              IF (EmployeeTimeTable."Sunday Pause From" <> 0T) AND (EmployeeTimeTable."Sunday Pause Until" <> 0T) THEN
                InsertOccupiedTimeEntry(
                  IResourceNo, IDate, EmployeeTimeTable."Sunday Pause From", EmployeeTimeTable."Sunday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
            END;
        END;
      END ELSE BEGIN
        JobsSetup.GET;
        IF ProjectTimeTable.GET(JobsSetup."Project Time Table") THEN BEGIN
          CASE DOW OF
            1:
              BEGIN
                IF ProjectTimeTable."Monday Work From" <> 0T THEN BEGIN
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, ProjectTimeTable."Monday Work From", OccupiedType::"Employee Time Table", '',  OTmpOccupiedTimeBuffer);
                  InsertOccupiedTimeEntry(IResourceNo, IDate, ProjectTimeTable."Monday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                END ELSE
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                IF (ProjectTimeTable."Monday Pause From" <> 0T) AND (ProjectTimeTable."Monday Pause Until" <> 0T) THEN
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Monday Pause From", ProjectTimeTable."Monday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
              END;
            2:
              BEGIN
                IF ProjectTimeTable."Tuesday Work From" <> 0T THEN BEGIN
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, ProjectTimeTable."Tuesday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                  InsertOccupiedTimeEntry(IResourceNo, IDate, ProjectTimeTable."Tuesday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                END ELSE
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                IF (ProjectTimeTable."Tuesday Pause From" <> 0T) AND (ProjectTimeTable."Tuesday Pause Until" <> 0T) THEN
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Tuesday Pause From", ProjectTimeTable."Tuesday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
              END;
            3:
              BEGIN
                IF ProjectTimeTable."Wednesday Work From" <> 0T THEN BEGIN
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, ProjectTimeTable."Wednesday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                  InsertOccupiedTimeEntry(
                   IResourceNo, IDate, ProjectTimeTable."Wednesday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                END ELSE
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                IF (ProjectTimeTable."Wednesday Pause From" <> 0T) AND (ProjectTimeTable."Wednesday Pause Until" <> 0T) THEN
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Wednesday Pause From", ProjectTimeTable."Wednesday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
              END;
            4:
              BEGIN
                IF ProjectTimeTable."Thursday Work From" <> 0T THEN BEGIN
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, ProjectTimeTable."Thursday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Thursday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                END ELSE
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                IF (ProjectTimeTable."Thursday Pause From" <> 0T) AND (ProjectTimeTable."Thursday Pause Until" <> 0T) THEN
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Thursday Pause From", ProjectTimeTable."Thursday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
              END;
            5:
              BEGIN
                IF ProjectTimeTable."Friday Work From" <> 0T THEN BEGIN
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, ProjectTimeTable."Friday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                  InsertOccupiedTimeEntry(IResourceNo, IDate, ProjectTimeTable."Friday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                END ELSE
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                IF (ProjectTimeTable."Friday Pause From" <> 0T) AND (ProjectTimeTable."Friday Pause Until" <> 0T) THEN
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Friday Pause From", ProjectTimeTable."Friday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
              END;
            6:
              BEGIN
                IF ProjectTimeTable."Saturday Work From" <> 0T THEN BEGIN
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, ProjectTimeTable."Saturday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Saturday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                END ELSE
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                IF (ProjectTimeTable."Saturday Pause From" <> 0T) AND (ProjectTimeTable."Saturday Pause Until" <> 0T) THEN
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Saturday Pause From", ProjectTimeTable."Saturday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
              END;
            7:
              BEGIN
                IF ProjectTimeTable."Sunday Work From" <> 0T THEN BEGIN
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, ProjectTimeTable."Sunday Work From", OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                  InsertOccupiedTimeEntry(IResourceNo, IDate, ProjectTimeTable."Sunday Work Until", 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                END ELSE
                  InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, 235959.999T, OccupiedType::"Employee Time Table", '', OTmpOccupiedTimeBuffer);
                IF (ProjectTimeTable."Sunday Pause From" <> 0T) AND (ProjectTimeTable."Sunday Pause Until" <> 0T) THEN
                  InsertOccupiedTimeEntry(
                    IResourceNo, IDate, ProjectTimeTable."Sunday Pause From", ProjectTimeTable."Sunday Pause Until", OccupiedType::Pause, '', OTmpOccupiedTimeBuffer);
              END;
          END;
        END;

        IF EmployeeNo <> '' THEN BEGIN
          EmployeeAbsence.SETCURRENTKEY("Employee No.", "From Date");
          EmployeeAbsence.SETRANGE("Employee No.", EmployeeNo);
          EmployeeAbsence.SETFILTER("From Date", '<=%1', IDate);
          EmployeeAbsence.SETFILTER("To Date", '>=%1', IDate);
          EmployeeAbsence.SETRANGE(Plannable, FALSE);
          IF EmployeeAbsence.FINDFIRST THEN
            REPEAT
              IF EmployeeAbsence."From Date" < IDate THEN
                StartingTime := 0T
              ELSE
                StartingTime := EmployeeAbsence."From Time";
              IF EmployeeAbsence."To Date" > IDate THEN
                EndingTime := 0T
              ELSE
                EndingTime := EmployeeAbsence."Until Time";
              IF EndingTime = 0T THEN
                EndingTime := 235959.999T;
              InsertOccupiedTimeEntry(IResourceNo, IDate, StartingTime, EndingTime, OccupiedType::"Employee Absence", '', OTmpOccupiedTimeBuffer);
            UNTIL EmployeeAbsence.NEXT = 0;
        END;
      END;

      RemoveDoubleOccTimeEntries(IResourceNo, IDate, OTmpOccupiedTimeBuffer);
      UpdateUnoccupiedTimeEntries(IResourceNo, IDate, OTmpOccupiedTimeBuffer);

      IF IStartingTime <> 0T THEN
        InsertOccupiedTimeEntry(IResourceNo, IDate, 0T, IStartingTime, OccupiedType::"Outside Maintenance Window", '', OTmpOccupiedTimeBuffer);
      IF (IEndingTime <> 0T) AND (IEndingTime <> 000000T) THEN
        InsertOccupiedTimeEntry(IResourceNo, IDate, IEndingTime, 235959.999T, OccupiedType::"Outside Maintenance Window", '', OTmpOccupiedTimeBuffer);

      WorkOrder.SETCURRENTKEY("Resource No.");
      WorkOrder.SETRANGE("Resource No.", IResourceNo);
      WorkOrder.SETFILTER("Starting Date/Time", '<=%1', DATI2VARIANT(IDate, 235959.999T));
      WorkOrder.SETFILTER("Ending Date/Time", '>=%1', DATI2VARIANT(IDate, 0T));
      IF WorkOrder.FINDSET THEN
        REPEAT
          IF DT2DATE(WorkOrder."Starting Date/Time") < IDate THEN
            StartingTime := 0T
          ELSE
            StartingTime := DT2TIME(WorkOrder."Starting Date/Time");
          IF DT2DATE(WorkOrder."Ending Date/Time") > IDate THEN
            EndingTime := 235959.999T
          ELSE
            EndingTime := DT2TIME(WorkOrder."Ending Date/Time");
          HasPermission := FALSE;
          CASE WorkOrder."Source Type" OF
            WorkOrder."Source Type"::ServiceOrder:
              BEGIN
                ServiceOrder.INIT;
                IF WorkOrder."Source Company" <> COMPANYNAME THEN
                  ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
                IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceOrder) THEN
                  IF ServiceOrder.GET(WorkOrder."Source No.") THEN
                    HasPermission := TRUE;
              END;
            WorkOrder."Source Type"::Project:
              BEGIN
                Job.INIT;
                IF WorkOrder."Source Company" <> COMPANYNAME THEN
                  Job.CHANGECOMPANY(WorkOrder."Source Company");
                IF FPSLicenseManagement.LicenseAndReadPermissionForTable(Job) THEN
                  IF Job.GET(WorkOrder."Source No.") THEN
                    HasPermission := TRUE;
              END;
          END;
          IF HasPermission THEN
            InsertOccupiedTimeEntry(IResourceNo, IDate, StartingTime, EndingTime, OccupiedType::"Planned Work Order", WorkOrder."No.", OTmpOccupiedTimeBuffer);
        UNTIL WorkOrder.NEXT = 0;

      RemoveDoubleOccTimeEntries(IResourceNo, IDate, OTmpOccupiedTimeBuffer);
      UpdateUnoccupiedTimeEntries(IResourceNo, IDate, OTmpOccupiedTimeBuffer);
    END;

    PROCEDURE ClearOccupiedTimeBuffer@1100528624(IResourceNo@1100528601 : Code[20];VAR OTmpOccupiedTimeBuffer@1100528600 : TEMPORARY Record 11229889);
    BEGIN
      ResetOccupiedTimeBufferFilter(IResourceNo, OTmpOccupiedTimeBuffer);
      OTmpOccupiedTimeBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE InsertOccupiedTimeEntry@1100528622(IResourceNo@1100528604 : Code[20];IStartingDate@1100528600 : Date;IStartTime@1100528601 : Time;IEndTime@1100528603 : Time;IOccupiedType@1100528605 : Option;IWorkOrderNo@1100528606 : Code[20];VAR OTmpOccupiedTimeBuffer@1100528602 : TEMPORARY Record 11229889);
    BEGIN
      OTmpOccupiedTimeBuffer.INIT;
      LastEntryNo += 1;
      OTmpOccupiedTimeBuffer."Entry No." := LastEntryNo;
      OTmpOccupiedTimeBuffer."Starting Date" := IStartingDate;
      OTmpOccupiedTimeBuffer."Starting Time" := IStartTime;
      OTmpOccupiedTimeBuffer."Ending Time" := IEndTime;
      OTmpOccupiedTimeBuffer."Occupied Type" := IOccupiedType;
      OTmpOccupiedTimeBuffer."Resource No." := IResourceNo;
      OTmpOccupiedTimeBuffer."Work Order No." := IWorkOrderNo;
      OTmpOccupiedTimeBuffer.INSERT(TRUE);
    END;

    PROCEDURE RemoveDoubleOccTimeEntries@1100528619(IResourceNo@1100528605 : Code[20];IStartingDate@1100528602 : Date;VAR OTmpOccupiedTimeBuffer@1100528604 : TEMPORARY Record 11229889);
    VAR
      TmpOccupiedTimeBuffer2@1100528603 : TEMPORARY Record 11229889;
      StartingTime@1100528600 : Time;
      EndingTime@1100528601 : Time;
      IsFirstRecord@1100528606 : Boolean;
    BEGIN
      TmpOccupiedTimeBuffer2.COPY(OTmpOccupiedTimeBuffer, TRUE);
      ResetOccupiedTimeBufferFilter(IResourceNo, TmpOccupiedTimeBuffer2);
      TmpOccupiedTimeBuffer2.SETRANGE("Starting Date", IStartingDate);
      IF TmpOccupiedTimeBuffer2.FINDFIRST THEN BEGIN
        IsFirstRecord := TRUE;
        REPEAT
          IF TmpOccupiedTimeBuffer2."Ending Time" > EndingTime THEN BEGIN
            IF TmpOccupiedTimeBuffer2."Starting Time" > EndingTime THEN
              StartingTime := TmpOccupiedTimeBuffer2."Starting Time";
            EndingTime := TmpOccupiedTimeBuffer2."Ending Time";
          END
          ELSE
          IF NOT IsFirstRecord AND (TmpOccupiedTimeBuffer2."Ending Time" <= EndingTime) THEN BEGIN
            TmpOccupiedTimeBuffer2.Deleted := TRUE;
            TmpOccupiedTimeBuffer2.MODIFY;
          END;
          IsFirstRecord := FALSE;
        UNTIL TmpOccupiedTimeBuffer2.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateUnoccupiedTimeEntries@1100528617(IResourceNo@1100528607 : Code[20];IStartingDate@1100528602 : Date;VAR OTmpOccupiedTimeBuffer@1100528606 : TEMPORARY Record 11229889);
    VAR
      TmpOccupiedTimeBuffer2@1100528605 : TEMPORARY Record 11229889;
      LastOccupiedTimeBuffer@1100528601 : TEMPORARY Record 11229889;
      EndingTime@1100528600 : Time;
      TimeDuration@1100528603 : Duration;
      PauseStartingTime@1100528604 : Time;
      IsFirstRecord@1100528608 : Boolean;
    BEGIN
      EndingTime := 0T;
      LastOccupiedTimeBuffer.COPY(OTmpOccupiedTimeBuffer, TRUE);
      TmpOccupiedTimeBuffer2.COPY(OTmpOccupiedTimeBuffer, TRUE);
      ResetOccupiedTimeBufferFilter(IResourceNo, TmpOccupiedTimeBuffer2);
      TmpOccupiedTimeBuffer2.SETRANGE("Starting Date", IStartingDate);
      TmpOccupiedTimeBuffer2.SETFILTER("Occupied Type", '<>%1', TmpOccupiedTimeBuffer2."Occupied Type"::Pause);
      IF TmpOccupiedTimeBuffer2.FINDSET THEN BEGIN
        IsFirstRecord := TRUE;
        REPEAT
          IF NOT IsFirstRecord THEN BEGIN
            IF (TmpOccupiedTimeBuffer2."Starting Time" >= EndingTime) AND (TmpOccupiedTimeBuffer2."Starting Time" <> 0T) THEN
              TimeDuration := TmpOccupiedTimeBuffer2."Starting Time" - EndingTime
            ELSE
              TimeDuration := 0;
            LastOccupiedTimeBuffer."Unoccupied Hours" :=
              TimeDuration / 1000 / 60 / 60 -
              GetPauseHoursFromOccupiedTimeEntries(IResourceNo, IStartingDate, EndingTime, TmpOccupiedTimeBuffer2."Starting Time", PauseStartingTime, OTmpOccupiedTimeBuffer);
            LastOccupiedTimeBuffer.MODIFY;
          END;
          EndingTime := TmpOccupiedTimeBuffer2."Ending Time";
          LastOccupiedTimeBuffer := TmpOccupiedTimeBuffer2;
          IsFirstRecord := FALSE;
        UNTIL TmpOccupiedTimeBuffer2.NEXT = 0;
        TimeDuration := 235959.999T - EndingTime;
      //  TimeDuration := EndingTime - 000000T;
        LastOccupiedTimeBuffer."Unoccupied Hours" :=
          TimeDuration / 1000 / 60 / 60 -
          GetPauseHoursFromOccupiedTimeEntries(IResourceNo, IStartingDate, TmpOccupiedTimeBuffer2."Starting Time", EndingTime, PauseStartingTime, OTmpOccupiedTimeBuffer);
        LastOccupiedTimeBuffer.MODIFY;
      END;
    END;

    PROCEDURE RemoveOccupiedTimeEntries@1100528620(IResourceNo@1100528600 : Code[20];IStartingDate@1100528602 : Date;IEndingDate@1100528603 : Date;VAR OTmpOccupiedTimeBuffer@1100528601 : TEMPORARY Record 11229889);
    VAR
      TmpOccupiedTimeBuffer2@1100528604 : TEMPORARY Record 11229889;
    BEGIN
      TmpOccupiedTimeBuffer2.COPY(OTmpOccupiedTimeBuffer, TRUE);
      ResetOccupiedTimeBufferFilter(IResourceNo, TmpOccupiedTimeBuffer2);
      WHILE IStartingDate <= IEndingDate DO BEGIN
        TmpOccupiedTimeBuffer2.SETRANGE("Starting Date", IStartingDate);
        IF NOT TmpOccupiedTimeBuffer2.ISEMPTY THEN BEGIN
          TmpOccupiedTimeBuffer2.DELETEALL;
          UpdateUnoccupiedTimeEntries(IResourceNo, IStartingDate, OTmpOccupiedTimeBuffer);
        END;
        IStartingDate := IStartingDate +1;
      END;
    END;

    PROCEDURE ResetOccupiedTimeBufferFilter@1100528616(IResourceNo@1100528601 : Code[20];VAR OBuffer@1100528600 : TEMPORARY Record 11229889);
    BEGIN
      OBuffer.RESET;
      OBuffer.SETCURRENTKEY("Resource No.", "Starting Date", "Starting Time");
      OBuffer.SETRANGE("Resource No.", IResourceNo);
      OBuffer.SETRANGE(Deleted, FALSE);
    END;

    PROCEDURE GetPauseHoursFromOccupiedTimeEntries@1100528614(IResourceNo@1100528607 : Code[20];IStartingDate@1100528605 : Date;IStartingTime@1100528601 : Time;IEndingTime@1100528602 : Time;VAR OPauseStartingTime@1100528600 : Time;VAR OTmpOccupiedTimeBuffer@1100528606 : TEMPORARY Record 11229889) : Decimal;
    VAR
      TmpOccupiedTimeBuffer2@1100528603 : TEMPORARY Record 11229889;
      TimeDuration@1100528604 : Duration;
    BEGIN
      TmpOccupiedTimeBuffer2.COPY(OTmpOccupiedTimeBuffer, TRUE);
      ResetOccupiedTimeBufferFilter(IResourceNo, TmpOccupiedTimeBuffer2);
      TmpOccupiedTimeBuffer2.SETRANGE("Starting Date", IStartingDate);
      TmpOccupiedTimeBuffer2.SETRANGE("Occupied Type", TmpOccupiedTimeBuffer2."Occupied Type"::Pause);
      IF TmpOccupiedTimeBuffer2.FINDSET THEN
        REPEAT
          IF
            ((IEndingTime > TmpOccupiedTimeBuffer2."Starting Time") AND
            (IEndingTime < TmpOccupiedTimeBuffer2."Ending Time")) OR
            ((IStartingTime > TmpOccupiedTimeBuffer2."Starting Time") AND
            (IStartingTime < TmpOccupiedTimeBuffer2."Starting Time")) OR
            ((IStartingTime <= TmpOccupiedTimeBuffer2."Starting Time") AND
            (IEndingTime >= TmpOccupiedTimeBuffer2."Ending Time"))
          THEN BEGIN
            TimeDuration := TmpOccupiedTimeBuffer2."Ending Time" - TmpOccupiedTimeBuffer2."Starting Time";
            OPauseStartingTime := TmpOccupiedTimeBuffer2."Starting Time";
            EXIT(TimeDuration / 1000 / 60 / 60);
          END;
        UNTIL TmpOccupiedTimeBuffer2.NEXT = 0;
    END;

    PROCEDURE GetPauseHours@1100528637(IResourceNo@1100528607 : Code[20];IStartingDate@1100528605 : Date;IStartingTime@1100528601 : Time;IEndingTime@1100528602 : Time;VAR OPauseStartingTime@1100528600 : Time;VAR OTmpOccupiedTimeBuffer@1100528606 : TEMPORARY Record 11071809) : Decimal;
    VAR
      TmpOccupiedTimeBuffer2@1100528603 : TEMPORARY Record 11229889;
      TimeDuration@1100528604 : Duration;
    BEGIN
      TmpOccupiedTimeBuffer2.COPY(OTmpOccupiedTimeBuffer, TRUE);
      ResetOccupiedTimeBufferFilter(IResourceNo, TmpOccupiedTimeBuffer2);
      TmpOccupiedTimeBuffer2.SETRANGE("Starting Date", IStartingDate);
      TmpOccupiedTimeBuffer2.SETRANGE("Occupied Type", TmpOccupiedTimeBuffer2."Occupied Type"::Pause);
      IF TmpOccupiedTimeBuffer2.FINDSET THEN
        REPEAT
          IF
            ((IEndingTime > TmpOccupiedTimeBuffer2."Starting Time") AND
            (IEndingTime < TmpOccupiedTimeBuffer2."Ending Time")) OR
            ((IStartingTime > TmpOccupiedTimeBuffer2."Starting Time") AND
            (IStartingTime < TmpOccupiedTimeBuffer2."Starting Time")) OR
            ((IStartingTime <= TmpOccupiedTimeBuffer2."Starting Time") AND
            (IEndingTime >= TmpOccupiedTimeBuffer2."Ending Time"))
          THEN BEGIN
            TimeDuration := TmpOccupiedTimeBuffer2."Ending Time" - TmpOccupiedTimeBuffer2."Starting Time";
            OPauseStartingTime := TmpOccupiedTimeBuffer2."Starting Time";
            EXIT(TimeDuration / 1000 / 60 / 60);
          END;
        UNTIL TmpOccupiedTimeBuffer2.NEXT = 0;
    END;

    PROCEDURE SetResourceFilterByReadPermission@1100525003(VAR IOResource@1100525000 : Record 11229278);
    VAR
      Company@1100525001 : Record 2000000006;
      Employee@1100525002 : Record 5200;
    BEGIN
      IF Company.FINDSET THEN
        REPEAT
          Employee.CHANGECOMPANY(Company.Name);
          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(Employee) THEN BEGIN
            IOResource.SETRANGE(Company, Company.Name);
            IF IOResource.FINDSET THEN
              REPEAT
                IOResource.MARK(TRUE)
              UNTIL IOResource.NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      IOResource.SETRANGE(Company);
      IOResource.MARKEDONLY(TRUE);
    END;

    PROCEDURE SetResourceFilterByDisciplineFilter@1100528639(VAR IOResource@1100528600 : Record 11229278;IDisciplineFilter@1100528601 : Text[250]);
    VAR
      ResourceDiscipline@1100528602 : Record 11229286;
    BEGIN
      IF IDisciplineFilter = '' THEN
        EXIT;
      IF NOT IOResource.FINDSET THEN
        EXIT;
      REPEAT
        ResourceDiscipline.SETRANGE("Resource No.", IOResource."No.");
        IF NOT ResourceDiscipline.ISEMPTY THEN BEGIN
          ResourceDiscipline.SETFILTER(Discipline, IDisciplineFilter);
          IF ResourceDiscipline.ISEMPTY THEN BEGIN
            IF IOResource.MARKEDONLY THEN
              IOResource.MARK(FALSE);
          END ELSE BEGIN
            IF NOT IOResource.MARKEDONLY THEN
              IOResource.MARK(TRUE);
          END;
          ResourceDiscipline.SETRANGE(Discipline);
        END ELSE
          IF NOT IOResource.MARKEDONLY THEN
            IOResource.MARK(TRUE);
      UNTIL IOResource.NEXT = 0;
      IOResource.MARKEDONLY(TRUE);
    END;

    PROCEDURE BuildResourceAvailPlanBuffer@1100528627(IProjectElement@1100528609 : Record 11012010;IResourceNo@1100528602 : Code[20];ITotalDurationTime@1100528604 : Decimal;VAR IOEntryNo@1100528603 : Integer;VAR ITempOccupiedTimeBuffer@1100528601 : TEMPORARY Record 11229889;ICalculateTravelTime@1100528614 : Boolean;VAR OTempResourceAvailPlanTimeBuffer@1100528600 : TEMPORARY Record 11229888);
    VAR
      CompanyInformation@1100528607 : Record 79;
      Employee@1100528606 : Record 5200;
      Resource@1100528615 : Record 11229278;
      DimensionValue@1100528618 : Record 349;
      Contact@1100528619 : Record 5050;
      WorkOrderPlanningSetup@1100528605 : Record 11229277;
      TotalTravelHours@1100528612 : Decimal;
      EmployeeNo@1100528616 : Code[20];
    BEGIN
      ResetOccupiedTimeBufferFilter(IResourceNo, ITempOccupiedTimeBuffer);
      IF Resource.GET(IResourceNo) THEN
        IF Resource.Type = Resource.Type::Employee THEN BEGIN
          EmployeeNo := Resource."Source No.";
          IF COMPANYNAME <> Resource.Company THEN BEGIN
            Employee.CHANGECOMPANY(Resource.Company);
            CompanyInformation.CHANGECOMPANY(Resource.Company);
            DimensionValue.CHANGECOMPANY(Resource.Company);
            Contact.CHANGECOMPANY(Resource.Company);
            WorkOrderPlanningSetup.CHANGECOMPANY(Resource.Company);
          END;
        END;
      //COMMIT;
      //PAGE.RUNMODAL(0, ITempOccupiedTimeBuffer);
      ITempOccupiedTimeBuffer.SETFILTER("Occupied Type", '<>%1', ITempOccupiedTimeBuffer."Occupied Type"::Pause);
      IF ITempOccupiedTimeBuffer.FINDSET THEN
        REPEAT
          IF (ITempOccupiedTimeBuffer."Unoccupied Hours" >= ITotalDurationTime) AND (ITempOccupiedTimeBuffer."Unoccupied Hours" > 0) THEN BEGIN
            OTempResourceAvailPlanTimeBuffer.INIT;
            OTempResourceAvailPlanTimeBuffer."Entry No." := IOEntryNo;
            IOEntryNo +=1;
            OTempResourceAvailPlanTimeBuffer."Resource No." := ITempOccupiedTimeBuffer."Resource No.";
            OTempResourceAvailPlanTimeBuffer.VALIDATE("Plan Date", ITempOccupiedTimeBuffer."Starting Date");
            OTempResourceAvailPlanTimeBuffer."Plan Starting Time" := ITempOccupiedTimeBuffer."Ending Time";
            IF ITempOccupiedTimeBuffer."Occupied Type" = ITempOccupiedTimeBuffer."Occupied Type"::"Planned Service Order" THEN
              OTempResourceAvailPlanTimeBuffer.VALIDATE("Prev. Work Order No.", ITempOccupiedTimeBuffer."Work Order No.");
            IF ITempOccupiedTimeBuffer.NEXT <> 0 THEN BEGIN
              IF ITempOccupiedTimeBuffer."Starting Date" = OTempResourceAvailPlanTimeBuffer."Plan Date" THEN BEGIN
                OTempResourceAvailPlanTimeBuffer."Plan Ending Time" := ITempOccupiedTimeBuffer."Starting Time";
                IF ITempOccupiedTimeBuffer."Occupied Type" = ITempOccupiedTimeBuffer."Occupied Type"::"Planned Service Order" THEN
                  OTempResourceAvailPlanTimeBuffer.VALIDATE("Next Work Order No.", ITempOccupiedTimeBuffer."Work Order No.");
              END;
              ITempOccupiedTimeBuffer.NEXT(-1);
            END;
            IF OTempResourceAvailPlanTimeBuffer."Plan Ending Time" = 0T THEN
              OTempResourceAvailPlanTimeBuffer."Plan Ending Time" := 235959.999T;
            OTempResourceAvailPlanTimeBuffer."Available Hours" := ITempOccupiedTimeBuffer."Unoccupied Hours";

            IF (OTempResourceAvailPlanTimeBuffer."Prev. Work Order No." = '') OR (OTempResourceAvailPlanTimeBuffer."Next Work Order No." = '') THEN BEGIN
              WorkOrderPlanningSetup.GET;
              CASE WorkOrderPlanningSetup."Start Address for Plan" OF
                WorkOrderPlanningSetup."Start Address for Plan"::Company:
                  BEGIN
                    CompanyInformation.GET;
                    IF OTempResourceAvailPlanTimeBuffer."Prev. Work Order No." = '' THEN BEGIN
                      OTempResourceAvailPlanTimeBuffer."Prev. Address" := CompanyInformation.Address;
                      OTempResourceAvailPlanTimeBuffer."Prev. Address 2" := CompanyInformation."Address 2";
                      OTempResourceAvailPlanTimeBuffer."Prev. Post Code" := CompanyInformation."Post Code";
                      OTempResourceAvailPlanTimeBuffer."Prev. City" := CompanyInformation.City;
                    END;
                    IF OTempResourceAvailPlanTimeBuffer."Next Work Order No." = '' THEN BEGIN
                      OTempResourceAvailPlanTimeBuffer."Next Address" := CompanyInformation.Address;
                      OTempResourceAvailPlanTimeBuffer."Next Address 2" := CompanyInformation."Address 2";
                      OTempResourceAvailPlanTimeBuffer."Next Post Code" := CompanyInformation."Post Code";
                      OTempResourceAvailPlanTimeBuffer."Next City" := CompanyInformation.City;
                    END;
                  END;
                WorkOrderPlanningSetup."Start Address for Plan"::Employee:
                  BEGIN
                    IF NOT Employee.GET(EmployeeNo) THEN
                      Employee.INIT;
                    IF OTempResourceAvailPlanTimeBuffer."Prev. Work Order No." = '' THEN BEGIN
                      OTempResourceAvailPlanTimeBuffer."Prev. Address" := Employee.Address;
                      OTempResourceAvailPlanTimeBuffer."Prev. Address 2" := Employee."Address 2";
                      OTempResourceAvailPlanTimeBuffer."Prev. Post Code" := Employee."Post Code";
                      OTempResourceAvailPlanTimeBuffer."Prev. City" := Employee.City;
                    END;
                    IF OTempResourceAvailPlanTimeBuffer."Next Work Order No." = '' THEN BEGIN
                      OTempResourceAvailPlanTimeBuffer."Next Address" := Employee.Address;
                      OTempResourceAvailPlanTimeBuffer."Next Address 2" := Employee."Address 2";
                      OTempResourceAvailPlanTimeBuffer."Next Post Code" := Employee."Post Code";
                      OTempResourceAvailPlanTimeBuffer."Next City" := Employee.City;
                    END;
                  END;
                WorkOrderPlanningSetup."Start Address for Plan"::"Cost Center":
                  BEGIN
                    IF NOT Employee.GET(EmployeeNo) THEN
                      Employee.INIT;
                    DimensionValue.SETRANGE("Global Dimension No.", 1);
                    DimensionValue.SETRANGE(Code, Employee."Global Dimension 1 Code");
                    IF NOT DimensionValue.FINDFIRST THEN
                      DimensionValue.INIT;
                    IF NOT Contact.GET(DimensionValue."Contact No. (Company)") THEN
                      Contact.INIT;
                    IF OTempResourceAvailPlanTimeBuffer."Prev. Work Order No." = '' THEN BEGIN
                      OTempResourceAvailPlanTimeBuffer."Prev. Address" := Contact.Address;
                      OTempResourceAvailPlanTimeBuffer."Prev. Address 2" := Contact."Address 2";
                      OTempResourceAvailPlanTimeBuffer."Prev. Post Code" := Contact."Post Code";
                      OTempResourceAvailPlanTimeBuffer."Prev. City" := Contact.City;
                    END;
                    IF OTempResourceAvailPlanTimeBuffer."Next Work Order No." = '' THEN BEGIN
                      OTempResourceAvailPlanTimeBuffer."Next Address" := Contact.Address;
                      OTempResourceAvailPlanTimeBuffer."Next Address 2" := Contact."Address 2";
                      OTempResourceAvailPlanTimeBuffer."Next Post Code" := Contact."Post Code";
                      OTempResourceAvailPlanTimeBuffer."Next City" := Contact.City;
                    END;
                  END;
              END;
            END;

      //      GetOptimalRouteForServiceOrders(
      //        OTempResourceAvailPlanTimeBuffer."Prev. Address", OTempResourceAvailPlanTimeBuffer."Prev. City",
      //        IServiceOrder,
      //        OTempResourceAvailPlanTimeBuffer."Next Address", OTempResourceAvailPlanTimeBuffer."Next City", ICalculateTravelTime, TmpOptimalRouteBuffer, TravelCalculationStatus);
      //      OTempResourceAvailPlanTimeBuffer."Travel Time from Prev. Address" := GetFirstTravelDurationFromOptimalRouteBuffer(TmpOptimalRouteBuffer);
      //      OTempResourceAvailPlanTimeBuffer."Travel Time to Next Address" := GetLastTravelDurationFromOptimalRouteBuffer(TmpOptimalRouteBuffer);
      //      OTempResourceAvailPlanTimeBuffer."Total Travel Time" := GetTotalTravelDurationFromOptimalRouteBuffer(TmpOptimalRouteBuffer);
      //      OTempResourceAvailPlanTimeBuffer."Travel Dist. from Prev. Addr." := GetFirstTravelDistanceFromOptimalRouteBuffer(TmpOptimalRouteBuffer);
      //      OTempResourceAvailPlanTimeBuffer."Travel Dist. to Next Address" := GetLastTravelDistanceFromOptimalRouteBuffer(TmpOptimalRouteBuffer);
            OTempResourceAvailPlanTimeBuffer."Work Starting Time" :=
              OTempResourceAvailPlanTimeBuffer."Plan Starting Time" + OTempResourceAvailPlanTimeBuffer."Travel Time from Prev. Address";
      //      TotalTravelHours := DurationToHours(OTempResourceAvailPlanTimeBuffer."Total Travel Time");
      //      OTempResourceAvailPlanTimeBuffer."Travel Calculation Status" := TravelCalculationStatus;
      //      OTempResourceAvailPlanTimeBuffer."Planning Agreement Code" :=
      //        PlanningAgreement.GetPlanningAgreementCode(OTempResourceAvailPlanTimeBuffer."Plan Starting Time");
            IF (ITempOccupiedTimeBuffer."Unoccupied Hours" >= ITotalDurationTime + TotalTravelHours) AND (ITempOccupiedTimeBuffer."Unoccupied Hours" > 0) THEN
              OTempResourceAvailPlanTimeBuffer.INSERT;
          END;
        UNTIL ITempOccupiedTimeBuffer.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

