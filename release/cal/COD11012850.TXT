OBJECT Codeunit 11012850 Service Collective-List Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528603 : TextConst 'ENU=days;NOR=dager;SVE=dagar';
      Text002@1100528600 : TextConst 'ENU=%1 Contract Invoicing Line(s) created;NOR="%1 Kontrakt Faktureringsrad(r) Opprettet ";SVE=%1 skapade faktureringsrad(er) kontrakt';
      Text003@1100525001 : TextConst 'ENU=No Service Contract Control Period found for Service Contract %1, Date %2;NOR=Ingen servicekontrollperiode for kontrakt funnet for servicekontrakt %1, dato %2';
      Text004@1100525000 : TextConst 'ENU=No Service Control Period found for Date %1;NOR=Ingen servicekontrollperiode funnet for dato %1';

    PROCEDURE FindCollectiveListNo@1100528601(ICustomerNo@1100528605 : Code[20];IBilltoCustomerNo@1100528600 : Code[20];IBilltoContactPersonNo@1100528800 : Code[20];IAltBilltoAddressCode@1100528607 : Code[10];IServiceLocationNo@1100528601 : Code[20];IServiceContractNo@1100528602 : Code[20];IServiceOrderNo@1100528606 : Code[20];IForceCollectByServiceOrder@1100528610 : Boolean) : Code[20];
    VAR
      ServiceCollectiveList@1100528603 : Record 11071730;
      Customer@1100528604 : Record 18;
      ServiceOrder@1100528608 : Record 11012823;
      ServiceLocation@1100528609 : Record 11012801;
      StartingDate@1100525000 : Date;
    BEGIN
      IF NOT Customer.GET(IBilltoCustomerNo) THEN
        Customer.INIT;
      IF UseBilltoAsSelltoCustomer(ICustomerNo, IServiceContractNo) THEN
        ICustomerNo := IBilltoCustomerNo;
      ServiceCollectiveList.SETCURRENTKEY("Bill-to Customer No.");
      ServiceCollectiveList.SETRANGE("Bill-to Customer No.", IBilltoCustomerNo);
      ServiceCollectiveList.SETRANGE("Alternative Bill-to Address", IAltBilltoAddressCode);
      ServiceCollectiveList.SETRANGE("Customer No.", ICustomerNo);

      IF ServiceOrder.GET(IServiceOrderNo) THEN
        IF ServiceOrder.IsPlantServiceOrder OR ServiceOrder.IsPlantInternalCharge OR IForceCollectByServiceOrder THEN
          Customer."Collect SO Invoices By" := Customer."Collect SO Invoices By"::"Service Order";

      IF Customer."Collect SO Invoices By" = Customer."Collect SO Invoices By"::"Customer - Bill-to Contact Person" THEN
        ServiceCollectiveList.SETRANGE("Bill-to Contact Person No.", IBilltoContactPersonNo)
      ELSE
        ServiceCollectiveList.SETRANGE("Bill-to Contact Person No.", '');

      CASE Customer."Collect SO Invoices By" OF
        Customer."Collect SO Invoices By"::"Service Contract":
          BEGIN
            ServiceCollectiveList.SETRANGE("Service Contract No.", IServiceContractNo);
            ServiceCollectiveList.SETFILTER("Service Order No.", '%1|%2', '', IServiceOrderNo);
          END;
        Customer."Collect SO Invoices By"::Complex:
          BEGIN
            IF NOT ServiceLocation.GET(IServiceLocationNo) THEN
              ServiceLocation.INIT;
            ServiceCollectiveList.SETFILTER("Complex Code", '<>%1&%2', '', ServiceLocation.GetComplexCode);
            ServiceCollectiveList.SETFILTER("Service Location No.", '%1|%2', '', IServiceLocationNo);
            ServiceCollectiveList.SETFILTER("Service Contract No.", '%1|%2', '', IServiceContractNo);
            ServiceCollectiveList.SETFILTER("Service Order No.", '%1|%2', '', IServiceOrderNo);
          END;
        Customer."Collect SO Invoices By"::"Service Location":
          BEGIN
            ServiceCollectiveList.SETRANGE("Service Location No.", IServiceLocationNo);
            ServiceCollectiveList.SETFILTER("Service Contract No.", '%1|%2', '', IServiceContractNo);
            ServiceCollectiveList.SETFILTER("Service Order No.", '%1|%2', '', IServiceOrderNo);
          END;
        Customer."Collect SO Invoices By"::"Service Order":
          ServiceCollectiveList.SETRANGE("Service Order No.", IServiceOrderNo);
      END;
      ServiceCollectiveList.SETRANGE(Status, ServiceCollectiveList.Status::Open);
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        ServiceOrder.INIT;
      IF ServiceOrder."Bill-to Customer No." = IBilltoCustomerNo THEN
        ServiceCollectiveList.SETRANGE("Currency Code", ServiceOrder."Currency Code")
      ELSE
        ServiceCollectiveList.SETRANGE("Currency Code", Customer."Bill-to Customer No.");

      StartingDate := DetermineSOStartingDate(IServiceOrderNo);
      ServiceCollectiveList.SETFILTER("Starting Date", '%1|<=%2', 0D, StartingDate);
      ServiceCollectiveList.SETFILTER("Ending Date", '%1|>=%2', 0D, StartingDate);
      IF ServiceCollectiveList.FINDFIRST THEN
        EXIT(ServiceCollectiveList."No.");
    END;

    PROCEDURE CreateCollectiveList@1100528600(ICustomerNo@1100528605 : Code[20];IBilltoCustomerNo@1100528600 : Code[20];IBilltoContactPersonNo@1100528800 : Code[20];IAltBilltoAddressCode@1100528607 : Code[10];IServiceLocationNo@1100528601 : Code[20];IServiceContractNo@1100528602 : Code[20];IServiceOrderNo@1100528606 : Code[20];ForceCollectByServiceOrder@1100528801 : Boolean;ICostObject@1101285000 : Code[20]) : Code[20];
    VAR
      ServiceCollectiveList@1100528603 : Record 11071730;
      Customer@1100528604 : Record 18;
      ServiceOrder@1100528608 : Record 11012823;
      ServiceLocation@1100528609 : Record 11012801;
    BEGIN
      Customer.GET(IBilltoCustomerNo);
      IF UseBilltoAsSelltoCustomer(ICustomerNo, IServiceContractNo) THEN
        ICustomerNo := IBilltoCustomerNo;
      ServiceCollectiveList."No." := '';
      ServiceCollectiveList.VALIDATE("Customer No.", ICustomerNo);
      ServiceCollectiveList.VALIDATE("Bill-to Customer No.", IBilltoCustomerNo);
      ServiceCollectiveList.VALIDATE("Alternative Bill-to Address", IAltBilltoAddressCode);

      IF ServiceOrder.GET(IServiceOrderNo) THEN
        IF ServiceOrder.IsPlantServiceOrder OR ForceCollectByServiceOrder THEN
          Customer."Collect SO Invoices By" := Customer."Collect SO Invoices By"::"Service Order";

      IF Customer."Collect SO Invoices By" = Customer."Collect SO Invoices By"::"Customer - Bill-to Contact Person" THEN
        ServiceCollectiveList.VALIDATE("Bill-to Contact Person No.", IBilltoContactPersonNo)
      ELSE
        ServiceCollectiveList.VALIDATE("Bill-to Contact Person No.", '');

      CASE Customer."Collect SO Invoices By" OF
        Customer."Collect SO Invoices By"::"Service Contract":
          ServiceCollectiveList.VALIDATE("Service Contract No.", IServiceContractNo);
        Customer."Collect SO Invoices By"::Complex:
          BEGIN
            IF NOT ServiceLocation.GET(IServiceLocationNo) THEN
              ServiceLocation.INIT;
            ServiceCollectiveList.VALIDATE("Complex Code", ServiceLocation.GetComplexCode);
          END;
        Customer."Collect SO Invoices By"::"Service Location":
          BEGIN
            IF IServiceContractNo <> '' THEN
              ServiceCollectiveList.VALIDATE("Service Contract No.", IServiceContractNo);
            ServiceCollectiveList.VALIDATE("Service Location No.", IServiceLocationNo);
          END;
        Customer."Collect SO Invoices By"::"Service Order":
          ServiceCollectiveList.VALIDATE("Service Order No.", IServiceOrderNo);
      END;
      FillDefaults(ServiceCollectiveList, IServiceOrderNo);
      ServiceCollectiveList."System-Created Entry" := TRUE;
      IF ServiceOrder.GET(IServiceOrderNo) THEN
        IF ServiceOrder."Bill-to Customer No." = IBilltoCustomerNo THEN
          ServiceCollectiveList."Currency Code" := ServiceOrder."Currency Code"
        ELSE
          ServiceCollectiveList."Currency Code" := Customer."Currency Code";

      //>>180903
      IF ICostObject <> '' THEN
        ServiceCollectiveList."Shortcut Dimension 2 Code" := ICostObject;
      //<<180903

      ServiceCollectiveList.INSERT(TRUE);
      EXIT(ServiceCollectiveList."No.");
    END;

    PROCEDURE CreateCollListSCInvoicingLines@1100528606(ICollectiveListNo@1100528600 : Code[20];IManualMode@1100528621 : Boolean);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceCollectiveList@1100528602 : Record 11071730;
      ServiceContract@1100528603 : Record 11012812;
      ContractInstallment@1100528604 : Record 11071707;
      Customer@1100528612 : Record 18;
      ContractObject@1100528613 : Record 11071702;
      ServiceOrderObject@1100528623 : Record 11071724;
      ServiceSetup@1100525001 : Record 11012800;
      MaintenanceInvoiceMgt@1100528622 : Codeunit 11012828;
      StartingDate@1100528605 : Date;
      StartingDatePeriod@1100528614 : Date;
      NextStartingDatePeriod@1100409000 : Date;
      EndingDate@1100528606 : Date;
      NextEndingDate@1100409001 : Date;
      InvoiceUntil@1100528607 : Date;
      NoMoreValidPeriodsFound@1100528608 : Boolean;
      LineNo@1100528609 : Integer;
      CreateCollListSCInvoiceLine@1100528620 : Boolean;
      CollListSCInvoiceLinesCreated@1100528610 : Boolean;
      NoOfCreatedSCInvoiceLines@1100528611 : Integer;
      RevPerDayLCY@1100528615 : Decimal;
      NoOfDays@1100528616 : Integer;
      RevPerYearLCY@1100528617 : Decimal;
      RevPerDay@1100528618 : Decimal;
      RevPerYear@1100528619 : Decimal;
      RevenueCostObject@1100525000 : Code[20];
    BEGIN
      ServiceOrder.SETCURRENTKEY("Collective List No.");
      ServiceOrder.SETRANGE("Collective List No.", ICollectiveListNo);
      ServiceOrder.SETFILTER("Service Contract No.", '<>%1', '');
      ServiceOrder.SETRANGE("Source Type", ServiceOrder."Source Type"::Contract);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceCollectiveList.GET(ICollectiveListNo);
          ServiceContract.GET(ServiceOrder."Service Contract No.");

          IF IManualMode THEN BEGIN
            ServiceCollectiveList.TESTFIELD(Status, ServiceCollectiveList.Status::Open);
            ServiceContract.TESTFIELD("Installments based on Progress", FALSE);
            ServiceContract.TESTFIELD("Bill-to Customer No. (Contr.)");
            IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN
              ServiceContract.TESTFIELD("Invoice Interval");
            IF ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Framework Contract" THEN
              ServiceContract.FIELDERROR("Contract Form");
            ServiceContract.TESTFIELD("Bill-to Customer No. (Contr.)", ServiceCollectiveList."Bill-to Customer No.");
            ServiceContract.TESTFIELD("Alt. Bill-to Address (Contr.)", ServiceCollectiveList."Alternative Bill-to Address");
            ServiceContract.TESTFIELD("Currency Code", ServiceCollectiveList."Currency Code");
          END;

          IF (ServiceCollectiveList.Status = ServiceCollectiveList.Status::Open) AND
             NOT ServiceContract."Installments based on Progress" AND
             (ServiceContract."Bill-to Customer No. (Contr.)" <> '') AND
             ((ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Installments) OR
              (FORMAT(ServiceContract."Invoice Interval") <> '')) AND
             (ServiceContract."Bill-to Customer No. (Contr.)" = ServiceCollectiveList."Bill-to Customer No.") AND
             (ServiceContract."Alt. Bill-to Address (Contr.)" = ServiceCollectiveList."Alternative Bill-to Address") AND
             (IManualMode OR
               ((ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic) AND ServiceContract."Invoicing via Collective List") OR
               (ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Installments)) AND
             (ServiceContract."Currency Code" = ServiceCollectiveList."Currency Code") AND
             (ServiceContract."Contract Form" <> ServiceContract."Contract Form"::"Framework Contract")
          THEN BEGIN
            Customer.GET(ServiceContract."Bill-to Customer No. (Contr.)");
            RevenueCostObject := Customer."Cost Object";
            IF RevenueCostObject = '' THEN BEGIN
              ServiceSetup.GET;
              ServiceSetup.TESTFIELD("Cost Object Revenues");
              RevenueCostObject := ServiceSetup."Cost Object Revenues";
            END;

            CASE ServiceContract."Invoice Type" OF
              ServiceContract."Invoice Type"::Dynamic:
                BEGIN
                  ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrder."No.");
                  IF ServiceOrderObject.FINDSET THEN BEGIN
                    REPEAT
                      IF ContractObject.GET(ServiceContract."No.", ServiceOrderObject."Object No.") THEN BEGIN
                        ContractObject.TESTFIELD("Invoice From");
                        InvoiceUntil := TODAY;
                        IF (InvoiceUntil > ContractObject."Ending Date") AND (ContractObject."Ending Date" <> 0D) THEN
                          InvoiceUntil := ContractObject."Ending Date";
                        IF (InvoiceUntil > ServiceContract."Ending Date") AND (ServiceContract."Ending Date" <> 0D) THEN
                          InvoiceUntil := ServiceContract."Ending Date";
                        //mg.sc, 15-01-13: C005011
                        IF ContractObject."Invoiced Until" <> 0D THEN
                          StartingDate := ContractObject."Invoiced Until" +1
                        ELSE
                          StartingDate := ContractObject."Invoice From";
                        //mg.ec, 15-01-13: C005011
                        NextStartingDatePeriod := StartingDate;
                        NextEndingDate := CALCDATE(ServiceContract."Invoice Interval", NextStartingDatePeriod) -1;

                        NoMoreValidPeriodsFound := FALSE;
                        CreateCollListSCInvoiceLine := FALSE;
                        IF ((InvoiceUntil >= NextEndingDate) AND
                            (ServiceContract."Invoice Period" = ServiceContract."Invoice Period"::Afterwards)) OR
                           ((InvoiceUntil >= NextStartingDatePeriod) AND
                            (ServiceContract."Invoice Period" = ServiceContract."Invoice Period"::Forehand))
                        THEN BEGIN
                          REPEAT
                            UpdateSCArrangements(ServiceContract."No.", NextEndingDate);
                            IF AreAllSCArrangementsDone(
                              ServiceContract."No.", ContractObject."Service Object No.", NextStartingDatePeriod, NextEndingDate)
                            THEN BEGIN
                              StartingDatePeriod := NextStartingDatePeriod;
                              EndingDate := NextEndingDate;
                              NextStartingDatePeriod := NextEndingDate +1;
                              NextEndingDate := CALCDATE(ServiceContract."Invoice Interval", NextStartingDatePeriod) -1;
                              IF ServiceContract."Dynamic Invoice Type" = ServiceContract."Dynamic Invoice Type"::Days THEN
                                CreateCollListSCInvoiceLine := TRUE
                              ELSE BEGIN
                                CreateCollListSCDynamicInv(
                                  ICollectiveListNo, ContractObject, StartingDatePeriod, EndingDate,
                                  ServiceContract."VAT Prod. Posting Group", RevenueCostObject, 0, LineNo,
                                  NoOfCreatedSCInvoiceLines);
                                ContractObject."Last Invoiced Until" := ContractObject."Invoiced Until";
                                ContractObject."Invoiced Until" := EndingDate;
                                ContractObject.MODIFY(TRUE);
                              END;
                            END ELSE
                              NoMoreValidPeriodsFound := TRUE;
                          UNTIL NoMoreValidPeriodsFound OR
                            ((NextEndingDate > InvoiceUntil) AND
                             (ServiceContract."Invoice Period" = ServiceContract."Invoice Period"::Afterwards)) OR
                            ((NextStartingDatePeriod > InvoiceUntil) AND
                             (ServiceContract."Invoice Period" = ServiceContract."Invoice Period"::Forehand));
                        END;

                        IF CreateCollListSCInvoiceLine THEN BEGIN
                          MaintenanceInvoiceMgt.DetermineInvoiceAmount(
                            ContractObject, EndingDate, ServiceContract, RevPerDayLCY, NoOfDays,
                            RevPerYearLCY, StartingDate, RevPerDay, RevPerYear); // Can change the StartingDate
                          IF EndingDate - StartingDate > 0 THEN BEGIN
                            CreateCollListSCDynamicInv(
                              ICollectiveListNo, ContractObject, StartingDate, EndingDate,
                              ServiceContract."VAT Prod. Posting Group", RevenueCostObject, RevPerDay, LineNo,
                              NoOfCreatedSCInvoiceLines);
                            ContractObject."Last Invoiced Until" := ContractObject."Invoiced Until";
                            ContractObject."Invoiced Until" := EndingDate;
                            ContractObject.MODIFY(TRUE);

                            ServiceContract."Last Invoiced Until" := ServiceContract."Invoiced Until";
                            ServiceContract."Invoiced Until" := EndingDate;
                            ServiceContract.MODIFY(TRUE);
                          END;
                        END;
                      END;
                    UNTIL ServiceOrderObject.NEXT = 0;
                  END;
                END;
              ServiceContract."Invoice Type"::Installments:
                BEGIN
                  ContractInstallment.SETRANGE("Service Contract No.", ServiceContract."No.");
                  ContractInstallment.SETRANGE(Chargeable, TRUE);
                  IF NOT IManualMode THEN
                    ContractInstallment.SETRANGE("Invoicing via Collective List", TRUE);
                  IF ContractInstallment.FINDSET THEN BEGIN
                    REPEAT
                      ContractInstallment.TESTFIELD("Invoice From");
                      ContractInstallment.TESTFIELD("Invoice Interval");
                      InvoiceUntil := TODAY;
                      IF (InvoiceUntil > ContractInstallment."Ending Date") AND (ContractInstallment."Ending Date" <> 0D) THEN
                        InvoiceUntil := ContractInstallment."Ending Date";
                      IF (InvoiceUntil > ServiceContract."Ending Date") AND (ServiceContract."Ending Date" <> 0D) THEN
                        InvoiceUntil := ServiceContract."Ending Date";
                      IF ContractInstallment."Invoiced Until" <> 0D THEN
                        StartingDate := ContractInstallment."Invoiced Until" +1
                      ELSE
                        StartingDate := ContractInstallment."Invoice From";
                      EndingDate := CALCDATE(ContractInstallment."Invoice Interval", StartingDate) -1;
                      UpdateSCArrangements(ServiceContract."No.", InvoiceUntil);

                      NoMoreValidPeriodsFound := FALSE;
                      CollListSCInvoiceLinesCreated := FALSE;
                      IF ((InvoiceUntil >= EndingDate) AND
                          (ContractInstallment."Invoice Period" = ContractInstallment."Invoice Period"::Afterwards)) OR
                         ((InvoiceUntil >= StartingDate) AND
                          (ContractInstallment."Invoice Period" = ContractInstallment."Invoice Period"::Forehand))
                      THEN BEGIN
                        REPEAT
                          UpdateSCArrangements(ServiceContract."No.", EndingDate);
                          IF AreAllSCArrangementsDone(ServiceContract."No.", '', StartingDate, EndingDate) THEN BEGIN
                            CreateCollListSCInstallment(
                              ICollectiveListNo, ContractInstallment, StartingDate, EndingDate,
                              ServiceContract."VAT Prod. Posting Group", RevenueCostObject, LineNo,
                              NoOfCreatedSCInvoiceLines);
                            StartingDate := EndingDate +1;
                            EndingDate := CALCDATE(ContractInstallment."Invoice Interval", StartingDate) -1;
                            CollListSCInvoiceLinesCreated := TRUE;

                            ContractInstallment."Last Invoiced Until" := ContractInstallment."Invoiced Until";
                            ContractInstallment."Invoiced Until" := StartingDate -1;
                            ContractInstallment.MODIFY(TRUE);
                          END ELSE
                            NoMoreValidPeriodsFound := TRUE;
                        UNTIL NoMoreValidPeriodsFound OR
                          ((EndingDate > InvoiceUntil) AND
                           (ContractInstallment."Invoice Period" = ContractInstallment."Invoice Period"::Afterwards)) OR
                          ((StartingDate > InvoiceUntil) AND
                           (ContractInstallment."Invoice Period" = ContractInstallment."Invoice Period"::Forehand));
                      END;
                    UNTIL ContractInstallment.NEXT = 0;
                  END;
                END;
            END;
          END;
        UNTIL ServiceOrder.NEXT = 0;

      IF IManualMode THEN
        MESSAGE(Text002, NoOfCreatedSCInvoiceLines);
    END;

    LOCAL PROCEDURE CreateCollListSCInstallment@1100528616(ICollectiveListNo@1100528605 : Code[20];IContractInstallment@1100528601 : Record 11071707;IInvoiceFromDate@1100528603 : Date;IInvoiceUntilDate@1100528604 : Date;IVATProdPostingGroup@1100528606 : Code[10];ICostObject@1100528608 : Code[20];VAR IOLineNo@1100528602 : Integer;VAR ONoOfCreatedSCInvoiceLines@1100525001 : Integer);
    VAR
      CollectiveListSCInvLine@1100528600 : Record 11071931;
      ServiceContract@1100528609 : Record 11012812;
      Currency@1100528610 : Record 4;
      MaintenanceInvoiceMgt@1100528607 : Codeunit 11012828;
      UnitPrice@1100525000 : Decimal;
    BEGIN
      //DP00628 function rewritten
      IF IOLineNo = 0 THEN BEGIN
        CollectiveListSCInvLine.SETRANGE("Collective List No.", ICollectiveListNo);
        IF CollectiveListSCInvLine.FINDLAST THEN
          IOLineNo := CollectiveListSCInvLine."Line No.";
      END;
      IOLineNo += 10000;

      ServiceContract.GET(IContractInstallment."Service Contract No.");
      IF NOT Currency.GET(ServiceContract."Currency Code") THEN
        Currency.InitRoundingPrecision;

      IF ServiceContract."Installment Type" = ServiceContract."Installment Type"::Object THEN
        MaintenanceInvoiceMgt.DetermineInstallmentAmount(ServiceContract."No.", IInvoiceFromDate);

      CollectiveListSCInvLine."Collective List No." := ICollectiveListNo;
      CollectiveListSCInvLine."Line No." := IOLineNo;
      CollectiveListSCInvLine.Type := CollectiveListSCInvLine.Type::Installment;
      CollectiveListSCInvLine.Description := IContractInstallment.Description;
      CollectiveListSCInvLine."Description 2" := STRSUBSTNO('%1 - %2', FORMAT(IInvoiceFromDate), FORMAT(IInvoiceUntilDate));
      CollectiveListSCInvLine."Service Control Period Date" :=
        MaintenanceInvoiceMgt.GetServiceControlPeriodDate(IContractInstallment."Service Contract No.", IContractInstallment."Line No.", IInvoiceFromDate);
      CollectiveListSCInvLine.Quantity := 1;
      CollectiveListSCInvLine."Currency Date" := IInvoiceUntilDate;
      CollectiveListSCInvLine."Currency Code" := ServiceContract."Currency Code";
      CollectiveListSCInvLine."Installment Line No." := IContractInstallment."Line No.";
      CollectiveListSCInvLine."Service Contract No." := IContractInstallment."Service Contract No.";
      CollectiveListSCInvLine."Cost Object" := ICostObject;
      CollectiveListSCInvLine."Prev. Last Invoiced Until" := IContractInstallment."Last Invoiced Until";
      CollectiveListSCInvLine."Prev. Invoiced Until" := IContractInstallment."Invoiced Until";

      UnitPrice := MaintenanceInvoiceMgt.GetInstallmAmntByDate(IContractInstallment);

      VATBreakDown(CollectiveListSCInvLine,IOLineNo,ONoOfCreatedSCInvoiceLines,UnitPrice,IVATProdPostingGroup,Currency."Amount Rounding Precision");

      CreateCollListSCInstallmSalesDiscount(
        ICollectiveListNo, IContractInstallment, IInvoiceFromDate, IInvoiceUntilDate, IVATProdPostingGroup, ICostObject, UnitPrice, IOLineNo, ONoOfCreatedSCInvoiceLines);
    END;

    LOCAL PROCEDURE CreateCollListSCDynamicInv@1100528604(ICollectiveListNo@1100528605 : Code[20];IContractObject@1100528601 : Record 11071702;IInvoiceFromDate@1100528603 : Date;IInvoiceUntilDate@1100528604 : Date;IVATProdPostingGroup@1100528606 : Code[10];ICostObject@1100528608 : Code[20];IUnitPrice@1100528607 : Decimal;VAR IOLineNo@1100528602 : Integer;VAR ONoOfCreatedSCInvoiceLines@1100525001 : Integer);
    VAR
      CollectiveListSCInvLine@1100528600 : Record 11071931;
      ServiceContract@1100528609 : Record 11012812;
      Currency@1100528610 : Record 4;
      MaintenanceManagement@1100525000 : Codeunit 11012829;
      MaintenanceInvoiceMgt@1100528611 : Codeunit 11012828;
    BEGIN
      //DP00628 function rewritten
      IF IOLineNo = 0 THEN BEGIN
        CollectiveListSCInvLine.SETRANGE("Collective List No.", ICollectiveListNo);
        IF CollectiveListSCInvLine.FINDLAST THEN
          IOLineNo := CollectiveListSCInvLine."Line No.";
      END;
      IOLineNo += 10000;

      ServiceContract.GET(IContractObject."Service Contract No.");
      IF NOT Currency.GET(ServiceContract."Currency Code") THEN
        Currency.InitRoundingPrecision;

      IContractObject.CALCFIELDS("Service Object Description");

      CollectiveListSCInvLine."Collective List No." := ICollectiveListNo;
      CollectiveListSCInvLine."Line No." := IOLineNo;
      CollectiveListSCInvLine.Type := CollectiveListSCInvLine.Type::Dynamic;
      CollectiveListSCInvLine."Service Contract No." := IContractObject."Service Contract No.";
      CollectiveListSCInvLine."Service Object No." := IContractObject."Service Object No.";
      CollectiveListSCInvLine."Service Location No." := IContractObject."Service Location No.";
      CollectiveListSCInvLine.Description :=
        COPYSTR(STRSUBSTNO('%1 %2', IContractObject."Service Object Description", IContractObject."Service Object Description 2"), 1, MAXSTRLEN(CollectiveListSCInvLine.Description));
      CollectiveListSCInvLine."Description 2" := STRSUBSTNO('%1 - %2', FORMAT(IInvoiceFromDate), FORMAT(IInvoiceUntilDate));
      CollectiveListSCInvLine."Service Control Period Date" :=
        MaintenanceInvoiceMgt.GetServiceControlPeriodDate(IContractObject."Service Contract No.", 0, IInvoiceUntilDate);
      CollectiveListSCInvLine."Currency Date" := IInvoiceUntilDate;
      CollectiveListSCInvLine."Currency Code" := ServiceContract."Currency Code";
      CollectiveListSCInvLine."Cost Object" := ICostObject;
      CASE ServiceContract."Dynamic Invoice Type" OF
        ServiceContract."Dynamic Invoice Type"::Days:
          BEGIN
            CollectiveListSCInvLine.Quantity := IInvoiceUntilDate - IInvoiceFromDate +1;
            CollectiveListSCInvLine."Unit of Measure" := Text000;
          END;
        ServiceContract."Dynamic Invoice Type"::"Invoice Interval":
          BEGIN
            CollectiveListSCInvLine.Quantity := IContractObject.GetQuantity(IInvoiceUntilDate);
            IUnitPrice :=
              IContractObject.GetObjectInvAmountPerYear(IInvoiceUntilDate) /
              MaintenanceManagement.ConvPeriodToTimesPerYear(ServiceContract."Invoice Interval");
          END;
      END;
      CollectiveListSCInvLine."Prev. Last Invoiced Until" := IContractObject."Last Invoiced Until";
      CollectiveListSCInvLine."Prev. Invoiced Until" := IContractObject."Invoiced Until";

      IF IUnitPrice <> 0 THEN
        VATBreakDown(
          CollectiveListSCInvLine,IOLineNo,ONoOfCreatedSCInvoiceLines,IUnitPrice,IVATProdPostingGroup,
          Currency."Amount Rounding Precision");

      CreateCollListSCDynSalesDiscount(
        ICollectiveListNo, IContractObject, IInvoiceFromDate, IInvoiceUntilDate, IVATProdPostingGroup, ICostObject, IOLineNo, ONoOfCreatedSCInvoiceLines);
    END;

    LOCAL PROCEDURE CreateCollListSCInstallmSalesDiscount@1100528617(ICollectiveListNo@1100528607 : Code[20];IContractInstallment@1100528606 : Record 11071707;IInvoiceFromDate@1100528605 : Date;IInvoiceUntilDate@1100528604 : Date;IVATProdPostingGroup@1100528603 : Code[10];ICostObject@1100528602 : Code[20];IUnitPrice@1100528617 : Decimal;VAR IOLineNo@1100528601 : Integer;VAR ONoOfCreatedSCInvoiceLines@1100528600 : Integer);
    VAR
      CollectiveListSCInvLine@1100528610 : Record 11071931;
      ServiceSalesDiscSurch@1100528609 : Record 11072237;
      LastServiceSalesDiscSurch@1100528625 : Record 11072237;
      ServiceContract@1100528620 : Record 11012812;
      Currency@1100528619 : Record 4;
      Date@1100528623 : Record 2000000007;
      MaintenanceInvoiceMgt@1100528621 : Codeunit 11012828;
      UnitPrice@1100528616 : Decimal;
      AmountPerMonth@1100528622 : Decimal;
      LastDiscountCalcStartDate@1100528624 : Date;
      LastDiscountCalcEndDate@1100528626 : Date;
      DiscountPeriodEnd@1100528608 : Date;
    BEGIN
      Date.SETRANGE("Period Type", Date."Period Type"::Month);
      Date.SETRANGE("Period Start", IInvoiceFromDate, IInvoiceUntilDate);
      IF NOT Date.FINDSET THEN
        EXIT;
      LastDiscountCalcStartDate := IInvoiceFromDate;
      REPEAT
        IF IContractInstallment.GetServiceSalesDiscount(Date."Period Start", ServiceSalesDiscSurch, DiscountPeriodEnd) THEN BEGIN
          IF FORMAT(LastServiceSalesDiscSurch) <> FORMAT(ServiceSalesDiscSurch) THEN BEGIN
            IOLineNo += 10000;

            CollectiveListSCInvLine.INIT;
            CollectiveListSCInvLine."Collective List No." := ICollectiveListNo;
            CollectiveListSCInvLine."Line No." := IOLineNo;
            CollectiveListSCInvLine.Type := CollectiveListSCInvLine.Type::Installment;
            CollectiveListSCInvLine.Description := ServiceSalesDiscSurch.Description;
            CollectiveListSCInvLine."Service Control Period Date" :=
              MaintenanceInvoiceMgt.GetServiceControlPeriodDate(IContractInstallment."Service Contract No.", IContractInstallment."Line No.", IInvoiceUntilDate);
            CollectiveListSCInvLine.Quantity := 1;
            CollectiveListSCInvLine."Currency Date" := IInvoiceUntilDate;
            CollectiveListSCInvLine."Currency Code" := ServiceContract."Currency Code";
            CollectiveListSCInvLine."Installment Line No." := IContractInstallment."Line No.";
            CollectiveListSCInvLine."Service Contract No." := IContractInstallment."Service Contract No.";
            CollectiveListSCInvLine."Cost Object" := ICostObject;
            IF LastServiceSalesDiscSurch.Code <> '' THEN BEGIN
              CollectiveListSCInvLine.Description := LastServiceSalesDiscSurch.Description;
              CollectiveListSCInvLine."Description 2" := STRSUBSTNO('%1 - %2', FORMAT(LastDiscountCalcStartDate), FORMAT(LastDiscountCalcEndDate));
              IF UnitPrice <> 0 THEN
                VATBreakDown(
                  CollectiveListSCInvLine, IOLineNo, ONoOfCreatedSCInvoiceLines, UnitPrice, IVATProdPostingGroup, Currency."Amount Rounding Precision");
              LastDiscountCalcStartDate := LastDiscountCalcEndDate +1;
              IF LastDiscountCalcStartDate < ServiceSalesDiscSurch."Starting Date" THEN
                LastDiscountCalcStartDate := ServiceSalesDiscSurch."Starting Date";
              UnitPrice := 0;
            END;
            LastServiceSalesDiscSurch := ServiceSalesDiscSurch;
          END;

          IF ServiceSalesDiscSurch.Percentage <> 0 THEN BEGIN
            AmountPerMonth := IUnitPrice / MaintenanceInvoiceMgt.ConvertPeriodToNoOfMonths(IContractInstallment."Invoice Interval");
            UnitPrice += -AmountPerMonth * ServiceSalesDiscSurch.Percentage / 100
          END ELSE
            UnitPrice += -ServiceSalesDiscSurch.Amount / MaintenanceInvoiceMgt.ConvertPeriodToNoOfMonths(ServiceSalesDiscSurch.Period);
          LastDiscountCalcEndDate := NORMALDATE(Date."Period End");
          IF LastDiscountCalcEndDate > IInvoiceUntilDate THEN
            LastDiscountCalcEndDate := IInvoiceUntilDate;
          IF LastDiscountCalcEndDate > DiscountPeriodEnd THEN
            LastDiscountCalcEndDate := DiscountPeriodEnd;
        END;
      UNTIL Date.NEXT = 0;
      IF UnitPrice <> 0 THEN BEGIN
        CollectiveListSCInvLine.Description := LastServiceSalesDiscSurch.Description;
        CollectiveListSCInvLine."Description 2" := STRSUBSTNO('%1 - %2', FORMAT(LastDiscountCalcStartDate), FORMAT(LastDiscountCalcEndDate));
        VATBreakDown(
          CollectiveListSCInvLine, IOLineNo, ONoOfCreatedSCInvoiceLines, UnitPrice, IVATProdPostingGroup, Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE CreateCollListSCDynSalesDiscount@1100528618(ICollectiveListNo@1100528608 : Code[20];IContractObject@1100528607 : Record 11071702;IInvoiceFromDate@1100528606 : Date;IInvoiceUntilDate@1100528605 : Date;IVATProdPostingGroup@1100528604 : Code[10];ICostObject@1100528603 : Code[20];VAR IOLineNo@1100528601 : Integer;VAR ONoOfCreatedSCInvoiceLines@1100528600 : Integer);
    VAR
      CollectiveListSCInvLine@1100528609 : Record 11071931;
      ServiceSalesDiscSurch@1100528611 : Record 11072237;
      LastServiceSalesDiscSurch@1100528624 : Record 11072237;
      ServiceContract@1100528614 : Record 11012812;
      Date@1100528622 : Record 2000000007;
      Currency@1100528621 : Record 4;
      MaintenanceInvoiceMgt@1100528602 : Codeunit 11012828;
      UnitPrice@1100528619 : Decimal;
      AmountPerMonth@1100528610 : Decimal;
      LastDiscountCalcStartDate@1100528623 : Date;
      LastDiscountCalcEndDate@1100528625 : Date;
      DiscountPeriodEnd@1100528612 : Date;
    BEGIN
      Date.SETRANGE("Period Type", Date."Period Type"::Month);
      Date.SETRANGE("Period Start", IInvoiceFromDate, IInvoiceUntilDate);
      IF NOT Date.FINDSET THEN
        EXIT;
      LastDiscountCalcStartDate := IInvoiceFromDate;
      REPEAT
        IF IContractObject.GetServiceSalesDiscount(Date."Period Start", ServiceSalesDiscSurch, DiscountPeriodEnd) THEN BEGIN
          IF FORMAT(LastServiceSalesDiscSurch) <> FORMAT(ServiceSalesDiscSurch) THEN BEGIN
            IOLineNo += 10000;

            CollectiveListSCInvLine.INIT;
            CollectiveListSCInvLine."Collective List No." := ICollectiveListNo;
            CollectiveListSCInvLine."Line No." := IOLineNo;
            CollectiveListSCInvLine.Type := CollectiveListSCInvLine.Type::Dynamic;
            CollectiveListSCInvLine."Service Contract No." := IContractObject."Service Contract No.";
            CollectiveListSCInvLine."Service Object No." := IContractObject."Service Object No.";
            CollectiveListSCInvLine."Service Location No." := IContractObject."Service Location No.";
            CollectiveListSCInvLine."Service Control Period Date" :=
              MaintenanceInvoiceMgt.GetServiceControlPeriodDate(IContractObject."Service Contract No.", 0, IInvoiceUntilDate);
            CollectiveListSCInvLine."Currency Date" := IInvoiceUntilDate;
            CollectiveListSCInvLine."Currency Code" := ServiceContract."Currency Code";
            CollectiveListSCInvLine."Cost Object" := ICostObject;
            IF LastServiceSalesDiscSurch.Code <> '' THEN BEGIN
              CollectiveListSCInvLine.Description := LastServiceSalesDiscSurch.Description;
              CollectiveListSCInvLine."Description 2" := STRSUBSTNO('%1 - %2', FORMAT(LastDiscountCalcStartDate), FORMAT(LastDiscountCalcEndDate));
              IF UnitPrice <> 0 THEN
                VATBreakDown(
                  CollectiveListSCInvLine, IOLineNo, ONoOfCreatedSCInvoiceLines, UnitPrice, IVATProdPostingGroup, Currency."Amount Rounding Precision");
              LastDiscountCalcStartDate := LastDiscountCalcEndDate +1;
              IF LastDiscountCalcStartDate < ServiceSalesDiscSurch."Starting Date" THEN
                LastDiscountCalcStartDate := ServiceSalesDiscSurch."Starting Date";
              UnitPrice := 0;
            END;
            LastServiceSalesDiscSurch := ServiceSalesDiscSurch;
          END;

          IF ServiceSalesDiscSurch.Percentage <> 0 THEN BEGIN
            AmountPerMonth := IContractObject.GetObjectInvAmountPerYear(IInvoiceUntilDate) / 12;
            UnitPrice += -AmountPerMonth * ServiceSalesDiscSurch.Percentage / 100
          END ELSE
            UnitPrice += -ServiceSalesDiscSurch.Amount / MaintenanceInvoiceMgt.ConvertPeriodToNoOfMonths(ServiceSalesDiscSurch.Period);
          LastDiscountCalcEndDate := NORMALDATE(Date."Period End");
          IF LastDiscountCalcEndDate > IInvoiceUntilDate THEN
            LastDiscountCalcEndDate := IInvoiceUntilDate;
          IF LastDiscountCalcEndDate > DiscountPeriodEnd THEN
            LastDiscountCalcEndDate := DiscountPeriodEnd;
        END;
      UNTIL Date.NEXT = 0;
      IF UnitPrice <> 0 THEN BEGIN
        CollectiveListSCInvLine.Description := LastServiceSalesDiscSurch.Description;
        CollectiveListSCInvLine."Description 2" := STRSUBSTNO('%1 - %2', FORMAT(LastDiscountCalcStartDate), FORMAT(LastDiscountCalcEndDate));
        VATBreakDown(
          CollectiveListSCInvLine, IOLineNo, ONoOfCreatedSCInvoiceLines, UnitPrice, IVATProdPostingGroup, Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE VATBreakDown@1100525003(VAR CollectiveListSCInvLine@1100525002 : Record 11071931;VAR LineNo@1100525006 : Integer;VAR NoOfCreatedSCInvoiceLines@1100525007 : Integer;UnitPrice@1100525004 : Decimal;VATProdPostGroupCde@1100525005 : Code[10];RoundingPrecision@1100525003 : Decimal);
    VAR
      ServiceContractVATBreakdown@1100525001 : Record 11071995;
      TotalVATBreakdownPercentage@1100525000 : Decimal;
    BEGIN
      //DP00628
      ServiceContractVATBreakdown.SETRANGE("Service Contract No.",CollectiveListSCInvLine."Service Contract No.");
      ServiceContractVATBreakdown.SETFILTER("Breakdown Percentage", '>0');
      IF ServiceContractVATBreakdown.FINDSET THEN
        REPEAT
          InsertCollectiveListSCInvLine(
            CollectiveListSCInvLine,LineNo,NoOfCreatedSCInvoiceLines,ServiceContractVATBreakdown."VAT Prod. Posting Group",
            UnitPrice*ServiceContractVATBreakdown."Breakdown Percentage"/100,RoundingPrecision);
          TotalVATBreakdownPercentage := TotalVATBreakdownPercentage + ServiceContractVATBreakdown."Breakdown Percentage";
        UNTIL ServiceContractVATBreakdown.NEXT = 0;

      IF TotalVATBreakdownPercentage < 100 THEN
        InsertCollectiveListSCInvLine(
          CollectiveListSCInvLine,LineNo,NoOfCreatedSCInvoiceLines,
          VATProdPostGroupCde,UnitPrice*(100-TotalVATBreakdownPercentage)/100,RoundingPrecision);
    END;

    LOCAL PROCEDURE InsertCollectiveListSCInvLine@1100525002(VAR CollectiveListSCInvLine@1100525000 : Record 11071931;VAR LineNo@1100525005 : Integer;VAR NoOfCreatedSCInvoiceLines@1100525003 : Integer;VATProdPostGroupCde@1100525001 : Code[10];UnitPrice@1100525002 : Decimal;RoundingPrecision@1100525004 : Decimal);
    BEGIN
      //DP00628
      WITH CollectiveListSCInvLine DO BEGIN
        "Line No." := LineNo;
        VALIDATE("Unit Price",UnitPrice);
        VALIDATE(Amount,ROUND("Unit Price" * Quantity,RoundingPrecision));
        "VAT Prod. Posting Group" := VATProdPostGroupCde;
        INSERT(TRUE);
      END;

      LineNo += 10000;
      NoOfCreatedSCInvoiceLines := NoOfCreatedSCInvoiceLines + 1;
    END;

    PROCEDURE UpdateSCArrangements@1100528605(IServiceContractNo@1100528601 : Code[20];IEndingDate@1100528600 : Date);
    VAR
      ContractObjectMaintenance@1100528602 : Record 11071692;
    BEGIN
      ContractObjectMaintenance.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ContractObjectMaintenance.FINDSET THEN
        REPEAT
          ContractObjectMaintenance.UpdateServiceContractArr(IEndingDate, TRUE, FALSE, FALSE);
        UNTIL ContractObjectMaintenance.NEXT = 0;
    END;

    PROCEDURE AreAllSCArrangementsDone@1100528603(IServiceContractNo@1100528603 : Code[20];IServiceObjectNo@1100528604 : Code[20];IStartingDate@1100528601 : Date;IEndingDate@1100528602 : Date) : Boolean;
    VAR
      ServiceContractArrangement@1100528600 : Record 11071705;
    BEGIN
      ServiceContractArrangement.SETRANGE("Service Contract No.", IServiceContractNo);
      IF IServiceObjectNo <> '' THEN
        ServiceContractArrangement.SETRANGE("Object No.", IServiceObjectNo);
      ServiceContractArrangement.SETRANGE("Theoretical Maintenance Date", IStartingDate, IEndingDate);
      ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
      IF ServiceContractArrangement.FINDSET THEN BEGIN
        REPEAT
          ServiceContractArrangement.CALCFIELDS("Service Order No.");
          ServiceContractArrangement.CALCFIELDS(Finished, "Service Order Status");
          IF NOT ServiceContractArrangement.Finished AND
            (ServiceContractArrangement."Service Order Status" <> ServiceContractArrangement."Service Order Status"::Cancelled)
          THEN
            EXIT(FALSE);
        UNTIL ServiceContractArrangement.NEXT = 0;
        EXIT(TRUE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE RemoveCollListSCInvocingLines@1100528610(ICollectiveListNo@1100528600 : Code[20]);
    VAR
      ServiceCollectiveList@1100528602 : Record 11071730;
      CollectiveListSCInvLine@1100528601 : Record 11071931;
      ContractInstallment@1100528603 : Record 11071707;
      ContractObject@1100528604 : Record 11071702;
      ServiceContract@1100528605 : Record 11012812;
    BEGIN
      ServiceCollectiveList.GET(ICollectiveListNo);
      ServiceCollectiveList.TESTFIELD(Status, ServiceCollectiveList.Status::Open);

      CollectiveListSCInvLine.SETRANGE("Collective List No.", ICollectiveListNo);
      CollectiveListSCInvLine.SETRANGE(Invoiced, FALSE);
      CollectiveListSCInvLine.SETRANGE(Type, CollectiveListSCInvLine.Type::Installment);
      IF CollectiveListSCInvLine.FINDLAST THEN
        REPEAT
          IF ContractInstallment.GET(
            CollectiveListSCInvLine."Service Contract No.", CollectiveListSCInvLine."Installment Line No.") THEN BEGIN
            IF CollectiveListSCInvLine."Prev. Invoiced Until" = ContractInstallment."Last Invoiced Until" THEN BEGIN
              ContractInstallment."Last Invoiced Until" := CollectiveListSCInvLine."Prev. Last Invoiced Until";
              ContractInstallment."Invoiced Until" := CollectiveListSCInvLine."Prev. Invoiced Until";
              ContractInstallment.MODIFY(TRUE);
            END;
          END;
          CollectiveListSCInvLine.DELETE(TRUE);
        UNTIL CollectiveListSCInvLine.NEXT(-1) = 0;

      CollectiveListSCInvLine.SETRANGE(Type, CollectiveListSCInvLine.Type::Dynamic);
      IF CollectiveListSCInvLine.FINDLAST THEN
        REPEAT
          IF ContractObject.GET(CollectiveListSCInvLine."Service Contract No.", CollectiveListSCInvLine."Service Object No.") THEN BEGIN
            IF CollectiveListSCInvLine."Prev. Invoiced Until" = ContractObject."Last Invoiced Until" THEN BEGIN
              ContractObject."Last Invoiced Until" := CollectiveListSCInvLine."Prev. Last Invoiced Until";
              ContractObject."Invoiced Until" := CollectiveListSCInvLine."Prev. Invoiced Until";
              ContractObject.MODIFY(TRUE);
            END;
            ServiceContract.GET(CollectiveListSCInvLine."Service Contract No.");
            ServiceContract.MARK(TRUE);
          END;
          CollectiveListSCInvLine.DELETE(TRUE);
        UNTIL CollectiveListSCInvLine.NEXT(-1) = 0;

      ServiceContract.MARKEDONLY(TRUE);
      IF ServiceContract.FINDSET(TRUE) THEN
        REPEAT
          ServiceContract."Invoiced Until" := ServiceContract."Last Invoiced Until";
          ServiceContract."Last Invoiced Until" := 0D;
          ServiceContract.MODIFY(TRUE);
        UNTIL ServiceContract.NEXT = 0;
    END;

    PROCEDURE CollectiveListSCInvoicingExist@1100528602(IServiceContractNo@1100528600 : Code[20];VAR OCollectiveListNo@1100528601 : Code[20]) : Boolean;
    VAR
      CollectiveListInstallment@1100528602 : Record 11071931;
    BEGIN
      CollectiveListInstallment.SETCURRENTKEY("Service Contract No.");
      CollectiveListInstallment.SETRANGE("Service Contract No.", IServiceContractNo);
      CollectiveListInstallment.SETRANGE(Invoiced, FALSE);
      IF CollectiveListInstallment.FINDFIRST THEN BEGIN
        OCollectiveListNo := CollectiveListInstallment."Collective List No.";
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE FilterSCInvLinesInvInProgAmt@1100528608(ICollectiveListSCInvLine@1100528601 : Record 11071931;ICreditMode@1100528600 : Boolean;VAR OSalesLine@1100528602 : Record 37);
    BEGIN
      OSalesLine.SETCURRENTKEY("Document Type", "Collective List No.");
      IF NOT ICreditMode THEN
        OSalesLine.SETRANGE("Document Type", OSalesLine."Document Type"::Invoice)
      ELSE
        OSalesLine.SETRANGE("Document Type", OSalesLine."Document Type"::"Credit Memo");
      OSalesLine.SETRANGE("Service Invoice", TRUE);
      OSalesLine.SETRANGE("Collective List No.", ICollectiveListSCInvLine."Collective List No.");
      OSalesLine.SETRANGE("Coll.-List SC Inv. Line No.", ICollectiveListSCInvLine."Line No.");
    END;

    PROCEDURE GetSCInvLinesInvInProgAmt@1100528607(ICollectiveListSCInvLine@1100528601 : Record 11071931;ICreditMode@1100528602 : Boolean) : Decimal;
    VAR
      SalesLine@1100528600 : Record 37;
    BEGIN
      FilterSCInvLinesInvInProgAmt(ICollectiveListSCInvLine, ICreditMode, SalesLine);
      IF SalesLine.FINDFIRST THEN
        EXIT(SalesLine."Amount (LCY)");
    END;

    PROCEDURE LookupSCInvLinesInvInProgAmt@1100528614(ICollectiveListSCInvLine@1100528601 : Record 11071931;ICreditMode@1100528602 : Boolean);
    VAR
      SalesLine@1100528600 : Record 37;
    BEGIN
      FilterSCInvLinesInvInProgAmt(ICollectiveListSCInvLine, ICreditMode, SalesLine);
      PAGE.RUNMODAL(0, SalesLine);
    END;

    PROCEDURE FilterSCInvLinesInvoicedAmt@1100528609(ICollectiveListSCInvLine@1100528602 : Record 11071931;VAR OServiceLedgerEntry@1100528601 : Record 11012819);
    BEGIN
      //changed CALL C005313 FunctionCall from report 11012730  Local Yes --> No
      OServiceLedgerEntry.SETCURRENTKEY("Service Contract No.");
      OServiceLedgerEntry.SETRANGE("Service Contract No.", ICollectiveListSCInvLine."Service Contract No.");
      OServiceLedgerEntry.SETRANGE("Collective List No.", ICollectiveListSCInvLine."Collective List No.");
      OServiceLedgerEntry.SETRANGE("Coll.-List SC Inv. Line No.", ICollectiveListSCInvLine."Line No.");
    END;

    PROCEDURE GetSCInvLinesInvoicedAmt@1100528611(ICollectiveListSCInvLine@1100528601 : Record 11071931) : Decimal;
    VAR
      ServiceLedgerEntry@1100528600 : Record 11012819;
    BEGIN
      FilterSCInvLinesInvoicedAmt(ICollectiveListSCInvLine, ServiceLedgerEntry);
      IF ServiceLedgerEntry.FINDFIRST THEN
        EXIT(ServiceLedgerEntry."Total Revenue (LCY)");
    END;

    PROCEDURE LookupSCInvLinesInvoicedAmt@1100528612(ICollectiveListSCInvLine@1100528600 : Record 11071931);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      FilterSCInvLinesInvoicedAmt(ICollectiveListSCInvLine, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    PROCEDURE UseBilltoAsSelltoCustomer@1100528613(ICustomerNo@1100528600 : Code[20];IServiceContractNo@1100528601 : Code[20]) : Boolean;
    VAR
      ServiceContract@1100528602 : Record 11012812;
      Customer@1100528603 : Record 18;
    BEGIN
      IF IServiceContractNo <> '' THEN BEGIN
        IF NOT ServiceContract.GET(IServiceContractNo) THEN
          ServiceContract.INIT;
        EXIT(ServiceContract."Use Bill-to as Sell-to (CP)");
      END;

      IF ICustomerNo <> '' THEN BEGIN
        IF NOT Customer.GET(ICustomerNo) THEN
          Customer.INIT;
        EXIT(Customer."Use Bill-to as Sell-to Custom.");
      END;
    END;

    PROCEDURE FillDefaults@1100528615(VAR OServiceCollectiveList@1100528600 : Record 11071730;IServiceOrderNo@1100528606 : Code[20]);
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ServiceOrder@1100528602 : Record 11012823;
      Customer@1100528605 : Record 18;
      ServiceContractNo@1100528603 : Code[20];
    BEGIN
      ServiceContractNo := OServiceCollectiveList."Service Contract No.";
      IF ServiceContractNo = '' THEN
        IF ServiceOrder.GET(OServiceCollectiveList."Service Order No.") THEN
          ServiceContractNo := ServiceOrder."Service Contract No.";
      IF ServiceContractNo <> '' THEN BEGIN
        ServiceContract.GET(ServiceContractNo);
        OServiceCollectiveList.VALIDATE("Invoice Period", ServiceContract."Invoice Period (Coll. List)");
        OServiceCollectiveList.VALIDATE("Minimal Invoice Amount", ServiceContract."Min. Inv. Amount (Coll. List)");
      END ELSE
        IF Customer.GET(OServiceCollectiveList."Bill-to Customer No.") THEN BEGIN
          OServiceCollectiveList.VALIDATE("Invoice Period", Customer."Invoice Period (Coll. List)");
          OServiceCollectiveList.VALIDATE("Minimal Invoice Amount", Customer."Min. Inv. Amount (Coll. List)");
        END;
      IF FORMAT(OServiceCollectiveList."Invoice Period") <> '' THEN
        OServiceCollectiveList.VALIDATE("Starting Date", DetermineStartingDate(OServiceCollectiveList, IServiceOrderNo));
    END;

    PROCEDURE DetermineStartingDate@1100528621(VAR OServiceCollectiveList@1100528600 : Record 11071730;IServiceOrderNo@1100528601 : Code[20]) : Date;
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      ServiceContractCtrlPeriod@1100528605 : Record 11071746;
      ServiceControlPeriod@1100528606 : Record 11071755;
      ServiceContractNo@1100528604 : Code[20];
      PeriodFrom@1100528607 : Date;
      PeriodTo@1100528609 : Date;
      SeekDate@1100528608 : Date;
    BEGIN
      SeekDate := DetermineSOStartingDate(IServiceOrderNo);
      ServiceContractNo := OServiceCollectiveList."Service Contract No.";
      IF ServiceContractNo = '' THEN
        IF ServiceOrder.GET(IServiceOrderNo) THEN
          ServiceContractNo := ServiceOrder."Service Contract No.";
      IF ServiceContractNo <> '' THEN BEGIN
        ServiceContractCtrlPeriod.UpdateControlPeriodsUntil(ServiceContractNo, SeekDate, FALSE);
        ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", ServiceContractNo);
        ServiceContractCtrlPeriod.SETFILTER("Starting Date", '<=%1', SeekDate);
        ServiceContractCtrlPeriod.SETFILTER("Ending Date", '>=%1', SeekDate);
        IF ServiceContractCtrlPeriod.FINDFIRST THEN
          PeriodFrom := ServiceContractCtrlPeriod."Starting Date"
        ELSE
          ERROR(STRSUBSTNO(Text003, ServiceContractNo, SeekDate));
      END ELSE BEGIN
        ServiceControlPeriod.SETFILTER("Starting Date", '<=%1', SeekDate);
        ServiceControlPeriod.SETFILTER("Ending Date", '>=%1', SeekDate);
        IF ServiceControlPeriod.FINDFIRST THEN
          PeriodFrom := ServiceControlPeriod."Starting Date"
        ELSE
          ERROR(STRSUBSTNO(Text004, SeekDate));
      END;
      PeriodTo := CALCDATE(OServiceCollectiveList."Invoice Period", PeriodFrom) -1;
      WHILE (PeriodFrom <= SeekDate) AND (PeriodTo < SeekDate) DO BEGIN
        PeriodFrom := PeriodTo +1;
        PeriodTo := CALCDATE(OServiceCollectiveList."Invoice Period", PeriodFrom) -1;
      END;
      EXIT(PeriodFrom);
    END;

    PROCEDURE DetermineSOStartingDate@1100528629(IServiceOrderNo@1100528600 : Code[20]) SeekDate : Date;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(IServiceOrderNo) THEN
        SeekDate := ServiceOrder.GetStartingDate;
      IF SeekDate = 0D THEN
        SeekDate := WORKDATE;
    END;

    PROCEDURE ReleaseServiceCollectiveList@1100528619(VAR IServiceCollectiveList@1100528600 : Record 11071730;IRecalculate@1100528601 : Boolean);
    BEGIN
      IServiceCollectiveList.FIND('=');
      IServiceCollectiveList.TESTFIELD(Status, IServiceCollectiveList.Status::Open);
      IF IRecalculate THEN
        IServiceCollectiveList.Recalculate;
      IServiceCollectiveList.VALIDATE(Status, IServiceCollectiveList.Status::Released);
      IServiceCollectiveList.MODIFY(TRUE);
      COMMIT;
    END;

    PROCEDURE ReleaseServiceCollectiveLists@1100528620(VAR IServiceCollectiveList@1100528600 : Record 11071730;IRecalculate@1100528602 : Boolean);
    VAR
      ServiceCollectiveList@1100528601 : Record 11071730;
    BEGIN
      ServiceCollectiveList.COPY(IServiceCollectiveList);
      ServiceCollectiveList.SetDontConfirmRecalculateAtRelease(TRUE);
      IF ServiceCollectiveList.FINDSET THEN
        REPEAT
          ReleaseServiceCollectiveList(ServiceCollectiveList, IRecalculate);
        UNTIL ServiceCollectiveList.NEXT = 0;
    END;

    PROCEDURE ReopenServiceCollectiveList@1100528622(VAR IServiceCollectiveList@1100528600 : Record 11071730);
    BEGIN
      IServiceCollectiveList.FIND('=');
      IServiceCollectiveList.VALIDATE(Status, IServiceCollectiveList.Status::Open);
      IServiceCollectiveList.MODIFY(TRUE);
    END;

    BEGIN
    {
      180903 ORANGO.DL CostObject (global dim 2) from CostPlusEntry to SalesHead
    }
    END.
  }
}

