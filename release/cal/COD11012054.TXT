OBJECT Codeunit 11012054 Excel Quote Comparison
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjSetupRec@1210190012 : Record 315;
      EstSetupRec@1100485012 : Record 11012150;
      PurchActRec@1210190003 : Record 11012026;
      EstPurchActRec@1100485003 : Record 11012366;
      TmpQuoteCompPaRec@1210190000 : TEMPORARY Record 11012074;
      CompQuoteRec@1210190006 : Record 11020214;
      TmpQuoteCompCqRec@1210190010 : TEMPORARY Record 11012063;
      TmpExcelBufferRec@1210190004 : TEMPORARY Record 370;
      FileMgt@1100525500 : Codeunit 419;
      ExcelEnumeration@1100528701 : Codeunit 11012375;
      ExcelAutomation@1100528700 : Codeunit 11012402;
      gRunType@1210190011 : 'QuoteCompByPurchAct,QuoteComparison,QuoteCompByEstPurchAct';
      StartRowLines@1210190005 : Integer;
      RowNo@1210190002 : Integer;
      ColumnNo@1210190001 : Integer;
      Text000@1210190007 : TextConst 'DEU=Angebotsvergleich;ENU=Quote Comparison;NLD=Offertevergelijking;NOR=Tilbudssammenligning;SVE=OffertjÑmfîrelse';
      Text001@1210190014 : TextConst 'DEU=Datei îffnen,Datei Åberschreiben;ENU=Open File,Overwrite File;NLD=Bestand openen,Bestand overschrijven;NOR=èpne fil, Skriv over fil;SVE=ôppna fil,Skriv îver fil';
      Text002@1210190008 : TextConst 'DEU=VK-Preis;ENU=Unit Price;NLD=Prijs;NOR=Enhetspris;SVE=A-pris';
      Text003@1210190009 : TextConst 'DEU=Betrag;ENU=Amount;NLD=Bedrag;NOR=Belõp;SVE=Belopp';
      DirContNo@1100485001 : Text[200];
      ExcelFileName@1210190013 : Text[300];
      Text004@1100485000 : TextConst 'DEU=Keine Angebote der Einkaufsmarkierung vorhanden.;ENU=No Quotes of Purchase Action present.;NLD=Geen offertes aanwezig van inkoopactie.;NOR=Ingen tilbud for Innkjõpshandling tilstede;SVE=Det finns inga offerter fîr inkîpsÜtgÑrden.';
      gvElementLevel@1100525001 : Boolean;
      Text005@1100525002 : TextConst 'DEU=Element in Angebotsvergleich aufnehmen;ENU=Include Element in Price Comparison;NLD=Element opnemen in offertevergelijking;NOR=Inkluder element i sammenligning av pris;SVE=Inklusive element i prisjÑmfîrelse';
      Text009@1100528702 : TextConst 'DEU=Seite 1;ENU=Sheet1;NLD=Blad1;SVE=Blad1';

    [External]
    PROCEDURE RunQuoteCompByPurchAction@1210190000(IProjNo@1210190001 : Code[20];IPurchAction@1210190000 : Code[10]);
    VAR
      lvProjectElementRec@1100525000 : Record 11012010;
      CreateNewExcelSheet@1100528400 : Boolean;
    BEGIN
      gRunType := gRunType::QuoteCompByPurchAct;
      IF (IProjNo = '') OR (IPurchAction = '') THEN
        ERROR('');
      PurchActRec.GET(IProjNo, IPurchAction);

      InitRun(CreateNewExcelSheet);
      IF NOT CreateNewExcelSheet THEN
        EXIT;

      TmpQuoteCompPaRec.RESET;
      TmpQuoteCompPaRec.DELETEALL;

      lvProjectElementRec.SETRANGE("Project No.", IProjNo);
      IF lvProjectElementRec.ISEMPTY THEN BEGIN
        TmpQuoteCompPaRec.CreateLines(TmpQuoteCompPaRec, IProjNo, IPurchAction, TRUE, FALSE);
      END ELSE BEGIN
        IF CONFIRM(Text005, FALSE) THEN
          gvElementLevel := TRUE
        ELSE
          gvElementLevel := FALSE;
        TmpQuoteCompPaRec.CreateLines(TmpQuoteCompPaRec, IProjNo, IPurchAction, TRUE, gvElementLevel);
      END;

      FillHeaderQcPa();
      FillVendorHeaderQcPa();
      FillLinesQcPa();

      CreateExcelSheet();
    END;

    [External]
    PROCEDURE RunQuoteCompByEstPurchAction@1100485001(IEstNo@1210190001 : Code[20];IPurchAction@1210190000 : Code[10]);
    VAR
      CreateNewExcelSheet@1100528400 : Boolean;
    BEGIN
      gRunType := gRunType::QuoteCompByEstPurchAct;

      IF (IEstNo = '') OR (IPurchAction = '') THEN
        ERROR('');

      EstPurchActRec.GET(IEstNo, IPurchAction);

      InitRun(CreateNewExcelSheet);
      IF NOT CreateNewExcelSheet THEN
        EXIT;

      TmpQuoteCompPaRec.RESET;
      TmpQuoteCompPaRec.DELETEALL;
      TmpQuoteCompPaRec.CreateLinesfromEstimate(TmpQuoteCompPaRec, IEstNo, IPurchAction, TRUE);

      FillHeaderQcPa();
      FillVendorHeaderQcPa();
      FillLinesQcPa();

      CreateExcelSheet();
    END;

    [External]
    PROCEDURE RunQuoteComparison@1210190001(ICompQuote@1210190001 : Code[20];CurrencyCode@1100528900 : Code[10]);
    VAR
      CreateNewExcelSheet@1100528400 : Boolean;
    BEGIN
      gRunType := gRunType::QuoteComparison;
      IF (ICompQuote = '') THEN
        ERROR('');
      CompQuoteRec.RESET;
      CompQuoteRec.SETRANGE("Comparison Quote", ICompQuote);
      CompQuoteRec.FINDFIRST;

      InitRun(CreateNewExcelSheet);
      IF NOT CreateNewExcelSheet THEN
        EXIT;

      TmpQuoteCompCqRec.RESET;
      TmpQuoteCompCqRec.DELETEALL;
      TmpQuoteCompCqRec.CreateQuoteCompLines(TmpQuoteCompCqRec, ICompQuote, CurrencyCode);  //DP01137
      TmpQuoteCompCqRec.CreateQuoteCompTotalLine(TmpQuoteCompCqRec, ICompQuote, CurrencyCode);  //DP01137

      FillHeaderCq(CurrencyCode);  //DP01137
      FillQuoteHeaderCq(ICompQuote);
      FillLinesCq(ICompQuote);

      CreateExcelSheet();
    END;

    LOCAL PROCEDURE InitRun@1210190008(VAR CreateNewExcelSheet@1100528400 : Boolean);
    VAR
      ToFileName@1100525000 : Text;
      lvOptionNo@1210190000 : Integer;
      lvText000@1100485000 : TextConst 'DEU=Angebotsvergleich-;ENU=QuoteComparison-;NLD=Offertevergelijking-;NOR=Tilbudssammenligning;SVE=OffertjÑmfîrelse-';
    BEGIN
      ProjSetupRec.GET;
      IF gRunType = gRunType::QuoteCompByEstPurchAct THEN BEGIN
        EstSetupRec.GET;
        EstSetupRec.TESTFIELD("Path Quote Comp. Excel Files");
        DirContNo := EstSetupRec."Path Quote Comp. Excel Files";
      END ELSE BEGIN
        ProjSetupRec.TESTFIELD("Path Quote Comp. Excel Files");
        DirContNo := ProjSetupRec."Path Quote Comp. Excel Files";
      END;

      GetContactNo();

      CLEAR(TmpExcelBufferRec);
      TmpExcelBufferRec.RESET;
      TmpExcelBufferRec.DELETEALL;

      StartRowLines := 6;
      CASE gRunType OF
        gRunType::QuoteCompByPurchAct:
          ExcelFileName := DirContNo + lvText000 + PurchActRec."Project No." +'-'+ PurchActRec.Code + '.xlsx';
        gRunType::QuoteComparison:
          ExcelFileName := DirContNo + lvText000 + CompQuoteRec."Comparison Quote" + '.xlsx';
        gRunType::QuoteCompByEstPurchAct:
          ExcelFileName := DirContNo + lvText000 + EstPurchActRec."Estimate No." +'-'+ EstPurchActRec.Code + '.xlsx';
        ELSE
          ERROR('');
      END;

      CreateNewExcelSheet := TRUE;
      IF FileMgt.ClientFileExists(ExcelFileName) THEN BEGIN
        lvOptionNo := STRMENU(Text001, 1);
        CASE lvOptionNo OF
          1:
            BEGIN
              IF FileMgt.IsWebClient THEN BEGIN
                ToFileName := FileMgt.GetFileName(ExcelFileName);
                FileMgt.DownloadHandler(ExcelFileName, '', '', '', ToFileName);
              END ELSE BEGIN
                ExcelAutomation.InitExcel;
                ExcelAutomation.OpenWorkbook(ExcelFileName);
                ExcelAutomation.GiveUserControl;
              END;
              CreateNewExcelSheet := FALSE;
            END;
          2:
            FileMgt.DeleteClientFile4PS(ExcelFileName, TRUE);
          ELSE
            ERROR('');
        END;
      END;
    END;

    [External]
    PROCEDURE GetContactNo@1100485000();
    VAR
      lvPurchHeadRec@1100485000 : Record 38;
    BEGIN
      //DirContNo := '';

      IF NOT ProjSetupRec."Quote Comp. Excel by Contact" THEN
        EXIT;

      CASE gRunType OF
        gRunType::QuoteCompByPurchAct:
          BEGIN
            lvPurchHeadRec.SETCURRENTKEY("Document Type","Job No.");
            lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Quote);
            lvPurchHeadRec.SETRANGE("Job No.", PurchActRec."Project No.");
            lvPurchHeadRec.SETRANGE("Purchase Action", PurchActRec.Code);
            lvPurchHeadRec.SETFILTER("Comparison Quote", '<>%1', '');
            IF lvPurchHeadRec.FINDFIRST THEN
              lvPurchHeadRec.GET(lvPurchHeadRec."Document Type"::Quote, lvPurchHeadRec."Comparison Quote")
            ELSE BEGIN
              lvPurchHeadRec.SETRANGE("Comparison Quote", '');
              IF NOT lvPurchHeadRec.FINDFIRST THEN
                ERROR(Text004);
            END;
          END;
        gRunType::QuoteComparison:
          BEGIN
            lvPurchHeadRec.GET(lvPurchHeadRec."Document Type"::Quote, CompQuoteRec."Comparison Quote");
          END;
        gRunType::QuoteCompByEstPurchAct:
          BEGIN
            lvPurchHeadRec.SETCURRENTKEY("Document Type","Job No.");
            lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Quote);
            lvPurchHeadRec.SETRANGE("Estimate No.", EstPurchActRec."Estimate No.");
            lvPurchHeadRec.SETRANGE("Purchase Action", EstPurchActRec.Code);
            lvPurchHeadRec.SETFILTER("Comparison Quote", '<>%1', '');
            IF lvPurchHeadRec.FINDFIRST THEN
              lvPurchHeadRec.GET(lvPurchHeadRec."Document Type"::Quote, lvPurchHeadRec."Comparison Quote")
            ELSE BEGIN
              lvPurchHeadRec.SETRANGE("Comparison Quote", '');
              IF NOT lvPurchHeadRec.FINDFIRST THEN
                ERROR(Text004);
            END;
          END;
        ELSE
          ERROR('');
      END;

      //ProjSetupRec.TESTFIELD("Path Quote Comp. Excel Files");
      lvPurchHeadRec.TESTFIELD("Buy-from Contact No.");
    END;

    LOCAL PROCEDURE FillHeaderQcPa@1210190002();
    BEGIN
      CASE gRunType OF
        gRunType::QuoteCompByPurchAct:
        BEGIN
          WITH PurchActRec DO BEGIN
            EnterCell(1, 1, Text000, TRUE, FALSE, FALSE, 0,'', TmpExcelBufferRec."Cell Type"::Text);

            CALCFIELDS("Project Description");
            EnterCell(2, 1, FIELDCAPTION("Project No."), TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(2, 2, "Project No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(2, 3, "Project Description", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);

            EnterCell(3, 1, FIELDCAPTION(Code), TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(3, 2, Code, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(3, 3, Description, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          END;
        END;
        gRunType::QuoteCompByEstPurchAct:
        BEGIN
          WITH EstPurchActRec DO BEGIN
            EnterCell(1, 1, Text000, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);

            CALCFIELDS("Estimate Description");
            EnterCell(2, 1, FIELDCAPTION("Estimate No."), TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(2, 2, "Estimate No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(2, 3, "Estimate Description", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);

            EnterCell(3, 1, FIELDCAPTION(Code), TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(3, 2, Code, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
            EnterCell(3, 3, Description, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE FillVendorHeaderQcPa@1210190003();
    VAR
      lvPurchActVendRec@1210190000 : Record 11012068;
      lvQuoteLineRec@1210190001 : Record 39;
      lvDecimal@1100485000 : Decimal;
    BEGIN
      WITH lvPurchActVendRec DO BEGIN
        CASE gRunType OF
          gRunType::QuoteCompByPurchAct:
            BEGIN
              SETRANGE(Source, lvPurchActVendRec.Source::Project);
              SETRANGE("Project No.", PurchActRec."Project No.");
              SETRANGE("Purchase Action", PurchActRec.Code);
            END;
          gRunType::QuoteCompByEstPurchAct:
            BEGIN
              SETRANGE(Source, lvPurchActVendRec.Source::Estimate);
              SETRANGE("Estimate No.", EstPurchActRec."Estimate No.");
              SETRANGE("Purchase Action", EstPurchActRec.Code);
            END;
        END;

        IF NOT FINDSET THEN
          EXIT;

        lvQuoteLineRec.RESET;
        lvQuoteLineRec.SETCURRENTKEY("Document Type", "Buy-from Vendor No.", "Job No.", "Purchase Action");
        lvQuoteLineRec.SETRANGE("Document Type", lvQuoteLineRec."Document Type"::Quote);

        CASE gRunType OF
          gRunType::QuoteCompByPurchAct:
            BEGIN
              lvQuoteLineRec.SETRANGE("Job No.", "Project No.");
              lvQuoteLineRec.SETRANGE("Purchase Action", "Purchase Action");
            END;
          gRunType::QuoteCompByEstPurchAct:
            BEGIN
              lvQuoteLineRec.SETRANGE("Estimate No.", "Estimate No.");
              lvQuoteLineRec.SETRANGE("Purchase Action", "Purchase Action");
            END;
        END;

        ColumnNo := 9;
        REPEAT
          CalcFieldsVendor();
          IF (Type <> Type::Contact) THEN BEGIN
            lvQuoteLineRec.SETRANGE("Buy-from Vendor No.", "Vendor No.");
            lvQuoteLineRec.SETRANGE("Buy-from Contact No.");  //* Reset filter
          END ELSE BEGIN
            lvQuoteLineRec.SETRANGE("Buy-from Vendor No.");  //* Reset filter
            lvQuoteLineRec.SETRANGE("Buy-from Contact No.", "Vendor No.");
          END;
          IF NOT lvQuoteLineRec.FINDFIRST THEN
            lvQuoteLineRec."Document No." := '';

          IF EVALUATE(lvDecimal, "Vendor No.") THEN    //**4PS 11-09-2008
            EnterCell(2, ColumnNo, '''' + "Vendor No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text)  //**4PS 11-09-2008
          ELSE
            EnterCell(2, ColumnNo, "Vendor No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          EnterCell(3, ColumnNo, "Vendor Name", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          IF EVALUATE(lvDecimal, lvQuoteLineRec."Document No.") THEN    //**4PS 11-09-2008
            EnterCell(4, ColumnNo, '''' + lvQuoteLineRec."Document No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text) //**4PS 11-09-2008
          ELSE
            EnterCell(4, ColumnNo, lvQuoteLineRec."Document No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);

          EnterCell(StartRowLines, ColumnNo, TmpQuoteCompPaRec.FIELDCAPTION(Quantity), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;

          EnterCell(StartRowLines, ColumnNo, Text002, TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;

          EnterCell(StartRowLines, ColumnNo, Text003, TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillLinesQcPa@1210190004();
    VAR
      lvDecimal@1100485000 : Decimal;
    BEGIN
      WITH TmpQuoteCompPaRec DO BEGIN
        RowNo := StartRowLines;
        IF gvElementLevel THEN BEGIN
          EnterCell(RowNo, 1, FIELDCAPTION(Element), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        END;
        EnterCell(RowNo, 2, FIELDCAPTION("Cost Object"), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(RowNo, 3, FIELDCAPTION(Description), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        //EnterCell(RowNo, 4, FIELDCAPTION(Quantity), TRUE, FALSE, TRUE, 0,'');
        EnterCell(RowNo, 5, Text002, TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(RowNo, 6, FIELDCAPTION("Unit of Measure"), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        //EnterCell(RowNo, 7, FIELDCAPTION(Budget), TRUE, FALSE, TRUE, 0,'');

        RESET;
        CASE gRunType OF
          gRunType::QuoteCompByPurchAct:
            BEGIN
              EnterCell(RowNo, 4, FIELDCAPTION(Quantity), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
              EnterCell(RowNo, 7, FIELDCAPTION(Budget), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
              SETRANGE("Project No.", PurchActRec."Project No.");
              SETRANGE("Purchase Action", PurchActRec.Code);
            END;
          gRunType::QuoteCompByEstPurchAct:
            BEGIN
              EnterCell(RowNo, 4, FIELDCAPTION("Estimate Quantity"), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
              EnterCell(RowNo, 7, FIELDCAPTION("Estimate Amount"), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
              SETRANGE("Estimate No.", EstPurchActRec."Estimate No.");
              SETRANGE("Purchase Action", EstPurchActRec.Code);
            END;
        END;

        IF FIND('-') THEN BEGIN
          REPEAT
            RowNo := RowNo + 1;
            CASE Type OF
              Type::"Cost Object":
                BEGIN
                  CASE gRunType OF
                    gRunType::QuoteCompByPurchAct:
                      BEGIN
                        IF gvElementLevel THEN
                          SETRANGE(ElementFilter, Element);
                        CALCFIELDS(Quantity, "Unit of Measure", Budget);
                        IF Quantity <> 0 THEN
                          EnterCell(RowNo, 5,
                                    STRSUBSTNO('%1',ROUND((Budget / Quantity), 0.00001)), FALSE, FALSE, FALSE, 2, '', TmpExcelBufferRec."Cell Type"::Number);
                        EnterCell(RowNo, 4, STRSUBSTNO('%1', Quantity), FALSE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number);
                        EnterCell(RowNo, 6, "Unit of Measure", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                        EnterCell(RowNo, 7, STRSUBSTNO('%1', Budget), FALSE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number);
                      END;
                    gRunType::QuoteCompByEstPurchAct:
                      BEGIN
                        EnterCell(RowNo, 4, STRSUBSTNO('%1', "Estimate Quantity"), FALSE, FALSE, FALSE, 2, '', TmpExcelBufferRec."Cell Type"::Number);
                        IF "Estimate Quantity" <> 0 THEN
                          EnterCell(RowNo, 5,
                                    STRSUBSTNO('%1',ROUND(("Estimate Amount" / "Estimate Quantity"), 0.00001)),
                                               FALSE, FALSE, FALSE, 2, '', TmpExcelBufferRec."Cell Type"::Number);
                        EnterCell(RowNo, 6, "Unit of Measure Code", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                        EnterCell(RowNo, 7, STRSUBSTNO('%1', "Estimate Amount"), FALSE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number);
                      END;
                  END;
                  IF gvElementLevel THEN BEGIN
                    EnterCell(RowNo, 1, Element, FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                  END;
                  IF EVALUATE(lvDecimal, "Cost Object") THEN                                 //**4PS 11-09-2008
                    EnterCell(RowNo, 2, '''' + "Cost Object", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text)    //**4PS 11-09-2008
                  ELSE
                    EnterCell(RowNo, 2, "Cost Object", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                  EnterCell(RowNo, 3, Description, FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                END;
              Type::Total:
                BEGIN
                  IF gRunType = gRunType::QuoteCompByEstPurchAct THEN BEGIN
                    RowNo := RowNo + 1;
                  END;
                  CALCFIELDS("Total Budget");
                  EnterCell(RowNo, 2, Description, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                  EnterCell(
                    RowNo, 7, '', TRUE, FALSE, FALSE, 1,
                    STRSUBSTNO('SUM(G$%1:G$%2)', StartRowLines + 1, RowNo - 1), // Use always EN functionnames without '='
                    TmpExcelBufferRec."Cell Type"::Text);
                END;
            END;
            FillVendorLinesQcPa();
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE FillVendorLinesQcPa@1210190005();
    VAR
      lvPurchActVendRec@1210190000 : Record 11012068;
      lvQuoteLineRec@1210190001 : Record 39;
      lvQuoteHeader@1100485000 : Record 38;
      lvFormula@1100485001 : Text[250];
      QuoteCompAmt@1100525000 : Decimal;
      QuoteCompQty@1100525001 : Decimal;
    BEGIN
      WITH lvQuoteLineRec DO BEGIN

        CASE gRunType OF
          gRunType::QuoteCompByPurchAct:
            BEGIN
              lvPurchActVendRec.SETRANGE(Source, lvPurchActVendRec.Source::Project);
              lvPurchActVendRec.SETRANGE("Project No.", PurchActRec."Project No.");
              lvPurchActVendRec.SETRANGE("Purchase Action", PurchActRec.Code);
            END;
          gRunType::QuoteCompByEstPurchAct:
            BEGIN
              lvPurchActVendRec.SETRANGE(Source, lvPurchActVendRec.Source::Estimate);
              lvPurchActVendRec.SETRANGE("Estimate No.", EstPurchActRec."Estimate No.");
              lvPurchActVendRec.SETRANGE("Purchase Action", EstPurchActRec.Code);
            END;
        END;

        IF NOT lvPurchActVendRec.FIND('-') THEN
          EXIT;

        ColumnNo := 9;
        REPEAT
          RESET;
          SETCURRENTKEY("Document Type", "Buy-from Vendor No.", "Job No.", "Purchase Action");
          IF (lvPurchActVendRec.Type <> lvPurchActVendRec.Type::Contact) THEN
            SETRANGE("Buy-from Vendor No.", lvPurchActVendRec."Vendor No.")
          ELSE
            SETRANGE("Buy-from Contact No.", lvPurchActVendRec."Vendor No.");
          SETRANGE("Document Type", "Document Type"::Quote);

          CASE gRunType OF
            gRunType::QuoteCompByPurchAct:
              BEGIN
                SETRANGE("Job No.",  PurchActRec."Project No.");
                SETRANGE("Purchase Action", PurchActRec.Code);
              END;
            gRunType::QuoteCompByEstPurchAct:
              BEGIN
                SETRANGE("Estimate No.",  EstPurchActRec."Estimate No.");
                SETRANGE("Purchase Action", EstPurchActRec.Code);
              END;
          END;

          CASE TmpQuoteCompPaRec.Type OF
            TmpQuoteCompPaRec.Type::"Cost Object":
              BEGIN
                SETRANGE("Shortcut Dimension 2 Code", TmpQuoteCompPaRec."Cost Object");
                SETRANGE(Description, TmpQuoteCompPaRec.Description);
                SETRANGE("Unit of Measure Code", TmpQuoteCompPaRec."Unit of Measure Code");
                CLEAR(lvQuoteHeader);
                IF FINDFIRST THEN BEGIN
                  lvQuoteHeader.GET(lvQuoteLineRec."Document Type",lvQuoteLineRec."Document No.");
                  {
                  //*C-019112.so
                  CALCFIELDS("Quote Comparison");
                  IF lvQuoteHeader."Amounts only" THEN
                    EnterCell(RowNo, (ColumnNo + 2),
                      STRSUBSTNO('%1',ROUND("Quote Comparison", 0.00001)), FALSE, FALSE, FALSE, 1,'')
                  ELSE BEGIN
                    CALCFIELDS("Quote Comparison Quantity");
                    EnterCell(RowNo, ColumnNo, STRSUBSTNO('%1', "Quote Comparison Quantity"), FALSE, FALSE, FALSE, 1,'');
                    IF ("Quote Comparison Quantity" <> 0) THEN
                      EnterCell(RowNo, (ColumnNo + 1),
                        STRSUBSTNO('%1',ROUND(("Quote Comparison" / "Quote Comparison Quantity"), 0.00001)), FALSE, FALSE, FALSE, 2,'');
                  END;
                  } //*C-019112.eo
                  //*C-019112.sn
                  QuoteCompAmt := lvPurchActVendRec.CalcSumQuoteComparison(
                    1, TmpQuoteCompPaRec."Cost Object", TmpQuoteCompPaRec."Unit of Measure Code", TmpQuoteCompPaRec.Description);
                  IF lvQuoteHeader."Amounts only" THEN
                    EnterCell(RowNo, (ColumnNo + 2), STRSUBSTNO('%1',ROUND(QuoteCompAmt, 0.00001)), FALSE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number)
                  ELSE BEGIN
                    QuoteCompQty := lvPurchActVendRec.CalcSumQuoteComparison(
                      3, TmpQuoteCompPaRec."Cost Object", TmpQuoteCompPaRec."Unit of Measure Code", TmpQuoteCompPaRec.Description);
                    EnterCell(RowNo, ColumnNo, STRSUBSTNO('%1', QuoteCompQty), FALSE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number);
                    IF (QuoteCompQty <> 0) THEN
                      EnterCell(RowNo, (ColumnNo + 1),
                        STRSUBSTNO('%1',ROUND((QuoteCompAmt / QuoteCompQty), 0.00001)), FALSE, FALSE, FALSE, 2, '', TmpExcelBufferRec."Cell Type"::Number);
                  END;
                  //*C-019112.en
                END;
                IF NOT lvQuoteHeader."Amounts only" THEN BEGIN
                  lvFormula := STRSUBSTNO(('=%1' + '%2' + '*' + '%3' + '%4'),
                               ExcelAutomation.GetColumnIDFromCol(ColumnNo), RowNo,
                               ExcelAutomation.GetColumnIDFromCol(ColumnNo + 1),RowNo);
                  EnterCell(RowNo, (ColumnNo + 2),'', FALSE, FALSE, FALSE, 1, lvFormula, TmpExcelBufferRec."Cell Type"::Text);
                END;
              END;
            TmpQuoteCompPaRec.Type::Total:
              BEGIN
                EnterCell(
                  RowNo, (ColumnNo + 2), '', TRUE, FALSE, FALSE, 1,
                  STRSUBSTNO('SUM(%3$%1:%3$%2)', (StartRowLines + 1), (RowNo - 1), ExcelAutomation.GetColumnIDFromCol(ColumnNo + 2)), // Use always EN functionnames without '='
                  TmpExcelBufferRec."Cell Type"::Text);
              END;
          END;
          ColumnNo := ColumnNo + 3;
        UNTIL lvPurchActVendRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillHeaderCq@1210190006(CurrencyCode@1100528901 : Code[10]);
    VAR
      Job@1100528900 : Record 11072003;
    BEGIN
      WITH CompQuoteRec DO BEGIN
        EnterCell(1, 1, Text000, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);

        EnterCell(3, 1, FIELDCAPTION("Comparison Quote"), TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(3, 2, "Comparison Quote", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        //DP01137.sn
        EnterCell(4, 1, Job.FIELDCAPTION("Currency Code"), TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(4, 2, CurrencyCode, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        //DP01137.en
      END;
    END;

    LOCAL PROCEDURE FillQuoteHeaderCq@1210190010(ICompQuote@1210190002 : Code[20]);
    BEGIN
      WITH CompQuoteRec DO BEGIN
        RESET;
        SETRANGE("Comparison Quote", ICompQuote);
        IF NOT FIND('-') THEN
          EXIT;

        ColumnNo := 8;
        REPEAT
          CALCFIELDS("Buy-from Vendor No.", "Buy-from Contact No.", "Buy-from Vendor Name");

          EnterCell(2, ColumnNo, "Quote No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          IF ("Buy-from Vendor No." <> '') THEN
            EnterCell(3, ColumnNo, "Buy-from Vendor No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text)
          ELSE
            EnterCell(3, ColumnNo, "Buy-from Contact No.", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          EnterCell(4, ColumnNo, "Buy-from Vendor Name", TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          EnterCell(StartRowLines, ColumnNo, Text002, TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;

          EnterCell(StartRowLines, ColumnNo, Text003, TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillLinesCq@1210190015(ICompQuote@1210190001 : Code[20]);
    BEGIN
      WITH TmpQuoteCompCqRec DO BEGIN
        RowNo := StartRowLines;
        EnterCell(RowNo, 1, FIELDCAPTION("Cost Object"), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(RowNo, 2, FIELDCAPTION("Item No."), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(RowNo, 3, FIELDCAPTION(Description), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(RowNo, 4, FIELDCAPTION(Quantity), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
        EnterCell(RowNo, 5, FIELDCAPTION("Unit of Measure Code"), TRUE, FALSE, TRUE, 0, '', TmpExcelBufferRec."Cell Type"::Text);

        RESET;
        SETCURRENTKEY("Comparison Quote", "Line Type", "Cost Object", "Item No.");
        SETFILTER("Line Type", '%1|%2', "Line Type"::Line, "Line Type"::Total);
        SETRANGE("Comparison Quote", ICompQuote);
        IF FIND('-') THEN BEGIN
          REPEAT
            RowNo := RowNo + 1;
            CASE "Line Type" OF
              "Line Type"::Line:
                BEGIN
                  EnterCell(RowNo, 1, "Cost Object", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                  EnterCell(RowNo, 2, "Item Composition", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                  EnterCell(RowNo, 3, Description + ' ' + "Description 2", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                  EnterCell(RowNo, 4, STRSUBSTNO('%1', Quantity), FALSE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number);
                  EnterCell(RowNo, 5, "Unit of Measure Code", FALSE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                END;
              "Line Type"::Total:
                BEGIN
                  EnterCell(RowNo, 1, Description, TRUE, FALSE, FALSE, 0, '', TmpExcelBufferRec."Cell Type"::Text);
                END;
            END;
            FillQuoteLinesCq(ICompQuote, ("Line Type" = "Line Type"::Total));
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE FillQuoteLinesCq@1210190017(ICompQuote@1210190002 : Code[20];ITotalMode@1210190003 : Boolean);
    VAR
      lvTmpQuoteCompRec2@1210190000 : TEMPORARY Record 11012063;
    BEGIN
      WITH CompQuoteRec DO BEGIN
        RESET;
        SETRANGE("Comparison Quote", ICompQuote);
        IF NOT FIND('-') THEN
          EXIT;

        ColumnNo := 8;
        lvTmpQuoteCompRec2.COPY(TmpQuoteCompCqRec);  //* Save
        TmpQuoteCompCqRec.RESET;
        TmpQuoteCompCqRec.SETCURRENTKEY("Line Type", "Comparison Quote", "Quote No.", "Line No.", "Quote Line No.");
        TmpQuoteCompCqRec.SETRANGE("Line Type", TmpQuoteCompCqRec."Line Type"::"Quote Line");
        TmpQuoteCompCqRec.SETRANGE("Comparison Quote", ICompQuote);

        REPEAT
          TmpQuoteCompCqRec.SETRANGE("Quote No.", "Quote No.");
          IF NOT ITotalMode THEN
            TmpQuoteCompCqRec.SETRANGE("Line No.", lvTmpQuoteCompRec2."Line No.")
          ELSE
            TmpQuoteCompCqRec.SETRANGE("Line No.");  //* Reset filter
          IF TmpQuoteCompCqRec.FIND('-') THEN BEGIN
            TmpQuoteCompCqRec.CALCSUMS(Amount);
            IF NOT ITotalMode THEN BEGIN
              IF (lvTmpQuoteCompRec2.Quantity <> 0) THEN
                EnterCell(RowNo, ColumnNo,
                  STRSUBSTNO('%1',ROUND((TmpQuoteCompCqRec.Amount/lvTmpQuoteCompRec2.Quantity), 0.00001)), FALSE, FALSE, FALSE, 2, '', TmpExcelBufferRec."Cell Type"::Number);
              EnterCell(RowNo, (ColumnNo + 1), STRSUBSTNO('%1', TmpQuoteCompCqRec.Amount), FALSE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number);
            END ELSE BEGIN
              EnterCell(RowNo, (ColumnNo + 1), STRSUBSTNO('%1', TmpQuoteCompCqRec.Amount), TRUE, FALSE, FALSE, 1, '', TmpExcelBufferRec."Cell Type"::Number);
            END;
          END;
          ColumnNo := ColumnNo + 2;
        UNTIL NEXT = 0;

        TmpQuoteCompCqRec.COPY(lvTmpQuoteCompRec2);  //* Restore
      END;
    END;

    LOCAL PROCEDURE EnterCell@2(IRowNo@1000 : Integer;IColumnNo@1001 : Integer;ICellValue@1002 : Text[250];IBold@1003 : Boolean;IItalic@1004 : Boolean;IUnderLine@1005 : Boolean;IFormatNo@1210190000 : Integer;IFormula@1000000000 : Text[250];CellType@1100525000 : Option);
    BEGIN
      WITH TmpExcelBufferRec DO BEGIN
        INIT;
        VALIDATE("Row No.", IRowNo);
        VALIDATE("Column No.", IColumnNo);
        "Cell Value as Text" := ICellValue;
        Formula := IFormula;
        Bold := IBold;
        Italic := IItalic;
        Underline := IUnderLine;
        CASE IFormatNo OF
          1:
            NumberFormat := '#.##0,00';
          2:
            NumberFormat := '#.##0,00###';
        END;
        "Cell Type" := CellType;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateExcelSheet@1210190014();
    VAR
      ToFileName@1100525000 : Text;
    BEGIN
      WITH TmpExcelBufferRec DO BEGIN
        CreateBook('',Text000);
        WriteSheet('', COMPANYNAME, USERID);
        CloseBook;
        MoveFileToClient(ExcelFileName);
        IF FileMgt.IsWebClient THEN BEGIN
          ToFileName := FileMgt.GetFileName(ExcelFileName);
          FileMgt.DownloadHandler(ExcelFileName, '', '', '', ToFileName);
          EXIT;
        END;

        ExcelAutomation.InitExcel;
        ExcelAutomation.OpenWorkbook(ExcelFileName);
        CASE gRunType OF
          gRunType::QuoteCompByPurchAct:
            BEGIN
              IF FIND('+') THEN BEGIN
                ExcelAutomation.SetCurrentSheet(Text000);
                ExcelAutomation.AutoFit(1, 7);
                ExcelAutomation.SetColumnWidthInRange('H1', 2);
                ExcelAutomation.SetColumnWidthInRange('I1:' + xlColID + '1', 12);
                ExcelAutomation.SetHorzAlignmentInRange('B2:B3', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('I2:' + xlColID + '2', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('I4:' + xlColID + '4', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('D' + FORMAT(StartRowLines) + ':E' + FORMAT(StartRowLines), ExcelEnumeration.XlHAlign_xlHAlignGeneral);
                ExcelAutomation.SetHorzAlignmentInRange('G' + FORMAT(StartRowLines) + ':G' + FORMAT(StartRowLines), ExcelEnumeration.XlHAlign_xlHAlignGeneral);
                ExcelAutomation.SetHorzAlignmentInRange('I' + FORMAT(StartRowLines) + ':' + xlColID + FORMAT(StartRowLines), ExcelEnumeration.XlHAlign_xlHAlignGeneral);
              END;
            END;
          gRunType::QuoteComparison:
            BEGIN
              IF FIND('+') THEN BEGIN
                ExcelAutomation.SetCurrentSheet(Text000);
                ExcelAutomation.AutoFit(1, 5);
                ExcelAutomation.SetColumnWidthInRange('F1', 2);
                ExcelAutomation.SetColumnWidthInRange('G1:' + xlColID + '1', 12);
                ExcelAutomation.SetHorzAlignmentInRange('B3:B3', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('G2:' + xlColID + '3', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('D' + FORMAT(StartRowLines) + ':D' + FORMAT(StartRowLines), 4);
                ExcelAutomation.SetHorzAlignmentInRange('G' + FORMAT(StartRowLines) + ':' + xlColID + FORMAT(StartRowLines), 4);
              END;
            END;
          gRunType::QuoteCompByEstPurchAct:
            BEGIN
              IF FIND('+') THEN BEGIN
                ExcelAutomation.SetCurrentSheet(Text000);
                ExcelAutomation.AutoFit(1, 7);
                ExcelAutomation.SetColumnWidthInRange('H1', 2);
                ExcelAutomation.SetColumnWidthInRange('I1:' + xlColID + '1', 12);
                ExcelAutomation.SetHorzAlignmentInRange('B2:B3', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('I2:' + xlColID + '2', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('I4:' + xlColID + '4', ExcelEnumeration.XlHAlign_xlHAlignLeft);
                ExcelAutomation.SetHorzAlignmentInRange('D' + FORMAT(StartRowLines) + ':E' + FORMAT(StartRowLines), ExcelEnumeration.XlHAlign_xlHAlignGeneral);
                ExcelAutomation.SetHorzAlignmentInRange('G' + FORMAT(StartRowLines) + ':G' + FORMAT(StartRowLines), ExcelEnumeration.XlHAlign_xlHAlignGeneral);
                ExcelAutomation.SetHorzAlignmentInRange('I' + FORMAT(StartRowLines) + ':' + xlColID + FORMAT(StartRowLines), ExcelEnumeration.XlHAlign_xlHAlignGeneral);
              END;
            END;
        END;
        ExcelAutomation.SaveWorkbook;
        ExcelAutomation.GiveUserControl;
      END;
    END;

    PROCEDURE AllPurchQuoteCompToExcel@13(ProjectNo@1100485000 : Code[20]);
    VAR
      ProjectElement@1100525000 : Record 11012010;
      ProjectPurchaseAction@1100525007 : Record 11012026;
      XlWrkBk@1100525002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      XlWrkSht@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      I@1100525008 : Integer;
      First@1100525004 : Boolean;
      SheetName@1100528700 : Text;
      SheetNo@1100528701 : Integer;
    BEGIN
      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(Text009);

      ExcelAutomation.GetXlWrkBk(XlWrkBk);
      FOR I := XlWrkBk.Worksheets.Count - 1 DOWNTO 1 DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(I);
        XlWrkSht.Delete;
      END;

      StartRowLines := 6;

      ProjectElement.SETRANGE("Project No.", ProjectNo);
      gvElementLevel := FALSE;
      IF NOT ProjectElement.ISEMPTY THEN BEGIN
        IF CONFIRM(Text005, FALSE) THEN
          gvElementLevel := TRUE;
      END;

      First := TRUE;
      ProjectPurchaseAction.RESET;
      ProjectPurchaseAction.SETRANGE("Project No.", ProjectNo);
      IF ProjectPurchaseAction.FINDSET THEN BEGIN
        REPEAT
          IF STRLEN(ProjectPurchaseAction.Description + ' (' + ProjectPurchaseAction.Code + ')') > 30 THEN
            SheetName := COPYSTR(ProjectPurchaseAction.Description, 1, 30)
          ELSE
            SheetName := ProjectPurchaseAction.Description + ' (' + ProjectPurchaseAction.Code + ')';
          IF NOT First THEN BEGIN
            SheetNo := ExcelAutomation.AddWorksheet(SheetName);
            ExcelAutomation.SetCurrentSheetNo(SheetNo);
            ExcelAutomation.GetCurrentXlWrkSht(XlWrkSht);
          END ELSE BEGIN
            First := FALSE;
            ExcelAutomation.SetCurrentSheetNo(1);
            ExcelAutomation.GetCurrentXlWrkSht(XlWrkSht);
            XlWrkSht.Name := SheetName;
          END;

          CreateHeaders(ProjectPurchaseAction);
          CreateLines(ProjectPurchaseAction);
          CreateVendorLines(ProjectPurchaseAction);

          ExcelAutomation.AutoFitAll;
          ExcelAutomation.FreezePane('I1');
        UNTIL ProjectPurchaseAction.NEXT = 0
      END;

      ExcelAutomation.GiveUserControl;
    END;

    [External]
    PROCEDURE CreateHeaders@1100485034(ProjectPurchaseAction@1100525000 : Record 11012026);
    VAR
      Job@1100525003 : Record 11072003;
      VendorsByPurchaseAction@1100525002 : Record 11012068;
      KolomNo@1100525005 : Integer;
    BEGIN
      Job.GET(ProjectPurchaseAction."Project No.");

      ExcelAutomation.SetSettingBold(TRUE);
      ExcelAutomation.WriteCell(1, 1, Text000);
      ExcelAutomation.WriteCell(1, 2, TmpQuoteCompPaRec.FIELDCAPTION("Project No."));
      ExcelAutomation.WriteCell(1, 3, TmpQuoteCompPaRec.FIELDCAPTION("Purchase Action"));
      ExcelAutomation.WriteCell(2, 2, ProjectPurchaseAction."Project No.");
      ExcelAutomation.WriteCell(2, 3, ProjectPurchaseAction.Code);
      ExcelAutomation.WriteCell(3, 2, Job.Description);
      ExcelAutomation.WriteCell(3, 3, ProjectPurchaseAction.Description);
      ExcelAutomation.WriteCell(1, 6, TmpQuoteCompPaRec.FIELDCAPTION(Element));
      ExcelAutomation.WriteCell(2, 6, TmpQuoteCompPaRec.FIELDCAPTION("Cost Object"));
      ExcelAutomation.WriteCell(3, 6, TmpQuoteCompPaRec.FIELDCAPTION(Description));
      ExcelAutomation.WriteCell(4, 6, TmpQuoteCompPaRec.FIELDCAPTION(Quantity));
      ExcelAutomation.WriteCell(5, 6, Text002);
      ExcelAutomation.WriteCell(6, 6, TmpQuoteCompPaRec.FIELDCAPTION("Unit of Measure"));
      ExcelAutomation.WriteCell(7, 6, TmpQuoteCompPaRec.FIELDCAPTION(Budget));

      KolomNo := 9;
      VendorsByPurchaseAction.RESET;
      VendorsByPurchaseAction.SETRANGE(Source, VendorsByPurchaseAction.Source::Project);
      VendorsByPurchaseAction.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      VendorsByPurchaseAction.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      IF VendorsByPurchaseAction.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          VendorsByPurchaseAction.CALCFIELDS("Vendor Name");
          ExcelAutomation.WriteCell(KolomNo, 2, VendorsByPurchaseAction."Vendor No.");
          ExcelAutomation.WriteCell(KolomNo, 3, VendorsByPurchaseAction."Vendor Name");
          ExcelAutomation.WriteCell(KolomNo, 6, TmpQuoteCompPaRec.FIELDCAPTION(Quantity));
          KolomNo := KolomNo + 1;
          ExcelAutomation.WriteCell(KolomNo, 6, Text002);
          KolomNo := KolomNo + 1;
          ExcelAutomation.WriteCell(KolomNo, 6, Text003);
          KolomNo := KolomNo + 1;
        UNTIL VendorsByPurchaseAction.NEXT = 0;
      END;
      ExcelAutomation.SetSettingBold(FALSE);
    END;

    [External]
    PROCEDURE CreateLines@1100485043(ProjectPurchaseAction@1100525001 : Record 11012026);
    BEGIN
      TmpQuoteCompPaRec.RESET;
      TmpQuoteCompPaRec.DELETEALL;

      TmpQuoteCompPaRec.CreateLines(TmpQuoteCompPaRec, ProjectPurchaseAction."Project No.", ProjectPurchaseAction.Code, TRUE, gvElementLevel); //create lines

      RowNo := 6;

      IF TmpQuoteCompPaRec.FINDFIRST THEN BEGIN
        REPEAT
          TmpQuoteCompPaRec.CALCFIELDS(Quantity,"Unit of Measure",Budget,"Total Budget");
          RowNo := RowNo + 1;
          CASE TmpQuoteCompPaRec.Type OF
            TmpQuoteCompPaRec.Type::"Cost Object":
              BEGIN
                IF gvElementLevel THEN BEGIN
                  ExcelAutomation.WriteCell(1, RowNo, TmpQuoteCompPaRec.Element);
                END;
                ExcelAutomation.WriteCell(2, RowNo, TmpQuoteCompPaRec."Cost Object");
                ExcelAutomation.WriteCell(3, RowNo, TmpQuoteCompPaRec.Description);
                IF TmpQuoteCompPaRec.Quantity <> 0 THEN
                  ExcelAutomation.WriteCell(4, RowNo, FORMAT(TmpQuoteCompPaRec.Quantity));
                IF TmpQuoteCompPaRec.Quantity <> 0 THEN
                  ExcelAutomation.WriteCell(5, RowNo,
                    STRSUBSTNO('%1', ROUND((TmpQuoteCompPaRec.Budget / TmpQuoteCompPaRec.Quantity), 0.00001)));
                ExcelAutomation.WriteCell(6, RowNo, TmpQuoteCompPaRec."Unit of Measure");
                ExcelAutomation.WriteCell(7, RowNo, FORMAT(TmpQuoteCompPaRec.Budget));
              END;
            TmpQuoteCompPaRec.Type::Total:
              BEGIN
                TmpQuoteCompPaRec.CALCFIELDS("Total Budget");
                ExcelAutomation.SetSettingBold(TRUE);
                ExcelAutomation.WriteCell(7, RowNo, FORMAT(TmpQuoteCompPaRec."Total Budget"));
                ExcelAutomation.SetSettingBold(FALSE);
              END;
          END;
        UNTIL TmpQuoteCompPaRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateVendorLines@1100485027(ProjectPurchaseAction@1100525003 : Record 11012026);
    VAR
      VendorsByPurchaseAction@1210190000 : Record 11012068;
      PurchaseLine@1210190001 : Record 39;
      PurchaseHeader@1100485000 : Record 38;
      Formula@1100485001 : Text[250];
      QuoteCompAmt@1100525001 : Decimal;
      QuoteCompQty@1100525000 : Decimal;
      KolomNo@1100525005 : Integer;
    BEGIN
      VendorsByPurchaseAction.SETRANGE(Source, VendorsByPurchaseAction.Source::Project);
      VendorsByPurchaseAction.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      VendorsByPurchaseAction.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);

      IF NOT VendorsByPurchaseAction.FINDSET THEN
        EXIT;

      KolomNo := 9;
      RowNo := 7;
      WITH PurchaseLine DO BEGIN
        REPEAT
          RESET;  // 23-04-2010
          SETCURRENTKEY("Document Type", "Buy-from Vendor No.", "Job No.", "Purchase Action");
          IF (VendorsByPurchaseAction.Type <> VendorsByPurchaseAction.Type::Contact) THEN
            SETRANGE("Buy-from Vendor No.", VendorsByPurchaseAction."Vendor No.")
          ELSE
            SETRANGE("Buy-from Contact No.", VendorsByPurchaseAction."Vendor No.");

          SETRANGE("Document Type", "Document Type"::Quote);
          SETRANGE("Job No.", ProjectPurchaseAction."Project No.");
          SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
          IF TmpQuoteCompPaRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              CASE TmpQuoteCompPaRec.Type OF
                TmpQuoteCompPaRec.Type::"Cost Object":
                  BEGIN
                    PurchaseLine.SETRANGE("Shortcut Dimension 2 Code", TmpQuoteCompPaRec."Cost Object");
                    PurchaseLine.SETRANGE(Description, TmpQuoteCompPaRec.Description);
                    PurchaseLine.SETRANGE("Unit of Measure Code", TmpQuoteCompPaRec."Unit of Measure Code");
                    CLEAR(PurchaseHeader);
                    IF PurchaseLine.FINDFIRST THEN BEGIN
                      PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.");
                      {
                      //*C-019112.so
                      lvQuoteLineRec.CALCFIELDS("Quote Comparison");
                      IF lvQuoteHeader."Amounts only" THEN
                        xlWrkSht.Range(STRSUBSTNO('%1' + '%2',ExcelCellNo(KolomNo+2),RowNo)).Value :=
                                            STRSUBSTNO('%1',ROUND("Quote Comparison", 0.00001))
                      ELSE BEGIN
                        lvQuoteLineRec.CALCFIELDS("Quote Comparison Quantity");
                        xlWrkSht.Range(STRSUBSTNO('%1' + '%2',ExcelCellNo(KolomNo),RowNo)).Value :=
                          STRSUBSTNO('%1', "Quote Comparison Quantity");
                        IF ("Quote Comparison Quantity" <> 0) THEN
                          xlWrkSht.Range(STRSUBSTNO('%1' + '%2',ExcelCellNo(KolomNo + 1),RowNo)).Value :=
                            STRSUBSTNO('%1',ROUND(("Quote Comparison" / "Quote Comparison Quantity")));
                      END;
                      } //*C-019112.eo
                      //*C-019112.sn
                      QuoteCompAmt := VendorsByPurchaseAction.CalcSumQuoteComparison(
                        1, TmpQuoteCompPaRec."Cost Object", TmpQuoteCompPaRec."Unit of Measure Code", TmpQuoteCompPaRec.Description);
                      IF PurchaseHeader."Amounts only" THEN
                        ExcelAutomation.WriteCell(KolomNo + 2, RowNo, STRSUBSTNO('%1', ROUND(QuoteCompAmt, 0.00001)))
                      ELSE BEGIN
                        QuoteCompQty := VendorsByPurchaseAction.CalcSumQuoteComparison(
                          3, TmpQuoteCompPaRec."Cost Object", TmpQuoteCompPaRec."Unit of Measure Code", TmpQuoteCompPaRec.Description);
                        ExcelAutomation.WriteCell(KolomNo, RowNo, STRSUBSTNO('%1', STRSUBSTNO('%1', QuoteCompQty)));
                        IF (QuoteCompQty <> 0) THEN
                          ExcelAutomation.WriteCell(KolomNo + 1, RowNo, STRSUBSTNO('%1', ROUND((QuoteCompAmt / QuoteCompQty))));
                      END;
                      //*C-019112.en
                    END;
                    IF NOT PurchaseHeader."Amounts only" THEN BEGIN
                      Formula := STRSUBSTNO(('=%1' + '%2' + '*' + '%3' + '%4'),
                                   ExcelAutomation.GetColumnIDFromCol(KolomNo), RowNo,
                                   ExcelAutomation.GetColumnIDFromCol(KolomNo + 1), RowNo);
                      ExcelAutomation.WriteCell(KolomNo + 2, RowNo, STRSUBSTNO('%1', Formula));
                    END;
                  END;
                TmpQuoteCompPaRec.Type::Total:
                  BEGIN
                    ExcelAutomation.SetSettingBold(TRUE);
                    ExcelAutomation.WriteCell(KolomNo + 2, RowNo,
                      STRSUBSTNO(
                        '=' + KeywordML('SUM') +
                        '(%3$%1:%3$%2)', (StartRowLines + 1), (RowNo - 1), ExcelAutomation.GetColumnIDFromCol(KolomNo + 2)));
                    ExcelAutomation.SetSettingBold(FALSE);
                  END;
              END;
              RowNo := RowNo + 1;
            UNTIL TmpQuoteCompPaRec.NEXT = 0;
          END;
          KolomNo := KolomNo + 3;
          RowNo := 7;
        UNTIL VendorsByPurchaseAction.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE KeywordML@1100525000(Keyword2@1100525000 : Text[80]) : Text[80];
    BEGIN
      EXIT(ExcelAutomation.TranslateKeyword(Keyword2));
    END;

    BEGIN
    END.
  }
}

