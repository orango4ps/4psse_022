OBJECT Codeunit 86 Sales-Quote to Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=VAR
            Cust@1008 : Record 18;
            SalesCommentLine@1005 : Record 44;
            ApprovalsMgmt@1002 : Codeunit 1535;
            ArchiveManagement@1001 : Codeunit 5063;
            SalesCalcDiscountByType@1003 : Codeunit 56;
            RecordLinkManagement@1000 : Codeunit 447;
            ShouldRedistributeInvoiceAmount@1004 : Boolean;
            IsHandled@1006 : Boolean;
            lvOffAmtRec@1100485000 : Record 11012786;
            lvSalesRentalAppointmRec@1100485001 : Record 11012991;
            lvSalesRentalAppointmRec2@1100485002 : Record 11012991;
            lvSalesSetupRec@1100525000 : Record 311;
            lvArchiveManagementCU@1100525001 : Codeunit 5063;
            SalesRecipe@1100525002 : Record 11229788;
            SalesRecipeLine@1100525004 : Record 11229789;
            SalesHeaderExtension@1100525003 : Record 11071868;
            RecRefFrom@1100525005 : RecordRef;
            RecRefTo@1100525006 : RecordRef;
            DocumentLinkManagement@1100525007 : Codeunit 11012401;
            SalesHeaderExtension2@1100527550 : Record 11071868;
          BEGIN
            OnBeforeOnRun(Rec);

            TESTFIELD("Document Type","Document Type"::Quote);
            ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);

            OnCheckSalesPostRestrictions;

            Cust.GET("Sell-to Customer No.");
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
            IF "Sell-to Customer No." <> "Bill-to Customer No." THEN BEGIN
              Cust.GET("Bill-to Customer No.");
              Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
            END;
            CALCFIELDS("Amount Including VAT","Work Description");

            ValidateSalesPersonOnSalesHeader(Rec,TRUE,FALSE);

            CheckForBlockedLines;

            CheckInProgressOpportunities(Rec);

            //**4PS.sn
            LogisticsSeparated := CheckLogisticsSeparated();
            //**4PS.en

            CreateSalesHeader(Rec,Cust."Prepayment %");

            TransferQuoteToOrderLines(SalesQuoteLine,Rec,SalesOrderLine,SalesOrderHeader,Cust);
            OnAfterInsertAllSalesOrderLines(SalesOrderLine,Rec);

            SalesSetup.GET;
            CASE SalesSetup."Archive Quotes" OF
              SalesSetup."Archive Quotes"::Always:
                ArchiveManagement.ArchSalesDocumentNoConfirm(Rec);
              SalesSetup."Archive Quotes"::Question:
                ArchiveManagement.ArchiveSalesDocument(Rec);
            END;

            IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
              SalesOrderHeader."Posting Date" := 0D;
              SalesOrderHeader.MODIFY;
            END;

            SalesCommentLine.CopyComments("Document Type",SalesOrderHeader."Document Type","No.",SalesOrderHeader."No.");
            RecordLinkManagement.CopyLinks(Rec,SalesOrderHeader);

            AssignItemCharges("Document Type","No.",SalesOrderHeader."Document Type",SalesOrderHeader."No.");

            //**4PS.sn
            RecRefFrom.GETTABLE(Rec);
            RecRefTo.GETTABLE(SalesOrderHeader);
            DocumentLinkManagement.ReplaceDocLink(RecRefFrom, RecRefTo);

            DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Sales Quote");
            DocRelRec.SETRANGE("No.","No.");
            IF DocRelRec.FIND('-') THEN BEGIN
              REPEAT
                DocRel1Rec.COPY(DocRelRec);
                DocRel1Rec."Document Type" := DocRelRec."Document Type"::"Sales Order";
                DocRel1Rec."No." := SalesOrderHeader."No.";
                DocRel1Rec."Document No." := DocRelRec."Document No.";
                DocRel1Rec.INSERT;
              UNTIL DocRelRec.NEXT = 0;
            END;

            SalesRecipe.SETRANGE("Sales Document Type", SalesRecipe."Sales Document Type"::Quote);
            SalesRecipe.SETRANGE("Sales Document No.","No.");
            WHILE SalesRecipe.FINDFIRST DO BEGIN
              SalesRecipe.DELETE;
              SalesRecipe."Sales Document Type" := SalesRecipe."Sales Document Type"::Order;
              SalesRecipe."Sales Document No." := SalesOrderHeader."No.";
              SalesRecipe.INSERT;
            END;

            SalesRecipeLine.SETRANGE("Sales Document Type", SalesRecipeLine."Sales Document Type"::Quote);
            SalesRecipeLine.SETRANGE("Sales Document No.","No.");
            WHILE SalesRecipeLine.FINDFIRST DO BEGIN
              SalesRecipeLine.DELETE;
              SalesRecipeLine."Sales Document Type" := SalesRecipe."Sales Document Type"::Order;
              SalesRecipeLine."Sales Document No." := SalesOrderHeader."No.";
              SalesRecipeLine.INSERT;
            END;

            IF SalesHeaderExtension.GET("Document Type", "No.") THEN BEGIN
            SalesHeaderExtension.DELETE;
              IF NOT SalesHeaderExtension2.GET(SalesOrderHeader."Document Type", SalesOrderHeader."No.") THEN BEGIN
                  SalesHeaderExtension."Document Type" := SalesOrderHeader."Document Type";
                  SalesHeaderExtension."Document No." := SalesOrderHeader."No.";
                  SalesHeaderExtension.INSERT;
              END;
            END;
            //**4PS.en

            MoveWonLostOpportunites(Rec,SalesOrderHeader);

            ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,SalesOrderHeader."No.",SalesOrderHeader.RECORDID);

            //**4PS.sn
            IF LogisticsSeparated OR
               (SalesOrderHeader."Sales Document Type" = SalesOrderHeader."Sales Document Type"::RentalContract)
            THEN BEGIN
              lvSalesRentalAppointmRec.SETRANGE("Document Type","Document Type");
              lvSalesRentalAppointmRec.SETRANGE("Document No.","No.");
              IF lvSalesRentalAppointmRec.FINDSET(TRUE,TRUE) THEN BEGIN
                REPEAT
                  lvSalesRentalAppointmRec2 := lvSalesRentalAppointmRec;
                  lvSalesRentalAppointmRec2."Document Type" := SalesOrderHeader."Document Type";
                  lvSalesRentalAppointmRec2."Document No." := SalesOrderHeader."No.";
                  lvSalesRentalAppointmRec2.INSERT;
                  lvSalesRentalAppointmRec.DELETE;
                UNTIL lvSalesRentalAppointmRec.NEXT = 0;
              END;
            END;

            IF (SalesOrderHeader."Sales Document Type" <> SalesOrderHeader."Sales Document Type"::RentalContract) THEN BEGIN
              //* At creating order, quote will be deleted. For that reason quote should be archived.
              //* Note 1: Do not call 'ArchiveSalesDocument' because it contains a question, for that reason call directly next function
              //*      2: Not for rental contract quote, because this has own setup (arch. takes place in CU11012946).
              lvSalesSetupRec.GET;
              IF lvSalesSetupRec."Archive Quote on Create Order" THEN
                lvArchiveManagementCU.StoreSalesDocument(Rec,FALSE);
            END;
            //**4PS.en

            IsHandled := FALSE;
            OnBeforeDeleteSalesQuote(Rec,SalesOrderHeader,IsHandled);
            IF NOT IsHandled THEN BEGIN
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
              DELETELINKS;
              DELETE;

              //**4PS.sn
              //* Reset filters on these fields, because these quote lines must be deleted.
              SalesQuoteLine.SETRANGE(Optional);
              SalesQuoteLine.SETRANGE("Alternative No.");
              IF LogisticsSeparated THEN BEGIN
                IF lvOffAmtRec.GET(lvOffAmtRec."Document Type"::Quote, Rec."No.", Rec."Elected Alternative No.") THEN BEGIN
                  lvOffAmtRec."Document Type" := "Document Type"::Order;
                  lvOffAmtRec."Document No." := SalesOrderHeader."No.";
                  lvOffAmtRec."Alternative No." := 0;
                  lvOffAmtRec.INSERT;
                END;
                lvOffAmtRec.SETRANGE("Document Type", lvOffAmtRec."Document Type"::Quote);
                lvOffAmtRec.SETRANGE("Document No.", Rec."No.");
                lvOffAmtRec.DELETEALL;
              END;
              //**4PS.en

              SalesQuoteLine.DELETEALL;
            END;

            IF NOT ShouldRedistributeInvoiceAmount THEN
              SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesOrderHeader);

            OnAfterOnRun(Rec,SalesOrderHeader);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@=An open Opportunity is linked to this Quote. The Opportunity has to be closed before the Quote can be converted to an Order. Do you want to close the Opportunity now and continue the conversion?;ENU=An open %1 is linked to this %2. The %1 has to be closed before the %2 can be converted to an %3. Do you want to close the %1 now and continue the conversion?;NOR=En †pen %1 er knyttet til dette %2. %1 m† lukkes f›r %2 kan konverteres til %3. Vil du lukke %1 n† og fortsette med konverteringen?;SVE=En ”ppen %1 „r kopplad till den h„r %2. %1 m†ste st„ngas innan det g†r att konvertera %2 till %3. Vill du st„nga %1 nu och forts„tta konverteringen?';
      Text001@1001 : TextConst '@@@=An open Opportunity is still linked to this Quote. The conversion to an Order was aborted.;ENU=An open %1 is still linked to this %2. The conversion to an %3 was aborted.;NOR=En †pen %1 er fortsatt knyttet til dette %2. Konverteringen til %3 ble avbrutt.;SVE=En ”ppen %1 „r fortfarande kopplad till den h„r %2. Konverteringen till %3 avbr”ts.';
      SalesQuoteLine@1004 : Record 37;
      SalesOrderHeader@1006 : Record 36;
      SalesOrderLine@1007 : Record 37;
      SalesSetup@1002 : Record 311;
      DocRelRec@1100528805 : Record 11012407;
      DocRel1Rec@1100528804 : Record 11012407;
      LogisticsSeparated@1100485000 : Boolean;

    LOCAL PROCEDURE CreateSalesHeader@6(SalesHeader@1000 : Record 36;PrepmtPercent@1001 : Decimal);
    BEGIN
      OnBeforeCreateSalesHeader(SalesHeader);

      WITH SalesHeader DO BEGIN
        SalesOrderHeader := SalesHeader;
        SalesOrderHeader."Document Type" := SalesOrderHeader."Document Type"::Order;

        SalesOrderHeader."No. Printed" := 0;
        SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
        SalesOrderHeader."No." := '';
        SalesOrderHeader."Quote No." := "No.";
        SalesOrderLine.LOCKTABLE;
        OnBeforeInsertSalesOrderHeader(SalesOrderHeader,SalesHeader);
        SalesOrderHeader.INSERT(TRUE);

        SalesOrderHeader."Order Date" := "Order Date";
        IF "Posting Date" <> 0D THEN
          SalesOrderHeader."Posting Date" := "Posting Date";

        SalesOrderHeader.InitFromSalesHeader(SalesHeader);
        SalesOrderHeader."Outbound Whse. Handling Time" := "Outbound Whse. Handling Time";
        SalesOrderHeader.Reserve := Reserve;

        SalesOrderHeader."Prepayment %" := PrepmtPercent;
        IF SalesOrderHeader."Posting Date" = 0D THEN
          SalesOrderHeader."Posting Date" := WORKDATE;

        //**4PS.sn
        SalesOrderHeader."Elected Alternative No." := 0;
        SalesOrderHeader."Arrival Date" := "Arrival Date";
        SalesOrderHeader."Rental Starting Date" := "Rental Starting Date";
        IF SalesOrderHeader."Sales Document Type" = SalesOrderHeader."Sales Document Type"::RentalContract THEN
          SalesOrderHeader."Posting Description" := "Posting Description";
        SalesOrderHeader."Event Code" := "Event Code";
        //**4PS.en

        OnBeforeModifySalesOrderHeader(SalesOrderHeader,SalesHeader);
        SalesOrderHeader.MODIFY;
      END;
    END;

    LOCAL PROCEDURE AssignItemCharges@15(FromDocType@1000 : Option;FromDocNo@1001 : Code[20];ToDocType@1003 : Option;ToDocNo@1002 : Code[20]);
    VAR
      ItemChargeAssgntSales@1004 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",FromDocType);
      ItemChargeAssgntSales.SETRANGE("Document No.",FromDocNo);
      WHILE ItemChargeAssgntSales.FINDFIRST DO BEGIN
        ItemChargeAssgntSales.DELETE;
        ItemChargeAssgntSales."Document Type" := SalesOrderHeader."Document Type";
        ItemChargeAssgntSales."Document No." := SalesOrderHeader."No.";
        IF NOT (ItemChargeAssgntSales."Applies-to Doc. Type" IN
                [ItemChargeAssgntSales."Applies-to Doc. Type"::Shipment,
                 ItemChargeAssgntSales."Applies-to Doc. Type"::"Return Receipt"])
        THEN BEGIN
          ItemChargeAssgntSales."Applies-to Doc. Type" := ToDocType;
          ItemChargeAssgntSales."Applies-to Doc. No." := ToDocNo;
        END;
        ItemChargeAssgntSales.INSERT;
      END;
    END;

    [External]
    PROCEDURE GetSalesOrderHeader@1(VAR SalesHeader2@1000 : Record 36);
    BEGIN
      SalesHeader2 := SalesOrderHeader;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      IF NewHideValidationDialog THEN
        EXIT;
    END;

    LOCAL PROCEDURE CheckInProgressOpportunities@2(VAR SalesHeader@1000 : Record 36);
    VAR
      Opp@1001 : Record 5092;
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
      ConfirmManagement@1003 : Codeunit 27;
    BEGIN
      Opp.RESET;
      Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
      Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
      Opp.SETRANGE("Sales Document No.",SalesHeader."No.");
      Opp.SETRANGE(Status,Opp.Status::"In Progress");
      IF Opp.FINDFIRST THEN BEGIN
        IF NOT ConfirmManagement.ConfirmProcess(
             STRSUBSTNO(
               Text000,Opp.TABLECAPTION,Opp."Sales Document Type"::Quote,
               Opp."Sales Document Type"::Order),TRUE)
        THEN
          ERROR('');
        TempOpportunityEntry.DELETEALL;
        TempOpportunityEntry.INIT;
        TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
        TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
        TempOpportunityEntry."Contact No." := Opp."Contact No.";
        TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
        TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
        TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
        TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Won;
        TempOpportunityEntry."Calcd. Current Value (LCY)" := TempOpportunityEntry.GetSalesDocValue(SalesHeader);
        TempOpportunityEntry."Cancel Old To Do" := TRUE;
        TempOpportunityEntry."Wizard Step" := 1;
        TempOpportunityEntry.INSERT;
        TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Won);
        PAGE.RUNMODAL(PAGE::"Close Opportunity",TempOpportunityEntry);
        Opp.RESET;
        Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
        Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
        Opp.SETRANGE("Sales Document No.",SalesHeader."No.");
        Opp.SETRANGE(Status,Opp.Status::"In Progress");
        IF Opp.FINDFIRST THEN
          ERROR(Text001,Opp.TABLECAPTION,Opp."Sales Document Type"::Quote,Opp."Sales Document Type"::Order);
        COMMIT;
        SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      END;
    END;

    LOCAL PROCEDURE MoveWonLostOpportunites@3(VAR SalesQuoteHeader@1000 : Record 36;VAR SalesOrderHeader@1001 : Record 36);
    VAR
      Opp@1002 : Record 5092;
      OpportunityEntry@1003 : Record 5093;
    BEGIN
      Opp.RESET;
      Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
      Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
      Opp.SETRANGE("Sales Document No.",SalesQuoteHeader."No.");
      IF Opp.FINDFIRST THEN
        IF Opp.Status = Opp.Status::Won THEN BEGIN
          Opp."Sales Document Type" := Opp."Sales Document Type"::Order;
          Opp."Sales Document No." := SalesOrderHeader."No.";
          Opp.MODIFY;
          OpportunityEntry.RESET;
          OpportunityEntry.SETCURRENTKEY(Active,"Opportunity No.");
          OpportunityEntry.SETRANGE(Active,TRUE);
          OpportunityEntry.SETRANGE("Opportunity No.",Opp."No.");
          IF OpportunityEntry.FINDFIRST THEN BEGIN
            OpportunityEntry."Calcd. Current Value (LCY)" := OpportunityEntry.GetSalesDocValue(SalesOrderHeader);
            OpportunityEntry.MODIFY;
          END;
        END ELSE
          IF Opp.Status = Opp.Status::Lost THEN BEGIN
            Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
            Opp."Sales Document No." := '';
            Opp.MODIFY;
          END;
    END;

    LOCAL PROCEDURE TransferQuoteToOrderLines@5(VAR SalesQuoteLine@1000 : Record 37;VAR SalesQuoteHeader@1001 : Record 36;VAR SalesOrderLine@1004 : Record 37;VAR SalesOrderHeader@1005 : Record 36;Customer@1002 : Record 18);
    VAR
      ATOLink@1003 : Record 904;
      PrepmtMgt@1007 : Codeunit 441;
      SalesLineReserve@1006 : Codeunit 99000832;
      IsHandled@1008 : Boolean;
    BEGIN
      SalesQuoteLine.RESET;
      SalesQuoteLine.SETRANGE("Document Type",SalesQuoteHeader."Document Type");
      SalesQuoteLine.SETRANGE("Document No.",SalesQuoteHeader."No.");

      //**4PS.sn
      IF LogisticsSeparated THEN BEGIN
        SalesQuoteLine.SETRANGE(Optional,FALSE);
        SalesQuoteLine.SETRANGE("Alternative No.",SalesQuoteHeader."Elected Alternative No.");
      END;
      IF SalesQuoteHeader."Sales Document Type" = SalesQuoteHeader."Sales Document Type"::RentalContract THEN
        SalesQuoteLine.SETRANGE(Optional,FALSE);
      //**4PS.en

      OnTransferQuoteToOrderLinesOnAfterSetFilters(SalesQuoteLine,SalesQuoteHeader);
      IF SalesQuoteLine.FINDSET THEN
        REPEAT
          IsHandled := FALSE;
          OnBeforeTransferQuoteLineToOrderLineLoop(SalesQuoteLine,SalesQuoteHeader,SalesOrderHeader,IsHandled);
          IF NOT IsHandled THEN BEGIN
            SalesOrderLine := SalesQuoteLine;
            SalesOrderLine."Document Type" := SalesOrderHeader."Document Type";
            SalesOrderLine."Document No." := SalesOrderHeader."No.";
            SalesOrderLine."Shortcut Dimension 1 Code" := SalesQuoteLine."Shortcut Dimension 1 Code";
            SalesOrderLine."Shortcut Dimension 2 Code" := SalesQuoteLine."Shortcut Dimension 2 Code";
            SalesOrderLine."Dimension Set ID" := SalesQuoteLine."Dimension Set ID";

            //**4PS.sn
            SalesOrderLine."Alternative No." := 0;
            //**4PS.en

            IF Customer."Prepayment %" <> 0 THEN
              SalesOrderLine."Prepayment %" := Customer."Prepayment %";
            PrepmtMgt.SetSalesPrepaymentPct(SalesOrderLine,SalesOrderHeader."Posting Date");
            SalesOrderLine.VALIDATE("Prepayment %");
            IF SalesOrderLine."No." <> '' THEN
              SalesOrderLine.DefaultDeferralCode;
            OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,SalesQuoteLine,SalesQuoteHeader);
            SalesOrderLine.INSERT;
            OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,SalesQuoteLine,SalesQuoteHeader);
            ATOLink.MakeAsmOrderLinkedToSalesOrderLine(SalesQuoteLine,SalesOrderLine);
            //**4PS.sn
            IF NOT LogisticsSeparated THEN BEGIN
            //**4PS.en
              SalesLineReserve.TransferSaleLineToSalesLine(
                SalesQuoteLine,SalesOrderLine,SalesQuoteLine."Outstanding Qty. (Base)");
              SalesLineReserve.VerifyQuantity(SalesOrderLine,SalesQuoteLine);
              IF SalesOrderLine.Reserve = SalesOrderLine.Reserve::Always THEN
                SalesOrderLine.AutoReserve;
            END; //**4PS.n
          END;
        UNTIL SalesQuoteLine.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateSalesHeader@13(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDeleteSalesQuote@4(VAR QuoteSalesHeader@1000 : Record 36;VAR OrderSalesHeader@1001 : Record 36;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertSalesOrderHeader@7(VAR SalesOrderHeader@1000 : Record 36;SalesQuoteHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifySalesOrderHeader@18(VAR SalesOrderHeader@1001 : Record 36;SalesQuoteHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertSalesOrderLine@9(VAR SalesOrderLine@1002 : Record 37;SalesOrderHeader@1001 : Record 36;SalesQuoteLine@1003 : Record 37;SalesQuoteHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertAllSalesOrderLines@11(VAR SalesOrderLine@1001 : Record 37;SalesQuoteHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnRun@10(VAR SalesHeader@1000 : Record 36;VAR SalesOrderHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertSalesOrderLine@8(VAR SalesOrderLine@1002 : Record 37;SalesOrderHeader@1001 : Record 36;SalesQuoteLine@1003 : Record 37;SalesQuoteHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnRun@12(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferQuoteLineToOrderLineLoop@16(VAR SalesQuoteLine@1000 : Record 37;VAR SalesQuoteHeader@1001 : Record 36;VAR SalesOrderHeader@1002 : Record 36;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferQuoteToOrderLinesOnAfterSetFilters@17(VAR SalesQuoteLine@1000 : Record 37;VAR SalesQuoteHeader@1001 : Record 36);
    BEGIN
    END;

    LOCAL PROCEDURE CheckLogisticsSeparated@1100485000() : Boolean;
    BEGIN
      //**4PS
      IF SalesOrderHeader."Sales Document Type" =
         SalesOrderHeader."Sales Document Type"::"Sales Logistics Separated"
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

