OBJECT Codeunit 11012197 Count Paged Entities
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            WorkOrderNo@1100529404 : Code[20];
            RoomFilter@1100529403 : Code[20];
            PartFilter@1100529402 : Code[20];
            FilterTypes@1100529401 : ARRAY [20] OF ',Code,Description';
            Filters@1100529400 : ARRAY [20] OF Text;
          BEGIN
            WorkOrderNo := 'WO100172';
            RoomFilter := '';
            PartFilter := '';
            FilterTypes[1] := 1;
            Filters[1] := '';
            MESSAGE('%1', ServiceUnitPriceLookupCount(WorkOrderNo, RoomFilter, PartFilter, FilterTypes, Filters));
          END;

  }
  CODE
  {

    [External]
    PROCEDURE ServiceLocationCount@1100528100(ResourceNo@1100528700 : Code[20];FilterTypes@1100528100 : ARRAY [20] OF ',Description,No,City,SearchName,PostCode';Filters@1100528102 : ARRAY [20] OF Text) : Integer;
    VAR
      ServiceLocation@1100528103 : Record 11012801;
      RecRef@1100409003 : RecordRef;
      FldRef@1100409002 : FieldRef;
      I@1100409001 : Integer;
      J@1100409000 : Integer;
      ServLocbyNoMOB@1100528701 : Page 11132224;
    BEGIN
      ServiceLocation.SETCURRENTKEY("No.");

      ServiceLocation.DPA_SetFiltersForResource(ServLocbyNoMOB.OBJECTID(FALSE), ResourceNo);

      RecRef.GETTABLE(ServiceLocation);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FilterTypes[J] = FilterTypes[J]::SearchName THEN
            ServiceLocation.SETCURRENTKEY("Search Name");
          IF FldRef.NAME = ServiceLocationFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE ItemCount@1100528101(FilterTypes@1100528100 : ARRAY [20] OF ',Description,No,ItemVendor,ItemManufacturer,SearchDescription';Filters@1100528102 : ARRAY [20] OF Text) : Integer;
    VAR
      Item@1100528103 : Record 27;
      RecRef@1100409003 : RecordRef;
      FldRef@1100409002 : FieldRef;
      I@1100409001 : Integer;
      J@1100409000 : Integer;
    BEGIN
      Item.SETCURRENTKEY("No.");

      RecRef.GETTABLE(Item);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FilterTypes[J] = FilterTypes[J]::SearchDescription THEN
            Item.SETCURRENTKEY("Search Description");
          IF FilterTypes[J] = FilterTypes[J]::Description THEN
            Item.SETCURRENTKEY(Description);
          IF FldRef.NAME = ItemFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE StandardObjectLookupCount@1100409001(FilterTypes@1100409000 : ARRAY [20] OF ',No,Description,BrandCode,BrandDescription,ModelCode,ModelDescription,TypeCode,TypeDescription,ObjectGroup';Filters@1100409001 : ARRAY [20] OF Text) : Integer;
    VAR
      StandardObject@1100409010 : Record 11020334;
      RecRef@1100409006 : RecordRef;
      FldRef@1100409005 : FieldRef;
      I@1100409002 : Integer;
      J@1100409003 : Integer;
    BEGIN
      StandardObject.SETCURRENTKEY("No.");
      StandardObject.SETRANGE(Expired, FALSE);

      RecRef.GETTABLE(StandardObject);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = StandardObjectFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE ServiceObjectLookupCount@1100528702(FilterTypes@1100528100 : ARRAY [20] OF ',Description,StandardObjectDescription,Blocked,ServiceLocationNo,ResourceNo,No';Filters@1100528102 : ARRAY [20] OF Text) : Integer;
    VAR
      ServiceObjectLookupMob@1100528103 : Record 11125653;
      RecRef@1100409003 : RecordRef;
      FldRef@1100409002 : FieldRef;
      I@1100409001 : Integer;
      J@1100409000 : Integer;
    BEGIN
      // dp00276
      // This function is always called in the company of the service order
      RecRef.GETTABLE(ServiceObjectLookupMob);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = ServiceObjectFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE OpenWorkOrderLookupCount@1100528011(FilterTypes@1100528100 : ARRAY [20] OF ',ResourceNo,SourceType,Address,PostCode,City,CountryRegionCode,Priority,CustomerName';Filters@1100528102 : ARRAY [20] OF Text) : Integer;
    VAR
      WorkOrderLookupMob@1100528103 : Record 11229867;
      RecRef@1100409003 : RecordRef;
      FldRef@1100409002 : FieldRef;
      I@1100409001 : Integer;
      J@1100409000 : Integer;
    BEGIN
      // dp00821
      RecRef.GETTABLE(WorkOrderLookupMob);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = OpenWorkOrderFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE ServiceObjectBrandLookupCount@1100525001(FilterTypes@1100409000 : ARRAY [20] OF ',Code,Description';Filters@1100409001 : ARRAY [20] OF Text) : Integer;
    VAR
      ServiceObjectBrand@1100409010 : Record 11072195;
      RecRef@1100409006 : RecordRef;
      FldRef@1100409005 : FieldRef;
      I@1100409002 : Integer;
      J@1100409003 : Integer;
    BEGIN
      // DP00826
      ServiceObjectBrand.SETCURRENTKEY(Code);

      RecRef.GETTABLE(ServiceObjectBrand);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = ServiceObjectBrandFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE ServiceObjectModelLookupCount@1100525005(FilterTypes@1100409000 : ARRAY [20] OF ',BrandCode,Code,Description';Filters@1100409001 : ARRAY [20] OF Text) : Integer;
    VAR
      ServiceObjectModel@1100409010 : Record 11072196;
      RecRef@1100409006 : RecordRef;
      FldRef@1100409005 : FieldRef;
      I@1100409002 : Integer;
      J@1100409003 : Integer;
    BEGIN
      // DP00826
      ServiceObjectModel.SETCURRENTKEY(Code);

      RecRef.GETTABLE(ServiceObjectModel);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = ServiceObjectModelFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE ServiceObjectTypeLookupCount@1100525006(FilterTypes@1100409000 : ARRAY [20] OF ',BrandCode,ModelCode,Code,Description';Filters@1100409001 : ARRAY [20] OF Text) : Integer;
    VAR
      ServiceObjectType@1100409010 : Record 11072197;
      RecRef@1100409006 : RecordRef;
      FldRef@1100409005 : FieldRef;
      I@1100409002 : Integer;
      J@1100409003 : Integer;
    BEGIN
      // DP00826
      ServiceObjectType.SETCURRENTKEY(Code);

      RecRef.GETTABLE(ServiceObjectType);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = ServiceObjectTypeFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE CustomerLookupCount@1100525004(FilterTypes@1100409000 : ARRAY [20] OF ',ResourceNo,No,Name,Address,PostCode,City,DepartmentCode';Filters@1100409001 : ARRAY [20] OF Text) : Integer;
    VAR
      Customer@1100409010 : Record 18;
      RecRef@1100409006 : RecordRef;
      FldRef@1100409005 : FieldRef;
      I@1100409002 : Integer;
      J@1100409003 : Integer;
      CustomerLookupbyNameMOB@1100525000 : Page 11229471;
    BEGIN
      // DP010009
      Customer.SETCURRENTKEY(Name);

      FOR I := 1 TO ARRAYLEN(FilterTypes) DO
        IF FilterTypes[I] = FilterTypes::ResourceNo THEN
          Customer.DPA_SetFiltersForResource(CustomerLookupbyNameMOB.OBJECTID(FALSE), Filters[I]);

      RecRef.GETTABLE(Customer);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = CustomerFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE ServiceUnitPriceLookupCount@1100529400(WorkOrderNo@1100529402 : Code[20];RoomFilter@1100529400 : Code[20];PartFilter@1100529401 : Code[20];FilterTypes@1100409000 : ARRAY [20] OF ',Code,Description';Filters@1100409001 : ARRAY [20] OF Text) : Integer;
    VAR
      TempServiceUnitPrice@1100409010 : TEMPORARY Record 11071769;
      RecRef@1100409006 : RecordRef;
      FldRef@1100409005 : FieldRef;
      I@1100409002 : Integer;
      J@1100409003 : Integer;
    BEGIN
      FillTempServiceUnitPrice(WorkOrderNo, RoomFilter, PartFilter, TempServiceUnitPrice);
      RecRef.GETTABLE(TempServiceUnitPrice);

      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        FOR J := 1 TO ARRAYLEN(FilterTypes) DO BEGIN
          IF FldRef.NAME = ServiceUnitPriceFilterTypeToFieldName(FilterTypes[J]) THEN
            IF Filters[J] = '' THEN
              FldRef.SETRANGE
            ELSE
              FldRef.SETFILTER(Filters[J]);
        END;
      END;

      EXIT(RecRef.COUNT());
    END;

    [External]
    PROCEDURE PrepareServiceObjectLookup@1100528700(ResourceNo@1100528700 : Code[20];WorkOrderNo@1100528701 : Code[20]) : Integer;
    VAR
      WorkOrder@1100528702 : Record 11229279;
      ServiceOrder@1100528703 : Record 11012823;
      ServiceContract@1100528712 : Record 11012812;
      ContractObject@1100528706 : Record 11071702;
      ServiceObject@1100528704 : Record 11071691;
      ServiceObject2@1100528713 : Record 11071691;
      ServiceObject3@1100525001 : Record 11071691;
      ServiceOrderObject@1100528711 : Record 11071724;
      ServiceLocation@1100528714 : Record 11012801;
      ServiceObjectLookupMob@1100528705 : Record 11125653;
      Add@1100528707 : Boolean;
      Found@1100525000 : Boolean;
      BilltoVendorNo@1100528710 : Code[20];
      BilltoVendorNo2@1100528709 : Code[20];
      VendorWillBeCharged@1100528708 : Boolean;
    BEGIN
      // dp00276
      // This function is always called in the company of the service order
      ServiceObjectLookupMob.SETRANGE("Resource No.", ResourceNo);
      ServiceObjectLookupMob.DELETEALL;

      IF NOT WorkOrder.GET(WorkOrderNo) THEN
        WorkOrder.INIT;

      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder) THEN
        EXIT;

      ServiceOrder.GET(WorkOrder."Source No.");

      IF ServiceOrder."Service Contract No." <> '' THEN BEGIN
      // C024453.sn
        IF ServiceOrder."Service Location No." <> '' THEN BEGIN
          ServiceLocation.GET(ServiceOrder."Service Location No.");
          ServiceLocation.GetRelatedObjects(ServiceObject3);
        END;
      // C024453.en

        ServiceContract.GET(ServiceOrder."Service Contract No.");

        ContractObject.SETRANGE("Service Contract No.", ServiceOrder."Service Contract No.");
        IF ContractObject.FINDSET THEN
          REPEAT
            Add := TRUE;
            IF (ContractObject."Starting Date" > ServiceOrder."Order Date") OR
               ((ContractObject."Ending Date" > 0D) AND (ContractObject."Ending Date" < ServiceOrder."Order Date"))
            THEN
              Add := FALSE;

      // C024453.sn
            IF Add THEN BEGIN
              IF ServiceOrder."Service Location No." <> '' THEN BEGIN
                Found := FALSE;
                IF ServiceObject3.FINDSET THEN
                  REPEAT
                    IF ServiceObject3."No." = ContractObject."Service Object No." THEN
                      Found := TRUE;
                  UNTIL (ServiceObject3.NEXT = 0) OR Found;
                IF NOT Found THEN
                  Add := FALSE;
              END;
            END;
      // C024453.en

            ServiceObject.GET(ContractObject."Service Object No.");

            IF Add THEN BEGIN
              VendorWillBeCharged := ServiceObject.VendorWillBeCharged(ServiceOrder."No.", WORKDATE, BilltoVendorNo);

              ServiceOrderObject.RESET;
              ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrder."No.");
              ServiceOrderObject.SETFILTER("Object No.", '<>%1', ServiceObject."No.");
              IF ServiceOrderObject.FINDFIRST THEN BEGIN
                ServiceObject2.GET(ServiceOrderObject."Object No.");
                IF (ServiceObject2.VendorWillBeCharged(ServiceOrder."No.", WORKDATE, BilltoVendorNo2) <> VendorWillBeCharged) OR
                   (BilltoVendorNo2 <> BilltoVendorNo) THEN
                  Add := FALSE;
              END;
            END;

            IF Add THEN
              IF NOT ServiceObject.Blocked THEN
                InsertServiceObject(ResourceNo, ServiceObject);
          UNTIL ContractObject.NEXT = 0;
      END ELSE BEGIN
        IF ServiceOrder."Service Location No." <> '' THEN BEGIN
          ServiceLocation.GET(ServiceOrder."Service Location No.");
          ServiceLocation.GetRelatedObjects(ServiceObject);
          IF ServiceObject.FINDSET THEN
            REPEAT
              InsertServiceObject(ResourceNo, ServiceObject);
            UNTIL ServiceObject.NEXT = 0;
        END;
      END;

      EXIT(ServiceObjectLookupMob.COUNT);
    END;

    [External]
    PROCEDURE PrepareOpenWorkOrderLookup@1100528000(ResourceNo@1100528000 : Code[20]) : Integer;
    VAR
      WorkOrderLookupMob@1100528001 : Record 11229867;
      ResourceWOP@1100528005 : Record 11229278;
      WorkOrder@1100528002 : Record 11229279;
      ServiceOrder@1100528003 : Record 11012823;
      Job@1100528004 : Record 11072003;
      Customer@1100528006 : Record 18;
      ServicePriority@1100528007 : Record 11012829;
      DPA_FiltersSet@1100525000 : Boolean;
      Skip@1100525001 : Boolean;
      OpenWorkOrderMOB@1100525002 : Page 11229467;
    BEGIN
      // dp00821
      WorkOrderLookupMob.SETRANGE("Resource No.", ResourceNo);
      WorkOrderLookupMob.DELETEALL;

      IF NOT ResourceWOP.GET(ResourceNo) THEN
        EXIT;

      WorkOrder.SETCURRENTKEY("Resource No.","Export to FSA");
      WorkOrder.SETRANGE("Source Company", ResourceWOP.Company);
      WorkOrder.SETFILTER("Resource Type", '%1|%2', WorkOrder."Resource Type"::" ", WorkOrder."Resource Type"::Employee);
      WorkOrder.SETFILTER("Resource No.", '%1|%2', '', ResourceWOP."No.");
      WorkOrder.SETRANGE("Export to FSA", FALSE);
      WorkOrder.SETRANGE("Date/Time Export to FSA", CREATEDATETIME(0D, 0T));
      IF WorkOrder.FINDSET THEN
        REPEAT
          ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");

          IF (WorkOrder."Source Company" = COMPANYNAME) AND (NOT DPA_FiltersSet) THEN
            ServiceOrder.DPA_SetFiltersForResource(OpenWorkOrderMOB.OBJECTID(FALSE), ResourceNo);
          DPA_FiltersSet := TRUE;

          Skip := FALSE;
          IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
            ServiceOrder.SETRANGE("No.", WorkOrder."Source No.");
            IF NOT ServiceOrder.FINDFIRST THEN
              Skip := TRUE;
          END;

          IF (NOT Skip) THEN BEGIN
            Job.CHANGECOMPANY(WorkOrder."Source Company");
            Customer.CHANGECOMPANY(WorkOrder."Source Company");
            ServicePriority.CHANGECOMPANY(WorkOrder."Source Company");

            WorkOrderLookupMob.INIT;
            WorkOrderLookupMob."Resource No." := ResourceNo;
            WorkOrderLookupMob."Work Order No." := WorkOrder."No.";
            WorkOrderLookupMob."Source Company" := WorkOrder."Source Company";
            WorkOrderLookupMob."Source Type" := WorkOrder."Source Type";
            WorkOrderLookupMob."Source No." := WorkOrder."Source No.";
            WorkOrderLookupMob."Work Order Description" := WorkOrder.Description;
            CASE WorkOrder."Source Type" OF
              WorkOrder."Source Type"::ServiceOrder:
                BEGIN
                  IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
                    IF NOT Customer.GET(ServiceOrder."Customer No.") THEN
                      Customer.INIT;
                    IF NOT ServicePriority.GET(ServiceOrder.Priority) THEN
                      ServicePriority.INIT;
                  END ELSE
                    ServiceOrder.INIT;
                  WorkOrderLookupMob."Customer Name" := Customer.Name;
                  WorkOrderLookupMob."Name Service Order" := ServiceOrder.Name;
                  WorkOrderLookupMob.Address := ServiceOrder.Address;
                  WorkOrderLookupMob."Post Code" := ServiceOrder."Post Code";
                  WorkOrderLookupMob.City := ServiceOrder.City;
                  WorkOrderLookupMob."Country/Region Code" := ServiceOrder."Country/Region Code";
                  WorkOrderLookupMob.Priority := ServicePriority.Description;
                END;
              WorkOrder."Source Type"::Project:
                BEGIN
                  Job.CHANGECOMPANY(WorkOrder."Source Company");
                  IF Job.GET(WorkOrder."Source No.") THEN BEGIN
                    IF NOT Customer.GET(Job."Bill-to Customer No.") THEN
                      Customer.INIT;
                  END ELSE
                    Job.INIT;
                  WorkOrderLookupMob."Customer Name" := Customer.Name;
                  WorkOrderLookupMob.Address := Job.Address;
                  WorkOrderLookupMob."Post Code" := Job."Post Code";
                  WorkOrderLookupMob.City := Job.City;
                  WorkOrderLookupMob."Country/Region Code" := Job."Country/Region Code";
                END;
            END;
            WorkOrderLookupMob.INSERT;
          END;
        UNTIL WorkOrder.NEXT = 0;

      EXIT(WorkOrderLookupMob.COUNT);
    END;

    [External]
    PROCEDURE FillTempServiceUnitPrice@1100529405(WorkOrderNo@1100529400 : Code[20];RoomFilter@1100529401 : Code[20];PartFilter@1100529402 : Code[20];VAR TempServiceUnitPrice@1100529408 : TEMPORARY Record 11071769);
    VAR
      WorkOrder@1100529407 : Record 11229279;
      ServiceOrder@1100529406 : Record 11012823;
      ServiceOrderExtension@1100529405 : Record 11071727;
      ServiceUnitPrice@1100529404 : Record 11071769;
      SUPRoomRelationLine@1100529403 : Record 11071983;
      ServiceUnitPriceSetLine@1100528600 : Record 11072285;
    BEGIN
      // similar code see table 11071772 LookupUnitPriceLineCode
      TempServiceUnitPrice.RESET;
      TempServiceUnitPrice.DELETEALL;

      IF NOT WorkOrder.GET(WorkOrderNo) THEN
        EXIT;

      IF WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder THEN
        EXIT;

      ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
      IF NOT ServiceOrder.GET(WorkOrder."Source No.") THEN
        EXIT;

      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");

      ServiceUnitPrice.SETRANGE("Price Book Type", ServiceOrder."Price Book Type");
      ServiceUnitPrice.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      ServiceUnitPrice.SETRANGE("Index Date", ServiceOrderExtension."Price Book Index Date");
      ServiceUnitPrice.SETFILTER(Part, '%1', '');
      IF (PartFilter <> '') THEN
        ServiceUnitPrice.SETFILTER(Part, '%1|%2', '', PartFilter);
      IF (RoomFilter <> '') AND (ServiceOrder."Price Book Type" = ServiceOrder."Price Book Type"::Customer) THEN BEGIN
        SUPRoomRelationLine.SETRANGE("Customer No.", ServiceOrderExtension."Price Book Code");
        SUPRoomRelationLine.SETRANGE("Room Code", RoomFilter);
        SUPRoomRelationLine.SETRANGE("Index Date", ServiceOrderExtension."Price Book Index Date");
        IF SUPRoomRelationLine.FINDSET THEN BEGIN
          REPEAT
            IF SUPRoomRelationLine."Unit Price Code" <> '' THEN
              IF ServiceUnitPrice.GET(
                SUPRoomRelationLine."Price Book Code", SUPRoomRelationLine."Index Date",  SUPRoomRelationLine."Unit Price Code")
              THEN BEGIN
                TempServiceUnitPrice.TRANSFERFIELDS(ServiceUnitPrice);
                IF TempServiceUnitPrice.INSERT THEN;
              END;
            IF SUPRoomRelationLine."Unit Price Set Code" <> '' THEN BEGIN
              ServiceUnitPriceSetLine.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
              ServiceUnitPriceSetLine.SETRANGE("Price Book Index Date", ServiceOrderExtension."Price Book Index Date");
              ServiceUnitPriceSetLine.SETRANGE("Set Code", SUPRoomRelationLine."Unit Price Set Code");
              IF ServiceUnitPriceSetLine.FINDSET THEN
                REPEAT
                  IF ServiceUnitPrice.GET(
                    ServiceUnitPriceSetLine."Price Book Code", ServiceOrderExtension."Price Book Index Date", ServiceUnitPriceSetLine."Unit Price Code")
                  THEN BEGIN
                    TempServiceUnitPrice.TRANSFERFIELDS(ServiceUnitPrice);
                    IF TempServiceUnitPrice.INSERT THEN;
                  END;
                UNTIL ServiceUnitPriceSetLine.NEXT = 0;
            END;
          UNTIL SUPRoomRelationLine.NEXT = 0;
        END;
      END ELSE BEGIN
        IF ServiceUnitPrice.FINDSET THEN
          REPEAT
            TempServiceUnitPrice.TRANSFERFIELDS(ServiceUnitPrice);
            TempServiceUnitPrice.INSERT;
          UNTIL ServiceUnitPrice.NEXT = 0;
      END;
      TempServiceUnitPrice.COPYFILTERS(ServiceUnitPrice);
      IF TempServiceUnitPrice.FINDFIRST THEN;
    END;

    [External]
    PROCEDURE PlanOpenWorkOrder@1100528001(ResourceNo@1100528001 : Code[20];WorkOrderNo@1100528000 : Code[20];VAR PlannedByResourceNo@1100528004 : Code[20]) : Boolean;
    VAR
      ResourceWOP@1100528003 : Record 11229278;
      WorkOrder@1100528002 : Record 11229279;
    BEGIN
      IF WorkOrder.GET(WorkOrderNo) THEN BEGIN
        PlannedByResourceNo := WorkOrder."Resource No.";
        IF (WorkOrder."Date/Time Export to FSA" <> CREATEDATETIME(0D, 0T)) OR (WorkOrder."Export to FSA" = TRUE) THEN
          EXIT;
        IF (WorkOrder."Resource No." <> ResourceNo) AND (WorkOrder."Resource No." <> '') THEN
          EXIT;
        IF ResourceWOP.GET(ResourceNo) THEN BEGIN
          WorkOrder.VALIDATE(WorkOrder."Resource Type", ResourceWOP.Type);
          WorkOrder.VALIDATE("Resource No.", ResourceWOP."No.");
          WorkOrder.VALIDATE("Export to FSA", TRUE);
          WorkOrder.MODIFY(TRUE);
          PlannedByResourceNo := WorkOrder."Resource No.";
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetItemInventory@1100409002(ItemCode@1100409000 : Code[20];LocationCode@1100409001 : Code[10]) : Decimal;
    VAR
      Item@1100409002 : Record 27;
    BEGIN
      IF Item.GET(ItemCode) THEN BEGIN
        Item.SETFILTER("Location Filter", LocationCode);
        Item.CALCFIELDS(Inventory);
        EXIT(Item.Inventory);
      END;
    END;

    [External]
    PROCEDURE ItemExistsForTradeItem@1100525000(VendorTradeItem@1100525000 : Code[20];TradeItem@1100525001 : Code[20]) : Boolean;
    VAR
      ValidateItems@1100525002 : Codeunit 11012033;
      ItemNo@1100525019 : Code[20];
      Manufacturer@1100525018 : Code[20];
      BasicItem@1100525016 : Code[20];
      CostObject@1100525015 : Code[20];
      Description@1100525014 : Text[50];
      UnitOfMeasure@1100525013 : Code[10];
      NetPrice@1100525012 : Decimal;
      DiscPerc@1100525011 : Decimal;
      ItemRefDate@1100525010 : Date;
      GrossPrice@1100525009 : Decimal;
      Description2@1100525008 : Text[50];
      CostComponent@1100525007 : Code[10];
      DiscRef1@1100525006 : Code[20];
      DiscRef2@1100525005 : Code[20];
      PriceRefDate@1100525004 : Date;
      DiscPrio@1100525003 : Code[10];
    BEGIN
      // C024394
      ValidateItems.ValidateItem(2, // TradeItem
        TradeItem, ItemNo, Manufacturer, VendorTradeItem,
        BasicItem, CostObject, Description, UnitOfMeasure, NetPrice,
        DiscPerc, ItemRefDate, GrossPrice, Description2, CostComponent,
        DiscRef1, DiscRef2, PriceRefDate, DiscPrio);
      EXIT(ItemNo <> '');
    END;

    LOCAL PROCEDURE InsertServiceObject@1100528701(ResourceNo@1100528702 : Code[20];ServiceObject@1100528700 : Record 11071691);
    VAR
      StandardObject@1100528701 : Record 11020334;
      ServiceObjectLookupMob@1100528703 : Record 11125653;
      XMLEncode4PSMobile@1100525000 : Codeunit 11012195;
    BEGIN
      StandardObject.GET(ServiceObject."Standard Object No.");
      ServiceObject.CALCFIELDS("Brand Description", "Model Description", "Type Description");

      ServiceObjectLookupMob.INIT;
      ServiceObjectLookupMob."Resource No." := ResourceNo;
      ServiceObjectLookupMob."No." := ServiceObject."No.";
      ServiceObjectLookupMob."Standard Object No." := ServiceObject."Standard Object No.";
      ServiceObjectLookupMob.Description := ServiceObject.Description;
      ServiceObjectLookupMob."Standard Object Description" := StandardObject.Description;
      ServiceObjectLookupMob."Standard Object Editable" := XMLEncode4PSMobile.GetStandardObjectEditable(ServiceObject."Standard Object No.");
      ServiceObjectLookupMob."Service Location No." := ServiceObject."Service Location No.";
      ServiceObjectLookupMob."Brand Code" := ServiceObject."Brand Code";
      ServiceObjectLookupMob."Brand Description" := ServiceObject."Brand Description";
      ServiceObjectLookupMob."Model Code" := ServiceObject."Model Code";
      ServiceObjectLookupMob."Model Description" := ServiceObject."Model Description";
      ServiceObjectLookupMob."Type Code" := ServiceObject."Type Code";
      ServiceObjectLookupMob."Type Description" := ServiceObject."Type Description";
      ServiceObjectLookupMob.Quantity := ServiceObject.Quantity;
      ServiceObjectLookupMob.Building := ServiceObject.Building;
      ServiceObjectLookupMob.Floor := ServiceObject.Floor;
      ServiceObjectLookupMob.Room := ServiceObject.Room;
      ServiceObjectLookupMob.Blocked := ServiceObject.Blocked;
      ServiceObjectLookupMob.Latitude := ServiceObject.Latitude;
      ServiceObjectLookupMob.Longitude := ServiceObject.Longitude;
      ServiceObjectLookupMob.INSERT;
    END;

    LOCAL PROCEDURE ServiceLocationFilterTypeToFieldName@1100409008(FilterType@1100409000 : ',Description,No,City,SearchName,PostCode') : Text;
    VAR
      ServiceLocation@1100409001 : Record 11012801;
    BEGIN
      CASE FilterType OF
        FilterType::Description: EXIT(ServiceLocation.FIELDNAME("Search Name"));
        FilterType::No: EXIT(ServiceLocation.FIELDNAME("No."));
        FilterType::City: EXIT(ServiceLocation.FIELDNAME(City));
        FilterType::SearchName: EXIT(ServiceLocation.FIELDNAME("Search Name"));
        FilterType::PostCode: EXIT(ServiceLocation.FIELDNAME("Post Code"));
      END;
    END;

    LOCAL PROCEDURE ItemFilterTypeToFieldName@1100409006(FilterType@1100409000 : ',Description,No,ItemVendor,ItemManufacturer,SearchDescription') : Text;
    VAR
      Item@1100409001 : Record 27;
    BEGIN
      CASE FilterType OF
        FilterType::Description: EXIT(Item.FIELDNAME(Description));
        FilterType::No: EXIT(Item.FIELDNAME("No."));
        FilterType::ItemVendor: EXIT(Item.FIELDNAME("Item Vendor"));
        FilterType::ItemManufacturer: EXIT(Item.FIELDNAME("Item Manufacturer"));
        FilterType::SearchDescription: EXIT(Item.FIELDNAME("Search Description"));
      END;
    END;

    LOCAL PROCEDURE ServiceObjectFilterTypeToFieldName@1100409010(FilterType@1100409000 : ',Description,StandardObjectDescription,Blocked,ServiceLocationNo,ResourceNo,No') : Text;
    VAR
      ServiceObjectLookupMob@1100409002 : Record 11125653;
    BEGIN
      CASE FilterType OF
        FilterType::Description: EXIT(ServiceObjectLookupMob.FIELDNAME(Description));
        FilterType::StandardObjectDescription: EXIT(ServiceObjectLookupMob.FIELDNAME("Standard Object Description"));
        FilterType::Blocked: EXIT(ServiceObjectLookupMob.FIELDNAME(Blocked));
        FilterType::ResourceNo: EXIT(ServiceObjectLookupMob.FIELDNAME("Resource No."));
        FilterType::No: EXIT(ServiceObjectLookupMob.FIELDNAME("No."));
      END;
    END;

    LOCAL PROCEDURE StandardObjectFilterTypeToFieldName@1100409000(FilterType@1100409000 : ',No,Description,BrandCode,BrandDescription,ModelCode,ModelDescription,TypeCode,TypeDescription,ObjectGroup') : Text;
    VAR
      StandardObject@1100409001 : Record 11020334;
    BEGIN
      CASE FilterType OF
        FilterType::No: EXIT(StandardObject.FIELDNAME("No."));
        FilterType::Description: EXIT(StandardObject.FIELDNAME(Description));
        FilterType::BrandCode: EXIT(StandardObject.FIELDNAME("Brand Code"));
        FilterType::BrandDescription: EXIT(StandardObject.FIELDNAME("Brand Description"));
        FilterType::ModelCode: EXIT(StandardObject.FIELDNAME("Model Code"));
        FilterType::ModelDescription: EXIT(StandardObject.FIELDNAME("Model Description"));
        FilterType::TypeCode: EXIT(StandardObject.FIELDNAME("Type Code"));
        FilterType::TypeDescription: EXIT(StandardObject.FIELDNAME("Type Description"));
        FilterType::ObjectGroup: EXIT(StandardObject.FIELDNAME("Object Group"));
      END;
    END;

    LOCAL PROCEDURE OpenWorkOrderFilterTypeToFieldName@1100528009(FilterType@1100409000 : ',ResourceNo,SourceType,Address,PostCode,City,CountryRegionCode,Priority,CustomerName') : Text;
    VAR
      WorkOrderLookupMob@1100409001 : Record 11229867;
    BEGIN
      CASE FilterType OF
        FilterType::ResourceNo: EXIT(WorkOrderLookupMob.FIELDNAME("Resource No."));
        FilterType::SourceType: EXIT(WorkOrderLookupMob.FIELDNAME("Source Type"));
        FilterType::Address: EXIT(WorkOrderLookupMob.FIELDNAME(Address));
        FilterType::PostCode: EXIT(WorkOrderLookupMob.FIELDNAME("Post Code"));
        FilterType::CountryRegionCode: EXIT(WorkOrderLookupMob.FIELDNAME("Country/Region Code"));
        FilterType::Priority: EXIT(WorkOrderLookupMob.FIELDNAME(Priority));
        FilterType::CustomerName: EXIT(WorkOrderLookupMob.FIELDNAME("Customer Name"));
      END;
    END;

    LOCAL PROCEDURE ServiceObjectBrandFilterTypeToFieldName@1100525009(FilterType@1100409000 : ',Code,Description') : Text;
    VAR
      ServiceObjectBrand@1100409001 : Record 11072195;
    BEGIN
      // DP00826
      CASE FilterType OF
        FilterType::Code: EXIT(ServiceObjectBrand.FIELDNAME(Code));
        FilterType::Description: EXIT(ServiceObjectBrand.FIELDNAME(Description));
      END;
    END;

    LOCAL PROCEDURE ServiceObjectModelFilterTypeToFieldName@1100525011(FilterType@1100409000 : ',BrandCode,Code,Description') : Text;
    VAR
      ServiceObjectModel@1100409001 : Record 11072196;
    BEGIN
      // DP00826
      CASE FilterType OF
        FilterType::BrandCode: EXIT(ServiceObjectModel.FIELDNAME("Brand Code"));
        FilterType::Code: EXIT(ServiceObjectModel.FIELDNAME(Code));
        FilterType::Description: EXIT(ServiceObjectModel.FIELDNAME(Description));
      END;
    END;

    LOCAL PROCEDURE ServiceObjectTypeFilterTypeToFieldName@1100525012(FilterType@1100409000 : ',BrandCode,ModelCode,Code,Description') : Text;
    VAR
      ServiceObjectType@1100409001 : Record 11072197;
    BEGIN
      // DP00826
      CASE FilterType OF
        FilterType::BrandCode: EXIT(ServiceObjectType.FIELDNAME("Brand Code"));
        FilterType::ModelCode: EXIT(ServiceObjectType.FIELDNAME("Model Code"));
        FilterType::Code: EXIT(ServiceObjectType.FIELDNAME(Code));
        FilterType::Description: EXIT(ServiceObjectType.FIELDNAME(Description));
      END;
    END;

    LOCAL PROCEDURE CustomerFilterTypeToFieldName@1100525002(FilterType@1100409000 : ',ResourceNo,No,Name,Address,PostCode,City,DepartmentCode') : Text;
    VAR
      Customer@1100409001 : Record 18;
    BEGIN
      // DP01009
      CASE FilterType OF
      //  FilterType::ResourceNo: EXIT(Customer.FIELDNAME("Generic Filter"));
        FilterType::No: EXIT(Customer.FIELDNAME("No."));
        FilterType::Name: EXIT(Customer.FIELDNAME(Name));
        FilterType::Address: EXIT(Customer.FIELDNAME(Address));
        FilterType::PostCode: EXIT(Customer.FIELDNAME("Post Code"));
        FilterType::City: EXIT(Customer.FIELDNAME(City));
        FilterType::DepartmentCode: EXIT(Customer.FIELDNAME("Global Dimension 1 Code"));
      END;
    END;

    LOCAL PROCEDURE ServiceUnitPriceFilterTypeToFieldName@1100529401(FilterType@1100409000 : ',Code,Description') : Text;
    VAR
      ServiceUnitPrice@1100409001 : Record 11071769;
    BEGIN
      CASE FilterType OF
        FilterType::Code: EXIT(ServiceUnitPrice.FIELDNAME(Code));
        FilterType::Description: EXIT(ServiceUnitPrice.FIELDNAME(Description));
      END;
    END;

    BEGIN
    END.
  }
}

