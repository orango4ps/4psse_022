OBJECT Codeunit 11127984 ImportOrders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    OnRun=VAR
            runOK@1100285100 : Boolean;
          BEGIN
            CLEAR(SymbrioMgmt);
            //SymbrioMgmt.SearchPurchaseFolder2();

            IF NOT SymbrioSetup.GET THEN
              EXIT;

            SymbrioSetup.TESTFIELD("Purchase Import Path");

            DirectoryInfo := DirectoryInfo.DirectoryInfo(SymbrioSetup."Purchase Import Path");
            List := DirectoryInfo.GetFiles('*.xml');
            enumerator := List.GetEnumerator();

            WHILE enumerator.MoveNext DO BEGIN
              FileInfo:= enumerator.Current();
              runOK := FALSE;

              CASE SymbrioSetup."Import orders by" OF
                SymbrioSetup."Import orders by"::XMLport:
                    BEGIN
                      varXmlFile.OPEN(FileInfo.FullName);
                      varXmlFile.CREATEINSTREAM(varInputStream);
                      SymbrioImportPurchaseOrder.SetFileName(FileInfo.Name,FileInfo.FullName);
                      SymbrioImportPurchaseOrder.SETSOURCE(varInputStream);
                      runOK := SymbrioImportPurchaseOrder.IMPORT;
                      varXmlFile.CLOSE;
                    END;
                SymbrioSetup."Import orders by"::DotNet:
                    runOK := ReadXml(FileInfo.Name,FileInfo.FullName);
              END;
              IF runOK THEN BEGIN
                //move to archive
                IF EXISTS(SymbrioSetup."Archive Folder" + FileInfo.Name) THEN
                  ERASE(SymbrioSetup."Archive Folder" + FileInfo.Name);
                FileInfo.MoveTo(SymbrioSetup."Archive Folder" + FileInfo.Name);
              END
              ELSE BEGIN
                //move to error-folder
                IF EXISTS(SymbrioSetup."Error file folder" + FileInfo.Name) THEN
                  ERASE(SymbrioSetup."Error file folder" + FileInfo.Name);
                FileInfo.MoveTo(SymbrioSetup."Error file folder" + FileInfo.Name);

                //ERROR('Failed to read '+FileInfo.FullName);
                SymbrioErrorLog.InsertNewErrorLine('Failed to read '+FileInfo.Name,'ImportOrders','')
              END;
              COMMIT;
            END;
          END;

  }
  CODE
  {
    VAR
      SymbrioMgmt@1100285000 : Codeunit 11127976;
      SymbrioSetup@1100285504 : Record 11127975;
      DirectoryInfo@1100285500 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
      FileInfo@1100285501 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      List@1100285502 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      enumerator@1100285503 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      errText@1100285505 : Text;
      SymbrioErrorLog@1100285506 : Record 11127987;
      SymbrioImportPurchaseOrder@1100285507 : XMLport 11127993;
      varXmlFile@1100285508 : File;
      varInputStream@1100285509 : InStream;
      entryId@1100285100 : Integer;

    PROCEDURE ReadXml@1100285100(FileInfoName@1100285100 : Text[250];FileInfoFullName@1100285106 : Text[250]) : Boolean;
    VAR
      SymbrioPurchaseHeaderBuffer@1100285104 : Record 11127978;
      SymbrioPurchaseLineBuffer@1100285105 : Record 11127979;
      PurchaseHeader@1100285123 : Record 38;
      SymbrioPurchaseHeader@1100285122 : Record 11127978;
      XMLDOMMgt@1100285121 : Codeunit 11020220;
      lvXMLDoc@1100285120 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvXMLNode0@1100285119 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode1@1100285118 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode2@1100285117 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode3@1100285116 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode4@1100285115 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeList1@1100285114 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      lvXMLNodeList2@1100285113 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      dotNetFile@1100285112 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      i@1100285111 : Integer;
      j@1100285110 : Integer;
      LineNo@1100285109 : Integer;
      varDate@1100285103 : Date;
      varTime@1100285102 : Time;
      keyDateTime@1100285101 : DateTime;
    BEGIN
      GETSTAMP(FileInfoFullName, varDate, varTime);
      keyDateTime := CURRENTDATETIME;
      entryId += 1;

      lvXMLDoc := lvXMLDoc.XmlDocument();
      lvXMLDoc.Load(FileInfoFullName);
      lvXMLNode0 := lvXMLDoc.DocumentElement;

      XMLDOMMgt.FindNode(lvXMLNode0,'/FourPS_PurchaseOrder/OrderHead',lvXMLNode1);

      SaveXMLNodeTxt(lvXMLNode1, 'Currency', SymbrioPurchaseHeaderBuffer.Currency, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.Currency));
      SaveXMLNodeTxt(lvXMLNode1, 'DeliveryAddress', SymbrioPurchaseHeaderBuffer.DeliveryAddress, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.DeliveryAddress));
      SaveXMLNodeTxt(lvXMLNode1, 'DeliveryAddressNoteText', SymbrioPurchaseHeaderBuffer.DeliveryAddressNoteText, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.DeliveryAddressNoteText));
      SaveXMLNodeTxt(lvXMLNode1, 'DeliveryCity', SymbrioPurchaseHeaderBuffer.DeliveryCity, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.DeliveryCity));
      SaveXMLNodeTxt(lvXMLNode1, 'DeliveryCountry', SymbrioPurchaseHeaderBuffer.DeliveryCountry, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.DeliveryCountry));
      SaveXMLNodeTxt(lvXMLNode1, 'DeliveryPostalCode', SymbrioPurchaseHeaderBuffer.DeliveryPostalCode, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.DeliveryPostalCode));
      SaveXMLNodeTxt(lvXMLNode1, 'DeliveryReceiver', SymbrioPurchaseHeaderBuffer.DeliveryReceiver, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.DeliveryReceiver));
      SaveXMLNodeTxt(lvXMLNode1, 'EarliestDeliveryDate', SymbrioPurchaseHeaderBuffer.EarliestDeliveryDate, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.EarliestDeliveryDate));
      SaveXMLNodeTxt(lvXMLNode1, 'GoodsLabel', SymbrioPurchaseHeaderBuffer.GoodsLabel, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.GoodsLabel));
      SaveXMLNodeTxt(lvXMLNode1, 'OrderCreatedDate', SymbrioPurchaseHeaderBuffer.OrderCreatedDate, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.OrderCreatedDate));
      SaveXMLNodeTxt(lvXMLNode1, 'OrderHeadID', SymbrioPurchaseHeaderBuffer.OrderHeadID, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.OrderHeadID));
      SaveXMLNodeTxt(lvXMLNode1, 'OrderOutType', SymbrioPurchaseHeaderBuffer.OrderOutType, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.OrderOutType));
      SaveXMLNodeTxt(lvXMLNode1, 'OrderType', SymbrioPurchaseHeaderBuffer.OrderType, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.OrderType));
      SaveXMLNodeTxt(lvXMLNode1, 'ProjectAgreementNo', SymbrioPurchaseHeaderBuffer.ProjectAgreementNo, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.ProjectAgreementNo));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserCompanyCode', SymbrioPurchaseHeaderBuffer.PurchaserCompanyCode, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserCompanyCode));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserCompanyName', SymbrioPurchaseHeaderBuffer.PurchaserCompanyName, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserCompanyName));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserCompanyOrgNo', SymbrioPurchaseHeaderBuffer.PurchaserCompanyOrgNo, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserCompanyOrgNo));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserCreatorEmail', SymbrioPurchaseHeaderBuffer.PurchaserCreatorEmail, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserCreatorEmail));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserCreatorPhone', SymbrioPurchaseHeaderBuffer.PurchaserCreatorPhone, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserCreatorPhone));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserIdentification', SymbrioPurchaseHeaderBuffer.PurchaserIdentification, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserIdentification));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserReference', SymbrioPurchaseHeaderBuffer.PurchaserReference, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserReference));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserReferenceEmploymentNo', SymbrioPurchaseHeaderBuffer.PurchaserReferenceEmploymentNo, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserReferenceEmploymentNo));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserReferenceFirstName', SymbrioPurchaseHeaderBuffer.PurchaserReferenceFirstName, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserReferenceFirstName));
      SaveXMLNodeTxt(lvXMLNode1, 'PurchaserReferenceLastName', SymbrioPurchaseHeaderBuffer.PurchaserReferenceLastName, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.PurchaserReferenceLastName));
      SaveXMLNodeTxt(lvXMLNode1, 'SupplierCompanyCode', SymbrioPurchaseHeaderBuffer.SupplierCompanyCode, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.SupplierCompanyCode));
      SaveXMLNodeTxt(lvXMLNode1, 'SupplierCompanyName', SymbrioPurchaseHeaderBuffer.SupplierCompanyName, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.SupplierCompanyName));
      SaveXMLNodeTxt(lvXMLNode1, 'SupplierCompanyOrgNo', SymbrioPurchaseHeaderBuffer.SupplierCompanyOrgNo, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.SupplierCompanyOrgNo));
      SaveXMLNodeTxt(lvXMLNode1, 'SupplierIdentification', SymbrioPurchaseHeaderBuffer.SupplierIdentification, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.SupplierIdentification));
      SaveXMLNodeTxt(lvXMLNode1, 'SupplierOrderNo', SymbrioPurchaseHeaderBuffer.SupplierOrderNo, MAXSTRLEN(SymbrioPurchaseHeaderBuffer.SupplierOrderNo));

      SymbrioPurchaseHeaderBuffer."Date Last Modified" := varDate;
      SymbrioPurchaseHeaderBuffer."DateTime Received" := keyDateTime;
      SymbrioPurchaseHeaderBuffer."EntryNo in BatchRead" := entryId;
      SymbrioPurchaseHeaderBuffer."Source Filename" := FileInfoName;
      SymbrioPurchaseHeaderBuffer."Time Last Modified" := varTime;
      SymbrioPurchaseHeaderBuffer.INSERT;


      XMLDOMMgt.FindNodes(lvXMLNode1,'OrderLine',lvXMLNodeList1);
      FOR i := 0 TO (lvXMLNodeList1.Count - 1) DO BEGIN
        lvXMLNode2 := lvXMLNodeList1.Item(i);
        CLEAR(SymbrioPurchaseLineBuffer);

        SaveXMLNodeTxt(lvXMLNode2, 'ArticleExists', SymbrioPurchaseLineBuffer.ArticleExists, MAXSTRLEN(SymbrioPurchaseLineBuffer.ArticleExists));
        SaveXMLNodeTxt(lvXMLNode2, 'ArticleName', SymbrioPurchaseLineBuffer.ArticleName, MAXSTRLEN(SymbrioPurchaseLineBuffer.ArticleName));
        SaveXMLNodeTxt(lvXMLNode2, 'ArticleNo', SymbrioPurchaseLineBuffer.ArticleNo, MAXSTRLEN(SymbrioPurchaseLineBuffer.ArticleNo));
        SaveXMLNodeTxt(lvXMLNode2, 'ArticleNo2', SymbrioPurchaseLineBuffer.ArticleNo2, MAXSTRLEN(SymbrioPurchaseLineBuffer.ArticleNo2));
        SaveXMLNodeTxt(lvXMLNode2, 'BranchNo', SymbrioPurchaseLineBuffer.BranchNo, MAXSTRLEN(SymbrioPurchaseLineBuffer.BranchNo));
        SaveXMLNodeTxt(lvXMLNode2, 'ConfirmationType', SymbrioPurchaseLineBuffer.ConfirmationType, MAXSTRLEN(SymbrioPurchaseLineBuffer.ConfirmationType));
        SaveXMLNodeTxt(lvXMLNode2, 'CostCenter', SymbrioPurchaseLineBuffer.CostCenter, MAXSTRLEN(SymbrioPurchaseLineBuffer.CostCenter));
        SaveXMLNodeTxt(lvXMLNode2, 'CostObject', SymbrioPurchaseLineBuffer.CostObject, MAXSTRLEN(SymbrioPurchaseLineBuffer.CostObject));
        SaveXMLNodeTxt(lvXMLNode2, 'DeliveryDate', SymbrioPurchaseLineBuffer.DeliveryDate, MAXSTRLEN(SymbrioPurchaseLineBuffer.DeliveryDate));
        SaveXMLNodeTxt(lvXMLNode2, 'Discount', SymbrioPurchaseLineBuffer.Discount, MAXSTRLEN(SymbrioPurchaseLineBuffer.Discount));
        SaveXMLNodeTxt(lvXMLNode2, 'Element', SymbrioPurchaseLineBuffer.Element, MAXSTRLEN(SymbrioPurchaseLineBuffer.Element));
        SaveXMLNodeTxt(lvXMLNode2, 'GrossPrice', SymbrioPurchaseLineBuffer.GrossPrice, MAXSTRLEN(SymbrioPurchaseLineBuffer.GrossPrice));
        SaveXMLNodeTxt(lvXMLNode2, 'NetPrice', SymbrioPurchaseLineBuffer.NetPrice, MAXSTRLEN(SymbrioPurchaseLineBuffer.NetPrice));
        SaveXMLNodeTxt(lvXMLNode2, 'OrderLinePosition', SymbrioPurchaseLineBuffer.OrderLinePosition, MAXSTRLEN(SymbrioPurchaseLineBuffer.OrderLinePosition));   //PK
        SaveXMLNodeTxt(lvXMLNode2, 'ProjectNo', SymbrioPurchaseLineBuffer.ProjectNo, MAXSTRLEN(SymbrioPurchaseLineBuffer.ProjectNo));
        SaveXMLNodeTxt(lvXMLNode2, 'PurchaseType', SymbrioPurchaseLineBuffer.PurchaseType, MAXSTRLEN(SymbrioPurchaseLineBuffer.PurchaseType));
        SaveXMLNodeTxt(lvXMLNode2, 'Quantity', SymbrioPurchaseLineBuffer.Quantity, MAXSTRLEN(SymbrioPurchaseLineBuffer.Quantity));
        SaveXMLNodeTxt(lvXMLNode2, 'QuantityMeasurement', SymbrioPurchaseLineBuffer.QuantityMeasurement, MAXSTRLEN(SymbrioPurchaseLineBuffer.QuantityMeasurement));
        SaveXMLNodeTxt(lvXMLNode2, 'StatGroupNo', SymbrioPurchaseLineBuffer.StatGroupNo, MAXSTRLEN(SymbrioPurchaseLineBuffer.StatGroupNo));

        SymbrioPurchaseLineBuffer.OrderHeadID := SymbrioPurchaseHeaderBuffer.OrderHeadID;  //PK
        SymbrioPurchaseLineBuffer."Date Last Modified" := varDate;
        SymbrioPurchaseLineBuffer."DateTime Received" := keyDateTime;                        //PK
        SymbrioPurchaseLineBuffer."EntryNo Head in BatchRead" := entryId;                    //PK
        SymbrioPurchaseLineBuffer."Source Filename" := FileInfoName;
        SymbrioPurchaseLineBuffer."Time Last Modified" := varTime;

        SymbrioPurchaseLineBuffer.INSERT;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SaveXMLNodeTxt@1100285102(lvXMLNode@1100285100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";tagName@1100285101 : Text;VAR fieldValue@1100285102 : Text;fieldMaxLen@1100285105 : Integer);
    VAR
      lvXMLNode1@1100285103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMMgt@1100285104 : Codeunit 11020220;
    BEGIN

      IF NOT XMLDOMMgt.FindNode(lvXMLNode,tagName,lvXMLNode1) THEN
        EXIT;
      fieldValue := COPYSTR(FORMAT(lvXMLNode1.InnerText),1,fieldMaxLen);
    END;

    BEGIN
    {
      SYM939 Created

      140226 ITERO.DL SYM993 NAS process stops on error, added error folder
      140306 ITERO.DL added COMMIT after file-movments
      140820 ITERO.DL SYM1000 import orders via XMLport not DotNet/DOM
      160920 ITERO.DL moved all import from XMLport after several failed Symbrio updates
      170124 ITERO.DL store filename w/o path for ReadXML
    }
    END.
  }
}

