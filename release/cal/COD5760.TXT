OBJECT Codeunit 5760 Whse.-Post Receipt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=7317;
    Permissions=TableData 6509=i,
                TableData 7318=i,
                TableData 7319=i;
    OnRun=BEGIN
            OnBeforeRun(Rec);

            WhseRcptLine.COPY(Rec);
            Code;
            Rec := WhseRcptLine;

            OnAfterRun(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The source document %1 %2 is not released.;NOR=Kildedokumentet %1 %2 er ikke frigitt.;SVE=K„lldokumentet %1 %2 „r inte sl„ppt.';
      Text001@1001 : TextConst 'ENU=There is nothing to post.;NOR=Det finnes ingenting † bokf›re.;SVE=Det finns inget att bokf”ra.';
      Text002@1002 : TextConst 'ENU=Number of source documents posted: %1 out of a total of %2.;NOR=Antall bokf›rte kildedokumenter: %1 av totalt %2.;SVE=Antal bokf”rda k„lldok.: %1 av totalt %2.';
      Text003@1003 : TextConst 'ENU=Number of put-away activities created: %3.;NOR=Antall opprettede plasseringsaktiviteter: %3.;SVE=Antal skapade artikelinf”rselaktiviteter: %3.';
      WhseRcptHeader@1021 : Record 7316;
      WhseRcptLine@1009 : Record 7317;
      WhseRcptLineBuf@1040 : TEMPORARY Record 7317;
      TransHeader@1012 : Record 5740;
      SalesHeader@1011 : Record 36;
      PurchHeader@1008 : Record 38;
      TempWhseJnlLine@1024 : TEMPORARY Record 7311;
      Location@1010 : Record 14;
      ItemUnitOfMeasure@1020 : Record 5404;
      WhseRqst@1006 : Record 5765;
      TempWhseItemEntryRelation@1013 : TEMPORARY Record 6509;
      NoSeriesMgt@1030 : Codeunit 396;
      ItemTrackingMgt@1007 : Codeunit 6500;
      WMSMgt@1023 : Codeunit 7302;
      WhseJnlRegisterLine@1018 : Codeunit 7301;
      CreatePutAway@1017 : Codeunit 7313;
      PostingDate@1025 : Date;
      CounterSourceDocOK@1032 : Integer;
      CounterSourceDocTotal@1033 : Integer;
      CounterPutAways@1027 : Integer;
      PutAwayRequired@1039 : Boolean;
      HideValidationDialog@1019 : Boolean;
      ReceivingNo@1005 : Code[20];
      ItemEntryRelationCreated@1014 : Boolean;
      Text004@1102601000 : TextConst 'ENU=is not within your range of allowed posting dates;NOR=er ikke innenfor tillatte bokf›ringsdatoer;SVE=„r inte i ditt till†tna intervall f”r bokf”ringsdatum';

    LOCAL PROCEDURE Code@6();
    VAR
      WhseManagement@1000 : Codeunit 5775;
    BEGIN
      WITH WhseRcptLine DO BEGIN
        SETCURRENTKEY("No.");
        SETRANGE("No.","No.");
        SETFILTER("Qty. to Receive",'>0');
        IF FIND('-') THEN
          REPEAT
            TESTFIELD("Unit of Measure Code");
            WhseRqst.GET(
              WhseRqst.Type::Inbound,"Location Code","Source Type","Source Subtype","Source No.");
            IF WhseRqst."Document Status" <> WhseRqst."Document Status"::Released THEN
              ERROR(Text000,"Source Document","Source No.");
            OnAfterCheckWhseRcptLine(WhseRcptLine);
          UNTIL NEXT = 0
        ELSE
          ERROR(Text001);

        CounterSourceDocOK := 0;
        CounterSourceDocTotal := 0;
        CounterPutAways := 0;
        CLEAR(CreatePutAway);

        WhseRcptHeader.GET("No.");
        WhseRcptHeader.TESTFIELD("Posting Date");
        OnAfterCheckWhseRcptLines(WhseRcptHeader,WhseRcptLine);
        IF WhseRcptHeader."Receiving No." = '' THEN BEGIN
          WhseRcptHeader.TESTFIELD("Receiving No. Series");
          WhseRcptHeader."Receiving No." :=
            NoSeriesMgt.GetNextNo(
              WhseRcptHeader."Receiving No. Series",WhseRcptHeader."Posting Date",TRUE);
        END;
        WhseRcptHeader."Create Posted Header" := TRUE;
        OnCodeOnBeforeWhseRcptHeaderModify(WhseRcptHeader,WhseRcptLine);
        WhseRcptHeader.MODIFY;
        COMMIT;

        SETCURRENTKEY("No.","Source Type","Source Subtype","Source No.","Source Line No.");
        FINDSET(TRUE,TRUE);
        REPEAT
          WhseManagement.SetSourceFilterForWhseRcptLine(WhseRcptLine,"Source Type","Source Subtype","Source No.",-1,FALSE);
          GetSourceDocument;
          MakePreliminaryChecks;
          InitSourceDocumentLines(WhseRcptLine);
          InitSourceDocumentHeader;
          COMMIT;

          CounterSourceDocTotal := CounterSourceDocTotal + 1;

          OnBeforePostSourceDocument(WhseRcptLine,PurchHeader,SalesHeader,TransHeader);
          PostSourceDocument(WhseRcptLine);

          IF FINDLAST THEN;
          SETRANGE("Source Type");
          SETRANGE("Source Subtype");
          SETRANGE("Source No.");
        UNTIL NEXT = 0;

        GetLocation("Location Code");
        PutAwayRequired := Location.RequirePutaway("Location Code");
        IF PutAwayRequired AND NOT Location."Use Put-away Worksheet" THEN
          CreatePutAwayDoc(WhseRcptHeader);

        CLEAR(WMSMgt);
        CLEAR(WhseJnlRegisterLine);
      END;

      OnAfterCode(WhseRcptHeader);
    END;

    LOCAL PROCEDURE GetSourceDocument@19();
    BEGIN
      WITH WhseRcptLine DO
        CASE "Source Type" OF
          DATABASE::"Purchase Line":
            PurchHeader.GET("Source Subtype","Source No.");
          DATABASE::"Sales Line": // Return Order
            SalesHeader.GET("Source Subtype","Source No.");
          DATABASE::"Transfer Line":
            TransHeader.GET("Source No.");
        END;
    END;

    LOCAL PROCEDURE MakePreliminaryChecks@1102601000();
    VAR
      GenJnlCheckLine@1102601000 : Codeunit 11;
    BEGIN
      WITH WhseRcptHeader DO BEGIN
        IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text004);
      END;
    END;

    LOCAL PROCEDURE InitSourceDocumentHeader@3();
    VAR
      SalesRelease@1002 : Codeunit 414;
      PurchRelease@1001 : Codeunit 415;
      ModifyHeader@1000 : Boolean;
    BEGIN
      WITH WhseRcptLine DO
        CASE "Source Type" OF
          DATABASE::"Purchase Line":
            BEGIN
              IF (PurchHeader."Posting Date" = 0D) OR
                 (PurchHeader."Posting Date" <> WhseRcptHeader."Posting Date")
              THEN BEGIN
                PurchRelease.Reopen(PurchHeader);
                PurchRelease.SetSkipCheckReleaseRestrictions;
                PurchHeader.SetHideValidationDialog(TRUE);
                PurchHeader.VALIDATE("Posting Date",WhseRcptHeader."Posting Date");
                PurchRelease.RUN(PurchHeader);
                ModifyHeader := TRUE;
              END;
              IF WhseRcptHeader."Vendor Shipment No." <> '' THEN BEGIN
                PurchHeader."Vendor Shipment No." := WhseRcptHeader."Vendor Shipment No.";
                ModifyHeader := TRUE;
              END;
              OnInitSourceDocumentHeaderOnBeforePurchHeaderModify(PurchHeader,WhseRcptHeader,ModifyHeader);
              IF ModifyHeader THEN
                PurchHeader.MODIFY;
            END;
          DATABASE::"Sales Line": // Return Order
            BEGIN
              IF (SalesHeader."Posting Date" = 0D) OR
                 (SalesHeader."Posting Date" <> WhseRcptHeader."Posting Date")
              THEN BEGIN
                SalesRelease.Reopen(SalesHeader);
                SalesRelease.SetSkipCheckReleaseRestrictions;
                SalesHeader.SetHideValidationDialog(TRUE);
                SalesHeader.VALIDATE("Posting Date",WhseRcptHeader."Posting Date");
                SalesRelease.RUN(SalesHeader);
                ModifyHeader := TRUE;
              END;
              OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify(SalesHeader,WhseRcptHeader,ModifyHeader);
              IF ModifyHeader THEN
                SalesHeader.MODIFY;
            END;
          DATABASE::"Transfer Line":
            BEGIN
              IF (TransHeader."Posting Date" = 0D) OR
                 (TransHeader."Posting Date" <> WhseRcptHeader."Posting Date")
              THEN BEGIN
                TransHeader.CalledFromWarehouse(TRUE);
                TransHeader.VALIDATE("Posting Date",WhseRcptHeader."Posting Date");
                ModifyHeader := TRUE;
              END;
              IF WhseRcptHeader."Vendor Shipment No." <> '' THEN BEGIN
                TransHeader."External Document No." := WhseRcptHeader."Vendor Shipment No.";
                ModifyHeader := TRUE;
              END;
              OnInitSourceDocumentHeaderOnBeforeTransHeaderModify(TransHeader,WhseRcptHeader,ModifyHeader);
              IF ModifyHeader THEN
                TransHeader.MODIFY;
            END;
          ELSE
            OnInitSourceDocumentHeader(WhseRcptHeader,WhseRcptLine);
        END;
    END;

    LOCAL PROCEDURE InitSourceDocumentLines@1(VAR WhseRcptLine@1004 : Record 7317);
    VAR
      WhseRcptLine2@1002 : Record 7317;
      TransLine@1005 : Record 5741;
      SalesLine@1003 : Record 37;
      PurchLine@1001 : Record 39;
      ModifyLine@1000 : Boolean;
    BEGIN
      WhseRcptLine2.COPY(WhseRcptLine);
      WITH WhseRcptLine2 DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Purchase Line":
            BEGIN
              PurchLine.SETRANGE("Document Type","Source Subtype");
              PurchLine.SETRANGE("Document No.","Source No.");
              IF PurchLine.FIND('-') THEN
                REPEAT
                  SETRANGE("Source Line No.",PurchLine."Line No.");
                  IF FINDFIRST THEN BEGIN
                    OnAfterFindWhseRcptLineForPurchLine(WhseRcptLine2,PurchLine);
                    IF "Source Document" = "Source Document"::"Purchase Order" THEN BEGIN
                      ModifyLine := PurchLine."Qty. to Receive" <> "Qty. to Receive";
                      IF ModifyLine THEN
                        PurchLine.VALIDATE("Qty. to Receive","Qty. to Receive")
                    END ELSE BEGIN
                      ModifyLine := PurchLine."Return Qty. to Ship" <> -"Qty. to Receive";
                      IF ModifyLine THEN
                        PurchLine.VALIDATE("Return Qty. to Ship",-"Qty. to Receive");
                    END;
                    IF PurchLine."Bin Code" <> "Bin Code" THEN BEGIN
                      PurchLine."Bin Code" := "Bin Code";
                      ModifyLine := TRUE;
                    END;
                  END ELSE
                    IF "Source Document" = "Source Document"::"Purchase Order" THEN BEGIN
                      ModifyLine := PurchLine."Qty. to Receive" <> 0;
                      IF ModifyLine THEN
                        PurchLine.VALIDATE("Qty. to Receive",0);
                    END ELSE BEGIN
                      ModifyLine := PurchLine."Return Qty. to Ship" <> 0;
                      IF ModifyLine THEN
                        PurchLine.VALIDATE("Return Qty. to Ship",0);
                    END;
                  OnBeforePurchLineModify(PurchLine,WhseRcptLine2,ModifyLine);
                  IF ModifyLine THEN BEGIN
                    //**4PS.sn
                    PurchLine."Modified by" := USERID; //DP00469
                    PurchLine."Last Date Modified" := TODAY;//DP00469
                    //**4PS.en
                    PurchLine.MODIFY;
                  END;
                UNTIL PurchLine.NEXT = 0;
            END;
          DATABASE::"Sales Line": // Return Order
            BEGIN
              SalesLine.SETRANGE("Document Type","Source Subtype");
              SalesLine.SETRANGE("Document No.","Source No.");
              IF SalesLine.FIND('-') THEN
                REPEAT
                  SETRANGE("Source Line No.",SalesLine."Line No.");
                  IF FINDFIRST THEN BEGIN
                    OnAfterFindWhseRcptLineForSalesLine(WhseRcptLine2,SalesLine);
                    IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
                      ModifyLine := SalesLine."Qty. to Ship" <> -"Qty. to Receive";
                      IF ModifyLine THEN
                        SalesLine.VALIDATE("Qty. to Ship",-"Qty. to Receive");
                    END ELSE BEGIN
                      ModifyLine := SalesLine."Return Qty. to Receive" <> "Qty. to Receive";
                      IF ModifyLine THEN
                        SalesLine.VALIDATE("Return Qty. to Receive","Qty. to Receive");
                    END;
                    IF SalesLine."Bin Code" <> "Bin Code" THEN BEGIN
                      SalesLine."Bin Code" := "Bin Code";
                      ModifyLine := TRUE;
                    END;
                  END ELSE
                    IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
                      ModifyLine := SalesLine."Qty. to Ship" <> 0;
                      IF ModifyLine THEN
                        SalesLine.VALIDATE("Qty. to Ship",0);
                    END ELSE BEGIN
                      ModifyLine := SalesLine."Return Qty. to Receive" <> 0;
                      IF ModifyLine THEN
                        SalesLine.VALIDATE("Return Qty. to Receive",0);
                    END;
                  OnBeforeSalesLineModify(SalesLine,WhseRcptLine2,ModifyLine);
                  IF ModifyLine THEN
                    SalesLine.MODIFY;
                UNTIL SalesLine.NEXT = 0;
            END;
          DATABASE::"Transfer Line":
            BEGIN
              TransLine.SETRANGE("Document No.","Source No.");
              TransLine.SETRANGE("Derived From Line No.",0);
              IF TransLine.FIND('-') THEN
                REPEAT
                  SETRANGE("Source Line No.",TransLine."Line No.");
                  IF FINDFIRST THEN BEGIN
                    OnAfterFindWhseRcptLineForTransLine(WhseRcptLine2,TransLine);
                    ModifyLine := TransLine."Qty. to Receive" <> "Qty. to Receive";
                    IF ModifyLine THEN
                      TransLine.VALIDATE("Qty. to Receive","Qty. to Receive");
                    IF TransLine."Transfer-To Bin Code" <> "Bin Code" THEN BEGIN
                      TransLine."Transfer-To Bin Code" := "Bin Code";
                      ModifyLine := TRUE;
                    END;
                  END ELSE BEGIN
                    ModifyLine := TransLine."Qty. to Receive" <> 0;
                    IF ModifyLine THEN
                      TransLine.VALIDATE("Qty. to Receive",0);
                  END;
                  OnBeforeTransLineModify(TransLine,WhseRcptLine2,ModifyLine);
                  IF ModifyLine THEN
                    TransLine.MODIFY;
                UNTIL TransLine.NEXT = 0;
            END;
          ELSE
            OnInitSourceDocumentLines(WhseRcptLine2);
        END;
        SETRANGE("Source Line No.");
      END;

      OnAfterInitSourceDocumentLines(WhseRcptLine2);
    END;

    LOCAL PROCEDURE PostSourceDocument@5(WhseRcptLine@1000 : Record 7317);
    VAR
      WhseSetup@1001 : Record 5769;
      WhseRcptHeader@1002 : Record 7316;
      PurchPost@1003 : Codeunit 90;
      SalesPost@1004 : Codeunit 80;
      TransferPostReceipt@1005 : Codeunit 5705;
    BEGIN
      WhseSetup.GET;
      WITH WhseRcptLine DO BEGIN
        WhseRcptHeader.GET("No.");
        CASE "Source Type" OF
          DATABASE::"Purchase Line":
            BEGIN
              IF "Source Document" = "Source Document"::"Purchase Order" THEN
                PurchHeader.Receive := TRUE
              ELSE
                PurchHeader.Ship := TRUE;
              PurchHeader.Invoice := FALSE;

              PurchPost.SetWhseRcptHeader(WhseRcptHeader);
              CASE WhseSetup."Receipt Posting Policy" OF
                WhseSetup."Receipt Posting Policy"::"Posting errors are not processed":
                  BEGIN
                    IF PurchPost.RUN(PurchHeader) THEN
                      CounterSourceDocOK := CounterSourceDocOK + 1;
                  END;
                WhseSetup."Receipt Posting Policy"::"Stop and show the first posting error":
                  BEGIN
                    PurchPost.RUN(PurchHeader);
                    CounterSourceDocOK := CounterSourceDocOK + 1;
                  END;
              END;
              CLEAR(PurchPost);
            END;
          DATABASE::"Sales Line": // Return Order
            BEGIN
              IF "Source Document" = "Source Document"::"Sales Order" THEN
                SalesHeader.Ship := TRUE
              ELSE
                SalesHeader.Receive := TRUE;
              SalesHeader.Invoice := FALSE;

              SalesPost.SetWhseRcptHeader(WhseRcptHeader);
              CASE WhseSetup."Receipt Posting Policy" OF
                WhseSetup."Receipt Posting Policy"::"Posting errors are not processed":
                  BEGIN
                    IF SalesPost.RUN(SalesHeader) THEN
                      CounterSourceDocOK := CounterSourceDocOK + 1;
                  END;
                WhseSetup."Receipt Posting Policy"::"Stop and show the first posting error":
                  BEGIN
                    SalesPost.RUN(SalesHeader);
                    CounterSourceDocOK := CounterSourceDocOK + 1;
                  END;
              END;
              CLEAR(SalesPost);
            END;
          DATABASE::"Transfer Line":
            BEGIN
              IF HideValidationDialog THEN
                TransferPostReceipt.SetHideValidationDialog(HideValidationDialog);
              TransferPostReceipt.SetWhseRcptHeader(WhseRcptHeader);
              CASE WhseSetup."Receipt Posting Policy" OF
                WhseSetup."Receipt Posting Policy"::"Posting errors are not processed":
                  BEGIN
                    IF TransferPostReceipt.RUN(TransHeader) THEN
                      CounterSourceDocOK := CounterSourceDocOK + 1;
                  END;
                WhseSetup."Receipt Posting Policy"::"Stop and show the first posting error":
                  BEGIN
                    TransferPostReceipt.RUN(TransHeader);
                    CounterSourceDocOK := CounterSourceDocOK + 1;
                  END;
              END;
              CLEAR(TransferPostReceipt);
            END;
          ELSE
            OnPostSourceDocument(WhseRcptHeader,WhseRcptLine);
        END;
      END;
    END;

    [External]
    PROCEDURE GetResultMessage@10();
    VAR
      MessageText@1000 : Text[250];
    BEGIN
      MessageText := Text002;
      IF CounterPutAways > 0 THEN
        MessageText := MessageText + '\\' + Text003;
      MESSAGE(MessageText,CounterSourceDocOK,CounterSourceDocTotal,CounterPutAways);
    END;

    [External]
    PROCEDURE PostUpdateWhseDocuments@16(VAR WhseRcptHeader@1000 : Record 7316);
    VAR
      WhseRcptLine2@1001 : Record 7317;
      WhsePutAwayRequest@1010 : Record 7324;
      DeleteWhseRcptLine@1002 : Boolean;
    BEGIN
      OnBeforePostUpdateWhseDocuments(WhseRcptHeader);
      WITH WhseRcptLineBuf DO
        IF FIND('-') THEN BEGIN
          REPEAT
            WhseRcptLine2.GET("No.","Line No.");
            DeleteWhseRcptLine := "Qty. Outstanding" = "Qty. to Receive";
            OnBeforePostUpdateWhseRcptLine(WhseRcptLine2,WhseRcptLineBuf,DeleteWhseRcptLine);
            IF DeleteWhseRcptLine THEN
              WhseRcptLine2.DELETE
            ELSE BEGIN
              WhseRcptLine2.VALIDATE("Qty. Received","Qty. Received" + "Qty. to Receive");
              WhseRcptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Receive");
              WhseRcptLine2."Qty. to Cross-Dock" := 0;
              WhseRcptLine2."Qty. to Cross-Dock (Base)" := 0;
              WhseRcptLine2.Status := WhseRcptLine2.GetLineStatus;
              WhseRcptLine2.MODIFY;
              OnAfterPostUpdateWhseRcptLine(WhseRcptLine2);
            END;
          UNTIL NEXT = 0;
          DELETEALL;
        END;

      IF WhseRcptHeader."Create Posted Header" THEN BEGIN
        WhseRcptHeader."Last Receiving No." := WhseRcptHeader."Receiving No.";
        WhseRcptHeader."Receiving No." := '';
        WhseRcptHeader."Create Posted Header" := FALSE;
      END;

      WhseRcptLine2.SETRANGE("No.",WhseRcptHeader."No.");
      IF WhseRcptLine2.FINDFIRST THEN BEGIN
        WhseRcptHeader."Document Status" := WhseRcptHeader.GetHeaderStatus(0);
        WhseRcptHeader.MODIFY;
      END ELSE BEGIN
        WhseRcptHeader.DeleteRelatedLines(FALSE);
        WhseRcptHeader.DELETE;
      END;

      GetLocation(WhseRcptHeader."Location Code");
      IF Location."Require Put-away" THEN BEGIN
        WhsePutAwayRequest."Document Type" := WhsePutAwayRequest."Document Type"::Receipt;
        WhsePutAwayRequest."Document No." := WhseRcptHeader."Last Receiving No.";
        WhsePutAwayRequest."Location Code" := WhseRcptHeader."Location Code";
        WhsePutAwayRequest."Zone Code" := WhseRcptHeader."Zone Code";
        WhsePutAwayRequest."Bin Code" := WhseRcptHeader."Bin Code";
        IF WhsePutAwayRequest.INSERT THEN;
      END;

      OnAfterPostUpdateWhseDocuments(WhseRcptHeader,WhsePutAwayRequest);
    END;

    [External]
    PROCEDURE CreatePostedRcptHeader@2(VAR PostedWhseRcptHeader@1000 : Record 7318;VAR WhseRcptHeader@1003 : Record 7316;ReceivingNo2@1004 : Code[20];PostingDate2@1005 : Date);
    VAR
      WhseComment@1002 : Record 5770;
      WhseComment2@1001 : Record 5770;
    BEGIN
      ReceivingNo := ReceivingNo2;
      PostingDate := PostingDate2;

      IF NOT WhseRcptHeader."Create Posted Header" THEN BEGIN
        PostedWhseRcptHeader.GET(WhseRcptHeader."Last Receiving No.");
        EXIT;
      END;

      PostedWhseRcptHeader.INIT;
      PostedWhseRcptHeader.TRANSFERFIELDS(WhseRcptHeader);
      PostedWhseRcptHeader."No." := WhseRcptHeader."Receiving No.";
      PostedWhseRcptHeader."Whse. Receipt No." := WhseRcptHeader."No.";
      PostedWhseRcptHeader."No. Series" := WhseRcptHeader."Receiving No. Series";

      GetLocation(PostedWhseRcptHeader."Location Code");
      IF NOT Location."Require Put-away" THEN
        PostedWhseRcptHeader."Document Status" := PostedWhseRcptHeader."Document Status"::"Completely Put Away";
      OnBeforePostedWhseRcptHeaderInsert(PostedWhseRcptHeader,WhseRcptHeader);
      PostedWhseRcptHeader.INSERT;

      WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Receipt");
      WhseComment.SETRANGE(Type,WhseComment.Type::" ");
      WhseComment.SETRANGE("No.",WhseRcptHeader."No.");
      IF WhseComment.FIND('-') THEN
        REPEAT
          WhseComment2.INIT;
          WhseComment2 := WhseComment;
          WhseComment2."Table Name" := WhseComment2."Table Name"::"Posted Whse. Receipt";
          WhseComment2."No." := PostedWhseRcptHeader."No.";
          WhseComment2.INSERT;
        UNTIL WhseComment.NEXT = 0;
    END;

    [External]
    PROCEDURE CreatePostedRcptLine@4(VAR WhseRcptLine@1001 : Record 7317;VAR PostedWhseRcptHeader@1000 : Record 7318;VAR PostedWhseRcptLine@1002 : Record 7319;VAR TempHandlingSpecification@1003 : Record 336);
    BEGIN
      UpdateWhseRcptLineBuf(WhseRcptLine);
      WITH PostedWhseRcptLine DO BEGIN
        INIT;
        TRANSFERFIELDS(WhseRcptLine);
        "No." := PostedWhseRcptHeader."No.";
        OnAfterInitPostedRcptLine(WhseRcptLine,PostedWhseRcptLine);
        Quantity := WhseRcptLine."Qty. to Receive";
        "Qty. (Base)" := WhseRcptLine."Qty. to Receive (Base)";
        CASE WhseRcptLine."Source Document" OF
          WhseRcptLine."Source Document"::"Purchase Order":
            "Posted Source Document" := "Posted Source Document"::"Posted Receipt";
          WhseRcptLine."Source Document"::"Sales Order":
            "Posted Source Document" := "Posted Source Document"::"Posted Shipment";
          WhseRcptLine."Source Document"::"Purchase Return Order":
            "Posted Source Document" := "Posted Source Document"::"Posted Return Shipment";
          WhseRcptLine."Source Document"::"Sales Return Order":
            "Posted Source Document" := "Posted Source Document"::"Posted Return Receipt";
          WhseRcptLine."Source Document"::"Inbound Transfer":
            "Posted Source Document" := "Posted Source Document"::"Posted Transfer Receipt";
        END;

        GetLocation("Location Code");
        IF NOT Location."Require Put-away" THEN BEGIN
          "Qty. Put Away" := Quantity;
          "Qty. Put Away (Base)" := "Qty. (Base)";
          Status := Status::"Completely Put Away";
        END;
        "Posted Source No." := ReceivingNo;
        "Posting Date" := PostingDate;
        "Whse. Receipt No." := WhseRcptLine."No.";
        "Whse Receipt Line No." := WhseRcptLine."Line No.";
        OnBeforePostedWhseRcptLineInsert(PostedWhseRcptLine,WhseRcptLine);
        INSERT;
        OnAfterPostedWhseRcptLineInsert(PostedWhseRcptLine,WhseRcptLine);
      END;

      PostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,TempHandlingSpecification);
    END;

    LOCAL PROCEDURE UpdateWhseRcptLineBuf@18(WhseRcptLine2@1000 : Record 7317);
    BEGIN
      WITH WhseRcptLine2 DO BEGIN
        WhseRcptLineBuf."No." := "No.";
        WhseRcptLineBuf."Line No." := "Line No.";
        IF NOT WhseRcptLineBuf.FIND THEN BEGIN
          WhseRcptLineBuf.INIT;
          WhseRcptLineBuf := WhseRcptLine2;
          WhseRcptLineBuf.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE PostWhseJnlLine@9(VAR PostedWhseRcptHeader@1000 : Record 7318;VAR PostedWhseRcptLine@1001 : Record 7319;VAR TempWhseSplitSpecification@1002 : TEMPORARY Record 336);
    VAR
      TempWhseJnlLine2@1003 : TEMPORARY Record 7311;
      IsHandled@1004 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,WhseRcptLine,TempWhseSplitSpecification,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH PostedWhseRcptLine DO BEGIN
        GetLocation("Location Code");
        InsertWhseItemEntryRelation(PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);

        IF Location."Bin Mandatory" THEN BEGIN
          InsertTempWhseJnlLine(PostedWhseRcptLine);

          TempWhseJnlLine.GET('','',"Location Code","Line No.");
          TempWhseJnlLine."Line No." := 0;
          TempWhseJnlLine."Reference No." := ReceivingNo;
          TempWhseJnlLine."Registering Date" := PostingDate;
          TempWhseJnlLine."Whse. Document Type" := TempWhseJnlLine."Whse. Document Type"::Receipt;
          TempWhseJnlLine."Whse. Document No." := "No.";
          TempWhseJnlLine."Whse. Document Line No." := "Line No.";
          TempWhseJnlLine."Registering No. Series" := PostedWhseRcptHeader."No. Series";
          OnBeforeRegisterWhseJnlLines(TempWhseJnlLine,PostedWhseRcptHeader,PostedWhseRcptLine);

          ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseSplitSpecification,FALSE);
          IF TempWhseJnlLine2.FIND('-') THEN
            REPEAT
              WhseJnlRegisterLine.RUN(TempWhseJnlLine2);
            UNTIL TempWhseJnlLine2.NEXT = 0;
        END;
      END;

      OnAfterPostWhseJnlLine(WhseRcptLine);
    END;

    LOCAL PROCEDURE InsertWhseItemEntryRelation@38(VAR PostedWhseRcptHeader@1000 : Record 7318;VAR PostedWhseRcptLine@1002 : Record 7319;VAR TempWhseSplitSpecification@1003 : TEMPORARY Record 336);
    VAR
      WhseItemEntryRelation@1001 : Record 6509;
    BEGIN
      IF ItemEntryRelationCreated THEN BEGIN
        IF TempWhseItemEntryRelation.FIND('-') THEN BEGIN
          REPEAT
            WhseItemEntryRelation := TempWhseItemEntryRelation;
            WhseItemEntryRelation.SetSource(
              DATABASE::"Posted Whse. Receipt Line",0,PostedWhseRcptHeader."No.",PostedWhseRcptLine."Line No.");
            WhseItemEntryRelation.INSERT;
          UNTIL TempWhseItemEntryRelation.NEXT = 0;
          ItemEntryRelationCreated := FALSE;
        END;
        EXIT;
      END;
      TempWhseSplitSpecification.RESET;
      IF TempWhseSplitSpecification.FIND('-') THEN
        REPEAT
          WhseItemEntryRelation.InitFromTrackingSpec(TempWhseSplitSpecification);
          WhseItemEntryRelation.SetSource(
            DATABASE::"Posted Whse. Receipt Line",0,PostedWhseRcptHeader."No.",PostedWhseRcptLine."Line No.");
          WhseItemEntryRelation.INSERT;
        UNTIL TempWhseSplitSpecification.NEXT = 0;
    END;

    [External]
    PROCEDURE GetFirstPutAwayDocument@7(VAR WhseActivHeader@1000 : Record 5766) : Boolean;
    BEGIN
      EXIT(CreatePutAway.GetFirstPutAwayDocument(WhseActivHeader));
    END;

    [External]
    PROCEDURE GetNextPutAwayDocument@8(VAR WhseActivHeader@1000 : Record 5766) : Boolean;
    BEGIN
      EXIT(CreatePutAway.GetNextPutAwayDocument(WhseActivHeader));
    END;

    LOCAL PROCEDURE InsertTempWhseJnlLine@11(PostedWhseRcptLine@1001 : Record 7319);
    VAR
      SourceCodeSetup@1003 : Record 242;
      SNRequired@1000 : Boolean;
      LNRequired@1002 : Boolean;
    BEGIN
      WITH PostedWhseRcptLine DO BEGIN
        TempWhseJnlLine.INIT;
        TempWhseJnlLine."Entry Type" := TempWhseJnlLine."Entry Type"::"Positive Adjmt.";
        TempWhseJnlLine."Line No." := "Line No.";
        TempWhseJnlLine."Location Code" := "Location Code";
        TempWhseJnlLine."To Zone Code" := "Zone Code";
        TempWhseJnlLine."To Bin Code" := "Bin Code";
        TempWhseJnlLine."Item No." := "Item No.";
        TempWhseJnlLine.Description := Description;
        GetLocation("Location Code");
        IF Location."Directed Put-away and Pick" THEN BEGIN
          TempWhseJnlLine."Qty. (Absolute)" := Quantity;
          TempWhseJnlLine."Unit of Measure Code" := "Unit of Measure Code";
          TempWhseJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
          GetItemUnitOfMeasure2("Item No.","Unit of Measure Code");
          TempWhseJnlLine.Cubage := ABS(TempWhseJnlLine."Qty. (Absolute)") * ItemUnitOfMeasure.Cubage;
          TempWhseJnlLine.Weight := ABS(TempWhseJnlLine."Qty. (Absolute)") * ItemUnitOfMeasure.Weight;
        END ELSE BEGIN
          TempWhseJnlLine."Qty. (Absolute)" := "Qty. (Base)";
          TempWhseJnlLine."Unit of Measure Code" := WMSMgt.GetBaseUOM("Item No.");
          TempWhseJnlLine."Qty. per Unit of Measure" := 1;
        END;

        TempWhseJnlLine."Qty. (Absolute, Base)" := "Qty. (Base)";
        TempWhseJnlLine."User ID" := USERID;
        TempWhseJnlLine."Variant Code" := "Variant Code";
        TempWhseJnlLine.SetSource("Source Type","Source Subtype","Source No.","Source Line No.",0);
        TempWhseJnlLine."Source Document" := "Source Document";
        SourceCodeSetup.GET;
        CASE "Source Document" OF
          "Source Document"::"Purchase Order":
            BEGIN
              TempWhseJnlLine."Source Code" := SourceCodeSetup.Purchases;
              TempWhseJnlLine."Reference Document" :=
                TempWhseJnlLine."Reference Document"::"Posted Rcpt.";
            END;
          "Source Document"::"Sales Order":
            BEGIN
              TempWhseJnlLine."Source Code" := SourceCodeSetup.Sales;
              TempWhseJnlLine."Reference Document" :=
                TempWhseJnlLine."Reference Document"::"Posted Shipment";
            END;
          "Source Document"::"Purchase Return Order":
            BEGIN
              TempWhseJnlLine."Source Code" := SourceCodeSetup.Purchases;
              TempWhseJnlLine."Reference Document" :=
                TempWhseJnlLine."Reference Document"::"Posted Rtrn. Shipment";
            END;
          "Source Document"::"Sales Return Order":
            BEGIN
              TempWhseJnlLine."Source Code" := SourceCodeSetup.Sales;
              TempWhseJnlLine."Reference Document" :=
                TempWhseJnlLine."Reference Document"::"Posted Rtrn. Rcpt.";
            END;
          "Source Document"::"Inbound Transfer":
            BEGIN
              TempWhseJnlLine."Source Code" := SourceCodeSetup.Transfer;
              TempWhseJnlLine."Reference Document" :=
                TempWhseJnlLine."Reference Document"::"Posted T. Receipt";
            END;
        END;

        OnBeforeInsertTempWhseJnlLine(TempWhseJnlLine,PostedWhseRcptLine);

        ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,FALSE);
        IF SNRequired THEN
          TESTFIELD("Qty. per Unit of Measure",1);

        WMSMgt.CheckWhseJnlLine(TempWhseJnlLine,0,0,FALSE);
        TempWhseJnlLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreatePutAwayDoc@12(WhseRcptHeader@1000 : Record 7316);
    VAR
      WhseActivHeader@1001 : Record 5766;
      PostedWhseRcptLine@1005 : Record 7319;
      TempPostedWhseRcptLine@1004 : TEMPORARY Record 7319;
      TempPostedWhseRcptLine2@1003 : TEMPORARY Record 7319;
      WhseWkshLine@1010 : Record 7326;
      WhseSourceCreateDocument@1007 : Report 7305;
      ItemTrackingMgt@1002 : Codeunit 6500;
      WhseSNRequired@1008 : Boolean;
      WhseLNRequired@1009 : Boolean;
      RemQtyToHandleBase@1006 : Decimal;
      IsHandled@1011 : Boolean;
    BEGIN
      PostedWhseRcptLine.SETRANGE("No.",WhseRcptHeader."Receiving No.");
      IF NOT PostedWhseRcptLine.FIND('-') THEN
        EXIT;

      REPEAT
        RemQtyToHandleBase := PostedWhseRcptLine."Qty. (Base)";
        IsHandled := FALSE;
        OnBeforeCreatePutAwayDoc(WhseRcptHeader,PostedWhseRcptLine,IsHandled);
        IF NOT IsHandled THEN BEGIN
          CreatePutAway.SetCrossDockValues(TRUE);

          ItemTrackingMgt.CheckWhseItemTrkgSetup(PostedWhseRcptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
          IF WhseSNRequired OR WhseLNRequired THEN
            ItemTrackingMgt.InitItemTrkgForTempWkshLine(
              WhseWkshLine."Whse. Document Type"::Receipt,
              PostedWhseRcptLine."No.",PostedWhseRcptLine."Line No.",
              PostedWhseRcptLine."Source Type",PostedWhseRcptLine."Source Subtype",
              PostedWhseRcptLine."Source No.",PostedWhseRcptLine."Source Line No.",0);

          ItemTrackingMgt.SplitPostedWhseRcptLine(PostedWhseRcptLine,TempPostedWhseRcptLine);

          TempPostedWhseRcptLine.RESET;
          IF TempPostedWhseRcptLine.FIND('-') THEN
            REPEAT
              TempPostedWhseRcptLine2 := TempPostedWhseRcptLine;
              TempPostedWhseRcptLine2."Line No." := PostedWhseRcptLine."Line No.";
              WhseSourceCreateDocument.SetQuantity(TempPostedWhseRcptLine2,DATABASE::"Posted Whse. Receipt Line",RemQtyToHandleBase);
              OnCreatePutAwayDocOnBeforeCreatePutAwayRun(TempPostedWhseRcptLine2,CreatePutAway);
              CreatePutAway.RUN(TempPostedWhseRcptLine2);
            UNTIL TempPostedWhseRcptLine.NEXT = 0;
        END;
      UNTIL PostedWhseRcptLine.NEXT = 0;

      IF GetFirstPutAwayDocument(WhseActivHeader) THEN
        REPEAT
          CreatePutAway.DeleteBlankBinContent(WhseActivHeader);
          OnAfterCreatePutAwayDeleteBlankBinContent(WhseActivHeader);
          CounterPutAways := CounterPutAways + 1;
        UNTIL NOT GetNextPutAwayDocument(WhseActivHeader);

      OnAfterCreatePutAwayDoc(WhseRcptHeader);
    END;

    LOCAL PROCEDURE GetLocation@13(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode <> Location.Code THEN
        IF NOT Location.GET(LocationCode) THEN;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure2@15(ItemNo@1000 : Code[20];UOMCode@1001 : Code[10]);
    BEGIN
      IF (ItemUnitOfMeasure."Item No." <> ItemNo) OR
         (ItemUnitOfMeasure.Code <> UOMCode)
      THEN
        IF NOT ItemUnitOfMeasure.GET(ItemNo,UOMCode) THEN
          ItemUnitOfMeasure.INIT;
    END;

    [External]
    PROCEDURE SetItemEntryRelation@17(PostedWhseRcptHeader@1003 : Record 7318;PostedWhseRcptLine@1002 : Record 7319;VAR ItemEntryRelation@1000 : Record 6507);
    BEGIN
      IF ItemEntryRelation.FIND('-') THEN BEGIN
        TempWhseItemEntryRelation.DELETEALL;
        REPEAT
          TempWhseItemEntryRelation.INIT;
          TempWhseItemEntryRelation.TRANSFERFIELDS(ItemEntryRelation);
          TempWhseItemEntryRelation.SetSource(
            DATABASE::"Posted Whse. Receipt Line",0,PostedWhseRcptHeader."No.",PostedWhseRcptLine."Line No.");
          TempWhseItemEntryRelation.INSERT;
        UNTIL ItemEntryRelation.NEXT = 0;
        ItemEntryRelationCreated := TRUE;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRun@20(VAR WarehouseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@21(VAR WarehouseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCode@71(VAR WarehouseReceiptHeader@1000 : Record 7316);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckWhseRcptLine@22(VAR WarehouseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreatePutAwayDoc@51(VAR WarehouseReceiptHeader@1000 : Record 7316);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreatePutAwayDeleteBlankBinContent@53(VAR WarehouseActivityHeader@1000 : Record 5766);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFindWhseRcptLineForPurchLine@29(VAR WhseRcptLine@1000 : Record 7317;VAR PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFindWhseRcptLineForSalesLine@31(VAR WhseRcptLine@1000 : Record 7317;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFindWhseRcptLineForTransLine@32(VAR WhseRcptLine@1000 : Record 7317;VAR TransferLine@1001 : Record 5741);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostUpdateWhseDocuments@49(VAR WarehouseReceiptHeader@1000 : Record 7316;VAR WhsePutAwayRequest@1001 : Record 7324);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostUpdateWhseRcptLine@23(VAR WarehouseReceiptLine@1000 : Record 7317;VAR WarehouseReceiptLineBuf@1001 : Record 7317;VAR DeleteWhseRcptLine@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostWhseJnlLine@37(VAR PostedWhseReceiptHeader@1000 : Record 7318;VAR PostedWhseReceiptLine@1001 : Record 7319;VAR WhseReceiptLine@1002 : Record 7317;VAR TempTrackingSpecification@1003 : TEMPORARY Record 336;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRegisterWhseJnlLines@44(VAR TempWarehouseJournalLine@1000 : TEMPORARY Record 7311;VAR PostedWhseReceiptHeader@1001 : Record 7318;VAR PostedWhseReceiptLine@1002 : Record 7319);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostUpdateWhseRcptLine@24(VAR WarehouseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostWhseJnlLine@25(VAR WarehouseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostedWhseRcptLineInsert@55(VAR PostedWhseReceiptLine@1000 : Record 7319;WarehouseReceiptLine@1001 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitPostedRcptLine@36(VAR WarehouseReceiptLine@1000 : Record 7317;VAR PostedWhseReceiptLine@1001 : Record 7319);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitSourceDocumentLines@39(VAR WhseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckWhseRcptLines@42(VAR WhseRcptHeader@1001 : Record 7316;VAR WhseRcptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreatePutAwayDoc@48(VAR WarehouseReceiptHeader@1000 : Record 7316;VAR PostedWhseReceiptLine@1001 : Record 7319;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertTempWhseJnlLine@50(VAR TempWarehouseJournalLine@1000 : TEMPORARY Record 7311;PostedWhseReceiptLine@1001 : Record 7319);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchLineModify@26(VAR PurchaseLine@1000 : Record 39;WhseRcptLine@1002 : Record 7317;VAR ModifyLine@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesLineModify@27(VAR SalesLine@1001 : Record 37;WhseRcptLine@1000 : Record 7317;VAR ModifyLine@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransLineModify@28(VAR TransferLine@1001 : Record 5741;WhseRcptLine@1000 : Record 7317;VAR ModifyLine@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostSourceDocument@41(VAR WhseRcptLine@1000 : Record 7317;PurchaseHeader@1001 : Record 38;SalesHeader@1002 : Record 36;TransferHeader@1003 : Record 5740);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostUpdateWhseDocuments@40(VAR WhseRcptHeader@1000 : Record 7316);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedWhseRcptHeaderInsert@43(VAR PostedWhseReceiptHeader@1000 : Record 7318;WarehouseReceiptHeader@1001 : Record 7316);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedWhseRcptLineInsert@52(VAR PostedWhseReceiptLine@1000 : Record 7319;WarehouseReceiptLine@1001 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCodeOnBeforeWhseRcptHeaderModify@35(VAR WarehouseReceiptHeader@1000 : Record 7316;WarehouseReceiptLine@1001 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreatePutAwayDocOnBeforeCreatePutAwayRun@54(VAR PostedWhseReceiptLine@1000 : Record 7319;VAR CreatePutAway@1001 : Codeunit 7313);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitSourceDocumentHeader@30(VAR WhseReceiptHeader@1000 : Record 7316;VAR WhseReceiptLine@1001 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitSourceDocumentHeaderOnBeforePurchHeaderModify@45(VAR PurchaseHeader@1000 : Record 38;VAR WarehouseReceiptHeader@1001 : Record 7316;VAR ModifyHeader@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify@46(VAR SalesHeader@1000 : Record 36;VAR WarehouseReceiptHeader@1001 : Record 7316;VAR ModifyHeader@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitSourceDocumentHeaderOnBeforeTransHeaderModify@47(VAR TransferHeader@1000 : Record 5740;VAR WarehouseReceiptHeader@1001 : Record 7316;VAR ModifyHeader@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitSourceDocumentLines@33(VAR WhseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostSourceDocument@34(VAR WhseReceiptHeader@1001 : Record 7316;VAR WhseReceiptLine@1000 : Record 7317);
    BEGIN
    END;

    BEGIN
    END.
  }
}

