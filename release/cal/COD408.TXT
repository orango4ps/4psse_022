OBJECT Codeunit 408 DimensionManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 80=imd,
                TableData 232=imd,
                TableData 352=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Dimensions %1 and %2 can''t be used concurrently.;NOR=Dimensjonene %1 og %2 kan ikke brukes samtidig.;SVE=Dimensionerna %1 och %2 kan inte anv„ndas samtidigt.';
      Text001@1001 : TextConst 'ENU=Dimension combinations %1 - %2 and %3 - %4 can''t be used concurrently.;NOR=Dimensjonskombinasjonene %1 - %2 og %3 - %4 kan ikke brukes samtidig.;SVE=Dimensionskombinationerna %1 - %2 och %3 - %4 kan inte anv„ndas samtidigt.';
      Text002@1002 : TextConst 'ENU=This Shortcut Dimension is not defined in the %1.;NOR=Denne snarveisdimensjonen er ikke definert i %1.;SVE=Genv„g dimension „r inte definierad i %1.';
      Text003@1003 : TextConst 'ENU=%1 is not an available %2 for dimension %3.;NOR=%1 er ikke en tilgjengelig %2 for den dimensjonen.;SVE=%1 „r inte en tillg„nglig %2 f”r dimensionen.';
      Text004@1004 : TextConst 'ENU=Select a %1 for the %2 %3.;NOR=Velg en %1 for %2 %3.;SVE=V„lj %1 f”r %2 %3.';
      Text005@1005 : TextConst 'ENU=Select a %1 for the %2 %3 for %4 %5.;NOR=Velg en %1 for %2 %3 for %4 %5.;SVE=V„lj %1 f”r %2 %3 till %4 %5.';
      Text006@1006 : TextConst 'ENU=Select %1 %2 for the %3 %4.;NOR=Velg %1 %2 for %3 %4.;SVE=V„lj %1 %2 f”r %3 %4.';
      Text007@1007 : TextConst 'ENU=Select %1 %2 for the %3 %4 for %5 %6.;NOR=Velg %1 %2 for %3 %4 for %5 %6.;SVE=V„lj %1 %2 f”r %3 %4 till %5 %6.';
      Text008@1008 : TextConst 'ENU=%1 %2 must be blank.;NOR=%1 %2 m† v‘re tom.;SVE=%1 %2 m†ste vara blank.';
      Text009@1009 : TextConst 'ENU=%1 %2 must be blank for %3 %4.;NOR=%1 %2 m† v‘re tom for %3 %4.;SVE=%1 %2 m†ste vara blank f”r %3 %4.';
      Text010@1010 : TextConst 'ENU=%1 %2 must not be mentioned.;NOR=%1 %2 skal ikke nevnes.;SVE=%1 %2 f†r inte tas med.';
      Text011@1011 : TextConst 'ENU=%1 %2 must not be mentioned for %3 %4.;NOR=%1 %2 skal ikke nevnes for %3 %4.;SVE=%1 %2 f†r inte n„mnas f”r %3 %4.';
      Text012@1012 : TextConst 'ENU=A %1 used in %2 has not been used in %3.;NOR=En %1 som brukes i %2 er ikke brukt i %3.;SVE=%1 anv„nd i %2 har inte anv„nts i %3.';
      Text013@1013 : TextConst 'ENU=%1 for %2 %3 is not the same in %4 and %5.;NOR=%1 for %2 %3 er ikke det samme i %4 og %5.;SVE=%1 f”r %2 %3 „r inte samma i %4 och %5.';
      Text014@1014 : TextConst 'ENU=%1 %2 is blocked.;NOR=%1 %2 er sperret.;SVE=%1 %2 „r sp„rrad.';
      Text015@1015 : TextConst 'ENU=%1 %2 can''t be found.;NOR=%1 %2 kan ikke finnes.;SVE=%1 %2 kan inte hittas.';
      DimValueBlockedErr@1016 : TextConst '@@@="%1 = Dimension Value table caption, %2 = Dim Code, %3 = Dim Value";ENU=%1 %2 - %3 is blocked.;NOR=%1 %2 - %3 er sperret.;SVE=%1 %2 - %3 „r sp„rrad.';
      DimValueMustNotBeErr@1017 : TextConst '@@@="%1 = Dimension Value table caption, %2 = Dim Code, %3 = Dim Value, %4 = Dimension Value Type value";ENU=Dimension Value Type for %1 %2 - %3 must not be %4.;NOR=Dimensjonsverditypen for %1 %2 - %3 kan ikke v‘re %4.;SVE=%1 f”r %2 %3 - %4 f†r inte vara %5.';
      DimValueMissingErr@1018 : TextConst '@@@="%1 = Dimension Value table caption, %2 = Dim Code";ENU=%1 for %2 %3 is missing.;NOR=%1 for %2 mangler.;SVE=%1 f”r %2 saknas.';
      Text019@1028 : TextConst 'ENU=You have changed a dimension.\\Do you want to update the lines?;NOR=Du har endret en dimensjon.\\Vil du oppdatere linjene?;SVE=Du har „ndrad en dimension.\\Vill du uppdatera raderna?';
      LastErrorMessage@1022 : Record 700;
      TempJobTaskDimBuffer@1033 : TEMPORARY Record 11020400;
      TempDimSetEntryBuffer@1029 : TEMPORARY Record 480;
      ErrorMessageMgt@1021 : Codeunit 28;
      TempDimCombInitialized@1031 : Boolean;
      TempDimCombEmpty@1030 : Boolean;
      HasGotGLSetup@1025 : Boolean;
      GLSetupShortcutDimCode@1026 : ARRAY [8] OF Code[20];
      DimSetFilterCtr@1036 : Integer;
      IsCollectErrorsMode@1020 : Boolean;
      SourceCode@1019 : Code[10];
      DepAuthRec@1100485002 : Record 11012466;
      DepAuthMgt@1100485001 : Codeunit 11012783;
      Text11012000@1100485003 : TextConst 'ENU=You are not authorized for Department Code %1.;NOR=Du har ikke tillatelse til avdelingskode %1.;SVE=Du har inte beh”righet f”r avdelningskod %1.';
      DepAuthActive@1100485004 : Boolean;
      HasGotDepAuthSetup@1100485005 : Boolean;
      SkipDepAuth@1210190000 : Boolean;
      TableID@1100525002 : Integer;
      ReceivingCompany@1100525001 : Text[80];
      SavedReceivingCompany@1100529600 : Text;
      OverflowDimFilterErr@1038 : TextConst 'ENU=Conversion of dimension filter results in a filter that becomes too long.;SVE=Konvertering av dimensionsfilter resulterar i ett filter som blir f”r l†ngt.';
      AddDimensionValueChainsBool@1100285000 : Boolean;

    [External]
    PROCEDURE SetCollectErrorsMode@81();
    BEGIN
      IsCollectErrorsMode := TRUE;
    END;

    [External]
    PROCEDURE SetSourceCode@84(TableID@1000 : Integer);
    VAR
      SourceCodeSetup@1001 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      CASE TableID OF
        DATABASE::"Sales Header",
        DATABASE::"Sales Line":
          SourceCode := SourceCodeSetup.Sales;
        DATABASE::"Purchase Header",
        DATABASE::"Purchase Line",
        DATABASE::"Requisition Line":
          SourceCode := SourceCodeSetup.Purchases;
        DATABASE::"Bank Acc. Reconciliation",
        DATABASE::"Bank Acc. Reconciliation Line":
          SourceCode := SourceCodeSetup."Payment Reconciliation Journal";
        DATABASE::"Reminder Header":
          SourceCode := SourceCodeSetup.Reminder;
        DATABASE::"Finance Charge Memo Header":
          SourceCode := SourceCodeSetup."Finance Charge Memo";
        DATABASE::"Assembly Header",
        DATABASE::"Assembly Line":
          SourceCode := SourceCodeSetup.Assembly;
        DATABASE::"Transfer Line":
          SourceCode := SourceCodeSetup.Transfer;
        DATABASE::"Service Header",
        DATABASE::"Service Item Line",
        DATABASE::"Service Line",
        DATABASE::"Service Contract Header",
        DATABASE::"Standard Service Line":
          SourceCode := SourceCodeSetup."Service Management";
      END;
    END;

    [External]
    PROCEDURE GetSourceCode@95() : Code[10];
    BEGIN
      EXIT(SourceCode);
    END;

    [External]
    PROCEDURE GetDimensionSetID@123(VAR DimSetEntry2@1000 : Record 480) : Integer;
    VAR
      DimSetEntry@1002 : Record 480;
    BEGIN
      DimSetEntry.SetCompany(ReceivingCompany); //**4PS.n
      EXIT(DimSetEntry.GetDimensionSetID(DimSetEntry2));
    END;

    [External]
    PROCEDURE GetDimensionSet@124(VAR TempDimSetEntry@1000 : TEMPORARY Record 480;DimSetID@1001 : Integer);
    VAR
      DimSetEntry@1002 : Record 480;
    BEGIN
      TempDimSetEntry.DELETEALL;

      WITH DimSetEntry DO BEGIN
        //**4PS.sn
        IF ReceivingCompany = '' THEN
          CHANGECOMPANY(COMPANYNAME)
        ELSE
          CHANGECOMPANY(ReceivingCompany);
        //**4PS.en

        SETRANGE("Dimension Set ID",DimSetID);
        IF FINDSET THEN
          REPEAT
            TempDimSetEntry := DimSetEntry;
            TempDimSetEntry."Company Filter" := ReceivingCompany; //**4PS n RC2013
            TempDimSetEntry.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ShowDimensionSet@125(DimSetID@1000 : Integer;NewCaption@1003 : Text[250]);
    VAR
      DimSetEntry@1001 : Record 480;
      DimSetEntries@1002 : Page 479;
    BEGIN
      DimSetEntry.RESET;
      DimSetEntry.FILTERGROUP(2);
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DimSetEntry.FILTERGROUP(0);
      //**4PS.sn
      DimSetEntry.CHANGECOMPANY(ReceivingCompany);
      //**4PS.en
      DimSetEntries.SETTABLEVIEW(DimSetEntry);
      DimSetEntries.SetFormCaption(NewCaption);
      DimSetEntries.SetCompany(ReceivingCompany); //**4PS.n C019894
      DimSetEntries.RUNMODAL;
    END;

    [External]
    PROCEDURE EditDimensionSet@128(DimSetID@1000 : Integer;NewCaption@1003 : Text[250]) : Integer;
    VAR
      DimSetEntry@1001 : Record 480;
      EditDimSetEntries@1002 : Page 480;
      NewDimSetID@1004 : Integer;
    BEGIN
      NewDimSetID := DimSetID;
      DimSetEntry.RESET;
      DimSetEntry.FILTERGROUP(2);
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DimSetEntry.FILTERGROUP(0);
      //**4PS.sn
      DimSetEntry.CHANGECOMPANY(ReceivingCompany);
      EditDimSetEntries.SetCompany(ReceivingCompany);
      EditDimSetEntries.SetTableID(TableID);
      //**4PS.en
      EditDimSetEntries.SETTABLEVIEW(DimSetEntry);
      EditDimSetEntries.SetFormCaption(NewCaption);
      EditDimSetEntries.RUNMODAL;
      NewDimSetID := EditDimSetEntries.GetDimensionID;
      EXIT(NewDimSetID);
    END;

    [External]
    PROCEDURE EditDimensionSet2@131(DimSetID@1000 : Integer;NewCaption@1003 : Text[250];VAR GlobalDimVal1@1006 : Code[20];VAR GlobalDimVal2@1005 : Code[20]) : Integer;
    VAR
      DimSetEntry@1001 : Record 480;
      EditDimSetEntries@1002 : Page 480;
      NewDimSetID@1004 : Integer;
    BEGIN
      NewDimSetID := DimSetID;

      DimSetEntry.RESET;
      DimSetEntry.FILTERGROUP(2);
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DimSetEntry.FILTERGROUP(0);
      //**4PS.sn
      DimSetEntry.CHANGECOMPANY(ReceivingCompany);
      EditDimSetEntries.SetCompany(ReceivingCompany);
      EditDimSetEntries.SetTableID(TableID);
      //**4PS.en
      EditDimSetEntries.SETTABLEVIEW(DimSetEntry);
      EditDimSetEntries.SetFormCaption(NewCaption);
      EditDimSetEntries.RUNMODAL;
      NewDimSetID := EditDimSetEntries.GetDimensionID;
      UpdateGlobalDimFromDimSetID(NewDimSetID,GlobalDimVal1,GlobalDimVal2);
      OnAfterEditDimensionSet2(NewDimSetID,GlobalDimVal1,GlobalDimVal2);
      EXIT(NewDimSetID);
    END;

    [External]
    PROCEDURE EditReclasDimensionSet2@133(VAR DimSetID@1001 : Integer;VAR NewDimSetID@1002 : Integer;NewCaption@1000 : Text[250];VAR GlobalDimVal1@1005 : Code[20];VAR GlobalDimVal2@1003 : Code[20];VAR NewGlobalDimVal1@1007 : Code[20];VAR NewGlobalDimVal2@1006 : Code[20]);
    VAR
      EditReclasDimensions@1004 : Page 484;
    BEGIN
      EditReclasDimensions.SetDimensionIDs(DimSetID,NewDimSetID);
      EditReclasDimensions.SetFormCaption(NewCaption);
      EditReclasDimensions.RUNMODAL;
      EditReclasDimensions.GetDimensionIDs(DimSetID,NewDimSetID);
      UpdateGlobalDimFromDimSetID(DimSetID,GlobalDimVal1,GlobalDimVal2);
      UpdateGlobalDimFromDimSetID(NewDimSetID,NewGlobalDimVal1,NewGlobalDimVal2);
    END;

    [External]
    PROCEDURE UpdateGlobalDimFromDimSetID@130(DimSetID@1000 : Integer;VAR GlobalDimVal1@1001 : Code[20];VAR GlobalDimVal2@1002 : Code[20]);
    VAR
      ShortcutDimCode@1003 : ARRAY [8] OF Code[20];
    BEGIN
      GetShortcutDimensions(DimSetID,ShortcutDimCode);
      GlobalDimVal1 := ShortcutDimCode[1];
      GlobalDimVal2 := ShortcutDimCode[2];
    END;

    [External]
    PROCEDURE GetCombinedDimensionSetID@132(DimensionSetIDArr@1000 : ARRAY [10] OF Integer;VAR GlobalDimVal1@1004 : Code[20];VAR GlobalDimVal2@1005 : Code[20]) : Integer;
    VAR
      DimSetEntry@1002 : Record 480;
      TempDimSetEntry@1003 : TEMPORARY Record 480;
      i@1001 : Integer;
    BEGIN
      GetGLSetup;
      GlobalDimVal1 := '';
      GlobalDimVal2 := '';
      DimSetEntry.RESET;
      FOR i := 1 TO 10 DO
        IF DimensionSetIDArr[i] <> 0 THEN BEGIN
          DimSetEntry.CHANGECOMPANY(ReceivingCompany); //**4PS.n
          DimSetEntry.SETRANGE("Dimension Set ID",DimensionSetIDArr[i]);
          IF DimSetEntry.FINDSET THEN
            REPEAT
              IF TempDimSetEntry.GET(0,DimSetEntry."Dimension Code") THEN
                TempDimSetEntry.DELETE;
              TempDimSetEntry := DimSetEntry;
              TempDimSetEntry."Dimension Set ID" := 0;
              TempDimSetEntry.INSERT;
              IF GLSetupShortcutDimCode[1] = TempDimSetEntry."Dimension Code" THEN
                GlobalDimVal1 := TempDimSetEntry."Dimension Value Code";
              IF GLSetupShortcutDimCode[2] = TempDimSetEntry."Dimension Code" THEN
                GlobalDimVal2 := TempDimSetEntry."Dimension Value Code";
            UNTIL DimSetEntry.NEXT = 0;
        END;
      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE GetDeltaDimSetID@137(DimSetID@1005 : Integer;NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer) : Integer;
    VAR
      TempDimSetEntry@1004 : TEMPORARY Record 480;
      TempDimSetEntryNew@1003 : TEMPORARY Record 480;
      TempDimSetEntryDeleted@1002 : TEMPORARY Record 480;
    BEGIN
      // Returns an updated DimSetID based on parent's old and new DimSetID
      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT(DimSetID);
      GetDimensionSet(TempDimSetEntry,DimSetID);
      GetDimensionSet(TempDimSetEntryNew,NewParentDimSetID);
      GetDimensionSet(TempDimSetEntryDeleted,OldParentDimSetID);
      IF TempDimSetEntryDeleted.FINDSET THEN
        REPEAT
          IF TempDimSetEntryNew.GET(NewParentDimSetID,TempDimSetEntryDeleted."Dimension Code") THEN BEGIN
            IF TempDimSetEntryNew."Dimension Value Code" = TempDimSetEntryDeleted."Dimension Value Code" THEN
              TempDimSetEntryNew.DELETE;
            TempDimSetEntryDeleted.DELETE;
          END;
        UNTIL TempDimSetEntryDeleted.NEXT = 0;

      IF TempDimSetEntryDeleted.FINDSET THEN
        REPEAT
          IF TempDimSetEntry.GET(DimSetID,TempDimSetEntryDeleted."Dimension Code") THEN
            TempDimSetEntry.DELETE;
        UNTIL TempDimSetEntryDeleted.NEXT = 0;

      IF TempDimSetEntryNew.FINDSET THEN
        REPEAT
          IF TempDimSetEntry.GET(DimSetID,TempDimSetEntryNew."Dimension Code") THEN BEGIN
            IF TempDimSetEntry."Dimension Value Code" <> TempDimSetEntryNew."Dimension Value Code" THEN BEGIN
              TempDimSetEntry."Dimension Value Code" := TempDimSetEntryNew."Dimension Value Code";
              TempDimSetEntry."Dimension Value ID" := TempDimSetEntryNew."Dimension Value ID";
              TempDimSetEntry.MODIFY;
            END;
          END ELSE BEGIN
            TempDimSetEntry := TempDimSetEntryNew;
            TempDimSetEntry."Dimension Set ID" := DimSetID;
            TempDimSetEntry.INSERT;
          END;
        UNTIL TempDimSetEntryNew.NEXT = 0;

      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE GetGLSetup@52();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      //**4PS.sn
      IF HasGotGLSetup AND
         (((ReceivingCompany <> '') AND (SavedReceivingCompany <> ReceivingCompany)) OR
          ((ReceivingCompany = '') AND (SavedReceivingCompany <> COMPANYNAME)))
      THEN
        HasGotGLSetup := FALSE;
      //**4PS.en

      IF NOT HasGotGLSetup THEN BEGIN
        //**4PS.sn
        IF ReceivingCompany = '' THEN
          GLSetup.CHANGECOMPANY(COMPANYNAME)
        ELSE
          GLSetup.CHANGECOMPANY(ReceivingCompany);
        SavedReceivingCompany := GLSetup.CURRENTCOMPANY;
        //**4PS.en

        GLSetup.GET;
        GLSetupShortcutDimCode[1] := GLSetup."Shortcut Dimension 1 Code";
        GLSetupShortcutDimCode[2] := GLSetup."Shortcut Dimension 2 Code";
        GLSetupShortcutDimCode[3] := GLSetup."Shortcut Dimension 3 Code";
        GLSetupShortcutDimCode[4] := GLSetup."Shortcut Dimension 4 Code";
        GLSetupShortcutDimCode[5] := GLSetup."Shortcut Dimension 5 Code";
        GLSetupShortcutDimCode[6] := GLSetup."Shortcut Dimension 6 Code";
        GLSetupShortcutDimCode[7] := GLSetup."Shortcut Dimension 7 Code";
        GLSetupShortcutDimCode[8] := GLSetup."Shortcut Dimension 8 Code";
        HasGotGLSetup := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetLastDimErrorID@72() : Integer;
    BEGIN
      IF ErrorMessageMgt.IsActive THEN
        EXIT(ErrorMessageMgt.GetLastErrorID);
      EXIT(LastErrorMessage.ID);
    END;

    LOCAL PROCEDURE FindLastErrorMessage@42(VAR Message@1000 : Text[250]);
    BEGIN
      IF ErrorMessageMgt.IsActive THEN
        ErrorMessageMgt.FindFirstErrorMessage(Message)
      ELSE
        Message := LastErrorMessage.Description;
    END;

    LOCAL PROCEDURE GetDimBufForDimSetID@44(DimSetID@1001 : Integer;VAR TempDimBuf@1000 : TEMPORARY Record 360);
    VAR
      DimSetEntry@1002 : Record 480;
    BEGIN
      DimSetEntry.RESET;
      DimSetEntry.CHANGECOMPANY(ReceivingCompany); //**4PS.n
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      IF DimSetEntry.FINDSET THEN
        REPEAT
          TempDimBuf.INIT;
          TempDimBuf."Table ID" := DATABASE::"Dimension Buffer";
          TempDimBuf."Entry No." := 0;
          TempDimBuf."Dimension Code" := DimSetEntry."Dimension Code";
          TempDimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
          TempDimBuf.INSERT;
        UNTIL DimSetEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckDimIDComb@138(DimSetID@1002 : Integer) : Boolean;
    VAR
      TempDimBuf@1001 : TEMPORARY Record 360;
    BEGIN
      GetDimBufForDimSetID(DimSetID,TempDimBuf);
      EXIT(CheckDimComb(TempDimBuf));
    END;

    [External]
    PROCEDURE CheckDimValuePosting@14(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];DimSetID@1003 : Integer) : Boolean;
    VAR
      DimSetEntry@1009 : Record 480;
      TempDefaultDim@1012 : TEMPORARY Record 352;
      IsHandled@1002 : Boolean;
      IsChecked@1007 : Boolean;
      LastErrorID@1004 : Integer;
    BEGIN
      IsChecked := FALSE;
      IsHandled := FALSE;
      OnBeforeCheckDimValuePosting(TableID,No,DimSetID,IsChecked,IsHandled);
      IF IsHandled THEN
        EXIT(IsChecked);

      IF NOT CheckBlockedDimAndValues(DimSetID) THEN
        IF NOT IsCollectErrorsMode THEN
          EXIT(FALSE);

      LastErrorID := GetLastDimErrorID;
      DimSetEntry.RESET;
      DimSetEntry.CHANGECOMPANY(ReceivingCompany); //**4PS.n CALL T003997
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      CollectDefaultDimsToCheck(TableID,No,TempDefaultDim);
      WITH TempDefaultDim DO BEGIN
        RESET;
        IF FINDSET THEN
          REPEAT
            DimSetEntry.SETRANGE("Dimension Code","Dimension Code");
            CASE "Value Posting" OF
              "Value Posting"::"Code Mandatory":
                IF NOT DimSetEntry.FINDFIRST OR (DimSetEntry."Dimension Value Code" = '') THEN
                  LogError(RECORDID,FIELDNO("Value Posting"),GetMissedMandatoryDimErr(TempDefaultDim),'');
              "Value Posting"::"Same Code":
                IF "Dimension Value Code" <> '' THEN BEGIN
                  IF NOT DimSetEntry.FINDFIRST OR
                     ("Dimension Value Code" <> DimSetEntry."Dimension Value Code")
                  THEN
                    LogError(RECORDID,FIELDNO("Value Posting"),GetSameCodeWrongDimErr(TempDefaultDim),'');
                END ELSE
                  IF DimSetEntry.FINDFIRST THEN
                    LogError(RECORDID,FIELDNO("Value Posting"),GetSameCodeBlankDimErr(TempDefaultDim),'');
              "Value Posting"::"No Code":
                IF DimSetEntry.FINDFIRST THEN
                  LogError(RECORDID,FIELDNO("Value Posting"),GetNoCodeFilledDimErr(TempDefaultDim),'');
            END;
            IF NOT IsCollectErrorsMode THEN
              IF LastErrorID <> GetLastDimErrorID THEN
                EXIT(FALSE);
          UNTIL NEXT = 0;
      END;
      EXIT(GetLastDimErrorID = LastErrorID);
    END;

    [External]
    PROCEDURE CheckDimBuffer@64(VAR DimBuffer@1000 : Record 360) : Boolean;
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
      i@1001 : Integer;
    BEGIN
      IF DimBuffer.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          TempDimBuf.INIT;
          TempDimBuf."Table ID" := DATABASE::"Dimension Buffer";
          TempDimBuf."Entry No." := i;
          TempDimBuf."Dimension Code" := DimBuffer."Dimension Code";
          TempDimBuf."Dimension Value Code" := DimBuffer."Dimension Value Code";
          TempDimBuf."Receiving Company" := DimBuffer."Receiving Company";  //**4PS.n
          TempDimBuf.INSERT;
          i := i + 1;
        UNTIL DimBuffer.NEXT = 0;
      END;
      EXIT(CheckDimComb(TempDimBuf));
    END;

    LOCAL PROCEDURE CheckDimComb@3(VAR TempDimBuf@1001 : TEMPORARY Record 360) : Boolean;
    VAR
      DimComb@1000 : Record 350;
      CurrentDimCode@1002 : Code[20];
      CurrentDimValCode@1003 : Code[20];
      DimFilter@1004 : Text;
      Separator@1005 : Text;
      LastErrorID@1006 : Integer;
    BEGIN
      IF NOT TempDimCombInitialized THEN BEGIN
        TempDimCombInitialized := TRUE;
        IF DimComb.ISEMPTY THEN
          TempDimCombEmpty := TRUE;
      END;

      IF TempDimCombEmpty THEN
        EXIT(TRUE);

      IF NOT TempDimBuf.FINDSET THEN
        EXIT(TRUE);

      REPEAT
        DimFilter += Separator + TempDimBuf."Dimension Code";
        Separator := '|';
      UNTIL TempDimBuf.NEXT = 0;

      LastErrorID := GetLastDimErrorID;
      DimComb.CHANGECOMPANY(ReceivingCompany);  //**4PS.n
      DimComb.SETFILTER("Dimension 1 Code",DimFilter);
      DimComb.SETFILTER("Dimension 2 Code",DimFilter);
      IF DimComb.FINDSET THEN
        REPEAT
          IF DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked THEN
            LogError(
              DimComb.RECORDID,DimComb.FIELDNO("Combination Restriction"),
              STRSUBSTNO(Text000,DimComb."Dimension 1 Code",DimComb."Dimension 2 Code"),'')
          ELSE BEGIN
            TempDimBuf.SETRANGE("Dimension Code",DimComb."Dimension 1 Code");
            TempDimBuf.FINDFIRST;
            CurrentDimCode := TempDimBuf."Dimension Code";
            CurrentDimValCode := TempDimBuf."Dimension Value Code";
            TempDimBuf.SETRANGE("Dimension Code",DimComb."Dimension 2 Code");
            TempDimBuf.FINDFIRST;
            CheckDimValueComb(
              TempDimBuf."Dimension Code",TempDimBuf."Dimension Value Code",
              CurrentDimCode,CurrentDimValCode);
            CheckDimValueComb(
              CurrentDimCode,CurrentDimValCode,
              TempDimBuf."Dimension Code",TempDimBuf."Dimension Value Code");
          END;
          IF NOT IsCollectErrorsMode THEN
            IF LastErrorID <> GetLastDimErrorID THEN
              EXIT(FALSE);
        UNTIL DimComb.NEXT = 0;
      EXIT(GetLastDimErrorID = LastErrorID);
    END;

    LOCAL PROCEDURE CheckDimValueComb@9(Dim1@1000 : Code[20];Dim1Value@1001 : Code[20];Dim2@1002 : Code[20];Dim2Value@1003 : Code[20]) : Boolean;
    VAR
      DimValueCombination@1004 : Record 351;
    BEGIN
      IF DimValueCombination.GET(Dim1,Dim1Value,Dim2,Dim2Value) THEN BEGIN
        LogError(
          DimValueCombination.RECORDID,0,STRSUBSTNO(Text001,Dim1,Dim1Value,Dim2,Dim2Value),'');
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CollectDefaultDimsToCheck@82(TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20];VAR TempDefaultDim@1000 : TEMPORARY Record 352);
    VAR
      DefaultDim@1001 : Record 352;
      DefaultDimPriority@1004 : ARRAY [2] OF Record 354;
      NoFilter@1007 : ARRAY [2] OF Code[20];
      i@1005 : Integer;
      j@1006 : Integer;
    BEGIN
      NoFilter[2] := '';
      FOR i := 1 TO ARRAYLEN(TableID) DO
        IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
          DefaultDim.CHANGECOMPANY(ReceivingCompany);  //**4PS.n CALL T003997
          DefaultDim.SETFILTER("Value Posting",'<>%1',DefaultDim."Value Posting"::" ");
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
          FOR j := 1 TO 2 DO BEGIN
            DefaultDim.SETRANGE("No.",NoFilter[j]);
            IF DefaultDim.FINDSET THEN
              REPEAT
                TempDefaultDim.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                IF NOT TempDefaultDim.FINDFIRST THEN BEGIN
                  TempDefaultDim := DefaultDim;
                  TempDefaultDim.INSERT;
                END ELSE
                  IF DefaultDimPriority[1].GET(SourceCode,DefaultDim."Table ID") THEN
                    IF DefaultDimPriority[2].GET(SourceCode,TempDefaultDim."Table ID") THEN BEGIN
                      IF DefaultDimPriority[1].Priority < DefaultDimPriority[2].Priority THEN BEGIN
                        TempDefaultDim.DELETE;
                        TempDefaultDim := DefaultDim;
                        TempDefaultDim.INSERT;
                      END
                    END ELSE BEGIN
                      TempDefaultDim.DELETE;
                      TempDefaultDim := DefaultDim;
                      TempDefaultDim.INSERT;
                    END;
              UNTIL DefaultDim.NEXT = 0;
          END;
        END;
    END;

    LOCAL PROCEDURE GetMissedMandatoryDimErr@86(DefaultDim@1000 : Record 352) : Text;
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      IF DefaultDim."No." = '' THEN
        EXIT(
          STRSUBSTNO(
            Text004,
            DefaultDim.FIELDCAPTION("Dimension Value Code"),
            DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code"));
      EXIT(
        STRSUBSTNO(
          Text005,
          DefaultDim.FIELDCAPTION("Dimension Value Code"),
          DefaultDim.FIELDCAPTION("Dimension Code"),
          DefaultDim."Dimension Code",
          ObjectTranslation.TranslateTable(DefaultDim."Table ID"),
          DefaultDim."No."));
    END;

    LOCAL PROCEDURE GetNoCodeFilledDimErr@91(DefaultDim@1000 : Record 352) : Text;
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      IF DefaultDim."No." = '' THEN
        EXIT(
          STRSUBSTNO(
            Text010,
            DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code"));
      EXIT(
        STRSUBSTNO(
          Text011,
          DefaultDim.FIELDCAPTION("Dimension Code"),
          DefaultDim."Dimension Code",
          ObjectTranslation.TranslateTable(DefaultDim."Table ID"),
          DefaultDim."No."));
    END;

    LOCAL PROCEDURE GetSameCodeBlankDimErr@90(DefaultDim@1000 : Record 352) : Text;
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      IF DefaultDim."No." = '' THEN
        EXIT(
          STRSUBSTNO(
            Text008,
            DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code"));
      EXIT(
        STRSUBSTNO(
          Text009,
          DefaultDim.FIELDCAPTION("Dimension Code"),
          DefaultDim."Dimension Code",
          ObjectTranslation.TranslateTable(DefaultDim."Table ID"),
          DefaultDim."No."));
    END;

    LOCAL PROCEDURE GetSameCodeWrongDimErr@88(DefaultDim@1000 : Record 352) : Text;
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      IF DefaultDim."No." = '' THEN
        EXIT(
          STRSUBSTNO(
            Text006,
            DefaultDim.FIELDCAPTION("Dimension Value Code"),DefaultDim."Dimension Value Code",
            DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code"));
      EXIT(
        STRSUBSTNO(
          Text007,
          DefaultDim.FIELDCAPTION("Dimension Value Code"),
          DefaultDim."Dimension Value Code",
          DefaultDim.FIELDCAPTION("Dimension Code"),
          DefaultDim."Dimension Code",
          ObjectTranslation.TranslateTable(DefaultDim."Table ID"),
          DefaultDim."No."));
    END;

    [External]
    PROCEDURE GetDimCombErr@41() ErrorMessage : Text[250];
    BEGIN
      FindLastErrorMessage(ErrorMessage);
    END;

    [External]
    PROCEDURE UpdateDefaultDim@59(TableID@1000 : Integer;No@1001 : Code[40];VAR GlobalDim1Code@1002 : Code[20];VAR GlobalDim2Code@1003 : Code[20]);
    VAR
      DefaultDim@1004 : Record 352;
    BEGIN
      GetGLSetup;
      IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[1]) THEN
        GlobalDim1Code := DefaultDim."Dimension Value Code"
      ELSE
        GlobalDim1Code := '';
      IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[2]) THEN
        GlobalDim2Code := DefaultDim."Dimension Value Code"
      ELSE
        GlobalDim2Code := '';
    END;

    [External]
    PROCEDURE GetDefaultDimID@8(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[40];SourceCode@1002 : Code[20];VAR GlobalDim1Code@1003 : Code[20];VAR GlobalDim2Code@1004 : Code[20];InheritFromDimSetID@1014 : Integer;InheritFromTableNo@1015 : Integer) : Integer;
    VAR
      DimVal@1012 : Record 349;
      DefaultDimPriority1@1005 : Record 354;
      DefaultDimPriority2@1006 : Record 354;
      DefaultDim@1007 : Record 352;
      TempDimBuf@1017 : TEMPORARY Record 360;
      TempDimSetEntry@1011 : TEMPORARY Record 480;
      TempDimSetEntry0@1016 : TEMPORARY Record 480;
      i@1010 : Integer;
      j@1009 : Integer;
      NoFilter@1008 : ARRAY [2] OF Code[40];
      NewDimSetID@1013 : Integer;
      IsHandled@1018 : Boolean;
      HoldGlobDim1@1100485000 : Code[20];
    BEGIN
      OnBeforeGetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo);

      GetGLSetup;

      //**4PS.sn DP00387
      IF ReceivingCompany = '' THEN BEGIN
        DimVal.CHANGECOMPANY(COMPANYNAME);
        DefaultDimPriority1.CHANGECOMPANY(COMPANYNAME);
        DefaultDimPriority2.CHANGECOMPANY(COMPANYNAME);
        DefaultDim.CHANGECOMPANY(COMPANYNAME);
      END ELSE BEGIN
        DimVal.CHANGECOMPANY(ReceivingCompany);
        DefaultDimPriority1.CHANGECOMPANY(ReceivingCompany);
        DefaultDimPriority2.CHANGECOMPANY(ReceivingCompany);
        DefaultDim.CHANGECOMPANY(ReceivingCompany);
      END;
      //**4PS.en DP00387

      IF InheritFromDimSetID > 0 THEN
        GetDimensionSet(TempDimSetEntry0,InheritFromDimSetID);

      //**4PS.sn
      IF GlobalDim1Code <> '' THEN BEGIN
        GetDepAuthSetup;
        IF DepAuthActive THEN
          HoldGlobDim1 := GlobalDim1Code;
      END;
      //**4PS.en

      IF TempDimSetEntry0.FINDSET THEN
        REPEAT
          TempDimBuf.INIT;
          TempDimBuf."Table ID" := InheritFromTableNo;
          TempDimBuf."Entry No." := 0;
          TempDimBuf."Dimension Code" := TempDimSetEntry0."Dimension Code";
          TempDimBuf."Dimension Value Code" := TempDimSetEntry0."Dimension Value Code";
          TempDimBuf.INSERT;
          //**4PS.sn
          IF NOT DefaultDimPriority2.GET(SourceCode,TempDimBuf."Table ID") THEN
            TempDimBuf.MARK(TRUE);
          //**4PS.en
        UNTIL TempDimSetEntry0.NEXT = 0;

      NoFilter[2] := '';
      FOR i := 1 TO ARRAYLEN(TableID) DO
        IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
          IsHandled := FALSE;
          OnGetDefaultDimOnBeforeCreate(
            TempDimBuf,TableID[i],No[i],GLSetupShortcutDimCode,GlobalDim1Code,GlobalDim2Code,IsHandled,SourceCode);
          IF NOT IsHandled THEN BEGIN
            DefaultDim.SETRANGE("Table ID",TableID[i]);
            NoFilter[1] := No[i];
            FOR j := 1 TO 2 DO BEGIN
             IF NoFilter[j] <> '' THEN BEGIN //**4PS.n call 31946
              DefaultDim.SETRANGE("No.",NoFilter[j]);
              IF DefaultDim.FINDSET THEN
                REPEAT
                  IF DefaultDim."Dimension Value Code" <> '' THEN BEGIN
                    TempDimBuf.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                    //**4PS.sn
                    TempDimBuf.MARKEDONLY(TRUE);
                    TempDimBuf.DELETEALL;
                    TempDimBuf.MARKEDONLY(FALSE);
                    //**4PS.en
                    IF NOT TempDimBuf.FINDFIRST THEN BEGIN
                      TempDimBuf.INIT;
                      TempDimBuf."Table ID" := DefaultDim."Table ID";
                      TempDimBuf."Entry No." := 0;
                      TempDimBuf."Dimension Code" := DefaultDim."Dimension Code";
                      TempDimBuf."Dimension Value Code" := DefaultDim."Dimension Value Code";
                      TempDimBuf.INSERT;
                    END ELSE
                      IF DefaultDimPriority1.GET(SourceCode,DefaultDim."Table ID") THEN
                        IF DefaultDimPriority2.GET(SourceCode,TempDimBuf."Table ID") THEN BEGIN
                          IF DefaultDimPriority1.Priority < DefaultDimPriority2.Priority THEN BEGIN
                            TempDimBuf.DELETE;
                            TempDimBuf."Table ID" := DefaultDim."Table ID";
                            TempDimBuf."Entry No." := 0;
                            TempDimBuf."Dimension Value Code" := DefaultDim."Dimension Value Code";
                            TempDimBuf.INSERT;
                          END;
                        END ELSE BEGIN
                          TempDimBuf.DELETE;
                          TempDimBuf."Table ID" := DefaultDim."Table ID";
                          TempDimBuf."Entry No." := 0;
                          TempDimBuf."Dimension Value Code" := DefaultDim."Dimension Value Code";
                          TempDimBuf.INSERT;
                        END;
                    IF GLSetupShortcutDimCode[1] = TempDimBuf."Dimension Code" THEN
                    BEGIN //**4PS.n
                      GlobalDim1Code := TempDimBuf."Dimension Value Code";
                    //**4PS.sn
                      CheckDepartmentAuthorization(DefaultDim."Table ID", GlobalDim1Code);
                    END;
                    //**4PS.en
                    IF GLSetupShortcutDimCode[2] = TempDimBuf."Dimension Code" THEN
                      GlobalDim2Code :=  TempDimBuf."Dimension Value Code";
                  END;
                UNTIL DefaultDim.NEXT = 0;
             END; //**4PS.n call 31946
            END;
          END;
        END;

      //**4PS.sn C019670
      IF HoldGlobDim1 <> '' THEN BEGIN
        TempDimBuf.RESET;
        TempDimBuf.SETRANGE("Dimension Code", GLSetupShortcutDimCode[1]);
        IF NOT TempDimBuf.FINDFIRST THEN BEGIN
          TempDimBuf.INIT;
          TempDimBuf."Table ID" := DATABASE::"User Setup";
          TempDimBuf."Entry No." := 0;
          TempDimBuf."Dimension Code" := GLSetupShortcutDimCode[1];
          TempDimBuf."Dimension Value Code" := HoldGlobDim1;
          TempDimBuf.INSERT;
          GlobalDim1Code := HoldGlobDim1;
        END;
      END;
      //**4PS.en

      TempDimBuf.RESET;
      IF TempDimBuf.FINDSET THEN BEGIN
        REPEAT
          DimVal.GET(TempDimBuf."Dimension Code",TempDimBuf."Dimension Value Code");
          TempDimSetEntry."Dimension Code" := TempDimBuf."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := TempDimBuf."Dimension Value Code";
          TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
          TempDimSetEntry.INSERT;
        UNTIL TempDimBuf.NEXT = 0;
        NewDimSetID := GetDimensionSetID(TempDimSetEntry);
      END;
      EXIT(NewDimSetID);
    END;

    [External]
    PROCEDURE GetRecDefaultDimID@150(RecVariant@1011 : Variant;CurrFieldNo@1012 : Integer;TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];SourceCode@1002 : Code[20];VAR GlobalDim1Code@1003 : Code[20];VAR GlobalDim2Code@1004 : Code[20];InheritFromDimSetID@1014 : Integer;InheritFromTableNo@1015 : Integer) : Integer;
    VAR
      DefaultDimID@1005 : Integer;
    BEGIN
      OnGetRecDefaultDimID(RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo);
      DefaultDimID := GetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo);
      OnAfterGetRecDefaultDimID(
        RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo,
        GlobalDim1Code,GlobalDim2Code,DefaultDimID);
      EXIT(DefaultDimID);
    END;

    [External]
    PROCEDURE AddFirstToTableIdArray@256(VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1001 : ARRAY [10] OF Code[20];NewTableId@1002 : Integer;NewNo@1003 : Code[20]);
    VAR
      Index@1004 : Integer;
    BEGIN
      IF NewNo = '' THEN
        EXIT;
      FOR Index := ARRAYLEN(TableID) DOWNTO 2 DO BEGIN
        TableID[Index] := TableID[Index - 1];
        No[Index] := No[Index - 1];
      END;
      TableID[1] := NewTableId;
      No[1] := NewNo;
    END;

    [External]
    PROCEDURE AddLastToTableIdArray@257(VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1001 : ARRAY [10] OF Code[20];NewTableId@1002 : Integer;NewNo@1003 : Code[20]);
    VAR
      Index@1004 : Integer;
    BEGIN
      IF NewNo = '' THEN
        EXIT;
      FOR Index := 1 TO ARRAYLEN(TableID) DO
        IF (No[Index] = '') OR (Index = ARRAYLEN(TableID)) THEN BEGIN
          TableID[Index] := NewTableId;
          No[Index] := NewNo;
          EXIT;
        END;
    END;

    [External]
    PROCEDURE TypeToTableID1@11(Type@1000 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee') : Integer;
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
        Type::Customer:
          EXIT(DATABASE::Customer);
        Type::Vendor:
          EXIT(DATABASE::Vendor);
        Type::Employee:
          EXIT(DATABASE::Employee);
        Type::"Bank Account":
          EXIT(DATABASE::"Bank Account");
        Type::"Fixed Asset":
          EXIT(DATABASE::"Fixed Asset");
        Type::"IC Partner":
          EXIT(DATABASE::"IC Partner");
      END;
    END;

    [External]
    PROCEDURE TypeToTableID2@13(Type@1000 : 'Resource,Item,G/L Account') : Integer;
    VAR
      TableID@1001 : Integer;
    BEGIN
      CASE Type OF
        Type::Resource:
          EXIT(DATABASE::Resource);
        Type::Item:
          EXIT(DATABASE::Item);
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
        ELSE BEGIN
          OnTypeToTableID2(TableID,Type);
          EXIT(TableID);
        END;
      END;
    END;

    [External]
    PROCEDURE TypeToTableID3@16(Type@1000 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)') : Integer;
    BEGIN
      CASE Type OF
        Type::" ":
          EXIT(0);
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
        Type::Item:
          EXIT(DATABASE::Item);
        Type::Resource:
          EXIT(DATABASE::Resource);
        Type::"Fixed Asset":
          EXIT(DATABASE::"Fixed Asset");
        Type::"Charge (Item)":
          EXIT(DATABASE::"Item Charge");
      END;
    END;

    [External]
    PROCEDURE TypeToTableID4@1(Type@1000 : ' ,Item,Resource') : Integer;
    BEGIN
      CASE Type OF
        Type::" ":
          EXIT(0);
        Type::Item:
          EXIT(DATABASE::Item);
        Type::Resource:
          EXIT(DATABASE::Resource);
      END;
    END;

    [External]
    PROCEDURE TypeToTableID5@119(Type@1000 : ' ,Item,Resource,Cost,G/L Account') : Integer;
    BEGIN
      CASE Type OF
        Type::" ":
          EXIT(0);
        Type::Item:
          EXIT(DATABASE::Item);
        Type::Resource:
          EXIT(DATABASE::Resource);
        Type::Cost:
          EXIT(DATABASE::"Service Cost");
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
      END;
    END;

    [External]
    PROCEDURE DeleteDefaultDim@58(TableID@1000 : Integer;No@1001 : Code[40]);
    VAR
      DefaultDim@1002 : Record 352;
    BEGIN
      //**4PS.sn
      IF (ReceivingCompany <> '') AND (ReceivingCompany <> COMPANYNAME) THEN
        DefaultDim.CHANGECOMPANY(ReceivingCompany);
      //**4PS.en
      DefaultDim.SETRANGE("Table ID",TableID);
      DefaultDim.SETRANGE("No.",No);
      IF NOT DefaultDim.ISEMPTY THEN
        DefaultDim.DELETEALL;
    END;

    [External]
    PROCEDURE RenameDefaultDim@83(TableID@1000 : Integer;OldNo@1001 : Code[20];NewNo@1003 : Code[20]);
    VAR
      DefaultDim@1002 : Record 352;
      DefaultDimToRename@1004 : Record 352;
    BEGIN
      DefaultDim.SETRANGE("Table ID",TableID);
      DefaultDim.SETRANGE("No.",OldNo);
      IF DefaultDim.FINDSET(TRUE) THEN
        REPEAT
          DefaultDimToRename := DefaultDim;
          DefaultDimToRename.RENAME(DefaultDim."Table ID",NewNo,DefaultDim."Dimension Code");
        UNTIL DefaultDim.NEXT = 0;
    END;

    [External]
    PROCEDURE LookupDimValueCode@21(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1002 : Record 349;
      GLSetup@1003 : Record 98;
    BEGIN
      OnBeforeLookupDimValueCode(FieldNumber,ShortcutDimCode);

      GetGLSetup;
      IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      //**4PS.sn
      IF ReceivingCompany = '' THEN
        DimVal.CHANGECOMPANY(COMPANYNAME)
      ELSE
        DimVal.CHANGECOMPANY(ReceivingCompany);
      //**4PS.en
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      DimVal."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
      DimVal.Code := ShortcutDimCode;
      IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN BEGIN
        CheckDim(DimVal."Dimension Code");
        CheckDimValue(DimVal."Dimension Code",DimVal.Code);
        ShortcutDimCode := DimVal.Code;
      END;
    END;

    PROCEDURE LookupDimValueCodeCompany@1210190000(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20];ReceivingCompany@1210190000 : Text[30]);
    BEGIN
      //**4PS
      SetCompany(ReceivingCompany);
      LookupDimValueCode(FieldNumber,ShortcutDimCode);
    END;

    [External]
    PROCEDURE ValidateDimValueCode@22(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1002 : Record 349;
      GLSetup@1003 : Record 98;
    BEGIN
      OnBeforeValidateDimValueCode(FieldNumber,ShortcutDimCode);

      GetGLSetup;
      IF (GLSetupShortcutDimCode[FieldNumber] = '') AND (ShortcutDimCode <> '') THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      //**4PS.sn
      IF ReceivingCompany = '' THEN
        DimVal.CHANGECOMPANY(COMPANYNAME)
      ELSE
        DimVal.CHANGECOMPANY(ReceivingCompany);
      //**4PS.en

      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      IF ShortcutDimCode <> '' THEN BEGIN
        DimVal.SETRANGE(Code,ShortcutDimCode);
        IF NOT DimVal.FINDFIRST THEN BEGIN
          DimVal.SETFILTER(Code,STRSUBSTNO('%1*',ShortcutDimCode));
          IF DimVal.FINDFIRST THEN
            ShortcutDimCode := DimVal.Code
          ELSE
            ERROR(
              Text003,
              //ShortcutDimCode,DimVal.FIELDCAPTION(Code)); //**4PS.o
                ShortcutDimCode,DimVal.FIELDCAPTION(Code),GLSetupShortcutDimCode[FieldNumber]);  //**4PS.n
        END;
      END;
    END;

    PROCEDURE ValidateDimensionCompany@1210190001(FieldNo@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20];ReceivingCompany@1210190000 : Text[30]);
    VAR
      DimVal@1002 : Record 349;
      GLSetup@1003 : Record 98;
    BEGIN
      //**4PS
      GetGLSetup;
      IF GLSetupShortcutDimCode[FieldNo] = '' THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      IF ReceivingCompany = '' THEN
        DimVal.CHANGECOMPANY(COMPANYNAME)
      ELSE
        DimVal.CHANGECOMPANY(ReceivingCompany);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNo]);
      IF ShortcutDimCode <> '' THEN BEGIN
        DimVal.SETRANGE(Code,ShortcutDimCode);
        IF NOT DimVal.FIND('-') THEN BEGIN
          DimVal.SETFILTER(Code,STRSUBSTNO('%1*',ShortcutDimCode));
          IF DimVal.FIND('-') THEN
            ShortcutDimCode := DimVal.Code
          ELSE
            ERROR(
              STRSUBSTNO(Text003,
              ShortcutDimCode,DimVal.FIELDCAPTION(Code),GLSetupShortcutDimCode[FieldNo]));
        END;
      END;
    END;

    [External]
    PROCEDURE ValidateShortcutDimValues@127(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20];VAR DimSetID@1004 : Integer);
    VAR
      DimVal@1002 : Record 349;
      TempDimSetEntry@1005 : TEMPORARY Record 480;
      DimensionValueChains@1100285000 : Record 11128020;
    BEGIN
      ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      //**4PS.sn
      IF ReceivingCompany = '' THEN
        DimVal.CHANGECOMPANY(COMPANYNAME)
      ELSE
        DimVal.CHANGECOMPANY(ReceivingCompany);
      //**4PS.en

      DimVal."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
      IF ShortcutDimCode <> '' THEN BEGIN
        DimVal.GET(DimVal."Dimension Code",ShortcutDimCode);
        IF NOT CheckDim(DimVal."Dimension Code") THEN
          ERROR(GetDimErr);
        IF NOT CheckDimValue(DimVal."Dimension Code",ShortcutDimCode) THEN
          ERROR(GetDimErr);
      END;
      GetDimensionSet(TempDimSetEntry,DimSetID);
      IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DimVal."Dimension Code") THEN
        IF TempDimSetEntry."Dimension Value Code" <> ShortcutDimCode THEN BEGIN
            TempDimSetEntry.DELETE;
      //>>IME250
            DimensionValueChains.RemoveExtendDimSetEntry(TempDimSetEntry);
      //<<IME250
          END;
      IF ShortcutDimCode <> '' THEN BEGIN
        TempDimSetEntry."Dimension Code" := DimVal."Dimension Code";
        TempDimSetEntry."Dimension Value Code" := DimVal.Code;
        TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
        IF TempDimSetEntry.INSERT THEN  //;  I009
      //>>IME171
          //DimensionValueChains.AddExtendDimSetEntry(TempDimSetEntry,ReceivingCompany);
          DimensionValueChains.AddExtendDimSetEntry(TempDimSetEntry,ReceivingCompany,NOT AddDimensionValueChainsBool)
        ELSE
          IF AddDimensionValueChainsBool THEN
            DimensionValueChains.AddExtendDimSetEntry(TempDimSetEntry,ReceivingCompany,AddDimensionValueChainsBool); //I009
      //<<IME171
      END;
      DimSetID := GetDimensionSetID(TempDimSetEntry);

      OnAfterValidateShortcutDimValues(FieldNumber,ShortcutDimCode,DimSetID);
    END;

    [External]
    PROCEDURE SaveDefaultDim@53(TableID@1000 : Integer;No@1001 : Code[40];FieldNumber@1002 : Integer;ShortcutDimCode@1003 : Code[20]);
    VAR
      DefaultDim@1004 : Record 352;
    BEGIN
      GetGLSetup;

      //**4PS.sn
      IF FieldNumber = 1 THEN
        CheckDepartmentAuthorization(TableID, ShortcutDimCode);
      CheckDimensionAuthorisation(FieldNumber,TableID);
      //**4PS.en

      IF ShortcutDimCode <> '' THEN BEGIN
        IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DefaultDim.MODIFY;
        END ELSE BEGIN
          DefaultDim.INIT;
          DefaultDim.VALIDATE("Table ID",TableID);
          //DefaultDim.VALIDATE("No.",No); //**4PS.o
          DefaultDim."No." := No;          //**4PS.n
          DefaultDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          //**4PS.sn call 23731
          IF (TableID = DATABASE::Job) AND (FieldNumber = 1) AND
             (GLSetupShortcutDimCode[FieldNumber] <> '')
          THEN BEGIN
            DefaultDim."Value Posting" := DefaultDim."Value Posting"::"Same Code";
      //      //*29100.sn
      //      IF Proj.GET(No) THEN BEGIN
      //        IF Proj."Project Type" <> '' THEN
      //          IF ProjType.GET(Proj."Project Type") THEN
      //            DefaultDim."Value Posting" := ProjType."Def. Value Posting Department";
      //      END;
      //      //*29100.en
          END;
          //**4PS.en
          DefaultDim.INSERT;
        END;
      END ELSE
        IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber]) THEN
          DefaultDim.DELETE;
    END;

    [External]
    PROCEDURE GetShortcutDimensions@129(DimSetID@1000 : Integer;VAR ShortcutDimCode@1004 : ARRAY [8] OF Code[20]);
    VAR
      GetShortcutDimensionValues@1001 : Codeunit 480;
    BEGIN
      GetShortcutDimensionValues.SetCompany(ReceivingCompany); //**4PS.n

      GetShortcutDimensionValues.GetShortcutDimensions(DimSetID,ShortcutDimCode);
    END;

    [External]
    PROCEDURE CheckDimBufferValuePosting@68(VAR DimBuffer@1000 : Record 360;TableID@1001 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      TempDimBuf@1003 : TEMPORARY Record 360;
      i@1005 : Integer;
    BEGIN
      IF DimBuffer.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          //**4PS.so
          //IF (NOT CheckDimValue(
          //      DimBuffer."Dimension Code",DimBuffer."Dimension Value Code")) OR
          //**4PS.eo
          //**4PS.sn
          IF (NOT CheckDimValueCompany(
                DimBuffer."Dimension Code",DimBuffer."Dimension Value Code",DimBuffer."Receiving Company")) OR
          //**4PS.en
             (NOT CheckDim(DimBuffer."Dimension Code"))
          THEN
            EXIT(FALSE);

          TempDimBuf.INIT;
          TempDimBuf."Entry No." := i;
          TempDimBuf."Dimension Code" := DimBuffer."Dimension Code";
          TempDimBuf."Dimension Value Code" := DimBuffer."Dimension Value Code";
          TempDimBuf."Receiving Company" := DimBuffer."Receiving Company";  //**4PS.n
          TempDimBuf.INSERT;
          i := i + 1;
        UNTIL DimBuffer.NEXT = 0;
      END;
      EXIT(CheckValuePosting(TableID,No,TempDimBuf));
    END;

    LOCAL PROCEDURE CheckValuePosting@36(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];VAR TempDimBuf@1007 : TEMPORARY Record 360) : Boolean;
    VAR
      DefaultDim@1002 : Record 352;
      i@1004 : Integer;
      j@1005 : Integer;
      NoFilter@1006 : ARRAY [2] OF Text[250];
      IsChecked@1003 : Boolean;
      IsHandled@1008 : Boolean;
    BEGIN
      IsChecked := FALSE;
      IsHandled := FALSE;
      OnBeforeCheckValuePosting(TableID,No,TempDimBuf,IsChecked,IsHandled);
      IF IsHandled THEN
        EXIT(IsChecked);

      DefaultDim.CHANGECOMPANY(ReceivingCompany); //**4PS.n
      DefaultDim.SETFILTER("Value Posting",'<>%1',DefaultDim."Value Posting"::" ");
      NoFilter[2] := '';
      FOR i := 1 TO ARRAYLEN(TableID) DO
        IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
          FOR j := 1 TO 2 DO BEGIN
            DefaultDim.SETRANGE("No.",NoFilter[j]);
            IF DefaultDim.FINDSET THEN BEGIN
              REPEAT
                TempDimBuf.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                CASE DefaultDim."Value Posting" OF
                  DefaultDim."Value Posting"::"Code Mandatory":
                    IF (NOT TempDimBuf.FINDFIRST) OR (TempDimBuf."Dimension Value Code" = '') THEN BEGIN
                      LogError(
                        DefaultDim.RECORDID,DefaultDim.FIELDNO("Value Posting"),GetMissedMandatoryDimErr(DefaultDim),'');
                      EXIT(FALSE);
                    END;
                  DefaultDim."Value Posting"::"Same Code":
                    IF DefaultDim."Dimension Value Code" <> '' THEN BEGIN
                      IF (NOT TempDimBuf.FINDFIRST) OR
                         (DefaultDim."Dimension Value Code" <> TempDimBuf."Dimension Value Code")
                      THEN BEGIN
                        LogError(
                          DefaultDim.RECORDID,DefaultDim.FIELDNO("Value Posting"),GetSameCodeWrongDimErr(DefaultDim),'');
                        EXIT(FALSE);
                      END
                    END ELSE
                      IF TempDimBuf.FINDFIRST THEN BEGIN
                        LogError(
                          DefaultDim.RECORDID,DefaultDim.FIELDNO("Value Posting"),GetSameCodeBlankDimErr(DefaultDim),'');
                        EXIT(FALSE);
                      END;
                  DefaultDim."Value Posting"::"No Code":
                    IF TempDimBuf.FINDFIRST THEN BEGIN
                      LogError(
                        DefaultDim.RECORDID,DefaultDim.FIELDNO("Value Posting"),GetNoCodeFilledDimErr(DefaultDim),'');
                      EXIT(FALSE);
                    END;
                END;
              UNTIL DefaultDim.NEXT = 0;
              TempDimBuf.RESET;
            END;
          END;
        END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetDimValuePostingErr@98() ErrorMessage : Text[250];
    BEGIN
      FindLastErrorMessage(ErrorMessage);
    END;

    [External]
    PROCEDURE DefaultDimObjectNoList@40(VAR TempAllObjWithCaption@1000 : TEMPORARY Record 2000000058);
    BEGIN
      DefaultDimObjectNoWithoutGlobalDimsList(TempAllObjWithCaption);
      DefaultDimObjectNoWithGlobalDimsList(TempAllObjWithCaption);
    END;

    [External]
    PROCEDURE DefaultDimObjectNoWithGlobalDimsList@48(VAR TempAllObjWithCaption@1000 : TEMPORARY Record 2000000058);
    VAR
      TempDimField@1002 : TEMPORARY Record 2000000041;
      TempDimSetIDField@1001 : TEMPORARY Record 2000000041;
    BEGIN
      TempDimField.SETFILTER(
        TableNo,'<>%1&<>%2&<>%3',
        DATABASE::"General Ledger Setup",DATABASE::"Job Task",DATABASE::"Change Global Dim. Header");
      TempDimField.SETFILTER(ObsoleteState,'<>%1',TempDimField.ObsoleteState::Removed);
      TempDimField.SETFILTER(FieldName,'*Global Dimension*');
      TempDimField.SETRANGE(Type,TempDimField.Type::Code);
      TempDimField.SETRANGE(Len,20);
      FillNormalFieldBuffer(TempDimField);
      TempDimSetIDField.SETRANGE(RelationTableNo,DATABASE::"Dimension Set Entry");
      FillNormalFieldBuffer(TempDimSetIDField);
      IF TempDimField.FINDSET THEN
        REPEAT
          TempDimSetIDField.SETRANGE(TableNo,TempDimField.TableNo);
          IF TempDimSetIDField.ISEMPTY THEN
            DefaultDimInsertTempObject(TempAllObjWithCaption,TempDimField.TableNo);
        UNTIL TempDimField.NEXT = 0;
      OnAfterSetupObjectNoList(TempAllObjWithCaption);
    END;

    LOCAL PROCEDURE DefaultDimObjectNoWithoutGlobalDimsList@50(VAR TempAllObjWithCaption@1000 : TEMPORARY Record 2000000058);
    BEGIN
      DefaultDimInsertTempObject(TempAllObjWithCaption,DATABASE::"IC Partner");
      DefaultDimInsertTempObject(TempAllObjWithCaption,DATABASE::"Service Order Type");
      DefaultDimInsertTempObject(TempAllObjWithCaption,DATABASE::"Service Item Group");
      DefaultDimInsertTempObject(TempAllObjWithCaption,DATABASE::"Service Item");
      DefaultDimInsertTempObject(TempAllObjWithCaption,DATABASE::"Service Contract Template");

      Add4PSTablesToObjectList(TempAllObjWithCaption); //**4PS.n
    END;

    LOCAL PROCEDURE DefaultDimInsertTempObject@51(VAR TempAllObjWithCaption@1001 : TEMPORARY Record 2000000058;TableID@1000 : Integer);
    BEGIN
      IF KeyContainsOneCodeField(TableID) OR IsDefaultDimTable(TableID) THEN
        InsertObject(TempAllObjWithCaption,TableID);
    END;

    LOCAL PROCEDURE IsDefaultDimTable@89(TableID@1000 : Integer) : Boolean;
    BEGIN
      // Local versions should add exceptions here
      EXIT(TableID = 0);
    END;

    LOCAL PROCEDURE KeyContainsOneCodeField@92(TableID@1000 : Integer) Result : Boolean;
    VAR
      FieldRef@1003 : FieldRef;
      KeyRef@1002 : KeyRef;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.OPEN(TableID);
      KeyRef := RecRef.KEYINDEX(1);
      FieldRef := KeyRef.FIELDINDEX(1);
      Result := (KeyRef.FIELDCOUNT = 1) AND (FORMAT(FieldRef.TYPE) = 'Code');
      RecRef.CLOSE;
    END;

    [External]
    PROCEDURE GlobalDimObjectNoList@49(VAR TempAllObjWithCaption@1000 : TEMPORARY Record 2000000058);
    VAR
      Field@1001 : Record 2000000041;
      TempDimField@1002 : TEMPORARY Record 2000000041;
      TempDimSetIDField@1003 : TEMPORARY Record 2000000041;
      LastTableNo@1004 : Integer;
    BEGIN
      TempDimSetIDField.SETRANGE(RelationTableNo,DATABASE::"Dimension Set Entry");
      FillNormalFieldBuffer(TempDimSetIDField);
      TempDimField.SETFILTER(FieldName,'*Global Dimension*|*Shortcut Dimension*|*Global Dim.*');
      TempDimField.SETFILTER(ObsoleteState,'<>%1',TempDimField.ObsoleteState::Removed);
      TempDimField.SETRANGE(Type,TempDimField.Type::Code);
      TempDimField.SETRANGE(Len,20);
      FillNormalFieldBuffer(TempDimField);
      TempDimField.RESET;
      IF TempDimSetIDField.FINDSET THEN
        REPEAT
          TempDimField.SETRANGE(TableNo,TempDimSetIDField.TableNo);
          IF NOT TempDimField.ISEMPTY THEN BEGIN
            InsertObject(TempAllObjWithCaption,TempDimSetIDField.TableNo);
            TempDimField.DELETEALL;
          END;
        UNTIL TempDimSetIDField.NEXT = 0;

      TempDimField.RESET;
      TempDimField.SETFILTER(ObsoleteState,'<>%1',TempDimField.ObsoleteState::Removed);
      TempDimField.SETFILTER(FieldName,'*Global Dim.*');
      IF TempDimField.FINDSET THEN
        REPEAT
          IF LastTableNo <> TempDimField.TableNo THEN BEGIN
            LastTableNo := TempDimField.TableNo;
            // Field No. 2 must relate to a table with Dim Set ID
            IF Field.GET(TempDimField.TableNo,2) THEN BEGIN
              TempDimSetIDField.SETRANGE(TableNo,Field.RelationTableNo);
              IF NOT TempDimSetIDField.ISEMPTY THEN
                InsertObject(TempAllObjWithCaption,TempDimField.TableNo);
            END;
          END;
        UNTIL TempDimField.NEXT = 0;

      Add4PSTablesToObjectList(TempAllObjWithCaption); //**4PS.n
    END;

    [External]
    PROCEDURE JobTaskDimObjectNoList@55(VAR TempAllObjWithCaption@1000 : TEMPORARY Record 2000000058);
    BEGIN
      // Table 11072600 "Job Task" is an exception
      // it has Table 11020400 "Job Task Dimension" that implements default dimension behavior
      InsertObject(TempAllObjWithCaption,DATABASE::"Job Task");
    END;

    [External]
    PROCEDURE FindDimFieldInTable@57(TableNo@1000 : Integer;FieldNameFilter@1001 : Text;VAR Field@1002 : Record 2000000041) : Boolean;
    BEGIN
      Field.SETRANGE(TableNo,TableNo);
      Field.SETFILTER(FieldName,'*' + FieldNameFilter + '*');
      Field.SETFILTER(ObsoleteState,'<>%1',Field.ObsoleteState::Removed);
      Field.SETRANGE(Class,Field.Class::Normal);
      Field.SETRANGE(Type,Field.Type::Code);
      Field.SETRANGE(Len,20);
      IF Field.FINDFIRST THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillNormalFieldBuffer@62(VAR TempField@1000 : Record 2000000041);
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.COPYFILTERS(TempField);
      Field.SETRANGE(Class,Field.Class::Normal);
      Field.SETFILTER(ObsoleteState,'<>%1',Field.ObsoleteState::Removed);
      IF Field.FINDSET THEN
        REPEAT
          TempField := Field;
          TempField.INSERT;
        UNTIL Field.NEXT = 0;
    END;

    [External]
    PROCEDURE GetDocDimConsistencyErr@56() ErrorMessage : Text[250];
    BEGIN
      FindLastErrorMessage(ErrorMessage);
    END;

    [External]
    PROCEDURE CheckDim@60(DimCode@1000 : Code[20]) : Boolean;
    VAR
      Dim@1001 : Record 348;
    BEGIN
      //**4PS.sn Call C018425
      IF ReceivingCompany = '' THEN
        Dim.CHANGECOMPANY(COMPANYNAME)
      ELSE
        Dim.CHANGECOMPANY(ReceivingCompany);
      //**4PS.en  Call C018425

      IF Dim.GET(DimCode) THEN BEGIN
        IF Dim.Blocked THEN BEGIN
          LogError(
            Dim.RECORDID,Dim.FIELDNO(Blocked),STRSUBSTNO(Text014,Dim.TABLECAPTION,DimCode),'');
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        LogError(
          DATABASE::Dimension,0,STRSUBSTNO(Text015,Dim.TABLECAPTION,DimCode),'');
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckDimValue@61(DimCode@1000 : Code[20];DimValCode@1001 : Code[20]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
    BEGIN
      IF (DimCode <> '') AND (DimValCode <> '') THEN
      //**4PS.sn
      BEGIN
        IF ReceivingCompany = '' THEN
          DimVal.CHANGECOMPANY(COMPANYNAME)
        ELSE
          DimVal.CHANGECOMPANY(ReceivingCompany);
      //**4PS.en
        IF DimVal.GET(DimCode,DimValCode) THEN BEGIN
          IF DimVal.Blocked THEN BEGIN
            LogError(
              DimVal.RECORDID,DimVal.FIELDNO(Blocked),
              STRSUBSTNO(DimValueBlockedErr,DimVal.TABLECAPTION,DimCode,DimValCode),'');
            EXIT(FALSE);
          END;
          IF NOT CheckDimValueAllowed(DimVal) THEN
            EXIT(FALSE);
        END ELSE BEGIN
          LogError(
            DATABASE::"Dimension Value",0,
          //STRSUBSTNO(DimValueMissingErr,DimVal.TABLECAPTION,DimCode),''); //**4PS.o
            STRSUBSTNO(DimValueMissingErr,DimVal.TABLECAPTION,DimCode,DimValCode),''); //**4PS.n
          EXIT(FALSE);
        END;
      END; //**4PS.n
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckDimValueAllowed@66(DimVal@1001 : Record 349) : Boolean;
    VAR
      DimValueAllowed@1000 : Boolean;
      DimErr@1002 : Text[250];
    BEGIN
      DimValueAllowed :=
        (DimVal."Dimension Value Type" IN [DimVal."Dimension Value Type"::Standard,DimVal."Dimension Value Type"::"Begin-Total"]);
      IF NOT DimValueAllowed THEN
        DimErr :=
          STRSUBSTNO(
            DimValueMustNotBeErr,DimVal.TABLECAPTION,DimVal."Dimension Code",DimVal.Code,FORMAT(DimVal."Dimension Value Type"))
      ELSE
        OnCheckDimValueAllowed(DimVal,DimValueAllowed,DimErr);

      IF NOT DimValueAllowed THEN
        LogError(DimVal.RECORDID,DimVal.FIELDNO("Dimension Value Type"),DimErr,'');
      EXIT(DimValueAllowed);
    END;

    PROCEDURE CheckDimValueCompany@1100409000(DimCode@1000 : Code[20];DimValCode@1001 : Code[20];ReceivingComp@1210190000 : Text[30]) : Boolean;
    BEGIN
      //**4PS
      SetCompany(ReceivingComp);
      EXIT(CheckDimValue(DimCode,DimValCode));
    END;

    LOCAL PROCEDURE CheckBlockedDimAndValues@6(DimSetID@1000 : Integer) : Boolean;
    VAR
      DimSetEntry@1001 : Record 480;
      LastErrorID@1002 : Integer;
    BEGIN
      IF DimSetID = 0 THEN
        EXIT(TRUE);
      LastErrorID := GetLastDimErrorID;
      DimSetEntry.CHANGECOMPANY(ReceivingCompany); //**4PS.n CALL T003997
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      IF DimSetEntry.FINDSET THEN
        REPEAT
          IF NOT CheckDim(DimSetEntry."Dimension Code") OR
             NOT CheckDimValue(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code")
          THEN
            IF NOT IsCollectErrorsMode THEN
              EXIT(FALSE);
        UNTIL DimSetEntry.NEXT = 0;
      EXIT(GetLastDimErrorID = LastErrorID);
    END;

    [External]
    PROCEDURE GetDimErr@71() ErrorMessage : Text[250];
    BEGIN
      FindLastErrorMessage(ErrorMessage);
    END;

    LOCAL PROCEDURE LogError@24(SourceRecVariant@1000 : Variant;SourceFieldNo@1003 : Integer;Message@1001 : Text;SupportURL@1002 : Code[20]) IsLogged : Boolean;
    BEGIN
      IF ErrorMessageMgt.IsActive THEN BEGIN
        ErrorMessageMgt.LogContextFieldError(0,Message,SourceRecVariant,SourceFieldNo,SupportURL);
        IsLogged := TRUE;
      END ELSE BEGIN
        LastErrorMessage.INIT;
        LastErrorMessage.ID += 1;
        LastErrorMessage.Description := COPYSTR(Message,1,MAXSTRLEN(LastErrorMessage.Description));
        IsLogged := FALSE;
      END;
    END;

    [External]
    PROCEDURE LookupDimValueCodeNoUpdate@20(FieldNumber@1000 : Integer);
    VAR
      DimVal@1001 : Record 349;
      GLSetup@1002 : Record 98;
    BEGIN
      OnBeforeLookupDimValueCodeNoUpdate(FieldNumber);

      GetGLSetup;
      IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN;
    END;

    [External]
    PROCEDURE CopyJnlLineDimToICJnlDim@93(TableID@1000 : Integer;TransactionNo@1001 : Integer;PartnerCode@1002 : Code[20];TransactionSource@1008 : Option;LineNo@1003 : Integer;DimSetID@1004 : Integer);
    VAR
      InOutBoxJnlLineDim@1005 : Record 423;
      DimSetEntry@1009 : Record 480;
      ICDim@1006 : Code[20];
      ICDimValue@1007 : Code[20];
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      IF DimSetEntry.FINDSET THEN
        REPEAT
          ICDim := ConvertDimtoICDim(DimSetEntry."Dimension Code");
          ICDimValue := ConvertDimValuetoICDimVal(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
          IF (ICDim <> '') AND (ICDimValue <> '') THEN BEGIN
            InOutBoxJnlLineDim.INIT;
            InOutBoxJnlLineDim."Table ID" := TableID;
            InOutBoxJnlLineDim."IC Partner Code" := PartnerCode;
            InOutBoxJnlLineDim."Transaction No." := TransactionNo;
            InOutBoxJnlLineDim."Transaction Source" := TransactionSource;
            InOutBoxJnlLineDim."Line No." := LineNo;
            InOutBoxJnlLineDim."Dimension Code" := ICDim;
            InOutBoxJnlLineDim."Dimension Value Code" := ICDimValue;
            InOutBoxJnlLineDim.INSERT;
          END;
        UNTIL DimSetEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DefaultDimOnInsert@17(DefaultDimension@1000 : Record 352);
    VAR
      CallingTrigger@1001 : 'OnInsert,OnModify,OnDelete';
    BEGIN
      IF DefaultDimension."Table ID" = DATABASE::Job THEN
        UpdateJobTaskDim(DefaultDimension,FALSE);

      UpdateCostType(DefaultDimension,CallingTrigger::OnInsert);
    END;

    [External]
    PROCEDURE DefaultDimOnModify@18(DefaultDimension@1000 : Record 352);
    VAR
      CallingTrigger@1001 : 'OnInsert,OnModify,OnDelete';
    BEGIN
      IF DefaultDimension."Table ID" = DATABASE::Job THEN
        UpdateJobTaskDim(DefaultDimension,FALSE);

      UpdateCostType(DefaultDimension,CallingTrigger::OnModify);
    END;

    [External]
    PROCEDURE DefaultDimOnDelete@19(DefaultDimension@1000 : Record 352);
    VAR
      CallingTrigger@1001 : 'OnInsert,OnModify,OnDelete';
    BEGIN
      IF DefaultDimension."Table ID" = DATABASE::Job THEN
        UpdateJobTaskDim(DefaultDimension,TRUE);

      UpdateCostType(DefaultDimension,CallingTrigger::OnDelete);
    END;

    [External]
    PROCEDURE CopyICJnlDimToICJnlDim@97(VAR FromInOutBoxLineDim@1001 : Record 423;VAR ToInOutBoxlineDim@1000 : Record 423);
    BEGIN
      IF FromInOutBoxLineDim.FINDSET THEN
        REPEAT
          ToInOutBoxlineDim := FromInOutBoxLineDim;
          ToInOutBoxlineDim.INSERT;
        UNTIL FromInOutBoxLineDim.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyDocDimtoICDocDim@107(TableID@1005 : Integer;TransactionNo@1004 : Integer;PartnerCode@1003 : Code[20];TransactionSource@1002 : Option;LineNo@1001 : Integer;DimSetEntryID@1000 : Integer);
    VAR
      InOutBoxDocDim@1008 : Record 442;
      DimSetEntry@1009 : Record 480;
      ICDim@1007 : Code[20];
      ICDimValue@1006 : Code[20];
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetEntryID);
      IF DimSetEntry.FINDSET THEN
        REPEAT
          ICDim := ConvertDimtoICDim(DimSetEntry."Dimension Code");
          ICDimValue := ConvertDimValuetoICDimVal(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
          IF (ICDim <> '') AND (ICDimValue <> '') THEN BEGIN
            InOutBoxDocDim.INIT;
            InOutBoxDocDim."Table ID" := TableID;
            InOutBoxDocDim."IC Partner Code" := PartnerCode;
            InOutBoxDocDim."Transaction No." := TransactionNo;
            InOutBoxDocDim."Transaction Source" := TransactionSource;
            InOutBoxDocDim."Line No." := LineNo;
            InOutBoxDocDim."Dimension Code" := ICDim;
            InOutBoxDocDim."Dimension Value Code" := ICDimValue;
            InOutBoxDocDim.INSERT;
          END;
        UNTIL DimSetEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyICDocDimtoICDocDim@108(FromSourceICDocDim@1003 : Record 442;VAR ToSourceICDocDim@1002 : Record 442;ToTableID@1001 : Integer;ToTransactionSource@1000 : Integer);
    BEGIN
      WITH FromSourceICDocDim DO BEGIN
        SetICDocDimFilters(FromSourceICDocDim,"Table ID","Transaction No.","IC Partner Code","Transaction Source","Line No.");
        IF FINDSET THEN
          REPEAT
            ToSourceICDocDim := FromSourceICDocDim;
            ToSourceICDocDim."Table ID" := ToTableID;
            ToSourceICDocDim."Transaction Source" := ToTransactionSource;
            ToSourceICDocDim.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE MoveICDocDimtoICDocDim@112(FromSourceICDocDim@1003 : Record 442;VAR ToSourceICDocDim@1002 : Record 442;ToTableID@1001 : Integer;ToTransactionSource@1000 : Integer);
    BEGIN
      WITH FromSourceICDocDim DO BEGIN
        SetICDocDimFilters(FromSourceICDocDim,"Table ID","Transaction No.","IC Partner Code","Transaction Source","Line No.");
        IF FINDSET THEN
          REPEAT
            ToSourceICDocDim := FromSourceICDocDim;
            ToSourceICDocDim."Table ID" := ToTableID;
            ToSourceICDocDim."Transaction Source" := ToTransactionSource;
            ToSourceICDocDim.INSERT;
            DELETE;
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE SetICDocDimFilters@110(VAR ICDocDim@1000 : Record 442;TableID@1001 : Integer;TransactionNo@1002 : Integer;PartnerCode@1003 : Code[20];TransactionSource@1004 : Integer;LineNo@1005 : Integer);
    BEGIN
      ICDocDim.RESET;
      ICDocDim.SETRANGE("Table ID",TableID);
      ICDocDim.SETRANGE("Transaction No.",TransactionNo);
      ICDocDim.SETRANGE("IC Partner Code",PartnerCode);
      ICDocDim.SETRANGE("Transaction Source",TransactionSource);
      ICDocDim.SETRANGE("Line No.",LineNo);
    END;

    [External]
    PROCEDURE DeleteICDocDim@109(TableID@1000 : Integer;ICTransactionNo@1001 : Integer;ICPartnerCode@1002 : Code[20];TransactionSource@1003 : Option;LineNo@1005 : Integer);
    VAR
      ICDocDim@1004 : Record 442;
    BEGIN
      SetICDocDimFilters(ICDocDim,TableID,ICTransactionNo,ICPartnerCode,TransactionSource,LineNo);
      IF NOT ICDocDim.ISEMPTY THEN
        ICDocDim.DELETEALL;
    END;

    [External]
    PROCEDURE DeleteICJnlDim@116(TableID@1000 : Integer;ICTransactionNo@1001 : Integer;ICPartnerCode@1002 : Code[20];TransactionSource@1003 : Option;LineNo@1005 : Integer);
    VAR
      ICJnlDim@1004 : Record 423;
    BEGIN
      ICJnlDim.SETRANGE("Table ID",TableID);
      ICJnlDim.SETRANGE("Transaction No.",ICTransactionNo);
      ICJnlDim.SETRANGE("IC Partner Code",ICPartnerCode);
      ICJnlDim.SETRANGE("Transaction Source",TransactionSource);
      ICJnlDim.SETRANGE("Line No.",LineNo);
      IF NOT ICJnlDim.ISEMPTY THEN
        ICJnlDim.DELETEALL;
    END;

    LOCAL PROCEDURE ConvertICDimtoDim@99(FromICDimCode@1000 : Code[20]) DimCode : Code[20];
    VAR
      ICDim@1002 : Record 411;
    BEGIN
      IF ICDim.GET(FromICDimCode) THEN
        DimCode := ICDim."Map-to Dimension Code";

      OnAfterConvertICDimtoDim(FromICDimCode,DimCode);
    END;

    LOCAL PROCEDURE ConvertICDimValuetoDimValue@100(FromICDimCode@1000 : Code[20];FromICDimValue@1001 : Code[20]) DimValueCode : Code[20];
    VAR
      ICDimValue@1002 : Record 412;
    BEGIN
      IF ICDimValue.GET(FromICDimCode,FromICDimValue) THEN
        DimValueCode := ICDimValue."Map-to Dimension Value Code";

      OnAfterConvertICDimValuetoDimValue(FromICDimCode,FromICDimValue,DimValueCode);
    END;

    [External]
    PROCEDURE ConvertDimtoICDim@102(FromDim@1001 : Code[20]) ICDimCode : Code[20];
    VAR
      Dim@1000 : Record 348;
    BEGIN
      IF Dim.GET(FromDim) THEN
        ICDimCode := Dim."Map-to IC Dimension Code";

      OnAfterConvertDimtoICDim(FromDim,ICDimCode);
    END;

    [External]
    PROCEDURE ConvertDimValuetoICDimVal@103(FromDim@1000 : Code[20];FromDimValue@1001 : Code[20]) ICDimValueCode : Code[20];
    VAR
      DimValue@1002 : Record 349;
    BEGIN
      IF DimValue.GET(FromDim,FromDimValue) THEN
        ICDimValueCode := DimValue."Map-to IC Dimension Value Code";

      OnAfterConvertDimValuetoICDimVal(FromDim,FromDimValue,ICDimValueCode);
    END;

    [External]
    PROCEDURE CheckICDimValue@113(ICDimCode@1001 : Code[20];ICDimValCode@1000 : Code[20]) : Boolean;
    VAR
      ICDimVal@1002 : Record 412;
      IsHandled@1004 : Boolean;
      Result@1003 : Boolean;
    BEGIN
      Result := FALSE;
      IsHandled := FALSE;
      OnBeforeCheckICDimValue(ICDimCode,ICDimValCode,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      IF (ICDimCode <> '') AND (ICDimValCode <> '') THEN
        IF ICDimVal.GET(ICDimCode,ICDimValCode) THEN BEGIN
          IF ICDimVal.Blocked THEN BEGIN
            LogError(
              ICDimVal.RECORDID,ICDimVal.FIELDNO(Blocked),
              STRSUBSTNO(DimValueBlockedErr,ICDimVal.TABLECAPTION,ICDimCode,ICDimValCode),'');
            EXIT(FALSE);
          END;
          IF NOT CheckICDimValueAllowed(ICDimVal) THEN BEGIN
            LogError(
              ICDimVal.RECORDID,ICDimVal.FIELDNO("Dimension Value Type"),
              STRSUBSTNO(
                DimValueMustNotBeErr,ICDimVal.TABLECAPTION,ICDimCode,ICDimValCode,
                FORMAT(ICDimVal."Dimension Value Type")),
              '');
            EXIT(FALSE);
          END;
        END ELSE BEGIN
          LogError(
            DATABASE::"IC Dimension Value",0,
          //STRSUBSTNO(DimValueMissingErr,ICDimVal.TABLECAPTION,ICDimCode),''); //**4PS.o
            STRSUBSTNO(DimValueMissingErr,ICDimVal.TABLECAPTION,ICDimCode,ICDimValCode),''); //**4PS.n
          EXIT(FALSE);
        END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckICDimValueAllowed@74(ICDimVal@1000 : Record 412) : Boolean;
    VAR
      DimValueAllowed@1001 : Boolean;
    BEGIN
      DimValueAllowed :=
        ICDimVal."Dimension Value Type" IN [ICDimVal."Dimension Value Type"::Standard,ICDimVal."Dimension Value Type"::"Begin-Total"];

      OnCheckICDimValueAllowed(ICDimVal,DimValueAllowed);

      EXIT(DimValueAllowed);
    END;

    [External]
    PROCEDURE CheckICDim@114(ICDimCode@1000 : Code[20]) : Boolean;
    VAR
      ICDim@1001 : Record 411;
      IsHandled@1002 : Boolean;
      Result@1003 : Boolean;
    BEGIN
      Result := FALSE;
      IsHandled := FALSE;
      OnBeforeCheckICDim(ICDimCode,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      IF ICDim.GET(ICDimCode) THEN BEGIN
        IF ICDim.Blocked THEN BEGIN
          LogError(
            ICDim.RECORDID,ICDim.FIELDNO(Blocked),STRSUBSTNO(Text014,ICDim.TABLECAPTION,ICDimCode),'');
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        LogError(
          DATABASE::"IC Dimension",0,STRSUBSTNO(Text015,ICDim.TABLECAPTION,ICDimCode),'');
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE SaveJobTaskDim@39(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];FieldNumber@1003 : Integer;ShortcutDimCode@1002 : Code[20]);
    VAR
      JobTaskDim@1004 : Record 11020400;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF JobTaskDim.GET(JobNo,JobTaskNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          JobTaskDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JobTaskDim.MODIFY;
        END ELSE BEGIN
          JobTaskDim.INIT;
          JobTaskDim.VALIDATE("Job No.",JobNo);
          JobTaskDim.VALIDATE("Job Task No.",JobTaskNo);
          JobTaskDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          JobTaskDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JobTaskDim.INSERT;
        END;
      END ELSE
        IF JobTaskDim.GET(JobNo,JobTaskNo,GLSetupShortcutDimCode[FieldNumber]) THEN
          JobTaskDim.DELETE;
    END;

    [External]
    PROCEDURE SaveJobTaskTempDim@46(FieldNumber@1001 : Integer;ShortcutDimCode@1000 : Code[20]);
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF TempJobTaskDimBuffer.GET('','',GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          TempJobTaskDimBuffer."Dimension Value Code" := ShortcutDimCode;
          TempJobTaskDimBuffer.MODIFY;
        END ELSE BEGIN
          TempJobTaskDimBuffer.INIT;
          TempJobTaskDimBuffer."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
          TempJobTaskDimBuffer."Dimension Value Code" := ShortcutDimCode;
          TempJobTaskDimBuffer.INSERT;
        END;
      END ELSE
        IF TempJobTaskDimBuffer.GET('','',GLSetupShortcutDimCode[FieldNumber]) THEN
          TempJobTaskDimBuffer.DELETE;
    END;

    [External]
    PROCEDURE InsertJobTaskDim@54(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1004 : Code[20]);
    VAR
      DefaultDim@1002 : Record 352;
      JobTaskDim@1003 : Record 11020400;
    BEGIN
      GetGLSetup;
      DefaultDim.SETRANGE("Table ID",DATABASE::Job);
      DefaultDim.SETRANGE("No.",JobNo);
      IF DefaultDim.FINDSET(FALSE,FALSE) THEN
        REPEAT
          IF DefaultDim."Dimension Value Code" <> '' THEN BEGIN
            JobTaskDim.INIT;
            JobTaskDim."Job No." := JobNo;
            JobTaskDim."Job Task No." := JobTaskNo;
            JobTaskDim."Dimension Code" := DefaultDim."Dimension Code";
            JobTaskDim."Dimension Value Code" := DefaultDim."Dimension Value Code";
            JobTaskDim.INSERT;
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
              GlobalDim1Code := JobTaskDim."Dimension Value Code";
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
              GlobalDim2Code := JobTaskDim."Dimension Value Code";
          END;
        UNTIL DefaultDim.NEXT = 0;

      TempJobTaskDimBuffer.RESET;
      IF TempJobTaskDimBuffer.FINDSET THEN
        REPEAT
          IF NOT JobTaskDim.GET(JobNo,JobTaskNo,TempJobTaskDimBuffer."Dimension Code") THEN BEGIN
            JobTaskDim.INIT;
            JobTaskDim."Job No." := JobNo;
            JobTaskDim."Job Task No." := JobTaskNo;
            JobTaskDim."Dimension Code" := TempJobTaskDimBuffer."Dimension Code";
            JobTaskDim."Dimension Value Code" := TempJobTaskDimBuffer."Dimension Value Code";
            JobTaskDim.INSERT;
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
              GlobalDim1Code := JobTaskDim."Dimension Value Code";
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
              GlobalDim2Code := JobTaskDim."Dimension Value Code";
          END;
        UNTIL TempJobTaskDimBuffer.NEXT = 0;
      TempJobTaskDimBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateJobTaskDim@15(DefaultDimension@1000 : Record 352;FromOnDelete@1003 : Boolean);
    VAR
      JobTaskDimension@1001 : Record 11020400;
      JobTask@1002 : Record 11072600;
      ConfirmManagement@1004 : Codeunit 27;
    BEGIN
      IF DefaultDimension."Table ID" <> DATABASE::Job THEN
        EXIT;

      JobTask.SETRANGE("Job No.",DefaultDimension."No.");
      IF JobTask.ISEMPTY THEN
        EXIT;

      IF NOT ConfirmManagement.ConfirmProcess(Text019,TRUE) THEN
        EXIT;

      JobTaskDimension.SETRANGE("Job No.",DefaultDimension."No.");
      JobTaskDimension.SETRANGE("Dimension Code",DefaultDimension."Dimension Code");
      JobTaskDimension.DELETEALL(TRUE);

      IF FromOnDelete OR
         (DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"No Code") OR
         (DefaultDimension."Dimension Value Code" = '')
      THEN
        EXIT;

      IF JobTask.FINDSET THEN
        REPEAT
          CLEAR(JobTaskDimension);
          JobTaskDimension."Job No." := JobTask."Job No.";
          JobTaskDimension."Job Task No." := JobTask."Job Task No.";
          JobTaskDimension."Dimension Code" := DefaultDimension."Dimension Code";
          JobTaskDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
          JobTaskDimension.INSERT(TRUE);
        UNTIL JobTask.NEXT = 0;
    END;

    [External]
    PROCEDURE DeleteJobTaskTempDim@76();
    BEGIN
      TempJobTaskDimBuffer.RESET;
      TempJobTaskDimBuffer.DELETEALL;
    END;

    [External]
    PROCEDURE CopyJobTaskDimToJobTaskDim@77(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];NewJobNo@1002 : Code[20];NewJobTaskNo@1003 : Code[20]);
    VAR
      JobTaskDimension@1004 : Record 11020400;
      JobTaskDimension2@1005 : Record 11020400;
    BEGIN
      JobTaskDimension.RESET;
      JobTaskDimension.SETRANGE("Job No.",JobNo);
      JobTaskDimension.SETRANGE("Job Task No.",JobTaskNo);
      IF JobTaskDimension.FINDSET THEN
        REPEAT
          IF NOT JobTaskDimension2.GET(NewJobNo,NewJobTaskNo,JobTaskDimension."Dimension Code") THEN BEGIN
            JobTaskDimension2.INIT;
            JobTaskDimension2."Job No." := NewJobNo;
            JobTaskDimension2."Job Task No." := NewJobTaskNo;
            JobTaskDimension2."Dimension Code" := JobTaskDimension."Dimension Code";
            JobTaskDimension2."Dimension Value Code" := JobTaskDimension."Dimension Value Code";
            JobTaskDimension2.INSERT(TRUE);
          END ELSE BEGIN
            JobTaskDimension2."Dimension Value Code" := JobTaskDimension."Dimension Value Code";
            JobTaskDimension2.MODIFY(TRUE);
          END;
        UNTIL JobTaskDimension.NEXT = 0;

      JobTaskDimension2.RESET;
      JobTaskDimension2.SETRANGE("Job No.",NewJobNo);
      JobTaskDimension2.SETRANGE("Job Task No.",NewJobTaskNo);
      IF JobTaskDimension2.FINDSET THEN
        REPEAT
          IF NOT JobTaskDimension.GET(JobNo,JobTaskNo,JobTaskDimension2."Dimension Code") THEN
            JobTaskDimension2.DELETE(TRUE);
        UNTIL JobTaskDimension2.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckDimIDConsistency@10(VAR DimSetEntry@1000 : Record 480;VAR PostedDimSetEntry@1001 : Record 480;DocTableID@1002 : Integer;PostedDocTableID@1003 : Integer) : Boolean;
    VAR
      ObjectTranslation@1004 : Record 377;
    BEGIN
      IF DimSetEntry.FINDSET THEN;
      IF PostedDimSetEntry.FINDSET THEN;
      REPEAT
        CASE TRUE OF
          DimSetEntry."Dimension Code" > PostedDimSetEntry."Dimension Code":
            BEGIN
              LogError(
                DimSetEntry.RECORDID,0,
                STRSUBSTNO(
                  Text012,
                  DimSetEntry.FIELDCAPTION("Dimension Code"),
                  ObjectTranslation.TranslateTable(DocTableID),
                  ObjectTranslation.TranslateTable(PostedDocTableID)),
                '');
              EXIT(FALSE);
            END;
          DimSetEntry."Dimension Code" < PostedDimSetEntry."Dimension Code":
            BEGIN
              LogError(
                DimSetEntry.RECORDID,0,
                STRSUBSTNO(
                  Text012,
                  PostedDimSetEntry.FIELDCAPTION("Dimension Code"),
                  ObjectTranslation.TranslateTable(PostedDocTableID),
                  ObjectTranslation.TranslateTable(DocTableID))
                ,'');
              EXIT(FALSE);
            END;
          DimSetEntry."Dimension Code" = PostedDimSetEntry."Dimension Code":
            IF DimSetEntry."Dimension Value Code" <> PostedDimSetEntry."Dimension Value Code" THEN BEGIN
              LogError(
                DimSetEntry.RECORDID,0,
                STRSUBSTNO(
                  Text013,
                  DimSetEntry.FIELDCAPTION("Dimension Value Code"),
                  DimSetEntry.FIELDCAPTION("Dimension Code"),
                  DimSetEntry."Dimension Code",
                  ObjectTranslation.TranslateTable(DocTableID),
                  ObjectTranslation.TranslateTable(PostedDocTableID)),
                '');
              EXIT(FALSE);
            END;
        END;
      UNTIL (DimSetEntry.NEXT = 0) AND (PostedDimSetEntry.NEXT = 0);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateDimSetEntryFromDimValue@4(DimValue@1000 : Record 349;VAR TempDimSetEntry@1001 : TEMPORARY Record 480);
    BEGIN
      TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
      TempDimSetEntry."Dimension Value Code" := DimValue.Code;
      TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
      TempDimSetEntry.INSERT;
    END;

    [External]
    PROCEDURE CreateDimSetIDFromICDocDim@5(VAR ICDocDim@1000 : Record 442) : Integer;
    VAR
      DimValue@1004 : Record 349;
      TempDimSetEntry@1003 : TEMPORARY Record 480;
    BEGIN
      IF ICDocDim.FIND('-') THEN
        REPEAT
          DimValue.GET(
            ConvertICDimtoDim(ICDocDim."Dimension Code"),
            ConvertICDimValuetoDimValue(ICDocDim."Dimension Code",ICDocDim."Dimension Value Code"));
          CreateDimSetEntryFromDimValue(DimValue,TempDimSetEntry);
        UNTIL ICDocDim.NEXT = 0;
      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE CreateDimSetIDFromICJnlLineDim@7(VAR ICInboxOutboxJnlLineDim@1000 : Record 423) : Integer;
    VAR
      DimValue@1001 : Record 349;
      TempDimSetEntry@1002 : TEMPORARY Record 480;
    BEGIN
      IF ICInboxOutboxJnlLineDim.FIND('-') THEN
        REPEAT
          DimValue.GET(
            ConvertICDimtoDim(ICInboxOutboxJnlLineDim."Dimension Code"),
            ConvertICDimValuetoDimValue(
              ICInboxOutboxJnlLineDim."Dimension Code",ICInboxOutboxJnlLineDim."Dimension Value Code"));
          CreateDimSetEntryFromDimValue(DimValue,TempDimSetEntry);
        UNTIL ICInboxOutboxJnlLineDim.NEXT = 0;
      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE CopyDimBufToDimSetEntry@65(VAR FromDimBuf@1000 : Record 360;VAR DimSetEntry@1001 : Record 480);
    VAR
      DimValue@1005 : Record 349;
    BEGIN
      WITH FromDimBuf DO
        IF FINDSET THEN
          REPEAT
            DimValue.GET("Dimension Code","Dimension Value Code");
            DimSetEntry."Dimension Code" := "Dimension Code";
            DimSetEntry."Dimension Value Code" := "Dimension Value Code";
            DimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
            DimSetEntry.INSERT;
          UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE CreateDimSetIDFromDimBuf@12(VAR DimBuf@1000 : Record 360) : Integer;
    VAR
      DimValue@1001 : Record 349;
      TempDimSetEntry@1002 : TEMPORARY Record 480;
    BEGIN
      IF DimBuf.FINDSET THEN
        REPEAT
          DimValue.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
          CreateDimSetEntryFromDimValue(DimValue,TempDimSetEntry);
        UNTIL DimBuf.NEXT = 0;
      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE CreateDimForPurchLineWithHigherPriorities@79(PurchaseLine@1008 : Record 39;CurrFieldNo@1005 : Integer;VAR DimensionSetID@1001 : Integer;VAR DimValue1@1003 : Code[20];VAR DimValue2@1002 : Code[20];SourceCode@1004 : Code[10];PriorityTableID@1000 : Integer);
    VAR
      TableID@1006 : ARRAY [10] OF Integer;
      No@1007 : ARRAY [10] OF Code[20];
      HighPriorityTableID@1010 : ARRAY [10] OF Integer;
      HighPriorityNo@1009 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := DATABASE::Job;
      TableID[2] := TypeToTableID3(PurchaseLine.Type);
      No[1] := PurchaseLine."Job No.";
      No[2] := PurchaseLine."No.";

      OnBeforeGetTableIDsForHigherPriorities(DATABASE::"Purchase Line",PurchaseLine,CurrFieldNo,TableID,No);
      IF GetTableIDsForHigherPriorities(
           TableID,No,HighPriorityTableID,HighPriorityNo,SourceCode,PriorityTableID)
      THEN
        DimensionSetID :=
          GetRecDefaultDimID(
            PurchaseLine,CurrFieldNo,HighPriorityTableID,HighPriorityNo,SourceCode,DimValue1,DimValue2,0,0);
    END;

    [External]
    PROCEDURE CreateDimForSalesLineWithHigherPriorities@80(SalesLine@1008 : Record 37;CurrFieldNo@1005 : Integer;VAR DimensionSetID@1001 : Integer;VAR DimValue1@1003 : Code[20];VAR DimValue2@1002 : Code[20];SourceCode@1004 : Code[10];PriorityTableID@1000 : Integer);
    VAR
      TableID@1006 : ARRAY [10] OF Integer;
      No@1007 : ARRAY [10] OF Code[20];
      HighPriorityTableID@1010 : ARRAY [10] OF Integer;
      HighPriorityNo@1009 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := DATABASE::Job;
      TableID[2] := TypeToTableID3(SalesLine.Type);
      No[1] := SalesLine."Job No.";
      No[2] := SalesLine."No.";

      OnBeforeGetTableIDsForHigherPriorities(DATABASE::"Sales Line",SalesLine,CurrFieldNo,TableID,No);
      IF GetTableIDsForHigherPriorities(
           TableID,No,HighPriorityTableID,HighPriorityNo,SourceCode,PriorityTableID)
      THEN
        DimensionSetID :=
          GetRecDefaultDimID(
            SalesLine,CurrFieldNo,HighPriorityTableID,HighPriorityNo,SourceCode,DimValue1,DimValue2,0,0);
    END;

    [External]
    PROCEDURE CreateDimForJobJournalLineWithHigherPriorities@73(JobJournalLine@1008 : Record 11072008;CurrFieldNo@1005 : Integer;VAR DimensionSetID@1001 : Integer;VAR DimValue1@1004 : Code[20];VAR DimValue2@1003 : Code[20];SourceCode@1002 : Code[10];PriorityTableID@1000 : Integer);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1009 : ARRAY [10] OF Code[20];
      HighPriorityTableID@1007 : ARRAY [10] OF Integer;
      HighPriorityNo@1006 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := DATABASE::Job;
      TableID[2] := TypeToTableID2(JobJournalLine.Type);
      TableID[3] := DATABASE::"Resource Group";
      No[1] := JobJournalLine."Job No.";
      No[2] := JobJournalLine."No.";
      No[3] := JobJournalLine."Resource Group No.";

      OnBeforeGetTableIDsForHigherPriorities(DATABASE::"Job Journal Line",JobJournalLine,CurrFieldNo,TableID,No);
      IF GetTableIDsForHigherPriorities(
           TableID,No,HighPriorityTableID,HighPriorityNo,SourceCode,PriorityTableID)
      THEN
        DimensionSetID :=
          GetRecDefaultDimID(
            JobJournalLine,CurrFieldNo,HighPriorityTableID,HighPriorityNo,SourceCode,DimValue1,DimValue2,0,0);
    END;

    LOCAL PROCEDURE GetTableIDsForHigherPriorities@78(TableID@1005 : ARRAY [10] OF Integer;No@1009 : ARRAY [10] OF Code[20];VAR HighPriorityTableID@1000 : ARRAY [10] OF Integer;VAR HighPriorityNo@1001 : ARRAY [10] OF Code[20];SourceCode@1003 : Code[10];PriorityTableID@1002 : Integer) Result : Boolean;
    VAR
      DefaultDimensionPriority@1008 : Record 354;
      InitialPriority@1007 : Integer;
      i@1004 : Integer;
      j@1006 : Integer;
    BEGIN
      CLEAR(HighPriorityTableID);
      CLEAR(HighPriorityNo);
      IF DefaultDimensionPriority.GET(SourceCode,PriorityTableID) THEN
        InitialPriority := DefaultDimensionPriority.Priority;
      DefaultDimensionPriority.SETRANGE("Source Code",SourceCode);
      DefaultDimensionPriority.SETFILTER(Priority,'<=%1',InitialPriority);
      i := 1;
      FOR j := 1 TO ARRAYLEN(TableID) DO BEGIN
        IF TableID[j] = 0 THEN
          BREAK;
        DefaultDimensionPriority.Priority := 0;
        DefaultDimensionPriority.SETRANGE("Table ID",TableID[j]);
        IF ((InitialPriority = 0) OR DefaultDimensionPriority.FINDFIRST) AND
           ((DefaultDimensionPriority.Priority < InitialPriority) OR
            ((DefaultDimensionPriority.Priority = InitialPriority) AND (TableID[j] < PriorityTableID)))
        THEN BEGIN
          Result := TRUE;
          HighPriorityTableID[i] := TableID[j];
          HighPriorityNo[i] := No[j];
          i += 1;
        END;
      END;
      EXIT(Result);
    END;

    [External]
    PROCEDURE GetDimSetIDsForFilter@23(DimCode@1000 : Code[20];DimValueFilter@1001 : Text);
    VAR
      DimSetEntry@1002 : Record 480;
    BEGIN
      DimSetEntry.SETCURRENTKEY("Dimension Code","Dimension Value Code","Dimension Set ID");
      DimSetEntry.SETFILTER("Dimension Code",'%1',DimCode);
      DimSetEntry.SETFILTER("Dimension Value Code",DimValueFilter);
      IF DimSetEntry.FINDSET THEN
        REPEAT
          AddDimSetIDtoTempEntry(TempDimSetEntryBuffer,DimSetEntry."Dimension Set ID");
        UNTIL DimSetEntry.NEXT = 0;
      IF FilterIncludesBlank(DimCode,DimValueFilter) THEN
        GetDimSetIDsForBlank(DimCode);
      DimSetFilterCtr += 1;
    END;

    LOCAL PROCEDURE GetDimSetIDsForBlank@27(DimCode@1000 : Code[20]);
    VAR
      TempDimSetEntry@1001 : TEMPORARY Record 480;
      DimSetEntry@1002 : Record 480;
      PrevDimSetID@1004 : Integer;
      i@1003 : Integer;
    BEGIN
      AddDimSetIDtoTempEntry(TempDimSetEntry,0);
      FOR i := 1 TO 2 DO BEGIN
        IF i = 2 THEN
          DimSetEntry.SETFILTER("Dimension Code",'%1',DimCode);
        IF DimSetEntry.FINDSET THEN BEGIN
          PrevDimSetID := 0;
          REPEAT
            IF DimSetEntry."Dimension Set ID" <> PrevDimSetID THEN BEGIN
              AddDimSetIDtoTempEntry(TempDimSetEntry,DimSetEntry."Dimension Set ID");
              PrevDimSetID := DimSetEntry."Dimension Set ID";
            END;
          UNTIL DimSetEntry.NEXT = 0;
        END;
      END;
      TempDimSetEntry.SETFILTER("Dimension Value ID",'%1',1);
      IF TempDimSetEntry.FINDSET THEN
        REPEAT
          AddDimSetIDtoTempEntry(TempDimSetEntryBuffer,TempDimSetEntry."Dimension Set ID");
        UNTIL TempDimSetEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE GetDimSetFilter@43() DimSetFilter : Text;
    BEGIN
      TempDimSetEntryBuffer.SETFILTER("Dimension Value ID",'%1',DimSetFilterCtr);
      IF TempDimSetEntryBuffer.FINDSET THEN BEGIN
        DimSetFilter := FORMAT(TempDimSetEntryBuffer."Dimension Set ID");
        IF TempDimSetEntryBuffer.NEXT <> 0 THEN
          REPEAT
            DimSetFilter += '|' + FORMAT(TempDimSetEntryBuffer."Dimension Set ID");
          UNTIL TempDimSetEntryBuffer.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FilterIncludesBlank@25(DimCode@1001 : Code[20];DimValueFilter@1000 : Text) : Boolean;
    VAR
      TempDimSetEntry@1002 : TEMPORARY Record 480;
    BEGIN
      TempDimSetEntry."Dimension Code" := DimCode;
      TempDimSetEntry.INSERT;
      TempDimSetEntry.SETFILTER("Dimension Value Code",DimValueFilter);
      EXIT(NOT TempDimSetEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE AddDimSetIDtoTempEntry@30(VAR TempDimSetEntry@1001 : TEMPORARY Record 480;DimSetID@1000 : Integer);
    BEGIN
      IF TempDimSetEntry.GET(DimSetID,'') THEN BEGIN
        TempDimSetEntry."Dimension Value ID" += 1;
        TempDimSetEntry.MODIFY;
      END ELSE BEGIN
        TempDimSetEntry."Dimension Set ID" := DimSetID;
        TempDimSetEntry."Dimension Value ID" := 1;
        TempDimSetEntry.INSERT
      END;
    END;

    [External]
    PROCEDURE ClearDimSetFilter@26();
    BEGIN
      TempDimSetEntryBuffer.RESET;
      TempDimSetEntryBuffer.DELETEALL;
      DimSetFilterCtr := 0;
    END;

    [External]
    PROCEDURE GetTempDimSetEntry@31(VAR TempDimSetEntry@1000 : TEMPORARY Record 480);
    BEGIN
      TempDimSetEntry.COPY(TempDimSetEntryBuffer,TRUE);
    END;

    LOCAL PROCEDURE UpdateCostType@28(DefaultDimension@1000 : Record 352;CallingTrigger@1004 : 'OnInsert,OnModify,OnDelete');
    VAR
      GLAcc@1003 : Record 15;
      CostAccSetup@1002 : Record 1108;
      CostAccMgt@1001 : Codeunit 1100;
    BEGIN
      IF CostAccSetup.GET AND (DefaultDimension."Table ID" = DATABASE::"G/L Account") THEN
        IF GLAcc.GET(DefaultDimension."No.") THEN
          CostAccMgt.UpdateCostTypeFromDefaultDimension(DefaultDimension,GLAcc,CallingTrigger);
    END;

    [External]
    PROCEDURE CreateDimSetFromJobTaskDim@32(JobNo@1006 : Code[20];JobTaskNo@1001 : Code[20];VAR GlobalDimVal1@1005 : Code[20];VAR GlobalDimVal2@1004 : Code[20]) NewDimSetID : Integer;
    VAR
      JobTaskDimension@1000 : Record 11020400;
      DimValue@1002 : Record 349;
      TempDimSetEntry@1003 : TEMPORARY Record 480;
    BEGIN
      WITH JobTaskDimension DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE("Job Task No.",JobTaskNo);
        IF FINDSET THEN BEGIN
          REPEAT
            DimValue.GET("Dimension Code","Dimension Value Code");
            TempDimSetEntry."Dimension Code" := "Dimension Code";
            TempDimSetEntry."Dimension Value Code" := "Dimension Value Code";
            TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
            TempDimSetEntry.INSERT(TRUE);
          UNTIL NEXT = 0;
          NewDimSetID := GetDimensionSetID(TempDimSetEntry);
          UpdateGlobalDimFromDimSetID(NewDimSetID,GlobalDimVal1,GlobalDimVal2);
        END;
      END;
    END;

    [External]
    PROCEDURE UpdateGenJnlLineDim@34(VAR GenJnlLine@1000 : Record 81;DimSetID@1001 : Integer);
    BEGIN
      GenJnlLine."Dimension Set ID" := DimSetID;
      UpdateGlobalDimFromDimSetID(
        GenJnlLine."Dimension Set ID",
        GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE UpdateGenJnlLineDimFromCustLedgEntry@33(VAR GenJnlLine@1000 : Record 81;DtldCustLedgEntry@1001 : Record 379);
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      IF DtldCustLedgEntry."Cust. Ledger Entry No." <> 0 THEN BEGIN
        CustLedgEntry.GET(DtldCustLedgEntry."Cust. Ledger Entry No.");
        UpdateGenJnlLineDim(GenJnlLine,CustLedgEntry."Dimension Set ID");
      END;
    END;

    [External]
    PROCEDURE UpdateGenJnlLineDimFromVendLedgEntry@29(VAR GenJnlLine@1001 : Record 81;DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      IF DtldVendLedgEntry."Vendor Ledger Entry No." <> 0 THEN BEGIN
        VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
        UpdateGenJnlLineDim(GenJnlLine,VendLedgEntry."Dimension Set ID");
      END;
    END;

    [External]
    PROCEDURE GetDimSetEntryDefaultDim@45(VAR DimSetEntry@1001 : Record 480);
    BEGIN
      // Obsolete method
      DimSetEntry.DELETEALL;
    END;

    [External]
    PROCEDURE InsertObject@35(VAR TempAllObjWithCaption@1000 : TEMPORARY Record 2000000058;TableID@1001 : Integer);
    VAR
      AllObjWithCaption@1002 : Record 2000000058;
    BEGIN
      IF AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,TableID) AND NOT IsObsolete(TableID) THEN BEGIN
        TempAllObjWithCaption := AllObjWithCaption;
        IF TempAllObjWithCaption.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE IsObsolete@94(TableID@1000 : Integer) : Boolean;
    VAR
      TableMetadata@1001 : Record 2000000136;
    BEGIN
      IF TableMetadata.GET(TableID) THEN
        EXIT(TableMetadata.ObsoleteState <> TableMetadata.ObsoleteState::No);
    END;

    [External]
    PROCEDURE GetConsolidatedDimFilterByDimFilter@37(VAR Dimension@1000 : Record 348;DimFilter@1001 : Text) ConsolidatedDimFilter : Text;
    BEGIN
      Dimension.SETFILTER("Consolidation Code",DimFilter);
      ConsolidatedDimFilter += DimFilter;
      IF Dimension.FINDSET THEN
        REPEAT
          ConsolidatedDimFilter += '|' + Dimension.Code;
        UNTIL Dimension.NEXT = 0;
    END;

    [External]
    PROCEDURE ResolveDimValueFilter@47(VAR DimValueFilter@1001 : Text;DimensionCode@1000 : Code[20]);
    BEGIN
      DimValueFilter := GetDimValuesWithTotalings(DimValueFilter,DimensionCode);
    END;

    LOCAL PROCEDURE GetDimValuesWithTotalings@85(DimValueFilter@1002 : Text;DimensionCode@1000 : Code[20]) ResultTxt : Text;
    VAR
      FilterChars@1007 : Text;
      DimParam@1009 : Text;
      CharTxt@1011 : Text;
      NextCharTxt@1004 : Text;
      SingleQuoteCharTxt@1001 : Text;
      DimFilterLen@1003 : Integer;
      i@1005 : Integer;
    BEGIN
      IF DimensionCode = '' THEN
        EXIT(DimValueFilter);
      IF DimValueFilter = '' THEN
        EXIT(DimValueFilter);

      FilterChars := '()|"&@<>=.';
      SingleQuoteCharTxt := '''';
      DimValueFilter := UPPERCASE(DimValueFilter);
      DimFilterLen := STRLEN(DimValueFilter);
      i := 1;
      REPEAT
        DimParam := '';
        CharTxt := FORMAT(DimValueFilter[i]);

        WHILE (STRPOS(FilterChars,CharTxt) > 0) AND (i <= DimFilterLen) DO BEGIN
          ResultTxt += CharTxt;
          i += 1;
          CharTxt := FORMAT(DimValueFilter[i]);
        END;

        IF CharTxt = SingleQuoteCharTxt THEN BEGIN
          REPEAT
            DimParam += CharTxt;
            i += 1;
            CharTxt := FORMAT(DimValueFilter[i]);
            NextCharTxt := FORMAT(DimValueFilter[i + 1]);
          UNTIL ((CharTxt = SingleQuoteCharTxt) AND (NextCharTxt <> SingleQuoteCharTxt)) OR (i > DimFilterLen);
          DimParam += CharTxt;
          i += 1;
        END ELSE
          WHILE (STRPOS(FilterChars,CharTxt) = 0) AND (i <= DimFilterLen) DO BEGIN
            DimParam += CharTxt;
            i += 1;
            CharTxt := FORMAT(DimValueFilter[i]);
          END;

        IF DimParam <> '' THEN
          ResultTxt += ParseDimParam(DimParam,DimensionCode);
      UNTIL i > DimFilterLen;
    END;

    LOCAL PROCEDURE ParseDimParam@145(DimValueFilter@1000 : Text;DimensionCode@1002 : Code[20]) ResultTxt : Text;
    VAR
      DimensionValue@1001 : Record 349;
      TempDimensionValue@1003 : TEMPORARY Record 349;
      CheckStr@1005 : Text;
    BEGIN
      // Possible input values: blank filter, code or code with *
      IF DELCHR(DimValueFilter) = '' THEN
        EXIT(DimValueFilter);

      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETFILTER(Code,DimValueFilter);
      DimensionValue.SETFILTER(Totaling,'<>%1','');
      IF DimensionValue.ISEMPTY THEN
        EXIT(DimValueFilter);

      AddTempDimValueFromTotaling(TempDimensionValue,CheckStr,DimensionCode,DimValueFilter);

      IF TempDimensionValue.FINDSET THEN
        REPEAT
          ResultTxt += TempDimensionValue.Code + '|'
        UNTIL TempDimensionValue.NEXT = 0;
      IF ResultTxt <> '' THEN
        ResultTxt := '(' + COPYSTR(ResultTxt,1,STRLEN(ResultTxt) - 1) + ')';
    END;

    LOCAL PROCEDURE AddTempDimValueFromTotaling@166(VAR TempDimensionValue@1002 : TEMPORARY Record 349;VAR CheckStr@1005 : Text;DimensionCode@1000 : Code[20];Totaling@1001 : Text);
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      IF STRPOS(CheckStr,'(' + Totaling + ')') > 0 THEN
        EXIT;
      CheckStr += '(' + Totaling + ')';
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETFILTER(Code,Totaling);
      IF DimensionValue.FINDSET THEN
        REPEAT
          IF DimensionValue.Totaling <> '' THEN
            AddTempDimValueFromTotaling(TempDimensionValue,CheckStr,DimensionCode,DimensionValue.Totaling)
          ELSE BEGIN
            TempDimensionValue := DimensionValue;
            IF TempDimensionValue.INSERT THEN;
          END;
        UNTIL DimensionValue.NEXT = 0;
    END;

    [External]
    PROCEDURE UseShortcutDims@70(VAR DimVisible1@1008 : Boolean;VAR DimVisible2@1007 : Boolean;VAR DimVisible3@1006 : Boolean;VAR DimVisible4@1005 : Boolean;VAR DimVisible5@1004 : Boolean;VAR DimVisible6@1003 : Boolean;VAR DimVisible7@1002 : Boolean;VAR DimVisible8@1000 : Boolean);
    VAR
      GLSetup@1001 : Record 98;
    BEGIN
      GLSetup.GET;
      DimVisible1 := GLSetup."Shortcut Dimension 1 Code" <> '';
      DimVisible2 := GLSetup."Shortcut Dimension 2 Code" <> '';
      DimVisible3 := GLSetup."Shortcut Dimension 3 Code" <> '';
      DimVisible4 := GLSetup."Shortcut Dimension 4 Code" <> '';
      DimVisible5 := GLSetup."Shortcut Dimension 5 Code" <> '';
      DimVisible6 := GLSetup."Shortcut Dimension 6 Code" <> '';
      DimVisible7 := GLSetup."Shortcut Dimension 7 Code" <> '';
      DimVisible8 := GLSetup."Shortcut Dimension 8 Code" <> '';
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConvertDimtoICDim@115(FromDim@1000 : Code[20];VAR ICDimCode@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConvertDimValuetoICDimVal@117(FromDimCode@1000 : Code[20];FromDimValue@1001 : Code[20];VAR ICDimValueCode@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConvertICDimtoDim@104(FromICDimCode@1000 : Code[20];VAR DimCode@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConvertICDimValuetoDimValue@111(FromICDimCode@1000 : Code[20];FromICDimValue@1001 : Code[20];VAR DimValueCode@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterEditDimensionSet2@126(VAR DimSetID@1002 : Integer;VAR GlobalDimVal1@1001 : Code[20];VAR GlobalDimVal2@1000 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetRecDefaultDimID@122(RecVariant@1006 : Variant;CurrFieldNo@1005 : Integer;VAR TableID@1004 : ARRAY [10] OF Integer;VAR No@1003 : ARRAY [10] OF Code[20];VAR SourceCode@1002 : Code[20];VAR InheritFromDimSetID@1001 : Integer;VAR InheritFromTableNo@1000 : Integer;VAR GlobalDim1Code@1008 : Code[20];VAR GlobalDim2Code@1007 : Code[20];VAR DefaultDimSetID@1009 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetupObjectNoList@2(VAR TempAllObjWithCaption@1000 : TEMPORARY Record 2000000058);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateShortcutDimValues@101(FieldNumber@1002 : Integer;VAR ShortcutDimCode@1001 : Code[20];VAR DimSetID@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckDimValuePosting@67(TableID@1002 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];DimSetID@1000 : Integer;VAR IsChecked@1003 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckICDim@120(ICDimCode@1000 : Code[20];VAR Result@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckICDimValue@118(ICDimCode@1000 : Code[20];ICDimValCode@1001 : Code[20];VAR Result@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckValuePosting@121(TableID@1002 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];VAR TempDimBuf@1000 : TEMPORARY Record 360;VAR IsChecked@1003 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetDefaultDimID@63(VAR TableID@1006 : ARRAY [10] OF Integer;VAR No@1005 : ARRAY [10] OF Code[20];SourceCode@1004 : Code[20];VAR GlobalDim1Code@1003 : Code[20];VAR GlobalDim2Code@1002 : Code[20];InheritFromDimSetID@1001 : Integer;InheritFromTableNo@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTableIDsForHigherPriorities@134(TableNo@1000 : Integer;RecVar@1001 : Variant;VAR FieldNo@1002 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1004 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLookupDimValueCode@96(FieldNumber@1001 : Integer;VAR ShortcutDimCode@1000 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLookupDimValueCodeNoUpdate@106(FieldNumber@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateDimValueCode@105(FieldNumber@1001 : Integer;VAR ShortcutDimCode@1000 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetRecDefaultDimID@155(RecVariant@1011 : Variant;CurrFieldNo@1012 : Integer;VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1001 : ARRAY [10] OF Code[20];VAR SourceCode@1002 : Code[20];VAR InheritFromDimSetID@1004 : Integer;VAR InheritFromTableNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTypeToTableID2@38(VAR TableID@1002 : Integer;Type@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckDimValueAllowed@69(DimVal@1000 : Record 349;VAR DimValueAllowed@1001 : Boolean;VAR DimErr@1002 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckICDimValueAllowed@75(ICDimVal@1000 : Record 412;VAR DimValueAllowed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDefaultDimOnBeforeCreate@87(VAR TempDimBuf@1000 : TEMPORARY Record 360;TableID@1001 : Integer;No@1002 : Code[40];GLSetupShortcutDimCode@1003 : ARRAY [8] OF Code[20];VAR GlobalDim1Code@1004 : Code[20];VAR GlobalDim2Code@1005 : Code[20];VAR IsHandled@1006 : Boolean;SourceCode@1007 : Code[20]);
    BEGIN
    END;

    PROCEDURE GetDimValueRec@11012000(FieldNumber@1000 : Integer;ShortcutDimCode@1001 : Code[20];VAR DimVal@11012000 : Record 349;Validate@11012001 : Boolean;ProjectNo@1210190000 : Code[20]);
    VAR
      GLSetup@1003 : Record 98;
    BEGIN
      //**4PS
      GetGLSetup;
      IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
        ERROR(Text002,GLSetup.TABLECAPTION);

      IF Validate THEN
        DimVal.GET(GLSetupShortcutDimCode[FieldNumber],ShortcutDimCode)
      ELSE
        IF NOT DimVal.GET(GLSetupShortcutDimCode[FieldNumber],ShortcutDimCode) THEN
          CLEAR(DimVal);

      IF (FieldNumber = 2) AND (ProjectNo <> '') THEN BEGIN
        DimVal.SETRANGE("Project Filter",ProjectNo);
        DimVal.CALCFIELDS("Project Related Name","Proj. Rel. Cost Object Blocked");
        IF (DimVal."Project Related Name" <> '') THEN
          DimVal.Name := DimVal."Project Related Name";
      END;
    END;

    PROCEDURE CopyDefaultDim@1000000000(FromTable@1000 : Integer;FromNo@1001 : Code[40];ToTable@1002 : Integer;ToNo@1003 : Code[40]);
    VAR
      FromDefDim@1004 : Record 352;
      ToDefDim@1005 : Record 352;
    BEGIN
      //**4PS
      WITH FromDefDim DO BEGIN
        SETRANGE("Table ID",FromTable);
        SETRANGE("No.",FromNo);
        IF FIND('-') THEN BEGIN
          REPEAT
            ToDefDim := FromDefDim;
            ToDefDim."Table ID" := ToTable;
            ToDefDim."No." := ToNo;
            ToDefDim.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE MergeDefaultDim@1100528601(FromTable@1000 : Integer;FromNo@1001 : Code[40];ToTable@1002 : Integer;ToNo@1003 : Code[40]);
    VAR
      FromDefDim@1004 : Record 352;
      ToDefDim@1005 : Record 352;
    BEGIN
      //**4PS
      WITH FromDefDim DO BEGIN
        SETRANGE("Table ID",FromTable);
        SETRANGE("No.",FromNo);
        IF FINDSET THEN BEGIN
          REPEAT
            ToDefDim := FromDefDim;
            ToDefDim."Table ID" := ToTable;
            ToDefDim."No." := ToNo;
            IF NOT ToDefDim.FIND THEN
              ToDefDim.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetCompany@1100485005(Company@1100485000 : Text[80]);
    BEGIN
      //**4PS
      ReceivingCompany := Company;
    END;

    PROCEDURE SetTableID@1100525008(NewTableID@1100525000 : Integer);
    BEGIN
      //**4PS
      TableID := NewTableID;
    END;

    PROCEDURE GetDepAuthSetup@1100485002();
    VAR
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF NOT HasGotDepAuthSetup THEN BEGIN
        DepAuthActive := FALSE;
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DepAuthRec) THEN
          DepAuthActive := DepAuthMgt.AuthorizationActive;
        HasGotDepAuthSetup := TRUE;
      END;
    END;

    PROCEDURE SetSkipDepartmentAuthorization@1210190003(SkipDepartmentAuthorization@1210190000 : Boolean);
    BEGIN
      //**4PS
      SkipDepAuth := SkipDepartmentAuthorization;
    END;

    PROCEDURE CheckDepartmentAuthorization@1100485000(TableID@1100485002 : Integer;Dim1ValCode@1100485000 : Code[20]);
    BEGIN
      //**4PS
      CheckDepartmAuthWithFilterType(TableID, Dim1ValCode, FALSE);
    END;

    PROCEDURE CheckDepartmAuthWithFilterType@1100526000(TableID@1100485002 : Integer;Dim1ValCode@1100485000 : Code[20];ForceHardFilter@1100526000 : Boolean);
    BEGIN
      //**4PS
      IF (Dim1ValCode = '') OR SkipDepAuth THEN
        EXIT;

      GetDepAuthSetup;
      IF DepAuthActive THEN BEGIN
        DepAuthMgt.SetTableAccessFilter(TableID);
        IF ((DepAuthMgt.IsHardFilter OR ForceHardFilter) AND
            NOT DepAuthMgt.DepartmentCodeAllowed(Dim1ValCode))
        THEN
          ERROR(Text11012000, Dim1ValCode);
      END;
    END;

    PROCEDURE HasDefaultDim@1100525000(TableID@1100525001 : Integer;No@1100525002 : Code[40]) : Boolean;
    VAR
      DefDimRec@1100525000 : Record 352;
    BEGIN
      //**4PS
      IF No = '' THEN
        EXIT(FALSE);
      DefDimRec.SETRANGE("Table ID", TableID);
      DefDimRec.SETRANGE("No.", No);
      EXIT(NOT DefDimRec.ISEMPTY);
    END;

    PROCEDURE MakeCombinedPlantNo@1100525001(PlantType@1100525000 : Code[20];PlantNo@1100525001 : Code[10]) : Code[40];
    BEGIN
      //**4PS
      IF (PlantType <> '') AND (PlantNo <> '') AND (PlantNo <> '0') THEN
        EXIT(PlantType + '-' + PlantNo);
      EXIT('');
    END;

    PROCEDURE AnalyseCombinedPlantNo@1100525002(CombinedPlantNo@1100525002 : Code[40];VAR PlantType@1100525000 : Code[20];VAR PlantNo@1100525001 : Code[10]);
    VAR
      Len@1100525003 : Integer;
      Pos@1100525004 : Integer;
    BEGIN
      //**4PS
      PlantType := '';
      PlantNo := '';
      Len := STRLEN(CombinedPlantNo);
      IF (CombinedPlantNo = '') OR (Len < 3) THEN
        EXIT;

      FOR Pos := Len - 1 DOWNTO 2 DO BEGIN
        IF COPYSTR(CombinedPlantNo, Pos, 1) = '-' THEN BEGIN
          PlantType := COPYSTR(CombinedPlantNo, 1, Pos-1);
          PlantNo := COPYSTR(CombinedPlantNo, Pos+1);
          EXIT;
        END;
      END;
    END;

    PROCEDURE CheckDimensionAuthorisation@1100525003(GlobalDim@1100525001 : Integer;TableID@1100525002 : Integer) : Boolean;
    VAR
      LicensePermission@1100525003 : Record 2000000043;
      FieldPermissionMgt@1100525000 : Codeunit 11012395;
    BEGIN
      //**4PS
      LicensePermission.SETRANGE("Object Type",LicensePermission."Object Type"::Codeunit);
      LicensePermission.SETRANGE("Object Number",11012395);
      LicensePermission.SETFILTER("Execute Permission",'<>%1',LicensePermission."Execute Permission"::" ");
      IF NOT LicensePermission.ISEMPTY THEN
        FieldPermissionMgt.FieldAuthForTableField(GlobalDim,TableID);

      EXIT(TRUE);
    END;

    PROCEDURE UpdateAnalysisDimNotGlobal@1100528600(AnalysisType@1100528602 : 'Problem,Cause,Solution';AnalysisCode@1100528603 : Code[10];ToTableID@1100528601 : Integer;ToNo@1100528600 : Code[40]);
    VAR
      ServiceAnalysisDimension@1100528605 : Record 11071932;
      ToDefaultDimension@1100528604 : Record 352;
    BEGIN
      //**4PS
      ServiceAnalysisDimension.SETRANGE("Analysis Type", AnalysisType);
      ServiceAnalysisDimension.SETRANGE(Code, AnalysisCode);
      IF ServiceAnalysisDimension.FINDSET THEN BEGIN
        REPEAT
          ToDefaultDimension.INIT;
          ToDefaultDimension."Table ID" := ToTableID;
          ToDefaultDimension."No." := ToNo;
          ToDefaultDimension."Dimension Code" := ServiceAnalysisDimension."Dimension Code";
          IF NOT ToDefaultDimension.FIND THEN BEGIN
            ToDefaultDimension."Dimension Value Code" := ServiceAnalysisDimension."Dimension Value Code";
            ToDefaultDimension.INSERT;
          END ELSE BEGIN
            ToDefaultDimension."Dimension Value Code" := ServiceAnalysisDimension."Dimension Value Code";
            ToDefaultDimension.MODIFY;
          END;
        UNTIL ServiceAnalysisDimension.NEXT = 0;
      END;
    END;

    PROCEDURE GetDimSetIDXtraDims@1100525004(AddExtraDims@1100525003 : Boolean;VAR DefaultDim@1100525000 : Record 352;GlobalDimVal1@1100525002 : Code[20];GlobalDimVal2@1100525001 : Code[20]) : Integer;
    VAR
      TempDimSetEntry@1100525005 : TEMPORARY Record 480;
    BEGIN
      //**4PS Default Dim Must be filtered before running this function
      GetGLSetup;

      AddDimValToDimSet(TRUE,GLSetupShortcutDimCode[1],GlobalDimVal1,TempDimSetEntry);
      AddDimValToDimSet(TRUE,GLSetupShortcutDimCode[2],GlobalDimVal2,TempDimSetEntry);

      IF AddExtraDims THEN
        IF DefaultDim.FINDSET THEN
          REPEAT
            AddDimValToDimSet(FALSE,DefaultDim."Dimension Code",DefaultDim."Dimension Value Code",TempDimSetEntry);
          UNTIL DefaultDim.NEXT = 0;

      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE AddDimValToDimSet@1100525005(GlobalDim@1100409000 : Boolean;DimensionCode@1100525001 : Code[20];DimensionValueCode@1100525002 : Code[20];VAR TempDimSetEntry@1100525000 : TEMPORARY Record 480);
    VAR
      DimVal@1100525003 : Record 349;
    BEGIN
      //**4PS
      IF (DimensionCode = '') OR (DimensionValueCode = '') THEN
        EXIT;

      IF ReceivingCompany = '' THEN               //DP00387 s new
        DimVal.CHANGECOMPANY(COMPANYNAME)
      ELSE
        DimVal.CHANGECOMPANY(ReceivingCompany);   //DP00387 e new

      IF DimVal.GET(DimensionCode, DimensionValueCode) THEN
        IF GlobalDim OR (NOT GlobalDim AND (DimVal."Global Dimension No." = 0)) THEN BEGIN
          //C021176.sn
          IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DimensionCode) THEN BEGIN
            TempDimSetEntry."Dimension Value Code" := DimensionValueCode; //C039038.n
            TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
            TempDimSetEntry.MODIFY;
          END ELSE BEGIN
          //C021176.en
            TempDimSetEntry."Dimension Code" := DimensionCode;
            TempDimSetEntry."Dimension Value Code" := DimensionValueCode;
            TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
            TempDimSetEntry.INSERT;
          END; //C021176.n
        END;
    END;

    PROCEDURE GetDimSetInCompany@1100409001(DimSetID@1100409000 : Integer;ReceivingCompanyOld@1100409001 : Text[80];ReceivingCompanyNew@1100409002 : Text[80]) : Integer;
    VAR
      DimSetEntryFrom@1100409003 : Record 480;
      TempDimSetEntry@1100409004 : TEMPORARY Record 480;
      DimVal@1100409006 : Record 349;
    BEGIN
      //**4PS
      IF ReceivingCompanyNew = '' THEN
        DimVal.CHANGECOMPANY(COMPANYNAME)
      ELSE
        DimVal.CHANGECOMPANY(ReceivingCompanyNew);

      DimSetEntryFrom.CHANGECOMPANY(ReceivingCompanyOld);
      DimSetEntryFrom.SETRANGE("Dimension Set ID", DimSetID);
      IF DimSetEntryFrom.FINDSET THEN
        REPEAT
          DimVal.GET(DimSetEntryFrom."Dimension Code",DimSetEntryFrom."Dimension Value Code");

          TempDimSetEntry."Dimension Code" := DimSetEntryFrom."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := DimSetEntryFrom."Dimension Value Code";
          TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
          TempDimSetEntry.INSERT;
        UNTIL DimSetEntryFrom.NEXT = 0;

      SetCompany(ReceivingCompanyNew);
      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    PROCEDURE GetDimSetAddedDimVal@1100525006(DimSetID@1100525000 : Integer;DimensionCode@1100525002 : Code[20];DimensionValueCode@1100525001 : Code[20]) : Integer;
    VAR
      TempDimSetEntry@1100525003 : TEMPORARY Record 480;
    BEGIN
      //**4PS
      GetDimensionSet(TempDimSetEntry,DimSetID);
      AddDimValToDimSet(TRUE,DimensionCode,DimensionValueCode,TempDimSetEntry);
      EXIT(GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE Add4PSTablesToObjectList@1100525007(VAR TempAllObjWithCaption@1100525000 : TEMPORARY Record 2000000058);
    BEGIN
      //**4PS
      InsertObject(TempAllObjWithCaption,DATABASE::"Vendor Template");
      InsertObject(TempAllObjWithCaption,DATABASE::"Plant Type");
      InsertObject(TempAllObjWithCaption,DATABASE::"Plant Number");
      InsertObject(TempAllObjWithCaption,DATABASE::"Service-Contract");
      InsertObject(TempAllObjWithCaption,DATABASE::"Service Order");
      InsertObject(TempAllObjWithCaption,DATABASE::Location);
      InsertObject(TempAllObjWithCaption,DATABASE::"Service Group");
    END;

    LOCAL PROCEDURE "**PSSE"@1100285001();
    BEGIN
    END;

    PROCEDURE SetDimensionValueChainsBool@1100285002(pAddDimensionValueChainsBool@1100285000 : Boolean);
    BEGIN
      //IME171
      AddDimensionValueChainsBool := pAddDimensionValueChainsBool;
    END;

    BEGIN
    {
      4PS 20100420: Field authorisation

      140905 ITERO.DL IME171 Dimensions are not extended due to lack of VALIDATEs
    }
    END.
  }
}

