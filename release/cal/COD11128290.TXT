OBJECT Codeunit 11128290 Orango Data Upgrade
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=UPGTK,4PSSE;
  }
  PROPERTIES
  {
    Subtype=Upgrade;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataUpgradeMgt@1101285000 : Codeunit 9900;
      InstallationManagement@1101285001 : Codeunit 11012268;
      CompanyDataUpgradeLog@1100285100 : Record 11229360;
      NewCompany@1101285005 : Boolean;
      NewDatabase@1101285004 : Boolean;
      TypeOfLog@1101285003 : 'Execute,No License Permission,New Company';
      StartDateTime@1101285002 : DateTime;

    [TableSyncSetup]
    PROCEDURE GetTableSyncSetup@1101285004(VAR TableSynchSetup@1101285000 : Record 2000000135);
    BEGIN
      //DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Hours Consent Line",11128290,TableSynchSetup.Mode::Move);  //RFC151 + 209

      // //exflow, om licens saknas
      // DataUpgradeMgt.SetTableSyncSetup(12013601,0,TableSynchSetup.Mode::Force);
      // DataUpgradeMgt.SetTableSyncSetup(12013609,0,TableSynchSetup.Mode::Force);
      // DataUpgradeMgt.SetTableSyncSetup(12013648,0,TableSynchSetup.Mode::Force);


      DataUpgradeMgt.SetTableSyncSetup(11128100,11229910,TableSynchSetup.Mode::Move);
    END;

    [UpgradePerCompany]
    PROCEDURE RunUpdate@1101285005();
    BEGIN
      UpdateHourAccountingLine(5000);
      UpdateHoursConsentLine(5001);
      CleanupHoursConsentLine(5002);
      RestoreHoursConsentLine(11128000);
      UpdateHoursConsentLine(11128001); //RFC151 + 209
      HourAccountingConsented(11128002);
      // UpgradeDefSymbrioSetup(11127975);
      UpgradeDefSymbrioSetup;
      UpdateVendLedgerEntryFrPack;  //RFC1078
    END;

    LOCAL PROCEDURE RestoreHoursConsentLine@1100285101(ConversionStatus@1100285102 : Integer);
    VAR
      HoursConsentLine@1100285100 : Record 11020437;
    BEGIN
      // IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
      //  EXIT;
      // InstallationManagement.InitDataUpgradeLog(DATABASE::"Hour Accounting Line",TypeOfLog,StartDateTime,NewCompany);
      // IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
      //
      //  lvUPDATEHoursConsentLine.SETRANGE(LineType,HoursConsentLine.LineType::Normal);
      //  IF lvUPDATEHoursConsentLine.FINDSET THEN REPEAT
      //    HoursConsentLine.INIT;
      //    HoursConsentLine.TRANSFERFIELDS(lvUPDATEHoursConsentLine);
      //    HoursConsentLine.CombinedWTEEKey :=
      //      lvUPDATEHoursConsentLine."Wage Component"+','+lvUPDATEHoursConsentLine."Team Code"+
      //      ','+lvUPDATEHoursConsentLine.Element+','+lvUPDATEHoursConsentLine."Extension Contract";
      //    IF HoursConsentLine.INSERT(FALSE) THEN
      //      lvUPDATEHoursConsentLine.DELETE(FALSE);
      //
      //  UNTIL lvUPDATEHoursConsentLine.NEXT=0;
      //  lvUPDATEHoursConsentLine.SETFILTER(LineType,'<>%1',lvUPDATEHoursConsentLine.LineType::"2");
      //  lvUPDATEHoursConsentLine.DELETEALL(FALSE);
      //
      // END;
      // CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      // COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateHourAccountingLine@1101285017(ConversionStatus@1101285000 : Integer);
    VAR
      HourAccountingLine@1101285001 : Record 11012039;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Hour Accounting Line",TypeOfLog,StartDateTime,NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        HourAccountingLine.RESET;
        HourAccountingLine.SETFILTER("Status SE", '=%1', HourAccountingLine."Status SE"::Open);
        HourAccountingLine.SETRANGE(Changed, TRUE);
        HourAccountingLine.MODIFYALL(Changed,FALSE,FALSE);
      //  IF HourAccountingLine.FINDSET THEN
      //    REPEAT
      //      HourAccountingLine.Changed := FALSE;
      //      HourAccountingLine.MODIFY;
      //    UNTIL HourAccountingLine.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateHoursConsentLine@1101285016(ConversionStatus@1101285000 : Integer);
    VAR
      HoursConsentLine@1101285001 : Record 11020437;
      ProcessedHoursConsentLine@1101285004 : Record 11020439;
      HourAccountingLine@1101285005 : Record 11012039;
      PostedHourLine@1101285006 : Record 11012085;
      Employee@1100285100 : Record 5200;
    BEGIN
      // IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
      //  EXIT;
      // InstallationManagement.InitDataUpgradeLog(DATABASE::"Hours Consent Line old",TypeOfLog,StartDateTime,NewCompany);
      // IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
      //  //Remove all lines of LineType Half-Compact and Main
      //  HoursConsentLine.RESET;
      //  HoursConsentLine.SETFILTER(LineType, '<>%1', HoursConsentLine.LineType::Normal);
      //  IF HoursConsentLine.ISEMPTY THEN
      //    EXIT;
      //  HoursConsentLine.DELETEALL;
      //
      //  //Create the new Half-Compact and Main lines
      //  HoursConsentLine.RESET;
      //  IF HoursConsentLine.FINDSET THEN
      //  REPEAT
      //    IF HoursConsentLine.IsOpenNormalLine AND Employee.GET(HoursConsentLine.Employee) THEN BEGIN
      //      HoursConsentLine.InsertOrUpdateMainLine;
      //      HoursConsentLine.InsertOrUpdateHalfCompactLine;
      //    END;
      //  UNTIL HoursConsentLine.NEXT=0;
      // END;
      // CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      // COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CleanupHoursConsentLine@1101285000(ConversionStatus@1101285000 : Integer);
    VAR
      HoursConsentLine@1101285002 : Record 11020437;
      ProcessedHoursConsentLine@1101285001 : Record 11020439;
    BEGIN
      // IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
      //  EXIT;
      // InstallationManagement.InitDataUpgradeLog(DATABASE::"Hours Consent Line",TypeOfLog,StartDateTime,NewCompany);
      // IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
      //
      //  //Cleanup Consented lines, move to Processed Hours Consent Lines.
      //  HoursConsentLine.RESET;
      //  HoursConsentLine.SETRANGE(Consent,TRUE);
      //  IF HoursConsentLine.FINDSET THEN
      //    REPEAT
      //      HoursConsentLine.DELETE;
      //      ProcessedHoursConsentLine.TRANSFERFIELDS(HoursConsentLine);
      //      ProcessedHoursConsentLine.INSERT(TRUE);
      //    UNTIL HoursConsentLine.NEXT=0;
      //
      //  //Cleanup Denied lines, move to Processed Hours Consent Lines.
      //  HoursConsentLine.RESET;
      //  HoursConsentLine.SETRANGE(Denied,TRUE);
      //  IF HoursConsentLine.FINDSET THEN
      //    REPEAT
      //      HoursConsentLine.DELETE;
      //      ProcessedHoursConsentLine.TRANSFERFIELDS(HoursConsentLine);
      //      ProcessedHoursConsentLine.INSERT(TRUE);
      //    UNTIL HoursConsentLine.NEXT=0;
      // END;
      // CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      // COMMIT;
    END;

    LOCAL PROCEDURE HourAccountingConsented@1101285001(ConversionStatus@1101285002 : Integer);
    VAR
      HourAccounting@1101285000 : Record 11012038;
      HoursConsentLine@1101285001 : Record 11020437;
    BEGIN
      // IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
      //  EXIT;
      // InstallationManagement.InitDataUpgradeLog(DATABASE::"Hours Consent Line",TypeOfLog,StartDateTime,NewCompany);
      // IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
      //
      //  HourAccounting.RESET;
      //  HourAccounting.SETRANGE(Status,HourAccounting.Status::Released);
      //  IF HourAccounting.FINDSET THEN
      //    REPEAT
      //      HoursConsentLine.SETRANGE(Year, HourAccounting.Year);
      //      HoursConsentLine.SETRANGE(Week, HourAccounting.Week);
      //      HoursConsentLine.SETRANGE(Employee, HourAccounting."Employee No.");
      //      HoursConsentLine.SETRANGE(Consent, FALSE);
      //      HoursConsentLine.SETRANGE(Denied, FALSE);
      //      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Hour Accounting");
      //
      //      IF HoursConsentLine.ISEMPTY THEN
      //        HourAccounting.Consented := TRUE
      //      ELSE
      //        HourAccounting.Consented := FALSE;
      //
      //      HourAccounting.MODIFY(FALSE);
      //
      //    UNTIL HourAccounting.NEXT = 0;
      //
      // END;
      // CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      // COMMIT;
    END;

    [UpgradePerCompany]
    PROCEDURE UpgradeDefSymbrioSetup@1100285103();
    VAR
      SymbrioSetup@1100285101 : Record 11127975;
      ConversionStatus@1100285100 : Integer;
    BEGIN
      ConversionStatus:= 11127975;

      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Symbrio Setup",TypeOfLog,StartDateTime,NewCompany);
      IF (TypeOfLog = TypeOfLog::Execute) AND SymbrioSetup.GET THEN BEGIN
        //main projects
        SymbrioSetup."Sym. PM Status Estimation" := 0;
        SymbrioSetup."Sym. PM Status Preparation" := 1;
        SymbrioSetup."Sym. PM Status Production" := 1;
        SymbrioSetup."Sym. PM Status Tech. Finished" := 0;
        SymbrioSetup."Sym. PM Status Adm. Finished" := 0;
        SymbrioSetup."Sym. PM Status Finished" := 0;
        SymbrioSetup."Sym. PM Status Archive" := 0;
        SymbrioSetup."Sym. PM Status Archived" := 0;

        //sub-/single projects
        SymbrioSetup."Sym. PS Status Estimation" := 0;
        SymbrioSetup."Sym. PS Status Preparation" := 1;
        SymbrioSetup."Sym. PS Status Production" := 1;
        SymbrioSetup."Sym. PS Status Tech. Finished" := 0;
        SymbrioSetup."Sym. PS Status Adm. Finished" := 2;
        SymbrioSetup."Sym. PS Status Finished" := 2;
        SymbrioSetup."Sym. PS Status Archive" := 2;
        SymbrioSetup."Sym. PS Status Archived" := 2;

        //service orders
        SymbrioSetup."Sym. SO Status Open" := 1;
        SymbrioSetup."Sym. SO Status In Process" := 1;
        SymbrioSetup."Sym. SO Status Tech. Finished" := 1;
        SymbrioSetup."Sym. SO Status Adm. Finished" := 2;
        SymbrioSetup."Sym. SO Status Finished" := 2;
        SymbrioSetup."Sym. SO Status Cancelled" := 2;

        SymbrioSetup.MODIFY;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      COMMIT;
    END;

    [UpgradePerCompany]
    PROCEDURE UpdateVendLedgerEntryFrPack@1101285002();
    VAR
      ConversionStatus@1101285000 : Integer;
      VPPackEntry@1101285001 : Record 11128063;
      VendorLedgerEntry@1101285002 : Record 25;
      VendEntryEdit@1101285003 : Codeunit 113;
    BEGIN
      //RFC1078
      ConversionStatus := 11128003;
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"VP Pack Entry",TypeOfLog,StartDateTime,FALSE);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF VPPackEntry.FINDSET THEN REPEAT
          IF VendorLedgerEntry.GET(VPPackEntry."Ledger Entry No.") THEN BEGIN
            VendorLedgerEntry."Last VP Pack No." := VPPackEntry."Pack Entry No.";
            VendEntryEdit.RUN(VendorLedgerEntry);
          END;
        UNTIL VPPackEntry.NEXT=0;

      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      COMMIT;
    END;

    [UpgradePerDatabase]
    PROCEDURE UserPersonalizations@1101285003();
    VAR
      UserPersonalization@1101285000 : Record 2000000073;
    BEGIN
      UserPersonalization.SETRANGE("Locale ID",0);
      UserPersonalization.SETFILTER("Language ID",'<>0');
      IF UserPersonalization.FINDSET THEN
        REPEAT
          UserPersonalization."Locale ID" := UserPersonalization."Language ID";
          UserPersonalization.MODIFY(FALSE);
        UNTIL UserPersonalization.NEXT=0;

      UserPersonalization.SETRANGE("Locale ID");
      UserPersonalization.SETRANGE("Language ID");
      UserPersonalization.SETRANGE("Time Zone",'');
      UserPersonalization.MODIFYALL("Time Zone",'W. Europe Standard Time',FALSE);
    END;

    BEGIN
    END.
  }
}

