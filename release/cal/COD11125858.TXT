OBJECT Codeunit 11125858 Reference Tool Criteria Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'DEU=%1 ''%2'' enthÑlt bereits Kriterien-Aktionszeilen, gespeicherte Kriterien werden hinzugefÅgt.\ \Sind Sie sich sicher?;ENU=%1 ''%2'' already contains criteria action lines, saved criteria will be added.\ \Are you sure?;NLD=%1 ''%2'' bevat reeds criteria-actieregels, opgeslagen criteria worden toegevoegd.\ \Weet u het zeker?;NOR=%1 ''%2'' inneholder allerede Kriteriehandlingsrader. Lagrede kriterier vil legges til\ \Er du sikker?;SVE=%1 ''%2'' innehÜller redan kriterieÜtgÑrdsrader. Sparade kriterier kommer att lÑggas till\ \ér du sÑker?';
      Text002@1210190001 : TextConst 'DEU=Alle Zeilen, Kriterien und Merkmalfilter von %1 ''%2'' werden gelîscht.\ \ Sind Sie sich sicher?\ \NB: Wenn Sie die Kriterien oder/und Merkmalfilter aufs Neue verwenden mîchten, dann mÅssen Sie diese zuerst speichern.;ENU=All lines, criterions and feature filters of %1 ''%2'' will be deleted.\ \Are you sure?\ \ \Note: If you want to reuse the criterions and/or feature filters then you must save them first.;NLD=Alle regels, criteria en kenmerkfilters van %1 ''%2'' worden verwijderd.\ \Weet u het zeker?\ \ \NB: Als u de criteria en/of kenmerkfilters opnieuw wilt gebruiken dan moet u ze eerst opslaan.;NOR=Alle rader, kriterier og funksjonsfilter for %1 ''%2'' vil fjernes.\ \Er du sikker?\ \ \OBS: Om du vil bruke filteret for kriterier og/eller funksjoner om igjen mÜ du lagre dem fõrst.;SVE=Alla rader, kriterier och funktionsfilter fîr %1 ''%2'' kommer att tas bort.\ \ér du sÑker?\ \ \OBS: Om du vill ÜteranvÑnda filter fîr kriterier och/eller funktioner mÜste du fîrst spara dem.';
      TmpRefCritLineFeat@1210190003 : TEMPORARY Record 11125860;
      TmpRefCritLineFeatType@1210190002 : TEMPORARY Record 11125860;
      Text003@1210190004 : TextConst 'DEU=%1 Zeile(n) hinzugefÅgt;ENU=%1 linel(s) inserted;NLD=%1 regel(s) toegevoegd;NOR=%1 rad(r) satt inn;SVE=%1 rad(er) har infogats';
      Text004@1210190005 : TextConst 'DEU=%1 Zeile(n) bereits vorhanden;ENU=%1 lines(s) already present;NLD=%1 regel(s) al aanwezig;NOR=%1 rad(r) finnes allerede;SVE=%1 rad(er) finns redan';

    PROCEDURE UpdateNumberCriteria@2(NoFilter@1210190002 : Code[500];RefNo@1000 : Code[20];RefType@1210190003 : Option;RefAction@1210190004 : Option);
    VAR
      RefCritLine@1210190000 : Record 11125860;
      Proj@1002 : Record 11072003;
      ServContr@1210190001 : Record 11012812;
    BEGIN
      IF (NoFilter = '') OR (RefNo = '') THEN
        EXIT;

      RefCritLine.Action := RefAction;
      RefCritLine."Reference Type" := RefType;
      RefCritLine."Criterion Type" := RefCritLine."Criterion Type"::Common;

      CASE RefCritLine."Reference Type" OF
        RefCritLine."Reference Type"::Project:
          BEGIN
            Proj.SETFILTER("No.", NoFilter);
            InsertCriteriaAction(RefNo, RefCritLine."Reference Type", RefCritLine.Action);
            InsertCriteriaFilter(
              RefNo, RefCritLine."Reference Type", RefCritLine.Action,
              DATABASE::Job, (Proj.GETFILTERS <> ''), Proj.GETVIEW(FALSE));
          END;
        RefCritLine."Reference Type"::ServiceContract:
          BEGIN
            ServContr.SETFILTER("No.", NoFilter);
            InsertCriteriaAction(RefNo, RefCritLine."Reference Type", RefCritLine.Action);
            InsertCriteriaFilter(
              RefNo, RefCritLine."Reference Type", RefCritLine.Action,
              DATABASE::"Service-Contract", (ServContr.GETFILTERS <> ''), ServContr.GETVIEW(FALSE));
          END;
      END;
    END;

    PROCEDURE InsertCriteriaAction@1(RefNo@1000 : Code[20];RefType@1210190000 : Option;Action@1001 : Option);
    VAR
      RefCritLine@1007 : Record 11125860;
      NextLineNo@1008 : Integer;
    BEGIN
      RefCritLine.LOCKTABLE;
      RefCritLine.SETRANGE("Reference No.", RefNo);
      RefCritLine.SETRANGE("Reference Type", RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Common);
      IF RefCritLine.FINDLAST THEN
        NextLineNo := RefCritLine."Line No." + 1
      ELSE
        NextLineNo := 1;

      RefCritLine.INIT;
      RefCritLine."Reference No." := RefNo;
      RefCritLine."Reference Type" := RefType;
      RefCritLine."Criterion Type" := RefCritLine."Criterion Type"::Common;
      RefCritLine."Line No." := NextLineNo;
      RefCritLine.Type := RefCritLine.Type::Action;
      RefCritLine.Action := Action;
      RefCritLine.INSERT;
    END;

    PROCEDURE InsertCriteriaFilter@4(RefNo@1000 : Code[20];RefType@1210190000 : Option;Action@1210190001 : Option;TableNo@1001 : Integer;HasFilter@1002 : Boolean;View@1003 : Text[1024]);
    VAR
      RefCritLine@1004 : Record 11125860;
      NextLineNo@1005 : Integer;
      MaxLenView1@1210190003 : Integer;
    BEGIN
      IF NOT HasFilter THEN
        EXIT;
      MaxLenView1 := MAXSTRLEN(RefCritLine."View 1");

      RefCritLine.SETRANGE("Reference No.",RefNo);
      RefCritLine.SETRANGE("Reference Type",RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Common);
      IF RefCritLine.FINDLAST THEN
        NextLineNo := RefCritLine."Line No." + 1
      ELSE
        NextLineNo := 1;

      RefCritLine.INIT;
      RefCritLine."Reference No." := RefNo;
      RefCritLine."Reference Type" := RefType;
      RefCritLine."Criterion Type" := RefCritLine."Criterion Type"::Common;
      RefCritLine."Line No." := NextLineNo;
      RefCritLine.Type := RefCritLine.Type::Filter;
      RefCritLine.Action := Action;
      RefCritLine."Table No." := TableNo;
      RefCritLine."View 1" := COPYSTR(View, 1, MaxLenView1);
      IF STRLEN(View) > MaxLenView1 THEN
        RefCritLine."View 2" := COPYSTR(View, MaxLenView1+1);
      RefCritLine.INSERT;
    END;

    PROCEDURE BuildFeatureFilterTable@1210190008(RefNo@1210190006 : Code[20];RefType@1210190007 : Option;VAR TmpRefFeatFilter@1210190004 : TEMPORARY Record 11125863;VAR CombineFeatures@1210190005 : Boolean);
    VAR
      ContFeatGrp@1210190000 : Record 11012751;
      ContFeature@1210190001 : Record 11012752;
      RefCritLine@1210190002 : Record 11125860;
      ActionFound@1210190003 : Boolean;
    BEGIN
      //* TmpRefFeatFilter (Ref. Tool Feature Filter) must be 'Temporary' in the calling process (table may only be used as temporary).
      CombineFeatures := FALSE;
      TmpRefFeatFilter.RESET;
      TmpRefFeatFilter.DELETEALL;

      CASE RefType OF
        RefCritLine."Reference Type"::Project:
          ContFeatGrp.SETRANGE(Jobs, TRUE);
        RefCritLine."Reference Type"::ServiceContract:
          ContFeatGrp.SETRANGE("Service Contracts", TRUE);
       ELSE
         EXIT;
      END;
      ActionFound := GetFeatueCriteriaAction(RefNo, RefType, CombineFeatures);

      IF ContFeatGrp.FINDSET THEN BEGIN
        REPEAT
          ContFeature.SETRANGE("Feature Group", ContFeatGrp.Description);
          IF ContFeature.FINDSET THEN BEGIN
            REPEAT
              TmpRefFeatFilter.INIT;
              TmpRefFeatFilter."Feature Group" := ContFeature."Feature Group";
              TmpRefFeatFilter.Feature := ContFeature.Code;
              IF ActionFound THEN BEGIN //* If no action then there will also be no filters
                GetFeatureCriteriaFilters(RefNo, RefType,
                   TmpRefFeatFilter."Feature Group", TmpRefFeatFilter.Feature,
                   TmpRefFeatFilter."Filter on Feature",
                   TmpRefFeatFilter."Value Filter", TmpRefFeatFilter."Comment Filter");
              END;
              TmpRefFeatFilter.INSERT;
            UNTIL ContFeature.NEXT = 0;
          END;
        UNTIL ContFeatGrp.NEXT = 0;
      END;
      IF TmpRefFeatFilter.FINDFIRST THEN;
    END;

    PROCEDURE UpdateFeatCritFromFeatFilterTb@1210190009(RefNo@1210190006 : Code[20];RefType@1210190007 : Option;VAR TmpRefFeatFilter@1210190004 : TEMPORARY Record 11125863;CombineFeatures@1210190005 : Boolean);
    VAR
      RefCritLine@1210190000 : Record 11125860;
      ContFeature@1210190001 : Record 11012752;
      ContFeatType@1210190002 : Record 11012753;
      FilterInserted@1210190003 : Boolean;
    BEGIN
      //* TmpRefFeatFilter (Ref. Tool Feature Filter) must be 'Temporary' in the calling process (table may only be used as temporary).
      //*
      //* For the feature filters one action record is added, this record contains also info about 'Combined Features'.
      //* There can be more filter records (per feature max. 3):
      //* - If "Filter on Feature" is set then a record is added for the featue for Table="Contact Feature", so this record
      //*   is the indication that must be filtered on this feature.
      //* - If the "Value Filter" is filled then a record is added for the featue for Table="Contact Feature Type",
      //*   this is use as a filter on the Value.
      //* - If the "Comment Filter" is filled then a record is added for the featue for Table="Contact Feature Type",
      //*   this is use as a filter on the Comments.

      RefCritLine.LOCKTABLE;
      RefCritLine.SETRANGE("Reference No.", RefNo);
      RefCritLine.SETRANGE("Reference Type", RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Feature);
      RefCritLine.DELETEALL;

      TmpRefFeatFilter.RESET;
      IF TmpRefFeatFilter.FINDSET THEN BEGIN
        REPEAT
          IF TmpRefFeatFilter."Filter on Feature" THEN BEGIN
            ContFeature.RESET;
            ContFeature.SETRANGE("Feature Group", TmpRefFeatFilter."Feature Group");
            ContFeature.SETRANGE(Code, TmpRefFeatFilter.Feature);
            InsertFeatureCriteriaFilter(RefNo, RefType, DATABASE::"Contact Feature",
              (ContFeature.GETFILTERS <> ''), ContFeature.GETVIEW(FALSE),
              TmpRefFeatFilter."Feature Group", TmpRefFeatFilter.Feature);
            FilterInserted := TRUE;
          END;
          //
          IF TmpRefFeatFilter."Value Filter" <> '' THEN BEGIN
            ContFeatType.RESET;
            ContFeatType.SETFILTER(Value, TmpRefFeatFilter."Value Filter");
            InsertFeatureCriteriaFilter(RefNo, RefType, DATABASE::"Contact Feature Type",
              (ContFeatType.GETFILTERS <> ''), ContFeatType.GETVIEW(FALSE),
              TmpRefFeatFilter."Feature Group", TmpRefFeatFilter.Feature);
            FilterInserted := TRUE;
          END;
          //
          IF TmpRefFeatFilter."Comment Filter" <> '' THEN BEGIN
            ContFeatType.RESET;
            ContFeatType.SETFILTER(Comments, TmpRefFeatFilter."Comment Filter");
            InsertFeatureCriteriaFilter(RefNo, RefType, DATABASE::"Contact Feature Type",
              (ContFeatType.GETFILTERS <> ''), ContFeatType.GETVIEW(FALSE),
              TmpRefFeatFilter."Feature Group", TmpRefFeatFilter.Feature);
            FilterInserted := TRUE;
          END;
        UNTIL TmpRefFeatFilter.NEXT = 0;
      END;

      IF FilterInserted OR CombineFeatures THEN
        InsertFeatueCriteriaAction(RefNo, RefType, CombineFeatures);
    END;

    LOCAL PROCEDURE InsertFeatueCriteriaAction@1210190002(RefNo@1000 : Code[20];RefType@1210190000 : Option;CombineFeatures@1001 : Boolean);
    VAR
      RefCritLine@1007 : Record 11125860;
    BEGIN
      RefCritLine.INIT;
      RefCritLine."Reference No." := RefNo;
      RefCritLine."Reference Type" := RefType;
      RefCritLine."Criterion Type" := RefCritLine."Criterion Type"::Feature;
      RefCritLine."Line No." := 1;  //* Only one action record per ref. type, always line no is 1
      RefCritLine.Type := RefCritLine.Type::Action;
      RefCritLine.Action := RefCritLine.Action::Refine;  //* Feature filtering is always 'Refine'
      RefCritLine."Combine Features" := CombineFeatures;
      RefCritLine.INSERT;
    END;

    LOCAL PROCEDURE InsertFeatureCriteriaFilter@1210190004(RefNo@1000 : Code[20];RefType@1210190000 : Option;TableNo@1001 : Integer;HasFilter@1002 : Boolean;View@1003 : Text[1024];FeatureGroup@1210190003 : Text[50];Feature@1210190004 : Code[20]);
    VAR
      RefCritLine@1004 : Record 11125860;
      NextLineNo@1005 : Integer;
      MaxLenView1@1210190001 : Integer;
    BEGIN
      IF NOT HasFilter THEN
        EXIT;
      MaxLenView1 := MAXSTRLEN(RefCritLine."View 1");

      RefCritLine.SETRANGE("Reference No.",RefNo);
      RefCritLine.SETRANGE("Reference Type",RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Feature);
      IF RefCritLine.FINDLAST THEN
        NextLineNo := RefCritLine."Line No." + 1
      ELSE
        NextLineNo := 2;  //* Lineno 1 reserved for Type=Action

      RefCritLine.INIT;
      RefCritLine."Reference No." := RefNo;
      RefCritLine."Reference Type" := RefType;
      RefCritLine."Criterion Type" := RefCritLine."Criterion Type"::Feature;
      RefCritLine."Line No." := NextLineNo;
      RefCritLine.Type := RefCritLine.Type::Filter;
      RefCritLine.Action := RefCritLine.Action::Refine;  //* Feature filtering is always 'Refine'
      RefCritLine."Table No." := TableNo;
      RefCritLine."View 1" := COPYSTR(View, 1, MaxLenView1);
      IF STRLEN(View) > MaxLenView1 THEN
        RefCritLine."View 2" := COPYSTR(View, MaxLenView1+1);
      RefCritLine."Feature Group" := FeatureGroup;
      RefCritLine.Feature := Feature;
      RefCritLine.INSERT;
    END;

    PROCEDURE GetFeatueCriteriaAction@1210190006(RefNo@1000 : Code[20];RefType@1210190000 : Option;VAR CombineFeatures@1001 : Boolean) : Boolean;
    VAR
      RefCritLine@1007 : Record 11125860;
    BEGIN
      RefCritLine.SETRANGE("Reference No.", RefNo);
      RefCritLine.SETRANGE("Reference Type", RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Feature);
      RefCritLine.SETRANGE("Line No.", 1);   //* Only one actition record per ref. type, always line no is 1
      RefCritLine.SETRANGE(Type, RefCritLine.Type::Action);
      IF RefCritLine.FINDFIRST THEN BEGIN  //* There can be only one Action record per Ref. Type for Features
        CombineFeatures := RefCritLine."Combine Features";
        EXIT(TRUE);
      END ELSE BEGIN
        CombineFeatures := FALSE;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE GetFeatureCriteriaFilters@1210190010(RefNo@1000 : Code[20];RefType@1210190000 : Option;FeatureGroup@1210190003 : Text[50];Feature@1210190004 : Code[20];VAR FilterOnFeature@1210190001 : Boolean;VAR ValueFilter@1210190002 : Text[1024];VAR CommentFilter@1210190005 : Text[1024]);
    VAR
      RefCritLine@1004 : Record 11125860;
      ContFeatType@1005 : Record 11012753;
    BEGIN
      FilterOnFeature := FALSE;
      ValueFilter := '';
      CommentFilter := '';

      RefCritLine.SETRANGE("Reference No.",RefNo);
      RefCritLine.SETRANGE("Reference Type",RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Feature);
      RefCritLine.SETRANGE(Type, RefCritLine.Type::Filter);
      RefCritLine.SETRANGE("Feature Group", FeatureGroup);
      RefCritLine.SETRANGE(Feature, Feature);

      RefCritLine.SETRANGE("Table No.", DATABASE::"Contact Feature");
      IF RefCritLine.ISEMPTY THEN
        EXIT;
      FilterOnFeature := TRUE;

      RefCritLine.SETRANGE("Table No.", DATABASE::"Contact Feature Type");
      IF RefCritLine.FINDFIRST THEN BEGIN
        REPEAT
          ContFeatType.RESET;
          ContFeatType.SETVIEW(RefCritLine."View 1" + RefCritLine."View 2");
          IF ContFeatType.GETFILTER(Value) <> '' THEN
            ValueFilter := ContFeatType.GETFILTER(Value);
          IF ContFeatType.GETFILTER(Comments) <> '' THEN
            CommentFilter := ContFeatType.GETFILTER(Comments);
        UNTIL RefCritLine.NEXT = 0;
      END;
    END;

    PROCEDURE BuildTmpDataFilteredOnFeature@1210190012(RefNo@1210190000 : Code[20];RefLineType@1210190001 : Option;VAR TmpRefLine@1210190002 : TEMPORARY Record 11125859);
    VAR
      RefHead@1210190003 : Record 11125858;
      RefCritLine@1210190007 : Record 11125860;
      Proj@1210190004 : Record 11072003;
      ServContr@1210190005 : Record 11012812;
      Window@1210190006 : Dialog;
      BuildRefCrit@1210190009 : Boolean;
    BEGIN
      //* TmpRefLine (Reference Tool Line) must be 'Temporary' in the calling process (table may only be used as temporary).
      RefHead.GET(RefNo);
      RefHead.TESTFIELD("No.");;

      TmpRefLine.RESET;
      TmpRefLine.DELETEALL;

      BuildRefCrit := TRUE;
      TmpRefLine.INIT;
      TmpRefLine."Reference No." := RefNo;  //* These fields are the same
      TmpRefLine.Type := RefLineType;       //* for all new records

      Window.OPEN('#1########## #2#############');
      CASE RefLineType OF
        TmpRefLine.Type::Project:
          BEGIN
            Window.UPDATE(1, Proj.TABLECAPTION);
            Proj.SETFILTER("Available as Reference", '<>%1', Proj."Available as Reference"::Never);
            IF Proj.FINDSET THEN BEGIN
              REPEAT
                Window.UPDATE(2, Proj."No.");
                IF CheckNumberInFeatureFilters(
                  RefNo, RefCritLine."Reference Type"::Project, Proj."No.", BuildRefCrit)
                THEN BEGIN
                  TmpRefLine."No." := Proj."No.";
                  TmpRefLine.INSERT;
                END;
                IF BuildRefCrit THEN BEGIN
                  IF TmpRefCritLineFeat.ISEMPTY THEN
                    EXIT;  //* No filter on a feature. So exit, do not read/insert all projects
                  BuildRefCrit := FALSE;
                END;
              UNTIL Proj.NEXT = 0;
            END;
          END;
        TmpRefLine.Type::ServiceContract:
          BEGIN
            Window.UPDATE(1, ServContr.TABLECAPTION);
            ServContr.SETFILTER("Available as Reference", '<>%1', ServContr."Available as Reference"::Never);
            IF ServContr.FINDSET THEN BEGIN
              REPEAT
                Window.UPDATE(2, ServContr."No.");
                IF CheckNumberInFeatureFilters(
                  RefNo, RefCritLine."Reference Type"::ServiceContract, ServContr."No.", BuildRefCrit)
                THEN BEGIN
                  TmpRefLine."No." := ServContr."No.";
                  TmpRefLine.INSERT;
                END;
                IF BuildRefCrit THEN BEGIN
                  IF TmpRefCritLineFeat.ISEMPTY THEN
                    EXIT;  //* No filter on a feature. So exit, do not read/insert all serv.contracts
                  BuildRefCrit := FALSE;
                END;
              UNTIL ServContr.NEXT = 0;
            END;
          END;
      END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE CheckNumberInFeatureFilters@1210190013(RefNo@1210190001 : Code[20];RefType@1210190000 : Option;CurrNo@1210190002 : Code[20];BuildRefCrit@1210190008 : Boolean) : Boolean;
    VAR
      RefCritLine@1210190003 : Record 11125860;
      ContFeatType@1210190004 : Record 11012753;
      ContFeatType2@1210190007 : Record 11012753;
      CombineFilters@1210190005 : Boolean;
    BEGIN
      IF BuildRefCrit THEN BEGIN
        TmpRefCritLineFeat.RESET;
        TmpRefCritLineFeat.DELETEALL;
        TmpRefCritLineFeatType.RESET;
        TmpRefCritLineFeat.DELETEALL;

        IF NOT GetFeatueCriteriaAction(RefNo, RefType, CombineFilters) THEN
          EXIT(FALSE);  //* No feature filtering

        RefCritLine.SETRANGE("Reference No.",RefNo);
        RefCritLine.SETRANGE("Reference Type",RefType);
        RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Feature);
        RefCritLine.SETRANGE(Type, RefCritLine.Type::Filter);
        RefCritLine.SETRANGE("Table No.", DATABASE::"Contact Feature");
        IF NOT RefCritLine.FINDSET THEN
          EXIT(FALSE);  //* No filter on a feature
        REPEAT
          TmpRefCritLineFeat := RefCritLine;
          TmpRefCritLineFeat."Combine Features" := CombineFilters;
          TmpRefCritLineFeat.INSERT;
        UNTIL RefCritLine.NEXT = 0;
        //
        RefCritLine.SETRANGE("Table No.", DATABASE::"Contact Feature Type");
        IF RefCritLine.FINDSET THEN BEGIN  //* Feature types not obligatoty, so no exit(false) if not present
          REPEAT
            TmpRefCritLineFeatType := RefCritLine;
            TmpRefCritLineFeatType.INSERT;
          UNTIL RefCritLine.NEXT = 0;
        END;
      END;

      IF TmpRefCritLineFeat.ISEMPTY THEN
        EXIT(FALSE);  //* No filter on a feature

      ContFeatType.SETCURRENTKEY("Relation Type", Code, "Feature Group", Feature);
      CASE RefType OF
        RefCritLine."Reference Type"::Project:
          ContFeatType.SETRANGE("Relation Type", ContFeatType."Relation Type"::Job);
        RefCritLine."Reference Type"::ServiceContract:
          ContFeatType.SETRANGE("Relation Type", ContFeatType."Relation Type"::ServiceContract);
      END;
      ContFeatType.SETRANGE(Code, CurrNo);

      TmpRefCritLineFeat.FINDSET;
      CombineFilters := TmpRefCritLineFeat."Combine Features";
      REPEAT
        ContFeatType.SETRANGE("Feature Group", TmpRefCritLineFeat."Feature Group");
        ContFeatType.SETRANGE(Feature, TmpRefCritLineFeat.Feature);
        ContFeatType.SETRANGE(Value);     //* Reset filter
        ContFeatType.SETRANGE(Comments);  //* Reset filter
        IF ContFeatType.ISEMPTY THEN BEGIN
          IF CombineFilters THEN
            EXIT(FALSE);
        END ELSE BEGIN
          TmpRefCritLineFeatType.SETRANGE("Feature Group", TmpRefCritLineFeat."Feature Group");
          TmpRefCritLineFeatType.SETRANGE(Feature, TmpRefCritLineFeat.Feature);
          IF TmpRefCritLineFeatType.FINDFIRST THEN BEGIN  //* Value and Comment filter not in the same record
            REPEAT                                        //* (so max. 2 records per feature)
              ContFeatType2.RESET;
              ContFeatType2.SETVIEW(TmpRefCritLineFeatType."View 1" + TmpRefCritLineFeatType."View 2");
              IF ContFeatType2.GETFILTER(Value) <> '' THEN
                ContFeatType2.COPYFILTER(Value, ContFeatType.Value);
              IF ContFeatType2.GETFILTER(Comments) <> '' THEN
                ContFeatType2.COPYFILTER(Comments, ContFeatType.Comments);
            UNTIL TmpRefCritLineFeatType.NEXT = 0;
          END;
          IF (ContFeatType.GETFILTER(Value) = '') AND (ContFeatType.GETFILTER(Comments) = '') THEN BEGIN
            IF NOT CombineFilters THEN
              EXIT(TRUE);
          END ELSE BEGIN
            IF ContFeatType.ISEMPTY THEN BEGIN
              IF CombineFilters THEN
                EXIT(FALSE);
            END ELSE BEGIN
              IF NOT CombineFilters THEN
                EXIT(TRUE);
            END;
          END;
        END;
      UNTIL TmpRefCritLineFeat.NEXT = 0;

      IF CombineFilters THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CopyTmpDataToRefLine@1210190016(VAR TmpRefLine@1210190000 : TEMPORARY Record 11125859);
    VAR
      RefLine@1210190001 : Record 11125859;
      RefCritLine@1210190002 : Record 11125860;
      Window@1210190009 : Dialog;
      Counter@1210190003 : Integer;
      CounterInsert@1210190004 : Integer;
      MaxFilterLen@1210190008 : Integer;
      PrevType@1210190007 : Option;
      PrevRefNo@1210190006 : Code[20];
      NoFilter@1210190005 : Code[500];
    BEGIN
      //* TmpRefLine (Reference Tool Line) must be 'Temporary' in the calling process (table may only be used as temporary).
      IF NOT TmpRefLine.FINDSET THEN
        EXIT;
      Window.OPEN('#1########## #2#############');

      MaxFilterLen := MAXSTRLEN(RefCritLine."View 1") + MAXSTRLEN(RefCritLine."View 2") - 50;
                      //* 50 psitons reserved for common (sorting/field) data
      PrevRefNo := TmpRefLine."Reference No.";
      PrevType := TmpRefLine.Type;
      REPEAT
        Window.UPDATE(1, TmpRefLine.Type);
        Window.UPDATE(2, TmpRefLine."No.");
        Counter := Counter + 1;
        IF NOT RefLine.GET(TmpRefLine."Reference No.", TmpRefLine.Type, TmpRefLine."No.") THEN BEGIN
          RefLine := TmpRefLine;
          RefLine.INSERT(TRUE);
          CounterInsert := CounterInsert + 1;
          IF (RefLine."Reference No." <> PrevRefNo) OR (RefLine.Type <> PrevType) OR
             (STRLEN(NoFilter) + STRLEN(RefLine."No.") > MaxFilterLen)
          THEN BEGIN
            UpdateNumberCriteria(NoFilter, PrevRefNo, RefLine.ConvertTypeToRefCritLinRefType(PrevType), RefCritLine.Action::Add);
            NoFilter := '';
            PrevRefNo := TmpRefLine."Reference No.";
            PrevType := TmpRefLine.Type;
          END;
          IF NoFilter = '' THEN
            NoFilter := RefLine."No."
          ELSE
            NoFilter := NoFilter + '|' + RefLine."No.";
        END;
      UNTIL TmpRefLine.NEXT = 0;
      IF NoFilter <> '' THEN
        UpdateNumberCriteria(NoFilter, PrevRefNo, RefLine.ConvertTypeToRefCritLinRefType(PrevType), RefCritLine.Action::Add);

      Window.CLOSE;
      IF Counter > CounterInsert THEN
        MESSAGE(Text003 + ', ' + STRSUBSTNO(Text004, Counter-CounterInsert), CounterInsert)
      ELSE
        MESSAGE(Text003, CounterInsert);
    END;

    PROCEDURE RefCriteriaFilter@6(TableNo@1000 : Integer;View@1001 : Text[1024]) : Text[1024];
    VAR
      Proj@1002 : Record 11072003;
      ProjAuth@1003 : Record 11020216;
      ProjPrin@1004 : Record 11012005;
      ProjRespPers@1210190007 : Record 11012040;
      ProjLoc@1210190008 : Record 11012011;
      ServContr@1210190003 : Record 11012812;
      ServContrDpl@1210190005 : Record 11012881;
      ServContrRespPers@1210190009 : Record 11012808;
      ServContrPrio@1210190010 : Record 11012880;
      ServContrAgrmt@1210190011 : Record 11012882;
      CommentLine@1005 : Record 97;
      ContFeatGrp@1210190002 : Record 11012751;
      ContFeature@1210190000 : Record 11012752;
      ContFeatType@1210190001 : Record 11012753;
    BEGIN
      CASE TableNo OF
        DATABASE::Job:
          BEGIN
            Proj.SETVIEW(View);
            EXIT(Proj.GETFILTERS);
          END;
        DATABASE::"Project Authority":
          BEGIN
            ProjAuth.SETVIEW(View);
            EXIT(ProjAuth.GETFILTERS);
          END;
        DATABASE::"Project Principal":
          BEGIN
            ProjPrin.SETVIEW(View);
            EXIT(ProjPrin.GETFILTERS);
          END;
        DATABASE::"Project Responsible Person":
          BEGIN
            ProjRespPers.SETVIEW(View);
            EXIT(ProjRespPers.GETFILTERS);
          END;
        DATABASE::"Project Location":
          BEGIN
            ProjLoc.SETVIEW(View);
            EXIT(ProjLoc.GETFILTERS);
          END;
        DATABASE::"Service-Contract":
          BEGIN
            ServContr.SETVIEW(View);
            EXIT(ServContr.GETFILTERS);
          END;
        DATABASE::"Service Contract Discipline":
          BEGIN
            ServContrDpl.SETVIEW(View);
            EXIT(ServContrDpl.GETFILTERS);
          END;
        DATABASE::"Service Responsible Person":
          BEGIN
            ServContrRespPers.SETVIEW(View);
            EXIT(ServContrRespPers.GETFILTERS);
          END;
        DATABASE::"Service Contract Priority":
          BEGIN
            ServContrPrio.SETVIEW(View);
            EXIT(ServContrPrio.GETFILTERS);
          END;
        DATABASE::"Service Text":
          BEGIN
            ServContrAgrmt.SETVIEW(View);
            EXIT(ServContrAgrmt.GETFILTERS);
          END;
        DATABASE::"Comment Line":
          BEGIN
            CommentLine.SETVIEW(View);
            EXIT(CommentLine.GETFILTERS);
          END;
        DATABASE::"Contact Feature Group":
          BEGIN
            ContFeatGrp.SETVIEW(View);
            EXIT(ContFeatGrp.GETFILTERS);
          END;
        DATABASE::"Contact Feature":
          BEGIN
            ContFeature.SETVIEW(View);
            EXIT(ContFeature.GETFILTERS);
          END;
        DATABASE::"Contact Feature Type":
          BEGIN
            ContFeatType.SETVIEW(View);
            EXIT(ContFeatType.GETFILTERS);
          END;
      END;
    END;

    PROCEDURE SaveCriteria@1210190000(RefHead@1210190000 : Record 11125858;RefType@1210190001 : Option;CritType@1210190002 : Option);
    VAR
      RefCritLine@1000 : Record 11125860;
      RefSavedCritHead@1001 : Record 11125861;
      RefSavedCritLine@1002 : Record 11125862;
      SaveCritFrm@1003 : Page 11072085;
      FormAction@1004 : Action;
      NextLineNo@1210190003 : Integer;
    BEGIN
      RefHead.TESTFIELD("No.");
      RefCritLine.SETRANGE("Reference No.", RefHead."No.");
      RefCritLine.SETRANGE("Reference Type", RefType);
      RefCritLine.SETRANGE("Criterion Type", CritType);
      RefCritLine.SETRANGE(Type, RefCritLine.Type::Action);
      RefCritLine.FINDFIRST;  //* Error if not exists, so do not use 'IF ...'
      IF CritType = RefCritLine."Criterion Type"::Feature THEN BEGIN
        RefCritLine.SETRANGE(Type, RefCritLine.Type::Filter);
        RefCritLine.FINDFIRST;  //* Idem, error if not exists
      END;

      SaveCritFrm.SetFromRefTool(RefHead.Description);
      SaveCritFrm.RUNMODAL;
      SaveCritFrm.GetValues(FormAction, RefSavedCritHead.Code, RefSavedCritHead.Description);
      IF FormAction = ACTION::OK THEN BEGIN
        RefSavedCritHead."Reference Type" := RefType;
        RefSavedCritHead."Criterion Type" := CritType;
        RefSavedCritHead.INSERT(TRUE);
        //
        NextLineNo := 1;
        RefCritLine.RESET;
        RefCritLine.SETRANGE("Reference No.", RefHead."No.");
        RefCritLine.SETRANGE("Reference Type", RefType);
        RefCritLine.SETRANGE("Criterion Type", CritType);
        RefCritLine.FINDSET;
        REPEAT
          RefSavedCritLine.INIT;
          RefSavedCritLine."Criteria Code" := RefSavedCritHead.Code;
          RefSavedCritLine."Line No." := NextLineNo;
          RefSavedCritLine.Type := RefCritLine.Type;
          RefSavedCritLine.Action := RefCritLine.Action;
          RefSavedCritLine."Table No." := RefCritLine."Table No.";
          RefSavedCritLine."View 1" := RefCritLine."View 1";
          RefSavedCritLine."View 2" := RefCritLine."View 2";
          IF RefSavedCritHead."Criterion Type" = RefSavedCritHead."Criterion Type"::Feature THEN BEGIN
            IF RefSavedCritLine.Type = RefSavedCritLine.Type::Action THEN
              RefSavedCritLine."Combine Features" := RefCritLine."Combine Features";
            RefSavedCritLine."Feature Group" := RefCritLine."Feature Group";
            RefSavedCritLine.Feature := RefCritLine.Feature;
          END;
          RefSavedCritLine.INSERT;
          NextLineNo := NextLineNo + 1;
        UNTIL RefCritLine.NEXT = 0;
      END;
    END;

    PROCEDURE UseSavedCriteriaCommon@1210190001(RefNo@1210190001 : Code[20];RefType@1210190003 : Option);
    VAR
      RefHead@1210190002 : Record 11125858;
      RefCritLine@1210190004 : Record 11125860;
      RefSavedCritHead@1210190000 : Record 11125861;
    BEGIN
      RefHead.GET(RefNo);
      RefHead.TESTFIELD("No.");

      RefCritLine.SETRANGE("Reference No.", RefNo);
      RefCritLine.SETRANGE("Reference Type", RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Common);
      RefCritLine.SETRANGE(Type, RefCritLine.Type::Action);
      IF NOT RefCritLine.ISEMPTY THEN BEGIN
        IF NOT CONFIRM(Text001, FALSE, RefCritLine.FIELDCAPTION("Reference No."), RefNo) THEN
          EXIT;
      END;

      RefSavedCritHead.FILTERGROUP(9);
      RefSavedCritHead.SETRANGE("Reference Type", RefType);
      RefSavedCritHead.SETRANGE("Criterion Type", RefSavedCritHead."Criterion Type"::Common);
      RefSavedCritHead.FILTERGROUP(0);
      IF PAGE.RUNMODAL(PAGE::"Ref. Tool Saved Criteria List", RefSavedCritHead) = ACTION::LookupOK THEN BEGIN
        IF RefSavedCritHead.Code <> '' THEN
          ProcessSavedCriteriaActions(RefNo, RefSavedCritHead);
      END;
    END;

    LOCAL PROCEDURE ProcessSavedCriteriaActions@1210190005(RefNo@1210190014 : Code[20];RefSavedCritHead@1210190000 : Record 11125861);
    VAR
      RefSavedCritLineAction@1210190001 : Record 11125862;
      RefSavedCritLine@1210190002 : Record 11125862;
      Proj@1210190007 : Record 11072003;
      ProjAuth@1210190008 : Record 11020216;
      ProjPrin@1210190009 : Record 11012005;
      ProjRespPers@1210190003 : Record 11012040;
      ProjLoc@1210190004 : Record 11012011;
      ProjComm@1210190010 : Record 97;
      ServContr@1210190015 : Record 11012812;
      ServContrDpl@1210190017 : Record 11012881;
      ServContrRespPers@1210190024 : Record 11012808;
      ServContrPrio@1210190025 : Record 11012880;
      ServContrAgrmt@1210190026 : Record 11012882;
      ServContrCom@1210190019 : Record 97;
      AddProjects@1210190011 : Report 11125858;
      RefineProjects@1210190012 : Report 11125859;
      ReduceProjects@1210190013 : Report 11125860;
      AddServContrs@1210190020 : Report 11125862;
      RefineServContrs@1210190021 : Report 11125863;
      ReduceServContrs@1210190022 : Report 11125864;
      EndOfAction@1210190023 : Boolean;
      ActionFiltersFound@1210190005 : Boolean;
      TableFound@1210190006 : Boolean;
    BEGIN
      RefSavedCritLineAction.SETRANGE("Criteria Code", RefSavedCritHead.Code);
      RefSavedCritLineAction.SETRANGE(Type, RefSavedCritLineAction.Type::Action);
      IF RefSavedCritLineAction.FINDSET THEN BEGIN
        REPEAT
          EndOfAction := FALSE;
          ActionFiltersFound := FALSE;
          Proj.RESET;
          ProjAuth.RESET;
          ProjPrin.RESET;
          ProjRespPers.RESET;
          ProjLoc.RESET;
          ProjComm.RESET;
          ServContr.RESET;
          ServContrDpl.RESET;
          ServContrRespPers.RESET;
          ServContrPrio.RESET;
          ServContrAgrmt.RESET;
          ServContrCom.RESET;
          //
          RefSavedCritLine.RESET;
          RefSavedCritLine.SETRANGE("Criteria Code",RefSavedCritLineAction."Criteria Code");
          RefSavedCritLine.SETFILTER("Line No.", '>%1', RefSavedCritLineAction."Line No.");
          IF RefSavedCritLine.FINDFIRST THEN BEGIN
            REPEAT
              IF RefSavedCritLine.Type <> RefSavedCritLine.Type::Filter THEN
                EndOfAction := TRUE
              ELSE BEGIN
                TableFound := TRUE;
                CASE RefSavedCritHead."Reference Type" OF
                  RefSavedCritHead."Reference Type"::Project:
                    BEGIN
                      CASE RefSavedCritLine."Table No." OF
                        DATABASE::Job:
                          Proj.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Project Authority":
                          ProjAuth.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Project Principal":
                          ProjPrin.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Project Responsible Person":
                          ProjRespPers.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Project Location":
                          ProjLoc.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Comment Line":
                          ProjComm.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        ELSE
                          TableFound := FALSE;
                      END;
                    END;
                  RefSavedCritHead."Reference Type"::ServiceContract:
                    BEGIN
                      CASE RefSavedCritLine."Table No." OF
                        DATABASE::"Service-Contract":
                          ServContr.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Service Contract Discipline":
                          ServContrDpl.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Service Responsible Person":
                          ServContrRespPers.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Service Contract Priority":
                          ServContrPrio.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Service Text":
                          ServContrAgrmt.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        DATABASE::"Comment Line":
                          ServContrCom.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                        ELSE
                          TableFound := FALSE;
                      END;
                    END;
                  ELSE
                    TableFound := FALSE;
                END;
                IF (NOT ActionFiltersFound) AND TableFound THEN
                  ActionFiltersFound := TRUE;
              END;
            UNTIL (RefSavedCritLine.NEXT = 0) OR EndOfAction;
          END;
          IF ActionFiltersFound THEN BEGIN
            CASE RefSavedCritHead."Reference Type" OF
              RefSavedCritHead."Reference Type"::Project:
                BEGIN
                  CASE RefSavedCritLineAction.Action OF
                    RefSavedCritLineAction.Action::Add:
                      BEGIN
                        CLEAR(AddProjects);
                        AddProjects.SETTABLEVIEW(Proj);
                        AddProjects.SETTABLEVIEW(ProjAuth);
                        AddProjects.SETTABLEVIEW(ProjPrin);
                        AddProjects.SETTABLEVIEW(ProjRespPers);
                        AddProjects.SETTABLEVIEW(ProjLoc);
                        AddProjects.SETTABLEVIEW(ProjComm);
                        AddProjects.SetOptions(RefNo);
                        AddProjects.USEREQUESTPAGE(FALSE);
                        AddProjects.RUNMODAL;
                      END;
                    RefSavedCritLineAction.Action::Refine:
                      BEGIN
                        CLEAR(RefineProjects);
                        RefineProjects.SETTABLEVIEW(Proj);
                        RefineProjects.SETTABLEVIEW(ProjAuth);
                        RefineProjects.SETTABLEVIEW(ProjPrin);
                        RefineProjects.SETTABLEVIEW(ProjRespPers);
                        RefineProjects.SETTABLEVIEW(ProjLoc);
                        RefineProjects.SETTABLEVIEW(ProjComm);
                        RefineProjects.SetOptions(RefNo);
                        RefineProjects.USEREQUESTPAGE(FALSE);
                        RefineProjects.RUNMODAL;
                      END;
                    RefSavedCritLineAction.Action::Reduce:
                      BEGIN
                        CLEAR(ReduceProjects);
                        ReduceProjects.SETTABLEVIEW(Proj);
                        ReduceProjects.SETTABLEVIEW(ProjAuth);
                        ReduceProjects.SETTABLEVIEW(ProjPrin);
                        ReduceProjects.SETTABLEVIEW(ProjRespPers);
                        ReduceProjects.SETTABLEVIEW(ProjLoc);
                        ReduceProjects.SETTABLEVIEW(ProjComm);
                        ReduceProjects.SetOptions(RefNo);
                        ReduceProjects.USEREQUESTPAGE(FALSE);
                        ReduceProjects.RUNMODAL;
                      END;
                  END;
                END;
              RefSavedCritHead."Reference Type"::ServiceContract:
                BEGIN
                  CASE RefSavedCritLineAction.Action OF
                    RefSavedCritLineAction.Action::Add:
                      BEGIN
                        CLEAR(AddServContrs);
                        AddServContrs.SETTABLEVIEW(ServContr);
                        AddServContrs.SETTABLEVIEW(ServContrDpl);
                        AddServContrs.SETTABLEVIEW(ServContrRespPers);
                        AddServContrs.SETTABLEVIEW(ServContrPrio);
                        AddServContrs.SETTABLEVIEW(ServContrAgrmt);
                        AddServContrs.SETTABLEVIEW(ServContrCom);
                        AddServContrs.SetOptions(RefNo);
                        AddServContrs.USEREQUESTPAGE(FALSE);
                        AddServContrs.RUNMODAL;
                      END;
                    RefSavedCritLineAction.Action::Refine:
                      BEGIN
                        CLEAR(RefineServContrs);
                        RefineServContrs.SETTABLEVIEW(ServContr);
                        RefineServContrs.SETTABLEVIEW(ServContrDpl);
                        RefineServContrs.SETTABLEVIEW(ServContrRespPers);
                        RefineServContrs.SETTABLEVIEW(ServContrPrio);
                        RefineServContrs.SETTABLEVIEW(ServContrAgrmt);
                        RefineServContrs.SETTABLEVIEW(ServContrCom);
                        RefineServContrs.SetOptions(RefNo);
                        RefineProjects.USEREQUESTPAGE(FALSE);
                        RefineProjects.RUNMODAL;
                      END;
                    RefSavedCritLineAction.Action::Reduce:
                      BEGIN
                        CLEAR(ReduceProjects);
                        ReduceServContrs.SETTABLEVIEW(ServContr);
                        ReduceServContrs.SETTABLEVIEW(ServContrDpl);
                        ReduceServContrs.SETTABLEVIEW(ServContrRespPers);
                        ReduceServContrs.SETTABLEVIEW(ServContrPrio);
                        ReduceServContrs.SETTABLEVIEW(ServContrAgrmt);
                        ReduceServContrs.SETTABLEVIEW(ServContrCom);
                        ReduceServContrs.SetOptions(RefNo);
                        ReduceServContrs.USEREQUESTPAGE(FALSE);
                        ReduceServContrs.RUNMODAL;
                      END;
                  END;
                END;
            END;
          END;
        UNTIL RefSavedCritLineAction.NEXT = 0;
      END;
    END;

    PROCEDURE UseSavedCriteriaFeatureFilters@1210190011(RefType@1210190003 : Option;VAR TmpRefFeatFilter@1210190006 : TEMPORARY Record 11125863;VAR CombineFeatures@1210190005 : Boolean) Modified : Boolean;
    VAR
      RefSavedCritHead@1210190000 : Record 11125861;
      RefSavedCritLine@1210190001 : Record 11125862;
      ContFeatType@1210190002 : Record 11012753;
      TmpRefFeatFilterSave@1210190007 : TEMPORARY Record 11125863;
    BEGIN
      //* TmpRefFeatFilter (Ref. Tool Feature Filter) must be 'Temporary' in the calling process (table may only be used as temporary).
      //* In the tmp table all features that are allowed for the current reference type are already present, so only update records in
      //* the tmp table. So if copied from another reference type (where other featues can be allowed) only update the features that
      //* are allowed for the current reference type.
      TmpRefFeatFilterSave := TmpRefFeatFilter;
      TmpRefFeatFilter.RESET;
      TmpRefFeatFilter.FINDFIRST;  //* Must exist

      RefSavedCritHead.SETRANGE("Reference Type", RefType); //* In filtergroup 0, feature filters from another ref. type allowed
      RefSavedCritHead.FILTERGROUP(9);
      RefSavedCritHead.SETRANGE("Criterion Type", RefSavedCritHead."Criterion Type"::Feature);
      RefSavedCritHead.FILTERGROUP(0);
      IF PAGE.RUNMODAL(PAGE::"Ref. Tool Saved Criteria List", RefSavedCritHead) = ACTION::LookupOK THEN BEGIN
        IF (RefSavedCritHead.Code<>'') AND (RefSavedCritHead."Criterion Type"=RefSavedCritHead."Criterion Type"::Feature) THEN BEGIN
          //* Reset all filters in tmp table
          TmpRefFeatFilter.RESET;
          TmpRefFeatFilter.SETRANGE("Filter on Feature", TRUE);
          TmpRefFeatFilter.MODIFYALL("Filter on Feature", FALSE);
          TmpRefFeatFilter.RESET;
          TmpRefFeatFilter.SETFILTER("Value Filter", '<>%1', '');
          TmpRefFeatFilter.MODIFYALL("Value Filter", '');
          TmpRefFeatFilter.RESET;
          TmpRefFeatFilter.SETFILTER("Comment Filter", '<>%1', '');
          TmpRefFeatFilter.MODIFYALL("Comment Filter", '');
          TmpRefFeatFilter.RESET;
          Modified := TRUE;

          //* Read Action (determine Combined Features)
          RefSavedCritLine.SETRANGE("Criteria Code", RefSavedCritHead.Code);
          RefSavedCritLine.SETRANGE(Type, RefSavedCritLine.Type::Action);
          IF RefSavedCritLine.FINDFIRST THEN
            CombineFeatures := RefSavedCritLine."Combine Features"
          ELSE
            CombineFeatures := FALSE;

          //* Read Filters
          RefSavedCritLine.RESET;
          RefSavedCritLine.SETRANGE("Criteria Code", RefSavedCritHead.Code);
          RefSavedCritLine.SETRANGE(Type, RefSavedCritLine.Type::Filter);
          IF RefSavedCritLine.FINDSET THEN BEGIN
            REPEAT
              IF TmpRefFeatFilter.GET(RefSavedCritLine."Feature Group", RefSavedCritLine.Feature) THEN BEGIN
                CASE RefSavedCritLine."Table No." OF
                  DATABASE::"Contact Feature":
                    TmpRefFeatFilter."Filter on Feature" := TRUE;
                  DATABASE::"Contact Feature Type":
                    BEGIN
                      ContFeatType.RESET;
                      ContFeatType.SETVIEW(RefSavedCritLine."View 1" + RefSavedCritLine."View 2");
                      IF ContFeatType.GETFILTER(Value) <> '' THEN
                        TmpRefFeatFilter."Value Filter" := ContFeatType.GETFILTER(Value);
                      IF ContFeatType.GETFILTER(Comments) <> '' THEN
                        TmpRefFeatFilter."Comment Filter" := ContFeatType.GETFILTER(Comments);
                    END;
                END;
                TmpRefFeatFilter.MODIFY;
              END;
            UNTIL RefSavedCritLine.NEXT = 0;
          END;
        END;
      END;

      IF NOT TmpRefFeatFilter.GET(TmpRefFeatFilterSave."Feature Group", TmpRefFeatFilterSave.Feature) THEN
        IF TmpRefFeatFilter.FINDFIRST THEN;
    END;

    PROCEDURE Restart@1210190003(RefNo@1210190001 : Code[20];RefType@1210190000 : Option);
    VAR
      RefHead@1210190003 : Record 11125858;
      RefLine@1210190004 : Record 11125859;
      RefCritLine@1210190002 : Record 11125860;
      RefCritLine2@1210190005 : Record 11125860;
      FoundRefLines@1210190006 : Boolean;
      FoundCritLines@1210190007 : Boolean;
      FoundFeatFilters@1210190008 : Boolean;
    BEGIN
      RefHead.GET(RefNo);
      RefHead.TESTFIELD("No.");

      RefLine.SETRANGE("Reference No.", RefNo);
      CASE RefType OF
        RefCritLine."Reference Type"::Project:
          RefLine.SETRANGE(Type, RefLine.Type::Project);
        RefCritLine."Reference Type"::ServiceContract:
          RefLine.SETRANGE(Type, RefLine.Type::ServiceContract);
        ELSE
          EXIT;
      END;
      FoundRefLines := (NOT RefLine.ISEMPTY);

      RefCritLine.SETRANGE("Reference No.", RefNo);
      RefCritLine.SETRANGE("Reference Type", RefType);
      RefCritLine.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Common);
      FoundCritLines := (NOT RefCritLine.ISEMPTY);

      RefCritLine2.SETRANGE("Reference No.", RefNo);
      RefCritLine2.SETRANGE("Reference Type", RefType);
      RefCritLine2.SETRANGE("Criterion Type", RefCritLine."Criterion Type"::Feature);
      FoundFeatFilters := (NOT RefCritLine2.ISEMPTY);

      IF (NOT FoundRefLines) AND (NOT FoundCritLines) AND (NOT FoundFeatFilters) THEN
        EXIT;
      RefCritLine."Reference Type" := RefType;
      IF NOT CONFIRM(Text002, FALSE, RefLine.FIELDCAPTION(Type), RefCritLine."Reference Type") THEN
        EXIT;

      RefLine.DELETEALL;
      RefCritLine.DELETEALL;
      RefCritLine2.DELETEALL;
    END;

    BEGIN
    END.
  }
}

