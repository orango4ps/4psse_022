OBJECT Report 11012480 Send Purchase Order GS1
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Einkaufsbestellung senden (GS1-Format);
               ENU=Send Purchase Order GS1;
               NLD=Inkooporder zenden (GS1 formaat);
               NOR=Sende innkjõpsordre GS1;
               SVE=Skicka inkîpsorder GS1];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ThrowError := TRUE; //This must be TRUE (for debugging reasons, it can temporarily be set to FALSE)
                   OrderVersionGS1 := '008';
                   SaveRequestAlways := FALSE; //this must be FALSE (for debugging reasons, it can temporarily be set to TRUE)
                 END;

    OnPostReport=BEGIN
                   IF (NOT RequestIsSend) THEN
                     MESSAGE(Text003);
                 END;

  }
  DATASET
  {
    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=BEGIN
                               IF (NOT ThrowError) THEN
                                 MESSAGE('NOTE: ''ThrowError'' is FALSE but must be TRUE !!\Change this in OnInitReport before you deliver !!');
                               IF (SaveRequestAlways) THEN
                                 MESSAGE('NOTE: ''SaveRequestAlways'' is TRUE but must be FALSE !!\Change this in OnInitReport before you deliver !!');
                               IF "Purchase Header".COUNT > 1 THEN
                                 ERROR(Text006, "Purchase Header".TABLECAPTION);
                             END;

               OnAfterGetRecord=VAR
                                  PurchasePlanPhase@1100528402 : Record 11020417;
                                  PurchasePlanManagement@1100528401 : Codeunit 11012242;
                                  Action@1100528400 : 'Consent,Print,ICMStatus,Word,Confirm,OrderStatus,QuoteStatus,Manual,E-mail,GS1';
                                BEGIN
                                  PurchasePlanManagement.TestPhaseCanBeFinished("Purchase Header", Action::GS1, 1, PurchasePlanPhase);
                                  CLEAR(WebServiceMgt);

                                  CompanyInformation.GET('');
                                  Vendor.GET("Purchase Header"."Buy-from Vendor No.");
                                  GetAndCheckWebServiceURL;
                                  SetGlobalVars;

                                  CheckOrderHeader;
                                  CreateBasicRequest;
                                  AddOrderHeader;
                                END;

               OnPostDataItem=VAR
                                PurchaseHeaderExtension@1100528401 : Record 11020398;
                                PurchasePlanManagement@1100528402 : Codeunit 11012242;
                                Action@1100528400 : 'Consent,Print,ICMStatus,Word,Confirm,OrderStatus,QuoteStatus,Manual,E-mail,GS1';
                              BEGIN
                                IF (RequestIsFilled) THEN BEGIN
                                  PurchasePlanManagement.FinishPhase("Purchase Header", Action::GS1, 1);
                                  IF (SaveRequestToFile) AND (SaveRequestAlways) THEN
                                    WriteRequestToFile;

                                  CASE RequestType OF
                                    RequestType::SOAP:
                                      WebServiceMgt.SendSOAPRequest2('Create', WebServiceURL.URL, WebServiceURL.Login, WebServiceURL.Password, ThrowError);
                                    RequestType::RPC:
                                      WebServiceMgt.SendXMLRPCRequest('', WebServiceURL.URL, WebServiceURL.Login, WebServiceURL.Password, ThrowError);
                                  END;
                                  "Purchase Header"."ICM File Created on" := TODAY;
                                  "Purchase Header"."ICM File Sent" := TRUE;
                                  "Purchase Header".MODIFY;

                                  PurchaseHeaderExtension.GetPurchHeadExtension("Purchase Header"."Document Type", "Purchase Header"."No.");
                                  PurchaseHeaderExtension."GS1 Sent by" := USERID;
                                  PurchaseHeaderExtension."GS1 Sent on" := TODAY;
                                  PurchaseHeaderExtension.UpdatePurchHeadExtension("Purchase Header"."Document Type", "Purchase Header"."No.");

                                  IF (SaveRequestToFile) AND (NOT SaveRequestAlways) THEN
                                    WriteRequestToFile;

                                  RequestIsSend := TRUE;

                                END;
                                RequestIsFilled := FALSE;
                              END;
                               }

    { 6547;1   ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnPreDataItem=BEGIN
                               "Purchase Line".SETFILTER("Shortcut Dimension 2 Code", '<>%1', '');
                               "Purchase Line".SETRANGE("Removal Contribution", FALSE);
                               "Purchase Line".SETRANGE("Vendor Charge", FALSE);
                               "Purchase Line".SETRANGE("Exclude From Electronic Order", FALSE);
                             END;

               OnAfterGetRecord=BEGIN
                                  AddOrderLine;
                                END;

               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=Save Order to File;
                  CaptionML=[DEU=Auftrag in Datei speichern;
                             ENU=Save Order to File;
                             NLD=Order opslaan in bestand;
                             NOR=Lagre ordre i fil;
                             SVE=Spara order i fil];
                  SourceExpr=SaveRequestToFile }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      WebServiceURL@1210190001 : Record 11020659;
      Vendor@1210190002 : Record 23;
      TradeItem@1210190017 : Record 11012317;
      CompanyInformation@1210190016 : Record 79;
      WebServiceMgt@1210190000 : Codeunit 11012266;
      Namespaces@1210190018 : ARRAY [10,2] OF Text[250];
      RootTagName@1210190006 : Text[30];
      RootXpath@1210190007 : Text[250];
      OrderHeaderTagName@1210190008 : Text[30];
      OrderHeaderXpath@1210190009 : Text[250];
      OrderLineTagName@1210190010 : Text[30];
      OrderLineXpath@1210190011 : Text[250];
      Text000@1210190013 : TextConst 'DEU=Feld %1 %2 ist zu lang (aktuelle LÑnge: %3, sollte %4 sein mÅssen);ENU=Field %1 %2 is too long (current length: %3 and should be %4).;NLD=Veld %1 %2 is te lang (huidige lengte: %3 en zou %4 moeten zijn).;NOR=Feltet %1 %2 er for langt (aktuell lengde: %3 og skal vëre %4).;SVE=FÑltet %1 %2 Ñr fîr lÜngt (aktuell lÑngd: %3 och ska vara %4).';
      OrderVersionGS1@1210190019 : Text[10];
      RequestIsFilled@1210190012 : Boolean;
      RequestIsSend@1210190020 : Boolean;
      SaveRequestToFile@1210190021 : Boolean;
      SaveRequestAlways@1100528300 : Boolean;
      ThrowError@1100528401 : Boolean;
      RequestType@1210190014 : ',SOAP,RPC';
      Text001@1210190005 : TextConst 'DEU=Feld %1 %2 hat dem GS1-Standard gemÑss (aktueller Wert: ''%3'') keinen Korrekturwert.;ENU=Field %1 %2 does not have a valid value conform the GS1 standard (current value: ''%3'').;NLD=Veld %1 %2 heeft geen correcte waarde volgens de GS1 standaard (huidige waarde: ''%3'').;NOR=Feltet %1 %2 mangler gyldig verdi som oppfyller GS1-standarden (aktuell verdi: ''%3'').;SVE=FÑltet %1 %2 saknar giltigt vÑrde som îverensstÑmmer med GS1-standarden (aktuellt vÑrde: ''%3'').';
      Text002@1210190015 : TextConst 'DEU=%1 ''%2'' nicht vorhanden.;ENU=%1 ''%2'' does not exist.;NLD=%1 ''%2'' bestaan niet.;NOR=%1 ''%2'' finnes ikke.;SVE=%1 %2 finns inte.';
      Text003@1210190003 : TextConst 'DEU=Keine Anfrage versendet, weil keine Zeilen den Auswahlkriterien entspechen.;ENU=No request send, because no lines did meet the selection criteria.;NLD=Geen request verstuurt, omdat er geen regels voldeden aan de selectie criteria.;NOR=Ingen forespõrsel send fordi ingen rader oppfylte utvalgskriteriene.;SVE=Ingen fîrfrÜgan har skickats dÑrfîr att inga rader uppfyllde urvalskriterierna.';
      ConfirmEmptyTradeItem@1210190022 : Boolean;
      Text004@1210190023 : TextConst 'DEU=Feld %1 ist leer. Mîchten Sie fortfahren?;ENU=Field %1 is empty.Do you want to continue?;NLD=Veld %1 is leeg. Wilt u doorgaan?;NOR=Feltet %1 er tomt. Vil du fortsette?;SVE=FÑltet %1 Ñr tomt. Vill du fortsÑtta?';
      Text005@1210190024 : TextConst 'DEU=Prozess abgebrochen;ENU=Process aborted;NLD=Proces afgebroken;NOR=Prosess avbrutt;SVE=Processen avbrîts';
      Text006@1100528400 : TextConst 'DEU=Es kann nur 1 %1 gesendet werden.;ENU=Only 1 %1 can be sent.;NLD=Er kan slechts 1 %1 verzonden worden.';

    LOCAL PROCEDURE CreateBasicRequest@1210190006();
    BEGIN
      CASE RequestType OF
        RequestType::SOAP: WebServiceMgt.PrepareSOAPRequest(Namespaces[1,2], RootTagName);
        RequestType::RPC: WebServiceMgt.PrepareXMLRPCRequest(Namespaces[1,2], RootTagName);
      END;
      WebServiceMgt.AddRequestSelectionNamespaces(Namespaces);
    END;

    LOCAL PROCEDURE AddOrderHeader@1210190004();
    VAR
      ICMCustomerCode@1100528300 : Code[20];
    BEGIN
      CheckOrderHeader;

      WebServiceMgt.AppendParameter(RootXpath, Namespaces[1,2], OrderHeaderTagName, '');

      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], 'OrderVersion', OrderVersionGS1);
      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], 'OrderTypeCode', '220');
      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], 'ScenarioCode', 'X1');
      IF ("Purchase Header"."Document Type" = "Purchase Header"."Document Type"::Quote) THEN
        WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], 'IndicationOrderProposal', 'Yes');
      AddOrderHeaderDocument('Document');

      ICMCustomerCode := GetICMCustomerCode("Purchase Header"."Buy-from Vendor No.", "Purchase Header"."Job No.",
        "Purchase Header".Deliver, "Purchase Header"."Ship-to Location",
        "Purchase Header"."Shortcut Dimension 1 Code");
      IF (ICMCustomerCode <> '') THEN
        AddOrderHeaderContract('Contract', ICMCustomerCode);

      AddOrderHeaderProject('ProjectNumber');
      AddOrderHeaderSupplier('Supplier');
      AddOrderHeaderBuyer('Buyer');
      AddOrderHeaderDeliveryParty('DeliveryParty');
      AddOrderHeaderDeliveryDate('DeliveryDate');
    END;

    LOCAL PROCEDURE AddOrderHeaderDocument@1210190012(TagName@1210190002 : Text[30]);
    VAR
      SalespersonPurchaser@1210190003 : Record 13;
      Xpath@1210190001 : Text[250];
      FreeText@1100525000 : Text[1024];
      FreeText2@1100528300 : Text[250];
    BEGIN
      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderHeaderXpath + '/' + Namespaces[1,1] + ':' + TagName;

      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'DocumentNumber',
        "Purchase Header"."No.");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Date',
        FORMAT("Purchase Header"."Order Date", 0, '<Year4>-<Month,2>-<Day,2>'));
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Time',
        FORMAT(TIME, 0, '<Hours24,2><Filler Character,0>:<Minutes,2>:<Seconds,2>'));

      FreeText := '';
      FreeText2 := '';
      "Purchase Header".HandleShipmentInstruction(0, FreeText, FreeText2);
      IF (FreeText+FreeText2 <> '') THEN
        FreeText += ' ' + FreeText2 + '  ';
      IF ("Purchase Header".Expediter <> '') THEN BEGIN
        SalespersonPurchaser.GET("Purchase Header".Expediter);
        FreeText += "Purchase Header".FIELDCAPTION(Expediter) + ': ' + SalespersonPurchaser.Name;
        IF (SalespersonPurchaser."Phone No." <> '') THEN
          FreeText += ' (' + SalespersonPurchaser."Phone No." + ')';
      END;
      IF (FreeText <> '') THEN
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'FreeText', FreeText);
    END;

    LOCAL PROCEDURE AddOrderHeaderBuyer@1210190001(TagName@1210190002 : Text[30]);
    VAR
      SalespersonPurchaser@1210190003 : Record 13;
      Xpath@1210190001 : Text[250];
    BEGIN
      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderHeaderXpath + '/' + Namespaces[1,1] + ':' + TagName;

      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'GLN', CompanyInformation.GLN);
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'PartyName', CompanyInformation.Name);
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'StreetAndNumber', CompanyInformation.Address);
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Postcode', CompanyInformation."Post Code");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CityName', CompanyInformation.City);
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CountryCode', CompanyInformation."Country/Region Code");

      IF (("Purchase Header"."Purchaser Code" <> '') AND
          (SalespersonPurchaser.GET("Purchase Header"."Purchaser Code")))
      THEN BEGIN
        TagName := 'Contact';
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], TagName, '');
        Xpath := Xpath + '/' + Namespaces[1,1] + ':' + TagName;

        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'ContactName', SalespersonPurchaser.Name);
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Telephone', SalespersonPurchaser."Phone No.");
      END;
    END;

    LOCAL PROCEDURE AddOrderHeaderSupplier@1210190013(TagName@1210190002 : Text[30]);
    VAR
      OrderAddress@1210190001 : Record 224;
      Xpath@1210190000 : Text[250];
    BEGIN
      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderHeaderXpath + '/' + Namespaces[1,1] + ':' + TagName;

      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'GLN', Vendor.GLN);
      IF ("Purchase Header"."Order Address Code" <> '') AND
        (OrderAddress.GET("Purchase Header"."Buy-from Vendor No.", "Purchase Header"."Order Address Code"))
      THEN BEGIN
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'PartyName', OrderAddress.Name);
        IF (OrderAddress."Name 2" <> '') THEN
          WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'PartyName2', OrderAddress."Name 2");
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'StreetAndNumber', OrderAddress.Address);
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Postcode', OrderAddress."Post Code");
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CityName', OrderAddress.City);
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CountryCode', OrderAddress."Country/Region Code");
      END ELSE BEGIN
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'PartyName', "Purchase Header"."Buy-from Vendor Name");
        IF ("Purchase Header"."Buy-from Vendor Name 2" <> '') THEN
          WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'PartyName2', "Purchase Header"."Buy-from Vendor Name 2");
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'StreetAndNumber', "Purchase Header"."Buy-from Address");
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Postcode', "Purchase Header"."Buy-from Post Code");
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CityName', "Purchase Header"."Buy-from City");
        WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CountryCode', "Purchase Header"."Buy-from Country/Region Code");
      END;
    END;

    LOCAL PROCEDURE AddOrderHeaderDeliveryDate@1210190003(TagName@1210190001 : Text[30]);
    VAR
      Xpath@1210190000 : Text[250];
    BEGIN
      IF ("Purchase Header"."Requested Receipt Date" = 0D) THEN
        EXIT;

      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderHeaderXpath + '/' + Namespaces[1,1] + ':' + TagName;

      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Date',
        FORMAT("Purchase Header"."Requested Receipt Date", 0, '<Year4>-<Month,2>-<Day,2>'));
    END;

    LOCAL PROCEDURE AddOrderHeaderProject@1210190007(TagName@1210190001 : Text[30]);
    BEGIN
      IF ("Purchase Header"."Job No." = '') THEN
        EXIT;

      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], TagName,
        "Purchase Header"."Job No.");
    END;

    LOCAL PROCEDURE AddOrderHeaderDeliveryParty@1210190022(TagName@1210190001 : Text[30]);
    VAR
      Xpath@1210190000 : Text[250];
    BEGIN
      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderHeaderXpath + '/' + Namespaces[1,1] + ':' + TagName;

      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'PartyName', "Purchase Header"."Ship-to Name");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'PartyName2', "Purchase Header"."Ship-to Name 2");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'StreetAndNumber', "Purchase Header"."Ship-to Address");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Postcode', "Purchase Header"."Ship-to Post Code");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CityName', "Purchase Header"."Ship-to City");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'CountryCode', "Purchase Header"."Ship-to Country/Region Code");
    END;

    LOCAL PROCEDURE AddOrderHeaderContract@1100528301(TagName@1210190001 : Text[30];ICMCustomerCode@1100528300 : Code[20]);
    VAR
      Xpath@1210190000 : Text[250];
    BEGIN
      IF (ICMCustomerCode = '') THEN
        EXIT;

      WebServiceMgt.AppendParameter(OrderHeaderXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderHeaderXpath + '/' + Namespaces[1,1] + ':' + TagName;
      TagName := 'ContractNumber';
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], TagName, ICMCustomerCode);
    END;

    LOCAL PROCEDURE AddOrderLine@1210190005();
    BEGIN
      CheckOrderLine;

      WebServiceMgt.AppendParameter(RootXpath, Namespaces[1,2], OrderLineTagName, '');

      WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], 'LineItemNumber',
        FORMAT("Purchase Line"."Line No.", 0));
      WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], 'GTIN',
        TradeItem."GTIN Code (Item)");
      AddOrderLineItemId('TradeItemId');
      AddOrderLineDeliveryDate('DeliveryDate');
      WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], 'ItemDescription',
        "Purchase Line".Description);
      IF ("Purchase Line"."Description 2" <> '') THEN
        WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], 'ItemSpecification',
          "Purchase Line"."Description 2");
      IF ("Purchase Line".Text <> '') THEN
        WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], 'FreeText',
          COPYSTR("Purchase Line".Text, 1, 70));
      AddOrderLineOrderedQuantity('OrderedQuantity');

      RequestIsFilled := TRUE;
    END;

    LOCAL PROCEDURE AddOrderLineItemId@1210190011(TagName@1210190001 : Text[30]);
    VAR
      Xpath@1210190000 : Text[250];
    BEGIN
      WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderLineXpath + '/' + Namespaces[1,1] + ':' + TagName;

      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'TradeItemNumber',
        "Purchase Line"."Vendor Item No.");
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'TradeItemNumberTypeCode', 'SA');
    END;

    LOCAL PROCEDURE AddOrderLineOrderedQuantity@1210190019(TagName@1210190001 : Text[30]);
    VAR
      Xpath@1210190000 : Text[250];
    BEGIN
      WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderLineXpath + '/' + Namespaces[1,1] + ':' + TagName;

      //mg.sc, 30-07-11: C000729
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Quantity',
        FORMAT("Purchase Line"."ICM Quantity", 0, 1));
      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'MeasureUnitQualifier',
        "Purchase Line"."ICM Unit");
      //mg.ec, 30-07-11: C000729
    END;

    LOCAL PROCEDURE AddOrderLineDeliveryDate@1210190015(TagName@1210190001 : Text[30]);
    VAR
      Xpath@1210190000 : Text[250];
    BEGIN
      IF ("Purchase Line"."Planned Receipt Date" = 0D) THEN
        EXIT;

      WebServiceMgt.AppendParameter(OrderLineXpath, Namespaces[1,2], TagName, '');
      Xpath := OrderLineXpath + '/' + Namespaces[1,1] + ':' + TagName;

      WebServiceMgt.AppendParameter(Xpath, Namespaces[1,2], 'Date',
        FORMAT("Purchase Line"."Planned Receipt Date", 0, '<Year4>-<Month,2>-<Day,2>'));
    END;

    LOCAL PROCEDURE SetGlobalVars@1210190010();
    BEGIN
      Namespaces[1,1] := 'gs1';
      Namespaces[1,2] := WebServiceURL."Target Namespace";

      RootTagName := 'Order';
      OrderHeaderTagName := 'OrderHeader';
      OrderLineTagName := 'OrderLine';

      IF (RequestType = 0) THEN BEGIN
        CASE Vendor."Electronic Order Type" OF
          Vendor."Electronic Order Type"::"GS1 (SOAP)":
            RequestType := RequestType::SOAP;
          Vendor."Electronic Order Type"::"GS1 (XML-RPC)":
            RequestType := RequestType::RPC;
          ELSE
            RequestType := RequestType::RPC;
        END;
      END;

      CASE RequestType OF
        RequestType::SOAP:
          RootXpath := './/' + Namespaces[1,1] + ':' + RootTagName;
        RequestType::RPC:
          RootXpath := '.';
      END;

      OrderHeaderXpath := RootXpath + '/' + Namespaces[1,1] + ':' + OrderHeaderTagName;
      OrderLineXpath := RootXpath + '/' + Namespaces[1,1] + ':' + OrderLineTagName + '[last()]';
    END;

    LOCAL PROCEDURE GetAndCheckWebServiceURL@1210190008();
    BEGIN
      WebServiceURL.SETRANGE(Type, WebServiceURL.Type::GS1);
      IF ("Purchase Header"."Document Type" = "Purchase Header"."Document Type"::Quote) THEN
        WebServiceURL.SETRANGE(Code, Vendor."URL GS1 Trial Order")
      ELSE
        WebServiceURL.SETRANGE(Code, Vendor."URL GS1 Purchase Order");
      WebServiceURL.SETRANGE(Vendor, Vendor."No.");
      IF (NOT WebServiceURL.FINDFIRST) THEN BEGIN
        WebServiceURL.SETFILTER(Vendor, '%1', '');
        WebServiceURL.FINDFIRST;
      END;

      WebServiceURL.TESTFIELD(URL);
      WebServiceURL.TESTFIELD("Target Namespace");
    END;

    LOCAL PROCEDURE CheckOrderHeader@1210190014();
    VAR
      TestInt@1210190000 : BigInteger;
    BEGIN
      IF (STRLEN("Purchase Header"."No.") > 17) THEN
        ERROR(Text000, "Purchase Header".TABLECAPTION, "Purchase Header".FIELDCAPTION("No."),
          STRLEN("Purchase Header"."No."), 17);
      IF ("Purchase Header"."Document Type" <> "Purchase Header"."Document Type"::Quote) THEN
        IF ("Purchase Header"."Order Date" = 0D) THEN
          ERROR(Text001, "Purchase Header".TABLECAPTION, "Purchase Header".FIELDCAPTION("Order Date"),
            "Purchase Header"."Order Date");
      IF ("Purchase Header"."Due Date" = 0D) THEN
        ERROR(Text001, "Purchase Header".TABLECAPTION, "Purchase Header".FIELDCAPTION("Due Date"),
          "Purchase Header"."Due Date");
      IF (STRLEN("Purchase Header"."Job No.") > 17) THEN
        ERROR(Text000, "Purchase Header".TABLECAPTION, "Purchase Header".FIELDCAPTION("Job No."),
          STRLEN("Purchase Header"."Job No."), 17);
      IF ("Purchase Header"."Ship-to Name" = '') THEN
        ERROR(Text001, "Purchase Header".TABLECAPTION, "Purchase Header".FIELDCAPTION("Ship-to Name"),
          "Purchase Header"."Ship-to Name");
      IF ("Purchase Header"."Ship-to Post Code" = '') THEN
        ERROR(Text001, "Purchase Header".TABLECAPTION, "Purchase Header".FIELDCAPTION("Ship-to Post Code"),
          "Purchase Header"."Ship-to Post Code");

      IF (Vendor.GLN = '') THEN
        ERROR(Text001, Vendor.TABLECAPTION, Vendor.FIELDCAPTION(GLN),
          Vendor.GLN);
      WHILE (STRLEN(Vendor.GLN) < 13) DO
        Vendor.GLN := '0' + Vendor.GLN;
      IF (STRLEN(Vendor.GLN) > 13) THEN
        ERROR(Text000, Vendor.TABLECAPTION, Vendor.FIELDCAPTION(GLN),
          STRLEN(Vendor.GLN), 13);
      IF (NOT EVALUATE(TestInt, Vendor.GLN)) THEN
        ERROR(Text001, Vendor.TABLECAPTION, Vendor.FIELDCAPTION(GLN),
          Vendor.GLN);

      WHILE (STRLEN(CompanyInformation.GLN) < 13) DO
        CompanyInformation.GLN := '0' + CompanyInformation.GLN;
      IF (STRLEN(CompanyInformation.GLN) > 13) THEN
        ERROR(Text000, CompanyInformation.TABLECAPTION, CompanyInformation.FIELDCAPTION(GLN),
          STRLEN(CompanyInformation.GLN), 13);
      IF (NOT EVALUATE(TestInt, CompanyInformation.GLN)) THEN
        ERROR(Text001, CompanyInformation.TABLECAPTION, CompanyInformation.FIELDCAPTION(GLN),
          CompanyInformation.GLN);
    END;

    LOCAL PROCEDURE CheckOrderLine@1210190018();
    BEGIN
      IF ("Purchase Line"."Trade Item" = '') THEN BEGIN
        // 33335.so
        //ERROR(Text001, TradeItem.TABLECAPTION, "Purchase Line".FIELDCAPTION("Trade Item"),
        //  "Purchase Line"."Trade Item");
        // 33335.eo
        // 33335.sn
        IF NOT ConfirmEmptyTradeItem THEN BEGIN
          IF NOT CONFIRM(Text004, FALSE, "Purchase Line".FIELDCAPTION("Trade Item")) THEN
            ERROR(Text005);
          ConfirmEmptyTradeItem := TRUE;
        END;
        // 33335.en
      END;

      IF ("Purchase Line"."Vendor (Trade Item)" = '') THEN BEGIN
        // 33335.so
        //ERROR(Text001, TradeItem.TABLECAPTION, "Purchase Line".FIELDCAPTION("Vendor (Trade Item)"),
        //  "Purchase Line"."Vendor (Trade Item)");
        // 33335.eo
        // 33335.sn
        IF NOT ConfirmEmptyTradeItem THEN BEGIN
          IF NOT CONFIRM(Text004, FALSE, "Purchase Line".FIELDCAPTION("Vendor (Trade Item)")) THEN
            ERROR(Text005);
          ConfirmEmptyTradeItem := TRUE;
        END;
        // 33335.en
      END;

      IF NOT ConfirmEmptyTradeItem THEN BEGIN  // 33335.n
        IF (NOT TradeItem.GET("Purchase Line"."Vendor (Trade Item)", "Purchase Line"."Trade Item")) THEN
            ERROR(Text002, TradeItem.TABLECAPTION, "Purchase Line"."Trade Item");

        IF (TradeItem."Application ID" = '') THEN
          ERROR(Text001, TradeItem.TABLECAPTION, TradeItem.FIELDCAPTION("Application ID"),
            TradeItem."Application ID");

        CASE TradeItem."Application ID" OF
          'KGM','LTR','MTR','PCE': ;
          ELSE
            ERROR(Text001, TradeItem.TABLECAPTION, TradeItem.FIELDCAPTION("Application ID"),
              TradeItem."Application ID");
        END;
      END;  // 33335.n

      IF ("Purchase Line"."Document Type" <> "Purchase Line"."Document Type":: Quote) AND
         ("Purchase Line"."Order Date" = 0D)
      THEN
        ERROR(Text001, "Purchase Line".TABLECAPTION, "Purchase Line".FIELDCAPTION("Order Date"),
          "Purchase Line"."Order Date");
      IF ("Purchase Line"."Expected Receipt Date" = 0D) THEN
        ERROR(Text001, "Purchase Line".TABLECAPTION, "Purchase Line".FIELDCAPTION("Expected Receipt Date"),
          "Purchase Line"."Expected Receipt Date");

      IF NOT ConfirmEmptyTradeItem THEN BEGIN  // 33335.n
        WHILE (STRLEN(TradeItem."GTIN Code (Item)") < 14) DO
          TradeItem."GTIN Code (Item)" := '0' + TradeItem."GTIN Code (Item)";
        IF (STRLEN(TradeItem."GTIN Code (Item)") > 14) THEN
          ERROR(Text000, TradeItem.TABLECAPTION, "Purchase Line"."Trade Item",
            STRLEN(TradeItem."GTIN Code (Item)"), 14);
      END;  // 33335.n
    END;

    PROCEDURE SetIsSOAP@1210190009();
    BEGIN
      RequestType := RequestType::SOAP;
    END;

    PROCEDURE SetIsRPC@1210190002();
    BEGIN
      RequestType := RequestType::RPC;
    END;

    LOCAL PROCEDURE GetICMCustomerCode@1100528300(BuyFromVendorNo@1100528302 : Code[20];ProjectCode@1100528301 : Code[20];Deliver@1100528303 : Option;ShipToLocation@1100528304 : Code[20];ShortcutDimension1Code@1100528306 : Code[20]) : Code[20];
    VAR
      ICMCustomerRec@1100528300 : Record 11012129;
      VendorRec@1100528308 : Record 23;
      ICMCustCodeFoundOnProjectLevel@1100528305 : Boolean;
      CustCode@1100528307 : Code[20];
    BEGIN
      //copied from dataport 11012323
      IF (BuyFromVendorNo = '') THEN
        EXIT('');

      ICMCustomerRec.SETRANGE(Vendor, BuyFromVendorNo);
      ICMCustomerRec.SETFILTER(Project, '%1', '');
      ICMCustomerRec.SETFILTER("Global Dimension 1 Code", '%1', '');
      ICMCustomerRec.SETFILTER("ICM Customer No.", '<>%1', '');
      IF ICMCustomerRec.FINDFIRST THEN
        CustCode := ICMCustomerRec."ICM Customer No.";

      ICMCustCodeFoundOnProjectLevel := FALSE;
      IF ProjectCode <> '' THEN BEGIN
        ICMCustomerRec.SETRANGE(Project, ProjectCode);
        IF (Deliver = 2) AND //Deliver::"Project Location"
           (ShipToLocation <> '') THEN BEGIN
          ICMCustomerRec.SETRANGE("Project Location", ShipToLocation);
          IF ICMCustomerRec.FIND('-') THEN BEGIN
            CustCode := ICMCustomerRec."ICM Customer No.";
            ICMCustCodeFoundOnProjectLevel := TRUE;
          END ELSE BEGIN
            ICMCustomerRec.SETFILTER("Project Location", '%1', '');
            IF ICMCustomerRec.FIND('-') THEN BEGIN
              CustCode := ICMCustomerRec."ICM Customer No.";
              ICMCustCodeFoundOnProjectLevel := TRUE;
            END;
          END;
        END ELSE BEGIN
          ICMCustomerRec.SETFILTER("Project Location", '%1', '');
          IF ICMCustomerRec.FINDFIRST THEN BEGIN
            CustCode := ICMCustomerRec."ICM Customer No.";
            ICMCustCodeFoundOnProjectLevel := TRUE;
          END;
        END;
      END;

      IF (NOT ICMCustCodeFoundOnProjectLevel) AND (ShortcutDimension1Code <> '') THEN BEGIN
        ICMCustomerRec.RESET;
        ICMCustomerRec.SETRANGE(Vendor, BuyFromVendorNo);
        ICMCustomerRec.SETFILTER(Project, '%1', '');
        ICMCustomerRec.SETFILTER("Global Dimension 1 Code", ShortcutDimension1Code);
        ICMCustomerRec.SETFILTER("ICM Customer No.", '<>%1', '');
        IF ICMCustomerRec.FINDFIRST THEN
          CustCode := ICMCustomerRec."ICM Customer No.";
      END;

      IF (CustCode = '') THEN BEGIN
        VendorRec.GET(BuyFromVendorNo);
        CustCode := VendorRec."ICM Customer No.";
      END;

      EXIT(CustCode);
    END;

    PROCEDURE WriteRequestToFile@1100528302();
    VAR
      FileName@1100528300 : Text[250];
    BEGIN
      FileName :=
        Vendor."Pathname Purchase Exchange" +
        FORMAT("Purchase Header"."Document Type") + '-' +
        "Purchase Header"."No." + '-' +
        FORMAT(CURRENTDATETIME, 0, '<year4><Month,2><Day,2>-<hours24,2><minutes,2><seconds,2>') +
        '.xml';
      WebServiceMgt.WriteRequestToFile(FileName);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

