OBJECT Table 11071692 Contract Object Maintenance
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11071743=imd,
                TableData 11071744=m;
    OnInsert=VAR
               ServiceContract@1100525000 : Record 11012812;
             BEGIN
               TESTFIELD("Service Contract No.");
               TESTFIELD("Object No.");
               TESTFIELD("Maintenance Scheme");

               "Input by" := USERID;
               "Input Date" := CREATEDATETIME(TODAY,TIME);

               IF ServiceContract.GET("Service Contract No.") THEN BEGIN
                 IF (ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Framework Contract") OR
                    (ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Location Contract") THEN
                   ServiceContract.FIELDERROR("Contract Form");
                 IF Cluster = '' THEN
                   Cluster := ServiceContract.Cluster;
               END;
               UpdateLastAndNextMaintDate;
               TestIfQuantityBasedOnServiceObject;
             END;

    OnModify=BEGIN
               "Modified by" := USERID;
               "Last Date modified" := CREATEDATETIME(TODAY,TIME);
               UpdateLastAndNextMaintDate;
             END;

    OnDelete=VAR
               MaintenanceSchemeVersion@1100409000 : Record 11071743;
               ContractObjectMaintenance@1100528600 : Record 11071692;
             BEGIN
               RemoveOldContractArrangements("Service Contract No.", "Object No.", "Maintenance Scheme");

               ContractObjectMaintenance.SETCURRENTKEY("Object No.");
               ContractObjectMaintenance.SETRANGE("Object No.", "Object No.");
               ContractObjectMaintenance.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
               ContractObjectMaintenance.SETFILTER("Service Contract No.", '<>%1', "Service Contract No.");
               IF ContractObjectMaintenance.ISEMPTY THEN BEGIN
                 MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::Object);
                 MaintenanceSchemeVersion.SETRANGE(Code, "Object No.");
                 MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", "Maintenance Scheme");
                 MaintenanceSchemeVersion.DELETEALL(TRUE);
               END;

               IF "Maintenance Scheme" <> '' THEN BEGIN
                 ContractObjectMaintenance.RESET;
                 ContractObjectMaintenance.SETRANGE("Service Contract No.", "Service Contract No.");
                 ContractObjectMaintenance.SETRANGE("Object No.", "Object No.");
                 ContractObjectMaintenance.SETRANGE("Linked to Maintenance Scheme", "Maintenance Scheme");
                 ContractObjectMaintenance.MODIFYALL("Linked to Maintenance Scheme", '', TRUE);
               END;

               RemoveSubcontractors("Service Contract No.", "Object No.", "Maintenance Scheme");
             END;

    OnRename=VAR
               MaintenanceSchemeVersion@1100409000 : Record 11071743;
             BEGIN
               IF xRec."Maintenance Scheme" <> "Maintenance Scheme" THEN BEGIN
                 RemoveOldContractArrangements("Service Contract No.", "Object No.", xRec."Maintenance Scheme");

                 MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::Object);
                 MaintenanceSchemeVersion.SETRANGE(Code, "Object No.");
                 MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", xRec."Maintenance Scheme");
                 MaintenanceSchemeVersion.DELETEALL(TRUE);
               END;
             END;

    CaptionML=[ENU=Contract Object Maintenance;
               NOR=Kontraktobjekt, vedlikehold;
               SVE=Underh†ll av kontraktsobjekt];
    LookupPageID=Page11125151;
    DrillDownPageID=Page11125151;
  }
  FIELDS
  {
    { 10  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Object No.          ;Code20        ;TableRelation=Service-Object.No.;
                                                   OnValidate=VAR
                                                                ServiceObject@1100525000 : Record 11071691;
                                                                ServiceLocation@1100528600 : Record 11012801;
                                                                ContractObject@1100529600 : Record 11071702;
                                                                ServiceLocationNo@1100525001 : Code[20];
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Object No.") THEN
                                                                  TestObjectInContract("Object No.");

                                                                ServiceObject.GET("Object No.");
                                                                ServiceLocationNo := ServiceObject.GetPrefServiceLocationNo(TRUE);
                                                                IF ServiceLocationNo <> '' THEN
                                                                  VALIDATE("Service Location No.", ServiceLocationNo);

                                                                CALCFIELDS("Service Package", "Object Group", "Standard Object No.");
                                                                IF ServiceLocation.GET("Service Location No.") THEN BEGIN
                                                                  VALIDATE("Maintenance Day", ServiceLocation."Maintenance Day");
                                                                  VALIDATE("Starting Time Maint. Window", ServiceLocation."Starting Time Maint. Window");
                                                                  VALIDATE("Ending Time Maint. Window", ServiceLocation."Ending Time Maint. Window");
                                                                END;

                                                                IF ContractObject.GET("Service Contract No.", "Object No.") THEN
                                                                  "Service Category" := ContractObject."Service Category (Contract)";
                                                              END;

                                                   CaptionML=[ENU=Object No.;
                                                              NOR=Objektnr.;
                                                              SVE=Objektnr];
                                                   NotBlank=Yes }
    { 35  ;   ;Object Description  ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Description WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Object Description;
                                                              NOR=Objektbeskrivelse;
                                                              SVE=Objektbeskrivning];
                                                   Editable=No }
    { 37  ;   ;Object Description 2;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object."Description 2" WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Object Description 2;
                                                   Editable=No }
    { 40  ;   ;Standard Object No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object."Standard Object No." WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Standard Object No.;
                                                              NOR=Standardobjektnr;
                                                              SVE=Standardobjektsnr];
                                                   Editable=No }
    { 60  ;   ;Brand Code          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Brand Code" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=Brand Code;
                                                   Editable=No }
    { 70  ;   ;Standard Object Description;Text100;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object".Description WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=[ENU=Standard Object Description;
                                                              NOR=Standard objektsbeskrivelse;
                                                              SVE=Standardobjektsbeskrivning];
                                                   Editable=No }
    { 75  ;   ;Standard Object Description 2;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Description 2" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=[ENU=Standard Object Description 2;
                                                              SVE=Standardobjektsbeskrivning 2];
                                                   Editable=No }
    { 80  ;   ;Service Location No.;Code20        ;TableRelation="Service Location";
                                                   OnValidate=BEGIN
                                                                IF "Service Location No." <> '' THEN
                                                                  IF Cluster = '' THEN
                                                                    DetermineCluster;
                                                              END;

                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr];
                                                   Editable=No }
    { 90  ;   ;Object Group        ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Object Group" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=[ENU=Object Group;
                                                              NOR=Objektgruppe;
                                                              SVE=Objektgrupp];
                                                   Editable=No }
    { 120 ;   ;Maintenance Scheme  ;Code20        ;TableRelation="Maintenance Scheme";
                                                   OnValidate=VAR
                                                                lvMaintSchemeRec@1100525000 : Record 11071745;
                                                              BEGIN
                                                                IF lvMaintSchemeRec.GET("Maintenance Scheme") THEN BEGIN
                                                                  lvMaintSchemeRec.TESTFIELD(Expired, FALSE);
                                                                  VALIDATE("Maintenance Interval", lvMaintSchemeRec."Maintenance Interval");
                                                                  VALIDATE("Maintenance Interval (Counter)", lvMaintSchemeRec."Maintenance Interval (Counter)");
                                                                  VALIDATE("Consumption Component", lvMaintSchemeRec."Consumption Component");
                                                                END;

                                                                IF (xRec."Maintenance Scheme" <> "Maintenance Scheme") AND (xRec."Maintenance Scheme" <> '') THEN
                                                                  RemoveSubcontractors("Service Contract No.", "Object No.", xRec."Maintenance Scheme");
                                                              END;

                                                   OnLookup=VAR
                                                              MaintenanceScheme@1100528600 : Record 11071745;
                                                              StdObjectMaintenanceScheme@1100528601 : Record 11071703;
                                                            BEGIN
                                                              CALCFIELDS("Standard Object No.");
                                                              StdObjectMaintenanceScheme.SETRANGE("Object No.", "Standard Object No.");
                                                              StdObjectMaintenanceScheme.SETRANGE("Service Package", "Service Package");
                                                              StdObjectMaintenanceScheme.SETRANGE(Subcontracting, Subcontracting);
                                                              IF StdObjectMaintenanceScheme.FINDSET THEN
                                                                REPEAT
                                                                  MaintenanceScheme.Code := StdObjectMaintenanceScheme."Maintenance Scheme";
                                                                  MaintenanceScheme.MARK(TRUE);
                                                                UNTIL StdObjectMaintenanceScheme.NEXT = 0;
                                                              MaintenanceScheme.MARKEDONLY(TRUE);
                                                              IF "Maintenance Scheme" <> '' THEN
                                                                IF MaintenanceScheme.GET("Maintenance Scheme") THEN;
                                                              IF PAGE.RUNMODAL(0, MaintenanceScheme) = ACTION::LookupOK THEN
                                                                VALIDATE("Maintenance Scheme", MaintenanceScheme.Code);
                                                            END;

                                                   CaptionML=[ENU=Maintenance Scheme;
                                                              NOR=Vedlikeholdsskjema;
                                                              SVE=Underh†llsschema];
                                                   NotBlank=Yes }
    { 130 ;   ;Service Package     ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contract Object"."Service Package" WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                                 Service Object No.=FIELD(Object No.)));
                                                   OnValidate=BEGIN
                                                                //mg, 14-01-11: M24715
                                                                IF "Service Package" <> '' THEN BEGIN
                                                                  CALCFIELDS("Standard Object No.");
                                                                  ServiceObjectManagementCu.TestServicePackageOfStdObj("Standard Object No.", "Service Package");
                                                                  IF "Maintenance Scheme" <> '' THEN
                                                                    ServiceObjectManagementCu.TestMaintSchemeOfStdObj("Standard Object No.", "Service Package", "Maintenance Scheme");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Package;
                                                              NOR=Servicepakke;
                                                              SVE=Servicepaket];
                                                   Editable=No }
    { 200 ;   ;Maintenance Interval;DateFormula   ;OnValidate=VAR
                                                                lvUpdatePricesNorms@1100526200 : Codeunit 11012836;
                                                              BEGIN
                                                                VALIDATE("Frequency per Year", lvUpdatePricesNorms.EvaluateTimeQuantity("Maintenance Interval"));
                                                                IF FORMAT("Maintenance Interval") <> '' THEN
                                                                  UpdateServiceContractArr(CALCDATE("Maintenance Interval", TODAY), FALSE, TRUE, TRUE);
                                                              END;

                                                   CaptionML=[ENU=Maintenance Interval;
                                                              NOR=Vedlikeholdsintervall;
                                                              SVE=Underh†llsintervall] }
    { 202 ;   ;Maintenance Interval (Counter);Decimal;
                                                   CaptionML=ENU=Maintenance Interval (Counter) }
    { 204 ;   ;Consumption Component;Code20       ;TableRelation="Consumption Component".Code WHERE (Component Type=FILTER(Counter));
                                                   CaptionML=ENU=Consumption Component }
    { 205 ;   ;Frequency per Year  ;Decimal       ;InitValue=1;
                                                   OnValidate=VAR
                                                                SchemeLineRec@1100525000 : Record 11071744;
                                                              BEGIN
                                                                SchemeLineRec.SETRANGE("Line Type", SchemeLineRec."Line Type"::Object);
                                                                SchemeLineRec.SETRANGE("Type Code", "Object No.");
                                                                SchemeLineRec.SETRANGE("Belongs to Scheme","Maintenance Scheme");
                                                                IF SchemeLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
                                                                  REPEAT
                                                                    SchemeLineRec."Maintenance Interval" := "Maintenance Interval";
                                                                    SchemeLineRec.VALIDATE("Frequency per Year","Frequency per Year");
                                                                    SchemeLineRec.MODIFY;
                                                                  UNTIL SchemeLineRec.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Frequency per Year;
                                                              NOR=Frekvens per †r;
                                                              SVE=Frekvens per †r];
                                                   BlankZero=Yes }
    { 210 ;   ;Last Maintenance Date;Date         ;CaptionML=[ENU=Last Maintenance Date;
                                                              NOR=Siste vedlikeholdsdato;
                                                              SVE=Senast bokf”rt underh†ll];
                                                   Editable=No }
    { 220 ;   ;Next Maintenance Date;Date         ;OnValidate=BEGIN
                                                                IF "Next Maintenance Date" <> 0D THEN BEGIN
                                                                  "Next Maintenance Week" := DATE2DWY("Next Maintenance Date", 2);
                                                                  "Next Maintenance Year" := DATE2DWY("Next Maintenance Date", 3);
                                                                END ELSE BEGIN
                                                                  "Next Maintenance Week" := 0;
                                                                  "Next Maintenance Year" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Next Maintenance Date;
                                                              NOR=Neste vedlikeholdsdato;
                                                              SVE=N„sta underh†llsdatum];
                                                   Editable=No }
    { 230 ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified by;
                                                              NOR=Endret av;
                                                              SVE=Žndrad av];
                                                   Editable=No }
    { 240 ;   ;Last Date modified  ;DateTime      ;CaptionML=[ENU=Last Date modified;
                                                              NOR=Sist dato endret;
                                                              SVE=Uppdateringsdatum];
                                                   Editable=No }
    { 250 ;   ;Input by            ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Input by;
                                                              NOR=Input av;
                                                              SVE=Inmatat av];
                                                   Editable=No }
    { 260 ;   ;Input Date          ;DateTime      ;CaptionML=[ENU=Input Date;
                                                              NOR=Input Dato;
                                                              SVE=Inmatat den];
                                                   Editable=No }
    { 270 ;   ;Next Maintenance Week;Integer      ;CaptionML=[ENU=Next Maintenance Week;
                                                              NOR=Neste vedlikehold uke;
                                                              SVE=N„sta underh†llsvecka];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 280 ;   ;Next Maintenance Year;Integer      ;CaptionML=[ENU=Next Maintenance Year;
                                                              NOR=Neste vedlikehold †r;
                                                              SVE=N„sta underh†lls†r];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 290 ;   ;Maintenance Day     ;Option        ;OnValidate=VAR
                                                                ServiceContract@1100528600 : Record 11012812;
                                                                StartingMaintenanceDay@1100526202 : Integer;
                                                                StartingMaintenanceWeek@1100526200 : Integer;
                                                                StartingMaintenanceYear@1100526201 : Integer;
                                                                StartingDateMaintenance@1100528601 : Date;
                                                                NewStartingDateMaintenance@1100528602 : Date;
                                                              BEGIN
                                                                ServiceContract.GET("Service Contract No.");
                                                                ServiceContract.TESTFIELD("Starting Date");
                                                                IF "Starting Date Maintenance" = 0D THEN
                                                                  EXIT;
                                                                IF "Maintenance Day" = "Maintenance Day"::" " THEN
                                                                  EXIT;
                                                                StartingDateMaintenance := "Starting Date Maintenance";
                                                                REPEAT
                                                                  StartingMaintenanceDay := DATE2DWY(StartingDateMaintenance, 1);
                                                                  StartingMaintenanceWeek := DATE2DWY(StartingDateMaintenance, 2);
                                                                  StartingMaintenanceYear := DATE2DWY(StartingDateMaintenance, 3);
                                                                  CASE "Maintenance Day" OF
                                                                    "Maintenance Day"::Monday.."Maintenance Day"::Sunday:
                                                                      IF StartingMaintenanceDay <> "Maintenance Day" THEN
                                                                        StartingMaintenanceDay := "Maintenance Day";
                                                                    "Maintenance Day"::Weekday:
                                                                      IF NOT (StartingMaintenanceDay IN [1..5]) THEN
                                                                        StartingMaintenanceDay := 5;
                                                                    "Maintenance Day"::Weekend:
                                                                      IF NOT (StartingMaintenanceDay IN [6..7]) THEN
                                                                        StartingMaintenanceDay := 6;
                                                                  END;
                                                                  NewStartingDateMaintenance := DWY2DATE(StartingMaintenanceDay, StartingMaintenanceWeek, StartingMaintenanceYear);
                                                                  StartingDateMaintenance := CALCDATE('<+1D>', StartingDateMaintenance);
                                                                UNTIL NewStartingDateMaintenance > ServiceContract."Starting Date";
                                                                "Starting Date Maintenance" := NewStartingDateMaintenance;
                                                              END;

                                                   CaptionML=[ENU=Maintenance Day;
                                                              NOR=Vedlikeholdsdag;
                                                              SVE=Underhållsdag];
                                                   OptionCaptionML=[ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend";
                                                                    NOR=" ,Mandag,Tirsdag,Onsdag,Torsdag,Fredag,L›rdag,S›ndag,Ukedag,Helg";
                                                                    SVE=" ,Måndag,Tisdag,Onsdag,Torsdag,Fredag,Lördag,Söndag,Veckodag,Helg"];
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend] }
    { 300 ;   ;Next Maintenance Month (OBS);Integer;
                                                   CaptionML=[ENU=Next Maintenance Month (Obsolete);
                                                              SVE=N„sta underh†llsm†nad];
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 320 ;   ;Starting Date Maintenance;Date     ;OnValidate=BEGIN
                                                                IF xRec."Starting Date Maintenance" <> "Starting Date Maintenance" THEN BEGIN
                                                                  IF "Maintenance Day" <> "Maintenance Day"::" " THEN
                                                                    "Maintenance Day" := DATE2DWY("Starting Date Maintenance", 1);
                                                                  CheckActiveContractArrangement;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Date Maintenance;
                                                              NOR=Startdato, Vedlikehold;
                                                              SVE=Startdatum, underh†ll] }
    { 430 ;   ;Contract Arrangement Exists;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Contract Arrangement" WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                           Object No.=FIELD(Object No.),
                                                                                                           Maintenance Scheme=FIELD(Maintenance Scheme),
                                                                                                           Service Package=FIELD(Service Package)));
                                                   CaptionML=[ENU=Contract Arrangement Exists;
                                                              NOR=Kontraktavtale finnes;
                                                              SVE=Kotraktarrangemang finns];
                                                   Editable=No }
    { 440 ;   ;Customer Object Group;Code10       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contract Object"."Customer Object Group" WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                                       Service Object No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Customer Object Group;
                                                              NOR=Opjektgruppe for kunde;
                                                              SVE=Kundobjektsgrupp];
                                                   Editable=No }
    { 450 ;   ;Description         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Description WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=Service Location Description;
                                                              NOR=Servicelokasjonbeskrivelse;
                                                              SVE=Serviceplatsbeskrivning];
                                                   Editable=No }
    { 460 ;   ;Address             ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Address WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=Address;
                                                              NOR=Adresse;
                                                              SVE=Adress];
                                                   Editable=No }
    { 470 ;   ;Address 2           ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Address 2" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=Address 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2];
                                                   Editable=No }
    { 480 ;   ;City                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".City WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=City;
                                                              NOR=Sted;
                                                              SVE=Ort];
                                                   Editable=No }
    { 490 ;   ;County              ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".County WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=County;
                                                              NOR=Fylke/delstat;
                                                              SVE=Delstat];
                                                   Editable=No }
    { 500 ;   ;Post Code           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Post Code" WHERE (No.=FIELD(Service Location No.)));
                                                   TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              NOR=Postnr;
                                                              SVE=Postnr];
                                                   Editable=No }
    { 510 ;   ;Maintenance Scheme Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Maintenance Scheme".Description WHERE (Code=FIELD(Maintenance Scheme)));
                                                   CaptionML=[ENU=Maintenance Scheme Description;
                                                              NOR=Beskrivelse av vedlikeholdskjema;
                                                              SVE=Beskrivning av underh†llsschema];
                                                   Editable=No }
    { 520 ;   ;Cluster             ;Code20        ;TableRelation="Service Cluster".Code WHERE (Type=FILTER(' '|Contract),
                                                                                               Source Type=CONST(" "));
                                                   OnValidate=BEGIN
                                                                ValidateServiceCluster;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceCluster;
                                                            END;

                                                   CaptionML=[ENU=Cluster;
                                                              NOR=Klynge;
                                                              SVE=Kluster] }
    { 530 ;   ;Object Quantity     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Quantity WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Object Quantity;
                                                              NOR=Opjektkvantum;
                                                              SVE=Objektantal];
                                                   Editable=No }
    { 540 ;   ;Maintenance Bandwidth;DateFormula  ;CaptionML=[ENU=Maintenance Bandwidth;
                                                              NOR=Vedlikehold, b†ndbredde;
                                                              SVE=Bandbreddsunderh†ll] }
    { 550 ;   ;Starting Time Maint. Window;Time   ;OnValidate=BEGIN
                                                                TestMaintenanceTimes;
                                                              END;

                                                   CaptionML=[ENU=Starting Time Maintenance Window;
                                                              NOR=Vinduet Startid for Vedlikehold;
                                                              SVE=Underh†llsf”nster starttid] }
    { 560 ;   ;Ending Time Maint. Window;Time     ;OnValidate=BEGIN
                                                                TestMaintenanceTimes;
                                                              END;

                                                   CaptionML=[ENU=Ending Time Maintenance Window;
                                                              NOR=Vinduet Sluttid for Vedlikehold;
                                                              SVE=F”nstret sluttid f”r underh†ll] }
    { 570 ;   ;Subcontracting      ;Boolean       ;CaptionML=[ENU=Subcontracting;
                                                              NOR=Underentrepen›r;
                                                              SVE=Underentreprenad] }
    { 580 ;   ;Service Category    ;Code10        ;TableRelation="Service Category".Code WHERE (Service Contract No.=FIELD(Service Contract No.));
                                                   CaptionML=[ENU=Service Category;
                                                              SVE=Servicekategori] }
    { 590 ;   ;Linked to Maintenance Scheme;Code20;TableRelation="Contract Object Maintenance"."Maintenance Scheme" WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                                           Object No.=FIELD(Object No.));
                                                   OnValidate=VAR
                                                                ContractObjectMaintenance@1100528600 : Record 11071692;
                                                                ContractObject@1100525000 : Record 11071702;
                                                              BEGIN
                                                                IF "Linked to Maintenance Scheme" <> '' THEN BEGIN
                                                                  IF ContractObject.GET("Service Contract No.", "Object No.") THEN
                                                                    ContractObject.TESTFIELD("Plan Method", ContractObject."Plan Method"::"Last Execution Date");
                                                                  ContractObjectMaintenance.SETRANGE("Service Contract No.", "Service Contract No.");
                                                                  ContractObjectMaintenance.SETRANGE("Object No.", "Object No.");
                                                                  ContractObjectMaintenance.SETFILTER("Maintenance Scheme", '<>%1', "Maintenance Scheme");
                                                                  ContractObjectMaintenance.FILTERGROUP(2);
                                                                  ContractObjectMaintenance.SETRANGE("Maintenance Scheme", "Linked to Maintenance Scheme");
                                                                  ContractObjectMaintenance.FILTERGROUP(0);
                                                                  ContractObjectMaintenance.FINDFIRST;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ContractObjectMaintenance@1100528600 : Record 11071692;
                                                              MaintenanceScheme@1100528601 : Record 11071745;
                                                            BEGIN
                                                              ContractObjectMaintenance.SETRANGE("Service Contract No.", "Service Contract No.");
                                                              ContractObjectMaintenance.SETRANGE("Object No.", "Object No.");
                                                              ContractObjectMaintenance.SETFILTER("Maintenance Scheme", '<>%1', "Maintenance Scheme");
                                                              IF ContractObjectMaintenance.FINDSET THEN
                                                                REPEAT
                                                                  MaintenanceScheme.Code := ContractObjectMaintenance."Maintenance Scheme";
                                                                  MaintenanceScheme.MARK(TRUE);
                                                                UNTIL ContractObjectMaintenance.NEXT = 0;
                                                              MaintenanceScheme.MARKEDONLY(TRUE);
                                                              IF PAGE.RUNMODAL(0, MaintenanceScheme) = ACTION::LookupOK THEN
                                                                VALIDATE("Linked to Maintenance Scheme", MaintenanceScheme.Code);
                                                            END;

                                                   CaptionML=ENU=Linked to Maintenance Scheme }
    { 600 ;   ;Object Ending Date  ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contract Object"."Ending Date" WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                             Service Object No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Object Ending Date;
                                                   Editable=No }
    { 610 ;   ;Post Code Group     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Post Code Group" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=Post Code Group;
                                                              NOR=Postnummergruppe;
                                                              SVE=Postnummergrupp];
                                                   Editable=No }
    { 620 ;   ;Building            ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Building WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Building;
                                                              NOR=Byggning;
                                                              SVE=Byggnad];
                                                   Editable=No }
    { 630 ;   ;Floor               ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Floor WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Floor;
                                                              NOR=Gulv;
                                                              SVE=V†ning];
                                                   Editable=No }
    { 640 ;   ;Room                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Room WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Room;
                                                              NOR=Rom;
                                                              SVE=Rum];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Contract No.,Object No.,Maintenance Scheme;
                                                   Clustered=Yes }
    {    ;Service Contract No.,Service Location No. }
    {    ;Object No.                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100526201 : TextConst 'ENU=Object %1 with Maintenance Scheme %2 already exist for Contract %3;NOR=Objekt %1 med vedlikeholdsskjema %2 finnes allerede for kontrakt %3;SVE=Objekt %1 med underh†llsschema %2 finns redan f”r kontrakt %3';
      Text002@1100526202 : TextConst 'ENU=Object %1 not found in Contract %2, add object first;NOR=Objekt %1 ikke funnet i kontrakt %2, legg til objekt f›rst.;SVE=Objekt %1 hittades inte i kontrakt %2, l„gg till objekt f”rst';
      ServiceObjectManagementCu@1100526203 : Codeunit 11012808;
      Text004@1100526205 : TextConst 'ENU=No End Date found;NOR=Ingen sluttdato funnet;SVE=Inget slutdatum hittades';
      Text005@1100528600 : TextConst 'ENU=Must occur after  %1;NOR=m† forekomme etter %1;SVE=M†ste intr„ffa efter %1';
      Text006@1100525000 : TextConst 'ENU=Not all Contract Arrangements could be deleted;NOR=Ikke alle kontraktavtaler kunne fjernes';
      SuppressMsgNonDeletedSCArr@1100528601 : Boolean;
      Text008@1100528802 : TextConst 'ENU=No "Maintenance Interval (Counter)" specified';
      Text009@1100409000 : TextConst 'ENU=No Meter Reading: Consumption Component %1, Object %2.';
      Text010@1100525002 : TextConst 'ENU=An active Contract Arrangement line already exists for week %1-%2.';
      Text011@1100525001 : TextConst 'ENU=Warning: Contract Arrangements exists following week %1-%2, changing %3 has no effect on existing Contract Arrangements.';

    PROCEDURE CheckObjectMaintSchemeComb@1100525000() lvExistBln : Boolean;
    VAR
      lvContrObjRec@1100525000 : Record 11071692;
    BEGIN
      lvContrObjRec.SETRANGE("Service Contract No.","Service Contract No.");
      lvContrObjRec.SETRANGE("Object No.","Object No.");
      lvContrObjRec.SETRANGE("Maintenance Scheme","Maintenance Scheme");
      IF lvContrObjRec.FINDFIRST THEN BEGIN
        MESSAGE(Text001,"Object No.", "Maintenance Scheme", "Service Contract No.");
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE DateConversion@1100525001(VAR lvDate@1100525000 : Date;VAR lvWeekInt@1100525001 : Integer;VAR lvYearInt@1100525002 : Integer;VAR lvMonthInt@1100525003 : Integer;VAR lvDayOpt@1100525004 : 'Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday';lvFromTo@1100525005 : Integer);
    BEGIN
      CASE lvFromTo OF
        0:
          BEGIN
            lvWeekInt := DATE2DWY(lvDate,2);
            lvYearInt := DATE2DWY(lvDate,3);
            lvMonthInt := DATE2DMY(lvDate,2);
      //      lvDayOpt := DATE2DWY(lvDate,1);
          END;
        1:
          BEGIN
            lvDate := DWY2DATE(lvDayOpt+1,lvWeekInt,lvYearInt);
            lvMonthInt := DATE2DMY(lvDate,2);
          END;
      END;
    END;

    PROCEDURE ValidateCalendar@1100525004(lvTypeOpt@1100525000 : 'Week,Month,Year';lvWeekIntge@1100525001 : Integer;lvYearInt@1100525002 : Integer;lvMonthInt@1100525003 : Integer) ExistsBln : Boolean;
    VAR
      lvDateRec@1100525004 : Record 2000000007;
      lvYearStartDate@1100525005 : Date;
      lvYearEndDate@1100525006 : Date;
    BEGIN
      CASE lvTypeOpt OF
        lvTypeOpt::Week:
          BEGIN
            lvDateRec.SETRANGE("Period Type",lvDateRec."Period Type"::Year);
            lvDateRec.SETRANGE("Period No.",lvYearInt);
            IF lvDateRec.FINDFIRST THEN BEGIN
              lvYearStartDate := lvDateRec."Period Start";
              lvYearEndDate := NORMALDATE(lvDateRec."Period End");
              lvDateRec.SETRANGE("Period Type",lvDateRec."Period Type"::Week);
              lvDateRec.SETRANGE("Period Start",lvYearStartDate,lvYearEndDate);
              lvDateRec.SETRANGE("Period No.",lvWeekIntge);
              IF lvDateRec.FINDFIRST THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE);
            END;
          END;
        lvTypeOpt::Month:
          BEGIN
            IF (lvMonthInt < 1) OR (lvMonthInt > 12) THEN
              EXIT(FALSE)
            ELSE
              EXIT(TRUE);
          END;
        lvTypeOpt::Year:
          BEGIN
            lvDateRec.SETRANGE("Period Type",lvDateRec."Period Type"::Year);
            lvDateRec.SETRANGE("Period No.",lvYearInt);
            IF lvDateRec.FINDFIRST THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE);
          END;
      END;
    END;

    PROCEDURE UpdateServiceContractArr@1100526200(IEndingDate@1100526203 : Date;IShowErrors@1100528601 : Boolean;IUpdateAll@1100528602 : Boolean;ISkipUpdateLastAndNextMaintDate@1100528500 : Boolean);
    VAR
      ServiceContractArrangement@1100526200 : Record 11071705;
      TmpServiceContractArrangement@1100529600 : TEMPORARY Record 11071705;
      ContractObject@1100528600 : Record 11071702;
      MeterReading@1100528803 : Record 11071971;
      MaintenanceDate@1100526201 : Date;
      TheoreticalMaintenanceDate@1100526202 : Date;
      ShiftInDays@1100528604 : Integer;
      MaintenanceInterval@1100528802 : DateFormula;
      IntervalOK@1100528804 : Boolean;
    BEGIN
      IntervalOK := TestInterval(IShowErrors);

      IF IShowErrors THEN BEGIN
        TESTFIELD("Starting Date Maintenance");
      END ELSE
        IF NOT IntervalOK OR ("Starting Date Maintenance" = 0D) THEN
          EXIT;

      IF IEndingDate = 0D THEN
        ERROR(Text004);

      IF NOT ContractObject.GET("Service Contract No.", "Object No.") THEN
        EXIT;
      IF ContractObject."Ending Date" <> 0D THEN
        IF IEndingDate > ContractObject."Ending Date" THEN
          IEndingDate := ContractObject."Ending Date";

      CALCFIELDS("Service Package");

      ServiceContractArrangement.SETCURRENTKEY("Service Contract No.", "Object No.",
        "Maintenance Scheme", "Maintenance Year", "Maintenance Week", "Maintenance Day");
      ServiceContractArrangement.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractArrangement.SETRANGE("Object No.", "Object No.");
      ServiceContractArrangement.SETRANGE("Maintenance Scheme", "Maintenance Scheme");

      IF IUpdateAll THEN
        IF ServiceContractArrangement.FINDLAST THEN
          REPEAT
            ServiceContractArrangement.CALCFIELDS("Maintenance Proposal No.", "Service Order No.", "Comment Line Present");
            IF (ServiceContractArrangement."Maintenance Proposal No." = '') AND
               (ServiceContractArrangement."Service Order No." = '') AND
               NOT ServiceContractArrangement."Firm Planned" AND
               NOT ServiceContractArrangement.Cancelled
            THEN BEGIN
              IF ServiceContractArrangement."Comment Line Present" THEN BEGIN
                TmpServiceContractArrangement := ServiceContractArrangement;
                TmpServiceContractArrangement.INSERT;
              END;
              ServiceContractArrangement.DELETE;
            END;
          UNTIL (ServiceContractArrangement."Maintenance Proposal No." <> '') OR
                (ServiceContractArrangement."Service Order No." <> '') OR
                ServiceContractArrangement."Firm Planned" OR
                (ServiceContractArrangement.NEXT(-1) = 0);

      IF ServiceContractArrangement.FINDLAST THEN BEGIN
        ServiceContractArrangement.TESTFIELD("Maintenance Week");
        ServiceContractArrangement.CALCFIELDS("Service Order Execution Date");

        IF (((ContractObject."Plan Method" = ContractObject."Plan Method"::"Theoretical Maintenance Date") AND NOT IsDynamicMaintenance(Rec)) OR
           (ServiceContractArrangement."Service Order Execution Date" = 0D)) THEN
          TheoreticalMaintenanceDate := ServiceContractArrangement."Theoretical Maintenance Date"
        ELSE
          TheoreticalMaintenanceDate := ServiceContractArrangement."Service Order Execution Date";
        IF "Linked to Maintenance Scheme" <> '' THEN BEGIN
          ShiftInDays := GetExecutionDateShiftInDays(Rec);
          TheoreticalMaintenanceDate := ServiceContractArrangement."Theoretical Maintenance Date" + ShiftInDays;
        END;

        IF TheoreticalMaintenanceDate = 0D THEN
          TheoreticalMaintenanceDate := ServiceContractArrangement.GetMaintenanceDate;
        IF TheoreticalMaintenanceDate >= "Starting Date Maintenance" THEN
          GetNextMaintenanceDate(
            MaintenanceDate,
            "Maintenance Interval",
            MaintenanceInterval,
            "Maintenance Day",
            "Starting Date Maintenance",
            TheoreticalMaintenanceDate,
            IsDynamicMaintenance(Rec))
        ELSE BEGIN
          MaintenanceDate := "Starting Date Maintenance";
          TheoreticalMaintenanceDate := MaintenanceDate;
          MaintenanceInterval := "Maintenance Interval";
        END;
      END ELSE BEGIN
        IF IsDynamicMaintenance(Rec) THEN BEGIN
          MeterReading.SETRANGE("Object No.", "Object No.");
          MeterReading.SETRANGE("Consumption Component Code", "Consumption Component");
          MeterReading.SETRANGE(Maintenance, TRUE);
          IF MeterReading.FINDLAST THEN BEGIN
            MaintenanceDate := MeterReading."Reading Date";
            TheoreticalMaintenanceDate := MeterReading."Reading Date";
          END ELSE BEGIN
            MaintenanceDate := "Starting Date Maintenance";
            TheoreticalMaintenanceDate := "Starting Date Maintenance";
          END;

          GetNextMaintenanceDate(
            MaintenanceDate,
            "Maintenance Interval",
            MaintenanceInterval,
            "Maintenance Day",
            "Starting Date Maintenance",
            TheoreticalMaintenanceDate,
            IsDynamicMaintenance(Rec));
        END ELSE BEGIN
          IF "Linked to Maintenance Scheme" <> '' THEN
            ShiftInDays := GetExecutionDateShiftInDays(Rec);
          MaintenanceDate := "Starting Date Maintenance" + ShiftInDays;
          TheoreticalMaintenanceDate := MaintenanceDate;
          MaintenanceInterval := "Maintenance Interval";
        END;
      END;

      IF TmpServiceContractArrangement.FINDSET THEN
        REPEAT
          ServiceContractArrangement := TmpServiceContractArrangement;
          ServiceContractArrangement.INSERT;
        UNTIL TmpServiceContractArrangement.NEXT = 0;

      IF TheoreticalMaintenanceDate <= IEndingDate THEN
        REPEAT
          CLEAR(ServiceContractArrangement);
          ServiceContractArrangement."Service Contract No." := "Service Contract No.";
          ServiceContractArrangement."Object No." := "Object No.";
          ServiceContractArrangement."Service Location No." := ContractObject."Service Location No.";
          ServiceContractArrangement."Maintenance Scheme" := "Maintenance Scheme";
          ServiceContractArrangement."Maintenance Year" := DATE2DWY(MaintenanceDate, 3);
          ServiceContractArrangement."Maintenance Week" := DATE2DWY(MaintenanceDate, 2);
          ServiceContractArrangement."Maintenance Day" := "Maintenance Day";
          ServiceContractArrangement."Starting Time Maint. Window" := "Starting Time Maint. Window";
          ServiceContractArrangement."Ending Time Maint. Window" := "Ending Time Maint. Window";
          ServiceContractArrangement."Maintenance Interval" := MaintenanceInterval;
          ServiceContractArrangement."Theoretical Maintenance Date" := TheoreticalMaintenanceDate;
          ServiceContractArrangement."Maintenance Bandwidth" := "Maintenance Bandwidth";
          ServiceContractArrangement.Cluster := Cluster;
          ServiceContractArrangement."Service Category" := "Service Category";
          IF ServiceContractArrangement.IsUniqueDWY THEN
            ServiceContractArrangement.INSERT(TRUE);

          GetNextMaintenanceDate(
            MaintenanceDate,
            "Maintenance Interval",
            MaintenanceInterval,
            "Maintenance Day",
            "Starting Date Maintenance",
            TheoreticalMaintenanceDate,
            IsDynamicMaintenance(Rec));
        UNTIL TheoreticalMaintenanceDate > IEndingDate;

      IF NOT ISkipUpdateLastAndNextMaintDate THEN
        MODIFY(TRUE);
    END;

    PROCEDURE GetNextMaintenanceDate@1100526201(VAR MaintenanceDate@1100526200 : Date;MaintenanceInterval@1100526201 : DateFormula;VAR UsedMaintenanceInterval@1100528804 : DateFormula;MaintenanceDay@1100526202 : ' ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend';MaintenanceStartingDate@1100528600 : Date;VAR TheoreticalPlannedMaintDate@1100526206 : Date;DynamicMaintenance@1100528801 : Boolean);
    VAR
      Day@1100526205 : Integer;
      Week@1100526203 : Integer;
      Year@1100526204 : Integer;
      DynamicIntervalCalculated@1100528800 : DateFormula;
      DynamicTheoreticalPlannedMaintDate@1100528803 : Date;
      NonDynamicTheoreticalPlannedMaintDate@1100528805 : Date;
    BEGIN
      NonDynamicTheoreticalPlannedMaintDate := CALCDATE(MaintenanceInterval, TheoreticalPlannedMaintDate);

      IF DynamicMaintenance THEN BEGIN
        IF CalculateDynamicInterval("Object No.","Consumption Component", "Maintenance Interval (Counter)", DynamicIntervalCalculated) THEN
          DynamicTheoreticalPlannedMaintDate := CALCDATE(DynamicIntervalCalculated, TheoreticalPlannedMaintDate)
        ELSE
          ERROR(Text009, "Consumption Component", "Object No.");
        IF (DynamicTheoreticalPlannedMaintDate < NonDynamicTheoreticalPlannedMaintDate) OR (FORMAT(MaintenanceInterval) = '') THEN BEGIN
          TheoreticalPlannedMaintDate := DynamicTheoreticalPlannedMaintDate;
          UsedMaintenanceInterval := DynamicIntervalCalculated;
        END ELSE BEGIN
          TheoreticalPlannedMaintDate := NonDynamicTheoreticalPlannedMaintDate;
          UsedMaintenanceInterval := MaintenanceInterval;
        END;
      END;

      IF NOT DynamicMaintenance THEN BEGIN
       TheoreticalPlannedMaintDate := NonDynamicTheoreticalPlannedMaintDate;
       UsedMaintenanceInterval := MaintenanceInterval;
      END;

      MaintenanceDate := TheoreticalPlannedMaintDate;


      IF MaintenanceDay = MaintenanceDay::" " THEN
        EXIT;

      Day := DATE2DWY(MaintenanceDate, 1);
      CASE MaintenanceDay OF
        MaintenanceDay::Monday..MaintenanceDay::Sunday:
          BEGIN
            IF MaintenanceDay - Day > 3 THEN
              MaintenanceDate := CALCDATE('<-1W>', MaintenanceDate);
            IF MaintenanceDay - Day < -3 THEN
              MaintenanceDate := CALCDATE('<+1W>', MaintenanceDate);
          END;
        MaintenanceDay::Weekday:
          BEGIN
            MaintenanceDay := Day;
            IF Day = 6 THEN
              MaintenanceDay := 5;
            IF Day = 7 THEN BEGIN
              MaintenanceDay := 1;
              MaintenanceDate := CALCDATE('<+1W>', MaintenanceDate);
            END;
          END;
        MaintenanceDay::Weekend:
          BEGIN
            MaintenanceDay := Day;
            IF Day IN [1..3] THEN BEGIN
              MaintenanceDate := CALCDATE('<-1W>', MaintenanceDate);
              MaintenanceDay := 7;
            END;
            IF Day IN [4..5] THEN BEGIN
              MaintenanceDay := 6;
            END;
          END;
      END;
      IF MaintenanceStartingDate > MaintenanceDate THEN
        MaintenanceDate := CALCDATE('<+1W>', MaintenanceDate);
      Week := DATE2DWY(MaintenanceDate, 2);
      Year := DATE2DWY(MaintenanceDate, 3);
      MaintenanceDate := DWY2DATE(MaintenanceDay, Week, Year);
    END;

    PROCEDURE GetMaintEndingDate@1100526202() : Date;
    VAR
      ServiceContact@1100526200 : Record 11012812;
      ContractObject@1100526201 : Record 11071702;
    BEGIN
      ContractObject.GET("Service Contract No.", "Object No.");
      IF ContractObject."Ending Date" <> 0D THEN
        EXIT(ContractObject."Ending Date");

      IF ServiceContact.GET("Service Contract No.") THEN
        EXIT(ServiceContact."Ending Date");
    END;

    LOCAL PROCEDURE TestMaintenanceTimes@1100528602();
    BEGIN
      IF ("Starting Time Maint. Window" = 0T) OR ("Ending Time Maint. Window" = 0T) THEN
        EXIT;
      IF "Ending Time Maint. Window" <= "Starting Time Maint. Window" THEN
        FIELDERROR("Ending Time Maint. Window", STRSUBSTNO(Text005, FIELDCAPTION("Starting Time Maint. Window")));
    END;

    PROCEDURE TestObjectInContract@1100409000(IServiceObjectNo@1100409001 : Code[20]);
    VAR
      ContractObject@1100409000 : Record 11071702;
    BEGIN
      IF NOT ContractObject.GET("Service Contract No.", IServiceObjectNo) THEN
        ERROR(Text002, IServiceObjectNo, "Service Contract No.");
    END;

    PROCEDURE GetPrefServiceLocationNo@1100528301(IWithErrorCheck@1100528300 : Boolean) : Code[20];
    VAR
      ServiceObject@1100528301 : Record 11071691;
    BEGIN
      IF ServiceObject.GET("Object No.") THEN
        EXIT(ServiceObject.GetPrefServiceLocationNo(IWithErrorCheck));
    END;

    PROCEDURE RemoveOldContractArrangements@1100525002(IServiceContractNo@1100525000 : Code[20];IServiceObjectNo@1100525001 : Code[20];IMaintenanceScheme@1100525002 : Code[20]);
    VAR
      ServiceContractArrangement@1100525003 : Record 11071705;
      NotAllArragementsDeleted@1100525004 : Boolean;
    BEGIN
      ServiceContractArrangement.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractArrangement.SETRANGE("Object No.", IServiceObjectNo);
      ServiceContractArrangement.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
      ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
      ServiceContractArrangement.SETRANGE(Finished, FALSE);
      IF ServiceContractArrangement.FINDSET THEN
        REPEAT
          ServiceContractArrangement.CALCFIELDS("Service Order No.", "Maintenance Proposal No.");
          IF (ServiceContractArrangement."Service Order No." = '') AND
             (ServiceContractArrangement."Maintenance Proposal No." = '') AND
             NOT ServiceContractArrangement.IsMaintPropLineExpired
          THEN
            ServiceContractArrangement.DELETE(TRUE)
          ELSE
            NotAllArragementsDeleted := TRUE;
        UNTIL ServiceContractArrangement.NEXT = 0;
      IF GUIALLOWED AND NotAllArragementsDeleted AND NOT SuppressMsgNonDeletedSCArr THEN
        MESSAGE(Text006, IServiceContractNo, IServiceObjectNo, IMaintenanceScheme);
    END;

    PROCEDURE UpdateLastAndNextMaintDate@1100525003();
    VAR
      ServiceContractArrangement@1100525000 : Record 11071705;
      NextMaintenanceDate@1100527550 : Date;
      LastPossibleMaintenanceDate@1100527551 : Date;
    BEGIN
      VALIDATE("Last Maintenance Date", 0D);
      VALIDATE("Next Maintenance Date", 0D);

      ServiceContractArrangement.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractArrangement.SETRANGE("Object No.", "Object No.");
      ServiceContractArrangement.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
      ServiceContractArrangement.SETFILTER("Service Order No.", '<>%1', '');
      IF ServiceContractArrangement.FIND('+') THEN
        REPEAT
          ServiceContractArrangement.CALCFIELDS("Service Order No.");
          ServiceContractArrangement.CALCFIELDS(Finished, "Service Order Status", "Service Order Starting Date");
          IF ServiceContractArrangement.Finished AND
            (ServiceContractArrangement."Service Order Status" <> ServiceContractArrangement."Service Order Status"::Cancelled)
          THEN
            VALIDATE("Last Maintenance Date", ServiceContractArrangement."Service Order Starting Date");
        UNTIL (ServiceContractArrangement.NEXT(-1) = 0) OR ("Last Maintenance Date" <> 0D);

      ServiceContractArrangement.SETRANGE("Service Order No.");
      ServiceContractArrangement.SETRANGE(Cancelled);
      IF ServiceContractArrangement.FINDSET THEN
        REPEAT
          ServiceContractArrangement.CALCFIELDS("Service Order No.", "Planned Maintenance Date");
          IF ServiceContractArrangement."Service Order No." <> '' THEN
            ServiceContractArrangement.CALCFIELDS(
              Finished, "Service Order Status", "Service Order Starting Date");
          IF NOT ServiceContractArrangement.Cancelled AND
              NOT ServiceContractArrangement.Finished AND
              (ServiceContractArrangement."Service Order Status" <> ServiceContractArrangement."Service Order Status"::Cancelled) AND
              NOT ServiceContractArrangement.IsMaintPropLineExpired
          THEN BEGIN
            CASE TRUE OF
              ServiceContractArrangement."Service Order Starting Date" <> 0D:
                VALIDATE("Next Maintenance Date", ServiceContractArrangement."Service Order Starting Date");
              ServiceContractArrangement."Planned Maintenance Date" <> 0D:
                VALIDATE("Next Maintenance Date", ServiceContractArrangement."Planned Maintenance Date");
            ELSE
              VALIDATE("Next Maintenance Date", ServiceContractArrangement.GetMaintenanceDate);
            END;
          END;
        UNTIL (ServiceContractArrangement.NEXT = 0) OR ("Next Maintenance Date" <> 0D);

      IF "Next Maintenance Date" = 0D THEN BEGIN
        IF FORMAT("Maintenance Interval") <> '' THEN BEGIN
          LastPossibleMaintenanceDate := ServiceContractArrangement.GetMaintenanceDate;
          IF LastPossibleMaintenanceDate <> 0D THEN
            NextMaintenanceDate := CALCDATE("Maintenance Interval", LastPossibleMaintenanceDate)
          ELSE
            IF "Last Maintenance Date" <> 0D THEN
              NextMaintenanceDate := CALCDATE("Maintenance Interval", "Last Maintenance Date");
          CALCFIELDS("Object Ending Date");
          IF ("Object Ending Date" = 0D) OR (NextMaintenanceDate <= "Object Ending Date") THEN
            VALIDATE("Next Maintenance Date", NextMaintenanceDate)
          ELSE
            VALIDATE("Next Maintenance Date", 0D);
        END;
      END;
    END;

    PROCEDURE ValidateServiceCluster@1100528603();
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ServiceCluster@1100528600 : Record 11071742;
    BEGIN
      IF Cluster <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        IF ServiceContract."Use Contract Clusters" THEN
          ServiceCluster.GET(ServiceCluster.Type::Contract, "Service Contract No.", ServiceCluster."Source Type"::" ", Cluster)
        ELSE
          ServiceCluster.GET(ServiceCluster.Type::" ", '', ServiceCluster."Source Type"::" ", Cluster);
      END;
    END;

    PROCEDURE LookupServiceCluster@1100528601();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceCluster@1100528601 : Record 11071742;
    BEGIN
      ServiceContract.GET("Service Contract No.");
      IF ServiceContract."Use Contract Clusters" THEN BEGIN
        ServiceCluster.SETRANGE(Type, ServiceCluster.Type::Contract);
        ServiceCluster.SETRANGE("Type Code", "Service Contract No.");
        ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
        IF Cluster <> '' THEN
          ServiceCluster.GET(ServiceCluster.Type::Contract, "Service Contract No.", ServiceCluster."Source Type"::" ", Cluster);
      END ELSE BEGIN
        ServiceCluster.SETRANGE(Type, ServiceCluster.Type::" ");
        ServiceCluster.SETRANGE("Type Code", '');
        ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
        IF Cluster <> '' THEN
          ServiceCluster.GET(ServiceCluster.Type::" ", '', ServiceCluster."Source Type"::" ", Cluster);
      END;
      IF PAGE.RUNMODAL(0, ServiceCluster) = ACTION::LookupOK THEN
        VALIDATE(Cluster, ServiceCluster.Code);
    END;

    PROCEDURE DetermineBaseInspectionList@1100528604() BaseInspectionListCode : Code[20];
    VAR
      StdObjectMaintenanceScheme@1100528600 : Record 11071703;
      MaintenanceScheme@1100528601 : Record 11071745;
      StandardObject@1100528602 : Record 11020334;
    BEGIN
      CALCFIELDS("Standard Object No.", "Service Package");
      IF StdObjectMaintenanceScheme.GET("Standard Object No.", "Service Package", "Maintenance Scheme") THEN
        BaseInspectionListCode := StdObjectMaintenanceScheme."Base Inspection List Code";
      IF BaseInspectionListCode = '' THEN
        IF StandardObject.GET("Standard Object No.") THEN
          BaseInspectionListCode := StandardObject."Base Inspection List Code";
      IF BaseInspectionListCode = '' THEN
        IF MaintenanceScheme.GET("Maintenance Scheme") THEN
          BaseInspectionListCode := MaintenanceScheme."Base Inspection List Code";
    END;

    PROCEDURE SetSuppressMsgNonDeletedSCArr@1100528600(ISuppressMsgNonDeletedSCArr@1100528600 : Boolean);
    BEGIN
      SuppressMsgNonDeletedSCArr := ISuppressMsgNonDeletedSCArr;
    END;

    PROCEDURE DetermineStartingDateMaintenanceOnOtherMaintenanceScheme@1100528704();
    VAR
      ServiceContractArrangement@1100528602 : Record 11071705;
      ContractObject@1100528603 : Record 11071702;
      LastMaintenanceDate@1100528601 : Date;
      NewMaintenanceDate@1100528605 : Date;
      MaintenanceInterval@1100528800 : DateFormula;
    BEGIN
      IF NOT ContractObject.GET("Service Contract No.", "Object No.") THEN
        ContractObject.INIT;

      ServiceContractArrangement.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractArrangement.SETRANGE("Object No.", "Object No.");
      ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
      IF ServiceContractArrangement.FIND('+') THEN
        REPEAT
          ServiceContractArrangement.CALCFIELDS("Maintenance Proposal No.", "Service Order No.", "Service Order Execution Date");
          IF (ServiceContractArrangement."Maintenance Proposal No." <> '') OR
             (ServiceContractArrangement."Service Order No." <> '') OR
             ServiceContractArrangement."Firm Planned"
          THEN BEGIN
            IF (ContractObject."Plan Method" = ContractObject."Plan Method"::"Theoretical Maintenance Date") OR
               (ServiceContractArrangement."Service Order Execution Date" = 0D)
            THEN BEGIN
              IF LastMaintenanceDate < ServiceContractArrangement."Theoretical Maintenance Date" THEN
                LastMaintenanceDate := ServiceContractArrangement."Theoretical Maintenance Date"
            END ELSE
              IF LastMaintenanceDate < ServiceContractArrangement."Service Order Execution Date" THEN
                LastMaintenanceDate := ServiceContractArrangement."Service Order Execution Date";
          END;
        UNTIL ServiceContractArrangement.NEXT(-1) = 0;
      IF LastMaintenanceDate <> 0D THEN BEGIN
        GetNextMaintenanceDate(
          NewMaintenanceDate, "Maintenance Interval", MaintenanceInterval, "Maintenance Day",
          "Starting Date Maintenance", LastMaintenanceDate, IsDynamicMaintenance(Rec));
        VALIDATE("Starting Date Maintenance", NewMaintenanceDate);
      END;
    END;

    PROCEDURE DetermineStartingDateMaintenanceByLastMaintDateConversion@1100409001();
    VAR
      ContractObject@1100409000 : Record 11071702;
      NewMaintenanceDate@1100409001 : Date;
      MaintenanceInterval@1100409002 : DateFormula;
    BEGIN
      IF NOT ContractObject.GET("Service Contract No.", "Object No.") THEN
        ContractObject.INIT;
      IF ContractObject."Last Maint. Date (Conversion)" = 0D THEN
        EXIT;
      GetNextMaintenanceDate(
        NewMaintenanceDate, "Maintenance Interval", MaintenanceInterval, "Maintenance Day",
        "Starting Date Maintenance", ContractObject."Last Maint. Date (Conversion)", IsDynamicMaintenance(Rec));
      VALIDATE("Starting Date Maintenance", NewMaintenanceDate);
    END;

    PROCEDURE GetPreferredBuildingCode@1100528605() : Code[20];
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF ServiceObject.GET("Object No.") THEN
        EXIT(ServiceObject.GetPreferredBuildingCode);
    END;

    PROCEDURE GetExecutionDateShiftInDays@1100528606(IContractObjectMaintenance@1100528600 : Record 11071692) : Integer;
    VAR
      ContractObjectMaintenance@1100528602 : Record 11071692;
      ServiceContractArrangement@1100528603 : Record 11071705;
    BEGIN
      IF IContractObjectMaintenance."Linked to Maintenance Scheme" = '' THEN
        EXIT;
      ContractObjectMaintenance := IContractObjectMaintenance;
      ContractObjectMaintenance.SETRECFILTER;
      ContractObjectMaintenance.SETRANGE("Maintenance Scheme", IContractObjectMaintenance."Linked to Maintenance Scheme");
      IF NOT ContractObjectMaintenance.FINDFIRST THEN
        EXIT;
      ServiceContractArrangement.SETRANGE("Service Contract No.", ContractObjectMaintenance."Service Contract No.");
      ServiceContractArrangement.SETRANGE("Object No.", ContractObjectMaintenance."Object No.");
      ServiceContractArrangement.SETRANGE("Maintenance Scheme", ContractObjectMaintenance."Maintenance Scheme");
      ServiceContractArrangement.SETFILTER("Service Order Execution Date", '<>%1', 0D);
      IF ServiceContractArrangement.FINDLAST THEN BEGIN
        ServiceContractArrangement.CALCFIELDS("Service Order Execution Date");
        EXIT(ServiceContractArrangement."Service Order Execution Date" - ServiceContractArrangement."Theoretical Maintenance Date");
      END;
    END;

    PROCEDURE GetWorkTravelHours@1100528607(IIndexDate@1100528604 : Date;VAR OWorkingHours@1100528601 : Decimal;VAR OTravelHours@1100528602 : Decimal;VAR OMaterialPresent@1100528603 : Boolean);
    VAR
      MaintenanceManagement@1100528600 : Codeunit 11012829;
    BEGIN
      OWorkingHours := 0;
      OTravelHours := 0;
      OMaterialPresent := FALSE;
      CALCFIELDS("Object Ending Date");
      IF ("Object Ending Date" <> 0D) AND ("Object Ending Date" < IIndexDate) THEN
        EXIT;
      MaintenanceManagement.GetMaintLinesWorkTravelHours(
        "Object No.", "Maintenance Scheme", IIndexDate, "Service Contract No.", OWorkingHours, OTravelHours, OMaterialPresent);
    END;

    PROCEDURE GetCostObjectAmounts@1100528608(IIndexDate@1100528604 : Date;VAR OMaterialAmount@1100528605 : Decimal;VAR OLaborAmount@1100528606 : Decimal;VAR OWorkingHours@1100528601 : Decimal;VAR OTravelHours@1100528602 : Decimal;VAR OSubcontractingAmount@1100528607 : Decimal;VAR OPlantAmount@1100528608 : Decimal;VAR OSundryAmount@1100528609 : Decimal;VAR OMaterialPresent@1100528603 : Boolean);
    VAR
      MaintenanceManagement@1100528600 : Codeunit 11012829;
    BEGIN
      OMaterialAmount := 0;
      OLaborAmount := 0;
      OWorkingHours := 0;
      OTravelHours := 0;
      OSubcontractingAmount := 0;
      OPlantAmount := 0;
      OSundryAmount := 0;
      OMaterialPresent := FALSE;
      CALCFIELDS("Object Ending Date");
      IF ("Object Ending Date" <> 0D) AND ("Object Ending Date" < IIndexDate) THEN
        EXIT;
      MaintenanceManagement.GetMaintLinesCostObjectAmounts(
        "Object No.", "Maintenance Scheme", IIndexDate, "Service Contract No.",
        OMaterialAmount, OLaborAmount, OWorkingHours, OTravelHours, OSubcontractingAmount, OPlantAmount, OSundryAmount, OMaterialPresent);
    END;

    PROCEDURE TestInterval@1100528803(ShowErrors@1100528800 : Boolean) : Boolean;
    BEGIN
      IF (FORMAT("Maintenance Interval") = '') AND ("Maintenance Interval (Counter)" = 0) THEN
        IF ShowErrors THEN
          TESTFIELD("Maintenance Interval")
        ELSE
          EXIT(FALSE);

      IF ("Maintenance Interval (Counter)" <> 0) AND ("Consumption Component" = '') THEN
        IF ShowErrors THEN
          TESTFIELD("Consumption Component")
        ELSE
          EXIT(FALSE);

      IF ("Consumption Component" <> '') AND ("Maintenance Interval (Counter)" = 0) THEN
        IF ShowErrors THEN
          ERROR(Text008)
        ELSE
          EXIT(FALSE);

      IF ("Consumption Component" = '') AND (FORMAT("Maintenance Interval") = '') THEN
        IF ShowErrors THEN
          TESTFIELD("Maintenance Interval")
        ELSE
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE IsDynamicMaintenance@1100528800(ContractObjectMaintenance@1100528800 : Record 11071692) : Boolean;
    BEGIN
      IF ContractObjectMaintenance."Consumption Component" <> '' THEN
        EXIT(TRUE);
    END;

    PROCEDURE CalculateDynamicInterval@1100528804(IObjectNumber@1100528800 : Code[20];IConsumptionComponent@1100528801 : Code[20];IMaintenanceIntervalCounter@1100528810 : Decimal;VAR ODynamicInterval@1100528802 : DateFormula) : Boolean;
    VAR
      MeterReading@1100528804 : Record 11071971;
      EmptyDateFormula@1100528803 : DateFormula;
      LastExtrapolationDate@1100528805 : Date;
      LastExtrapolationMeterReading@1100528806 : Decimal;
      FirstExtrapolationDate@1100528807 : Date;
      FirstExtrapolationMeterReading@1100528808 : Decimal;
      CountsPerDay@1100528809 : Decimal;
    BEGIN
      ODynamicInterval := EmptyDateFormula;

      MeterReading.SETRANGE("Object No.", IObjectNumber);
      MeterReading.SETRANGE("Consumption Component Code", IConsumptionComponent);
      IF NOT MeterReading.FINDLAST THEN
        EXIT(FALSE);

      LastExtrapolationDate := MeterReading."Reading Date";
      LastExtrapolationMeterReading := MeterReading."Meter Reading";
      IF MeterReading.NEXT(-1) = 0 THEN
        EXIT(FALSE);
      FirstExtrapolationDate := MeterReading."Reading Date";
      FirstExtrapolationMeterReading := MeterReading."Meter Reading";

      CountsPerDay := (LastExtrapolationMeterReading - FirstExtrapolationMeterReading) / (LastExtrapolationDate - FirstExtrapolationDate);

      EXIT(EVALUATE(ODynamicInterval, STRSUBSTNO('<%1>', FORMAT(ROUND((IMaintenanceIntervalCounter / CountsPerDay),1,'>'),0, '<Integer><Decimals>') + 'D')));
    END;

    LOCAL PROCEDURE DetermineCluster@1100528609();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      PostCodeGroup@1100528601 : Record 11020599;
    BEGIN
      ServiceContract.GET("Service Contract No.");
      IF ServiceContract."Use Contract Clusters" THEN
        EXIT;
      CALCFIELDS("Post Code Group");
      IF PostCodeGroup.GET("Post Code Group") THEN
        VALIDATE(Cluster, PostCodeGroup."Service Cluster");
    END;

    PROCEDURE GetLatestActiveArrangement@1100525006(VAR OServiceContractArrangement@1100525000 : Record 11071705) : Boolean;
    VAR
      ServiceContractArrangement@1100525001 : Record 11071705;
    BEGIN
      ServiceContractArrangement.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractArrangement.SETRANGE("Object No.", "Object No.");
      ServiceContractArrangement.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      IF ServiceContractArrangement.FIND('+') THEN
        REPEAT
          ServiceContractArrangement.CALCFIELDS("Maintenance Proposal No.", "Service Order No.");
          IF (ServiceContractArrangement."Maintenance Proposal No." <> '') OR (ServiceContractArrangement."Service Order No." <> '') OR
            ServiceContractArrangement."Firm Planned" OR ServiceContractArrangement.Cancelled
          THEN
            OServiceContractArrangement := ServiceContractArrangement;
        UNTIL (ServiceContractArrangement.NEXT(-1) = 0) OR (OServiceContractArrangement."Service Contract No." <> '');
      EXIT(OServiceContractArrangement."Service Contract No." <> '');
    END;

    LOCAL PROCEDURE CheckActiveContractArrangement@1100525005();
    VAR
      ServiceContractArrangement@1100525000 : Record 11071705;
      Year@1100525001 : Integer;
      Week@1100525002 : Integer;
    BEGIN
      GetLatestActiveArrangement(ServiceContractArrangement);

      Year := DATE2DWY("Starting Date Maintenance", 3);
      Week := DATE2DWY("Starting Date Maintenance", 2);

      IF GUIALLOWED THEN BEGIN //C031406
        IF (ServiceContractArrangement."Maintenance Year" = Year) AND (ServiceContractArrangement."Maintenance Week" = Week) THEN
          FIELDERROR("Starting Date Maintenance", STRSUBSTNO(Text010, Week, Year));
        IF ServiceContractArrangement."Maintenance Year" * 100 + ServiceContractArrangement."Maintenance Week" > Year * 100 + Week THEN
          MESSAGE(Text011, Week, Year, FIELDCAPTION("Starting Date Maintenance"));
      END;
    END;

    LOCAL PROCEDURE RemoveSubcontractors@1100529402(IServiceContractNo@1100529400 : Code[20];IObjectNo@1100529401 : Code[20];IMaintenanceScheme@1100529402 : Code[20]);
    VAR
      SubcontractorService@1100529403 : Record 11071789;
    BEGIN
      SubcontractorService.SETRANGE("Service Contract No.", IServiceContractNo);
      SubcontractorService.SETRANGE("Service Location No.", '');
      SubcontractorService.SETRANGE("Object No.", IObjectNo);
      SubcontractorService.SETRANGE("Maintenance Scheme Code", IMaintenanceScheme);
      IF NOT SubcontractorService.ISEMPTY THEN
        SubcontractorService.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE TestIfQuantityBasedOnServiceObject@1100528610();
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      ServiceObject.GET("Object No.");
      ServiceObject.TESTFIELD("Quantity Based on", ServiceObject."Quantity Based on"::"Service Object");
    END;

    BEGIN
    END.
  }
}

