OBJECT Page 11072371 Plant Availability
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=WerkzeugverfÅgbarkeit;
               ENU=Plant Availability;
               NLD=Materieelbeschikbaarheid;
               NOR=Maskintilgjengelighet;
               SVE=MaskintillgÑnglighet];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table11012551;
    PageType=Worksheet;
    OnInit=BEGIN
             EndDateSpecialEditable := TRUE;
             EndDateSpecialVisible := TRUE;
             CopyButtonVisible := TRUE;
             CountPlantNeed := TRUE;
             gDoMultiCopy := FALSE;
             PeriodType := PeriodType::SpecialPeriod;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 PlantSetupRec.GET;
                 //PlantSetupRec.TESTFIELD("Rental Depot");  //*DPA.o
                 //*DPA.sn
                 DefRentalDepot := PlantSetupRec.GetRentalDepot();
                 IF DefRentalDepot = '' THEN;
                   PlantSetupRec.TESTFIELD("Rental Depot");
                 //*DPA.en

                 CopyButtonVisible := gMultiCopyAllowed;

                 IF gSelectedDepots <> '' THEN
                   DepotFilter := gSelectedDepots;
                 CheckDepotFilter(FALSE);

                 IF gStartDate <> 0D THEN
                   PeriodRec."Period Start" := gStartDate;

                 IF gUsePeriodType THEN
                   PeriodType := gPeriodType;

                 IF gStartDateSpecial <> 0D THEN BEGIN
                   StartDateSpecial := gStartDateSpecial;
                   EndDateSpecial := gEndDateSpecial;
                   OnValidateEndDateSpecial(FALSE);
                 END;

                 IF PeriodType <> PeriodType::SpecialPeriod THEN
                   PeriodFormManagement.FindDate('=',PeriodRec,PeriodType)
                 ELSE
                   PeriodFormManagement.FindDate('=',PeriodRec,PeriodType::Day);

                 SetPeriodDates();
               END;

    OnAfterGetRecord=BEGIN
                       CALCFIELDS("Quantity in Depot", "Quantity Rented");
                       QuantityTotal := "Quantity in Depot" + "Quantity Rented";

                       FillPeriodDates();

                       //* Available: with CountNotPostedand CountExpectedReturn on 'TRUE'
                       QuantityAvailable :=
                         PlanningFutureDeficit.PlanningAvailable(DepotFilter,TRUE,CountPlantNeed,TRUE,Code,PeriodStart,PeriodEnd,TRUE);

                       //* Planned: calculate plant need
                       QuantityPlanned := PlanningFutureDeficit.PlanningPlantNeed(DepotFilter,Code,PeriodStart,PeriodEnd,TRUE);

                       //* Reserved: calculate not-posted plant orders
                       QuantityReserved := PlanningFutureDeficit.PlanningNotPostedPO(DepotFilter,Code,PeriodStart,PeriodEnd,TRUE);
                       QuantityAvailableOnFormat;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100485042;1 ;ActionGroup;
                      CaptionML=[DEU=&Planung;
                                 ENU=&Planning;
                                 NLD=&Planning;
                                 NOR=&Planlegging;
                                 SVE=&Planering] }
      { 1100485043;2 ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[DEU=Werkzeugart&karte;
                                 ENU=Plant Type &Card;
                                 NLD=Materieelsoort&kaart;
                                 NOR=Maskintype&kort;
                                 SVE=Maskintyps&kort];
                      RunObject=Page 11012551;
                      RunPageLink=Code=FIELD(Code);
                      Image=NewResource }
      { 1100485046;2 ;Action    ;
                      CaptionML=[DEU=Werkzeug&planung;
                                 ENU=Plant &Planning;
                                 NLD=Materieel&planning;
                                 NOR=Maskin&planlegging;
                                 SVE=Maskin&planering];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=RefreshPlanningLine;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPlantPlanningFrm@1100485000 : Page 11012608;
                               BEGIN
                                 lvPlantPlanningFrm.SETRECORD(Rec);
                                 lvPlantPlanningFrm.SetDepotFilter(DepotFilter);
                                 //lvPlantPlanningFrm.SetStarDate(StartDateSpecial);
                                 lvPlantPlanningFrm.RUNMODAL;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210190001;1 ;Action    ;
                      CaptionML=[DEU=Vorperiode;
                                 ENU=Previous Period;
                                 NLD=Vorige periode;
                                 NOR=Forrige periode;
                                 SVE=FîregÜende period];
                      ToolTipML=[DEU=Vorperiode;
                                 ENU=Previous Period;
                                 NLD=Vorige periode;
                                 NOR=Forrige periode;
                                 SVE=FîregÜende period];
                      Promoted=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF PeriodType <> PeriodType::SpecialPeriod THEN BEGIN
                                   PeriodFormManagement.NextDate(-1,PeriodRec,PeriodType);
                                   StartDateSpecial := PeriodRec."Period Start";
                                   EndDateSpecial := PeriodRec."Period End";
                                 END;
                               END;
                                }
      { 1210190000;1 ;Action    ;
                      CaptionML=[DEU=Folgeperiode;
                                 ENU=Next Period;
                                 NLD=Volgende periode;
                                 NOR=Neste periode;
                                 SVE=NÑsta period];
                      ToolTipML=[DEU=Folgeperiode;
                                 ENU=Next Period;
                                 NLD=Volgende periode;
                                 NOR=Neste periode;
                                 SVE=NÑsta period];
                      Promoted=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF PeriodType <> PeriodType::SpecialPeriod THEN BEGIN
                                   PeriodFormManagement.NextDate(1,PeriodRec,PeriodType);
                                   StartDateSpecial := PeriodRec."Period Start";
                                   EndDateSpecial := PeriodRec."Period End";
                                 END;
                               END;
                                }
      { 1100485012;1 ;Action    ;
                      Name=CopyButton;
                      CaptionML=[DEU=&Kopieren;
                                 ENU=&Copy;
                                 NLD=&Kopieer;
                                 NOR=&Kopier;
                                 SVE=&Kopiera];
                      Promoted=Yes;
                      Visible=CopyButtonVisible;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //CopyLines;
                                 CurrPage.SETSELECTIONFILTER(MarkedMultiCopyRec);
                                 IF NOT MarkedMultiCopyRec.FINDFIRST THEN
                                   ERROR(Text004)
                                 ELSE BEGIN
                                   gDoMultiCopy := TRUE;
                                   CurrPage.CLOSE;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190004;1;Group   }

    { 1210190005;2;Field  ;
                CaptionML=[DEU=Depotfilter;
                           ENU=Depot Filter;
                           NLD=Depotfilter;
                           NOR=Depotfilter;
                           SVE=DepÜfiler];
                SourceExpr=DepotFilter;
                OnValidate=BEGIN
                             CheckDepotFilter(TRUE);
                           END;

                OnLookup=VAR
                           PlantLocation@1100529000 : Record 11012554;
                         BEGIN
                           PlantLocation.SETRANGE(Depot, TRUE);
                           IF PAGE.RUNMODAL(0, PlantLocation) = ACTION::LookupOK THEN BEGIN
                             Text := Text + PlantLocation.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100485041;2;Field  ;
                CaptionML=[DEU=Werzeugbedarf;
                           ENU=Plant Need;
                           NLD=Materieelbehoefte;
                           NOR=Maskinbehov;
                           SVE=Maskinbehov];
                ToolTipML=[DEU=ZÑhlen in 'Anzahl verfÅgbar';
                           ENU=Count in 'Quantity Available';
                           NLD=Tellen in 'Aantal beschikbaar';
                           NOR=Regne med 'Disponibelt antall';
                           SVE=Fîrteckning îver 'disponibelt antal'];
                SourceExpr=CountPlantNeed }

    { 14  ;2   ;Field     ;
                CaptionML=[DEU=Periodentyp;
                           ENU=Periode Type;
                           NLD=Periodesoort;
                           SVE=Periodfilter];
                OptionCaptionML=[DEU=Tag,Woche,Monat,Quartal,Jahr,Buchhaltungsperiode,,,,,,Sonderperiode;
                                 ENU=Day,Week,Month,Quarter,Year,Accounting Period,,,,,,Special Period;
                                 NLD=Dag,Week,Maand,Jaar,Boekingsperiode,,,,,,Specifieke periode;
                                 SVE=Dag,Vecka,MÜnad,Kvartal,èr,Bokfîringsperiod,,,,,,Specialperiod];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             IF PeriodType = PeriodType::SpecialPeriod THEN
                               SpecialPeriodPeriodTypeOnValid;
                             IF PeriodType = PeriodType::"Accounting Period" THEN
                               AccountingPerioPeriodTypeOnVal;
                             IF PeriodType = PeriodType::Year THEN
                               YearPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Quarter THEN
                               QuarterPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Month THEN
                               MonthPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Week THEN
                               WeekPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Day THEN
                               DayPeriodTypeOnValidate;
                           END;
                            }

    { 1100485004;2;Field  ;
                Name=StartDateSpecial;
                CaptionML=[DEU=Startdatum Rate;
                           ENU=Start Date Period;
                           NLD=Startdatum periode;
                           NOR=Startdato for periode;
                           SVE=Startdatumperiod];
                NotBlank=Yes;
                SourceExpr=StartDateSpecial;
                OnValidate=BEGIN
                             IF PeriodType <> PeriodType::SpecialPeriod THEN
                               SetPeriodDates();

                             IF StartDateSpecial > EndDateSpecial THEN
                               EndDateSpecial := StartDateSpecial;

                             OnValidateEndDateSpecial(FALSE);
                           END;
                            }

    { 1100485002;2;Field  ;
                Name=EndDateSpecial;
                CaptionML=[DEU=Enddatum Rate;
                           ENU=End Date Period;
                           NLD=Einddatum periode;
                           NOR=Sluttdato for periode;
                           SVE=Slutdatum fîr period];
                NotBlank=Yes;
                SourceExpr=EndDateSpecial;
                Visible=EndDateSpecialVisible;
                Editable=EndDateSpecialEditable;
                OnValidate=BEGIN
                             IF EndDateSpecial < StartDateSpecial THEN
                               ERROR(Text003);

                             OnValidateEndDateSpecial(TRUE);
                           END;
                            }

    { 1100485013;1;Group  ;
                Editable=FALSE;
                GroupType=Repeater }

    { 1100485014;2;Field  ;
                CaptionML=[DEU=Werkzeugart;
                           ENU=Plant Type;
                           NLD=Materieelsoort;
                           NOR=Maskintype;
                           SVE=Maskintyp];
                SourceExpr=Code }

    { 1100485018;2;Field  ;
                SourceExpr=Description }

    { 1100485016;2;Field  ;
                SourceExpr="Search Name";
                Visible=FALSE }

    { 1100485024;2;Field  ;
                CaptionML=[DEU=Ebene 1;
                           ENU=Level 1;
                           NLD=Niveau 1;
                           NOR=NivÜ 1;
                           SVE=NivÜ 1];
                SourceExpr="Group Level 1";
                Visible=FALSE }

    { 1100485030;2;Field  ;
                DrillDown=No;
                SourceExpr="Group Level 1 Description";
                Visible=FALSE }

    { 1100485026;2;Field  ;
                CaptionML=[DEU=Ebene 2;
                           ENU=Level 2;
                           NLD=Niveau 2;
                           NOR=NivÜ 2;
                           SVE=NivÜ 2];
                SourceExpr="Group Level 2";
                Visible=FALSE }

    { 1100485032;2;Field  ;
                DrillDown=No;
                SourceExpr="Group Level 2 Description";
                Visible=FALSE }

    { 1100485028;2;Field  ;
                CaptionML=[DEU=Ebene 3;
                           ENU=Level 3;
                           NLD=Niveau 3;
                           NOR=NivÜ 3;
                           SVE=NivÜ 3];
                SourceExpr="Group Level 3";
                Visible=FALSE }

    { 1100485034;2;Field  ;
                DrillDown=No;
                SourceExpr="Group Level 3 Description";
                Visible=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Unit of Measure" }

    { 1100485008;2;Field  ;
                CaptionML=[DEU=Gesamtmenge;
                           ENU=Total Quantity;
                           NLD=Totaal aantal;
                           NOR=Totalt antall;
                           SVE=Totalt antal];
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityTotal }

    { 1100485022;2;Field  ;
                CaptionML=[DEU=Lagerbestand (aktuell);
                           ENU=Stock (Current);
                           NLD=Voorraad (huidige);
                           NOR=Lager (aktuellt);
                           SVE=Lager (aktuellt)];
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=CalculateInventoryQuantity() }

    { 1100485036;2;Field  ;
                CaptionML=[DEU=Geplant;
                           ENU=Planned;
                           NLD=Gepland;
                           NOR=Planlagt;
                           SVE=Planerad];
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityPlanned;
                OnDrillDown=BEGIN
                              DrillDownPlanningList(2);
                            END;
                             }

    { 1100485038;2;Field  ;
                CaptionML=[DEU=Reserviert;
                           ENU=Reserved;
                           NLD=Gereserveerd;
                           NOR=Reservert;
                           SVE=Reserverat];
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityReserved;
                OnDrillDown=BEGIN
                              DrillDownPlanningList(3);
                            END;
                             }

    { 1100485000;2;Field  ;
                Name=QuantityAvailable;
                CaptionML=[DEU=VerfÅgbar;
                           ENU=Available;
                           NLD=Beschikbaar;
                           NOR=Disponibelt;
                           SVE=Disponibelt];
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityAvailable;
                OnDrillDown=BEGIN
                              DrillDownPlanningList(1);
                            END;
                             }

  }
  CODE
  {
    VAR
      PlantSetupRec@1210190001 : Record 11012550;
      PeriodRec@1100485023 : Record 2000000007;
      MarkedMultiCopyRec@1100485018 : Record 11012551;
      PeriodFormManagement@1210190002 : Codeunit 359;
      PlanningFutureDeficit@1210190000 : Codeunit 11012576;
      gUsePeriodType@1100485009 : Boolean;
      gMultiCopyAllowed@1100485015 : Boolean;
      gDoMultiCopy@1100485017 : Boolean;
      CountPlantNeed@1100485025 : Boolean;
      PeriodType@11012002 : 'Day,Week,Month,Quarter,Year,Accounting Period,,,,,,SpecialPeriod';
      gPeriodType@1100485008 : Option;
      PeriodStart@1100485007 : Date;
      PeriodEnd@1100485006 : Date;
      gStartDate@1100485004 : Date;
      StartDateSpecial@1100485012 : Date;
      EndDateSpecial@1100485011 : Date;
      gStartDateSpecial@1100485014 : Date;
      gEndDateSpecial@1100485013 : Date;
      QuantityAvailable@11012004 : Decimal;
      Text001@1210190007 : TextConst 'DEU=Nur Depots gestattet, Standort ''%1'' is kein Depot.;ENU=Only depots allowed. location ''%1'' is not a depot.;NLD=Alleen depots toegestaan, locatie ''%1'' is geen depot.;NOR=Kun depoter tillates. lokasjon ''%1'' er ikke en depot.;SVE=Endast depÜer tillÜts. LagerstÑllet ''%1'' Ñr inte en depÜ.';
      QuantityTotal@1100485020 : Decimal;
      QuantityPlanned@1100485021 : Decimal;
      QuantityReserved@1100485022 : Decimal;
      DefRentalDepot@1210190003 : Code[20];
      DepotFilter@1100485002 : Code[250];
      gSelectedDepots@1100485000 : Code[250];
      gCompany@1100485001 : Text[30];
      Text002@1100485003 : TextConst 'DEU=Kein Depot ausgewÑhlt.;ENU=No depot selected.;NLD=Geen depot geselecteerd.;NOR=Depot er ikke valgt.;SVE=Inget depÜ har valts.';
      Text003@1100485005 : TextConst 'DEU=Enddatum darf nicht kleiner als das Startdatum sein.;ENU=End Date may not be less than the Start Date.;NLD=Einddatum mag niet kleiner zijn dan de startdatum.;NOR=Sluttdato kan ikke vëre tidligere enn Startdato.;SVE=Slutdatum fÜr inte infalla tidigare Ñn startdatum.';
      Text004@1100485016 : TextConst 'DEU=Zuerst DatensÑtze auswÑhlen.;ENU=First select records.;NLD=Selecteer eerst records.;NOR=Marker poster fõrst;SVE=Markera fîrst poster';
      Text005@1100485019 : TextConst 'DEU=Maximal eine Periode von 1 Jahr gestattet.;ENU=Maximum a period of 1 year allowed.;NLD=Maximaal een periode van 1 jaar toegestaan.;NOR=Maksimalt en periode pÜ 1 Ür tillatt.;SVE=Maximalt en period om 1 Ür tillÜten.';
      DPA_IsHardFilter@1100000999 : Boolean;
      CopyButtonVisible@19037030 : Boolean INDATASET;
      EndDateSpecialVisible@19037427 : Boolean INDATASET;
      EndDateSpecialEditable@19018942 : Boolean INDATASET;

    PROCEDURE CheckDepotFilter@1100485000(ErrorMode@1100485001 : Boolean) : Boolean;
    VAR
      PlantLocation@1100485000 : Record 11012554;
      TmpPlantLocation@1100529000 : TEMPORARY Record 11012554;
    BEGIN
      IF (gCompany <> '') THEN
        PlantLocation.CHANGECOMPANY(gCompany);

      IF DepotFilter = '' THEN  //* Filter empty not allowed, because this are all locations (not all depots)
        DepotFilter := DefRentalDepot;  //*DPA.n

      PlantLocation.SETFILTER(Code, DepotFilter);  //* Only depots allowed in depot filter!
      PlantLocation.SETRANGE(Depot, FALSE);
      IF PlantLocation.FINDFIRST THEN BEGIN
        IF ErrorMode THEN
          ERROR(Text001, PlantLocation.Code)
        ELSE
          DepotFilter := DefRentalDepot;  //*DPA.n
      END;

      PlantLocation.SETRANGE(Depot, TRUE);
      IF NOT PlantLocation.FINDFIRST THEN BEGIN
        IF ErrorMode THEN
          ERROR(Text002)
        ELSE
          //SelectedDepots := PlantSetupRec."Rental Depot";  //*DPA.o
          DepotFilter := DefRentalDepot;  //*DPA.n
      END;

      TmpPlantLocation.Code := '';
      TmpPlantLocation.INSERT(FALSE);
      TmpPlantLocation.SETFILTER(Code, DepotFilter);
      IF NOT TmpPlantLocation.ISEMPTY THEN BEGIN  // Location <Empty> not allowed in Depot Filter!
        IF ErrorMode THEN
          ERROR(Text001, TmpPlantLocation.Code)
        ELSE
          DepotFilter := DefRentalDepot;
      END;
    END;

    LOCAL PROCEDURE CalculateInventoryQuantity@1210190000() : Decimal;
    VAR
      lvStockQuantity@1210190000 : Decimal;
    BEGIN
      lvStockQuantity := PlanningFutureDeficit.GetCurrentInventoryQuantity(DepotFilter,Code);
      EXIT(lvStockQuantity);
    END;

    PROCEDURE SetDepotFilter@1100485003(ISelectedDepots@1100485000 : Code[250]);
    BEGIN
      gSelectedDepots := ISelectedDepots;
    END;

    PROCEDURE SetStarDate@1100485004(IStartDate@1100485000 : Date);
    BEGIN
      gStartDate := IStartDate;
    END;

    PROCEDURE SetPeriodType@1100485009(IPeriodType@1100485000 : Option);
    BEGIN
      gUsePeriodType := TRUE;
      gPeriodType := IPeriodType;
    END;

    PROCEDURE SetSpecialPeriodFilter@1100485006(IStartDateSpecial@1100485001 : Date;IEndDateSpecial@1100485000 : Date;IUseSpecialPeriod@1100485002 : Boolean);
    BEGIN
      IF IUseSpecialPeriod THEN BEGIN
        gUsePeriodType := TRUE;
        gPeriodType := PeriodType::SpecialPeriod;
      END;
      gStartDateSpecial := IStartDateSpecial;
      gEndDateSpecial := IEndDateSpecial;
      IF gEndDateSpecial < gStartDateSpecial THEN
        gEndDateSpecial := gStartDateSpecial;
    END;

    PROCEDURE SetCompany@1100485001(ICompany@1100485000 : Text[30]);
    BEGIN
      IF (ICompany = '') OR (ICompany = COMPANYNAME) THEN
        gCompany := ''
      ELSE BEGIN
        gCompany := ICompany;
        Rec.CHANGECOMPANY(gCompany);
        PlantSetupRec.CHANGECOMPANY(gCompany);
        PlanningFutureDeficit.SetCompany(gCompany);
      END;
    END;

    PROCEDURE SetMultiCopyAllowed@1100485011(IMultiCopyAllowed@1100485000 : Boolean);
    BEGIN
      gMultiCopyAllowed := IMultiCopyAllowed;
      gDoMultiCopy := FALSE;
    END;

    PROCEDURE GetMultiCopyRec@1100485015(VAR OTmpPlantTypeRec@1100485000 : TEMPORARY Record 11012551) : Boolean;
    BEGIN
      //* Attention: Record-variable (OTmpPlantTypeRec) must be 'Temporary' in calling process
      OTmpPlantTypeRec.RESET;
      OTmpPlantTypeRec.DELETEALL;

      IF gDoMultiCopy THEN BEGIN
        gDoMultiCopy := FALSE;
        CurrPage.SETSELECTIONFILTER(MarkedMultiCopyRec);
        IF MarkedMultiCopyRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            OTmpPlantTypeRec := MarkedMultiCopyRec;
            OTmpPlantTypeRec.INSERT;
          UNTIL MarkedMultiCopyRec.NEXT = 0;
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE DrillDownPlanningList@1100485002(IType@1100485002 : Integer);
    VAR
      lvTmpPlanRec@1100485001 : TEMPORARY Record 11012543;
      lvPlanningFutureDeficit@1100485000 : Codeunit 11012576;
    BEGIN
      //* Use a local for CU here! Not global, because then problems in combination with determine quantity
      //* Type: 1=Planning, 2=PlantNeed, 3=Not Posted Plant Orders
      FillPeriodDates();
      CASE IType OF
        1: lvPlanningFutureDeficit.BeforeDrilldownPlanning(
             DepotFilter,TRUE,TRUE,TRUE,Code,PeriodStart,PeriodEnd,lvTmpPlanRec);
        2: lvPlanningFutureDeficit.BeforeDrilldownPlannedReserved(
             DepotFilter,FALSE,TRUE,Code,PeriodStart,PeriodEnd,lvTmpPlanRec);
        3: lvPlanningFutureDeficit.BeforeDrilldownPlannedReserved(
             DepotFilter,TRUE,FALSE,Code,PeriodStart,PeriodEnd,lvTmpPlanRec);
      END;
      PAGE.RUNMODAL(PAGE::"Plant Planning List", lvTmpPlanRec)
    END;

    PROCEDURE SetPeriodDates@1100485007();
    BEGIN
      IF PeriodType <> PeriodType::SpecialPeriod THEN BEGIN
        EndDateSpecialEditable := (FALSE);
        PeriodRec."Period Start" := StartDateSpecial;
        PeriodFormManagement.FindDate('=<>',PeriodRec,PeriodType);
        StartDateSpecial := PeriodRec."Period Start";
        EndDateSpecial := PeriodRec."Period End";
      END ELSE BEGIN
        IF StartDateSpecial = 0D THEN BEGIN
          StartDateSpecial := PeriodRec."Period Start";
          EndDateSpecial := PeriodRec."Period End";
        END;
        EndDateSpecialEditable := (TRUE);
      END;
      EndDateSpecialVisible := (PeriodType <> PeriodType::Day);
    END;

    PROCEDURE FillPeriodDates@1100485005();
    BEGIN
      PeriodStart := StartDateSpecial;
      PeriodEnd := EndDateSpecial;
    END;

    PROCEDURE OnValidateEndDateSpecial@1100485010(IErrorMode@1100485000 : Boolean);
    BEGIN
      //* Allow max 366 days (1 Year) at 'PlanningFutureDeficit.PlanningAvailable' because of arrays
      IF (EndDateSpecial - StartDateSpecial + 1) > 366 THEN BEGIN
        IF IErrorMode THEN
          ERROR(Text005)
        ELSE
          EndDateSpecial := StartDateSpecial + 366 - 1;
      END;
    END;

    LOCAL PROCEDURE AccountingPerioPeriodTypOnPush@19038761();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE YearPeriodTypeOnPush@19051042();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE QuarterPeriodTypeOnPush@19018850();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE MonthPeriodTypeOnPush@19047374();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE WeekPeriodTypeOnPush@19046063();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE DayPeriodTypeOnPush@19008851();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE SpecialPeriodPeriodTypeOnPush@19062696();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE QuantityAvailableOnFormat@19079397();
    BEGIN
      IF QuantityAvailable < 0 THEN;
    END;

    LOCAL PROCEDURE DayPeriodTypeOnValidate@19012979();
    BEGIN
      DayPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE WeekPeriodTypeOnValidate@19058475();
    BEGIN
      WeekPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE MonthPeriodTypeOnValidate@19021027();
    BEGIN
      MonthPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE QuarterPeriodTypeOnValidate@19015346();
    BEGIN
      QuarterPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE YearPeriodTypeOnValidate@19064743();
    BEGIN
      YearPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE AccountingPerioPeriodTypeOnVal@19058901();
    BEGIN
      AccountingPerioPeriodTypOnPush;
    END;

    LOCAL PROCEDURE SpecialPeriodPeriodTypeOnValid@19016408();
    BEGIN
      SpecialPeriodPeriodTypeOnPush;
    END;

    BEGIN
    END.
  }
}

