OBJECT Codeunit 12013668 Ex ReadSoft Online Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF400000;
  }
  PROPERTIES
  {
    TableNo=12013653;
    OnRun=VAR
            Vendor@1100285000 : Record 23;
            tempVendor@1100285002 : TEMPORARY Record 23;
            GLSetup@1100285005 : Record 98;
            PmtTerm@1100285009 : Record 3;
            VendorXML@1100285001 : XMLport 12013610;
            FromFolder@1100285004 : Text[250];
            FromFile@1100285006 : Text[250];
            ReturnTxt@1100285003 : Text[250];
            NewDate@1100285010 : Date;
            TempDays@1100285011 : Integer;
            TempFile@1100285007 : File;
            NVOutStream@1100285008 : OutStream;
            tempFieldValue@1100285012 : TEMPORARY Record 12013654;
            ExReference@1100285013 : Record 12013632;
            FieldValueXML@1100285014 : XMLport 12013611;
          BEGIN
            CLEARLASTERROR;
            "Error Message" := '';

            CASE Type OF
              Type::Vendor:
                BEGIN
                  IF ExFileMgt.FileExist("Full Path",'suppliers.xml') THEN
                    IF NOT "Run Silent" THEN
                      ERROR(EXF002);

                  IF Vendor.FINDSET THEN BEGIN
                    GLSetup.GET;
                    REPEAT
                      IF Vendor.Name <> '' THEN BEGIN
                        tempVendor.INIT;
                        tempVendor.TRANSFERFIELDS(Vendor);
                        tempVendor.Name := DELCHR(Vendor.Name,'<'); // leading blanks must be deleted

                        IF Vendor."Currency Code" = '' THEN
                          tempVendor."Currency Code" := GLSetup."LCY Code";

                        tempVendor."Payment Terms Code" := '';
                        IF PmtTerm.GET(Vendor."Payment Terms Code") THEN
                          IF FORMAT(PmtTerm."Due Date Calculation") <> '' THEN BEGIN
                            NewDate := CALCDATE(PmtTerm."Due Date Calculation",TODAY);
                            TempDays := NewDate - TODAY;
                            IF TempDays > 0 THEN
                              tempVendor."Payment Terms Code" := FORMAT(TempDays);
                          END;
                        tempVendor.INSERT;
                      END;
                    UNTIL Vendor.NEXT = 0;
                  END;

                  tempVendor.RESET;
                  tempVendor.SETRANGE("No.",UNKNOWN);
                  IF NOT tempVendor.FINDFIRST THEN BEGIN
                    tempVendor.INIT;
                    tempVendor."No." := UNKNOWN;
                    tempVendor.Name := UNKNOWN;
                    tempVendor.INSERT;
                  END;
                  tempVendor.RESET;

                  GetTempFileNames('suppliers.xml',FromFile,FromFolder);
                  TempFile.CREATE(FromFolder + FromFile);

                  VendorXML.SetTempTable(tempVendor);
                  TempFile.CREATEOUTSTREAM(NVOutStream);
                  VendorXML.SETDESTINATION(NVOutStream);
                  VendorXML.EXPORT();
                  TempFile.CLOSE;
                  ReturnTxt := ExFileMgt.Move(FromFile,'suppliers.xml',FromFolder,"Full Path","Full Path");
                  IF ReturnTxt <> '' THEN
                    ERROR(ReturnTxt);
                END;
              //348829
              Type::FieldValues:
                BEGIN
                  CASE "Sub Type" OF
                    "Sub Type"::References:
                      BEGIN
                        IF ExFileMgt.FileExist("Full Path",'FieldValues.xml') THEN
                          IF NOT "Run Silent" THEN
                            ERROR(EXF002);

                        // Needs to Populate for all FieldValue Subtypes if a new Sub type is to be defined.
                        ExReference.RESET;
                        ExReference.SETFILTER(Reference,'<>%1','');
                        ExReference.SETRANGE("Vendor No.", '');
                        IF ExReference.FINDSET THEN
                          REPEAT
                            tempFieldValue.INIT;
                            tempFieldValue."Field Type Name" := 'BuyerContactPersonName';
                            tempFieldValue."Field Value" := ExReference.Reference;
                            tempFieldValue.INSERT;
                          UNTIL ExReference.NEXT = 0;

                        GetTempFileNames('FieldValues.xml',FromFile,FromFolder);
                        TempFile.CREATE(FromFolder + FromFile);

                        FieldValueXML.SetTempTable(tempFieldValue);
                        TempFile.CREATEOUTSTREAM(NVOutStream);
                        FieldValueXML.SETDESTINATION(NVOutStream);
                        FieldValueXML.EXPORT();
                        TempFile.CLOSE;
                        ReturnTxt := ExFileMgt.Move(FromFile,'FieldValues.xml',FromFolder,"Full Path","Full Path");
                        IF ReturnTxt <> '' THEN
                          ERROR(ReturnTxt);
                      END;
                      ELSE
                        IF NOT "Run Silent" THEN
                          ERROR(EXF003);
                  END;
                //348829
                END;
            END;

            "Run Silent" := FALSE;
            "Latest Export" := CURRENTDATETIME;
            MODIFY;
          END;

  }
  CODE
  {
    VAR
      ExFileMgt@1100285003 : Codeunit 12013602;
      EXF002@1100285004 : TextConst 'ENU=File exists, please verify that ReadSoft Connect is running.;SVE="Filen finns redan, kontrollera att ReadSoft Connect k”rs. "';
      UNKNOWN@1100285000 : TextConst 'ENU=UNKNOWN;SVE=OKŽND';
      EXF003@1100285001 : TextConst 'ENU=Select Sub-type.;SVE=V„lj undertyp.';

    PROCEDURE GetTempFileNames@1100285000(PassedString@1100285004 : Text[250];VAR FromFile@1100285002 : Text[250];VAR FromFolder@1100285003 : Text[250]);
    VAR
      tempFileName@1100285000 : Text[1024];
    BEGIN
      tempFileName := ExFileMgt.ServerTempFileName(PassedString,'');
      FromFolder := ExFileMgt.Path(tempFileName);
      FromFile := ExFileMgt.GetFileName(tempFileName);
    END;

    PROCEDURE GetBankInfo@1100285001(Vendor@1100285000 : Record 23) : Text[150];
    VAR
      VendorIDField@1100285001 : Record 12013668;
      VendorBankAccount@1100285002 : Record 288;
      Field@1100285005 : Record 2000000041;
      RecRef@1100285003 : RecordRef;
      FldRef@1100285004 : FieldRef;
    BEGIN
      VendorIDField.RESET;
      IF VendorIDField.ISEMPTY THEN
        EXIT;

      VendorBankAccount.SETRANGE("Vendor No.", Vendor."No.");
      IF NOT VendorBankAccount.FINDFIRST THEN
        CLEAR(VendorBankAccount);

      VendorIDField.SETCURRENTKEY("RS Export order");
      VendorIDField.SETFILTER("RS Export order", '<>%1', 0);
      IF NOT VendorIDField.FINDSET THEN BEGIN
        VendorIDField.SETRANGE("RS Export order");
        VendorIDField.FINDSET;
      END;

      REPEAT
        CASE VendorIDField."Table No." OF
          DATABASE::Vendor: RecRef.GETTABLE(Vendor);
          DATABASE::"Vendor Bank Account":
            BEGIN
              IF VendorBankAccount."Vendor No." <> '' THEN
                RecRef.GETTABLE(VendorBankAccount)
              ELSE
                RecRef.GETTABLE(Vendor);
            END;
        END;

        Field.RESET;
        Field.SETRANGE(TableNo, RecRef.NUMBER);
        Field.SETRANGE("No.", VendorIDField."Field No.");
        IF Field.FINDFIRST THEN BEGIN
          FldRef := RecRef.FIELD(VendorIDField."Field No.");
          IF FORMAT(FldRef.VALUE) <> '' THEN
            EXIT(FORMAT(FldRef.VALUE));
        END;
      UNTIL VendorIDField.NEXT = 0;

      EXIT('');
    END;

    BEGIN
    END.
  }
}

