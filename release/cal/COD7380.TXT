OBJECT Codeunit 7380 Phys. Invt. Count.-Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            Item@1003 : Record 27;
            SKU@1002 : Record 5700;
          BEGIN
            WITH Item DO BEGIN
              SETFILTER("Phys Invt Counting Period Code",'<>''''');
              SETFILTER("Next Counting Start Date",'<>%1',0D);
              SETFILTER("Next Counting End Date",'<>%1',0D);
              OnRunOnAfterSetItemFilters(Item,SourceJnl);
              IF FIND('-') THEN
                REPEAT
                  IF ("Last Counting Period Update" < "Next Counting Start Date") AND
                     (WORKDATE >= "Next Counting Start Date")
                  THEN
                    InsertTempPhysCountBuffer(
                      "No.",'','',"Shelf No.","Phys Invt Counting Period Code",
                      Description,"Next Counting Start Date","Next Counting End Date","Last Counting Period Update",1);
                UNTIL NEXT = 0;
            END;

            WITH SKU DO BEGIN
              SETFILTER("Phys Invt Counting Period Code",'<>''''');
              SETFILTER("Next Counting Start Date",'<>%1',0D);
              SETFILTER("Next Counting End Date",'<>%1',0D);
              IF SourceJnl = SourceJnl::WhseJnl THEN
                SETRANGE("Location Code",WhseJnlLine."Location Code");
              OnRunOnAfterSetSKUFilters(SKU,SourceJnl);
              IF FIND('-') THEN
                REPEAT
                  IF ("Last Counting Period Update" < "Next Counting Start Date") AND
                     (WORKDATE >= "Next Counting Start Date")
                  THEN
                    InsertTempPhysCountBuffer(
                      "Item No.","Variant Code","Location Code",
                      "Shelf No.","Phys Invt Counting Period Code",Description,
                      "Next Counting Start Date","Next Counting End Date","Last Counting Period Update",2);

                UNTIL NEXT = 0;
            END;

            IF PAGE.RUNMODAL(
                 PAGE::"Phys. Invt. Item Selection",TempPhysInvtItemSelection) <> ACTION::LookupOK
            THEN
              EXIT;

            TempPhysInvtItemSelection.SETRANGE(Selected,TRUE);
            IF TempPhysInvtItemSelection.FIND('-') THEN
              CASE SourceJnl OF
                SourceJnl::PhysInvtOrder:
                  CreatePhysInvtOrderLines;
                SourceJnl::ItemJnl:
                  CreatePhysInvtItemJnl;
                SourceJnl::WhseJnl:
                  CreatePhysInvtWhseJnl;
                SourceJnl::Custom:
                  OnCreateCustomPhysInvtJournal(TempPhysInvtItemSelection,SortingMethod,HideValidationDialog);
              END;
          END;

  }
  CODE
  {
    VAR
      TempPhysInvtItemSelection@1000 : TEMPORARY Record 7380;
      PhysInvtCount@1007 : Record 7381;
      ItemJnlLine@1002 : Record 83;
      WhseJnlLine@1003 : Record 7311;
      TempItem@1013 : TEMPORARY Record 27;
      TempSKU@1014 : TEMPORARY Record 5700;
      PhysInvtOrderHeader@1015 : Record 5875;
      SourceJnl@1001 : 'ItemJnl,WhseJnl,PhysInvtOrder,Custom';
      Text000@1008 : TextConst 'ENU=Processing items    #1##########;NOR=Behandler varer     #1##########;SVE=Behandlar artiklar  #1##########';
      SortingMethod@1010 : ' ,Item,Bin';
      Text001@1009 : TextConst 'ENU=Do you want to update the Next Counting Period of the %1?;NOR=Vil du oppdatere neste opptellingsperiode for %1?;SVE=Vill du uppdatera n„sta cykliska inventeringsperiod f”r %1?';
      Text002@1011 : TextConst 'ENU=Cancelled.;NOR=Avbrutt.;SVE=Avbryten';
      HideValidationDialog@1012 : Boolean;

    LOCAL PROCEDURE InsertTempPhysCountBuffer@3(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];ShelfBin@1007 : Code[10];PhysInvtCountCode@1003 : Code[10];Description@1004 : Text[100];CountingPeriodStartDate@1005 : Date;CountingPeriodEndDate@1009 : Date;LastCountDate@1006 : Date;SourceType@1008 : 'Item,SKU');
    BEGIN
      TempPhysInvtItemSelection.INIT;
      TempPhysInvtItemSelection."Item No." := ItemNo;
      TempPhysInvtItemSelection."Variant Code" := VariantCode;
      TempPhysInvtItemSelection."Location Code" := LocationCode;
      TempPhysInvtItemSelection."Phys Invt Counting Period Code" := PhysInvtCountCode;
      TempPhysInvtItemSelection."Phys Invt Counting Period Type" := SourceType;
      TempPhysInvtItemSelection."Shelf No." := ShelfBin;
      TempPhysInvtItemSelection."Last Counting Date" := LastCountDate;
      TempPhysInvtItemSelection."Next Counting Start Date" := CountingPeriodStartDate;
      TempPhysInvtItemSelection."Next Counting End Date" := CountingPeriodEndDate;
      GetPhysInvtCount(PhysInvtCountCode);
      TempPhysInvtItemSelection."Count Frequency per Year" := PhysInvtCount."Count Frequency per Year";
      TempPhysInvtItemSelection.Description := Description;
      IF TempPhysInvtItemSelection.INSERT THEN;
    END;

    LOCAL PROCEDURE CreatePhysInvtItemJnl@6();
    VAR
      Item@1008 : Record 27;
      ItemJnlBatch@1009 : Record 233;
      PhysInvtCountRep@1002 : Report 7380;
      CalcQtyOnHand@1001 : Report 790;
      PhysInvtList@1000 : Report 722;
      Window@1007 : Dialog;
      PostingDate@1006 : Date;
      DocNo@1004 : Code[20];
      PrintDoc@1005 : Boolean;
      PrintDocPerItem@1011 : Boolean;
      ZeroQty@1003 : Boolean;
      PrintQtyCalculated@1010 : Boolean;
      IsHandled@1012 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCreatePhysInvtItemJnl(ItemJnlLine,TempPhysInvtItemSelection,IsHandled);
      IF IsHandled THEN
        EXIT;

      ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
      PhysInvtCountRep.SetItemJnlLine(ItemJnlBatch);
      PhysInvtCountRep.RUNMODAL;

      IF PhysInvtCountRep.GetRequest(
           PostingDate,DocNo,SortingMethod,PrintDoc,PrintDocPerItem,ZeroQty,PrintQtyCalculated)
      THEN BEGIN
        Window.OPEN(Text000,TempPhysInvtItemSelection."Item No.");
        REPEAT
          Window.UPDATE;
          CalcQtyOnHand.SetSkipDim(TRUE);
          CalcQtyOnHand.InitializeRequest(PostingDate,DocNo,ZeroQty,FALSE);
          CalcQtyOnHand.SetItemJnlLine(ItemJnlLine);
          CalcQtyOnHand.InitializePhysInvtCount(
            TempPhysInvtItemSelection."Phys Invt Counting Period Code",
            TempPhysInvtItemSelection."Phys Invt Counting Period Type");
          CalcQtyOnHand.USEREQUESTPAGE(FALSE);
          CalcQtyOnHand.SetHideValidationDialog(TRUE);
          Item.SETRANGE("No.",TempPhysInvtItemSelection."Item No.");
          IF TempPhysInvtItemSelection."Phys Invt Counting Period Type" =
             TempPhysInvtItemSelection."Phys Invt Counting Period Type"::SKU
          THEN BEGIN
            Item.SETRANGE("Variant Filter",TempPhysInvtItemSelection."Variant Code");
            Item.SETRANGE("Location Filter",TempPhysInvtItemSelection."Location Code");
          END;
          CalcQtyOnHand.SETTABLEVIEW(Item);
          CalcQtyOnHand.RUNMODAL;
          CLEAR(CalcQtyOnHand);
        UNTIL TempPhysInvtItemSelection.NEXT = 0;
        Window.CLOSE;

        IF PrintDoc THEN BEGIN
          IF NOT PrintDocPerItem THEN BEGIN
            ItemJnlBatch.SETRECFILTER;
            ItemJnlLine.SETRANGE(
              "Journal Template Name",ItemJnlLine."Journal Template Name");
            ItemJnlLine.SETRANGE(
              "Journal Batch Name",ItemJnlLine."Journal Batch Name");
            PhysInvtList.USEREQUESTPAGE(FALSE);
            PhysInvtList.Initialize(PrintQtyCalculated);
            //PhysInvtList.SETTABLEVIEW(ItemJnlBatch);  //**4PS.o, 17-09-09: T3897
            PhysInvtList.SETTABLEVIEW(ItemJnlLine);
            PhysInvtList.RUN;
          END ELSE BEGIN
            TempPhysInvtItemSelection.FIND('-');
            REPEAT
              ItemJnlBatch.SETRECFILTER;
              PhysInvtList.SETTABLEVIEW(ItemJnlBatch);
              ItemJnlLine.SETRANGE(
                "Journal Template Name",ItemJnlLine."Journal Template Name");
              ItemJnlLine.SETRANGE(
                "Journal Batch Name",ItemJnlLine."Journal Batch Name");
              ItemJnlLine.SETRANGE("Item No.",TempPhysInvtItemSelection."Item No.");
              PhysInvtList.USEREQUESTPAGE(FALSE);
              PhysInvtList.Initialize(PrintQtyCalculated);
              PhysInvtList.SETTABLEVIEW(ItemJnlLine);
              PhysInvtList.RUN;
              TempPhysInvtItemSelection.SETRANGE("Item No.",
                TempPhysInvtItemSelection."Item No.");
              TempPhysInvtItemSelection.FIND('+');
              TempPhysInvtItemSelection.SETRANGE("Item No.");
            UNTIL TempPhysInvtItemSelection.NEXT = 0;
          END;
          CLEAR(PhysInvtList);
        END;
      END;
    END;

    LOCAL PROCEDURE CreatePhysInvtWhseJnl@13();
    VAR
      BinContent@1008 : Record 7302;
      WhseJnlBatch@1009 : Record 7310;
      PhysInvtCountRep@1002 : Report 7380;
      CalcWhseQtyOnHand@1001 : Report 7390;
      WhsePhysInvtList@1000 : Report 7307;
      Window@1007 : Dialog;
      PostingDate@1006 : Date;
      DocNo@1004 : Code[20];
      PrintDoc@1012 : Boolean;
      PrintDocPerItem@1011 : Boolean;
      ZeroQty@1003 : Boolean;
      PrintQtyCalculated@1010 : Boolean;
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine."Journal Template Name",WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
      PhysInvtCountRep.SetWhseJnlLine(WhseJnlBatch);
      PhysInvtCountRep.RUNMODAL;

      IF PhysInvtCountRep.GetRequest(
           PostingDate,DocNo,SortingMethod,PrintDoc,PrintDocPerItem,ZeroQty,PrintQtyCalculated)
      THEN BEGIN
        Window.OPEN(Text000,TempPhysInvtItemSelection."Item No.");
        REPEAT
          Window.UPDATE;
          CalcWhseQtyOnHand.InitializeRequest(PostingDate,DocNo,ZeroQty);

          CalcWhseQtyOnHand.InitializePhysInvtCount(
            TempPhysInvtItemSelection."Phys Invt Counting Period Code",
            TempPhysInvtItemSelection."Phys Invt Counting Period Type");
          CalcWhseQtyOnHand.SetWhseJnlLine(WhseJnlLine);
          CalcWhseQtyOnHand.USEREQUESTPAGE(FALSE);
          CalcWhseQtyOnHand.SetHideValidationDialog(TRUE);
          BinContent.SETRANGE("Location Code",TempPhysInvtItemSelection."Location Code");
          BinContent.SETRANGE("Item No.",TempPhysInvtItemSelection."Item No.");
          IF TempPhysInvtItemSelection."Phys Invt Counting Period Type" =
             TempPhysInvtItemSelection."Phys Invt Counting Period Type"::SKU
          THEN
            BinContent.SETRANGE("Variant Code",TempPhysInvtItemSelection."Variant Code");
          CalcWhseQtyOnHand.SETTABLEVIEW(BinContent);
          CalcWhseQtyOnHand.RUNMODAL;
          CLEAR(CalcWhseQtyOnHand);
        UNTIL TempPhysInvtItemSelection.NEXT = 0;
        Window.CLOSE;

        IF PrintDoc THEN BEGIN
          IF NOT PrintDocPerItem THEN BEGIN
            WhseJnlBatch.SETRECFILTER;
            CASE SortingMethod OF
              SortingMethod::Item:
                WhseJnlLine.SETCURRENTKEY("Location Code","Item No.","Variant Code");
              SortingMethod::Bin:
                WhseJnlLine.SETCURRENTKEY("Location Code","Bin Code");
            END;
            WhseJnlLine.SETRANGE(
              "Journal Template Name",WhseJnlLine."Journal Template Name");
            WhseJnlLine.SETRANGE(
              "Journal Batch Name",WhseJnlLine."Journal Batch Name");
            WhseJnlLine.SETRANGE(
              "Journal Template Name",WhseJnlLine."Journal Template Name");
            WhseJnlLine.SETRANGE(
              "Journal Batch Name",WhseJnlLine."Journal Batch Name");
            WhseJnlLine.SETRANGE("Location Code",WhseJnlBatch."Location Code");
            WhsePhysInvtList.USEREQUESTPAGE(FALSE);
            WhsePhysInvtList.Initialize(PrintQtyCalculated);
            WhsePhysInvtList.SETTABLEVIEW(WhseJnlBatch);
            WhsePhysInvtList.SETTABLEVIEW(WhseJnlLine);
            WhsePhysInvtList.RUN;
          END ELSE BEGIN
            TempPhysInvtItemSelection.FIND('-');
            REPEAT
              WhseJnlBatch.SETRECFILTER;
              CASE SortingMethod OF
                SortingMethod::Item:
                  WhseJnlLine.SETCURRENTKEY("Location Code","Item No.","Variant Code");
                SortingMethod::Bin:
                  WhseJnlLine.SETCURRENTKEY("Location Code","Bin Code");
              END;
              WhseJnlLine.SETRANGE(
                "Journal Template Name",WhseJnlLine."Journal Template Name");
              WhseJnlLine.SETRANGE(
                "Journal Batch Name",WhseJnlLine."Journal Batch Name");
              WhseJnlLine.SETRANGE("Item No.",TempPhysInvtItemSelection."Item No.");
              WhseJnlLine.SETRANGE("Location Code",TempPhysInvtItemSelection."Location Code");
              WhsePhysInvtList.USEREQUESTPAGE(FALSE);
              WhsePhysInvtList.Initialize(PrintQtyCalculated);
              WhsePhysInvtList.SETTABLEVIEW(WhseJnlBatch);
              WhsePhysInvtList.SETTABLEVIEW(WhseJnlLine);
              WhsePhysInvtList.RUN;
              TempPhysInvtItemSelection.SETRANGE("Item No.",
                TempPhysInvtItemSelection."Item No.");
              TempPhysInvtItemSelection.FIND('+');
              TempPhysInvtItemSelection.SETRANGE("Item No.");
            UNTIL TempPhysInvtItemSelection.NEXT = 0;
          END;
          CLEAR(WhsePhysInvtList);
        END;
      END;
    END;

    [External]
    PROCEDURE CalcPeriod@1(LastDate@1004 : Date;VAR NextCountingStartDate@1005 : Date;VAR NextCountingEndDate@1001 : Date;CountFrequency@1002 : Integer);
    VAR
      Calendar@1013 : Record 2000000007;
      LastCountDate@1003 : Date;
      YearEndDate@1007 : Date;
      StartDate@1012 : Date;
      EndDate@1011 : Date;
      Periods@1014 : ARRAY [4] OF Date;
      Days@1000 : Decimal;
      i@1010 : Integer;
    BEGIN
      IF LastDate = 0D THEN
        LastCountDate := WORKDATE
      ELSE
        LastCountDate := LastDate;

      i := DATE2DMY(WORKDATE,3);
      Calendar.RESET;
      Calendar.SETRANGE("Period Type",Calendar."Period Type"::Year);
      Calendar.SETRANGE("Period No.",i);
      Calendar.FIND('-');
      StartDate := Calendar."Period Start";
      YearEndDate := NORMALDATE(Calendar."Period End");

      CASE CountFrequency OF
        1,2,3,4,6,12:
          BEGIN
            FindCurrentPhysInventoryPeriod(Calendar,StartDate,EndDate,LastCountDate,CountFrequency);
            IF LastDate <> 0D THEN BEGIN
              Calendar.NEXT(12 / CountFrequency);
              StartDate := EndDate + 1;
              EndDate := NORMALDATE(Calendar."Period Start") - 1;
            END;
            NextCountingStartDate := StartDate;
            NextCountingEndDate := EndDate;
          END;
        24:
          BEGIN
            FindCurrentPhysInventoryPeriod(Calendar,StartDate,EndDate,LastCountDate,12);
            Days := (EndDate - StartDate + 1) DIV 2; // number of days in half a month
            Periods[1] := StartDate;
            Periods[2] := StartDate + Days;
            Calendar.NEXT;
            StartDate := EndDate + 1;
            EndDate := NORMALDATE(Calendar."Period Start") - 1;
            Days := (EndDate - StartDate + 1) DIV 2;
            Periods[3] := StartDate;
            Periods[4] := StartDate + Days;
            i := 0;
            REPEAT
              i += 1;
            UNTIL (LastCountDate >= Periods[i]) AND (LastCountDate <= (Periods[i + 1] - 1));
            IF LastDate <> 0D THEN
              i += 1;
            NextCountingStartDate := Periods[i];
            NextCountingEndDate := Periods[i + 1] - 1;
          END;
        ELSE BEGIN
          Calendar.RESET;
          Calendar.SETRANGE("Period Type",Calendar."Period Type"::Date);
          Calendar.SETRANGE("Period Start",StartDate,YearEndDate);
          Calendar.SETRANGE("Period No.");
          Days := (Calendar.COUNT DIV CountFrequency);
          IF NextCountingStartDate <> 0D THEN BEGIN
            IF LastCountDate < NextCountingStartDate THEN
              EXIT;
            StartDate := NextCountingStartDate;
            EndDate := NextCountingEndDate;
            WHILE LastCountDate >= StartDate DO BEGIN
              StartDate := EndDate + 1;
              EndDate := CALCDATE('<+' + FORMAT(Days) + 'D>',StartDate);
            END;
          END;

          IF LastDate = 0D THEN
            NextCountingStartDate := CALCDATE('<+' + FORMAT(Days) + 'D>',LastCountDate)
          ELSE
            NextCountingStartDate := StartDate;
          NextCountingEndDate := CALCDATE('<+' + FORMAT(Days) + 'D>',NextCountingStartDate);
        END;
      END;
    END;

    LOCAL PROCEDURE GetPhysInvtCount@5(PhysInvtCountCode@1000 : Code[10]);
    BEGIN
      IF PhysInvtCount.Code <> PhysInvtCountCode THEN
        PhysInvtCount.GET(PhysInvtCountCode);
    END;

    [External]
    PROCEDURE InitFromItemJnl@2(ItemJnlLine2@1000 : Record 83);
    BEGIN
      ItemJnlLine := ItemJnlLine2;
      SourceJnl := SourceJnl::ItemJnl;
    END;

    [External]
    PROCEDURE InitFromWhseJnl@4(WhseJnlLine2@1000 : Record 7311);
    BEGIN
      WhseJnlLine := WhseJnlLine2;
      SourceJnl := SourceJnl::WhseJnl;
    END;

    [External]
    PROCEDURE InitFromCustomJnl@19();
    BEGIN
      SourceJnl := SourceJnl::Custom;
    END;

    [External]
    PROCEDURE GetSortingMethod@8(VAR SortingMethod2@1000 : ' ,Item,Bin');
    BEGIN
      SortingMethod2 := SortingMethod;
    END;

    [External]
    PROCEDURE UpdateSKUPhysInvtCount@12(VAR SKU@1000 : Record 5700);
    BEGIN
      WITH SKU DO BEGIN
        IF (NOT MARKEDONLY) AND (GETFILTERS = '') THEN
          SETRECFILTER;

        FINDSET;
        REPEAT
          TESTFIELD("Phys Invt Counting Period Code");
        UNTIL NEXT = 0;

        IF NOT HideValidationDialog THEN
          IF NOT CONFIRM(Text001,FALSE,TABLECAPTION) THEN
            ERROR(Text002);

        FINDSET;
        REPEAT
          GetPhysInvtCount("Phys Invt Counting Period Code");
          PhysInvtCount.TESTFIELD("Count Frequency per Year");
          "Last Counting Period Update" := WORKDATE;
          CalcPeriod(
            "Last Counting Period Update","Next Counting Start Date","Next Counting End Date",
            PhysInvtCount."Count Frequency per Year");
          MODIFY;
        UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE UpdateItemPhysInvtCount@7(VAR Item@1000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        IF (NOT MARKEDONLY) AND (GETFILTERS = '') THEN
          SETRECFILTER;

        FINDSET;
        REPEAT
          TESTFIELD("Phys Invt Counting Period Code");
        UNTIL NEXT = 0;

        IF NOT HideValidationDialog THEN
          IF NOT CONFIRM(Text001,FALSE,TABLECAPTION) THEN
            ERROR(Text002);

        FINDSET;
        REPEAT
          GetPhysInvtCount("Phys Invt Counting Period Code");
          PhysInvtCount.TESTFIELD("Count Frequency per Year");
          "Last Counting Period Update" := WORKDATE;
          CalcPeriod(
            "Last Counting Period Update","Next Counting Start Date","Next Counting End Date",
            PhysInvtCount."Count Frequency per Year");
          MODIFY;
        UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE UpdateItemSKUListPhysInvtCount@15();
    VAR
      Item@1000 : Record 27;
      SKU@1001 : Record 5700;
    BEGIN
      WITH TempItem DO BEGIN
        IF FINDSET THEN
          REPEAT
            Item.RESET;
            Item.GET("No.");
            UpdateItemPhysInvtCount(Item);
          UNTIL NEXT = 0;
      END;

      WITH TempSKU DO BEGIN
        IF FINDSET THEN
          REPEAT
            SKU.RESET;
            SKU.GET("Location Code","Item No.","Variant Code");
            UpdateSKUPhysInvtCount(SKU);
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE AddToTempItemSKUList@9(ItemNo@1000 : Code[20];LocationCode@1004 : Code[10];VariantCode@1005 : Code[10];PhysInvtCountingPeriodType@1003 : ' ,Item,SKU');
    BEGIN
      CASE PhysInvtCountingPeriodType OF
        PhysInvtCountingPeriodType::Item:
          InsertTempItem(ItemNo);
        PhysInvtCountingPeriodType::SKU:
          InsertTempSKU(ItemNo,LocationCode,VariantCode);
      END;
    END;

    LOCAL PROCEDURE InsertTempItem@11(ItemNo@1000 : Code[20]);
    BEGIN
      WITH TempItem DO BEGIN
        IF GET(ItemNo) THEN
          EXIT;

        INIT;
        "No." := ItemNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertTempSKU@21(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1003 : Code[10]);
    BEGIN
      WITH TempSKU DO BEGIN
        IF GET(LocationCode,ItemNo,VariantCode) THEN
          EXIT;

        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE InitTempItemSKUList@33();
    BEGIN
      SetHideValidationDialog(TRUE);

      TempItem.DELETEALL;
      TempSKU.DELETEALL;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE InitFromPhysInvtOrder@31(PhysInvtOrderHeader2@1000 : Record 5875);
    BEGIN
      PhysInvtOrderHeader := PhysInvtOrderHeader2;
      SourceJnl := SourceJnl::PhysInvtOrder;
    END;

    LOCAL PROCEDURE CreatePhysInvtOrderLines@32();
    VAR
      Item@1000 : Record 27;
      CalcPhysInvtOrderCountRep@1001 : Report 5884;
      CalcPhysInvtOrderLinesRep@1002 : Report 5880;
      Window@1003 : Dialog;
      ZeroQty@1004 : Boolean;
      CalcQtyExpected@1005 : Boolean;
    BEGIN
      CalcPhysInvtOrderCountRep.RUNMODAL;
      IF NOT CalcPhysInvtOrderCountRep.GetRequest(ZeroQty,CalcQtyExpected) THEN
        EXIT;

      Window.OPEN(Text000,TempPhysInvtItemSelection."Item No.");
      REPEAT
        Window.UPDATE;
        CalcPhysInvtOrderLinesRep.SetPhysInvtOrderHeader(PhysInvtOrderHeader);
        CalcPhysInvtOrderLinesRep.InitializeInvtCount(
          TempPhysInvtItemSelection."Phys Invt Counting Period Code",
          TempPhysInvtItemSelection."Phys Invt Counting Period Type");
        CalcPhysInvtOrderLinesRep.SetHideValidationDialog(TRUE);
        CalcPhysInvtOrderLinesRep.InitializeRequest(ZeroQty,CalcQtyExpected);
        CalcPhysInvtOrderLinesRep.USEREQUESTPAGE(FALSE);
        Item.SETRANGE("No.",TempPhysInvtItemSelection."Item No.");
        IF TempPhysInvtItemSelection."Phys Invt Counting Period Type" =
           TempPhysInvtItemSelection."Phys Invt Counting Period Type"::SKU
        THEN BEGIN
          Item.SETRANGE("Variant Filter",TempPhysInvtItemSelection."Variant Code");
          Item.SETRANGE("Location Filter",TempPhysInvtItemSelection."Location Code");
        END;
        CalcPhysInvtOrderLinesRep.SETTABLEVIEW(Item);
        CalcPhysInvtOrderLinesRep.RUNMODAL;
        CLEAR(CalcPhysInvtOrderLinesRep);
      UNTIL TempPhysInvtItemSelection.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE FindCurrentPhysInventoryPeriod@10(VAR Calendar@1002 : Record 2000000007;VAR StartDate@1011 : Date;VAR EndDate@1003 : Date;LastDate@1010 : Date;CountFrequency@1000 : Integer);
    VAR
      OldStartDate@1008 : Date;
    BEGIN
      IF StartDate > LastDate THEN BEGIN
        Calendar.RESET;
        Calendar.SETRANGE("Period Type",Calendar."Period Type"::Year);
        Calendar.SETRANGE("Period No.",DATE2DMY(LastDate,3));
        Calendar.FINDFIRST;
        StartDate := Calendar."Period Start";
      END;
      Calendar.RESET;
      Calendar.SETRANGE("Period Type",Calendar."Period Type"::Month);
      Calendar.SETFILTER("Period Start",'>=%1',StartDate);
      Calendar.FINDFIRST;
      WHILE StartDate <= LastDate DO BEGIN
        OldStartDate := StartDate;
        Calendar.NEXT(12 / CountFrequency);
        StartDate := Calendar."Period Start";
        EndDate := NORMALDATE(Calendar."Period Start") - 1;
      END;
      StartDate := OldStartDate;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreatePhysInvtItemJnl@14(VAR ItemJournalLine@1000 : Record 83;VAR TempPhysInvtItemSelection@1001 : TEMPORARY Record 7380;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateCustomPhysInvtJournal@22(VAR TempPhysInvtItemSelection@1000 : TEMPORARY Record 7380;SortingMethod@1001 : ' ,Item,Bin';HideValidationDialog@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunOnAfterSetItemFilters@16(VAR Item@1000 : Record 27;SourceJnl@1001 : 'ItemJnl,WhseJnl,PhysInvtOrder,Custom');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunOnAfterSetSKUFilters@17(VAR StockkeepingUnit@1000 : Record 5700;SourceJnl@1001 : 'ItemJnl,WhseJnl,PhysInvtOrder,Custom');
    BEGIN
    END;

    BEGIN
    END.
  }
}

