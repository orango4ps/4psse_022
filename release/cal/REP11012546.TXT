OBJECT Report 11012546 Update Function Role Perm.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Funktionsprofil Zugriffsrechte aktualisieren;
               ENU=Update Function Role Permissions;
               NLD=Functieprofiel toegangsrechten bijwerken;
               NOR=Oppdater tillatelser for funksjonsroll;
               SVE=Uppdatera beh”righeter f”r funktionsroll];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 7966;    ;DataItem;                    ;
               DataItemTable=Table11020569;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               LastUpdateTime := TIME;
                             END;

               OnAfterGetRecord=VAR
                                  FunctionProfileRole@1100525002 : Record 11020572;
                                  RoleGroupRole@1100525001 : Record 11020571;
                                  TenantPermission@1100525000 : Record 2000000166;
                                  FunctionProfile@1100525004 : Record 11020569;
                                  TempTenantPermissionSet@1210190000 : TEMPORARY Record 2000000165;
                                  FunctProfileOverwritePerm@1100525003 : Record 11229293;
                                  ZeroGUID@1100527700 : GUID;
                                BEGIN
                                  TenantPermission.SETRANGE("App ID",ZeroGUID);
                                  TenantPermission.SETRANGE("Role ID","No.");
                                  IF NOT TenantPermission.ISEMPTY THEN
                                    TenantPermission.DELETEALL;

                                  PermissionLineCounter := 0;

                                  NoOfPermissionLines := CountNoOfPermissionLines("No.");
                                  Window.OPEN(STRSUBSTNO(Text002,"No."));

                                  InsertTenantPermissionSetForFunctionProfile;
                                  UpdateTenantPermissionSetFromFunctionProfile;

                                  FunctionProfileRole.SETRANGE("Function Profile No.", "No.");
                                  IF FunctionProfileRole.FINDSET THEN
                                    REPEAT
                                      IF FunctionProfileRole.Type = FunctionProfileRole.Type::"Permission Set Group" THEN BEGIN
                                        RoleGroupRole.SETRANGE("Permission Set Group No.",FunctionProfileRole.Code);
                                        RoleGroupRole.SETRANGE(Disabled,FALSE);
                                        IF RoleGroupRole.FINDSET THEN
                                          REPEAT
                                            TempTenantPermissionSet."App ID" := ZeroGUID;
                                            TempTenantPermissionSet."Role ID" := RoleGroupRole."Permission Set No.";
                                            IF TempTenantPermissionSet.INSERT THEN
                                              UpdateTenantPermissionLines(RoleGroupRole."Permission Set No.", "No.");
                                          UNTIL RoleGroupRole.NEXT = 0;
                                      END ELSE BEGIN
                                        TempTenantPermissionSet."App ID" := ZeroGUID;
                                        TempTenantPermissionSet."Role ID" := FunctionProfileRole.Code;
                                        IF TempTenantPermissionSet.INSERT THEN
                                          UpdateTenantPermissionLines(FunctionProfileRole.Code, "No.");
                                      END;
                                    UNTIL FunctionProfileRole.NEXT = 0;

                                  FunctProfileOverwritePerm.SETRANGE("Function Profile No.","No.");
                                  IF FunctProfileOverwritePerm.FINDSET THEN
                                    REPEAT
                                      ReplaceTableDataPermission(FunctProfileOverwritePerm);
                                    UNTIL FunctProfileOverwritePerm.NEXT = 0;

                                  Window.CLOSE;
                                  CLEAR(TempTenantPermissionSet);

                                  IF FunctionProfile.GET("No.") THEN BEGIN
                                    FunctionProfile."No. Of Roles in Profile Role" := TempTenantPermissionSet.COUNT;
                                    FunctionProfile."Content Changed" := FALSE;
                                    FunctionProfile.MODIFY;
                                  END;
                                END;

               OnPostDataItem=VAR
                                TenantPermission@1100525000 : Record 2000000166;
                              BEGIN
                                MESSAGE(Text001, TenantPermission.TABLECAPTION);
                              END;

               ReqFilterFields=No.,Content Changed }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'DEU=%1 Auftr„ge sind aktualisiert worden.;ENU=%1s are updated;NLD=%1 zijn bijgewerkt;NOR=%1 er oppdatert;SVE=%1 har uppdaterats';
      NoOfPermissionLines@1210190001 : Integer;
      PermissionLineCounter@1210190000 : Integer;
      Progress@1210190003 : Integer;
      LastUpdateTime@1210190002 : Time;
      Window@1210190004 : Dialog;
      Text002@1210190006 : TextConst 'DEU=Aktualisieren Funktionsprofil %1 @1@@@@@@@@@@@@@;ENU=Update Function Profile %1 @1@@@@@@@@@@@@@;NLD=Bijwerken functieprofiel %1 @1@@@@@@@@@@@@@;NOR=Oppdater funksjonsprofil %1 @1@@@@@@@@@@@@@;SVE=Uppdatera funktionsprofil %1 @1@@@@@@@@@@@@@';

    PROCEDURE UpdateTenantPermissionLines@1100525004(SourceRoleID@1100525001 : Code[20];TargetRoleID@1100525000 : Code[20]);
    VAR
      SourcePermission@1100527701 : Record 2000000005;
      SourceTenantPermission@1100525002 : Record 2000000166;
      TargetTenantPermission@1100525003 : Record 2000000166;
      ZeroGUID@1100527700 : GUID;
    BEGIN
      IF SetIsSystemPermissionSet(SourceRoleID) THEN BEGIN
        SourcePermission.SETRANGE("Role ID",SourceRoleID);
        IF SourcePermission.FINDSET THEN
          REPEAT
            PermissionLineCounter := PermissionLineCounter + 1;
            UpdateProgressWindow(NoOfPermissionLines,PermissionLineCounter);
            UpdateTargetTenantPermissionFromSourceSystemPermission(SourcePermission,TargetRoleID);
          UNTIL SourcePermission.NEXT = 0;
      END;

      IF SetIsTenantPermissionSet(SourceRoleID) THEN BEGIN
        SourceTenantPermission.SETRANGE("App ID",ZeroGUID);
        SourceTenantPermission.SETRANGE("Role ID",SourceRoleID);
        IF SourceTenantPermission.FINDSET THEN
          REPEAT
            PermissionLineCounter := PermissionLineCounter + 1;
            UpdateProgressWindow(NoOfPermissionLines,PermissionLineCounter);
            UpdateTargetTenantPermissionFromSourceTenantPermission(SourceTenantPermission,TargetRoleID);
          UNTIL SourceTenantPermission.NEXT =0;
      END;
    END;

    PROCEDURE UpdateTargetTenantPermissionFromSourceSystemPermission@1100527733(SystemPermission@1100525001 : Record 2000000005;TargetRoleID@1100525000 : Code[20]);
    VAR
      SourcePermission@1100527701 : Record 2000000005;
      TargetTenantPermission@1100525003 : Record 2000000166;
      ZeroGUID@1100527700 : GUID;
    BEGIN
      IF NOT TargetTenantPermission.GET(ZeroGUID,TargetRoleID,SystemPermission."Object Type",SystemPermission."Object ID") THEN
        InsertTenantPermissionFromSystemPermission(SystemPermission,TargetRoleID)
      ELSE BEGIN
        CumulateTenantPermission(SystemPermission."Read Permission", TargetTenantPermission."Read Permission");
        CumulateTenantPermission(SystemPermission."Insert Permission", TargetTenantPermission."Insert Permission");
        CumulateTenantPermission(SystemPermission."Modify Permission", TargetTenantPermission."Modify Permission");
        CumulateTenantPermission(SystemPermission."Delete Permission", TargetTenantPermission."Delete Permission");
        CumulateTenantPermission(SystemPermission."Execute Permission", TargetTenantPermission."Execute Permission");
        TargetTenantPermission.MODIFY(FALSE);
      END;
    END;

    PROCEDURE UpdateTargetTenantPermissionFromSourceTenantPermission@1100527740(SourceTenantPermission@1100525001 : Record 2000000166;TargetRoleID@1100525000 : Code[20]);
    VAR
      SourcePermission@1100527701 : Record 2000000005;
      TargetTenantPermission@1100525003 : Record 2000000166;
      ZeroGUID@1100527700 : GUID;
    BEGIN
      IF NOT TargetTenantPermission.GET(ZeroGUID,TargetRoleID,SourceTenantPermission."Object Type",SourceTenantPermission."Object ID") THEN BEGIN
        TargetTenantPermission.COPY(SourceTenantPermission);
        TargetTenantPermission."Role ID" := TargetRoleID;
        TargetTenantPermission.INSERT(FALSE);
      END ELSE BEGIN
        CumulateTenantPermission(SourceTenantPermission."Read Permission", TargetTenantPermission."Read Permission");
        CumulateTenantPermission(SourceTenantPermission."Insert Permission", TargetTenantPermission."Insert Permission");
        CumulateTenantPermission(SourceTenantPermission."Modify Permission", TargetTenantPermission."Modify Permission");
        CumulateTenantPermission(SourceTenantPermission."Delete Permission", TargetTenantPermission."Delete Permission");
        CumulateTenantPermission(SourceTenantPermission."Execute Permission", TargetTenantPermission."Execute Permission");
        TargetTenantPermission.MODIFY(FALSE);
      END;
    END;

    PROCEDURE CumulateTenantPermission@1100525009(RoleOpt@1100525001 : ' ,Yes,Indirect';VAR FunctOpt@1100525000 : ' ,Yes,Indirect');
    BEGIN
      CASE FunctOpt OF
        FunctOpt::" ":
          FunctOpt := RoleOpt;
        FunctOpt::Indirect:
          IF RoleOpt = RoleOpt::Yes THEN
            FunctOpt := RoleOpt;
      END;
    END;

    PROCEDURE CountNoOfPermissionLines@1210190000(FunctionProfileRoleID@1210190000 : Code[20]) : Integer;
    VAR
      FunctionProfileRole@1210190004 : Record 11020572;
      RoleGroupRole@1210190003 : Record 11020571;
      NoOfPermissionLines@1210190001 : Integer;
    BEGIN
      FunctionProfileRole.SETRANGE("Function Profile No.",FunctionProfileRoleID);
      IF FunctionProfileRole.FINDSET THEN
        REPEAT
          IF FunctionProfileRole.Type = FunctionProfileRole.Type::"Permission Set Group" THEN BEGIN
            RoleGroupRole.SETRANGE("Permission Set Group No.",FunctionProfileRole.Code);
            RoleGroupRole.SETRANGE(Disabled,FALSE);
            IF RoleGroupRole.FINDSET THEN
              REPEAT
                NoOfPermissionLines := NoOfPermissionLines + CountPermissionSetLines(RoleGroupRole."Permission Set No.");
              UNTIL RoleGroupRole.NEXT = 0;
          END ELSE BEGIN
            NoOfPermissionLines := NoOfPermissionLines + CountPermissionSetLines(FunctionProfileRole.Code);
          END;
        UNTIL FunctionProfileRole.NEXT = 0;

      EXIT(NoOfPermissionLines);
    END;

    PROCEDURE UpdateProgressWindow@9(NoOfRecords@1210190000 : Integer;NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) OR (TIME > LastUpdateTime + 5000) THEN BEGIN
          Window.UPDATE(1,100 * NewProgress);
          LastUpdateTime := TIME;
          Progress := NewProgress;
        END;
      END;
    END;

    PROCEDURE ReplaceTableDataPermission@1100525002(FunctProfileReplacePerm@1210190000 : Record 11229293);
    VAR
      TenantPermission@1210190001 : Record 2000000166;
      ZeroGuid@1100527700 : GUID;
    BEGIN
      IF NOT TenantPermission.GET(
       ZeroGuid,
       FunctProfileReplacePerm."Function Profile No.",
       FunctProfileReplacePerm."Object Type",
       FunctProfileReplacePerm."Object ID") THEN BEGIN
        TenantPermission."Role ID" := FunctProfileReplacePerm."Function Profile No.";
        TenantPermission."Object Type" := FunctProfileReplacePerm."Object Type";
        TenantPermission."Object ID" := FunctProfileReplacePerm."Object ID";
        TenantPermission.INSERT;
      END;
      TenantPermission."Read Permission" := FunctProfileReplacePerm."Read Permission";
      TenantPermission."Insert Permission" := FunctProfileReplacePerm."Insert Permission";
      TenantPermission."Modify Permission" := FunctProfileReplacePerm."Modify Permission";
      TenantPermission."Delete Permission" := FunctProfileReplacePerm."Delete Permission";
      TenantPermission."Execute Permission" := FunctProfileReplacePerm."Execute Permission";
      TenantPermission.MODIFY;
    END;

    LOCAL PROCEDURE CountPermissionSetLines@1100527712(PermissionSetID@1100527700 : Code[20]) : Integer;
    BEGIN
      IF SetIsSystemPermissionSet(PermissionSetID) THEN
        EXIT(CountSystemPermissionSetLines(PermissionSetID));

      IF SetIsTenantPermissionSet(PermissionSetID) THEN
        EXIT(CountTenantPermissionSetLines(PermissionSetID));
    END;

    LOCAL PROCEDURE SetIsSystemPermissionSet@1100527700(PermissionSetID@1100527700 : Code[20]) : Boolean;
    VAR
      PermissionSet@1100527701 : Record 2000000004;
    BEGIN
      EXIT(PermissionSet.GET(PermissionSetID));
    END;

    LOCAL PROCEDURE SetIsTenantPermissionSet@1100527703(PermissionSetID@1100527700 : Code[20]) : Boolean;
    VAR
      TenantPermissionSet@1100527701 : Record 2000000165;
      ZeroGUID@1100527702 : GUID;
    BEGIN
      EXIT(TenantPermissionSet.GET(ZeroGUID,PermissionSetID));
    END;

    LOCAL PROCEDURE CountSystemPermissionSetLines@1100527713(PermissionSetID@1100527700 : Code[20]) : Integer;
    VAR
      Permission@1100527701 : Record 2000000005;
    BEGIN
      Permission.SETRANGE("Role ID",PermissionSetID);
      EXIT(Permission.COUNT);
    END;

    LOCAL PROCEDURE CountTenantPermissionSetLines@1100527714(PermissionSetID@1100527700 : Code[20]) : Integer;
    VAR
      TenantPermission@1100527701 : Record 2000000166;
      ZeroGUID@1100527702 : GUID;
    BEGIN
      TenantPermission.SETRANGE("App ID",ZeroGUID);
      TenantPermission.SETRANGE("Role ID",PermissionSetID);
      EXIT(TenantPermission.COUNT);
    END;

    PROCEDURE InsertTenantPermissionFromSystemPermission@1100527735(SystemPermission@1100525001 : Record 2000000005;TargetRoleID@1100525000 : Code[20]);
    VAR
      TenantPermission@1100525003 : Record 2000000166;
      ZeroGUID@1100527700 : GUID;
    BEGIN
      TenantPermission.INIT;
      TenantPermission."App ID" := ZeroGUID;
      TenantPermission."Role ID" := TargetRoleID;
      TenantPermission."Object Type" := SystemPermission."Object Type";
      TenantPermission."Object ID" := SystemPermission."Object ID";
      TenantPermission."Read Permission" := SystemPermission."Read Permission";
      TenantPermission."Insert Permission" := SystemPermission."Insert Permission";
      TenantPermission."Modify Permission" := SystemPermission."Modify Permission";
      TenantPermission."Delete Permission" := SystemPermission."Delete Permission";
      TenantPermission."Execute Permission" := SystemPermission."Execute Permission";
      TenantPermission.INSERT(FALSE);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

