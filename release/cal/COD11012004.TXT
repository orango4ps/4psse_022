OBJECT Codeunit 11012004 Post Hour Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 11012819=rimd,
                TableData 11012821=rimd,
                TableData 11072005=rimd,
                TableData 11072012=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012019 : TextConst 'ENU="Hours ";NOR=Timer;SVE=Timmar';
      Text001@11012020 : TextConst 'ENU=Surcharge %1;NOR=Tilleggsgebyr %1;SVE=Omkostnad %1';
      Text003@11012022 : TextConst 'ENU="Expense ";NOR=Kostnad;SVE=Utl„gg';
      Text004@11012023 : TextConst 'ENU=Product Posting Group should be filled in for account %1;NOR=Produktsregnskapsmalen m† fylles ut for konto %1;SVE=Produktbokf”ringsmallen m†ste fyllas i f”r kontot %1';
      JobsSetup@1210190014 : Record 315;
      HumanResourcesSetup@1100525006 : Record 5218;
      ProjRec@11012000 : Record 11072003;
      ProjTypeRec@11012001 : Record 11012009;
      ProjLedgerRec@1210190024 : Record 11072005;
      ProjLedgerRec2@1210190023 : Record 11072005;
      ProjectJnlRec@1210190022 : Record 11072012;
      ServOrderRec@1210190001 : Record 11012823;
      ServTypeRec@1210190013 : Record 11012814;
      ServLedgerRec@1210190030 : Record 11012819;
      ServLedgerRec2@1210190031 : Record 11012819;
      ServJnlRec@1210190029 : Record 11012821;
      DimValRec@11012002 : Record 349;
      EmplRec@11012006 : Record 5200;
      TradeAssRec@1210190025 : Record 11012015;
      WageComponentRec@11012007 : Record 11012014;
      ProjExpBalAccRec@1210190015 : Record 11012053;
      SurchargeDimValRec@11012009 : Record 349;
      SurchargeRec@11012010 : Record 11020208;
      PurchLineRec@11012011 : Record 39;
      CostCodeRec@1210190003 : Record 11012083;
      GenJnlLine@1210190020 : Record 81;
      GLSetup@1100485002 : Record 98;
      gRecIntercompanyEntry@1100485000 : Record 11012058;
      GLEntry@1100525000 : Record 17;
      DefaultDim@1100409000 : Record 352;
      gvVendorCde@1100485001 : Code[20];
      AmntInclVatDec@1210190017 : Decimal;
      NextProjEntryNo@1210190027 : Integer;
      NextServEntryNo@1210190028 : Integer;
      NextLeaveEntryNo@1100485003 : Integer;
      ICTagNo@1210190032 : Integer;
      CheckHourLine@1210190019 : Codeunit 11012003;
      HoursToGL@1210190021 : Codeunit 11012009;
      DimMgt@11012024 : Codeunit 408;
      Text005@1100485004 : TextConst 'ENU=''%1'' not present on project ''%2'';NOR=''%1'' finnes ikke for prosjekt ''%2'';SVE=''%1'' saknas f”r projekt ''%2''';
      gvICHoursPosting@1100525005 : 'NotApplicable,ReceiverSide,Supplierside';
      gvICVendorPostingGroup@1100525002 : Code[20];
      gvSupplyingCompany@1100525004 : Text[50];
      gvReceivingCompany@1100525003 : Text[50];
      Text006@1210190004 : TextConst 'ENU=Plant Loc.;NOR=Maskinplassering;SVE=Maskinutplacering';
      Text007@1210190002 : TextConst 'ENU=Project;NOR=Prosjekt;SVE=Projekt';
      Text008@1210190000 : TextConst 'ENU=Serv. Order;NOR=Serviceordre;SVE=Serv. Order';
      Text009@1100525001 : TextConst 'ENU=Element;NOR=Element;SVE=Element';
      Text11128229@1100285100 : TextConst 'ENU="Addition ";NOR="Tillegg ";SVE="Till„gg "';

    PROCEDURE DetermineEntryNo@4();
    VAR
      lProjLedgerRec@1210190000 : Record 11072005;
    BEGIN
      ProjLedgerRec.LOCKTABLE;
      IF lProjLedgerRec.FINDLAST THEN
        NextProjEntryNo := lProjLedgerRec."Entry No.";
      NextProjEntryNo := NextProjEntryNo + 1;
    END;

    PROCEDURE DetermineJournal@1(VAR SourceCode@11012000 : Code[10]);
    BEGIN
      ProjectJnlRec.LOCKTABLE;
      IF (NOT ProjectJnlRec.FINDLAST) OR (ProjectJnlRec."To Entry No." <> 0) THEN BEGIN
        ProjectJnlRec.INIT;
        ProjectJnlRec."No." := ProjectJnlRec."No." + 1;
        ProjectJnlRec."From Entry No." := NextProjEntryNo;
        ProjectJnlRec."To Entry No." := NextProjEntryNo;
        ProjectJnlRec."Creation Date" := TODAY;
        ProjectJnlRec."Source Code" := SourceCode;
        ProjectJnlRec."User ID" := USERID;
        ProjectJnlRec.INSERT;
      END;
    END;

    PROCEDURE PostProjectHours@2(VAR HourLine@11012000 : Record 11012039;VAR LastJnlProj@11012001 : Integer);
    VAR
      lRecIntercompanyRelation@1100525002 : Record 11012057;
      lBlnPosted@1210190000 : Boolean;
      lvOrgQty@1100525001 : Decimal;
      lvNewQty@1100525000 : Decimal;
      lvCompName@1100485000 : Text[50];
      lvPostingSetup@1100525003 : Record 11020565;
      CurrencyDate@1100528200 : Date;
      CurrencyExchangeRate@1100528201 : Record 330;
      Currency2@1100528202 : Record 4;
      lWageComponent@1100285500 : Record 11012014;
      Currency3@1100525004 : Record 4;
      DummyDec@1100528500 : Decimal;
      Vendor@1100528203 : Record 23;
    BEGIN
      WITH HourLine DO BEGIN

        //Skip empty lines
        IF EmptyLine THEN
          EXIT;

        CheckHourLine.RunCheck(HourLine);

        //>>IME-083 ADD-Exp.Hrs
        IF "Wage Component" <> '' THEN BEGIN
          IF lWageComponent.GET(HourLine."Wage Component") THEN BEGIN
            IF lWageComponent."Component Type" = lWageComponent."Component Type" :: "Expense hours" THEN
              EXIT;
          END;
        END;
        //<<ADD-Exp.Hrs

        IF ("Receiving Company" = '') THEN BEGIN
          IF NextProjEntryNo = 0 THEN
            DetermineEntryNo;

          IF ProjectJnlRec."No." = 0 THEN BEGIN
            DetermineJournal("Source Code");
            LastJnlProj := ProjectJnlRec."No.";
          END;

          ProjectJnlRec."To Entry No." := NextProjEntryNo;
          ProjectJnlRec.MODIFY;
        END;

        gvReceivingCompany := '';
        gvSupplyingCompany := '';
        gvICHoursPosting := gvICHoursPosting::NotApplicable;
        IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN BEGIN
          gvReceivingCompany := "Receiving Company";
          gvICHoursPosting := gvICHoursPosting::Supplierside
        END ELSE BEGIN
          IF ("Supplying Company" <> '') AND ("Supplying Company" <> COMPANYNAME) THEN BEGIN
            gvSupplyingCompany := "Supplying Company";
            gvICHoursPosting := gvICHoursPosting::ReceiverSide;
          END;
        END;

        lCheckCompanyIC(HourLine);

        IF "Employee No." <> '' THEN
          EmplRec.GET("Employee No.")
        ELSE
          CLEAR(EmplRec);

        IF "Cost Type" <> "Cost Type"::Plant THEN BEGIN
          TradeAssRec.GET(EmplRec."Trade Association");
          WageComponentRec.GET("Wage Component");
        END ELSE BEGIN
          CLEAR(TradeAssRec);
          CLEAR(WageComponentRec);
        END;

        GLSetup.GET;

        gvICVendorPostingGroup := '';

        IF (gvICHoursPosting = gvICHoursPosting::ReceiverSide) THEN BEGIN
          IF lvPostingSetup.GET(HourLine."Source Code", HourLine."Supplying Company", COMPANYNAME) THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Debit");
            lvPostingSetup.TESTFIELD("Prod. Account Credit");
            lRecIntercompanyRelation.GET(HourLine."Supplying Company", COMPANYNAME);
            IF lRecIntercompanyRelation."Vendor Posting Group" <> '' THEN
              gvICVendorPostingGroup := lRecIntercompanyRelation."Vendor Posting Group";
          END;
        END;

        IF (gvICHoursPosting = gvICHoursPosting::Supplierside) THEN BEGIN
          IF lvPostingSetup.GET(HourLine."Source Code", COMPANYNAME, HourLine."Receiving Company") THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Debit");
            lvPostingSetup.TESTFIELD("Prod. Account Credit");
            lRecIntercompanyRelation.GET(COMPANYNAME, HourLine."Receiving Company");
            IF lRecIntercompanyRelation."Vendor Posting Group" <> '' THEN
              gvICVendorPostingGroup := lRecIntercompanyRelation."Vendor Posting Group";
          END;
        END;

        ProjRec.GET("Project No.");
        ProjTypeRec.GET(ProjRec."Project Type");
        IF "Component Type" = "Component Type"::Expenses THEN
          IF NOT ProjExpBalAccRec.GET(ProjRec."Project Type", "Wage Component") THEN ProjExpBalAccRec.INIT;

        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");

        ProjLedgerRec.INIT;
        ProjLedgerRec."Entry No." := NextProjEntryNo;
        ProjLedgerRec."Document No." := "Document No.";
        ProjLedgerRec.Type := ProjLedgerRec.Type::"G/L Account";
        ProjLedgerRec."Posting Date" := "Posting Date";
        ProjLedgerRec."Execution Date" := GetExecutionDate;
        ProjLedgerRec."Supplying Company" := "Supplying Company";
        ProjLedgerRec."Employee No." := "Employee No.";
        ProjLedgerRec."Wage Component" := "Wage Component";
        ProjLedgerRec."Cost Component" := "Cost Component";
        IF "Currency Code" <> '' THEN BEGIN
          ProjLedgerRec."Currency Code" := "Currency Code";
          CurrencyDate := "Posting Date";
          ProjLedgerRec."Currency Factor" := CurrencyExchangeRate.ExchangeRate(1,"Project No.",CurrencyDate,"Currency Code",FALSE);
        END ELSE BEGIN
          ProjLedgerRec."Currency Code" := '';
          ProjLedgerRec."Currency Factor" := 1;
        END;

      //  IF "Component Type" = "Component Type"::Expenses THEN  call: 12297
        ProjLedgerRec.Chargeable := Chargeable;
        //IF ProjLedgerRec.Chargeable AND ("Component Type" IN ["Component Type"::Hours, "Component Type"::Expenses]) THEN BEGIN
        IF ProjLedgerRec.Chargeable AND ("Component Type" IN ["Component Type"::Hours, "Component Type"::Expenses,"Component Type"::Addition]) THEN BEGIN
          IF (ProjRec."Small Project" AND
              (JobsSetup."Small Project Cost Plus Hours" <> JobsSetup."Small Project Cost Plus Hours"::"Job Ledger Entries"))
            OR
             (NOT ProjRec."Small Project" AND
              (JobsSetup."Project Cost Plus Hours from" <> JobsSetup."Project Cost Plus Hours from"::"Job Ledger Entries"))
          THEN
            ProjLedgerRec.Chargeable := FALSE;
        END;

        CASE "Component Type" OF
          "Component Type"::Hours: ProjLedgerRec.Description := Text000;
          "Component Type"::Expenses: ProjLedgerRec.Description := Text003;
          "Component Type"::Addition : ProjLedgerRec.Description := Text11128229;  //190529, RFC229
        END;

        IF "Cost Type" = "Cost Type"::Plant THEN
          ProjLedgerRec.Description :=
            COPYSTR(ProjLedgerRec.Description + DimValRec.Name, 1, MAXSTRLEN(ProjLedgerRec.Description))
        ELSE
          ProjLedgerRec.Description :=
            COPYSTR(ProjLedgerRec.Description + EmplRec."Full Name", 1, MAXSTRLEN(ProjLedgerRec.Description));
        ProjLedgerRec.Correction := Correction;
        ProjLedgerRec.Comment := Comment;
        ProjLedgerRec."Source Code" := "Source Code";
        ProjLedgerRec."Reason Code" := "Reason Code";
        ProjLedgerRec."Cost Type" := DimValRec."Cost Type";
        ProjLedgerRec."Global Dimension 1 Code" := "Department Code";
        ProjLedgerRec."Global Dimension 2 Code" := "Cost Object";
        ProjLedgerRec."Dimension Set ID" :=
          GetDimensionSetID(
            ProjLedgerRec."Employee No.",
            ProjLedgerRec."Global Dimension 1 Code",
            ProjLedgerRec."Global Dimension 2 Code",
            "Receiving Company");  //DP00387 n

        //>>IME171
        DimMgt.SetDimensionValueChainsBool(TRUE);
        IF ProjLedgerRec."Global Dimension 1 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(1,ProjLedgerRec."Global Dimension 1 Code",ProjLedgerRec."Dimension Set ID");
        IF ProjLedgerRec."Global Dimension 2 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(2,ProjLedgerRec."Global Dimension 2 Code",ProjLedgerRec."Dimension Set ID");
        DimMgt.SetDimensionValueChainsBool(FALSE);
        //<<IME171

        ProjLedgerRec."Unit of Measure Code" := DimValRec."Unit of Measure";
      //  IF "Component Type" = "Component Type"::Hours THEN
        IF "Component Type" IN ["Component Type"::Hours,"Component Type"::Addition] THEN
          ProjLedgerRec.Quantity := "Total Line"
        ELSE
          ProjLedgerRec.Quantity := Quantity;
        ProjLedgerRec."Unit Cost (LCY)" := "Unit Cost (LCY)";
        ProjLedgerRec."Total Cost (LCY)" := "Amount (LCY)";
        Currency2.InitRoundingPrecision;
        IF "Currency Code" <> '' THEN BEGIN
          CurrencyDate := "Posting Date";
          ProjLedgerRec."Unit Cost" :=
          ROUND(
            CurrencyExchangeRate.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Unit Cost (LCY)",
               CurrencyExchangeRate.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");

          ProjLedgerRec."Total Cost" :=
          ROUND(
            CurrencyExchangeRate.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Amount (LCY)",
               CurrencyExchangeRate.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");
        END ELSE BEGIN
          ProjLedgerRec."Unit Cost" := ROUND("Unit Cost (LCY)",Currency2."Amount Rounding Precision");
          ProjLedgerRec."Total Cost" := ROUND("Amount (LCY)",Currency2."Amount Rounding Precision");
        END;

      //CALL C026457 sn
        IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
          Currency3.GET(GLSetup."Additional Reporting Currency");
          Currency3.TESTFIELD("Amount Rounding Precision");
          ProjLedgerRec."Additional-Currency Total Cost" :=
            ROUND(
              CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                0, '',
                "Posting Date",
                GLSetup."Additional Reporting Currency",
                "Amount (LCY)",
                CurrencyExchangeRate.ExchangeRate(0, '', "Posting Date",GLSetup."Additional Reporting Currency",FALSE),FALSE),
                  Currency3."Amount Rounding Precision");
        END ELSE BEGIN
          ProjLedgerRec."Additional-Currency Total Cost" := 0;
        END;
      //CALL C026457 en

      //
        ProjLedgerRec."User ID" := USERID;
        ProjLedgerRec."Job No." := "Project No.";
        ProjLedgerRec."Main Project No." := ProjRec."Main Project";
        ProjLedgerRec.VALIDATE(Element, Element);
        ProjLedgerRec."Extension Contract" := "Extension Contract";
        ProjLedgerRec."Rental Unit" := "Rental Unit";
        IF "Receiving Company" <> '' THEN
          lvCompName := "Receiving Company"
        ELSE
          lvCompName := COMPANYNAME;

        IF External AND (Employer <> '') THEN
          gvVendorCde := Employer
        ELSE
          gvVendorCde := '';

        ProjLedgerRec."Vendor No.":= gvVendorCde; //19-06-09

        IF gvICHoursPosting = gvICHoursPosting::NotApplicable THEN BEGIN
          IF gvVendorCde <> '' THEN BEGIN
            Vendor.GET(gvVendorCde);
            ProjLedgerRec."Vendor Posting Group" := Vendor."Vendor Posting Group";
          END;
        END ELSE BEGIN
          ProjLedgerRec."Vendor Posting Group" := gvICVendorPostingGroup;
        END;

        ProjLedgerRec."WIP Account Costs" :=
          ProjTypeRec.GetWipAccByPostingGrp(ProjRec."Project Type",
                                                  DimValRec."Cost Type",
                                                  ProjRec."Project Status",
                                                  JobsSetup."Provisions at Closure",
                                                  lvCompName,
                                                  DimValRec."Cost Type",
                                                  gvVendorCde,
                                                  gvICHoursPosting,
                                                  gvICVendorPostingGroup,
                                                  '');

        IF "Component Type" = "Component Type"::Hours THEN BEGIN
          IF "Cost Type" = "Cost Type"::Plant THEN
            ProjLedgerRec."WIP Balance Account" := DimValRec."Balance Account Plant Hours"
          ELSE
            IF (ProjTypeRec."Wage Coverage Account" <> '') AND
               ((NOT GLSetup."IC suppress Wage. C. Acc.") OR
                (gvICHoursPosting = gvICHoursPosting::NotApplicable)) THEN
              ProjLedgerRec."WIP Balance Account" := ProjTypeRec."Wage Coverage Account"
            ELSE
              ProjLedgerRec."WIP Balance Account" := TradeAssRec."Wage Coverage Account";
        END ELSE BEGIN
          IF (WageComponentRec."Cov. Account No. Cost Plus" <> '') AND
             (ProjRec."Settlement Method" = ProjRec."Settlement Method"::"Cost Plus") THEN BEGIN
            ProjLedgerRec."WIP Balance Account" := WageComponentRec."Cov. Account No. Cost Plus";
          END ELSE BEGIN
            IF ProjExpBalAccRec."Balance Account" <> '' THEN
              ProjLedgerRec."WIP Balance Account" := ProjExpBalAccRec."Balance Account"
            ELSE
              ProjLedgerRec."WIP Balance Account" := WageComponentRec."Bal. Account No.";
            END;
        END;
        ProjLedgerRec."No." := ProjLedgerRec."WIP Account Costs";

        ProjLedgerRec."Try-out No." := "Try-out No.";
        ProjLedgerRec."Estimate No." := "Estimate No.";
        ProjLedgerRec."Service Order No." := "Service Order No.";
        ProjLedgerRec."Service Contract No." := "Service Contract No.";
        ProjLedgerRec."Service Location No." := "Service Location No.";
        ProjLedgerRec."Additional Cost (Service)" := "Additional Cost (Service)";
        ProjLedgerRec."Entry Type" := ProjLedgerRec."Entry Type"::Usage;
        IF "Component Type" = "Component Type"::Expenses THEN
          ProjLedgerRec.Expense := TRUE;

        lBlnPosted := FALSE;

        //IF ProjLedgerRec."Cost Type" = ProjLedgerRec."Cost Type"::Labor THEN
        //  ProjLedgerRec."OLD Engineering Global Dim 1 C" := EmplRec."Global Dimension 1 Code";  //field can be deleted KZ/JTH

        IF ("Receiving Company" <> '') THEN BEGIN
          // hours posted in supplying company
          // Standard intercompany Project

          CreateICEntry(HourLine, ProjLedgerRec);
          HoursToGL.RunPost(ProjLedgerRec, "Supplying Company", "Receiving Company",AmntInclVatDec, FALSE,TRUE);
          CheckUpdateVATdataICEntry;

          //Post Production Account
          PostProduction(ProjLedgerRec);

          PostSurchargesIC(HourLine, 0, ProjRec."Project Type");  //M26940 Type added

          EXIT; //So project ledger is not created after all
        END;

        // hours posted: no ic, or ic in receiving company

        IF ("Supplying Company" <> '') THEN BEGIN  //ic in receiving company
          // Standard intercompany Employee
          CreateICEntry(HourLine, ProjLedgerRec);
          HoursToGL.RunPost(ProjLedgerRec,"Supplying Company","Receiving Company",AmntInclVatDec,FALSE,FALSE); //both debit and credit //C043199.c
          lBlnPosted := TRUE;
        END;

        lvOrgQty := ProjLedgerRec.Quantity;

        IF ("Component Type" = "Component Type"::Expenses) AND
           (ProjLedgerRec."Cost Type" = ProjLedgerRec."Cost Type"::Labor)
        THEN
          ProjLedgerRec.Quantity := 0;

        lvNewQty := ProjLedgerRec.Quantity;

        ProjLedgerRec.CheckIfPostingIsAllowed;//kkleermaker.n, 110720, C-016679
        //C043199.sn
        IF lBlnPosted THEN BEGIN
          ProjLedgerRec."Dimension Set ID" := HoursToGL.GetDimensionSetIDGenJnl;
          DimMgt.ValidateShortcutDimValues(1,ProjLedgerRec."Global Dimension 1 Code",ProjLedgerRec."Dimension Set ID"); //C057779.n
        END;
        //C043199.en
        ProjLedgerRec.INSERT(TRUE);
        ProjLedgerRec.CopyHourLineComents(HourLine); // SESB.I039 ASH 05.07.2013
        NextProjEntryNo := NextProjEntryNo + 1;

        IF "Component Type" <> "Component Type"::Days THEN BEGIN
          IF (NOT lBlnPosted) THEN BEGIN
            FillHourDetails(HourLine);
      //>>4PSSE, pure 274981,274890
      //      HoursToGL.RUN(ProjLedgerRec);       //both debit and credit
            HoursToGL.RunPost(ProjLedgerRec, '', '',AmntInclVatDec, FALSE,TRUE);
      //<<4PSSE
            //T003442
            IF HoursToGL.GetDimensionSetIDGenJnl <> ProjLedgerRec."Dimension Set ID" THEN BEGIN
              ProjLedgerRec."Dimension Set ID" := HoursToGL.GetDimensionSetIDGenJnl;
              DimMgt.ValidateShortcutDimValues(1,ProjLedgerRec."Global Dimension 1 Code",ProjLedgerRec."Dimension Set ID"); //C057779.n
              ProjLedgerRec.MODIFY;
            END;
            //
          END;
          IF ProjTypeRec."Post Complementary Costs" THEN
            PostComplWIPProj(ProjLedgerRec);
        END;

        ProjLedgerRec.Quantity := lvOrgQty;
        PostSurcharges(HourLine,0);
        PostSurchargesIC(HourLine, 0, ProjRec."Project Type");  //M26940 Type added
        ProjLedgerRec.Quantity := lvNewQty;

        ProjectJnlRec."To Entry No." := NextProjEntryNo - 1;
        ProjectJnlRec.MODIFY;
      END;
    END;

    [External]
    PROCEDURE PostServiceHours@1210190008(VAR HourLine@11012000 : Record 11012039;VAR LastJnlServ@11012001 : Integer;VAR LastJnlProj@1210190000 : Integer);
    VAR
      lvCompName@1100525001 : Text[50];
      lvServType@1100525000 : Code[20];
      lRecIntercompanyRelation@1100525002 : Record 11012057;
      lvPostingSetup@1100525003 : Record 11020565;
      CurrencyDate@1100409002 : Date;
      CurrencyExchangeRate@1100409001 : Record 330;
      Currency2@1100409000 : Record 4;
      DummyDec@1100528500 : Decimal;
      Vendor@1100528200 : Record 23;
    BEGIN
      WITH HourLine DO BEGIN

        //Skip empty lines
        IF EmptyLine THEN
          EXIT;

        CheckHourLine.RunCheck(HourLine);

        GLEntry.LOCKTABLE;
        IF GLEntry.FINDLAST THEN;

        IF ("Receiving Company" = '') THEN BEGIN
          IF NextServEntryNo = 0 THEN BEGIN
            ServLedgerRec.LOCKTABLE;
            IF ServLedgerRec.FINDLAST THEN
              NextServEntryNo := ServLedgerRec."Entry No.";
            NextServEntryNo := NextServEntryNo + 1;
          END;

          IF ServJnlRec."No." = 0 THEN BEGIN
            ServJnlRec.LOCKTABLE;
            IF (NOT ServJnlRec.FINDLAST) OR (ServJnlRec."To Entry No." <> 0) THEN BEGIN
              ServJnlRec.INIT;
              ServJnlRec."No." := ServJnlRec."No." + 1;
              ServJnlRec."From Entry No." := NextServEntryNo;
              ServJnlRec."To Entry No." := NextServEntryNo;
              ServJnlRec."Creation Date" := TODAY;
              ServJnlRec."Source Code" := "Source Code";
              ServJnlRec."User ID" := USERID;
              ServJnlRec.INSERT;
            END;
            LastJnlServ := ServJnlRec."No.";
          END;

          ServJnlRec."To Entry No." := NextServEntryNo;
          ServJnlRec.MODIFY;
        END;

        gvReceivingCompany := '';
        gvSupplyingCompany := '';
        gvICHoursPosting := gvICHoursPosting::NotApplicable;
        IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN BEGIN
          gvReceivingCompany := "Receiving Company";
          gvICHoursPosting := gvICHoursPosting::Supplierside;
        END;
        //Hours on service orders can only be added in supplying company.

        GLSetup.GET;

        lCheckCompanyIC(HourLine);
        EmplRec.GET("Employee No.");
        TradeAssRec.GET(EmplRec."Trade Association");
        WageComponentRec.GET("Wage Component");

        IF (gvICHoursPosting = gvICHoursPosting::Supplierside) THEN BEGIN
          IF lvPostingSetup.GET(HourLine."Source Code", COMPANYNAME, HourLine."Receiving Company") THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Debit");
            lvPostingSetup.TESTFIELD("Prod. Account Credit");
            lRecIntercompanyRelation.GET(COMPANYNAME, HourLine."Receiving Company");
            IF lRecIntercompanyRelation."Vendor Posting Group" <> '' THEN
              gvICVendorPostingGroup := lRecIntercompanyRelation."Vendor Posting Group";
          END;
        END;

        ServOrderRec.GET("Service Order No.");
        ServOrderRec.CheckStatus(0);
        IF "Additional Cost (Service)" THEN BEGIN
          ServOrderRec.TESTFIELD("Service Type (Other)");
          lvServType := ServOrderRec."Service Type (Other)";
        END ELSE BEGIN
          ServOrderRec.TESTFIELD("Service Type");
          lvServType := ServOrderRec."Service Type";
        END;
        ServTypeRec.GET(lvServType);

        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");

        ServLedgerRec.INIT;
        ServLedgerRec."Entry No." := NextServEntryNo;
        ServLedgerRec."Document No." := "Document No.";
        ServLedgerRec."Posting Date" := "Posting Date";
        ServLedgerRec."Execution Date" := GetExecutionDate;
        ServLedgerRec."Employee No." := "Employee No.";
        ServLedgerRec."Wage Component" := "Wage Component";
        ServLedgerRec."Cost Component" := "Cost Component";
      //  IF "Component Type" = "Component Type"::Expenses THEN   Call: 12297
        ServLedgerRec.Chargeable := Chargeable;

        CASE "Component Type" OF
          "Component Type"::Hours: ServLedgerRec.Description := Text000;
          "Component Type"::Expenses: ServLedgerRec.Description := Text003;
          "Component Type"::Addition : ProjLedgerRec.Description := Text11128229;  //190529, RFC229
        END;
        ServLedgerRec.Description :=
          COPYSTR(ServLedgerRec.Description + EmplRec."Full Name", 1, MAXSTRLEN(ServLedgerRec.Description));
        ServLedgerRec.Comment := Comment;
        ServLedgerRec."Source Code" := "Source Code";
        ServLedgerRec."Reason Code" := "Reason Code";
        ServLedgerRec."Cost Type" := DimValRec."Cost Type";
        ServLedgerRec."Global Dimension 1 Code" := "Department Code";
        ServLedgerRec."Global Dimension 2 Code" := "Cost Object";
        ServLedgerRec."Dimension Set ID" :=
          GetDimensionSetID(
            ServLedgerRec."Employee No.",
            ServLedgerRec."Global Dimension 1 Code",
            ServLedgerRec."Global Dimension 2 Code",
            "Receiving Company");  //DP00387 n

        //>>IME171
        DimMgt.SetDimensionValueChainsBool(TRUE);
        IF ServLedgerRec."Global Dimension 1 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(1,ServLedgerRec."Global Dimension 1 Code",ServLedgerRec."Dimension Set ID");
        IF ServLedgerRec."Global Dimension 2 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(2,ServLedgerRec."Global Dimension 2 Code",ServLedgerRec."Dimension Set ID");
        DimMgt.SetDimensionValueChainsBool(FALSE);
        //<<IME171

        ServLedgerRec."Unit of Measure Code" := DimValRec."Unit of Measure";
        IF "Component Type" = "Component Type"::Hours THEN
          ServLedgerRec.Quantity := "Total Line"
        ELSE
          ServLedgerRec.Quantity := Quantity;
        ServLedgerRec."Unit Cost (LCY)" := "Unit Cost (LCY)";
        ServLedgerRec."Total Cost (LCY)" := "Amount (LCY)";
        //db.sn, 25-09-12: C002490
        Currency2.InitRoundingPrecision;
        IF "Currency Code" <> '' THEN BEGIN
          CurrencyDate := "Posting Date";
          ServLedgerRec."Unit Cost" :=
            ROUND(
              CurrencyExchangeRate.ExchangeAmtLCYToFCY(
              0, '', CurrencyDate, "Currency Code", "Unit Cost (LCY)",
              CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",FALSE),FALSE),
              Currency2."Amount Rounding Precision");
          ServLedgerRec."Total Cost" :=
            ROUND(
              CurrencyExchangeRate.ExchangeAmtLCYToFCY(
              0, '', CurrencyDate, "Currency Code", "Amount (LCY)",
              CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",FALSE),FALSE),
              Currency2."Amount Rounding Precision");
        END ELSE BEGIN
          ServLedgerRec."Unit Cost" := ROUND("Unit Cost (LCY)",Currency2."Amount Rounding Precision");
          ServLedgerRec."Total Cost" := ROUND("Amount (LCY)",Currency2."Amount Rounding Precision");
        END;
        //db.en, 25-09-12: C002490
        ServLedgerRec."User ID" := USERID;
        ServLedgerRec."Service Contract No." := "Service Contract No.";
        ServLedgerRec."Service Order No." := "Service Order No."; //No validation here, Intercompany possible
        ServLedgerRec.ValidateServOrder("Receiving Company");
        ServLedgerRec."Service Location No." := "Service Location No.";
        ServLedgerRec."Additional Cost" := "Additional Cost (Service)";
        //ServLedgerRec."Customer No." := ServOrderRec."Customer No.";
        ServLedgerRec."Project No." := "Project No.";
        ServLedgerRec."Service Control Period Date" := "Service Control Period Date";
        ServLedgerRec."Service Category" := "Service Category";

        IF "Receiving Company" <> '' THEN
          lvCompName := "Receiving Company"
        ELSE
          lvCompName := COMPANYNAME;

        IF External AND (Employer <> '') THEN
          gvVendorCde := Employer
        ELSE
          gvVendorCde := '';

        ServLedgerRec."Vendor No." := gvVendorCde; //19-06-09

        IF gvICHoursPosting = gvICHoursPosting::NotApplicable THEN BEGIN
          IF gvVendorCde <> '' THEN BEGIN
            Vendor.GET(gvVendorCde);
            ServLedgerRec."Vendor Posting Group" := Vendor."Vendor Posting Group";
          END;
        END ELSE BEGIN
          ServLedgerRec."Vendor Posting Group" := gvICVendorPostingGroup;
        END;

        //For IC posting per vendor group
        ServLedgerRec."WIP Account Costs" := ServTypeRec.GetWipAccByPostingGrp(lvServType,
                                                                                     DimValRec."Cost Type",
                                                                                     lvCompName,
                                                                                     DimValRec."Cost Type",
                                                                                     gvVendorCde,
                                                                                     gvICHoursPosting,
                                                                                     gvICVendorPostingGroup,
                                                                                     '');

        IF "Component Type" = "Component Type"::Hours THEN BEGIN
          IF (ServTypeRec."Wage Coverage Account" <> '') AND
             ((NOT GLSetup."IC suppress Wage. C. Acc.") OR
              (gvICHoursPosting = gvICHoursPosting::NotApplicable)) THEN
            ServLedgerRec."WIP Balance Account" := ServTypeRec."Wage Coverage Account"
          ELSE
            ServLedgerRec."WIP Balance Account" := TradeAssRec."Wage Coverage Account";
        END ELSE
          ServLedgerRec."WIP Balance Account" := WageComponentRec."Bal. Account No.";

        ServLedgerRec."G/L Account" := ServLedgerRec."WIP Account Costs";
        IF "Component Type" = "Component Type"::Expenses THEN
          ServLedgerRec.Expense := TRUE;

        //mg.sn, 14-06-11: M26765
        IF "Component Type" = "Component Type"::Hours THEN BEGIN
          ServLedgerRec."Time From" := "Time From";
          ServLedgerRec."Time Until" := "Time Until";
        END;
        //mg.en, 14-06-11: M26765

        AssignServiceToProjectEntry(ServLedgerRec,"Rental Unit");

        IF "Receiving Company" <> '' THEN BEGIN
          IF "Project No." = '' THEN BEGIN
            CreateICEntry(HourLine, ProjLedgerRec);
            HoursToGL.RunPost(ProjLedgerRec, "Supplying Company", "Receiving Company", AmntInclVatDec,FALSE,TRUE);
            CheckUpdateVATdataICEntry;

            // Eventual extra WIP
            PostProduction(ProjLedgerRec);

            PostSurchargesIC(HourLine,1,lvServType); //M26940 Type added
          END;
          EXIT;  //So service ledger is not created
        END;

        // Part below can't be related to ic-mutations
        IF ("Component Type" = "Component Type"::Expenses) AND
           (ServLedgerRec."Cost Type" = ServLedgerRec."Cost Type"::Labor)
        THEN
          ServLedgerRec.Quantity := 0;

        ServLedgerRec.VALIDATE("Service Order No.");  //db, 07-01-09
        ServLedgerRec.VALIDATE("Source Type");
        ServLedgerRec.VALIDATE("Cost Present");     //db, 03-10-08: M12864
        ServLedgerRec.VALIDATE("Revenue Present");  //db, 03-10-08: M12864

        ServLedgerRec.INSERT(TRUE);
        NextServEntryNo := NextServEntryNo + 1;

        IF "Component Type" <> "Component Type"::Days THEN BEGIN
          IF "Project No." = '' THEN BEGIN
            FillHourDetails(HourLine);
      //    HoursToGL.RUN(ProjLedgerRec); //C043199.o
            HoursToGL.RunPost(ProjLedgerRec,'','',DummyDec,FALSE,FALSE); //C043199.n
            //C012162
            IF HoursToGL.GetDimensionSetIDGenJnl <> ServLedgerRec."Dimension Set ID" THEN BEGIN
              ProjLedgerRec."Dimension Set ID" := HoursToGL.GetDimensionSetIDGenJnl;
              DimMgt.ValidateShortcutDimValues(1,ProjLedgerRec."Global Dimension 1 Code",ProjLedgerRec."Dimension Set ID"); //C057779.n
              ServLedgerRec."Dimension Set ID" := HoursToGL.GetDimensionSetIDGenJnl;
              DimMgt.ValidateShortcutDimValues(1,ServLedgerRec."Global Dimension 1 Code",ServLedgerRec."Dimension Set ID"); //C057779.n
              ServLedgerRec.MODIFY;
            END;
            //
            IF ServTypeRec."Post Complementary Costs" THEN
              PostComplWIPServ(ProjLedgerRec);
          END;
        END;

        PostSurcharges(HourLine,1);

        ServJnlRec."To Entry No." := NextServEntryNo - 1;
        ServJnlRec.MODIFY;

        LastJnlProj := ProjectJnlRec."No.";
      END;
    END;

    [External]
    PROCEDURE PostIndirectHours@1210190016(VAR HourLine@11012000 : Record 11012039);
    VAR
      IntercompanyRelation@1100528500 : Record 11012057;
      CoverageAccount@1100525000 : Code[20];
    BEGIN
      WITH HourLine DO BEGIN

        //Skip empty lines
        IF EmptyLine THEN
          EXIT;

        CheckHourLine.RunCheck(HourLine);

        lCheckCompanyIC(HourLine);
        CostCodeRec.GET("Cost Code");
        CostCodeRec.TESTFIELD(Blocked, FALSE);
        IF CostCodeRec."No Ledger Entry" THEN
          EXIT;

        CostCodeRec.TESTFIELD("Account No.");

        EmplRec.GET("Employee No.");
        TradeAssRec.GET(EmplRec."Trade Association");
        TradeAssRec.TESTFIELD("Wage Coverage Account");

        CoverageAccount := TradeAssRec."Wage Coverage Account";
        IF "Component Type" = "Component Type"::Expenses THEN
          IF WageComponentRec.GET("Wage Component") THEN
            IF WageComponentRec."Bal. Account No." <> '' THEN
              CoverageAccount := WageComponentRec."Bal. Account No.";

        //Debet
        GenJnlLine.INIT;
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Account No." := CostCodeRec."Account No.";
        GenJnlLine."Employee No." := "Employee No.";
        GenJnlLine."Document No." := "Document No.";
        GenJnlLine."Source Code" := "Source Code";
        GenJnlLine."Reason Code" := "Reason Code";

        GenJnlLine."Shortcut Dimension 1 Code" := "Department Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Cost Object";
        GenJnlLine."Dimension Set ID" :=
          GetDimensionSetID(
            GenJnlLine."Employee No.",
            GenJnlLine."Shortcut Dimension 1 Code",
            GenJnlLine."Shortcut Dimension 2 Code",
            "Receiving Company");  //DP00387 n

        //>>IME171
        DimMgt.SetDimensionValueChainsBool(TRUE);
        IF GenJnlLine."Shortcut Dimension 1 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(1,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Dimension Set ID");
        IF GenJnlLine."Shortcut Dimension 2 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(2,GenJnlLine."Shortcut Dimension 2 Code",GenJnlLine."Dimension Set ID");
        DimMgt.SetDimensionValueChainsBool(FALSE);
        //<<IME171

        GenJnlLine."Journal Batch Name" := HumanResourcesSetup."Hours Journal Batch";
        GenJnlLine."Journal Template Name" := HumanResourcesSetup."Hours Journal Template";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Posting Date" := "Posting Date";
        CASE "Component Type" OF
          "Component Type"::Hours:
            GenJnlLine.Description := COPYSTR(Text000 + EmplRec."Full Name", 1, MAXSTRLEN(GenJnlLine.Description));
          "Component Type"::Expenses:
            GenJnlLine.Description := COPYSTR(Text003 + EmplRec."Full Name", 1, MAXSTRLEN(GenJnlLine.Description));
          "Component Type"::Addition :
            GenJnlLine.Description := COPYSTR(Text11128229 + EmplRec."Full Name",1,MAXSTRLEN(GenJnlLine.Description));  //190529, RFC229
        END;
        GenJnlLine.Amount := "Amount (LCY)";
        GenJnlLine.VALIDATE(Amount);
        GenJnlLine."Wage Component" := "Wage Component";
        //*34225.sn
        IF "Component Type" = "Component Type"::Hours THEN
          GenJnlLine.Quantity := "Total Line"
        ELSE
          GenJnlLine.Quantity := Quantity;
        //*34225.en

        IF ("Receiving Company" <> '') OR ("Supplying Company" <> '') THEN BEGIN
          //Intercompany
          GenJnlLine."Bal. Account No." := CoverageAccount;
          GenJnlLine."Intercompany Transaction" := TRUE;
          AssignIndirectToProjectEntry(GenJnlLine,HourLine); //C007286
          CreateICEntry(HourLine, ProjLedgerRec);
          IF ("Receiving Company" <> '') THEN BEGIN
            // intercompany Receiving
            GenJnlLine."Account No." := gRecIntercompanyEntry.GetICAccountNoOfCurrentCompany;
            //MC-029020 sn
            AssignIndirectToProjectEntry(GenJnlLine,HourLine); //C007286
            PostProduction(ProjLedgerRec);
            //MC-029020 en
            GenJnlLine."Dimension Set ID" := 0;
            GenJnlLine."Shortcut Dimension 1 Code" := '';
            GenJnlLine."Shortcut Dimension 2 Code" := '';
            DimMgt.ValidateShortcutDimValues(1,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Dimension Set ID");
            DimMgt.ValidateShortcutDimValues(2,GenJnlLine."Shortcut Dimension 2 Code",GenJnlLine."Dimension Set ID");
            //DP01162.sn
            IntercompanyRelation.GET(COMPANYNAME,HourLine."Receiving Company");
            IntercompanyRelation.AddICRelationDimsOfCurrentCompany(GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
            //DP01162.en
            GenJnlLine."Receiving Company" := "Receiving Company"; //C033942
          END;
          GenJnlLine."Bal. Account No." := '';
        END;

        HoursToGL.ProcessCostEntry(GenJnlLine);

        //Credit
        GenJnlLine."Receiving Company" := ''; //C033942
        IF "Supplying Company" = '' THEN
          GenJnlLine."Account No." := CoverageAccount
        ELSE
          GenJnlLine."Account No." := gRecIntercompanyEntry.GetICAccountNoOfCurrentCompany;

        GenJnlLine."Shortcut Dimension 1 Code" := EmplDepartmentCode(EmplRec,TradeAssRec);
        DimMgt.ValidateShortcutDimValues(1,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Dimension Set ID");
        GenJnlLine.Amount := GenJnlLine.Amount * -1;
        GenJnlLine.VALIDATE(Amount);

        HoursToGL.ProcessCostEntry(GenJnlLine);

        //Post surcharges cost code
        GenJnlLine."Account No." := CostCodeRec."Account No.";
        IF "Receiving Company" = '' THEN BEGIN
          GenJnlLine."Shortcut Dimension 1 Code" := "Department Code";
          DimMgt.ValidateShortcutDimValues(1,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Dimension Set ID");
        END;
        IF "Component Type" = "Component Type"::Hours THEN
          GenJnlLine.Quantity := "Total Line"
        ELSE
          GenJnlLine.Quantity := Quantity;
        GenJnlLine.Amount := GenJnlLine.Amount * -1;
        AssignIndirectToProjectEntry(GenJnlLine,HourLine); //C007286
        ProjLedgerRec.Surcharge := TRUE;
        PostSurcharges(HourLine,2);

      END;
    END;

    [External]
    PROCEDURE PostResourceRequestHours@1100529000(VAR HourLine@11012000 : Record 11012039);
    VAR
      ResourceRequest@1100529000 : Record 11124901;
      ResourceRequestType@1100529001 : Record 11124907;
      CoverageAccount@1100525000 : Code[20];
      AccountNo@1100529002 : Code[20];
    BEGIN
      WITH HourLine DO BEGIN
        //Skip empty lines
        IF EmptyLine THEN
          EXIT;
        CheckHourLine.RunCheck(HourLine);
        lCheckCompanyIC(HourLine);

        ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
        ResourceRequest.GET("Resource Request No.");
        ResourceRequest.TESTFIELD("Request Type");
        ResourceRequestType.CHANGECOMPANY(ResourceRequest.CURRENTCOMPANY);
        ResourceRequestType.GET(ResourceRequest."Request Type");
        IF "Component Type" <> "Component Type"::Expenses THEN BEGIN
          ResourceRequestType.TESTFIELD("Cost Account Labor");
          AccountNo := ResourceRequestType."Cost Account Labor";
        END ELSE BEGIN
          ResourceRequestType.TESTFIELD("Cost Account Expenses");
          AccountNo := ResourceRequestType."Cost Account Expenses";
        END;

        EmplRec.GET("Employee No.");
        TradeAssRec.GET(EmplRec."Trade Association");
        TradeAssRec.TESTFIELD("Wage Coverage Account");
        CoverageAccount := TradeAssRec."Wage Coverage Account";
        IF "Component Type" = "Component Type"::Expenses THEN
          IF WageComponentRec.GET("Wage Component") THEN
            IF WageComponentRec."Bal. Account No." <> '' THEN
              CoverageAccount := WageComponentRec."Bal. Account No.";

        //Debet
        GenJnlLine.INIT;
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Account No." := AccountNo;
        GenJnlLine."Employee No." := "Employee No.";
        GenJnlLine."Document No." := "Document No.";
        GenJnlLine."Source Code" := "Source Code";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Shortcut Dimension 1 Code" := "Department Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Cost Object";
        GenJnlLine."Dimension Set ID" :=
          GetDimensionSetID(
            GenJnlLine."Employee No.",
            GenJnlLine."Shortcut Dimension 1 Code",
            GenJnlLine."Shortcut Dimension 2 Code",
            "Receiving Company");  //DP00387 n
        GenJnlLine."Journal Batch Name" := HumanResourcesSetup."Hours Journal Batch";
        GenJnlLine."Journal Template Name" := HumanResourcesSetup."Hours Journal Template";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Posting Date" := "Posting Date";
        CASE "Component Type" OF
          "Component Type"::Hours:
            GenJnlLine.Description := COPYSTR(Text000 + EmplRec."Full Name", 1, MAXSTRLEN(GenJnlLine.Description));
          "Component Type"::Expenses:
            GenJnlLine.Description := COPYSTR(Text003 + EmplRec."Full Name", 1, MAXSTRLEN(GenJnlLine.Description));
          "Component Type"::Addition :
            GenJnlLine.Description := COPYSTR(Text11128229 + EmplRec."Full Name",1,MAXSTRLEN(GenJnlLine.Description));  //190529, RFC229
        END;
        GenJnlLine.Amount := "Amount (LCY)";
        GenJnlLine.VALIDATE(Amount);
        GenJnlLine."Wage Component" := "Wage Component";
        IF "Component Type" = "Component Type"::Hours THEN
          GenJnlLine.Quantity := "Total Line"
        ELSE
          GenJnlLine.Quantity := Quantity;
        HoursToGL.ProcessCostEntry(GenJnlLine);

        //Credit
        GenJnlLine."Receiving Company" := '';
        GenJnlLine."Account No." := CoverageAccount;
        GenJnlLine."Shortcut Dimension 1 Code" := EmplDepartmentCode(EmplRec,TradeAssRec);
        DimMgt.ValidateShortcutDimValues(1,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Dimension Set ID");
        GenJnlLine.Amount := GenJnlLine.Amount * -1;
        GenJnlLine.VALIDATE(Amount);
        HoursToGL.ProcessCostEntry(GenJnlLine);
      END;
    END;

    PROCEDURE PostExternalHours@5(VAR HourLine@11012000 : Record 11012039;VAR PurchHeaderRec@11012001 : Record 38;VAR LineNoInt@11012002 : Integer;VAR PurchaseLineCreated@1100528400 : Boolean);
    VAR
      PlantLoc@1210190000 : Record 11012554;
      PurchCommentLine@1100409000 : Record 43;
      ResourceRequest@1100529001 : Record 11124901;
      ResourceRequestType@1100529000 : Record 11124907;
      lvCompName@1100485000 : Text[50];
      lvServType@1100525000 : Code[20];
      CurrencyDate@1100525003 : Date;
      CurrencyExchangeRate@1100525002 : Record 330;
      Currency2@1100525001 : Record 4;
      MaxLen@1210190001 : Integer;
      lPurchaseUnitCost@1100525004 : Decimal;
      lUnitCost@1100525005 : Decimal;
      DimSetID@1100285000 : Integer;
    BEGIN
      WITH HourLine DO BEGIN

        PurchaseLineCreated := FALSE;

        //Skip empty lines
        IF EmptyLine THEN
          EXIT;

        lCheckCompanyIC(HourLine);
        GLSetup.GET;
        EmplRec.GET("Employee No.");
        IF HumanResourcesSetup."Charge Costs Extern. Employees" = HumanResourcesSetup."Charge Costs Extern. Employees"::"Posting Hours" THEN BEGIN
          EmplRec.TESTFIELD("Trade Association");
          TradeAssRec.GET(EmplRec."Trade Association");
          TradeAssRec.TESTFIELD("External Cost Account");
        END;
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, ("Cost Object" <> ''), "Project No.");

        IF NOT ProjRec.GET("Project No.") THEN
          ProjRec.INIT;
        IF NOT ProjTypeRec.GET(ProjRec."Project Type") THEN
          ProjTypeRec.INIT;
        PurchLineRec.INIT;
        IF HumanResourcesSetup."Charge Costs Extern. Employees" <> HumanResourcesSetup."Charge Costs Extern. Employees"::"Posting Hours" THEN //C-025716
          PurchLineRec."Receiving Company" := "Receiving Company";
        PurchLineRec."Document Type" := PurchLineRec."Document Type"::Order;
        PurchLineRec."Document No." := PurchHeaderRec."No.";
        PurchLineRec."Line No." := LineNoInt;
        PurchLineRec."Buy-from Vendor No." := PurchHeaderRec."Buy-from Vendor No.";
        PurchLineRec.Type := PurchLineRec.Type::"G/L Account";
        PurchLineRec."System-Created Entry" := TRUE;

        IF "Receiving Company" <> '' THEN
          lvCompName := "Receiving Company"
        ELSE
          lvCompName := COMPANYNAME;

        IF HumanResourcesSetup."Charge Costs Extern. Employees" = HumanResourcesSetup."Charge Costs Extern. Employees"::"Posting Hours" THEN
          PurchLineRec."No." := TradeAssRec."External Cost Account"
        ELSE
          CASE Type OF
            Type::Project:
              PurchLineRec."No." := ProjTypeRec.GetWipAcc(ProjRec."Project Type",
                                                          DimValRec."Cost Type",
                                                          ProjRec."Project Status",
                                                          JobsSetup."Provisions at Closure",
                                                          lvCompName,
                                                          DimValRec."Cost Type",
                                                          PurchHeaderRec."Buy-from Vendor No.",
                                                          '');
            Type::Service:
              BEGIN
                ServOrderRec.GET("Service Order No.");
                IF "Additional Cost (Service)" THEN BEGIN
                  ServOrderRec.TESTFIELD("Service Type (Other)");
                  lvServType := ServOrderRec."Service Type (Other)";
                END ELSE BEGIN
                  ServOrderRec.TESTFIELD("Service Type");
                  lvServType := ServOrderRec."Service Type";
                END;
                ServTypeRec.GET(lvServType);

                PurchLineRec."No.":= ServTypeRec.GetWipAcc(lvServType,
                                                           DimValRec."Cost Type",
                                                           lvCompName,
                                                           DimValRec."Cost Type",
                                                           PurchHeaderRec."Buy-from Vendor No.",
                                                           '');
              END;
            Type::Indirect:
              BEGIN
                CostCodeRec.GET("Cost Code");
                CostCodeRec.TESTFIELD(Blocked, FALSE);
                CostCodeRec.TESTFIELD("Account No.");
                PurchLineRec."No." := CostCodeRec."Account No.";
              END;
            Type::Plant:
              BEGIN
                PurchLineRec.VALIDATE("Plant Type", "Plant Type");
                PurchLineRec.VALIDATE("Plant No.", "Plant No.");
                PurchLineRec.VALIDATE("Cost Component Plant", "Cost Component Plant");
              END;
            Type::ResourceRequest:
              BEGIN
                ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
                ResourceRequest.GET("Resource Request No.");
                ResourceRequest.TESTFIELD("Request Type");
                ResourceRequestType.CHANGECOMPANY(ResourceRequest.CURRENTCOMPANY);
                ResourceRequestType.GET(ResourceRequest."Request Type");
                ResourceRequestType.TESTFIELD("Cost Account Labor");
                PurchLineRec."No." := ResourceRequestType."Cost Account Labor";
              END;
          END;

        PurchLineRec."Posting Date" := "Posting Date";
        PurchLineRec.VALIDATE("No.");
        IF PurchLineRec."Gen. Prod. Posting Group" = '' THEN
          ERROR(Text004,PurchLineRec."No.");

        // Employee should be filled for costs related to calculating surcharge overhead (AK). (in table: 39)
        PurchLineRec."Employee No." := "Employee No.";

        IF "Component Type" = "Component Type"::Hours THEN
          PurchLineRec.VALIDATE(Quantity, "Total Line")
        ELSE
          PurchLineRec.VALIDATE(Quantity, Quantity);

        IF (Type = Type::Indirect) OR
           (HumanResourcesSetup."Charge Costs Extern. Employees" = HumanResourcesSetup."Charge Costs Extern. Employees"::"Posting Hours") THEN
        BEGIN

          IF (Type = Type::Indirect) THEN
            CostCodeRec.GET("Cost Code");

          IF TradeAssRec.Code <> EmplRec."Trade Association" THEN
            TradeAssRec.GET(EmplRec."Trade Association");

          IF (Type <> Type::Indirect) THEN BEGIN
            PurchLineRec.VALIDATE("Shortcut Dimension 1 Code",
               EmplDepartmentCode(EmplRec,TradeAssRec)); //Cost Center of employee or department.
          END ELSE BEGIN
            PurchLineRec.VALIDATE("Shortcut Dimension 1 Code", "Department Code");
            IF ("Cost Object" <> '') THEN BEGIN
              PurchLineRec."Cost Type" := 0; //call 23330
              PurchLineRec."Shortcut Dimension 2 Code" := ''; //necessary for createdim
              PurchLineRec.VALIDATE("Shortcut Dimension 2 Code", "Cost Object");
            END;
          END;

          IF ("Currency Code" <> '') OR (PurchHeaderRec."Currency Code" = '') THEN BEGIN //M 25797
            //Assume that filled "Currency Code" is equal to PurchHeaderRec."Currency Code"
            IF "Component Type" = "Component Type"::Hours THEN
              PurchLineRec.VALIDATE("Direct Unit Cost", "Purchase Unit Cost") //was Purchase Unit Cost (LCY)
            ELSE
              PurchLineRec.VALIDATE("Direct Unit Cost", "Unit Cost"); //was Unit Cost (LCY)
          END ELSE BEGIN
            //M 25797 sn
            //"Currency Code" = '' en PurchHeaderRec."Currency Code" <>  ''
            lUnitCost := "Unit Cost";
            lPurchaseUnitCost := "Purchase Unit Cost";
            IF ("Currency Code" = '') AND (PurchHeaderRec."Currency Code" <> '') THEN BEGIN
               Currency2.InitRoundingPrecision;
               CurrencyDate := "Posting Date";
               lUnitCost:=
                 ROUND(
                   CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                            1, "Project No.", CurrencyDate, PurchHeaderRec."Currency Code", "Unit Cost",
                             CurrencyExchangeRate.ExchangeRate
                               (1, "Project No.", CurrencyDate, PurchHeaderRec."Currency Code",FALSE),FALSE),
                             Currency2."Amount Rounding Precision");
               lPurchaseUnitCost:=
                 ROUND(
                   CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                            1, "Project No.", CurrencyDate, PurchHeaderRec."Currency Code", "Purchase Unit Cost",
                             CurrencyExchangeRate.ExchangeRate
                               (1, "Project No.", CurrencyDate, PurchHeaderRec."Currency Code",FALSE),FALSE),
                             Currency2."Amount Rounding Precision");
            END;
            IF "Component Type" = "Component Type"::Hours THEN
              PurchLineRec.VALIDATE("Direct Unit Cost", lPurchaseUnitCost)
            ELSE
              PurchLineRec.VALIDATE("Direct Unit Cost", lUnitCost);
            //M 25797 en
          END;

        END ELSE BEGIN
          //M 25797 sn
          lUnitCost := "Unit Cost";
          IF ("Currency Code" = '') AND (PurchHeaderRec."Currency Code" <> '') THEN BEGIN
            Currency2.InitRoundingPrecision;
            CurrencyDate := "Posting Date";
            lUnitCost:=
              ROUND(
                CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                     1, "Project No.", CurrencyDate, PurchHeaderRec."Currency Code", "Unit Cost",
                     CurrencyExchangeRate.ExchangeRate
                       (1, "Project No.", CurrencyDate, PurchHeaderRec."Currency Code",FALSE),FALSE),
                     Currency2."Amount Rounding Precision");
          END;
          PurchLineRec.VALIDATE("Direct Unit Cost", lUnitCost);
          //M 25797 en
          PurchLineRec."Job No." := "Project No.";

          IF (Type <> Type::Plant) OR ((Type = Type::Plant) AND ("Project No." <> '')) THEN //Call C001637
          PurchLineRec.VALIDATE(Element, Element);

          PurchLineRec."Extension Contract":= "Extension Contract";
          IF "Service Order No." <> '' THEN
            PurchLineRec.VALIDATE("Service Order No.", "Service Order No.");
          PurchLineRec."Service Contract No." := "Service Contract No.";
          PurchLineRec."Service Location No." := "Service Location No.";
          PurchLineRec."Additional Cost (Service)" := "Additional Cost (Service)";  //db, 05-05-08

          IF (Type <> Type::Plant) THEN BEGIN
            PurchLineRec."Cost Type" := 0; //call 23330
            PurchLineRec."Shortcut Dimension 2 Code" := ''; //necessary for createdim
            PurchLineRec.VALIDATE("Shortcut Dimension 2 Code", "Cost Object");
            IF "Cost Object" <> '' THEN
              PurchLineRec."Cost Type" := DimValRec."Cost Type" + 1;
          END;

          IF Type IN [Type::Project, Type::Service] THEN
            PurchLineRec.VALIDATE("Shortcut Dimension 1 Code", HourLine."Department Code");

        END;

        IF ("Supplying Company" = '') THEN
          PurchLineRec."Dimension Set ID" := AddEmployeeDimensionsToPurch(PurchLineRec);

        IF "Component Type" = "Component Type"::Hours THEN
          PurchLineRec.Description :=
            COPYSTR(Text000 + FORMAT(Year) + '-' + FORMAT(Week) + ' ' + EmplRec."Full Name",
                    1, MAXSTRLEN(PurchLineRec.Description))
        ELSE
          PurchLineRec.Description :=
            //COPYSTR(Text003 + EmplRec."Full Name", 1, MAXSTRLEN(PurchLineRec.Description));  //*31519.o
            COPYSTR(Text003 + FORMAT(Year) + '-' + FORMAT(Week) + ' ' + EmplRec."Full Name",   //*31519.n
                    1, MAXSTRLEN(PurchLineRec.Description));                                   //*31519.n
        MaxLen := MAXSTRLEN(PurchLineRec."Description 2");
        CASE Type OF
          Type::Project:
            IF PurchLineRec."Job No." = '' THEN  //* If project not filled in purch.line then in descr2
              PurchLineRec."Description 2" := COPYSTR(FIELDCAPTION("Project No.") + ' ' + "Project No.", 1, MaxLen);
          Type::Service:
            IF PurchLineRec."Service Order No." = '' THEN  //* If SO not filled in purch.line then in descr2
              PurchLineRec."Description 2" := COPYSTR(FIELDCAPTION("Service Order No.") + ' ' + "Service Order No.", 1, MaxLen);
          Type::Plant:
            BEGIN
              IF "Plant Location" <> '' THEN BEGIN  //* Plant Loc. not field in purch.line, so in descr2 (if filled in hour line)
                PurchLineRec."Description 2" := COPYSTR(FIELDCAPTION("Plant Location") + ' ' + "Plant Location", 1, MaxLen);
                IF "Receiving Company" <> '' THEN
                  PlantLoc.CHANGECOMPANY("Receiving Company");
                IF PlantLoc.GET("Plant Location") THEN BEGIN
                  IF PlantLoc."Project No." <> '' THEN BEGIN
                    IF Element = '' THEN BEGIN  //Call C001637 n
                      IF STRLEN(PurchLineRec."Description 2" +
                        FIELDCAPTION("Project No.") + PlantLoc."Project No.") + 3 <= MaxLen
                      THEN
                        PurchLineRec."Description 2" := PurchLineRec."Description 2" + ', ' +
                          FIELDCAPTION("Project No.") + ' ' + PlantLoc."Project No."
                      ELSE
                        PurchLineRec."Description 2" :=
                          COPYSTR(Text006+"Plant Location"+', '+Text007+' '+PlantLoc."Project No.", 1, MaxLen);
                    END ELSE BEGIN  //Call C001637 sn
                      IF STRLEN(PurchLineRec."Description 2" +
                        FIELDCAPTION("Project No.") + PlantLoc."Project No." +
                        FIELDCAPTION(Element) + Element) + 6 <= MaxLen
                      THEN
                        PurchLineRec."Description 2" := PurchLineRec."Description 2" + ', ' +
                          FIELDCAPTION("Project No.") + ' ' + PlantLoc."Project No." + ', ' +
                          FIELDCAPTION(Element) + ' ' + Element
                      ELSE
                        PurchLineRec."Description 2" :=
                          COPYSTR(Text006+"Plant Location"+', '+Text007+' '+PlantLoc."Project No." + ', ' +
                           Text009+' '+Element, 1, MaxLen);
                    END;           //Call C001637 en
                  END ELSE BEGIN
                    IF PlantLoc."Service Order No." <> '' THEN BEGIN
                      IF STRLEN(PurchLineRec."Description 2" +
                        FIELDCAPTION("Service Order No.") + PlantLoc."Service Order No.") + 3 <= MaxLen
                      THEN
                        PurchLineRec."Description 2" := PurchLineRec."Description 2" + ', ' +
                          FIELDCAPTION("Service Order No.") + ' ' + PlantLoc."Service Order No."
                      ELSE
                        PurchLineRec."Description 2" :=
                          COPYSTR(Text006+"Plant Location"+', '+Text008+' '+PlantLoc."Service Order No.", 1, MaxLen);
                    END;
                  END;
                END;
              END;
            END;
          Type::ResourceRequest:
            PurchLineRec."Description 2" := COPYSTR(FIELDCAPTION("Resource Request No.") + ' ' + "Resource Request No.", 1, MaxLen);
        END;
        PurchLineRec."Wage Component" := "Wage Component";
        PurchLineRec."Cost Component" := "Cost Component";

        //Final Step: Prepare Order to Post Receipt:
        PurchLineRec."Qty. to Receive" := PurchLineRec."Outstanding Quantity";
        PurchLineRec."Qty. to Receive (Base)" := PurchLineRec."Outstanding Qty. (Base)";
        PurchLineRec.FillMainProject;
        PurchLineRec.VALIDATE("Outstanding-Rcd/Not Invoiced");
        PurchLineRec."Input by" := USERID; //DP00469
        PurchLineRec."Input Date" := TODAY; //DP00469
        PurchLineRec.INSERT;
        PurchLineRec.CreatePurchOrderControl(FALSE);
        PurchaseLineCreated := TRUE;

        //>>IME171
        DimSetID := PurchLineRec."Dimension Set ID";
        DimMgt.SetDimensionValueChainsBool(TRUE);
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Purchase Line", PurchLineRec."Shortcut Dimension 1 Code");
        DimMgt.ValidateShortcutDimValues(1,PurchLineRec."Shortcut Dimension 1 Code",PurchLineRec."Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,PurchLineRec."Shortcut Dimension 2 Code",PurchLineRec."Dimension Set ID");
        DimMgt.SetDimensionValueChainsBool(FALSE);
        IF DimSetID <> PurchLineRec."Dimension Set ID" THEN
          PurchLineRec.MODIFY;
        //<<IME171

        IF PurchHeaderRec."Job No." <> "Project No." THEN BEGIN  //** 4PS04.sn
          PurchHeaderRec."Job No." := '';
          PurchHeaderRec.MODIFY;
        END;                                                     //** 4PS04.en
        // C000325.sn
        IF PurchHeaderRec."Your Reference" <> COPYSTR(Text000 + FORMAT(Year) + '-' + FORMAT(Week), 1, MAXSTRLEN(PurchHeaderRec."Your Reference")) THEN BEGIN
          IF "Component Type" = "Component Type"::Hours THEN
            PurchHeaderRec."Your Reference" := COPYSTR(Text000 + FORMAT(Year) + '-' + FORMAT(Week), 1, MAXSTRLEN(PurchHeaderRec."Your Reference"))
          ELSE
            PurchHeaderRec."Your Reference" := COPYSTR(Text003 + FORMAT(Year) + '-' + FORMAT(Week), 1, MAXSTRLEN(PurchHeaderRec."Your Reference"));
          PurchHeaderRec.MODIFY;
        END;
        // C000325.en
        //*34602.sn
        IF Comment <> '' THEN BEGIN
          PurchCommentLine.INIT;
          PurchCommentLine."Document Type" :=  PurchCommentLine."Document Type"::Order;
          PurchCommentLine."No." := PurchLineRec."Document No.";
          PurchCommentLine."Document Line No." := PurchLineRec."Line No.";
          PurchCommentLine."Line No." := 1;
          PurchCommentLine.Date := WORKDATE;
          PurchCommentLine.Comment := COPYSTR(Comment, 1, MAXSTRLEN(PurchCommentLine.Comment));
          PurchCommentLine.INSERT(TRUE);
        END;
        //*34602.en
      END;
    END;

    [External]
    PROCEDURE PostLeaveHours@1100485000(HourLine@1100485000 : Record 11012039);
    VAR
      LeaveLedgEntry@1100485001 : Record 11020235;
    BEGIN
      WITH HourLine DO BEGIN

        IF ("Leave Type" = '') OR ("Supplying Company" <> '') THEN
          EXIT;

        //Skip empty lines
        IF EmptyLine THEN
          EXIT;

        IF NextLeaveEntryNo = 0 THEN BEGIN
          LeaveLedgEntry.LOCKTABLE;
          IF LeaveLedgEntry.FINDLAST THEN
            NextLeaveEntryNo := LeaveLedgEntry."Entry No.";
        END;
        NextLeaveEntryNo := NextLeaveEntryNo + 1;

        LeaveLedgEntry.INIT;
        LeaveLedgEntry."Entry No." := NextLeaveEntryNo;
        LeaveLedgEntry."Posting Date" := "Posting Date";
        LeaveLedgEntry."Document No." := "Document No.";
        IF "Leave Factor" = 0 THEN
          LeaveLedgEntry."No. of Hours" := ROUND("Total Line", 0.001)
        ELSE
          LeaveLedgEntry."No. of Hours" := ROUND("Total Line" * "Leave Factor", 0.001);
        LeaveLedgEntry."Employee No." := "Employee No.";
        CALCFIELDS(Description);
        IF Comment <> '' THEN                           //**4PS02.sn
          LeaveLedgEntry.Description := COPYSTR(Comment, 1, MAXSTRLEN(LeaveLedgEntry.Description))
        ELSE                                            //**4PS02.en
          LeaveLedgEntry.Description := Description;
        LeaveLedgEntry."Leave Type" := "Leave Type";
        LeaveLedgEntry."User ID" := USERID;
        LeaveLedgEntry."Document Date" := "Posting Date";
        LeaveLedgEntry."Source Code" := "Source Code";
        LeaveLedgEntry."Reason Code" := "Reason Code";
        LeaveLedgEntry."Entry Type" := LeaveLedgEntry."Entry Type"::Hours;
        LeaveLedgEntry.INSERT(TRUE);
      END;
    END;

    [External]
    PROCEDURE PostPlantCostHours@1100485010(IYear@1100525003 : Integer;IWeek@1100525002 : Integer;IEmplComp@1100525004 : Text[30];IEmplNo@1100525001 : Code[20];ILineNo@1100525000 : Integer;IDocNo@1100485001 : Code[20]);
    BEGIN
      HoursToGL.PostPlantHourCost(IYear, IWeek, IEmplComp, IEmplNo, ILineNo, IDocNo);
    END;

    [External]
    PROCEDURE PostTempPlantCostHours@1100525003(VAR lvTempPlantHoursCostRec@1100525005 : TEMPORARY Record 11012578;IYear@1100525003 : Integer;IWeek@1100525002 : Integer;IEmplComp@1100525004 : Text[30];IEmplNo@1100525001 : Code[20];ILineNo@1100525000 : Integer;IDocNo@1100485001 : Code[20]);
    BEGIN
      HoursToGL.PostTempPlantHourCost(lvTempPlantHoursCostRec, IYear, IWeek, IEmplComp, IEmplNo, ILineNo, IDocNo);
    END;

    PROCEDURE lCheckCompanyIC@32(HourLine@1210190001 : Record 11012039);
    BEGIN
      JobsSetup.CHANGECOMPANY(HourLine."Receiving Company");
      HumanResourcesSetup.CHANGECOMPANY(HourLine."Receiving Company");
      ProjRec.CHANGECOMPANY(HourLine."Receiving Company");
      ProjTypeRec.CHANGECOMPANY(HourLine."Receiving Company");
      ServOrderRec.CHANGECOMPANY(HourLine."Receiving Company");
      ServTypeRec.CHANGECOMPANY(HourLine."Receiving Company");
      CostCodeRec.CHANGECOMPANY(HourLine."Receiving Company");
      DimValRec.CHANGECOMPANY(HourLine."Receiving Company");
      EmplRec.CHANGECOMPANY(HourLine."Supplying Company");
      TradeAssRec.CHANGECOMPANY(HourLine."Supplying Company");

      JobsSetup.GET;
      HumanResourcesSetup.GET;
    END;

    [External]
    PROCEDURE CreateICEntry@1210190004(VAR HourLine@1210190003 : Record 11012039;iRecJobLedgerEntry@1210190002 : Record 11072005);
    VAR
      lRecIntercompanyRelation@1210190000 : Record 11012057;
      lPostedHourLine@1210190001 : Record 11012085;
      lHourLine@1100485000 : Record 11012039;
      lvQuantity@1210190004 : Decimal;
    BEGIN
      IF HourLine."Receiving Company" <> '' THEN
        lRecIntercompanyRelation.GET(COMPANYNAME, HourLine."Receiving Company")
      ELSE BEGIN
        IF HourLine."Employee No." <> '' THEN BEGIN
          IF ICTagNo > 0 THEN
            ICTagNo := ICTagNo + 1
          ELSE BEGIN
            lPostedHourLine.SETCURRENTKEY("Receiving Company", "IC Tag No.");
            lPostedHourLine.SETFILTER("Receiving Company", '%1', '');
            IF lPostedHourLine.FINDLAST THEN
              ICTagNo := lPostedHourLine."IC Tag No." + 1
            ELSE
              ICTagNo := 1;
          END;
          lHourLine := HourLine;
          lHourLine.FIND('='); //Read Original Unmodified Record
          IF lHourLine."IC Tag No." = 0 THEN BEGIN
            lHourLine."IC Tag No." := ICTagNo;
            lHourLine.MODIFY;
          END;
        END;
        lRecIntercompanyRelation.GET(HourLine."Supplying Company", COMPANYNAME);
      END;

      //M26796 sn
      IF (HourLine."Cost Type" = HourLine."Cost Type"::Labor) AND
         (HourLine."Component Type" = HourLine."Component Type"::Expenses) THEN
        lvQuantity := 0
      ELSE
        lvQuantity := iRecJobLedgerEntry.Quantity;
      //M26796 en

      CreateICEntryRecord(lRecIntercompanyRelation,
        gRecIntercompanyEntry, iRecJobLedgerEntry,
        HourLine,lvQuantity); //C007286

      gRecIntercompanyEntry.INSERT(TRUE);
      gRecIntercompanyEntry."Currency Code" := GLSetup.GetCurrencyCode(HourLine."Currency Code");  //DP02206
      gRecIntercompanyEntry.MODIFY;
    END;

    [External]
    PROCEDURE CreateICEntryRecord@1210190003(iRecIntercompanyRelation@1210190000 : Record 11012057;VAR vRecIntercompanyEntry@1210190004 : Record 11012058;iRecJobLedgerEntry@1210190001 : Record 11072005;HourAccountingLine@1100525001 : Record 11012039;iQuantity@1210190006 : Decimal);
    VAR
      LastLineNo@1210190002 : Integer;
      lvPostingSetup@1100525000 : Record 11020565;
      GlobalDim1Code@1100527350 : Code[20];
    BEGIN
      // Add IC entry record based on selected IC Relation and current Job Ledger Entry

      WITH vRecIntercompanyEntry DO BEGIN
        CLEAR(vRecIntercompanyEntry);

        LOCKTABLE;
        IF FINDLAST THEN
          LastLineNo := "Line No.";

        INIT;
        "Line No." := LastLineNo + 1;

        IF HourAccountingLine."Receiving Company" <> '' THEN BEGIN //C007286
          //Intercompany Project
          "Post in Company" := HourAccountingLine."Receiving Company"; //C007286
          "Supplying Company" := COMPANYNAME;
          "Receiving Company" := HourAccountingLine."Receiving Company"; //C007286
          "Account No." := iRecIntercompanyRelation."Receiving Company IC Account";
          "Bal. Account No." := iRecJobLedgerEntry."WIP Account Costs";
          "Project No." := iRecJobLedgerEntry."Job No.";
          Element := iRecJobLedgerEntry.Element;
          "Extension Contract" := iRecJobLedgerEntry."Extension Contract";
          "Rental Unit" := iRecJobLedgerEntry."Rental Unit";

          "Dimension Set ID" := iRecJobLedgerEntry."Dimension Set ID";  //DP00387 new
          VALIDATE("Cost Object", iRecJobLedgerEntry."Global Dimension 2 Code");

          //C035104.sn
          IF HourAccountingLine.Type = HourAccountingLine.Type::Indirect THEN BEGIN
            lCheckCompanyIC(HourAccountingLine);
            //dp02085.sn
            IF HumanResourcesSetup."IC Global Dim 1 Codes Equal" THEN BEGIN
              GlobalDim1Code := HourAccountingLine.GetDepartmentCode(TRUE);
              VALIDATE("Global Dimension 1 Code",GlobalDim1Code);
            END ELSE
            //dp02085.en
              VALIDATE("Global Dimension 1 Code", iRecJobLedgerEntry."Global Dimension 1 Code");
          END ELSE
          //C035104.en
            VALIDATE("Global Dimension 1 Code", iRecJobLedgerEntry."Global Dimension 1 Code");

          //Source Code := empty
          IF lvPostingSetup.GET(iRecJobLedgerEntry."Source Code", COMPANYNAME, HourAccountingLine."Receiving Company") THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Debit");
            lvPostingSetup.TESTFIELD("Prod. Account Credit");
            "Use IC Vendor Posting Group" := TRUE;
          END;

        END ELSE BEGIN
          //Intercompany Employee or Plant
          //"Employee No." := iRecJobLedgerEntry."Employee No.";     //**4PS03.o
          "IC Hours Tag No." := ICTagNo;
          "Post in Company" := HourAccountingLine."Supplying Company"; //C007286
          "Supplying Company" := HourAccountingLine."Supplying Company"; //C007286
          "Receiving Company" := COMPANYNAME;
          "Account No." := iRecJobLedgerEntry."WIP Balance Account";
          "Bal. Account No." := iRecIntercompanyRelation."Supplying Company IC Account";
          VALIDATE("Global Dimension 1 Code", EmplDepartmentCode(EmplRec,TradeAssRec));

          //Source Code : = Hourline Source code
          "Use IC Vendor Posting Group" := FALSE;
        END;

        IF iRecJobLedgerEntry."Job No." <> '' THEN BEGIN
          vRecIntercompanyEntry."Project Type Receiving Comp." := ProjTypeRec.Code;
          vRecIntercompanyEntry."Cost Type Receiving Comp." := iRecJobLedgerEntry."Cost Type";
        END;
        IF iRecJobLedgerEntry."Service Order No."<> '' THEN BEGIN
          vRecIntercompanyEntry."Service Type Receiving Comp." := ServTypeRec.Code;  //db, 20-05-11
          vRecIntercompanyEntry."Cost Type Receiving Comp." := iRecJobLedgerEntry."Cost Type";
        END;

        "Account Type" := "Account Type"::"G/L Account";
        Description := iRecJobLedgerEntry.Description;
        "Item No." := iRecJobLedgerEntry."Item No.";
        "Basic Item" := iRecJobLedgerEntry."Basic Item";
        "Trade Item" := iRecJobLedgerEntry."Trade Item";
        Manufacturer := iRecJobLedgerEntry.Manufacturer;
        "Vendor (Trade Item)" := iRecJobLedgerEntry."Vendor (Trade Item)";
        Quantity := iQuantity;    //M26796  instead of iRecJobLedgerEntry.Quantity
        "Unit of Measure Code" := iRecJobLedgerEntry."Unit of Measure Code";
        //DP02206.sn
        IF iRecJobLedgerEntry."Currency Code" <> '' THEN BEGIN
          Price := iRecJobLedgerEntry."Unit Cost";
          Amount := iRecJobLedgerEntry."Total Cost";
        END ELSE BEGIN
          Price := iRecJobLedgerEntry."Unit Cost (LCY)";
          Amount := iRecJobLedgerEntry."Total Cost (LCY)";
        END;
        //DP02206.en
        "Employee No." := iRecJobLedgerEntry."Employee No.";   //**4PS03.n  do not change back, is already done before...
                                                               //           (see also calls 7514 and 10039)

        "Document No." := iRecJobLedgerEntry."Document No.";
        "Posting Date" := iRecJobLedgerEntry."Posting Date";
        "Execution Date Hours" := ProjLedgerRec."Execution Date";

        Surcharge := iRecJobLedgerEntry.Surcharge;
        "Wage Component" := iRecJobLedgerEntry."Wage Component";
        "Cost Component" := iRecJobLedgerEntry."Cost Component";

        "Try-out No." := iRecJobLedgerEntry."Try-out No.";
        "Estimate No." := iRecJobLedgerEntry."Estimate No.";
        "Service Order No." := iRecJobLedgerEntry."Service Order No.";
        "Service Contract No." := iRecJobLedgerEntry."Service Contract No.";
        "Service Location No." := iRecJobLedgerEntry."Service Location No.";
        "Additional Cost (Service)" := iRecJobLedgerEntry."Additional Cost (Service)";
        "Reason Code" := iRecJobLedgerEntry."Reason Code";  //DP00465

        TESTFIELD("Account No.");
        TESTFIELD("Bal. Account No.");
        IF "Project No." <> '' THEN
          TESTFIELD("Cost Object");

        CheckProjStatusReceivingComp();  //* Function in 'IC Entry' table
        CheckProjElemBlockedRecComp(); //Call 6564

        AddICRelationDims(iRecIntercompanyRelation);
      END;
    END;

    [External]
    PROCEDURE CheckUpdateVATdataICEntry@1210190013();
    BEGIN
      IF HumanResourcesSetup."VAT for Hours IC Entry" AND (AmntInclVatDec <> 0) THEN BEGIN
        gRecIntercompanyEntry."Gen. Posting Type" :=  gRecIntercompanyEntry."Gen. Posting Type"::Purchase;
        gRecIntercompanyEntry."Gen. Bus. Posting Group" := HumanResourcesSetup."Gen. Bus. Posting Group";
        gRecIntercompanyEntry."Gen. Prod. Posting Group" := HumanResourcesSetup."Gen. Prod. Posting Group";
        gRecIntercompanyEntry."VAT Bus. Posting Group" := HumanResourcesSetup."VAT Bus. Posting Group";
        gRecIntercompanyEntry."VAT Prod. Posting Group" := HumanResourcesSetup."VAT Prod. Posting Group";
        gRecIntercompanyEntry.Amount := AmntInclVatDec;
        gRecIntercompanyEntry.MODIFY;
      END;
    END;

    [External]
    PROCEDURE AssignIndirectToProjectEntry@1210190007(GenJnlLine@1210190000 : Record 81;HourAccountingLine@1100525000 : Record 11012039);
    BEGIN
      WITH GenJnlLine DO BEGIN
        ProjLedgerRec.INIT;
        ProjLedgerRec.Type := ProjLedgerRec.Type::"G/L Account";
        ProjLedgerRec."WIP Account Costs" := "Account No.";
        ProjLedgerRec."WIP Balance Account" := "Bal. Account No.";
        ProjLedgerRec."Employee No." := "Employee No.";
        ProjLedgerRec."Document No." := "Document No.";
        ProjLedgerRec."Posting Date" := "Posting Date";
        ProjLedgerRec."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ProjLedgerRec."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ProjLedgerRec."Dimension Set ID" := "Dimension Set ID";
        ProjLedgerRec."Cost Component" := "Cost Component";
        ProjLedgerRec."Source Code" := "Source Code";
        ProjLedgerRec."Reason Code" := "Reason Code";
        ProjLedgerRec.Description := Description;
        ProjLedgerRec.Quantity := Quantity;
        ProjLedgerRec."Unit of Measure Code" := "Unit of Measure Code";
        ProjLedgerRec."Unit Cost (LCY)" := HourAccountingLine."Unit Cost (LCY)"; //C007286
        ProjLedgerRec."Total Cost (LCY)" := Amount;
        ProjLedgerRec."Currency Code" := '';
        ProjLedgerRec."Currency Factor" := 1;
        ProjLedgerRec."Unit Cost" := ProjLedgerRec."Unit Cost (LCY)";    //* Currency Factor is 1
        ProjLedgerRec."Total Cost" := ProjLedgerRec."Total Cost (LCY)";  //*
        ProjLedgerRec."Wage Component" := "Wage Component";
        ProjLedgerRec."Try-out No." := HourAccountingLine."Try-out No."; //C007286
      END;
    END;

    [External]
    PROCEDURE AssignServiceToProjectEntry@1210190002(ServLedgerRec@1210190000 : Record 11012819;IRentalUnit@1100485000 : Code[20]);
    BEGIN
      WITH ServLedgerRec DO BEGIN
        ProjLedgerRec.INIT;
        ProjLedgerRec."Entry No." := "Entry No.";
        ProjLedgerRec."Employee No." := "Employee No.";
        ProjLedgerRec."Document No." := "Document No.";
        ProjLedgerRec.Type := ProjLedgerRec.Type::"G/L Account";
        ProjLedgerRec."Job No." := "Project No.";
        ProjLedgerRec."Main Project No." := ProjRec."Main Project";
        ProjLedgerRec."Rental Unit" := IRentalUnit;
        ProjLedgerRec."Service Order No." := "Service Order No.";
        ProjLedgerRec."Service Contract No." := "Service Contract No.";
        ProjLedgerRec."Service Location No." := "Service Location No.";
        ProjLedgerRec."Global Dimension 1 Code" := "Global Dimension 1 Code";
        ProjLedgerRec."Global Dimension 2 Code" := "Global Dimension 2 Code";
        ProjLedgerRec."Dimension Set ID" := "Dimension Set ID";
        ProjLedgerRec."Source Code" := "Source Code";
        ProjLedgerRec."Reason Code" := "Reason Code";
        ProjLedgerRec."Cost Type" := "Cost Type";
        ProjLedgerRec."Posting Date" := "Posting Date";
        ProjLedgerRec.Description := Description;
        ProjLedgerRec.Comment := Comment;
        ProjLedgerRec."WIP Account Costs" := "WIP Account Costs";
        ProjLedgerRec."WIP Balance Account" := "WIP Balance Account";
        ProjLedgerRec."No." := "WIP Account Costs";
        ProjLedgerRec.Quantity := Quantity;
        ProjLedgerRec."Unit of Measure Code" := "Unit of Measure Code";
        ProjLedgerRec."Unit Cost (LCY)" := "Unit Cost (LCY)";
        ProjLedgerRec."Total Cost (LCY)" := "Total Cost (LCY)";
        ProjLedgerRec."Currency Code" := '';
        ProjLedgerRec."Currency Factor" := 1;
        ProjLedgerRec."Unit Cost" := ProjLedgerRec."Unit Cost (LCY)";    //* Currency Factor is 1
        ProjLedgerRec."Total Cost" := ProjLedgerRec."Total Cost (LCY)";  //*
        ProjLedgerRec.Surcharge := Surcharge;
        ProjLedgerRec.Expense := Expense;
        ProjLedgerRec."Wage Component" := "Wage Component";
        ProjLedgerRec."Cost Component" := "Cost Component";
        ProjLedgerRec."Additional Cost (Service)" := "Additional Cost";
      END;
    END;

    [External]
    PROCEDURE AssignProjectToServiceEntry@1210190014(ProjLedgerRec2@1210190000 : Record 11072005);
    BEGIN
      WITH ProjLedgerRec2 DO BEGIN
        ServLedgerRec2.INIT;
        ServLedgerRec2."Entry No." := NextServEntryNo;
        ServLedgerRec2."Employee No." := "Employee No.";
        ServLedgerRec2."Document No." :="Document No.";
        ServLedgerRec2."G/L Account" := "No.";
        ServLedgerRec2."Project No." := "Job No.";
        ServLedgerRec2."Service Order No." := "Service Order No.";
        ServLedgerRec2."Service Contract No." := "Service Contract No.";
        ServLedgerRec2."Service Location No." := "Service Location No.";
      //  ServLedgerRec2.VALIDATE("Service Control Year");
        ServLedgerRec2."Global Dimension 1 Code" := "Global Dimension 1 Code";
        ServLedgerRec2."Global Dimension 2 Code" := "Global Dimension 2 Code";
        ServLedgerRec2."Dimension Set ID" := "Dimension Set ID";
        ServLedgerRec2."Source Code" := "Source Code";
        ServLedgerRec2."Reason Code" := "Reason Code";
        ServLedgerRec2."Cost Type" := "Cost Type";
        ServLedgerRec2."Posting Date" := "Posting Date";
        ServLedgerRec2.Description := Description;
        ServLedgerRec2.Comment := Comment;
        ServLedgerRec2."WIP Account Costs" := "WIP Account Costs";
        ServLedgerRec2."WIP Balance Account" := "WIP Balance Account";
        ServLedgerRec2.Quantity := Quantity;
        ServLedgerRec2."Unit of Measure Code" := "Unit of Measure Code";
        ServLedgerRec2."Unit Cost (LCY)" := "Unit Cost (LCY)";
        ServLedgerRec2."Total Cost (LCY)" := "Total Cost (LCY)";
        //db.sn, 25-09-12: C002490
        ServLedgerRec2."Unit Cost" := ServLedgerRec2."Unit Cost (LCY)";
        ServLedgerRec2."Total Cost" := ServLedgerRec2."Total Cost (LCY)";
        ServLedgerRec2."User ID" := USERID;
        //db.en, 25-09-12: C002490
        ServLedgerRec2.Surcharge := Surcharge;
        ServLedgerRec2.Expense := Expense;
        ServLedgerRec2."Wage Component" := "Wage Component";
        ServLedgerRec2."Cost Component" := "Cost Component";
        ServLedgerRec2.Chargeable := Chargeable;
        ServLedgerRec2."Additional Cost" := "Additional Cost (Service)";
        ServLedgerRec2."Vendor Posting Group" := "Vendor Posting Group";
      END;
    END;

    [External]
    PROCEDURE PostSurcharges@1210190012(HourLine@1100485001 : Record 11012039;lvOrigin@1210190001 : 'Project,Service,Indirect');
    VAR
      lvType@1210190000 : Code[20];
      lvOrigDim2@1210190002 : Code[20];
      lEmployeeRec@1100485000 : Record 5200;
      lTotSurchAmount@1100485002 : Decimal;
      DepartmentCode@1100525000 : Code[20];
      DummyDec@1100525003 : Decimal;
      VendorPostingGroup@1100528500 : Code[20];
    BEGIN
      WITH ProjLedgerRec DO BEGIN
        CASE lvOrigin OF
          lvOrigin::Project:
            BEGIN
              IF "Service Order No." <> '' THEN
                EXIT;
              ProjRec.GET("Job No.");
              lvType := ProjRec."Project Type";
            END;
          lvOrigin::Service:
            BEGIN
              ServOrderRec.GET("Service Order No.");
              IF "Additional Cost (Service)" THEN BEGIN
                ServOrderRec.TESTFIELD("Service Type (Other)");
                lvType := ServOrderRec."Service Type (Other)";
              END ELSE BEGIN
                ServOrderRec.TESTFIELD("Service Type");
                lvType := ServOrderRec."Service Type";
              END;
            END;
          lvOrigin::Indirect:
            lvType := HourLine."Cost Code";
        ELSE
          EXIT;
        END;
        lvOrigDim2 := "Global Dimension 2 Code";
        DimMgt.GetDimValueRec(2, lvOrigDim2, DimValRec, FALSE, '');

        IF ("Employee No." <> '') THEN BEGIN
          lEmployeeRec.CHANGECOMPANY("Supplying Company");
          IF lEmployeeRec.GET("Employee No.") THEN;
        END;

        IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Labor) AND
           ("Employee No." <> '') THEN
          IF (lEmployeeRec.External) AND
             (lEmployeeRec."External Post No Surcharge") THEN
            EXIT;

        IF GLSetup."Source Department Surcharge" = GLSetup."Source Department Surcharge"::Employee THEN
          DepartmentCode := lEmployeeRec."Global Dimension 1 Code"
        ELSE
          DepartmentCode := HourLine."Department Code";

        IF SurchargeRec.GetSurcharges(
          lvOrigin, lvType, "Job No.", TRUE, DimValRec."Cost Type", "Global Dimension 2 Code", "Wage Component",
          DepartmentCode, lEmployeeRec."Trade Association", "Cost Component", "Posting Date",
          SurchargeRec) THEN
        BEGIN
          REPEAT

            IF (gvICHoursPosting <> gvICHoursPosting::ReceiverSide) OR
               ((gvICHoursPosting = gvICHoursPosting::ReceiverSide) AND
               (NOT SurchargeRec."No Surcharge over InterCompany")) THEN
            BEGIN

              SurchargeRec.GetSurchargeDimVal(DimValRec, SurchargeDimValRec);
              SurchargeRec.TESTFIELD("Coverage Account");

              InitLedgerSurcharge(HourLine,lvOrigin,lvType,lTotSurchAmount, gvICVendorPostingGroup);
              IF (ProjLedgerRec2."Service Order No." <> '') AND (HourLine."Receiving Company" = '') THEN BEGIN
                AssignProjectToServiceEntry(ProjLedgerRec2);
                //must add entry no. of service entry in project entry, for functions in CU11012009. 26-08-2008
                ProjLedgerRec2."Entry No." := ServLedgerRec2."Entry No.";
                //
                ServLedgerRec2.VALIDATE("Service Order No.");  //db, 07-01-09
                ServLedgerRec2.VALIDATE("Source Type");
                ServLedgerRec2.VALIDATE("Cost Present");     //db, 03-10-08: M12864
                ServLedgerRec2.VALIDATE("Revenue Present");  //db, 03-10-08: M12864
                ServLedgerRec2.INSERT(TRUE);

                NextServEntryNo := NextServEntryNo + 1;
              END;
              IF (ProjLedgerRec2."Job No." <> '') AND (HourLine."Receiving Company" = '') THEN BEGIN
                IF NextProjEntryNo = 0 THEN DetermineEntryNo;
                IF ProjectJnlRec."No." = 0 THEN
                  DetermineJournal("Source Code");
                ProjLedgerRec2."Entry No." := NextProjEntryNo;
                ProjLedgerRec2.CheckIfPostingIsAllowed;//kkleermaker.n, 110720, C-016679
                ProjLedgerRec2.INSERT(TRUE);

                NextProjEntryNo := NextProjEntryNo + 1;
              END;

              IF SurchargeRec."Source Type Department" <> SurchargeRec."Source Type Department"::Job THEN BEGIN  //db, 11-12-06
                ProjLedgerRec2."Resource Group No." := SurchargeRec."Coverage Department"; // Indicator for CU 11012009
                ProjLedgerRec2."Location Code" := 'SURCH-DEP';            // don't write these fields in project ledger
              END;

              IF (HourLine."Receiving Company" <> '') THEN BEGIN
                CreateICEntry(HourLine, ProjLedgerRec2);
                HoursToGL.RunPost(ProjLedgerRec2, HourLine."Supplying Company",
                                  HourLine."Receiving Company", AmntInclVatDec, FALSE,
                                  SurchargeRec."Compress Coverage Posting");                 //Call C006064 n
                CheckUpdateVATdataICEntry;
              END ELSE BEGIN
                HoursToGL.RunPost(
                  ProjLedgerRec2, HourLine."Supplying Company",
                  HourLine."Receiving Company", DummyDec, TRUE,
                  SurchargeRec."Compress Coverage Posting");                 //Call C006064 n
              END;

              IF gvSupplyingCompany <> '' THEN
                IF (gvICHoursPosting = gvICHoursPosting::ReceiverSide) AND
                    (gvICVendorPostingGroup <> '') THEN
                  VendorPostingGroup := gvICVendorPostingGroup;
              IF (lvOrigin = lvOrigin::Project) AND ProjTypeRec."Post Complementary Surcharge" THEN
                PostComplWIPSurcharge(
                  lvOrigin, ProjLedgerRec2,
                  ProjTypeRec.GetComplWipAccSurch(DimValRec."Cost Type",VendorPostingGroup),
                  ProjTypeRec.GetComplWIPCoverAccSurch(DimValRec."Cost Type",VendorPostingGroup));
              IF (lvOrigin = lvOrigin::Service) AND ServTypeRec."Post Complementary Surcharge" THEN
                PostComplWIPSurcharge(
                  lvOrigin, ProjLedgerRec2,
                  ServTypeRec.GetComplWipAccSurch(DimValRec."Cost Type",VendorPostingGroup),
                  ServTypeRec.GetComplWIPCoverAccSurch(DimValRec."Cost Type",VendorPostingGroup));
            END;
          UNTIL SurchargeRec.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE InitLedgerSurcharge@1210190001(HourLine@1100485000 : Record 11012039;lvOrigin@1100485001 : 'Project,Service,Indirect,InterCompany';lvType@1100525001 : Code[20];VAR vTotSurchAmount@1100485003 : Decimal;lvICVendorPostingGroup@1100525002 : Code[20]);
    VAR
      lvProjElemRec@1100485002 : Record 11012010;
      lvCompName@1100525000 : Text[50];
      Vendor@1100528200 : Record 23;
    BEGIN
      GLSetup.GET;
      ProjLedgerRec2 := ProjLedgerRec;
      ProjLedgerRec2."Entry No." := NextProjEntryNo;

      IF SurchargeRec.Percentage <> 0 THEN BEGIN
        IF HumanResourcesSetup."Surcharge Overtime excl." THEN BEGIN
          IF SurchargeRec."Surcharge over Surcharge" THEN
            ProjLedgerRec2."Total Cost (LCY)" := ROUND(
              (vTotSurchAmount + ProjLedgerRec."Total Cost (LCY)" - (HourLine."Surcharge Overtime" * HourLine."Total Line") ) *
              SurchargeRec.Percentage/100)
          ELSE
            ProjLedgerRec2."Total Cost (LCY)" := ROUND(
              (ProjLedgerRec."Total Cost (LCY)" - (HourLine."Surcharge Overtime" * HourLine."Total Line") ) *
              SurchargeRec.Percentage/100);
        END ELSE BEGIN
          IF SurchargeRec."Surcharge over Surcharge" THEN
            ProjLedgerRec2."Total Cost (LCY)" := ROUND((vTotSurchAmount+ProjLedgerRec."Total Cost (LCY)")*SurchargeRec.Percentage/100)
          ELSE
            ProjLedgerRec2."Total Cost (LCY)" := ROUND(ProjLedgerRec."Total Cost (LCY)" * SurchargeRec.Percentage/100);
        END;
      END ELSE
        ProjLedgerRec2."Total Cost (LCY)" := ROUND(SurchargeRec.Amount * ProjLedgerRec.Quantity);

      IF (SurchargeRec."Source Type Source Code" = SurchargeRec."Source Type Source Code"::Fixed) AND //Note; only allowed at IC-MUTS
         (SurchargeRec."Source Code Surcharge" <> '') THEN BEGIN                                      //supplying company
        ProjLedgerRec2."Source Code" := SurchargeRec."Source Code Surcharge";
      END;

      ProjLedgerRec2."Currency Code" := '';  //13-01-2011 MC story, surcharge for now only in locale valuta
      ProjLedgerRec2."Direct Unit Cost (LCY)" := ProjLedgerRec2."Total Cost (LCY)";
      ProjLedgerRec2."Unit Cost (LCY)" := ProjLedgerRec2."Total Cost (LCY)";
      ProjLedgerRec2."Unit Cost" := ProjLedgerRec2."Unit Cost (LCY)";    //* Currency Factor is 1
      ProjLedgerRec2."Total Cost" := ProjLedgerRec2."Total Cost (LCY)";  //*
      ProjLedgerRec2.Quantity := 0;
      ProjLedgerRec2."Unit of Measure Code" := SurchargeDimValRec."Unit of Measure";
      ProjLedgerRec2."Cost Type" := SurchargeDimValRec."Cost Type";
      IF HourLine.Type <> HourLine.Type::Indirect THEN
        ProjLedgerRec2."Global Dimension 1 Code" := HourLine."Department Code";
      ProjLedgerRec2."Global Dimension 2 Code" := SurchargeDimValRec.Code;
      //T003442
      //ProjLedgerRec2."Dimension Set ID" :=
      //  GetDimensionSetID(ProjLedgerRec2."Employee No.",ProjLedgerRec2."Global Dimension 1 Code",ProjLedgerRec2."Global Dimension 2 Code");
      DimMgt.ValidateShortcutDimValues(1,ProjLedgerRec2."Global Dimension 1 Code",ProjLedgerRec2."Dimension Set ID");
      DimMgt.ValidateShortcutDimValues(2,ProjLedgerRec2."Global Dimension 2 Code",ProjLedgerRec2."Dimension Set ID");
      //

      //>>IME171
      DimMgt.SetDimensionValueChainsBool(TRUE);
      DimMgt.ValidateShortcutDimValues(1,ProjLedgerRec2."Global Dimension 1 Code",ProjLedgerRec2."Dimension Set ID");
      DimMgt.ValidateShortcutDimValues(2,ProjLedgerRec2."Global Dimension 2 Code",ProjLedgerRec2."Dimension Set ID");
      DimMgt.SetDimensionValueChainsBool(FALSE);
      //<<IME171

      SurchargeRec.CheckServiceOrderIndication(
        ProjLedgerRec2."Service Order No.", ProjLedgerRec2."Cost Component", SurchargeDimValRec."Cost Component");  //db, 05-03-10
      IF SurchargeDimValRec."Cost Component" <> '' THEN
        ProjLedgerRec2."Cost Component" := SurchargeDimValRec."Cost Component";

      IF HourLine."Receiving Company" <> '' THEN
        lvCompName := HourLine."Receiving Company"
      ELSE
        lvCompName := COMPANYNAME;

      lvProjElemRec.CHANGECOMPANY(lvCompName); //M23635

      IF (ProjLedgerRec2."Job No." <> '') AND (SurchargeRec."Element Surcharge" <> '') THEN BEGIN
        IF NOT (lvProjElemRec.GET(ProjLedgerRec2."Job No.", SurchargeRec."Element Surcharge")) THEN
          SurchargeRec.FIELDERROR("Element Surcharge",STRSUBSTNO(Text005,SurchargeRec."Element Surcharge",ProjLedgerRec2."Job No."));
        ProjLedgerRec2.Element := SurchargeRec."Element Surcharge";
      END;
      ProjLedgerRec2.Description := STRSUBSTNO(Text001, SurchargeRec.Description);

      gvICHoursPosting := gvICHoursPosting::NotApplicable;
        IF (HourLine."Receiving Company" <> '') AND (HourLine."Receiving Company" <> COMPANYNAME) THEN BEGIN
          gvReceivingCompany := HourLine."Receiving Company";
          gvICHoursPosting := gvICHoursPosting::Supplierside
        END ELSE BEGIN
          IF (HourLine."Supplying Company" <> '') AND (HourLine."Supplying Company" <> COMPANYNAME) THEN BEGIN
            gvSupplyingCompany := HourLine."Supplying Company";
            gvICHoursPosting := gvICHoursPosting::ReceiverSide;
          END;
        END;

      IF HourLine.External AND (HourLine.Employer <> '') THEN
        gvVendorCde := HourLine.Employer
      ELSE
        gvVendorCde := '';

      IF gvICHoursPosting = gvICHoursPosting::NotApplicable THEN BEGIN
        IF gvVendorCde <> '' THEN BEGIN
          Vendor.GET(gvVendorCde);
          ProjLedgerRec2."Vendor Posting Group" := Vendor."Vendor Posting Group";
        END;
      END ELSE BEGIN
        ProjLedgerRec2."Vendor Posting Group" := lvICVendorPostingGroup;
      END;

      CASE lvOrigin OF
        lvOrigin::Service:
          ProjLedgerRec2."WIP Account Costs" := ServTypeRec.GetWipAccByPostingGrp(
                                                lvType,
                                                SurchargeDimValRec."Cost Type",
                                                lvCompName,
                                                SurchargeDimValRec."Cost Type",
                                                gvVendorCde,
                                                gvICHoursPosting,
                                                lvICVendorPostingGroup,
                                                '');

        lvOrigin::Project:
          ProjLedgerRec2."WIP Account Costs" := ProjTypeRec.GetWipAccByPostingGrp(
                                                lvType,
                                                SurchargeDimValRec."Cost Type",
                                                ProjRec."Project Status",
                                                JobsSetup."Provisions at Closure",
                                                lvCompName,
                                                SurchargeDimValRec."Cost Type",
                                                gvVendorCde,
                                                gvICHoursPosting,
                                                lvICVendorPostingGroup,
                                                '');
      END;

      ProjLedgerRec2."WIP Balance Account" := SurchargeRec."Coverage Account";
      ProjLedgerRec2."No." := ProjLedgerRec2."WIP Account Costs";
      ProjLedgerRec2.Surcharge := TRUE;
      ProjLedgerRec2."Entry Type" := ProjLedgerRec2."Entry Type"::Usage;

      ProjLedgerRec2.Comment := '';
      ProjLedgerRec2.Chargeable := FALSE;

      vTotSurchAmount := vTotSurchAmount + ProjLedgerRec2."Total Cost (LCY)";
    END;

    [External]
    PROCEDURE FillHourDetails@1210190000(HourLine@1210190000 : Record 11012039);
    VAR
      HourAccountingDetail@1210190001 : Record 11012380;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(HourAccountingDetail) THEN
        EXIT;
      IF HumanResourcesSetup."Salary Application" <> HumanResourcesSetup."Salary Application"::"LOSA-CTB" THEN
        EXIT;
      IF HourLine.Type <> HourLine.Type::Project THEN
        EXIT;

      IF HourLine.Monday <> 0 THEN BEGIN
        HourAccountingDetail."Post Entry No." := NextProjEntryNo;
        HourAccountingDetail.Date := DWY2DATE(1,HourLine.Week,HourLine.Year);
        HourAccountingDetail.Hours := HourLine.Monday;
        HourAccountingDetail.Day := HourAccountingDetail.Day::Monday;
        HourAccountingDetail.INSERT;
      END;
      IF HourLine.Tuesday <> 0 THEN BEGIN
        HourAccountingDetail."Post Entry No." := NextProjEntryNo;
        HourAccountingDetail.Date := DWY2DATE(2,HourLine.Week,HourLine.Year);
        HourAccountingDetail.Hours := HourLine.Tuesday;
        HourAccountingDetail.Day := HourAccountingDetail.Day::Tuesday;
        HourAccountingDetail.INSERT;
      END;
      IF HourLine.Wednesday <> 0 THEN BEGIN
        HourAccountingDetail."Post Entry No." := NextProjEntryNo;
        HourAccountingDetail.Date := DWY2DATE(3,HourLine.Week,HourLine.Year);
        HourAccountingDetail.Hours := HourLine.Wednesday;
        HourAccountingDetail.Day := HourAccountingDetail.Day::Wednesday;
        HourAccountingDetail.INSERT;
      END;
      IF HourLine.Thursday <> 0 THEN BEGIN
        HourAccountingDetail."Post Entry No." := NextProjEntryNo;
        HourAccountingDetail.Date := DWY2DATE(4,HourLine.Week,HourLine.Year);
        HourAccountingDetail.Hours := HourLine.Thursday;
        HourAccountingDetail.Day := HourAccountingDetail.Day::Thursday;
        HourAccountingDetail.INSERT;
      END;
      IF HourLine.Friday <> 0 THEN BEGIN
        HourAccountingDetail."Post Entry No." := NextProjEntryNo;
        HourAccountingDetail.Date := DWY2DATE(5,HourLine.Week,HourLine.Year);
        HourAccountingDetail.Hours := HourLine.Friday;
        HourAccountingDetail.Day := HourAccountingDetail.Day::Friday;
        HourAccountingDetail.INSERT;
      END;
      IF HourLine.Saturday <> 0 THEN BEGIN
        HourAccountingDetail."Post Entry No." := NextProjEntryNo;
        HourAccountingDetail.Date := DWY2DATE(6,HourLine.Week,HourLine.Year);
        HourAccountingDetail.Hours := HourLine.Saturday;
        HourAccountingDetail.Day := HourAccountingDetail.Day::Saturday;
        HourAccountingDetail.INSERT;
      END;
      IF HourLine.Sunday <> 0 THEN BEGIN
        HourAccountingDetail."Post Entry No." := NextProjEntryNo;
        HourAccountingDetail.Date := DWY2DATE(7,HourLine.Week,HourLine.Year);
        HourAccountingDetail.Hours := HourLine.Sunday;
        HourAccountingDetail.Day := HourAccountingDetail.Day::Sunday;
        HourAccountingDetail.INSERT;
      END;
    END;

    [External]
    PROCEDURE AddEmployeeDimensionsToPurch@1100485003(lvPurchLine@1100485000 : Record 39) : Integer;
    VAR
      DimMgt@1100525003 : Codeunit 408;
      DefaultDim@1100525002 : Record 352;
      DimensionValue@1100525000 : Record 349;
    BEGIN
      IF lvPurchLine."Employee No." = '' THEN
        EXIT(lvPurchLine."Dimension Set ID");

      DefaultDim.SETCURRENTKEY("Table ID", "No.");
      DefaultDim.SETRANGE("Table ID", DATABASE::Employee);
      DefaultDim.SETRANGE("No.", lvPurchLine."Employee No.");
      DimensionValue.CHANGECOMPANY(lvPurchLine."Receiving Company");
      DimMgt.SetCompany(lvPurchLine."Receiving Company");
      IF DefaultDim.FINDSET THEN
        REPEAT
          IF DimensionValue.GET(DefaultDim."Dimension Code",DefaultDim."Dimension Value Code") THEN
            IF DimensionValue."Global Dimension No." = 0 THEN  //Non global dimensions only
              lvPurchLine."Dimension Set ID" :=
                DimMgt.GetDimSetAddedDimVal(lvPurchLine."Dimension Set ID",DefaultDim."Dimension Code",DefaultDim."Dimension Value Code")
        UNTIL DefaultDim.NEXT = 0;

      EXIT(lvPurchLine."Dimension Set ID");
    END;

    [External]
    PROCEDURE PostProduction@1100485002(lvProjLedgerRec@1100485004 : Record 11072005);
    VAR
      lvPostingSetup@1100485003 : Record 11020565;
      DepartmentCode@1100527000 : Code[20];
      DimMgt@1100527001 : Codeunit 408;
    BEGIN
      IF lvProjLedgerRec."Total Cost (LCY)" = 0 THEN
        EXIT;

      IF NOT lvPostingSetup.GET(lvProjLedgerRec."Source Code", COMPANYNAME, gvReceivingCompany) THEN
        EXIT;

      WITH lvProjLedgerRec DO BEGIN

        //Post Credit Line
        lvPostingSetup.TESTFIELD("Prod. Account Credit");
        "WIP Balance Account" := lvPostingSetup."Prod. Account Credit";

        //Post Debit Line
        lvPostingSetup.TESTFIELD("Prod. Account Debit");
        "WIP Account Costs" := lvPostingSetup."Prod. Account Debit";

        IF gvReceivingCompany <> '' THEN BEGIN
          IF lvPostingSetup.GetDepartmentCode("WIP Account Costs",EmplRec."No.",'',DepartmentCode) THEN
            "Global Dimension 1 Code" := DepartmentCode
          ELSE
            "Global Dimension 1 Code" := EmplDepartmentCode(EmplRec,TradeAssRec);

          "Global Dimension 2 Code" := '';

          "Dimension Set ID" := GetDimensionSetID("Employee No.", "Global Dimension 1 Code", "Global Dimension 2 Code", '');
        END;

        HoursToGL.ProcessComplWIP(lvProjLedgerRec);

      END;
    END;

    [External]
    PROCEDURE PostComplWIPProj@1100525002(JobLedgerEntry@1100525000 : Record 11072005);
    VAR
      VendorPostingGroupCode@1100528500 : Code[20];
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        IF "Total Cost (LCY)" = 0 THEN
          EXIT;

        VendorPostingGroupCode := GetVendorPostingGroup;

        DimMgt.GetDimValueRec(2,"Global Dimension 2 Code",DimValRec,TRUE,'');

        "WIP Balance Account" := ProjTypeRec.GetComplWIPCoverAcc("Cost Type",VendorPostingGroupCode,'');
        "WIP Account Costs" := ProjTypeRec.GetComplWipAcc("Cost Type",VendorPostingGroupCode,'');

        IF gvReceivingCompany <> '' THEN BEGIN
          "Global Dimension 1 Code" := EmplDepartmentCode(EmplRec,TradeAssRec);
          "Global Dimension 2 Code" := '';
          DimMgt.SetCompany(gvReceivingCompany);
          DimMgt.ValidateShortcutDimValues(1,"Global Dimension 1 Code","Dimension Set ID");
          DimMgt.ValidateShortcutDimValues(2,"Global Dimension 2 Code","Dimension Set ID");
          DimMgt.SetCompany(COMPANYNAME);
        END;
        HoursToGL.ProcessComplWIP(JobLedgerEntry);
      END;
    END;

    [External]
    PROCEDURE PostComplWIPServ@1100485005(JobLedgerEntry@1100485004 : Record 11072005);
    VAR
      ServiceType@1100485003 : Record 11012814;
      VendorPostingGroupCode@1100528500 : Code[20];
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        IF "Total Cost (LCY)" = 0 THEN
          EXIT;

        ServOrderRec.GET("Service Order No.");

        ServOrderRec.TESTFIELD("Service Type");
        ServiceType.GET(ServOrderRec."Service Type");

        IF NOT ServiceType."Post Complementary Costs" THEN
          EXIT;

        VendorPostingGroupCode := GetVendorPostingGroup;

        DimMgt.GetDimValueRec(2,"Global Dimension 2 Code",DimValRec,TRUE,'');

        "WIP Balance Account" := ServiceType.GetComplWIPCoverAcc("Cost Type",VendorPostingGroupCode,'',ServOrderRec);
        "WIP Account Costs" := ServiceType.GetComplWipAcc("Cost Type",VendorPostingGroupCode,'');

        IF gvReceivingCompany <> '' THEN BEGIN
          "Global Dimension 1 Code" := EmplDepartmentCode(EmplRec,TradeAssRec);
          "Global Dimension 2 Code" := '';
          DimMgt.SetCompany(gvReceivingCompany);
          DimMgt.ValidateShortcutDimValues(1,"Global Dimension 1 Code","Dimension Set ID");
          DimMgt.ValidateShortcutDimValues(2,"Global Dimension 2 Code","Dimension Set ID");
          DimMgt.SetCompany(COMPANYNAME);
        END;
        HoursToGL.ProcessComplWIP(JobLedgerEntry);
      END;
    END;

    [External]
    PROCEDURE PostComplWIPSurcharge@1100485008(lvOrigin@1100485000 : Integer;lvProjLedgerRec@1100485002 : Record 11072005;lvAccount@1100485004 : Code[20];lvBalanceAccount@1100485005 : Code[20]);
    BEGIN
      //**4PS
      //lvOrigin: 0=project, 1=service
      //starting point is the 'regular surcharge' record

      IF lvProjLedgerRec."Total Cost (LCY)" = 0 THEN
        EXIT;

      WITH lvProjLedgerRec DO BEGIN
        "WIP Balance Account" := lvBalanceAccount;
        "WIP Account Costs" := lvAccount;
        HoursToGL.ProcessComplWIP(lvProjLedgerRec);
      END;
    END;

    [External]
    PROCEDURE PostSurchargesIC@1100525000(HourLine@1100485001 : Record 11012039;lvOrigin@1210190001 : 'Project,Service,Indirect,InterCompany';lvType@1210190000 : Code[20]);
    VAR
      lvOrigDim2@1210190002 : Code[20];
      lEmployeeRec@1100485000 : Record 5200;
      lTotSurchAmount@1100485002 : Decimal;
      lCompanyName@1100525000 : Text[80];
      lvSourceTypeDepartment@1100525001 : 'Fixed,EmplOrFixed';
      lTradeAssRec@1100525002 : Record 11012015;
      VendorPostingGroupCode@1100528500 : Code[20];
    BEGIN
      //At IC postings also calculate surcharges at supplying company and create an IC posting for it.
      IF (gvICHoursPosting <> gvICHoursPosting::NotApplicable) AND
         (lvOrigin <> lvOrigin::Indirect) THEN
      BEGIN

        IF gvICHoursPosting = gvICHoursPosting::ReceiverSide THEN
          lCompanyName := HourLine."Supplying Company";
        IF gvICHoursPosting = gvICHoursPosting::Supplierside THEN
          lCompanyName := COMPANYNAME;

        WITH ProjLedgerRec DO BEGIN

      //    lvType := '';    M26940 old
          lvOrigDim2 := "Global Dimension 2 Code";
          DimMgt.GetDimValueRec(2, lvOrigDim2, DimValRec, FALSE, '');

          IF ("Employee No." <> '') THEN BEGIN
            lEmployeeRec.CHANGECOMPANY(lCompanyName);
            lTradeAssRec.CHANGECOMPANY(lCompanyName);
            lTradeAssRec.INIT;
            IF lEmployeeRec.GET("Employee No.") THEN
              IF lTradeAssRec.GET(lEmployeeRec."Trade Association") THEN;
          END;

          IF SurchargeRec.GetSurchargesIC(
      //      lvOrigin::InterCompany, lvType, TRUE, 0, '', '',   M26940 old
      //      lvOrigin::InterCompany, '', TRUE, 0, '', '',     //M26940 new //M29858 old
            lvOrigin::InterCompany, '', HourLine."Project No.", TRUE, 0, '', HourLine."Wage Component", //M29858 new
            lEmployeeRec."Global Dimension 1 Code",
            lEmployeeRec."Trade Association", '' , "Posting Date",
            SurchargeRec, lCompanyName, lvSourceTypeDepartment::EmplOrFixed) THEN //Call C023461
            //** Call C023461: fix for C007286 was incorrect because surcharges IC from supplierside (lCompanyName)
            //** should be posted in IC-entry from here
          BEGIN
            REPEAT
              SurchargeRec.GetSurchargeDimVal(DimValRec, SurchargeDimValRec);
              SurchargeRec.TESTFIELD("Coverage Account");

              InitLedgerSurcharge(HourLine, lvOrigin, lvType, lTotSurchAmount,gvICVendorPostingGroup);
              //here ProjLedgerRec2 is filled.

              //At posting on receiving side, create project entries of surcharge
              IF HourLine."Receiving Company" = '' THEN BEGIN
                IF ProjLedgerRec2."Service Order No." <> '' THEN BEGIN
                  AssignProjectToServiceEntry(ProjLedgerRec2);
                  //must add entry no. of service entry in project entry, for functions in CU11012009. 26-08-2008
                  ProjLedgerRec2."Entry No." := ServLedgerRec2."Entry No.";
                  //
                  ServLedgerRec2.VALIDATE("Service Order No.");  //db, 07-01-09
                  ServLedgerRec2.VALIDATE("Source Type");
                  ServLedgerRec2.VALIDATE("Cost Present");     //db, 03-10-08: M12864
                  ServLedgerRec2.VALIDATE("Revenue Present");  //db, 03-10-08: M12864
                  ServLedgerRec2.INSERT(TRUE);

                  NextServEntryNo := NextServEntryNo + 1;
                END;
                IF ProjLedgerRec2."Job No." <> '' THEN BEGIN
                  IF NextProjEntryNo = 0 THEN DetermineEntryNo;
                  IF ProjectJnlRec."No." = 0 THEN
                  DetermineJournal("Source Code");
                  ProjLedgerRec2."Entry No." := NextProjEntryNo;
                  ProjLedgerRec2.CheckIfPostingIsAllowed;//kkleermaker.n, 110720, C-016679
                  ProjLedgerRec2.INSERT(TRUE);

                  NextProjEntryNo := NextProjEntryNo + 1;
                END;
              END;

              IF SurchargeRec."Source Type Department" <> SurchargeRec."Source Type Department"::Job THEN BEGIN  //db, 11-12-06
                ProjLedgerRec2."Resource Group No." := SurchargeRec."Coverage Department";
                // Indicator for CU 11012009 - post hours to gl
                ProjLedgerRec2."Location Code" := 'SURCH-DEP';     // don't write these fields in project ledger
              END;

              //IC-Mutation
              CreateICEntrySurcharge(HourLine, ProjLedgerRec2);

              IF ((ProjLedgerRec2."Job No." <> '') OR (ProjLedgerRec2."Service Order No." <> '')) AND
                 (HourLine."Receiving Company" <> '') THEN
              BEGIN
                ProjLedgerRec2."Global Dimension 1 Code" := EmplDepartmentCode(lEmployeeRec, lTradeAssRec);
              END;

              //the regular surcharge posting
              HoursToGL.RunPost(ProjLedgerRec2, HourLine."Supplying Company",
                                HourLine."Receiving Company", AmntInclVatDec, FALSE,
                                SurchargeRec."Compress Coverage Posting"); //Call C006064 n


              CheckUpdateVATdataICEntry;

              IF HourLine."Receiving Company" = '' THEN BEGIN
                IF (lvOrigin = lvOrigin::Project) AND ProjTypeRec."Post Complementary Surcharge" THEN BEGIN
                  VendorPostingGroupCode := GetVendorPostingGroup;

                  PostComplWIPSurchargeIC(
                    ProjLedgerRec2,
                    ProjTypeRec.GetComplWipAcc(ProjLedgerRec2."Cost Type",VendorPostingGroupCode,''),
                    ProjTypeRec.GetComplWIPCoverAcc(ProjLedgerRec2."Cost Type",VendorPostingGroupCode,''));
                END;
              END ELSE
                PostProduction(ProjLedgerRec2);

            UNTIL SurchargeRec.NEXT = 0;
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE PostComplWIPSurchargeIC@1100525005(lvProjLedgerRec@1100485002 : Record 11072005;lvAccount@1100485004 : Code[20];lvBalanceAccount@1100485005 : Code[20]);
    BEGIN
      //**4PS
      IF lvProjLedgerRec."Total Cost (LCY)" = 0 THEN
        EXIT;

      WITH lvProjLedgerRec DO BEGIN
        "WIP Balance Account" := lvBalanceAccount;
        "WIP Account Costs" := lvAccount;
        HoursToGL.ProcessComplWIP(lvProjLedgerRec);
      END;
    END;

    [External]
    PROCEDURE CreateICEntrySurcharge@1100525001(VAR HourLine@1210190003 : Record 11012039;iRecJobLedgerEntry@1210190002 : Record 11072005);
    VAR
      lRecIntercompanyRelation@1210190000 : Record 11012057;
    BEGIN
      IF HourLine."Receiving Company" <> '' THEN
        lRecIntercompanyRelation.GET(COMPANYNAME, HourLine."Receiving Company")
      ELSE
        lRecIntercompanyRelation.GET(HourLine."Supplying Company", COMPANYNAME);

      ICTagNo := HourLine."IC Tag No.";

      iRecJobLedgerEntry."Dimension Set ID" :=    //DP00387 sn
        GetDimensionSetID(
          '',
          ProjLedgerRec."Global Dimension 1 Code",
          ProjLedgerRec."Global Dimension 2 Code",
          HourLine."Receiving Company");          //DP00387 en

      CreateICEntryRecord(lRecIntercompanyRelation,
        gRecIntercompanyEntry, iRecJobLedgerEntry,
        HourLine,iRecJobLedgerEntry.Quantity); //C007286

      HourLine."IC Tag No." := ICTagNo;

      gRecIntercompanyEntry.INSERT(TRUE);
      gRecIntercompanyEntry."Currency Code" := GLSetup.GetCurrencyCode(HourLine."Currency Code");  //DP02206+C051850
      gRecIntercompanyEntry.MODIFY;
    END;

    [External]
    PROCEDURE EmplDepartmentCode@1100409001(Employee@1100409001 : Record 5200;TradeAssociation@1100409000 : Record 11012015) DepartmentCode : Code[20];
    BEGIN
      IF TradeAssociation."Source Department Code" = TradeAssociation."Source Department Code"::"Trade Association" THEN
        DepartmentCode := TradeAssRec."Department Code"
      ELSE
        DepartmentCode := Employee."Global Dimension 1 Code";
    END;

    [External]
    PROCEDURE GetDimensionSetID@1100525006(EmployeeNo@1100525002 : Code[20];GlobalDimVal1@1100525001 : Code[20];GlobalDimVal2@1100525000 : Code[20];Company@1100525004 : Text[80]) : Integer;
    VAR
      DefaultDim@1100525003 : Record 352;
      AddEmployeeDims@1100409000 : Boolean;
    BEGIN
      AddEmployeeDims := (EmployeeNo <> '') AND (gvSupplyingCompany = '');

      IF AddEmployeeDims THEN BEGIN
        DefaultDim.SETCURRENTKEY("Table ID", "No.");
        DefaultDim.SETRANGE("Table ID", DATABASE::Employee);
        DefaultDim.SETRANGE("No.", EmployeeNo);
      END;

      //C021176.so
      //DimMgt.SetCompany(Company); //DP000387 new
      //EXIT(DimMgt.GetDimSetIDXtraDims(AddEmployeeDims,DefaultDim,GlobalDimVal1,GlobalDimVal2));
      //C021176.eo
      EXIT(HoursToGL.GetDimensionSetIDXtraDims(AddEmployeeDims,DefaultDim,GlobalDimVal1,GlobalDimVal2,Company));
    END;

    LOCAL PROCEDURE GetVendorPostingGroup@1100528503() VendorPostingGroupCode : Code[20];
    VAR
      Vendor@1100528500 : Record 23;
    BEGIN
      IF gvVendorCde <> '' THEN BEGIN
        Vendor.GET(gvVendorCde);
        VendorPostingGroupCode := Vendor."Vendor Posting Group";
      END;
      IF gvSupplyingCompany <> '' THEN
        IF (gvICHoursPosting = gvICHoursPosting::ReceiverSide) AND (gvICVendorPostingGroup <> '') THEN
          VendorPostingGroupCode := gvICVendorPostingGroup;
    END;

    BEGIN
    {
      4PS
      01-11-2000, A. Overeem: Added Overhead Surcharges conform standard AK charge.
      07-12-2001, A. Overeem: Added Wage Coverage Account on projecttype.
      4PS01 JD 11-12-2006 Call 7027, Take employee dimensions also to project entries.
      4PS02 JD 25-07-2007 Call 8876, Take comment to Leave Entries.
      4PS03 JD 15-07-2007 Call C-010720, Take Employee no. to receiving company.
      4PS04 JD 25-01-2008 Call 2140, Project No. not in header.
      4PS.UJS JD, 14-03-2008, Field Service Control Year added.

      SESB.I039 Extend no of characters in hour line
         ASH 05.07.2013 Trigger PostProjectHours changed

      IME083 ADD-Exp.Hrs  14-02-04  GHE  Don't Create Job- & G/L Entries when Wage Component is "Expense Hours"
      140905 ITERO.DL IME171 Dimensions are not extended due to lack of VALIDATEs
      170828 ITERO.DL pure274890, pure274981 Bokf›ring av timekort i prosjekter
      190204 ORANGO.DL RFC226 new "Component Type"
      190529 ORANGO.DL RFC226 handle new wagecomponent type 'addition'
    }
    END.
  }
}

