OBJECT Table 308 No. Series
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    OnDelete=BEGIN
               NoSeriesLine.SETRANGE("Series Code",Code);
               NoSeriesLine.DELETEALL;

               NoSeriesRelationship.SETRANGE(Code,Code);
               NoSeriesRelationship.DELETEALL;
               NoSeriesRelationship.SETRANGE(Code);

               NoSeriesRelationship.SETRANGE("Series Code",Code);
               NoSeriesRelationship.DELETEALL;
               NoSeriesRelationship.SETRANGE("Series Code");
             END;

    CaptionML=[ENU=No. Series;
               NOR=Nr.serie;
               SVE=Nr-serie];
    LookupPageID=Page571;
    DrillDownPageID=Page571;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 3   ;   ;Default Nos.        ;Boolean       ;OnValidate=BEGIN
                                                                IF ("Default Nos." = FALSE) AND (xRec."Default Nos." <> "Default Nos.") AND ("Manual Nos." = FALSE) THEN
                                                                  VALIDATE("Manual Nos.",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Default Nos.;
                                                              NOR=Standardnr.;
                                                              SVE=Nr-automatik] }
    { 4   ;   ;Manual Nos.         ;Boolean       ;OnValidate=BEGIN
                                                                IF ("Manual Nos." = FALSE) AND (xRec."Manual Nos." <> "Manual Nos.") AND ("Default Nos." = FALSE) THEN
                                                                  VALIDATE("Default Nos.",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Manual Nos.;
                                                              NOR=Manuelle nr.;
                                                              SVE=Manuell numrering] }
    { 5   ;   ;Date Order          ;Boolean       ;CaptionML=[ENU=Date Order;
                                                              NOR=Datorekkef›lge;
                                                              SVE=Kronologisk ordning] }
    { 11012000;;Project Type       ;Code20        ;TableRelation="Project Type";
                                                   CaptionML=[ENU=Project Type;
                                                              SVE=Projekttyp] }
    { 11012010;;Service Type       ;Code20        ;TableRelation="Service Type";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ServSetup.GET;
                                                                IF NOT ServSetup.IsServiceOrderNos(Code) AND NOT ServSetup.IsServiceContractNos(Code) THEN
                                                                  FIELDERROR("Service Type", Text11012000);
                                                                IF ServSetup."Copy Additional Cost Setup" THEN  //db, 19-06-07
                                                                   VALIDATE("Service Type (Other)", "Service Type");
                                                              END;

                                                   CaptionML=[ENU=Service Type;
                                                              SVE=Servicetyp] }
    { 11012015;;Service Type (Other);Code20       ;TableRelation="Service Type";
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF NOT ServSetup.IsServiceOrderNos(Code) AND NOT ServSetup.IsServiceContractNos(Code) THEN
                                                                  FIELDERROR("Service Type", Text11012000);
                                                                IF ServSetup."Copy Additional Cost Setup" THEN  //db, 19-06-07
                                                                   TESTFIELD("Service Type (Other)", "Service Type");
                                                              END;

                                                   CaptionML=[ENU=Service Type (Additional Cost);
                                                              SVE=Servicetyp (extra kostnad)] }
    { 11012020;;Department Code    ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              SVE=Avdelningskod];
                                                   CaptionClass='1,1,1' }
    { 11012030;;Progress Scheme    ;Code10        ;TableRelation="Progress Scheme".Code;
                                                   CaptionML=[ENU=Progress Scheme;
                                                              SVE=F”rloppsschema] }
    { 11012040;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF NOT ServSetup.IsServiceOrderNos(Code) THEN
                                                                  FIELDERROR("Additional Cost (Service)", Text11012001);
                                                              END;

                                                   CaptionML=[ENU=Additional Cost (Service);
                                                              SVE=Till„ggskostnader (service)] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoSeriesLine@1000 : Record 309;
      NoSeriesRelationship@1001 : Record 310;
      ServSetup@1100485000 : Record 11012800;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012000@1100525000 : TextConst 'ENU=cannot be set. This No. Series isn''''t used for Service Orders or Service Contracts';
      Text11012001@1100525001 : TextConst 'ENU=cannot be set. This No. Series isn''''t used for Service Orders';

    [External]
    PROCEDURE DrillDown@6();
    VAR
      NoSeriesLine@1000 : Record 309;
    BEGIN
      FindNoSeriesLineToShow(NoSeriesLine);
      IF NoSeriesLine.FIND('-') THEN;
      NoSeriesLine.SETRANGE("Starting Date");
      NoSeriesLine.SETRANGE(Open);
      PAGE.RUNMODAL(0,NoSeriesLine);
    END;

    [External]
    PROCEDURE UpdateLine@3(VAR StartDate@1007 : Date;VAR StartNo@1006 : Code[20];VAR EndNo@1005 : Code[20];VAR LastNoUsed@1004 : Code[20];VAR WarningNo@1003 : Code[20];VAR IncrementByNo@1002 : Integer;VAR LastDateUsed@1001 : Date);
    VAR
      NoSeriesLine@1000 : Record 309;
    BEGIN
      FindNoSeriesLineToShow(NoSeriesLine);
      IF NOT NoSeriesLine.FIND('-') THEN
        NoSeriesLine.INIT;
      StartDate := NoSeriesLine."Starting Date";
      StartNo := NoSeriesLine."Starting No.";
      EndNo := NoSeriesLine."Ending No.";
      LastNoUsed := NoSeriesLine."Last No. Used";
      WarningNo := NoSeriesLine."Warning No.";
      IncrementByNo := NoSeriesLine."Increment-by No.";
      LastDateUsed := NoSeriesLine."Last Date Used"
    END;

    LOCAL PROCEDURE FindNoSeriesLineToShow@1(VAR NoSeriesLine@1001 : Record 309);
    VAR
      NoSeriesMgt@1000 : Codeunit 396;
    BEGIN
      NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,Code,0D);

      IF NoSeriesLine.FINDLAST THEN
        EXIT;

      NoSeriesLine.RESET;
      NoSeriesLine.SETRANGE("Series Code",Code);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100528500 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(308) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 308');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"No. Series", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    BEGIN
    END.
  }
}

