OBJECT Codeunit 6085762 Purch.-Get Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW111.00.00.4.50;
  }
  PROPERTIES
  {
    TableNo=38;
    Permissions=TableData 6085702=rimd;
    OnRun=VAR
            PurchOrderLine@1160040000 : Record 39;
            GetOrders@1160040001 : Page 6085763;
          BEGIN
            PurchHeader := Rec;
            PurchHeader.TESTFIELD("Document Type",PurchHeader."Document Type"::Invoice);
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

            PurchOrderLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.");
            PurchOrderLine.SETRANGE("Document Type",PurchOrderLine."Document Type"::Order);
            PurchOrderLine.SETRANGE("Pay-to Vendor No.",PurchHeader."Pay-to Vendor No.");
            PurchOrderLine.SETFILTER("Outstanding Quantity",'<>0');
            PurchOrderLine.SETRANGE("Currency Code",PurchHeader."Currency Code");

            GetOrders.SETTABLEVIEW(PurchOrderLine);
            GetOrders.LOOKUPMODE := TRUE;
            GetOrders.SetPurchHeader(PurchHeader);
            GetOrders.RUNMODAL;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Der %1 auf dem %2 %3 und auf dem %4 %5 muss derselbe sein.;ENU=The %1 on the %2 %3 and the %4 %5 must be the same.;NLD=De %1 op de %2 %3 en de %4 %5 moeten dezelfde zijn.;NOR=%1 pÜ %2 %3 og %4 %5 mÜ vëre lik.;SVE=%1 pÜ %2 %3 och %4 %5 mÜste vara samma.';
      Text001@1160040000 : TextConst 'DEU=Auftragsnr. %1:;ENU=Order No. %1:;NLD=Ordernr. %1;SVE=Ordernr %1:';
      PurchHeader@1160040002 : Record 38;
      Text003@1160040004 : TextConst 'DEU="Lagerdurchlauf ist notwendig fÅr %1 = %2, %3 = %4, %5 = %6.";ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6.";NLD="Magazijnverwerking is vereist voor %1 = %2, %3 = %4, %5 = %6.";NOR="Det kreves lagerhÜndtering for %1 = %2, %3 = %4, %5 = %6.";SVE="Dist.lager hantering krÑvs fîr %1 = %2, %3 = %4, %5 = %6."';

    PROCEDURE CreateInvLines@1(VAR PurchOrderLine2@1000 : Record 39);
    VAR
      PurchLine@1160040000 : Record 39;
      PurchOrderHeader@1160040001 : Record 38;
      PurchOrderLine@1160040002 : Record 39;
      TransferLine@1001 : Boolean;
      Location@1160040003 : Record 14;
    BEGIN
      WITH PurchOrderLine2 DO BEGIN
        SETFILTER("Outstanding Quantity",'<>0');
        IF FINDSET THEN BEGIN
          PurchLine.LOCKTABLE;
          PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine.SETRANGE("Document No.",PurchHeader."No.");
          PurchLine."Document Type" := PurchHeader."Document Type";
          PurchLine."Document No." := PurchHeader."No.";

          REPEAT
            IF PurchOrderHeader."No." <> "Document No." THEN BEGIN
              PurchOrderHeader.GET("Document Type","Document No.");
              TransferLine := TRUE;
              IF PurchOrderHeader."Currency Code" <> PurchHeader."Currency Code" THEN BEGIN
                MESSAGE(
                  Text000,
                  PurchHeader.FIELDCAPTION("Currency Code"),
                  PurchHeader.TABLECAPTION, PurchHeader."No.",
                  PurchOrderHeader.TABLECAPTION,PurchOrderHeader."No.");
                TransferLine := FALSE;
              END;
              IF PurchOrderHeader."Pay-to Vendor No." <> PurchHeader."Pay-to Vendor No." THEN BEGIN
                MESSAGE(
                  Text000,
                  PurchHeader.FIELDCAPTION("Pay-to Vendor No."),
                  PurchHeader.TABLECAPTION, PurchHeader."No.",
                  PurchOrderHeader.TABLECAPTION,PurchOrderHeader."No.");
                TransferLine := FALSE;
              END;
            END;

            IF TransferLine THEN BEGIN
              IF (PurchOrderLine2.Type = PurchOrderLine2.Type::Item) AND
                Location.RequireReceive(PurchOrderLine2."Location Code")
              THEN BEGIN
                MESSAGE(
                  Text003,
                  PurchOrderLine2.FIELDCAPTION("Document Type"),
                  PurchOrderLine2."Document Type",
                  PurchOrderLine2.FIELDCAPTION("Document No."),
                  PurchOrderLine2."Document No.",
                  PurchOrderLine2.FIELDCAPTION("Line No."),
                  PurchOrderLine2."Line No.");
              END ELSE BEGIN
                PurchOrderLine := PurchOrderLine2;
                InsertInvLineFromOrderLine(PurchOrderLine,PurchLine,0);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetPurchHeader@2(VAR PurchHeader2@1000 : Record 38);
    BEGIN
      PurchHeader.GET(PurchHeader2."Document Type",PurchHeader2."No.");
      PurchHeader.TESTFIELD("Document Type",PurchHeader."Document Type"::Invoice);
    END;

    PROCEDURE InsertInvLineFromOrderLine@1160040000(PurchOrderLine@1160040002 : Record 39;VAR PurchInvLine@1000 : Record 39;MatchedQuantity@1160040001 : Decimal);
    VAR
      PurchInvHeader@1160040005 : Record 38;
      PurchOrderHeader@1007 : Record 38;
      TempPurchLine@1003 : Record 39;
      PurchSetup@1011 : Record 312;
      Currency@1160040003 : Record 4;
      PurchLineRel@1160040004 : Record 6085702;
      TransferOldExtLines@1002 : Codeunit 379;
      ItemTrackingMgt@1004 : Codeunit 6500;
      LanguageManagement@6085573 : Codeunit 43;
      NextLineNo@1001 : Integer;
      ExtTextLine@1006 : Boolean;
      CreateTextLine@1160040000 : Boolean;
    BEGIN
      TempPurchLine := PurchInvLine;

      IF PurchInvLine.FINDLAST THEN
        NextLineNo := PurchInvLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      PurchOrderHeader.GET(PurchOrderLine."Document Type",PurchOrderLine."Document No.");

      PurchOrderLine.SETRANGE("Document Type",PurchOrderLine."Document Type");
      PurchOrderLine.SETRANGE("Document No.",PurchOrderLine."Document No.");

      PurchInvLine.SETRANGE("Attached to Line No.",0);
      IF NOT PurchInvLine.FINDLAST THEN
        CreateTextLine := TRUE
      ELSE
        IF PurchLineRel.GET(PurchInvLine."Document Type",PurchInvLine."Document No.",PurchInvLine."Line No.") THEN
          CreateTextLine := PurchLineRel."Related Document No." <> PurchOrderLine."Document No."
        ELSE
          CreateTextLine := TRUE;
      PurchInvLine.SETRANGE("Attached to Line No.");

      IF CreateTextLine THEN BEGIN
        PurchInvLine.INIT;
        PurchInvLine."Line No." := NextLineNo;
        PurchInvLine."Document Type" := PurchInvLine."Document Type";
        PurchInvLine."Document No." := PurchInvLine."Document No.";
        LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
        PurchInvLine.Description := STRSUBSTNO(Text001,PurchOrderLine."Document No.");
        LanguageManagement.RestoreGlobalLanguage;
        PurchInvLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber(PurchOrderLine."Attached to Line No.") <> 0);

        IF NOT ExtTextLine THEN BEGIN
          IF PurchOrderHeader."Currency Code" <> '' THEN
            Currency.GET(PurchOrderHeader."Currency Code")
          ELSE
            Currency.InitRoundingPrecision;

          PurchInvHeader.GET(PurchOrderLine."Document Type",PurchOrderLine."Document No.");
          IF PurchInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" / (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END;

        PurchInvLine := PurchOrderLine;
        PurchInvLine."Line No." := NextLineNo;
        PurchInvLine."Document Type" := TempPurchLine."Document Type";
        PurchInvLine."Document No." := TempPurchLine."Document No.";
        PurchInvLine."Variant Code" := PurchOrderLine."Variant Code";
        PurchInvLine."Location Code" := PurchOrderLine."Location Code";
        PurchInvLine."Quantity (Base)" := 0;
        PurchInvLine.Quantity := 0;
        PurchInvLine."Outstanding Qty. (Base)" := 0;
        PurchInvLine."Outstanding Quantity" := 0;
        PurchInvLine."Quantity Received" := 0;
        PurchInvLine."Qty. Received (Base)" := 0;
        PurchInvLine."Quantity Invoiced" := 0;
        PurchInvLine."Qty. Invoiced (Base)" := 0;
        PurchInvLine.Amount := 0;
        PurchInvLine."Amount Including VAT" := 0;
        PurchInvLine."Sales Order No." := '';
        PurchInvLine."Sales Order Line No." := 0;
        PurchInvLine."Drop Shipment" := FALSE;
        PurchInvLine."Special Order Sales No." := '';
        PurchInvLine."Special Order Sales Line No." := 0;
        PurchInvLine."Special Order" := FALSE;
        PurchInvLine."Receipt Line No." := 0;
        PurchInvLine."Appl.-to Item Entry" := 0;
        PurchInvLine."Prepmt. Amt. Inv." := 0;
        IF NOT ExtTextLine THEN BEGIN
          PurchLineRel."Document Type" := PurchInvLine."Document Type";
          PurchLineRel."Document No." := PurchInvLine."Document No.";
          PurchLineRel."Document Line No." := PurchInvLine."Line No.";
          PurchLineRel."Related Document Type" := PurchOrderLine."Document Type";
          PurchLineRel."Related Document No." := PurchOrderLine."Document No.";
          PurchLineRel."Related Line No." := PurchOrderLine."Line No.";
          PurchLineRel.INSERT;

          IF MatchedQuantity <> 0 THEN
            PurchInvLine.VALIDATE(Quantity,MatchedQuantity)
          ELSE
            PurchInvLine.VALIDATE(Quantity,PurchOrderLine."Outstanding Quantity");
          PurchInvLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost");
          PurchInvLine.VALIDATE(
            "Line Discount Amount",
            ROUND(
              PurchOrderLine."Line Discount Amount" * PurchInvLine.Quantity / PurchOrderLine.Quantity,
              Currency."Amount Rounding Precision"));
          PurchInvLine."Line Discount %" := PurchOrderLine."Line Discount %";
          PurchSetup.GET;
          IF NOT PurchSetup."Calc. Inv. Discount" THEN
            IF PurchOrderLine.Quantity = 0 THEN
              PurchInvLine.VALIDATE("Inv. Discount Amount",0)
            ELSE
              PurchInvLine.VALIDATE(
                "Inv. Discount Amount",
                ROUND(
                  PurchOrderLine."Inv. Discount Amount" * PurchInvLine.Quantity / PurchOrderLine.Quantity,
                  Currency."Amount Rounding Precision"));
        END;

        PurchInvLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            PurchOrderLine."Line No.",
            NextLineNo,
            PurchOrderLine."Attached to Line No.");
        PurchInvLine."Shortcut Dimension 1 Code" := PurchOrderLine."Shortcut Dimension 1 Code";
        PurchInvLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
        PurchInvLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";

        IF PurchOrderLine."Sales Order No." = '' THEN
          PurchInvLine."Drop Shipment" := FALSE
        ELSE
          PurchInvLine."Drop Shipment" := TRUE;

        PurchInvLine.INSERT;

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchInvLine);

        NextLineNo := NextLineNo + 10000;
        IF PurchOrderLine."Attached to Line No." = 0 THEN
          PurchOrderLine.SETRANGE("Attached to Line No.",PurchOrderLine."Line No.");
      UNTIL (PurchOrderLine.NEXT = 0) OR (PurchOrderLine."Attached to Line No." = 0);
    END;

    BEGIN
    END.
  }
}

