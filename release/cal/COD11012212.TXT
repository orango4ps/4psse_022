OBJECT Codeunit 11012212 XML Decode (Donau)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm,
                TableData 122=rm,
                TableData 124=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMMgt@1100485000 : Codeunit 11020220;
      FormatCU@1100485004 : Codeunit 11020221;
      TempDocumentNo@1100525000 : Code[20];

    PROCEDURE InvoiceHeader@1100525000(XMLNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100525000 : Record 11012136) : Boolean;
    VAR
      lvXMLNodeReturn@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'Company',lvXMLNodeReturn) THEN
          Company := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'No',lvXMLNodeReturn) THEN
          "No." := lvXMLNodeReturn.InnerText;  //MOET GEGENEREERD WORDEN
        IF XMLDOMMgt.FindNode(XMLNode,'DonauID',lvXMLNodeReturn) THEN
          "Donau ID" := lvXMLNodeReturn.InnerText;

        //sn dbeekman, 11-09-09: New Fields added to header
        IF XMLDOMMgt.FindNode(XMLNode,'InvoiceLines',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,VarDebriefRec."Invoice Lines");
        IF XMLDOMMgt.FindNode(XMLNode,'YourReference',lvXMLNodeReturn) THEN
          VarDebriefRec."Your Reference" := lvXMLNodeReturn.InnerText;
        //en dbeekman

        //sn dbeekman, 16-11-09: Donau Phase 2
        IF XMLDOMMgt.FindNode(XMLNode,'SubcontractingInvoice',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,VarDebriefRec."Subcontracting Invoice");
        //en dbeekman

        IF XMLDOMMgt.FindNode(XMLNode,'BuyFromVendorNo',lvXMLNodeReturn) THEN
          "Buy-from Vendor No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'VendorInvoiceNo',lvXMLNodeReturn) THEN
          "Vendor Invoice No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'PostingDate',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,"Posting Date");
        IF XMLDOMMgt.FindNode(XMLNode,'DocumentDate',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,"Document Date");
        IF XMLDOMMgt.FindNode(XMLNode,'PostingDescription',lvXMLNodeReturn) THEN
          "Posting Description" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'DueDate',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,"Due Date");
        IF XMLDOMMgt.FindNode(XMLNode,'PaymentTermsCode',lvXMLNodeReturn) THEN
          "Payment Terms Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Amount',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Amount);
        IF XMLDOMMgt.FindNode(XMLNode,'VATAmount',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Amount VAT");
        //sn dbeekman, 17-11-09: Donau Phase 2, Credit Memo's should be handled as well
        IF XMLDOMMgt.FindNode(XMLNode,'AmountIncludingVAT',lvXMLNodeReturn) THEN BEGIN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Amount Including VAT");
          IF VarDebriefRec."Amount Including VAT" < 0 THEN
            VarDebriefRec."Document Type" := VarDebriefRec."Document Type"::"Credit Memo"
          ELSE
            VarDebriefRec."Document Type" := VarDebriefRec."Document Type"::Invoice;
        END;
        //en dbeekman
        IF XMLDOMMgt.FindNode(XMLNode,'VATProdPostingGroup',lvXMLNodeReturn) THEN
          "VAT Prod. Posting Group" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'B-AccountNo',lvXMLNodeReturn) THEN
          "Bank Account Code B Payments" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'B-Amount',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Wage Charge (to B Account)");
        IF XMLDOMMgt.FindNode(XMLNode,'ApprovalInitials',lvXMLNodeReturn) THEN
          "Approvement Initials" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'JobNo',lvXMLNodeReturn) THEN
          "Job No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'RelatedPurchaseOrderNo',lvXMLNodeReturn) THEN
          "Related Purch. Order No." := lvXMLNodeReturn.InnerText;

      END;

      EXIT(TRUE);
    END;

    PROCEDURE InvoiceLine@1100525006(XMLNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100525000 : Record 11012137) : Boolean;
    VAR
      lvXMLNodeReturn@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvDonauInvoiceLine@1100525003 : Record 11012137;
      LineNo@1100525004 : Integer;
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;
        IF XMLDOMMgt.FindNode(XMLNode,'Company',lvXMLNodeReturn) THEN
          Company := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'No',lvXMLNodeReturn) THEN BEGIN
          "Document No." := lvXMLNodeReturn.InnerText;
          lvDonauInvoiceLine.SETRANGE("Document No.","Document No.");
          IF lvDonauInvoiceLine.FINDLAST THEN
            LineNo := lvDonauInvoiceLine."Line No." + 1000
          ELSE
            LineNo := 1000;
          "Line No." := LineNo;
        END;

        IF XMLDOMMgt.FindNode(XMLNode,'GLAccount',lvXMLNodeReturn) THEN
          "No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CostCenter',lvXMLNodeReturn) THEN
          "Shortcut Dimension 1 Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CostObject',lvXMLNodeReturn) THEN
          "Shortcut Dimension 2 Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'JobNo',lvXMLNodeReturn) THEN
          "Job No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'LineAmount',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Line Amount");
        IF XMLDOMMgt.FindNode(XMLNode,'VATProdPostingGroup',lvXMLNodeReturn) THEN
          "VAT Prod. Posting Group" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Description',lvXMLNodeReturn) THEN
          Description := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Quantity',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Quantity);
        IF XMLDOMMgt.FindNode(XMLNode,'ServiceOrderNo',lvXMLNodeReturn) THEN
          "Service Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ServiceContractNo',lvXMLNodeReturn) THEN
          "Service Contract No." := lvXMLNodeReturn.InnerText;
        //sn dbeekman, 16-11-09: Donau Phase 2
        IF XMLDOMMgt.FindNode(XMLNode,'UnitofmeasureCode',lvXMLNodeReturn) THEN
          VarDebriefRec."Unit Of Measure Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ReceivingCompany',lvXMLNodeReturn) THEN
          VarDebriefRec."Receiving Company" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'VehicleCode',lvXMLNodeReturn) THEN
          VarDebriefRec."Vehicle Code" := lvXMLNodeReturn.InnerText;
        //en dbeekman
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ApprovedInvoice@1100525001(XMLNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VendorLedgerEntry@1100525001 : Record 25) : Boolean;
    VAR
      lvXMLNodeReturn@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PurchaseHeader@1100525003 : Record 38;
      PurchInvHeader@1100525004 : Record 122;
      PurchCrMemoHdr@1100525006 : Record 124;
      DebriefPurchInvHDonau@1100525007 : Record 11012136;
    BEGIN
      //currently Donau cannot handle the value of the 'Approved' element, only existence of tag is checked.
      //the OnHold field id changed, not the Approved field.

      IF NOT XMLDOMMgt.FindNode(XMLNode,'InvoiceNo',lvXMLNodeReturn) THEN
        EXIT(FALSE);
          TempDocumentNo := lvXMLNodeReturn.InnerText;

      IF NOT XMLDOMMgt.FindNode(XMLNode,'RemoveOnHold',lvXMLNodeReturn) THEN
        EXIT(FALSE);

      IF NOT DebriefPurchInvHDonau.FindDebriefHeader(TempDocumentNo, '') THEN
        EXIT(FALSE);

      IF NOT DebriefPurchInvHDonau.IsDebriefHeaderRegistered THEN BEGIN
        IF PurchaseHeader.GET(DebriefPurchInvHDonau."Document Type",DebriefPurchInvHDonau."No.") THEN BEGIN
          PurchaseHeader."On Hold" := '';
          PurchaseHeader.MODIFY;
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE);
      END ELSE BEGIN
        //posted documents
        IF DebriefPurchInvHDonau."Document Type" = DebriefPurchInvHDonau."Document Type"::"Credit Memo" THEN BEGIN
          IF PurchCrMemoHdr.GET(TempDocumentNo) THEN BEGIN
            PurchCrMemoHdr."On Hold" := '';
            PurchCrMemoHdr."Remain On Hold" := FALSE;
            PurchCrMemoHdr.MODIFY;
          END;
          VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::"Credit Memo");
        END ELSE BEGIN
            IF PurchInvHeader.GET(TempDocumentNo) THEN BEGIN
              PurchInvHeader."On Hold" := '';
              PurchInvHeader."Remain On Hold" := FALSE;
              PurchInvHeader.MODIFY;
            END;
          VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
          END;
        //vendor ledger entry
        VendorLedgerEntry.SETRANGE("Document No.",TempDocumentNo);
        //VendorLedgerEntry.SETCURRENTKEY("Document No.","Document Type"); //**4PS.o, dbeekman:
        VendorLedgerEntry.SETCURRENTKEY("Document No."); //**4PS.n, dbeekman:
        IF VendorLedgerEntry.FINDFIRST THEN BEGIN
          VendorLedgerEntry."On Hold" := '';
          VendorLedgerEntry.MODIFY;
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE StatusInvoice@1100525002(XMLNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100525000 : Record 38;VAR StatusOpt@1100525003 : Text[30]) : Boolean;
    VAR
      lvXMLNodeReturn@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        IF XMLDOMMgt.FindNode(XMLNode,'Company',lvXMLNodeReturn) THEN
          VarDebriefRec.CHANGECOMPANY(lvXMLNodeReturn.InnerText);
        IF XMLDOMMgt.FindNode(XMLNode,'InvoiceNo',lvXMLNodeReturn) THEN BEGIN
          SETRANGE("No.",lvXMLNodeReturn.InnerText);
          IF FINDFIRST THEN BEGIN
            StatusOpt := FormatCU.FormatOptionNo(VarDebriefRec.Status);
            EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

