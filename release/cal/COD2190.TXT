OBJECT Codeunit 2190 O365 Sales Web Service
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Permissions=TableData 2190=rimd;
    OnRun=BEGIN
            SendKPI;
          END;

  }
  CODE
  {
    VAR
      ActivityRolesTxt@1005 : TextConst '@@@={Locked};ENU=BusinessSignals-Internal.Read,BusinessSignals-Internal.ReadWrite;NOR=BusinessSignals-Internal.Read,BusinessSignals-Internal.ReadWrite';
      S2SConnectionStrTemplateTxt@1004 : TextConst '@@@={Locked};ENU="{ENTITYLISTENDPOINT}=https://%1;{EXORESOURCEURI}=https://outlook.office365.com;{EXORESOURCEROLE}=%2";NOR="{ENTITYLISTENDPOINT}=https://%1;{EXORESOURCEURI}=https://outlook.office365.com;{EXORESOURCEROLE}=%2"';
      UserConnectionStrTemplateTxt@1035 : TextConst '@@@={Locked};ENU="{ENTITYLISTENDPOINT}=https://%1";NOR="{ENTITYLISTENDPOINT}=https://%1"';
      ActivityKindTxt@1026 : TextConst '@@@={Locked};ENU=Activity;NOR=Activity';
      KpiKindTxt@1027 : TextConst '@@@={Locked};ENU=Kpi;NOR=Kpi';
      InvoiceDescTxt@1025 : TextConst '@@@="%1 = The Invoice number";ENU=Invoice %1;NOR=Faktura %1';
      EstimateDescTxt@1031 : TextConst '@@@="%1 = the estimate number";ENU=Estimate %1;NOR=Estimat %1;SVE=Uppskattning %1';
      MissingEndpointErr@1000 : TextConst 'ENU=No Graph endpoint has been specified.;NOR=Ingen Graph-endepunkter er angitt.';
      UpdateKpiTypeTxt@1006 : TextConst '@@@={Locked};ENU=InvoiceOverviewKPI;NOR=InvoiceOverviewKPI';
      InvoiceCreatedTypeTxt@1015 : TextConst '@@@={Locked};ENU=InvoiceSent;NOR=InvoiceSent';
      InvoicePaidTypeTxt@1016 : TextConst '@@@={Locked};ENU=InvoicePaid;NOR=InvoicePaid';
      InvoiceDraftTypeTxt@1017 : TextConst '@@@={Locked};ENU=NewInvoice;NOR=NewInvoice';
      InvoiceOverdueTypeTxt@1018 : TextConst '@@@={Locked};ENU=InvoiceOverdue;NOR=InvoiceOverdue';
      InvoiceInactivityTypeTxt@1019 : TextConst '@@@={Locked};ENU=InvoiceInactivity;NOR=InvoiceInactivity';
      InvoiceEmailFailedTypeTxt@1036 : TextConst '@@@={Locked};ENU=InvoiceEmailFailed;NOR=InvoiceEmailFailed';
      EstimateSentTypeTxt@1007 : TextConst '@@@={Locked};ENU=EstimateSent;NOR=EstimateSent';
      EstimateAcceptedTypeTxt@1008 : TextConst '@@@={Locked};ENU=EstimateAccepted;NOR=EstimateAccepted';
      EstimateExpiryTypeTxt@1009 : TextConst '@@@={Locked};ENU=EstimateExpiry;NOR=EstimateExpiry';
      EstimateEmailFailedTypeTxt@1037 : TextConst '@@@={Locked};ENU=EstimateEmailFailed;NOR=EstimateEmailFailed';
      C2GraphStatusTxt@1002 : TextConst 'ENU=Update C2Graph;NOR=Oppdater C2Graph';
      InvoicePaidTxt@1010 : TextConst 'ENU=Invoice Paid;NOR=Faktura betalt';
      InvoiceCreatedTxt@1011 : TextConst 'ENU=Invoice Created;NOR=Faktura opprettet;SVE=Fakturan har skapats';
      InvoiceDraftTxt@1012 : TextConst 'ENU=Invoice Draft;NOR=Fakturakladd';
      InvoiceOverdueTxt@1013 : TextConst 'ENU=Invoice Overdue;NOR=Faktura forfalt';
      InvoiceInactivityTxt@1014 : TextConst 'ENU=Invoice Inactivity;NOR=Fakturainaktivitet';
      InvoiceEmailFailedTxt@1038 : TextConst '@@@={Locked};ENU=Invoice Email Failed;NOR=Invoice Email Failed';
      EstimateSentTxt@1028 : TextConst 'ENU=Estimate Sent;NOR=Estimat sendt';
      EstimateAcceptedTxt@1029 : TextConst 'ENU=Estimate Accepted;NOR=Estimatet godtatt';
      EstimateExpiryTxt@1030 : TextConst 'ENU=Estimate Expiry;NOR=Estimat utl›p';
      EstimateEmailFailedTxt@1039 : TextConst '@@@={Locked};ENU=Estimate Email Failed;NOR=Estimate Email Failed';
      C2GraphUpdateActionTxt@1003 : TextConst 'ENU=Update KPIs;NOR=Oppdater KPIer';

    [Internal]
    PROCEDURE SendInvoiceInactivityEvent@15();
    VAR
      ActivityLog@1000 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1004 : Record 2163;
      OutStr@1002 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoicing Inactivity") THEN
        EXIT;

      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraph(O365SalesGraph,InvoiceInactivityTypeTxt);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetInactivityDetails(OutStr);

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceInactivityTxt,'','');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendInvoiceOverdueEvent@14(InvoiceNo@1000 : Code[20]);
    VAR
      SalesInvoiceHeader@1004 : Record 112;
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1007 : Record 2163;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoice Overdue") THEN
        EXIT;

      IF NOT SalesInvoiceHeader.GET(InvoiceNo) THEN
        EXIT;

      IF ISNULLGUID(SalesInvoiceHeader.Id) THEN
        EXIT;

      IF SalesInvoiceHeader."Due Date" > TODAY THEN
        EXIT;

      ContactGraphId := GetGraphIdForContactFromInvoice(SalesInvoiceHeader);

      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForDocuments(O365SalesGraph,InvoiceOverdueTypeTxt,FORMAT(SalesInvoiceHeader.Id),ContactGraphId);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetOverdueDetails(InvoiceNo,OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceOverdueTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendInvoiceDraftEvent@13();
    VAR
      ActivityLog@1000 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1004 : Record 2163;
      OutStr@1002 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Draft Reminder") THEN
        EXIT;

      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraph(O365SalesGraph,InvoiceDraftTypeTxt);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetDraftDetails(OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceDraftTxt,'','');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendInvoiceCreatedEvent@9(InvoiceNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1007 : Record 2163;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesInvoiceHeaderId@1004 : Text[60];
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoice Sent") THEN
        EXIT;

      IF NOT GetIdsIfValidInvoice(InvoiceNo,ContactGraphId,ConnectionId,SalesInvoiceHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForDocuments(O365SalesGraph,InvoiceCreatedTypeTxt,SalesInvoiceHeaderId,ContactGraphId);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetInvoiceDetails(InvoiceNo,OutStr,'Created');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceCreatedTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendInvoicePaidEvent@11(InvoiceNo@1000 : Code[20]);
    VAR
      ActivityLog@1001 : Record 710;
      O365SalesGraph@1002 : Record 2190;
      O365SalesEvent@1007 : Record 2163;
      OutStr@1003 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesInvoiceHeaderId@1004 : Text[60];
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoice Paid") THEN
        EXIT;

      IF NOT GetIdsIfValidInvoice(InvoiceNo,ContactGraphId,ConnectionId,SalesInvoiceHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForDocuments(O365SalesGraph,InvoicePaidTypeTxt,SalesInvoiceHeaderId,ContactGraphId);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetPaidInvoiceDetails(InvoiceNo,OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoicePaidTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendInvoiceEmailFailedEvent@30(InvoiceNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1007 : Record 2163;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesInvoiceHeaderId@1004 : Text[60];
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoice Email Failed") THEN
        EXIT;

      IF NOT GetIdsIfValidInvoice(InvoiceNo,ContactGraphId,ConnectionId,SalesInvoiceHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForDocuments(O365SalesGraph,InvoiceEmailFailedTypeTxt,SalesInvoiceHeaderId,ContactGraphId);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetInvoiceDetails(InvoiceNo,OutStr,'EmailFailed');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,InvoiceEmailFailedTxt,InvoiceNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendEstimateSentEvent@7(EstimateNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1007 : Record 2163;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesHeaderId@1004 : Text[60];
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Estimate Sent") THEN
        EXIT;

      IF NOT GetIdsIfValidEstimate(EstimateNo,ContactGraphId,ConnectionId,SalesHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForDocuments(O365SalesGraph,EstimateSentTypeTxt,SalesHeaderId,ContactGraphId);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetEstimateDetails(EstimateNo,OutStr,'Sent');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateSentTxt,EstimateNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendEstimateAcceptedEvent@10(EstimateNo@1000 : Code[20]);
    VAR
      ActivityLog@1001 : Record 710;
      O365SalesGraph@1002 : Record 2190;
      O365SalesEvent@1007 : Record 2163;
      OutStr@1003 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesHeaderId@1004 : Text[60];
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Estimate Accepted") THEN
        EXIT;

      IF NOT GetIdsIfValidEstimate(EstimateNo,ContactGraphId,ConnectionId,SalesHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForDocuments(O365SalesGraph,EstimateAcceptedTypeTxt,SalesHeaderId,ContactGraphId);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetAcceptedEstimateDetails(EstimateNo,OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateAcceptedTxt,EstimateNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendEstimateExpiryEvent@12();
    VAR
      ActivityLog@1000 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1004 : Record 2163;
      OutStr@1002 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Estimate Expiring") THEN
        EXIT;

      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraph(O365SalesGraph,EstimateExpiryTypeTxt);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      IF NOT GetExpiringEstimateDetails(OutStr) THEN
        EXIT;

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateExpiryTxt,'','');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendEstimateEmailFailedEvent@27(EstimateNo@1000 : Code[20]);
    VAR
      ActivityLog@1003 : Record 710;
      O365SalesGraph@1001 : Record 2190;
      O365SalesEvent@1007 : Record 2163;
      OutStr@1002 : OutStream;
      ContactGraphId@1005 : Text[250];
      ConnectionId@1006 : Text;
      SalesHeaderId@1004 : Text[60];
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Estimate Email Failed") THEN
        EXIT;

      IF NOT GetIdsIfValidEstimate(EstimateNo,ContactGraphId,ConnectionId,SalesHeaderId) THEN
        EXIT;

      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForDocuments(O365SalesGraph,EstimateEmailFailedTypeTxt,SalesHeaderId,ContactGraphId);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetEstimateDetails(EstimateNo,OutStr,'EmailFailed');

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,EstimateEmailFailedTxt,EstimateNo,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    [Internal]
    PROCEDURE SendKPI@5();
    VAR
      O365SalesGraph@1000 : Record 2190;
      ActivityLog@1002 : Record 710;
      O365SalesEvent@1004 : Record 2163;
      OutStr@1001 : OutStream;
      ConnectionId@1003 : Text;
    BEGIN
      IF NOT O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"KPI Update") THEN
        EXIT;

      ConnectionId := FORMAT(CREATEGUID);
      IF NOT HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId) THEN
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,
          GetConnectionString);

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId,TRUE);

      InitializeO365SalesGraphForKPIs(O365SalesGraph,UpdateKpiTypeTxt);
      O365SalesGraph.Details.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      GetKpiDetails(OutStr);

      ActivityLog.LogActivity(O365SalesGraph,ActivityLog.Status::Success,C2GraphStatusTxt,C2GraphUpdateActionTxt,'');
      IF O365SalesGraph.INSERT(TRUE) THEN;

      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionId);
    END;

    LOCAL PROCEDURE GetKpiDetails@8(VAR Details@1000 : OutStream);
    VAR
      GLSetup@1002 : Record 98;
      JSONManagement@1001 : Codeunit 5459;
      ResultJsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      SummaryJsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF GLSetup.GET THEN;

      ResultJsonObject := ResultJsonObject.JObject;
      SummaryJsonObject := SummaryJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(
        SummaryJsonObject,'@odata.type','#Microsoft.Griffin.SmallBusiness.SbGraph.Core.InvoiceOverviewKpiV1');
      JSONManagement.AddJPropertyToJObject(SummaryJsonObject,'monthlySalesTotalAmount',InvoicedThisMonth);
      JSONManagement.AddJPropertyToJObject(SummaryJsonObject,'yearlySalesTotalAmount',InvoicedYearToDate);
      JSONManagement.AddJPropertyToJObject(SummaryJsonObject,'outstandingSalesTotalAmount',OutstandingAmount);
      JSONManagement.AddJPropertyToJObject(SummaryJsonObject,'overdueSalesTotalAmount',OverdueAmount);
      JSONManagement.AddJPropertyToJObject(SummaryJsonObject,'currencyCode',GLSetup."Local Currency Symbol");

      JSONManagement.AddJObjectToJObject(ResultJsonObject,'summary',SummaryJsonObject);

      Details.WRITE(ResultJsonObject.ToString);
    END;

    LOCAL PROCEDURE GetInactivityDetails@21(VAR Details@1000 : OutStream);
    VAR
      O365C2GraphEventSettings@1002 : Record 2162;
      JSONManagement@1001 : Codeunit 5459;
      ResultJsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF NOT O365C2GraphEventSettings.GET THEN
        O365C2GraphEventSettings.INSERT(TRUE);

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'duration',O365C2GraphEventSettings."Inv. Inactivity Duration (Day)");
      Details.WRITE(ResultJsonObject.ToString);
    END;

    LOCAL PROCEDURE GetOverdueDetails@22(DocNo@1000 : Code[20];VAR Details@1001 : OutStream) : Boolean;
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      Customer@1004 : Record 18;
      Contact@1006 : Record 5050;
      Currency@1005 : Record 4;
      User@1007 : Record 2000000120;
      JSONManagement@1002 : Codeunit 5459;
      ResultJsonObject@1010 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ContactFirstName@1008 : Text;
    BEGIN
      SalesInvoiceHeader.GET(DocNo);
      SalesInvoiceHeader.CALCFIELDS("Remaining Amount","Amount Including VAT");

      IF SalesInvoiceHeader."Remaining Amount" <= 0 THEN
        EXIT(FALSE);

      IF Customer.GET(SalesInvoiceHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerFirstName',ContactFirstName);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerLastName',Contact.Surname);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerEmailAddress',Customer."E-Mail");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'companyName',Customer.Name);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'amount',SalesInvoiceHeader."Amount Including VAT");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'currencyCode',Currency.ResolveGLCurrencySymbol(SalesInvoiceHeader."Currency Code"));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'description',STRSUBSTNO(InvoiceDescTxt,SalesInvoiceHeader."No."));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'externalInvoiceId',SalesInvoiceHeader."No.");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'sentDateTime',FORMAT(CREATEDATETIME(SalesInvoiceHeader."Posting Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'dueDateTime',FORMAT(CREATEDATETIME(SalesInvoiceHeader."Due Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'employeeName',User."Full Name");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'state','Overdue');

      Details.WRITE(ResultJsonObject.ToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetDraftDetails@23(VAR Details@1000 : OutStream) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
      JSONManagement@1001 : Codeunit 5459;
      ResultJsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      IF SalesHeader.ISEMPTY THEN
        EXIT(FALSE);

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'totalDrafts',SalesHeader.COUNT);

      Details.WRITE(ResultJsonObject.ToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetInvoiceDetails@24(DocNo@1000 : Code[20];VAR Details@1001 : OutStream;InvoiceState@1009 : Text);
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      Customer@1004 : Record 18;
      Contact@1006 : Record 5050;
      User@1007 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ResultJsonObject@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ContactFirstName@1008 : Text;
    BEGIN
      SalesInvoiceHeader.GET(DocNo);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");

      IF Customer.GET(SalesInvoiceHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerFirstName',ContactFirstName);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerLastName',Contact.Surname);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerEmailAddress',Customer."E-Mail");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'companyName',Customer.Name);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'amount',SalesInvoiceHeader."Amount Including VAT");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'currencyCode',Currency.ResolveGLCurrencySymbol(SalesInvoiceHeader."Currency Code"));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'description',STRSUBSTNO(InvoiceDescTxt,SalesInvoiceHeader."No."));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'externalInvoiceId',SalesInvoiceHeader."No.");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'sentDateTime',FORMAT(CREATEDATETIME(SalesInvoiceHeader."Posting Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'dueDateTime',FORMAT(CREATEDATETIME(SalesInvoiceHeader."Due Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'employeeName',User."Full Name");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'state',InvoiceState);

      Details.WRITE(ResultJsonObject.ToString);
    END;

    LOCAL PROCEDURE GetPaidInvoiceDetails@25(DocNo@1000 : Code[20];Details@1001 : OutStream) : Boolean;
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      Customer@1004 : Record 18;
      Contact@1007 : Record 5050;
      User@1006 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ResultJsonObject@1010 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ContactFirstName@1008 : Text;
    BEGIN
      SalesInvoiceHeader.GET(DocNo);
      SalesInvoiceHeader.CALCFIELDS("Remaining Amount","Amount Including VAT");

      IF SalesInvoiceHeader."Remaining Amount" > 0 THEN
        EXIT(FALSE);

      IF Customer.GET(SalesInvoiceHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerFirstName',ContactFirstName);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerLastName',Contact.Surname);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerEmailAddress',Customer."E-Mail");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'companyName',Customer.Name);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'amount',SalesInvoiceHeader."Amount Including VAT");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'currencyCode',Currency.ResolveGLCurrencySymbol(SalesInvoiceHeader."Currency Code"));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'description',STRSUBSTNO(InvoiceDescTxt,SalesInvoiceHeader."No."));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'externalInvoiceId',SalesInvoiceHeader."No.");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'sentDateTime',FORMAT(CREATEDATETIME(SalesInvoiceHeader."Posting Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'dueDateTime',FORMAT(CREATEDATETIME(SalesInvoiceHeader."Due Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'employeeName',User."Full Name");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'state','Paid');

      Details.WRITE(ResultJsonObject.ToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetEstimateDetails@16(DocNo@1000 : Code[20];VAR Details@1001 : OutStream;EstimateState@1009 : Text);
    VAR
      SalesHeader@1003 : Record 36;
      Customer@1004 : Record 18;
      Contact@1006 : Record 5050;
      User@1007 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ResultJsonObject@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ContactFirstName@1008 : Text;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Quote,DocNo);
      SalesHeader.CALCFIELDS("Amount Including VAT");

      IF User.GET(USERSECURITYID) THEN;

      IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerFirstName',ContactFirstName);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerLastName',Contact.Surname);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerEmailAddress',Customer."E-Mail");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'companyName',Customer.Name);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'amount',SalesHeader."Amount Including VAT");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'currencyCode',Currency.ResolveGLCurrencySymbol(SalesHeader."Currency Code"));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'description',STRSUBSTNO(EstimateDescTxt,SalesHeader."No."));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'externalInvoiceId',SalesHeader."No.");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'sentDateTime',FORMAT(SalesHeader."Quote Sent to Customer",0,9));
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'dueDateTime',FORMAT(CREATEDATETIME(SalesHeader."Quote Valid Until Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'employeeName',User."Full Name");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'state',EstimateState);

      Details.WRITE(ResultJsonObject.ToString);
    END;

    LOCAL PROCEDURE GetAcceptedEstimateDetails@18(DocNo@1000 : Code[20];Details@1001 : OutStream) : Boolean;
    VAR
      SalesHeader@1003 : Record 36;
      Customer@1004 : Record 18;
      Contact@1007 : Record 5050;
      User@1006 : Record 2000000120;
      Currency@1005 : Record 4;
      JSONManagement@1002 : Codeunit 5459;
      ResultJsonObject@1010 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ContactFirstName@1008 : Text;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Quote,DocNo);
      SalesHeader.CALCFIELDS("Amount Including VAT");

      IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
        IF Contact.GET(Customer."Primary Contact No.") THEN;

      IF User.GET(USERSECURITYID) THEN;

      IF (Contact."First Name" = '') AND (Contact.Surname = '') THEN
        ContactFirstName := Customer.Name
      ELSE
        ContactFirstName := Contact."First Name";

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerFirstName',ContactFirstName);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerLastName',Contact.Surname);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'customerEmailAddress',Customer."E-Mail");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'companyName',Customer.Name);
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'amount',SalesHeader."Amount Including VAT");
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'currencyCode',Currency.ResolveGLCurrencySymbol(SalesHeader."Currency Code"));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'description',STRSUBSTNO(EstimateDescTxt,SalesHeader."No."));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'externalInvoiceId',SalesHeader."No.");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'sentDateTime',FORMAT(SalesHeader."Quote Sent to Customer",0,9));
      JSONManagement.AddJPropertyToJObject(
        ResultJsonObject,'dueDateTime',FORMAT(CREATEDATETIME(SalesHeader."Quote Valid Until Date",0T),0,9));
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'employeeName',User."Full Name");
      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'state','Accepted');

      Details.WRITE(ResultJsonObject.ToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetExpiringEstimateDetails@19(VAR Details@1000 : OutStream) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
      JSONManagement@1001 : Codeunit 5459;
      ResultJsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      SalesHeader.SETRANGE("Quote Valid Until Date",TODAY,CALCDATE('<1W>',TODAY));
      SalesHeader.SETRANGE("Quote Accepted",FALSE);
      IF SalesHeader.ISEMPTY THEN
        EXIT(FALSE);

      ResultJsonObject := ResultJsonObject.JObject;

      JSONManagement.AddJPropertyToJObject(ResultJsonObject,'totalExpiringEstimates',SalesHeader.COUNT);

      Details.WRITE(ResultJsonObject.ToString);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE OutstandingAmount@1() : Decimal;
    VAR
      O365SalesCue@1000 : Record 9069;
      DummyText@1001 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Sales Invoices Outstanding");
      EXIT(O365SalesCue."Sales Invoices Outstanding");
    END;

    LOCAL PROCEDURE OverdueAmount@2() : Decimal;
    VAR
      O365SalesCue@1001 : Record 9069;
      DummyText@1000 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Sales Invoices Overdue");
      EXIT(O365SalesCue."Sales Invoices Overdue");
    END;

    LOCAL PROCEDURE InvoicedYearToDate@3() : Decimal;
    VAR
      O365SalesCue@1001 : Record 9069;
      DummyText@1000 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Invoiced YTD");
      EXIT(O365SalesCue."Invoiced YTD");
    END;

    LOCAL PROCEDURE InvoicedThisMonth@4() : Decimal;
    VAR
      O365SalesCue@1001 : Record 9069;
      DummyText@1000 : Text;
    BEGIN
      O365SalesCue.OnOpenActivitiesPage(DummyText);
      O365SalesCue.CALCFIELDS("Invoiced CM");
      EXIT(O365SalesCue."Invoiced CM");
    END;

    LOCAL PROCEDURE GetConnectionString@28() : Text;
    VAR
      GraphConnectionSetup@1000 : Codeunit 5456;
    BEGIN
      IF GraphConnectionSetup.IsS2SAuthenticationEnabled THEN
        EXIT(STRSUBSTNO(S2SConnectionStrTemplateTxt,GetGraphUrl,ActivityRolesTxt));

      EXIT(STRSUBSTNO(UserConnectionStrTemplateTxt,GetGraphUrl));
    END;

    LOCAL PROCEDURE GetGraphUrl@6() : Text;
    VAR
      O365SalesInitialSetup@1005 : Record 2110;
    BEGIN
      IF O365SalesInitialSetup.GET THEN
        EXIT(O365SalesInitialSetup."C2Graph Endpoint");

      ERROR(MissingEndpointErr);
    END;

    LOCAL PROCEDURE GetGraphIdForContactFromInvoice@17(SalesInvoiceHeader@1000 : Record 112) : Text[250];
    VAR
      Customer@1001 : Record 18;
      Contact@1002 : Record 5050;
      GraphIntegrationRecord@1003 : Record 5451;
      ContactBusinessRelation@1005 : Record 5054;
      GraphContactId@1004 : Text[250];
    BEGIN
      Customer.GET(SalesInvoiceHeader."Sell-to Customer No.");

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Customer."No.");
      IF ContactBusinessRelation.FINDFIRST THEN
        IF Contact.GET(ContactBusinessRelation."Contact No.") THEN
          IF GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphContactId) THEN
            EXIT(GraphContactId);

      EXIT('');
    END;

    LOCAL PROCEDURE GetGraphIdForContactFromSalesDoc@20(SalesHeader@1000 : Record 36) : Text[250];
    VAR
      Customer@1001 : Record 18;
      Contact@1002 : Record 5050;
      GraphIntegrationRecord@1003 : Record 5451;
      ContactBusinessRelation@1005 : Record 5054;
      GraphContactId@1004 : Text[250];
    BEGIN
      Customer.GET(SalesHeader."Sell-to Customer No.");

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Customer."No.");
      IF ContactBusinessRelation.FINDFIRST THEN
        IF Contact.GET(ContactBusinessRelation."Contact No.") THEN
          IF GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphContactId) THEN
            EXIT(GraphContactId);

      EXIT('');
    END;

    LOCAL PROCEDURE GetIdsIfValidInvoice@26(InvoiceNo@1003 : Code[20];VAR ContactGraphId@1002 : Text[250];VAR ConnectionId@1001 : Text;VAR SalesInvoiceHeaderId@1000 : Text[60]) : Boolean;
    VAR
      SalesInvoiceHeader@1004 : Record 112;
    BEGIN
      IF NOT SalesInvoiceHeader.GET(InvoiceNo) THEN
        EXIT(FALSE);

      IF ISNULLGUID(SalesInvoiceHeader.Id) THEN
        EXIT(FALSE);

      ContactGraphId := GetGraphIdForContactFromInvoice(SalesInvoiceHeader);
      ConnectionId := FORMAT(CREATEGUID);
      SalesInvoiceHeaderId := FORMAT(SalesInvoiceHeader.Id);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetIdsIfValidEstimate@29(EstimateNo@1000 : Code[20];VAR ContactGraphId@1002 : Text[250];VAR ConnectionId@1003 : Text;VAR SalesHeaderId@1001 : Text[60]) : Boolean;
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      IF NOT SalesHeader.GET(SalesHeader."Document Type"::Quote,EstimateNo) THEN
        EXIT(FALSE);

      IF ISNULLGUID(SalesHeader.Id) THEN
        EXIT(FALSE);

      ContactGraphId := GetGraphIdForContactFromSalesDoc(SalesHeader);
      ConnectionId := FORMAT(CREATEGUID);
      SalesHeaderId := FORMAT(SalesHeader.Id);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitializeO365SalesGraphForDocuments@31(VAR O365SalesGraph@1000 : Record 2190;Type@1001 : Text[60];InvoiceId@1003 : Text[60];ContactId@1004 : Text[250]);
    BEGIN
      InitializeO365SalesGraph(O365SalesGraph,Type);
      O365SalesGraph.InvoiceId := InvoiceId;
      O365SalesGraph.ContactId := ContactId;
    END;

    LOCAL PROCEDURE InitializeO365SalesGraphForKPIs@34(VAR O365SalesGraph@1000 : Record 2190;Type@1001 : Text[60]);
    BEGIN
      O365SalesGraph.Initialize;
      O365SalesGraph.Type := Type;
      O365SalesGraph.Kind := KpiKindTxt;
    END;

    LOCAL PROCEDURE InitializeO365SalesGraph@40(VAR O365SalesGraph@1000 : Record 2190;Type@1001 : Text[60]);
    BEGIN
      O365SalesGraph.Initialize;
      O365SalesGraph.Type := Type;
      O365SalesGraph.Kind := ActivityKindTxt;
      O365SalesGraph.SetEmployeeIdToCurrentUser;
    END;

    BEGIN
    END.
  }
}

