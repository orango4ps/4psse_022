OBJECT Table 11229460 CFW Connector Data Line.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               IF (ISNULLGUID("Record Guid")) THEN
                 "Record Guid" := CREATEGUID;
               "Created On" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Modified By" := USERID;
               "Modified On" := CURRENTDATETIME;
             END;

    OnRename=BEGIN
               IF ("Service Code" <> xRec."Service Code") OR ("Connector Code" <> xRec."Connector Code") THEN
                 ERROR(Text006);
             END;

    CaptionML=ENU=CFW Connector Data Line;
    LookupPageID=Page11130255;
    DrillDownPageID=Page11130255;
  }
  FIELDS
  {
    { 10  ;   ;Service Code        ;Code20        ;TableRelation="Consumed Web Service".Code;
                                                   CaptionML=ENU=Service Code }
    { 11  ;   ;Service Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Consumed Web Service".Description WHERE (Code=FIELD(Service Code)));
                                                   CaptionML=ENU=Consumed Web Service Description;
                                                   Editable=No }
    { 20  ;   ;Connector Code      ;Code20        ;TableRelation="CFW Connector".Code WHERE (Service Code=FIELD(Service Code));
                                                   CaptionML=ENU=Connector Code;
                                                   NotBlank=Yes }
    { 21  ;   ;Connector Description;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("CFW Connector".Description WHERE (Service Code=FIELD(Service Code),
                                                                                                         Code=FIELD(Connector Code)));
                                                   CaptionML=ENU=Connector Description;
                                                   Editable=No }
    { 30  ;   ;Company Name        ;Text50        ;TableRelation=Company.Name;
                                                   CaptionML=[ENU=Company Name;
                                                              SVE=F”retagsnamn] }
    { 40  ;   ;RecordID            ;RecordID      ;DataClassification=ToBeClassified;
                                                   CaptionML=SVE=RecordID }
    { 100 ;   ;Inbound Data        ;BLOB          ;CaptionML=ENU=Inbound Data }
    { 105 ;   ;Inbound Data External;BLOB         ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Inbound Data External Format }
    { 110 ;   ;Outbound Data       ;BLOB          ;CaptionML=ENU=Outbound Data }
    { 115 ;   ;Outbound Data External;BLOB        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Outbound Data External Format }
    { 120 ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                CASE Status OF
                                                                  Status::New:BEGIN
                                                                    CLEAR("Inbound Data");
                                                                    CLEAR("Outbound Data");
                                                                    CLEAR("Extra Fields");
                                                                    CLEAR("Inbound Data External");
                                                                    CLEAR("Outbound Data External");
                                                                    CLEAR("Interface Data");
                                                                  END;
                                                                  Status::Extracted:BEGIN
                                                                    InterfaceDataSetProcessing('');
                                                                    IF NOT(IsChild) THEN
                                                                      ChildSetStatus(Status,TRUE,'');
                                                                  END;
                                                                  Status::Fetched:
                                                                    ChildsDelete;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=New,Available,Fetched,Processed,,,,,,,,,,,,,,,,,,,Error,Extracted,Put,Pre-Process,Finished;
                                                   OptionString=New,Available,Fetched,Processed,,,,,,,,,,,,,,,,,,,Error,Extracted,Put,PreProcess,Finished }
    { 130 ;   ;Modified By         ;Text50        ;CaptionML=[ENU=Modified By;
                                                              SVE=Žndrad av];
                                                   Editable=No }
    { 140 ;   ;Modified On         ;DateTime      ;CaptionML=[ENU=Modified On;
                                                              SVE=Žndrad den];
                                                   Editable=No }
    { 150 ;   ;Status Text         ;Text250       ;CaptionML=[ENU=Status Text;
                                                              SVE=Statustext] }
    { 160 ;   ;Created On          ;DateTime      ;CaptionML=[ENU=Created On;
                                                              SVE=Skapad den];
                                                   Editable=No }
    { 170 ;   ;Extra Fields        ;BLOB          ;CaptionML=ENU=Extra Fields }
    { 180 ;   ;Single Step         ;Boolean       ;CaptionML=ENU=Single Step }
    { 190 ;   ;Record Guid         ;GUID          ;CaptionML=ENU=Record Guid }
    { 200 ;   ;File Name           ;Text250       ;CaptionML=[ENU=File Name;
                                                              SVE=Filnamn] }
    { 210 ;   ;Interface Data      ;BLOB          ;DataClassification=ToBeClassified }
    { 220 ;   ;Temp Field Value    ;Text250        }
    { 230 ;   ;Source              ;Option        ;CaptionML=SVE=K„lla;
                                                   OptionCaptionML=ENU=Table,FunctionRunner;
                                                   OptionString=Table,FunctionRunner }
    { 240 ;   ;Last Line           ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Last Line }
    { 300 ;   ;PK1                 ;Text50        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   CaptionML=ENU=Primary Key Field1 }
    { 310 ;   ;PK2                 ;Text50        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   CaptionML=ENU=Primary Key Field2 }
    { 320 ;   ;PK3                 ;Text50        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   CaptionML=ENU=Primary Key Field3 }
    { 330 ;   ;PK4                 ;Text50        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   CaptionML=ENU=Primary Key Field4 }
    { 340 ;   ;PK5                 ;Text50        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   CaptionML=ENU=Primary Key Field5 }
    { 350 ;   ;PK6                 ;Text50        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   CaptionML=ENU=Primary Key Field6 }
    { 360 ;   ;PK7                 ;Text20        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field7 }
    { 370 ;   ;PK8                 ;Text20        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field8 }
    { 380 ;   ;PK9                 ;Text20        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field9 }
    { 390 ;   ;PK10                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field10 }
    { 400 ;   ;PK11                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field11 }
    { 410 ;   ;PK12                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field12 }
    { 420 ;   ;PK13                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field13 }
    { 430 ;   ;PK14                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field14 }
    { 440 ;   ;PK15                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field15 }
    { 450 ;   ;PK16                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field16 }
    { 460 ;   ;PK17                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field17 }
    { 470 ;   ;PK18                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field18 }
    { 480 ;   ;PK19                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field19 }
    { 490 ;   ;PK20                ;Text10        ;OnValidate=BEGIN
                                                                CalculateRecID;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Primary Key Field20 }
  }
  KEYS
  {
    {    ;Service Code,Connector Code,Company Name,RecordID;
                                                   Clustered=Yes }
    {    ;PK1                                      }
    {    ;PK2                                      }
    {    ;PK3                                      }
    {    ;PK4                                      }
    {    ;PK5                                      }
    {    ;PK6                                      }
    {    ;PK7                                      }
    {    ;PK8                                      }
    {    ;PK9                                      }
    {    ;PK10                                     }
    {    ;PK11                                     }
    {    ;PK12                                     }
    {    ;PK13                                     }
    {    ;PK14                                     }
    {    ;PK15                                     }
    {    ;PK16                                     }
    {    ;PK17                                     }
    {    ;PK18                                     }
    {    ;PK19                                     }
    {    ;PK20                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528300 : TextConst 'ENU=No Interface Codeunit definined for %1 %2.';
      Text001@1100528302 : TextConst 'ENU=XML Schema processed.';
      Text002@1100528301 : TextConst 'ENU=Select %1 File';
      Text003@1100528303 : TextConst 'ENU=Generated from Schema';
      Text004@1100528304 : TextConst 'ENU=Mapping generated from First Document.';
      Text005@1100528305 : TextConst 'ENU=PK Index (%1) out of range.';
      Text006@1100528306 : TextConst 'ENU=Rename is not allowed.;SVE=Att ge nytt namn „r inte till†tet.';
      Text007@1100528309 : TextConst 'ENU=New,Available,Fetched,Processed,,,,,,,,,,,,,,,,,,,Error,Extracted,Put,Pre-Process,Finished';
      Text008@1100528310 : TextConst 'ENU="Choose New %1 "';
      Text009@1100528311 : TextConst 'ENU=%1 has no Value.';
      Text010@1100528312 : TextConst 'ENU=Generate default Data Line?';
      EmptyRecId@1100528313 : RecordID;
      EmptyGUID@1100528314 : GUID;
      Text011@1100528307 : TextConst 'ENU=Cannot extract document: No company/companies defined.';
      CFWConnectorManagement@1100528308 : Codeunit 11229291;
      Text012@1100528315 : TextConst 'ENU=Value of Primary Key (%1) out of range.';

    [External]
    PROCEDURE CheckStatus@1100528348(Nextstatus@1100528300 : Integer;NextStatusText@1100528303 : Text;VAR LastStatus@1100528301 : Integer;VAR LastStatusText@1100528302 : Text);
    BEGIN
        IF (Status<> Nextstatus) OR (LastStatusText <> '') THEN BEGIN
          IF LastStatusText = '' THEN BEGIN
            LastStatus := Status;
            LastStatusText := "Status Text"
          END ELSE
            LastStatusText := 'Multiple Errors in Childrecords';
        END ELSE BEGIN
          LastStatus := Nextstatus;
          LastStatusText := NextStatusText;
        END;
    END;

    PROCEDURE ChildsDelete@1100525000();
    VAR
      ChildCFWConnectorDataLine@1100525000 : Record 11229460;
    BEGIN
      IF ChildsGet(ChildCFWConnectorDataLine,TRUE) THEN
        ChildCFWConnectorDataLine.DELETEALL(TRUE);
    END;

    PROCEDURE ChildsGetOLD191024@1100528343(VAR ChildCFWConnectorDataLine@1100528300 : Record 11229460;allChilds@1100528301 : Boolean) Found : Boolean;
    BEGIN
      //nieuwe functie ivm C056764
      ChildCFWConnectorDataLine.SETRANGE("Service Code","Service Code");
      ChildCFWConnectorDataLine.SETRANGE("Connector Code","Connector Code");
      ChildCFWConnectorDataLine.SETFILTER("Company Name",'<>%1','');
      IF NOT allChilds THEN
        ChildCFWConnectorDataLine.SETRANGE(Status,Status);
      ChildCFWConnectorDataLine.SETRANGE("Record Guid","Record Guid");
      IF ChildCFWConnectorDataLine.FINDSET THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ChildsGet@1100528366(VAR ChildCFWConnectorDataLine@1100528300 : Record 11229460;allChilds@1100528301 : Boolean) Found : Boolean;
    BEGIN
      ChildCFWConnectorDataLine.SETCURRENTKEY(PK1,PK2,PK3,PK4,PK5,PK6,PK7,PK8,PK9,PK10,PK11,PK12,PK13,PK14,PK15,PK16,PK17,PK18,PK19,PK20);
      ChildCFWConnectorDataLine.SETRANGE("Service Code","Service Code");
      ChildCFWConnectorDataLine.SETRANGE("Connector Code","Connector Code");
      ChildCFWConnectorDataLine.SETFILTER("Company Name",'<>%1','');
      IF NOT allChilds THEN
        ChildCFWConnectorDataLine.SETRANGE(Status,Status);
      ChildCFWConnectorDataLine.SETRANGE("Record Guid","Record Guid");
      IF ChildCFWConnectorDataLine.FINDSET THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ChildSetStatus@1100528367(ParentStatus@1100528300 : Integer;allChilds@1100528303 : Boolean;StatusText@1100528302 : Text);
    VAR
      ChildCFWConnectorDataLine@1100528301 : Record 11229460;
    BEGIN
      IF ChildsGet(ChildCFWConnectorDataLine,allChilds) THEN
        REPEAT
          ChildCFWConnectorDataLine.SetStatus(ParentStatus,StatusText);
        UNTIL ChildCFWConnectorDataLine.NEXT=0;
    END;

    PROCEDURE CreateDefaultDataLine@1100528338();
    VAR
      CFWConnectorDataLine@1100528300 : Record 11229460;
      CFWConnectorManagement@1100528301 : Codeunit 11229291;
    BEGIN
      IF (CFWConnectorDataLine.GET("Service Code", "Connector Code", '', '', '', '', '', '', '')) THEN
        EXIT;
      IF ("Connector Code" = CFWConnectorManagement.GetFunctionRunnerTxt) THEN
        EXIT;

      CFWConnectorDataLine.INIT;
      CFWConnectorDataLine."Service Code" := "Service Code";
      CFWConnectorDataLine."Connector Code" := "Connector Code";
      CFWConnectorDataLine."Company Name" := '';
      CFWConnectorDataLine."Single Step" := TRUE;
      CFWConnectorDataLine.INSERT(TRUE);
    END;

    [External]
    PROCEDURE CreateMappingFromFirstDocument@1100528314();
    VAR
      CFWConnector@1100528307 : Record 11229353;
      Counter@1100528309 : Integer;
      AttributeName@1100528308 : Text;
      ConnectorCode@1100528306 : Code[20];
      XmlDoc@1100528305 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      NamespaceManager@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XmlNode@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NamedNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XmlRecordList@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ElementNameList@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      CFWConnector.GET("Service Code", "Connector Code");
      CFWConnector.TESTFIELD("Document Element");
      IF (NOT "Inbound Data".HASVALUE) THEN
        ERROR(Text009, FIELDCAPTION("Inbound Data"));

      ReadXmlDocFromBlob(FIELDNO("Inbound Data"), XmlDoc);
      XmlRecordList := XmlDoc.SelectNodes(CFWConnector."Document Element");
      ElementNameList:= XmlRecordList.Item(0).ChildNodes();
      FOR Counter := 1 TO  ElementNameList.Count() DO BEGIN
        XmlNode := ElementNameList.Item(Counter-1);
        AttributeName := XmlNode.Name;
        ProcessSchemaField("Service Code", "Connector Code", AttributeName, '');
      END;
      MESSAGE(Text004);
    END;

    [External]
    PROCEDURE CreateAndProcessRecord@1100525038(Iwebservice@1100525005 : Code[20];IConnectorId@1100525004 : Text;ICompany@1100525003 : Text;IPrimKey@1100525002 : ARRAY [20] OF Text;VAR CFWConnectorDataLine@1100528300 : Record 11229460);
    BEGIN
      CFWConnectorDataLine.GetInitRecord(Iwebservice,IConnectorId,ICompany,IPrimKey);
      CFWConnectorDataLine.SetStatus(CFWConnectorDataLine.Status::Available, '');
      CFWConnectorDataLine.ProcessRecord();
      CFWConnectorDataLine.ReRead;
    END;

    [External]
    PROCEDURE CreateAndFullyProcessRecord@1100525021(Iwebservice@1100525005 : Code[20];IConnectorId@1100525004 : Text;ICompany@1100525003 : Text;IPrimKey@1100525002 : ARRAY [20] OF Text;VAR CFWConnectorDataLine@1100525001 : Record 11229460);
    BEGIN
      CFWConnectorDataLine.GetInitRecord(Iwebservice,IConnectorId,ICompany,IPrimKey);
      CFWConnectorDataLine.SetStatus(CFWConnectorDataLine.Status::New,'');
      CFWConnectorDataLine.ProcessRecord();
      CFWConnectorDataLine.ReRead;
      CFWConnectorDataLine.TESTFIELD(Status,CFWConnectorDataLine.Status::Finished);
    END;

    [External]
    PROCEDURE EditBlob@1100528318(FieldNo@1100528300 : Integer);
    VAR
      TempBlob@1100528305 : TEMPORARY Record 99008535;
      TextEditor@1100528304 : Codeunit 11012001;
      IStream@1100528303 : InStream;
      OStream@1100528302 : OutStream;
      HasValue@1100528301 : Boolean;
    BEGIN
      CreateInstream(FieldNo, IStream, HasValue,TEXTENCODING::Windows);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OStream);
      COPYSTREAM(OStream, IStream);
      TextEditor.EditBLOBFieldText(TempBlob, 'xml');

      TempBlob.Blob.CREATEINSTREAM(IStream);
      CreateOutStream(FieldNo, OStream,TEXTENCODING::Windows);
      COPYSTREAM(OStream, IStream);
      MODIFY(TRUE);
    END;

    [External]
    PROCEDURE ExtractDocument@1100528304(Xpath@1100528300 : Text);
    VAR
      Counter@1100528302 : Integer;
      NodeCount@1100528301 : Integer;
      Window@1100528303 : Dialog;
      StartTime@1100528304 : Time;
      XmlNodeList@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlDoc@1100528306 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Oldvalue@1100528307 : Text;
      LastLine@1100528308 : Boolean;
    BEGIN
      TESTFIELD("Company Name",'');
      IF Xpath='' THEN
        EXIT;

      ReadXmlDocFromBlob(FIELDNO("Inbound Data"), XmlDoc);
      XmlNodeList := XmlDoc.SelectNodes(Xpath);
      NodeCount := XmlNodeList.Count;
      StartTime := TIME;
      CFWConnectorManagement.WindowOpen(Window);

      FOR Counter := 1 TO NodeCount DO BEGIN
        InterfaceDataSetValue('Xpath',Xpath);
        InterfaceDataSetValue('NodeCounter',FORMAT(Counter,9));
        LastLine := (Counter=NodeCount);
        //SaveXmlRecordOLD191023("Service Code", "Connector Code", XmlNodeList.Item(Counter-1), "Record Guid",LastLine);
        SaveXmlRecord("Service Code", "Connector Code", XmlNodeList.Item(Counter-1), "Record Guid",LastLine);
        CLEAR("Interface Data");
        CFWConnectorManagement.WindowUpdate(Window,Counter,NodeCount,StartTime,TIME);
        END;
      Window.CLOSE;
    END;

    [External]
    PROCEDURE FillPrimKeyValues@1100528328(VAR PrimKeyValuesInOut@1100528300 : ARRAY [20] OF Text;KeyValue1@1100528301 : Text;KeyValue2@1100528302 : Text;KeyValue3@1100528303 : Text;KeyValue4@1100528304 : Text;KeyValue5@1100528305 : Text;KeyValue6@1100528306 : Text;KeyValue7@1100528307 : Text;KeyValue8@1100528308 : Text;KeyValue9@1100528309 : Text;KeyValue10@1100528310 : Text;KeyValue11@1100528320 : Text;KeyValue12@1100528319 : Text;KeyValue13@1100528318 : Text;KeyValue14@1100528317 : Text;KeyValue15@1100528316 : Text;KeyValue16@1100528315 : Text;KeyValue17@1100528314 : Text;KeyValue18@1100528313 : Text;KeyValue19@1100528312 : Text;KeyValue20@1100528311 : Text);
    BEGIN
      PrimKeyValuesInOut[1] := KeyValue1;
      PrimKeyValuesInOut[2] := KeyValue2;
      PrimKeyValuesInOut[3] := KeyValue3;
      PrimKeyValuesInOut[4] := KeyValue4;
      PrimKeyValuesInOut[5] := KeyValue5;
      PrimKeyValuesInOut[6] := KeyValue6;
      PrimKeyValuesInOut[7] := KeyValue7;
      PrimKeyValuesInOut[8] := KeyValue8;
      PrimKeyValuesInOut[9] := KeyValue9;
      PrimKeyValuesInOut[10] := KeyValue10;
      PrimKeyValuesInOut[11] := KeyValue11;
      PrimKeyValuesInOut[12] := KeyValue12;
      PrimKeyValuesInOut[13] := KeyValue13;
      PrimKeyValuesInOut[14] := KeyValue14;
      PrimKeyValuesInOut[15] := KeyValue15;
      PrimKeyValuesInOut[16] := KeyValue16;
      PrimKeyValuesInOut[17] := KeyValue17;
      PrimKeyValuesInOut[18] := KeyValue18;
      PrimKeyValuesInOut[19] := KeyValue19;
      PrimKeyValuesInOut[20] := KeyValue20;
    END;

    [External]
    PROCEDURE FillPrimKeyValuesFromDataLine@1100528363(VAR PrimKeyValuesInOut@1100528300 : ARRAY [20] OF Text);
    BEGIN
      FillPrimKeyValues(PrimKeyValuesInOut, PK1, PK2, PK3,PK4, PK5, PK6,PK7,PK8,PK9,PK10,PK11,PK12,PK13,PK14,PK15,PK16,PK17,PK18,PK19,PK20);
    END;

    [External]
    PROCEDURE FindRecRef@1100528327(VAR RecRefInOut@1100528300 : RecordRef);
    VAR
      PrimKeyValues@1100528301 : ARRAY [20] OF Text;
      Counter@1100528302 : Integer;
      PositionText@1100528303 : Text;
      KeyRef@1100528304 : KeyRef;
      FieldRef@1100528305 : FieldRef;
      Field@1100528306 : Record 2000000041;
    BEGIN
      FillPrimKeyValuesFromDataLine(PrimKeyValues);
      KeyRef := RecRefInOut.KEYINDEX(1);
      PositionText := '';
      FOR Counter := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(Counter);
        Field.GET(RecRefInOut.NUMBER,FieldRef.NUMBER);
        IF (PositionText <> '') THEN
          PositionText += ',';
        CASE TRUE OF
          (PrimKeyValues[Counter] = '') AND (Field.Type = Field.Type::Option)   : PrimKeyValues[Counter] := '0';
          (PrimKeyValues[Counter] = '') AND (Field.Type = Field.Type::Integer)  : PrimKeyValues[Counter] := '0';
        END;
        PositionText += STRSUBSTNO('Field%1=0("%2")', FieldRef.NUMBER, PrimKeyValues[Counter]);
        END;

      RecRefInOut.SETPOSITION(PositionText);
      RecRefInOut.SETRECFILTER;
    END;

    [External]
    PROCEDURE GetPKValue@1100528360(Index@1100528300 : Integer) PKValue : Text;
    BEGIN
      CASE Index OF
        1: PKValue := PK1;
        2: PKValue := PK2;
        3: PKValue := PK3;
        4: PKValue := PK4;
        5: PKValue := PK5;
        6: PKValue := PK6;
        7: PKValue := PK7;
        8: PKValue := PK8;
        9: PKValue := PK9;
        10: PKValue := PK10;
        11: PKValue := PK11;
        12: PKValue := PK12;
        13: PKValue := PK13;
        14: PKValue := PK14;
        15: PKValue := PK15;
        16: PKValue := PK16;
        17: PKValue := PK17;
        18: PKValue := PK18;
        19: PKValue := PK19;
        20: PKValue := PK20;
        ELSE
          ERROR(Text012,Index);
      END;
    END;

    [External]
    PROCEDURE GetRecord@1100528340(ServiceCode@1100528303 : Code[20];ConnectorCode@1100528302 : Code[20];CompName@1100528301 : Text;PrimKeyValues@1100528300 : ARRAY [20] OF Text) : Boolean;
    BEGIN
      SETRANGE("Service Code", ServiceCode);
      SETRANGE("Connector Code", ConnectorCode);
      SETRANGE("Company Name", CompName);
      SETRANGE(PK1, PrimKeyValues[1]);
      SETRANGE(PK2, PrimKeyValues[2]);
      SETRANGE(PK3, PrimKeyValues[3]);
      SETRANGE(PK4, PrimKeyValues[4]);
      SETRANGE(PK5, PrimKeyValues[5]);
      SETRANGE(PK6, PrimKeyValues[6]);
      SETRANGE(PK7, PrimKeyValues[7]);
      SETRANGE(PK8, PrimKeyValues[8]);
      SETRANGE(PK9, PrimKeyValues[9]);
      SETRANGE(PK10, PrimKeyValues[10]);
      SETRANGE(PK11, PrimKeyValues[11]);
      SETRANGE(PK12, PrimKeyValues[12]);
      SETRANGE(PK13, PrimKeyValues[13]);
      SETRANGE(PK14, PrimKeyValues[14]);
      SETRANGE(PK15, PrimKeyValues[15]);
      SETRANGE(PK16, PrimKeyValues[16]);
      SETRANGE(PK17, PrimKeyValues[17]);
      SETRANGE(PK18, PrimKeyValues[18]);
      SETRANGE(PK19, PrimKeyValues[19]);
      SETRANGE(PK20, PrimKeyValues[20]);
      EXIT(FINDFIRST);
    END;

    [External]
    PROCEDURE GetRecordSet@1100528358(Index@1100528304 : Integer;ServiceCode@1100528303 : Code[20];ConnectorCode@1100528302 : Code[20];CompName@1100528301 : Text;PrimKeyValues@1100528300 : ARRAY [20] OF Text) : Boolean;
    BEGIN
      SETRANGE("Service Code", ServiceCode);
      SETRANGE("Connector Code", ConnectorCode);
      SETRANGE("Company Name", CompName);
      IF (Index > 1) THEN
        SETRANGE(PK1, PrimKeyValues[1]);
      IF (Index > 2) THEN
        SETRANGE(PK2, PrimKeyValues[2]);
      IF (Index > 3) THEN
        SETRANGE(PK3, PrimKeyValues[3]);
      IF (Index > 4) THEN
        SETRANGE(PK4, PrimKeyValues[4]);
      IF (Index > 5) THEN
        SETRANGE(PK5, PrimKeyValues[5]);
      IF (Index > 6) THEN
        SETRANGE(PK6, PrimKeyValues[6]);
      IF (Index > 7) THEN
        SETRANGE(PK7, PrimKeyValues[7]);
      IF (Index > 8) THEN
        SETRANGE(PK8, PrimKeyValues[8]);
      IF (Index > 9) THEN
        SETRANGE(PK9, PrimKeyValues[9]);
      IF (Index > 10) THEN
        SETRANGE(PK10, PrimKeyValues[10]);
      IF (Index > 11) THEN
        SETRANGE(PK11, PrimKeyValues[11]);
      IF (Index > 12) THEN
        SETRANGE(PK12, PrimKeyValues[12]);
      IF (Index > 13) THEN
        SETRANGE(PK13, PrimKeyValues[13]);
      IF (Index > 14) THEN
        SETRANGE(PK14, PrimKeyValues[14]);
      IF (Index > 15) THEN
        SETRANGE(PK15, PrimKeyValues[15]);
      IF (Index > 16) THEN
        SETRANGE(PK16, PrimKeyValues[16]);
      IF (Index > 17) THEN
        SETRANGE(PK17, PrimKeyValues[17]);
      IF (Index > 18) THEN
        SETRANGE(PK18, PrimKeyValues[18]);
      IF (Index > 19) THEN
        SETRANGE(PK19, PrimKeyValues[19]);
      EXIT(FINDSET);
    END;

    [External]
    PROCEDURE InitRecord@1100528341(ConsumedWebServiceCode@1100528303 : Code[20];ConnectorCode@1100528302 : Code[20];CompName@1100528301 : Text;PrimKeyValues@1100528300 : ARRAY [20] OF Text);
    BEGIN
      CLEAR(Rec);
      INIT;
      VALIDATE("Service Code", ConsumedWebServiceCode);
      VALIDATE("Connector Code", ConnectorCode);
      IF CompName <> 'LEARNINGMODE' THEN
      VALIDATE("Company Name", CompName)
      ELSE
      "Company Name":= CompName;
      INSERT(TRUE);
      PK1 := PrimKeyValues[1];
      PK2 := PrimKeyValues[2];
      PK3 := PrimKeyValues[3];
      PK4 := PrimKeyValues[4];
      PK5 := PrimKeyValues[5];
      PK6 := PrimKeyValues[6];
      PK7 := PrimKeyValues[7];
      PK8 := PrimKeyValues[8];
      PK9 := PrimKeyValues[9];
      PK10 := PrimKeyValues[10];
      PK11 := PrimKeyValues[11];
      PK12 := PrimKeyValues[12];
      PK13 := PrimKeyValues[13];
      PK14 := PrimKeyValues[14];
      PK15 := PrimKeyValues[15];
      PK16 := PrimKeyValues[16];
      PK17 := PrimKeyValues[17];
      PK18 := PrimKeyValues[18];
      PK19 := PrimKeyValues[19];
      PK20 := PrimKeyValues[20];
      IF "Company Name" <> '' THEN
        VALIDATE(PK1);
      MODIFY(TRUE);
    END;

    [External]
    PROCEDURE InterfaceDataGetNextStatus@1100528357() ReturnValue : Integer;
    VAR
      temp@1100528300 : Text;
    BEGIN
      temp := InterfaceDataGetValue('NextStatus');
      EVALUATE(ReturnValue,temp);
    END;

    [External]
    PROCEDURE InterfaceDataGetNextStatusText@1100528359() ReturnValue : Text;
    BEGIN
      ReturnValue := InterfaceDataGetValue('NextStatusText');
    END;

    [External]
    PROCEDURE InterfaceDataGetProcessing@1100528355() ReturnValue : Text;
    BEGIN
      ReturnValue := InterfaceDataGetValue('Processing');
    END;

    [External]
    PROCEDURE InterfaceDataGetRECORDID@1100528354() ReturnValue : Text;
    BEGIN
      ReturnValue := InterfaceDataGetValue('RECORDID');
    END;

    [External]
    PROCEDURE InterfaceDataGetReturnValue@1100528353() ReturnValue : Text;
    BEGIN
      ReturnValue := InterfaceDataGetValue('ReturnValue');
    END;

    [External]
    PROCEDURE InterfaceDataGetValue@1100528349(FindNode@1100528303 : Text) ReturnValue : Text;
    VAR
      XmlDoc@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      ReadXmlDocFromBlob(FIELDNO("Interface Data"), XmlDoc);
      XmlNode := XmlDoc.SelectSingleNode(STRSUBSTNO('//InterfaceData/%1',FindNode));
      IF NOT(ISNULL(XmlNode)) THEN BEGIN
        ReturnValue := XmlNode.InnerXml;
        CFWConnectorManagement.ConvertXmlToAscii(ReturnValue);
      END;
    END;

    [External]
    PROCEDURE InterfaceDataSetNextStatus@1100528362(NewValue@1100528301 : Integer) OldValue : Text;
    BEGIN
      OldValue := InterfaceDataSetValue('NextStatus',FORMAT(NewValue));
    END;

    [External]
    PROCEDURE InterfaceDataSetNextStatusText@1100528361(NewValue@1100528301 : Text) OldValue : Text;
    BEGIN
      OldValue := InterfaceDataSetValue('NextStatusText',NewValue);
    END;

    [External]
    PROCEDURE InterfaceDataSetProcessing@1100528356(NewValue@1100528301 : Text) OldValue : Text;
    BEGIN
      OldValue := InterfaceDataSetValue('Processing',NewValue);
    END;

    [External]
    PROCEDURE InterfaceDataSetRECORDID@1100528334(NewValue@1100528301 : Text) OldValue : Text;
    BEGIN
      OldValue := InterfaceDataSetValue('RECORDID',NewValue);
    END;

    [External]
    PROCEDURE InterfaceDataSetReturnValue@1100528352(NewValue@1100528301 : Text) OldValue : Text;
    BEGIN
      OldValue := InterfaceDataSetValue('ReturnValue',NewValue);
    END;

    [External]
    PROCEDURE InterfaceDataSetValue@1100528351(FindNode@1100528300 : Text;NewValue@1100528301 : Text) OldValue : Text;
    VAR
      XmlDoc@1100528304 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewXmlNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMManagement@1100528305 : Codeunit 6224;
      TempText@1100528306 : Text;
      TempText2@1100528307 : Text;
    BEGIN
      ReadXmlDocFromBlob(FIELDNO("Interface Data"), XmlDoc);
      XmlNode := XmlDoc.SelectSingleNode(STRSUBSTNO('//InterfaceData/%1',FindNode));
      IF (ISNULL(XmlNode)) THEN BEGIN
        XmlNode := XmlDoc.LastChild;
        XMLDOMManagement.AddElement(XmlNode,FindNode,'','',NewXmlNode);
      END ELSE
        NewXmlNode := XmlNode;
      OldValue := NewXmlNode.InnerXml;
      CFWConnectorManagement.ConvertAsciiToXml(NewValue);
      NewXmlNode.InnerXml := NewValue;
      CLEAR("Interface Data");
      SaveXmlToBlob(FIELDNO("Interface Data"), XmlDoc);
      TempText2 := XmlDoc.InnerXml;
      TempText:= ReadStringFromBlob(FIELDNO("Interface Data"));
    END;

    [External]
    PROCEDURE GetInitRecord@1100528323(ServiceCode@1100528303 : Code[20];ConnectorCode@1100528300 : Code[20];CompName@1100528301 : Text;PrimKeyValues@1100528302 : ARRAY [20] OF Text);
    BEGIN
      IF NOT GetRecord(ServiceCode,ConnectorCode,CompName,PrimKeyValues) THEN
        InitRecord(ServiceCode,ConnectorCode,CompName,PrimKeyValues);
      VALIDATE("Single Step",FALSE);
      MODIFY(TRUE);
    END;

    [External]
    PROCEDURE GetInitRecordWithGuid@1100528322(ConsumedWebServiceCode@1100528304 : Code[20];ConnectorCode@1100528300 : Code[20];CompName@1100528301 : Text;PrimKeyValues@1100528302 : ARRAY [20] OF Text;GuidIn@1100528303 : GUID);
    BEGIN
      GetInitRecord(ConsumedWebServiceCode, ConnectorCode, CompName, PrimKeyValues);
      IF (ISNULLGUID(GuidIn)) THEN
        "Record Guid" := CREATEGUID
      ELSE
        "Record Guid" := GuidIn;
      MODIFY(TRUE);
    END;

    [External]
    PROCEDURE GetNoOfRecordsByStatus@1100528310(StatusFilter@1100528300 : Text) : Integer;
    VAR
      CFWConnectorDataLine@1100528301 : Record 11229460;
    BEGIN
      EXIT(GetNoOfRecordsByStatus2(StatusFilter,EmptyGUID));
    END;

    [External]
    PROCEDURE GetNoOfRecordsByStatus2@1100528311(StatusFilter@1100528300 : Text;RecordGuid@1100528301 : GUID) : Integer;
    VAR
      CFWConnectorDataLine@1100528302 : Record 11229460;
    BEGIN
      CFWConnectorDataLine.SETRANGE("Service Code", "Service Code");
      CFWConnectorDataLine.SETRANGE("Connector Code", "Connector Code");
      CFWConnectorDataLine.SETFILTER(RecordID, '<>%1', EmptyRecId);
      CFWConnectorDataLine.SETFILTER(Status, StatusFilter);
      IF RecordGuid <> EmptyGUID THEN
        CFWConnectorDataLine.SETRANGE("Record Guid", RecordGuid);
      EXIT(CFWConnectorDataLine.COUNT);
    END;

    [External]
    PROCEDURE GetPrimKeyString@1100528300(Separator@1100528301 : Text[1]) KeyString : Text;
    VAR
      Counter@1100528300 : Integer;
    BEGIN
      KeyString := "Service Code";
      KeyString += (Separator + "Connector Code");
      KeyString += (Separator + "Company Name");
      KeyString += (Separator + PK1);
      KeyString += (Separator + PK2);
      KeyString += (Separator + PK3);
      KeyString += (Separator + PK4);
      KeyString += (Separator + PK5);
      KeyString += (Separator + PK6);
      KeyString += (Separator + PK7);
      KeyString += (Separator + PK8);
      KeyString += (Separator + PK9);
      KeyString += (Separator + PK10);
      KeyString += (Separator + PK11);
      KeyString += (Separator + PK12);
      KeyString += (Separator + PK13);
      KeyString += (Separator + PK14);
      KeyString += (Separator + PK15);
      KeyString += (Separator + PK16);
      KeyString += (Separator + PK17);
      KeyString += (Separator + PK18);
      KeyString += (Separator + PK19);
      KeyString += (Separator + PK20);

      EXIT(KeyString);
    END;

    [External]
    PROCEDURE ProcessRecord@1100528309() Status : Integer;
    VAR
      CFWConnector@1100528300 : Record 11229353;
      Processing@1100528301 : Text;
    BEGIN
      CFWConnector.GET("Service Code", "Connector Code");
      IF (CFWConnector."Interface Codeunit" <= 0) THEN
        ERROR(Text000, "Service Code", "Connector Code");
      CODEUNIT.RUN(CFWConnector."Interface Codeunit", Rec);

      ReRead;
      Processing := InterfaceDataGetProcessing;
      CASE Processing OF
        'PROCESSWEBDOCUMENT':EXIT(Rec.Status);
      END;
    END;

    [External]
    PROCEDURE ProcessSchema@1100528315();
    VAR
      Counter@1100528306 : Integer;
      AttributeName@1100528307 : Text;
      AttributeType@1100528308 : Text;
      XmlDoc@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      NamespaceManager@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XmlNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NamedNode@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XmlRecordList@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ElementNameList@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      ReadXmlDocFromBlob(FIELDNO("Inbound Data"), XmlDoc);
      SetNamespaceManager(NamespaceManager, XmlDoc);

      XmlNode := XmlDoc.SelectSingleNode('.//xs:schema/xs:element/xs:complexType/xs:choice/xs:element',
                                         NamespaceManager);
      NamedNode := XmlNode.Attributes;
      ElementNameList := XmlDoc.SelectNodes('.//xs:schema/xs:element/xs:complexType/xs:choice/xs:element/xs:complexType/xs:sequence/xs:element',
                                            NamespaceManager);
      FOR Counter := 0 TO  ElementNameList.Count()-1 DO BEGIN
        XmlNode := ElementNameList.Item(Counter);
        NamedNode := XmlNode.Attributes;
        AttributeName := NamedNode.GetNamedItem('name').Value;
        AttributeType := NamedNode.GetNamedItem('type').Value;
        ProcessSchemaField("Service Code", "Connector Code", AttributeName, AttributeType);
      END;
      MESSAGE(Text001);
    END;

    PROCEDURE ProcessWebDocumentOLD191023@1100528324(nextstatus@1100528309 : Integer;nextstatustext@1100528308 : Text) : Text;
    VAR
      CFWConnectorMapping@1100528300 : Record 11229354;
      CFWConnectorManagement@1100528304 : Codeunit 11229291;
      ReturnValue@1100528305 : Text;
      Proceed@1100528301 : Boolean;
      RecRef@1100528302 : RecordRef;
      XmlDoc@1100528303 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      PrimKeyValues@1100528306 : ARRAY [20] OF Text;
    BEGIN
      ReadXmlDocFromBlob(FIELDNO("Inbound Data"), XmlDoc);
      Proceed := HandlePrimKeyRecRef(RecRef);

      IF (Proceed) THEN BEGIN
        CFWConnectorMapping.SETCURRENTKEY("Mapping Sequence");
        CFWConnectorMapping.SETASCENDING("Mapping Sequence",FALSE);
        CFWConnectorMapping.SETRANGE("Service Code", "Service Code");
        CFWConnectorMapping.SETRANGE("Connector Code", "Connector Code");
        CFWConnectorMapping.SETFILTER("Field No.",'>0' );
        CFWConnectorMapping.SETRANGE("Primary Key Index", 0);
        IF CFWConnectorMapping.FINDSET THEN
          REPEAT
            IF CFWConnectorMapping.AllowPutField(XmlDoc, "Company Name") THEN BEGIN
              FillPrimKeyValuesFromDataLine(PrimKeyValues);
              CFWConnectorMapping.PutFieldValueOLD191023(
                CFWConnectorManagement.ReturnNodeText(XmlDoc, '//' + CFWConnectorMapping."Element Name", FALSE),
                RecRef, CFWConnectorMapping."Validate Field", "Company Name", CFWConnectorMapping.Culture,"Last Line",PrimKeyValues);
            END;
          UNTIL (CFWConnectorMapping.NEXT = 0);
      END;
      SetStatus(nextstatus,nextstatustext);
      EXIT(FORMAT(Status));
    END;

    PROCEDURE ProcessWebDocument@1100528364(nextstatus@1100528309 : Integer;nextstatustext@1100528308 : Text) : Text;
    VAR
      CFWConnectorMapping@1100528300 : Record 11229354;
      CFWConnectorManagement@1100528304 : Codeunit 11229291;
      ReturnValue@1100528305 : Text;
      Proceed@1100528301 : Boolean;
      RecRef@1100528302 : RecordRef;
      XmlDoc@1100528303 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ParentPrimKeyValues@1100528307 : ARRAY [20] OF Text;
      ChildPrimKeyValues@1100528306 : ARRAY [20] OF Text;
    BEGIN
      ReadXmlDocFromBlob(FIELDNO("Inbound Data"), XmlDoc);
      Proceed := HandlePrimKeyRecRef(RecRef);

      IF (Proceed) THEN BEGIN
        CFWConnectorMapping.SETCURRENTKEY("Mapping Sequence");
        CFWConnectorMapping.SETASCENDING("Mapping Sequence",FALSE);
        CFWConnectorMapping.GetMapping("Service Code","Connector Code");
        CFWConnectorMapping.SETFILTER("Field No.",'>0' );
        CFWConnectorMapping.SETRANGE("Primary Key Index", 0);
        IF CFWConnectorMapping.FINDSET THEN
          REPEAT
            IF CFWConnectorMapping.AllowPutField(XmlDoc, "Company Name") THEN BEGIN
              FillPrimKeyValuesFromDataLine(ChildPrimKeyValues);
              CFWConnectorMapping.PutFieldValue(
                CFWConnectorManagement.ReturnNodeText(XmlDoc, '//' + CFWConnectorMapping."Element Name", FALSE),
                RecRef, CFWConnectorMapping."Validate Field",'', "Company Name", CFWConnectorMapping.Culture,"Last Line",ParentPrimKeyValues,ChildPrimKeyValues);
            END;
          UNTIL (CFWConnectorMapping.NEXT = 0);
      END;
      SetStatus(nextstatus,nextstatustext);
      EXIT(FORMAT(Status));
    END;

    [External]
    PROCEDURE ReadStringFromBlob@1100528312(FieldNo@1100528300 : Integer) DataXmlString : Text;
    VAR
      CFWConnectorManagement@1100528303 : Codeunit 11229291;
      IStream@1100528301 : InStream;
      HasValue@1100528302 : Boolean;
    BEGIN
      CreateInstream(FieldNo, IStream, HasValue,TEXTENCODING::Windows);
      DataXmlString := CFWConnectorManagement.ReadStringFromStream(HasValue, IStream)
    END;

    [External]
    PROCEDURE ReadXmlDocFromBlob@1100528313(FieldNoIn@1100528300 : Integer;VAR XmlDocInOut@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      IStream@1100528303 : InStream;
      HasValue@1100528301 : Boolean;
      XmlText@1100528304 : Text;
      XmlLine@1100528305 : Text;
    BEGIN
      ReadXmlDocFromBlobEncoding(FieldNoIn,XmlDocInOut,TEXTENCODING::Windows);
    END;

    [External]
    PROCEDURE ReadXmlDocFromBlobEncoding@1100528346(FieldNoIn@1100528300 : Integer;VAR XmlDocInOut@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";TextEncodingType@1100528306 : TextEncoding);
    VAR
      IStream@1100528303 : InStream;
      HasValue@1100528301 : Boolean;
      XmlText@1100528304 : Text;
      XmlLine@1100528305 : Text;
    BEGIN
      XmlDocInOut := XmlDocInOut.XmlDocument;
      CreateInstream(FieldNoIn, IStream, HasValue,TextEncodingType);
      IF (HasValue) THEN BEGIN
        WHILE (NOT IStream.EOS) DO BEGIN
          IStream.READTEXT(XmlLine);
          XmlText += XmlLine;
        END;
        IF COPYSTR(XmlText,1,3)='‹¯¨' THEN //to delete Byte Order Mark from textstream
          XmlText := COPYSTR(XmlText,4,STRLEN(XmlText)-3);
        XmlDocInOut.LoadXml(XmlText);
      END ELSE BEGIN
        IF (FieldNoIn = FIELDNO("Extra Fields")) THEN
          XmlDocInOut.LoadXml('<ExtraFields/>');
        IF (FieldNoIn = FIELDNO("Interface Data")) THEN
          XmlDocInOut.LoadXml('<InterfaceData/>');
      END;
    END;

    [External]
    PROCEDURE ReRead@1100528301();
    BEGIN
      GET("Service Code", "Connector Code", "Company Name", RecordID);
    END;

    [External]
    PROCEDURE ResetStatus@1100528336(VAR CFWConnectorDataLine@1100528300 : Record 11229460);
    VAR
      Choice@1100528301 : Integer;
    BEGIN
      IF (NOT CFWConnectorDataLine.FINDSET(TRUE)) THEN
        EXIT;
      Choice := STRMENU(Text007, Status +1, STRSUBSTNO(Text008, FIELDCAPTION(Status)));
      IF Choice = 0 THEN
        EXIT;

      REPEAT
        CFWConnectorDataLine.VALIDATE(Status, Choice -1);
        CFWConnectorDataLine.MODIFY(TRUE);
      UNTIL (CFWConnectorDataLine.NEXT = 0);
    END;

    [External]
    PROCEDURE SaveStringToBlob@1100528305(FieldNoIn@1100528300 : Integer;DataXmlString@1100528301 : Text);
    VAR
      CFWConnectorManagement@1100528303 : Codeunit 11229291;
      OStream@1100528302 : OutStream;
    BEGIN
      CreateOutStream(FieldNoIn, OStream,TEXTENCODING::Windows);
      CFWConnectorManagement.WriteStringToStream(DataXmlString, OStream);
      MODIFY(TRUE);
    END;

    PROCEDURE SaveXmlRecordOLD191023@1100528321(ConsumedWebServiceCode@1100528301 : Code[20];ConnectorCode@1100528300 : Code[20];XmlNodeIn@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";GuidIn@1100528312 : GUID;LastLine@1100528316 : Boolean);
    VAR
      CFWConnector@1100528303 : Record 11229353;
      CFWConnectorMapping@1100528304 : Record 11229354;
      CFWConnectorMappingValue@1100528305 : Record 11229355;
      CFWTranslationSetValue@1100528313 : Record 11229362;
      MultipleCompaniesInValues@1100528306 : Boolean;
      MultipleCompaniesInTranslation@1100528307 : Boolean;
      CompName@1100528308 : Text;
      PrimKeyValues@1100528309 : ARRAY [20] OF Text;
      XmlDoc@1100528310 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1100528311 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ExtrafieldsDoc@1100528314 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument();
      XmlNode := XmlDoc.ImportNode(XmlNodeIn, TRUE);
      XmlDoc.AppendChild(XmlNode);

      MultipleCompaniesInValues := CFWConnectorMappingValue.ForCompanies(ConsumedWebServiceCode, ConnectorCode);
      MultipleCompaniesInTranslation := CFWTranslationSetValue.ForCompanies(ConsumedWebServiceCode, ConnectorCode);
      ReadXmlDocFromBlobEncoding(FIELDNO("Extra Fields"),ExtrafieldsDoc,TEXTENCODING::Windows);
      CASE TRUE OF
        MultipleCompaniesInValues: BEGIN
          REPEAT
            CFWConnectorMapping.GetPrimKeyFieldsOLD191023(ConsumedWebServiceCode, ConnectorCode, XmlNode, "Company Name", PrimKeyValues,ExtrafieldsDoc,LastLine);
            StoreWebData(ConsumedWebServiceCode, ConnectorCode, CFWConnectorMappingValue."To Value", PrimKeyValues, '',XmlDoc,GuidIn,LastLine);
          UNTIL (CFWConnectorMappingValue.NEXT = 0);
        END;
        MultipleCompaniesInTranslation: BEGIN
          REPEAT
            CFWConnectorMapping.GetPrimKeyFieldsOLD191023(ConsumedWebServiceCode, ConnectorCode, XmlNode, "Company Name", PrimKeyValues,ExtrafieldsDoc,LastLine);
            StoreWebData(ConsumedWebServiceCode, ConnectorCode, CFWTranslationSetValue."To Value", PrimKeyValues, '',XmlDoc, GuidIn,LastLine);
          UNTIL (CFWTranslationSetValue.NEXT = 0);
        END;
        ELSE BEGIN
          CompName := CFWConnectorMapping.GetCompanyFromDocument(ConsumedWebServiceCode, ConnectorCode, XmlDoc);
          CFWConnectorMapping.GetPrimKeyFieldsOLD191023(ConsumedWebServiceCode, ConnectorCode, XmlNode, CompName, PrimKeyValues,ExtrafieldsDoc,LastLine);
          StoreWebData(ConsumedWebServiceCode, ConnectorCode, CompName, PrimKeyValues, '', XmlDoc, GuidIn,LastLine);
        END;
      END;
    END;

    PROCEDURE SaveXmlRecord@1100528365(ServiceCode@1100528301 : Code[20];ConnectorCode@1100528300 : Code[20];XmlNodeIn@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";GuidIn@1100528312 : GUID;LastLine@1100528316 : Boolean);
    VAR
      CFWConnector@1100528303 : Record 11229353;
      CFWConnectorMapping@1100528304 : Record 11229354;
      CFWConnectorMappingValue@1100528305 : Record 11229355;
      CFWTranslationSetValue@1100528313 : Record 11229362;
      MultipleCompaniesInValues@1100528306 : Boolean;
      MultipleCompaniesInTranslation@1100528307 : Boolean;
      ParentCompName@1100528308 : Text;
      ChildCompName@1100528315 : Text;
      ParentPrimKeyValues@1100528309 : ARRAY [20] OF Text;
      ChildPrimKeyValues@1100528317 : ARRAY [20] OF Text;
      XmlDoc@1100528310 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1100528311 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ExtrafieldsDoc@1100528314 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument();
      XmlNode := XmlDoc.ImportNode(XmlNodeIn, TRUE);
      XmlDoc.AppendChild(XmlNode);
      FillPrimKeyValuesFromDataLine(ParentPrimKeyValues);
      ParentCompName := "Company Name";
      MultipleCompaniesInValues := CFWConnectorMappingValue.ForCompanies(ServiceCode, ConnectorCode);
      MultipleCompaniesInTranslation := CFWTranslationSetValue.ForCompanies(ServiceCode, ConnectorCode);
      ReadXmlDocFromBlobEncoding(FIELDNO("Extra Fields"),ExtrafieldsDoc,TEXTENCODING::Windows);
      CASE TRUE OF
        MultipleCompaniesInValues: BEGIN
          REPEAT
            ChildCompName := CFWConnectorMappingValue."To Value";
            CFWConnectorMapping.GetPrimKeyFields(ServiceCode, ConnectorCode, XmlNode,ParentCompName,ChildCompName, ParentPrimKeyValues,ChildPrimKeyValues,ExtrafieldsDoc,LastLine);
            StoreWebData(ServiceCode, ConnectorCode, ChildCompName, ChildPrimKeyValues, '',XmlDoc,GuidIn,LastLine);
          UNTIL (CFWConnectorMappingValue.NEXT = 0);
        END;
        MultipleCompaniesInTranslation: BEGIN
          REPEAT
            ChildCompName := CFWTranslationSetValue."To Value";
            CFWConnectorMapping.GetPrimKeyFields(ServiceCode, ConnectorCode, XmlNode,ParentCompName,ChildCompName, ParentPrimKeyValues,ChildPrimKeyValues,ExtrafieldsDoc,LastLine);
            StoreWebData(ServiceCode, ConnectorCode,ChildCompName , ChildPrimKeyValues, '',XmlDoc, GuidIn,LastLine);
          UNTIL (CFWTranslationSetValue.NEXT = 0);
        END;
        ELSE BEGIN
          ChildCompName := CFWConnectorMapping.GetCompanyFromDocument(ServiceCode, ConnectorCode, XmlDoc);
          CFWConnectorMapping.GetPrimKeyFields(ServiceCode, ConnectorCode, XmlNode,ParentCompName,ChildCompName, ParentPrimKeyValues,ChildPrimKeyValues,ExtrafieldsDoc,LastLine);
          StoreWebData(ServiceCode, ConnectorCode, ChildCompName, ChildPrimKeyValues, '', XmlDoc, GuidIn,LastLine);
        END;
      END;
    END;

    PROCEDURE SaveXmlToBlob@1100525029(IFieldno@1100525001 : Integer;XmlDoc@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      Writestream@1100525002 : OutStream;
    BEGIN
      CreateOutStream(IFieldno,Writestream,TEXTENCODING::Windows);
      XmlDoc.Save(Writestream);
      MODIFY;
    END;

    [External]
    PROCEDURE SetIndexToPK@1100528350(Index@1100528300 : Integer);
    BEGIN
      CASE Index OF
        1: SETCURRENTKEY(PK1);
        2: SETCURRENTKEY(PK2);
        3: SETCURRENTKEY(PK3);
        4: SETCURRENTKEY(PK4);
        5: SETCURRENTKEY(PK5);
        6: SETCURRENTKEY(PK6);
        7: SETCURRENTKEY(PK7);
        8: SETCURRENTKEY(PK8);
        9: SETCURRENTKEY(PK9);
        10: SETCURRENTKEY(PK10);
        11: SETCURRENTKEY(PK11);
        12: SETCURRENTKEY(PK12);
        13: SETCURRENTKEY(PK13);
        14: SETCURRENTKEY(PK14);
        15: SETCURRENTKEY(PK15);
        16: SETCURRENTKEY(PK16);
        17: SETCURRENTKEY(PK17);
        18: SETCURRENTKEY(PK18);
        19: SETCURRENTKEY(PK19);
        20: SETCURRENTKEY(PK20);
      ELSE
        ERROR(Text005,Index);
      END;
    END;

    [External]
    PROCEDURE SetStatus@1100528303(StatusIn@1100528300 : Option;StatusText@1100528301 : Text);
    BEGIN
      ReRead;
      VALIDATE(Status,StatusIn);
      "Status Text" := COPYSTR(StatusText, 1, MAXSTRLEN("Status Text"));
      MODIFY(TRUE);
    END;

    [External]
    PROCEDURE StoreWebData@1100528319(ConsumedWebServiceCode@1100528305 : Code[20];ConnectorCode@1100528300 : Code[20];CompName@1100528301 : Text;PrimKeyValues@1100528302 : ARRAY [20] OF Text;OutboundData@1100528303 : Text;InBoundData@1100528304 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";GuidIn@1100528309 : GUID;LastLine@1100528311 : Boolean);
    VAR
      CFWConnectorDataLine@1100528306 : Record 11229460;
      OStream@1100528307 : OutStream;
      InboundDataDoc@1100528308 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CFWConnectorDataLine.GetInitRecordWithGuid(ConsumedWebServiceCode, ConnectorCode, CompName, PrimKeyValues, GuidIn);

      IF ((OutboundData <> '') AND (NOT CFWConnectorDataLine."Outbound Data".HASVALUE)) THEN
        CFWConnectorDataLine.SaveStringToBlob(CFWConnectorDataLine.FIELDNO("Outbound Data"), OutboundData);
      CFWConnectorDataLine."Inbound Data".CREATEOUTSTREAM(OStream);
      InBoundData.Save(OStream);
      CFWConnectorDataLine.VALIDATE("Last Line",LastLine);
      CFWConnectorDataLine.MODIFY(TRUE);
      CFWConnectorDataLine.SetStatus(CFWConnectorDataLine.Status::Extracted, '');
    END;

    [External]
    PROCEDURE ToggleSingleStep@1100528326(NewValue@1100528300 : Boolean);
    BEGIN
      MODIFYALL("Single Step", NewValue);
    END;

    [External]
    PROCEDURE UploadFileToBlob@1100528307(FieldNoIn@1100528300 : Integer;FieldCaption@1100528301 : Text;FileExtension@1100528302 : Text);
    VAR
      CFWConnectorManagement@1100528306 : Codeunit 11229291;
      FileManagement@1100528305 : Codeunit 419;
      ServerFile@1100528309 : File;
      IStream@1100528303 : InStream;
      OStream@1100528304 : OutStream;
      ServerFileName@1100528307 : Text;
      ServerTempFileName@1100528308 : Text;
    BEGIN
      IF ("File Name" = '') THEN BEGIN
        CFWConnectorManagement.SelectFile(STRSUBSTNO(Text002, FieldCaption), FileExtension, ServerTempFileName);
      END ELSE BEGIN
        ServerTempFileName := FileManagement.UploadFileSilent("File Name");
      END;
      ServerFile.OPEN(ServerTempFileName);
      ServerFile.CREATEINSTREAM(IStream);
      CreateOutStream(FieldNoIn, OStream,TEXTENCODING::Windows);
      COPYSTREAM(OStream, IStream);
      MODIFY(TRUE);
      ServerFile.CLOSE;
      ERASE(ServerTempFileName);
    END;

    [External]
    PROCEDURE DownloadBlobToFile@1100528345(FieldNoIn@1100528300 : Integer;FieldCaption@1100528301 : Text;FileExtension@1100528302 : Text);
    VAR
      CFWConnectorManagement@1100528306 : Codeunit 11229291;
      FileManagement@1100528305 : Codeunit 419;
      ServerFile@1100528309 : File;
      IStream@1100528303 : InStream;
      OStream@1100528304 : OutStream;
      ServerFileName@1100528307 : Text;
      ServerTempFileName@1100528308 : Text;
      HasValue@1100528310 : Boolean;
      TempBlob@1100528314 : TEMPORARY Record 99008535;
      ClientTempFileName@1100528311 : Text;
      TextString@1100528313 : Text;
    BEGIN
      IF IsSubConnector THEN
        EXIT;
      CreateInstream(FieldNoIn, IStream, HasValue,TEXTENCODING::Windows);
      TempBlob.Blob.CREATEOUTSTREAM(OStream, TEXTENCODING::Windows);
      COPYSTREAM(OStream, IStream);
      IF "File Name" = '' THEN BEGIN
        FileManagement.SetAllowNewFileInOpenDialog;
        "File Name" :=FileManagement.OpenFileDialog(STRSUBSTNO(Text002, FieldCaption),'',  FileManagement.GetToFilterText('', FileExtension));
        MODIFY(TRUE);
        END;
      FileManagement.BLOBExport4PS(TempBlob, "File Name", FALSE, FALSE);
    END;

    [External]
    PROCEDURE ViewBlob@1100528320(FieldNoIn@1100528300 : Integer);
    VAR
      CFWConnectorManagement@1100528303 : Codeunit 11229291;
      IStream@1100528302 : InStream;
      HasValue@1100528301 : Boolean;
    BEGIN
      CreateInstream(FieldNoIn, IStream, HasValue,TEXTENCODING::Windows);
      CFWConnectorManagement.ViewStream(HasValue, IStream)
    END;

    [External]
    PROCEDURE WriteBlobToFile@1100528331(FieldNoIn@1100528301 : Integer;FileExtension@1100528302 : Text);
    VAR
      HasValue@1100528306 : Boolean;
      ServerFile@1100528303 : File;
      IStream@1100528300 : InStream;
      OStream@1100528305 : OutStream;
      ServerFileName@1100528304 : Text;
    BEGIN
      IF ("File Name" = '') THEN BEGIN
        "File Name" := GetFileName(FileExtension);
      END;
      ServerFileName := "File Name";

      CreateInstream(FieldNoIn, IStream, HasValue,TEXTENCODING::Windows);
      ServerFile.CREATE(ServerFileName, TEXTENCODING::Windows);
      ServerFile.CREATEOUTSTREAM(OStream);
      COPYSTREAM(OStream, IStream);
      MODIFY(TRUE);

      ServerFile.CLOSE;
    END;

    [External]
    PROCEDURE WriteTableDataToBlob@1100528332(FieldNoIn@1100528301 : Integer);
    VAR
      CFWConnector@1100528300 : Record 11229353;
      Field@1100528308 : Record 2000000041;
      CFWConnectorManagement@1100528304 : Codeunit 11229291;
      FieldRef@1100528309 : FieldRef;
      OStream@1100528307 : OutStream;
      RecRef@1100528302 : RecordRef;
      DataLine@1100528310 : Text;
    BEGIN
      CFWConnector.GET("Service Code", "Connector Code");
      CFWConnector.TESTFIELD("Table No.");
      CFWConnector.TESTFIELD("Document Element");
      CLEAR("Outbound Data");

      IF ("Company Name" = '') THEN
        RecRef.OPEN(CFWConnector."Table No.", FALSE)
      ELSE
        RecRef.OPEN(CFWConnector."Table No.", FALSE, "Company Name");
      IF (NOT RecRef.FINDSET) THEN
        EXIT;

      CreateOutStream(FieldNoIn, OStream,TEXTENCODING::Windows);
      DataLine := GetFieldNames(CFWConnector."Table No.");
      CFWConnectorManagement.WriteStringToStream(DataLine, OStream);
      OStream.WRITETEXT;
      REPEAT
        Field.SETRANGE(TableNo, CFWConnector."Table No.");
        Field.SETFILTER(Class, '<>%1', Field.Class::FlowFilter);
        IF (Field.FINDSET) THEN BEGIN
         DataLine := '';
         REPEAT
            FieldRef := RecRef.FIELD(Field."No.");
            IF (DataLine = '') THEN
              DataLine := STRSUBSTNO('%1', FieldRef.VALUE)
            ELSE
              DataLine += STRSUBSTNO(';%1', FieldRef.VALUE);
          UNTIL (Field.NEXT = 0);
          CFWConnectorManagement.WriteStringToStream(DataLine, OStream);
          OStream.WRITETEXT;
        END;
      UNTIL (RecRef.NEXT = 0);
    END;

    [External]
    PROCEDURE OpenSessionCardPage@1100528337();
    VAR
      RecRef@1100528300 : RecordRef;
      PageUrl@1100528301 : Text;
      CFWConnector@1100528302 : Record 11229353;
    BEGIN
      CFWConnector.GET("Service Code","Connector Code");
      RecRef.OPEN(CFWConnector."Table No.");
      FindRecRef(RecRef);
      PageUrl := GETURL(CLIENTTYPE::Current,"Company Name",OBJECTTYPE::Page,0,RecRef);
      IF PageUrl <> '' THEN
        HYPERLINK(PageUrl)
      ELSE
        MESSAGE('No Lookup page defined for Table: %1',CFWConnector."Table No.");
    END;

    [External]
    PROCEDURE ChangeCulturePrimKeyValues@1100528329(VAR PrimKeyValuesInOut@1100528301 : ARRAY [20] OF Text);
    VAR
      CFWConnectorMapping@1100528300 : Record 11229354;
      Field@1100528302 : Record 2000000041;
      CFWConnectorManagement@1100528305 : Codeunit 11229291;
      SourceCultureInfo@1100528303 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      TargetCultureInfo@1100528304 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CFWConnectorMapping.SETRANGE("Service Code", "Service Code");
      CFWConnectorMapping.SETRANGE("Connector Code", "Connector Code");
      CFWConnectorMapping.SETFILTER("Primary Key Index", '<>0');
      CFWConnectorMapping.SETFILTER(Culture,'<>%1', '');
      IF (NOT CFWConnectorMapping.FINDSET) THEN
        EXIT;

      SourceCultureInfo := SourceCultureInfo.CultureInfo(CFWConnectorMapping.Culture);
      TargetCultureInfo := TargetCultureInfo.CurrentCulture();
      REPEAT
        CFWConnectorMapping.CALCFIELDS("Table No.");
        Field.GET(CFWConnectorMapping."Table No.", CFWConnectorMapping."Field No.");
        PrimKeyValuesInOut[CFWConnectorMapping."Primary Key Index"] :=
          CFWConnectorManagement.ChangeTextToCultureOLD20191101(Field.Type, PrimKeyValuesInOut[CFWConnectorMapping."Primary Key Index"],
            SourceCultureInfo, TargetCultureInfo);
      UNTIL (CFWConnectorMapping.NEXT = 0);
    END;

    [External]
    PROCEDURE CreateInstream@1100528302(FieldNoIn@1100528300 : Integer;VAR IStreamInOut@1100528301 : InStream;VAR HasValueInOut@1100528302 : Boolean;TextEncodingType@1100528303 : TextEncoding);
    BEGIN
      CASE FieldNoIn OF
        FIELDNO("Extra Fields"): BEGIN
          CALCFIELDS("Extra Fields");
          HasValueInOut := "Extra Fields".HASVALUE;
          "Extra Fields".CREATEINSTREAM(IStreamInOut, TextEncodingType);
        END;
        FIELDNO("Inbound Data"): BEGIN
          CALCFIELDS("Inbound Data");
          HasValueInOut := "Inbound Data".HASVALUE;
          "Inbound Data".CREATEINSTREAM(IStreamInOut, TextEncodingType);
        END;
        FIELDNO("Inbound Data External"): BEGIN
          CALCFIELDS("Inbound Data External");
          HasValueInOut := "Inbound Data External".HASVALUE;
          "Inbound Data External".CREATEINSTREAM(IStreamInOut, TextEncodingType);
        END;
        FIELDNO("Outbound Data"): BEGIN
          CALCFIELDS("Outbound Data");
          HasValueInOut := "Outbound Data".HASVALUE;
          "Outbound Data".CREATEINSTREAM(IStreamInOut, TextEncodingType);
        END;
        FIELDNO("Outbound Data External"): BEGIN
          CALCFIELDS("Outbound Data External");
          HasValueInOut := "Outbound Data External".HASVALUE;
          "Outbound Data External".CREATEINSTREAM(IStreamInOut, TextEncodingType);
        END;
        FIELDNO("Interface Data"): BEGIN
          CALCFIELDS("Interface Data");
          HasValueInOut := "Interface Data".HASVALUE;
          "Interface Data".CREATEINSTREAM(IStreamInOut, TextEncodingType);
        END;
      END;
    END;

    [External]
    PROCEDURE CreateOutStream@1100528308(FieldNoIn@1100528300 : Integer;VAR OStreamInOut@1100528301 : OutStream;TextEncodingType@1100528302 : TextEncoding);
    BEGIN
      CASE FieldNoIn OF
        FIELDNO("Extra Fields"):BEGIN
          CLEAR("Extra Fields");
          "Extra Fields".CREATEOUTSTREAM(OStreamInOut, TextEncodingType);
        END;
        FIELDNO("Inbound Data"):BEGIN
          CLEAR("Inbound Data");
          "Inbound Data".CREATEOUTSTREAM(OStreamInOut, TextEncodingType);
        END;
        FIELDNO("Inbound Data External"):BEGIN
          CLEAR("Inbound Data External");
          "Inbound Data External".CREATEOUTSTREAM(OStreamInOut, TextEncodingType);
        END;
        FIELDNO("Outbound Data"):BEGIN
          CLEAR("Outbound Data");
          "Outbound Data".CREATEOUTSTREAM(OStreamInOut, TextEncodingType);
        END;
        FIELDNO("Outbound Data External"):BEGIN
          CLEAR("Outbound Data External");
          "Outbound Data External".CREATEOUTSTREAM(OStreamInOut, TextEncodingType);
        END;
        FIELDNO("Interface Data"):BEGIN
          CLEAR("Interface Data");
          "Interface Data".CREATEOUTSTREAM(OStreamInOut, TextEncodingType);
        END;
      END;
    END;

    [External]
    PROCEDURE GetFieldNames@1100528342(TableNoIn@1100528301 : Integer) DataLineOut : Text;
    VAR
      Field@1100528300 : Record 2000000041;
      CFWConnectorManagement@1100528303 : Codeunit 11229291;
      FieldName@1100528302 : Text;
    BEGIN
      Field.SETRANGE(TableNo, TableNoIn);
      Field.SETFILTER(Class, '<>%1', Field.Class::FlowFilter);
      IF (NOT Field.FINDSET) THEN
        EXIT;

      REPEAT
        FieldName := CFWConnectorManagement.ConvertTextToXmlTagName(Field.FieldName);
        IF (DataLineOut = '') THEN
          DataLineOut := STRSUBSTNO('%1', FieldName)
        ELSE
          DataLineOut += STRSUBSTNO(';%1', FieldName);
      UNTIL (Field.NEXT = 0);
    END;

    [External]
    PROCEDURE GetFileName@1100528335(FileExtension@1100528302 : Text) FileNameOut : Text;
    VAR
      CFWConnector@1100528300 : Record 11229353;
    BEGIN
      CFWConnector.GET("Service Code", "Connector Code");
      FileNameOut := STRSUBSTNO('%1-%2-%3-%4.%5', "Service Code", "Connector Code", "Company Name",
        GetOptionValue(DATABASE::"CFW Connector", CFWConnector.FIELDNO(Direction), CFWConnector.Direction),
        FileExtension);
    END;

    [External]
    PROCEDURE GetOptionValue@1100528333(TableNoIn@1100528302 : Integer;FieldNoIn@1100528300 : Integer;OptionValueIn@1100528303 : Integer) OptionTextOut : Text;
    VAR
      OptionFieldTools@1100528306 : Codeunit 11012271;
    BEGIN
      OptionFieldTools.OptionValueToReadableOption3(TableNoIn, FieldNoIn, OptionValueIn, OptionTextOut);
    END;

    [External]
    PROCEDURE HandlePrimKeyRecRef@1100528325(VAR RecRefInOut@1100528300 : RecordRef) : Boolean;
    VAR
      CFWConnector@1100528301 : Record 11229353;
    BEGIN
      CFWConnector.GET("Service Code", "Connector Code");
      RecRefInOut.OPEN(CFWConnector."Table No.");

      FindRecRef(RecRefInOut);
      IF (RecRefInOut.ISEMPTY) THEN BEGIN
        IF (CFWConnector."Skip Insert") THEN
          EXIT(FALSE);
        ValidateRecRefFields(RecRefInOut);
        RecRefInOut.INSERT(TRUE);
      END ELSE BEGIN
        IF (CFWConnector."Skip Modify") THEN
          EXIT(FALSE);
        RecRefInOut.FINDFIRST;
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ProcessSchemaField@1100528316(ConsumedWebServiceCode@1100528303 : Code[20];ConnectorCode@1100528301 : Code[20];AttributeName@1100528302 : Text;AttributeType@1100528300 : Text);
    VAR
      CFWConnector@1100528304 : Record 11229353;
      CFWConnectorMapping@1100528305 : Record 11229354;
    BEGIN
      IF (NOT CFWConnector.GET(ConsumedWebServiceCode, ConnectorCode)) THEN BEGIN
        CFWConnector.INIT;
        CFWConnector.VALIDATE("Service Code", ConsumedWebServiceCode);
        CFWConnector.VALIDATE(Code, ConnectorCode);
        CFWConnector.VALIDATE(Description, COPYSTR(Text003, 1, MAXSTRLEN(CFWConnector.Description)));
        CFWConnector.INSERT(TRUE);
      END;

      CFWConnectorMapping.SETRANGE("Service Code", ConsumedWebServiceCode);
      CFWConnectorMapping.SETRANGE("Connector Code", ConnectorCode);
      CFWConnectorMapping.SETRANGE("Element Name", AttributeName);
      IF (NOT CFWConnectorMapping.FINDFIRST) THEN BEGIN
        CFWConnectorMapping.INIT;
        CFWConnectorMapping.VALIDATE("Service Code", ConsumedWebServiceCode);
        CFWConnectorMapping.VALIDATE("Connector Code", ConnectorCode);
        CFWConnectorMapping.VALIDATE("Element Name", AttributeName);
        CFWConnectorMapping.VALIDATE("Data Type", AttributeType);
        CFWConnectorMapping.INSERT(TRUE);
      END;
    END;

    PROCEDURE SetNamespaceManager@1100528317(VAR NamespaceManager@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";XmlDoc@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      NamespaceManager := NamespaceManager.XmlNamespaceManager(XmlDoc.XmlDocument.NameTable);
      NamespaceManager.AddNamespace('xs', 'http://www.w3.org/2001/XMLSchema');
    END;

    [External]
    PROCEDURE ValidateRecRefFields@1100528330(RecRefInOut@1100528300 : RecordRef);
    VAR
      PrimKeyValues@1100528301 : ARRAY [20] OF Text;
      Counter@1100528302 : Integer;
      KeyRef@1100528303 : KeyRef;
      FieldRef@1100528304 : FieldRef;
      CFWConnectorMapping@1100528305 : Record 11229354;
    BEGIN
      FillPrimKeyValues(PrimKeyValues, PK1,PK2,PK3,PK4,PK5,PK6,PK7,PK8,PK9,PK10,PK11,PK12,PK13,PK14,PK15,PK16,PK17,PK18,PK19,PK20);
      KeyRef := RecRefInOut.KEYINDEX(1);
      FOR Counter := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        CFWConnectorMapping.GetMappingByPrimKeyFieldNo("Service Code","Connector Code",Counter);
        FieldRef := KeyRef.FIELDINDEX(Counter);
        IF CFWConnectorMapping."Validate Field" THEN
          FieldRef.VALIDATE(FieldRef.VALUE);
      END;
    END;

    PROCEDURE CalculateRecID@1100528306();
    VAR
      TempRecRef@1100528300 : RecordRef;
      CFWConnector@1100528301 : Record 11229353;
    BEGIN
      CFWConnector.GET("Service Code","Connector Code");
      TempRecRef.OPEN(CFWConnector."Table No.",TRUE);
      FindRecRef(TempRecRef);
      Rec.RENAME("Service Code","Connector Code","Company Name",TempRecRef.RECORDID);
    END;

    [External]
    PROCEDURE CopyDataToExtraFields@1100528339(VAR ExtraFieldsDoc@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLDoc@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XMLDOMManagement4PS@1100525001 : Codeunit 11020220;
      CurrNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CFWConnectorMapping@1100525003 : Record 11229354;
      NewNode@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xpath@1100525007 : Text;
      CFWConnectorManagement@1100528300 : Codeunit 11229291;
      NodeName@1100528301 : Text;
      NodeText@1100528302 : Text;
    BEGIN
      IF (NOT CFWConnectorMapping.GetMappingByAction("Service Code","Connector Code", 'TOEXTRAFIELDS'))
      THEN
        EXIT;

      //add fields from data to extra fields
      CurrNode := ExtraFieldsDoc.FirstChild;
      REPEAT
        CASE CFWConnectorMapping."Element Name" OF
          'PK1' :BEGIN
            NodeName := 'PK1';
            NodeText := PK1;
          END;
          'PK2' :BEGIN
            NodeName := 'PK2';
            NodeText := PK2;
          END;
          'PK3' :BEGIN
            NodeName := 'PK3';
            NodeText := PK3;
          END;
          'PK4' :BEGIN
            NodeName := 'PK4';
            NodeText := PK4;
          END;
          'PK5' :BEGIN
            NodeName := 'PK5';
            NodeText := PK5;
          END;
          'PK6' :BEGIN
            NodeName := 'PK6';
            NodeText := PK6;
          END;
          'PK7' :BEGIN
            NodeName := 'PK7';
            NodeText := PK7;
          END;
          'PK8' :BEGIN
            NodeName := 'PK8';
            NodeText := PK8;
          END;
          'PK9' :BEGIN
            NodeName := 'PK9';
            NodeText := PK9;
          END;
          'PK10' :BEGIN
            NodeName := 'PK10';
            NodeText := PK10;
          END;
          'PK11' :BEGIN
            NodeName := 'PK11';
            NodeText := PK11;
          END;
          'PK12' :BEGIN
            NodeName := 'PK12';
            NodeText := PK12;
          END;
          'PK13' :BEGIN
            NodeName := 'PK13';
            NodeText := PK13;
          END;
          'PK14' :BEGIN
            NodeName := 'PK14';
            NodeText := PK14;
          END;
          'PK15' :BEGIN
            NodeName := 'PK15';
            NodeText := PK15;
          END;
          'PK16' :BEGIN
            NodeName := 'PK16';
            NodeText := PK16;
          END;
          'PK17' :BEGIN
            NodeName := 'PK17';
            NodeText := PK17;
          END;
          'PK18' :BEGIN
            NodeName := 'PK18';
            NodeText := PK18;
          END;
          'PK19' :BEGIN
            NodeName := 'PK19';
            NodeText := PK19;
          END;
          'PK20' :BEGIN
            NodeName := 'PK20';
            NodeText := PK20;
          END;
        ELSE
          //xpath := CFWConnectorManagement.LocalName(CFWConnectorMapping."Element Name");
          xpath := CFWConnectorMapping."Element Name";
          NodeName := CFWConnectorMapping."Formatting String";
          NodeText := CFWConnectorManagement.ReturnNodeTextWithError(XMLDoc,xpath, TRUE);
        END;
        XMLDOMManagement4PS.AddElement(CurrNode,NodeName,NodeText , '', NewNode);
      UNTIL (CFWConnectorMapping.NEXT = 0);
    END;

    [External]
    PROCEDURE IsChild@1100528344() Child : Boolean;
    BEGIN
      IF ("Company Name" <> '') THEN
        Child := TRUE;
    END;

    LOCAL PROCEDURE IsSubConnector@1100528347() : Boolean;
    VAR
      CFWConnector@1100528300 : Record 11229353;
    BEGIN
      CFWConnector.GET("Service Code","Connector Code");
      EXIT(CFWConnector.Type=CFWConnector.Type::SubConnector);
    END;

    BEGIN
    END.
  }
}

