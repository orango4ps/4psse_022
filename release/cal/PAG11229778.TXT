OBJECT Page 11229778 Estimate Offer Amount
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=AngebotsbetrÑge;
               ENU=Offer Amounts;
               NLD=Aanbiedingsbedragen;
               NOR=Tilbudsbelõp;
               SVE=Anbudsbelopp];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11072073;
    PageType=List;
    OnInit=BEGIN
             QuantityEditable := TRUE;
             OfferPriceEditable := TRUE;
             OfferAmountEditable := TRUE;
             OfferFixedEditable := TRUE;
             MarkupEditable := TRUE;
             MarginEditable := TRUE;
             SalesRemarkEditable := TRUE;
             UnitPriceEditable := TRUE;
             QtyPerUnitEditable := TRUE;
             UnitPriceFixedEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 CheckOnOpenPage;  //C055105
               END;

    OnAfterGetRecord=VAR
                       PartQuan@1100525001 : Decimal;
                     BEGIN
                       GetCumTotals(
                         CostHours,CostLabor,CostMat,CostSubc,CostPlant,CostSundry,
                         SalesHours,SalesLabor,SalesMat,SalesSubc,SalesPlant,SalesSundry);  //C037891

                       CostTotal := CostLabor + CostMat + CostSubc + CostPlant + CostSundry;
                       SalesTotal := SalesLabor + SalesMat + SalesSubc + SalesPlant + SalesSundry;

                       CheckSubEstimatePartLevelZero;

                       PartQuan := GetPartQuantity;
                       IF PartQuan <> 0 THEN BEGIN
                         CostPrice := ROUND(CostTotal/PartQuan);
                         SalesPrice := ROUND(SalesTotal/PartQuan);
                       END ELSE BEGIN
                         CostPrice := CostTotal;
                         SalesPrice := SalesTotal;
                       END;

                       GetSubEstTotals;

                       EstRec.GET("Estimate No.");
                       IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN BEGIN
                         "Markup %" := GetMarkup("Offer Price","Calculated Cost Price");
                         "Margin %" := GetMargin("Offer Price","Calculated Cost Price");
                       END ELSE BEGIN
                         "Markup %" := GetMarkup("Offer Price","Calculated Sales Price");
                         "Margin %" := GetMargin("Offer Price","Calculated Sales Price");
                       END;
                       GetUnitPrice;  //DP00686
                       HideSamevalue := (Level <> 0);  //DP00909
                       PartAmountFilled := GetStyleExpressionPartAmount;  //C036784
                     END;

    OnAfterGetCurrRecord=BEGIN
                           SetEditable;  //C033544
                         END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525035;1 ;ActionGroup;
                      CaptionML=[DEU=F&unktion;
                                 ENU=F&unctions;
                                 NLD=F&uncties;
                                 NOR=Fu&nksjon;
                                 SVE=F&unktion] }
      { 1100525028;2 ;Action    ;
                      Name=InitCostPrice;
                      CaptionML=[DEU=&Kostenpreis initialisieren;
                                 ENU=Initialize &Cost Price;
                                 NLD=&Kostprijs initialiseren;
                                 NOR=Initier &selvkost;
                                 SVE=Initiera &sjÑlvkostnadspris];
                      Promoted=Yes;
                      Image=CalculateCost;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(FALSE,FALSE,"Estimate No.",'');  //DP01315
                               END;
                                }
      { 1100485045;2 ;Action    ;
                      Name=InitSalesPrice;
                      CaptionML=[DEU=&Verkaufspreis initialisieren;
                                 ENU=Initialize &Sales Price;
                                 NLD=Verkoopprijs &initialiseren;
                                 NOR=Initier &salgspris;
                                 SVE=Initiera &fîrsÑljningspris];
                      Promoted=Yes;
                      Image=CalculateSalesTax;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(TRUE,FALSE,"Estimate No.",'');  //DP01315
                               END;
                                }
      { 1100409001;2 ;Action    ;
                      Name=CopyOfferPriceFromCost;
                      CaptionML=[DEU=Angebotspreis von kalkuliertem Kostenpreis kopieren;
                                 ENU=Copy Offer Price from Calculated Cost Price;
                                 NLD=Overnemen aanbiedingsprijs uit berekende kostprijs];
                      Promoted=Yes;
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(FALSE,TRUE,"Estimate No.",'');  //DP01315
                               END;
                                }
      { 1100525038;2 ;Action    ;
                      Name=CopyOfferPriceFromSales;
                      CaptionML=[DEU=öbernehmen Anfragepreis aus berechnetem VK-Ppreis;
                                 ENU=Copy Offer Price from Calculated Sales Price;
                                 NLD=Overnemen aanbiedingsprijs uit berekende verkoopprijs;
                                 NOR=Kopier tilbudspris fra estimert salgspris;
                                 SVE=Kopiera anbudspris frÜn berÑknat fîrsÑljningspris];
                      Promoted=Yes;
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(TRUE,TRUE,"Estimate No.",'');  //DP01315
                               END;
                                }
      { 111284606;2  ;Action    ;
                      Name=CopyOfferPriceIndexToUnitPrice;
                      CaptionML=[DEU=Einheitspreis aus Angebotspreisindex Åbernehmen;
                                 ENU=Copy Offer Price Index to Unit Price;
                                 NLD=Overnemen eenheidsprijs uit aanbiedingsprijsindex];
                      Image=CopyToTask;
                      OnAction=BEGIN
                                 CopyOfferPriceIndex("Estimate No.");
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525044;2 ;Action    ;
                      Name=UpdateOfferAmount;
                      CaptionML=[DEU=Angebotsbetrag/Integralen Einstands-/VK-Preis aktualisieren;
                                 ENU=Update Offer Amount/Full Cost/Sales Price;
                                 NLD=Aanbiedingsbedrag/Integrale kost-/verkoopprijs bijwerken;
                                 NOR=Oppdater tilbudsbelõp/full kost/salgspris;
                                 SVE=Uppdatera anbudsbelopp/full kostnad/fîrsÑljningspris];
                      Image=CostCenter;
                      OnAction=VAR
                                 EstimateUpdateMgt@1100525000 : Codeunit 11012229;
                               BEGIN
                                 IF "Estimate No." <> '' THEN
                                   EstimateUpdateMgt.UpdateFullCostSalesPrice("Estimate No.");
                               END;
                                }
      { 1100525011;2 ;Action    ;
                      Name=InitMargin;
                      CaptionML=[DEU=Marge initialisieren;
                                 ENU=Initialize Margin;
                                 NLD=Marge initialiseren];
                      Image=Start;
                      OnAction=BEGIN
                                 InitMargin;
                               END;
                                }
      { 1210190004;2 ;Action    ;
                      Name=UpdateMargin;
                      CaptionML=[DEU=Kollektiv Marge Ñndern;
                                 ENU=Update Margin collectively;
                                 NLD=Collectief wijzigen marge;
                                 NOR=Oppdater margin kollektivt;
                                 SVE=Uppdatera marginal kollektivt];
                      Image=Edit;
                      OnAction=BEGIN
                                 GlobalUpdateMargin;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525036;2 ;Action    ;
                      Name=AssignOfferFixed;
                      CaptionML=[DEU=Kollektiv zuordnen Anfragebetrag fixiert;
                                 ENU=Assign Offer fixed collectively;
                                 NLD=Collectief toekennen aanbiedingsbedrag gefixeerd;
                                 NOR=Tilordne faste tilbud kollektivt;
                                 SVE=Tilldela fasta anbud kollektivt];
                      Image=SelectLineToApply;
                      OnAction=BEGIN
                                 GlobalUpdateAskForOffer(TRUE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525037;2 ;Action    ;
                      Name=RemoveOfferFixed;
                      CaptionML=[DEU=Kollektiv aufheben Anfragebetrag fixiert;
                                 ENU=Remove Offer fixed collectively;
                                 NLD=Collectief opheffen aanbiedingsbedrag gefixeerd;
                                 NOR=Fjern faste tilbud kollektivt;
                                 SVE=Ta bort fasta anbud kollektivt];
                      Image=ReverseLines;
                      OnAction=BEGIN
                                 GlobalUpdateAskForOffer(FALSE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 111284605;2  ;Action    ;
                      Name=AssignUnitPriceFixed;
                      CaptionML=[DEU=StÅckpreis fixiert kollektiv zuweisen;
                                 ENU=Assign Unit Price Fixed Collectively;
                                 NLD=Collectief toekennen eenheidsprijs gefixeerd];
                      Image=SelectLineToApply;
                      OnAction=BEGIN
                                 GlobalUpdateUnitPriceFixed(TRUE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 111284604;2  ;Action    ;
                      Name=RemoveUnitPriceFixed;
                      CaptionML=[DEU=StÅckpreis fixiert kollektiv aufheben;
                                 ENU=Remove Unit Price Fixed Collectively;
                                 NLD=Collectief opheffen eenheidsprijs gefixeerd];
                      Image=ReverseLines;
                      OnAction=BEGIN
                                 GlobalUpdateUnitPriceFixed(FALSE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525039;1 ;ActionGroup;
                      CaptionML=[DEU=D&rucken;
                                 ENU=&Print;
                                 NLD=&Afdrukken;
                                 NOR=Skriv &ut;
                                 SVE=Skriv &ut] }
      { 1100525040;2 ;Action    ;
                      Name=PrintEstimate;
                      CaptionML=[DEU=Berichte kalkulieren;
                                 ENU=Estimate Reports;
                                 NLD=Rapporten &Calculatie];
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(0);
                               END;
                                }
      { 1100525041;2 ;Action    ;
                      Name=PrintSubEstimate;
                      CaptionML=[DEU=Teilkalkulationsberichte;
                                 ENU=Sub-Estimate Reports;
                                 NLD=Rapporten &Deelcalculatie;
                                 SVE=Delkalkyler, rapporter];
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(1);
                               END;
                                }
      { 1100525042;2 ;Action    ;
                      Name=PrintEstimatePart;
                      CaptionML=[DEU=Berichte &Kalkulationsteil;
                                 ENU=Estimate &Part Reports;
                                 NLD=Rapporten Calculatie-&onderdeel];
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(2);
                               END;
                                }
      { 1100525043;2 ;Action    ;
                      Name=PrintEstimateLine;
                      CaptionML=[DEU=Berichte &Kalkulationszeilen;
                                 ENU=Estimate &Lines Reports;
                                 NLD=Rapporten Calculatie&regels];
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(3);
                               END;
                                }
      { 1100485046;1 ;ActionGroup;
                      CaptionML=[DEU=Ve&rteilen VK-Preise;
                                 ENU=D&istribute;
                                 NLD=Ve&rdelen verkoopprijzen;
                                 NOR=D&istribuer;
                                 SVE=D&istribuera] }
      { 1100485047;2 ;Action    ;
                      Name=DistributeToLine;
                      ShortCutKey=Ctrl+Alt+F9;
                      CaptionML=[DEU=Zu verteilende Zeile;
                                 ENU=Line to Distribute;
                                 NLD=Te verdelen regel];
                      Image=Allocate;
                      OnAction=BEGIN
                                 DistributeLine;
                               END;
                                }
      { 1100485048;2 ;Action    ;
                      Name=DistributeOverSelection;
                      ShortCutKey=Ctrl+Alt+F10;
                      CaptionML=[DEU=Verteilen Åber Auswahl;
                                 ENU=Distribute over Selection;
                                 NLD=Verdelen over selectie;
                                 NOR=Distribuer over utvalg;
                                 SVE=Distribuera îver val];
                      Image=Allocate;
                      OnAction=BEGIN
                                 DistributeSelection;
                               END;
                                }
      { 1100485049;2 ;Action    ;
                      Name=ProcessSelection;
                      ShortCutKey=Ctrl+Alt+F11;
                      CaptionML=[DEU=Prozessauswahl;
                                 ENU=Process Selection;
                                 NLD=Verwerk selectie];
                      Image=Start;
                      OnAction=BEGIN
                                 ProcessSelection;
                               END;
                                }
      { 1100485050;2 ;Action    ;
                      Name=ResetSelection;
                      ShortCutKey=Ctrl+Alt+F12;
                      CaptionML=[DEU=Auswahl zurÅcksetzen;
                                 ENU=Reset Selection;
                                 NLD=Reset selectie];
                      Image=Cancel;
                      OnAction=BEGIN
                                 ResetSelection;
                               END;
                                }
      { 1100528903;  ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100528902;1 ;Action    ;
                      Name=EstimateLinesCost;
                      CaptionML=[DEU=Kalkulationszeilen (Kosten);
                                 ENU=Estimate Lines (Cost);
                                 NLD=Calculatieregels (kostprijs)];
                      Image=Cost;
                      OnAction=VAR
                                 EstimateManagementRTC@1100525004 : Codeunit 11130010;
                               BEGIN
                                 EstimateManagementRTC.EditViewEstimateLines("Estimate No.", "Sub-Estimate No.", "Part Group", Part, 0, FALSE);  //C033558
                               END;
                                }
      { 1100528904;1 ;Action    ;
                      Name=EstimateLinesSales;
                      CaptionML=[DEU=Bemerkungszeilen (Verkauf);
                                 ENU=Estimate Lines (Sales);
                                 NLD=Calculatieregels (verkoop)];
                      Image=Sales;
                      OnAction=VAR
                                 EstimateManagementRTC@1100525004 : Codeunit 11130010;
                               BEGIN
                                 EstimateManagementRTC.EditViewEstimateLines("Estimate No.", "Sub-Estimate No.", "Part Group", Part, 0, TRUE);  //C033558
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Group  ;
                GroupType=Group }

    { 1100525000;2;Field  ;
                Name=DefaultMargin;
                CaptionML=[DEU=Margen-% (Angebotspreis);
                           ENU=Margin % (Offer Price);
                           NLD=Marge % (aanbiedingsbedrag)];
                SourceExpr=EstRec."Margin % (Offer Price)";
                Editable=FALSE }

    { 1100525009;2;Field  ;
                Name=DefaultMarkup;
                CaptionML=[DEU=Markup-% (Angebotszeile);
                           ENU=Markup % (Offer Price);
                           NLD=Markup % (aanbiedingsbedrag)];
                SourceExpr=EstRec."Markup % (Offer Price)";
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                IndentationColumnName=Level;
                IndentationControls=Part;
                GroupType=Repeater }

    { 1210190000;2;Field  ;
                SourceExpr="Estimate No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190002;2;Field  ;
                SourceExpr="Estimate Description";
                Visible=FALSE;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                SourceExpr="Sub-Estimate No.";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideSamevalue }

    { 1000000000;2;Field  ;
                SourceExpr="Sub-Estimate Description";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideSamevalue }

    { 4   ;2   ;Field     ;
                SourceExpr=Part;
                Editable=FALSE;
                Style=Attention;
                StyleExpr=IsIllegalCode }

    { 6   ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=PartAmountFilled }

    { 1100409005;2;Field  ;
                SourceExpr="Description 2";
                Importance=Additional;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525008;2;Field  ;
                SourceExpr=Quantity;
                Editable=QuantityEditable;
                OnValidate=BEGIN
                             CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                             MODIFY;
                             IF GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part) THEN;  //get Calculated Amount
                             RefreshLine;
                           END;
                            }

    { 1100525010;2;Field  ;
                CaptionML=[DEU=Kum. Menge;
                           ENU=Cum.Quantity;
                           NLD=Cum. hoeveelheid];
                SourceExpr=GetPartQuantity }

    { 1100485007;2;Field  ;
                SourceExpr="Unit of Measure";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485009;2;Field  ;
                SourceExpr="Settlement Type";
                Visible=FALSE;
                Editable=FALSE }

    { 1100528901;2;Field  ;
                SourceExpr="Settlement Status";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525012;2;Field  ;
                CaptionML=[DEU=Stunden Einstandspreis;
                           ENU=Hours Cost Price;
                           NLD=Uren kostprijs;
                           NOR=Timer, selvkost;
                           SVE=Timmar, sjÑlvkostnadspris];
                SourceExpr=CostHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationCostPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",FALSE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100485011;2;Field  ;
                CaptionML=[DEU=Einstandspreis;
                           ENU=Cost Price;
                           NLD=Kostprijs;
                           NOR=Selvkost;
                           SVE=SjÑlvkostnadspris];
                SourceExpr=CostPrice;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationCostPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",FALSE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100485013;2;Field  ;
                CaptionML=[DEU=Einstandsbetrag;
                           ENU=Cost Amount;
                           NLD=Kosten bedrag;
                           NOR=Kostbelõp;
                           SVE=Kostnadsbelopp];
                SourceExpr=CostTotal;
                Editable=FALSE }

    { 1100525004;2;Field  ;
                CaptionML=[DEU=Berechneter Preis (Integraler Einstandspreis);
                           ENU=Calculated Price (Full Cost Price);
                           NLD=Berekende prijs (Integrale kostprijs);
                           NOR=Estimert pris (full selvkost);
                           SVE=BerÑknat pris (fullt sjÑlvkostnadspris)];
                SourceExpr="Calculated Cost Price";
                Editable=FALSE }

    { 1100525033;2;Field  ;
                CaptionML=[DEU=Berechneter Betrag (Integraler Einstandspreis);
                           ENU=Calculated Amount (Full Cost Price);
                           NLD=Berekend bedrag (Integrale kostprijs);
                           NOR=Estimert belõp (Full selvkost);
                           SVE=BerÑknat belopp (fullt sjÑlvkostnadspris)];
                SourceExpr="Calculated Cost Amount" }

    { 1100525006;2;Field  ;
                CaptionML=[DEU=Stunden Verkauf;
                           ENU=Hours Sales;
                           NLD=Uren verkoop;
                           NOR=Timer, salg;
                           SVE=Timmar, fîrsÑljning];
                SourceExpr=SalesHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationSalesPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100525002;2;Field  ;
                CaptionML=[DEU=Verkaufspreis;
                           ENU=Sales Price;
                           NLD=Verkoopprijs;
                           NOR=Salgspris;
                           SVE=FîrsÑljningspris];
                SourceExpr=SalesPrice;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationSalesPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100525031;2;Field  ;
                CaptionML=[DEU=Verkaufsbetrag;
                           ENU=Sales Amount;
                           NLD=Verkoopbedrag;
                           NOR=Salgsbelõp;
                           SVE=FîrsÑljningsbelopp];
                SourceExpr=SalesTotal;
                Editable=FALSE }

    { 1100485015;2;Field  ;
                CaptionML=[DEU=Berechneter Preis (Integraler Verkaufspreis);
                           ENU=Calculated Price ((Full Sales Price);
                           NLD=Berekende prijs (Integrale verkoopprijs);
                           NOR=Estimert pris (full salgspris);
                           SVE=BerÑknat pris (fullt fîrsÑljningspris)];
                SourceExpr="Calculated Sales Price";
                Editable=FALSE }

    { 1100485017;2;Field  ;
                CaptionML=[DEU=Berechneter Betrag (Integraler Verkaufsbetrag);
                           ENU=Calculated Amount ((Full Sales Amount);
                           NLD=Berekend bedrag (Integraal verkoopbedrag);
                           NOR=Estimert belõp (fullt salgsbelõp);
                           SVE=BerÑknat belopp (fullt fîrsÑljningsbelopp)];
                SourceExpr="Calculated Sales Amount";
                Editable=FALSE }

    { 1100485026;2;Field  ;
                SourceExpr="Transfer to Installment M.";
                Visible=FALSE }

    { 1100528601;2;Field  ;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 1100485019;2;Field  ;
                SourceExpr="Offer Price";
                Editable=OfferPriceEditable;
                OnValidate=BEGIN
                             EstRec.GET("Estimate No.");
                             IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN BEGIN
                               "Markup %" := GetMarkup("Offer Price","Calculated Cost Price");
                               "Margin %" := GetMargin("Offer Price","Calculated Cost Price");
                             END ELSE BEGIN
                               "Markup %" := GetMarkup("Offer Price","Calculated Sales Price");
                               "Margin %" := GetMargin("Offer Price","Calculated Sales Price");
                             END;
                             RefreshLine;
                           END;
                            }

    { 1100528600;2;Field  ;
                SourceExpr="Offer Price (FCY)";
                Visible=FALSE;
                OnValidate=BEGIN
                             VALIDATE("Offer Price");
                           END;
                            }

    { 1100485021;2;Field  ;
                SourceExpr="Offer Amount";
                Editable=OfferAmountEditable;
                OnValidate=BEGIN
                             RefreshLine;
                           END;
                            }

    { 1100528602;2;Field  ;
                SourceExpr="Offer Amount (FCY)";
                Visible=FALSE;
                OnValidate=BEGIN
                             RefreshLine;
                           END;
                            }

    { 1100525014;2;Field  ;
                SourceExpr="Markup %";
                Editable=MarkupEditable;
                OnValidate=BEGIN
                             EstRec.GET("Estimate No.");
                             IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
                               "Offer Price" := ROUND("Calculated Cost Price" + ("Calculated Cost Price" * "Markup %" / 100 ))
                             ELSE
                               "Offer Price" := ROUND("Calculated Sales Price" + ("Calculated Sales Price" * "Markup %" / 100 ));
                             VALIDATE("Offer Price");
                             //assign amount after validate price, because difference (Rec/xRec) based on amount is assigned to lower parts in validate above
                             "Offer Amount" := "Offer Price" * GetPartQuantity;
                             RefreshLine;
                           END;
                            }

    { 1100485023;2;Field  ;
                SourceExpr="Margin %";
                Editable=MarginEditable;
                OnValidate=BEGIN
                             IF "Margin %" >= 100 THEN
                               ERROR(Text011, FIELDCAPTION("Margin %"), 100);
                             EstRec.GET("Estimate No.");
                             IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
                               "Offer Price" := ROUND("Calculated Cost Price" / (1 - "Margin %" / 100))
                             ELSE
                               "Offer Price" := ROUND("Calculated Sales Price" / (1 - "Margin %" / 100));
                             VALIDATE("Offer Price");
                             //assign amount after validate price, because difference (Rec/xRec) based on amount is assigned to lower parts in validate above
                             "Offer Amount" := "Offer Price" * GetPartQuantity;
                             RefreshLine;
                           END;
                            }

    { 1100485040;2;Field  ;
                SourceExpr="Offer fixed";
                Editable=OfferFixedEditable;
                OnValidate=BEGIN
                             OfferfixedOnAfterValidate;
                           END;
                            }

    { 1100529400;2;Field  ;
                SourceExpr="Exclude Additional Costs";
                Visible=FALSE;
                OnValidate=BEGIN
                             RefreshLine;
                           END;
                            }

    { 1100485003;2;Field  ;
                SourceExpr="Sales Comment";
                Importance=Additional;
                Editable=SalesRemarkEditable }

    { 1100409006;2;Field  ;
                SourceExpr="Quantity per Unit";
                Editable=QtyPerUnitEditable;
                OnValidate=BEGIN
                             GetUnitPrice;  //DP00686
                             RefreshLine;
                           END;
                            }

    { 1100409004;2;Field  ;
                SourceExpr="Unit of Qty per Unit" }

    { 1100409000;2;Field  ;
                CaptionML=[DEU=Einstandspreis Index;
                           ENU=Cost Price Index;
                           NLD=Kostprijsindex;
                           NOR=Selvkostprisindeks;
                           SVE=SjÑlvkostnadsprisindex];
                SourceExpr=CostPriceIndex;
                Editable=FALSE }

    { 1100409002;2;Field  ;
                CaptionML=[DEU=Verkaufspreisindex;
                           ENU=Sales Price Index;
                           NLD=Verkoopprijsindex;
                           NOR=Salgspris indeks;
                           SVE=FîrsÑljningsprisindex];
                SourceExpr=SalesPriceIndex;
                Editable=FALSE }

    { 1100528900;2;Field  ;
                SourceExpr="Offer Price Index";
                OnValidate=BEGIN
                             //C036026
                             VALIDATE("Offer Price", ROUND("Quantity per Unit" * "Offer Price Index", 0.01));
                             RefreshLine;
                           END;
                            }

    { 1100529600;2;Field  ;
                SourceExpr="Rate Code";
                Visible=FALSE;
                Editable=FALSE }

    { 111284601;2;Field   ;
                SourceExpr="Unit Price";
                Editable=UnitPriceEditable;
                OnValidate=BEGIN
                             RefreshLine;
                           END;
                            }

    { 111284602;2;Field   ;
                SourceExpr="Total Unit Price" }

    { 111284603;2;Field   ;
                SourceExpr="Unit Price Fixed";
                Editable=UnitPriceFixedEditable;
                OnValidate=BEGIN
                             UnitPriceFixedOnAfterValidate;
                           END;
                            }

    { 1100525003;0;Container;
                ContainerType=FactBoxArea }

    { 1100525007;1;Part   ;
                SubPageLink=Estimate No.=FIELD(Estimate No.),
                            Sub-Estimate No.=FIELD(Sub-Estimate No.);
                PagePartID=Page11229316;
                PartType=Page }

    { 1100525005;1;Part   ;
                SubPageLink=Estimate No.=FIELD(Estimate No.),
                            Sub-Estimate No.=FIELD(Sub-Estimate No.);
                PagePartID=Page11229317;
                PartType=Page }

  }
  CODE
  {
    VAR
      Text002@1100485023 : TextConst 'DEU=Zuerst Zeilen wÑhlen.;ENU=First select Lines.;NLD=Selecteer eerst regels.;NOR=Velg rader fõrst.;SVE=VÑlj fîrst Rader.';
      Text004@100485027 : TextConst 'DEU=Erst 1 Zeile auswÑhlen.;ENU=First select 1 Line.;NLD=Selecteer eerst 1 regel.;NOR=Velg fõrst 1 rad;SVE=VÑlj fîrst 1 rad';
      Text005@1100485033 : TextConst 'DEU=Verteilen nicht mîglich durch Auswahl von unterliegenden Teilen.;ENU="Distribution not possible due to selection of Parts. ";NLD=Verdelen onmogelijk door selectie van onderliggende onderdelen.;NOR=Distribusjon ikke mulig pÜ grunn av valgte deler.;SVE="Distribution ej mîjlig pÜ grund av valda delar. "';
      Text006@1100485034 : TextConst 'DEU=Es wurde noch keine Zeile ausgewÑhlt, die auf Null gestellt werden muss.;ENU=No Line selected to be set zo zero.;NLD=Er is nog geen regel geselecteerd die op nul gesteld moet worden.;NOR=Ingen valgt rad kan vëre satt til null.;SVE=Ingen vald rad kan anges som noll.';
      Text007@1100485035 : TextConst 'DEU=Es wurde noch nicht ausgewÑhlt, worÅber der Betrag verteilt werden muss.;ENU=No selection made to divide amount.;NLD=Er is nog geen selectie gemaakt waarover het bedrag verdeeld moet worden.;NOR=Ingen valg er gjort for deling av belõp.;SVE=Inget val har gjorts fîr delning av belopp.';
      Text008@1100485036 : TextConst 'DEU=Es wurde bereits eine zu verteilende Zeile ausgewÑhlt.;ENU=Already Lines selected to divide.;NLD=Er is al een te verdelen regel geselecteerd.;NOR=Rader er allerede valgt for deling.;SVE=Rader har redan valts fîr delning.';
      Text009@1100485037 : TextConst 'DEU=Es wurde bereits eine ''Zu verteilen Åber''- Auswahl ausgefÅhrt.;ENU=Already selection made for dividing.;NLD=Er is al een te verdelen over selectie gemaakt.;NOR=Et valg er allerede gjort for deling.;SVE=Ett val har redan gjorts fîr delning.';
      Text011@1100525014 : TextConst 'DEU=%1 muss kleiner als %2 sein;ENU=%1 must be smaller than %2;NLD=%1 moet kleiner zijn dan %2;NOR=%1 mÜ vëre mindre enn %2;SVE=%1 mÜste vara mindre Ñn %2';
      Text012@1100525022 : TextConst 'DEU=Nicht alle Anfragepreise wurden Åbernommen, weil einige Anfragepreise fixiert sind.;ENU=Not all Offer Prices are copied because some Offer Prices are fixed.;NLD=Niet alle aanbiedingsprijzen zijn overgenomen omdat enkele aanbiedingsprijzen gefixeerd zijn.;NOR=Visse tilbudspriser kan ikke kopieres ettersom de er faste.;SVE=Vissa anbudspriser kan inte kopieras eftersom de Ñr fasta.';
      Text013@1100409001 : TextConst 'DEU=Warnung: Dieser Kalkulation fehlen einige Zwischenebenen (%1). Mîglicherweise funktioniert die VerkaufspreisfunktionalitÑt deshalb nicht.;ENU=Warning: This Estimate lacks some intermediate levels (%1). The Sales Price functionality may therefore not work.;NLD=Let op: Deze calculatie mist tussenliggende onderdeelniveaus (%1). De functionaliteit t.b.v. verkoopprijzen kan hierdoor niet correct verlopen.;NOR=Advarsel: Denne kalkylen mangler noen mellomnivÜer. Det kan derfor hende at salgsprisfunksjonaliteten ikke fungerer som den skal.';
      EstRec@1100525038 : Record 11012151;
      EstPartRec@1100525037 : Record 11072073;
      TempEstPartRec1@1100525036 : TEMPORARY Record 11072073;
      TempEstPartRec2@1100525035 : TEMPORARY Record 11072073;
      SubEstTotCosts@1100525034 : Decimal;
      SubEstTotSales@1100525033 : Decimal;
      SubEstTotOffer@1100525032 : Decimal;
      SubEstTotMargin@1100525031 : Decimal;
      SubEstTotCostPrice@1100525030 : Decimal;
      SubEstTotSalesPrice@1100525029 : Decimal;
      SubEstTotOfferPrice@1100525028 : Decimal;
      SubEstTotMarkup@1100525027 : Decimal;
      Selection2@1100525025 : Boolean;
      Selection1@1100525024 : Boolean;
      SumSheetCost@1100525023 : Code[10];
      SumSheetCostDesc@1100525021 : Text[50];
      SumSheetSales@1100525020 : Code[10];
      SumSheetSalesDesc@1100525019 : Text[50];
      CostHours@1100525016 : Decimal;
      CostLabor@1100525015 : Decimal;
      CostMat@1100525013 : Decimal;
      CostSubc@1100525012 : Decimal;
      CostPlant@1100525011 : Decimal;
      CostSundry@1100525010 : Decimal;
      CostTotal@1100525009 : Decimal;
      SalesHours@1100525008 : Decimal;
      SalesLabor@1100525007 : Decimal;
      SalesMat@1100525006 : Decimal;
      SalesSubc@1100525005 : Decimal;
      SalesPlant@1100525004 : Decimal;
      SalesSundry@1100525003 : Decimal;
      SalesTotal@1100525002 : Decimal;
      CostPrice@1100525001 : Decimal;
      SalesPrice@1100525000 : Decimal;
      QuantityEditable@1100528900 : Boolean INDATASET;
      MarginEditable@1100525049 : Boolean INDATASET;
      OfferPriceEditable@1100525048 : Boolean INDATASET;
      OfferAmountEditable@1100525047 : Boolean INDATASET;
      OfferFixedEditable@1100525046 : Boolean INDATASET;
      MarkupEditable@1100525045 : Boolean INDATASET;
      SalesRemarkEditable@1100525044 : Boolean INDATASET;
      IsIllegalCode@1100525039 : Boolean INDATASET;
      CostPriceIndex@1100409000 : Decimal;
      SalesPriceIndex@1100409002 : Decimal;
      HideSamevalue@1100525050 : Boolean INDATASET;
      PartAmountFilled@1100529900 : Boolean INDATASET;
      UnitPriceFixedEditable@111284600 : Boolean INDATASET;
      UnitPriceEditable@111284601 : Boolean INDATASET;
      QtyPerUnitEditable@111284602 : Boolean INDATASET;
      Text014@1100529600 : TextConst 'DEU=Markieren Sie zuerst die DatensÑtze mit Ctrl+F1;ENU=First select line(s).;NLD=Selecteer eerst regel(s).;NOR=Velg rad(er) fõrst.;SVE=VÑlj fîrst rad(er).';

    PROCEDURE GetSubEstTotals@1210190001();
    VAR
      EstPartRec@1100485002 : Record 11072073;
      CumQuan@1100525000 : Decimal;
    BEGIN
      SubEstTotCosts := 0;
      SubEstTotSales := 0;
      SubEstTotOffer := 0;
      SubEstTotMargin := 0;
      SubEstTotCostPrice :=0;
      SubEstTotSalesPrice :=0;
      SubEstTotOfferPrice :=0;
      SubEstTotMarkup := 0;

      EstRec.GET("Estimate No.");

      //DP00381.sn
      EstPartRec.SETRANGE("Estimate No.", "Estimate No.");
      EstPartRec.SETRANGE(Level, 0);
      IF EstPartRec.FINDSET THEN BEGIN
        REPEAT
          CumQuan := EstPartRec.GetPartQuantity;
          SubEstTotCosts := SubEstTotCosts + EstPartRec."Calculated Cost Price" * CumQuan;
          SubEstTotCostPrice := SubEstTotCostPrice + EstPartRec."Calculated Cost Price";

          SubEstTotSales := SubEstTotSales + EstPartRec."Calculated Sales Price" * CumQuan;
          SubEstTotSalesPrice := SubEstTotSalesPrice + EstPartRec."Calculated Sales Price";

          SubEstTotOffer := SubEstTotOffer + EstPartRec."Offer Price" * CumQuan;
          SubEstTotOfferPrice := SubEstTotOfferPrice + EstPartRec."Offer Price";
        UNTIL EstPartRec.NEXT = 0;
      END;
      //DP00381.en

      SubEstTotMargin := GetMargin(SubEstTotOfferPrice,SubEstTotCostPrice);
      SubEstTotMarkup := GetMarkup(SubEstTotOfferPrice,SubEstTotCostPrice);
    END;

    PROCEDURE RunFormCalculationCostPrice@1100525001();
    VAR
      EstLineRec@1100525000 : Record 11072072;
    BEGIN
      EstLineRec.FILTERGROUP(4);  //C041093
      EstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", "Part Group");
      EstLineRec.SETRANGE(Part, Part);
      EstLineRec.FILTERGROUP(0);
      EstLineRec."Estimate No." := "Estimate No.";  //set estimate for hide zerolines (subform)
      PAGE.RUNMODAL(PAGE::"Estimate Line Cost", EstLineRec);
    END;

    PROCEDURE RunFormCalculationSalesPrice@1100525002();
    VAR
      EstLineRec@1100525000 : Record 11072072;
    BEGIN
      EstLineRec.FILTERGROUP(4);  //C041093
      EstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", "Part Group");
      EstLineRec.SETRANGE(Part, Part);
      EstLineRec.FILTERGROUP(0);
      EstLineRec."Estimate No." := "Estimate No.";  //set estimate for hide zerolines (subform)
      PAGE.RUNMODAL(PAGE::"Estimate Line Sales", EstLineRec);
    END;

    PROCEDURE CheckDateTimeAndRecalculate@1100525000(iEstimate@1100525003 : Code[20];iSubEstimate@1100525006 : Code[20];iSales@1100525004 : Boolean;iAdjustOfferPrice@1100525005 : Boolean);
    VAR
      SummarySheet@1100525001 : Record 11012172;
    BEGIN
      EstRec.GET(iEstimate);
      SummarySheet.SETRANGE("Estimate No.", iEstimate);
      SummarySheet.SETRANGE("Sub-Estimate No.", iSubEstimate);
      IF NOT SummarySheet.FINDFIRST THEN BEGIN
        SummarySheet.SETFILTER("Sub-Estimate No.", '%1', '');
        IF NOT SummarySheet.FINDFIRST THEN EXIT;
      END;
      IF EstRec."Last Date Modified" > SummarySheet."Last Date Modified" THEN BEGIN
        CallReport(iSales,iAdjustOfferPrice,iEstimate,iSubEstimate);  //DP01315
      END ELSE BEGIN
        IF EstRec."Last Date Modified" = SummarySheet."Last Date Modified" THEN BEGIN
          IF EstRec."Last Time Modified" > SummarySheet."Last Time Modified" THEN BEGIN
            CallReport(iSales,iAdjustOfferPrice,iEstimate,iSubEstimate);  //DP01315
          END;
        END;
      END;
    END;

    PROCEDURE CallReport@1100525019(iSales@1100525000 : Boolean;iAdjustOfferPrice@1100525004 : Boolean;iEstimate@1100525003 : Code[20];iSubEstimate@1100525007 : Code[20]);
    VAR
      EstRec@1100525006 : Record 11012151;
      SubEstRec@1100525005 : Record 11072074;
      EstlineRec@1100525002 : Record 11072072;
      OpenBudgetReport@1100525001 : Report 11229768;
    BEGIN
      //DP01315.sn
      //function also called for factbox with totals of EstimatePart
      EstRec.GET(iEstimate);

      SubEstRec.SETRANGE("Estimate No.", iEstimate);
      SubEstRec.SETFILTER("Sub-Estimate No.", iSubEstimate);
      //DP01315.en
      IF iSales THEN
        SubEstRec.SETFILTER("Summary (Sales)" , '<>%1', '')
      ELSE
        SubEstRec.SETFILTER("Summary (Cost)" , '<>%1', '');
      IF NOT SubEstRec.FINDFIRST THEN BEGIN
        OpenBudgetReport.USEREQUESTPAGE := FALSE;
        IF iSales THEN BEGIN
          EstRec.TESTFIELD("Summary (Sales)");
          OpenBudgetReport.SetSelection(EstRec."No.", EstRec."Summary (Sales)", iAdjustOfferPrice);
        END ELSE BEGIN
          EstRec.TESTFIELD("Summary (Cost)");
          OpenBudgetReport.SetSelection(EstRec."No.", EstRec."Summary (Cost)", iAdjustOfferPrice);
        END;
        EstlineRec.SETRANGE("Estimate No.", EstRec."No.");
        OpenBudgetReport.SETTABLEVIEW(EstlineRec);
        OpenBudgetReport.RUNMODAL;
      END ELSE BEGIN
        SubEstRec.SETRANGE("Summary (Sales)");
        SubEstRec.SETRANGE("Summary (Cost)");
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            CLEAR(OpenBudgetReport);
            OpenBudgetReport.USEREQUESTPAGE := FALSE;
            IF iSales THEN BEGIN
              SubEstRec.TESTFIELD("Summary (Sales)");
              OpenBudgetReport.SetSelection(SubEstRec."Estimate No.", SubEstRec."Summary (Sales)", iAdjustOfferPrice);
            END ELSE BEGIN
              SubEstRec.TESTFIELD("Summary (Cost)");
              OpenBudgetReport.SetSelection(SubEstRec."Estimate No.", SubEstRec."Summary (Cost)", iAdjustOfferPrice);
            END;
            EstlineRec.SETRANGE("Estimate No.", SubEstRec."Estimate No.");
            EstlineRec.SETRANGE("Sub-Estimate No.", SubEstRec."Sub-Estimate No.");
            OpenBudgetReport.SETTABLEVIEW(EstlineRec);
            OpenBudgetReport.RUNMODAL;
          UNTIL SubEstRec.NEXT = 0;
        END;
      END;

      IF iAdjustOfferPrice THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", EstRec."No.");
        EstPartRec.SETRANGE(EstPartRec."Offer fixed", TRUE);
        IF NOT EstPartRec.ISEMPTY THEN
          MESSAGE(Text012);
      END;
    END;

    PROCEDURE GetSummary@1100525003();
    VAR
      SummarySheet@1100525001 : Record 11012172;
    BEGIN
      //DP00381
      IF NOT EstRec.GET("Estimate No.") THEN EstRec.INIT;
      SumSheetCost := EstRec."Summary (Cost)";
      SumSheetSales := EstRec."Summary (Sales)";
      IF NOT SummarySheet.GET("Estimate No.", SumSheetCost) THEN SummarySheet.INIT;
      SumSheetCostDesc := SummarySheet.Description;
      IF NOT SummarySheet.GET("Estimate No.", SumSheetSales) THEN SummarySheet.INIT;
      SumSheetSalesDesc := SummarySheet.Description;
    END;

    PROCEDURE ValidateSummarySales@1100525004();
    VAR
      SummarySheet@1100525000 : Record 11012172;
    BEGIN
      IF SumSheetSales <> '' THEN BEGIN
        SummarySheet.GET("Estimate No.", SumSheetSales);
        SumSheetSalesDesc := SummarySheet.Description;
      END;
      EstRec.GET("Estimate No.");
      EstRec."Summary (Sales)" := SumSheetSales;
      EstRec.MODIFY;
    END;

    PROCEDURE ValidateSummaryCost@1100525006();
    VAR
      SummarySheet@1100525001 : Record 11012172;
    BEGIN
      IF SumSheetCost <> '' THEN BEGIN
        SummarySheet.GET("Estimate No.", SumSheetCost);
        SumSheetCostDesc := SummarySheet.Description;
      END;
      EstRec.GET("Estimate No.");
      EstRec."Summary (Cost)" := SumSheetCost;
      EstRec.MODIFY;
    END;

    PROCEDURE LookupSummarySales@1100525005();
    VAR
      SummarySheet@1100525000 : Record 11012172;
    BEGIN
      SummarySheet.SETRANGE("Estimate No.","Estimate No.");
      SummarySheet.SETFILTER("Sub-Estimate No.", '%1', '');
      SummarySheet."Estimate No." := "Estimate No.";
      SummarySheet.Summary := SumSheetSales;
      IF PAGE.RUNMODAL(0, SummarySheet) = ACTION::LookupOK THEN BEGIN
        SumSheetSales := SummarySheet.Summary;
        ValidateSummarySales;
      END;
    END;

    PROCEDURE LookupSummaryCost@1100525007();
    VAR
      SummarySheet@1100525000 : Record 11012172;
    BEGIN
      SummarySheet.SETRANGE("Estimate No.","Estimate No.");
      SummarySheet.SETFILTER("Sub-Estimate No.", '%1', '');
      SummarySheet."Estimate No." := "Estimate No.";
      SummarySheet.Summary := SumSheetCost;
      IF PAGE.RUNMODAL(0, SummarySheet) = ACTION::LookupOK THEN BEGIN
        SumSheetCost := SummarySheet.Summary;
        ValidateSummaryCost;
      END;
    END;

    PROCEDURE GlobalUpdateAskForOffer@1100485000(lvAction@1100525000 : Boolean);
    VAR
      lvText001@1100485001 : TextConst 'DEU=Zuerst Zeile(n) markieren;ENU=First select line(s);NLD=Selecteer eerst regel(s);NOR=Velg rad(er) fõrst;SVE=VÑlj rad(er) fîrst';
      EstPartRec@1100525001 : Record 11072073;
    BEGIN
      EstPartRec.COPY(Rec);
      WITH EstPartRec DO BEGIN
        CurrPage.SETSELECTIONFILTER(EstPartRec);
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;
        REPEAT
          VALIDATE("Offer fixed", lvAction);
          MODIFY(TRUE);
          IF "Offer fixed" = FALSE THEN
            CheckOfferFixedUpwards(EstPartRec);
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetFilterPrintDoc@1100485002(lvAction@1100485000 : Integer);
    VAR
      EstPartRec@1100485002 : Record 11072073;
      PrintDoc@1100485001 : Codeunit 229;
    BEGIN
      EstPartRec."Estimate No." := "Estimate No.";
      PrintDoc.PrintEstimateNEW(EstPartRec, lvAction);   //DP00381
    END;

    PROCEDURE GlobalUpdateMargin@1210190000();
    VAR
      EstPartRec@1210190000 : Record 11072073;
      MarginReport@1210190001 : Report 11012173;
      UpdateMargin@1210190006 : Boolean;
      UpdateMarkup@1210190007 : Boolean;
      varMethod@1210190005 : 'Replace,Add,Increase';
      varPerc@1210190002 : Decimal;
      NewPerc@1210190004 : Decimal;
      BasePerc@1210190008 : Decimal;
    BEGIN
      //skip filter on EstPartRec in report; use marked lines
      EstPartRec.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstPartRec);

      MarginReport.RUNMODAL;
      MarginReport.GetRequestOptions(UpdateMargin, UpdateMarkup, varMethod, varPerc);
      IF (UpdateMargin = FALSE) AND (UpdateMarkup = FALSE) THEN EXIT;

      IF EstPartRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.GET(EstPartRec."Estimate No.");
          EstPartRec.TESTFIELD("Offer fixed", FALSE);

          IF UpdateMargin THEN
            BasePerc := EstPartRec."Margin %";
          IF UpdateMarkup THEN
            BasePerc := EstPartRec."Markup %";
          CASE varMethod OF
            varMethod::Replace:
              NewPerc := varPerc;
            varMethod::Add:
              NewPerc := BasePerc + varPerc;
            varMethod::Increase:
              NewPerc := BasePerc * (100+varPerc)/100;
          END;
          IF NewPerc < 0 THEN NewPerc := 0;
          IF NewPerc > 100 THEN NewPerc := 100;
          IF UpdateMargin THEN BEGIN
            EstPartRec.VALIDATE("Margin %", NewPerc);
            //copy from OnValidate formfield Margin %":
            IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Cost Price" / (1 - EstPartRec."Margin %" / 100))
            ELSE
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Sales Price" / (1 - EstPartRec."Margin %" / 100));
          END;
          IF UpdateMarkup THEN BEGIN
            EstPartRec.VALIDATE("Markup %", NewPerc);
            //copy from OnValidate formfield Markup %":   //C019456
            IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
              EstPartRec."Offer Price" :=
                ROUND(EstPartRec."Calculated Cost Price" + (EstPartRec."Calculated Cost Price" * EstPartRec."Markup %" / 100))
            ELSE
              EstPartRec."Offer Price" :=
                ROUND(EstPartRec."Calculated Sales Price" + (EstPartRec."Calculated Sales Price" * EstPartRec."Markup %" / 100));
          END;
          EstPartRec.VALIDATE("Offer Price");
          EstPartRec."Offer Amount" := EstPartRec."Offer Price" * EstPartRec.GetPartQuantity;
          EstPartRec.CalculateOfferPriceIndex;  //C036026
          EstPartRec.MODIFY;
        UNTIL EstPartRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE OfferfixedOnAfterValidate@19008780();
    BEGIN
      CheckOfferFixedUpwards(Rec);
      CheckOfferFixedUpwards1(Rec);

      SetEditable;  //C033544
      RefreshLine;  //show result function ProcessPartFields
    END;

    PROCEDURE WarnForIllegalCode@1100409000(IEstimateNo@1100409000 : Code[20]);
    VAR
      EstPartRec@1100525001 : Record 11072073;
      FormatManagement@1100525000 : Codeunit 11012022;
    BEGIN
      EstPartRec.SETRANGE("Estimate No.", IEstimateNo);
      IF EstPartRec.FINDSET THEN BEGIN
        REPEAT
          IF FormatManagement.IsIllegalCode(EstPartRec.Part) THEN BEGIN
            MESSAGE(Text013, EstPartRec.Part); //C055105
            EXIT;
          END;
        UNTIL EstPartRec.NEXT = 0;
      END;
    END;

    PROCEDURE ResetSelection@1100525011();
    BEGIN
      Selection1 := FALSE;
      Selection2 := FALSE;
      TempEstPartRec1.RESET;
      TempEstPartRec2.RESET;
      TempEstPartRec1.DELETEALL;
      TempEstPartRec2.DELETEALL;
    END;

    PROCEDURE ProcessSelection@1100525013();
    VAR
      lvEstPartRec@1100525005 : Record 11072073;
      TempEstPartRec3@1100525004 : TEMPORARY Record 11072073;
      lvBaseAmount@1100525003 : Decimal;
      lvAddAmount@1100525002 : Decimal;
      lvPartQuan@1100525001 : Decimal;
      lvLines@1100525000 : Integer;
    BEGIN
      IF NOT Selection1 THEN
        ERROR(Text006);

      IF NOT Selection2 THEN
        ERROR(Text007);

      TempEstPartRec1.RESET;
      TempEstPartRec1.FINDFIRST;

      //Fill extra table
      TempEstPartRec2.RESET;
      TempEstPartRec2.SETFILTER(Level, '>%1', 0);
      TempEstPartRec2.SETRANGE("Offer fixed", FALSE);
      IF TempEstPartRec2.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          TempEstPartRec3 := TempEstPartRec2;
          TempEstPartRec3.INSERT;
        UNTIL TempEstPartRec2.NEXT = 0;
      END;

      //Select solely the 'ends' (deepest level)
      TempEstPartRec2.SETRANGE(Level, 1, 2);
      TempEstPartRec2.SETRANGE("Offer fixed", FALSE);
      TempEstPartRec2.RESET;
      IF TempEstPartRec2.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          TempEstPartRec3.RESET;
          TempEstPartRec3.SETRANGE(Chapter, TempEstPartRec2.Chapter);
          IF TempEstPartRec2.Level = 2 THEN
            TempEstPartRec3.SETRANGE(Paragraph, TempEstPartRec2.Part);
          TempEstPartRec3.SETFILTER(Level, '>%1', TempEstPartRec2.Level);
          IF TempEstPartRec3.FINDFIRST THEN BEGIN
            TempEstPartRec3.RESET;
            TempEstPartRec3 := TempEstPartRec2;
            IF TempEstPartRec3.FIND THEN
              TempEstPartRec3.DELETE;
          END;
        UNTIL TempEstPartRec2.NEXT = 0;
      END;

      //Determine new amounts
      lvBaseAmount := 0;
      TempEstPartRec3.RESET;
      lvLines := TempEstPartRec3.COUNT;
      IF TempEstPartRec3.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvBaseAmount += TempEstPartRec3."Offer Amount"
        UNTIL TempEstPartRec3.NEXT = 0;
      END;

      //Divide amount to selected 'ends'.
      lvAddAmount := TempEstPartRec1."Offer Amount";
      TempEstPartRec3.RESET;
      IF TempEstPartRec3.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvEstPartRec := TempEstPartRec3;
          lvEstPartRec.FIND;
          IF lvBaseAmount = 0 THEN
            TempEstPartRec3."Offer Amount" += lvAddAmount/lvLines
          ELSE
            TempEstPartRec3."Offer Amount" += TempEstPartRec3."Offer Amount"/lvBaseAmount * lvAddAmount;
          lvPartQuan := lvEstPartRec.GetPartQuantity();
          IF lvPartQuan = 0 THEN
            lvPartQuan := 1;
          lvEstPartRec.VALIDATE("Offer Price", ROUND(TempEstPartRec3."Offer Amount"/lvPartQuan));
          lvEstPartRec.MODIFY;
        UNTIL TempEstPartRec3.NEXT = 0;
        lvEstPartRec := TempEstPartRec1;
        lvEstPartRec.FIND;
        lvEstPartRec.VALIDATE("Offer Price", 0);
        lvEstPartRec.MODIFY;
      END;

      CurrPage.UPDATE;
      ResetSelection;
    END;

    PROCEDURE DistributeLine@1100525015();
    BEGIN
      IF Selection1 THEN
        ERROR(Text008);

      EstPartRec.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstPartRec);
      IF EstPartRec.COUNT <> 1 THEN
        ERROR(Text004);

      IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
        IF Selection2 THEN BEGIN
          TempEstPartRec2.RESET;
          IF TempEstPartRec2.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              IF (TempEstPartRec2.Level > EstPartRec.Level) THEN BEGIN
                CASE EstPartRec.Level OF
                  1: IF (TempEstPartRec2.Chapter = EstPartRec.Part) THEN
                     ERROR(Text005);
                  2: IF (TempEstPartRec2.Chapter = EstPartRec.Chapter) AND
                        (TempEstPartRec2.Paragraph = EstPartRec.Part) THEN
                     ERROR(Text005);
                END;
              END;
            UNTIL TempEstPartRec2.NEXT = 0;
          END
        END;
        TempEstPartRec1 := EstPartRec;
        TempEstPartRec1.OnTempTable := TRUE;
        TempEstPartRec1.INSERT;
      END;

      Selection1 := TRUE;
    END;

    PROCEDURE DistributeSelection@1100525016();
    BEGIN
      IF Selection2 THEN
        ERROR(Text009);

      EstPartRec.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstPartRec);
      IF EstPartRec.COUNT = 0 THEN BEGIN
        ERROR(Text002);
      END;

      IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF Selection1 THEN BEGIN
            TempEstPartRec1.RESET;
            IF TempEstPartRec1.FINDFIRST THEN BEGIN
              IF (TempEstPartRec1.Level < EstPartRec.Level) THEN BEGIN
                CASE TempEstPartRec1.Level OF
                  1: IF (TempEstPartRec1.Part = EstPartRec.Chapter) THEN
                       ERROR(Text005);
                  2: IF (TempEstPartRec1.Chapter = EstPartRec.Chapter) AND
                        (TempEstPartRec1.Part = EstPartRec.Paragraph) THEN
                     ERROR(Text005);
                END;
              END;
            END;
          END;
          TempEstPartRec2 := EstPartRec;
          TempEstPartRec2.OnTempTable := TRUE;
          TempEstPartRec2.INSERT;
        UNTIL EstPartRec.NEXT = 0;
      END;

      Selection2 := TRUE;
    END;

    PROCEDURE GetUnitPrice@1100409001();
    BEGIN
      //DP00686
      IF "Quantity per Unit" <> 0 THEN BEGIN
        CostPriceIndex := "Calculated Cost Amount"/"Quantity per Unit";
        SalesPriceIndex := "Calculated Sales Amount"/"Quantity per Unit";
      END ELSE BEGIN
        CostPriceIndex := 0;
        SalesPriceIndex := 0;
      END;
    END;

    PROCEDURE RefreshLine@1100409002();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE InitMargin@1100525008();
    VAR
      EstPartRec@1100525001 : Record 11072073;
    BEGIN
      EstRec.GET("Estimate No.");

      EstPartRec.SETRANGE("Estimate No.", "Estimate No.");
      IF EstPartRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF EstPartRec."Offer fixed" = FALSE THEN BEGIN
            IF EstPartRec."Margin %" = 0 THEN
              EstPartRec.VALIDATE("Margin %", EstRec."Margin % (Offer Price)");
            IF EstPartRec."Markup %" = 0 THEN
              EstPartRec.VALIDATE("Markup %", EstRec."Markup % (Offer Price)");
            IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Cost Price" / (1 - EstPartRec."Margin %" / 100))
            ELSE
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Sales Price" / (1 - EstPartRec."Margin %" / 100));
            EstPartRec.VALIDATE("Offer Price");
            EstPartRec."Offer Amount" := EstPartRec."Offer Price" * EstPartRec.GetPartQuantity;
            EstPartRec.CalculateOfferPriceIndex;  //C036026
            EstPartRec.MODIFY;
          END;
        UNTIL EstPartRec.NEXT = 0;
      END;

      RefreshLine;
    END;

    LOCAL PROCEDURE CheckSubEstimatePartLevelZero@1100525009();
    VAR
      SubEstimate@1100525000 : Record 11072074;
      SubEstimate2@1100525002 : Record 11072074;
      EstimatePart@1100525001 : Record 11072073;
      lvCostHours@1100525016 : Decimal;
      lvCostLabor@1100525015 : Decimal;
      lvCostMat@1100525014 : Decimal;
      lvCostSubc@1100525013 : Decimal;
      lvCostPlant@1100525012 : Decimal;
      lvCostSundry@1100525011 : Decimal;
      lvCostTotal@1100525010 : Decimal;
      lvSalesHours@1100525009 : Decimal;
      lvSalesLabor@1100525008 : Decimal;
      lvSalesMat@1100525007 : Decimal;
      lvSalesSubc@1100525006 : Decimal;
      lvSalesPlant@1100525005 : Decimal;
      lvSalesSundry@1100525004 : Decimal;
      lvSalesTotal@1100525003 : Decimal;
      lvOfferPrice@1100525017 : Decimal;
      lvCalculatedCostPrice@1100525018 : Decimal;
      lvCalculatedSalesPrice@1100525019 : Decimal;
      lvCalculatedCostAmount@1100525020 : Decimal;
      lvCalculatedSalesAmount@1100525021 : Decimal;
      CumQuan@1100528900 : Decimal;
      GLSetup@1100528901 : Record 98;
    BEGIN
      IF Level <> 0 THEN EXIT;
      SubEstimate.GET("Estimate No.", "Sub-Estimate No.");
      IF SubEstimate.Level <> 0 THEN EXIT;

      GLSetup.GET;

      SubEstimate2.SETRANGE("Estimate No.", SubEstimate."Estimate No.");
      SubEstimate2.SETRANGE(Chapter, SubEstimate."Sub-Estimate No.");
      SubEstimate2.SETRANGE(Level, SubEstimate.Level + 1);
      IF SubEstimate2.FINDSET THEN BEGIN
        "Offer Price" := 0;
        "Calculated Cost Price" := 0;
        "Calculated Sales Price" := 0;
        "Calculated Cost Amount" := 0;
        "Calculated Sales Amount" := 0;
        REPEAT
          EstimatePart.SETRANGE("Estimate No.", SubEstimate2."Estimate No.");
          EstimatePart.SETRANGE("Sub-Estimate No.", SubEstimate2."Sub-Estimate No.");
          EstimatePart.SETRANGE(Level, 0);
          IF EstimatePart.FINDSET THEN BEGIN
            EstimatePart.GetCumTotals(
              lvCostHours,lvCostLabor,lvCostMat,lvCostSubc,lvCostPlant,lvCostSundry,
              lvSalesHours,lvSalesLabor,lvSalesMat,lvSalesSubc,lvSalesPlant,lvSalesSundry);  //C037891
            lvCostTotal := lvCostLabor + lvCostMat + lvCostSubc + lvCostPlant + lvCostSundry;
            lvSalesTotal := lvSalesLabor + lvSalesMat + lvSalesSubc + lvSalesPlant + lvSalesSundry;
            //
            CostHours := CostHours + lvCostHours;
            CostLabor := CostLabor + lvCostLabor;
            CostMat := CostMat + lvCostMat;
            CostSubc := CostSubc + lvCostSubc;
            CostPlant := CostPlant + lvCostPlant;
            CostSundry := CostSundry + lvCostSundry;
            //
            SalesHours := SalesHours + lvSalesHours;
            SalesLabor := SalesLabor + lvSalesLabor;
            SalesMat := SalesMat + lvSalesMat;
            SalesSubc := SalesSubc + lvSalesSubc;
            SalesPlant := SalesPlant + lvSalesPlant;
            SalesSundry := SalesSundry + lvSalesSundry;
            //
            CostTotal := CostTotal + lvCostTotal;
            SalesTotal := SalesTotal + lvSalesTotal;
            //
            lvOfferPrice := EstimatePart."Offer Price";
            lvCalculatedCostPrice := EstimatePart."Calculated Cost Price";
            lvCalculatedSalesPrice := EstimatePart."Calculated Sales Price";
            lvCalculatedCostAmount := EstimatePart."Calculated Cost Amount";
            lvCalculatedSalesAmount := EstimatePart."Calculated Sales Amount";
            //
            "Offer Price" := "Offer Price" + lvOfferPrice;
            "Calculated Cost Price" := "Calculated Cost Price" + lvCalculatedCostPrice;
            "Calculated Sales Price" := "Calculated Sales Price" + lvCalculatedSalesPrice;
            "Calculated Cost Amount" := "Calculated Cost Amount" + lvCalculatedCostAmount;
            "Calculated Sales Amount" := "Calculated Sales Amount" + lvCalculatedSalesAmount;
            //
            CumQuan := EstimatePart.GetPartQuantity;
            "Offer Amount" := ROUND((CumQuan * "Offer Price"), GLSetup."Amount Rounding Precision");
            CalculateOfferPriceIndex;  //C036026
          END;
        UNTIL SubEstimate2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetEditable@1100529500();
    BEGIN
      //C033544
      EstRec.GET("Estimate No.");
      OfferPriceEditable := (EstRec.Fixed = FALSE) AND ("Offer fixed" = FALSE);
      OfferAmountEditable := (EstRec.Fixed = FALSE) AND ("Offer fixed" = FALSE);
      MarkupEditable := (EstRec.Fixed = FALSE) AND ("Offer fixed" = FALSE);
      MarginEditable := (EstRec.Fixed = FALSE) AND ("Offer fixed" = FALSE);
      UnitPriceEditable := (EstRec.Fixed = FALSE) AND ("Unit Price Fixed" = FALSE);
      QtyPerUnitEditable := (EstRec.Fixed = FALSE) AND ("Unit Price Fixed" = FALSE);
    END;

    PROCEDURE GlobalUpdateUnitPriceFixed@111284600(NewUnitPriceFixed@1100525000 : Boolean);
    VAR
      EstimatePart@1100525001 : Record 11072073;
    BEGIN
      EstimatePart.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstimatePart);
      IF EstimatePart.ISEMPTY THEN BEGIN
        MESSAGE(Text014);
        EXIT;
      END;

      EstimatePart.FINDSET;
      REPEAT
        EstimatePart.VALIDATE("Unit Price Fixed", NewUnitPriceFixed);
        EstimatePart.MODIFY(TRUE);
        IF NOT EstimatePart."Unit Price Fixed" THEN
          EstimatePart.CheckUnitPriceFixedUpwards(EstimatePart);
      UNTIL EstimatePart.NEXT = 0;
    END;

    LOCAL PROCEDURE UnitPriceFixedOnAfterValidate@111284603();
    BEGIN
      CheckUnitPriceFixedUpwards(Rec);
      CheckUnitPriceFixedUpwards1(Rec);

      SetEditable;
      RefreshLine;
    END;

    LOCAL PROCEDURE CheckOnOpenPage@1100528900();
    VAR
      EstimateUpdateMgt@1100528901 : Codeunit 11012229;
      Estimate@1100528900 : Record 11012151;
    BEGIN
      //C055105
      Estimate.GET("Estimate No.");
      IF Estimate."Full Cost/Sales Price Updated" = FALSE THEN
        EstimateUpdateMgt.UpdateFullCostSalesPrice("Estimate No.");

      WarnForIllegalCode(Estimate."No.");

      QuantityEditable := (NOT Estimate.Fixed);
      OfferPriceEditable := (NOT Estimate.Fixed);
      OfferAmountEditable := (NOT Estimate.Fixed);
      OfferFixedEditable := (NOT Estimate.Fixed);
      MarkupEditable := (NOT Estimate.Fixed);
      MarginEditable := (NOT Estimate.Fixed);
      SalesRemarkEditable := (NOT Estimate.Fixed);
      UnitPriceEditable := (NOT Estimate.Fixed);
      QtyPerUnitEditable := (NOT Estimate.Fixed);
      UnitPriceFixedEditable := (NOT Estimate.Fixed);
    END;

    BEGIN
    {
      4PS, 16-01-2019, BC changed the PageType from Card to List. Horizontal scrollbar was missing in the WebClient
    }
    END.
  }
}

