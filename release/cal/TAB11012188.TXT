OBJECT Table 11012188 Rate by Date
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CASE "Record Type" OF
                 "Record Type"::Standard:
                   BEGIN
                     //TESTFIELD("Rate Group"); for Rate Group, not for standard rate
                     TESTFIELD("Estimate No.", '');
                     TESTFIELD("Service Location No.", '');
                   END;
                 "Record Type"::Estimate:
                   BEGIN
                     TESTFIELD("Rate Group", '');
                     TESTFIELD("Estimate No.");
                     TESTFIELD("Service Location No.", '');
                   END;
                 "Record Type"::Service:
                   BEGIN
                     TESTFIELD("Rate Group", '');
                     TESTFIELD("Estimate No.", '');
                     TESTFIELD("Service Location No.");
                   END;
               END;
             END;

    CaptionML=[ENU=Rate by Date;
               NOR=Avgift etter dato;
               SVE=Avgift efter datum];
  }
  FIELDS
  {
    { 10  ;   ;Record Type         ;Option        ;CaptionML=[ENU=Record Type;
                                                              NOR=Posttype;
                                                              SVE=Posttyp];
                                                   OptionCaptionML=[ENU=Rate Group,Estimate,Service;
                                                                    NOR=Avgiftsgruppe,Kalkyle,Service;
                                                                    SVE=Kostnadsgrupp,Kalkyl,Service];
                                                   OptionString=Standard,Estimate,Service }
    { 20  ;   ;Rate Group          ;Code10        ;TableRelation="Rate Group".No.;
                                                   CaptionML=[ENU=Rate Group;
                                                              NOR=Kostgruppe;
                                                              SVE=Kostnadsgrupp] }
    { 30  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=[ENU=Estimate No.;
                                                              NOR=Kalkylenr;
                                                              SVE=Kalkylnr] }
    { 40  ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr] }
    { 50  ;   ;Rate Code           ;Code10        ;CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod];
                                                   NotBlank=Yes }
    { 60  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 70  ;   ;Cost Rate           ;Decimal       ;OnValidate=BEGIN
                                                                "Cost Rate (FCY)" := ExchangeAmtLCYToFCY("Cost Rate", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Cost Rate;
                                                              SVE=Avgift];
                                                   AutoFormatType=2 }
    { 75  ;   ;Sales Rate          ;Decimal       ;OnValidate=BEGIN
                                                                "Sales Rate (FCY)" := ExchangeAmtLCYToFCY("Sales Rate", TRUE);
                                                              END;

                                                   CaptionML=[ENU=Sales Rate;
                                                              NOR=Salgsrate;
                                                              SVE=F”rs„ljningsavgift];
                                                   Description=DP00381;
                                                   AutoFormatType=2 }
    { 80  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Cost Rate");
                                                                VALIDATE("Sales Rate");
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 90  ;   ;Cost Rate (FCY)     ;Decimal       ;OnValidate=BEGIN
                                                                "Cost Rate" := ExchangeAmtFCYToLCY("Cost Rate (FCY)", FALSE);
                                                              END;

                                                   CaptionML=ENU=Cost Rate (FCY) }
    { 100 ;   ;Sales Rate (FCY)    ;Decimal       ;OnValidate=BEGIN
                                                                "Sales Rate" := ExchangeAmtFCYToLCY("Sales Rate (FCY)", TRUE);
                                                              END;

                                                   CaptionML=ENU=Sales Rate (FCY) }
    { 110 ;   ;Sales Rate Fixed    ;Option        ;CaptionML=ENU=Sales Rate Fixed;
                                                   OptionCaptionML=[ENU=Local Currency,Foreign Currency;
                                                                    NOR=Lokal valuta,Utenlandsk valuta;
                                                                    SVE=Lokal valuta,Utl„ndsk valuta];
                                                   OptionString=Local Currency,Foreign Currency }
  }
  KEYS
  {
    {    ;Record Type,Rate Group,Estimate No.,Service Location No.,Rate Code,Starting Date;
                                                   Clustered=Yes }
    {    ;Estimate No.,Rate Code,Starting Date     }
    {    ;Service Location No.,Rate Code,Starting Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CopyRate@1210190001();
    VAR
      DateRateRec@1210190000 : Record 11012188;
      DateRateRec2@1210190001 : Record 11012188;
      EstRec@1210190002 : Record 11012151;
    BEGIN
      CASE "Record Type" OF
        "Record Type"::Standard:
          BEGIN
            DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
            DateRateRec.SETFILTER("Rate Group", '%1', '');
            IF DateRateRec.FIND('-') THEN BEGIN
              REPEAT
                DateRateRec2.COPY(DateRateRec);
                DateRateRec2."Rate Group" := "Rate Group";
                IF DateRateRec2.INSERT THEN;
              UNTIL DateRateRec.NEXT = 0;
            END;
          END;
        "Record Type"::Estimate:
          BEGIN
            EstRec.GET("Estimate No.");
            DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
            DateRateRec.SETRANGE("Rate Group", EstRec."Rate Group");
            IF DateRateRec.FIND('-') THEN BEGIN
              REPEAT
                DateRateRec2.COPY(DateRateRec);
                DateRateRec2."Record Type" := DateRateRec."Record Type"::Estimate;
                DateRateRec2."Estimate No." := "Estimate No.";
                DateRateRec2."Rate Group" := '';
                IF DateRateRec2.INSERT THEN;
              UNTIL DateRateRec.NEXT = 0;
            END;
          END;
      //  "Record Type"::Service:
      //    BEGIN
      //      ServLocRec.GET("Service Location No.");
      //      DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
      //      DateRateRec.SETRANGE("Rate Group", ServLocRec."Rate Group");
      //      IF DateRateRec.FIND('-') THEN BEGIN
      //        REPEAT
      //          DateRateRec2.COPY(DateRateRec);
      //          DateRateRec2."Record Type" := DateRateRec."Record Type"::Service;
      //          DateRateRec2."Service Location No." := "Service Location No.";
      //          DateRateRec2."Rate Group" := '';
      //          IF DateRateRec2.INSERT THEN;
      //        UNTIL DateRateRec.NEXT = 0;
      //      END;
      //    END;
      END;
    END;

    PROCEDURE GetCurrencyFactor@1100528601(IUseSalesExchange@1100528600 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528601 : Record 330;
    BEGIN
      EXIT(CurrencyExchangeRate.ExchangeRate(2, "Estimate No.", "Starting Date", "Currency Code", IUseSalesExchange));
    END;

    PROCEDURE ExchangeAmtLCYToFCY@1100528602(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean) : Decimal;
    VAR
      Estimate@1100528608 : Record 11012151;
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      IF NOT Estimate.GET("Estimate No.") THEN
        Estimate.INIT;
      Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(
        2, "Estimate No.", "Starting Date", "Currency Code", IAmount, GetCurrencyFactor(IUseSalesExchange), IUseSalesExchange);
      IF NOT Currency.GET("Currency Code") THEN
        Currency.InitRoundingPrecision;
      Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToLCY@1100528600(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean) : Decimal;
    VAR
      Estimate@1100528608 : Record 11012151;
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      IF NOT Estimate.GET("Estimate No.") THEN
        Estimate.INIT;
      Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(
        2, "Estimate No.", "Starting Date", "Currency Code", IAmount, GetCurrencyFactor(IUseSalesExchange), IUseSalesExchange);
      Currency.InitRoundingPrecision;
      Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision");
      EXIT(Amount);
    END;

    BEGIN
    {
      db, 20-04-18 (property NotBlank set on RateCode)
    }
    END.
  }
}

