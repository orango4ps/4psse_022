OBJECT Codeunit 1306 Company Information Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyBankAccountTxt@1002 : TextConst 'ENU=CompanyBankAccount;NOR=Selskapsbankkonto;SVE=F”retagsbankkonto';
      XPAYMENTTxt@1001 : TextConst '@@@=Payment;ENU=PAYMENT;NOR=BETALING;SVE=BETALNING';
      XPmtRegTxt@1000 : TextConst '@@@=Payment Registration;ENU=PMT REG;NOR=BET.REG.;SVE=BETREG';
      CompanyBankAccountPostGroupTxt@1003 : TextConst '@@@=Same as Bank Account Posting Group;ENU=OPERATING;NOR=DRIFT';

    LOCAL PROCEDURE UpdateGeneralJournalBatch@5(BankAccount@1000 : Record 270;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      GenJournalBatch@1003 : Record 232;
    BEGIN
      WITH GenJournalBatch DO
        IF GET(JournalTemplateName,JournalBatchName) THEN
          IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Bal. Account No." = '') THEN BEGIN
            VALIDATE("Bal. Account No.",BankAccount."No.");
            MODIFY;
          END;
    END;

    [External]
    PROCEDURE UpdateCompanyBankAccount@1(VAR CompanyInformation@1000 : Record 79;BankAccountPostingGroup@1002 : Code[20];VAR BankAccount@1003 : Record 270);
    BEGIN
      // create or update existing company bank account with the information entered by the user
      // update general journal payment batches to point to the company bank account (unless a bank account is already specified in them)
      WITH CompanyInformation DO BEGIN
        IF (("Bank Branch No." = '') AND ("Bank Account No." = '')) AND (("SWIFT Code" = '') AND (IBAN = '')) THEN
          EXIT;
        UpdateBankAccount(BankAccount,CompanyInformation,BankAccountPostingGroup);
        UpdateGeneralJournalBatch(BankAccount,XPAYMENTTxt,XPmtRegTxt);
        UpdatePaymentRegistrationSetup(BankAccount,XPAYMENTTxt,XPmtRegTxt);
      END;
    END;

    LOCAL PROCEDURE UpdatePaymentRegistrationSetup@2(BankAccount@1000 : Record 270;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      PaymentRegistrationSetup@1003 : Record 980;
    BEGIN
      IF NOT PaymentRegistrationSetup.GET(USERID) THEN BEGIN
        PaymentRegistrationSetup."User ID" := USERID;
        PaymentRegistrationSetup.INSERT;
      END;
      PaymentRegistrationSetup."Journal Template Name" := JournalTemplateName;
      PaymentRegistrationSetup."Journal Batch Name" := JournalBatchName;
      PaymentRegistrationSetup."Bal. Account Type" := PaymentRegistrationSetup."Bal. Account Type"::"Bank Account";
      PaymentRegistrationSetup."Bal. Account No." := BankAccount."No.";
      PaymentRegistrationSetup."Use this Account as Def." := TRUE;
      PaymentRegistrationSetup."Auto Fill Date Received" := TRUE;
      PaymentRegistrationSetup.MODIFY;
    END;

    LOCAL PROCEDURE UpdateBankAccount@3(VAR BankAccount@1001 : Record 270;CompanyInformation@1000 : Record 79;BankAccountPostingGroup@1002 : Code[20]);
    VAR
      BankAccPostingGroup@1004 : Record 277;
      IsCompanyBankAcc@1003 : Boolean;
    BEGIN
      IF BankAccount."No." = '' THEN
        BankAccount."No." := CompanyBankAccountTxt;

      WITH CompanyInformation DO BEGIN
        IF NOT BankAccount.GET(BankAccount."No.") THEN BEGIN
          BankAccount.INIT;
          BankAccount."No." := CompanyBankAccountTxt;
          BankAccount.INSERT;

          IsCompanyBankAcc := TRUE;
        END;
        BankAccount.VALIDATE(Name,"Bank Name");
        BankAccount.VALIDATE("Bank Branch No.","Bank Branch No.");
        BankAccount.VALIDATE("Country/Region Code","Country/Region Code");
        BankAccount.VALIDATE("Bank Account No.","Bank Account No.");
        BankAccount.VALIDATE("SWIFT Code","SWIFT Code");
        BankAccount.VALIDATE(IBAN,IBAN);
        IF (BankAccountPostingGroup = '') AND IsCompanyBankAcc THEN
          BankAccountPostingGroup := CompanyBankAccountPostGroupTxt;
        IF BankAccPostingGroup.GET(BankAccountPostingGroup) THEN
          BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccPostingGroup.Code);
        BankAccount.MODIFY;
      END;
    END;

    [External]
    PROCEDURE GetCompanyBankAccount@6() : Code[20];
    BEGIN
      EXIT(CompanyBankAccountTxt);
    END;

    [External]
    PROCEDURE GetCompanyBankAccountPostingGroup@4() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      IF BankAccount.GET(CompanyBankAccountTxt) THEN
        EXIT(BankAccount."Bank Acc. Posting Group");
      EXIT('');
    END;

    [External]
    PROCEDURE IsDemoCompany@11() : Boolean;
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      IF CompanyInformation.GET THEN;
      EXIT(CompanyInformation."Demo Company");
    END;

    [EventSubscriber(Table,79,OnAfterModifyEvent)]
    [External]
    PROCEDURE SetCompanyDisplayNameOnCompanyInformationModify@7(VAR Rec@1000 : Record 79;VAR xRec@1001 : Record 79;RunTrigger@1002 : Boolean);
    VAR
      Company@1003 : Record 2000000006;
    BEGIN
      IF Rec.ISTEMPORARY THEN
        EXIT;

      Company.LOCKTABLE;
      IF Company.GET(Rec.CURRENTCOMPANY) THEN
        IF (Company."Display Name" <> Rec.Name) AND (Rec.Name <> '') AND (xRec.Name <> Rec.Name) THEN BEGIN
          Company.VALIDATE("Display Name",Rec.Name);
          Company.MODIFY(TRUE);
        END;
    END;

    BEGIN
    END.
  }
}

