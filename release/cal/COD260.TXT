OBJECT Codeunit 260 Document-Mailing
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            ReportSelections@1005 : Record 77;
            O365DocumentSentHistory@1007 : Record 2158;
          BEGIN
            O365DocumentSentHistory.NewInProgressFromJobQueue(Rec);

            ReportSelections.SendEmailInBackground(Rec);
          END;

  }
  CODE
  {
    VAR
      EmailSubjectCapTxt@1001 : TextConst '@@@="%1 = Customer Name. %2 = Document Type %3 = Invoice No.";ENU=%1 - %2 %3;NOR=%1 - %2 %3;SVE=%1 - %2 %3';
      ReportAsPdfFileNameMsg@1000 : TextConst '@@@="%1 = Document Type %2 = Invoice No.";ENU=Sales %1 %2.pdf;NOR=Salg %1, %2.pdf;SVE=F”rs„ljnings%1 %2.pdf';
      EmailSubjectPluralCapTxt@1003 : TextConst '@@@="%1 = Customer Name. %2 = Document Type in plural form";ENU=%1 - %2;NOR=%1 - %2;SVE=%1 - %2';
      ReportAsPdfFileNamePluralMsg@1002 : TextConst '@@@="%1 = Document Type in plural form";ENU=Sales %1.pdf;NOR=Salg %1.pdf;SVE=F”rs„ljning - %1.pdf';
      JobsReportAsPdfFileNameMsg@1004 : TextConst '@@@="%1 = Document Type %2 = Job Number";ENU=%1 %2.pdf;NOR=%1 %2.pdf;SVE=%1 %2.pdf';
      PdfFileNamePluralMsg@1005 : TextConst '@@@="%1 = Document Type in plural form";ENU=%1.pdf;NOR=%1.pdf;SVE=%1.pdf';
      IdentityManagement@1006 : Codeunit 9801;
      InvoiceEmailSubjectTxt@1008 : TextConst '@@@="%1 = name of the company";ENU=Invoice from %1;NOR=Faktura fra %1';
      TestInvoiceEmailSubjectTxt@1010 : TextConst '@@@="%1 = name of the company";ENU=Test invoice from %1;NOR=Testfaktura fra %1';
      QuoteEmailSubjectTxt@1007 : TextConst '@@@="%1 = name of the company";ENU=Estimate from %1;NOR=Estimat fra %1';
      CustomerLbl@1009 : TextConst 'ENU=<Customer>;NOR=<Customer>';
      PdfFileNameAndDocNo@1100525000 : TextConst 'ENU=%1 %2.pdf;NOR=%1 %2.pdf;SVE=%1 %2.pdf';
      TempEmailAttachment@1100528505 : TEMPORARY Record 11229294;
      ServiceOrderEMailQueueEntryNo@1100528409 : Integer;
      SpecialBodyText@1100528406 : Text;
      OriginalLanguageID@1100525001 : Integer;
      MailSent@1100528504 : Boolean;
      Text000@1100525002 : TextConst 'ENU=Customer No.;NOR=Kundenr.;SVE=Kundnr';
      SendCC@1100529800 : Text;

    [Internal]
    PROCEDURE EmailFile@3(AttachmentFilePath@1001 : Text[250];AttachmentFileName@1005 : Text[250];HtmlBodyFilePath@1007 : Text[250];PostedDocNo@1000 : Code[20];ToEmailAddress@1006 : Text[250];EmailDocName@1008 : Text[250];HideDialog@1003 : Boolean;ReportUsage@1010 : Integer) : Boolean;
    VAR
      TempEmailItem@1002 : TEMPORARY Record 9500;
    BEGIN
      EXIT(EmailFileInternal(
          TempEmailItem,
          AttachmentFilePath,
          AttachmentFileName,
          HtmlBodyFilePath,
          '',
          ToEmailAddress,
          PostedDocNo,
          EmailDocName,
          HideDialog,
          ReportUsage,
          TRUE,
          ''));
    END;

    [Internal]
    PROCEDURE EmailFileWithSubject@1(AttachmentFilePath@1001 : Text;AttachmentFileName@1005 : Text;HtmlBodyFilePath@1007 : Text;EmailSubject@1000 : Text;ToEmailAddress@1006 : Text;HideDialog@1003 : Boolean) : Boolean;
    VAR
      TempEmailItem@1002 : TEMPORARY Record 9500;
    BEGIN
      EXIT(EmailFileInternal(
          TempEmailItem,
          COPYSTR(AttachmentFilePath,1,MAXSTRLEN(TempEmailItem."Attachment File Path")),
          COPYSTR(AttachmentFileName,1,MAXSTRLEN(TempEmailItem."Attachment Name")),
          COPYSTR(HtmlBodyFilePath,1,MAXSTRLEN(TempEmailItem."Body File Path")),
          COPYSTR(EmailSubject,1,MAXSTRLEN(TempEmailItem.Subject)),
          COPYSTR(ToEmailAddress,1,MAXSTRLEN(TempEmailItem."Send to")),
          '',
          '',
          HideDialog,
          0,
          FALSE,
          ''));
    END;

    PROCEDURE EmailFileWithSubjectAndSender@15(AttachmentFilePath@1001 : Text;AttachmentFileName@1005 : Text;HtmlBodyFilePath@1007 : Text;EmailSubject@1000 : Text;ToEmailAddress@1006 : Text;HideDialog@1003 : Boolean;SenderUserID@1004 : Code[50]) : Boolean;
    VAR
      TempEmailItem@1002 : TEMPORARY Record 9500;
    BEGIN
      EXIT(EmailFileInternal(
          TempEmailItem,
          COPYSTR(AttachmentFilePath,1,MAXSTRLEN(TempEmailItem."Attachment File Path")),
          COPYSTR(AttachmentFileName,1,MAXSTRLEN(TempEmailItem."Attachment Name")),
          COPYSTR(HtmlBodyFilePath,1,MAXSTRLEN(TempEmailItem."Body File Path")),
          COPYSTR(EmailSubject,1,MAXSTRLEN(TempEmailItem.Subject)),
          COPYSTR(ToEmailAddress,1,MAXSTRLEN(TempEmailItem."Send to")),
          '',
          '',
          HideDialog,
          0,
          FALSE,
          SenderUserID));
    END;

    [Internal]
    PROCEDURE EmailFileWithSubjectAndReportUsage@11(AttachmentFilePath@1001 : Text[250];AttachmentFileName@1005 : Text[250];HtmlBodyFilePath@1007 : Text[250];EmailSubject@1004 : Text[250];PostedDocNo@1000 : Code[20];ToEmailAddress@1006 : Text[250];EmailDocName@1008 : Text[250];HideDialog@1003 : Boolean;ReportUsage@1010 : Integer) : Boolean;
    VAR
      TempEmailItem@1002 : TEMPORARY Record 9500;
    BEGIN
      EXIT(EmailFileInternal(
          TempEmailItem,
          AttachmentFilePath,
          AttachmentFileName,
          HtmlBodyFilePath,
          EmailSubject,
          ToEmailAddress,
          PostedDocNo,
          EmailDocName,
          HideDialog,
          ReportUsage,
          FALSE,
          ''));
    END;

    [External]
    PROCEDURE GetToAddressFromCustomer@16(BillToCustomerNo@1000 : Code[20]) : Text[250];
    VAR
      Customer@1002 : Record 18;
      ToAddress@1001 : Text;
    BEGIN
      IF Customer.GET(BillToCustomerNo) THEN
        ToAddress := Customer."E-Mail";

      EXIT(ToAddress);
    END;

    [External]
    PROCEDURE GetToAddressFromVendor@2(BuyFromVendorNo@1000 : Code[20]) : Text[250];
    VAR
      Vendor@1002 : Record 23;
      ToAddress@1001 : Text;
    BEGIN
      IF Vendor.GET(BuyFromVendorNo) THEN
        ToAddress := Vendor."E-Mail";

      EXIT(ToAddress);
    END;

    LOCAL PROCEDURE GetSenderEmail@19(SenderUserID@1000 : Code[50]) : Text[250];
    VAR
      UserSetup@1001 : Record 91;
    BEGIN
      IF UserSetup.GET(SenderUserID) THEN
        EXIT(UserSetup."E-Mail");
    END;

    LOCAL PROCEDURE GetSenderName@18(SenderUserID@1000 : Code[50]) : Text[100];
    VAR
      User@1001 : Record 2000000120;
    BEGIN
      User.SETRANGE("User Name",SenderUserID);
      IF User.FINDFIRST AND (User."Full Name" <> '') THEN
        EXIT(User."Full Name");

      EXIT('');
    END;

    [External]
    PROCEDURE GetAttachmentFileName@4(VAR AttachmentFileName@1000 : Text[250];PostedDocNo@1001 : Code[20];EmailDocumentName@1004 : Text[250];ReportUsage@1002 : Integer);
    VAR
      ReportSelections@1003 : Record 77;
    BEGIN
      IF AttachmentFileName = '' THEN
        IF PostedDocNo = '' THEN BEGIN
          IF ReportUsage = ReportSelections.Usage::"P.Order" THEN
            AttachmentFileName := STRSUBSTNO(PdfFileNamePluralMsg,EmailDocumentName)
          ELSE
            AttachmentFileName := STRSUBSTNO(ReportAsPdfFileNamePluralMsg,EmailDocumentName);
        END ELSE
          CASE ReportUsage OF
            ReportSelections.Usage::JQ,
            ReportSelections.Usage::"P.Order",
            ReportSelections.Usage::"V.Remittance",
            ReportSelections.Usage::"P.V.Remit.":
              AttachmentFileName := STRSUBSTNO(JobsReportAsPdfFileNameMsg,EmailDocumentName,PostedDocNo);
            ELSE
              AttachmentFileName := STRSUBSTNO(ReportAsPdfFileNameMsg,EmailDocumentName,PostedDocNo)
          END;
    END;

    [External]
    PROCEDURE GetEmailBody@27(PostedDocNo@1000 : Code[20];ReportUsage@1001 : Integer;CustomerNo@1006 : Code[20]) : Text;
    VAR
      O365DefaultEmailMessage@1009 : Record 2170;
      EmailParameter@1002 : Record 9510;
      Customer@1007 : Record 18;
      String@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      DocumentType@1005 : Option;
    BEGIN
      IF Customer.GET(CustomerNo) THEN;

      IF EmailParameter.GetEntryWithReportUsage(PostedDocNo,ReportUsage,EmailParameter."Parameter Type"::Body) THEN BEGIN
        String := EmailParameter.GetParameterValue;
        EXIT(String.Replace(CustomerLbl,Customer.Name));
      END;

      IF IdentityManagement.IsInvAppId THEN BEGIN
        O365DefaultEmailMessage.ReportUsageToDocumentType(DocumentType,ReportUsage);
        String := O365DefaultEmailMessage.GetMessage(DocumentType);
        EXIT(String.Replace(CustomerLbl,Customer.Name));
      END;
    END;

    [External]
    PROCEDURE ReplaceCustomerNameWithPlaceholder@22(CustomerNo@1002 : Code[20];BodyText@1001 : Text) : Text;
    VAR
      Customer@1003 : Record 18;
      BodyTextString@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      BodyTextString := BodyText;
      IF NOT Customer.GET(CustomerNo) THEN
        EXIT(BodyText);

      EXIT(BodyTextString.Replace(Customer.Name,CustomerLbl));
    END;

    [External]
    PROCEDURE GetEmailSubject@5(PostedDocNo@1000 : Code[20];EmailDocumentName@1001 : Text[250];ReportUsage@1004 : Integer) Subject : Text[250];
    VAR
      EmailParameter@1003 : Record 9510;
      CompanyInformation@1002 : Record 79;
      ReportSelections@1005 : Record 77;
      SalesHeader@1007 : Record 36;
      DocumentType@1006 : Option;
    BEGIN
      IF EmailParameter.GetEntryWithReportUsage(PostedDocNo,ReportUsage,EmailParameter."Parameter Type"::Subject) THEN
        EXIT(EmailParameter.GetParameterValue);
      CompanyInformation.GET;
      IF IdentityManagement.IsInvAppId THEN BEGIN
        ReportSelections.ReportUsageToDocumentType(DocumentType,ReportUsage);
        CASE DocumentType OF
          SalesHeader."Document Type"::Invoice:
            EXIT(STRSUBSTNO(InvoiceEmailSubjectTxt,CompanyInformation.Name));
          SalesHeader."Document Type"::Quote:
            EXIT(STRSUBSTNO(QuoteEmailSubjectTxt,CompanyInformation.Name));
        END;
      END;
      IF PostedDocNo = '' THEN
        Subject := COPYSTR(
            STRSUBSTNO(EmailSubjectPluralCapTxt,CompanyInformation.Name,EmailDocumentName),1,MAXSTRLEN(Subject))
      ELSE
        Subject := COPYSTR(
            STRSUBSTNO(EmailSubjectCapTxt,CompanyInformation.Name,EmailDocumentName,PostedDocNo),1,MAXSTRLEN(Subject))
    END;

    [External]
    PROCEDURE GetTestInvoiceEmailBody@12(CustomerNo@1000 : Code[20]) : Text;
    VAR
      O365DefaultEmailMessage@1009 : Record 2170;
      Customer@1007 : Record 18;
      String@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      IF Customer.GET(CustomerNo) THEN;
      String := O365DefaultEmailMessage.GetTestInvoiceMessage;
      EXIT(String.Replace(CustomerLbl,Customer.Name));
    END;

    [External]
    PROCEDURE GetTestInvoiceEmailSubject@9() : Text[250];
    VAR
      CompanyInformation@1002 : Record 79;
    BEGIN
      IF CompanyInformation.GET THEN;
      EXIT(STRSUBSTNO(TestInvoiceEmailSubjectTxt,CompanyInformation.Name));
    END;

    [Internal]
    PROCEDURE SendQuoteInForeground@6(SalesHeader@1002 : Record 36) : Boolean;
    VAR
      O365DocumentSentHistory@1000 : Record 2158;
      ReportSelections@1001 : Record 77;
      O365SalesEmailManagement@1026 : Codeunit 2151;
    BEGIN
      IF NOT O365SalesEmailManagement.ShowEmailDialog(SalesHeader."No.") THEN
        EXIT;

      O365DocumentSentHistory.NewInProgressFromSalesHeader(SalesHeader);
      // 0 is the option number for ReportSelections.Usage::"S.Quote", which is renamed in RU
      IF ReportSelections.SendEmailInForeground(
           SalesHeader.RECORDID,SalesHeader."No.",SalesHeader.GetDocTypeTxt,0,
           TRUE,SalesHeader."Bill-to Customer No.")
      THEN BEGIN
        O365DocumentSentHistory.SetStatusAsSuccessfullyFinished;
        EXIT(TRUE);
      END;

      O365DocumentSentHistory.SetStatusAsFailed;
      EXIT(FALSE);
    END;

    [Internal]
    PROCEDURE SendPostedInvoiceInForeground@8(SalesInvoiceHeader@1002 : Record 112) : Boolean;
    VAR
      O365DocumentSentHistory@1000 : Record 2158;
      ReportSelections@1001 : Record 77;
      O365SalesEmailManagement@1028 : Codeunit 2151;
    BEGIN
      IF NOT O365SalesEmailManagement.ShowEmailDialog(SalesInvoiceHeader."No.") THEN
        EXIT;

      O365DocumentSentHistory.NewInProgressFromSalesInvoiceHeader(SalesInvoiceHeader);
      // 2 is the option number for ReportSelections.Usage::"S.Invoice", which is renamed in RU
      IF ReportSelections.SendEmailInForeground(
           SalesInvoiceHeader.RECORDID,SalesInvoiceHeader."No.",'Invoice',2,
           TRUE,SalesInvoiceHeader."Bill-to Customer No.")
      THEN BEGIN
        O365DocumentSentHistory.SetStatusAsSuccessfullyFinished;
        EXIT(TRUE);
      END;

      O365DocumentSentHistory.SetStatusAsFailed;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE EmailFileInternal@7(VAR TempEmailItem@1000 : TEMPORARY Record 9500;AttachmentFilePath@1008 : Text[250];AttachmentFileName@1007 : Text[250];HtmlBodyFilePath@1006 : Text[250];EmailSubject@1002 : Text[250];ToEmailAddress@1001 : Text[250];PostedDocNo@1005 : Code[20];EmailDocName@1003 : Text[250];HideDialog@1004 : Boolean;ReportUsage@1010 : Integer;IsFromPostedDoc@1011 : Boolean;SenderUserID@1013 : Code[50]) : Boolean;
    VAR
      OfficeMgt@1009 : Codeunit 1630;
      EmailSentSuccesfully@1012 : Boolean;
    BEGIN
      WITH TempEmailItem DO BEGIN
        IF IsAllowedToChangeSender(SenderUserID) THEN BEGIN
          "From Address" := GetSenderEmail(SenderUserID);
          "From Name" := GetSenderName(SenderUserID);
        END;

        "Send to" := ToEmailAddress;
        AddCcBcc;

        // If true, that means we came from "EmailFile" call and need to get data from the document
        IF IsFromPostedDoc THEN BEGIN
          GetAttachmentFileName(AttachmentFileName,PostedDocNo,EmailDocName,ReportUsage);
          EmailSubject := GetEmailSubject(PostedDocNo,EmailDocName,ReportUsage);
          AttachIncomingDocuments(PostedDocNo);
        END;
        "Attachment File Path" := AttachmentFilePath;
        "Attachment Name" := AttachmentFileName;
        Subject := EmailSubject;

        IF HtmlBodyFilePath <> '' THEN BEGIN
          VALIDATE("Plaintext Formatted",FALSE);
          VALIDATE("Body File Path",HtmlBodyFilePath);
        END;

        OnBeforeSendEmail(TempEmailItem,IsFromPostedDoc,PostedDocNo,HideDialog,ReportUsage);

        IF OfficeMgt.AttachAvailable THEN
          OfficeMgt.AttachDocument(AttachmentFilePath,AttachmentFileName,GetBodyText,Subject)
        ELSE BEGIN
          EmailSentSuccesfully := Send(HideDialog);
          IF EmailSentSuccesfully THEN
            OnAfterEmailSentSuccesfully(TempEmailItem,PostedDocNo,ReportUsage);
          EXIT(EmailSentSuccesfully);
        END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendEmail@51(VAR TempEmailItem@1000 : TEMPORARY Record 9500;VAR IsFromPostedDoc@1004 : Boolean;VAR PostedDocNo@1001 : Code[20];VAR HideDialog@1002 : Boolean;VAR ReportUsage@1003 : Integer);
    BEGIN
    END;

    [External]
    PROCEDURE EmailFileFromStream@24(AttachementStream@1001 : InStream;AttachmentName@1006 : Text;Body@1007 : Text;Subject@1008 : Text;MailTo@1009 : Text;HideDialog@1011 : Boolean;ReportUsage@1012 : Integer) : Boolean;
    VAR
      TempEmailItem@1010 : TEMPORARY Record 9500;
      FileManagement@1004 : Codeunit 419;
      TempFile@1003 : File;
      OutStream@1002 : OutStream;
      TempFileName@1005 : Text;
    BEGIN
      TempFileName := FileManagement.ServerTempFileName('');
      TempFile.CREATE(TempFileName);

      TempFile.CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,AttachementStream);
      TempFile.CLOSE;

      TempEmailItem.VALIDATE("Plaintext Formatted",TRUE);
      TempEmailItem.SetBodyText(Body);

      EXIT(EmailFileInternal(
          TempEmailItem,
          COPYSTR(TempFileName,1,MAXSTRLEN(TempEmailItem."Attachment File Path")),
          COPYSTR(AttachmentName,1,MAXSTRLEN(TempEmailItem."Attachment Name")),
          '',
          COPYSTR(Subject,1,MAXSTRLEN(TempEmailItem.Subject)),
          COPYSTR(MailTo,1,MAXSTRLEN(TempEmailItem."Send to")),
          '',
          '',
          HideDialog,
          ReportUsage,
          FALSE,
          ''));
    END;

    [External]
    PROCEDURE EmailHtmlFromStream@10(MailInStream@1000 : InStream;ToEmailAddress@1006 : Text[250];Subject@1008 : Text;HideDialog@1003 : Boolean;ReportUsage@1010 : Integer) : Boolean;
    VAR
      TempEmailItem@1002 : TEMPORARY Record 9500;
      FileManagement@1011 : Codeunit 419;
      FileName@1005 : Text;
    BEGIN
      FileName := FileManagement.InstreamExportToServerFile(MailInStream,'html');
      EXIT(EmailFileInternal(
          TempEmailItem,
          '',
          '',
          COPYSTR(FileName,1,MAXSTRLEN(TempEmailItem."Body File Path")),
          COPYSTR(Subject,1,MAXSTRLEN(TempEmailItem.Subject)),
          COPYSTR(ToEmailAddress,1,MAXSTRLEN(TempEmailItem."Send to")),
          '',
          '',
          HideDialog,
          ReportUsage,
          FALSE,
          ''));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterEmailSentSuccesfully@13(VAR TempEmailItem@1002 : TEMPORARY Record 9500;PostedDocNo@1001 : Code[20];ReportUsage@1000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE IsAllowedToChangeSender@14(SenderUserID@1001 : Code[50]) : Boolean;
    VAR
      SMTPMailSetup@1000 : Record 409;
      SMTPMail@1002 : Codeunit 400;
    BEGIN
      IF SenderUserID = '' THEN
        EXIT(FALSE);

      IF NOT SMTPMail.IsEnabled THEN
        EXIT(FALSE);

      SMTPMailSetup.GetSetup;
      EXIT(SMTPMailSetup."Allow Sender Substitution");
    END;

    PROCEDURE EmailFile4PS@1100528514(AttachmentFilePath@1001 : Text[250];AttachmentFileName@1005 : Text[250];HtmlBodyFilePath@1100525000 : Text[250];PostedDocNo@1000 : Code[20];ToEmailAddress@1100528507 : Text[250];MailTemplateNo@1100528503 : Integer;Dimension1Code@1100528502 : Code[20];LanguageCode@1100528504 : Code[10];SourceVariant@1100528506 : Variant;Subject2@1100528400 : Text[250];EmailDocName@1008 : Text[150];HideDialog@1003 : Boolean) : Boolean;
    VAR
      TempEmailItem@1002 : TEMPORARY Record 9500;
      CompanyInformation@1004 : Record 79;
      MailTemplate@1100525004 : Record 11229450;
      MailTemplateManagement@1100525005 : Codeunit 11012622;
      RecRef@1100525001 : RecordRef;
      IssuedReminderHeader@1100525002 : Record 297;
      Subject3@1100525003 : Text;
    BEGIN
      //**4PS
      IF (NOT IsActive(MailTemplateNo, Dimension1Code)) THEN EXIT(TRUE);

      IF AttachmentFileName = '' THEN
        AttachmentFileName := STRSUBSTNO(PdfFileNameAndDocNo,EmailDocName,PostedDocNo);

      CompanyInformation.GET;
      WITH TempEmailItem DO BEGIN

        IF SourceVariant.ISRECORD THEN BEGIN
          RecRef.GETTABLE(SourceVariant);
          IF RecRef.NUMBER = DATABASE::"Issued Reminder Header" THEN BEGIN
            RecRef.SETTABLE(IssuedReminderHeader);
            Subject3 := COPYSTR(STRSUBSTNO(
              EmailSubjectCapTxt,CompanyInformation.Name,EmailDocName,PostedDocNo),1,MAXSTRLEN(Subject2));
            Subject3 := Subject3 + ' ' + Text000 + ' - ' + IssuedReminderHeader."Customer No.";
            Subject2 := COPYSTR(Subject3, 1, MAXSTRLEN(Subject2));
          END;
        END;

        "Send to" := ToEmailAddress;
        "Send CC" := SendCC;
        IF Subject2 <> '' THEN
          Subject := Subject2
        ELSE
          Subject := COPYSTR(
            STRSUBSTNO(
              EmailSubjectCapTxt,CompanyInformation.Name,EmailDocName,PostedDocNo),1,
            MAXSTRLEN(Subject));

        MailTemplateManagement.GetMailTemplate(MailTemplate, MailTemplateNo, Dimension1Code);
        IF (MailTemplate."Use Mail Template Subject Text") THEN
          Subject := MailTemplateManagement.GetLayoutTextSubstitutedSubjectOnly(MailTemplateNo, LanguageCode, SourceVariant);

        "Attachment File Path" := AttachmentFilePath;
        "Attachment Name" := AttachmentFileName;
        GetMailTemplate(TempEmailItem, MailTemplateNo, Dimension1Code);
        GetValuesFromMailTemplate(TempEmailItem, MailTemplateNo, Dimension1Code);
        VALIDATE("Plaintext Formatted", FALSE);
        IF HtmlBodyFilePath <> '' THEN
          VALIDATE("Body File Path", HtmlBodyFilePath)
        ELSE
          GetBodyTxt(TempEmailItem, SourceVariant, MailTemplateNo, LanguageCode);
        FillTempEmailAttachmentNames(TempEmailAttachment,TempEmailItem,EmailDocName,PostedDocNo);
        TempEmailItem.SetTempEmailAttachments(TempEmailAttachment);
        MailSent := Send(HideDialog);
        ServiceOrderEMailQueueEntryNo := 0;
      END;
      EXIT(MailSent);
    END;

    PROCEDURE SendEmailViaServiceOrderEmailQueue@1100528513(DocNo@1100528513 : Code[20];SendEmaillToName@1100528511 : Text[100];SendTo@1100528510 : Text[250];EMailQueueDocumentType@1100528509 : Integer;MailTemplateNo@1100528504 : Integer;Dimension1Code@1100528514 : Code[20];LanguageCode@1100528506 : Code[10];SourceVariant@1100528503 : Variant;SubjectText2@1100528400 : Text[250];EmailDocName@1100528501 : Text[50]) : Boolean;
    VAR
      ServiceOrderEMailQueue@1100528500 : Record 11020337;
      TempEmailItem@1100525000 : TEMPORARY Record 9500;
      MailTemplateManagement@1100528300 : Codeunit 11012622;
      SubjectText@1100528401 : Text[250];
      BodyText@1100528512 : Text;
    BEGIN
      //**4PS
      IF SubjectText2 <> '' THEN
        SubjectText := SubjectText2
      ELSE
        SubjectText := COPYSTR(
          STRSUBSTNO(EmailSubjectCapTxt,SendEmaillToName,EmailDocName,DocNo),
          1,MAXSTRLEN(ServiceOrderEMailQueue.Subject));

      GetMailTemplate(TempEmailItem, MailTemplateNo, Dimension1Code);
      GetValuesFromMailTemplate(TempEmailItem, MailTemplateNo , Dimension1Code);
      BodyText := MailTemplateManagement.GetLayoutTextSubstitutedBodyOnly(MailTemplateNo, LanguageCode, SourceVariant);
      ServiceOrderEMailQueueEntryNo := ServiceOrderEMailQueue.AddEmailToServiceOrderEmailQueue(
        SendTo,
        TempEmailItem."Send BCC",
        SubjectText,
        EMailQueueDocumentType,
        DocNo,
        BodyText,
        Dimension1Code,
        TempEmailAttachment);
      MailSent := (ServiceOrderEMailQueueEntryNo > 0);
      EXIT(MailSent);
    END;

    LOCAL PROCEDURE CheckOnBehalfOf@1100528405(MailTemplateNo@1100528401 : Integer;Dimension1Code@1100528500 : Code[20]);
    VAR
      TempEmailItem@1100528400 : TEMPORARY Record 9500;
    BEGIN
      //**4PS
      GetMailTemplate(TempEmailItem, MailTemplateNo, Dimension1Code);
    END;

    LOCAL PROCEDURE GetMailTemplate@1100528502(VAR TempEmailItem@1100528501 : TEMPORARY Record 9500;MailTemplateNo@1100528500 : Integer;Dimension1Code@1100528504 : Code[20]);
    VAR
      MailTemplateManagement@1100528300 : Codeunit 11012622;
      FromName@1100528400 : Text[50];
      FromEmail@1100528401 : Text[80];
    BEGIN
      //**4PS
      IF NOT MailTemplateManagement.GetApplicableMailTemplateFromValues(MailTemplateNo, Dimension1Code, FALSE, FromName, FromEmail) THEN BEGIN
        TempEmailAttachment.DeleteTempEmailAttachmentFiles(TempEmailAttachment);
        MailTemplateManagement.CheckMailTemplateFromValues(MailTemplateNo, Dimension1Code); // Give error message
      END;

      TempEmailItem."From Name" := FromName;
      TempEmailItem."From Address" := FromEmail;
    END;

    PROCEDURE GetValuesFromMailTemplate@1100528503(VAR TempEmailItem@1100528501 : TEMPORARY Record 9500;MailTemplateNo@1100528500 : Integer;Dimension1Code@1100528503 : Code[20]);
    VAR
      MailTemplate@1100528502 : Record 11229450;
      MailTemplateManagement@1100525000 : Codeunit 11012622;
    BEGIN
      //**4PS
      IF (NOT MailTemplateManagement.GetMailTemplate(MailTemplate, MailTemplateNo, Dimension1Code)) THEN
        EXIT;

      IF TempEmailItem."Send CC" <> '' THEN
        TempEmailItem."Send CC" += ';' + MailTemplate.Cc
      ELSE
        TempEmailItem."Send CC" := MailTemplate.Cc;
      TempEmailItem."Send BCC" := MailTemplate.Bcc;
      TempEmailItem."Edit in Outlook" := MailTemplate."Edit in Outlook";
    END;

    LOCAL PROCEDURE GetBodyTxt@1100528500(VAR TempEmailItem@1100528502 : TEMPORARY Record 9500;VAR SourceVariant@1100528505 : Variant;MailTemplateNo@1100525000 : Integer;LanguageCode@1100525002 : Code[10]);
    VAR
      MailTemplateManagement@1100528300 : Codeunit 11012622;
      BodyText@1100528501 : Text;
    BEGIN
      //**4PS
      BodyText := MailTemplateManagement.GetLayoutTextSubstitutedTotalBodyOnly(MailTemplateNo, LanguageCode, SourceVariant);
      IF MailTemplateNo = -1 THEN //Added for backward compatibility, codeunit 11012816.
        BodyText := SpecialBodyText;
      TempEmailItem.SetBodyText(BodyText);
    END;

    LOCAL PROCEDURE CrLf@1100528501() Result : Text[2];
    BEGIN
      //**4PS
      Result[1] := 13;
      Result[2] := 10;
    END;

    PROCEDURE IsSent@1100528509() : Boolean;
    BEGIN
      //**4PS
      EXIT(MailSent);
    END;

    PROCEDURE SetTempEmailAttachments@1100528510(VAR TempEmailAttachment2@1100528500 : TEMPORARY Record 11229294);
    BEGIN
      //**4PS
      IF TempEmailAttachment2.FINDSET THEN
        REPEAT
          TempEmailAttachment := TempEmailAttachment2;
          TempEmailAttachment.INSERT;
        UNTIL TempEmailAttachment2.NEXT = 0;
    END;

    PROCEDURE FillTempEmailAttachmentNames@1100528511(VAR TempEmailAttachment@1100528400 : TEMPORARY Record 11229294;TempEmailItem@1100528503 : TEMPORARY Record 9500;EMailDocName@1100528500 : Text[50];PostedDocNo@1100528501 : Code[20]);
    VAR
      I@1100528502 : Integer;
    BEGIN
      //**4PS
      I := 1;
      IF TempEmailAttachment.FINDSET THEN
        REPEAT
          IF TempEmailAttachment."Attachment Server File Path" = TempEmailItem."Attachment File Path" THEN
            TempEmailAttachment."Attachment Name" := TempEmailItem."Attachment Name"
          ELSE
            IF TempEmailAttachment."Attachment Name" = '' THEN BEGIN
              TempEmailAttachment."Attachment Name" := ComposePDFFileName(EMailDocName, PostedDocNo, I);
              I := I + 1;
            END;
          TempEmailAttachment.MODIFY;
        UNTIL TempEmailAttachment.NEXT = 0;
    END;

    PROCEDURE ComposePDFFileName@1100528409(EMailDocName@1100528402 : Text;DocNo@1100528401 : Code[20];I@1100528400 : Integer) : Text;
    BEGIN
      //**4PS
      IF I = 0 THEN
        EXIT(STRSUBSTNO(PdfFileNameAndDocNo, EMailDocName, DocNo))
      ELSE
        EXIT(STRSUBSTNO(PdfFileNameAndDocNo, EMailDocName, DocNo + '_' + FORMAT(I)));
    END;

    PROCEDURE SetGlobalLanguage@1100528410(LanguageCode@1100528400 : Code[10]);
    VAR
      Language@1100528402 : Record 8;
    BEGIN
      //**4PS
      OriginalLanguageID := GLOBALLANGUAGE;
      IF LanguageCode <> '' THEN
        GLOBALLANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    PROCEDURE ResetGlobalLanguage@1100528411();
    BEGIN
      //**4PS
      IF OriginalLanguageID <> GLOBALLANGUAGE THEN
        GLOBALLANGUAGE(OriginalLanguageID);
    END;

    PROCEDURE SetSpecialBodyText@1100528417(SpecialBodyText2@1100528400 : Text);
    BEGIN
      //**4PS
      //Added for backward compatibility, codeunit 11012816.
      SpecialBodyText := SpecialBodyText2;
    END;

    PROCEDURE GetServiceOrderEMailQueueEntryNo@1100528419() : Integer;
    BEGIN
      //**4PS
      EXIT(ServiceOrderEMailQueueEntryNo);
    END;

    PROCEDURE EmailMessageWithoutAttachment@1100528415(SendEmailToName@1100528410 : Text[100];ToEmailAddress@1100528409 : Text[250];MailTemplateNo@1100528406 : Integer;Dimension1Code@1100528405 : Code[20];LanguageCode@1100528404 : Code[10];SourceVariant@1100528402 : Variant;Subject@1100528401 : Text[250];ShowEmailDialog@1100528400 : Boolean);
    BEGIN
      //**4PS
      EmailFile4PS(
        '',
        '',
        '',
        '',
        ToEmailAddress,
        MailTemplateNo,
        Dimension1Code,
        LanguageCode,
        SourceVariant,
        Subject,
        '',
        NOT ShowEmailDialog);
    END;

    PROCEDURE SetCC@1100529800(NewCC@1100528500 : Text);
    BEGIN
      //**4PS
      SendCC := NewCC;
    END;

    PROCEDURE EmailSingleDocumentProperty@1100529600(Recipient@1100529606 : Text[250];VAR DocumentProperty@1100529605 : Record 11012746;SendAsAttachment@1100529604 : Boolean;Attachments@1100529603 : ARRAY [5] OF Code[20];ShowMailBeforeSend@1100529601 : Boolean;EMailSubject@1100529616 : Text[250]) : Boolean;
    VAR
      DocumentPropertiesAttachment@1100529615 : Record 11012746;
      TempBlob@1100529602 : Record 99008535;
      FileMgt@1100529613 : Codeunit 419;
      TypeHelper@1100529607 : Codeunit 10;
      WordAutomation@1100529618 : Codeunit 11012400;
      HtmlBodyFilePath@1100529608 : Text[250];
      ServerFileName@1100529611 : Text;
      AttachmentFilePath@1100529617 : Text[250];
      AttachmentFileName@1100529610 : Text[250];
      TmpServerFileName@1100529609 : Text;
      SendTo@1100529600 : Text;
      IsTemporary@1100529612 : Boolean;
      i@1100529614 : Integer;
      DocumentTemplate@1100527550 : Record 11012401;
      DocumentManagement@1100527551 : Codeunit 11012406;
      TempDocumentProperty@1100527552 : TEMPORARY Record 11012746;
    BEGIN
      //**4PS
      TempEmailAttachment.RESET;
      TempEmailAttachment.DELETEALL;

      ServerFileName := DocumentProperty.GetServerFile(IsTemporary, AttachmentFileName);
      AttachmentFilePath := COPYSTR(ServerFileName, 1, MAXSTRLEN(AttachmentFilePath));

      IF SendAsAttachment THEN BEGIN
        IF DocumentTemplate.GET(DocumentProperty."Document Group", DocumentProperty."Document Template") THEN
          IF (DocumentTemplate."Attach to E-Mail as" = DocumentTemplate."Attach to E-Mail as"::"Attachment as PDF") THEN BEGIN
              TempDocumentProperty.INIT;
              TempDocumentProperty.COPY(DocumentProperty);
              TempDocumentProperty.INSERT;
              DocumentManagement.GetStorageLocationForGeneratedDocuments(DocumentTemplate."Document Group", DocumentTemplate, TempDocumentProperty."Contact No.", DocumentTemplate."Storage Type", AttachmentFilePath);
              DocumentManagement.SaveAsPdf(TempDocumentProperty, AttachmentFilePath, TRUE);
              ServerFileName := TempDocumentProperty.GetServerFile(IsTemporary, AttachmentFileName);
              AttachmentFilePath := COPYSTR(ServerFileName, 1, MAXSTRLEN(AttachmentFilePath));
          END;
        TempEmailAttachment."Attachment Server File Path" := AttachmentFilePath;
        TempEmailAttachment."Attachment Name" := AttachmentFileName;
        TempEmailAttachment."Delete Server File" := IsTemporary;
        TempEmailAttachment.INSERT(TRUE);
      END ELSE BEGIN
        FileMgt.BLOBImportFromServerFile(TempBlob, ServerFileName);
        IF TypeHelper.TryConvertWordBlobToHtml(TempBlob) THEN BEGIN
          HtmlBodyFilePath := FileMgt.ServerTempFileName('html');
          FileMgt.BLOBExportToServerFile(TempBlob, HtmlBodyFilePath);
        END ELSE BEGIN
          TmpServerFileName := WordAutomation.ConvertWordDocCreatedFromTemplate(ServerFileName);
          IF TmpServerFileName <> '' THEN BEGIN
            CLEAR(TempBlob);
            FileMgt.BLOBImportFromServerFile(TempBlob, TmpServerFileName);
            IF TypeHelper.TryConvertWordBlobToHtml(TempBlob) THEN BEGIN
              HtmlBodyFilePath := FileMgt.ServerTempFileName('html');
              FileMgt.BLOBExportToServerFile(TempBlob, HtmlBodyFilePath);
            END;
          END;
        END;
      END;

      FOR i := 1 TO ARRAYLEN(Attachments) DO
        IF Attachments[i] <> '' THEN
          IF DocumentPropertiesAttachment.GET(Attachments[i]) THEN BEGIN
            TempEmailAttachment."Attachment Server File Path" := COPYSTR(
              DocumentPropertiesAttachment.GetServerFile(
                TempEmailAttachment."Delete Server File", TempEmailAttachment."Attachment Name"),
                1, MAXSTRLEN(TempEmailAttachment."Attachment Server File Path"));
            TempEmailAttachment.INSERT(TRUE);
          END;

      IF SendEmailServerSide(Recipient, SendAsAttachment, AttachmentFilePath, AttachmentFileName, HtmlBodyFilePath, ShowMailBeforeSend, EMailSubject, SendTo) THEN BEGIN
        DocumentProperty.Description := COPYSTR(EMailSubject, 1, MAXSTRLEN(DocumentProperty.Description));
        DocumentProperty."E-Mail Sent On" := CURRENTDATETIME;
        DocumentProperty."E-Mail Sent By" := USERID;
        DocumentProperty."E-Mail Sent To" := COPYSTR(SendTo, 1, MAXSTRLEN(DocumentProperty."E-Mail Sent To"));
        DocumentProperty.MODIFY;
      END;

      IF IsTemporary AND NOT SendAsAttachment THEN
        FileMgt.DeleteServerFile(ServerFileName);

      EXIT(MailSent);
    END;

    PROCEDURE EmaillDocumentProperties@1100529602(Recipient@1100529606 : Text[250];VAR DocumentProperties@1100529605 : Record 11012746) : Boolean;
    VAR
      DummyTxt@1100529600 : Text;
    BEGIN
      //**4PS
      TempEmailAttachment.RESET;
      TempEmailAttachment.DELETEALL;

      IF DocumentProperties.FINDSET THEN
        REPEAT
          TempEmailAttachment."Attachment Server File Path" := COPYSTR(
            DocumentProperties.GetServerFile(
              TempEmailAttachment."Delete Server File", TempEmailAttachment."Attachment Name"),
              1, MAXSTRLEN(TempEmailAttachment."Attachment Server File Path"));
          TempEmailAttachment.INSERT(TRUE);
        UNTIL DocumentProperties.NEXT = 0;

      EXIT(SendEmailServerSide(Recipient, FALSE, '', '', '', TRUE, DummyTxt, DummyTxt));
    END;

    LOCAL PROCEDURE SendEmailServerSide@1100529603(Recipient@1100529606 : Text[250];SendAsAttachment@1100529604 : Boolean;AttachmentFilePath@1100529617 : Text[250];AttachmentFileName@1100529618 : Text[250];HtmlBodyFilePath@1100529603 : Text[250];ShowMailBeforeSend@1100529601 : Boolean;VAR EMailSubject@1100529616 : Text[250];VAR SendTo@1100529605 : Text) : Boolean;
    VAR
      TempEmailItem@1100529600 : TEMPORARY Record 9500;
    BEGIN
      //**4PS
      WITH TempEmailItem DO BEGIN
        "Send to" := Recipient;
        Subject := EMailSubject;
        GetFromEmailAndName(USERID, "From Name", "From Address");

        IF SendAsAttachment THEN BEGIN
          "Attachment File Path" := AttachmentFilePath;
          "Attachment Name" := AttachmentFileName;
        END ELSE
          IF HtmlBodyFilePath <> '' THEN BEGIN
            "Plaintext Formatted" := FALSE;
            VALIDATE("Body File Path", HtmlBodyFilePath);
          END;

        SetTempEmailAttachments(TempEmailAttachment);
        MailSent := Send(NOT ShowMailBeforeSend);

        IF MailSent THEN BEGIN
          EMailSubject := Subject;
          SendTo := GetSendTo;
        END;
      END;

      EXIT(MailSent);
    END;

    PROCEDURE GetFromEmailAndName@1100529601(UserID@1100528000 : Code[50];VAR FromName@1100529604 : Text[100];VAR FromAddress@1100529603 : Text[250]);
    VAR
      UserSetup@1100528001 : Record 91;
      User@1100529602 : Record 2000000120;
      Employee@1100528002 : Record 5200;
      CompanyInformation@1100529600 : Record 79;
    BEGIN
      //**4PS
      IF UserID <> '' THEN
        IF UserSetup.GET(UserID) THEN BEGIN
          FromAddress := UserSetup."E-Mail";
          User.SETRANGE("User Name", UserID);
          IF User.FINDFIRST THEN
            FromName := User."Full Name";

          IF (FromAddress = '') OR (FromName = '') THEN
            IF UserSetup."Employee No." <> '' THEN
              IF Employee.GET(UserSetup."Employee No.") THEN BEGIN
                IF FromAddress = '' THEN
                  FromAddress := Employee."Company E-Mail";
                IF FromName = '' THEN
                  FromName := Employee."Full Name";
              END;
        END;

      IF FromAddress = '' THEN BEGIN
        CompanyInformation.GET;
        FromName := CompanyInformation.Name;
        FromAddress := CompanyInformation."E-Mail";
      END;
    END;

    LOCAL PROCEDURE IsActive@1100528300(MailTemplateNo@1100528300 : Integer;Dimension1Code@1100528301 : Code[20]) : Boolean;
    VAR
      MailTemplate@1100528302 : Record 11229450;
      MailTemplateManagement@1100528303 : Codeunit 11012622;
    BEGIN
      IF (MailTemplateManagement.GetMailTemplate(MailTemplate, MailTemplateNo, Dimension1Code)) THEN
        EXIT(MailTemplate.Active);
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

