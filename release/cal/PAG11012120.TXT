OBJECT Page 11012120 Item Text
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Text;
               ENU=Text;
               NLD=Tekst;
               NOR=Tekst;
               SVE=Ben„mning];
    InsertAllowed=No;
    DeleteAllowed=No;
    DataCaptionExpr=CaptTxt;
    PageType=Card;
    OnInit=BEGIN
             CurrPage.LOOKUPMODE(TRUE)
           END;

    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN
                         OKOnPush;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Field     ;
                SourceExpr=ItemText;
                MultiLine=Yes }

  }
  CODE
  {
    VAR
      SalesLineRec@1210190023 : Record 37;
      SalesInvoiceLineRec@1100525004 : Record 113;
      SalesCrMemoLineRec@1100525005 : Record 115;
      PurchLineRec@1210190019 : Record 39;
      PurchInvLine@1100525009 : Record 123;
      PurchaseLineArchive@1100525008 : Record 11072058;
      BudgetLineRec@1210190017 : Record 11012001;
      AdviceRec@1210190016 : Record 11012055;
      ProjCostPlusRec@1210190015 : Record 11012019;
      ApprovalLineRec@1100485000 : Record 11012032;
      EstLineRecNEW@1100528900 : Record 11072072;
      BaseRecipeLineRec@1100528901 : Record 11020582;
      EstRecipeLineRec@1100528902 : Record 11072075;
      PartLineRecNEW@1100528903 : Record 11072076;
      EstimateLineRAW@1100528905 : Record 11125698;
      ServCostPlusRec@1210190020 : Record 11012825;
      ItemJournalLine@1210190024 : Record 83;
      RequisitionLine@1210190025 : Record 246;
      DeviationRec@1210190027 : Record 11012961;
      KomoActionRec@1210190030 : Record 11012972;
      InstDeviationRec@1210190029 : Record 11012966;
      PlotDeviationRec@1210190028 : Record 11012969;
      PlotDevActionRec@1210190031 : Record 11012973;
      ProjectAssignmentRec@1100485006 : Record 11012456;
      ContactFeatureRec@1100485003 : Record 11012752;
      PlantTransRideLineRec@1100525003 : Record 11020518;
      SiteMgtGetOrderLineRec@1100525002 : Record 11125532;
      ProjectMaterialReqLine@1210190033 : Record 11012526;
      OptionBudgetRec@1210190034 : Record 11012503;
      MaintSchemeVersionLine@1100528600 : Record 11071744;
      ServSurvObjectAddAct@1100525001 : Record 11071814;
      ProjectRequisitionLine@1100529400 : Record 11229331;
      PBInstallmentOverviewLine@1100528602 : Record 11072318;
      ServiceOrderBudgetLine@1100529002 : Record 11012875;
      PlantMaintSchemeVerLine@1100529000 : Record 11072675;
      ItemText@1210190009 : Text[250];
      g_table@1210190008 : Integer;
      g_type@1210190022 : 'intern,extern';
      g_code1@1210190007 : Code[20];
      g_code2@1210190006 : Code[20];
      g_code3@1210190005 : Code[20];
      g_code4@1210190004 : Code[20];
      g_code5@1210190003 : Code[20];
      g_code6@1210190002 : Code[20];
      g_code7@1210190035 : Code[20];
      g_int1@1210190001 : Integer;
      g_int2@1210190000 : Integer;
      g_int3@1100525007 : Integer;
      g_int4@1100525006 : Integer;
      g_txt1@1100485004 : Text[50];
      g_date1@1100528601 : Date;
      gExchangeItemText@1100529001 : Boolean;
      CaptTxt@1210190026 : Text[250];
      Text001@1100528904 : TextConst 'DEU=Herkunfttabelle unbekannt;ENU=Unknown Source Table;NLD=Herkomsttabel onbekend;NOR=Ukjent Kildetabell;SVE=Ok„nd ursprungstabell';

    PROCEDURE SetSelection@2(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_code5@11012006 : Code[20];l_code6@11012007 : Code[20];l_int1@1210190001 : Integer;l_int2@1210190000 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_int1 := l_int1;
      g_int2 := l_int2;
      HandleText(FALSE);
    END;

    PROCEDURE SetSelection2@1100485001(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_txt1@1210190000 : Text[50]);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_txt1 := l_txt1;
      HandleText(FALSE);
    END;

    PROCEDURE SetSelection3@1210190003(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_code5@11012006 : Code[20];l_code6@11012007 : Code[20];l_code7@1210190000 : Code[20];l_int1@1210190001 : Integer);
    BEGIN
      //kzwerver, 110808, n, 26039
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_code7 := l_code7;
      g_int1 := l_int1;
      HandleText(FALSE);
    END;

    PROCEDURE SetSelection4@1100528601(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_code5@11012006 : Code[20];l_code6@11012007 : Code[20];l_int1@1210190001 : Integer;l_int2@1100528600 : Integer;l_date1@1100528601 : Date);
    VAR
      CentralDataManagement@1100528602 : Codeunit 11012010;
      MaintSchemeVersionLine@1100528603 : Record 11071744;
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_int1 := l_int1;
      g_int2 := l_int2;
      g_date1 := l_date1;
      HandleText(FALSE);

      IF g_table = DATABASE::"Maint. Scheme Version Line" THEN
        CASE g_int1 OF
          MaintSchemeVersionLine."Line Type"::"Maintenance Scheme":
            IF NOT CentralDataManagement.MaintenanceSchemeFormEditable THEN
              CurrPage.EDITABLE(FALSE);
          MaintSchemeVersionLine."Line Type"::"Standard Object",
          MaintSchemeVersionLine."Line Type"::"Standard Object Installation",
          MaintSchemeVersionLine."Line Type"::"Standard Object Deinstallation":
            IF NOT CentralDataManagement.StandardObjectFormEditable THEN
              CurrPage.EDITABLE(FALSE);
        END;
    END;

    PROCEDURE SetSelection5@1100525000(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_code5@11012006 : Code[20];l_code6@11012007 : Code[20];l_int1@1210190001 : Integer;l_int2@1210190000 : Integer;l_int3@1100525000 : Integer;l_int4@1100525001 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_int1 := l_int1;
      g_int2 := l_int2;
      g_int3 := l_int3;
      g_int4 := l_int4;
      HandleText(FALSE);
    END;

    PROCEDURE SetSelection6@1100529000(l_table@11012000 : Integer;l_ItemText@11012001 : Text);
    BEGIN
      g_table := l_table;
      ItemText := l_ItemText;
      gExchangeItemText := TRUE;
      HandleText(FALSE);
    END;

    PROCEDURE TextType@1210190001(l_type@1210190000 : 'intern,extern');
    BEGIN
      g_type := l_type;
    END;

    PROCEDURE HandleText@1210190000(StoreText@1210190000 : Boolean);
    BEGIN
      CASE g_table OF
        DATABASE::"Sales Line":
          BEGIN
            CaptTxt := SalesLineRec.TABLECAPTION;
            IF SalesLineRec.GET(g_int2, g_code1, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                SalesLineRec.VALIDATE(Text, ItemText);
                SalesLineRec.MODIFY;
              END ELSE BEGIN
                ItemText := SalesLineRec.Text;
              END;
            END;
          END;
        DATABASE::"Sales Invoice Line":
          BEGIN
            CaptTxt := SalesInvoiceLineRec.TABLECAPTION;
            IF SalesInvoiceLineRec.GET(g_code1, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                SalesInvoiceLineRec.VALIDATE(Text, ItemText);
                IF SalesInvoiceLineRec.WRITEPERMISSION THEN  //CAll C015248
                  SalesInvoiceLineRec.MODIFY;
              END ELSE BEGIN
                ItemText := SalesInvoiceLineRec.Text;
              END;
            END;
          END;
        DATABASE::"Sales Cr.Memo Line":
          BEGIN
            CaptTxt := SalesCrMemoLineRec.TABLECAPTION;
            IF SalesCrMemoLineRec.GET(g_code1, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                SalesCrMemoLineRec.VALIDATE(Text, ItemText);
                IF SalesCrMemoLineRec.WRITEPERMISSION THEN  //CAll C015248
                  SalesCrMemoLineRec.MODIFY;
              END ELSE BEGIN
                ItemText := SalesCrMemoLineRec.Text;
              END;
            END;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            CaptTxt := PurchLineRec.TABLECAPTION;
            IF PurchLineRec.GET(g_int2, g_code1, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                IF PurchLineRec.WRITEPERMISSION THEN BEGIN
                  PurchLineRec.VALIDATE(Text, ItemText);
                  PurchLineRec."Modified by" := USERID; //DP00469
                  PurchLineRec."Last Date Modified" := TODAY;//DP00469
                  PurchLineRec.MODIFY;
                END;
              END ELSE BEGIN
                ItemText := PurchLineRec.Text;
              END;
            END;
          END;
        DATABASE::"Purch. Inv. Line":
          BEGIN
            CaptTxt := PurchInvLine.TABLECAPTION;
            IF PurchInvLine.GET(g_code1, g_int1) THEN
              ItemText := PurchInvLine.Text;
          END;
        DATABASE::"Purchase Line Archive":
          BEGIN
            CaptTxt := PurchaseLineArchive.TABLECAPTION;
            IF PurchaseLineArchive.GET(g_int2, g_code1, g_int3, g_int4, g_int1) THEN
              ItemText := PurchaseLineArchive.Text;
          END;
        DATABASE::"Budget Line":
          BEGIN
            CaptTxt := BudgetLineRec.TABLECAPTION;
            IF BudgetLineRec.GET(g_code1, g_code2, g_code3, g_code4, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                BudgetLineRec.VALIDATE("External Text", ItemText);
                BudgetLineRec.MODIFY;
              END ELSE BEGIN
                ItemText := BudgetLineRec."External Text";
              END;
            END;
          END;
        DATABASE::"Option Budget": //kzwerver, 110808, n, #23203
          BEGIN
            CaptTxt := OptionBudgetRec.TABLECAPTION;
            IF OptionBudgetRec.GET(g_code1, g_code2, g_code3, g_code4, g_code5, g_code6, g_code7, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                OptionBudgetRec.VALIDATE(Text, ItemText);
                OptionBudgetRec.MODIFY;
              END ELSE BEGIN
                ItemText := OptionBudgetRec.Text;
              END;
            END;
          END;
        DATABASE::"Project Cost Plus Entry":
          BEGIN
            CaptTxt := ProjCostPlusRec.TABLECAPTION;
            IF ProjCostPlusRec.GET(g_code1, g_code2, g_code3, g_code4, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                ProjCostPlusRec.VALIDATE(Text, ItemText);
                ProjCostPlusRec.MODIFY;
              END ELSE BEGIN
                ItemText := ProjCostPlusRec.Text;
              END;
            END;
          END;
        DATABASE::"Invoice Approval Line":
          BEGIN
            CaptTxt := ApprovalLineRec.TABLECAPTION;
            IF ApprovalLineRec.GET(g_code1, g_int2, g_code2, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                ApprovalLineRec.VALIDATE(Text, ItemText);
                ApprovalLineRec.MODIFY;
              END ELSE BEGIN
                ItemText := ApprovalLineRec.Text;
              END;
            END;
          END;
        DATABASE::"Estimate Part Line":  //DP00381
          BEGIN
            CaptTxt := PartLineRecNEW.TABLECAPTION;
            IF PartLineRecNEW.GET(g_code3, g_code4, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                IF g_type = g_type::intern THEN
                  PartLineRecNEW.VALIDATE("Internal Text", ItemText)
                ELSE
                  PartLineRecNEW.VALIDATE("External Text", ItemText);
                PartLineRecNEW.MODIFY;
              END ELSE BEGIN
                IF g_type = g_type::intern THEN
                  ItemText := PartLineRecNEW."Internal Text"
                ELSE
                  ItemText := PartLineRecNEW."External Text";
              END;
            END;
          END;
        DATABASE::"Estimate Line":  //DP00381
          BEGIN
            CaptTxt := EstLineRecNEW.TABLECAPTION;
            IF EstLineRecNEW.GET(g_code1, g_code2, g_code3, g_code4, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                IF g_type = g_type::intern THEN
                  EstLineRecNEW.VALIDATE("Internal Text", ItemText)
                ELSE
                  EstLineRecNEW.VALIDATE("External Text", ItemText);
                EstLineRecNEW.MODIFY;
              END ELSE BEGIN
                IF g_type = g_type::intern THEN
                  ItemText := EstLineRecNEW."Internal Text"
                ELSE
                  ItemText := EstLineRecNEW."External Text";
              END;
            END;
          END;
        DATABASE::"Base Recipe Line":  //DP00381
          BEGIN
            CaptTxt := BaseRecipeLineRec.TABLECAPTION;
            IF BaseRecipeLineRec.GET(g_code1, g_code2, g_int1) THEN BEGIN  //C031820
              IF StoreText THEN BEGIN
                IF g_type = g_type::intern THEN
                  BaseRecipeLineRec.VALIDATE("Internal Text", ItemText)
                ELSE
                  BaseRecipeLineRec.VALIDATE("External Text", ItemText);
                BaseRecipeLineRec.MODIFY;
              END ELSE BEGIN
                IF g_type = g_type::intern THEN
                  ItemText := BaseRecipeLineRec."Internal Text"
                ELSE
                  ItemText := BaseRecipeLineRec."External Text";
              END;
            END;
          END;
        DATABASE::"Estimate Recipe Line":  //DP00381
          BEGIN
            CaptTxt := EstRecipeLineRec.TABLECAPTION;
            IF EstRecipeLineRec.GET(g_code1, g_code2, g_code3, g_code4, g_int1, g_code5, g_code6, g_int2) THEN BEGIN
              IF StoreText THEN BEGIN
                IF g_type = g_type::intern THEN
                  EstRecipeLineRec.VALIDATE("Internal Text", ItemText)
                ELSE
                  EstRecipeLineRec.VALIDATE("External Text", ItemText);
                EstRecipeLineRec.MODIFY;
              END ELSE BEGIN
                IF g_type = g_type::intern THEN
                  ItemText := EstRecipeLineRec."Internal Text"
                ELSE
                  ItemText := EstRecipeLineRec."External Text";
              END;
            END;
          END;
        DATABASE::"Estimate Line RAW":  //DP01676
          BEGIN
            CaptTxt := EstimateLineRAW.TABLECAPTION;
            IF EstimateLineRAW.GET(g_code1, g_code2, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                IF g_type = g_type::intern THEN
                  EstimateLineRAW.VALIDATE("Internal Text", ItemText)
                ELSE
                  EstimateLineRAW.VALIDATE("External Text", ItemText);
                EstimateLineRAW.MODIFY;
              END ELSE BEGIN
                IF g_type = g_type::intern THEN
                  ItemText := EstimateLineRAW."Internal Text"
                ELSE
                  ItemText := EstimateLineRAW."External Text";
              END;
            END;
          END;
        DATABASE::"Advice Order Line":
          BEGIN
            CaptTxt := AdviceRec.TABLECAPTION;
            //DP01378.sn
            IF g_int2 = 0 THEN BEGIN  //project
              IF AdviceRec.GET(AdviceRec."Record Type"::Project, g_code1, '', '', g_int1) THEN BEGIN
                IF StoreText THEN BEGIN
                  AdviceRec.VALIDATE("External Text", ItemText);
                  AdviceRec.MODIFY;  //C028564: skip status check
                END ELSE BEGIN
                  ItemText := AdviceRec."External Text";
                END;
              END;
            END;
            IF g_int2 = 1 THEN BEGIN  //service
              IF AdviceRec.GET(AdviceRec."Record Type"::ServOrder, '', g_code2, '', g_int1) THEN BEGIN
                IF StoreText THEN BEGIN
                  AdviceRec.VALIDATE("External Text", ItemText);
                  AdviceRec.MODIFY;  //C028564: skip status check
                END ELSE BEGIN
                  ItemText := AdviceRec."External Text";
                END;
              END;
            END;
            IF g_int2 = 2 THEN BEGIN  //account
              IF AdviceRec.GET(AdviceRec."Record Type"::"G/L Account", '', '', g_code3, g_int1) THEN BEGIN
                IF StoreText THEN BEGIN
                  AdviceRec.VALIDATE("External Text", ItemText);
                  AdviceRec.MODIFY;  //C028564: skip status check
                END ELSE BEGIN
                  ItemText := AdviceRec."External Text";
                END;
              END;
            END;
            //DP01378.en
          END;
        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            CaptTxt := ServCostPlusRec.TABLECAPTION;
            IF ServCostPlusRec.GET(g_code1, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                ServCostPlusRec.VALIDATE(Text, ItemText);
                ServCostPlusRec.MODIFY;
              END ELSE BEGIN
                ItemText := ServCostPlusRec.Text;
              END;
            END;
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            CaptTxt := ItemJournalLine.TABLECAPTION;
            IF ItemJournalLine.GET(g_code1, g_code2, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                ItemJournalLine.VALIDATE(Text, ItemText);
                ItemJournalLine.MODIFY;
              END ELSE BEGIN
                ItemText := ItemJournalLine.Text;
              END;
            END;
          END;
        DATABASE::"Requisition Line":
          BEGIN
            CaptTxt := RequisitionLine.TABLECAPTION;
            IF RequisitionLine.GET(g_code1, g_code2, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                RequisitionLine.VALIDATE(Text, ItemText);
                RequisitionLine.MODIFY;
              END ELSE BEGIN
                ItemText := RequisitionLine.Text;
              END;
            END;
          END;
        DATABASE::"Purchase Requisition Line":  //DP01137
          BEGIN
            CaptTxt := ProjectRequisitionLine.TABLECAPTION;
            IF ProjectRequisitionLine.GET(g_code1, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                ProjectRequisitionLine.VALIDATE("External Text", ItemText);
                ProjectRequisitionLine.MODIFY;
              END ELSE BEGIN
                ItemText := ProjectRequisitionLine."External Text";
              END;
            END;
          END;
        DATABASE::"KOMO Deviation":
          BEGIN
            CaptTxt := DeviationRec.TABLECAPTION;
            IF DeviationRec.GET(g_code1) THEN BEGIN
              IF StoreText THEN BEGIN
                DeviationRec.VALIDATE(Text, ItemText);
                DeviationRec.MODIFY;
              END ELSE BEGIN
                ItemText := DeviationRec.Text;
              END;
            END;
          END;
        DATABASE::"KOMO Action":
          BEGIN
            CaptTxt := KomoActionRec.TABLECAPTION;
            IF KomoActionRec.GET(g_code1) THEN BEGIN
              IF StoreText THEN BEGIN
                KomoActionRec.VALIDATE(Text, ItemText);
                KomoActionRec.MODIFY;
              END ELSE BEGIN
                ItemText := KomoActionRec.Text;
              END;
            END;
          END;
        DATABASE::"KOMO Deviation by Installation":
          BEGIN
            CaptTxt := InstDeviationRec.TABLECAPTION;
            IF InstDeviationRec.GET(g_code1, g_code2) THEN BEGIN
              IF StoreText THEN BEGIN
                InstDeviationRec.VALIDATE(Text, ItemText);
                InstDeviationRec.MODIFY;
              END ELSE BEGIN
                ItemText := InstDeviationRec.Text;
              END;
            END;
          END;
        DATABASE::"Deviation by Plot/Installation":
          BEGIN
            CaptTxt := PlotDeviationRec.TABLECAPTION;
            IF PlotDeviationRec.GET(g_code1, g_code2, g_int1, g_code3) THEN BEGIN
              IF StoreText THEN BEGIN
                PlotDeviationRec.VALIDATE(Text, ItemText);
                PlotDeviationRec.MODIFY;
              END ELSE BEGIN
                ItemText := PlotDeviationRec.Text;
              END;
            END;
          END;
        DATABASE::"Action by Plot/Inst./Deviation":
          BEGIN
            CaptTxt := PlotDevActionRec.TABLECAPTION;
            IF PlotDevActionRec.GET(g_code1, g_code2, g_int1, g_code3, g_code4) THEN BEGIN
              IF StoreText THEN BEGIN
                PlotDevActionRec.VALIDATE(Text, ItemText);
                PlotDevActionRec.MODIFY;
              END ELSE BEGIN
                ItemText := PlotDevActionRec.Text;
              END;
            END;
          END;
        DATABASE::"Project Assignment":
          BEGIN
            CaptTxt := ProjectAssignmentRec.TABLECAPTION;
            ProjectAssignmentRec.RESET;
            ProjectAssignmentRec.SETRANGE("Complaint No.",g_code1);
            ProjectAssignmentRec.SETRANGE("Commision No.",g_code2);
            IF ProjectAssignmentRec.FIND('-') THEN BEGIN
              IF StoreText THEN BEGIN
                ProjectAssignmentRec.VALIDATE(Text, ItemText);
                ProjectAssignmentRec.MODIFY;
              END ELSE BEGIN
                ItemText := ProjectAssignmentRec.Text;
              END;
            END;
          END;
        DATABASE::"Contact Feature":
          BEGIN
            CaptTxt := ContactFeatureRec.TABLECAPTION;
            IF ContactFeatureRec.GET(g_txt1, g_code1) THEN
              IF StoreText THEN BEGIN
                ContactFeatureRec.VALIDATE(Text, ItemText);
                ContactFeatureRec.MODIFY;
              END ELSE
                ItemText := ContactFeatureRec.Text;
              END;
        DATABASE::"Plant Transport Ride Line":
          BEGIN
            CaptTxt := PlantTransRideLineRec.TABLECAPTION;
            IF PlantTransRideLineRec.GET(g_code1, g_code2) THEN BEGIN
              IF StoreText THEN BEGIN
                PlantTransRideLineRec.VALIDATE(Memo, ItemText);
                PlantTransRideLineRec.MODIFY;
              END ELSE BEGIN
                ItemText := PlantTransRideLineRec.Memo;
              END;
            END;
          END;
        DATABASE::"Get Order Line (SMF)":
          BEGIN
            CaptTxt := SiteMgtGetOrderLineRec.TABLECAPTION;
            IF SiteMgtGetOrderLineRec.GET(g_code1, g_int1) THEN BEGIN
              IF StoreText THEN BEGIN
                SiteMgtGetOrderLineRec.VALIDATE("External Text", ItemText);
                SiteMgtGetOrderLineRec.MODIFY;
              END ELSE BEGIN
                ItemText := SiteMgtGetOrderLineRec."External Text";
              END;
            END;
          END;
        DATABASE::"Project Material Req. Line":
          BEGIN
            CaptTxt := ProjectMaterialReqLine.TABLECAPTION;
            IF ProjectMaterialReqLine.GET(g_code1, g_code2, g_int1, g_code3, g_code4, g_int2) THEN BEGIN
              IF g_code6 = 'EXTERNAL' THEN BEGIN
                IF StoreText THEN BEGIN
                  ProjectMaterialReqLine.VALIDATE("External Text", ItemText);
                  ProjectMaterialReqLine.MODIFY;
                END ELSE
                  ItemText := ProjectMaterialReqLine."External Text";
              END;
            END;
          END;
        DATABASE::"Maint. Scheme Version Line":
          BEGIN
            CaptTxt := MaintSchemeVersionLine.TABLECAPTION;
            //Line Type,Type Code,Belongs to Scheme,Index Date,Line No.
            IF MaintSchemeVersionLine.GET(g_int1, g_code1, g_code2, g_date1, g_int2) THEN BEGIN
              IF StoreText THEN BEGIN
                MaintSchemeVersionLine.VALIDATE(Text, ItemText);
                MaintSchemeVersionLine.MODIFY(TRUE);
              END ELSE BEGIN
                ItemText := MaintSchemeVersionLine.Text;
              END;
            END;
          END;
        DATABASE::"Serv. Surv. Object Add. Act.":  //C029478
          BEGIN
            CaptTxt := ServSurvObjectAddAct.TABLECAPTION;
            //Survey No.,Location Code,Seq. No.,Maintenance Scheme Code,Line No.
            IF ServSurvObjectAddAct.GET(g_code1, g_code2, g_int1, g_code3, g_int2) THEN BEGIN
              IF StoreText THEN BEGIN
                ServSurvObjectAddAct.VALIDATE(Text, ItemText);
                ServSurvObjectAddAct.MODIFY(TRUE);
              END ELSE BEGIN
                ItemText := ServSurvObjectAddAct.Text;
              END;
            END;
          END;
        DATABASE::"PB Installment Overview Line":
          BEGIN
            CaptTxt := PBInstallmentOverviewLine.TABLECAPTION;
            IF PBInstallmentOverviewLine.GET(g_code1, g_code2) THEN BEGIN
              IF StoreText THEN BEGIN
                PBInstallmentOverviewLine.VALIDATE(Text, ItemText);
                PBInstallmentOverviewLine.MODIFY(TRUE);
              END ELSE BEGIN
                ItemText := PBInstallmentOverviewLine.Text;
              END;
            END;
          END;
        DATABASE::"Service Order Budget Line":
          BEGIN
            CaptTxt := ServiceOrderBudgetLine.TABLECAPTION;
            IF NOT gExchangeItemText THEN BEGIN
              IF ServiceOrderBudgetLine.GET(g_int1, g_code1, g_code2, g_code3, g_code4, g_int2) THEN BEGIN
                IF StoreText THEN BEGIN
                  ServiceOrderBudgetLine.VALIDATE("External Text", ItemText);
                  ServiceOrderBudgetLine.MODIFY(TRUE);
                END ELSE BEGIN
                  ItemText := ServiceOrderBudgetLine."External Text";
                END;
              END;
            END;
          END;
        DATABASE::"Plant Maint. Scheme Ver. Line":
          BEGIN
            CaptTxt := PlantMaintSchemeVerLine.TABLECAPTION;
            IF NOT gExchangeItemText THEN BEGIN
              IF PlantMaintSchemeVerLine.GET(g_int1, g_code1, g_code2, g_code3, g_date1, g_int2) THEN BEGIN
                IF StoreText THEN BEGIN
                  PlantMaintSchemeVerLine.VALIDATE(Text, ItemText);
                  PlantMaintSchemeVerLine.MODIFY(TRUE);
                END ELSE BEGIN
                  ItemText := PlantMaintSchemeVerLine.Text;
                END;
              END;
            END;
          END;

        ELSE
          MESSAGE(Text001);  //DP00381
      END;
    END;

    PROCEDURE GetTextField@1210190002() : Text[250];
    BEGIN
      //kzwerver, 110505, n, #19743
      EXIT(ItemText);
    END;

    LOCAL PROCEDURE OKOnPush@19066895();
    BEGIN
      HandleText(CurrPage.EDITABLE);
    END;

    BEGIN
    END.
  }
}

