OBJECT Page 11012085 Prognosis
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11012035=rimd;
    CaptionML=[ENU=Prognosis;
               NOR=Prognose;
               SVE=Prognos];
    SourceTable=Table11012034;
    DataCaptionFields=Project No.;
    PageType=Document;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Prognosis;
                                NOR=Ny,Behandle,Rapport,Prognose;
                                SVE=Ny,Behandla,Rapport,Prognos];
    OnInit=VAR
             GranulePermissionManagment@1100530700 : Codeunit 11012279;
           BEGIN
             FixPrognosisLineEditable := TRUE;
             TextEditable := TRUE;
             ExpectedFinishingDateEditable := TRUE;
             CommentEditable := TRUE;
             PrognosisDateEditable := TRUE;
             ProjectNoEditable := TRUE;
             PrognosisDetailedEnabled := TRUE;
             DetailedOrElementEnabled := TRUE;
             ReleaseCalculationResultVisible := GranulePermissionManagment.PermissionDedicatedVolkerWessels();
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 IF NOT UserSetup.GET(USERID) THEN
                   UserSetup.INIT;
               END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=VAR
                  Proj@1100525001 : Record 11072003;
                BEGIN
                  OnAfterGetCurrRecord;
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02

                  ProjSetup.GET;
                  "Fix Prognosis Line" := ProjSetup."Fix Prognosis Line";
                  "Include Plot Price in Revenues" := ProjSetup."Include Plot Price in Revenues";
                  IF ("Project No." = '') AND (xRec."Project No." <> '') THEN
                    "Project No." := xRec."Project No.";
                  IF "Project No." <> '' THEN BEGIN
                    IF Proj.GET("Project No.") THEN
                      "Prognosis Level" := Proj."Prognosis Level";
                  END;

                  SetupDetailedPrognosisOptions;
                END;

    OnDeleteRecord=BEGIN
                     TESTFIELD(Fixed, FALSE);  //*31928
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 8       ;1   ;ActionGroup;
                      CaptionML=[ENU=&Prognosis;
                                 NOR=&Prognose;
                                 SVE=&Prognos] }
      { 1210190017;2 ;Action    ;
                      CaptionML=[ENU=&Documents;
                                 NOR=&Dokumenter;
                                 SVE=&Dokument];
                      Image=Documents;
                      OnAction=VAR
                                 RecRef@1210190001 : RecordRef;
                                 DocumentFilters@1210190000 : Codeunit 11012432;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
                               END;
                                }
      { 1100525016;1 ;ActionGroup;
                      CaptionML=[ENU=Lines;
                                 NOR=Rader;
                                 SVE=Rader];
                      ActionContainerType=RelatedInformation }
      { 1100529700;2 ;Action    ;
                      Name=Cost;
                      CaptionML=[ENU=Cost;
                                 NOR=Kostnader;
                                 SVE=Kostnader];
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 PrognosisLines@1100529700 : Page 11012086;
                               BEGIN
                                 PrognosisLines.FillData(Rec);
                                 PrognosisLines.RUN;
                               END;
                                }
      { 1100525020;2 ;Action    ;
                      Name=Revenue;
                      CaptionML=[ENU=Revenue;
                                 NOR=Inntekter;
                                 SVE=Int„kter];
                      RunObject=Page 11012062;
                      RunPageView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                  WHERE(Cost Type=CONST(Revenue));
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525028;2 ;Action    ;
                      CaptionML=[ENU=Prognosis Costs;
                                 NOR=Elementrader;
                                 SVE=Elementrader];
                      RunObject=Page 11124964;
                      RunPageView=SORTING(Project No.,Prognosis Date,Element);
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisElementEnabled;
                      Enabled=PrognosisElementEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100527350;2 ;Action    ;
                      Name=Revenue on Element Level;
                      CaptionML=ENU=Prognosis Revenues;
                      RunObject=Page 11129754;
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisElementEnabled;
                      Enabled=PrognosisElementEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525004;2 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Summary;
                                 NOR=Sammendrag;
                                 SVE=Sammanfattning];
                      RunObject=Page 11130134;
                      RunPageOnRec=Yes;
                      RunPageView=SORTING(Project No.,Prognosis Date);
                      RunPageLink=Project No.=FIELD(Project No.);
                      Promoted=Yes;
                      Visible=SummaryElementEnable;
                      Enabled=SummaryElementEnable;
                      Image=Statistics;
                      PromotedCategory=Category4 }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;Action    ;
                      CaptionML=[ENU=&Create;
                                 NOR=&Opprett;
                                 SVE=&Skapa];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Job@1100527350 : Record 11072003;
                               BEGIN
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;

                                 PrognosisMgt.SetIncludeFinishedJobs(includeFinishedJobs);  //IME403

                                 Job.GET("Project No.");
                                 IF Job."Prognosis Level" <> Job."Prognosis Level"::"No Prognosis" THEN BEGIN
                                   CASE "Prognosis Level" OF
                                     "Prognosis Level"::Detailed:
                                       PrognosisMgt.ProcessPrognosis(Rec);
                                     "Prognosis Level"::Rough:
                                       PrognosisMgt.CreatePrognosis(Rec, CostTypes::Both);
                                     "Prognosis Level"::Element:
                                       ProcessPrognosisElement(Rec);
                                   END;
                                 END ELSE
                                   ERROR(Text000, Job."Prognosis Level", Job.FIELDCAPTION("Prognosis Level"), Job."Prognosis Level");
                               END;
                                }
      { 20      ;1   ;ActionGroup;
                      Name=FunctionsButton;
                      CaptionML=[ENU=F&unctions;
                                 NOR=Fu&nksjon;
                                 SVE=F&unktioner] }
      { 1100525094;2 ;Action    ;
                      CaptionML=[ENU=Calculate Surcharges;
                                 NOR=Beregn tilleggsgebyrer;
                                 SVE=Ber„kna till„ggsavgifter];
                      Enabled=PrognosisDetailedEnabled;
                      Image=Calculate;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);

                                 IF NOT CONFIRM(Text007) THEN
                                   EXIT;

                                 "Ovh. Surcharges Calculated" := TRUE;
                                 "Altered After Calculation" := FALSE;
                                 MODIFY;

                                 RemoveSurcharges;
                                 CalculateSurcharges;
                               END;
                                }
      { 1100525095;2 ;Action    ;
                      CaptionML=[ENU=Delete Surcharges;
                                 NOR=Fjern tilleggsgebyrer;
                                 SVE=Ta bort till„ggsavgifter];
                      Enabled=PrognosisDetailedEnabled;
                      Image=Delete;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE);

                                 CheckFixed;
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);

                                 IF NOT CONFIRM(Text009) THEN
                                   EXIT;

                                 "Ovh. Surcharges Calculated" := FALSE;
                                 "Altered After Calculation" := FALSE;
                                 MODIFY;

                                 RemoveSurcharges;
                               END;
                                }
      { 1100525005;2 ;Action    ;
                      CaptionML=[ENU=Calculate Risc Coverage;
                                 SVE=Ber„kna riskomf†ng];
                      Enabled=PrognosisDetailedEnabled;
                      Image=Calculate;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);

                                 IF NOT CONFIRM(Text010) THEN
                                   EXIT;

                                 CalculateRiscCoverage;
                               END;
                                }
      { 1100529600;2 ;Action    ;
                      CaptionML=ENU=Copy Risc Coverage From Total Risc Coverage Amount;
                      Enabled=PrognosisDetailedEnabled;
                      Image=CopyBudget;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);
                                 IF NOT CONFIRM(Text012) THEN
                                   EXIT;
                                 CopyRiscCoverageFromTotalRiscCoverage;
                               END;
                                }
      { 1100529601;2 ;Action    ;
                      CaptionML=ENU=Fill Prognosis End Result With Purchase Result;
                      Enabled=PrognosisDetailedEnabled;
                      Image=InsertFromCheckJournal;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);
                                 IF NOT CONFIRM(Text013) THEN
                                   EXIT;
                                 FillPrognosisEndResultWithPurchaseResult;
                               END;
                                }
      { 1100528200;2 ;Action    ;
                      Name=RisksAndOpportunities;
                      CaptionML=ENU=Add Risks & Opportunities;
                      Visible=FALSE;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Reconcile;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;
                                 IF "Prognosis Level" <> "Prognosis Level"::Detailed THEN
                                   ERROR(Text001, FIELDCAPTION("Prognosis Level"), "Prognosis Level");

                                 IF PrognosisMgt.AddRisksAndOpportunities(Rec) THEN
                                   MESSAGE(Text002);
                               END;
                                }
      { 1100527702;1 ;ActionGroup;
                      CaptionML=ENU=Cash Flow }
      { 1100527700;2 ;Action    ;
                      AccessByPermission=TableData 11012635=R;
                      CaptionML=ENU=Fill Prognosis Revenue From Cash Flow;
                      Image=CalculateLines;
                      OnAction=VAR
                                 PrognosisManagement@1100527700 : Codeunit 11020217;
                               BEGIN
                                 PrognosisManagement.FillPrognRevenuesFromCashFlow(Rec);
                               END;
                                }
      { 1100527701;2 ;Action    ;
                      AccessByPermission=TableData 11012633=R;
                      CaptionML=ENU=Fill Prognosis Revenue From Project Development;
                      Image=CalculateLines;
                      OnAction=VAR
                                 PrognosisManagement@1100527700 : Codeunit 11020217;
                               BEGIN
                                 PrognosisManagement.FillPrognRevenuesFromProjDevProducts(Rec);
                               END;
                                }
      { 1100525025;  ;ActionContainer;
                      ActionContainerType=Reports }
      { 24      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Print;
                                 NOR=Skriv &ut;
                                 SVE=Skriv &ut] }
      { 1100528402;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Print Prognosis;
                                 NOR=Skriv ut Prognose;
                                 SVE=Skriv ut prognos];
                      Image=Print;
                      OnAction=VAR
                                 Prognosis@1100528400 : Record 11012034;
                               BEGIN
                                 Prognosis := Rec;
                                 Prognosis.SETRANGE("Project No.", "Project No.");
                                 Prognosis.SETRANGE("Prognosis Date", "Prognosis Date");
                                 REPORT.RUN(REPORT::Prognosis, TRUE, FALSE, Prognosis);
                               END;
                                }
      { 26      ;2   ;Action    ;
                      CaptionML=[ENU=Prognosis Reports;
                                 NOR=Prognoserapporter;
                                 SVE=Prognosrapporter];
                      Promoted=Yes;
                      Image=PrintReport;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 PrintDoc@1100525000 : Codeunit 229;
                               BEGIN
                                 PrintDoc.PrintPrognosis(Rec);
                               END;
                                }
      { 1100529602;2 ;Action    ;
                      CaptionML=ENU=Print Prognosis Report;
                      Image=PrintCheck;
                      OnAction=VAR
                                 PrognosisReport@1100529601 : Report 11126053;
                               BEGIN
                                 TESTFIELD("Select For Reporting", TRUE);
                                 CLEAR(PrognosisReport);
                                 PrognosisReport.SetFilterValues("Project No.", "Prognosis Date");
                                 PrognosisReport.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 10  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generell;
                           SVE=Allm„nt] }

    { 11  ;2   ;Field     ;
                SourceExpr="Project No.";
                Editable=ProjectNoEditable }

    { 13  ;2   ;Field     ;
                SourceExpr="Project Description";
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Prognosis Date";
                Editable=PrognosisDateEditable }

    { 1100525069;2;Field  ;
                SourceExpr="Prognosis Level";
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 1100525019;2;Field  ;
                SourceExpr="Rough Prognosis Total Revenues";
                Editable=PrognosisRoughFieldsEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525015;2;Field  ;
                SourceExpr="Rough Prognosis Total Cost";
                Editable=PrognosisRoughFieldsEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Rough Prognosis Financial Result;
                BlankZero=Yes;
                SourceExpr="Rough Prognosis Total Revenues" - "Rough Prognosis Total Cost";
                AutoFormatType=1 }

    { 1100525000;2;Field  ;
                SourceExpr="Rough Prognosis End Result";
                Editable=PrognosisRoughFieldsEditable }

    { 14  ;2   ;Field     ;
                SourceExpr=Comment;
                Editable=CommentEditable }

    { 1100525022;2;Field  ;
                SourceExpr=Fixed;
                Editable=FixedEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 1100525023;2;Field  ;
                SourceExpr="Expected Finishing Date";
                Editable=ExpectedFinishingDateEditable }

    { 1100525096;2;Field  ;
                SourceExpr="Ovh. Surcharges Calculated" }

    { 1100525098;2;Field  ;
                SourceExpr="Altered After Calculation" }

    { 1100525100;2;Field  ;
                SourceExpr="Fix Prognosis Line";
                Editable=FixPrognosisLineEditable }

    { 1210190027;2;Field  ;
                SourceExpr="Used in Closing Project" }

    { 1100529603;2;Field  ;
                SourceExpr="Select For Reporting";
                Visible=FALSE }

    { 1100528400;2;Field  ;
                SourceExpr="Include Plot Price in Revenues";
                Visible=FALSE }

    { 1100525029;1;Group  ;
                CaptionML=ENU=Options Detailed Prognosis;
                Editable=OptionsDetailedPrognosisEditable AND (NOT Fixed);
                GroupType=Group }

    { 1100525030;2;Field  ;
                SourceExpr="Fill Progn. with Avail. Cost" }

    { 1100525031;2;Field  ;
                SourceExpr="Copy Prev. Progn. Total Cost" }

    { 1100525034;2;Field  ;
                SourceExpr="Copy Prev. Cost Prognosis" }

    { 1100525033;2;Field  ;
                SourceExpr="Copy Prev. Progn. End Result" }

    { 1100525035;2;Field  ;
                SourceExpr="Fill Progn. with extr. Costs" }

    { 1100525036;2;Field  ;
                SourceExpr="Fill Prognosis Revenues" }

    { 1100525037;2;Field  ;
                SourceExpr="Copy Prev. Progn. Tot. Revenue" }

    { 1100525038;2;Field  ;
                SourceExpr="Copy Prev. Revenue Prognosis" }

    { 1100527450;2;Field  ;
                SourceExpr="Copy Comments Prev. Prognosis" }

    { 1100525040;2;Field  ;
                SourceExpr="Calculate Surcharges" }

    { 1100525041;2;Field  ;
                SourceExpr="Calculate Risc Coverage" }

    { 1100528900;2;Field  ;
                SourceExpr="Calculate Product Discount";
                Importance=Additional }

    { 1100530700;2;Field  ;
                SourceExpr="Release Calculation Result";
                Visible=ReleaseCalculationResultVisible }

    { 1101285000;2;Field  ;
                SourceExpr=includeFinishedJobs }

    { 1905289801;1;Group  ;
                CaptionML=[ENU=Data;
                           NOR=Data;
                           SVE=Data] }

    { 1100525012;2;Field  ;
                SourceExpr="Created by" }

    { 1100525013;2;Field  ;
                SourceExpr="Created on" }

    { 1100525106;2;Field  ;
                SourceExpr="Modified by" }

    { 1100525102;2;Field  ;
                SourceExpr="Last Date Modified" }

    { 1902859001;1;Group  ;
                CaptionML=[ENU=Text;
                           NOR=Tekst;
                           SVE=Ben„mning] }

    { 18  ;2   ;Field     ;
                SourceExpr=Text;
                Editable=TextEditable;
                MultiLine=Yes }

    { 1100525024;0;Container;
                ContainerType=FactBoxArea }

    { 1100529900;1;Part   ;
                Name=RegisterExternalDocumentFB;
                PagePartID=Page11125053;
                PartType=Page }

    { 1100525021;1;Part   ;
                CaptionML=[ENU=Prognosis;
                           NOR=Prognose;
                           SVE=Senaste prognos];
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11130128;
                PartType=Page }

    { 1100528300;1;Part   ;
                CaptionML=[ENU=Prognosis Totals;
                           NOR=Prognosetotaler;
                           SVE=Prognostotalsummor];
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11126502;
                Visible=false;
                PartType=Page }

    { 1100525027;1;Part   ;
                CaptionML=[ENU=Prognosis End Result;
                           NOR=Forventet Sluttresultat;
                           SVE=F”rv„ntat slutresultat];
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11130129;
                PartType=Page }

    { 1100525009;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1100525007;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ProjSetup@1210190001 : Record 315;
      UserSetup@1100529603 : Record 91;
      PrognosisMgt@1100525014 : Codeunit 11020217;
      CostTypes@1100525004 : 'Cost,Revenue,Both';
      DPA_IsHardFilter@1100000999 : Boolean;
      Text007@1100525000 : TextConst 'ENU=Do you want to fill Prognosis Surcharges?;NOR=Vil du fylle ut tilleggsgebyrer for prognose?;SVE=Vill du fylla i till„ggsavgifter f”r prognos?';
      Text008@1100525001 : TextConst 'ENU=This option is only available at a detailled prognosis;NOR=Dette alternativet er kun tilgjengelig i detaljerte Prognoser;SVE=Det h„r alternativet „r endast tillg„ngligt f”r detaljerade prognoser';
      Text009@1100525010 : TextConst 'ENU=Do you want to remove Prognosis Surcharges?;NOR=Vil du fjerne tilleggsgebyrer for Prognose?;SVE=Vill du ta bort till„ggsavgifter f”r prognos?';
      ProjectNoEditable@19028701 : Boolean INDATASET;
      PrognosisDateEditable@19046408 : Boolean INDATASET;
      CommentEditable@19054571 : Boolean INDATASET;
      ExpectedFinishingDateEditable@19013399 : Boolean INDATASET;
      TextEditable@19008086 : Boolean INDATASET;
      FixPrognosisLineEditable@19068858 : Boolean INDATASET;
      PrognosisDetailedEnabled@1100525009 : Boolean INDATASET;
      PrognosisRoughEnabled@1100525017 : Boolean INDATASET;
      PrognosisRoughFieldsEditable@1100525013 : Boolean INDATASET;
      PrognosisElementEnabled@1100525002 : Boolean INDATASET;
      DetailedOrElementEnabled@1100525006 : Boolean INDATASET;
      StartProcess@1100528801 : Boolean;
      PrognosisDate@1100528800 : Date;
      includeFinishedJobs@1100285100 : Boolean;
      Text010@1100525015 : TextConst 'ENU=Do you want to calculate Risc Coverage?';
      OptionsDetailedPrognosisEditable@1100525007 : Boolean INDATASET;
      Text012@1100529600 : TextConst 'ENU=Do you want to copy Risk Coverage from Total Risk Coverage Amount?';
      Text013@1100529601 : TextConst 'ENU=Do you want to fill Prognosis End Result with Purchase Result?';
      SummaryElementEnable@1100527350 : Boolean;
      Text000@1100527351 : TextConst 'ENU=%1 allowed on this Project, due to: %2 is: %3.';
      FixedEditable@1100529602 : Boolean;
      Text001@1100528200 : TextConst 'ENU=Not allowed on this Project, due to: %1 is: %2.';
      Text002@1100528201 : TextConst 'ENU=Risks & Opportunities added to the Prognosis.';
      ReleaseCalculationResultVisible@1100530700 : Boolean;

    PROCEDURE UpdateEditable@1100525001();
    BEGIN
      ProjectNoEditable := (NOT Fixed);
      PrognosisDateEditable := (NOT Fixed);
      CommentEditable := (NOT Fixed);
      ExpectedFinishingDateEditable := (NOT Fixed);
      TextEditable := (NOT Fixed);
      FixPrognosisLineEditable := (NOT Fixed);

      PrognosisDetailedEnabled := ("Prognosis Level" = "Prognosis Level"::Detailed);
      PrognosisRoughEnabled := ("Prognosis Level" = "Prognosis Level"::Rough);
      PrognosisRoughFieldsEditable := (PrognosisRoughEnabled AND (NOT Fixed));
      PrognosisElementEnabled := ("Prognosis Level" = "Prognosis Level"::Element);
      DetailedOrElementEnabled := (PrognosisDetailedEnabled OR PrognosisElementEnabled);
      SummaryElementEnable := ("Prognosis Level" <> "Prognosis Level"::Element);

      FixedEditable := (NOT Fixed) OR (NOT UserSetup."No Access Proj. Frozen Progn.");
    END;

    PROCEDURE CheckFixed@1100525000();
    BEGIN
      TESTFIELD(Fixed,FALSE);
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    VAR
      RecRef@1100529900 : RecordRef;
    BEGIN
      xRec := Rec;
      UpdateEditable;

      RecRef.GETTABLE(Rec);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetRecordReference(RecRef);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetByCompany(TRUE);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetDepartmentCode("Department Code");

      OptionsDetailedPrognosisEditable := ("Prognosis Level" = "Prognosis Level"::Detailed);
    END;

    PROCEDURE RemoveSurcharges@1100525002();
    BEGIN
      PrognosisMgt.RemoveSurcharges(Rec);
    END;

    PROCEDURE CalculateSurcharges@1100525006();
    BEGIN
      PrognosisMgt.CalculateSurcharges(Rec);
    END;

    PROCEDURE ProcessPrognosisElement@1100525008(Prognosis@1100528800 : Record 11012034);
    VAR
      GeneratePrognosisElements@1100525000 : Report 11020260;
      CopyPrevCostPrognosis@1100525011 : Boolean;
      FillProgWithAvailableCost@1100525006 : Boolean;
      CopyPrevPrognosisTotalCost@1100529600 : Boolean;
      CopyPrevRevenuePrognosis@1100527350 : Boolean;
      CopyPrevPrognosisTotalRev@1100527351 : Boolean;
      FillProgRevenues@1100527352 : Boolean;
    BEGIN
      GeneratePrognosisElements.SetSelections(Prognosis."Prognosis Date");
      GeneratePrognosisElements.RUNMODAL;
      GeneratePrognosisElements.GetSelections(StartProcess,PrognosisDate, CopyPrevCostPrognosis, FillProgWithAvailableCost, CopyPrevPrognosisTotalCost,
                                               CopyPrevRevenuePrognosis, CopyPrevPrognosisTotalRev, FillProgRevenues);

      IF NOT StartProcess THEN
        EXIT;

      IF Prognosis."Prognosis Date" <> PrognosisDate THEN BEGIN
        Prognosis."Prognosis Date" := PrognosisDate;

        IF NOT Prognosis.GET("Project No.", PrognosisDate) THEN BEGIN
          Prognosis.INIT;
          Prognosis."Project No." := "Project No.";
          Prognosis.VALIDATE("Prognosis Date",PrognosisDate);
          Prognosis.INSERT(TRUE);
        END;
      END;

      IF NOT Prognosis.Fixed THEN BEGIN
        PrognosisMgt.CreatePrognosisElements(Prognosis, CostTypes::Both);

        IF CopyPrevCostPrognosis THEN
          PrognosisMgt.CopyPrevPrognosisElements(Prognosis, FALSE, CostTypes::Cost);

        IF FillProgWithAvailableCost THEN
          PrognosisMgt.FillPrognosisWithAvailableElem(Prognosis);

        IF CopyPrevPrognosisTotalCost THEN
          PrognosisMgt.CopyPrevPrognosisElementsTotalCost(Prognosis);

        IF CopyPrevRevenuePrognosis THEN
          PrognosisMgt.CopyPrevPrognosisElements(Prognosis, FALSE, CostTypes::Revenue);

        IF CopyPrevPrognosisTotalRev THEN
          PrognosisMgt.CopyPrevPrognosisElementsTotalRev(Prognosis);

        IF FillProgRevenues THEN
          PrognosisMgt.FillPrognRevenuesElements(Prognosis);
      END;
    END;

    PROCEDURE CalculateRiscCoverage@1100525007();
    BEGIN
      PrognosisMgt.CalculateRiscCoverage(Rec);
    END;

    LOCAL PROCEDURE CopyRiscCoverageFromTotalRiscCoverage@1100529601();
    BEGIN
      PrognosisMgt.CopyRiscCoverageFromTotalRiscCoverage(Rec);
    END;

    LOCAL PROCEDURE FillPrognosisEndResultWithPurchaseResult@1100529600();
    BEGIN
      PrognosisMgt.FillPrognosisEndResultWithPurchaseResult(Rec);
    END;

    BEGIN
    {
      4PS, 11-11-13, Report "Prognosis" no longer supported in NAV2013
      4PS 24-02-17 UKR-C30065 TTA: "Options Detailed Prognosis" tab added, function OnAfterGetCurrRecord modified
      4PS 24-02-17 UKR-C30065 TTA: Trigger OnNewRecord modified
      4PS 06-10-17: obsolete functions removed (according to Static Prism): CheckPrognosisSpecification and CreatePrognosisSpecification
      160120 ITERO.DL IME403 don't include closed projects in prognosis
    }
    END.
  }
}

