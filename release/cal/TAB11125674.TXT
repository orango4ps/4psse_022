OBJECT Table 11125674 Estimate Recipe Selection RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Estimate Recipe Selection RAW;
               NOR=Kalkyle (RAW) for malutvalg;
               SVE=Kalkyl, mallval (RAW)];
    LookupPageID=Page11125675;
    DrillDownPageID=Page11125675;
  }
  FIELDS
  {
    { 1   ;   ;Recipe Group No.    ;Code10        ;TableRelation="Recipe Group";
                                                   CaptionML=[ENU=Recipe Group No.;
                                                              NOR=Malgruppenr;
                                                              SVE=Mallgruppnr];
                                                   NotBlank=Yes }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 4   ;   ;Defi Code Position 1;Code4         ;OnValidate=BEGIN
                                                                CheckRangeFormat("Defi Code Position 1");
                                                              END;

                                                   CaptionML=[ENU=Defi Code Position 1;
                                                              NOR=Defi-kodeposisjon 1;
                                                              SVE=Defi. kodposition 1] }
    { 5   ;   ;Defi Code Position 2;Code4         ;OnValidate=BEGIN
                                                                CheckRangeFormat("Defi Code Position 2");
                                                              END;

                                                   CaptionML=[ENU=Defi Code Position 2;
                                                              NOR=Defi-kodeposisjon 2;
                                                              SVE=Defi. kodposition 2] }
    { 6   ;   ;Defi Code Position 3;Code4         ;OnValidate=BEGIN
                                                                CheckRangeFormat("Defi Code Position 3");
                                                              END;

                                                   CaptionML=[ENU=Defi Code Position 3;
                                                              NOR=Defi-kodeposisjon 3;
                                                              SVE=Defi. kodposition 3] }
    { 7   ;   ;Defi Code Position 4;Code4         ;OnValidate=BEGIN
                                                                CheckRangeFormat("Defi Code Position 4");
                                                              END;

                                                   CaptionML=[ENU=Defi Code Position 4;
                                                              NOR=Defi-kodeposisjon 4;
                                                              SVE=Defi. kodposition 4] }
    { 8   ;   ;Defi Code Position 5;Code4         ;OnValidate=BEGIN
                                                                CheckRangeFormat("Defi Code Position 5");
                                                              END;

                                                   CaptionML=[ENU=Defi Code Position 5;
                                                              NOR=Defi-kodeposisjon 5;
                                                              SVE=Defi. kodposition 5] }
    { 9   ;   ;Defi Code Position 6;Code4         ;OnValidate=BEGIN
                                                                CheckRangeFormat("Defi Code Position 6");
                                                              END;

                                                   CaptionML=[ENU=Defi Code Position 6;
                                                              NOR=Defi-kodeposisjon 6;
                                                              SVE=Defi. kodposition 6] }
    { 10  ;   ;Priority            ;Integer       ;CaptionML=[ENU=Priority;
                                                              NOR=Prioritet;
                                                              SVE=Prioritet] }
    { 20  ;   ;Recipe No.          ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group No.));
                                                   CaptionML=[ENU=Recipe No.;
                                                              NOR=Malnr;
                                                              SVE=Mallnr] }
    { 30  ;   ;Description         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Base Recipe".Description WHERE (Recipe Group=FIELD(Recipe Group No.),
                                                                                                       No.=FIELD(Recipe No.)));
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Recipe Group No.,Line No.               ;Clustered=Yes }
    {    ;Recipe Group No.,Priority                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'ENU="""%1"" is not a valid Defi code value or range.";NOR=''''%2'''' er ikke en gyldig defi-kodverdi eller intervall.;SVE=%1 „r inte ett giltigt Defi-kodv„rde eller intervall.';

    PROCEDURE FindRecipeNo@1100525000(RecipeGroupNo@1100525001 : Code[10];Defi1@1100525002 : Code[1];Defi2@1100525003 : Code[1];Defi3@1100525004 : Code[1];Defi4@1100525005 : Code[1];Defi5@1100525006 : Code[1];Defi6@1100525007 : Code[1]) : Code[20];
    VAR
      EstimateRecipeSelection@1100525000 : Record 11125674;
    BEGIN
      EstimateRecipeSelection.SETCURRENTKEY("Recipe Group No.", Priority);
      EstimateRecipeSelection.SETRANGE("Recipe Group No.", RecipeGroupNo);

      IF EstimateRecipeSelection.FINDFIRST THEN
        REPEAT
          IF EstimateRecipeSelection.FilledPositionsMatch(Defi1, Defi2, Defi3, Defi4, Defi5, Defi6) THEN
            EXIT(EstimateRecipeSelection."Recipe No.");
        UNTIL EstimateRecipeSelection.NEXT = 0;
    END;

    PROCEDURE FilledPositionsMatch@1100525010(Defi1@1100525000 : Code[1];Defi2@1100525001 : Code[1];Defi3@1100525002 : Code[1];Defi4@1100525003 : Code[1];Defi5@1100525004 : Code[1];Defi6@1100525005 : Code[1]) : Boolean;
    BEGIN
      CASE TRUE OF
        NOT FilledPositionMatches("Defi Code Position 1", Defi1): EXIT(FALSE);
        NOT FilledPositionMatches("Defi Code Position 2", Defi2): EXIT(FALSE);
        NOT FilledPositionMatches("Defi Code Position 3", Defi3): EXIT(FALSE);
        NOT FilledPositionMatches("Defi Code Position 4", Defi4): EXIT(FALSE);
        NOT FilledPositionMatches("Defi Code Position 5", Defi5): EXIT(FALSE);
        NOT FilledPositionMatches("Defi Code Position 6", Defi6): EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE FilledPositionMatches@1100525002(Range@1100525000 : Code[4];Value@1100525001 : Code[1]) : Boolean;
    VAR
      FromValue@1100525002 : Code[1];
      ToValue@1100525003 : Code[1];
    BEGIN
      CASE TRUE OF
        STRLEN(Range) = 0:
          EXIT(TRUE);
        STRLEN(Range) = 1:
          EXIT(Range = Value);
        STRLEN(Range) = 4:
          BEGIN
            FromValue := COPYSTR(Range, 1, 1);
            ToValue := COPYSTR(Range, 4, 1);
            EXIT((Value >= FromValue) AND (Value <= ToValue));
          END;
      END;
    END;

    PROCEDURE CheckRangeFormat@1100525001(VAR Range@1100525000 : Code[4]);
    VAR
      FromValue@1100525001 : Integer;
      ToValue@1100525002 : Integer;
    BEGIN
      CASE TRUE OF
        STRLEN(Range) = 0:
          EXIT;
        STRLEN(Range) = 1:
          BEGIN
            IF NOT EVALUATE(FromValue, Range) THEN
              ERROR(Text000, Range);
            IF FromValue = 0 THEN
              ERROR(Text000, Range);
          END;
        STRLEN(Range) = 4:
          BEGIN
            IF NOT EVALUATE(FromValue, COPYSTR(Range, 1, 1)) THEN
              ERROR(Text000, Range);
            IF COPYSTR(Range, 2, 2) <> '..' THEN
              ERROR(Text000, Range);
            IF NOT EVALUATE(ToValue, COPYSTR(Range, 4, 1)) THEN
              ERROR(Text000, Range);
            IF (FromValue = 0) OR (ToValue = 0) THEN
              ERROR(Text000, Range);
            IF FromValue > ToValue THEN
              Range := STRSUBSTNO('%1..%2', ToValue, FromValue);
            IF FromValue = ToValue THEN
              Range := FORMAT(FromValue);
          END;
      ELSE
        ERROR(Text000, Range);
      END;
    END;

    BEGIN
    END.
  }
}

