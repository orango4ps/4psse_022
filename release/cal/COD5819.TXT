OBJECT Codeunit 5819 Undo Service Consumption Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    TableNo=5991;
    Permissions=TableData 32=m,
                TableData 339=rmd,
                TableData 5902=imd,
                TableData 5907=rimd,
                TableData 5908=im,
                TableData 5991=imd,
                TableData 6507=ri;
    OnRun=VAR
            ConfirmManagement@1001 : Codeunit 27;
            IsHandled@1000 : Boolean;
          BEGIN
            IsHandled := FALSE;
            OnBeforeOnRun(Rec,IsHandled);
            IF IsHandled THEN
              EXIT;

            IF NOT FIND('-') THEN
              EXIT;

            IF NOT HideDialog THEN
              IF NOT ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
                EXIT;

            LOCKTABLE;
            ServShptLine.COPY(Rec);
            Code;
            Rec := ServShptLine;
          END;

  }
  CODE
  {
    VAR
      ServShptHeader@1004 : Record 5990;
      ServShptLine@1001 : Record 5991;
      TempGlobalItemLedgEntry@1026 : TEMPORARY Record 32;
      TempGlobalItemEntryRelation@1025 : TEMPORARY Record 6507;
      TempTrkgItemLedgEntry@1014 : TEMPORARY Record 32;
      TempTrkgItemLedgEntry2@1010 : TEMPORARY Record 32;
      InvtSetup@1007 : Record 313;
      SourceCodeSetup@1012 : Record 242;
      DummyItemJnlLine@1018 : Record 83;
      TempWhseJnlLine@1017 : TEMPORARY Record 7311;
      WhseUndoQty@1019 : Codeunit 7320;
      UndoPostingMgt@1024 : Codeunit 5817;
      ItemTrackingMgt@1011 : Codeunit 6500;
      ItemTrackingDocMgt@1027 : Codeunit 6503;
      ItemJnlPostLine@1000 : Codeunit 22;
      Text000@1003 : TextConst 'ENU=Do you want to undo consumption of the selected shipment line(s)?;NOR=Vil du angre forbruket av valgt(e) fõlgeseddellinje(r)?;SVE=Vill du Üngra fîrbrukning av markerade utleveransrader?';
      Text001@1009 : TextConst 'ENU=Undo quantity consumed posting...;NOR=Angrer bokfõring av forbrukt antall...;SVE=èngra bokfîring av fîrbrukat antal...';
      Text002@1002 : TextConst 'ENU=There is not enough space to insert correction lines.;NOR=Det er ikke nok plass til Ü sette inn korrigeringslinjer.;SVE=Det finns inte tillrÑckligt med utrymme att infoga rÑttningsrader.';
      InvtAdjmt@1008 : Codeunit 5895;
      TrackingSpecificationExists@1015 : Boolean;
      HideDialog@1005 : Boolean;
      Text003@1006 : TextConst 'ENU=Checking lines...;NOR=Kontrollerer linjer...;SVE=Kontrollerar rader...';
      Text004@1016 : TextConst 'ENU=You cannot undo consumption on the line because it has been already posted to Jobs.;NOR=Du kan ikke angre forbruk pÜ linjen fordi det allerede er bokfõrt i Prosjekter.;SVE=Det gÜr inte att Üngra fîrbrukning pÜ raden eftersom den redan har bokfîrts i Projekt.';
      Text005@1013 : TextConst 'ENU=You cannot undo consumption because the original service order %1 is already closed.;NOR=Du kan ikke angre forbruk fordi den opprinnelige serviceordren %1 allerede er lukket.;SVE=Det gÜr inte att Üngra fîrbrukning eftersom den ursprungliga serviceordern %1 redan har stÑngts.';
      NextLineNo@1020 : Integer;

    [External]
    PROCEDURE SetHideDialog@8(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    LOCAL PROCEDURE Code@2();
    VAR
      ServLedgEntriesPost@1000 : Codeunit 5912;
      Window@1001 : Dialog;
      ItemShptEntryNo@1002 : Integer;
      ServLedgEntryNo@1003 : Integer;
      WarrantyLedgEntryNo@1004 : Integer;
    BEGIN
      WITH ServShptLine DO BEGIN
        CLEAR(ItemJnlPostLine);
        SETRANGE(Correction,FALSE);
        FIND('-');
        REPEAT
          IF NOT HideDialog THEN
            Window.OPEN(Text003);
          CheckServShptLine(ServShptLine);
        UNTIL NEXT = 0;

        ServLedgEntriesPost.InitServiceRegister(ServLedgEntryNo,WarrantyLedgEntryNo);
        FIND('-');
        REPEAT
          IF Quantity <> "Qty. Shipped Not Invoiced" THEN BEGIN
            TempGlobalItemLedgEntry.RESET;
            IF NOT TempGlobalItemLedgEntry.ISEMPTY THEN
              TempGlobalItemLedgEntry.DELETEALL;
            TempGlobalItemEntryRelation.RESET;
            IF NOT TempGlobalItemEntryRelation.ISEMPTY THEN
              TempGlobalItemEntryRelation.DELETEALL;

            IF NOT HideDialog THEN
              Window.OPEN(Text001);

            IF Type = Type::Item THEN BEGIN
              CollectItemLedgerEntries(ServShptLine,TempTrkgItemLedgEntry);
              ItemShptEntryNo := PostItemJnlLine(ServShptLine,"Item Shpt. Entry No.",
                  Quantity,"Quantity (Base)",
                  Quantity,"Quantity (Base)",
                  DummyItemJnlLine."Entry Type"::"Positive Adjmt.");
            END;
            IF Type = Type::Resource THEN
              PostResourceJnlLine(ServShptLine);
            InsertCorrectiveShipmentLine(ServShptLine,ItemShptEntryNo);

            ServLedgEntriesPost.ReverseCnsmServLedgEntries(ServShptLine);
            IF Type IN [Type::Item,Type::Resource] THEN
              ServLedgEntriesPost.ReverseWarrantyEntry(ServShptLine);

            UpdateOrderLine(ServShptLine);
            UpdateServShptLine(ServShptLine);
          END;
        UNTIL NEXT = 0;
        ServLedgEntriesPost.FinishServiceRegister(ServLedgEntryNo,WarrantyLedgEntryNo);

        InvtSetup.GET;
        IF InvtSetup."Automatic Cost Adjustment" <>
           InvtSetup."Automatic Cost Adjustment"::Never
        THEN BEGIN
          ServShptHeader.GET("Document No.");
          InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
          InvtAdjmt.MakeMultiLevelAdjmt;
        END;
        WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
      END;

      OnAfterCode(ServShptLine);
    END;

    LOCAL PROCEDURE CheckServShptLine@3(VAR ServShptLine@1001 : Record 5991);
    VAR
      ServLine@1000 : Record 5902;
      TempItemLedgEntry@1002 : TEMPORARY Record 32;
      ServiceLedgerEntry@1003 : Record 5907;
      IsHandled@1004 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckServShptLine(ServShptLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH ServShptLine DO BEGIN
        TESTFIELD("Quantity Invoiced",0);
        TESTFIELD("Quantity Consumed");
        TESTFIELD("Qty. Shipped Not Invoiced",Quantity - "Quantity Consumed");

        // Check if there was consumption posted to jobs
        ServiceLedgerEntry.RESET;
        ServiceLedgerEntry.SETRANGE("Document No.","Document No.");
        ServiceLedgerEntry.SETRANGE("Posting Date","Posting Date");
        ServiceLedgerEntry.SETRANGE("Document Line No.","Line No.");
        ServiceLedgerEntry.SETRANGE("Service Order No.","Order No.");
        ServiceLedgerEntry.SETRANGE("Job Posted",TRUE);
        IF NOT ServiceLedgerEntry.ISEMPTY THEN
          ERROR(Text004);

        IF NOT ServLine.GET(ServLine."Document Type"::Order,"Order No.","Order Line No.") THEN
          ERROR(Text005,"Order No.");
        UndoPostingMgt.TestServShptLine(ServShptLine);
        IF Type = Type::Item THEN BEGIN
          UndoPostingMgt.CollectItemLedgEntries(TempItemLedgEntry,DATABASE::"Service Shipment Line",
            "Document No.","Line No.","Quantity (Base)","Item Shpt. Entry No.");
          UndoPostingMgt.CheckItemLedgEntries(TempItemLedgEntry,"Line No.");
        END;
      END;
    END;

    LOCAL PROCEDURE CollectItemLedgerEntries@17(VAR ServShptLine@1000 : Record 5991;VAR TempItemLedgEntry@1001 : TEMPORARY Record 32);
    VAR
      FromItemLedgEntry@1002 : Record 32;
      TempTrackingSpecToTest@1003 : TEMPORARY Record 336;
    BEGIN
      ServShptLine.FilterPstdDocLnItemLedgEntries(FromItemLedgEntry);
      ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempItemLedgEntry,FromItemLedgEntry);
      ItemTrackingDocMgt.RetrieveDocumentItemTracking(TempTrackingSpecToTest,
        ServShptLine."Document No.",DATABASE::"Service Shipment Header",0);   // 0 - no doctype
      TrackingSpecificationExists := (TempTrackingSpecToTest.COUNT <> 0);
    END;

    LOCAL PROCEDURE PostItemJnlLine@5(ServShptLine@1000 : Record 5991;ItemEntryNo@1010 : Integer;QtyToShip@1003 : Decimal;QtyToShipBase@1008 : Decimal;QtyToConsume@1007 : Decimal;QtyToConsumeBase@1009 : Decimal;EntryType@1004 : Integer) : Integer;
    VAR
      ItemJnlLine@1001 : Record 83;
      ServiceLine@1002 : Record 5902;
      SignFactor@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      ServShptHeader.GET(ServShptLine."Document No.");

      WITH ItemJnlLine DO BEGIN
        INIT;
        "Entry Type" := EntryType;
        "Document Line No." :=
          ServShptLine."Line No." + GetCorrectiveShptLineNoStep(ServShptLine."Document No.",ServShptLine."Line No.");

        CopyDocumentFields("Document Type"::"Service Shipment",ServShptHeader."No.",'',SourceCodeSetup."Service Management",'');

        CopyFromServShptHeader(ServShptHeader);
        CopyFromServShptLineUndo(ServShptLine);

        Quantity := QtyToShip;
        "Quantity (Base)" := QtyToShipBase;
        "Invoiced Quantity" := QtyToConsume;
        "Invoiced Qty. (Base)" := QtyToConsumeBase;

        VALIDATE("Applies-from Entry",ItemEntryNo);

        OnAfterCopyItemJnlLineFromServShpt(ItemJnlLine,ServShptHeader,ServShptLine);

        WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
          DATABASE::"Service Line",ServiceLine."Document Type"::Order,ServShptHeader."Order No.",ServShptLine."Order Line No.",
          TempWhseJnlLine."Reference Document"::"Posted Shipment",TempWhseJnlLine,NextLineNo);

        IF NOT TrackingSpecificationExists THEN BEGIN
          ItemJnlPostLine.SetServUndoConsumption(TRUE);
          ItemJnlPostLine.RunWithCheck(ItemJnlLine);
          EXIT("Item Shpt. Entry No.");
        END;

        TempTrkgItemLedgEntry.RESET;
        IF QtyToConsume <> 0 THEN BEGIN
          SignFactor := 1;
          TempTrkgItemLedgEntry2.DELETEALL;
          TempTrkgItemLedgEntry.RESET;
          IF TempTrkgItemLedgEntry.FINDFIRST THEN
            REPEAT
              TempTrkgItemLedgEntry2 := TempTrkgItemLedgEntry;
              TempTrkgItemLedgEntry2.INSERT;
            UNTIL TempTrkgItemLedgEntry.NEXT = 0;
          InsertNewReservationEntries(ServShptLine,EntryType,SignFactor);
          PostItemJnlLineWithIT(ServShptLine,QtyToShip,QtyToShipBase,QtyToConsume,QtyToConsumeBase,SignFactor,EntryType);
        END;
        EXIT(0); // "Item Shpt. Entry No."
      END;
    END;

    LOCAL PROCEDURE PostResourceJnlLine@10(ServiceShptLine@1000 : Record 5991);
    VAR
      ResJnlLine@1005 : Record 207;
      ResJnlPostLine@1004 : Codeunit 212;
    BEGIN
      SourceCodeSetup.GET;
      ServShptHeader.GET(ServiceShptLine."Document No.");

      WITH ResJnlLine DO BEGIN
        INIT;
        CopyDocumentFields(ServiceShptLine."Document No.",'',SourceCodeSetup."Service Management",ServShptHeader."No. Series");

        CopyFromServShptHeader(ServShptHeader);
        CopyFromServShptLine(ServiceShptLine);
        "Source Type" := "Source Type"::Customer;
        "Source No." := ServShptHeader."Customer No.";

        Quantity := -ServiceShptLine."Quantity Consumed";
        "Unit Cost" := ServiceShptLine."Unit Cost (LCY)";
        "Total Cost" := ServiceShptLine."Unit Cost (LCY)" * Quantity;
        "Unit Price" := 0;
        "Total Price" := 0;
        ResJnlPostLine.RunWithCheck(ResJnlLine);
      END;
    END;

    LOCAL PROCEDURE PostItemJnlLineWithIT@16(VAR ServShptLine@1007 : Record 5991;QtyToShip@1005 : Decimal;QtyToShipBase@1004 : Decimal;QtyToConsume@1003 : Decimal;QtyToConsumeBase@1002 : Decimal;SignFactor@1001 : Integer;EntryType@1009 : Integer);
    VAR
      ItemJnlLine@1008 : Record 83;
      TempItemLedgerEntry@1000 : TEMPORARY Record 32;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        INIT;
        "Entry Type" := EntryType;
        "Document Line No." :=
          ServShptLine."Line No." + GetCorrectiveShptLineNoStep(ServShptLine."Document No.",ServShptLine."Line No.");

        CopyDocumentFields(
          "Document Type"::"Service Shipment",ServShptLine."Document No.",'',SourceCodeSetup."Service Management",'');

        CopyFromServShptHeader(ServShptHeader);
        CopyFromServShptLineUndo(ServShptLine);

        "Source Type" := "Source Type"::Customer;
        "Source No." := ServShptHeader."Customer No.";
        "Derived from Blanket Order" := FALSE;
        "Item Shpt. Entry No." := 0;
        Correction := TRUE;

        SignFactor := 1;
        Quantity := SignFactor * QtyToShip;
        "Invoiced Quantity" := SignFactor * QtyToConsume;
        "Quantity (Base)" := SignFactor * QtyToShipBase;
        "Invoiced Qty. (Base)" := SignFactor * QtyToConsumeBase;
        "Unit Cost" := ServShptLine."Unit Cost";

        ItemTrackingMgt.AdjustQuantityRounding(QtyToShip,Quantity,QtyToShipBase,"Quantity (Base)");

        QtyToShip -= Quantity;
        QtyToShipBase -= "Quantity (Base)";
        IF QtyToConsume <> 0 THEN BEGIN
          QtyToConsume -= Quantity;
          QtyToConsumeBase -= "Quantity (Base)";
        END;

        OnBeforePostItemJnlLineWithIT(ItemJnlLine);

        UndoPostingMgt.CollectItemLedgEntries(TempItemLedgerEntry,DATABASE::"Service Shipment Line",
          ServShptLine."Document No.",ServShptLine."Line No.",ServShptLine."Quantity (Base)",
          ServShptLine."Item Shpt. Entry No.");
        UndoPostingMgt.PostItemJnlLineAppliedToList(ItemJnlLine,TempItemLedgerEntry,
          ServShptLine.Quantity,ServShptLine."Quantity (Base)",TempGlobalItemLedgEntry,TempGlobalItemEntryRelation);
      END;
    END;

    LOCAL PROCEDURE InsertNewReservationEntries@14(VAR ServShptLine@1002 : Record 5991;EntryType@1007 : Integer;SignFactor@1003 : Integer);
    VAR
      ReservEntry@1001 : Record 337;
      TempReservEntry@1005 : TEMPORARY Record 337;
      ReserveEngineMgt@1006 : Codeunit 99000831;
    BEGIN
      WITH TempTrkgItemLedgEntry2 DO BEGIN
        SignFactor := -SignFactor;
        IF FINDSET THEN
          REPEAT
            ReservEntry.INIT;
            ReservEntry."Item No." := "Item No.";
            ReservEntry."Location Code" := "Location Code";
            ReservEntry."Serial No." := "Serial No.";
            ReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            ReservEntry."Lot No." := "Lot No.";
            ReservEntry."Variant Code" := "Variant Code";
            ReservEntry."Source ID" := '';
            ReservEntry."Source Type" := DATABASE::"Item Journal Line";
            ReservEntry."Source Subtype" := EntryType;
            ReservEntry."Source Ref. No." := 0;
            ReservEntry."Appl.-from Item Entry" := "Entry No.";
            IF EntryType = DummyItemJnlLine."Entry Type"::"Positive Adjmt." THEN
              ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Surplus
            ELSE
              ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Prospect;
            ReservEntry."Quantity Invoiced (Base)" := 0;
            ReservEntry.VALIDATE("Quantity (Base)",-Quantity);
            ReservEntry.Positive := ReservEntry."Quantity (Base)" > 0;
            ReservEntry."Entry No." := 0;
            IF ReservEntry.Positive THEN BEGIN
              ReservEntry."Warranty Date" := "Warranty Date";
              ReservEntry."Expiration Date" := "Expiration Date";
              ReservEntry."Expected Receipt Date" := ServShptLine."Posting Date"
            END ELSE
              ReservEntry."Shipment Date" := ServShptLine."Posting Date";
            ReservEntry.Description := ServShptLine.Description;
            ReservEntry."Creation Date" := WORKDATE;
            ReservEntry."Created By" := USERID;
            ReservEntry.UpdateItemTracking;
            ReservEntry."Appl.-to Item Entry" := "Entry No.";
            OnBeforeReservEntryInsert(ReservEntry,TempTrkgItemLedgEntry2);
            ReservEntry.INSERT;
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          UNTIL NEXT = 0;
        ReserveEngineMgt.UpdateOrderTracking(TempReservEntry);
      END;
    END;

    LOCAL PROCEDURE InsertNewTrackSpecifications@41(VAR CurrentServShptLine@1001 : Record 5991;Balancing@1000 : Boolean);
    VAR
      TempSSLItemLedgEntry@1002 : TEMPORARY Record 32;
    BEGIN
      // replace in tracking specification old item entry relation for a new one, and adjust qtys
      TempTrkgItemLedgEntry.RESET;
      IF TempTrkgItemLedgEntry.FINDFIRST THEN BEGIN
        TempSSLItemLedgEntry.RESET;
        TempSSLItemLedgEntry.DELETEALL;
        CollectItemLedgerEntries(CurrentServShptLine,TempSSLItemLedgEntry);
        IF TempSSLItemLedgEntry.FINDFIRST THEN
          REPEAT
            InsertOneNewTrackSpec(TempTrkgItemLedgEntry."Entry No.",TempSSLItemLedgEntry."Entry No.",Balancing);

            // collect/add another value entry relation, for the future new line
            TempGlobalItemEntryRelation."Item Entry No." := TempSSLItemLedgEntry."Entry No.";
            TempGlobalItemEntryRelation."Serial No." := TempSSLItemLedgEntry."Serial No.";
            TempGlobalItemEntryRelation."Lot No." := TempSSLItemLedgEntry."Lot No.";
            OnBeforeTempGlobalItemEntryRelationInsert(TempGlobalItemEntryRelation,TempSSLItemLedgEntry);
            IF TempGlobalItemEntryRelation.INSERT THEN;

            TempSSLItemLedgEntry.NEXT;
          UNTIL TempTrkgItemLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertOneNewTrackSpec@22(OldItemShptEntryNo@1002 : Integer;NewItemShptEntryNo@1001 : Integer;Balancing@1005 : Boolean);
    VAR
      TrackingSpecification@1000 : Record 336;
      NewTrackingSpecification@1003 : Record 336;
      NewEntryNo@1004 : Integer;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        RESET;
        SETRANGE("Item Ledger Entry No.",OldItemShptEntryNo);
        IF FINDFIRST THEN BEGIN
          NewTrackingSpecification.LOCKTABLE;
          NewTrackingSpecification.RESET;
          IF NewTrackingSpecification.FINDLAST THEN
            NewEntryNo := NewTrackingSpecification."Entry No." + 1
          ELSE
            NewEntryNo := 1;
          NewTrackingSpecification.INIT;
          NewTrackingSpecification := TrackingSpecification;
          NewTrackingSpecification."Entry No." := NewEntryNo;
          NewTrackingSpecification."Item Ledger Entry No." := NewItemShptEntryNo;
          IF Balancing THEN BEGIN
            NewTrackingSpecification."Quantity (Base)" := -"Quantity (Base)";
            NewTrackingSpecification."Quantity Handled (Base)" := -"Quantity (Base)";
            NewTrackingSpecification."Quantity Invoiced (Base)" := -"Quantity (Base)";
          END ELSE BEGIN
            NewTrackingSpecification."Quantity (Base)" := "Quantity (Base)";
            NewTrackingSpecification."Quantity Handled (Base)" := "Quantity (Base)";
            NewTrackingSpecification."Quantity Invoiced (Base)" := 0;
          END;
          NewTrackingSpecification.VALIDATE("Quantity (Base)");
          NewTrackingSpecification.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE GetCorrectiveShptLineNoStep@29(DocumentNo@1001 : Code[20];LineNo@1002 : Integer) LineSpacing : Integer;
    VAR
      TestServShptLine@1000 : Record 5991;
    BEGIN
      TestServShptLine.SETRANGE("Document No.",DocumentNo);
      TestServShptLine."Document No." := DocumentNo;
      TestServShptLine."Line No." := LineNo;
      TestServShptLine.FIND('=');

      IF TestServShptLine.FIND('>') THEN BEGIN
        LineSpacing := (TestServShptLine."Line No." - LineNo) DIV 2;
        IF LineSpacing = 0 THEN
          ERROR(Text002);
      END ELSE
        LineSpacing := 10000;
    END;

    LOCAL PROCEDURE InsertCorrectiveShipmentLine@7(OldServShptLine@1000 : Record 5991;ItemShptEntryNo@1001 : Integer);
    VAR
      NewServShptLine@1002 : Record 5991;
      LineSpacing@1003 : Integer;
    BEGIN
      WITH OldServShptLine DO BEGIN
        LineSpacing := GetCorrectiveShptLineNoStep("Document No.","Line No.");
        NewServShptLine.RESET;
        NewServShptLine.INIT;
        NewServShptLine.COPY(OldServShptLine);
        NewServShptLine."Line No." := "Line No." + LineSpacing;
        NewServShptLine."Item Shpt. Entry No." := ItemShptEntryNo;
        NewServShptLine."Appl.-to Service Entry" := "Appl.-to Service Entry";
        NewServShptLine.Quantity := -Quantity;
        NewServShptLine."Quantity (Base)" := -"Quantity (Base)";
        NewServShptLine."Qty. Shipped Not Invoiced" := 0;
        NewServShptLine."Qty. Shipped Not Invd. (Base)" := 0;
        NewServShptLine."Quantity Consumed" := NewServShptLine.Quantity;
        NewServShptLine."Qty. Consumed (Base)" := NewServShptLine."Quantity (Base)";
        NewServShptLine.Correction := TRUE;
        NewServShptLine.INSERT;

        UpdateItemJnlLine(NewServShptLine,ItemShptEntryNo);
        IF Type = Type::Item THEN BEGIN
          InsertNewTrackSpecifications(NewServShptLine,TRUE);
          InsertItemEntryRelation(TempGlobalItemEntryRelation,NewServShptLine);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateOrderLine@4(ServShptLine@1000 : Record 5991);
    VAR
      ServLine@1001 : Record 5902;
    BEGIN
      WITH ServShptLine DO BEGIN
        ServLine.GET(ServLine."Document Type"::Order,"Order No.","Order Line No.");
        UndoPostingMgt.UpdateServLineCnsm(ServLine,"Quantity Consumed","Qty. Consumed (Base)",TempGlobalItemLedgEntry);
        OnAfterUpdateOrderLine(ServLine,ServShptLine);
      END;
    END;

    LOCAL PROCEDURE UpdateServShptLine@9(VAR PassedServShptLine@1000 : Record 5991);
    BEGIN
      WITH PassedServShptLine DO BEGIN
        "Quantity Consumed" := Quantity;
        "Qty. Consumed (Base)" := "Quantity (Base)";
        "Qty. Shipped Not Invoiced" := 0;
        "Qty. Shipped Not Invd. (Base)" := 0;
        Correction := TRUE;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE InsertItemEntryRelation@12(VAR TempItemEntryRelation@1003 : TEMPORARY Record 6507;NewServShptLine@1000 : Record 5991);
    VAR
      ItemEntryRelation@1002 : Record 6507;
    BEGIN
      IF TempItemEntryRelation.FIND('-') THEN
        REPEAT
          ItemEntryRelation := TempItemEntryRelation;
          ItemEntryRelation.TransferFieldsServShptLine(NewServShptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempItemEntryRelation.NEXT = 0;
      TempItemEntryRelation.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemJnlLine@11(NewServShptLine@1001 : Record 5991;ItemShptEntryNo@1000 : Integer);
    VAR
      ItemLedgEntry@1002 : Record 32;
    BEGIN
      IF ItemLedgEntry.GET(ItemShptEntryNo) THEN BEGIN
        ItemLedgEntry."Document Line No." := NewServShptLine."Line No.";
        ItemLedgEntry.MODIFY;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCode@18(VAR ServiceShipmentLine@1000 : Record 5991);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyItemJnlLineFromServShpt@13(VAR ItemJournalLine@1000 : Record 83;ServiceShipmentHeader@1001 : Record 5990;ServiceShipmentLine@1002 : Record 5991);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateOrderLine@19(VAR ServiceLine@1000 : Record 5902;VAR ServiceShipmentLine@1001 : Record 5991);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckServShptLine@21(VAR ServiceShipmentLine@1000 : Record 5991;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostItemJnlLineWithIT@15(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReservEntryInsert@1(VAR ReservationEntry@1000 : Record 337;VAR ItemLedgerEntry@1001 : Record 32);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTempGlobalItemEntryRelationInsert@6(VAR ItemEntryRelation@1000 : Record 6507;VAR ItemLedgerEntry@1001 : Record 32);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnRun@20(VAR ServiceShipmentLine@1000 : Record 5991;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

