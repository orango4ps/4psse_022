OBJECT Codeunit 11125672 Copy Estimate RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text006@11012023 : TextConst 'DEU=Ausw„hlen Kopieren von Kalkulation;ENU=Select Copy From Estimate;NLD=Selecteer kopieer van calculatie;NOR=velg † kopiere fra kalkyle;SVE=V„lj att kopiera fr†n kalkyl';
      Text007@11012024 : TextConst 'DEU=Ausw„hlen Kopieren von Teilkalkulation;ENU=Select Copy from Sub-Estimate;NLD=Selecteer kopieer van deelcalculatie;NOR=velg † kopiere fra delkalkyle;SVE=V„lj att kopiera fr†n delkalkyl';
      Text008@11012025 : TextConst 'DEU=Ausw„hlen Kopieren in Kalkulation;ENU=Select Copy To Estimate;NLD=Selecteer kopieer naar calculatie;NOR=velg † kopiere til kalkyle;SVE=V„lj att kopiera till kalkyl';
      Text009@11012026 : TextConst 'DEU=Ausw„hlen Kopieren in Teilkalkulation;ENU=Select Copy To Sub-Estimate;NLD=Selecteer kopieer naar deelcalculatie;NOR=velg † kopiere til delkalkyle;SVE=V„lj att kopiera till delkalkyl';
      Text010@11012027 : TextConst 'DEU=Kalkulation von      #1##########\\;ENU=Estimate from        #1##########\\;NLD=Calculatie van        #1##########\\;NOR=Kalkyle fra        #1##########\\;SVE=Kalkyl fr†n          #1##########\\';
      Text011@11012028 : TextConst 'DEU=Kalkulation zu        #2##########\\;ENU=Estimate to             #2##########\\;NLD=Calculatie naar       #2##########\\;NOR=Kalkyle til             #2##########\\;SVE=Kalkyl till             #2##########\\';
      Text013@11012030 : TextConst 'DEU=Element #4##########\\ kalkulieren;ENU=Estimate Element        #4##########\\;NLD=Bestekpost             #4##########\\;SVE=Kalkyl element          #4##########\\';
      Text014@11012031 : TextConst 'DEU=Besch„ftigt mit     #5################ @6@@@@@@@@@@@@@;ENU=Busy with             #5################ @6@@@@@@@@@@@@@;NLD=Bezig met             #5################ @6@@@@@@@@@@@@@;NOR=Opptatt med             #5################ @6@@@@@@@@@@@@@;SVE=Upptagen med          #5################ @6@@@@@@@@@@@@@';
      Text015@11012032 : TextConst 'DEU=Nicht mehr als 3 Stufen zul„ssig;ENU=only 3 levels allowed;NLD=niet meer dan 3 niveaus toegestaan;NOR=kun tre niv†er tillates;SVE=endast tre niv†er till†ts';
      EstSetup@1100485013 : Record 11012150;
      EstRec@11012000 : Record 11012151;
      EstOrigRec@1210190030 : Record 11012151;
      EstDestRec@1210190031 : Record 11012151;
      EstLineRec@11012004 : Record 11125698;
      QuanSheetRec@1210190032 : Record 11012186;
      QuanModelRec@1210190038 : Record 11012197;
      SumHeaderRec@1210190010 : Record 11012172;
      SumLineRec@1210190009 : Record 11012171;
      SumExcelRec@1210190008 : Record 11012173;
      EstModelRec@1100485005 : Record 11012196;
      EstRateRec@1210190007 : Record 11012160;
      EstRespRec@1210190006 : Record 11012159;
      EstPrincRec@1210190005 : Record 11012170;
      EstCommentRec@1210190004 : Record 97;
      ConfigFeatureRec@1210190003 : Record 11012177;
      ConfigLevelRec@1100485003 : Record 11012191;
      ConfigPartRec@1100485006 : Record 11012176;
      ConfigPartFeatRec@1100485007 : Record 11012178;
      ConfigRowQuanRec@1100485008 : Record 11012192;
      DateRateRec@1100485014 : Record 11012188;
      ElemRec@1100525000 : Record 11012060;
      ActionLvl@1210190027 : Integer;
      ItemTypeOpt@1210190028 : 'Item,Basic Item,Trade Item';
      Status@11012009 : Dialog;
      StatusBln@11012010 : Boolean;
      LineCount@11012011 : Integer;
      NumLines@11012012 : Integer;
      sp1@11012013 : Integer;
      sp2@11012014 : Integer;
      x@11012015 : Integer;
      lp@11012016 : Integer;
      TmpEstRec@1210190018 : TEMPORARY Record 11012151;
      TmpEstLineRec@1210190023 : TEMPORARY Record 11125698;
      TmpEstLine2@1100525002 : TEMPORARY Record 11125698;
      TmpQuanSheetRec@1210190033 : TEMPORARY Record 11012186;
      TmpQuanModelRec@1210190039 : TEMPORARY Record 11012197;
      TmpSumHeaderRec@1210190021 : TEMPORARY Record 11012172;
      TmpSumLineRec@1210190020 : TEMPORARY Record 11012171;
      TmpSumExcelRec@1210190019 : TEMPORARY Record 11012173;
      TmpEstModelRec@1100485012 : TEMPORARY Record 11012196;
      TmpEstRateRec@1210190016 : TEMPORARY Record 11012160;
      TmpEstRespRec@1210190015 : TEMPORARY Record 11012159;
      TmpEstPrincRec@1210190014 : TEMPORARY Record 11012170;
      TmpEstCommentRec@1210190013 : TEMPORARY Record 97;
      TmpConfigFeatureRec@1210190012 : TEMPORARY Record 11012177;
      TmpConfigLevelRec@1100485004 : TEMPORARY Record 11012191;
      TmpConfigPartRec@1100485011 : TEMPORARY Record 11012176;
      TmpConfigPartFeatRec@1100485010 : TEMPORARY Record 11012178;
      TmpConfigRowQuanRec@1100485009 : TEMPORARY Record 11012192;
      TmpDateRateRec@1100485015 : TEMPORARY Record 11012188;
      CopyEstModel@1100485000 : Boolean;
      Text016@1100485016 : TextConst 'DEU=Die neue Endblattnummer %1 ist %2 Zeichen zu lang.;ENU=The new Summary Sheet No. %1 is %2 Characters too long.;NLD=Het nieuwe staartbladnummer %1 is %2 posities te lang.;NOR=Det nye Sammendragarksnr. %1 er %2 tegn for langt.;SVE=Det nya sammandragsarksnumret %1 „r %2 tecken f”r l†ngt.';
      EstElemRec@1100525001 : Record 11125679;
      EstimateRAWSurcharge@1100525003 : Record 11012236;
      TmpEstimateRAWSurcharge@1100525004 : TEMPORARY Record 11012236;
      EstimateApplianceCodeRAW@1100528900 : Record 11125697;
      TmpEstimateApplianceCodeRAW@1100528901 : TEMPORARY Record 11125697;

    PROCEDURE CopyEst@11(EstFrom@11012000 : Code[20];SubEstFrom@1210190007 : Code[20];EstTo@11012001 : Code[20];EstToTxt@11012002 : Text[50];NormGroupTo@1210190001 : Code[20];RateGroupTo@1210190002 : Code[20];PrincipalTo@1210190003 : Code[20];RefDateTo@1100485001 : Date;DiscRef1To@1100485004 : Code[20];DiscRef2To@1100485005 : Code[20];SkipLines@1100485000 : Boolean;SelectType@1100485002 : Integer;CopyPriceAgreement@1210190005 : Boolean);
    VAR
      lvEstSource@1100485003 : Code[20];
    BEGIN
      StatusBln := FALSE;
      IF NOT StatusBln THEN BEGIN
        OpenDialog;
        Status.UPDATE(1, EstFrom);
        Status.UPDATE(2, EstTo);
        ActionLvl := 1;
      END;

      IF EstRec.GET(EstFrom) THEN BEGIN
        TmpEstRec.COPY(EstRec);
        TmpEstRec."No." := EstTo;
        TmpEstRec.Description := EstToTxt;
        TmpEstRec."Search Name" := '';
        TmpEstRec.VALIDATE(Description);
        TmpEstRec."Creation Date" := TODAY;
        TmpEstRec."Norm Group" := NormGroupTo;
        TmpEstRec."Rate Group" := RateGroupTo;
        TmpEstRec."Customer No." := PrincipalTo;
        TmpEstRec."Reference Date (Item)" := RefDateTo;
        TmpEstRec."Purch Discount Term Group 1" := DiscRef1To;
        TmpEstRec."Purch Discount Term Group 2" := DiscRef2To;
        //TmpEstRec."Sales Discount Term Group 1" := DiscRef1To;
        //TmpEstRec."Sales Discount Term Group 2" := DiscRef2To;
        TmpEstRec.Fixed := FALSE;
        TmpEstRec.Finished := FALSE;
        TmpEstRec.INSERT;
      END;

      EstRateRec.SETRANGE("Estimate No.", EstFrom);
      IF EstRateRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstRateRec.COPY(EstRateRec);
          TmpEstRateRec."Estimate No." := EstTo;
          TmpEstRateRec.INSERT;
        UNTIL EstRateRec.NEXT = 0;
      END;

      DateRateRec.SETRANGE("Estimate No.", EstFrom);
      IF DateRateRec.FINDSET THEN BEGIN
        REPEAT
          TmpDateRateRec.COPY(DateRateRec);
          TmpDateRateRec."Estimate No." := EstTo;
          TmpDateRateRec.INSERT;
        UNTIL DateRateRec.NEXT = 0;
      END;

      EstRespRec.SETRANGE("Estimate No.", EstFrom);
      IF EstRespRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstRespRec.COPY(EstRespRec);
          TmpEstRespRec."Estimate No." := EstTo;
          TmpEstRespRec.INSERT;
        UNTIL EstRespRec.NEXT = 0;
      END;

      EstPrincRec.SETRANGE("Estimate No.", EstFrom);
      IF EstPrincRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstPrincRec.COPY(EstPrincRec);
          TmpEstPrincRec."Estimate No." := EstTo;
          TmpEstPrincRec.INSERT;
        UNTIL EstPrincRec.NEXT = 0;
      END;

      EstCommentRec.SETRANGE("Table Name", EstCommentRec."Table Name"::Estimate);
      EstCommentRec.SETRANGE("No.", EstFrom);
      IF EstCommentRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstCommentRec.COPY(EstCommentRec);
          TmpEstCommentRec."No." := EstTo;
          TmpEstCommentRec.INSERT;
        UNTIL EstCommentRec.NEXT = 0;
      END;

      ConfigFeatureRec.SETRANGE("Estimate No.", EstFrom);
      IF ConfigFeatureRec.FINDSET THEN BEGIN
        REPEAT
          TmpConfigFeatureRec.COPY(ConfigFeatureRec);
          TmpConfigFeatureRec."Estimate No." := EstTo;
          TmpConfigFeatureRec.INSERT;
        UNTIL ConfigFeatureRec.NEXT = 0;
      END;

      ConfigLevelRec.SETRANGE("Estimate No.", EstFrom);
      IF ConfigLevelRec.FINDSET THEN BEGIN
        REPEAT
          TmpConfigLevelRec.COPY(ConfigLevelRec);
          TmpConfigLevelRec."Estimate No." := EstTo;
          TmpConfigLevelRec.INSERT;
        UNTIL ConfigLevelRec.NEXT = 0;
      END;

      EstModelRec.SETRANGE("Estimate No.", EstFrom);
      IF EstModelRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstModelRec.COPY(EstModelRec);
          TmpEstModelRec."Estimate No." := EstTo;
          TmpEstModelRec.INSERT;
        UNTIL EstModelRec.NEXT = 0;
      END;

      EstimateRAWSurcharge.SETCURRENTKEY("Estimate No.");
      EstimateRAWSurcharge.SETRANGE("Estimate No.", EstFrom);
      IF EstimateRAWSurcharge.FINDSET THEN BEGIN
        REPEAT
          TmpEstimateRAWSurcharge.COPY(EstimateRAWSurcharge);
          TmpEstimateRAWSurcharge."Estimate No." := EstTo;
          TmpEstimateRAWSurcharge.INSERT;
        UNTIL EstimateRAWSurcharge.NEXT = 0;
      END;

      //C063394.sn
      EstimateApplianceCodeRAW.SETRANGE("Estimate No.", EstFrom);
      IF EstimateApplianceCodeRAW.FINDSET THEN BEGIN
        REPEAT
          TmpEstimateApplianceCodeRAW.COPY(EstimateApplianceCodeRAW);
          TmpEstimateApplianceCodeRAW."Estimate No." := EstTo;
          TmpEstimateApplianceCodeRAW.INSERT;
        UNTIL EstimateApplianceCodeRAW.NEXT = 0;
      END;
      //C063394.en

      CopyEstParagraph(EstFrom,EstTo);
      IF NOT SkipLines THEN BEGIN  //DP01676
        CopyEstLine(EstFrom,'',EstTo,'','','','','','',CopyPriceAgreement);
      END;

      IF SelectType <> 2 THEN BEGIN
        lvEstSource := EstFrom;
        IF SelectType <> 0 THEN BEGIN
          IF NOT EstRec.GET(EstFrom) THEN EstRec.INIT;
          IF EstRec."Estimate Source" <> '' THEN BEGIN
            lvEstSource := EstRec."Estimate Source";
          END ELSE BEGIN
            EstSetup.GET;
            IF EstSetup."Estimate Source" <> '' THEN
              lvEstSource := EstSetup."Estimate Source"
            ELSE
              SelectType := 0;
          END;
        END;
        CopySummarySheet(lvEstSource, '', EstTo, '', '', SelectType);
      END;

      UpdateFromTmp;
    END;

    PROCEDURE CopyEstParagraph@1100525000(EstFrom@11012000 : Code[20];EstTo@11012002 : Code[20]);
    VAR
      EstElemRec2@1100525000 : Record 11125679;
      VatSpecRec@1100525001 : Record 11125678;
      VatSpecRec2@1100525002 : Record 11125678;
      Estimate@1100525004 : Record 11012151;
      CommentLineRAW@1100525003 : Record 11125684;
    BEGIN
      EstElemRec.SETRANGE("Estimate No.",EstFrom);
      IF EstElemRec.FINDSET THEN BEGIN
        //DP01086.sn
        IF NOT Estimate.GET(EstTo) THEN
          Estimate."Part Group" := TmpEstRec."Part Group";
        //DP01086.en
        REPEAT
          Status.UPDATE(4,EstElemRec."Tender Paragraph No.");
          EstElemRec2.COPY(EstElemRec);
          EstElemRec2."Estimate No." := EstTo;
          EstElemRec2.INSERT;
          //DP01086.sn
          IF EstElemRec2."Construction Spec. Line No." = '00' THEN BEGIN
            CommentLineRAW.CopyComment(
              DATABASE::"Estimate Paragraph RAW", '', '', EstElemRec."Estimate No.", EstElemRec."Tender Paragraph No.", EstElemRec."Line No." , 0,
              DATABASE::"Estimate Paragraph RAW", '', '', EstElemRec2."Estimate No.", EstElemRec2."Tender Paragraph No.", EstElemRec2."Line No.", 0);
          END;
          IF NOT CommentLineRAW.HasEstElemLineComment(EstElemRec2."Estimate No.", EstElemRec2."Tender Paragraph No.", EstElemRec2."Line No.") THEN
            EstElemRec2.CopyActivityCommentRAW('', EstElemRec2.Activity, TRUE, Estimate."Part Group");
          //DP01086.en
        UNTIL EstElemRec.NEXT = 0;
      END;

      VatSpecRec.SETRANGE("Estimate No.",EstFrom);
      IF VatSpecRec.FINDSET THEN BEGIN
        REPEAT
          VatSpecRec2.COPY(VatSpecRec);
          VatSpecRec2."Estimate No." := EstTo;
          VatSpecRec2.INSERT;
        UNTIL VatSpecRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyEstLine@5(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];SubEstChapter@11012004 : Code[20];SubEstParagraph@1100485000 : Code[20];EstPartTo@11012005 : Code[20];Chapter@11012006 : Code[20];Paragraph@11012007 : Code[20];CopyPriceAgreement@1210190000 : Boolean);
    VAR
      UnitOld@1100485004 : Code[20];
      UnitNew@1100485003 : Code[20];
      OldEstLineRec@1100485001 : Record 11125698;
      NewEstLineRec@1100485002 : Record 11125698;
    BEGIN
      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      EstLineRec.SETRANGE("Estimate No.",EstFrom);
      IF EstLineRec.FINDSET THEN BEGIN
        Status.UPDATE(5,EstLineRec.TABLECAPTION);
        NumLines := EstLineRec.COUNT;
        REPEAT
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec."Estimate No." := EstTo;
          IF NOT CopyPriceAgreement THEN BEGIN
            TmpEstLineRec."Price Agreement" := FALSE;
            OldEstLineRec := TmpEstLineRec;
            IF EstLineRec."Trade Item" <> '' THEN
              TmpEstLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstDestRec, FALSE)
            ELSE
              IF EstLineRec."Basic Item" <> '' THEN
                TmpEstLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstDestRec, FALSE)
              ELSE
                IF EstLineRec."Item No." <> '' THEN
                  TmpEstLineRec.ValidateItem(ItemTypeOpt::Item, EstDestRec, FALSE);
            NewEstLineRec := TmpEstLineRec;
            IF NewEstLineRec."Unit of Measure" <> OldEstLineRec."Unit of Measure" THEN BEGIN
              UnitOld := OldEstLineRec."Unit of Measure";
              UnitNew := NewEstLineRec."Unit of Measure";
              NewEstLineRec."Unit of Measure" := UnitOld;
              OldEstLineRec."Unit of Measure" := UnitNew;
              TmpEstLineRec.CheckItemUnitConversion(NewEstLineRec, OldEstLineRec);
              TmpEstLineRec."Unit of Measure" := UnitOld;
              TmpEstLineRec."Net Cost Price":= NewEstLineRec."Net Cost Price";
              TmpEstLineRec."Gross Price":= NewEstLineRec."Gross Price";
            END;
          END;
          IF EstRateRec.GET(TmpEstLineRec."Estimate No.", TmpEstLineRec."Rate Code") THEN BEGIN
            TmpEstLineRec.Rate := EstRateRec."Cost Rate";
            TmpEstLineRec."Rate Type" := EstRateRec."Rate Type";
            TmpEstLineRec."Team Size" := EstRateRec."Team Size";
          END;
          TmpEstLineRec.CalculateTotals;
          TmpEstLineRec."Purchase Action" := '';
          TmpEstLineRec."Purchase Phase" := '';
          TmpEstLineRec."Purchase Action Status" := TmpEstLineRec."Purchase Action Status"::Concept ;
          TmpEstLineRec."Purch. Action Appr. Date" := 0D;
          TmpEstLineRec.Advised := FALSE;
          TmpEstLineRec.INSERT;
         //DP01086.sn
         TmpEstLine2 := TmpEstLineRec;
         TmpEstLine2."Recipe No." := EstLineRec."Estimate No.";            // Used as orig estimate no.
         TmpEstLine2."Attached to Recipe Line" :=  EstLineRec."Line No.";  // Used as orig line no.
         TmpEstLine2.INSERT;
         //DP01086.en
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL EstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyRecipeLine@6(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CopySurcharge@13(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    BEGIN
      //Not implemented for RAW
    END;

    PROCEDURE CopyQuantitySheet@1210190001(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CopyQuantityModel@1210190004(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CopySpecification@1100485002(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CopyCode@1210190002(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CopyConfigData@1100485001(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CopySummarySheet@15(EstFrom@11012000 : Code[20];SheetFrom@11012001 : Code[20];EstTo@11012002 : Code[20];PageTo@11012003 : Code[20];PageToTxt@11012004 : Text[50];SelectType@1100485000 : Integer);
    BEGIN
      IF NOT StatusBln THEN BEGIN
        OpenDialog;
        Status.UPDATE(1, EstFrom);
        Status.UPDATE(2, EstTo);
        Status.UPDATE(5, SumHeaderRec.TABLECAPTION);
        Status.UPDATE(6,0);
        ActionLvl := 4;
      END;

      SumHeaderRec.SETRANGE("Estimate No.", EstFrom);
      IF SheetFrom <> '' THEN
        SumHeaderRec.SETFILTER(Summary, '%1', SheetFrom);
      IF SelectType <> 0 THEN
        SumHeaderRec.SETRANGE("Summary Type", SelectType - 1);
      IF SumHeaderRec.FINDSET THEN BEGIN
        REPEAT
          TmpSumHeaderRec.COPY(SumHeaderRec);
          TmpSumHeaderRec."Estimate No." := EstTo;
          IF PageTo <> '' THEN BEGIN
            IF STRLEN(PageTo) > MAXSTRLEN(TmpSumHeaderRec.Summary) THEN
              ERROR(Text016, PageTo, STRLEN(PageTo) - MAXSTRLEN(TmpSumHeaderRec.Summary));
            TmpSumHeaderRec.Summary := PageTo;
          END;
          IF PageToTxt <> '' THEN
            TmpSumHeaderRec.Description := PageToTxt;
          TmpSumHeaderRec."Excel Sheet" := '';
          TmpSumHeaderRec.Fixed := FALSE;
          TmpSumHeaderRec.INSERT;

          SumLineRec.SETRANGE("Estimate No.", SumHeaderRec."Estimate No.");
          SumLineRec.SETFILTER(Summary, SumHeaderRec.Summary);
          IF SumLineRec.FINDSET THEN BEGIN
            REPEAT
              TmpSumLineRec.COPY(SumLineRec);
              TmpSumLineRec."Estimate No." := TmpSumHeaderRec."Estimate No.";
              TmpSumLineRec.Summary := TmpSumHeaderRec.Summary;
              TmpSumLineRec.INSERT;
            UNTIL SumLineRec.NEXT = 0;
          END;

          SumExcelRec.SETRANGE("Estimate No.", SumHeaderRec."Estimate No.");
          SumExcelRec.SETFILTER(Summary, SumHeaderRec.Summary);
          IF SumExcelRec.FINDSET THEN BEGIN
            REPEAT
              TmpSumExcelRec.COPY(SumExcelRec);
              TmpSumExcelRec."Estimate No." := TmpSumHeaderRec."Estimate No.";
              TmpSumExcelRec.Summary := TmpSumHeaderRec.Summary;
              TmpSumExcelRec.INSERT;
            UNTIL SumExcelRec.NEXT = 0;
          END;
        UNTIL SumHeaderRec.NEXT = 0;
      END;

      IF ActionLvl = 4 THEN
        UpdateFromTmp;
    END;

    PROCEDURE CopyModel@1210190003(lvAction@1210190000 : Integer);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE OpenDialog@12();
    BEGIN
      Status.OPEN(
         Text010 +
         Text011 +
         //Text012 +
         Text013 +
         Text014);

      StatusBln := TRUE;
    END;

    PROCEDURE CheckInputData@8(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20]);
    BEGIN
      IF EstFrom = '' THEN
        ERROR(Text006);

      IF SubEstFrom = '' THEN
        ERROR(Text007);

      IF EstTo = '' THEN
        ERROR(Text008);

      IF SubEstTo = '' THEN
        ERROR(Text009);
    END;

    PROCEDURE CheckFormat@16(lvAction@1100485000 : Integer);
    VAR
      EstSetupRec@11012000 : Record 11012150;
      lvFrmt@1100485001 : Code[20];
    BEGIN
      x := 0;
      sp1 := 0;
      sp2 := 0;

      EstSetupRec.GET();
      IF lvAction = 1 THEN BEGIN
        EstSetupRec.TESTFIELD("Sub-Estimate Format");
        lp := STRLEN(EstSetupRec."Sub-Estimate Format");
        lvFrmt := EstSetupRec."Sub-Estimate Format";
      END;
      IF lvAction = 2 THEN BEGIN
        EstSetupRec.TESTFIELD("Part Format");
        lp := STRLEN(EstSetupRec."Part Format");
        lvFrmt := EstSetupRec."Part Format";
      END;

      REPEAT
        x := x + 1;
        IF COPYSTR(lvFrmt,x,1) = '.' THEN BEGIN
          IF sp1 = 0 THEN
            sp1 := x
          ELSE
            IF sp2 = 0 THEN
              sp2 :=x
            ELSE
              ERROR(Text015);
        END;
      UNTIL x = lp;
    END;

    PROCEDURE UpdateFromTmp@1210190000();
    VAR
      CommentLineRAW@1100525000 : Record 11125684;
      SkipUpdate@1210190002 : Boolean;
    BEGIN
      SkipUpdate := FALSE;

      Status.UPDATE(6,0);
      Status.UPDATE(5,TmpEstRec.TABLECAPTION);
      TmpEstRec.RESET;
      IF TmpEstRec.FIND('-') THEN BEGIN
        REPEAT
          EstRec.COPY(TmpEstRec);
          EstRec."Service Location No." := '';
          EstRec."Service Contract No." := '';
          EstRec."Service Order No." := '';  //C046486
          EstRec."Project No." := '' ;
          IF NOT ElemRec.GET(EstRec.Element) THEN
            EstRec.Element := '' ;
          EvaluateProjPlanActCode(EstRec."Project Planning Activity Code");
          IF NOT EstRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstRateRec.TABLECAPTION);
      TmpEstRateRec.RESET;
      IF TmpEstRateRec.FIND('-') THEN BEGIN
        REPEAT
          EstRateRec.COPY(TmpEstRateRec);
          IF NOT EstRateRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstRateRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpDateRateRec.TABLECAPTION);
      TmpDateRateRec.RESET;
      IF TmpDateRateRec.FIND('-') THEN BEGIN
        REPEAT
          DateRateRec.COPY(TmpDateRateRec);
          IF NOT DateRateRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpDateRateRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstRespRec.TABLECAPTION);
      TmpEstRespRec.RESET;
      IF TmpEstRespRec.FIND('-') THEN BEGIN
        REPEAT
           EstRespRec.COPY(TmpEstRespRec);
           IF NOT EstRespRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstRespRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstPrincRec.TABLECAPTION);
      TmpEstPrincRec.RESET;
      IF TmpEstPrincRec.FIND('-') THEN BEGIN
        REPEAT
          EstPrincRec.COPY(TmpEstPrincRec);
          IF NOT EstPrincRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstPrincRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstCommentRec.TABLECAPTION);
      TmpEstCommentRec.RESET;
      IF TmpEstCommentRec.FIND('-') THEN BEGIN
        REPEAT
          EstCommentRec.COPY(TmpEstCommentRec);
          IF NOT EstCommentRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstCommentRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigFeatureRec.TABLECAPTION);
      TmpConfigFeatureRec.RESET;
      IF TmpConfigFeatureRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigFeatureRec.COPY(TmpConfigFeatureRec);
          IF NOT ConfigFeatureRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigFeatureRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigLevelRec.TABLECAPTION);
      TmpConfigLevelRec.RESET;
      IF TmpConfigLevelRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigLevelRec.COPY(TmpConfigLevelRec);
          IF NOT ConfigLevelRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigLevelRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigPartRec.TABLECAPTION);
      TmpConfigPartRec.RESET;
      IF TmpConfigPartRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigPartRec.COPY(TmpConfigPartRec);
          IF NOT ConfigPartRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigPartRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigPartFeatRec.TABLECAPTION);
      TmpConfigPartFeatRec.RESET;
      IF TmpConfigPartFeatRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigPartFeatRec.COPY(TmpConfigPartFeatRec);
          IF NOT ConfigPartFeatRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigPartFeatRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigRowQuanRec.TABLECAPTION);
      TmpConfigRowQuanRec.RESET;
      IF TmpConfigRowQuanRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigRowQuanRec.COPY(TmpConfigRowQuanRec);
          IF NOT ConfigRowQuanRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigRowQuanRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstModelRec.TABLECAPTION);
      TmpEstModelRec.RESET;
      IF TmpEstModelRec.FIND('-') THEN BEGIN
        REPEAT
          EstModelRec.COPY(TmpEstModelRec);
          IF NOT EstModelRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstModelRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstimateRAWSurcharge.TABLECAPTION);
      TmpEstimateRAWSurcharge.RESET;
      IF TmpEstimateRAWSurcharge.FIND('-') THEN BEGIN
        REPEAT
          EstimateRAWSurcharge.COPY(TmpEstimateRAWSurcharge);
          IF NOT EstimateRAWSurcharge.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstimateRAWSurcharge.NEXT = 0;
      END;

      //C063394.sn
      Status.UPDATE(5,TmpEstimateApplianceCodeRAW.TABLECAPTION);
      TmpEstimateApplianceCodeRAW.RESET;
      IF TmpEstimateApplianceCodeRAW.FIND('-') THEN BEGIN
        REPEAT
          EstimateApplianceCodeRAW.COPY(TmpEstimateApplianceCodeRAW);
          IF NOT EstimateApplianceCodeRAW.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstimateApplianceCodeRAW.NEXT = 0;
      END;
      //C063394.en

      Status.UPDATE(5,TmpEstLineRec.TABLECAPTION);
      TmpEstLineRec.RESET;
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          EstLineRec."Service Order No." := '';  //C046486
          EstLineRec."Project No." := '' ;
          IF NOT ElemRec.GET(EstLineRec.Element) THEN
            EstLineRec.Element := '' ;
          EvaluateProjPlanActCode(EstLineRec."Project Planning Activity Code");
          EstLineRec."Purchase Route Reference" := '';
          IF NOT EstLineRec.INSERT THEN
            SkipUpdate := TRUE
          //DP01086.sn
          ELSE BEGIN
            IF TmpEstLine2.GET(TmpEstLineRec."Estimate No.", TmpEstLineRec."Tender Paragraph No.", TmpEstLineRec."Line No.") THEN BEGIN
              CommentLineRAW.CopyComment(
              DATABASE::"Estimate Line RAW", '', '', TmpEstLine2."Recipe No.", EstLineRec."Tender Paragraph No.", 0, TmpEstLine2."Attached to Recipe Line",
              DATABASE::"Estimate Line RAW", '', '', EstLineRec."Estimate No.", EstLineRec."Tender Paragraph No.", 0, EstLineRec."Line No.");
           END;
          END;
          //DP01086.en
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpQuanSheetRec.TABLECAPTION);
      TmpQuanSheetRec.RESET;
      IF TmpQuanSheetRec.FIND ('-') THEN BEGIN
        REPEAT
          QuanSheetRec.COPY(TmpQuanSheetRec);
          IF NOT QuanSheetRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpQuanSheetRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpQuanModelRec.TABLECAPTION);
      TmpQuanModelRec.RESET;
      IF TmpQuanModelRec.FIND ('-') THEN BEGIN
        REPEAT
          QuanModelRec.COPY(TmpQuanModelRec);
          IF NOT QuanModelRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpQuanModelRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpSumHeaderRec.TABLECAPTION);
      TmpSumHeaderRec.RESET;
      IF TmpSumHeaderRec.FIND('-') THEN BEGIN
        REPEAT
          SumHeaderRec.COPY(TmpSumHeaderRec);
          SumHeaderRec."Project No." := '' ;
          IF NOT ElemRec.GET(SumHeaderRec.Element) THEN
            SumHeaderRec.Element := '' ;
          IF NOT SumHeaderRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpSumHeaderRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpSumLineRec.TABLECAPTION);
      TmpSumLineRec.RESET;
      IF TmpSumLineRec.FIND('-') THEN BEGIN
        REPEAT
          SumLineRec.COPY(TmpSumLineRec);
          IF NOT ElemRec.GET(SumLineRec.Element) THEN
            SumLineRec.Element := '' ;
          SumLineRec.VALIDATE("Field No.");  //**update row description for text relations
          IF NOT SumLineRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpSumLineRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpSumExcelRec.TABLECAPTION);
      TmpSumExcelRec.RESET;
      IF TmpSumExcelRec.FIND('-') THEN BEGIN
        REPEAT
          SumExcelRec.COPY(TmpSumExcelRec);
          IF NOT SumExcelRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpSumExcelRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetPartQuantity@1210190007(lvEst@1210190009 : Code[20];lvSubEst@1210190008 : Code[20];lvPartGroup@1210190006 : Code[20];lvPart@1210190003 : Code[20]) RetPartQuan@1210190000 : Decimal;
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE SetSelection@1100485000();
    BEGIN
      CopyEstModel := TRUE;
    END;

    LOCAL PROCEDURE EvaluateProjPlanActCode@1100528400(VAR ProjectPlanningActivityCode@1100528400 : Code[10]);
    VAR
      ProjectPlanningBaseActivity@1100528401 : Record 11012434;
    BEGIN
      IF ProjectPlanningActivityCode = '' THEN
        EXIT;

      IF NOT ProjectPlanningBaseActivity.GET(ProjectPlanningActivityCode) THEN
        ProjectPlanningActivityCode := '';
    END;

    BEGIN
    {
      DP01090: check on Estimate Type removed
    }
    END.
  }
}

