OBJECT Codeunit 11012583 AddLinkedPlantTypeStndItemMgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlantSetupRec@1100525000 : Record 11012550;
      PlantOrderRec@1100525007 : Record 11012556;
      CurrPlantOrderLineRec@1100525010 : Record 11012557;
      PlantRequestRec@1100525008 : Record 11020520;
      CurrPlantRequestLineRec@1100525015 : Record 11020521;
      PlantRequestSMF@1100529000 : Record 11125529;
      CurrPlantRequestLineSMF@1100529001 : Record 11125530;
      PlantQuoteRec@1100529501 : Record 11229918;
      CurrPlantQuoteLineRec@1100529500 : Record 11229919;
      LinkedPlantRec@1100525013 : Record 11012548;
      PlantStndItemRec@1100525009 : Record 11020519;
      LinkedPlantTypesPresent@1100525003 : Boolean;
      LinkedPlantNosPresent@1100528400 : Boolean;
      StndItemsPresent@1100525002 : Boolean;
      GeneralConfirm@1100525017 : Boolean;
      ConfirmDone@1100525018 : Boolean;
      Confirmed@1100525019 : Boolean;
      NextLineNoPlant@1100525011 : Integer;
      NextLineNoRequest@1100525016 : Integer;
      NextLineNoQuote@1100529502 : Integer;
      Gap@1100525014 : Integer;
      CurrLineQuantity@1100525001 : Decimal;
      Text001@1100525004 : TextConst 'DEU=Verbundene Werkzeugarten %2 von Werkzeugart ''%1'' hinzufÅgen?;ENU=Add linked plant types%2 of Plant Type ''%1'' ?;NLD=Gekoppelde materieelsoorten%2 van materieelsoort ''%1'' opvoeren?;NOR=Legge til koblede maskintypeer %2 til maskintypen ''%1''?;SVE=LÑgga till lÑnkade Maskinstyper %2 till Maskinstypen ''%1''?';
      Text002@1100525005 : TextConst 'DEU=Standardartikel von Werkzeugart ''%1'' hinzufÅgen?;ENU=Add standard items of Plant Type ''%1'' ?;NLD=Standaard artikelen van materieelsoort ''%1'' opvoeren?;NOR=Legge til standardartikler for maskintypee ''%1''?;SVE=LÑgga till standardartiklar fîr Maskinstyp ''%1''?';
      Text003@1100525006 : TextConst 'DEU=" (inkl. Standardartikel)";ENU=" (incl. standard items)";NLD=" (incl. standaard artikelen)";NOR=(inkl. standardartikler);SVE=" (inkl. standardartiklar)"';
      Text004@1100525012 : TextConst 'DEU=VerknÅpftes Werkzeug und/oder Artikel der Werkzeugart hinzufÅgen?;ENU=Add linked plant and/or items of Plant Type?;NLD=Gekoppeld materieel en/of artikelen van materieelsoort opvoeren?';
      Text005@1100528401 : TextConst 'DEU=VerknÅpfte Werkzeugnummern%3 der Werkzeugart ''%1'' und Werkzeugnummer ''%2'' hinzufÅgen?;ENU=Add linked plant numbers%3 of Plant Type ''%1'' and Plant Number ''%2''?;NLD=Gekoppelde materieelnummers%3 van materieelsoort ''%1'' en materieelnummer ''%2'' opvoeren?';

    PROCEDURE InsertOnPlantOrder@1100525000(PlantOrderLineRec@1100525000 : Record 11012557;UpdateStatus@1100525003 : 'OnInsert,OnModify') : Boolean;
    VAR
      OldPlantOrderLineRec@1100525002 : Record 11012557;
      SalesRelOrderRec@1100525004 : Record 11012787;
      CurrLinePlantNo@1100528400 : Code[10];
      PlantAllowed@1100525001 : Boolean;
      ItemsAllowed@1100525005 : Boolean;
    BEGIN
      WITH CurrPlantOrderLineRec DO BEGIN
        COPY(PlantOrderLineRec);
        IF ("Plant Type" = '') OR (Type <> Type::Plant) OR ("Plant Order No." = '') THEN
          EXIT(FALSE);

        PlantSetupRec.GET;
        PlantOrderRec.GET("Plant Order No.");
        //*DP00183.so
        //IF PlantOrderRec.Type <> PlantOrderRec.Type::Arrival THEN  //* Add linked Plant Types also only for Arrirval (Tom Z.)
        //  EXIT(FALSE);
        //*DP00183.eo
        //*DP00183.sn  //*DP00485.so
        //IF PlantOrderRec.Type <> PlantOrderRec.Type::Arrival THEN BEGIN //* Add linked Plant Types also only for Arrival (Tom Z.)
        //                                                                //* So not for Removal (or Neg. corr.)
        //  OtherDepotToDepot := PlantOrderRec.IsOtherTransferDepotToDepot(); //* Now also for Other-Tranfer Depot-to-Depot, but only
        //  IF NOT OtherDepotToDepot THEN                                     //* items. Not linked plant and not items of those.
        //    EXIT(FALSE);
        //END;
        //*DP00183.en  //*DP00485.eo
        //*DP00485.sn (C009444)
        // Plant now also for Removal and 'Other Transfers' (was only for Arrival)
        // Item only for Arrival and 'Other Transfer' from Depot to Depot (remains as it was)
        CASE PlantOrderRec.Type OF
          PlantOrderRec.Type::Arrival:
            BEGIN
              PlantAllowed := TRUE;
              ItemsAllowed := TRUE;
            END;
          PlantOrderRec.Type::Removal:
            BEGIN
              //PlantAllowed := TRUE;  //C018365.o
              PlantAllowed := PlantSetupRec."Add Linked Plant on Removal";  //C018365.n
              ItemsAllowed := FALSE;
            END;
          PlantOrderRec.Type::"Other Transfers":
            BEGIN
              //PlantAllowed := TRUE;  //C018365.o
              PlantAllowed := PlantSetupRec."Add Linked Plant on Removal";  //C018365.n
              ItemsAllowed := PlantOrderRec.IsOtherTransferDepotToDepot();  // Item only if Depot-to-Depot
            END;
          ELSE
            EXIT(FALSE);
        END;
        IF (NOT PlantAllowed) AND (NOT ItemsAllowed) THEN EXIT(FALSE);  //C018365.n
        //*DP00485.en

        //IF (NOT PlantSetupRec."Extended Picking Procedure") OR OtherDepotToDepot THEN  //*DP00183.c  //*DP00485.o
        IF (NOT PlantSetupRec."Extended Picking Procedure") OR (PlantOrderRec.Type <> PlantOrderRec.Type::Arrival) THEN //*DP00485.n
          CurrLineQuantity := Quantity
        ELSE
          CurrLineQuantity := "Asked Quantity";
        IF CurrLineQuantity <= 0 THEN
          EXIT(FALSE);
        IF UpdateStatus = UpdateStatus::OnModify THEN BEGIN  //* OnModify, record is not updated yet
          IF NOT OldPlantOrderLineRec.GET("Plant Order No.", "Line No.") THEN
            EXIT(FALSE);
          IF NOT PlantSetupRec."Extended Picking Procedure" THEN BEGIN
            IF OldPlantOrderLineRec.Quantity <> 0 THEN
              EXIT(FALSE);
          END ELSE BEGIN
            IF OldPlantOrderLineRec."Asked Quantity" <> 0 THEN
              EXIT(FALSE);
          END;
        END;

        //LinkedPlantTypesOrStndardItems("Plant Type",LinkedPlantPresent,StndItemsPresent,OtherDepotToDepot);//*DP00183.c //DP00485.o
        //*DP00485.sn
        CALCFIELDS(Bulk);
        IF (Type = Type::Plant) AND NOT Bulk THEN
          CurrLinePlantNo := "No.";
        LinkedPlantOrStndardItems(
          TRUE, "Plant Type", CurrLinePlantNo, LinkedPlantTypesPresent, LinkedPlantNosPresent, StndItemsPresent);
        IF NOT PlantAllowed THEN BEGIN
          LinkedPlantTypesPresent := FALSE;
          LinkedPlantNosPresent := FALSE;
        END;
        IF NOT ItemsAllowed THEN
          StndItemsPresent := FALSE;
        //*DP00485.en
        IF (NOT LinkedPlantTypesPresent) AND (NOT LinkedPlantNosPresent) AND (NOT StndItemsPresent) THEN
          EXIT(FALSE);

        //* If create from Sales Rental Order/-Contract (Heras/Mansveld) then invoiced from the Sales Order (in Sales Company).
        //* Then do not extra items here (should not be given away for free). Same for linked Plant Types (01-07-2010).
        SalesRelOrderRec.SETCURRENTKEY(Level, "Plant Document No.");
        SalesRelOrderRec.SETRANGE(Level, SalesRelOrderRec.Level::PlantOrder);
        SalesRelOrderRec.SETRANGE("Plant Document No.", "Plant Order No.");
        IF SalesRelOrderRec.FINDFIRST THEN
          EXIT(FALSE);

        IF NOT ConfirmAdd("Plant Type", CurrLinePlantNo, LinkedPlantTypesPresent, LinkedPlantNosPresent, StndItemsPresent) THEN
          EXIT(FALSE);

        NextLineNoPlant := 0;
        IF StndItemsPresent THEN
          AddStandardItems(DATABASE::"Plant Order Line", "Plant Type", PlantAllowed, 1);
        IF LinkedPlantTypesPresent THEN
          AddLinkedPlant(
            DATABASE::"Plant Order Line", LinkedPlantRec.Level::"Plant Type", "Plant Type", '', ItemsAllowed);
        IF LinkedPlantNosPresent THEN
          AddLinkedPlant(
            DATABASE::"Plant Order Line", LinkedPlantRec.Level::"Plant Number", "Plant Type", CurrLinePlantNo, ItemsAllowed);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE InsertOnPlantRequest@1100525001(PlantRequestLineRec@1100525000 : Record 11020521;UpdateStatus@1100525002 : 'OnInsert,OnModify') : Boolean;
    VAR
      OldPlantRequestLineRec@1100525001 : Record 11020521;
      CurrLinePlantNo@1100528400 : Code[10];
      PlantAllowed@1100525003 : Boolean;
      ItemsAllowed@1100525004 : Boolean;
    BEGIN
      WITH CurrPlantRequestLineRec DO BEGIN
        COPY(PlantRequestLineRec);
        IF ("Plant Type" = '') OR (Type <> Type::Plant) OR ("Plant Request No." = '') THEN
          EXIT(FALSE);

        PlantSetupRec.GET;
        PlantRequestRec.GET("Plant Request No.");
        //IF PlantOrderRec.Type <> PlantOrderRec.Type::Arrival THEN  //DP00485.o (also PlantOrderRec must be PlantRequestRec !)
        //  EXIT(FALSE);
        //*DP00485.sn (C009444)
        CASE PlantRequestRec.Type OF
          PlantRequestRec.Type::Arrival:
            BEGIN
              PlantAllowed := TRUE;
              ItemsAllowed := TRUE;
            END;
          PlantRequestRec.Type::Removal:
            BEGIN
              PlantAllowed := TRUE;
              ItemsAllowed := FALSE;
            END;
          PlantRequestRec.Type::"Other Transfers":
            BEGIN
              PlantAllowed := TRUE;
              ItemsAllowed := FALSE;  // Item only if Depot-to-Depot but not (yet) allowed on request
            END;
          ELSE
            EXIT(FALSE);
        END;
        //*DP00485.en

        CurrLineQuantity := Quantity;
        IF CurrLineQuantity <= 0 THEN
          EXIT(FALSE);
        IF UpdateStatus = UpdateStatus::OnModify THEN BEGIN  //* OnModify, record is not updated yet
          IF NOT OldPlantRequestLineRec.GET("Plant Request No.", "Line No.") THEN
            EXIT(FALSE);
          IF OldPlantRequestLineRec.Quantity <> 0 THEN
            EXIT(FALSE);
        END;

        //LinkedPlantTypesOrStndardItems("Plant Type", LinkedPlantPresent, StndItemsPresent, FALSE); //*DP00183.c //DP00485.o
        //*DP00485.sn
        CALCFIELDS(Bulk);
        IF (Type = Type::Plant) AND NOT Bulk THEN
          CurrLinePlantNo := "Plant No.";
        LinkedPlantOrStndardItems(TRUE, "Plant Type", CurrLinePlantNo, LinkedPlantTypesPresent, LinkedPlantNosPresent, StndItemsPresent);
        IF NOT PlantAllowed THEN BEGIN
          LinkedPlantTypesPresent := FALSE;
          LinkedPlantNosPresent := FALSE;
        END;
        IF NOT ItemsAllowed THEN
          StndItemsPresent := FALSE;
        //*DP00485.en
        IF (NOT LinkedPlantTypesPresent) AND (NOT LinkedPlantNosPresent) AND (NOT StndItemsPresent) THEN
          EXIT(FALSE);

        IF NOT ConfirmAdd("Plant Type", CurrLinePlantNo, LinkedPlantTypesPresent, LinkedPlantNosPresent, StndItemsPresent) THEN
          EXIT(FALSE);

        NextLineNoRequest := 0;
        IF StndItemsPresent THEN
          AddStandardItems(DATABASE::"Plant Request Line", "Plant Type", PlantAllowed, 1);
        IF LinkedPlantTypesPresent THEN
          AddLinkedPlant(
            DATABASE::"Plant Request Line", LinkedPlantRec.Level::"Plant Type", "Plant Type", '', ItemsAllowed);
        IF LinkedPlantNosPresent THEN
          AddLinkedPlant(
            DATABASE::"Plant Request Line", LinkedPlantRec.Level::"Plant Number", "Plant Type", CurrLinePlantNo, ItemsAllowed);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE InsertOnPlantRequestSMF@1100529000(PlantRequestLineSMF@1100525000 : Record 11125530;UpdateStatus@1100525002 : 'OnInsert,OnModify') : Boolean;
    VAR
      OldPlantRequestLineSMF@1100525001 : Record 11125530;
      PlantAllowed@1100525003 : Boolean;
      ItemsAllowed@1100525004 : Boolean;
    BEGIN
      WITH CurrPlantRequestLineSMF DO BEGIN
        COPY(PlantRequestLineSMF);
        IF ("Plant/Item" = '') OR (Type <> Type::Plant) OR ("Request No." = '') THEN
          EXIT(FALSE);

        PlantRequestSMF.GET("Request No.");
        PlantRequestSMF.TESTFIELD("Plant Company");
        CASE PlantRequestSMF.Type OF
          PlantRequestSMF.Type::Arrival:
            BEGIN
              PlantAllowed := TRUE;
              ItemsAllowed := TRUE;
            END;
          PlantRequestSMF.Type::Removal:
            BEGIN
              PlantAllowed := TRUE;
              ItemsAllowed := FALSE;
            END;
          PlantRequestSMF.Type::OtherTransfers:
            BEGIN
              PlantAllowed := TRUE;
              ItemsAllowed := FALSE;
            END;
          ELSE
            EXIT(FALSE);
        END;
        IF PlantRequestSMF."Plant Company" <> COMPANYNAME THEN BEGIN
          PlantSetupRec.CHANGECOMPANY(PlantRequestSMF."Plant Company");
          LinkedPlantRec.CHANGECOMPANY(PlantRequestSMF."Plant Company");
          PlantStndItemRec.CHANGECOMPANY(PlantRequestSMF."Plant Company");
        END;
        PlantSetupRec.GET;

        CurrLineQuantity := Quantity;
        IF CurrLineQuantity <= 0 THEN
          EXIT(FALSE);
        IF UpdateStatus = UpdateStatus::OnModify THEN BEGIN  //* OnModify, record is not updated yet
          IF NOT OldPlantRequestLineSMF.GET("Request No.", "Line No.") THEN
            EXIT(FALSE);
          IF OldPlantRequestLineSMF.Quantity <> 0 THEN
            EXIT(FALSE);
        END;

        LinkedPlantOrStndardItems(FALSE, "Plant/Item", '', LinkedPlantTypesPresent, LinkedPlantNosPresent, StndItemsPresent);
        IF NOT PlantAllowed THEN
          LinkedPlantTypesPresent := FALSE;
        IF NOT ItemsAllowed THEN
          StndItemsPresent := FALSE;
        IF (NOT LinkedPlantTypesPresent) AND (NOT StndItemsPresent) THEN
          EXIT(FALSE);

        IF NOT ConfirmAdd("Plant/Item", '', LinkedPlantTypesPresent, FALSE, StndItemsPresent) THEN
          EXIT(FALSE);

        NextLineNoRequest := 0;
        IF StndItemsPresent THEN
          AddStandardItems(DATABASE::"Plant Request Line (SMF)", "Plant/Item", PlantAllowed, 1);
        IF LinkedPlantTypesPresent THEN
          AddLinkedPlant(
            DATABASE::"Plant Request Line (SMF)", LinkedPlantRec.Level::"Plant Type", "Plant/Item", '', ItemsAllowed);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE InsertOnPlantQuote@1100529500(PlantQuoteLineRec@1100525000 : Record 11229919;UpdateStatus@1100525002 : 'OnInsert,OnModify') : Boolean;
    VAR
      OldPlantQuoteLineRec@1100525001 : Record 11229919;
      PlantAllowed@1100525003 : Boolean;
      ItemsAllowed@1100525004 : Boolean;
    BEGIN
      WITH CurrPlantQuoteLineRec DO BEGIN
        COPY(PlantQuoteLineRec);
        IF ("Plant Type" = '') OR (Type <> Type::Plant) OR ("Plant Quote No." = '') THEN
          EXIT(FALSE);

        PlantSetupRec.GET;
        PlantQuoteRec.GET("Plant Quote No.");
        IF PlantQuoteRec.Type <> PlantQuoteRec.Type::Rental THEN
          EXIT;
        PlantAllowed := TRUE;
        ItemsAllowed := TRUE;
        CurrLineQuantity := Quantity;
        IF CurrLineQuantity <= 0 THEN
          EXIT(FALSE);
        IF UpdateStatus = UpdateStatus::OnModify THEN BEGIN  //* OnModify, record is not updated yet
          IF NOT OldPlantQuoteLineRec.GET("Plant Quote No.", "Line No.") THEN
            EXIT(FALSE);
          IF OldPlantQuoteLineRec.Quantity <> 0 THEN
            EXIT(FALSE);
        END;

        LinkedPlantOrStndardItems(FALSE, "Plant Type", '', LinkedPlantTypesPresent, LinkedPlantNosPresent, StndItemsPresent);
        IF NOT PlantAllowed THEN
          LinkedPlantTypesPresent := FALSE;
        IF NOT ItemsAllowed THEN
          StndItemsPresent := FALSE;
        IF (NOT LinkedPlantTypesPresent) AND (NOT StndItemsPresent) THEN
          EXIT(FALSE);

        IF NOT ConfirmAdd("Plant Type", '', LinkedPlantTypesPresent, FALSE, StndItemsPresent) THEN
          EXIT(FALSE);

        NextLineNoQuote := 0;
        IF StndItemsPresent THEN
          AddStandardItems(DATABASE::"Plant Quote Line", "Plant Type", PlantAllowed, 1);
        IF LinkedPlantTypesPresent THEN
          AddLinkedPlant(
            DATABASE::"Plant Quote Line", LinkedPlantRec.Level::"Plant Type", "Plant Type", '', ItemsAllowed);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE LinkedPlantOrStndardItems@1100525002(LinkingPlantNosAllowed@1100528400 : Boolean;PlantType@1100525001 : Code[20];PlantNo@1100528401 : Code[10];VAR LinkedPlantTypes@1100525002 : Boolean;VAR LinkedPlantNos@1100528402 : Boolean;VAR StandardItems@1100525003 : Boolean);
    BEGIN
      LinkedPlantTypes := FALSE;
      LinkedPlantNos := FALSE;
      StandardItems := FALSE;

      IF StandardItemsPresent(PlantType) THEN
        StandardItems := TRUE;
      //IF OtherDepotToDepot THEN EXIT;  //*DP00183  //DP00485.o
      IF LinkingPlantNosAllowed THEN BEGIN
        SetLinkedPlantFilters(LinkedPlantRec.Level::"Plant Number", PlantType, PlantNo, LinkedPlantRec);
        IF LinkedPlantRec.ISEMPTY THEN
          SetLinkedPlantFilters(LinkedPlantRec.Level::"Plant Type", PlantType, '', LinkedPlantRec)
        ELSE
          LinkedPlantNos := TRUE;
      END ELSE
        SetLinkedPlantFilters(LinkedPlantRec.Level::"Plant Type", PlantType, '', LinkedPlantRec);
      IF LinkedPlantRec.FINDSET(FALSE,FALSE) THEN BEGIN
        IF NOT LinkedPlantNos THEN
          LinkedPlantTypes := TRUE;
        IF NOT StandardItems THEN BEGIN
          REPEAT
            IF StandardItemsPresent(LinkedPlantRec."Plant Type") THEN
              StandardItems := TRUE;
          UNTIL (LinkedPlantRec.NEXT = 0) OR StandardItems;
        END;
      END;
    END;

    LOCAL PROCEDURE StandardItemsPresent@1100525003(PlantType@1100525001 : Code[20]) : Boolean;
    VAR
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF (PlantType = '') OR (NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantStndItemRec)) THEN
        EXIT(FALSE);
      SetStandardItemFilters(PlantType, PlantStndItemRec);
      EXIT(NOT PlantStndItemRec.ISEMPTY);
    END;

    PROCEDURE SetGeneralConfirm@1100525008();
    BEGIN
      GeneralConfirm := TRUE;
      ConfirmDone := FALSE;
      Confirmed := FALSE;
    END;

    LOCAL PROCEDURE ConfirmAdd@1100525006(PlantType@1100525002 : Code[20];PlantNo@1100528401 : Code[10];LinkedPlantTypes@1100525001 : Boolean;LinkedPlantNos@1100528400 : Boolean;StandardItems@1100525000 : Boolean) : Boolean;
    VAR
      InclItemTxt@1100525003 : Text[50];
    BEGIN
      IF GeneralConfirm THEN BEGIN
        IF NOT ConfirmDone THEN BEGIN
          Confirmed := CONFIRM(Text004, TRUE);
          ConfirmDone := TRUE;
        END;
        EXIT(Confirmed);
      END;

      IF LinkedPlantTypes THEN BEGIN
        IF StandardItems THEN
          InclItemTxt := Text003;
        IF CONFIRM(Text001, TRUE, PlantType, InclItemTxt) THEN
          EXIT(TRUE);
      END ELSE BEGIN
        IF LinkedPlantNos THEN BEGIN
          IF StandardItems THEN
            InclItemTxt := Text003;
          IF CONFIRM(Text005, TRUE, PlantType, PlantNo, InclItemTxt) THEN
            EXIT(TRUE);
        END ELSE BEGIN
          IF StandardItems THEN BEGIN
            IF CONFIRM(Text002, TRUE, PlantType) THEN
              EXIT(TRUE);
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AddLinkedPlant@1100525004(TableNo@1100525001 : Integer;LinkedPlantLevel@1100528400 : Integer;PlantType@1100525000 : Code[20];PlantNo@1100528401 : Code[10];ItemsAllowed@1100525002 : Boolean);
    BEGIN
      SetLinkedPlantFilters(LinkedPlantLevel, PlantType, PlantNo, LinkedPlantRec);
      IF LinkedPlantRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          CASE TableNo OF
            DATABASE::"Plant Order Line":
              InsertPlantOrderLine(CurrPlantOrderLineRec.Type::Plant, TRUE, ItemsAllowed, 1);
            DATABASE::"Plant Request Line":
              InsertPlantRequestLine(CurrPlantRequestLineRec.Type::Plant, TRUE, ItemsAllowed, 1);
            DATABASE::"Plant Request Line (SMF)":
              InsertPlantRequestLineSMF(CurrPlantRequestLineSMF.Type::Plant, TRUE, ItemsAllowed, 1);
            DATABASE::"Plant Quote Line":
              InsertPlantQuoteLine(CurrPlantQuoteLineRec.Type::Plant, TRUE, ItemsAllowed, 1);
          END;
          IF ItemsAllowed THEN  //DP00485.n  (only if allowed)
            AddStandardItems(TableNo, LinkedPlantRec."Plant Type", TRUE, LinkedPlantRec.Quantity);
        UNTIL LinkedPlantRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddStandardItems@1100525005(TableNo@1100525000 : Integer;PlantType@1100525001 : Code[20];PlantAllowed@1100529000 : Boolean;BomFactor@1100529001 : Decimal);
    BEGIN
      SetStandardItemFilters(PlantType, PlantStndItemRec);
      IF PlantStndItemRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          CASE TableNo OF
            DATABASE::"Plant Order Line":
              //InsertPlantOrderItemLine();
              InsertPlantOrderLine(CurrPlantOrderLineRec.Type::Item, PlantAllowed, TRUE, BomFactor);
            DATABASE::"Plant Request Line":
              InsertPlantRequestLine(CurrPlantRequestLineRec.Type::Item, PlantAllowed, TRUE, BomFactor);
            DATABASE::"Plant Request Line (SMF)":
              InsertPlantRequestLineSMF(CurrPlantRequestLineSMF.Type::Item, PlantAllowed, TRUE, BomFactor);
            DATABASE::"Plant Quote Line":
              InsertPlantQuoteLine(CurrPlantQuoteLineRec.Type::Item, PlantAllowed, TRUE, BomFactor);
          END;
        UNTIL PlantStndItemRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertPlantOrderLine@1100525007(LineType@1100529002 : Option;PlantAllowed@1100529001 : Boolean;ItemsAllowed@1100529000 : Boolean;BomFactor@1100529004 : Decimal);
    VAR
      PlantOrderLineRec@1100525000 : Record 11012557;
      CurrLinePlantNo@1100528400 : Code[10];
      NewLineCounter@1100529003 : Integer;
      QuantityNewLine@1100525001 : Decimal;
    BEGIN
      WITH CurrPlantOrderLineRec DO BEGIN
        IF NextLineNoPlant = 0 THEN BEGIN  //* Insert new lines between current en next line if possible, else at the end
          //* Note: When this codeunit (function) is called from the OnInsert trigger then current record is not yet in
          //*       the database but "Line No," is already filled.
          PlantOrderLineRec.SETRANGE("Plant Order No.", "Plant Order No.");
          PlantOrderLineRec.SETFILTER("Line No.", '>%1', "Line No.");
          IF NOT PlantOrderLineRec.FINDFIRST THEN BEGIN
            Gap := 10000;
            NextLineNoPlant := "Line No." + Gap;
          END ELSE BEGIN
            CALCFIELDS(Bulk);
            IF (Type = Type::Plant) AND NOT Bulk THEN
              CurrLinePlantNo := "No.";
            NewLineCounter := CountNumberOfNewLines(
              LinkedPlantRec.Level, "Plant Type", CurrLinePlantNo, PlantAllowed, ItemsAllowed, '');
            Gap := ROUND((PlantOrderLineRec."Line No." - "Line No.") / (NewLineCounter + 1), 1, '<');
            IF Gap > 0 THEN
              NextLineNoPlant := "Line No." + Gap
            ELSE BEGIN
              Gap := 10000;
              PlantOrderLineRec.RESET;
              PlantOrderLineRec.SETRANGE("Plant Order No.", "Plant Order No.");
              IF PlantOrderLineRec.FINDLAST THEN
                NextLineNoPlant := PlantOrderLineRec."Line No.";
              IF NextLineNoPlant < "Line No." THEN
                NextLineNoPlant := "Line No.";
              NextLineNoPlant := NextLineNoPlant + Gap;
            END;
          END;
        END;

        PlantOrderLineRec.INIT;
        PlantOrderLineRec."Plant Order No." := "Plant Order No.";
        PlantOrderLineRec."Line No." := NextLineNoPlant;
        PlantOrderLineRec.VALIDATE(Type, LineType);
        PlantOrderLineRec.InitRecord;

        IF LineType <> Type::Item THEN BEGIN
          LinkedPlantRec.CALCFIELDS(Bulk);
          IF NOT LinkedPlantRec.Bulk THEN
            QuantityNewLine := ROUND(CurrLineQuantity * LinkedPlantRec.Quantity, 1)
          ELSE
            QuantityNewLine := ROUND(CurrLineQuantity * LinkedPlantRec.Quantity, 0.00001);
          PlantOrderLineRec.VALIDATE("Plant Type", LinkedPlantRec."Plant Type");
          PlantOrderLineRec.CALCFIELDS(Bulk);
          IF (LinkedPlantRec.Level = LinkedPlantRec.Level::"Plant Number") AND
             (PlantOrderLineRec.Type = PlantOrderLineRec.Type::Plant) AND
             NOT PlantOrderLineRec.Bulk
          THEN
            PlantOrderLineRec.VALIDATE("No.", LinkedPlantRec."Plant No.");
          //IF NOT PlantSetupRec."Extended Picking Procedure" THEN  //DP00485.o
          IF (NOT PlantSetupRec."Extended Picking Procedure") OR (PlantOrderRec.Type <> PlantOrderRec.Type::Arrival) THEN //DP00485.n
            PlantOrderLineRec.VALIDATE(Quantity, QuantityNewLine)
          ELSE
            PlantOrderLineRec.VALIDATE("Asked Quantity", QuantityNewLine);
          //DP00485.sn (C009444)
          IF PlantSetupRec."Removal with Qty. to Receive" AND (PlantOrderRec.Type = PlantOrderRec.Type::Removal) THEN
             PlantOrderLineRec."Qty. to Receive" := PlantOrderLineRec.Quantity;
          //DP00485.en
          PlantOrderLineRec."Expected return on" := "Expected return on";
          //PlantOrderLineRec."From Rate Code" := "From Rate Code";  //*C011770.o
          //PlantOrderLineRec."To Rate Code" := "To Rate Code";      //*C011770.o
          //*C011770.sn
          PlantOrderLineRec."From Rate Code" := DeterminePOLineFromRateCode(PlantOrderLineRec, "From Rate Code");
          IF (NOT PlantSetupRec."Rate Codes") OR
             (PlantOrderLineRec."Rental Type" IN
              [PlantOrderLineRec."Rental Type"::Sales, PlantOrderLineRec."Rental Type"::"Buy Back and Sales"])
          THEN
            PlantOrderLineRec."To Rate Code" := ''
          ELSE
            PlantOrderLineRec."To Rate Code" := "To Rate Code";
          //*C011770.en
          PlantOrderLineRec."Rental Shift" := "Rental Shift";
          PlantOrderLineRec."Rental Startdate (To Location)" := "Rental Startdate (To Location)";
          PlantOrderLineRec."Rental Enddate (From Location)" := "Rental Enddate (From Location)";
        END ELSE BEGIN
          PlantStndItemRec.CALCFIELDS("Unit of Measure");
          QuantityNewLine := ROUND(CurrLineQuantity * PlantStndItemRec.Quantity * BomFactor, 0.00001);
          PlantOrderLineRec.VALIDATE("Item No.", PlantStndItemRec."Item No.");
          IF (NOT PlantSetupRec."Extended Picking Procedure") OR (PlantOrderRec.Type <> PlantOrderRec.Type::Arrival) THEN //DP00183.n
            PlantOrderLineRec.VALIDATE(Quantity, QuantityNewLine)
          ELSE
            PlantOrderLineRec.VALIDATE("Asked Quantity", QuantityNewLine);
        END;
        PlantOrderLineRec."To Employee Company" := "To Employee Company";
        PlantOrderLineRec."To Employee No." := "To Employee No.";
        PlantOrderLineRec.Element := Element;
        PlantOrderLineRec."Plant Group" := "Plant Group";
        PlantOrderLineRec."From Plant Group" := "From Plant Group";
        PlantOrderLineRec."To Plant Group" := "To Plant Group";
        PlantOrderLineRec.INSERT(TRUE);
        NextLineNoPlant := NextLineNoPlant + Gap;
      END;
    END;

    LOCAL PROCEDURE InsertPlantRequestLine@1100525013(LineType@1100525001 : Option;PlantAllowed@1100529001 : Boolean;ItemsAllowed@1100529000 : Boolean;BomFactor@1100529002 : Decimal);
    VAR
      PlantRequestLineRec@1100525000 : Record 11020521;
      CurrLinePlantNo@1100528400 : Code[10];
      NewLineCounter@1100525003 : Integer;
      QuantityNewLine@1100525002 : Decimal;
    BEGIN
      WITH CurrPlantRequestLineRec DO BEGIN
        IF NextLineNoRequest = 0 THEN BEGIN  //* Insert new lines between current en next line if possible, else at the end
          //* Note: When this codeunit (function) is called from the OnInsert trigger then current record is not yet in
          //*       the database but "Line No," is already filled.
          PlantRequestLineRec.SETRANGE("Plant Request No.", "Plant Request No.");
          PlantRequestLineRec.SETFILTER("Line No.", '>%1', "Line No.");
          IF NOT PlantRequestLineRec.FINDFIRST THEN BEGIN
            Gap := 10000;
            NextLineNoRequest := "Line No." + Gap;
          END ELSE BEGIN
            CALCFIELDS(Bulk);
            IF (Type = Type::Plant) AND NOT Bulk THEN
              CurrLinePlantNo := "Plant No.";
            NewLineCounter := CountNumberOfNewLines(
              LinkedPlantRec.Level, "Plant Type", CurrLinePlantNo, PlantAllowed, ItemsAllowed, '');
            Gap := ROUND((PlantRequestLineRec."Line No." - "Line No.") / (NewLineCounter + 1), 1, '<');
            IF Gap > 0 THEN
              NextLineNoRequest := "Line No." + Gap
            ELSE BEGIN
              Gap := 10000;
              PlantRequestLineRec.RESET;
              PlantRequestLineRec.SETRANGE("Plant Request No.", "Plant Request No.");
              IF PlantRequestLineRec.FINDLAST THEN
                NextLineNoRequest := PlantRequestLineRec."Line No.";
              IF NextLineNoRequest < "Line No." THEN
                NextLineNoRequest := "Line No.";
              NextLineNoRequest := NextLineNoRequest + Gap;
            END;
          END;
        END;

        IF LineType <> Type::Item THEN BEGIN
          LinkedPlantRec.CALCFIELDS(Bulk);
          IF NOT LinkedPlantRec.Bulk THEN
            QuantityNewLine := ROUND(CurrLineQuantity * LinkedPlantRec.Quantity, 1)
          ELSE
            QuantityNewLine := ROUND(CurrLineQuantity * LinkedPlantRec.Quantity, 0.00001);
        END ELSE BEGIN
          PlantStndItemRec.CALCFIELDS("Unit of Measure");
          QuantityNewLine := ROUND(Quantity * PlantStndItemRec.Quantity * BomFactor, 0.00001);
        END;
        //
        PlantRequestLineRec.INIT;
        PlantRequestLineRec."Plant Request No." := "Plant Request No.";
        PlantRequestLineRec.InitRecord;
        PlantRequestLineRec."Line No." := NextLineNoRequest;
        PlantRequestLineRec.VALIDATE(Type, LineType);
        IF LineType <> Type::Item THEN BEGIN
          PlantRequestLineRec.VALIDATE("Plant Type", LinkedPlantRec."Plant Type");
          PlantRequestLineRec.CALCFIELDS(Bulk);
          IF (LinkedPlantRec.Level = LinkedPlantRec.Level::"Plant Number") AND
             (PlantRequestLineRec.Type = PlantRequestLineRec.Type::Plant) AND
             NOT PlantRequestLineRec.Bulk
          THEN
            PlantRequestLineRec.VALIDATE("Plant No.", LinkedPlantRec."Plant No.");
        END ELSE
          PlantRequestLineRec.VALIDATE("Item No.", PlantStndItemRec."Item No.");
        PlantRequestLineRec.VALIDATE(Quantity, QuantityNewLine);
        PlantRequestLineRec."Rate Code" := "Rate Code";
        PlantRequestLineRec."Expected return on" := "Expected return on";
        PlantRequestLineRec.Element := Element;
        PlantRequestLineRec.INSERT(TRUE);
        NextLineNoRequest := NextLineNoRequest + Gap;
      END;
    END;

    LOCAL PROCEDURE InsertPlantRequestLineSMF@1100529003(LineType@1100525001 : Option;PlantAllowed@1100529001 : Boolean;ItemsAllowed@1100529000 : Boolean;BomFactor@1100529002 : Decimal);
    VAR
      PlantRequestLineSMF@1100525000 : Record 11125530;
      NewLineCounter@1100525003 : Integer;
      QuantityNewLine@1100525002 : Decimal;
      RoundingPrecision@1100529003 : Decimal;
    BEGIN
      WITH CurrPlantRequestLineSMF DO BEGIN
        IF NextLineNoRequest = 0 THEN BEGIN  //* Insert new lines between current en next line if possible, else at the end
          //* Note: When this codeunit (function) is called from the OnInsert trigger then current record is not yet in
          //*       the database but "Line No," is already filled.
          PlantRequestLineSMF.SETRANGE("Request No.", "Request No.");
          PlantRequestLineSMF.SETFILTER("Line No.", '>%1', "Line No.");
          IF NOT PlantRequestLineSMF.FINDFIRST THEN BEGIN
            Gap := 10000;
            NextLineNoRequest := "Line No." + Gap;
          END ELSE BEGIN
            NewLineCounter := CountNumberOfNewLines(
              LinkedPlantRec.Level::"Plant Type", "Plant/Item", '', PlantAllowed, ItemsAllowed, PlantRequestSMF."Plant Company");
            Gap := ROUND((PlantRequestLineSMF."Line No." - "Line No.") / (NewLineCounter + 1), 1, '<');
            IF Gap > 0 THEN
              NextLineNoRequest := "Line No." + Gap
            ELSE BEGIN
              Gap := 10000;
              PlantRequestLineSMF.RESET;
              PlantRequestLineSMF.SETRANGE("Request No.", "Request No.");
              IF PlantRequestLineSMF.FINDLAST THEN
                NextLineNoRequest := PlantRequestLineSMF."Line No.";
              IF NextLineNoRequest < "Line No." THEN
                NextLineNoRequest := "Line No.";
              NextLineNoRequest := NextLineNoRequest + Gap;
            END;
          END;
        END;

        PlantRequestLineSMF.INIT;
        PlantRequestLineSMF."Request No." := "Request No.";
        PlantRequestLineSMF."Line No." := NextLineNoRequest;
        PlantRequestLineSMF.VALIDATE(Type, LineType);
        RoundingPrecision := 0.00001;
        IF LineType <> Type::Item THEN BEGIN
          PlantRequestLineSMF.VALIDATE("Plant/Item", LinkedPlantRec."Plant Type");
          IF NOT PlantRequestLineSMF.Bulk THEN
            RoundingPrecision := 1;
          QuantityNewLine := CurrLineQuantity * LinkedPlantRec.Quantity;
          PlantRequestLineSMF."Expected return on" := "Expected return on";
        END ELSE BEGIN
          PlantRequestLineSMF.VALIDATE("Plant/Item", PlantStndItemRec."Item No.");
          QuantityNewLine := Quantity * PlantStndItemRec.Quantity * BomFactor;
        END;
        PlantRequestLineSMF.VALIDATE(Quantity, ROUND(QuantityNewLine, RoundingPrecision));
        PlantRequestLineSMF.Element := Element;
        PlantRequestLineSMF.INSERT(TRUE);
        NextLineNoRequest := NextLineNoRequest + Gap;
      END;
    END;

    LOCAL PROCEDURE InsertPlantQuoteLine@1100529504(LineType@1100525001 : Option;PlantAllowed@1100529001 : Boolean;ItemsAllowed@1100529000 : Boolean;BomFactor@1100529002 : Decimal);
    VAR
      PlantQuoteLineRec@1100525000 : Record 11229919;
      NewLineCounter@1100525003 : Integer;
      QuantityNewLine@1100525002 : Decimal;
    BEGIN
      WITH CurrPlantQuoteLineRec DO BEGIN
        IF NextLineNoQuote = 0 THEN BEGIN  //* Insert new lines between current en next line if possible, else at the end
          //* Note: When this codeunit (function) is called from the OnInsert trigger then current record is not yet in
          //*       the database but "Line No," is already filled.
          PlantQuoteLineRec.SETRANGE("Plant Quote No.", "Plant Quote No.");
          PlantQuoteLineRec.SETFILTER("Line No.", '>%1', "Line No.");
          IF NOT PlantQuoteLineRec.FINDFIRST THEN BEGIN
            Gap := 10000;
            NextLineNoQuote := "Line No." + Gap;
          END ELSE BEGIN
            NewLineCounter := CountNumberOfNewLines(
              LinkedPlantRec.Level::"Plant Type", "Plant Type", '', PlantAllowed, ItemsAllowed, '');
            Gap := ROUND((PlantQuoteLineRec."Line No." - "Line No.") / (NewLineCounter + 1), 1, '<');
            IF Gap > 0 THEN
              NextLineNoQuote := "Line No." + Gap
            ELSE BEGIN
              Gap := 10000;
              PlantQuoteLineRec.RESET;
              PlantQuoteLineRec.SETRANGE("Plant Quote No.", "Plant Quote No.");
              IF PlantQuoteLineRec.FINDLAST THEN
                NextLineNoQuote := PlantQuoteLineRec."Line No.";
              IF NextLineNoQuote < "Line No." THEN
                NextLineNoQuote := "Line No.";
              NextLineNoQuote := NextLineNoQuote + Gap;
            END;
          END;
        END;

        IF LineType <> Type::Item THEN BEGIN
          LinkedPlantRec.CALCFIELDS(Bulk);
          IF NOT LinkedPlantRec.Bulk THEN
            QuantityNewLine := ROUND(CurrLineQuantity * LinkedPlantRec.Quantity, 1)
          ELSE
            QuantityNewLine := ROUND(CurrLineQuantity * LinkedPlantRec.Quantity, 0.00001);
        END ELSE BEGIN
          PlantStndItemRec.CALCFIELDS("Unit of Measure");
          QuantityNewLine := ROUND(Quantity * PlantStndItemRec.Quantity * BomFactor, 0.00001);
        END;
        //
        PlantQuoteLineRec.INIT;
        PlantQuoteLineRec."Plant Quote No." := "Plant Quote No.";
        PlantQuoteLineRec."Line No." := NextLineNoQuote;
        PlantQuoteLineRec.VALIDATE(Type, LineType);
        IF LineType <> Type::Item THEN BEGIN
          PlantQuoteLineRec."Rate Code" := "Rate Code";
          PlantQuoteLineRec.VALIDATE("Plant Type", LinkedPlantRec."Plant Type")
        END ELSE
          PlantQuoteLineRec.VALIDATE("Item No.", PlantStndItemRec."Item No.");
        PlantQuoteLineRec."Discount %" := "Discount %";
        PlantQuoteLineRec.VALIDATE(Quantity, QuantityNewLine);
        IF LineType = Type::Plant THEN
          PlantQuoteLineRec.VALIDATE("Time Quantity", "Time Quantity");
        PlantQuoteLineRec.INSERT(TRUE);
        NextLineNoQuote := NextLineNoQuote + Gap;
      END;
    END;

    LOCAL PROCEDURE CountNumberOfNewLines@1100525018(LinkedPlantLevel@1100528400 : Integer;PlantType@1100525001 : Code[20];PlantNo@1100528401 : Code[10];PlantAllowed@1100529000 : Boolean;ItemsAllowed@1100529001 : Boolean;PlantCompany@1100529002 : Text) : Integer;
    VAR
      LinkedPlantRec2@1100525000 : Record 11012548;
      PlantStndItemRec2@1100525002 : Record 11020519;
      Counter@1100525003 : Integer;
    BEGIN
      Counter := 0;
      IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN BEGIN
        LinkedPlantRec2.CHANGECOMPANY(PlantCompany);
        PlantStndItemRec2.CHANGECOMPANY(PlantCompany);
      END;
      IF ItemsAllowed THEN BEGIN
        SetStandardItemFilters(PlantType, PlantStndItemRec2);
        Counter := Counter + PlantStndItemRec2.COUNT;
      END;
      IF PlantAllowed THEN BEGIN
        SetLinkedPlantFilters(LinkedPlantLevel, PlantType, PlantNo, LinkedPlantRec2);
        IF LinkedPlantRec2.FINDSET(FALSE,FALSE) THEN BEGIN
          Counter := Counter + LinkedPlantRec2.COUNT;
          IF ItemsAllowed THEN BEGIN
            REPEAT
              SetStandardItemFilters(LinkedPlantRec2."Plant Type", PlantStndItemRec2);
              Counter := Counter + PlantStndItemRec2.COUNT;
            UNTIL LinkedPlantRec2.NEXT = 0;
          END;
        END;
      END;
      EXIT(Counter);
    END;

    LOCAL PROCEDURE SetLinkedPlantFilters@1100525011(Level@1100528400 : Integer;PlantType@1100525000 : Code[20];PlantNo@1100528401 : Code[10];VAR LinkedPlantRec2@1100525001 : Record 11012548);
    BEGIN
      LinkedPlantRec2.RESET;
      LinkedPlantRec2.SETRANGE(Level, Level);
      LinkedPlantRec2.SETRANGE("Main Plant Type", PlantType);
      LinkedPlantRec2.SETFILTER("Plant Type", '<>%1', '');
      IF Level = LinkedPlantRec2.Level::"Plant Number" THEN BEGIN
        LinkedPlantRec2.SETRANGE("Main Plant No.", PlantNo);
        LinkedPlantRec2.SETFILTER("Plant No.", '<>%1', '');
      END;
      LinkedPlantRec2.SETFILTER(Quantity, '<>%1', 0);
    END;

    LOCAL PROCEDURE SetStandardItemFilters@1100525012(PlantType@1100525000 : Code[20];VAR PlantStndItemRec2@1100525001 : Record 11020519);
    BEGIN
      PlantStndItemRec2.RESET;
      PlantStndItemRec2.SETRANGE("Plant Type", PlantType);
      PlantStndItemRec2.SETFILTER("Item No.", '<>%1', '');
      PlantStndItemRec2.SETFILTER(Quantity, '<>%1', 0);
    END;

    LOCAL PROCEDURE DeterminePOLineFromRateCode@1100525017(POLine@1100525000 : Record 11012557;OrgFromRateCode@1100525001 : Code[10]) : Code[10];
    VAR
      PlantInventory@1100525002 : Record 11012555;
    BEGIN
      //*C011770
      IF (NOT PlantSetupRec."Rate Codes") THEN
        EXIT('');

      PlantInventory.SETRANGE(Removed, FALSE);
      PlantInventory.SETRANGE(Location, POLine."From Location");
      PlantInventory.SETRANGE("Plant Type", POLine."Plant Type");
      IF POLine."No." <> '' THEN
        PlantInventory.SETRANGE("Plant No.", POLine."No.");
      PlantInventory.SETFILTER(Quantity, '<>%1', 0);
      PlantInventory.SETFILTER("Present from", '<=%1', POLine."Transfer Date");
      PlantInventory.SETRANGE(Sold, FALSE);
      IF POLine."Rental Type" IN [POLine."Rental Type"::"Buy Back", POLine."Rental Type"::"Buy Back and Sales"] THEN
        PlantInventory.SETRANGE(Sold, TRUE);

      IF OrgFromRateCode <> '' THEN BEGIN
        PlantInventory.SETRANGE("Rate Code", OrgFromRateCode);
        IF NOT PlantInventory.ISEMPTY THEN
          EXIT(OrgFromRateCode);
      END;
      IF POLine."From Rate Code" <> '' THEN BEGIN  // Is default rate code
        PlantInventory.SETRANGE("Rate Code", POLine."From Rate Code");
        IF NOT PlantInventory.ISEMPTY THEN
          EXIT(POLine."From Rate Code");
      END;
      EXIT('');
    END;

    BEGIN
    {
      01-07-2010
      Function on forms (Plant Order/Request subforms) are moved to this function.
      Was only standard items, now also linked plant types.
      NOTE: Items only for 'Arrival', explode linked Plant Types also only for 'Arrival' (according the design, Tom Z.)
    }
    END.
  }
}

