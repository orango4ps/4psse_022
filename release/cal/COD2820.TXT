OBJECT Codeunit 2820 Native - Attachments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CleanupUnlinkedAttachments;
          END;

  }
  CODE
  {
    VAR
      CleanupJobBufferHoursTxt@1000 : TextConst '@@@={Locked};ENU=6;NOR=6';
      AttachmentKeepDaysTxt@1001 : TextConst '@@@={Locked};ENU=5;NOR=5';

    [Internal]
    PROCEDURE UpdateAttachments@6(DocumentId@1000 : GUID;NewAttachmentsJSON@1001 : Text;PreviousAttachmentsJSON@1009 : Text);
    VAR
      TempOldAttachmentEntityBuffer@1007 : TEMPORARY Record 5509;
      TempNewAttachmentEntityBuffer@1006 : TEMPORARY Record 5509;
      NativeEDMTypes@1002 : Codeunit 2801;
      GraphMgtAttachmentBuffer@1005 : Codeunit 5503;
    BEGIN
      NativeEDMTypes.ParseAttachmentsJSON(PreviousAttachmentsJSON,TempOldAttachmentEntityBuffer,DocumentId);
      NativeEDMTypes.ParseAttachmentsJSON(NewAttachmentsJSON,TempNewAttachmentEntityBuffer,DocumentId);

      GraphMgtAttachmentBuffer.UpdateAttachments(TempOldAttachmentEntityBuffer,TempNewAttachmentEntityBuffer,DocumentId);
    END;

    [Internal]
    PROCEDURE GenerateAttachmentsJSON@2(DocumentIdFilter@1000 : Text) : Text;
    VAR
      TempAttachmentEntityBuffer@1003 : TEMPORARY Record 5509;
      NativeEDMTypes@1006 : Codeunit 2801;
      GraphMgtAttachmentBuffer@1005 : Codeunit 5503;
    BEGIN
      TempAttachmentEntityBuffer.DELETEALL;
      GraphMgtAttachmentBuffer.LoadAttachments(TempAttachmentEntityBuffer,DocumentIdFilter,'');

      EXIT(NativeEDMTypes.WriteAttachmentsJSON(TempAttachmentEntityBuffer));
    END;

    LOCAL PROCEDURE CleanupUnlinkedAttachments@7();
    VAR
      UnlinkedAttachment@1000 : Record 138;
    BEGIN
      UnlinkedAttachment.SETCURRENTKEY("Created Date-Time");
      UnlinkedAttachment.SETFILTER(
        "Created Date-Time",'..%1',
        CREATEDATETIME(CALCDATE(STRSUBSTNO('<-%1D>',AttachmentKeepDays),TODAY),DT2TIME(CURRENTDATETIME)));
      UnlinkedAttachment.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ScheduleCleanupJob@5();
    VAR
      JobQueueEntry@1000 : Record 472;
      JobStartTime@1001 : DateTime;
      CleanupStartTime@1002 : DateTime;
    BEGIN
      CleanupStartTime := CURRENTDATETIME + AttachmentKeepDays * HoursPerDay * MillisecondsPerHour;
      JobStartTime := CleanupStartTime + CleanupJobBufferHours * MillisecondsPerHour;

      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Native - Attachments");
      JobQueueEntry.SETRANGE(Status,JobQueueEntry.Status::Ready);
      JobQueueEntry.SETFILTER("Earliest Start Date/Time",'%1..%2',CleanupStartTime,JobStartTime);
      IF JobQueueEntry.FINDFIRST THEN
        EXIT;

      JobQueueEntry.LOCKTABLE;
      JobQueueEntry.INIT;
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := CODEUNIT::"Native - Attachments";
      JobQueueEntry."Earliest Start Date/Time" := JobStartTime;
      JobQueueEntry."Maximum No. of Attempts to Run" := 3;
      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
    END;

    LOCAL PROCEDURE CleanupJobBufferHours@10() : Integer;
    VAR
      Result@1000 : Integer;
    BEGIN
      EVALUATE(Result,CleanupJobBufferHoursTxt);
      EXIT(Result);
    END;

    LOCAL PROCEDURE AttachmentKeepDays@12() : Integer;
    VAR
      Result@1000 : Integer;
    BEGIN
      EVALUATE(Result,AttachmentKeepDaysTxt);
      EXIT(Result);
    END;

    LOCAL PROCEDURE HoursPerDay@11() : Integer;
    BEGIN
      EXIT(24);
    END;

    LOCAL PROCEDURE MillisecondsPerHour@9() : Integer;
    BEGIN
      EXIT(3600000);
    END;

    [EventSubscriber(Table,138,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertUnlinkedAttachment@17(VAR Rec@1000 : Record 138;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY THEN
        EXIT;
      ScheduleCleanupJob;
    END;

    BEGIN
    END.
  }
}

