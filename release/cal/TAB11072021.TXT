OBJECT Table 11072021 Project Recording Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Project Recording Line;
               NOR=Prosjektregistreringsrad;
               SVE=Projektregistreringsrad];
  }
  FIELDS
  {
    { 10  ;   ;Project Manager     ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Project Manager;
                                                              NOR=Prosjektleder;
                                                              SVE=Platschef] }
    { 20  ;   ;Recording Date      ;Date          ;CaptionML=[ENU=Recording Date;
                                                              NOR=Registreringsdato;
                                                              SVE=Registreringsdatum];
                                                   NotBlank=Yes }
    { 30  ;   ;Project No.         ;Code20        ;TableRelation=Job.No. WHERE (Project Manager=FIELD(Project Manager),
                                                                                Prognosis Level=CONST(Rough),
                                                                                Project Status=FILTER(<Administrative Finished));
                                                   OnValidate=BEGIN
                                                                InitRecord;
                                                                CalcAmounts;
                                                              END;

                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 35  ;   ;Project Description ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Project Description;
                                                              NOR=Prosjektbeskrivelse;
                                                              SVE=Projektbeskrivning];
                                                   Editable=No }
    { 37  ;   ;Project Status      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Project Status" WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Project Status;
                                                              NOR=Prosjektstatus;
                                                              SVE=Projekt- status];
                                                   OptionCaptionML=[ENU=Estimation,Preparation,Production,Technical Finished,Administrative Finished,Finished,Archive,Archived;
                                                                    NOR=Kalkulering,Forberedelse,Produksjon,Teknisk ferdig,Administrativt ferdig,Ferdig,Arkiv,Arkivert;
                                                                    SVE=Kalkyl,F”rberedelse,Produktion,Tekniskt f„rdig,Administrativt f„rdig,F„rdig,Arkiv,Arkiverad];
                                                   OptionString=Estimation,Preparation,Production,Technical Finished,Administrative Finished,Finished,Archive,Archived;
                                                   Editable=No }
    { 40  ;   ;Progress            ;Decimal       ;CaptionML=[ENU=Progress;
                                                              NOR=Fremdrift;
                                                              SVE=F”rlopp];
                                                   AutoFormatType=1 }
    { 50  ;   ;Cost to Completion  ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rough Prognosis Total Cost","Cost to Completion" + "Total Costs");
                                                                ValidateCostToCompletion;
                                                              END;

                                                   CaptionML=[ENU=Cost to Completion;
                                                              NOR=Kostnad for fullf›ring (CTC);
                                                              SVE=Kostnad f”r slutf”rande (CTC)];
                                                   AutoFormatType=1 }
    { 60  ;   ;Total Costs         ;Decimal       ;CaptionML=[ENU=Total Costs;
                                                              NOR=Totale kost;
                                                              SVE="Summa mont”rskostnader "];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 70  ;   ;Contract Amount     ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=[ENU=Contract Amount incl. Extensions and Options;
                                                              NOR=Kontraktsbel›p inkl. ETA og alternativer;
                                                              SVE=Kontraktsbelopp inkl. ŽTA och alternativ];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 80  ;   ;Prognosis End Result;Decimal       ;CaptionML=[ENU=Prognosis End Result;
                                                              NOR=Forventet Sluttresultat;
                                                              SVE=F”rv„ntat slutresultat];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 90  ;   ;Progn. End Res. Vs. Contract;Decimal;
                                                   CaptionML=[ENU=Expected End Result Against Contract Price;
                                                              NOR=Forventet sluttresultat mot kontraktspris;
                                                              SVE=F”rv„ntat slutresultat mot kontraktspris];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Budget              ;Decimal       ;CaptionML=[ENU=Budget;
                                                              NOR=Budsjett;
                                                              SVE=Budget];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 110 ;   ;Rough Prognosis Total Cost;Decimal ;OnValidate=BEGIN
                                                                "Cost to Completion" := "Rough Prognosis Total Cost" - "Total Costs";
                                                                ValidateCostToCompletion;
                                                                CalculatePrognosisFinancialResult;
                                                              END;

                                                   CaptionML=[ENU=Prognosis Total Cost;
                                                              NOR=Prognose for totale kostnader;
                                                              SVE=Prognos totala kostnader];
                                                   AutoFormatType=1 }
    { 120 ;   ;Rough Prognosis Total Revenues;Decimal;
                                                   OnValidate=BEGIN
                                                                "Revenue to Completion" := "Rough Prognosis Total Revenues" - "Total Revenue";
                                                                CalculatePrognosisFinancialResult;
                                                              END;

                                                   CaptionML=[ENU=Prognosis Total Revenues;
                                                              NOR=Prognose totalinntekter;
                                                              SVE=Prognos totala int„kter];
                                                   AutoFormatType=1 }
    { 130 ;   ;Total Revenue       ;Decimal       ;CaptionML=[ENU=Total Revenue;
                                                              NOR=Totale inntekter;
                                                              SVE=R”relsens int„kter totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 140 ;   ;Revenue to Completion;Decimal      ;OnValidate=BEGIN
                                                                VALIDATE("Rough Prognosis Total Revenues","Revenue to Completion" + "Total Revenue");
                                                              END;

                                                   CaptionML=[ENU=Revenue to Completion;
                                                              NOR=Inntekter til fullf›ring;
                                                              SVE=Int„kter till slutf”rande];
                                                   AutoFormatType=1 }
    { 150 ;   ;Expected Finishing Date;Date       ;CaptionML=[ENU=Expected Finishing Date;
                                                              NOR=Forventet ferdigdato;
                                                              SVE=F”rv„ntat f„rdigdatum] }
    { 160 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 kode;
                                                              SVE=Global dimension 1 kod];
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
    { 170 ;   ;Worst Case Result   ;Decimal       ;OnValidate=BEGIN
                                                                IF "Worst Case Result" > "Prognosis End Result" THEN
                                                                  ERROR(Text003);
                                                              END;

                                                   CaptionML=[ENU=Worst Case Result;
                                                              NOR=Verste scenario resultat;
                                                              SVE=V„rsta scenario resultat] }
    { 180 ;   ;Best Case Result    ;Decimal       ;OnValidate=BEGIN
                                                                IF "Best Case Result" < "Prognosis End Result" THEN
                                                                  ERROR(Text004);
                                                              END;

                                                   CaptionML=[ENU=Best Case Result;
                                                              NOR=Beste scenario resultat;
                                                              SVE=B„sta scenario resultat] }
    { 190 ;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar] }
    { 200 ;   ;Address             ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Address WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Address;
                                                              NOR=Adresse;
                                                              SVE=Adress];
                                                   Editable=No }
    { 210 ;   ;Used in Closing Project;Boolean    ;CaptionML=[ENU=Used in Closing Project;
                                                              NOR=Brukt i Avslutningsprosjekt;
                                                              SVE=Anv„nds i avslutsprojekt] }
    { 220 ;   ;Actual Cost         ;Decimal       ;CaptionML=[ENU=Actual Cost;
                                                              SVE=Faktisk kostnad] }
    { 230 ;   ;Prognosis Amount    ;Decimal       ;CaptionML=[ENU=Prognosis Amount;
                                                              SVE=Prognosbelopp] }
    { 240 ;   ;Difference Prognosis Amount;Decimal;CaptionML=ENU=Difference Prognosis Amount }
    { 250 ;   ;Settlement Method   ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Settlement Method" WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Settlement Method;
                                                              SVE=Avr„kningsmetod];
                                                   OptionCaptionML=[ENU=Fixed Price,Cost Plus;
                                                                    SVE=Fast pris,L”pande];
                                                   OptionString=Fixed Price,Cost Plus;
                                                   Editable=No }
    { 260 ;   ;Prognosis Financial Result;Decimal ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Prognosis Financial Result;
                                                              SVE=Prognos finansiellt resultat];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Difference Progn. Fin. Result;Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Difference Prognosis Financial Result;
                                                   Editable=No;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Project Manager,Recording Date,Project No.;
                                                   Clustered=Yes }
    {    ;Project No.,Recording Date               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1100485001 : TextConst 'ENU=Progress already exists for project %1 with date %2. Do you want to overwrite it?;NOR=Det finnes allerede en fremdrift for prosjekt %1 med dato %2. Vil du overskrive?;SVE=Det finns redan ett f”rlopp f”r projektet %1 med datumet %2. Vill du skriva ”ver det?';
      ProjectRec@1100525001 : Record 11072003;
      DimMgt@1100525000 : Codeunit 408;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text003@1100409000 : TextConst 'ENU=Amount may not exceed the Prognosis End Result;NOR=Bel›p kan ikke overstige prognosen for sluttresultatet;SVE=Belopp f†r inte ”verstiga prognosen f”r slutresultatet';
      Text004@1100409001 : TextConst 'ENU=Amount may not be less than Prognosis End Result;NOR=Bel›pet kan ikke v‘re mindre enn prognosen for sluttresultatet;SVE=Beloppet f†r inte vara mindre „n prognosen f”r slutresultatet';

    PROCEDURE InitRecord@1100525000();
    VAR
      lvProjRecLine@1100525000 : Record 11072021;
    BEGIN
      lvProjRecLine := Rec;
      lvProjRecLine.SETCURRENTKEY("Project No.","Recording Date");
      lvProjRecLine.SETRANGE("Project No.", "Project No.");
      IF lvProjRecLine.NEXT(-1) <> 0 THEN
        "Expected Finishing Date" := lvProjRecLine."Expected Finishing Date";

      IF ProjectRec.GET("Project No.") THEN BEGIN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Project Preclosure Result", ProjectRec."Global Dimension 1 Code");
        "Global Dimension 1 Code" := ProjectRec."Global Dimension 1 Code";
      END;
    END;

    PROCEDURE CalcAmounts@1100485000();
    VAR
      lvJobRec@1100485001 : Record 11072003;
      lvJobLedgEntry@1100525000 : Record 11072005;
      lvCostContMgtCU@1100485000 : Codeunit 11012006;
      lvPrognMgt@1100525001 : Codeunit 11020217;
      DeterminePrognosisDate@1100525002 : Codeunit 11012029;
    BEGIN
      lvJobRec.GET("Project No.");
      IF lvJobRec."Single/Main/Sub Project" <> lvJobRec."Single/Main/Sub Project"::"Main Project" THEN
        lvJobRec.SETFILTER("Project Filter", "Project No.")
      ELSE
        lvJobRec.SETRANGE("Project Filter");
      lvJobRec.SETFILTER("Cumulation Filter", '..%1', "Recording Date");
      lvJobRec.CALCFIELDS(Budget);
      Budget := lvJobRec.Budget;
      lvJobRec.CALCFIELDS("Project Contract Amount", "Extension Contract Amount", "Options Contract Amount", "Actual Costs");
      "Contract Amount" := lvJobRec."Project Contract Amount" +
         lvJobRec."Extension Contract Amount" +  lvJobRec."Options Contract Amount";
      "Total Costs" := lvCostContMgtCU.TotCostProject(lvJobRec, TRUE);
      "Actual Cost" := lvJobRec."Actual Costs";

      lvJobRec.SETRANGE("Period Filter", "Recording Date");
      DeterminePrognosisDate.DetermineBothDates(lvJobRec);
      lvJobRec.CALCFIELDS(Prognosis, "Prognosis Previous Period");
      "Prognosis Amount" := lvJobRec.Prognosis;
      "Difference Prognosis Amount" := lvJobRec.Prognosis - lvJobRec."Prognosis Previous Period";

      lvJobLedgEntry.RESET;
      lvJobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
      lvJobLedgEntry.SETRANGE("Main Project No.", lvJobRec."Main Project");
      IF lvJobRec."Single/Main/Sub Project" <> lvJobRec."Single/Main/Sub Project"::"Main Project" THEN
        lvJobLedgEntry.SETRANGE("Job No.", "Project No.");
      lvJobLedgEntry.SETRANGE("Entry Type", lvJobLedgEntry."Entry Type"::Sale);
      lvJobLedgEntry.SETRANGE("Posting Date", 0D, "Recording Date");
      lvJobLedgEntry.SETRANGE("Advance Payment", FALSE);
      lvJobLedgEntry.CALCSUMS("Total Price (LCY)");
      "Total Revenue" := -lvJobLedgEntry."Total Price (LCY)";

      lvPrognMgt.FillRoughPrognProjRecLine(lvJobRec,Rec);

      ValidateCostToCompletion;
    END;

    PROCEDURE Process@1100485001();
    VAR
      lvPrognosisRec@1100485000 : Record 11012034;
      lvProgressrec@1100485001 : Record 11012036;
      lvPreclosureResRec@1100525000 : Record 11012093;
      lvJobRec@1100525003 : Record 11072003;
      lvCreateProgLineCU@1100485002 : Codeunit 11012031;
      lvBuildPreclosure@1100525002 : Report 11012086;
      lvOverwrite@1100525001 : Boolean;
      LastLineNo@1100525004 : Integer;
    BEGIN
      //Fill Prognosis
      IF NOT lvPrognosisRec.GET("Project No.", "Recording Date") THEN BEGIN
        lvPrognosisRec.INIT;
        lvPrognosisRec.VALIDATE("Project No.", "Project No.");
        lvPrognosisRec.VALIDATE("Prognosis Date", "Recording Date");
        lvPrognosisRec.Comment := Comment; //C035054
        lvPrognosisRec.INSERT(TRUE);
      END;
      IF lvPrognosisRec."Prognosis Level" <> lvPrognosisRec."Prognosis Level"::Element THEN BEGIN
        lvPrognosisRec."Prognosis Level" := lvPrognosisRec."Prognosis Level"::Rough;
        lvPrognosisRec."Rough Prognosis End Result" := "Prognosis End Result";
        lvPrognosisRec."Rough Prognosis Total Cost" := "Rough Prognosis Total Cost";
        lvPrognosisRec."Rough Prognosis Total Revenues" := "Rough Prognosis Total Revenues";
        lvPrognosisRec."Expected Finishing Date" := "Expected Finishing Date";
        lvPrognosisRec."Used in Closing Project" := "Used in Closing Project"; //mg, 05-09-2013: C008501
        lvPrognosisRec.Comment := Comment; //C035054
        lvPrognosisRec.Fixed := TRUE;
        lvPrognosisRec.MODIFY;
      END;

      //Fill Progress
      lvOverwrite := TRUE;
      IF NOT lvProgressrec.GET("Project No.", "Recording Date") THEN BEGIN
        lvProgressrec.INIT;
        lvProgressrec.VALIDATE("Project No.", "Project No.");
        lvProgressrec.VALIDATE("Progress Date", "Recording Date");
        lvProgressrec.INSERT(TRUE);
        CODEUNIT.RUN(CODEUNIT::"Create Progress Lines",lvProgressrec);
      END ELSE BEGIN
        lvProgressrec.TESTFIELD("Progress Fixed", FALSE); //call 30417
        lvOverwrite := CONFIRM(Text002, FALSE, "Project No.", "Recording Date");
      END;
      IF lvOverwrite THEN
        lvCreateProgLineCU.InputProgressPercFromRecording(lvProgressrec, Progress);

      //Fill Preclosure Result
      lvJobRec.GET("Project No.");
      IF lvJobRec."Preclosure Result" <> lvJobRec."Preclosure Result"::No THEN BEGIN
        //lvOverwrite := TRUE;
        lvPreclosureResRec.RESET;
        lvPreclosureResRec.SETRANGE("Project No.", "Project No.");
        lvPreclosureResRec.SETRANGE("Posting Date", "Recording Date");
        LastLineNo := 0;
        IF lvPreclosureResRec.FINDLAST THEN BEGIN
          LastLineNo := lvPreclosureResRec."Line No.";
          IF lvPreclosureResRec.Posted THEN BEGIN
            lvPreclosureResRec.RESET;
            lvPreclosureResRec.INIT;
            lvPreclosureResRec.VALIDATE("Project No.", "Project No.");
            lvPreclosureResRec.VALIDATE("Posting Date", "Recording Date");
            lvPreclosureResRec."Line No." := LastLineNo + 10000;
            lvPreclosureResRec.INSERT(TRUE);
          END;
        END ELSE BEGIN
          lvPreclosureResRec.RESET;
          lvPreclosureResRec.INIT;
          lvPreclosureResRec.VALIDATE("Project No.", "Project No.");
          lvPreclosureResRec.VALIDATE("Posting Date", "Recording Date");
          lvPreclosureResRec."Line No." := LastLineNo + 10000;
          lvPreclosureResRec.INSERT(TRUE);
        END;
        lvBuildPreclosure.CalculateResult(lvPreclosureResRec, Rec, TRUE);
      END;
    END;

    PROCEDURE ValidateCostToCompletion@1100525001();
    BEGIN
      "Prognosis End Result" := Budget - ("Cost to Completion" + "Total Costs");
      "Progn. End Res. Vs. Contract" := "Contract Amount" - ("Cost to Completion" + "Total Costs");
    END;

    LOCAL PROCEDURE CalculatePrognosisFinancialResult@1100528500();
    BEGIN
      "Prognosis Financial Result" := "Rough Prognosis Total Revenues" - "Rough Prognosis Total Cost";
      "Difference Progn. Fin. Result" := "Prognosis Financial Result" - PreviousPrognosisFinancialResult;
    END;

    PROCEDURE PreviousPrognosisFinancialResult@1100528503() : Decimal;
    VAR
      PreviousProjectRecordingLine@1100528500 : Record 11072021;
    BEGIN
      PreviousProjectRecordingLine := Rec;
      PreviousProjectRecordingLine.SETCURRENTKEY("Project No.","Recording Date");
      PreviousProjectRecordingLine.SETRANGE("Project No.","Project No.");
      IF PreviousProjectRecordingLine.NEXT(-1) = 0 THEN;

      EXIT(PreviousProjectRecordingLine."Prognosis Financial Result");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11072021) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11072021');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Project Recording Line", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    BEGIN
    {
      4PS01 JD 12-12-2007 Call 9751, No recording for finished projects
    }
    END.
  }
}

