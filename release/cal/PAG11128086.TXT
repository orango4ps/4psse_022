OBJECT Page 11128086 Project Detail Prognosis Labor
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Prognosis Labor;
               NOR=Prognose arbeidskraft;
               SVE=Prognos arbetskraft];
    SourceTable=Table11012035;
    DelayedInsert=Yes;
    PageType=List;
    OnOpenPage=BEGIN
                 ProjSetUp.GET;
                 SpecificationsVisible := ProjSetUp."Prognosis Specifications";
                 //IME155
                 UseWageComponentTypeFilter := TRUE;
               END;

    OnAfterGetRecord=BEGIN
                       CalculateValues(Rec,NOT "Fix Prognosis Line");

                       CALCFIELDS("Project Related Name");
                       IF "Project Related Name" <> '' THEN
                         "Cost Object Description" := "Project Related Name";
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  SetValuesToZero;
                  CalcTotals;
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=BEGIN
                     TESTFIELD("Cost Object"); // 31179.n
                   END;

    ActionList=ACTIONS
    {
      { 1100525007;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100525001;1 ;ActionGroup;
                      CaptionML=[ENU=Line;
                                 NOR=Linje;
                                 SVE=Rad] }
      { 1100525003;2 ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Specifications;
                                 NOR=Spesifikasjoner;
                                 SVE=Specifikationer];
                      Promoted=Yes;
                      Visible=SpecificationsVisible;
                      Image=SetupList;
                      OnAction=BEGIN
                                 ShowDetailLines();
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=Element }

    { 4   ;2   ;Field     ;
                SourceExpr="Element Description";
                Visible=FALSE;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Cost Object";
                LookupPageID=Cost Object List }

    { 8   ;2   ;Field     ;
                SourceExpr="Unit Cost Object";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr="Cost Object Description";
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Budget;
                           NOR=Budsjett;
                           SVE=Budget];
                SourceExpr=BudgetDec;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Budget Hours;
                           NOR=Budsjett (Timer);
                           SVE=Budget (timmar)];
                SourceExpr=BudgHoursDec;
                Editable=FALSE }

    { 1100485010;2;Field  ;
                CaptionML=[ENU=Open (Purchase);
                           NOR=èpne innkjõp;
                           SVE=ôppna inkîp];
                SourceExpr=OpenDec;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485014;2;Field  ;
                CaptionML=[ENU=Received/Not Invoiced;
                           NOR=Mottatt/ikke fakturert;
                           SVE=Mottaget/inte fakturerat];
                SourceExpr=RecNotInvDec;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525004;2;Field  ;
                SourceExpr="Open Ovh. Surch. (Purchase)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485018;2;Field  ;
                CaptionML=[ENU=Open Hours;
                           NOR=èpne timer;
                           SVE=ôppna timmar];
                SourceExpr=OpenHoursDec;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485016;2;Field  ;
                CaptionML=[ENU=Open Amount (Hours);
                           NOR=èpne belõp (Timer);
                           SVE=ôppna belopp (timmar)];
                SourceExpr=OpenAmountHoursDec;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525006;2;Field  ;
                SourceExpr="Open Ovh. Surch. (Hours)";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190004;2;Field  ;
                CaptionML=[ENU=Actual Costs;
                           NOR=Faktiske koster;
                           SVE=Verkliga kostnader];
                SourceExpr=ActualDec;
                Visible=FALSE;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Actual Hours;
                           NOR=Reelle timer;
                           SVE=Verkliga timmar];
                SourceExpr=ActualHoursDec;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Total Cost;
                           NOR=Total kost;
                           SVE=Total kostnad];
                SourceExpr=TotalCostDec;
                Editable=FALSE }

    { 1100485008;2;Field  ;
                CaptionML=[ENU=Total Hours;
                           NOR=Timer totalt;
                           SVE=Timmar totalt];
                SourceExpr=TotalHoursDec;
                Visible=FALSE;
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Allowed;
                           NOR=Tillatt;
                           SVE=TillÜten];
                SourceExpr=AllowedDec;
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                CaptionML=[ENU=Hours Allowed;
                           NOR=Tillatte timer;
                           SVE=TillÜtna timmar];
                SourceExpr=AllowedHoursDec;
                Editable=FALSE }

    { 24  ;2   ;Field     ;
                CaptionML=[ENU=Available;
                           NOR=Disponibelt;
                           SVE=Disponibelt];
                SourceExpr=AvailableDec;
                Editable=FALSE }

    { 1210190000;2;Field  ;
                CaptionML=[ENU=Available Hours;
                           NOR=Tilgjengelige timer;
                           SVE=TillgÑngliga timmar];
                SourceExpr=AvailHoursDec;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Result;
                           NOR=Resultat;
                           SVE=Resultat];
                SourceExpr=ResultDec;
                Editable=FALSE }

    { 1100485006;2;Field  ;
                SourceExpr="Result Hours";
                Visible=FALSE;
                Editable=FALSE }

    { 28  ;2   ;Field     ;
                SourceExpr="Previous Date";
                Visible=FALSE;
                Editable=FALSE }

    { 30  ;2   ;Field     ;
                SourceExpr="Previous Prognosis";
                Editable=FALSE }

    { 1100485002;2;Field  ;
                SourceExpr="Prev Prognosis End Result";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190028;2;Field  ;
                SourceExpr="Risc Coverage";
                Visible=FALSE;
                OnValidate=BEGIN
                             RiscCoverageOnAfterValidate;
                           END;
                            }

    { 32  ;2   ;Field     ;
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             QuantityOnAfterValidate;
                           END;
                            }

    { 34  ;2   ;Field     ;
                SourceExpr="Unit of Measure" }

    { 36  ;2   ;Field     ;
                SourceExpr="Rate Code";
                OnValidate=BEGIN
                             RateCodeOnAfterValidate;
                           END;

                OnAssistEdit=BEGIN
                               IF ("Cost Type" = "Cost Type"::Labor) AND ("Cost Object" <> '') THEN BEGIN
                                 DimMgt.GetDimValueRec(2, "Cost Object",DimValRec,FALSE,'');
                                 IF DimValRec."Rate Code" <> '' THEN
                                   VALIDATE("Rate Code", DimValRec."Rate Code")
                               END;
                             END;
                              }

    { 38  ;2   ;Field     ;
                SourceExpr=Rate }

    { 1100525002;2;Field  ;
                SourceExpr=Amount;
                OnDrillDown=BEGIN
                              //DP00042.sn
                              CurrPage.SAVERECORD;
                              AmountOnDrillDown;
                              CurrPage.UPDATE(FALSE);
                              //DP00042.en
                            END;
                             }

    { 1210190006;2;Field  ;
                SourceExpr="Total Risc Coverage Amount";
                Visible=FALSE }

    { 1210190010;2;Field  ;
                SourceExpr="Total Release Risc Coverage";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr="Ovh. Surcharge" }

    { 40  ;2   ;Field     ;
                SourceExpr="Amount incl. Surcharge";
                OnValidate=BEGIN
                             AmountinclSurchargeOnAfterVali;
                           END;
                            }

    { 1100485011;2;Field  ;
                CaptionML=[ENU=Estimated Purchase Result;
                           NOR=Kalkulert Innkjõpsresultat;
                           SVE=Kalkylerat inkîpsresultat];
                SourceExpr=EstimPurchResultDec;
                Visible=FALSE;
                Editable=FALSE }

    { 42  ;2   ;Field     ;
                SourceExpr="Prognosis End Result";
                OnValidate=BEGIN
                             PrognosisEndResultOnAfterValid;
                           END;
                            }

    { 1100485004;2;Field  ;
                SourceExpr="Prognosis End Result Hours";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485000;2;Field  ;
                SourceExpr="Prognosis Total Cost" }

    { 1210190022;2;Field  ;
                SourceExpr="Prognosis Total Hours" }

    { 1210190002;2;Field  ;
                SourceExpr=Comment }

    { 1210190001;0;Container;
                ContainerType=FactBoxArea }

    { 1210190003;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date),
                            Cost Type=FIELD(Cost Type),
                            Cost Object=FIELD(Cost Object);
                PagePartID=Page11130126;
                PartType=Page }

    { 3   ;1   ;Part      ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date),
                            Cost Type=FIELD(Cost Type),
                            Cost Object=FIELD(Cost Object);
                PagePartID=Page11128238;
                PartType=Page }

  }
  CODE
  {
    VAR
      ProjSetUp@11012000 : Record 315;
      ProjRec@11012001 : Record 11072003;
      ElemCstObjCntrlRec@11012002 : Record 11012050;
      CstObjCntrlRec@11012003 : Record 11012047;
      DimValRec@1000000000 : Record 349;
      PrognosisMgt@1100409000 : Codeunit 11020217;
      SearchProgrDate@11012004 : Codeunit 11012014;
      CostContMgt@1100485004 : Codeunit 11012006;
      DimMgt@1000000001 : Codeunit 408;
      BudgetDec@11012005 : Decimal;
      BudgetSurchargeDec@1100525006 : Decimal;
      ActualDec@11012007 : Decimal;
      ResultDec@11012009 : Decimal;
      TotalCostDec@11012010 : Decimal;
      AvailableDec@11012011 : Decimal;
      AllowedDec@11012013 : Decimal;
      RecNotInvDec@1210190000 : Decimal;
      OpenDec@1210190001 : Decimal;
      OpenHoursDec@1100485010 : Decimal;
      OpenAmountHoursDec@1100485011 : Decimal;
      PrognTotCostDec@1100485000 : Decimal;
      BudgHoursDec@1100485005 : Decimal;
      ActualHoursDec@1100485006 : Decimal;
      AllowedHoursDec@1100485008 : Decimal;
      ResHoursDec@1100485002 : Decimal;
      TotalHoursDec@1100485003 : Decimal;
      AvailHoursDec@1100485009 : Decimal;
      ProgHoursDec@1100485007 : Decimal;
      EstimPurchResultDec@1100485001 : Decimal;
      SurchOpenDec@1100525000 : Decimal;
      SurchOpenAmountHoursDec@1100525001 : Decimal;
      OpenAmountInvDec@1100525003 : Decimal;
      SurchOpenAmountInvDec@1100525004 : Decimal;
      ElementCostObjEditable@1100525002 : Boolean;
      Text001@1100525005 : TextConst 'ENU=Project %1 -  Element %2 does not exist (from surcharges);NOR=Prosjekt %1 Õ Element %2 finnes ikke (fra tileggsgebyrer);SVE=Projekt %1 Õ elementet %2 finns inte (frÜn tillÑggsavgifter)';
      SpecificationsVisible@1100525007 : Boolean INDATASET;
      RiscCoverage@1210190002 : Decimal;
      RiscCoverageWithdraw@1210190003 : Decimal;
      PrognTotHoursDec@1210190004 : Decimal;
      Text19025091@19015138 : TextConst 'ENU=Prognosis;NOR=Prognose;SVE=Prognos';
      Text19053907@19032357 : TextConst 'ENU=Total Hours;NOR=Timer totalt;SVE=Timmar totalt';
      UseWageComponentTypeFilter@1100285500 : Boolean;

    PROCEDURE SetValuesToZero@4();
    BEGIN
      BudgetDec := 0;
      BudgetSurchargeDec := 0;   //M20030
      ActualDec := 0;
      AllowedDec := 0;
      ResultDec := 0;
      TotalCostDec := 0;
      AvailableDec := 0;
      RecNotInvDec := 0;
      OpenDec := 0;
      OpenAmountHoursDec := 0;
      PrognTotCostDec := 0;
      RiscCoverage := 0;  // 25531.n
      RiscCoverageWithdraw := 0;  // 25531.n
      PrognTotHoursDec := 0; // 15532.n

      BudgHoursDec := 0;
      OpenHoursDec := 0;
      ActualHoursDec := 0;
      AllowedHoursDec := 0;
      ResHoursDec  := 0;
      TotalHoursDec := 0;
      AvailHoursDec := 0;
      ProgHoursDec := 0;

      //4PS -25-05-2010 sn
      SurchOpenDec := 0;
      SurchOpenAmountHoursDec := 0;
      OpenAmountInvDec := 0;
      SurchOpenAmountInvDec := 0;
      //4PS -25-05-2010 en
    END;

    PROCEDURE CalculateValues@10(VAR lPrognLineRec@11012000 : Record 11012035;SaveValues@1210190000 : Boolean);
    VAR
      DummyDec@11012001 : Decimal;
      lvProgHeaderRec@1100530000 : Record 11012034;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        SetValuesToZero;

        IF NOT ProjRec.GET("Project No.") THEN
          EXIT;

        IF NOT SaveValues AND "Fix Prognosis Line" THEN BEGIN
          BudgetDec := "Budget Amount";
          BudgetSurchargeDec := lPrognLineRec."Budget Surcharge Amount"; //M20030
          ActualDec := "Actual Costs";
          TotalCostDec := "Total Cost";
          AllowedDec := "Allowed Costs";
          ResultDec := "Allowed Costs" - "Total Cost";
          RecNotInvDec := "Received/Not Invoiced";
          OpenDec := "Open (Purchase)";
          RiscCoverage := "Total Risc Coverage Amount"; // 25531.n
          RiscCoverageWithdraw := "Total Release Risc Coverage";  // 25531.n

          //4PS -25-05-2010 sn
          SurchOpenDec := "Open Ovh. Surch. (Purchase)";
          SurchOpenAmountHoursDec := "Open Ovh. Surch. (Hours)";
          OpenAmountInvDec := "Open (Inventory)";
          SurchOpenAmountInvDec := "Open Ovh. Surch. (Inventory)";
          //4PS -25-05-2010 en

          // 4PS CALL C-019133
          IF ProjSetUp."Calculate Available" = ProjSetUp."Calculate Available"::"Budget - Allowed Cost" THEN
            AvailableDec := "Budget Amount" - AllowedDec - OpenDec
          ELSE
            AvailableDec := "Budget Amount" - TotalCostDec;

          OpenAmountHoursDec := "Open Amount (Hours)";
          PrognTotCostDec := "Amount incl. Surcharge" + "Total Cost";
          // Amunt incl Surcharge = Amount + surcharge (Amount is inputfield)
          PrognTotHoursDec := "Total Hours" + Quantity; // 15532.n

          BudgHoursDec := "Budget Hours";
          OpenHoursDec := "Open Hours";
          ActualHoursDec := "Actual Hours";
          AllowedHoursDec := "Allowed Hours";
          ResHoursDec := "Result Hours";
          TotalHoursDec := "Total Hours";
          EstimPurchResultDec := "Estimated Purchase Result"; //**4PS01.n
          // 4PS CALL C-019133
          IF ProjSetUp."Calculate Available" = ProjSetUp."Calculate Available"::"Budget - Allowed Cost" THEN
            AvailHoursDec := "Budget Hours" - AllowedHoursDec - OpenHoursDec
          ELSE
            AvailHoursDec := "Budget Hours" - TotalHoursDec;

          ProgHoursDec := AvailHoursDec - Quantity;
        END ELSE BEGIN
          //Set Filters
          ProjRec.SETRANGE("Period Filter",0D,"Prognosis Date");
          SearchProgrDate.DetermineDate(ProjRec, ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::Single);
          IF ProjRec."Prognosis per Element" THEN BEGIN
            //Prognosis per Project-Element-Cost Object
            IF ElemCstObjCntrlRec.GET("Project No.",Element,"Cost Type","Cost Object") THEN BEGIN
              ElemCstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter", ElemCstObjCntrlRec."Progress Filter");
              ElemCstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              IF "Project No." <> "Main Project No." THEN
                ElemCstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              //>>IME155
              IF UseWageComponentTypeFilter THEN
                ElemCstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1',ElemCstObjCntrlRec."Wage Component Type Filter"::"Expense hours");
              //<<IME155
              ElemCstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs", "Open Hours",
                                           "Open Amount (Hours)","Budget Surcharge Amount",
                                           "Risc Coverage","Risc Coverage Withdraw"); // 25531.n
              BudgetDec := ElemCstObjCntrlRec.Budget;
              RiscCoverage := ElemCstObjCntrlRec."Risc Coverage";  // 25531.n
              RiscCoverageWithdraw := ElemCstObjCntrlRec."Risc Coverage Withdraw";  // 25531.n
              BudgetSurchargeDec := ElemCstObjCntrlRec."Budget Surcharge Amount"; //M20030
              OpenAmountHoursDec := ElemCstObjCntrlRec."Open Amount (Hours)";
              ActualDec := ElemCstObjCntrlRec."Actual Costs";
              //ElemCstObjCntrlRec.CalculateAllowed(AllowedDec,AllowedHoursDec,DummyDec,DummyDec); //**4PS01.o
              //**4PS01.sn
              CostContMgt.AllowedAndPurchElemCostObj(ElemCstObjCntrlRec, AllowedDec,AllowedHoursDec,DummyDec,DummyDec,
                DummyDec, EstimPurchResultDec, DummyDec, DummyDec, DummyDec, TRUE);
              //**4PS01.en
              OpenDec := CostContMgt.OutstandingElemCostObj(ElemCstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedElemCostObj(ElemCstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostElemCostObj(ElemCstObjCntrlRec,TRUE);  // Surcharges included
              ResultDec := CostContMgt.ResultElemCostObj(ElemCstObjCntrlRec,TRUE);

              //>>IME155
              IF UseWageComponentTypeFilter THEN
                ElemCstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1',ElemCstObjCntrlRec."Wage Component Type Filter"::"Expense hours");
              //<<IME155
              //4PS -25-05-2010 sn
              ElemCstObjCntrlRec.CALCFIELDS("Open Ovh. Surch. (Hours)", "Open (Inventory)", "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchElemCostObj(ElemCstObjCntrlRec,TRUE);
              SurchOpenAmountHoursDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Hours)";
              OpenAmountInvDec := ElemCstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Inventory)";
              //4PS -25-05-2010 en

              // 4PS CALL C-019133
              IF ProjSetUp."Calculate Available" = ProjSetUp."Calculate Available"::"Budget - Allowed Cost" THEN
                AvailableDec := BudgetDec - AllowedDec - OpenDec
              ELSE
                AvailableDec := BudgetDec - TotalCostDec;

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
              PrognTotHoursDec := TotalHoursDec + Quantity; // 15532.n

              "Prognosis End Result" := AvailableDec - "Amount incl. Surcharge";

              ElemCstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours");
              BudgHoursDec := ElemCstObjCntrlRec."Budget Hours";
              OpenHoursDec := ElemCstObjCntrlRec."Open Hours";
              ActualHoursDec := ElemCstObjCntrlRec."Actual Hours";
              ResHoursDec := CostContMgt.ResultHoursElemCostObj(ElemCstObjCntrlRec,TRUE);
              TotalHoursDec := CostContMgt.TotHoursElemCostObj(ElemCstObjCntrlRec,TRUE);
              // 4PS CALL C-019133
              IF ProjSetUp."Calculate Available" = ProjSetUp."Calculate Available"::"Budget - Allowed Cost" THEN
                AvailHoursDec := BudgHoursDec - AllowedHoursDec - OpenHoursDec
              ELSE
                AvailHoursDec := BudgHoursDec - TotalHoursDec;
              ProgHoursDec := AvailHoursDec - Quantity;
            END;
          END ELSE BEGIN
            //Prognosis per Project-Cost Object
            IF CstObjCntrlRec.GET("Project No.","Cost Type","Cost Object") THEN BEGIN
              CstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter",CstObjCntrlRec."Progress Filter");
              CstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              CstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              IF "Project No." <> "Main Project No." THEN
                CstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              CstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs", "Open Hours",
                                        "Open Amount (Hours)", "Budget Surcharge Amount",
                                        "Risc Coverage","Risc Coverage Withdraw"); // 25531.n
              BudgetDec := CstObjCntrlRec.Budget;
              RiscCoverage := CstObjCntrlRec."Risc Coverage";  // 25531.n
              RiscCoverageWithdraw := CstObjCntrlRec."Risc Coverage Withdraw";  // 25531.n
              BudgetSurchargeDec := CstObjCntrlRec."Budget Surcharge Amount" ; //M20030
              OpenAmountHoursDec := CstObjCntrlRec."Open Amount (Hours)";
              ActualDec := CstObjCntrlRec."Actual Costs";
              //CstObjCntrlRec.CalculateAllowed(AllowedDec,AllowedHoursDec,DummyDec,DummyDec); //**4PS01.o
              //**4PS01.sn
              CostContMgt.AllowedAndPurchCostObj(CstObjCntrlRec, AllowedDec,AllowedHoursDec,DummyDec,DummyDec,
                DummyDec, EstimPurchResultDec, DummyDec, DummyDec, DummyDec, TRUE);
              //**4PS01.en
              OpenDec := CostContMgt.OutstandingCostObj(CstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedCostObj(CstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostCostObj(CstObjCntrlRec,TRUE); //surcharges included
              ResultDec := CostContMgt.ResultCostObj(CstObjCntrlRec,TRUE);

              //>>IME155
              IF UseWageComponentTypeFilter THEN
                CstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours");
              //<<IME155
              //4PS -25-05-2010 sn
              CstObjCntrlRec.CALCFIELDS("Open Ovh. Surch. (Hours)", "Open (Inventory)", "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchCostObj(CstObjCntrlRec,TRUE);
              SurchOpenAmountHoursDec := CstObjCntrlRec."Open Ovh. Surch. (Hours)";
              OpenAmountInvDec := CstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := CstObjCntrlRec."Open Ovh. Surch. (Inventory)";
              //4PS -25-05-2010 en

              // 4PS CALL C-019133
              IF ProjSetUp."Calculate Available" = ProjSetUp."Calculate Available"::"Budget - Allowed Cost" THEN
                AvailableDec := BudgetDec - AllowedDec - OpenDec
              ELSE
                AvailableDec := BudgetDec - TotalCostDec;

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)

              "Prognosis End Result" := AvailableDec - "Amount incl. Surcharge";

              CstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours");
              BudgHoursDec := CstObjCntrlRec."Budget Hours";
              OpenHoursDec := CstObjCntrlRec."Open Hours";
              ActualHoursDec := CstObjCntrlRec."Actual Hours";
              ResHoursDec := CostContMgt.ResultHoursCostObj(CstObjCntrlRec,TRUE);
              TotalHoursDec := CostContMgt.TotHoursCostObj(CstObjCntrlRec,TRUE);
              PrognTotHoursDec := TotalHoursDec + Quantity; // 15532.n
              // 4PS CALL C-019133
              IF ProjSetUp."Calculate Available" = ProjSetUp."Calculate Available"::"Budget - Allowed Cost" THEN
                AvailHoursDec := BudgHoursDec - AllowedHoursDec - OpenHoursDec
              ELSE
                AvailHoursDec := BudgHoursDec - TotalHoursDec;
              ProgHoursDec := AvailHoursDec - Quantity;
            END;
          END;
        END;

        IF SaveValues THEN BEGIN
          //"Fix Prognosis Line" := TRUE;
          IF NOT lvProgHeaderRec.GET("Project No.", "Prognosis Date") THEN lvProgHeaderRec.INIT;  //db, 13-01-11
          "Fix Prognosis Line" := lvProgHeaderRec."Fix Prognosis Line";  //db, 13-01-11

          "Budget Amount" := BudgetDec;
          "Total Risc Coverage Amount" := RiscCoverage; // 25531.n
          "Total Release Risc Coverage" := RiscCoverageWithdraw;  // 25531.n
          "Budget Surcharge Amount" := BudgetSurchargeDec; //M20030
          "Actual Costs" := ActualDec;
          "Open (Purchase)" := OpenDec;
          "Received/Not Invoiced" := RecNotInvDec;
          "Open Amount (Hours)" := OpenAmountHoursDec;
          "Total Cost" := TotalCostDec;
          "Allowed Costs" := AllowedDec;
          //4PS -25-05-2010 sn
          "Open Ovh. Surch. (Purchase)" := SurchOpenDec;
          "Open Ovh. Surch. (Hours)" := SurchOpenAmountHoursDec;
          "Open (Inventory)" := OpenAmountInvDec;
          "Open Ovh. Surch. (Inventory)" := SurchOpenAmountInvDec;
          //4PS -25-05-2010 en
          "Prognosis Total Cost" := PrognTotCostDec;

          "Budget Hours" := BudgHoursDec;
          "Open Hours" := OpenHoursDec;
          "Actual Hours" := ActualHoursDec;
          "Allowed Hours" := AllowedHoursDec;
          "Result Hours" := ResHoursDec;
          "Total Hours" := TotalHoursDec;
          "Prognosis Total Hours" := PrognTotHoursDec;  // 15532.n
          "Prognosis End Result Hours" := ProgHoursDec;
          "Estimated Purchase Result" :=  EstimPurchResultDec; //**4PS01.n
        END;

        CALCFIELDS("Previous Date", "Previous Prognosis","Prev Prognosis End Result");
      END;
    END;

    PROCEDURE CopyPreviousPrognosis@8(ICostTypes@1100525000 : 'Cost,Revenue,Both');
    BEGIN
      lvCopyPrevPrognosis(FALSE, ICostTypes);
    END;

    PROCEDURE CopyPreviousPrognosisEndResult@1210190001(ICostTypes@1100525000 : 'Cost,Revenue,Both');
    BEGIN
      lvCopyPrevPrognosis(TRUE, ICostTypes);
    END;

    LOCAL PROCEDURE lvCopyPrevPrognosis@1210190002(ICopyEndResult@1210190000 : Boolean;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      lPrevPrognosisLineRec@11012001 : Record 11012035;
      OrigPrognosisLine@1100525001 : Record 11012035;
      lPrognosisHeader@1100525002 : Record 11012034;
      lSubformOther@1100485000 : Page 11012086;
      lPrognDate@1100485001 : Date;
      lPrevDate@1100485002 : Date;
      PrognosisRec@1100525003 : Record 11012034;
    BEGIN
      // In verband met de gebruikers van kropman moet een aanpassing komen.  Melding 19910
      // Deze heren gooien prognoseregels weg, en vinden het dan gek dat de vorige prognose dan wordt gevuld
      // met data van een prognose verder terug.  Dit was al zo in mbs40, maar volgens hun niet.
      // Ik zoek nu dus de vorige header en gebruik die als datum filter.
      //**Call 19910 sn
      lPrognosisHeader.RESET;
      lPrognosisHeader.SETRANGE("Project No.", "Project No.");
      lPrognosisHeader.SETRANGE("Prognosis Date", "Prognosis Date");
      IF lPrognosisHeader.FINDFIRST THEN  BEGIN
        // lPrognosisHeader.SETRANGE("Prognosis Level", lPrognosisHeader."Prognosis Level");  zou misschien wel moeten
        lPrognosisHeader.SETFILTER("Prognosis Date", '<%1', "Prognosis Date");
        IF lPrognosisHeader.FINDLAST THEN  BEGIN
          lPrevDate := lPrognosisHeader."Prognosis Date";
        END ELSE BEGIN
          EXIT; // There is no previous prognose
        END;
      END;
      //**Call 19910 en

      WITH lPrognLineRec DO BEGIN
        COPY(Rec);
        FILTERGROUP(4);
        SETRANGE("Cost Type");
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF (ICostTypes = ICostTypes::Both) OR
               ((ICostTypes = ICostTypes::Cost) AND ("Cost Type" <> "Cost Type"::Revenue)) OR
               ((ICostTypes = ICostTypes::Revenue) AND ("Cost Type" = "Cost Type"::Revenue)) THEN
            BEGIN
              CALCFIELDS("Previous Date");
              IF "Previous Date" = lPrevDate THEN  //**Call 19910
      //        lPrevDate := "Previous Date";//**Call 19910
              BEGIN       //**Call 19910 n
                OrigPrognosisLine := lPrognLineRec;
                lPrevPrognosisLineRec := lPrognLineRec;
                lPrevPrognosisLineRec."Prognosis Date" := "Previous Date";
                IF lPrevPrognosisLineRec.FIND('=') THEN BEGIN
                  TRANSFERFIELDS(lPrevPrognosisLineRec,FALSE);
                  PrognosisRec.GET("Project No.", "Prognosis Date");
                  "Fix Prognosis Line" := PrognosisRec."Fix Prognosis Line";  //db, 13-01-11
                  VALIDATE("Prognosis Date");
                  CASE "Cost Type" OF
                    "Cost Type"::Labor:
                      CalculateValues(lPrognLineRec,TRUE);
                    "Cost Type"::Revenue:
                      Invoiced := OrigPrognosisLine.Invoiced;
                    ELSE BEGIN
                      MODIFY; //Is necessary
                      lSubformOther.CalculateValues(lPrognLineRec);
                    END;
                  END;
                  IF ICopyEndResult THEN BEGIN
                    CASE "Cost Type" OF
                      "Cost Type"::Revenue:
                        VALIDATE("Amount Revenue",
                          lPrevPrognosisLineRec."Amount Revenue" + lPrevPrognosisLineRec.Invoiced - Invoiced);
                      ELSE BEGIN
                        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                          //call 33354
                          //VALIDATE(Quantity,
                          //  lPrevPrognosisLineRec.Quantity + "Prognosis End Result Hours" -
                          //  lPrevPrognosisLineRec."Prognosis End Result Hours");
                          //IF (Quantity < 0) AND
                          //   (ProjSetUp."Fill Prognosis End Result" =
                          //    ProjSetUp."Fill Prognosis End Result"::"Prognosis may not be Negative" )
                          //THEN
                          //   VALIDATE(Quantity, 0);   //M25821
                          VALIDATE(Quantity,
                            lPrevPrognosisLineRec.Quantity +
                            ("Budget Hours" - lPrevPrognosisLineRec."Budget Hours") -
                            ("Total Hours" - lPrevPrognosisLineRec."Total Hours"));
                          ValidateQuantityOfCopy(lPrognLineRec);
                          //call 33354
                        END;
                        VALIDATE("Prognosis End Result", lPrevPrognosisLineRec."Prognosis End Result");
      //Call 32349.so
                        //M26570 sn
      //                IF (lPrevPrognosisLineRec."Ovh. Surcharge" <> 0) THEN BEGIN
      //                  IF (lPrevPrognosisLineRec.Amount <> 0) THEN
      //                    "Ovh. Surcharge" := ROUND(("Amount incl. Surcharge" *
      //                      (lPrevPrognosisLineRec."Ovh. Surcharge"/lPrevPrognosisLineRec.Amount)), 0.01)
      //                  ELSE
      //                    "Ovh. Surcharge" := "Amount incl. Surcharge";
      //                  Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
      //                END;
                        //M26570 en
      //Call 32349.eo
      //Call 32349.sn
                        IF (lPrevPrognosisLineRec."Ovh. Surcharge" <> 0) AND
                           (lPrevPrognosisLineRec."Amount incl. Surcharge" <> 0) THEN
                        BEGIN
                          "Ovh. Surcharge" := ROUND(("Amount incl. Surcharge" *
                             (lPrevPrognosisLineRec."Ovh. Surcharge"/lPrevPrognosisLineRec."Amount incl. Surcharge")), 0.01);
                          Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                        END ELSE BEGIN
                          IF "Budget Surcharge Amount" > 0 THEN BEGIN
                            "Ovh. Surcharge" := "Budget Surcharge Amount";
                            Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                          END;
                        END;
      //Call 32349.en
                        VALIDATE("Amount incl. Surcharge"); //Amount incl Surcharge = Amount + Surcharge (Amount is inputfld)
                        //call 33354
                        //IF (Amount < 0) AND
                        //   (ProjSetUp."Fill Prognosis End Result" =
                        //    ProjSetUp."Fill Prognosis End Result"::"Prognosis may not be Negative" )
                        //THEN BEGIN
                        //  "Ovh. Surcharge" := 0;  //M26570 n
                        //  VALIDATE(Amount, 0);
                        //END;
                        ValidateAmountOfCopy(lPrognLineRec);
                        //call 33354
                      END;
                    END;
                  END;
                  MODIFY(TRUE);
                  UpdateDetailLinesFromPrevious(lPrognLineRec, lPrevPrognosisLineRec);  //DP00042
                END;
              END ELSE BEGIN //Call 27681
                IF ICopyEndResult THEN BEGIN
                  CASE "Cost Type" OF
                    ELSE BEGIN
                      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                        VALIDATE(Quantity, "Budget Hours" - "Total Hours");
                        ValidateQuantityOfCopy(lPrognLineRec); //call 33354
                      END;
                      VALIDATE("Prognosis End Result", 0);
                      ValidateAmountOfCopy(lPrognLineRec); //call 33354
                      MODIFY(TRUE);
                    END;
                  END;
                END;
              END;
            END;  //**Call 19910 n
          UNTIL NEXT = 0;
          //copy manually added revenues
          IF lPrevDate <> 0D THEN BEGIN
            IF (ICostTypes = ICostTypes::Both) OR (ICostTypes = ICostTypes::Revenue) THEN BEGIN
              lPrognDate := "Prognosis Date";
              lPrevPrognosisLineRec.SETRANGE("Project No.", "Project No.");
              lPrevPrognosisLineRec.SETRANGE("Prognosis Date", lPrevDate);
              lPrevPrognosisLineRec.SETRANGE("Cost Type", lPrevPrognosisLineRec."Cost Type"::Revenue);
              IF lPrevPrognosisLineRec.FINDSET THEN
                REPEAT
                  lPrognLineRec := lPrevPrognosisLineRec;
                  "Prognosis Date" := lPrognDate;
                  IF NOT FIND('=') THEN BEGIN
                    VALIDATE("Prognosis Date");
                    INSERT;
                    //DP00042.sn
                    IF Amount <> 0 THEN
                      InsertDetailLine(lPrognLineRec);
                    //DP00042.en
                  END;
                UNTIL lPrevPrognosisLineRec.NEXT =0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithAvailable@1();
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      RateRec@1100525000 : Record 11012000;
      lvRate@1100525001 : Decimal;
      PrognosisLineSpec@1210190000 : Record 11020687;
      Job@1100528600 : Record 11072003;
      BudgetRateManagement@1100528601 : Codeunit 11012358;
      BudgetRateFoundAt@1100528602 : Text[250];
    BEGIN
      //* 25-05-2010 Because available is inclusive surcharges Amount := Amount incl. Surcharge and Ovh. Surcharge := 0;
      WITH lPrognLineRec DO BEGIN
        COPY(Rec);
        FILTERGROUP(4);
        SETRANGE("Cost Type");
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CalculateValues(lPrognLineRec,FALSE);
            IF "Amount incl. Surcharge" <> AvailableDec THEN BEGIN
              DimMgt.GetDimValueRec(2, "Cost Object",DimValRec,FALSE,'');
              IF (ProjSetUp."Fill Prognosis with Available" = ProjSetUp."Fill Prognosis with Available"::Always) OR
                 (("Prognosis End Result" >= 0) AND (ProjSetUp."Fill Prognosis with Available" =
                   ProjSetUp."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive")) OR
                 (("Prognosis End Result" >= 0) AND NOT DimValRec."Record Progress" AND
                   (ProjSetUp."Fill Prognosis with Available" =
        ProjSetUp."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive and Progress is not recorded"))
              THEN BEGIN
                Quantity := AvailHoursDec;
                IF Quantity = 0 THEN
                  Quantity := 1;
                "Amount incl. Surcharge" := AvailableDec; //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)

                Amount := "Amount incl. Surcharge"; // Do not validate!
                "Ovh. Surcharge" := 0; // Do not validate!

                IF (BudgetSurchargeDec <> 0) AND (BudgetDec <> 0 ) THEN BEGIN
                  "Ovh. Surcharge" := ROUND((BudgetSurchargeDec * (AvailableDec/BudgetDec)), 0.01); //M20030
                  Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";                            //M20030
                END;

              END ELSE BEGIN
                Quantity := 0;
                "Amount incl. Surcharge" := 0;

                Amount := "Amount incl. Surcharge"; // Do not validate!
                "Ovh. Surcharge" := 0; // Do not validate!
                //alles = 0
                IF (BudgetSurchargeDec <> 0) AND (BudgetDec <> 0 ) THEN BEGIN
                  "Ovh. Surcharge" := ROUND((BudgetSurchargeDec * (AvailableDec/BudgetDec)), 0.01); //M20030
                  "Amount incl. Surcharge" := "Ovh. Surcharge";                                     //M24810
                END;

              END;


              //M20040 sn
              IF ("Amount incl. Surcharge" <> 0) AND ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                IF "Rate Code" = '' THEN
                  "Rate Code" := DimValRec."Rate Code";
                IF "Rate Code" <> '' THEN BEGIN
                  IF NOT Job.GET("Project No.") THEN
                    Job.INIT;
                  lvRate := BudgetRateManagement.GetBudgetRate(
                    0, "Project No.", '', '', Job."Global Dimension 1 Code", "Rate Code", "Prognosis Date", BudgetRateFoundAt);
                  IF lvRate <> Rate THEN
                    "Rate Code" := '';
                END;
              END;
              //M20040 en

              VALIDATE("Amount incl. Surcharge");
              MODIFY(TRUE);

              //DP00042.sn
              IF ProjSetUp."Prognosis Specifications" THEN BEGIN  //C004846.n
                PrognosisLineSpec.SETRANGE("Project No.", "Project No.");
                PrognosisLineSpec.SETRANGE("Prognosis Date", "Prognosis Date");
                IF Element = '' THEN  //db, 15-11-11
                  PrognosisLineSpec.SETFILTER(Element, '%1', '')
                ELSE
                  PrognosisLineSpec.SETRANGE(Element, Element);
                PrognosisLineSpec.SETRANGE("Cost Type", "Cost Type");
                PrognosisLineSpec.SETRANGE("Cost Object", "Cost Object");
                PrognosisLineSpec.CALCSUMS(Quantity, Amount);

                Amount := Amount - PrognosisLineSpec.Amount;
                Quantity := Quantity - PrognosisLineSpec.Quantity;

                IF (Amount <> 0) OR (Quantity <> 0) THEN
                  InsertDetailLine(lPrognLineRec);
              END;
              //DP00042.en
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithXtraPolCost@1210190000();
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      OldAmount@1210190000 : Decimal;
    BEGIN
      //* 18-12-2007: Formules aangepast nav document JR (melding 8870)
      //* 25-05-2010 Because xtrapolation is inclusive surcharges Amount := Amount incl. Surcharge and Ovh. Surcharge := 0;
      WITH lPrognLineRec DO BEGIN
        COPY(Rec);
        FILTERGROUP(4);
        SETRANGE("Cost Type");
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            OldAmount := Amount;  //DP00042
            CalculateValues(lPrognLineRec,FALSE);
            Quantity := 0;
            "Amount incl. Surcharge" := 0; //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
            IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
              IF (AllowedHoursDec <> 0) THEN BEGIN
                Quantity := ActualHoursDec * ((BudgHoursDec / AllowedHoursDec) - 1);
                IF (ActualHoursDec <> 0) THEN
                  "Amount incl. Surcharge" := Quantity * (TotalCostDec / ActualHoursDec);
              END;
            END ELSE BEGIN
              IF (AllowedDec <> 0) THEN BEGIN
                Quantity := 1;
                "Amount incl. Surcharge" := TotalCostDec * ((BudgetDec / AllowedDec) - 1);
              END;
            END;
            Amount := "Amount incl. Surcharge"; // Do not validate!
            "Ovh. Surcharge" := 0; // Do not validate!
            VALIDATE("Amount incl. Surcharge");
            MODIFY(TRUE);

            //DP00042.sn
            Amount := Amount - OldAmount;
            IF Amount <> 0 THEN
              InsertDetailLine(lPrognLineRec);
            //DP00042.en
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CalcTotals@1100485000();
    BEGIN
      CALCFIELDS(
        "Total Prognosis Labor", "Total Prognosis Material",
        "Total Prognosis Subcontracting", "Total Prognosis Plant",
        "Total Prognosis Sundry", "Total Prognosis",
        "Total Progn. End Result Labor", "Total Progn. End Result Mat.",
        "Total Progn. End Result Subc.", "Total Progn. End Result Plant",
        "Total Progn. End Result Sundry", "Total Prognosis End Result",
        "General Total Quantity", "General Total Hours", "General Total Budget Hours"); // 15532.n
    END;

    PROCEDURE RemoveSurcharges@1100525000();
    VAR
      lPrognLineRec@1100525000 : Record 11012035;
      lvPrognosisRec@1100525001 : Record 11012034;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        COPY(Rec);
        FILTERGROUP(4);
        SETRANGE("Cost Type");
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            "Ovh. Surcharge" := 0;
            VALIDATE("Amount incl. Surcharge", Amount); //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;

      lvPrognosisRec.INIT;
      lvPrognosisRec.SETRANGE("Project No.", "Project No.");
      lvPrognosisRec.SETRANGE("Prognosis Date", "Prognosis Date");
      IF lvPrognosisRec.FINDFIRST THEN BEGIN
        IF lvPrognosisRec."Ovh. Surcharges Calculated" THEN BEGIN
          lvPrognosisRec."Ovh. Surcharges Calculated" := FALSE;
          lvPrognosisRec."Altered After Calculation" := FALSE;
          lvPrognosisRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE CalculateSurcharges@1100525001();
    VAR
      lPrognLineRec@1100525000 : Record 11012035;
      lvPrognosisRec@1100525001 : Record 11012034;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        COPY(Rec);
        FILTERGROUP(4);
        SETRANGE("Cost Type");

        IF NOT ProjSetUp."Prognosis Ovh Surcharge Labor" THEN
          SETFILTER("Cost Type", '<>%1', "Cost Type"::Labor);  //M23265

        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            //CalcSurcharge(lPrognLineRec);  //db, 06-12-12: use function of codeunit 11020217 (Prognosis Management)
            PrognosisMgt.CalcSurcharge(lPrognLineRec);  //db, 21-12-12: C001639 (form-function CalcSurcharge + InitSurcharge removed)
          UNTIL NEXT = 0;
        END;
      END;

      lvPrognosisRec.INIT;
      lvPrognosisRec.SETRANGE("Project No.", "Project No.");
      lvPrognosisRec.SETRANGE("Prognosis Date", "Prognosis Date");
      IF lvPrognosisRec.FINDFIRST THEN BEGIN
        lvPrognosisRec."Ovh. Surcharges Calculated" := TRUE;
        lvPrognosisRec."Altered After Calculation" := FALSE;
        lvPrognosisRec.MODIFY;
      END;
    END;

    PROCEDURE ShowDetailLines@11136552();
    BEGIN
      //DP00042
      CurrPage.SAVERECORD;  //C006391.n
      AmountOnDrillDown;
    END;

    PROCEDURE UpdateDetailLinesFromPrevious@11136554(PrognosisLine@11136550 : Record 11012035;PreviousPrognosisLine@11136551 : Record 11012035);
    VAR
      PrognosisLineSpec@11136552 : Record 11020687;
      PrognosisLineSpec2@11136554 : Record 11020687;
      PreviousPrognosisLineSpec@11136553 : Record 11020687;
      RemainingAmount@11136555 : Decimal;
      RemainingQuantity@11136556 : Decimal;
      NullGUID@1210190000 : GUID;
    BEGIN
      //DP00042
      IF NOT ProjSetUp."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      //PreviousPrognosisLineSpec.SETCURRENTKEY("Reference No.");  // Do not use key on field with DataType (performance)
      PreviousPrognosisLineSpec.SETRANGE("Project No.", PreviousPrognosisLine."Project No.");
      PreviousPrognosisLineSpec.SETRANGE("Prognosis Date", PreviousPrognosisLine."Prognosis Date");

      //PrognosisLineSpec.SETCURRENTKEY("Reference No.");  // Do not use key on field with DataType (performance)
      PrognosisLineSpec.SETRANGE("Project No.", PrognosisLine."Project No.");
      PrognosisLineSpec.SETRANGE("Prognosis Date", PrognosisLine."Prognosis Date");
      IF PrognosisLine.Element = '' THEN  //db, 15-11-11
        PrognosisLineSpec.SETFILTER(Element, '%1', '')
      ELSE
        PrognosisLineSpec.SETRANGE(Element, PrognosisLine.Element);
      PrognosisLineSpec.SETRANGE("Cost Type", PrognosisLine."Cost Type");
      PrognosisLineSpec.SETRANGE("Cost Object", PrognosisLine."Cost Object");
      PrognosisLineSpec.SETFILTER("Reference No.", '<>%1', NullGUID);
      IF PrognosisLineSpec.FINDSET THEN BEGIN
        REPEAT
          PreviousPrognosisLineSpec.SETRANGE("Reference No.", PrognosisLineSpec."Reference No.");
          IF PreviousPrognosisLineSpec.FINDFIRST THEN BEGIN
            PrognosisLineSpec2 := PrognosisLineSpec;
            PrognosisLineSpec2.Amount := PreviousPrognosisLineSpec.Amount;
            PrognosisLineSpec2.Quantity := PreviousPrognosisLineSpec.Quantity;
            PrognosisLineSpec2.UpdatePrice;
            PrognosisLineSpec2.MODIFY;
          END;
        UNTIL PrognosisLineSpec.NEXT = 0;
      END;

      // Find totals for all detail lines
      PrognosisLineSpec.SETRANGE("Reference No.");
      PrognosisLineSpec.CALCSUMS(Amount, Quantity);

      // Compare detail line totals against prognosis line values
      RemainingAmount := PrognosisLine.Amount - PrognosisLineSpec.Amount;
      RemainingQuantity := PrognosisLine.Quantity - PrognosisLineSpec.Quantity;

      // If necessary, create detail line for remaining amount
      IF (RemainingAmount <> 0) OR (RemainingQuantity <> 0) THEN BEGIN
        PrognosisLine.Amount := RemainingAmount;
        PrognosisLine.Quantity := RemainingQuantity;
        InsertDetailLine(PrognosisLine);
      END;
    END;

    LOCAL PROCEDURE InsertDetailLine@11136550(PrognosisLine@11136551 : Record 11012035);
    VAR
      PrognosisLineSpec@11136550 : Record 11020687;
    BEGIN
      //DP00042
      IF NOT ProjSetUp."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      PrognosisLine.CALCFIELDS("Cost Object Description");

      PrognosisLineSpec."Project No." := PrognosisLine."Project No.";
      PrognosisLineSpec.VALIDATE("Prognosis Date", PrognosisLine."Prognosis Date");
      PrognosisLineSpec.Element := PrognosisLine.Element;
      PrognosisLineSpec."Cost Type" := PrognosisLine."Cost Type";
      PrognosisLineSpec."Cost Object" := PrognosisLine."Cost Object";
      PrognosisLineSpec."Line No." := PrognosisLineSpec.FindNextLineNo;
      PrognosisLineSpec.Description := PrognosisLine."Cost Object Description";
      PrognosisLineSpec.Amount := PrognosisLine.Amount;
      PrognosisLineSpec.Quantity := PrognosisLine.Quantity;

      IF (PrognosisLineSpec.Amount <> 0) AND (PrognosisLineSpec.Quantity = 0) THEN
        PrognosisLineSpec.Quantity := 1;

      PrognosisLineSpec."Unit of Measure" := PrognosisLine."Unit of Measure";
      PrognosisLineSpec."Reference No." := CREATEGUID;
      PrognosisLineSpec.UpdatePrice;

      PrognosisLineSpec.INSERT(FALSE);
    END;

    LOCAL PROCEDURE ValidateQuantityOfCopy@1210190003(VAR PrognosisLine@1210190000 : Record 11012035);
    BEGIN
      WITH PrognosisLine DO BEGIN
        IF (Quantity < 0) AND
           (ProjSetUp."Fill Prognosis End Result" =
            ProjSetUp."Fill Prognosis End Result"::"Prognosis may not be Negative" )
        THEN
          VALIDATE(Quantity, 0);
      END;
    END;

    LOCAL PROCEDURE ValidateAmountOfCopy@1210190004(VAR PrognosisLine@1210190000 : Record 11012035);
    BEGIN
      WITH PrognosisLine DO BEGIN
        IF (Amount < 0) AND
           (ProjSetUp."Fill Prognosis End Result" =
             ProjSetUp."Fill Prognosis End Result"::"Prognosis may not be Negative" )
        THEN BEGIN
          "Ovh. Surcharge" := 0;
          VALIDATE(Amount, 0);
        END;
      END;
    END;

    LOCAL PROCEDURE RiscCoverageOnAfterValidate@19065993();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@19032465();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE RateCodeOnAfterValidate@19043554();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE AmountinclSurchargeOnAfterVali@19001334();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE PrognosisEndResultOnAfterValid@19000495();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      CalcTotals;

      IF Element <> '' THEN
        ElementCostObjEditable := NOT ElemCstObjCntrlRec.GET("Project No.",Element,"Cost Type","Cost Object")
      ELSE
        IF "Cost Object" <> '' THEN
          ElementCostObjEditable := NOT CstObjCntrlRec.GET("Project No.","Cost Type","Cost Object")
        ELSE
          ElementCostObjEditable := TRUE;
    END;

    LOCAL PROCEDURE ElementOnBeforeInput@19053503();
    BEGIN
      //CurrPage.Element.UPDATEEDITABLE(ElementCostObjEditable);
    END;

    LOCAL PROCEDURE CostObjectOnBeforeInput@19037399();
    BEGIN
      //CurrPage."Cost Object".UPDATEEDITABLE(ElementCostObjEditable);
    END;

    LOCAL PROCEDURE RateOnBeforeInput@19000663();
    BEGIN
      //CurrPage.Rate.UPDATEEDITABLE(("Cost Type" = "Cost Type"::Labor) AND ("Rate Code" = ''));
    END;

    BEGIN
    {
      //20060706-JE : Added fields [Prev Prognosis End Result], [Total Expected Costs]
      //20060706-JE : Added fields [Prognosis End Result Hours], [Result Hours]
      4PS01 JD Call C-006737 18-12-2006 Voorcalculatorisch inkoopresultaat opnemen in prognose scherm
      140815 ITERO.DL IME155 exclude "Component Type"::'expense hours' from "Open Amount (Hours)", "Open Ovh. Surch. (Hours)", "Open Hours"
    }
    END.
  }
}

