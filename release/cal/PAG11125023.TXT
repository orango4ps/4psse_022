OBJECT Page 11125023 Release Extension Contract
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Sonderleistungen freigeben;
               ENU=Release Extension Contract;
               NLD=Meer/Minderwerk vrijgeven;
               NOR=Frigi ETA-kontrakt;
               SVE=Sl„pp ŽTA-kontrakt];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    PageType=NavigatePage;
    OnInit=BEGIN
             InstallmentSchemeEditable := TRUE;
             NoneInstallment := TRUE;
             FirstInstallment := FALSE;
             AllInstallments := FALSE;
           END;

    OnOpenPage=BEGIN
                 InstallmentSchemeEditable := ExtensionContract."Settlement Method" = ExtensionContract."Settlement Method"::"Fixed Price";
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525010;1 ;Action    ;
                      Name=ProcessBtn;
                      CaptionML=[DEU=Process;
                                 ENU=Process;
                                 NLD=Verwerken;
                                 NOR=Behandle;
                                 SVE=Process];
                      InFooterBar=Yes;
                      Image=Post;
                      PromotedCategory=New;
                      OnAction=BEGIN
                                 ProcessExtensionContract;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525000;1;Field  ;
                Name=OrderDate;
                CaptionML=[DEU=Auftragsdatum;
                           ENU=Order Date;
                           NLD=Order Datum;
                           NOR=Bestillingsdato;
                           SVE=Orderdatum];
                SourceExpr=OrderDate }

    { 1100525002;1;Field  ;
                Name=InstallmentScheme;
                CaptionML=[DEU=Ratenschema;
                           ENU=Installment Scheme;
                           NLD=Termijnschema;
                           NOR=Betalingsplan;
                           SVE=Betalplan];
                SourceExpr=InstallmentScheme;
                TableRelation="Installment Scheme".Code WHERE (Type=CONST(Project));
                Editable=InstallmentSchemeEditable }

    { 1100528001;1;Field  ;
                CaptionML=[DEU=Projekt;
                           ENU=Project;
                           NLD=Project;
                           NOR=Prosjekt;
                           SVE=Projekt];
                SourceExpr=ProjectNo;
                Editable=FALSE }

    { 1100528000;1;Field  ;
                CaptionML=[DEU=Vertragsnr.;
                           ENU=Contract No.;
                           NLD=Contractnr.;
                           NOR=Kontraktsnr;
                           SVE=Kontraktsnr];
                SourceExpr=ContractNo;
                Editable=FALSE }

    { 1100527450;1;Field  ;
                Name=NoneInstallment;
                CaptionML=[DEU=Keine;
                           ENU=None;
                           NLD=Geen];
                SourceExpr=NoneInstallment;
                OnValidate=BEGIN
                             IF NoneInstallment THEN BEGIN
                               FirstInstallment := FALSE;
                               AllInstallments := FALSE;
                             END;
                           END;
                            }

    { 1100527451;1;Field  ;
                Name=FirstInstallment;
                CaptionML=[DEU=Nur erste Rate;
                           ENU=Only the First;
                           NLD=Eerste termijn alleen];
                SourceExpr=FirstInstallment;
                OnValidate=BEGIN
                             IF FirstInstallment THEN BEGIN
                               NoneInstallment := FALSE;
                               AllInstallments := FALSE;
                             END;
                           END;
                            }

    { 1100527452;1;Field  ;
                Name=AllInstallments;
                CaptionML=[DEU=Alle Termine;
                           ENU=All Installments;
                           NLD=Alle termijnen];
                SourceExpr=AllInstallments;
                OnValidate=BEGIN
                             IF AllInstallments THEN BEGIN
                               NoneInstallment := FALSE;
                               FirstInstallment := FALSE;
                             END;
                           END;
                            }

  }
  CODE
  {
    VAR
      BudgetSummarySheet@1100525006 : Record 11012064;
      ExtensionContract@1100525007 : Record 11012004;
      BudgetLine@1210190000 : Record 11012001;
      GenerateProjInstallm@1100525004 : Codeunit 11012007;
      OrderDate@1100525000 : Date;
      InstallmentScheme@1100525001 : Code[10];
      InstallmentSchemeEditable@19027877 : Boolean INDATASET;
      ProjectNo@1100528001 : Code[20];
      ContractNo@1100528000 : Code[10];
      NoneInstallment@1100528500 : Boolean;
      FirstInstallment@1100528501 : Boolean;
      AllInstallments@1100528502 : Boolean;

    PROCEDURE InitExtensionContract@1100525001(ExtensionContract2@1100525000 : Record 11012004);
    VAR
      JobsSetup@1100525001 : Record 315;
    BEGIN
      InstallmentScheme := ExtensionContract2."Installment Scheme";
      IF (InstallmentScheme = '') THEN BEGIN
        JobsSetup.GET;
        InstallmentScheme := JobsSetup."Ext. Contract Install. Scheme";
      END;
      ExtensionContract := ExtensionContract2;
      OrderDate := ExtensionContract2."Contract Date";
      //DP00793-RFC11
      ProjectNo := ExtensionContract2."Project No.";
      ContractNo:= ExtensionContract2."Contract No.";
      //DP00793-RFC11
    END;

    LOCAL PROCEDURE ProcessExtensionContract@1100525002();
    BEGIN
      ExtensionContract.TESTFIELD("Extension Fixed", FALSE);

      ExtensionContract.VALIDATE(ExtensionContract."Contract Date", OrderDate);
      ExtensionContract.VALIDATE(ExtensionContract."Version Date", TODAY);
      IF (ExtensionContract."Contract Amount" = 0) THEN
        ExtensionContract.VALIDATE(ExtensionContract."Contract Amount", ExtensionContract."Offered Amount");
      ExtensionContract.VALIDATE(ExtensionContract.Status, ExtensionContract.Status::"Invoicing Allowed");

      ExtensionContract.MODIFY;
      ExtensionContract.UpdateBudgetVersionDate;

      BudgetSummarySheet.DeleteIfOrderLines(ExtensionContract."Project No.", ExtensionContract."Contract No.");

      BudgetSummarySheet."Project No." := ExtensionContract."Project No.";
      BudgetSummarySheet."Contract No." := ExtensionContract."Contract No.";
      BudgetSummarySheet.UpdateBudgetLines(FALSE, '');

      IF (ExtensionContract."Settlement Method" = ExtensionContract."Settlement Method"::"Fixed Price") THEN BEGIN
        ExtensionContract.VALIDATE("Generate Installments", TRUE);
        ExtensionContract.VALIDATE("Installment Scheme", InstallmentScheme);
        ExtensionContract.MODIFY;
        GenerateProjInstallm.FromExtensionNotAsk(ExtensionContract."Project No.", ExtensionContract."Contract No.");
      END;

      BudgetLine.SETRANGE("Project No.", ExtensionContract."Project No.");
      BudgetLine.SETRANGE("Extension Contract", ExtensionContract."Contract No.");
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETRANGE(Option, '');
      IF (BudgetLine.FINDSET(TRUE, FALSE)) THEN
        REPEAT
          BudgetLine."Extension Contract Status" := BudgetLine."Extension Contract Status"::"Invoicing Allowed";
          BudgetLine.MODIFY;
        UNTIL BudgetLine.NEXT = 0;

      CurrPage.CLOSE;
    END;

    PROCEDURE MultiProcessExtensionContract@1100285000();
    BEGIN
      //DP00783-RFC11
      ExtensionContract.TESTFIELD("Extension Fixed", FALSE);

      ExtensionContract.VALIDATE(ExtensionContract."Contract Date", OrderDate);
      ExtensionContract.VALIDATE(ExtensionContract."Version Date", TODAY);
      IF (ExtensionContract."Contract Amount" = 0) THEN
        ExtensionContract.VALIDATE(ExtensionContract."Contract Amount", ExtensionContract."Offered Amount");
      ExtensionContract.VALIDATE(ExtensionContract.Status, ExtensionContract.Status::"Invoicing Allowed");

      ExtensionContract.MODIFY;
      ExtensionContract.UpdateBudgetVersionDate;

      BudgetSummarySheet.DeleteIfOrderLines(ExtensionContract."Project No.", ExtensionContract."Contract No.");
      BudgetSummarySheet."Project No." := ExtensionContract."Project No.";
      BudgetSummarySheet."Contract No." := ExtensionContract."Contract No.";
      BudgetSummarySheet.UpdateBudgetLines(FALSE, '');

      IF (ExtensionContract."Settlement Method" = ExtensionContract."Settlement Method"::"Fixed Price") THEN BEGIN
        ExtensionContract.VALIDATE("Generate Installments", TRUE);
        ExtensionContract.VALIDATE("Installment Scheme", InstallmentScheme);
        ExtensionContract.MODIFY;
        GenerateProjInstallm.SetSilent(TRUE);
        GenerateProjInstallm.FromExtensionNotAsk(ExtensionContract."Project No.", ExtensionContract."Contract No.");
      END;

      BudgetLine.SETRANGE("Project No.", ExtensionContract."Project No.");
      BudgetLine.SETRANGE("Extension Contract", ExtensionContract."Contract No.");
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETRANGE(Option, '');
      IF (BudgetLine.FINDSET(TRUE, FALSE)) THEN BEGIN
        REPEAT
          BudgetLine."Extension Contract Status" := BudgetLine."Extension Contract Status"::"Invoicing Allowed";
          BudgetLine.MODIFY;
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetInstallmentsSelections@1100528508() : Integer;
    BEGIN
      IF NoneInstallment THEN
        EXIT(1);
      IF FirstInstallment THEN
        EXIT(2);
      IF AllInstallments THEN
        EXIT(3);
    END;

    BEGIN
    END.
  }
}

