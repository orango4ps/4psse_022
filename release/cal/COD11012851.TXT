OBJECT Codeunit 11012851 Copy Service Order/Call
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100528603 : TextConst 'DEU=Servicevertrag ist f„llig. M”chten Sie fortfahren?;ENU="Service Contract is expired; continue ?";NLD="Servicecontract is vervallen; doorgaan ?";NOR=Servicekontrakt er utg†tt, fortsette?;SVE=Servicekontraktet har g†tt ut. Vill du forts„tta?';
      Text002@1100528602 : TextConst 'DEU=Servicevertrag wurde gesperrt. M”chten Sie fortfahren?;ENU="Service Contract is blocked; continue ?";NLD="Servicecontract is geblokkeerd; doorgaan ?";NOR=Servicekontrakt er blokkert, fortsette?;SVE=Servicekontraktet „r sp„rrat. Vill du forts„tta?';
      Text004@1100528600 : TextConst 'DEU=Servicestandort ist ausser Betrieb. M”chten Sie fortfahren?;ENU="Service Location is out of use; continue ?";NLD="Servicelocatie is buiten gebruik; doorgaan ?";NOR=Servicelokasjon er ikke i bruk, fortsette?;SVE=Serviceplatsen „r inte i bruk. Vill du forts„tta?';
      Text005@1100525000 : TextConst 'DEU=Serviceauftrag %1 hat Status %2, trotzdem fortfahren?;ENU=Service Order %1 has status %2, continue anyway?;NLD=Serviceorder %1 heeft status %2, alsnog doorgaan?;NOR=Serviceordre %1 har status %2, fortsette likevel?;SVE=Serviceorder %1 har status %2, forts„tt „nd†?';
      Text008@1100525003 : TextConst 'DEU=Kollektiv-Liste %1 hat Status %2, trotzdem fortfahren?;ENU=Collective List %1 has status %2, continue anyway?;NLD=Verzamelstaat %1 heeft status %2, alsnog doorgaan?;NOR=Samlingsfaktura %1 har status %2, fortsette likevel?;SVE=Samlingsfaktura %1 har status %2, forts„tta?';

    PROCEDURE CopyServiceOrder@1100528604(IBaseServiceOrderNo@1100528600 : Code[20];ICopyMethod@1100528645 : 'Copy,Unfinished,Additional';ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';INoSeries@1100528631 : Code[20];IOrderKind@1100528632 : Code[20];ICopyCallReference@1100528633 : Boolean;ILinkServiceOrder@1100528634 : Boolean;ICopyTryOutSuccessor@1100528635 : Boolean;ICopyCommentLines@1100528636 : Boolean;ICopyObjects@1100528609 : Boolean;IMoveAdviceOrderLines@1100528637 : Boolean;IAdviceOrderLineStatus@1100528638 : 'Both,Open,Released';IMoveOrderBudgetLines@1100528639 : Boolean;ICopyDocuments@1100528640 : Boolean;ICopyUnitPrices@1100528641 : Boolean;ICopySolutionText@1100528642 : Boolean;ICopyCauseText@1100528643 : Boolean;ICopyResource@1100528644 : Boolean;ICopyAssignTo@1100528800 : Boolean;ICopyServiceExtraCost@1100528647 : Boolean;ICopyBudgetLines@1100528646 : Boolean;ICopyDebriefText@1100528500 : Boolean;IApplyServiceProcessFieldAssignm@1100528400 : Boolean) : Code[20];
    VAR
      ServiceSetup@1100528628 : Record 11012800;
      SourceServiceOrder@1100528624 : Record 11012823;
      DestinationServiceOrder@1100528623 : Record 11012823;
      ServiceContract@1100528622 : Record 11012812;
      Customer@1100528621 : Record 18;
      ServiceLocation@1100528620 : Record 11012801;
      ServiceCollectiveList@1100528619 : Record 11071730;
      ServiceOrderExtension@1100528618 : Record 11071727;
      TryoutSuccessor@1100528617 : Record 11012761;
      SourceCommentLine@1100528616 : Record 97;
      DestinationCommentLine@1100528615 : Record 97;
      SourceServiceText@1100528614 : Record 11012882;
      DestinationServiceText@1100528613 : Record 11012882;
      SourceAdviceOrderLine@1100528608 : Record 11012055;
      DestinationAdviceOrderLine@1100528607 : Record 11012055;
      SourceServiceOrderBudgetLine@1100528606 : Record 11012875;
      DestServiceOrderBudgetLine@1100528605 : Record 11012875;
      SourceServiceOrderObject@1100528604 : Record 11071724;
      DestServiceOrderObject@1100528603 : Record 11071724;
      SourceServiceResponsiblePerson@1100528625 : Record 11012808;
      DestServiceResponsiblePerson@1100528601 : Record 11012808;
      SourceSUPRecordingLine@1100409001 : Record 11071772;
      DestSUPRecordingLine@1100409000 : Record 11071772;
      ResourceWOP@1100528626 : Record 11229278;
      SourceServiceExtraCost@1100528648 : Record 11020344;
      DestServiceExtraCost@1100528649 : Record 11020344;
      SourceServiceOrderLocation@1100525008 : Record 11071688;
      DestServiceOrderLocation@1100525009 : Record 11071688;
      SourcePreferenceLocation@1100527300 : Record 11020353;
      DestPreferenceLocation@1100527301 : Record 11020353;
      OptionFieldTools@1100525000 : Codeunit 11012271;
      NoSeriesManagement@1100528611 : Codeunit 396;
      DocumentLinkManagement@1100528629 : Codeunit 11012401;
      DimensionManagement@1100528627 : Codeunit 408;
      RecordRef@1100525001 : RecordRef;
      FieldRef@1100525002 : FieldRef;
      DestRecordRef@1100528630 : RecordRef;
      StatusValue@1100525003 : Text[250];
      NewOrder@1100525006 : Code[20];
      RefPeriodRec@1100525007 : Record 11020272;
      Subcontractor@1100528612 : Code[20];
      ServiceTextFilter@1100528602 : Text[250];
      SourceDebriefTextLine@1100528501 : Record 11012886;
      DestDebriefTextLine@1100528502 : Record 11012886;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      CommentLine@1100527450 : Record 11020634;
      SourceRecRef@1100527451 : RecordRef;
      TargetRecRef@1100527452 : RecordRef;
    BEGIN
      SourceServiceOrder.GET(IBaseServiceOrderNo);
      ServiceSetup.GET;

      IF SourceServiceOrder.Status IN [SourceServiceOrder.Status::"Administrative Finished", SourceServiceOrder.Status::Finished]
      THEN BEGIN
        RecordRef.GETTABLE(SourceServiceOrder);
        FieldRef := RecordRef.FIELD(SourceServiceOrder.FIELDNO(Status));
        OptionFieldTools.OptionValueToReadableOption2(FieldRef, StatusValue);
        IF NOT CONFIRM(Text005, FALSE, SourceServiceOrder."No.", SourceServiceOrder.Status) THEN  //CALL T003957 c
          ERROR('');
      END;

      IF SourceServiceOrder."Collective List No." <> '' THEN
        IF ServiceCollectiveList.GET(SourceServiceOrder."Collective List No.") THEN
          IF ServiceCollectiveList.Status > ServiceCollectiveList.Status::Open THEN BEGIN
            RecordRef.GETTABLE(ServiceCollectiveList);
            FieldRef := RecordRef.FIELD(ServiceCollectiveList.FIELDNO(Status));
            OptionFieldTools.OptionValueToReadableOption2(FieldRef, StatusValue);
            IF NOT CONFIRM(Text008, FALSE, ServiceCollectiveList."No.", StatusValue) THEN
              ERROR('');
          END;

      IF ServiceContract.GET(SourceServiceOrder."Service Contract No.") THEN BEGIN
        IF ServiceContract.Status = ServiceContract.Status::Closed THEN
          ServiceContract.FIELDERROR(Status);
        IF ServiceContract.Status = ServiceContract.Status::Expired THEN
          IF CONFIRM(Text001, FALSE) = FALSE THEN EXIT;
        IF ServiceContract.Blocked THEN
          IF CONFIRM(Text002, FALSE) = FALSE THEN EXIT;
      END;

      IF Customer.GET(SourceServiceOrder."Customer No.") THEN
        Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", SourceServiceOrder.FIELDNO("Customer No."));
      IF SourceServiceOrder."Bill-to Customer No." <> SourceServiceOrder."Customer No." THEN
        IF Customer.GET(SourceServiceOrder."Bill-to Customer No.") THEN
          Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", SourceServiceOrder.FIELDNO("Bill-to Customer No."));

      IF ServiceLocation.GET(SourceServiceOrder."Service Location No.") THEN
        IF ServiceLocation."Date Out of Use" <> 0D THEN
          IF CONFIRM(Text004, FALSE) = FALSE THEN EXIT;

      NoSeriesManagement.SelectSeriesOnlyFormWhenMore(INoSeries, '', INoSeries);

      IF NOT ILinkServiceOrder OR ServiceSetup."Auto Reopen Coll.List Disabled" THEN
        DestinationServiceOrder."Collective List No." := ''
      ELSE
        IF SourceServiceOrder."Collective List No." <> '' THEN BEGIN
          ServiceCollectiveList.GET(SourceServiceOrder."Collective List No.");
          IF ServiceCollectiveList.Status > ServiceCollectiveList.Status::Open THEN BEGIN
            ServiceCollectiveList.VALIDATE(Status, ServiceCollectiveList.Status::Open);
            ServiceCollectiveList.MODIFY(TRUE);
          END;
        END;

      DestinationServiceOrder.LOCKTABLE;
      DestinationServiceOrder.COPY(SourceServiceOrder);
      DestinationServiceOrder."Source Type" := ISourceType;
      DestinationServiceOrder."Order Kind" := IOrderKind;
      DestinationServiceOrder."No. Series" := INoSeries;
      IF INoSeries <> '' THEN BEGIN
        NoSeriesManagement.TestSeries(DestinationServiceOrder."No. Series", DestinationServiceOrder."No. Series");
        NoSeriesManagement.SetSeries(DestinationServiceOrder."No.");
      END ELSE
        DestinationServiceOrder."No." := '';
      DestinationServiceOrder."Expected Hours" := 0;
      DestinationServiceOrder."Duration Time" := 0;
      DestinationServiceOrder.CheckDurationOnInitServOrder;  //db, 01-12-14: C019104
      DestinationServiceOrder."FLS VisiTour ID" := 0;
      DestinationServiceOrder."Assigned to" := '';
      DestinationServiceOrder.INSERT(TRUE);

      //db.sn, 20-06-13: C008146
      NewOrder := DestinationServiceOrder."No.";
      RefPeriodRec.UpdateNorm(RefPeriodRec.Type::ServOrder, NewOrder);
      DestinationServiceOrder.GET(NewOrder);  //previous function updates maintable; avoid SQL-message
      //db.en, 20-06-13: C008146

      IF ILinkServiceOrder THEN BEGIN
        DestinationServiceOrder.VALIDATE("Base Service Order", FALSE);
        IF SourceServiceOrder."Previous Service Order No." = '' THEN BEGIN
          SourceServiceOrder.VALIDATE("Base Service Order", TRUE);
          SourceServiceOrder.MODIFY;
          DestinationServiceOrder.VALIDATE("Base Service Order No.", SourceServiceOrder."No.");
        END ELSE
          DestinationServiceOrder.VALIDATE("Base Service Order No.", SourceServiceOrder."Base Service Order No.");
      END ELSE BEGIN
        DestinationServiceOrder.VALIDATE("Base Service Order No.", DestinationServiceOrder."No.");
        DestinationServiceOrder.VALIDATE("Base Service Order", TRUE);
      END;
      IF ILinkServiceOrder THEN
        DestinationServiceOrder."Previous Service Order No." := SourceServiceOrder."No.";
      DestinationServiceOrder.VALIDATE("Global Dimension 1 Code", SourceServiceOrder."Global Dimension 1 Code");
      IF ICopyAssignTo THEN
        DestinationServiceOrder.VALIDATE("Assigned to", SourceServiceOrder."Assigned to");
      DestinationServiceOrder."Starting Date" := WORKDATE;
      DestinationServiceOrder."Starting Time" := 0T;
      DestinationServiceOrder."Ending Date" := 0D;
      DestinationServiceOrder."Ending Time" := 0T;
      DestinationServiceOrder."First Possible Starting Date" := 0D;
      DestinationServiceOrder."Last Possible Ending Date" := 0D;
      DestinationServiceOrder."Budget Hours" := 0;
      DestinationServiceOrder.Signer := '';
      DestinationServiceOrder."E-Mail Signer" := '';
      DestinationServiceOrder."Send Report" := FALSE;
      DestinationServiceOrder."Budget Hours (Gantt Chart)" := 0;
      DestinationServiceOrder."Open Hours (Gantt Chart)" := 0;
      DestinationServiceOrder."Posted Hours (Gantt Chart)" := 0;
      DestinationServiceOrder."Finished Hours (Gantt Chart)" := 0;
      DestinationServiceOrder."Decentral Created" := FALSE;
      IF NOT ICopyCauseText THEN
        DestinationServiceOrder.Cause := '';
      IF NOT ICopySolutionText THEN
        DestinationServiceOrder.Solution := '';
      IF NOT ICopyResource THEN BEGIN
        DestinationServiceOrder."Employee No." := '';
        DestinationServiceOrder.Subcontractor := '';
      END ELSE
        DestinationServiceOrder.VALIDATE(Subcontractor);
      DestinationServiceOrder."Closing Date" := 0D;
      DestinationServiceOrder."Unit Price Status" := DestinationServiceOrder."Unit Price Status"::" ";
      DestinationServiceOrder.CheckContrDiscAdditionalCost;
      IF DestinationServiceOrder."Source Type" <> SourceServiceOrder."Source Type" THEN
        DestinationServiceOrder.DetermineServicePackage;
      DestinationServiceOrder."Installment Scheme" := '';
      DestinationServiceOrder."Order Amount" := 0;
      DestinationServiceOrder."Order Amount (LCY)" := 0;
      //DP01008.sn
      IF (DestinationServiceOrder."Base Service Order" = FALSE) THEN BEGIN
        //BaseAmount is calculated for all related orders and stored on BaseOrder
        DestinationServiceOrder."Invoice Base Method" := DestinationServiceOrder."Invoice Base Method"::" ";
        DestinationServiceOrder."Invoice Base Amount Labor" := 0;
        DestinationServiceOrder."Invoice Base Amount Material" := 0;
        DestinationServiceOrder."Invoice Base Amount Total" := 0;
      END;
      //DP01008.en
      DestinationServiceOrder.MODIFY(TRUE);

      DimensionManagement.MergeDefaultDim(
        DATABASE::"Service Order", SourceServiceOrder."No.", DATABASE::"Service Order", DestinationServiceOrder."No."); //mg, 09-01-2015: C020338

      DestinationServiceOrder.CheckTravelData;
      DestinationServiceOrder.UpdateWorkOrder(FALSE);

      ServiceOrderExtension.CopyServOrderExtension(SourceServiceOrder."No.", DestinationServiceOrder."No.");

      IF ICopyTryOutSuccessor THEN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(TryoutSuccessor) THEN
          TryoutSuccessor.CopyRelation(4, 4, SourceServiceOrder."No.", DestinationServiceOrder."No.");

      IF ICopyCommentLines THEN BEGIN
        SourceCommentLine.SETRANGE("Table Name", SourceCommentLine."Table Name"::"Service Order");
        SourceCommentLine.SETRANGE("No.", SourceServiceOrder."No.");
        IF SourceCommentLine.FINDSET THEN BEGIN
          REPEAT
            DestinationCommentLine.COPY(SourceCommentLine);
            DestinationCommentLine."No." := DestinationServiceOrder."No.";
            DestinationCommentLine.INSERT;
          UNTIL SourceCommentLine.NEXT = 0;
        END;
      END;

      SourceServiceText.SETRANGE("Table Name", SourceServiceText."Table Name"::"Service Order");
      IF NOT ICopySolutionText THEN
        ServiceTextFilter := STRSUBSTNO('<>%1', 92);
      IF NOT ICopyCauseText THEN BEGIN
        IF ServiceTextFilter <> '' THEN
          ServiceTextFilter += '&';
        ServiceTextFilter += STRSUBSTNO('<>%1', 94);
      END;
      SourceServiceText.SETRANGE("No.", SourceServiceOrder."No.");
      SourceServiceText.SETFILTER("Table Field", ServiceTextFilter);
      IF SourceServiceText.FINDSET THEN BEGIN
        REPEAT
          DestinationServiceText.COPY(SourceServiceText);
          DestinationServiceText."No." := DestinationServiceOrder."No.";
          DestinationServiceText.INSERT;
        UNTIL SourceServiceText.NEXT = 0;
      END;

      IF ICopyObjects THEN BEGIN
        SourceServiceOrderObject.SETRANGE("Service Order No.", SourceServiceOrder."No.");
        IF ICopyMethod = ICopyMethod::Unfinished THEN BEGIN
          // Copy Service Order Objects before Service Order Budget Lines,
          // because Field Finished of Source Service Order Object is set
          // to True when Service Order Budget Lines are deleted.
          SourceServiceOrderObject.SETRANGE(Finished, FALSE);
          IF SourceServiceOrderObject.FINDSET(TRUE) THEN
            REPEAT
              DestServiceOrderObject.COPY(SourceServiceOrderObject);
              DestServiceOrderObject."Service Order No." := DestinationServiceOrder."No.";
              DestServiceOrderObject."Follow-up Job" := FALSE;
              DestServiceOrderObject.INSERT(TRUE);
              DestServiceOrderObject.VALIDATE(Finished, FALSE); //mg, 09-10-12: C002682
              DestServiceOrderObject.MODIFY(TRUE);
              DestServiceOrderObject.UpdateMaintenanceProposalLine();
              SourceServiceOrderObject."Source Line No." := 0;
              SourceServiceOrderObject.MODIFY;
            UNTIL SourceServiceOrderObject.NEXT = 0;
        END ELSE BEGIN
          IF SourceServiceOrderObject.FINDSET(TRUE) THEN
            REPEAT
              DestServiceOrderObject.INIT;
              DestServiceOrderObject.VALIDATE("Service Order No.", DestinationServiceOrder."No.");
              DestServiceOrderObject.VALIDATE("Object No.", SourceServiceOrderObject."Object No.");
              DestServiceOrderObject.SETRECFILTER;
              IF DestServiceOrderObject.ISEMPTY THEN
                DestServiceOrderObject.INSERT(TRUE);
            UNTIL SourceServiceOrderObject.NEXT = 0;
        END;
      END;

      SourceServiceOrderLocation.SETRANGE("Service Order No.", SourceServiceOrder."No.");
      IF SourceServiceOrderLocation.FINDSET THEN
        REPEAT
          DestServiceOrderLocation := SourceServiceOrderLocation;
          DestServiceOrderLocation."Service Order No." := DestinationServiceOrder."No.";
          DestServiceOrderLocation.INSERT(TRUE);
        UNTIL SourceServiceOrderLocation.NEXT = 0;

      IF IMoveAdviceOrderLines THEN BEGIN
        IF DestinationServiceOrder.Subcontractor <> '' THEN
          IF ResourceWOP.GET(DestinationServiceOrder.Subcontractor) THEN
            Subcontractor := ResourceWOP."Source No.";

        SourceAdviceOrderLine.SETRANGE("Record Type", SourceAdviceOrderLine."Record Type"::ServOrder);
        SourceAdviceOrderLine.SETRANGE("Project No.", '');
        SourceAdviceOrderLine.SETRANGE("Service Order No.", SourceServiceOrder."No.");
        CASE IAdviceOrderLineStatus OF
          IAdviceOrderLineStatus::Both:
            SourceAdviceOrderLine.SETFILTER("Process Status", '%1|%2', SourceAdviceOrderLine."Process Status"::Open, SourceAdviceOrderLine."Process Status"::Released);
          IAdviceOrderLineStatus::Open:
            SourceAdviceOrderLine.SETRANGE("Process Status", SourceAdviceOrderLine."Process Status"::Open);
          IAdviceOrderLineStatus::Released:
            SourceAdviceOrderLine.SETRANGE("Process Status", SourceAdviceOrderLine."Process Status"::Released);
        END;
        SourceAdviceOrderLine.SETRANGE(Processed, FALSE);
        IF SourceAdviceOrderLine.FINDSET(TRUE) THEN
          REPEAT
            IF (ServiceSetup."Cost Object Subcontracting" <> SourceAdviceOrderLine."Cost Object") OR
               (SourceAdviceOrderLine.Vendor <> Subcontractor) OR (SourceAdviceOrderLine.Vendor = '')
            THEN BEGIN
              DestinationAdviceOrderLine.COPY(SourceAdviceOrderLine);
              DestinationAdviceOrderLine."Service Order No." := DestinationServiceOrder."No.";
              DestinationAdviceOrderLine.VALIDATE("Line No.", 0);
              DestinationAdviceOrderLine."Decentral Created" := FALSE;
              DestinationAdviceOrderLine.INSERT(TRUE);
              SourceRecRef.GETTABLE(SourceAdviceOrderLine);
              TargetRecRef.GETTABLE(DestinationAdviceOrderLine);
              CommentLine.CopyCommentLines(CommentLine."Table Name"::"Advice Order", SourceRecRef, TargetRecRef);
            END;
              SourceAdviceOrderLine.DELETE(TRUE);
          UNTIL SourceAdviceOrderLine.NEXT = 0;
      END;

      IF IMoveOrderBudgetLines THEN BEGIN
        SourceServiceOrderBudgetLine.SETRANGE("Budget Type", SourceServiceOrderBudgetLine."Budget Type"::Order);
        SourceServiceOrderBudgetLine.SETRANGE("Service Order No.", SourceServiceOrder."No.");
        SourceServiceOrderBudgetLine.SETRANGE(Finished, FALSE);
        IF NOT ICopyObjects THEN
          SourceServiceOrderBudgetLine.SETRANGE("Object No.", '');
        IF SourceServiceOrderBudgetLine.FINDSET(TRUE) THEN BEGIN
          REPEAT
            DestServiceOrderBudgetLine.COPY(SourceServiceOrderBudgetLine);
            DestServiceOrderBudgetLine."Service Order No." := DestinationServiceOrder."No.";
            DestServiceOrderBudgetLine."Follow-up Job" := FALSE;
            DestServiceOrderBudgetLine.INSERT(TRUE);
            SourceServiceOrderBudgetLine.DELETE(TRUE);
          UNTIL SourceServiceOrderBudgetLine.NEXT = 0;
        END;
      END;

      IF ICopyBudgetLines THEN BEGIN
        SourceServiceOrderBudgetLine.SETRANGE("Budget Type", SourceServiceOrderBudgetLine."Budget Type"::Order);
        SourceServiceOrderBudgetLine.SETRANGE("Service Order No.", SourceServiceOrder."No.");
        IF NOT ICopyObjects THEN
          SourceServiceOrderBudgetLine.SETRANGE("Object No.", '');
        IF SourceServiceOrderBudgetLine.FINDSET(TRUE) THEN BEGIN
          REPEAT
            DestServiceOrderBudgetLine.COPY(SourceServiceOrderBudgetLine);
            DestServiceOrderBudgetLine."Service Order No." := DestinationServiceOrder."No.";
            DestServiceOrderBudgetLine."Follow-up Job" := FALSE;
            DestServiceOrderBudgetLine.Finished := FALSE;
            DestServiceOrderBudgetLine.INSERT(TRUE);
          UNTIL SourceServiceOrderBudgetLine.NEXT = 0;
        END;
      END;

      SourceServiceResponsiblePerson.SETRANGE("Service Order No.", SourceServiceOrder."No.");
      IF SourceServiceResponsiblePerson.FINDSET THEN
        REPEAT
          DestServiceResponsiblePerson := SourceServiceResponsiblePerson;
          DestServiceResponsiblePerson.VALIDATE("Service Order No.", DestinationServiceOrder."No.");
          DestServiceResponsiblePerson.INSERT(TRUE);
        UNTIL SourceServiceResponsiblePerson.NEXT = 0;

      IF ICopyDocuments THEN BEGIN
        RecordRef.GETTABLE(SourceServiceOrder);
        DestRecordRef.GETTABLE(DestinationServiceOrder);
        DocumentLinkManagement.CopyDocLinks(RecordRef, DestRecordRef);
      END;

      IF ICopyUnitPrices THEN BEGIN
        SourceSUPRecordingLine.SETRANGE("Service Order No.", SourceServiceOrder."No.");
        IF SourceSUPRecordingLine.FINDSET THEN
          REPEAT
            DestSUPRecordingLine := SourceSUPRecordingLine;
            DestSUPRecordingLine.VALIDATE("Service Order No.", DestinationServiceOrder."No.");
            DestSUPRecordingLine.VALIDATE("Work Order No.", '');
            DestSUPRecordingLine.INSERT(TRUE);
          UNTIL SourceSUPRecordingLine.NEXT = 0;
      END;

      IF ICopyServiceExtraCost THEN BEGIN
        DestServiceExtraCost.SETRANGE("Entity Type", DestServiceExtraCost."Entity Type"::"Service Order");
        DestServiceExtraCost.SETRANGE("Entity Code", DestinationServiceOrder."No.");
        IF NOT DestServiceExtraCost.ISEMPTY THEN
          DestServiceExtraCost.DELETEALL(TRUE);
        SourceServiceExtraCost.SETRANGE("Entity Type", SourceServiceExtraCost."Entity Type"::"Service Order");
        SourceServiceExtraCost.SETRANGE("Entity Code", SourceServiceOrder."No.");
        IF SourceServiceExtraCost.FINDSET THEN
          REPEAT
            DestServiceExtraCost := SourceServiceExtraCost;
            DestServiceExtraCost."Entity Code" := DestinationServiceOrder."No.";
            DestServiceExtraCost.INSERT(TRUE);
          UNTIL SourceServiceExtraCost.NEXT = 0;
      END;

      IF ICopyDebriefText THEN BEGIN
        SourceDebriefTextLine.SETRANGE(Type, SourceDebriefTextLine.Type::ServiceOrder);
        SourceDebriefTextLine.SETRANGE("No.", SourceServiceOrder."No.");
        IF SourceDebriefTextLine.FINDSET THEN BEGIN
          REPEAT
            DestDebriefTextLine.COPY(SourceDebriefTextLine);
            DestDebriefTextLine."No." := DestinationServiceOrder."No.";
            DestDebriefTextLine."Base Service Order No." := DestinationServiceOrder."Base Service Order No.";
            DestDebriefTextLine.Finished := FALSE;
            DestDebriefTextLine.INSERT(TRUE);
          UNTIL SourceDebriefTextLine.NEXT = 0;
        END;
      END;

      IF IApplyServiceProcessFieldAssignm THEN
        DestinationServiceOrder.ApplyDefaultsByProcessStructure;

      DestPreferenceLocation.SETRANGE(Type, DestPreferenceLocation.Type::"Service Order");
      DestPreferenceLocation.SETRANGE("No.", DestinationServiceOrder."No.");
      IF NOT DestPreferenceLocation.ISEMPTY THEN
        DestPreferenceLocation.DELETEALL;
      SourcePreferenceLocation.SETRANGE(Type, SourcePreferenceLocation.Type::"Service Order");
      SourcePreferenceLocation.SETRANGE("No.", SourceServiceOrder."No.");
      IF SourcePreferenceLocation.FINDSET THEN
        REPEAT
          DestPreferenceLocation := SourcePreferenceLocation;
          DestPreferenceLocation."No." := DestinationServiceOrder."No.";
          DestPreferenceLocation.INSERT;
        UNTIL SourcePreferenceLocation.NEXT = 0;

      DestinationServiceOrder.UpdateSOHours;

      EXIT(DestinationServiceOrder."No.");
    END;

    PROCEDURE CopyServiceCall@1100528600(IServiceCallNo@1100528602 : Code[20]) : Code[20];
    VAR
      SourceServiceCall@1100528600 : Record 11012822;
      DestinationServiceCall@1100528601 : Record 11012822;
      SourceCommentLine@1100528603 : Record 97;
      DestinationCommentLine@1100528604 : Record 97;
      SourceServiceText@1100528605 : Record 11012882;
      DestinationServiceText@1100528606 : Record 11012882;
      ServiceContract@1100528607 : Record 11012812;
      Customer@1100528608 : Record 18;
      ServiceLocation@1100528609 : Record 11012801;
    BEGIN
      SourceServiceCall.GET(IServiceCallNo);

      IF ServiceContract.GET(SourceServiceCall."Service Contract No.") THEN BEGIN
        IF ServiceContract.Status = ServiceContract.Status::Expired THEN
          IF CONFIRM(Text001, FALSE) = FALSE THEN EXIT;
        IF ServiceContract.Blocked THEN
          IF CONFIRM(Text002, FALSE) = FALSE THEN EXIT;
      END;

      IF Customer.GET(SourceServiceCall."Bill-to Customer No.") THEN
        Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Call", SourceServiceCall.FIELDNO("Bill-to Customer No."));

      IF ServiceLocation.GET(SourceServiceCall."Service Location No.") THEN
        IF ServiceLocation."Date Out of Use" <> 0D THEN
          IF CONFIRM(Text004, FALSE) = FALSE THEN EXIT;

      DestinationServiceCall.LOCKTABLE;
      DestinationServiceCall.INSERT(TRUE);
      DestinationServiceCall.TRANSFERFIELDS(SourceServiceCall, FALSE);
      DestinationServiceCall.Origin := DestinationServiceCall.Origin::"4PS Construct";
      DestinationServiceCall."Service Order No." := '';

      DestinationServiceCall.VALIDATE("Global Dimension 1 Code", SourceServiceCall."Global Dimension 1 Code");
      DestinationServiceCall."Expected Date" := 0D;
      DestinationServiceCall."Expected Time" := 0T;
      DestinationServiceCall.Cause := '';
      DestinationServiceCall.Status := DestinationServiceCall.Status::Received;
      DestinationServiceCall.MODIFY(TRUE);

      SourceCommentLine.SETRANGE("Table Name", SourceCommentLine."Table Name"::"Service Call");
      SourceCommentLine.SETRANGE("No.", SourceServiceCall."No.");
      IF SourceCommentLine.FINDSET THEN BEGIN
        REPEAT
          DestinationCommentLine.COPY(SourceCommentLine);
          DestinationCommentLine."No." := DestinationServiceCall."No.";
          DestinationCommentLine.INSERT;
        UNTIL SourceCommentLine.NEXT = 0;
      END;

      SourceServiceText.SETRANGE("Table Name", SourceServiceText."Table Name"::"Service Call");
      SourceServiceText.SETFILTER("Table Field", '<>%1', 75); // Except Solution
      SourceServiceText.SETRANGE("No.", SourceServiceCall."No.");
      IF SourceServiceText.FINDSET THEN BEGIN
        REPEAT
          DestinationServiceText.COPY(SourceServiceText);
          DestinationServiceText."No." := DestinationServiceCall."No.";
          DestinationServiceText.INSERT;
        UNTIL SourceServiceText.NEXT = 0;
      END;

      EXIT(DestinationServiceCall."No.");
    END;

    BEGIN
    END.
  }
}

