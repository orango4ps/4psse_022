OBJECT Codeunit 99000755 CalendarManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShopCalendarHoliday@1000 : Record 99000753;
      CalendarMgt@1001 : Codeunit 7600;

    [External]
    PROCEDURE QtyperTimeUnitofMeasure@4(WorkCenterNo@1000 : Code[20];UnitOfMeasureCode@1001 : Code[10]) : Decimal;
    VAR
      WorkCenter@1002 : Record 99000754;
    BEGIN
      WorkCenter.GET(WorkCenterNo);

      EXIT(TimeFactor(UnitOfMeasureCode) / TimeFactor(WorkCenter."Unit of Measure Code"));
    END;

    [External]
    PROCEDURE TimeFactor@2(UnitOfMeasureCode@1000 : Code[10]) : Decimal;
    VAR
      CapUnitOfMeasure@1001 : Record 99000780;
    BEGIN
      IF UnitOfMeasureCode = '' THEN
        EXIT(1);

      CapUnitOfMeasure.GET(UnitOfMeasureCode);

      CASE CapUnitOfMeasure.Type OF
        CapUnitOfMeasure.Type::Minutes:
          EXIT(60000);
        CapUnitOfMeasure.Type::"100/Hour":
          EXIT(36000);
        CapUnitOfMeasure.Type::Hours:
          EXIT(3600000);
        CapUnitOfMeasure.Type::Days:
          EXIT(86400000);
      END;
      EXIT(1);
    END;

    LOCAL PROCEDURE ShopCalHoliday@3(ShopCalendarCode@1000 : Code[10];Date@1001 : Date;StartingTime@1002 : Time;EndingTime@1003 : Time) : Boolean;
    BEGIN
      IF NOT ShopCalendarHoliday.GET(ShopCalendarCode,Date) THEN
        EXIT(FALSE);
      IF (ShopCalendarHoliday."Ending Time" <= StartingTime) OR (EndingTime <= ShopCalendarHoliday."Starting Time") THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CalculateSchedule@6(CapacityType@1000 : 'Work Center,Machine Center';No@1001 : Code[20];WorkCenterNo@1002 : Code[20];StartingDate@1003 : Date;EndingDate@1004 : Date);
    VAR
      WorkCenter@1005 : Record 99000754;
      CalendarEntry@1006 : Record 99000757;
      CalAbsentEntry@1007 : Record 99000760;
      ShopCalendar@1008 : Record 99000752;
      CalAbsenceMgt@1009 : Codeunit 99000759;
      PeriodDate@1010 : Date;
      CalAbsEntryExists@1012 : Boolean;
      IsHandled@1011 : Boolean;
    BEGIN
      WorkCenter.GET(WorkCenterNo);
      WorkCenter.TESTFIELD("Shop Calendar Code");

      OnBeforeCalculateSchedule(WorkCenter,StartingDate);

      CalendarEntry.LOCKTABLE;
      CalendarEntry.SETRANGE("Capacity Type",CapacityType);
      CalendarEntry.SETRANGE("No.",No);
      CalendarEntry.SETRANGE(Date,StartingDate,EndingDate);
      CalendarEntry.DELETEALL;
      CalAbsentEntry.SETRANGE("Capacity Type",CapacityType);
      CalAbsentEntry.SETRANGE("No.",No);
      CalAbsentEntry.SETRANGE(Date,StartingDate,EndingDate);
      CalAbsentEntry.MODIFYALL(Updated,FALSE);

      ShopCalendar.SETRANGE("Shop Calendar Code",WorkCenter."Shop Calendar Code");
      PeriodDate := StartingDate;
      WHILE PeriodDate <= EndingDate DO BEGIN
        ShopCalendar.SETRANGE(Day,DATE2DWY(PeriodDate,1) - 1);
        OnCalculateScheduleOnSetShopCalendarFilters(ShopCalendar,PeriodDate);
        IF ShopCalendar.FIND('-') THEN
          REPEAT
            IsHandled := FALSE;
            OnCalculateScheduleOnBeforeProcessShopCalendar(ShopCalendar,PeriodDate,StartingDate,EndingDate,IsHandled);
            IF NOT IsHandled THEN BEGIN
              ShopCalendar.TESTFIELD("Starting Time");
              ShopCalendar.TESTFIELD("Ending Time");
              ShopCalendar.TESTFIELD("Work Shift Code");

              CalendarEntry.INIT;
              CalendarEntry."Capacity Type" := CapacityType;
              CalendarEntry."Work Shift Code" := ShopCalendar."Work Shift Code";
              CalendarEntry.Date := PeriodDate;
              CalendarEntry."Starting Time" := 0T;
              CalendarEntry."Ending Time" := 0T;
              CalendarEntry.VALIDATE("No.",No);

              IF NOT ShopCalHoliday(
                   WorkCenter."Shop Calendar Code",
                   CalendarEntry.Date,
                   ShopCalendar."Starting Time",
                   ShopCalendar."Ending Time")
              THEN BEGIN
                InsertCalendarEntry(CalendarEntry,ShopCalendar."Starting Time",ShopCalendar."Ending Time");
              END ELSE
                IF ShopCalendarHoliday."Starting Time" <= ShopCalendar."Starting Time" THEN BEGIN
                  IF ShopCalendarHoliday."Ending Time" < ShopCalendar."Ending Time" THEN
                    InsertCalendarEntry(CalendarEntry,ShopCalendarHoliday."Ending Time",ShopCalendar."Ending Time");
                END ELSE BEGIN
                  InsertCalendarEntry(CalendarEntry,ShopCalendar."Starting Time",ShopCalendarHoliday."Starting Time");
                  IF ShopCalendarHoliday."Ending Time" < ShopCalendar."Ending Time" THEN
                    InsertCalendarEntry(CalendarEntry,ShopCalendarHoliday."Ending Time",ShopCalendar."Ending Time");
                END;
            END;
          UNTIL ShopCalendar.NEXT = 0;
        CalAbsentEntry.SETRANGE(Updated,FALSE);
        IF PeriodDate = StartingDate THEN
          CalAbsEntryExists := NOT CalAbsentEntry.ISEMPTY;
        CalAbsentEntry.SETRANGE(Date,PeriodDate);
        IF CalAbsEntryExists THEN
          WHILE CalAbsentEntry.FINDFIRST DO
            CalAbsenceMgt.UpdateAbsence(CalAbsentEntry);
        CalAbsentEntry.SETRANGE(Updated);
        PeriodDate := PeriodDate + 1;
      END;
    END;

    LOCAL PROCEDURE InsertCalendarEntry@5(VAR CalEntry@1000 : Record 99000757;StartingTime@1001 : Time;EndingTime@1002 : Time);
    BEGIN
      CalEntry."Starting Time" := StartingTime;
      CalEntry.VALIDATE("Ending Time",EndingTime);
      CalEntry.INSERT;
    END;

    [External]
    PROCEDURE CalcTimeDelta@1(EndingTime@1001 : Time;StartingTime@1000 : Time) : Integer;
    BEGIN
      EXIT(CalendarMgt.CalcTimeDelta(EndingTime,StartingTime));
    END;

    [External]
    PROCEDURE CalcTimeSubtract@14(Time@1000 : Time;Value@1001 : Integer) : Time;
    BEGIN
      EXIT(CalendarMgt.CalcTimeSubtract(Time,Value));
    END;

    [External]
    PROCEDURE GetMaxDate@7() : Date;
    BEGIN
      EXIT(99991230D);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalculateSchedule@8(VAR WorkCenter@1000 : Record 99000754;StartingDate@1001 : Date);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalculateScheduleOnBeforeProcessShopCalendar@12(VAR ShopCalendarWorkingDays@1000 : Record 99000752;PeriodDate@1001 : Date;StartingDate@1002 : Date;EndingDate@1003 : Date;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalculateScheduleOnSetShopCalendarFilters@9(VAR ShopCalendarWorkingDays@1000 : Record 99000752;PeriodDate@1001 : Date);
    BEGIN
    END;

    BEGIN
    END.
  }
}

