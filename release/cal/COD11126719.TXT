OBJECT Codeunit 11126719 DSP LIP Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11126715;
    OnRun=BEGIN
            GetGlobalVars;
            GenericWebserviceFunctions.LoadGenericWebserviceSetup(GenericWebserviceSetup);
            GenericWebServiceQueue := Rec;

            CASE "Method Name" OF
              DSPManagement.GetTcLipGetRequestId:              ProcessOutboundRequestId;
              DSPManagement.GetTcLipGetRequestIds:             ProcessOutboundRequestIds;
              DSPManagement.GetTcLipGetRequestDocumentId:      ProcessOutboundRequestDocumentId;
              DSPManagement.GetTcLipGetVersion:                ProcessOutboundGetVersion;
              DSPManagement.GetTcProcessLipServiceOrder:       ProcessServiceOrder;
              DSPManagement.GetTcProcessLipServiceOrderObject: ProcessServiceOrderObject;
            ELSE
              ERROR(Text000, FIELDCAPTION("Method Name"), "Method Name");
            END;
          END;

  }
  CODE
  {
    VAR
      DebugTxt@1100528336 : Text;
      DSPSetup@1100528327 : Record 11126726;
      GenericWebserviceSetup@1100528324 : Record 11126728;
      GenericWebServiceQueue@1100528323 : Record 11126715;
      ServiceSetup@1100528333 : Record 11012800;
      TempBlob@1100528322 : TEMPORARY Record 99008535;
      ConsumedWebServiceMgt@1100528303 : Codeunit 11229310;
      DSPInterfaceWS@1100528320 : Codeunit 11126713;
      DSPManagement@1100528319 : Codeunit 11126714;
      DSPRequestManagement@1100528332 : Codeunit 11126222;
      DotnetFunctions@1100528318 : Codeunit 11126712;
      FileManagement@1100528317 : Codeunit 419;
      GenericWebserviceFunctions@1100528321 : Codeunit 11126711;
      StringFunctions@1100528316 : Codeunit 11012273;
      XMLDOMManagement@1100528315 : Codeunit 6224;
      PrefEntity@1100528314 : Text;
      PrefPull@1100528335 : Text;
      PrefRequest@1100528313 : Text;
      RootElement@1100528312 : Text;
      RootElementNamespace@1100528311 : Text;
      RecId@1100528310 : RecordID;
      EmptyRecId@1100528331 : RecordID;
      RecRef@1100528309 : RecordRef;
      DnXmlDocument@1100528308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlNamespaceManager@1100528307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      DnXmlNamespaceManagerLIP@1100528334 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      AnswerTxt@1100528305 : TextConst 'ENU=Answer: %1';
      DisciplineCodeTxt@1100528343 : TextConst 'ENU=DisciplineCode';
      NoFileContentFound@1100528340 : TextConst 'ENU=No File Content found.';
      NOTTXT@1100528302 : TextConst 'ENU=not';
      NOTXT@1100528301 : TextConst 'ENU=No;SVE=Nej';
      OperatorTxt@1100528344 : TextConst 'ENU=OperatorCode';
      QuestionCodeTxt@1100528306 : TextConst 'ENU=Question Code: %1';
      QuestionTxt@1100528304 : TextConst 'ENU=Question: %1';
      RequestTxt@1100528328 : TextConst 'ENU=Request ID: %1';
      Text000@1100528300 : TextConst 'ENU=%1 %2 is not implemented.';
      DnXmlRequest@1100528330 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlResponse@1100528329 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Text001@1100528326 : TextConst 'ENU=%1 %2 not found in Table %3.';

    PROCEDURE ProcessRequestId2@1100528320(VAR TempBlob@1100528300 : TEMPORARY Record 99008535;ConsumedWebServiceLine@1100528301 : Record 11229798;EntryNo@1100528303 : BigInteger;MessageVersion@1100528302 : Text);
    BEGIN
      GetGlobalVars;
      DSPSetup.TESTFIELD("Debug Lip", TRUE);
      DnXmlResponse := DnXmlResponse.XmlDocument;
      DotnetFunctions.DeSerializeFromBlob(TempBlob, DnXmlResponse);
      GenericWebServiceQueue.GET(EntryNo);
      ProcessRequestId(ConsumedWebServiceLine, MessageVersion);
    END;

    PROCEDURE TestLipConnector@1100528325();
    VAR
      ConsumedWebServiceLine@1100528300 : Record 11229798;
      DSPAgreementSettings@1100528301 : Record 11126725;
      GenericWebServiceQueueNew@1100528303 : Record 11126715;
      EntryNo@1100528302 : BigInteger;
    BEGIN
      DSPAgreementSettings.SETFILTER("Consumed Web Service Code", '<>%1', '');
      DSPAgreementSettings.FINDFIRST;
      ConsumedWebServiceLine.SETRANGE("Web Service Code", DSPAgreementSettings."Consumed Web Service Code");
      ConsumedWebServiceLine.FINDFIRST;

      EntryNo := CreateNewTask(DSPManagement.GetTcLipGetVersion, EmptyRecId, 2, COMPANYNAME);
      GenericWebServiceQueueNew.GET(EntryNo);
      GenericWebServiceQueueNew.AddParameter(0, 0, ConsumedWebServiceLine."Web Service Code",
        ConsumedWebServiceLine.FIELDCAPTION("Web Service Code"));
    END;

    LOCAL PROCEDURE "---Locals---"@1100528302();
    BEGIN
    END;

    LOCAL PROCEDURE AddAdditionalQuestions@1100528304(ServiceOrder@1100528300 : Record 11012823;BaseXpath@1100528305 : Text);
    BEGIN
      DSPRequestManagement.SetDnXmlDocument(DnXmlDocument);
      DSPRequestManagement.AddAdditionalQuestions(ServiceOrder, BaseXpath);
    END;

    LOCAL PROCEDURE CreateDisciplineObject@1100528327(DisciplineCode@1100528302 : Code[20];OperatorCode@1100528301 : Text) : Boolean;
    VAR
      DSPLIPDisciplineOperator@1100528300 : Record 11126729;
    BEGIN
      EXIT(DSPRequestManagement.CreateDisciplineObject(DisciplineCode, OperatorCode));
    END;

    LOCAL PROCEDURE CreateDocument@1100528310();
    VAR
      FileSystemOnPremiseSetup@1100528312 : Record 11125739;
      DocumentProperties@1100528311 : Record 11012746;
      FileManagement@1100528310 : Codeunit 419;
      BasePath@1100528300 : Text;
      FullFilePath@1100528306 : Text;
      DnConvert@1100528305 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      DnFile@1100528304 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
    BEGIN
      FileSystemOnPremiseSetup.GET;
      FileSystemOnPremiseSetup.TESTFIELD("Default Ext. Doc. Directory");

      FullFilePath := STRSUBSTNO('%1%2_%3_%4_%5', FileSystemOnPremiseSetup."Default Ext. Doc. Directory",
         StringFunctions.ReplaceString(FORMAT(RecId), ': ', '-'),
        XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="BijlageID"]'),
        XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="NetbeheerderCode"]'),
        XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="Bestandsnaam"]'));
      IF (FILE.EXISTS(FullFilePath)) THEN BEGIN
        FILE.ERASE(FullFilePath);
      END;

      IF (XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="File"]') = '') THEN
        DnFile.WriteAllBytes(FullFilePath,
          DnConvert.FromBase64String(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="File"]')));

      DocumentProperties.INIT;
      DocumentProperties."External Document" := TRUE;
      DocumentProperties."Storage Type" := DocumentProperties."Storage Type"::"File System on Premise";
      DocumentProperties.File := FullFilePath;
      DocumentProperties."Document No." := XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="BijlageID"]');
      DocumentProperties.Subject := XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="VraagCode"]');
      DocumentProperties."File Extension" := FileManagement.GetExtension(DocumentProperties.File);
      DocumentProperties.Description := XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="Omschrijving"]');
      DocumentProperties."Document Type" := DSPSetup."Default Lip Document Type";
      DocumentProperties.INSERT(TRUE);

      DocumentProperties.CreateDocumentLink(GenericWebServiceQueue."Related Record ID");
    END;

    LOCAL PROCEDURE CreateNewTask@1100525003(MethodName@1100525001 : Text;RelatedRecordId@1100529900 : RecordID;DirectionIn@1100529901 : Option;CompanyNameIn@1100528300 : Text) : BigInteger;
    VAR
      EntryNo@1100528301 : BigInteger;
    BEGIN
      EXIT(DSPManagement.CreateNewTask(MethodName, RelatedRecordId, DirectionIn, CompanyNameIn));
    END;

    LOCAL PROCEDURE CreateOphalenAanvraagIdsRequest@1100525007(VAR OphalenAanvraagIdsRequest@1100525000 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagIdsRequest";HeaderType@1100525001 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType");
    BEGIN
      OphalenAanvraagIdsRequest := OphalenAanvraagIdsRequest.OphalenAanvraagIdsRequest;
      OphalenAanvraagIdsRequest.Header(HeaderType);
    END;

    LOCAL PROCEDURE CreateOphalenAanvraagRequest@1100525011(VAR OphalenAanvraagRequest@1100525000 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagRequest";HeaderType@1100525001 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";AanvraagID@1100525002 : Code[10]);
    BEGIN
      OphalenAanvraagRequest := OphalenAanvraagRequest.OphalenAanvraagRequest;
      OphalenAanvraagRequest.Header(HeaderType);
      OphalenAanvraagRequest.AanvraagID := AanvraagID;
    END;

    LOCAL PROCEDURE CreateOphalenBijlageIdsRequest@1100525012(VAR OphalenBijlageIdsRequest@1100525000 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenBijlageIdsRequest";HeaderType@1100525001 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";AanvraagID@1100525002 : Code[20]);
    BEGIN
      OphalenBijlageIdsRequest := OphalenBijlageIdsRequest.OphalenBijlageIdsRequest;
      OphalenBijlageIdsRequest.Header(HeaderType);
      OphalenBijlageIdsRequest.AanvraagID := AanvraagID;
    END;

    LOCAL PROCEDURE CreateOphalenBijlageRequest@1100525014(VAR OphalenBijlageRequest@1100525000 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenBijlageRequest";HeaderType@1100525001 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";BijlageID@1100525002 : Code[10]);
    BEGIN
      OphalenBijlageRequest := OphalenBijlageRequest.OphalenBijlageRequest;
      OphalenBijlageRequest.Header(HeaderType);
      OphalenBijlageRequest.BijlageID := BijlageID;
    END;

    LOCAL PROCEDURE CreateRequest@1100525041(VAR DSPLIPRequest@1100528301 : Record 11126755;WebServiceCode@1100528300 : Code[20]);
    BEGIN
      DSPLIPRequest.INIT;
      DSPLIPRequest."Message Version" := LOWERCASE(XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="MessageVersion"]'));

      DSPLIPRequest."Entry No." := 0;
      DSPLIPRequest."Message Version" := LOWERCASE(XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="MessageVersion"]'));
      DSPLIPRequest."Sender Id" := XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="SenderID"]');
      DSPLIPRequest."Receipient Id" := XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="RecipientID"]');
      DSPLIPRequest."Company Name" := DSPManagement.GetCompanyNameByServiceCode(WebServiceCode);
      DSPLIPRequest."Request Id" := XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="AanvraagID"]');
      DSPLIPRequest."E-Mail" := XMLDOMManagement.FindNodeText(DnXmlResponse,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="Emailadres"]');
      DSPLIPRequest.Phone := XMLDOMManagement.FindNodeText(DnXmlResponse,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="Telefoonnummer"]');
      DSPLIPRequest."Mobile Phone" := XMLDOMManagement.FindNodeText(DnXmlResponse,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="TelefoonnummerMobiel"]');
      DSPLIPRequest.Principal := XMLDOMManagement.FindNodeText(DnXmlResponse,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="Bedrijfsnaam"]');
      EVALUATE(DSPLIPRequest."Request Version", XMLDOMManagement.FindNodeText(DnXmlResponse,
        '//*[local-name()="AanvraagVersie"]'), 9);
      DSPLIPRequest."Service Area Contract Code" :=
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="VerzorgingsgebiedContractCode"]');

      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      DSPLIPRequest."Xml Message" := GenericWebServiceQueue."Xml Message";

      DSPLIPRequest.INSERT(TRUE);

      CreateRequestLines(DSPLIPRequest);
    END;

    LOCAL PROCEDURE CreateRequestLines@1100528312(VAR DSPLIPRequest@1100528301 : Record 11126755);
    VAR
      DSPLIPRequestLine@1100528306 : Record 11126756;
      BaseXpath@1100528305 : Text;
      BaseXpath2@1100528302 : Text;
      Counter@1100528300 : Integer;
      Counter2@1100528307 : Integer;
      DisciplineCode@1100528309 : Text;
      OperatorCode@1100528303 : Text;
      DnXmlNodeList@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      DnXmlNodeList2@1100528308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      BaseXpath := '//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"]';
      IF (XMLDOMManagement.FindNodes(DnXmlResponse, BaseXpath, DnXmlNodeList)) THEN BEGIN
        FOR Counter := 0 TO DnXmlNodeList.Count - 1 DO BEGIN
          BaseXpath := STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]', Counter + 1);
          IF (XMLDOMManagement.FindNodes(DnXmlResponse,
            BaseXpath + '/*[local-name()="Produkten"]/*[local-name()="Product"]', DnXmlNodeList2))
          THEN BEGIN
            FOR Counter2 := 0 TO DnXmlNodeList2.Count - 1 DO BEGIN
              BaseXpath2 := BaseXpath + STRSUBSTNO('/*[local-name()="Produkten"]/*[local-name()="Product"][%1]', Counter2 + 1);

              DisciplineCode := XMLDOMManagement.FindNodeText(DnXmlResponse, BaseXpath2 + '/*[local-name()="DisciplineCode"]');
              OperatorCode := XMLDOMManagement.FindNodeText(DnXmlResponse, BaseXpath2 + '/*[local-name()="NetbeheerderCode"]');
              IF (CreateDisciplineObject(DisciplineCode, OperatorCode)) THEN BEGIN
                IF (NOT DSPLIPRequestLine.GET(DSPLIPRequest."Entry No.", Counter + 1, Counter2 + 1)) THEN BEGIN
                  DSPLIPRequestLine.INIT;
                  DSPLIPRequestLine."Entry No." := DSPLIPRequest."Entry No.";
                  DSPLIPRequestLine."Connection Object Seq No." := Counter + 1;
                  DSPLIPRequestLine."Product Seq No." := Counter2 + 1;
                  DSPLIPRequestLine."Company Name" := DSPLIPRequest."Company Name";
                  DSPLIPRequestLine.INSERT(TRUE);
                END;

                DSPLIPRequestLine."Connection Object Id" := DSPManagement.GetConnectionObjectId(
                  XMLDOMManagement.FindNodeText(DnXmlResponse, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]'),
                  XMLDOMManagement.FindNodeText(DnXmlResponse, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
                  XMLDOMManagement.FindNodeText(DnXmlResponse, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="HuisnummerToevoeging"]'));

                DSPLIPRequestLine.Discipline := DSPManagement.GetDiscipline(DisciplineCode, OperatorCode);
                DSPLIPRequestLine.Operator := DSPManagement.GetOperator(OperatorCode);

                IF (DSPManagement.ExistServiceOrder(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id")) THEN  BEGIN
                  DSPLIPRequestLine."Service Order No." := DSPManagement.GetServiceOrderNo(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id");
                  IF (DSPManagement.ExistLipServiceOrderObject(DSPLIPRequestLine, DSPLIPRequestLine.Operator)) THEN
                    DSPLIPRequestLine."Object No." := DSPManagement.GetLipServiceOrderObjectNo(DSPLIPRequestLine);
                END;
                DSPLIPRequestLine.MODIFY(TRUE);
              END;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateTaskDocumentId@1100528308(ConsumedWebServiceLine@1100528305 : Record 11229798;DSPLIPRequest@1100528300 : Record 11126755);
    VAR
      GenericWebServiceQueueNew@1100528303 : Record 11126715;
      EntryNo@1100528302 : BigInteger;
      Counter@1100528301 : Integer;
      DnXmlNodeList@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      IF (XMLDOMManagement.FindNodes(DnXmlResponse, '//*[local-name()="Bijlagen"]/*[local-name()="Bijlage"]', DnXmlNodeList))
      THEN BEGIN
        FOR Counter := 0 TO DnXmlNodeList.Count - 1 DO BEGIN
          EntryNo := CreateNewTask(DSPManagement.GetTcLipGetRequestDocumentId, DSPLIPRequest.RECORDID, 2, DSPLIPRequest."Company Name");
          GenericWebServiceQueueNew.GET(EntryNo);
          GenericWebServiceQueueNew.AddParameter(0, 0, ConsumedWebServiceLine."Web Service Code",
            ConsumedWebServiceLine.FIELDCAPTION("Web Service Code"));
          GenericWebServiceQueueNew.AddParameter(0, 1,
            XMLDOMManagement.FindNodeText(DnXmlNodeList.Item(Counter), './/*[local-name()="BijlageID"]'),
            STRSUBSTNO('%1: %2', DSPManagement.GetTcLipGetRequestDocumentId, Counter + 1));
        END;
      END;
    END;

    LOCAL PROCEDURE CreateTasksRequestId@1100528322(ConsumedWebServiceLine@1100528304 : Record 11229798;MessageVersion@1100528303 : Text);
    VAR
      GenericWebServiceQueueNew@1100528301 : Record 11126715;
      DSPLIPRequest@1100528306 : Record 11126755;
      EntryNo@1100528300 : BigInteger;
      Counter@1100528305 : Integer;
      RequestId@1100528307 : Text;
      DnXmlNodeList@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      XMLDOMManagement.FindNodes(DnXmlResponse, '//*[local-name()="AanvraagID"]', DnXmlNodeList);
      FOR Counter := 0 TO DnXmlNodeList.Count - 1 DO BEGIN
       RequestId := XMLDOMManagement.FindNodeText(DnXmlNodeList.Item(Counter), '.');
        IF (NOT GenericWebServiceQueueNew.CheckQueueExistsInclMethodNameAndParameter(DSPManagement.GetTcLipGetRequestId,
            COMPANYNAME, EmptyRecId, 0, 2, RequestId, FALSE))
        THEN BEGIN
          EntryNo := CreateNewTask(DSPManagement.GetTcLipGetRequestId, EmptyRecId, 2, COMPANYNAME);
          GenericWebServiceQueueNew.GET(EntryNo);
          GenericWebServiceQueueNew.AddParameter(0, 0, ConsumedWebServiceLine."Web Service Code",
            ConsumedWebServiceLine.FIELDCAPTION("Web Service Code"));
          GenericWebServiceQueueNew.AddParameter(0, 1, MessageVersion, DSPLIPRequest.FIELDCAPTION("Message Version"));
          GenericWebServiceQueueNew.AddParameter(0, 2, RequestId,
            STRSUBSTNO('%1: %2', DSPLIPRequest.FIELDCAPTION("Request Id"), Counter + 1));
        END;
      END;
    END;

    LOCAL PROCEDURE CreateTaskServiceObjects@1100528315(DSPLIPRequest@1100528300 : Record 11126755;DSPLIPRequestLine@1100528307 : Record 11126756;ConsumedWebServiceLine@1100528303 : Record 11229798);
    VAR
      GenericWebServiceQueueNew@1100528302 : Record 11126715;
      BaseXpath@1100528304 : Text;
      BaseXpath2@1100528306 : Text;
      EntryNo@1100528301 : BigInteger;
    BEGIN
      BaseXpath := STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]',
        DSPLIPRequestLine."Connection Object Seq No.");
      BaseXpath2 := STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]/*[local-name()="Produkten"]/*[local-name()="Product"][%2]',
        DSPLIPRequestLine."Connection Object Seq No.", DSPLIPRequestLine."Product Seq No.");

      EntryNo := CreateNewTask(DSPManagement.GetTcProcessLipServiceOrderObject, DSPLIPRequest.RECORDID, 1, DSPLIPRequest."Company Name");
      GenericWebServiceQueueNew.GET(EntryNo);
      GenericWebServiceQueueNew.AddParameter(0, 0, ConsumedWebServiceLine."Web Service Code",
        ConsumedWebServiceLine.FIELDCAPTION("Web Service Code"));
      GenericWebServiceQueueNew.AddParameter(0, 1, BaseXpath, 'AansluitObject Xpath');
      GenericWebServiceQueueNew.AddParameter(0, 2, BaseXpath2, 'Product Xpath');
      GenericWebServiceQueueNew.AddParameter(0, 11, FORMAT(DSPLIPRequestLine."Connection Object Seq No."), 'AansluitObject SeqNo');
      GenericWebServiceQueueNew.AddParameter(0, 21, FORMAT(DSPLIPRequestLine."Product Seq No."), 'Product SeqNo');
    END;

    [External]
    PROCEDURE DetermineDspRequestProcessType@1100528829(DSPLIPRequest@1100528301 : Record 11126755;DSPLIPRequestLine@1100528300 : Record 11126756) : Text;
    BEGIN
      IF (DSPManagement.ExistServiceOrder(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id")) THEN
        EXIT(DSPManagement.GetTcProcessLipServiceOrderObject);
      EXIT(DSPManagement.GetTcProcessLipServiceOrder);
    END;

    LOCAL PROCEDURE DspObjectSpecificationSettingExist@1100528823(DSPLIPRequestLine@1100528301 : Record 11126756;SpecCode@1100528804 : Code[20];VAR XpathExpression@1100528300 : Text) : Boolean;
    VAR
      DSPLIPRequest@1100528302 : Record 11126755;
      DSPObjSpecsSettings@1100528803 : Record 11126721;
    BEGIN
      EXIT(DSPRequestManagement.DspObjectSpecificationSettingExist(DSPLIPRequestLine, SpecCode, XpathExpression));
    END;

    LOCAL PROCEDURE FillOrderTypeDsp@1100528317(VAR OrderType@1100528300 : Text;ProcessType@1100528301 : Code[2]);
    BEGIN
      DSPRequestManagement.FillOrderTypeDsp(OrderType, ProcessType);
    END;

    LOCAL PROCEDURE GetGlobalVars@1100528301();
    BEGIN
      DSPSetup.GET;
      DSPSetup.TESTFIELD("Dsp Active", TRUE);
      DSPSetup.TESTFIELD("Default Company");

      DSPSetup.TESTFIELD("Default Lip Document Type");
      DSPSetup.TESTFIELD("Status Request Created");

      DSPManagement.CreateXmlNamespaceManager(DnXmlNamespaceManager);
    END;

    LOCAL PROCEDURE GetFirstPossibleStartingDate@1100528311(BaseXpath@1100528302 : Text) : Date;
    VAR
      WishWeek@1100528300 : Integer;
      WishYear@1100528301 : Integer;
    BEGIN
      DSPRequestManagement.SetDnXmlDocument(DnXmlDocument);
      EXIT(DSPRequestManagement.GetFirstPossibleStartingDate(BaseXpath));
    END;

    LOCAL PROCEDURE ProcessOutboundRequestId@1100528323();
    VAR
      ConsumedWebService@1100528301 : Record 11229797;
      ConsumedWebServiceLine@1100528300 : Record 11229798;
      MessageVersion@1100528302 : Text;
      OphalenAanvraagRequest@1100528306 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagRequest";
      OphalenAanvraagResponse@1100528305 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagResponse";
      HeaderType@1100528304 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";
      ObjectReceived@1100528303 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      GenericWebServiceQueue.TESTFIELD(Direction, GenericWebServiceQueue.Direction::Outbound);
      MessageVersion := GenericWebServiceQueue.GetParameter(0, 1);

      SetLipNamespaces(MessageVersion);
      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;

      IF (NOT ConsumedWebService.GET(GenericWebServiceQueue.GetParameter(0, 0))) THEN
        ERROR(Text000, ConsumedWebService.TABLECAPTION, DSPManagement.GetLipServiceName(MessageVersion));
      ConsumedWebServiceLine.GET(ConsumedWebService.Code, DSPManagement.GetSeqNoOphalenAanvraag);

      ConsumedWebServiceMgt.CreateRequest(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", DnXmlRequest,
        DnXmlNamespaceManagerLIP);
      SetRequestIdCommonBody(ConsumedWebServiceLine, MessageVersion);
      SetRequestIdBody(ConsumedWebServiceLine, MessageVersion, GenericWebServiceQueue.GetParameter(0, 1));

      SetHeaderType(HeaderType, ConsumedWebService.Description, MessageVersion);
      CreateOphalenAanvraagRequest(OphalenAanvraagRequest, HeaderType, GenericWebServiceQueue.GetParameter(0, 2));
      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;
      ObjectReceived := ObjectReceived.Object;

      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(OphalenAanvraagRequest, 'C:\Users\Public\Documents\OphalenAanvraagRequest.xml');
      ConsumedWebServiceMgt.SendCwsPullService(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.",
        OphalenAanvraagRequest, DnXmlRequest, DnXmlResponse,
        DnXmlNamespaceManagerLIP, STRSUBSTNO('%1 %2: %3', DSPManagement.GetTcDsp, ConsumedWebServiceLine."Method Name",
          GenericWebServiceQueue."Entry No."),
        ObjectReceived, GenericWebServiceQueue."Method Name");
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(DnXmlResponse, 'C:\Users\Public\Documents\OphalenAanvraagIdsResponse.xml');
      ConsumedWebServiceMgt.CheckResponseSoapFault(DnXmlResponse, DnXmlNamespaceManager);
      DSPManagement.CheckResponseFault(DnXmlResponse);

      DotnetFunctions.SerializeToBlob(TempBlob, DnXmlResponse);
      GenericWebServiceQueue."Xml Message" := TempBlob.Blob;
      GenericWebServiceQueue.MODIFY(TRUE);

      ProcessRequestId(ConsumedWebServiceLine, MessageVersion);
    END;

    LOCAL PROCEDURE ProcessOutboundRequestIds@1100528305();
    VAR
      ConsumedWebService@1100528303 : Record 11229797;
      ConsumedWebServiceLine@1100528302 : Record 11229798;
      DSPLIPRequest@1100528300 : Record 11126755;
      MessageVersion@1100528301 : Text;
      OphalenAanvraagIdsRequest@1100528305 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagIdsRequest";
      OphalenAanvraagIdsResponse@1100528304 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagIdsResponse";
      HeaderType@1100528307 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";
      ObjectReceived@1100528306 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      GenericWebServiceQueue.TESTFIELD(Direction, GenericWebServiceQueue.Direction::Outbound);
      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;
      MessageVersion := DSPManagement.GetLipVersionFirst;

      SetLipNamespaces(MessageVersion);

      IF (NOT ConsumedWebService.GET(GenericWebServiceQueue.GetParameter(0, 0))) THEN
        ERROR(Text000, ConsumedWebService.TABLECAPTION, GenericWebServiceQueue.GetParameter(0, 0));
      ConsumedWebServiceLine.GET(ConsumedWebService.Code, DSPManagement.GetSeqNoOphalenAanvraagIds);

      SetHeaderType(HeaderType, ConsumedWebService.Description, MessageVersion);
      CreateOphalenAanvraagIdsRequest(OphalenAanvraagIdsRequest, HeaderType);
      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;
      ObjectReceived := ObjectReceived.Object;

      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(OphalenAanvraagIdsRequest, 'C:\Users\Public\Documents\OphalenAanvraagIdsRequest.xml');
      ConsumedWebServiceMgt.SendCwsPullService(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.",
        OphalenAanvraagIdsRequest, DnXmlRequest, DnXmlResponse,
        DnXmlNamespaceManagerLIP, STRSUBSTNO('%1 %2: %3', DSPManagement.GetTcDsp, ConsumedWebServiceLine."Method Name",
          GenericWebServiceQueue."Entry No."),
        ObjectReceived, GenericWebServiceQueue."Method Name");
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(DnXmlResponse, 'C:\Users\Public\Documents\OphalenAanvraagIdsResponse.xml');
      ConsumedWebServiceMgt.CheckResponseSoapFault(DnXmlResponse, DnXmlNamespaceManager);
      DSPManagement.CheckResponseFault(DnXmlResponse);

      CreateTasksRequestId(ConsumedWebServiceLine, MessageVersion);

      DotnetFunctions.SerializeToBlob(TempBlob, DnXmlResponse);
      GenericWebServiceQueue."Xml Message" := TempBlob.Blob;
      GenericWebServiceQueue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ProcessOutboundRequestDocumentId@1100528300();
    VAR
      DSPLIPRequest@1100528303 : Record 11126755;
      ConsumedWebService@1100528300 : Record 11229797;
      ConsumedWebServiceLine@1100528301 : Record 11229798;
      ConsumedWebServiceMgt@1100528302 : Codeunit 11229310;
      MessageVersion@1100528304 : Text;
      OphalenBijlageRequest@1100528308 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenBijlageRequest";
      OphalenBijlageResponse@1100528307 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenBijlageResponse";
      HeaderType@1100528306 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";
      ObjectReceived@1100528305 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      GenericWebServiceQueue.TESTFIELD(Direction, GenericWebServiceQueue.Direction::Outbound);
      DSPLIPRequest.GET(GenericWebServiceQueue."Related Record ID");
      IF (NOT ConsumedWebService.GET(GenericWebServiceQueue.GetParameter(0, 0))) THEN
        ERROR(Text000, ConsumedWebService.TABLECAPTION, GenericWebServiceQueue.GetParameter(0, 0));
      ConsumedWebServiceLine.GET(ConsumedWebService.Code, DSPManagement.GetSeqNoOphalenBijlage);

      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;
      MessageVersion := DSPManagement.GetLipVersionFirst;

      SetHeaderType(HeaderType, ConsumedWebService.Description, MessageVersion);
      CreateOphalenBijlageRequest(OphalenBijlageRequest, HeaderType, GenericWebServiceQueue.GetParameter(0, 1));
      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;
      ObjectReceived := ObjectReceived.Object;

      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(OphalenBijlageRequest, 'C:\Users\Public\Documents\OphalenBijlageRequest.xml');
      ConsumedWebServiceMgt.SendCwsPullService(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.",
        OphalenBijlageRequest, DnXmlRequest, DnXmlResponse,
        DnXmlNamespaceManagerLIP, STRSUBSTNO('%1 %2: %3', DSPManagement.GetTcDsp, ConsumedWebServiceLine."Method Name",
          GenericWebServiceQueue."Entry No."),
        ObjectReceived, GenericWebServiceQueue."Method Name");
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(DnXmlResponse, 'C:\Users\Public\Documents\OphalenBijlageResponse.xml');
      ConsumedWebServiceMgt.CheckResponseSoapFault(DnXmlResponse, DnXmlNamespaceManager);
      DSPManagement.CheckResponseFault(DnXmlResponse);

      DotnetFunctions.SerializeToBlob(TempBlob, DnXmlResponse);
      GenericWebServiceQueue."Xml Message" := TempBlob.Blob;
      GenericWebServiceQueue.MODIFY(TRUE);

      CreateDocument;
    END;

    LOCAL PROCEDURE ProcessOutboundGetVersion@1100528326();
    VAR
      ConsumedWebService@1100528303 : Record 11229797;
      ConsumedWebServiceLine@1100528302 : Record 11229798;
      DSPLIPRequest@1100528300 : Record 11126755;
      MessageVersion@1100528301 : Text;
      OphalenAanvraagIdsRequest@1100528305 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagIdsRequest";
      OphalenAanvraagIdsResponse@1100528304 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.OphalenAanvraagIdsResponse";
      HeaderType@1100528307 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";
      ObjectReceived@1100528306 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      GenericWebServiceQueue.TESTFIELD(Direction, GenericWebServiceQueue.Direction::Outbound);
      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;
      MessageVersion := DSPManagement.GetLipVersionFirst;

      SetLipNamespaces(MessageVersion);

      IF (NOT ConsumedWebService.GET(GenericWebServiceQueue.GetParameter(0, 0))) THEN
        ERROR(Text000, ConsumedWebService.TABLECAPTION, GenericWebServiceQueue.GetParameter(0, 0));
      ConsumedWebServiceLine.GET(ConsumedWebService.Code, DSPManagement.GetSeqNoOphalenAanvraagIds);

      SetHeaderType(HeaderType, ConsumedWebService.Description, MessageVersion);
      DnXmlRequest := DnXmlRequest.XmlDocument;
      DnXmlResponse := DnXmlResponse.XmlDocument;
      ObjectReceived := ObjectReceived.Object;

      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(HeaderType, 'C:\Users\Public\Documents\OphalenVersieRequest.xml');
      ConsumedWebServiceMgt.SendCwsPullService(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.",
        HeaderType, DnXmlRequest, DnXmlResponse,
        DnXmlNamespaceManagerLIP, STRSUBSTNO('%1 %2: %3', DSPManagement.GetTcDsp, ConsumedWebServiceLine."Method Name",
          GenericWebServiceQueue."Entry No."),
        ObjectReceived, GenericWebServiceQueue."Method Name");
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(DnXmlResponse, 'C:\Users\Public\Documents\OphalenVersieResponse.xml');
      ConsumedWebServiceMgt.CheckResponseSoapFault(DnXmlResponse, DnXmlNamespaceManager);
      DSPManagement.CheckResponseFault(DnXmlResponse);

      DotnetFunctions.SerializeToBlob(TempBlob, DnXmlResponse);
      GenericWebServiceQueue."Xml Message" := TempBlob.Blob;
      GenericWebServiceQueue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ProcessRequestId@1100528324(ConsumedWebServiceLine@1100528300 : Record 11229798;MessageVersion@1100528309 : Text);
    VAR
      DSPLIPRequest@1100528302 : Record 11126755;
      DSPLIPRequestLine@1100528303 : Record 11126756;
      GenericWebServiceQueueNew@1100528306 : Record 11126715;
      ConnectionObjectId@1100528304 : Text;
      ClusterId@1100528305 : Text;
      EntryNo@1100528301 : BigInteger;
    BEGIN
      CreateRequest(DSPLIPRequest, ConsumedWebServiceLine."Web Service Code");

      GenericWebServiceQueue."Related Record ID" := DSPLIPRequest.RECORDID;
      GenericWebServiceQueue.MODIFY(TRUE);

      CreateTaskDocumentId(ConsumedWebServiceLine, DSPLIPRequest);

      DSPLIPRequestLine.SETRANGE("Entry No.", DSPLIPRequest."Entry No.");
      IF (DSPLIPRequestLine.FINDSET) THEN BEGIN
        ConnectionObjectId := '';
        ClusterId := '';
        REPEAT
          CASE DetermineDspRequestProcessType(DSPLIPRequest, DSPLIPRequestLine) OF
            DSPManagement.GetTcProcessLipServiceOrder: BEGIN
              IF (ConnectionObjectId <> DSPLIPRequestLine."Connection Object Id") OR
                (ClusterId <> DSPLIPRequest."Request Id")
              THEN BEGIN
                ConnectionObjectId := DSPLIPRequestLine."Connection Object Id";
                ClusterId :=  DSPLIPRequest."Request Id";
                EntryNo := CreateNewTask(DSPManagement.GetTcProcessLipServiceOrder, DSPLIPRequest.RECORDID, 1, DSPLIPRequest."Company Name");
                GenericWebServiceQueueNew.GET(EntryNo);
                GenericWebServiceQueueNew.AddParameter(0, 0, ConsumedWebServiceLine."Web Service Code",
                  ConsumedWebServiceLine.FIELDCAPTION("Web Service Code"));
                GenericWebServiceQueueNew.AddParameter(0, 1,
                  STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]',
                    DSPLIPRequestLine."Connection Object Seq No."), 'AansluitObject Xpath');
              END;
              CreateTaskServiceObjects(DSPLIPRequest, DSPLIPRequestLine, ConsumedWebServiceLine);
            END;
            DSPManagement.GetTcLipGetRequestId: BEGIN
              ERROR(Text000, 'ProcesType', DSPManagement.GetTcLipGetRequestId);
            END;
            DSPManagement.GetTcProcessLipServiceOrderObject: BEGIN
              IF (DSPManagement.ExistServiceOrder(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id")) THEN
                CreateTaskServiceObjects(DSPLIPRequest, DSPLIPRequestLine, ConsumedWebServiceLine);
            END;
          END;
        UNTIL (DSPLIPRequestLine.NEXT = 0);
      END;

      DSPLIPRequest."Processed On" := CURRENTDATETIME;
      DSPLIPRequest.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ProcessServiceOrder@1100528303();
    VAR
      DSPCodeAlphaNum@1100528312 : Record 11126731;
      DSPCodeAlphaNum2@1100528311 : Record 11126731;
      DSPLIPRequest@1100528300 : Record 11126755;
      DSPLIPRequestLine@1100528303 : Record 11126756;
      DSPAgreementSettings@1100528301 : Record 11126725;
      ServiceOrder@1100528302 : Record 11012823;
      ServiceLocation@1100528313 : Record 11012801;
      DocumentLinkManagement@1100528309 : Codeunit 11012401;
      Counter@1100528304 : Integer;
      BaseXpath@1100528305 : Text;
      ConnectionObjectId@1100528307 : Text;
      SourceRecRef@1100528306 : RecordRef;
      TargetRecRef@1100528308 : RecordRef;
    BEGIN
      DSPSetup.GET;
      DSPLIPRequest.GET(GenericWebServiceQueue."Related Record ID");
      DSPLIPRequest.CALCFIELDS("Xml Message");
      TempBlob.Blob := DSPLIPRequest."Xml Message";
      DSPManagement.GetXmlDocument(TempBlob, DnXmlDocument);
      SetLipNamespaces(DSPLIPRequest."Message Version");
      DSPManagement.GetDspAgreementSettings(GenericWebServiceQueue.GetParameter(0, 0), DSPAgreementSettings);
      BaseXpath := GenericWebServiceQueue.GetParameter(0, 1);

      ConnectionObjectId := DSPManagement.GetConnectionObjectId(
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="HuisnummerToevoeging"]'));

      ServiceLocation.SETRANGE("Post Code", XMLDOMManagement.FindNodeText(DnXmlDocument,
        BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]'));
      ServiceLocation.SETRANGE("House No.", XMLDOMManagement.FindNodeText(DnXmlDocument,
        BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'));
      IF (NOT ServiceLocation.FINDFIRST) THEN
        ServiceLocation.INIT;

      DSPLIPRequestLine.SETRANGE("Entry No.", DSPLIPRequest."Entry No.");
      DSPLIPRequestLine.SETRANGE("Connection Object Id", ConnectionObjectId);
      IF (DSPLIPRequestLine.FINDSET(TRUE)) THEN BEGIN
        REPEAT
          IF (NOT ServiceOrder.GET(DSPManagement.GetServiceOrderNo(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id"))) THEN BEGIN
            IF (NOT DSPCodeAlphaNum.GET(2,
                XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="DienstCode"]'),
                XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="SubdienstCode"]')))
            THEN
              DSPCodeAlphaNum.INIT;
            DSPCodeAlphaNum.CALCFIELDS("Sub Code Description");
            IF (NOT DSPCodeAlphaNum2.GET(1,
                XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="ObjectType"]'), ''))
            THEN
              DSPCodeAlphaNum2.INIT;

            ServiceOrder.INIT;
            ServiceOrder.VALIDATE("No.", '');
            ServiceOrder.INSERT(TRUE);

            ServiceOrder.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
            IF (ServiceLocation."No." <> '') THEN
              ServiceOrder.VALIDATE("Service Location No.", ServiceLocation."No.");

            ServiceOrder.Description := COPYSTR(STRSUBSTNO('%1 %2', DSPCodeAlphaNum.Description,
              DSPCodeAlphaNum."Sub Code Description"), 1, MAXSTRLEN(ServiceOrder.Description));
            ServiceOrder."Description 2" := COPYSTR(DSPCodeAlphaNum2.Description, 1,
              MAXSTRLEN(ServiceOrder."Description 2"));
            ServiceOrder."Dsp Connection Object Id" := DSPLIPRequestLine."Connection Object Id";
            ServiceOrder."Dsp Cluster Id" := DSPLIPRequest."Request Id";
            ServiceOrder."Dsp Production Cluster Id" := DSPLIPRequest."Request Id";
            IF (DSPSetup."Default Order Type LIP" <> '') THEN
              ServiceOrder.VALIDATE("Order Type", DSPSetup."Default Order Type LIP");

            ServiceOrder."Post Code" := XMLDOMManagement.FindNodeText(DnXmlDocument,
              BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]');
            ServiceOrder.Address := DSPManagement.GetServiceOrderAddress(
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Straat"]'),
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="HuisnummerToevoeging"]'));
            ServiceOrder.City := XMLDOMManagement.FindNodeText(DnXmlDocument,
              BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Plaats"]');

            ServiceOrder."Contact Name" := DSPManagement.ConstructContactName(
              XMLDOMManagement.FindNodeText(DnXmlDocument,
                '//*[local-name()="Bedrijfsgegevens"]/*[local-name()="ContactPersoon"]/*[local-name()="Aanhef"]'),
              XMLDOMManagement.FindNodeText(DnXmlDocument,
                '//*[local-name()="Bedrijfsgegevens"]/*[local-name()="ContactPersoon"]/*[local-name()="Voorletters"]'),
                '',
              XMLDOMManagement.FindNodeText(DnXmlDocument,
                '//*[local-name()="Bedrijfsgegevens"]/*[local-name()="ContactPersoon"]/*[local-name()="Achternaam"]'));

            ServiceOrder."E-Mail" := XMLDOMManagement.FindNodeText(DnXmlDocument,
              '//*[local-name()="ContactPersoon"]/*[local-name()="Emailadres"]');
            ServiceOrder."Phone No." := XMLDOMManagement.FindNodeText(DnXmlDocument,
              '//*[local-name()="ContactPersoon"]/*[local-name()="TelefoonnummerMobiel"]');
            ServiceOrder."Mobile Phone No." :=  XMLDOMManagement.FindNodeText(DnXmlDocument,
              '//*[local-name()="ContactPersoon"]/*[local-name()="TelefoonnummerMobiel"]');

            ServiceOrder."First Possible Starting Date":= GetFirstPossibleStartingDate(BaseXpath);
            ServiceOrder."Starting Date" :=  ServiceOrder."First Possible Starting Date";

            ServiceOrder."Territory Code" := DSPAgreementSettings."Region Code";
            ServiceOrder."VAT Prod. Posting Group" := DSPSetup."Default VAT Prod. Post. Group";
            ServiceOrder."Global Dimension 1 Code" := DSPAgreementSettings."Global Dimension 1 Code";
            ServiceOrder."Department Code (Other)" := DSPAgreementSettings."Global Dimension 1 Code";
            ServiceOrder.Origin := ServiceOrder.Origin::DSP;

            ServiceOrder.MODIFY(TRUE);
            AddAdditionalQuestions(ServiceOrder, BaseXpath);

            SourceRecRef.GETTABLE(DSPLIPRequest);
            TargetRecRef.GETTABLE(ServiceOrder);
            DocumentLinkManagement.CopyDocLinks(SourceRecRef, TargetRecRef);
          END;

          DSPLIPRequestLine."Service Order No." := ServiceOrder."No.";
          DSPLIPRequestLine."Processed On" := CURRENTDATETIME;
          DSPLIPRequestLine.MODIFY(TRUE);

          DSPManagement.UpdateReferencePoint(ServiceOrder."No.", DSPSetup."Reference Point New Lip Order");
        UNTIL (DSPLIPRequestLine.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE ProcessServiceOrderObject@1100528313();
    VAR
      DSPAssignment@1100528309 : Record 11126740;
      DSPLIPRequest@1100528300 : Record 11126755;
      DSPLIPRequestLine@1100528308 : Record 11126756;
      DSPCodeAlphaNum@1100528314 : Record 11126731;
      DSPCodeAlphaNum2@1100528315 : Record 11126731;
      DSPAgreementSettings@1100528302 : Record 11126725;
      ContractObject@1100528304 : Record 11071702;
      ServiceContract@1100528307 : Record 11012812;
      ServiceObject@1100528305 : Record 11071691;
      ServiceOrder@1100528313 : Record 11012823;
      ServiceOrderObject@1100528303 : Record 11071724;
      BaseXpath@1100528301 : Text;
      BaseXpath2@1100528310 : Text;
      Counter@1100528312 : Integer;
      Counter2@1100528311 : Integer;
      ObjectNo@1100528306 : Code[20];
    BEGIN
      DSPLIPRequest.GET(GenericWebServiceQueue."Related Record ID");
      DSPLIPRequest.CALCFIELDS("Xml Message");
      TempBlob.Blob := DSPLIPRequest."Xml Message";
      DSPManagement.GetXmlDocument(TempBlob, DnXmlDocument);
      SetLipNamespaces(DSPLIPRequest."Message Version");
      DSPManagement.GetDspAgreementSettings(GenericWebServiceQueue.GetParameter(0, 0), DSPAgreementSettings);
      ServiceContract.GET(DSPAgreementSettings."Service Contract No.");

      BaseXpath := GenericWebServiceQueue.GetParameter(0, 1);
      BaseXpath2 := GenericWebServiceQueue.GetParameter(0, 2);
      EVALUATE(Counter, GenericWebServiceQueue.GetParameter(0, 11));
      EVALUATE(Counter2, GenericWebServiceQueue.GetParameter(0, 21));

      DSPLIPRequestLine.GET(DSPLIPRequest."Entry No.", Counter, Counter2);
      DSPLIPRequestLine.TESTFIELD("Service Order No.");
      ObjectNo := DSPLIPRequestLine."Object No.";

      IF (ObjectNo <> '') THEN BEGIN
        ServiceOrderObject.GET(DSPLIPRequestLine."Service Order No.", ObjectNo);
        ServiceObject.GET(DSPLIPRequestLine."Object No.");
      END ELSE BEGIN
        ObjectNo := DSPManagement.GetLipServiceOrderObjectNo(DSPLIPRequestLine);
        IF (ObjectNo <> '') THEN BEGIN
          ServiceOrderObject.GET(DSPLIPRequestLine."Service Order No.", ObjectNo, '');
          ServiceObject.GET(ObjectNo);
        END ELSE BEGIN
          IF (NOT DSPCodeAlphaNum.GET(2,
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="DienstCode"]'),
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="SubdienstCode"]')))
          THEN
            DSPCodeAlphaNum.INIT;
          DSPCodeAlphaNum.CALCFIELDS("Sub Code Description");
          IF (NOT DSPCodeAlphaNum2.GET(1,
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="ObjectType"]'), ''))
          THEN
            DSPCodeAlphaNum2.INIT;

          ServiceObject.INIT;
          ServiceObject."No." := '';
          ServiceObject.INSERT(TRUE);
          ObjectNo := ServiceObject."No.";

          ServiceObject.VALIDATE("Standard Object No.", DSPManagement.GetDspServiceObjectStandardObjectCode(DSPLIPRequestLine.Discipline));
          ServiceObject.Description := COPYSTR(STRSUBSTNO('%1 %2', DSPCodeAlphaNum.Description,
            DSPCodeAlphaNum."Sub Code Description"), 1, MAXSTRLEN(ServiceObject.Description));
          ServiceObject."Description 2" := COPYSTR(DSPCodeAlphaNum2.Description, 1,
            MAXSTRLEN(ServiceObject."Description 2"));
          ServiceObject.Status := DSPSetup."Status Request Created";
          ServiceObject."Dsp Cluster Id" := DSPLIPRequest."Request Id";
          ServiceObject."Dsp Connection Object Id" := DSPLIPRequestLine."Connection Object Id";
          ServiceObject."Dsp Origin" := ServiceObject."Dsp Origin"::LIP;
          ServiceObject."Dsp Discipline" := DSPLIPRequestLine.Discipline;
          ServiceObject."Dsp Operator" := DSPLIPRequestLine.Operator;
          ServiceObject."Dsp Version No." := DSPLIPRequest."Message Version";
          ServiceObject.MODIFY(TRUE);

          ContractObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
          ContractObject."Service Object No." := ObjectNo;
          ContractObject.INSERT(TRUE);

          ServiceOrderObject.INIT;
          ServiceOrderObject.VALIDATE("Service Order No.", DSPLIPRequestLine."Service Order No.");
          ServiceOrderObject."Object No." := ObjectNo;
          ServiceOrderObject."Maintenance Scheme" := '';
          ServiceOrderObject.INSERT(TRUE);

          ServiceOrderObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
          ServiceOrderObject.VALIDATE("Standard Object No.", ServiceObject."Standard Object No.");
          ServiceOrderObject.MODIFY(TRUE);

          ServiceOrder.GET(ServiceOrderObject."Service Order No.");
          ServiceOrder."Dsp Order Type" := UpdateOrderTypeDsp(ServiceOrder."Dsp Order Type", DSPLIPRequestLine.Discipline);
          ServiceOrder.MODIFY(TRUE);
        END;
      END;

      DSPManagement.GetDspAssignmentByServiceOrderNoObjectNo(DSPLIPRequestLine."Service Order No.", ObjectNo, DSPAssignment);

      DSPLIPRequestLine."Assignment Id" := DSPAssignment."Assignment Id";
      DSPLIPRequestLine."Object No." := ObjectNo;
      DSPLIPRequestLine.MODIFY(TRUE);

      UpdateObjectSpecificationsValues(DSPLIPRequestLine, ServiceOrderObject, Counter, Counter2);
    END;

    LOCAL PROCEDURE SetHeaderType@1100525038(VAR HeaderType@1100525000 : DotNet "'DSP-PullService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DSP_PullService.WebReference.HeaderType";SenderId@1100528301 : Text;MessageVersion@1100528300 : Text);
    BEGIN
      HeaderType := HeaderType.HeaderType;
      HeaderType.MessageID := CREATEGUID;
      HeaderType.CorrelationID := CREATEGUID;
      HeaderType.RepeatCount := 0;
      HeaderType.SenderID := COPYSTR(SenderId, 1, 10);
      HeaderType.RecipientID := DSPManagement.GetTcLip;
      HeaderType.CreateTime := CREATEDATETIME(TODAY,TIME);
      HeaderType.SendTime := CREATEDATETIME(TODAY,TIME);
      HeaderType.MessageVersion := MessageVersion;
    END;

    LOCAL PROCEDURE SetLipNamespaces@1100528309(MessageVersion@1100528300 : Text);
    BEGIN
      PrefRequest := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetTcPrefixAanvraagService(MessageVersion));
      PrefEntity := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetTcPrefixEntiteiten(MessageVersion));
      PrefPull := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetTcPrefixPullService(MessageVersion));
    END;

    LOCAL PROCEDURE SetRequestDocumentBody@1100528307(ConsumedWebServiceLine@1100528303 : Record 11229798;VersionTxt@1100528305 : Text);
    VAR
      DSPLIPRequest@1100528300 : Record 11126755;
      Counter@1100528301 : Integer;
      DnXmlNode@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlRootNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      DSPLIPRequest.GET(GenericWebServiceQueue."Related Record ID");
      DSPLIPRequest.CALCFIELDS("Xml Message");
      TempBlob.Blob := DSPLIPRequest."Xml Message";
      DSPManagement.GetXmlDocument(TempBlob, DnXmlDocument);

      EVALUATE(Counter, GenericWebServiceQueue.GetParameter(0, 0));
      XMLDOMManagement.FindNode(DnXmlRequest, STRSUBSTNO('//*[local-name()="%1"]', ConsumedWebServiceLine."Request Root Tag"), DnXmlRootNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'BijlageID',
        XMLDOMManagement.FindNodeText(DnXmlDocument, STRSUBSTNO('//*[local-name()="Bijlagen"]/*[local-name()="Bijlage"][%1]/*[local-name()="BijlageID"]', Counter)),
        DSPManagement.GetTcPrefixPullService(VersionTxt), DnXmlNode);
    END;

    LOCAL PROCEDURE SetRequestIdCommonBody@1100528329(VAR ConsumedWebServiceLine@1100528305 : Record 11229798;VersionTxt@1100528300 : Text);
    VAR
      DnXmlNode@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlRootNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDOMManagement.FindNode(DnXmlRequest, STRSUBSTNO('//*[local-name()="%1"]', ConsumedWebServiceLine."Request Root Tag"), DnXmlRootNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'Header', '', DSPManagement.GetTcPrefixPullService(VersionTxt), DnXmlRootNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'MessageID', CREATEGUID, DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'CorrelationID', CREATEGUID, DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'RepeatCount', '0', DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'SenderID', 'SenderId', DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'RecipientID', 'RecipientId', DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'CreateTime', FORMAT(CURRENTDATETIME, 0, 9), DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'SendTime', FORMAT(CURRENTDATETIME, 0, 9), DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'MessageVersion', VersionTxt, DSPManagement.GetTcPrefixEntiteiten(VersionTxt), DnXmlNode);
    END;

    LOCAL PROCEDURE SetRequestIdBody@1100528321(VAR ConsumedWebServiceLine@1100528305 : Record 11229798;VersionTxt@1100528300 : Text;RequestId@1100528301 : Text);
    VAR
      DnXmlNode@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlRootNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDOMManagement.FindNode(DnXmlRequest, STRSUBSTNO('//*[local-name()="%1"]', ConsumedWebServiceLine."Request Root Tag"), DnXmlRootNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'AanvraagID', RequestId, DSPManagement.GetTcPrefixPullService(VersionTxt), DnXmlNode);
    END;

    LOCAL PROCEDURE UpdateObjectSpecificationsValues@1100525078(DSPLIPRequestLine@1100525001 : Record 11126756;ServiceOrderObject@1100528800 : Record 11071724;Counter@1100528300 : Integer;Counter2@1100528301 : Integer) : Boolean;
    VAR
      ServiceOrderObjSpecLine@1100525000 : Record 11071782;
      Xpath@1100528806 : Text;
    BEGIN
      DSPRequestManagement.SetDnXmlDocument(DnXmlDocument);
      DSPRequestManagement.UpdateObjectSpecificationsValues(DSPLIPRequestLine, ServiceOrderObject, Counter, Counter2);
    END;

    LOCAL PROCEDURE UpdateOrderTypeDsp@1100528314(OrderType@1100528301 : Text;Discipline@1100528300 : Option) : Text;
    VAR
      ServiceOrder@1100528302 : Record 11012823;
    BEGIN
      EXIT(DSPRequestManagement.UpdateOrderTypeDsp(OrderType, Discipline));
    END;

    EVENT DnXmlDocument@1100528308::NodeInserting@94(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeInserted@95(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeRemoving@96(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeRemoved@97(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeChanging@98(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeChanged@99(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlResponse@1100528329::NodeInserting@94(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlResponse@1100528329::NodeInserted@95(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlResponse@1100528329::NodeRemoving@96(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlResponse@1100528329::NodeRemoved@97(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlResponse@1100528329::NodeChanging@98(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlResponse@1100528329::NodeChanged@99(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRequest@1100528330::NodeInserting@94(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRequest@1100528330::NodeInserted@95(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRequest@1100528330::NodeRemoving@96(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRequest@1100528330::NodeRemoved@97(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRequest@1100528330::NodeChanging@98(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRequest@1100528330::NodeChanged@99(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    {
      Will become obsolete in BC15
    }
    END.
  }
}

