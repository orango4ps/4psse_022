OBJECT Codeunit 11012395 Field Authorization Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempField@1100525002 : TEMPORARY Record 2000000041;
      TempExtendedFieldProperty@1100525000 : TEMPORARY Record 11020567;
      ExtendedFieldProperty@1100525001 : TEMPORARY Record 11020567;
      Text001@1210190000 : TextConst 'DEU=Sie haben keinen Zugriff um das Feld %1 zu Ñndern. Der alte Wert %2 ist zurÅckgestellt worden;ENU=You do not have permission to change field %1, old value %2 is restored.;NLD=U hebt geen permissie om veld %1 te wijzigen, oude waarde %2 is teruggezet;NOR=Du mangler tillatelse til Ü endre feltet %1, den gamle verdien %2 gjenopprettes.;SVE=Du saknar behîrighet att Ñndra fÑltet %1, det gamla vÑrdet %2 ÜterstÑlls.';

    PROCEDURE CheckFieldPermission@3(VAR RecRef@1000 : RecordRef);
    VAR
      xRecRef@1100528000 : RecordRef;
      FldRef@1003 : FieldRef;
      xFldRef@1004 : FieldRef;
      i@1002 : Integer;
    BEGIN
      IF NOT xRecRef.GET(RecRef.RECORDID) THEN
        EXIT;

      PopulateTempExtFieldProp;
      TempExtendedFieldProperty.RESET;
      TempExtendedFieldProperty.SETRANGE("Table No.",RecRef.NUMBER);
      TempExtendedFieldProperty.SETRANGE("Check Field Authorization",TRUE);
      IF (NOT TempExtendedFieldProperty.ISEMPTY) THEN BEGIN //fast check
        FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN //chk fields
          FldRef := RecRef.FIELDINDEX(i);
          //Assumed is that not all fields are defined in Extended Field Property; so that it is faster to check Condition A first
          //then check Conditon B. Else it would be better to interchange Condition A and B.
          IF TempExtendedFieldProperty.GET(RecRef.NUMBER,FldRef.NUMBER) THEN BEGIN //Condition A
            IF TempExtendedFieldProperty."Check Field Authorization" THEN BEGIN
              //IF IsNormalField(RecRef.NUMBER,FldRef.NUMBER) THEN BEGIN //already forced by field definition
              xFldRef := xRecRef.FIELDINDEX(i);
              IF FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) THEN BEGIN //Condition B
      //          IF NOT UserFieldAuthForTableField(RecRef.NUMBER,FldRef.NUMBER,USERID) THEN   Call 27521: No error; message..
      //            ERROR(NoPermission,FldRef.CAPTION);
                IF NOT UserFieldAuthForTableField(RecRef.NUMBER,FldRef.NUMBER,USERID) THEN BEGIN
                  //MESSAGE(Text001,FldRef.CAPTION,FORMAT(xFldRef.VALUE));
                  FldRef.VALUE := xFldRef.VALUE;
                  ERROR(Text001,FldRef.CAPTION,FORMAT(xFldRef.VALUE));
                END;
      // Call 27521
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FieldAuthForTableField@1100525026(GlobalDimInt@1100525000 : Integer;TableID@1100525001 : Integer);
    VAR
      ExtendedFieldProperty@1100525002 : Record 11020567;
      GLSetup@1100525005 : Record 98;
      Dimension@1100525006 : Record 348;
      FieldNo@1100525004 : Integer;
      Text11012000@1100525007 : TextConst 'DEU=Kein Zugriff um das Feld %1  zu Ñndern;ENU=No permission to change %1;NLD=Geen bevoegdheid om veld %1 te wijzigen;NOR=Ingen tillatelse til Ü endre %1;SVE=Ingen behîrighet att Ñndra %1';
    BEGIN
      //Function is called from T352, T357 and c408. There the construction with temptable TempExtendedFieldProperty
      //  CANNOT be used. Therefore the GET is not done on TempExtendedFieldProperty, but table ExtendedFieldProperty itself.
      FieldNo := GetDefaultDimFieldNo(GlobalDimInt,TableID);

      IF NOT ExtendedFieldProperty.GET(TableID,FieldNo) THEN
        EXIT; //field not restricted, thus user is authorised

      IF NOT ExtendedFieldProperty."Check Field Authorization" THEN
        EXIT; //field not restricted, thus user is authorised

      IF (NOT UserFieldAuthForTableField(TableID,FieldNo,USERID)) THEN BEGIN
        //field is restricted, check if user is authorised for field
        GLSetup.GET;
        IF (GlobalDimInt = 1) THEN
          Dimension.GET(GLSetup."Global Dimension 1 Code")
        ELSE
          Dimension.GET(GLSetup."Global Dimension 2 Code");
        ERROR(Text11012000,Dimension.Name)
      END;
    END;

    PROCEDURE UserFieldAuthForTableField@1100525007(TableNo@1100525001 : Integer;FieldNo@1100525000 : Integer;User_ID@1100525002 : Text[30]) : Boolean;
    VAR
      UserFieldAutorisation@1100525003 : Record 11020568;
      AccessControl@1100525006 : Record 2000000053;
      StandardAuthManagement@1100529200 : Codeunit 11012269;
    BEGIN
      AccessControl.SETRANGE("User Name",User_ID);
      IF AccessControl.FINDSET THEN
        REPEAT
          IF StandardAuthManagement.PermissionSetIsFunctionProfile(AccessControl."Role ID") THEN BEGIN
            UserFieldAutorisation.SETRANGE("Field No.",FieldNo);
            UserFieldAutorisation.SETRANGE("Table No.",TableNo);
            UserFieldAutorisation.SETRANGE("Function Profile No.",AccessControl."Role ID");
            IF (NOT UserFieldAutorisation.ISEMPTY) THEN
              EXIT(TRUE); //user is authorised
          END;
        UNTIL AccessControl.NEXT = 0;

      EXIT(FALSE); //user is NOT authorised
    END;

    PROCEDURE GetDefaultDimFieldNo@1100525033(GlobalDimNo@1100525000 : Integer;TableID@1100525001 : Integer) : Integer;
    BEGIN
      //TableID's determined using function SetupObjectNoList in codeunit 408. Some tables do not contain Global Dim1/2 fields.
      CASE GlobalDimNo OF
        1:
          CASE TableID OF
            //Default Dimension
            DATABASE::"Salesperson/Purchaser": EXIT(5050);
            DATABASE::"G/L Account": EXIT(6);
            DATABASE::Customer: EXIT(16);
            DATABASE::Vendor: EXIT(16);
            DATABASE::Item: EXIT(105);
            DATABASE::"Resource Group": EXIT(34);
            DATABASE::Resource: EXIT(16);
            DATABASE::Job: EXIT(21);
            DATABASE::"Bank Account": EXIT(16);
            DATABASE::Campaign: EXIT(9);
            DATABASE::Employee: EXIT(36);
            DATABASE::"Fixed Asset": EXIT(7);
            DATABASE::Insurance: EXIT(18);
            DATABASE::"Responsibility Center": EXIT(12);
            DATABASE::"Item Charge": EXIT(7);
            DATABASE::"Work Center": EXIT(16);
            DATABASE::"Service Contract Header": EXIT(67);
            DATABASE::"Customer Template": EXIT(16);
            //DATABASE::"Service Contract Template": EXIT();
            //DATABASE::"IC Partner": EXIT();
            //DATABASE::"Service Order Type": EXIT();
            //DATABASE::"Service Item Group": EXIT();
            //DATABASE::"Service Item": EXIT();
            DATABASE::"Vendor Template": EXIT(16);
            //DATABASE::"Plant Type": EXIT();
            //DATABASE::"Plant Number": EXIT();

            //Document Dimension
            DATABASE::"Sales Header": EXIT(29);
            DATABASE::"Sales Line": EXIT(40);
            DATABASE::"Purchase Header": EXIT(29);
            DATABASE::"Purchase Line": EXIT(40);
            DATABASE::"Reminder Header": EXIT(15);
            DATABASE::"Finance Charge Memo Header": EXIT(15);
            DATABASE::"Transfer Header": EXIT(25);
            DATABASE::"Transfer Line": EXIT(11);
            DATABASE::"Service Header": EXIT(29);
            DATABASE::"Service Line": EXIT(40);
            DATABASE::"Service Item Line": EXIT(100);
            DATABASE::"Standard Sales Line": EXIT(9);
            DATABASE::"Standard Purchase Line": EXIT(9);
            DATABASE::"Standard Service Line": EXIT(9);
            DATABASE::"Invoice Approval Line": EXIT(220); //dim2=110
          END;
        2:
          CASE TableID OF
            //Default Dimension
            DATABASE::"Salesperson/Purchaser": EXIT(5051);
            DATABASE::"G/L Account": EXIT(7);
            DATABASE::Customer: EXIT(17);
            DATABASE::Vendor: EXIT(17);
            DATABASE::Item: EXIT(106);
            DATABASE::"Resource Group": EXIT(35);
            DATABASE::Resource: EXIT(17);
            DATABASE::Job: EXIT(22);
            DATABASE::"Bank Account": EXIT(17);
            DATABASE::Campaign: EXIT(10);
            DATABASE::Employee: EXIT(37);
            DATABASE::"Fixed Asset": EXIT(8);
            DATABASE::Insurance: EXIT(19);
            DATABASE::"Responsibility Center": EXIT(13);
            DATABASE::"Item Charge": EXIT(8);
            DATABASE::"Work Center": EXIT(17);
            DATABASE::"Service Contract Header": EXIT(68);
            DATABASE::"Customer Template": EXIT(17);
            //DATABASE::"Service Contract Template": EXIT();
            //DATABASE::"IC Partner": EXIT();
            //DATABASE::"Service Order Type": EXIT();
            //DATABASE::"Service Item Group": EXIT();
            //DATABASE::"Service Item": EXIT();
            DATABASE::"Vendor Template": EXIT(17);
            //DATABASE::"Plant Type": EXIT();
            //DATABASE::"Plant Number": EXIT();

            //Document Dimension
            DATABASE::"Sales Header": EXIT(30);
            DATABASE::"Sales Line": EXIT(41);
            DATABASE::"Purchase Header": EXIT(30);
            DATABASE::"Purchase Line": EXIT(41);
            DATABASE::"Reminder Header": EXIT(16);
            DATABASE::"Finance Charge Memo Header": EXIT(16);
            DATABASE::"Transfer Header": EXIT(26);
            DATABASE::"Transfer Line": EXIT(12);
            DATABASE::"Service Header": EXIT(30);
            DATABASE::"Service Line": EXIT(41);
            DATABASE::"Service Item Line": EXIT(101);
            DATABASE::"Standard Sales Line": EXIT(10);
            DATABASE::"Standard Purchase Line": EXIT(10);
            DATABASE::"Standard Service Line": EXIT(10);
            DATABASE::"Invoice Approval Line": EXIT(110); //dim1=220
          END;
      END;
    END;

    PROCEDURE PermissionCheck@1100525003();
    BEGIN
      EXIT;
    END;

    LOCAL PROCEDURE PopulateTempExtFieldProp@1100525000();
    VAR
      ExtendedFieldProperty@1100525000 : Record 11020567;
    BEGIN
      //Temp table used for performance reason. This codeunit is used from Codeunit1 which stays alive during session
      //thus temp table stays filled as well. Changes to authorisation definition are taken into account only for added/deleted records.
      //Record changes are NOT taken into account.
      TempExtendedFieldProperty.RESET;
      IF TempExtendedFieldProperty.ISEMPTY THEN BEGIN
        //Fill temp buffer
        ExtendedFieldProperty.RESET;
        ExtendedFieldProperty.SETRANGE("Check Field Authorization",TRUE);
        IF ExtendedFieldProperty.FINDSET THEN BEGIN
          REPEAT
            TempExtendedFieldProperty := ExtendedFieldProperty;
            TempExtendedFieldProperty.INSERT;
          UNTIL (ExtendedFieldProperty.NEXT=0);
        END;
      END ELSE BEGIN
        //Check if records were added/deleted in non-temp table.
        //CAUTION: modification is NOT checked, so when one record was deleted and another added this would NOT be detected.
        //======== this is a possible leak, because this codeunit is used from C1 which stays alive during session
        //         If this is not acceptable then temp table construction should be redesigned
        ExtendedFieldProperty.RESET;
        ExtendedFieldProperty.SETRANGE("Check Field Authorization",TRUE);
        TempExtendedFieldProperty.RESET;
        IF (TempExtendedFieldProperty.COUNT <> ExtendedFieldProperty.COUNT) THEN BEGIN
          TempExtendedFieldProperty.RESET;
          TempExtendedFieldProperty.DELETEALL;
          PopulateTempExtFieldProp; //Refill
        END;
      END
    END;

    LOCAL PROCEDURE IsNormalField@12(TableNumber@1001 : Integer;FieldNumber@1002 : Integer) : Boolean;
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      GetField(TableNumber,FieldNumber,Field);
      EXIT(Field.Class = TempField.Class::Normal);
    END;

    LOCAL PROCEDURE GetField@7(TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR Field2@1003 : Record 2000000041);
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      IF NOT TempField.GET(TableNumber,FieldNumber) THEN BEGIN
        Field.GET(TableNumber,FieldNumber);
        TempField := Field;
        TempField.INSERT;
      END;
      Field2 := TempField;
    END;

    BEGIN
    {
      4PS 20100420: Field authorisation
        This codeunit is used from codeunit 1. Thus the temptable TempExtendedFieldProperty will stay
        filled during the lifetime of C1. Function PopulateTempExtFieldProp partly reacts on changes
        the real table ExtendedFieldProperty.
    }
    END.
  }
}

