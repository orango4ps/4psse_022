OBJECT Table 5813 Inventory Posting Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               CheckSetupUsage;
             END;

    CaptionML=[ENU=Inventory Posting Setup;
               NOR=Lagerbokf›ringsoppsett;
               SVE=Lagerbokf”ringsinst„llning];
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Lokasjonskode;
                                                              SVE=Lagerst„llekod] }
    { 2   ;   ;Invt. Posting Group Code;Code20    ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Invt. Posting Group Code;
                                                              NOR=Kode for bokf.gruppe - lager];
                                                   NotBlank=Yes }
    { 6   ;   ;Inventory Account   ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                IF "View All Accounts on Lookup" THEN
                                                                  GLAccountCategoryMgt.CheckGLAccountWithoutCategory("Inventory Account",FALSE,FALSE)
                                                                ELSE
                                                                  GLAccountCategoryMgt.CheckGLAccount(
                                                                    "Inventory Account",FALSE,FALSE,GLAccountCategory."Account Category"::Assets,GLAccountCategoryMgt.GetInventory);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "View All Accounts on Lookup" THEN
                                                                GLAccountCategoryMgt.LookupGLAccountWithoutCategory("Inventory Account")
                                                              ELSE
                                                                GLAccountCategoryMgt.LookupGLAccount(
                                                                  "Inventory Account",GLAccountCategory."Account Category"::Assets,GLAccountCategoryMgt.GetInventory);

                                                              VALIDATE("Inventory Account");
                                                            END;

                                                   CaptionML=[ENU=Inventory Account;
                                                              NOR=Lagerkonto;
                                                              SVE=Lagerkonto] }
    { 20  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 21  ;   ;View All Accounts on Lookup;Boolean;CaptionML=[ENU=View All Accounts on Lookup;
                                                              NOR=Vis alle konti p† oppslag] }
    { 5800;   ;Inventory Account (Interim);Code20 ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                IF "View All Accounts on Lookup" THEN
                                                                  GLAccountCategoryMgt.CheckGLAccountWithoutCategory("Inventory Account (Interim)",FALSE,FALSE)
                                                                ELSE
                                                                  GLAccountCategoryMgt.CheckGLAccount(
                                                                    "Inventory Account (Interim)",FALSE,FALSE,GLAccountCategory."Account Category"::Assets,GLAccountCategoryMgt.GetInventory);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "View All Accounts on Lookup" THEN
                                                                GLAccountCategoryMgt.LookupGLAccountWithoutCategory("Inventory Account (Interim)")
                                                              ELSE
                                                                GLAccountCategoryMgt.LookupGLAccount(
                                                                  "Inventory Account (Interim)",GLAccountCategory."Account Category"::Assets,GLAccountCategoryMgt.GetInventory);

                                                              VALIDATE("Inventory Account (Interim)");
                                                            END;

                                                   CaptionML=[ENU=Inventory Account (Interim);
                                                              NOR=Lagerkonto (midlertidig)] }
    { 11012000;;Inventory Account (Mat. Var.);Code20;
                                                   TableRelation="G/L Account";
                                                   CaptionML=ENU=Inventory Account (Mat. Var.) }
    { 99000750;;WIP Account        ;Code20        ;TableRelation="G/L Account";
                                                   AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=WIP Account;
                                                              NOR=VIA-konto;
                                                              SVE=PIA] }
    { 99000753;;Material Variance Account;Code20  ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Material Variance Account;
                                                              NOR=Konto for materialavvik] }
    { 99000754;;Capacity Variance Account;Code20  ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Capacity Variance Account;
                                                              NOR=Konto for kapasitetsavvik] }
    { 99000755;;Mfg. Overhead Variance Account;Code20;
                                                   TableRelation="G/L Account";
                                                   CaptionML=[ENU=Mfg. Overhead Variance Account;
                                                              NOR=Kto. avvik i indir. prod.kost.] }
    { 99000756;;Cap. Overhead Variance Account;Code20;
                                                   TableRelation="G/L Account";
                                                   CaptionML=[ENU=Cap. Overhead Variance Account;
                                                              NOR=Kto. avvik i indir.kap.kostn.] }
    { 99000757;;Subcontracted Variance Account;Code20;
                                                   TableRelation="G/L Account";
                                                   AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Subcontracted Variance Account;
                                                              NOR=Kto. for avvik i underlever.] }
  }
  KEYS
  {
    {    ;Location Code,Invt. Posting Group Code  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLAccountCategory@1001 : Record 570;
      GLAccountCategoryMgt@1002 : Codeunit 570;
      YouCannotDeleteErr@1004 : TextConst '@@@="%1 = Location Code; %2 = Posting Group";ENU=You cannot delete %1 %2.;NOR=Du kan ikke slette %1 %2.;SVE=Du kan inte ta bort %1 %2.';
      PostingSetupMgt@1003 : Codeunit 48;

    LOCAL PROCEDURE CheckSetupUsage@1();
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Location Code","Location Code");
      ValueEntry.SETRANGE("Inventory Posting Group","Invt. Posting Group Code");
      IF NOT ValueEntry.ISEMPTY THEN
        ERROR(YouCannotDeleteErr,"Location Code","Invt. Posting Group Code");
    END;

    [External]
    PROCEDURE GetCapacityVarianceAccount@7() : Code[20];
    BEGIN
      IF "Capacity Variance Account" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("Capacity Variance Account"));
      TESTFIELD("Capacity Variance Account");
      EXIT("Capacity Variance Account");
    END;

    [External]
    PROCEDURE GetCapOverheadVarianceAccount@9() : Code[20];
    BEGIN
      IF "Cap. Overhead Variance Account" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("Cap. Overhead Variance Account"));
      TESTFIELD("Cap. Overhead Variance Account");
      EXIT("Cap. Overhead Variance Account");
    END;

    [External]
    PROCEDURE GetInventoryAccount@3() : Code[20];
    BEGIN
      IF "Inventory Account" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("Inventory Account"));
      TESTFIELD("Inventory Account");
      EXIT("Inventory Account");
    END;

    [External]
    PROCEDURE GetInventoryAccountInterim@4() : Code[20];
    BEGIN
      IF "Inventory Account (Interim)" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("Inventory Account (Interim)"));
      TESTFIELD("Inventory Account (Interim)");
      EXIT("Inventory Account (Interim)");
    END;

    [External]
    PROCEDURE GetMaterialVarianceAccount@6() : Code[20];
    BEGIN
      IF "Material Variance Account" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("Material Variance Account"));
      TESTFIELD("Material Variance Account");
      EXIT("Material Variance Account");
    END;

    [External]
    PROCEDURE GetMfgOverheadVarianceAccount@8() : Code[20];
    BEGIN
      IF "Mfg. Overhead Variance Account" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("Mfg. Overhead Variance Account"));
      TESTFIELD("Mfg. Overhead Variance Account");
      EXIT("Mfg. Overhead Variance Account");
    END;

    [External]
    PROCEDURE GetSubcontractedVarianceAccount@10() : Code[20];
    BEGIN
      IF "Subcontracted Variance Account" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("Subcontracted Variance Account"));
      TESTFIELD("Subcontracted Variance Account");
      EXIT("Subcontracted Variance Account");
    END;

    [External]
    PROCEDURE GetWIPAccount@5() : Code[20];
    BEGIN
      IF "WIP Account" = '' THEN
        PostingSetupMgt.SendInvtPostingSetupNotification(Rec,FIELDCAPTION("WIP Account"));
      TESTFIELD("WIP Account");
      EXIT("WIP Account");
    END;

    [External]
    PROCEDURE SuggestSetupAccounts@2();
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      IF "Inventory Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("Inventory Account"));
      IF "Inventory Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("Inventory Account (Interim)"));
      IF "WIP Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("WIP Account"));
      IF "Material Variance Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("Material Variance Account"));
      IF "Capacity Variance Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("Capacity Variance Account"));
      IF "Mfg. Overhead Variance Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("Mfg. Overhead Variance Account"));
      IF "Cap. Overhead Variance Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("Cap. Overhead Variance Account"));
      IF "Subcontracted Variance Account" = '' THEN
        SuggestAccount(RecRef,FIELDNO("Subcontracted Variance Account"));
      OnAfterSuggestSetupAccount(Rec,RecRef);
      RecRef.MODIFY;
    END;

    [External]
    PROCEDURE SuggestAccount@34(VAR RecRef@1000 : RecordRef;AccountFieldNo@1001 : Integer);
    VAR
      TempAccountUseBuffer@1002 : TEMPORARY Record 63;
      RecFieldRef@1003 : FieldRef;
      InvtPostingSetupRecRef@1005 : RecordRef;
      InvtPostingSetupFieldRef@1004 : FieldRef;
    BEGIN
      InvtPostingSetupRecRef.OPEN(DATABASE::"Inventory Posting Setup");

      InvtPostingSetupRecRef.RESET;
      InvtPostingSetupFieldRef := InvtPostingSetupRecRef.FIELD(FIELDNO("Invt. Posting Group Code"));
      InvtPostingSetupFieldRef.SETFILTER('<>%1',"Invt. Posting Group Code");
      InvtPostingSetupFieldRef := InvtPostingSetupRecRef.FIELD(FIELDNO("Location Code"));
      InvtPostingSetupFieldRef.SETRANGE("Location Code");
      TempAccountUseBuffer.UpdateBuffer(InvtPostingSetupRecRef,AccountFieldNo);

      InvtPostingSetupRecRef.CLOSE;

      TempAccountUseBuffer.RESET;
      TempAccountUseBuffer.SETCURRENTKEY("No. of Use");
      IF TempAccountUseBuffer.FINDLAST THEN BEGIN
        RecFieldRef := RecRef.FIELD(AccountFieldNo);
        RecFieldRef.VALUE(TempAccountUseBuffer."Account No.");
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSuggestSetupAccount@11(VAR InventoryPostingSetup@1000 : Record 5813;RecRef@1001 : RecordRef);
    BEGIN
    END;

    BEGIN
    {
      4PS HBK 23-06-2009 Added Field 11012000 Inventory Account (Mat. Var.)
    }
    END.
  }
}

