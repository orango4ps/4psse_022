OBJECT Codeunit 11128513 Reset Remittance Payment Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO7.00 (15000000);
  }
  PROPERTIES
  {
    Permissions=TableData 25=rimd;
    OnRun=VAR
            WaitingJournal@1080000 : Record 11128507;
          BEGIN
            // Only the PaymOrders with PaymOrder type=Export can be reseted.
            IF CurrentRemPaymOrder.Type <> CurrentRemPaymOrder.Type::Export THEN
              CurrentRemPaymOrder.FIELDERROR(Type);

            // Ask the user if he wan'ts to reset:
            IF NOT CONFIRM(Text000 + Text001 + Text002 + Text003 + Text004 + Text005,FALSE,CurrentRemPaymOrder.ID) THEN
              ERROR('');

            // PaymOrder is marked as reseted:
            CurrentRemPaymOrder.Canceled := TRUE;
            CurrentRemPaymOrder.MODIFY;

            // Delete marks for vendor entries and check if the status is Sent for Waiting journal lines:
            // Go through all Waiting journal lines:
            WaitingJournal.INIT;
            WaitingJournal.SETRANGE("Payment Order ID - Sent",CurrentRemPaymOrder.ID);
            WaitingJournal.FINDSET;
            REPEAT
              ResetWaitingJournalLine(WaitingJournal);
            UNTIL WaitingJournal.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      Text000@1080002 : TextConst 'ENU=Warning: Cancelling a remittance payment order could cause problems.\;NOR=Advarsel: Annullering av et remitteringsoppdrag kan gi problemer.\';
      Text001@1080003 : TextConst 'ENU=Note following:\;NOR=Du skal v‘re oppmerksom p† f›lgende:\';
      Text002@1080004 : TextConst 'ENU=- Payments from the payment order must be remitted or posted again.\;NOR=- Betalinger i oppdraget skal remitteres eller bokf›res igjen.\';
      Text003@1080005 : TextConst 'ENU=- If data received in return from the bank contain links to payments in the payment order, an error will occur.\;NOR=- F†s returdata fra banken med relasjon til betalinger i oppdraget, vil det oppst† feil.\';
      Text004@1080006 : TextConst 'ENU=- Sequence no./daily sequence no. may have to be adjusted to the correct value.\\;NOR=- Sekvensnummer / daglig sekvensnummer m† kanskje justeres for † v‘re korrekte.\\';
      Text005@1080007 : TextConst 'ENU=Cancel remittance payment order %1?;NOR=Annullere remitteringsoppdrag %1?';
      Text006@1080008 : TextConst 'ENU=Warning: Cancelling a payment can cause problems.\;NOR=Advarsel: Annullering av en betaling kan gi problemer.\';
      Text007@1080009 : TextConst 'ENU=Cancel waiting journal reference %1?;NOR=Annullere ventekladdreferanse %1?';
      CurrentRemPaymOrder@1080000 : Record 11128504;
      RemTools@1080001 : Codeunit 11128515;

    LOCAL PROCEDURE ResetWaitingJournalLine@1(WaitingJournal@1080000 : Record 11128507);
    VAR
      GenJnlLine@1080001 : Record 81;
    BEGIN
      // Reset Waiting journal line and corresponding entries.
      // This function should be used as external, not only as local.

      // Status must be Sent:
      IF WaitingJournal."Remittance Status" = WaitingJournal."Remittance Status"::Settled THEN
        WaitingJournal.FIELDERROR("Remittance Status");

      // For each Waiting journal line: delete marks on corresponding entries:
      GenJnlLine.INIT;
      GenJnlLine.TRANSFERFIELDS(WaitingJournal); // Create parameter.
      RemTools.MarkEntry(GenJnlLine,'',0); // Delete marks on entries.

      // Reset Waiting journal:
      WaitingJournal.VALIDATE("Remittance Status",WaitingJournal."Remittance Status"::Reseted);

      WaitingJournal.MODIFY;
    END;

    PROCEDURE ResetWaitingJournalJN@3(WaitingJournal@1080000 : Record 11128507);
    BEGIN
      // Ask the user if he wants to reset:
      IF NOT CONFIRM(Text006 + Text001 + Text002 + Text003 + Text004 + Text007,FALSE,WaitingJournal.Reference) THEN
        ERROR('');

      ResetWaitingJournalLine(WaitingJournal);
    END;

    PROCEDURE SetPaymOrder@2(RemPaymOrder@1080000 : Record 11128504);
    BEGIN
      //Specify current PaymOrder:
      CurrentRemPaymOrder := RemPaymOrder;
    END;

    BEGIN
    END.
  }
}

