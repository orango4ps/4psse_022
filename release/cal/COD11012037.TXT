OBJECT Codeunit 11012037 Gantt Chart Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012823=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'DEU=Service-Stunden Gantt Chart z„hlen @1@@@@@@@@@@@@;ENU=Counting Service Hours Gantt Chart  @1@@@@@@@@@@@@@;NLD=Service uren Gantt Chart tellen @1@@@@@@@@@@@@@;NOR=Liste over Servicetimer Gant-skjema @1@@@@@@@@@@@@@;SVE=F”rteckning ”ver Servicetimmar Gant-schema @1@@@@@@@@@@@@@';
      ServiceSetup@1100525002 : Record 11012800;
      Window@1100525005 : Dialog;
      Progress@1100525004 : Integer;
      NoOfRecords@1100525003 : Integer;
      LastUpdateTime@1100525001 : Time;
      HasGotServiceSetup@1100525006 : Boolean;

    [External]
    PROCEDURE InitBuildServiceHours@1100525004();
    VAR
      ServiceOrder@1100525000 : Record 11012823;
      Counter@1100525002 : Integer;
    BEGIN
      WITH ServiceOrder DO BEGIN
        Window.OPEN(Text000);
        NoOfRecords := COUNT;
        LastUpdateTime := TIME;
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            Counter := Counter + 1;
            UpdateProgressWindow(Counter);
            BuildServiceHours(ServiceOrder,TRUE);  //db, 12-12-11: M31261
          UNTIL ServiceOrder.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    [External]
    PROCEDURE BuildServiceHours@1100525008(VAR ServiceOrder@1100525000 : Record 11012823;ModifyAllowed@1210190000 : Boolean);
    VAR
      ServiceOrderBudgetLine@1100525007 : Record 11012875;
      ServiceLedgerEntry@1100525006 : Record 11012819;
      HourAccountingLine@1100525003 : Record 11012039;
      ModifyServOrder@1100525008 : Boolean;
    BEGIN
      GetServiceSetup;
      IF ServiceSetup."Collect Data for Gantt Chart" THEN BEGIN

        ServiceOrderBudgetLine.SETCURRENTKEY("Service Order No.");
        ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
        ServiceOrderBudgetLine.CALCSUMS(Hours);
        IF ServiceOrder."Budget Hours (Gantt Chart)" <> ServiceOrderBudgetLine.Hours THEN BEGIN
          ServiceOrder."Budget Hours (Gantt Chart)" := ServiceOrderBudgetLine.Hours;
          ModifyServOrder := TRUE;
        END;

        HourAccountingLine.SETCURRENTKEY("Service Order No.");
        HourAccountingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
        HourAccountingLine.CALCSUMS("Total Line");
        IF ServiceOrder."Open Hours (Gantt Chart)" <> HourAccountingLine."Total Line" THEN BEGIN
          ServiceOrder."Open Hours (Gantt Chart)" := HourAccountingLine."Total Line";
          ModifyServOrder := TRUE;
        END;

        ServiceLedgerEntry.SETCURRENTKEY("Service Order No.");
        ServiceLedgerEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
        ServiceLedgerEntry.CALCSUMS(Quantity);
        IF ServiceOrder."Posted Hours (Gantt Chart)" <> ServiceLedgerEntry.Quantity THEN BEGIN
          ServiceOrder."Posted Hours (Gantt Chart)" := ServiceLedgerEntry.Quantity;
          ModifyServOrder := TRUE;
        END;

        ServiceOrderBudgetLine.RESET;
        ServiceOrderBudgetLine.SETCURRENTKEY("Service Order No.",Finished);
        ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
        ServiceOrderBudgetLine.SETRANGE(Finished, TRUE);
        ServiceOrderBudgetLine.CALCSUMS(Hours);
        IF ServiceOrder."Finished Hours (Gantt Chart)" <> ServiceOrderBudgetLine.Hours THEN BEGIN
          ServiceOrder."Finished Hours (Gantt Chart)" := ServiceOrderBudgetLine.Hours;
          ModifyServOrder := TRUE;
        END;

      //mg.so, 11-10-12: C002241
      //  ServiceOrder.CALCFIELDS("Actual Reference Point");
      //  IF ServiceOrder."Actual Reference Point (Gantt)" <> ServiceOrder."Actual Reference Point" THEN BEGIN
      //    ServiceOrder."Actual Reference Point (Gantt)" := ServiceOrder."Actual Reference Point";
      //    ModifyServOrder := TRUE;
      //  END;
      //mg.en, 11-10-12: C002241
      END ELSE BEGIN
        IF ServiceOrder."Budget Hours (Gantt Chart)" <> 0 THEN BEGIN
          ServiceOrder."Budget Hours (Gantt Chart)" := 0;
          ModifyServOrder := TRUE;
        END;
        IF ServiceOrder."Open Hours (Gantt Chart)" <> 0 THEN BEGIN
          ServiceOrder."Open Hours (Gantt Chart)" := 0;
          ModifyServOrder := TRUE;
        END;
        IF ServiceOrder."Posted Hours (Gantt Chart)" <> 0 THEN BEGIN
          ServiceOrder."Posted Hours (Gantt Chart)" := 0;
          ModifyServOrder := TRUE;
        END;
        IF ServiceOrder."Finished Hours (Gantt Chart)" <> 0 THEN BEGIN
          ServiceOrder."Finished Hours (Gantt Chart)" := 0;
          ModifyServOrder := TRUE;
        END;
      END;

      //mg.sn, 11-10-12: C002241
      ServiceOrder.CALCFIELDS("Actual Reference Point");
      IF ServiceOrder."Actual Reference Point (Gantt)" <> ServiceOrder."Actual Reference Point" THEN BEGIN
        ServiceOrder."Actual Reference Point (Gantt)" := ServiceOrder."Actual Reference Point";
        ModifyServOrder := TRUE;
      END;
      //mg.en, 11-10-12: C002241

      IF ModifyServOrder AND ModifyAllowed THEN  //db, 12-12-11: M31261
        ServiceOrder.MODIFY;
    END;

    [External]
    PROCEDURE UpdateBudgetHours@1100525003(UpdateAction@1100525002 : 'Insert,Modify,Delete,Rename';ServiceOrderBudgetLine@1100525000 : Record 11012875;xRecServiceOrderBudgetLine@1100525009 : Record 11012875);
    VAR
      ServiceOrder@1100525008 : Record 11012823;
      HourType@1100525005 : 'Budget,Open,Posted,Finished';
      NoOfHours@1100525004 : Decimal;
      xNoOfHours@1100525003 : Decimal;
      NoOfHoursFinished@1100525001 : Decimal;
      xNoOfHoursFinished@1100525010 : Decimal;
    BEGIN
      //Hours maybe or maybe not written in de DB already, so No. of Hours must be added or subtracted
      //Function BuildServiceHours can not be used here

      GetServiceSetup;
      IF NOT ServiceSetup."Collect Data for Gantt Chart" THEN
        EXIT;

      WITH ServiceOrderBudgetLine DO BEGIN
        CASE UpdateAction OF
          UpdateAction::Insert:
            IF ("Service Order No." <> '') THEN BEGIN
              NoOfHours := Hours;
              IF Finished THEN
                NoOfHoursFinished := Hours
            END;
          UpdateAction::Modify:
            IF ("Service Order No." <> '') THEN BEGIN
              NoOfHours := Hours - xRecServiceOrderBudgetLine.Hours;
              IF Finished THEN
                IF xRecServiceOrderBudgetLine.Finished THEN
                  NoOfHoursFinished := Hours - xRecServiceOrderBudgetLine.Hours
                ELSE
                  NoOfHoursFinished := Hours
              ELSE
                IF xRecServiceOrderBudgetLine.Finished THEN
                  NoOfHoursFinished := - xRecServiceOrderBudgetLine.Hours;
            END;
          UpdateAction::Delete:
            IF (xRecServiceOrderBudgetLine."Service Order No." <> '') THEN BEGIN
              xNoOfHours := - xRecServiceOrderBudgetLine.Hours;
              IF xRecServiceOrderBudgetLine.Finished THEN
                xNoOfHoursFinished := - xRecServiceOrderBudgetLine.Hours;
            END;
          UpdateAction::Rename:; //No action
        END;

        IF (NoOfHours <> 0) OR (NoOfHoursFinished <> 0) THEN BEGIN
          ServiceOrder.GET("Service Order No.");
          CalcServiceHours(ServiceOrder, HourType::Budget, NoOfHours);
          CalcServiceHours(ServiceOrder, HourType::Finished, NoOfHoursFinished);
        END;
        IF (xNoOfHours <> 0) OR (xNoOfHoursFinished <> 0) THEN BEGIN
          ServiceOrder.GET(xRecServiceOrderBudgetLine."Service Order No.");
          CalcServiceHours(ServiceOrder, HourType::Budget, xNoOfHours);
          CalcServiceHours(ServiceOrder, HourType::Finished, xNoOfHoursFinished);
        END;

      END;
    END;

    [External]
    PROCEDURE UpdateHourAcc@1100525000(UpdateAction@1100525002 : 'Insert,Modify,Delete,Rename,Post';HourAccountingLine@1100525000 : Record 11012039;xRecHourAccountingLine@1100525001 : Record 11012039);
    VAR
      ServiceOrder@1100525008 : Record 11012823;
      HourType@1100525005 : 'Budget,Open,Posted,Finished';
      NoOfHours@1100525004 : Decimal;
      xNoOfHours@1100525003 : Decimal;
    BEGIN
      //Hours maybe or maybe not written in de DB already, so No. of Hours must be added or subtracted
      //Function BuildServiceHours can not be used here

      GetServiceSetup;
      IF NOT ServiceSetup."Collect Data for Gantt Chart" THEN
        EXIT;

      WITH HourAccountingLine DO BEGIN
        CASE UpdateAction OF
          UpdateAction::Insert:
            IF ("Service Order No." <> '') AND ("Receiving Company" = '') THEN
              NoOfHours := "Total Line";
          UpdateAction::Modify:
            IF ("Service Order No." <> xRecHourAccountingLine."Service Order No.") OR
               ("Receiving Company" <> xRecHourAccountingLine."Receiving Company") THEN
            BEGIN
              IF (xRecHourAccountingLine."Service Order No." <> '') AND (xRecHourAccountingLine."Receiving Company" = '') THEN
                xNoOfHours := - xRecHourAccountingLine."Total Line";
              IF ("Service Order No." <> '') AND ("Receiving Company" = '') THEN
                NoOfHours := "Total Line";
            END ELSE
              IF ("Service Order No." <> '') AND ("Receiving Company" = '') THEN
                NoOfHours := "Total Line" - xRecHourAccountingLine."Total Line";
          UpdateAction::Delete:
            IF (xRecHourAccountingLine."Service Order No." <> '') AND (xRecHourAccountingLine."Receiving Company" = '') THEN
              xNoOfHours := - xRecHourAccountingLine."Total Line";
          UpdateAction::Rename:; //No action
          UpdateAction::Post:
            IF ("Service Order No." <> '') AND ("Receiving Company" = '') THEN BEGIN
              NoOfHours := - "Total Line";
              IF (NoOfHours <> 0) THEN BEGIN
                //Add Hours to HourType Posted
                ServiceOrder.GET("Service Order No.");
                CalcServiceHours(ServiceOrder, HourType::Posted, "Total Line");
              END;
            END;
        END;

        IF (NoOfHours <> 0) THEN BEGIN
          ServiceOrder.GET("Service Order No.");
          CalcServiceHours(ServiceOrder, HourType::Open, NoOfHours);
        END;
        IF (xNoOfHours <> 0) THEN BEGIN
          ServiceOrder.GET(xRecHourAccountingLine."Service Order No.");
          CalcServiceHours(ServiceOrder, HourType::Open, xNoOfHours);
        END;
      END;
    END;

    [External]
    PROCEDURE UpdateActualLogMoment@1100525001(UpdateAction@1100525002 : 'Insert,Modify,Delete,Rename';DocumentReferencePoint@1100525000 : Record 11020296;xRecDocumentReferencePoint@1100525003 : Record 11020296;VAR NewActRefPoint@1100525004 : Integer);
    BEGIN
      NewActRefPoint := -1; //means no New Actual Reference Point
      IF DocumentReferencePoint.Type <> DocumentReferencePoint.Type::ServOrder THEN
        EXIT;

      GetServiceSetup;

      WITH DocumentReferencePoint DO BEGIN
        CASE UpdateAction OF
          UpdateAction::Insert:
            IF ("Document No." <> '') AND Actual THEN
              NewActRefPoint := "Reference Point";
          UpdateAction::Modify:
            IF ("Document No." <> '') AND
               (Actual OR xRecDocumentReferencePoint.Actual) THEN BEGIN
              IF Actual THEN
                NewActRefPoint := "Reference Point"
              ELSE BEGIN
                SETRANGE(Type,Type);
                SETRANGE("Document No.", "Document No.");
                SETRANGE(Actual, TRUE);
                IF FINDFIRST THEN
                  NewActRefPoint := "Reference Point";
              END;
            END;
          UpdateAction::Delete:
            IF (xRecDocumentReferencePoint."Document No." <> '') AND
               (xRecDocumentReferencePoint.Actual) THEN BEGIN
              SETRANGE(Type,Type);
              SETRANGE("Document No.", "Document No.");
              SETFILTER("Date-Time (registrated)", '<>%1', "Date-Time (registrated)");
              SETRANGE(Actual, TRUE);
              IF FINDFIRST THEN
                NewActRefPoint := "Reference Point";
            END;
          UpdateAction::Rename:; //No action
        END;
      END;
    END;

    [External]
    PROCEDURE CalcServiceHours@1100525009(VAR ServiceOrder@1100525002 : Record 11012823;HourType@1100525001 : 'Budget,Open,Posted,Finished';NoOfHours@1100525000 : Decimal);
    BEGIN
      IF NoOfHours = 0 THEN
        EXIT;

      GetServiceSetup;
      IF NOT ServiceSetup."Collect Data for Gantt Chart" THEN
        EXIT;

      CASE HourType OF
        HourType::Budget:
          ServiceOrder."Budget Hours (Gantt Chart)" := ServiceOrder."Budget Hours (Gantt Chart)" + NoOfHours;
        HourType::Open:
          ServiceOrder."Open Hours (Gantt Chart)" := ServiceOrder."Open Hours (Gantt Chart)" + NoOfHours;
        HourType::Posted:
          ServiceOrder."Posted Hours (Gantt Chart)" := ServiceOrder."Posted Hours (Gantt Chart)" + NoOfHours;
        HourType::Finished:
          ServiceOrder."Finished Hours (Gantt Chart)" := ServiceOrder."Finished Hours (Gantt Chart)" + NoOfHours;
      END;
      ServiceOrder.MODIFY;
    END;

    PROCEDURE UpdateProgressWindow@9(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) OR (TIME > LastUpdateTime + 5000) THEN BEGIN
          Window.UPDATE(1,100 * NewProgress);
          LastUpdateTime := TIME;
        END;
        Progress := NewProgress;
      END;
    END;

    [External]
    PROCEDURE GetServiceSetup@1100525002();
    VAR
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF NOT HasGotServiceSetup THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceSetup) THEN
          ServiceSetup.GET;
        HasGotServiceSetup := TRUE;
      END;
    END;

    BEGIN
    END.
  }
}

