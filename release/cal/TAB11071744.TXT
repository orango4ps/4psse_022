OBJECT Table 11071744 Maint. Scheme Version Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Index Date");
               CentralDataManagement.EditMaintenanceSchemeLine(Rec, 1, xRec);
             END;

    OnModify=BEGIN
               CentralDataManagement.EditMaintenanceSchemeLine(Rec, 2, xRec);
             END;

    OnDelete=VAR
               MaintSchemeLineProperty@1100528600 : Record 11071954;
             BEGIN
               MaintSchemeLineProperty.SETRANGE("Line Type (Base)", "Line Type");
               MaintSchemeLineProperty.SETRANGE("Type Code (Base)", "Type Code");
               MaintSchemeLineProperty.SETRANGE("Line No. (Base)", "Line No.");
               MaintSchemeLineProperty.SETRANGE("Belongs to Scheme (Base)", "Belongs to Scheme");
               MaintSchemeLineProperty.DELETEALL(TRUE);

               CentralDataManagement.EditMaintenanceSchemeLine(Rec, 4, xRec);
             END;

    CaptionML=[ENU=Maintenance Scheme Version Line;
               NOR=Vedlikeholdsskjema, versjonrad;
               SVE=Versionsrad i underh†llsschema];
    DrillDownPageID=Page11125161;
  }
  FIELDS
  {
    { 5   ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=[ENU=Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object;
                                                                    NOR=Vedlikeholdsskjema,Endring,Standardobjekt,Avinstallering av standardobjekt,Installering av standardobjekt,Installering av objekt,Objekt;
                                                                    SVE=Underh†llsschema,Žndring,Standardobjekt,Standardobjekt avinstallation,Standardobjekt installation,Objektinstallation,Objekt];
                                                   OptionString=Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object;
                                                   Description=SERV_CONS }
    { 10  ;   ;Type Code           ;Code20        ;TableRelation=IF (Line Type=CONST(Standard Object)) "Standard Object".No.
                                                                 ELSE IF (Line Type=CONST(Maintenance Scheme)) "Maintenance Scheme".Code
                                                                 ELSE IF (Line Type=CONST(Modification)) "Object Modification".No.
                                                                 ELSE IF (Line Type=CONST(Standard Object Installation)) "Standard Object".No.
                                                                 ELSE IF (Line Type=CONST(Standard Object Deinstallation)) "Standard Object".No.
                                                                 ELSE IF (Line Type=CONST(Object Installation)) Service-Object.No.
                                                                 ELSE IF (Line Type=CONST(Object)) Service-Object.No.;
                                                   OnValidate=BEGIN
                                                                IF "Type Code" <> xRec."Type Code" THEN BEGIN
                                                                  MainRec := xRec;
                                                                  IF MainRec.FIND THEN
                                                                    CentralDataManagement.EditMaintenanceSchemeLine(Rec, 3, xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type Code;
                                                              NOR=Typekode;
                                                              SVE=Typkod];
                                                   Description=SERV_CONS }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                TestSurveyTemplate;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 45  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                  ValidateUnitOfMeasure("Unit of Measure");
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=M†ttenhet] }
    { 50  ;   ;Frequency per Year  ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Time Quantity;
                                                              NOR=Tidskvantitet;
                                                              SVE=Tidskvantitet];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 60  ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting) THEN
                                                                  CalcTotals
                                                                ELSE BEGIN
                                                                  MESSAGE(Text002, "Cost Type");
                                                                  Norm := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Norm;
                                                              NOR=Norm;
                                                              SVE=Norm];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 70  ;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate".Code;
                                                   OnValidate=BEGIN
                                                                IF "Rate Code" <> '' THEN
                                                                  ValidateRateCodeByCompany(COMPANYNAME);
                                                              END;

                                                   OnLookup=VAR
                                                              BudgetRate@1100528600 : Record 11012000;
                                                              IndexDate@1100528601 : Date;
                                                            BEGIN
                                                              IF "Index Date" = 0D THEN
                                                                IndexDate := TODAY
                                                              ELSE
                                                                IndexDate := "Index Date";

                                                              BudgetRate.SETRANGE("Starting Date", 0D, IndexDate);
                                                              BudgetRate.SETFILTER("Ending Date", '%1|>=%2', 0D, IndexDate);
                                                              IF PAGE.RUNMODAL(0, BudgetRate) = ACTION::LookupOK THEN
                                                                VALIDATE("Rate Code", BudgetRate.Code);
                                                            END;

                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod] }
    { 75  ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN
                                                                  CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Rate;
                                                              NOR=Avgift;
                                                              SVE=Avgift];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 80  ;   ;Cost Price          ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Cost Price") THEN
                                                                  IF "Cost Type" <> "Cost Type"::Subcontracting THEN
                                                                    "Price Agreement" := TRUE;
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  IF "Cost Price" <> 0 THEN BEGIN
                                                                    MESSAGE(Text005);
                                                                    "Cost Price" := 0;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  CalcDiscount;
                                                                  CalcTotals;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cost Price;
                                                              NOR=Selvkost;
                                                              SVE=Sj„lvkostnadspris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 85  ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Gross Price") THEN
                                                                  IF "Cost Type" <> "Cost Type"::Subcontracting THEN
                                                                    "Price Agreement" := TRUE;
                                                                CalculateNetPrice;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Gross Price;
                                                              NOR=Bruttopris;
                                                              SVE=Bruttopris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 90  ;   ;Purchase Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Purchase Discount %") THEN
                                                                  "Price Agreement" := TRUE;
                                                                CalculateNetPrice;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Purchase Discount %;
                                                              NOR=Innkj›psrabattprosent;
                                                              SVE=Ink”psrabattprocent];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 100 ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 105 ;   ;Hours               ;Decimal       ;CaptionML=[ENU=Hours;
                                                              NOR="Timer ";
                                                              SVE=Timmar];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 110 ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN
                                                                    IF CONFIRM(Text004,TRUE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      //only fill fields below for cost type plant
                                                                      "Item No." := '';
                                                                      "Basic Item" := '';
                                                                      "Trade Item" := '';
                                                                      Manufacturer := '';
                                                                      "Vendor (Trade Item)" := '';
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                      EXIT;
                                                                    END;
                                                                END;
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  "Cost Price" := 0;
                                                                END ELSE BEGIN
                                                                  "Rate Code" := '';
                                                                  Rate := 0;
                                                                  Norm := 0;
                                                                END;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kosttype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                                    NOR=Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
    { 120 ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                           Global Dimension No.=CONST(2))
                                                                                                                           ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                             Global Dimension No.=CONST(2))
                                                                                                                                                                                             ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                                                                                    ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF ("Cost Object" <> '') AND ("Item No." + "Trade Item" + "Basic Item" = '') THEN  //db, 17-04-08
                                                                  IF xRec."Cost Object" = '' THEN
                                                                    GetDefaultsCostObject()
                                                                  ELSE
                                                                    IF "Cost Object" <> xRec."Cost Object" THEN
                                                                      IF CONFIRM(
                                                                        Text000 +
                                                                        Text001)
                                                                      THEN
                                                                        GetDefaultsCostObject();
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 125 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadsdel] }
    { 130 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item, TRUE);
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 140 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item", TRUE);
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 141 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 150 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item", TRUE);
                                                              END;

                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 151 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item", TRUE)
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor", TRUE);
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 160 ;   ;Maintenance Interval;DateFormula   ;OnValidate=BEGIN
                                                                EvaluateTimeQuantity;
                                                              END;

                                                   CaptionML=[ENU=Maintenance Interval;
                                                              NOR=Vedlikeholdsintervall;
                                                              SVE=Underh†llsintervall] }
    { 165 ;   ;Maintenance Relation;Code20        ;CaptionML=[ENU=Maintenance Relation;
                                                              NOR=Vedlikeholdsrelasjon;
                                                              SVE=Underh†llsrelation] }
    { 170 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=[ENU=Discipline;
                                                              NOR=Disiplin;
                                                              SVE=Disciplin] }
    { 171 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=[ENU=Trade Speciality;
                                                              NOR=SNI-nummer;
                                                              SVE=SNI-nummer] }
    { 172 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=VAR
                                                                TradeExpRec@1100525000 : Record 11020286;
                                                              BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=[ENU=Trade Expertise;
                                                              NOR=Bransjeekspertise;
                                                              SVE=Branschexpertis] }
    { 180 ;   ;Preferred Employee  ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Preferred Employee");
                                                                CALCFIELDS("Employee Name");
                                                              END;

                                                   CaptionML=[ENU=Preferred Employee;
                                                              NOR=Foretrukket Ansatt;
                                                              SVE=F”rvald &anst„lld];
                                                   Description=DP00465, based on Resource }
    { 181 ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Preferred Employee)));
                                                   CaptionML=[ENU=Employee Name;
                                                              NOR=Navn p† ansatt;
                                                              SVE=Namn p† anst„lld];
                                                   Editable=No }
    { 190 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor.No. WHERE (Subcontractor Type=FILTER(Subcontractor|Self Employed|Employment Agency));
                                                   CaptionML=[ENU=Subcontractor;
                                                              NOR=Underentrepren›r;
                                                              SVE=Underentrepren”r] }
    { 191 ;   ;Subcontractor Name  ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=[ENU=Subcontractor Name;
                                                              NOR=Underentrepren›rens navn;
                                                              SVE=Underentrepren”rens namn];
                                                   Editable=No }
    { 200 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor;
                                                              NOR=Leverand›r;
                                                              SVE=Leverant”r] }
    { 201 ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rsnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Editable=No }
    { 210 ;   ;Index Date          ;Date          ;OnValidate=BEGIN
                                                                //db, 12-10-10
                                                                //IF "Index Date" <> xRec."Index Date" THEN BEGIN
                                                                  CASE "Cost Type" OF
                                                                    "Cost Type"::Labor:
                                                                      VALIDATE("Rate Code");
                                                                    "Cost Type"::Material:
                                                                      BEGIN
                                                                        IF "Trade Item" <> '' THEN
                                                                          UpdateItemPrice(ItemTypeOpt::"Trade Item")
                                                                        ELSE
                                                                          IF "Basic Item" <> '' THEN
                                                                            UpdateItemPrice(ItemTypeOpt::"Basic Item")
                                                                          ELSE
                                                                            IF "Item No." <> '' THEN
                                                                              UpdateItemPrice(ItemTypeOpt::Item);
                                                                      END;
                                                                  END;
                                                                //END;

                                                                CalcTotals; //mg, 15-12-10: M24117
                                                              END;

                                                   CaptionML=[ENU=Index Date;
                                                              NOR=Indeksdato;
                                                              SVE=Indexdatum] }
    { 220 ;   ;Total Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line".Hours WHERE (Line Type=FIELD(Line Type),
                                                                                                             Type Code=FIELD(Type Code),
                                                                                                             Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                             Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Totalt timmar];
                                                   Editable=No }
    { 230 ;   ;Total Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost Amount" WHERE (Line Type=FIELD(Line Type),
                                                                                                                     Type Code=FIELD(Type Code),
                                                                                                                     Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                     Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Total Amount;
                                                              NOR=Totalt bel›p;
                                                              SVE=Totalt belopp];
                                                   Editable=No }
    { 240 ;   ;Additional Cost     ;Boolean       ;CaptionML=[ENU=Additional Cost;
                                                              NOR=Tilleggskoster;
                                                              SVE=Till„ggskostnader] }
    { 250 ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 260 ;   ;Relation Contract-Object;Text30    ;CaptionML=[ENU=Relation Contract-Object;
                                                              NOR=Relasjon Kontrakt-Objekt;
                                                              SVE=Relation kontrakt-objekt] }
    { 270 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Type;
                                                              NOR=Artikkeltype;
                                                              SVE=Artikeltyp];
                                                   Editable=No }
    { 271 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Brand;
                                                              NOR=Artikkelens Varemerke;
                                                              SVE=Artikelns varum„rke];
                                                   Editable=No }
    { 272 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Series;
                                                              NOR=Artikkelserier;
                                                              SVE=Artikelserier];
                                                   Editable=No }
    { 280 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=[ENU=Line Status;
                                                              NOR=Radstatus;
                                                              SVE=Radstatus] }
    { 290 ;   ;Text Block          ;Boolean       ;CaptionML=[ENU=Text Block;
                                                              NOR=Tekstblokk;
                                                              SVE=Textblock];
                                                   Editable=No }
    { 291 ;   ;Text                ;Text250       ;OnValidate=BEGIN
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=[ENU=Text;
                                                              NOR=Tekst;
                                                              SVE=Ben„mning] }
    { 300 ;   ;Belongs to Scheme   ;Code20        ;OnValidate=BEGIN
                                                                IF "Belongs to Scheme" <> xRec."Belongs to Scheme" THEN BEGIN
                                                                  MainRec := xRec;
                                                                  IF MainRec.FIND THEN
                                                                    CentralDataManagement.EditMaintenanceSchemeLine(Rec, 3, xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Belongs to Scheme;
                                                              NOR=H›rer til skjema;
                                                              SVE=Tillh”r schema] }
    { 310 ;   ;Object Group        ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Object Group" WHERE (No.=FIELD(Type Code)));
                                                   CaptionML=[ENU=Object Group;
                                                              NOR=Objektgruppe;
                                                              SVE=Objektgrupp];
                                                   Editable=No }
    { 320 ;   ;Total Labor         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost Amount" WHERE (Line Type=FIELD(Line Type),
                                                                                                                     Type Code=FIELD(Type Code),
                                                                                                                     Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                     Cost Type=CONST(Labor),
                                                                                                                     Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Labor;
                                                              NOR=Arbeidskraft;
                                                              SVE=Arbete];
                                                   Editable=No }
    { 330 ;   ;Total Material      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost Amount" WHERE (Line Type=FIELD(Line Type),
                                                                                                                     Type Code=FIELD(Type Code),
                                                                                                                     Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                     Cost Type=CONST(Material),
                                                                                                                     Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Material;
                                                              NOR=Materialee;
                                                              SVE=Material];
                                                   Editable=No }
    { 340 ;   ;Total Subcontracting;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost Amount" WHERE (Line Type=FIELD(Line Type),
                                                                                                                     Type Code=FIELD(Type Code),
                                                                                                                     Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                     Cost Type=CONST(Subcontracting),
                                                                                                                     Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Subcontracting;
                                                              NOR=Underentrepen›r;
                                                              SVE=Underentreprenad];
                                                   Editable=No }
    { 350 ;   ;Total Plant         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost Amount" WHERE (Line Type=FIELD(Line Type),
                                                                                                                     Type Code=FIELD(Type Code),
                                                                                                                     Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                     Cost Type=CONST(Plant),
                                                                                                                     Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Plant;
                                                              NOR=Maskin;
                                                              SVE=Maskin];
                                                   Editable=No }
    { 360 ;   ;Total Sundry        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost Amount" WHERE (Line Type=FIELD(Line Type),
                                                                                                                     Type Code=FIELD(Type Code),
                                                                                                                     Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                     Cost Type=CONST(Sundry),
                                                                                                                     Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Sundry;
                                                              NOR=Diverse;
                                                              SVE=Diverse];
                                                   Editable=No }
    { 370 ;   ;Cost per Service    ;Decimal       ;CaptionML=[ENU=Cost per Service;
                                                              NOR=Kostnad per Service;
                                                              SVE=Kostnad per service];
                                                   Editable=No }
    { 380 ;   ;Hours per Service   ;Decimal       ;CaptionML=[ENU=Hours per Service;
                                                              NOR=Timer per service;
                                                              SVE=Timmar per service];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 390 ;   ;Total Cost per Service;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost per Service" WHERE (Line Type=FIELD(Line Type),
                                                                                                                          Type Code=FIELD(Type Code),
                                                                                                                          Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                          Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Total Cost per Service;
                                                              NOR=Totalkostnad per service;
                                                              SVE=Totalkostnad per service];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 400 ;   ;Total Hours per Service;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Hours per Service" WHERE (Line Type=FIELD(Line Type),
                                                                                                                           Type Code=FIELD(Type Code),
                                                                                                                           Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                           Index Date=FIELD(Index Date)));
                                                   CaptionML=[ENU=Total Hours per Service;
                                                              NOR=Totale timer per service;
                                                              SVE=Totala timmar per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 410 ;   ;Labor per Service   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost per Service" WHERE (Line Type=FIELD(Line Type),
                                                                                                                          Type Code=FIELD(Type Code),
                                                                                                                          Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                          Index Date=FIELD(Index Date),
                                                                                                                          Cost Type=CONST(Labor)));
                                                   CaptionML=[ENU=Labor per Service;
                                                              NOR=Arbeidskraft per service;
                                                              SVE=Arbetskraft per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 420 ;   ;Material per Service;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost per Service" WHERE (Line Type=FIELD(Line Type),
                                                                                                                          Type Code=FIELD(Type Code),
                                                                                                                          Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                          Index Date=FIELD(Index Date),
                                                                                                                          Cost Type=CONST(Material)));
                                                   CaptionML=[ENU=Material per Service;
                                                              NOR=Meteriale per service;
                                                              SVE=Material per service];
                                                   Editable=No }
    { 430 ;   ;Subcontracting per Service;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost per Service" WHERE (Line Type=FIELD(Line Type),
                                                                                                                          Type Code=FIELD(Type Code),
                                                                                                                          Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                          Index Date=FIELD(Index Date),
                                                                                                                          Cost Type=CONST(Subcontracting)));
                                                   CaptionML=[ENU=Subcontracting per Service;
                                                              NOR=Underentrepen›r per service;
                                                              SVE=Underentreprenad per service];
                                                   Editable=No }
    { 440 ;   ;Plant per Service   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost per Service" WHERE (Line Type=FIELD(Line Type),
                                                                                                                          Type Code=FIELD(Type Code),
                                                                                                                          Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                          Index Date=FIELD(Index Date),
                                                                                                                          Cost Type=CONST(Plant)));
                                                   CaptionML=[ENU=Plant per Service;
                                                              NOR=Maskin per service;
                                                              SVE=Maskin per service];
                                                   Editable=No }
    { 450 ;   ;Sundry per Service  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Maint. Scheme Version Line"."Cost per Service" WHERE (Line Type=FIELD(Line Type),
                                                                                                                          Type Code=FIELD(Type Code),
                                                                                                                          Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                                          Index Date=FIELD(Index Date),
                                                                                                                          Cost Type=CONST(Sundry)));
                                                   CaptionML=[ENU=Sundry per Service;
                                                              NOR=Diverse per service;
                                                              SVE=Diverse per service];
                                                   Editable=No }
    { 460 ;   ;Price Agreement     ;Boolean       ;CaptionML=[ENU=Price Agreement;
                                                              NOR=Prisavtale;
                                                              SVE=Prisavtal] }
    { 470 ;   ;Quantity (Survey)   ;Decimal       ;OnValidate=VAR
                                                                MaintenanceScheme@1100528600 : Record 11071745;
                                                              BEGIN
                                                                IF "Quantity (Survey)" = 0 THEN
                                                                  EXIT;
                                                                TESTFIELD("Line Type", "Line Type"::"Maintenance Scheme");
                                                                MaintenanceScheme.GET("Type Code");
                                                                MaintenanceScheme.TESTFIELD("Survey Template", TRUE);
                                                              END;

                                                   CaptionML=ENU=Quantity (Survey);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
  }
  KEYS
  {
    {    ;Line Type,Type Code,Belongs to Scheme,Index Date,Line No.;
                                                   Clustered=Yes }
    {    ;Line Type,Type Code,Cost Type,Belongs to Scheme;
                                                   SumIndexFields=Hours,Cost Amount,Cost per Service,Hours per Service }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MainRec@1100528601 : Record 11071744;
      ValidateCu@1100525001 : Codeunit 11012033;
      CentralDataManagement@1100528600 : Codeunit 11012010;
      ItemTypeOpt@1100525000 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text000@1100525009 : TextConst 'ENU=Copy Data from new Cost Object?\\;NOR=Kopier data fra nytt Kostnadsobjekt?\\;SVE=Kopiera data fr†n nytt kostnadsobjekt?\\';
      Text001@1100525008 : TextConst 'ENU=Empty fields only will be updated. Existing data will not be overruled.;NOR=Kun tomme felt vil oppdateres. Eksisterende data vil ikke bli overstyrt.;SVE=Endast tomma f„lt kommer att uppdateras. Befintliga data kommer inte att †sidos„ttas.';
      Text002@1100525007 : TextConst 'ENU=Cost Type of Line is %1, input of norm not allowed;NOR=Kostnadstypen for raden er %1, Norm kan ikke angis;SVE=Kostnadstypen f”r raden „r %1, norm kan inte anges';
      Text003@1100525006 : TextConst 'ENU=Cost Type of line is %1, input of rate code not allowed.;NOR=Kostnadstypen for raden er %1, satskode kan ikke angis.;SVE=Kostnadstypen f”r raden „r %1, avgiftskod kan inte anges';
      Text004@1100525005 : TextConst 'ENU=Change Cost Type ?;NOR=Endre kostnadstype?;SVE=Žndra kostnadstyp?';
      Text005@1100525004 : TextConst 'ENU=Unit Price not allowed because Cost Type of this record is Labor !;NOR=Enhetsprisen er ikke tillatt siden Kostnadstypen for denne posten er arbeidskraft!;SVE=Enhetspriset „r inte till†tet eftersom kostnadstypen f”r denna post „r arbetskraft!';
      ItemRec@1100525002 : Record 27;
      Text006@1100525010 : TextConst 'ENU=Cancel %1 only allowed for Objects and Standard Objects';
      Text007@1100525003 : TextConst 'ENU=Can not modify line on this level';

    PROCEDURE CalcTotals@1();
    BEGIN
      Hours := "Frequency per Year" * Quantity * Norm;
      "Hours per Service" := Quantity * Norm;

      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        IF Rate = 0 THEN BEGIN
          "Cost Amount" := "Frequency per Year" * Quantity * "Cost Price";
          "Cost per Service" := Quantity * "Cost Price";
        END ELSE BEGIN
          "Cost Amount" := "Frequency per Year" * Quantity * Norm * Rate;
          "Cost per Service" := Quantity * Norm * Rate;
        END;
      END ELSE BEGIN
        "Cost Amount" := ROUND("Frequency per Year" * Quantity * "Cost Price");
        "Cost per Service" := ROUND(Quantity * "Cost Price");
      END;
    END;

    PROCEDURE CalcDiscount@1100485004();
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        "Purchase Discount %" := (("Gross Price" - "Cost Price") / "Gross Price") * 100;
      END;
    END;

    PROCEDURE GetDefaultsCostObject@3();
    VAR
      DimValRec@1100525000 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');

      IF Description = '' THEN
        Description := DimValRec.Name;
      IF "Unit of Measure" = '' THEN
        "Unit of Measure" := DimValRec."Unit of Measure";
      IF "Cost Component" = '' THEN
        "Cost Component" := DimValRec."Cost Component";

      "Cost Type" := DimValRec."Cost Type";
      CASE "Cost Type" OF
        "Cost Type"::Labor:
          BEGIN
            IF Norm = 0 THEN
              Norm := DimValRec.Norm;
            IF ("Rate Code" = '') AND (Rate = 0) THEN
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
        ELSE
          IF "Cost Price" = 0 THEN
            "Cost Price" := DimValRec.Price;
      END;
      CalcTotals;
    END;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item';SwitchItem@1100528600 : Boolean);
    VAR
      DummyDat@11012001 : Date;
      Desc1Txt@1210190000 : Text[50];
      Desc2Txt@1210190001 : Text[50];
      lvRefDate@1100485003 : Date;
      lvDiscRef1@1100485002 : Code[20];
      lvDiscRef2@1100485001 : Code[20];
    BEGIN
      //GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
      IF SwitchItem THEN
        "Price Agreement" := FALSE;
      IF "Index Date" = 0D THEN
        lvRefDate := TODAY
      ELSE
        lvRefDate := "Index Date";

      ValidateCu.ValidateItem(
        LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
        "Basic Item","Cost Object",Desc1Txt,"Unit of Measure","Cost Price",
        "Purchase Discount %",DummyDat,"Gross Price",Desc2Txt,"Cost Component",
        lvDiscRef1,lvDiscRef2,lvRefDate,'');

      IF Desc2Txt = '' THEN
        Description := Desc1Txt
      ELSE
        Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

      IF ItemRec.GET("Item No.") THEN
        VALIDATE(Text, ItemRec.Text);

      //ValidateCu.DetermineSalesDiscount(
      //  "Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
      //  "Sales Price", "Sales Discount %", "Gross Price", lvRefDate, '');

      CalcTotals;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11071744;MainOldRec@1210190007 : Record 11071744);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF "Gross Price" <> 0 THEN
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld))
          ELSE
            VALIDATE("Cost Price", ("Cost Price" * UnitFactorNew / UnitFactorOld));
        END;
      END;
    END;

    PROCEDURE CalculateNetPrice@1210190005();
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        "Cost Price" := "Gross Price" - (("Gross Price"/100) * "Purchase Discount %");
      END;
    END;

    PROCEDURE CalculateGrossPrice@1100485007();
    BEGIN
      IF "Purchase Discount %" <> 100 THEN
        "Gross Price" := "Cost Price" * 100 / (100 - "Purchase Discount %");
    END;

    PROCEDURE EvaluateTimeQuantity@1100485000();
    VAR
      MaintenanceManagement@1100525000 : Codeunit 11012829;
    BEGIN
      "Frequency per Year" := MaintenanceManagement.ConvPeriodToTimesPerYear("Maintenance Interval");
      VALIDATE("Frequency per Year");
    END;

    PROCEDURE SetTimeQuanMaintenanceRelation@1100525012();
    VAR
      SchemeLineRec@1100525000 : Record 11071744;
      DateFormula@1100525001 : DateFormula;
    BEGIN
      IF "Maintenance Relation" = '' THEN EXIT;

      SchemeLineRec.SETRANGE("Type Code", "Type Code");
      SchemeLineRec.SETFILTER("Maintenance Relation", '<>%1', '');
      SchemeLineRec.SETFILTER("Maintenance Interval", '%1', DateFormula);
      IF SchemeLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          SchemeLineRec."Frequency per Year" := "Frequency per Year";
          SchemeLineRec.CalcTotals;
          SchemeLineRec.MODIFY;
        UNTIL SchemeLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetTimeQuanMaintenanceRelation@1100525008();
    VAR
      ServSetup@1100525003 : Record 11012800;
      SchemeLineRec@1100525002 : Record 11071744;
      DateFormula@1100525000 : DateFormula;
    BEGIN
      IF "Maintenance Relation" = '' THEN EXIT;

      SchemeLineRec.SETRANGE("Type Code", "Type Code");
      SchemeLineRec.SETFILTER("Maintenance Relation", '<>%1', '');
      SchemeLineRec.SETFILTER("Maintenance Interval", '<>%1', DateFormula);
      IF SchemeLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF ServSetup.CodeInFilter("Maintenance Relation",SchemeLineRec."Maintenance Relation") THEN BEGIN
            "Frequency per Year" := SchemeLineRec."Frequency per Year";
            CalcTotals;
            MODIFY;
          END;
        UNTIL SchemeLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateItemPrice@1100525006(LTypeArtOpt@1100525000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@1100525003 : Date;
      Desc1Txt@1100525002 : Text[50];
      Desc2Txt@1100525001 : Text[50];
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
    BEGIN
      IF NOT "Price Agreement" THEN
        ValidateCu.ValidateItem(
          LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
          "Basic Item","Cost Object",Desc1Txt,"Unit of Measure","Cost Price",
          "Purchase Discount %",DummyDat,"Gross Price",Desc2Txt,"Cost Component",
          lvDiscRef1,lvDiscRef2,"Index Date",'');
    END;

    PROCEDURE ValidateRateCodeByCompany@1100409000(ICompanyName@1100409000 : Text[1024]);
    VAR
      ServiceObject@1100525001 : Record 11071691;
      BudgetRateManagement@1100525000 : Codeunit 11012358;
      MaintenanceManagement@1100525004 : Codeunit 11012829;
      IndexDate@1100409001 : Date;
      DepartmentCode@1100525002 : Code[20];
      BudgetRateFoundAt@1100525003 : Text[250];
      ServiceContractNo@1100525006 : Code[20];
    BEGIN
      IF ("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting) THEN BEGIN
        IF "Index Date" = 0D THEN
          IndexDate := TODAY
        ELSE
          IndexDate := "Index Date";

        IF "Line Type" = "Line Type"::Object THEN BEGIN
          ServiceObject.GET("Type Code");
          ServiceContractNo := MaintenanceManagement.GetActualContractForObject("Type Code", IndexDate);
          DepartmentCode := ServiceObject.GetDepartmentCode(ServiceContractNo);
        END;
        Rate :=
          BudgetRateManagement.GetBudgetRateByCompany(
            1, '', '', '', DepartmentCode, "Rate Code", IndexDate, ICompanyName, BudgetRateFoundAt);
        IF ("Cost Type" = "Cost Type"::Subcontracting) THEN BEGIN
          "Cost Price" := Norm * Rate;
          Rate := 0;
        END;
        CalcTotals;
      END ELSE BEGIN
        MESSAGE(Text003, "Cost Type");
        "Rate Code" := '';
      END;
    END;

    PROCEDURE SetAsCancelled@1100528600(ICancelled@1100528600 : Boolean;ILevelLineType@1100528602 : 'Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object';ILevelTypeCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528605 : Code[20];ILevelIndexDate@1100528604 : Date);
    VAR
      MaintSchemeLineProperty@1100528601 : Record 11071954;
    BEGIN
      IF ICancelled THEN
        IF NOT (ILevelLineType IN
          [ILevelLineType::"Standard Object", ILevelLineType::Object, ILevelLineType::"Object Installation"])
        THEN
          ERROR(Text006, TABLECAPTION);
      IF NOT ICancelled THEN BEGIN
        CASE ILevelLineType OF
          ILevelLineType::Object:
            IF "Line Type" <> "Line Type"::"Standard Object" THEN
              IF NOT MaintSchemeLineProperty.GET(
                ILevelLineType, ILevelTypeCode, ILevelBelongstoScheme, ILevelIndexDate,
                "Line Type", "Type Code", "Line No.", "Belongs to Scheme")
              THEN
                ERROR(Text007)
              ELSE
                IF NOT MaintSchemeLineProperty.Cancelled THEN
                  ERROR(Text007);
          ILevelLineType::"Standard Object":
            IF "Line Type" <> "Line Type"::"Maintenance Scheme" THEN
              ERROR(Text007);
        END;
      END;
      IF ICancelled THEN BEGIN
        IF NOT MaintSchemeLineProperty.GET(
          ILevelLineType, ILevelTypeCode, ILevelBelongstoScheme, ILevelIndexDate,
          "Line Type", "Type Code", "Line No.", "Belongs to Scheme")
        THEN BEGIN
          MaintSchemeLineProperty."Line Type" := ILevelLineType;
          MaintSchemeLineProperty."Type Code" := ILevelTypeCode;
          MaintSchemeLineProperty."Belongs to Scheme" := ILevelBelongstoScheme;
          MaintSchemeLineProperty."Index Date" := ILevelIndexDate;
          MaintSchemeLineProperty."Line Type (Base)" := "Line Type";
          MaintSchemeLineProperty."Type Code (Base)" := "Type Code";
          MaintSchemeLineProperty."Line No. (Base)" := "Line No.";
          MaintSchemeLineProperty."Belongs to Scheme (Base)" := "Belongs to Scheme";
          MaintSchemeLineProperty.Cancelled := TRUE;
          MaintSchemeLineProperty.INSERT(TRUE);
        END ELSE BEGIN
          MaintSchemeLineProperty.Cancelled := TRUE;
          MaintSchemeLineProperty.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        IF MaintSchemeLineProperty.GET(
          ILevelLineType, ILevelTypeCode, ILevelBelongstoScheme, ILevelIndexDate,
          "Line Type", "Type Code", "Line No.", "Belongs to Scheme")
        THEN BEGIN
          IF MaintSchemeLineProperty."Adjustment Factor Norm" = 0 THEN
            MaintSchemeLineProperty.DELETE(TRUE)
          ELSE BEGIN
            MaintSchemeLineProperty.Cancelled := FALSE;
            MaintSchemeLineProperty.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE IsCancelled@1100528601(ILevelLineType@1100528604 : 'Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object';ILevelTypeCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528602 : Code[20];ILevelIndexDate@1100528608 : Date;ILowerLevelSeekDate@1100528601 : Date;VAR OCancellationLevel@1100528607 : ' ,Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object') : Boolean;
    VAR
      MaintSchemeLineProperty@1100528600 : Record 11071954;
      ServiceObject@1100528606 : Record 11071691;
      MaintenanceSchemeVersion@1100528605 : Record 11071743;
    BEGIN
      OCancellationLevel := OCancellationLevel::" ";
      CASE ILevelLineType OF
        ILevelLineType::Object:
          BEGIN
            MaintenanceSchemeVersion.SETRANGE("Line Type", ILevelLineType);
            MaintenanceSchemeVersion.SETRANGE(Code, ILevelTypeCode);
            MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
            IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
              IF MaintSchemeLineProperty.GET(
                MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                 MaintSchemeLineProperty.Cancelled
              THEN BEGIN
                OCancellationLevel := ILevelLineType +1;
                EXIT(TRUE);
              END;
            END;

            IF ServiceObject.GET(ILevelTypeCode) THEN BEGIN
              MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::"Standard Object");
              MaintenanceSchemeVersion.SETRANGE(Code, ServiceObject."Standard Object No.");
              MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
              MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILowerLevelSeekDate);
              MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
              IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
                IF MaintSchemeLineProperty.GET(
                  MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                  MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                  "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                   MaintSchemeLineProperty.Cancelled
                THEN BEGIN
                  OCancellationLevel := MaintenanceSchemeVersion."Line Type" +1;
                  EXIT(TRUE);
                END;
              END;
            END;
          END;
        ILevelLineType::"Standard Object":
          BEGIN
            MaintenanceSchemeVersion.SETRANGE("Line Type", ILevelLineType);
            MaintenanceSchemeVersion.SETRANGE(Code, ILevelTypeCode);
            MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
            IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
              IF MaintSchemeLineProperty.GET(
                MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                 MaintSchemeLineProperty.Cancelled
              THEN BEGIN
                OCancellationLevel := ILevelLineType +1;
                EXIT(TRUE);
              END;
            END;
          END;
        ILevelLineType::"Object Installation":
          BEGIN
            MaintenanceSchemeVersion.SETRANGE("Line Type", ILevelLineType);
            MaintenanceSchemeVersion.SETRANGE(Code, ILevelTypeCode);
            MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
            IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
              IF MaintSchemeLineProperty.GET(
                MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                 MaintSchemeLineProperty.Cancelled
              THEN BEGIN
                OCancellationLevel := ILevelLineType +1;
                EXIT(TRUE);
              END;
            END;
          END;
      END;
    END;

    PROCEDURE SetAdjustmentFactorNorm@1100528607(IAdjustmentFactorNorm@1100528600 : Decimal;ILevelLineType@1100528602 : 'Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object';ILevelTypeCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528605 : Code[20];ILevelIndexDate@1100528604 : Date);
    VAR
      MaintSchemeLineProperty@1100528601 : Record 11071954;
    BEGIN
      //IF IAdjustmentFactorNorm <> 0 THEN
      //  IF NOT (ILevelLineType IN
      //    [ILevelLineType::"Standard Object", ILevelLineType::Object, ILevelLineType::"Object Installation"])
      //  THEN
      //    ERROR(Text008, MaintSchemeLineProperty.fieldcaption("Adjustment Factor Norm"));
      //IF IAdjustmentFactorNorm = 0 THEN BEGIN
      //  CASE ILevelLineType OF
      //    ILevelLineType::Object:
      //      IF "Line Type" <> "Line Type"::"Standard Object" THEN
      //        IF NOT MaintSchemeLineProperty.GET(
      //          ILevelLineType, ILevelTypeCode, ILevelBelongstoScheme, ILevelIndexDate,
      //          "Line Type", "Type Code", "Line No.", "Belongs to Scheme")
      //        THEN
      //          ERROR(Text007);
      //    ILevelLineType::"Standard Object":
      //      IF "Line Type" <> "Line Type"::"Maintenance Scheme" THEN
      //        ERROR(Text007);
      //  END;
      //END;
      IF IAdjustmentFactorNorm <> 0 THEN BEGIN
        IF NOT MaintSchemeLineProperty.GET(
          ILevelLineType, ILevelTypeCode, ILevelBelongstoScheme, ILevelIndexDate,
          "Line Type", "Type Code", "Line No.", "Belongs to Scheme")
        THEN BEGIN
          MaintSchemeLineProperty."Line Type" := ILevelLineType;
          MaintSchemeLineProperty."Type Code" := ILevelTypeCode;
          MaintSchemeLineProperty."Belongs to Scheme" := ILevelBelongstoScheme;
          MaintSchemeLineProperty."Index Date" := ILevelIndexDate;
          MaintSchemeLineProperty."Line Type (Base)" := "Line Type";
          MaintSchemeLineProperty."Type Code (Base)" := "Type Code";
          MaintSchemeLineProperty."Line No. (Base)" := "Line No.";
          MaintSchemeLineProperty."Belongs to Scheme (Base)" := "Belongs to Scheme";
          MaintSchemeLineProperty."Adjustment Factor Norm" := IAdjustmentFactorNorm;
          MaintSchemeLineProperty.INSERT(TRUE);
        END ELSE BEGIN
          MaintSchemeLineProperty."Adjustment Factor Norm" := IAdjustmentFactorNorm;
          MaintSchemeLineProperty.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        IF MaintSchemeLineProperty.GET(
          ILevelLineType, ILevelTypeCode, ILevelBelongstoScheme, ILevelIndexDate,
          "Line Type", "Type Code", "Line No.", "Belongs to Scheme")
        THEN BEGIN
          IF NOT MaintSchemeLineProperty.Cancelled THEN
            MaintSchemeLineProperty.DELETE(TRUE)
          ELSE BEGIN
            MaintSchemeLineProperty."Adjustment Factor Norm" := 0;
            MaintSchemeLineProperty.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE GetAdjustmentFactorNorm@1100528606(ILevelLineType@1100528604 : 'Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object';ILevelTypeCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528602 : Code[20];ILevelIndexDate@1100528608 : Date;ILowerLevelSeekDate@1100528601 : Date;VAR OAdjustmentFactorNormLevel@1100528607 : ' ,Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object') : Decimal;
    VAR
      MaintSchemeLineProperty@1100528600 : Record 11071954;
      ServiceObject@1100528606 : Record 11071691;
      MaintenanceSchemeVersion@1100528605 : Record 11071743;
    BEGIN
      OAdjustmentFactorNormLevel := OAdjustmentFactorNormLevel::" ";
      CASE ILevelLineType OF
        ILevelLineType::Object:
          BEGIN
            MaintenanceSchemeVersion.SETRANGE("Line Type", ILevelLineType);
            MaintenanceSchemeVersion.SETRANGE(Code, ILevelTypeCode);
            MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
            IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
              IF MaintSchemeLineProperty.GET(
                MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                 (MaintSchemeLineProperty."Adjustment Factor Norm" <> 0)
              THEN BEGIN
                OAdjustmentFactorNormLevel := ILevelLineType +1;
                EXIT(MaintSchemeLineProperty."Adjustment Factor Norm");
              END;
            END;

            IF ServiceObject.GET(ILevelTypeCode) THEN BEGIN
              MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::"Standard Object");
              MaintenanceSchemeVersion.SETRANGE(Code, ServiceObject."Standard Object No.");
              MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
              MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILowerLevelSeekDate);
              MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
              IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
                IF MaintSchemeLineProperty.GET(
                  MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                  MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                  "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                   (MaintSchemeLineProperty."Adjustment Factor Norm" <> 0)
                THEN BEGIN
                  OAdjustmentFactorNormLevel := MaintenanceSchemeVersion."Line Type" +1;
                  EXIT(MaintSchemeLineProperty."Adjustment Factor Norm");
                END;
              END;
            END;

            IF ILevelBelongstoScheme <> '' THEN BEGIN
              MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::"Maintenance Scheme");
              MaintenanceSchemeVersion.SETRANGE(Code, ILevelBelongstoScheme);
              MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", '');
              MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILowerLevelSeekDate);
              MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
              IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
                IF MaintSchemeLineProperty.GET(
                  MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                  MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                  "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                   (MaintSchemeLineProperty."Adjustment Factor Norm" <> 0)
                THEN BEGIN
                  OAdjustmentFactorNormLevel := MaintenanceSchemeVersion."Line Type" +1;
                  EXIT(MaintSchemeLineProperty."Adjustment Factor Norm");
                END;
              END;
            END;
          END;
        ILevelLineType::"Standard Object",
        ILevelLineType::"Maintenance Scheme":
          BEGIN
            MaintenanceSchemeVersion.SETRANGE("Line Type", ILevelLineType);
            MaintenanceSchemeVersion.SETRANGE(Code, ILevelTypeCode);
            MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
            IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
              IF MaintSchemeLineProperty.GET(
                MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                 (MaintSchemeLineProperty."Adjustment Factor Norm" <> 0)
              THEN BEGIN
                OAdjustmentFactorNormLevel := ILevelLineType +1;
                EXIT(MaintSchemeLineProperty."Adjustment Factor Norm");
              END;
            END;

            IF (ILevelLineType = ILevelLineType::"Standard Object") AND (ILevelBelongstoScheme <> '') THEN BEGIN
              MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::"Maintenance Scheme");
              MaintenanceSchemeVersion.SETRANGE(Code, ILevelBelongstoScheme);
              MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", '');
              MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILowerLevelSeekDate);
              MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
              IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
                IF MaintSchemeLineProperty.GET(
                  MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                  MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                  "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                   (MaintSchemeLineProperty."Adjustment Factor Norm" <> 0)
                THEN BEGIN
                  OAdjustmentFactorNormLevel := MaintenanceSchemeVersion."Line Type" +1;
                  EXIT(MaintSchemeLineProperty."Adjustment Factor Norm");
                END;
              END;
            END;
          END;
        ILevelLineType::"Object Installation":
          BEGIN
            MaintenanceSchemeVersion.SETRANGE("Line Type", ILevelLineType);
            MaintenanceSchemeVersion.SETRANGE(Code, ILevelTypeCode);
            MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
            IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
              IF MaintSchemeLineProperty.GET(
                MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date",
                "Line Type", "Type Code", "Line No.", "Belongs to Scheme") AND
                 (MaintSchemeLineProperty."Adjustment Factor Norm" <> 0)
              THEN BEGIN
                OAdjustmentFactorNormLevel := ILevelLineType +1;
                EXIT(MaintSchemeLineProperty."Adjustment Factor Norm");
              END;
            END;
          END;
      END;
      EXIT(1);
    END;

    PROCEDURE TestSurveyTemplate@1100528602();
    VAR
      MaintenanceScheme@1100528600 : Record 11071745;
    BEGIN
      IF Quantity = 0 THEN
        EXIT;
      IF "Line Type" <> "Line Type"::"Maintenance Scheme" THEN
        EXIT;
      MaintenanceScheme.GET("Type Code");
      MaintenanceScheme.TESTFIELD("Survey Template", FALSE);
    END;

    PROCEDURE GetHours@1100528603(IOriginalLineType@1100528603 : Option;IOriginalTypeCode@1100528602 : Code[20];IOriginalBelongstoScheme@1100528601 : Code[20];IOriginalIndexDate@1100528600 : Date) : Decimal;
    VAR
      AdjustmentFactorNormLevel@1100528604 : Option;
    BEGIN
      EXIT(Hours *
        GetAdjustmentFactorNorm(
          IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate, WORKDATE, AdjustmentFactorNormLevel));
    END;

    PROCEDURE GetHoursPerService@1100528617(IOriginalLineType@1100528603 : Option;IOriginalTypeCode@1100528602 : Code[20];IOriginalBelongstoScheme@1100528601 : Code[20];IOriginalIndexDate@1100528600 : Date) : Decimal;
    VAR
      AdjustmentFactorNormLevel@1100528604 : Option;
    BEGIN
      EXIT("Hours per Service" *
        GetAdjustmentFactorNorm(
          IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate, WORKDATE, AdjustmentFactorNormLevel));
    END;

    PROCEDURE GetCostAmount@1100528608(IOriginalLineType@1100528603 : Option;IOriginalTypeCode@1100528602 : Code[20];IOriginalBelongstoScheme@1100528601 : Code[20];IOriginalIndexDate@1100528600 : Date) : Decimal;
    VAR
      AdjustmentFactorNormLevel@1100528604 : Option;
    BEGIN
      IF ("Cost Type" = "Cost Type"::Labor) AND (Rate <> 0) THEN
        EXIT("Cost Amount" *
          GetAdjustmentFactorNorm(
            IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate, WORKDATE, AdjustmentFactorNormLevel))
      ELSE
        EXIT("Cost Amount");
    END;

    PROCEDURE GetCostPerService@1100528611(IOriginalLineType@1100528603 : Option;IOriginalTypeCode@1100528602 : Code[20];IOriginalBelongstoScheme@1100528601 : Code[20];IOriginalIndexDate@1100528600 : Date) : Decimal;
    VAR
      AdjustmentFactorNormLevel@1100528604 : Option;
    BEGIN
      IF ("Cost Type" = "Cost Type"::Labor) AND (Rate <> 0) THEN
        EXIT("Cost per Service" *
          GetAdjustmentFactorNorm(
            IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate, WORKDATE, AdjustmentFactorNormLevel))
      ELSE
        EXIT("Cost per Service");
    END;

    PROCEDURE GetTotalHours@1100528604(IOriginalLineType@1100528601 : Option;IOriginalTypeCode@1100528602 : Code[20];IOriginalBelongstoScheme@1100528603 : Code[20];IOriginalIndexDate@1100528604 : Date) TotalHours : Decimal;
    VAR
      MaintSchemeVersionLine@1100528600 : Record 11071744;
      AdjustmentFactorNormLevel@1100528605 : Option;
    BEGIN
      MaintSchemeVersionLine.SETRANGE("Line Type", "Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", "Type Code");
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", "Belongs to Scheme");
      MaintSchemeVersionLine.SETRANGE("Index Date", "Index Date");
      IF MaintSchemeVersionLine.FINDSET THEN
        REPEAT
          TotalHours += MaintSchemeVersionLine.Hours *
            MaintSchemeVersionLine.GetAdjustmentFactorNorm(
              IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate, WORKDATE, AdjustmentFactorNormLevel);
        UNTIL MaintSchemeVersionLine.NEXT = 0;
      EXIT(TotalHours);
    END;

    PROCEDURE GetTotalHoursPerService@1100528609(IOriginalLineType@1100528604 : Option;IOriginalTypeCode@1100528603 : Code[20];IOriginalBelongstoScheme@1100528602 : Code[20];IOriginalIndexDate@1100528601 : Date) TotalHoursPerService : Decimal;
    VAR
      MaintSchemeVersionLine@1100528600 : Record 11071744;
      AdjustmentFactorNormLevel@1100528605 : Option;
    BEGIN
      MaintSchemeVersionLine.SETRANGE("Line Type", "Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", "Type Code");
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", "Belongs to Scheme");
      MaintSchemeVersionLine.SETRANGE("Index Date", "Index Date");
      MaintSchemeVersionLine.SETRANGE("Cost Type", MaintSchemeVersionLine."Cost Type"::Labor);
      IF MaintSchemeVersionLine.FINDSET THEN
        REPEAT
          TotalHoursPerService +=
            MaintSchemeVersionLine.Quantity * MaintSchemeVersionLine.Norm *
            MaintSchemeVersionLine.GetAdjustmentFactorNorm(
              IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate, WORKDATE, AdjustmentFactorNormLevel);
        UNTIL MaintSchemeVersionLine.NEXT = 0;
      EXIT(TotalHoursPerService);
    END;

    PROCEDURE GetLaborPerService@1100528610(IOriginalLineType@1100528604 : Option;IOriginalTypeCode@1100528603 : Code[20];IOriginalBelongstoScheme@1100528602 : Code[20];IOriginalIndexDate@1100528601 : Date) LaborPerService : Decimal;
    VAR
      MaintSchemeVersionLine@1100528600 : Record 11071744;
    BEGIN
      MaintSchemeVersionLine.SETRANGE("Line Type", "Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", "Type Code");
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", "Belongs to Scheme");
      MaintSchemeVersionLine.SETRANGE("Index Date", "Index Date");
      MaintSchemeVersionLine.SETRANGE("Cost Type", MaintSchemeVersionLine."Cost Type"::Labor);
      IF MaintSchemeVersionLine.FINDSET THEN
        REPEAT
          LaborPerService +=
            MaintSchemeVersionLine.GetCostPerService(IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate);
        UNTIL MaintSchemeVersionLine.NEXT = 0;
      EXIT(LaborPerService);
    END;

    PROCEDURE GetTotalCostPerService@1100528612(IOriginalLineType@1100528604 : Option;IOriginalTypeCode@1100528603 : Code[20];IOriginalBelongstoScheme@1100528602 : Code[20];IOriginalIndexDate@1100528601 : Date) TotalCostPerService : Decimal;
    VAR
      MaintSchemeVersionLine@1100528600 : Record 11071744;
    BEGIN
      MaintSchemeVersionLine.SETRANGE("Line Type", "Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", "Type Code");
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", "Belongs to Scheme");
      MaintSchemeVersionLine.SETRANGE("Index Date", "Index Date");
      IF MaintSchemeVersionLine.FINDSET THEN
        REPEAT
          TotalCostPerService +=
            MaintSchemeVersionLine.GetCostPerService(IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate);
        UNTIL MaintSchemeVersionLine.NEXT = 0;
      EXIT(TotalCostPerService);
    END;

    PROCEDURE GetTotalLabor@1100528613(IOriginalLineType@1100528604 : Option;IOriginalTypeCode@1100528603 : Code[20];IOriginalBelongstoScheme@1100528602 : Code[20];IOriginalIndexDate@1100528601 : Date) TotalLabor : Decimal;
    VAR
      MaintSchemeVersionLine@1100528600 : Record 11071744;
    BEGIN
      MaintSchemeVersionLine.SETRANGE("Line Type", "Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", "Type Code");
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", "Belongs to Scheme");
      MaintSchemeVersionLine.SETRANGE("Index Date", "Index Date");
      MaintSchemeVersionLine.SETRANGE("Cost Type", MaintSchemeVersionLine."Cost Type"::Labor);
      IF MaintSchemeVersionLine.FINDSET THEN
        REPEAT
          TotalLabor +=
            MaintSchemeVersionLine.GetCostAmount(IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate);
        UNTIL MaintSchemeVersionLine.NEXT = 0;
      EXIT(TotalLabor);
    END;

    PROCEDURE GetTotalAmount@1100528614(IOriginalLineType@1100528604 : Option;IOriginalTypeCode@1100528603 : Code[20];IOriginalBelongstoScheme@1100528602 : Code[20];IOriginalIndexDate@1100528601 : Date) TotalAmount : Decimal;
    VAR
      MaintSchemeVersionLine@1100528600 : Record 11071744;
    BEGIN
      MaintSchemeVersionLine.SETRANGE("Line Type", "Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", "Type Code");
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", "Belongs to Scheme");
      MaintSchemeVersionLine.SETRANGE("Index Date", "Index Date");
      IF MaintSchemeVersionLine.FINDSET THEN
        REPEAT
          TotalAmount += MaintSchemeVersionLine.GetCostAmount(IOriginalLineType, IOriginalTypeCode, IOriginalBelongstoScheme, IOriginalIndexDate);
        UNTIL MaintSchemeVersionLine.NEXT = 0;
      EXIT(TotalAmount);
    END;

    PROCEDURE HandleAssistEditTradeItem@1100528300() : Boolean;
    VAR
      WebshopItemMgt@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      WebshopItemMgt.RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
      EXIT(TRUE);
    END;

    PROCEDURE ValidateUnitOfMeasure@1100528400(UnitOfMeasureCode@1100528400 : Code[10]);
    BEGIN
      "Unit of Measure" := UnitOfMeasureCode;
      IF ("Cost Type" = "Cost Type"::Material) THEN
        IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
          CheckItemUnitConversion(Rec, xRec);
      CalcTotals;
    END;

    BEGIN
    END.
  }
}

