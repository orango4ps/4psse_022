OBJECT Table 6086314 CEM Bank
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               BankAgreement@1160040000 : Record 6086315;
             BEGIN
               BankAgreement.SETRANGE("Bank Code",Code);
               BankAgreement.SETRANGE("Country/Region Code","Country/Region Code");
               IF NOT BankAgreement.ISEMPTY THEN
                 ERROR(Text001);
             END;

    CaptionML=[DEU=Bankkonto;
               ENU=Bank;
               NLD=Bank;
               NOR=Bank;
               SVE=Bank];
    LookupPageID=Page6086343;
    DrillDownPageID=Page6086343;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[DEU=Code;
                                                              ENU=Code;
                                                              NLD=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 10  ;   ;Name                ;Text30        ;CaptionML=[DEU=Name;
                                                              ENU=Name;
                                                              NLD=Naam;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 20  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[DEU=LÑnder-/Regionscode;
                                                              ENU=Country/Region Code;
                                                              NLD=Land-/regiocode;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
  }
  KEYS
  {
    {    ;Code,Country/Region Code                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1160040000 : TextConst 'DEU=Bank kann nicht gelîscht werden, da eine oder mehrere Bankvereinbarungen mit der Bank verknÅpft sind.;ENU=Bank cannot be deleted because there are one or more bank agreements for this bank.;NLD=Bank kan niet verwijderd worden omdat er ÇÇn of meerdere bankovereenkomsten voor deze bank zijn.';

    PROCEDURE ShowCurrencyMap@1160040001();
    VAR
      Currency@1160040003 : Record 4;
      BankCurrencyMap@1160040000 : Record 6086310;
      BankCurrencyMapTemp@1160040001 : TEMPORARY Record 6086310;
      BankTransInbox@1160040002 : Record 6086331;
    BEGIN
      BankCurrencyMap.SETRANGE("Bank Code",Code);
      BankCurrencyMap.SETRANGE("Bank Country/Region Code","Country/Region Code");

      IF BankCurrencyMap.FINDFIRST THEN
        REPEAT
          BankCurrencyMapTemp := BankCurrencyMap;
          BankCurrencyMapTemp.INSERT;
        UNTIL BankCurrencyMap.NEXT = 0;

      BankTransInbox.SETCURRENTKEY("Bank Code","Bank Country/Region",Status);
      BankTransInbox.SETRANGE("Bank Code",Code);
      BankTransInbox.SETRANGE("Bank Country/Region","Country/Region Code");
      BankTransInbox.SETFILTER(Status,'%1|%2',BankTransInbox.Status::Pending,BankTransInbox.Status::Error);
      IF BankTransInbox.FINDFIRST THEN
        REPEAT
          IF NOT BankCurrencyMapTemp.GET(BankTransInbox."Bank Code",BankTransInbox."Bank Country/Region",BankTransInbox."Currency Code")
          THEN BEGIN
            BankCurrencyMapTemp.INIT;
            BankCurrencyMapTemp."Bank Code" := BankTransInbox."Bank Code";
            BankCurrencyMapTemp."Bank Country/Region Code" := BankTransInbox."Bank Country/Region";
            BankCurrencyMapTemp."Currency Code (Bank)" := BankTransInbox."Currency Code";

            IF Currency.GET(BankTransInbox."Currency Code") THEN
              BankCurrencyMapTemp."Currency Code (NAV)" := BankTransInbox."Currency Code";
            BankCurrencyMapTemp.INSERT;
          END;
        UNTIL BankTransInbox.NEXT = 0;

      BankCurrencyMapTemp.SETRANGE("Bank Code",Code);
      BankCurrencyMapTemp.SETRANGE("Bank Country/Region Code","Country/Region Code");
      PAGE.RUNMODAL(0,BankCurrencyMapTemp);

      BankCurrencyMap.DELETEALL(TRUE);

      IF BankCurrencyMapTemp.FINDFIRST THEN
        REPEAT
          IF BankCurrencyMapTemp."Currency Code (Bank)" <> BankCurrencyMapTemp."Currency Code (NAV)" THEN BEGIN
            BankCurrencyMap := BankCurrencyMapTemp;
            BankCurrencyMap.INSERT;
          END;
        UNTIL BankCurrencyMapTemp.NEXT = 0;
    END;

    PROCEDURE ShowCountryRegionMap@1160040000();
    VAR
      CountryRegion@1160040003 : Record 9;
      BankCountryRegionMap@1160040000 : Record 6086312;
      BankCountryRegionMapTemp@1160040001 : TEMPORARY Record 6086312;
      BankTransInbox@1160040002 : Record 6086331;
    BEGIN
      BankCountryRegionMap.SETRANGE("Bank Code",Code);
      BankCountryRegionMap.SETRANGE("Bank Country/Region Code","Country/Region Code");
      IF BankCountryRegionMap.FINDFIRST THEN
        REPEAT
          BankCountryRegionMapTemp := BankCountryRegionMap;
          BankCountryRegionMapTemp.INSERT;
        UNTIL BankCountryRegionMap.NEXT = 0;

      BankTransInbox.SETCURRENTKEY("Bank Code","Bank Country/Region",Status);
      BankTransInbox.SETRANGE("Bank Code",Code);
      BankTransInbox.SETRANGE("Bank Country/Region","Country/Region Code");
      BankTransInbox.SETFILTER(Status,'%1|%2',BankTransInbox.Status::Pending,BankTransInbox.Status::Error);
      IF BankTransInbox.FINDFIRST THEN
        REPEAT
          IF NOT BankCountryRegionMapTemp.GET(BankTransInbox."Bank Code",
             BankTransInbox."Bank Country/Region",BankTransInbox."Business Country/Region")
          THEN BEGIN
            BankCountryRegionMapTemp.INIT;
            BankCountryRegionMapTemp."Bank Code" := BankTransInbox."Bank Code";
            BankCountryRegionMapTemp."Bank Country/Region Code" := BankTransInbox."Bank Country/Region";
            BankCountryRegionMapTemp."Country/Region Code (Bank)" := BankTransInbox."Business Country/Region";

            IF STRLEN(BankTransInbox."Business Country/Region") <= 10 THEN
              IF CountryRegion.GET(BankTransInbox."Business Country/Region") THEN
                BankCountryRegionMapTemp."Country/Region Code (NAV)" := CountryRegion.Code;
            BankCountryRegionMapTemp.INSERT;
          END;
        UNTIL BankTransInbox.NEXT = 0;

      BankCountryRegionMapTemp.SETRANGE("Bank Code",Code);
      BankCountryRegionMapTemp.SETRANGE("Bank Country/Region Code","Country/Region Code");
      PAGE.RUNMODAL(0,BankCountryRegionMapTemp);

      BankCountryRegionMap.DELETEALL(TRUE);

      IF BankCountryRegionMapTemp.FINDFIRST THEN
        REPEAT
          IF BankCountryRegionMapTemp."Country/Region Code (Bank)" <> BankCountryRegionMapTemp."Country/Region Code (NAV)" THEN BEGIN
            BankCountryRegionMap := BankCountryRegionMapTemp;
            BankCountryRegionMap.INSERT;
          END;
        UNTIL BankCountryRegionMapTemp.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

