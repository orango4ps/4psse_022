OBJECT Codeunit 12013630 ExFlow-Get PO from Purchase
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF510000;
  }
  PROPERTIES
  {
    TableNo=39;
    OnRun=VAR
            PurchHeader@1100285003 : Record 38;
            PurchOrderLine@1100285000 : Record 39;
            ExFlowSetup@1100285002 : Record 12013601;
            PurchLine@1100285004 : Record 39;
            GetPurchaseOrders@1100285001 : Page 12013638;
          BEGIN
            ExFlowSetup.GET;
            IF NOT (ExFlowSetup."Order Applies-to" IN [ExFlowSetup."Order Applies-to"::"First Order then Receipt",
                                                       ExFlowSetup."Order Applies-to"::"Purch Order Lines"]) THEN
              ERROR(STRSUBSTNO(EXF002,ExFlowSetup.FIELDCAPTION("Order Applies-to"),ExFlowSetup."Order Applies-to"::"First Order then Receipt",
                                                                                   ExFlowSetup."Order Applies-to"::"Purch Order Lines"));

            PurchHeader.GET("Document Type","Document No.");
            PurchHeader.TESTFIELD("Document Type",PurchHeader."Document Type"::Invoice);

            SetFilters(PurchHeader,PurchOrderLine,ExFlowSetup);

            GetPurchaseOrders.SETTABLEVIEW(PurchOrderLine);
            GetPurchaseOrders.SetPurchHeader(PurchHeader);
            GetPurchaseOrders.LOOKUPMODE := TRUE;
            IF GetPurchaseOrders.RUNMODAL = ACTION::LookupOK THEN BEGIN
              PurchHeader."Propose VAT Line" := FALSE;
              PurchHeader.MODIFY;

              PurchLine.RESET;
              PurchLine.LOCKTABLE;
              PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.",PurchHeader."No.");
              PurchLine.SETRANGE("VAT Calculation Type", PurchLine."VAT Calculation Type"::"Full VAT");
              IF PurchLine.FINDFIRST THEN
                PurchLine.DELETE(TRUE);
              PurchLine.RESET;
            END;
          END;

  }
  CODE
  {
    VAR
      Currency@1100285000 : Record 4;
      CurrencyRead@1100285002 : Boolean;
      EXF001@1100285004 : TextConst 'ENU=Order No. %1:;SVE=Ordernr %1:';
      EXF002@1100285007 : TextConst 'ENU=Field %1 must be set to either %2 or %3 in ExFlow Setup.;SVE=F„lt %1 m†ste vara satt till antingen %2 eller %3 i ExFlow inst„llningarna.';

    PROCEDURE CreateInvLines@1(VAR PurchOrderLine2@1000 : Record 39;PurchHeader@1100285011 : Record 38);
    VAR
      TransferLine@1001 : Boolean;
      PurchLine@1100285000 : Record 39;
      ExFlow@1100285003 : Codeunit 12013601;
      NewCurrencyFactor@1100285002 : Decimal;
      TotalQtyAlreadyMatched@1100285004 : Decimal;
      TotalAmtAlreadyMatched@1100285005 : Decimal;
      NewQty@1100285007 : Decimal;
      NewDirectUnitCost@1100285008 : Decimal;
      NewLineDisc@1100285009 : Decimal;
      PurchOrderHeader@1100285012 : Record 38;
      PurchOrderLine@1100285013 : Record 39;
      ExFlowSetup@1100285014 : Record 12013601;
      AutoReceipt@1100285015 : Boolean;
      TotalAmtAlreadyMatchedLCY@1100285001 : Decimal;
    BEGIN
      ExFlowSetup.GET;

      WITH PurchOrderLine2 DO BEGIN
        IF FIND('-') THEN BEGIN
          PurchLine.LOCKTABLE;
          PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine.SETRANGE("Document No.",PurchHeader."No.");
          PurchLine."Document Type" := PurchHeader."Document Type";
          PurchLine."Document No." := PurchHeader."No.";

          REPEAT
            IF PurchOrderHeader."No." <> "Document No." THEN BEGIN
              PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,"Document No.");
              TransferLine := TRUE;
            END;

            NewCurrencyFactor := 1;
            IF PurchOrderHeader."Currency Code" <> PurchHeader."Currency Code" THEN BEGIN
              IF (PurchOrderHeader."Currency Factor" <> 0) AND (PurchHeader."Currency Factor" <> 0) THEN
                NewCurrencyFactor := PurchHeader."Currency Factor" / PurchOrderHeader."Currency Factor"
              ELSE IF (PurchOrderHeader."Currency Factor" <> 0) AND (PurchHeader."Currency Factor" = 0) THEN
                NewCurrencyFactor := 1 / PurchOrderHeader."Currency Factor"
              ELSE IF (PurchOrderHeader."Currency Factor" = 0) AND (PurchHeader."Currency Factor" <> 0) THEN
                NewCurrencyFactor := PurchHeader."Currency Factor";
            END;

            ExFlow.CalcMatchedTotalsPurchLine(PurchOrderLine2,TotalQtyAlreadyMatched,TotalAmtAlreadyMatched,TotalAmtAlreadyMatchedLCY);
            AutoReceipt := ExFlowSetup."Automatic Receipt Order" IN [ExFlowSetup."Automatic Receipt Order"::"All documents",
                                                                     ExFlowSetup."Automatic Receipt Order"::"Matched Orders from invoice only"];

            IF AutoReceipt THEN
              NewQty := PurchOrderLine2.Quantity - TotalQtyAlreadyMatched
            ELSE
              NewQty := PurchOrderLine2."Quantity Received" - TotalQtyAlreadyMatched;

            NewDirectUnitCost := PurchOrderLine2."Direct Unit Cost";
            NewLineDisc := PurchOrderLine2."Line Discount %";
            IF NewQty <= 0 THEN BEGIN
              NewQty := 1;
              IF AutoReceipt THEN
                IF (PurchOrderLine2."Line Amount" - TotalAmtAlreadyMatched) > 0 THEN BEGIN
                  NewDirectUnitCost := PurchOrderLine2."Line Amount" - TotalAmtAlreadyMatched;
                  NewLineDisc := 0;
                END;
            END;

            NewDirectUnitCost := NewDirectUnitCost * NewCurrencyFactor;

            IF TransferLine THEN BEGIN
              PurchOrderLine := PurchOrderLine2;
              InsertExvInvLineFromPurchLine(PurchOrderLine,PurchLine,NewQty,PurchOrderLine);
              ExFlow.ExFlowPropose(PurchLine,'','');

              PurchLine.MODIFY;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetItemChargeAssgnt@5800();
    BEGIN
      // item charge from a PO not posted
    END;

    LOCAL PROCEDURE CopyItemChargeAssgnt@5801();
    BEGIN
      // item charge from a PO not posted
    END;

    PROCEDURE InsertExvInvLineFromPurchLine@1100285002(precPurchOrderLine@1100285002 : Record 39;VAR PurchLine@1000 : Record 39;NewQty@1100285005 : Decimal;PurchOrderLine@1100285008 : Record 39);
    VAR
      PurchInvHeader@1010 : Record 38;
      PurchLine2@1003 : Record 39;
      PurchSetup@1011 : Record 312;
      lrecPurchOrderLine@1100285003 : Record 39;
      ExFlowSetup@1100285001 : Record 12013601;
      ExDoc@1100285004 : Record 12013608;
      PurchOrderHeader@1100285000 : Record 38;
      TransferOldExtLines@1002 : Codeunit 379;
      ExFlowCustomReceipt@1100285006 : Codeunit 12013628;
      NextLineNo@1001 : Integer;
      ExtTextLine@1006 : Boolean;
    BEGIN
      ExFlowSetup.GET;
      lrecPurchOrderLine := precPurchOrderLine;
      WITH lrecPurchOrderLine DO BEGIN

        SETRANGE("Document Type", precPurchOrderLine."Document Type"::Order);
        SETRANGE("Document No.", precPurchOrderLine."Document No.");

        PurchLine2 := PurchLine;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type", PurchLine."Document Type");
        PurchLine.SETRANGE("Document No.", PurchLine."Document No.");
        IF PurchLine.FIND('+') THEN
          NextLineNo := PurchLine."Line No." + 10000
        ELSE
          NextLineNo := 10000;

        IF PurchInvHeader."No." <> PurchLine2."Document No." THEN
          PurchInvHeader.GET(PurchLine2."Document Type",PurchLine2."Document No.");

        IF PurchLine."ExFlow Order No." <> "Document No." THEN BEGIN
          PurchLine.INIT;
          PurchLine."Document No." := PurchLine."Document No.";
          PurchLine."Line No." := NextLineNo;
          PurchLine."Document Type" := PurchLine2."Document Type";
          PurchLine.Description := STRSUBSTNO(EXF001,"Document No.");
          PurchLine.INSERT;
          NextLineNo := NextLineNo + 10000;
        END;

        TransferOldExtLines.ClearLineNumbers;

        REPEAT
          ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

          IF (PurchOrderHeader."Document Type" <> "Document Type"::Order) OR
             (PurchOrderHeader."No." <> "Document No.")
          THEN
            PurchOrderHeader.GET("Document Type"::Order,"Document No.");

          IF PurchInvHeader."Prices Including VAT" <> PurchOrderHeader."Prices Including VAT" THEN
            InitCurrency("Currency Code");

          IF PurchInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT PurchOrderHeader."Prices Including VAT" THEN
              precPurchOrderLine."Direct Unit Cost" := ROUND(
                PurchOrderLine."Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100),
                Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF PurchOrderHeader."Prices Including VAT" THEN
              precPurchOrderLine."Direct Unit Cost" := ROUND(
                PurchOrderLine."Direct Unit Cost" / (1 + PurchOrderLine."VAT %" / 100),
                Currency."Unit-Amount Rounding Precision");
          END;

          PurchLine.INIT;
          PurchLine.TRANSFERFIELDS(precPurchOrderLine);

          PurchLine."Buy-from Vendor No." := PurchInvHeader."Buy-from Vendor No.";
          PurchLine."Pay-to Vendor No." := PurchInvHeader."Pay-to Vendor No.";
          PurchLine."Currency Code" := PurchInvHeader."Currency Code";

          PurchLine."Document No." := PurchLine2."Document No.";
          PurchLine."Line No." := NextLineNo;
          PurchLine."Document Type" := PurchLine2."Document Type";

          IF PurchLine.Type > 0 THEN BEGIN
            // Order
            PurchLine."ExFlow Order No." := "Document No.";
            PurchLine."ExFlow Order Line No." := "Line No.";

            IF precPurchOrderLine.Approve AND (PurchLine."First Approver" = '') THEN BEGIN
              IF (ExDoc."Document Type" <> precPurchOrderLine."Document Type") OR
                 (ExDoc."Document No." <> precPurchOrderLine."Document No.") THEN BEGIN
                IF ExDoc.RetrieveRecord(ExDoc,precPurchOrderLine."Document Type",precPurchOrderLine."Document No.") THEN
                  PurchLine."First Approver" := ExDoc."Created By";
              END ELSE
                PurchLine."First Approver" := ExDoc."Created By";
            END;

          END;

          PurchLine."Variant Code" := "Variant Code";
          PurchLine."Location Code" := "Location Code";

          ExFlowCustomReceipt.ClearLine(PurchLine);

          IF NOT ExtTextLine THEN BEGIN
            PurchLine.VALIDATE(Quantity, NewQty);

            IF PurchLine.Quantity > 0 THEN BEGIN
              PurchLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost");
              PurchLine.VALIDATE("Line Discount %",PurchOrderLine."Line Discount %");
              PurchSetup.GET;
              IF NOT PurchSetup."Calc. Inv. Discount" THEN
                IF PurchOrderLine.Quantity = 0 THEN
                  PurchLine.VALIDATE("Inv. Discount Amount",0)
                ELSE
                  PurchLine.VALIDATE("Inv. Discount Amount", ROUND(
                    PurchOrderLine."Inv. Discount Amount" * PurchLine.Quantity / PurchOrderLine.Quantity,
                    Currency."Amount Rounding Precision"));
            END;
          END;

          PurchLine."Attached to Line No." := TransferOldExtLines.TransferExtendedText("Line No.",NextLineNo,"Attached to Line No.");
          PurchLine."Shortcut Dimension 1 Code" := precPurchOrderLine."Shortcut Dimension 1 Code";
          PurchLine."Shortcut Dimension 2 Code" := precPurchOrderLine."Shortcut Dimension 2 Code";
          PurchLine."Dimension Set ID" := precPurchOrderLine."Dimension Set ID";

          PurchLine.INSERT;

          NextLineNo := NextLineNo + 10000;
          IF "Attached to Line No." = 0 THEN
            SETRANGE("Attached to Line No.","Line No.");
        UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@7(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    PROCEDURE LineMatched@1100285003(DocNo@1100285003 : Code[20];LineNo@1100285000 : Integer;precExvPurchLine@1100285002 : Record 39) : Boolean;
    VAR
      lrecExvPurchLine@1100285001 : Record 39;
    BEGIN
      lrecExvPurchLine.RESET;
      lrecExvPurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
      lrecExvPurchLine.SETRANGE("Document Type",precExvPurchLine."Document Type");
      CASE precExvPurchLine."Document Type" OF
        precExvPurchLine."Document Type"::Invoice:
          BEGIN
            lrecExvPurchLine.SETRANGE("Receipt No.", DocNo);
            lrecExvPurchLine.SETRANGE("Receipt Line No.", LineNo);
          END;
        precExvPurchLine."Document Type"::"Credit Memo":
          BEGIN
            lrecExvPurchLine.SETRANGE("Return Shipment No.", DocNo);
            lrecExvPurchLine.SETRANGE("Return Shipment Line No.", LineNo);
          END;
      END;
      EXIT(NOT lrecExvPurchLine.ISEMPTY);
    END;

    PROCEDURE DisableProposal@1100285004();
    BEGIN
    END;

    PROCEDURE SetFilters@1100285006(PurchHeader@1100285004 : Record 38;VAR PurchOrderLine@1100285000 : Record 39;ExFlowSetup@1100285001 : Record 12013601);
    VAR
      TypeFilterStr@1100285002 : Text[1024];
    BEGIN
      PurchOrderLine.RESET;
      PurchOrderLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.","Currency Code");

      PurchOrderLine.FILTERGROUP := 2;
      PurchOrderLine.SETRANGE("Document Type", PurchOrderLine."Document Type"::Order);

      IF ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"Purch Order Lines" THEN BEGIN
        IF ExFlowSetup."Receipt No. Mand. Item" THEN
          TypeFilterStr := '<>2&';
        IF ExFlowSetup."Receipt No. Mand. G/L" THEN
          TypeFilterStr := TypeFilterStr + '<>1&';
        IF ExFlowSetup."Receipt No. Mand. Fixed Asset" THEN
          TypeFilterStr := TypeFilterStr + '<>4&';
        IF ExFlowSetup."Receipt No. Mand. Charge Item" THEN
          TypeFilterStr := TypeFilterStr + '<>5';
        IF STRLEN(TypeFilterStr) > 0 THEN
          IF COPYSTR(TypeFilterStr,STRLEN(TypeFilterStr)) = '&' THEN
            TypeFilterStr := DELSTR(TypeFilterStr, STRLEN(TypeFilterStr));
        PurchOrderLine.SETFILTER(Type, TypeFilterStr);
      END;

      IF ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"First Order then Receipt" THEN BEGIN
        PurchOrderLine.SETRANGE("Pay-to Vendor No.",PurchHeader."Pay-to Vendor No.");
        PurchOrderLine.SETRANGE("Buy-from Vendor No.",PurchHeader."Buy-from Vendor No.");
        PurchOrderLine.SETRANGE("Currency Code",PurchHeader."Currency Code");
      END;

      PurchOrderLine.FILTERGROUP := 0;

      IF ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"Purch Order Lines" THEN BEGIN
        PurchOrderLine.SETRANGE("Pay-to Vendor No.",PurchHeader."Pay-to Vendor No.");
        PurchOrderLine.SETRANGE("Buy-from Vendor No.",PurchHeader."Buy-from Vendor No.");
        PurchOrderLine.SETRANGE("Currency Code",PurchHeader."Currency Code");
      END;

      PurchOrderLine.SETRANGE("Fully Matched", FALSE);

      IF ExFlowSetup."Web Receipts" = ExFlowSetup."Web Receipts"::"Web confirmed" THEN
        PurchOrderLine.SETRANGE("Web Receipt", TRUE);
    END;

    BEGIN
    END.
  }
}

