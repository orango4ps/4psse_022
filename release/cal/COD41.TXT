OBJECT Codeunit 41 TextManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TodayText@1000 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=TODAY;NOR=IDAG;SVE=DAGENSDATUM';
      WorkdateText@1001 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=WORKDATE;NOR=ARB.DATO;SVE=ARBETSDATUM';
      PeriodText@1004 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=PERIOD;NOR=PERIODE;SVE=PERIOD';
      YearText@1003 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=YEAR;NOR=èR;SVE=èR';
      NumeralOutOfRangeError@1006 : TextConst 'ENU=When you specify periods and years, you can use numbers from 1 - 999, such as P-1, P1, Y2 or Y+3.;NOR=NÜr du angir perioder og Ür, kan du bruke tall fra 1 - 999, for eksempel P-1, P1, è2 eller è+3.;SVE=NÑr du specificerar perioder och Ür kan du anvÑnda siffrorna 1-999, sÜsom P-1, P1, è2 eller è+3.';
      AlphabetText@1002 : TextConst '@@@=Uppercase - translate into entire alphabet.;ENU=ABCDEFGHIJKLMNOPQRSTUVWXYZ;NOR=ABCDEFGHIJKLMNOPQRSTUVWXYZè;SVE=ABCDEFGHIJKLMNOPQRSTUVWXYZèéô';
      NowText@1007 : TextConst '@@@=Must be uppercase.;ENU=NOW;NOR=Nè;SVE=NU';
      YesterdayText@1009 : TextConst '@@@=Must be uppercase;ENU=YESTERDAY;NOR=IGèR;SVE=I GèR';
      TomorrowText@1010 : TextConst '@@@=Must be uppercase;ENU=TOMORROW;NOR=IMORGEN;SVE=I MORGON';
      WeekText@1012 : TextConst '@@@=Must be uppercase;ENU=WEEK;NOR=UKE;SVE=VECKA';
      MonthText@1005 : TextConst '@@@=Must be uppercase;ENU=MONTH;NOR=MèNED;SVE=MèNAD';
      QuarterText@1018 : TextConst '@@@=Must be uppercase;ENU=QUARTER;NOR=KVARTAL;SVE=KVARTAL';
      UserText@1013 : TextConst '@@@=Must be uppercase;ENU=USER;NOR=BRUKER;SVE=ANVéNDARE';
      MeText@1011 : TextConst '@@@=Must be uppercase;ENU=ME;NOR=PF;SVE=ME';
      MyCustomersText@1014 : TextConst '@@@=Must be uppercase;ENU=MYCUSTOMERS;NOR=MINEKUNDER;SVE=MYCUSTOMERS';
      MyItemsText@1015 : TextConst '@@@=Must be uppercase;ENU=MYITEMS;NOR=MINEVARER;SVE=MYITEMS';
      MyVendorsText@1016 : TextConst '@@@=Must be uppercase;ENU=MYVENDORS;NOR=MINELEVERANDùRER;SVE=MYVENDORS';
      CompanyText@1017 : TextConst '@@@=Must be uppercase;ENU=COMPANY;NOR=SELSKAP;SVE=FôRETAG';
      OverflowMsg@1008 : TextConst 'ENU=The filter contains more than 2000 numbers and has been truncated.;NOR=Filteret inneholder mer enn 2000 tall og har blitt avkortet.;SVE=Filtret innehÜller îver 2000 siffror och har trunkerats.';
      UnincrementableStringErr@1019 : TextConst 'ENU=%1 contains no number and cannot be incremented.;NOR=%1 inneholder ikke tall og kan ikke õkes.;SVE=%1 innehÜller ingen siffra och kan inte îkas.';
      FilterType@1020 : 'DateTime,Date,Time';

    [External]
    PROCEDURE MakeDateTimeText@1(VAR DateTimeText@1000 : Text) : Integer;
    VAR
      Date@1001 : Date;
      Time@1002 : Time;
    BEGIN
      IF GetSeparateDateTime(DateTimeText,Date,Time) THEN BEGIN
        IF Date = 0D THEN
          EXIT(0);
        IF Time = 0T THEN
          Time := 000000T;
        DateTimeText := FORMAT(CREATEDATETIME(Date,Time));
      END;
      EXIT(0);
    END;

    [External]
    PROCEDURE GetSeparateDateTime@2(DateTimeText@1000 : Text;VAR Date@1005 : Date;VAR Time@1006 : Time) : Boolean;
    VAR
      DateText@1001 : Text[250];
      TimeText@1002 : Text[250];
      Position@1008 : Integer;
      Length@1007 : Integer;
    BEGIN
      IF DateTimeText IN [NowText,'NOW'] THEN
        DateTimeText := FORMAT(CURRENTDATETIME);
      Date := 0D;
      Time := 0T;
      Position := 1;
      Length := STRLEN(DateTimeText);
      ReadCharacter(' ',DateTimeText,Position,Length);
      ReadUntilCharacter(' ',DateTimeText,Position,Length);
      DateText := DELCHR(COPYSTR(DateTimeText,1,Position - 1),'<>');
      TimeText := DELCHR(COPYSTR(DateTimeText,Position),'<>');
      IF DateText = '' THEN
        EXIT(TRUE);

      IF MakeDateText(DateText) = 0 THEN;
      IF NOT EVALUATE(Date,DateText) THEN
        EXIT(FALSE);

      IF TimeText = '' THEN
        EXIT(TRUE);

      IF MakeTimeText(TimeText) = 0 THEN;
      IF EVALUATE(Time,TimeText) THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE MakeDateText@3(VAR DateText@1000 : Text) : Integer;
    VAR
      Date@1002 : Date;
      PartOfText@1001 : Text;
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(DateText);
      ReadCharacter(' ',DateText,Position,Length);
      IF NOT FindText(PartOfText,DateText,Position,Length) THEN
        EXIT(0);
      CASE PartOfText OF
        COPYSTR('TODAY',1,STRLEN(PartOfText)),COPYSTR(TodayText,1,STRLEN(PartOfText)):
          Date := TODAY;
        COPYSTR('WORKDATE',1,STRLEN(PartOfText)),COPYSTR(WorkdateText,1,STRLEN(PartOfText)):
          Date := WORKDATE;
        ELSE
          EXIT(0);
      END;
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateText,Position,Length);
      IF Position > Length THEN BEGIN
        DateText := FORMAT(Date);
        EXIT(0);
      END;
      EXIT(Position);
    END;

    [External]
    PROCEDURE MakeTimeText@4(VAR TimeText@1000 : Text) : Integer;
    VAR
      PartOfText@1001 : Text[132];
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(TimeText);
      ReadCharacter(' ',TimeText,Position,Length);
      IF NOT FindText(PartOfText,TimeText,Position,Length) THEN
        EXIT(0);
      IF PartOfText <> COPYSTR(TimeText,1,STRLEN(PartOfText)) THEN
        EXIT(0);
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',TimeText,Position,Length);
      IF Position <= Length THEN
        EXIT(Position);
      TimeText := FORMAT(000000T + ROUND(TIME - 000000T,1000));
      EXIT(0);
    END;

    [External]
    PROCEDURE MakeText@5(VAR Text@1000 : Text) : Integer;
    VAR
      StandardText@1002 : Record 7;
      PartOfText@1001 : Text[132];
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(Text);
      ReadCharacter(' ',Text,Position,Length);
      IF NOT ReadSymbol('?',Text,Position,Length) THEN
        EXIT(0);
      PartOfText := COPYSTR(Text,Position);
      IF PartOfText = '' THEN BEGIN
        IF PAGE.RUNMODAL(0,StandardText) = ACTION::LookupOK THEN
          Text := StandardText.Description;
        EXIT(0);
      END;
      StandardText.Code := COPYSTR(Text,Position,MAXSTRLEN(StandardText.Code));
      IF NOT StandardText.FIND('=>') OR
         (UPPERCASE(PartOfText) <> COPYSTR(StandardText.Code,1,STRLEN(PartOfText)))
      THEN
        EXIT(Position);
      Text := StandardText.Description;
      EXIT(0);
    END;

    [External]
    PROCEDURE MakeTextFilter@17(VAR TextFilterText@1000 : Text) : Integer;
    VAR
      Position@1002 : Integer;
      Length@1001 : Integer;
      PartOfText@1003 : Text[250];
      HandledByEvent@1004 : Boolean;
    BEGIN
      OnBeforeMakeTextFilter(TextFilterText,Position,HandledByEvent);
      IF HandledByEvent THEN
        EXIT(Position);

      Position := 1;
      Length := STRLEN(TextFilterText);
      ReadCharacter(' ',TextFilterText,Position,Length);
      IF FindText(PartOfText,TextFilterText,Position,Length) THEN
        CASE PartOfText OF
          COPYSTR('ME',1,STRLEN(PartOfText)),COPYSTR(MeText,1,STRLEN(PartOfText)):
            BEGIN
              Position := Position + STRLEN(PartOfText);
              TextFilterText := USERID;
            END;
          COPYSTR('USER',1,STRLEN(PartOfText)),COPYSTR(UserText,1,STRLEN(PartOfText)):
            BEGIN
              Position := Position + STRLEN(PartOfText);
              TextFilterText := USERID;
            END;
          COPYSTR('COMPANY',1,STRLEN(PartOfText)),COPYSTR(CompanyText,1,STRLEN(PartOfText)):
            BEGIN
              Position := Position + STRLEN(PartOfText);
              TextFilterText := COMPANYNAME;
            END;
          COPYSTR('MYCUSTOMERS',1,STRLEN(PartOfText)),COPYSTR(MyCustomersText,1,STRLEN(PartOfText)):
            BEGIN
              Position := Position + STRLEN(PartOfText);
              GetMyFilterText(TextFilterText,DATABASE::"My Customer");
            END;
          COPYSTR('MYITEMS',1,STRLEN(PartOfText)),COPYSTR(MyItemsText,1,STRLEN(PartOfText)):
            BEGIN
              Position := Position + STRLEN(PartOfText);
              GetMyFilterText(TextFilterText,DATABASE::"My Item");
            END;
          COPYSTR('MYVENDORS',1,STRLEN(PartOfText)),COPYSTR(MyVendorsText,1,STRLEN(PartOfText)):
            BEGIN
              Position := Position + STRLEN(PartOfText);
              GetMyFilterText(TextFilterText,DATABASE::"My Vendor");
            END;
        END;
      OnAfterMakeTextFilter(TextFilterText,Position);
      EXIT(Position);
    END;

    [External]
    PROCEDURE MakeDateTimeFilter@6(VAR DateTimeFilterText@1000 : Text) : Integer;
    VAR
      FilterText@1001 : Text;
    BEGIN
      FilterText := DateTimeFilterText;
      MakeFilterExpression(FilterType::DateTime,FilterText);
      DateTimeFilterText := COPYSTR(FilterText,1,MAXSTRLEN(DateTimeFilterText));
      OnAfterMakeDateTimeFilter(DateTimeFilterText);
      EXIT(0);
    END;

    LOCAL PROCEDURE MakeDateTimeFilter2@7(VAR DateTimeFilterText@1000 : Text);
    VAR
      DateTime1@1002 : DateTime;
      DateTime2@1005 : DateTime;
      Date1@1007 : Date;
      Date2@1003 : Date;
      Time1@1004 : Time;
      Time2@1001 : Time;
      StringPosition@1011 : Integer;
    BEGIN
      StringPosition := STRPOS(DateTimeFilterText,'..');
      IF StringPosition = 0 THEN BEGIN
        IF NOT GetSeparateDateTime(DateTimeFilterText,Date1,Time1) THEN
          EXIT;
        IF Date1 = 0D THEN
          EXIT;
        IF Time1 = 0T THEN BEGIN
          DateTimeFilterText := FORMAT(CREATEDATETIME(Date1,000000T)) + '..' + FORMAT(CREATEDATETIME(Date1,235959.995T));
          EXIT;
        END;
        DateTimeFilterText := FORMAT(CREATEDATETIME(Date1,Time1));
        EXIT;
      END;
      IF NOT GetSeparateDateTime(COPYSTR(DateTimeFilterText,1,StringPosition - 1),Date1,Time1) THEN
        EXIT;
      IF NOT GetSeparateDateTime(COPYSTR(DateTimeFilterText,StringPosition + 2),Date2,Time2) THEN
        EXIT;

      IF (Date1 = 0D) AND (Date2 = 0D) THEN
        EXIT;

      IF Date1 <> 0D THEN BEGIN
        IF Time1 = 0T THEN
          Time1 := 000000T;
        DateTime1 := CREATEDATETIME(Date1,Time1);
      END;
      IF Date2 <> 0D THEN BEGIN
        IF Time2 = 0T THEN
          Time2 := 235959T;
        DateTime2 := CREATEDATETIME(Date2,Time2);
      END;
      DateTimeFilterText := FORMAT(DateTime1) + '..' + FORMAT(DateTime2);
    END;

    [External]
    PROCEDURE MakeDateFilter@8(VAR DateFilterText@1000 : Text) : Integer;
    BEGIN
      IF NOT (DateFilterText = '''''') THEN
        MakeFilterExpression(FilterType::Date,DateFilterText);
      OnAfterMakeDateFilter(DateFilterText);
      EXIT(0);
    END;

    LOCAL PROCEDURE MakeDateFilterInternal@31(VAR DateFilterText@1000 : Text) : Integer;
    VAR
      Date1@1005 : Date;
      Date2@1004 : Date;
      Text1@1007 : Text[30];
      Text2@1006 : Text[30];
      StringPosition@1001 : Integer;
      i@1002 : Integer;
      OK@1003 : Boolean;
    BEGIN
      DateFilterText := DELCHR(DateFilterText,'<>');
      IF DateFilterText = '' THEN
        EXIT(0);
      StringPosition := STRPOS(DateFilterText,'..');
      IF StringPosition = 0 THEN BEGIN
        i := MakeDateFilter2(OK,Date1,Date2,DateFilterText);
        IF i <> 0 THEN
          EXIT(i);
        IF OK THEN
          IF Date1 = Date2 THEN
            DateFilterText := FORMAT(Date1)
          ELSE
            DateFilterText := STRSUBSTNO('%1..%2',Date1,Date2);
        EXIT(0);
      END;

      Text1 := COPYSTR(DateFilterText,1,StringPosition - 1);
      i := MakeDateFilter2(OK,Date1,Date2,Text1);
      IF i <> 0 THEN
        EXIT(i);
      IF OK THEN
        Text1 := FORMAT(Date1);

      ReadCharacter('.',DateFilterText,StringPosition,STRLEN(DateFilterText));

      Text2 := COPYSTR(DateFilterText,StringPosition);
      i := MakeDateFilter2(OK,Date1,Date2,Text2);
      IF i <> 0 THEN
        EXIT(StringPosition + i - 1);
      IF OK THEN
        Text2 := FORMAT(Date2);

      DateFilterText := Text1 + '..' + Text2;
      EXIT(0);
    END;

    LOCAL PROCEDURE MakeDateFilter2@9(VAR OK@1000 : Boolean;VAR Date1@1001 : Date;VAR Date2@1002 : Date;DateFilterText@1003 : Text) : Integer;
    VAR
      PartOfText@1004 : Text[250];
      RemainderOfText@1009 : Text;
      Position@1007 : Integer;
      Length@1006 : Integer;
      DateFormula@1005 : DateFormula;
    BEGIN
      IF EVALUATE(DateFormula,DateFilterText) THEN BEGIN
        RemainderOfText := DateFilterText;
        DateFilterText := '';
      END ELSE BEGIN
        Position := STRPOS(DateFilterText,'+');
        IF Position = 0 THEN
          Position := STRPOS(DateFilterText,'-');

        IF Position > 0 THEN BEGIN
          RemainderOfText := DELCHR(COPYSTR(DateFilterText,Position));
          IF EVALUATE(DateFormula,RemainderOfText) THEN
            DateFilterText := DELCHR(COPYSTR(DateFilterText,1,Position - 1))
          ELSE
            RemainderOfText := '';
        END;
      END;

      Position := 1;
      Length := STRLEN(DateFilterText);
      FindText(PartOfText,DateFilterText,Position,Length);

      IF PartOfText <> '' THEN
        CASE PartOfText OF
          COPYSTR('PERIOD',1,STRLEN(PartOfText)),COPYSTR(PeriodText,1,STRLEN(PartOfText)):
            OK := FindPeriod(Date1,Date2,FALSE,DateFilterText,PartOfText,Position,Length);
          COPYSTR('YEAR',1,STRLEN(PartOfText)),COPYSTR(YearText,1,STRLEN(PartOfText)):
            OK := FindPeriod(Date1,Date2,TRUE,DateFilterText,PartOfText,Position,Length);
          COPYSTR('TODAY',1,STRLEN(PartOfText)),COPYSTR(TodayText,1,STRLEN(PartOfText)):
            OK := FindDate(TODAY,Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('WORKDATE',1,STRLEN(PartOfText)),COPYSTR(WorkdateText,1,STRLEN(PartOfText)):
            OK := FindDate(WORKDATE,Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('NOW',1,STRLEN(PartOfText)),COPYSTR(NowText,1,STRLEN(PartOfText)):
            OK := FindDate(DT2DATE(CURRENTDATETIME),Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('YESTERDAY',1,STRLEN(PartOfText)),COPYSTR(YesterdayText,1,STRLEN(PartOfText)):
            OK := FindDate(CALCDATE('<-1D>'),Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('TOMORROW',1,STRLEN(PartOfText)),COPYSTR(TomorrowText,1,STRLEN(PartOfText)):
            OK := FindDate(CALCDATE('<1D>'),Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('WEEK',1,STRLEN(PartOfText)),COPYSTR(WeekText,1,STRLEN(PartOfText)):
            OK := FindDates('<-CW>','<CW>',Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('MONTH',1,STRLEN(PartOfText)),COPYSTR(MonthText,1,STRLEN(PartOfText)):
            OK := FindDates('<-CM>','<CM>',Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('QUARTER',1,STRLEN(PartOfText)),COPYSTR(QuarterText,1,STRLEN(PartOfText)):
            OK := FindDates('<-CQ>','<CQ>',Date1,Date2,DateFilterText,PartOfText,Position,Length);
        END
      ELSE
        IF (DateFilterText <> '') AND EVALUATE(Date1,DateFilterText) THEN BEGIN
          Date2 := Date1;
          OK := TRUE;
          Position := 0;
        END ELSE
          IF RemainderOfText <> '' THEN BEGIN
            Date1 := TODAY;
            Date2 := Date1;
            OK := TRUE;
            Position := 0;
          END ELSE
            OK := FALSE;

      IF OK AND (RemainderOfText <> '') THEN BEGIN
        Date1 := CALCDATE(DateFormula,Date1);
        Date2 := CALCDATE(DateFormula,Date2);
      END;
      EXIT(Position);
    END;

    [External]
    PROCEDURE MakeTimeFilter@22(VAR TimeFilterText@1000 : Text) : Integer;
    VAR
      FilterText@1001 : Text;
    BEGIN
      FilterText := TimeFilterText;
      MakeFilterExpression(FilterType::Time,FilterText);
      TimeFilterText := COPYSTR(FilterText,1,MAXSTRLEN(TimeFilterText));
      OnAfterMakeTimeFilter(TimeFilterText);
      EXIT(0);
    END;

    LOCAL PROCEDURE MakeTimeFilter2@21(VAR TimeFilterText@1000 : Text);
    VAR
      Time1@1004 : Time;
      Time2@1001 : Time;
      StringPosition@1011 : Integer;
    BEGIN
      StringPosition := STRPOS(TimeFilterText,'..');
      IF StringPosition = 0 THEN BEGIN
        IF NOT GetTime(Time1,TimeFilterText) THEN
          EXIT;
        IF Time1 = 0T THEN BEGIN
          TimeFilterText := FORMAT(000000T) + '..' + FORMAT(235959.995T);
          EXIT;
        END;
        TimeFilterText := FORMAT(Time1);
        EXIT;
      END;
      IF NOT GetTime(Time1,COPYSTR(TimeFilterText,1,StringPosition - 1)) THEN
        EXIT;
      IF NOT GetTime(Time2,COPYSTR(TimeFilterText,StringPosition + 2)) THEN
        EXIT;

      IF Time1 = 0T THEN
        Time1 := 000000T;
      IF Time2 = 0T THEN
        Time2 := 235959T;

      TimeFilterText := FORMAT(Time1) + '..' + FORMAT(Time2);
    END;

    LOCAL PROCEDURE MakeFilterExpression@38(TypeOfFilter@1000 : Option;VAR FilterText@1001 : Text);
    VAR
      Head@1005 : Text;
      Tail@1004 : Text;
      Position@1003 : Integer;
      Length@1002 : Integer;
    BEGIN
      FilterText := DELCHR(FilterText,'<>');
      Position := 1;
      Length := STRLEN(FilterText);
      WHILE Length <> 0 DO BEGIN
        ReadCharacter(' |()',FilterText,Position,Length);
        IF Position > 1 THEN BEGIN
          Head := Head + COPYSTR(FilterText,1,Position - 1);
          FilterText := COPYSTR(FilterText,Position);
          Position := 1;
          Length := STRLEN(FilterText);
        END;
        IF Length <> 0 THEN BEGIN
          ReadUntilCharacter('|()',FilterText,Position,Length);
          IF Position > 1 THEN BEGIN
            Tail := COPYSTR(FilterText,Position);
            FilterText := COPYSTR(FilterText,1,Position - 1);
            CallMakeFilterFunction(TypeOfFilter,FilterText);
            EVALUATE(Head,Head + FilterText);
            FilterText := Tail;
            Position := 1;
            Length := STRLEN(FilterText);
          END;
        END;
      END;
      FilterText := Head;
    END;

    LOCAL PROCEDURE CallMakeFilterFunction@33(TypeOfFilter@1000 : Option;VAR FilterText@1001 : Text);
    BEGIN
      CASE TypeOfFilter OF
        FilterType::DateTime:
          MakeDateTimeFilter2(FilterText);
        FilterType::Date:
          MakeDateFilterInternal(FilterText);
        FilterType::Time:
          MakeTimeFilter2(FilterText);
      END;
    END;

    [External]
    PROCEDURE EvaluateIncStr@20(StringToIncrement@1000 : Code[50];ErrorHint@1001 : Text);
    BEGIN
      IF INCSTR(StringToIncrement) = '' THEN
        ERROR(UnincrementableStringError,ErrorHint);
    END;

    [External]
    PROCEDURE UnincrementableStringError@19() : Text;
    BEGIN
      EXIT(UnincrementableStringErr)
    END;

    LOCAL PROCEDURE GetTime@16(VAR Time0@1000 : Time;FilterText@1001 : Text) : Boolean;
    BEGIN
      FilterText := DELCHR(FilterText);
      IF FilterText IN [NowText,'NOW'] THEN BEGIN
        Time0 := TIME;
        EXIT(TRUE);
      END;
      EXIT(EVALUATE(Time0,FilterText));
    END;

    LOCAL PROCEDURE FindPeriod@10(VAR Date1@1000 : Date;VAR Date2@1001 : Date;FindYear@1002 : Boolean;DateFilterText@1003 : Text;PartOfText@1009 : Text;VAR Position@1004 : Integer;Length@1005 : Integer) : Boolean;
    VAR
      AccountingPeriod@1006 : Record 50;
      AccountingPeriodMgt@1011 : Codeunit 360;
      Sign@1007 : Text[1];
      Numeral@1008 : Integer;
    BEGIN
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateFilterText,Position,Length);

      IF AccountingPeriod.ISEMPTY THEN BEGIN
        IF FindYear THEN
          AccountingPeriodMgt.InitStartYearAccountingPeriod(AccountingPeriod,WORKDATE)
        ELSE
          AccountingPeriodMgt.InitDefaultAccountingPeriod(AccountingPeriod,WORKDATE);
        ReadNumeral(Numeral,DateFilterText,Position,Length);
        Date1 := AccountingPeriod."Starting Date";
        Date2 := CALCDATE('<CY>',AccountingPeriod."Starting Date");
        ReadCharacter(' ',DateFilterText,Position,Length);
        IF Position > Length THEN
          Position := 0;
        EXIT(TRUE);
      END;

      IF FindYear THEN
        AccountingPeriod.SETRANGE("New Fiscal Year",TRUE)
      ELSE
        AccountingPeriod.SETRANGE("New Fiscal Year");
      Sign := '';
      IF ReadSymbol('+',DateFilterText,Position,Length) THEN
        Sign := '+'
      ELSE
        IF ReadSymbol('-',DateFilterText,Position,Length) THEN
          Sign := '-';
      IF Sign = '' THEN
        IF ReadNumeral(Numeral,DateFilterText,Position,Length) THEN BEGIN
          IF FindYear THEN
            AccountingPeriod.FINDFIRST
          ELSE BEGIN
            AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
            AccountingPeriod."Starting Date" := WORKDATE;
            AccountingPeriod.FIND('=<');
            AccountingPeriod.SETRANGE("New Fiscal Year");
          END;
          AccountingPeriod.NEXT(Numeral - 1);
        END ELSE BEGIN
          AccountingPeriod."Starting Date" := WORKDATE;
          AccountingPeriod.FIND('=<');
        END
      ELSE BEGIN
        IF NOT ReadNumeral(Numeral,DateFilterText,Position,Length) THEN
          EXIT(TRUE);
        IF Sign = '-' THEN
          Numeral := -Numeral;
        AccountingPeriod."Starting Date" := WORKDATE;
        AccountingPeriod.FIND('=<');
        AccountingPeriod.NEXT(Numeral);
      END;
      Date1 := AccountingPeriod."Starting Date";
      IF AccountingPeriod.NEXT = 0 THEN
        Date2 := DMY2DATE(31,12,9999)
      ELSE
        Date2 := AccountingPeriod."Starting Date" - 1;
      ReadCharacter(' ',DateFilterText,Position,Length);
      IF Position > Length THEN
        Position := 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindDate@18(Date1Input@1000 : Date;VAR Date1@1002 : Date;VAR Date2@1001 : Date;DateFilterText@1003 : Text;PartOfText@1006 : Text;VAR Position@1004 : Integer;Length@1005 : Integer) : Boolean;
    BEGIN
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateFilterText,Position,Length);
      Date1 := Date1Input;
      Date2 := Date1;
      IF Position > Length THEN
        Position := 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindDates@27(DateFormulaText1@1000 : Text;DateFormulaText2@1006 : Text;VAR Date1@1002 : Date;VAR Date2@1001 : Date;DateFilterText@1003 : Text;PartOfText@1007 : Text;VAR Position@1004 : Integer;Length@1005 : Integer) : Boolean;
    VAR
      DateFormula1@1008 : DateFormula;
      DateFormula2@1009 : DateFormula;
    BEGIN
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateFilterText,Position,Length);
      EVALUATE(DateFormula1,DateFormulaText1);
      EVALUATE(DateFormula2,DateFormulaText2);
      Date1 := CALCDATE(DateFormula1);
      Date2 := CALCDATE(DateFormula2);
      IF Position > Length THEN
        Position := 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindText@11(VAR PartOfText@1000 : Text;Text@1001 : Text;Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    VAR
      Position2@1005 : Integer;
    BEGIN
      Position2 := Position;
      ReadCharacter(AlphabetText,Text,Position,Length);
      IF Position = Position2 THEN
        EXIT(FALSE);
      PartOfText := UPPERCASE(COPYSTR(Text,Position2,Position - Position2));
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadSymbol@12(Token@1000 : Text[30];Text@1001 : Text;VAR Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    BEGIN
      IF Token <> COPYSTR(Text,Position,STRLEN(Token)) THEN
        EXIT(FALSE);
      Position := Position + STRLEN(Token);
      ReadCharacter(' ',Text,Position,Length);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadNumeral@13(VAR Numeral@1000 : Integer;Text@1001 : Text;VAR Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    VAR
      Position2@1005 : Integer;
      i@1004 : Integer;
    BEGIN
      Position2 := Position;
      ReadCharacter('0123456789',Text,Position,Length);
      IF Position2 = Position THEN
        EXIT(FALSE);
      Numeral := 0;
      FOR i := Position2 TO Position - 1 DO
        IF Numeral < 1000 THEN
          Numeral := Numeral * 10 + STRPOS('0123456789',COPYSTR(Text,i,1)) - 1;
      IF (Numeral < 1) OR (Numeral > 999) THEN
        ERROR(NumeralOutOfRangeError);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadCharacter@14(Character@1000 : Text[50];Text@1001 : Text;VAR Position@1002 : Integer;Length@1003 : Integer);
    BEGIN
      WHILE (Position <= Length) AND (STRPOS(Character,UPPERCASE(COPYSTR(Text,Position,1))) <> 0) DO
        Position := Position + 1;
    END;

    LOCAL PROCEDURE ReadUntilCharacter@15(Character@1000 : Text[50];Text@1001 : Text;VAR Position@1002 : Integer;Length@1003 : Integer);
    BEGIN
      WHILE (Position <= Length) AND (STRPOS(Character,UPPERCASE(COPYSTR(Text,Position,1))) = 0) DO
        Position := Position + 1;
    END;

    LOCAL PROCEDURE GetMyFilterText@23(VAR TextFilterText@1001 : Text;MyTableNo@1000 : Integer);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1004 : FieldRef;
      NoOfValues@1003 : Integer;
    BEGIN
      IF NOT (MyTableNo IN [DATABASE::"My Customer",DATABASE::"My Vendor",DATABASE::"My Item"]) THEN
        EXIT;

      TextFilterText := '';
      NoOfValues := 0;
      RecRef.OPEN(MyTableNo);
      FieldRef := RecRef.FIELD(1);
      FieldRef.SETRANGE(USERID);
      IF RecRef.FIND('-') THEN
        REPEAT
          FieldRef := RecRef.FIELD(2);
          AddToFilter(TextFilterText,FORMAT(FieldRef.VALUE));
          NoOfValues += 1;
        UNTIL (RecRef.NEXT = 0) OR (NoOfValues > 2000);
      RecRef.CLOSE;

      IF NoOfValues > 2000 THEN
        MESSAGE(OverflowMsg);
    END;

    LOCAL PROCEDURE AddToFilter@37(VAR FilterString@1001 : Text;MyNo@1000 : Code[20]);
    BEGIN
      IF FilterString = '' THEN
        FilterString := MyNo
      ELSE
        FilterString += '|' + MyNo;
    END;

    [External]
    PROCEDURE RemoveMessageTrailingDots@24(Message@1000 : Text) : Text;
    BEGIN
      EXIT(DELCHR(Message,'>','.'));
    END;

    [External]
    PROCEDURE GetRecordErrorMessage@28(ErrorMessageField1@1000 : Text[250];ErrorMessageField2@1001 : Text[250];ErrorMessageField3@1002 : Text[250];ErrorMessageField4@1003 : Text[250]) : Text;
    BEGIN
      EXIT(ErrorMessageField1 + ErrorMessageField2 + ErrorMessageField3 + ErrorMessageField4);
    END;

    [External]
    PROCEDURE SetRecordErrorMessage@26(VAR ErrorMessageField1@1004 : Text[250];VAR ErrorMessageField2@1003 : Text[250];VAR ErrorMessageField3@1002 : Text[250];VAR ErrorMessageField4@1001 : Text[250];ErrorText@1000 : Text);
    BEGIN
      ErrorMessageField2 := '';
      ErrorMessageField3 := '';
      ErrorMessageField4 := '';
      ErrorMessageField1 := COPYSTR(ErrorText,1,250);
      IF STRLEN(ErrorText) > 250 THEN
        ErrorMessageField2 := COPYSTR(ErrorText,251,250);
      IF STRLEN(ErrorText) > 500 THEN
        ErrorMessageField3 := COPYSTR(ErrorText,501,250);
      IF STRLEN(ErrorText) > 750 THEN
        ErrorMessageField4 := COPYSTR(ErrorText,751,250);
    END;

    [Internal]
    PROCEDURE XMLTextIndent@29(InputXMLText@1000 : Text) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      XMLDOMMgt@1005 : Codeunit 6224;
      XMLDocument@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      OutStream@1002 : OutStream;
    BEGIN
      // Format input XML text: append indentations
      IF XMLDOMMgt.LoadXMLDocumentFromText(InputXMLText,XMLDocument) THEN BEGIN
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(OutStream,TEXTENCODING::UTF8);
        XMLDocument.Save(OutStream);
        EXIT(TempBlob.ReadAsTextWithCRLFLineSeparator);
      END;
      CLEARLASTERROR;
      EXIT(InputXMLText);
    END;

    [External]
    PROCEDURE Replace@30(InputText@1000 : Text;ToReplace@1003 : Text;ReplacementText@1001 : Text) : Text;
    VAR
      DotNetString@1002 : DotNet "'mscorlib'.System.String";
    BEGIN
      IF ToReplace = '' THEN
        EXIT(InputText);

      DotNetString := InputText;
      EXIT(DotNetString.Replace(ToReplace,ReplacementText));
    END;

    [TryFunction]
    [External]
    PROCEDURE ReplaceRegex@35(InputText@1000 : Text;ReplacePattern@1003 : Text;ReplacementText@1001 : Text;VAR Result@1004 : Text);
    VAR
      TypeHelper@1002 : Codeunit 10;
    BEGIN
      Result := TypeHelper.RegexReplace(InputText,ReplacePattern,ReplacementText);
    END;

    [EventSubscriber(Codeunit,2000000007,MakeDateTimeFilter)]
    LOCAL PROCEDURE DoMakeDateTimeFilter@44(VAR DateTimeFilterText@1000 : Text);
    BEGIN
      MakeDateTimeFilter(DateTimeFilterText);
    END;

    [EventSubscriber(Codeunit,2000000007,MakeDateFilter)]
    LOCAL PROCEDURE DoMakeDateFilter@43(VAR DateFilterText@1000 : Text);
    BEGIN
      MakeDateFilter(DateFilterText);
    END;

    [EventSubscriber(Codeunit,2000000007,MakeTextFilter)]
    LOCAL PROCEDURE DoMakeTextFilter@42(VAR TextFilterText@1000 : Text);
    BEGIN
      MakeTextFilter(TextFilterText);
    END;

    [EventSubscriber(Codeunit,2000000007,MakeCodeFilter)]
    LOCAL PROCEDURE DoMakeCodeFilter@41(VAR TextFilterText@1000 : Text);
    BEGIN
      MakeTextFilter(TextFilterText);
    END;

    [EventSubscriber(Codeunit,2000000007,MakeTimeFilter)]
    LOCAL PROCEDURE DoMakeTimeFilter@34(VAR TimeFilterText@1000 : Text);
    BEGIN
      MakeTimeFilter(TimeFilterText);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMakeTextFilter@25(VAR TextFilterText@1000 : Text;VAR Position@1001 : Integer;VAR HandledByEvent@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeDateTimeFilter@40(VAR DateTimeFilterText@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeDateFilter@39(VAR DateFilterText@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeTextFilter@36(VAR TextFilterText@1000 : Text;VAR Position@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeTimeFilter@32(VAR TimeFilterText@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

