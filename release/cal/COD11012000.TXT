OBJECT Codeunit 11012000 Create Quantities
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012001;
    OnRun=VAR
            QuantityRec@1100525000 : Record 11012002;
            BudgetRec@1100525001 : Record 11012001;
          BEGIN
            //Budgetline could be empty, that is why the filters and not the field values are being used.
            JobSetup.GET;

            BudgetRec.COPY(Rec);
            BudgetRec.COPYFILTER("Project No.",ProjRec."No.");
            IF ProjRec.COUNT <> 1 THEN
              ERROR(Text000);

            ProjRec.FINDFIRST;
            Code(BudgetRec, QuantityRec);
          END;

  }
  CODE
  {
    VAR
      Text000@11012008 : TextConst 'ENU=Select at least one Project;NOR=Velg minst et prosjekt;SVE=V„lj minst ett projekt';
      Text001@11012009 : TextConst 'ENU=Line #1#####;NOR=Rad #1#####;SVE=Rad  #1#####';
      JobSetup@11012000 : Record 315;
      ProjRec@11012001 : Record 11072003;
      DimValRec@11012004 : Record 349;
      MM@11012005 : Record 11012004;
      Window@11012006 : Dialog;
      DeleteBln@11012007 : Boolean;
      DimMgt@11012010 : Codeunit 408;

    LOCAL PROCEDURE Code@1100525001(VAR BudgetRec@1100525002 : Record 11012001;VAR QuantityRec@1100525001 : Record 11012002);
    VAR
      LineCounter@1100525000 : Integer;
    BEGIN
      QuantityRec.RESET;
      BudgetRec.COPYFILTER("Project No.",QuantityRec."Project No.");

      //Remove Quantities created with a different Project setting
      QuantityRec.SETFILTER("Progress Method",'<>%1',ProjRec."Progress Method");
      QuantityRec.DELETEALL(TRUE);
      QuantityRec.SETRANGE("Progress Method");
      QuantityRec.SETFILTER("Progress Registry",'<>%1',ProjRec."Progress Registry");
      QuantityRec.DELETEALL(TRUE);
      QuantityRec.SETRANGE("Progress Registry");

      //Remove Quantity Lines without Budget Lines
      IF QuantityRec.FINDSET(FALSE, FALSE) THEN
        REPEAT
          DeleteBln := FALSE;
          CASE ProjRec."Progress Method" OF
            ProjRec."Progress Method"::"Element - Cost Object":
            BEGIN
              QuantityRec.CALCFIELDS("Element-Cost Object Present");
              IF NOT QuantityRec."Element-Cost Object Present" THEN
                DeleteBln := TRUE;
            END;
            ProjRec."Progress Method"::"Budget Line":
            BEGIN
              QuantityRec.CALCFIELDS("Budget Line Present");
              IF NOT QuantityRec."Budget Line Present" THEN
                DeleteBln := TRUE;
            END;
          END;
          //Remove not entrusted Extensions
          IF NOT DeleteBln THEN
            IF (QuantityRec."Extension Contract" <> '') AND NOT JobSetup."Production on Extensions" THEN
              DeleteBln := TRUE;
          IF NOT DeleteBln THEN
            IF QuantityRec."Extension Contract" <> '' THEN
              IF NOT ExtensionContractIsOrder(QuantityRec."Project No.", QuantityRec."Extension Contract") THEN
                DeleteBln := TRUE;
          IF DeleteBln THEN
            QuantityRec.DELETE(TRUE);
        UNTIL QuantityRec.NEXT = 0;


      Window.OPEN(Text001);

      BudgetRec.SETFILTER("Extension Contract Status",'%1|(>=%2&<%3)',
        BudgetRec."Extension Contract Status"::"Not Applicable",
        BudgetRec."Extension Contract Status"::Order,
        BudgetRec."Extension Contract Status"::Expired);

      IF BudgetRec.FINDSET(FALSE, FALSE) THEN
        REPEAT
          LineCounter += 1;
          Window.UPDATE(1,LineCounter);
          IF BudgetRec."Cost Object" <> '' THEN
            IF RecordProgressCostObject(BudgetRec) THEN BEGIN
              QuantityRec.RESET;
              QuantityRec.SETRANGE("Project No.",BudgetRec."Project No.");
              CASE ProjRec."Progress Method" OF
                ProjRec."Progress Method"::"Element - Cost Object":
                BEGIN
                  IF JobSetup."Production on Extensions" THEN
                    QuantityRec.SETRANGE("Extension Contract",BudgetRec."Extension Contract")
                  ELSE
                    QuantityRec.SETRANGE("Extension Contract");
                  QuantityRec.SETRANGE("Cost Object",BudgetRec."Cost Object");
                  QuantityRec.SETRANGE(Element,BudgetRec.Element);
                END;
                ProjRec."Progress Method"::"Cost Object":
                BEGIN
                  IF JobSetup."Production on Extensions" THEN
                    QuantityRec.SETRANGE("Extension Contract",BudgetRec."Extension Contract")
                  ELSE
                    QuantityRec.SETRANGE("Extension Contract");
                  QuantityRec.SETRANGE("Cost Object",BudgetRec."Cost Object");
                END;
                ProjRec."Progress Method"::"Budget Line":
                BEGIN
                  QuantityRec.SETRANGE("Extension Contract",BudgetRec."Extension Contract");
                  QuantityRec.SETRANGE(Adjustment,BudgetRec.Adjustment);
                  QuantityRec.SETRANGE(Option,BudgetRec.Option);
                  QuantityRec.SETRANGE("Line No.",BudgetRec."Line No.");
                END;
              END;

              IF NOT QuantityRec.FINDFIRST THEN BEGIN
                CLEAR(QuantityRec);
                QuantityRec."Project No." := BudgetRec."Project No.";
                IF ProjRec."Progress Method" <> ProjRec."Progress Method"::"Cost Object" THEN
                  QuantityRec.Element := BudgetRec.Element;
                QuantityRec."Cost Object" := BudgetRec."Cost Object";
                IF ProjRec."Progress Method" =
                  ProjRec."Progress Method"::"Budget Line"
                THEN BEGIN
                  QuantityRec."Extension Contract" := BudgetRec."Extension Contract";
                  QuantityRec.Option := BudgetRec.Option;
                  QuantityRec."Line No." := BudgetRec."Line No.";
                  QuantityRec.Quantity := BudgetRec.Quantity;
                  QuantityRec."Unit of Measure" := BudgetRec."Unit of Measure";
                END ELSE BEGIN
                  IF JobSetup."Production on Extensions" THEN
                    QuantityRec."Extension Contract" := BudgetRec."Extension Contract"
                  ELSE
                    QuantityRec."Extension Contract" := '';
                  IF ProjRec."Progress Registry" = ProjRec."Progress Registry"::Percentages THEN
                    QuantityRec.Quantity := 100;
                END;
                QuantityRec.Adjustment := BudgetRec.Adjustment;
                QuantityRec."Progress Method" := ProjRec."Progress Method";
                QuantityRec."Progress Registry" := ProjRec."Progress Registry";
                QuantityRec.INSERT(TRUE);
              END ELSE BEGIN
                IF ProjRec."Progress Method" =
                  ProjRec."Progress Method"::"Budget Line"
                THEN
                  IF (QuantityRec.Quantity <> BudgetRec.Quantity) OR
                    (QuantityRec."Unit of Measure" <> BudgetRec."Unit of Measure")
                  THEN BEGIN
                    QuantityRec.Quantity := BudgetRec.Quantity;
                    QuantityRec."Unit of Measure" := BudgetRec."Unit of Measure";
                    QuantityRec.MODIFY(TRUE);
                  END;
              END;
            END;
        UNTIL BudgetRec.NEXT = 0;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE CreateTempQuantity@1100525002(VAR BudgetRec2@1100525001 : Record 11012001;VAR QuantityRec@1100525000 : Record 11012002);
    VAR
      BudgetRec@1100525002 : Record 11012001;
    BEGIN
      //Budgetline could be empty, that is why the filters and not the field values are being used.
      JobSetup.GET;

      BudgetRec.COPY(BudgetRec2);
      BudgetRec.COPYFILTER("Project No.",ProjRec."No.");
      IF ProjRec.COUNT <> 1 THEN
        ERROR(Text000);

      ProjRec.FINDFIRST;
      Code(BudgetRec, QuantityRec);
    END;

    LOCAL PROCEDURE RecordProgressCostObject@3(BudgetRec@1100525000 : Record 11012001) : Boolean;
    BEGIN
      DimMgt.GetDimValueRec(2, BudgetRec."Cost Object", DimValRec, TRUE,BudgetRec."Project No.");
      IF DimValRec."Record Progress" THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ExtensionContractIsOrder@1210190000(ProjNo@1210190001 : Code[20];ExtContractNo@1210190000 : Code[20]) : Boolean;
    BEGIN
      IF ExtContractNo = '' THEN
        EXIT(FALSE);

      IF NOT MM.GET(ProjNo, ExtContractNo) THEN
        EXIT(FALSE);

      //IF (MM.Status < MM.Status::Order) OR (MM.Status > MM.Status::"Invoicing Allowed") THEN  //25889.o
      //25889.sn
      IF ((MM.Status < MM.Status::Order) OR (MM.Status > MM.Status::"Invoicing Allowed")) AND
         (NOT ((MM.Status = MM.Status::Offered) AND MM."Treat like Order"))
      THEN
      //25889.en
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    {
      Record Quantity Budget will be calculated, the result may be a temporary table when called: CreateTempQuantity(Budget Line, Budget Quantity)
      This is only the case when the page 11012010 is started from the project budget (P11012003), otherwise the total budget is calculated and the table will be permanent.
    }
    END.
  }
}

