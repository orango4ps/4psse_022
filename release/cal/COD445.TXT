OBJECT Codeunit 445 Purch.-Post Prepmt. (Yes/No)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05,4PS14.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to post the prepayments for %1 %2?;NOR=Vil du bokf›re forskuddsbetalinger for %1 %2?;SVE=Vill du bokf”ra f”rskottsbetalningarna f”r %1 %2?';
      Text001@1001 : TextConst 'ENU=Do you want to post a credit memo for the prepayments for %1 %2?;NOR=Vil du bokf›re en kreditnota for forskuddsbetalingene for %1 %2?;SVE=Vill du bokf”ra en kreditnota f”r f”rskottsbetalningarna f”r %1 %2?';
      PurchInvHeader@1003 : Record 122;
      PurchCrMemoHeader@1002 : Record 124;
      PrepmtDocumentType@1004 : ',,Invoice,Credit Memo';
      UnsupportedDocTypeErr@1005 : TextConst 'ENU=Unsupported prepayment document type.;NOR=Ust›ttet dokumenttype for forskuddsbetaling.';

    [External]
    PROCEDURE PostPrepmtInvoiceYN@1(VAR PurchHeader2@1001 : Record 38;Print@1002 : Boolean);
    VAR
      PurchHeader@1003 : Record 38;
      ConfirmManagement@1000 : Codeunit 27;
    BEGIN
      PurchHeader.COPY(PurchHeader2);
      WITH PurchHeader DO BEGIN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text000,"Document Type","No."),TRUE) THEN
          EXIT;

        PostPrepmtDocument(PurchHeader,"Document Type"::Invoice);

        IF Print THEN
          GetReport(PurchHeader,0);

        COMMIT;
        OnAfterPostPrepmtInvoiceYN(PurchHeader);

        PurchHeader2 := PurchHeader;
      END;
    END;

    [External]
    PROCEDURE PostPrepmtCrMemoYN@2(VAR PurchHeader2@1001 : Record 38;Print@1002 : Boolean);
    VAR
      PurchHeader@1003 : Record 38;
      ConfirmManagement@1000 : Codeunit 27;
    BEGIN
      PurchHeader.COPY(PurchHeader2);
      WITH PurchHeader DO BEGIN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text001,"Document Type","No."),TRUE) THEN
          EXIT;

        PostPrepmtDocument(PurchHeader,"Document Type"::"Credit Memo");

        IF Print THEN
          GetReport(PurchHeader,1);

        COMMIT;
        OnAfterPostPrepmtCrMemoYN(PurchHeader);

        PurchHeader2 := PurchHeader;
      END;
    END;

    LOCAL PROCEDURE PostPrepmtDocument@3(VAR PurchHeader@1003 : Record 38;PrepmtDocumentType@1000 : Option);
    VAR
      PurchPostPrepayments@1002 : Codeunit 444;
      ErrorMessageHandler@1004 : Codeunit 29;
      ErrorMessageMgt@1001 : Codeunit 28;
    BEGIN
      OnBeforePostPrepmtDocument(PurchHeader,PrepmtDocumentType);

      ErrorMessageMgt.Activate(ErrorMessageHandler);
      PurchPostPrepayments.SetDocumentType(PrepmtDocumentType);
      COMMIT;
      IF NOT PurchPostPrepayments.RUN(PurchHeader) THEN
        ErrorMessageHandler.ShowErrors;
    END;

    [External]
    PROCEDURE Preview@7(VAR PurchHeader@1000 : Record 38;DocumentType@1003 : Option);
    VAR
      PurchPostPrepmtYesNo@1001 : Codeunit 445;
      GenJnlPostPreview@1002 : Codeunit 19;
    BEGIN
      BINDSUBSCRIPTION(PurchPostPrepmtYesNo);
      PurchPostPrepmtYesNo.SetDocumentType(DocumentType);
      GenJnlPostPreview.Preview(PurchPostPrepmtYesNo,PurchHeader);
    END;

    LOCAL PROCEDURE GetReport@4(VAR PurchHeader@1000 : Record 38;DocumentType@1001 : 'Invoice,Credit Memo');
    VAR
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetReport(PurchHeader,DocumentType,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH PurchHeader DO
        CASE DocumentType OF
          DocumentType::Invoice:
            BEGIN
              PurchInvHeader."No." := "Last Prepayment No.";
              PurchInvHeader.SETRECFILTER;
              PurchInvHeader.PrintRecords(FALSE);
            END;
          DocumentType::"Credit Memo":
            BEGIN
              PurchCrMemoHeader."No." := "Last Prepmt. Cr. Memo No.";
              PurchCrMemoHeader.SETRECFILTER;
              //PurchCrMemoHeader.PrintRecords(FALSE); //**4PS.o
              PurchCrMemoHeader.PrintRecords(FALSE,FALSE); //**4PS.n
            END;
        END;
    END;

    PROCEDURE SetDocumentType@9(NewPrepmtDocumentType@1000 : Option);
    BEGIN
      PrepmtDocumentType := NewPrepmtDocumentType;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostPrepmtInvoiceYN@6(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostPrepmtCrMemoYN@10(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [EventSubscriber(Codeunit,19,OnRunPreview)]
    LOCAL PROCEDURE OnRunPreview@8(VAR Result@1000 : Boolean;Subscriber@1001 : Variant;RecVar@1002 : Variant);
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchasePostPrepayments@1003 : Codeunit 444;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        COPY(RecVar);
        Invoice := TRUE;

        IF PrepmtDocumentType IN [PrepmtDocumentType::Invoice,PrepmtDocumentType::"Credit Memo"] THEN
          PurchasePostPrepayments.SetDocumentType(PrepmtDocumentType)
        ELSE
          ERROR(UnsupportedDocTypeErr);
      END;

      PurchasePostPrepayments.SetPreviewMode(TRUE);
      Result := PurchasePostPrepayments.RUN(PurchaseHeader);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetReport@5(VAR PurchaseHeader@1000 : Record 38;DocumentType@1002 : 'Invoice,Credit Memo';VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostPrepmtDocument@11(VAR PurchaseHeader@1000 : Record 38;PrepmtDocumentType@1001 : Option);
    BEGIN
    END;

    BEGIN
    END.
  }
}

