OBJECT Codeunit 6085603 Document Capture Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW16.00.10.5.00.07,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 81=r;
    SingleInstance=Yes;
    OnRun=VAR
            RecRef@1160040000 : RecordRef;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      TempLogRenameTable@1160040001 : TEMPORARY Record 6085589;
      GlobalDCTriggerMgt@1160040003 : Codeunit 6085659;
      CEMDBTriggers@1160040000 : Codeunit 6085783;
      SuspendTriggers@1160040002 : Boolean;
      ContiniaLicenseMgt@1160040004 : Codeunit 6192771;

    PROCEDURE CompanyOpen@1160040004();
    VAR
      ContiniaOnlineLicenseMgt@6085574 : Codeunit 6192773;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      COMMIT;
      ContiniaOnlineLicenseMgt.GetDatabaseReader(COMPANYNAME);
    END;

    PROCEDURE GetTableTriggerSetup@1(TableID@1000 : Integer;VAR RunInsert@1001 : Boolean;VAR RunModify@1002 : Boolean;VAR RunDelete@1003 : Boolean;VAR RunRename@1004 : Boolean);
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT;

      IF IsLogActive(TableID,FALSE) THEN
        RunRename := TRUE;

      CASE TableID OF
        DATABASE::"Gen. Journal Line":
          RunDelete := TRUE;

        DATABASE::"Purchase Header":
          BEGIN
            RunModify := TRUE;
            RunDelete := TRUE;
          END;

        DATABASE::"Purchase Line":
          BEGIN
            RunModify := TRUE;
            RunDelete := TRUE;
          END;

        DATABASE::"Purch. Inv. Header":
          BEGIN
            RunDelete := TRUE;
          END;

        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RunDelete := TRUE;
          END;

        DATABASE::"User Setup":
          RunDelete := TRUE;

        DATABASE::"General Posting Setup":
          RunDelete := TRUE;

        DATABASE::"Vendor Posting Group":
          RunDelete := TRUE;

        DATABASE::"Reason Code":
          RunDelete := TRUE;

        DATABASE::"Continia Company Setup":
          RunModify := TRUE;

        DATABASE::"Continia Client Credentials":
          RunDelete := TRUE;
      END;

      DocCategoryIntegrationTriggers(TableID,RunInsert,RunModify,RunDelete,RunRename);

      IF ContiniaLicenseMgt.HasLicenseAccessToEM THEN
        CEMDBTriggers.GetTableTriggerSetup(TableID,RunInsert,RunModify,RunDelete,RunRename);
    END;

    PROCEDURE IsLogActive@161024012(TableNo@1160040002 : Integer;AddMissingTable@1160040006 : Boolean) IsActive : Boolean;
    VAR
      ChangeLogSetup@161024015 : Record 402;
      Field@1160040000 : Record 2000000041;
      RecRef@1160040001 : RecordRef SECURITYFILTERING(Ignored);
      KeyRef@1160040003 : KeyRef;
      FieldRef@1160040004 : FieldRef;
      Count@1160040005 : Integer;
      DeleteRec@6085573 : Boolean;
    BEGIN
      IF TableNo = 0 THEN
        EXIT;

      IsActive := IsLogActive2(TableNo,AddMissingTable);
      IF (NOT IsActive) AND NOT(AddMissingTable) THEN
        EXIT(FALSE);

      RecRef.OPEN(TableNo);
      //RecRef.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF NOT RecRef.FINDFIRST THEN BEGIN
        RecRef.INSERT;
        DeleteRec := TRUE;
      END;

      KeyRef := RecRef.KEYINDEX(1);
      FOR Count := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(Count);
        Field.GET(TableNo,FieldRef.NUMBER);
        IF Field.RelationTableNo <> 0 THEN BEGIN
          IsActive := IsLogActive2(Field.RelationTableNo,AddMissingTable);
          IF (NOT IsActive) AND NOT(AddMissingTable) THEN BEGIN
            IF DeleteRec THEN
              RecRef.DELETE;
            EXIT(FALSE);
          END;
        END;
      END;

      IF DeleteRec THEN
        RecRef.DELETE;
    END;

    PROCEDURE Insert@1160040007(VAR RecRef@1160040001 : RecordRef) : Boolean;
    VAR
      RecRef2@1160040000 : RecordRef;
      DoApplyChanges@1160040003 : Boolean;
    BEGIN
      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,0));

      RecRef2 := RecRef.DUPLICATE;

      CASE RecRef.NUMBER OF
      END;

      IF DoApplyChanges THEN
        ApplyFieldChanges(RecRef,RecRef2);

      IF ContiniaLicenseMgt.HasLicenseAccessToEM THEN
        CEMDBTriggers.Insert(RecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,0));
    END;

    PROCEDURE Modify@1160040006(VAR RecRef@1160040001 : RecordRef) : Boolean;
    VAR
      PurchHeader@1160040003 : Record 38;
      PurchLine@1160040002 : Record 39;
      Document@6085573 : Record 6085590;
      DocumentCategory@6085574 : Record 6085575;
      Template@6085579 : Record 6085579;
      ContiniaCompanySetup@6085580 : Record 6192773;
      xRecContiniaCompanySetup@6085582 : Record 6192773;
      RecordIDMgt@6085577 : Codeunit 6085604;
      ContiniaVersionMgt@6085583 : Codeunit 6192775;
      RecRef2@1160040000 : RecordRef;
      xRecRef@6085581 : RecordRef;
      FieldRef@6085576 : FieldRef;
      DoApplyChanges@1160040004 : Boolean;
      SourceRecNo@6085575 : Code[250];
      SourceRecName@6085578 : Text[250];
    BEGIN
      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,1));

      RecRef2 := RecRef.DUPLICATE;

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef2.SETTABLE(PurchHeader);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              IF GlobalDCTriggerMgt.ModifyPurchHeader(PurchHeader) THEN BEGIN
                RecRef2.GETTABLE(PurchHeader);
                DoApplyChanges := TRUE;
              END;
          END;

        DATABASE::"Continia Company Setup":
          BEGIN
            // Using events in NAV 2016 and forward
            IF ContiniaVersionMgt.NAVVersion < 90000 THEN BEGIN
              RecRef2.SETTABLE(ContiniaCompanySetup);
              IF xRecRef.GET(RecRef.RECORDID) THEN BEGIN
                xRecRef.SETTABLE(xRecContiniaCompanySetup);
                GlobalDCTriggerMgt.ModifyContiniaCompanySetup(ContiniaCompanySetup,xRecContiniaCompanySetup,0);
              END;
            END;
          END;
      END;

      IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN BEGIN
        Document.SETCURRENTKEY("Source Record Table ID","Source Record No.","Document Category Code");
        Document.SETRANGE("Source Record Table ID",RecRef.NUMBER);
        Document.SETFILTER("Document Category Code",'<>%1','');

        IF NOT Document.ISEMPTY THEN BEGIN
          SourceRecNo := RecordIDMgt.GetFirstKeyFieldValue(RecRef);
          IF (SourceRecNo <> '') AND (STRLEN(SourceRecNo) <= MAXSTRLEN(Document."Source Record No.")) THEN BEGIN
            Document.SETRANGE("Source Record No.",SourceRecNo);
            IF Document.FINDFIRST THEN
              REPEAT
                Document.SETRANGE("Document Category Code",Document."Document Category Code");
                IF DocumentCategory.GET(Document."Document Category Code") AND
                  (DocumentCategory."Source Field No. (Name)" <> 0)
                THEN BEGIN
                  FieldRef := RecRef.FIELD(DocumentCategory."Source Field No. (Name)");
                  SourceRecName := COPYSTR(FORMAT(FieldRef.VALUE),1,MAXSTRLEN(Document."Source Record Name"));
                  IF SourceRecName <> Document.GetSourceName THEN
                    Document.MODIFYALL("Source Record Name",SourceRecName);
                END;

                Document.FINDLAST;
                Document.SETRANGE("Document Category Code");
              UNTIL Document.NEXT = 0;
          END;
        END;

        Template.SETCURRENTKEY("Source Record Table ID","Source Record No.","Category Code");
        Template.SETRANGE("Source Record Table ID",RecRef.NUMBER);
        IF NOT Template.ISEMPTY THEN BEGIN
          IF SourceRecNo = '' THEN
            SourceRecNo := RecordIDMgt.GetFirstKeyFieldValue(RecRef);
          IF (SourceRecNo <> '') AND (STRLEN(SourceRecNo) <= MAXSTRLEN(Template."Source Record No.")) THEN BEGIN
            Template.SETRANGE("Source Record No.",SourceRecNo);
            IF Template.FINDFIRST THEN
              REPEAT
                Template.SETRANGE("Category Code",Template."Category Code");
                IF DocumentCategory.GET(Template."Category Code") AND
                  (DocumentCategory."Source Field No. (Name)" <> 0)
                THEN BEGIN
                  FieldRef := RecRef.FIELD(DocumentCategory."Source Field No. (Name)");
                  SourceRecName := COPYSTR(FORMAT(FieldRef.VALUE),1,MAXSTRLEN(Template."Source Record Name"));
                  IF SourceRecName <> Template.GetSourceName THEN
                    Template.MODIFYALL("Source Record Name",SourceRecName);
                END;

                Template.SETRANGE("Category Code");
                Template.FINDLAST;
              UNTIL Template.NEXT = 0;
          END;
        END;
      END;

      IF DoApplyChanges THEN
        ApplyFieldChanges(RecRef,RecRef2);

      IF ContiniaLicenseMgt.HasLicenseAccessToEM THEN
        CEMDBTriggers.Modify(RecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,1));
    END;

    PROCEDURE Delete@1160040005(VAR RecRef@1160040001 : RecordRef) : Boolean;
    VAR
      UserSetup@1160040003 : Record 91;
      GenJnlLine@1160040008 : Record 81;
      PurchHeader@1160040005 : Record 38;
      PurchLine@1160040000 : Record 39;
      GenPostSetup@1160040006 : Record 252;
      VendPostGrp@1160040002 : Record 93;
      ReasonCode@1160040009 : Record 231;
      ApprovalEntry@1160040007 : Record 454;
      PurchInvHeader@1160040010 : Record 122;
      PurchCrMemoHeader@1160040011 : Record 124;
      ContiniaClientCredentials@6085574 : Record 6192771;
      RecRef2@1160040004 : RecordRef;
      ContiniaVersionMgt@6085573 : Codeunit 6192775;
    BEGIN
      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,2));

      RecRef2 := RecRef.DUPLICATE;

      CASE RecRef.NUMBER OF
        DATABASE::"Gen. Journal Line":
          BEGIN
            RecRef2.SETTABLE(GenJnlLine);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeleteGenJnlLine(GenJnlLine);
          END;

        DATABASE::"Purchase Header":
          BEGIN
            RecRef2.SETTABLE(PurchHeader);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeletePurchHeader(PurchHeader);
          END;

        DATABASE::"Purchase Line":
          BEGIN
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              // Using events in NAV 2016 and forward
              IF ContiniaVersionMgt.NAVVersion < 90000 THEN BEGIN
                RecRef2.SETTABLE(PurchLine);
                GlobalDCTriggerMgt.DeletePurchLine(PurchLine);
              END;
          END;

        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef2.SETTABLE(PurchInvHeader);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeletePurchInvHeader(PurchInvHeader);
          END;

        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef2.SETTABLE(PurchCrMemoHeader);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeletePurchCrMemoHeader(PurchCrMemoHeader);
          END;

        DATABASE::"User Setup":
          BEGIN
            RecRef2.SETTABLE(UserSetup);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeleteUserSetup(UserSetup);
          END;

        DATABASE::"General Posting Setup":
          BEGIN
            RecRef2.SETTABLE(GenPostSetup);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeleteGenPostSetup(GenPostSetup);
          END;

        DATABASE::"Vendor Posting Group":
          BEGIN
            RecRef2.SETTABLE(VendPostGrp);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeleteVendPostGrp(VendPostGrp);
          END;

        DATABASE::"Reason Code":
          BEGIN
            RecRef2.SETTABLE(ReasonCode);
            IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
              GlobalDCTriggerMgt.DeleteReasonCode(ReasonCode);
          END;

        DATABASE::"Continia Client Credentials":
          BEGIN
            // Using events in NAV 2016 and forward
            IF ContiniaVersionMgt.NAVVersion < 90000 THEN BEGIN
              RecRef2.SETTABLE(ContiniaClientCredentials);
              GlobalDCTriggerMgt.DeleteContiniaClientCredential(ContiniaClientCredentials);
            END;
          END;
      END;

      IF ContiniaLicenseMgt.HasLicenseAccessToEM THEN
        CEMDBTriggers.Delete(RecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,2));
    END;

    PROCEDURE Rename@1160040003(VAR RecRef@1160040003 : RecordRef;VAR xRecRef@1160040000 : RecordRef) : Boolean;
    VAR
      RecIDMgt@1160040002 : Codeunit 6085604;
      Document@6085573 : Record 6085590;
      Template@1160040001 : Record 6085579;
      DocCat@6085574 : Record 6085575;
      FieldRef@6085577 : FieldRef;
      xSourceRecNo@6085575 : Code[250];
      SourceRecNo@6085576 : Code[250];
      SourceRecName@6085578 : Text[250];
    BEGIN
      IF ContiniaLicenseMgt.HasLicenseAccessToDC THEN
        RecIDMgt.RenameRecIDTree(xRecRef,RecRef);

      IF RecIDMgt.KeyIsOneFieldCodeType(RecRef) THEN BEGIN
        SourceRecName := '';

        Document.SETCURRENTKEY("Source Record Table ID","Source Record No.");
        Document.SETRANGE("Source Record Table ID",RecRef.NUMBER);
        IF NOT Document.ISEMPTY THEN BEGIN
          xSourceRecNo := RecIDMgt.GetFirstKeyFieldValue(xRecRef);
          SourceRecNo := RecIDMgt.GetFirstKeyFieldValue(RecRef);
          IF (xSourceRecNo <> '') AND (STRLEN(xSourceRecNo) <= MAXSTRLEN(Document."Source Record No.")) AND
            (SourceRecNo <> '') AND (STRLEN(SourceRecNo) <= MAXSTRLEN(Document."Source Record No."))
          THEN BEGIN
            Document.SETRANGE("Source Record No.",xSourceRecNo);
            IF Document.FINDFIRST AND DocCat.GET(Document."Document Category Code") THEN BEGIN
              FieldRef := RecRef.FIELD(DocCat."Source Field No. (Name)");
              SourceRecName := COPYSTR(FORMAT(FieldRef.VALUE),1,MAXSTRLEN(Document."Source Record Name"));
            END;

            Document.MODIFYALL("Source Record No.",SourceRecNo);

            Document.SETRANGE("Source Record No.",SourceRecNo);
            Document.MODIFYALL("Source Record Name",SourceRecName);
          END;
        END;

        Template.SETCURRENTKEY("Source Record Table ID","Source Record No.");
        Template.SETRANGE("Source Record Table ID",RecRef.NUMBER);
        IF NOT Template.ISEMPTY THEN BEGIN
          IF (SourceRecNo = '') AND (xSourceRecNo = '') THEN BEGIN
            xSourceRecNo := RecIDMgt.GetFirstKeyFieldValue(xRecRef);
            SourceRecNo := RecIDMgt.GetFirstKeyFieldValue(RecRef);
          END;

          IF (xSourceRecNo <> '') AND (STRLEN(xSourceRecNo) <= MAXSTRLEN(Template."Source Record No.")) AND
            (SourceRecNo <> '') AND (STRLEN(SourceRecNo) <= MAXSTRLEN(Template."Source Record No."))
          THEN BEGIN
            Template.SETRANGE("Source Record No.",xSourceRecNo);
            IF Template.FINDFIRST AND DocCat.GET(Template."Category Code") THEN BEGIN
              FieldRef := RecRef.FIELD(DocCat."Source Field No. (Name)");
              SourceRecName := COPYSTR(FORMAT(FieldRef.VALUE),1,MAXSTRLEN(Template."Source Record Name"));
              Template.MODIFYALL("Source Record Name",SourceRecName);
            END;

            Template.MODIFYALL("Source Record No.",SourceRecNo);
          END;
        END;
      END;

      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,3));

      IF ContiniaLicenseMgt.HasLicenseAccessToEM THEN
        CEMDBTriggers.Rename(RecRef,xRecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,3));
    END;

    PROCEDURE IsLogActive2@1160040002(TableNo@1160040002 : Integer;AddMissingTable@1160040001 : Boolean) : Boolean;
    VAR
      AllObjWithCaption@1160040004 : Record 2000000058;
      LogRenameTable@1160040000 : Record 6085589;
    BEGIN
      IF NOT ContiniaLicenseMgt.HasLicenseAccessToDC THEN
        EXIT;

      IF (TableNo = 0) OR (TableNo > 99999999) OR (TableNo = 6085589) THEN
        EXIT;

      //AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,TableNo);
      IF AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,TableNo) THEN; //**4PS bugfix

      IF TempLogRenameTable.GET(TableNo) THEN
        EXIT(TempLogRenameTable.Activated)
      ELSE BEGIN
        TempLogRenameTable."Table No." := TableNo;
        TempLogRenameTable.Activated := LogRenameTable.GET(TableNo) OR AddMissingTable;
        TempLogRenameTable.INSERT;

        IF LogRenameTable.GET(TableNo) THEN
          EXIT(TRUE);

        IF (NOT AddMissingTable) THEN
          EXIT;
      END;

      LogRenameTable."Table No." := TableNo;
      LogRenameTable.INSERT;

      EXIT(TRUE);
    END;

    PROCEDURE SetSuspendTriggers@1160040008(NewSuspendTriggers@1160040000 : Boolean);
    BEGIN
      SuspendTriggers := NewSuspendTriggers;
    END;

    PROCEDURE ApplyFieldChanges@1160040015(VAR RecRef@1160040000 : RecordRef;VAR NewRecRef@1160040001 : RecordRef);
    VAR
      FieldRef@1160040002 : FieldRef;
      NewFieldRef@1160040003 : FieldRef;
      i@1160040004 : Integer;
    BEGIN
      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FieldRef := RecRef.FIELDINDEX(i);
        NewFieldRef := NewRecRef.FIELDINDEX(i);
        IF FieldRef.VALUE <> NewFieldRef.VALUE THEN
          FieldRef.VALUE := NewFieldRef.VALUE;
      END;
    END;

    PROCEDURE RunIntegrationTrigger@1160040000(TableId@1160040006 : Integer;TriggerType@1160040000 : 'Insert,Modify,Delete,Rename') : Boolean;
    VAR
      IntegrationManagement@1160040001 : Codeunit 5150;
      RunInsert@1160040005 : Boolean;
      RunModify@1160040004 : Boolean;
      RunDelete@1160040003 : Boolean;
      RunRename@1160040002 : Boolean;
    BEGIN
      IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,RunInsert,RunModify,RunDelete,RunRename);

      CASE TriggerType OF
        TriggerType::Insert:
          EXIT(RunInsert);
        TriggerType::Modify:
          EXIT(RunModify);
        TriggerType::Delete:
          EXIT(RunDelete);
        TriggerType::Rename:
          EXIT(RunRename);
      END;
    END;

    LOCAL PROCEDURE DocCategoryIntegrationTriggers@6085574(TableID@6085577 : Integer;VAR RunInsert@6085576 : Boolean;VAR RunModify@6085575 : Boolean;VAR RunDelete@6085574 : Boolean;VAR RunRename@6085573 : Boolean);
    VAR
      DocumentCategory@6085578 : Record 6085575;
      Document@6085579 : Record 6085590;
    BEGIN
      IF TableID = 0 THEN
        EXIT;

      DocumentCategory.SETRANGE("Source Table No.",TableID);
      IF NOT DocumentCategory.ISEMPTY THEN BEGIN
        RunRename := TRUE;
        RunModify := TRUE;
      END;

      Document.SETCURRENTKEY("Source Record Table ID","Source Record No.");
      Document.SETRANGE("Source Record Table ID",TableID);
      IF NOT DocumentCategory.ISEMPTY THEN BEGIN
        RunRename := TRUE;
        RunModify := TRUE;
      END;
    END;

    PROCEDURE DiffCompaniesWithDC@6085573() : Boolean;
    VAR
      Company@6085573 : Record 2000000006;
      COLicenseMgt@6085575 : Codeunit 6192773;
      AccessMgt@6085574 : Codeunit 6085626;
      AboutDC@6085577 : Codeunit 6085589;
      ActivationState@6085576 : 'NeverActivated,NeedReactivation,Activated,OfflineStarted';
    BEGIN
      Company.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF Company.FINDFIRST THEN
        REPEAT
          IF AccessMgt.HasAccessToTable(Company.Name,DATABASE::"Continia Company Setup") THEN
            IF COLicenseMgt.GetProductActivationState(AboutDC.ProductCode,Company.Name) = ActivationState::Activated THEN
              EXIT(TRUE);
        UNTIL Company.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

