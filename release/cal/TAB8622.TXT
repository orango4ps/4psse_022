OBJECT Table 8622 Config. Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    DataCaptionFields=Name;
    OnDelete=VAR
               ConfigRelatedTable@1000 : Record 8625;
             BEGIN
               IF CountWorksheetTableOccurrences("Table ID") = 1 THEN BEGIN
                 ConfigRelatedTable.SETRANGE("Table ID","Table ID");
                 ConfigRelatedTable.DELETEALL(TRUE);
               END;
             END;

    ReplicateData=No;
    CaptionML=[ENU=Config. Line;
               NOR=Konfig.linje];
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 2   ;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Line Type" <> "Line Type"::Table THEN
                                                                  TESTFIELD("Table ID",0);
                                                              END;

                                                   CaptionML=[ENU=Line Type;
                                                              NOR=Linjetype;
                                                              SVE=Typ av rad];
                                                   OptionCaptionML=[ENU=Area,Group,Table;
                                                                    NOR=Omr†de,Gruppe,Tabell];
                                                   OptionString=Area,Group,Table }
    { 3   ;   ;Table ID            ;Integer       ;TableRelation=IF (Line Type=CONST(Table)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table),
                                                                                                                                  Object ID=FILTER(..1260|1262..99000999|2000000004|2000000005));
                                                   OnValidate=VAR
                                                                RecRef@1000 : RecordRef;
                                                              BEGIN
                                                                IF CurrFieldNo > 0 THEN
                                                                  TESTFIELD("Line Type","Line Type"::Table);

                                                                IF ("Table ID" <> xRec."Table ID") AND (xRec."Table ID" > 0) THEN
                                                                  TESTFIELD("Dimensions as Columns",FALSE);

                                                                IF ("Table ID" <> xRec."Table ID") AND ("Package Code" <> '') THEN
                                                                  IF CONFIRM(Text003,FALSE) THEN
                                                                    "Package Code" := ''
                                                                  ELSE BEGIN
                                                                    "Table ID" := xRec."Table ID";
                                                                    EXIT;
                                                                  END;

                                                                IF "Table ID" > 0 THEN BEGIN
                                                                  RecRef.OPEN("Table ID");
                                                                  VALIDATE(Name,RecRef.CAPTION);
                                                                  "Page ID" := ConfigMgt.FindPage("Table ID");
                                                                  "Copying Available" := ConfigMgt.TransferContents("Table ID",'',FALSE);
                                                                  GetRelatedTables;
                                                                END ELSE
                                                                  IF xRec."Table ID" > 0 THEN
                                                                    ERROR(Text001);
                                                              END;

                                                   OnLookup=VAR
                                                              ConfigValidateMgt@1000 : Codeunit 8617;
                                                            BEGIN
                                                              TESTFIELD("Line Type","Line Type"::Table);
                                                              ConfigValidateMgt.LookupTable("Table ID");
                                                              VALIDATE("Table ID");
                                                            END;

                                                   CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 4   ;   ;Name                ;Text250       ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 5   ;   ;Company Filter      ;Text30        ;FieldClass=FlowFilter;
                                                   TableRelation=Company;
                                                   CaptionML=[ENU=Company Filter;
                                                              NOR=Selskapsfilter;
                                                              SVE=F”retagsfilter] }
    { 6   ;   ;Company Filter (Source Table);Text30;
                                                   FieldClass=FlowFilter;
                                                   TableRelation=Company;
                                                   CaptionML=[ENU=Company Filter (Source Table);
                                                              NOR=Selskapsfilter (kildetabell)] }
    { 8   ;   ;No. of Records      ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Table Information"."No. of Records" WHERE (Company Name=FIELD(Company Filter),
                                                                                                               Table No.=FIELD(Table ID)));
                                                   CaptionML=[ENU=No. of Records;
                                                              NOR=Antall poster;
                                                              SVE=Antal poster];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 9   ;   ;No. of Records (Source Table);Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Table Information"."No. of Records" WHERE (Company Name=FIELD("Company Filter (Source Table)"),
                                                                                                               Table No.=FIELD(Table ID)));
                                                   CaptionML=[ENU=No. of Records (Source Table);
                                                              NOR=Antall poster (kildetabell);
                                                              SVE=Antal poster (k„lltabell)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 10  ;   ;Licensed Table      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("License Permission" WHERE (Object Type=CONST(TableData),
                                                                                                 Object Number=FIELD(Table ID),
                                                                                                 Read Permission=CONST(Yes),
                                                                                                 Insert Permission=CONST(Yes),
                                                                                                 Modify Permission=CONST(Yes),
                                                                                                 Delete Permission=CONST(Yes)));
                                                   CaptionML=[ENU=Licensed Table;
                                                              NOR=Lisensiert tabell];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11  ;   ;Promoted Table      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Promoted Table" THEN
                                                                  TESTFIELD("Line Type","Line Type"::Table);
                                                              END;

                                                   CaptionML=[ENU=Promoted Table;
                                                              NOR=Forfremmet tabell] }
    { 12  ;   ;Dimensions as Columns;Boolean      ;OnValidate=VAR
                                                                ConfigPackageTable@1000 : Record 8613;
                                                              BEGIN
                                                                TESTFIELD("Line Type","Line Type"::Table);
                                                                TESTFIELD("Table ID");
                                                                TESTFIELD("Package Code");
                                                                ConfigPackageTable.GET("Package Code","Table ID");
                                                                ConfigPackageTable.SetHideValidationDialog(HideValidationDialog);
                                                                ConfigPackageTable.VALIDATE("Dimensions as Columns","Dimensions as Columns");
                                                                ConfigPackageTable.MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Dimensions as Columns;
                                                              NOR=Dimensjoner som kolonner] }
    { 13  ;   ;Copying Available   ;Boolean       ;CaptionML=[ENU=Copying Available;
                                                              NOR=Mulig † kopiere];
                                                   Editable=No }
    { 14  ;   ;Page ID             ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Page));
                                                   OnLookup=VAR
                                                              ConfigValidateMgt@1000 : Codeunit 8617;
                                                            BEGIN
                                                              ConfigValidateMgt.LookupPage("Page ID");
                                                              VALIDATE("Page ID");
                                                            END;

                                                   CaptionML=[ENU=Page ID;
                                                              NOR=Side-ID;
                                                              SVE=Sid-ID] }
    { 15  ;   ;Page Caption        ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=CONST(Page),
                                                                                                             Object ID=FIELD(Page ID)));
                                                   CaptionML=[ENU=Page Caption;
                                                              NOR=Sideoverskrift;
                                                              SVE=Sidrubrik];
                                                   Editable=No }
    { 18  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                IF ("Starting Date" <> 0D) AND (xRec."Starting Date" <> 0D) AND ("Ending Date" <> 0D) THEN
                                                                  "Ending Date" := "Ending Date" + ("Starting Date" - xRec."Starting Date");
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 19  ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 20  ;   ;Responsible ID      ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit 418;
                                                              BEGIN
                                                                UserMgt.ValidateUserID("Responsible ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Responsible ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Responsible ID;
                                                              NOR=Ansvarlig ID] }
    { 21  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=" ,In Progress,Completed,Ignored,Blocked";
                                                                    NOR=" ,I arbeid,Ferdig,Ignorert,Sperret"];
                                                   OptionString=[ ,In Progress,Completed,Ignored,Blocked] }
    { 25  ;   ;Vertical Sorting    ;Integer       ;CaptionML=[ENU=Vertical Sorting;
                                                              NOR=Loddrett sortering] }
    { 26  ;   ;Data Origin         ;Text50        ;CaptionML=[ENU=Data Origin;
                                                              NOR=Dataopprinnelse] }
    { 28  ;   ;Reference           ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Reference;
                                                              NOR=Referanse;
                                                              SVE=Referens] }
    { 30  ;   ;Licensed Page       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("License Permission" WHERE (Object Type=CONST(Page),
                                                                                                 Object Number=FIELD(Page ID),
                                                                                                 Execute Permission=CONST(Yes)));
                                                   CaptionML=[ENU=Licensed Page;
                                                              NOR=Lisensiert side];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 31  ;   ;No. of Question Groups;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Question Area" WHERE (Table ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=No. of Question Groups;
                                                              NOR=Antall sp›rsm†lsgrupper];
                                                   Editable=No }
    { 32  ;   ;Parent Line No.     ;Integer       ;CaptionML=[ENU=Parent Line No.;
                                                              NOR=Overordnet linjenr.;
                                                              SVE=™verordnat radnr] }
    { 36  ;   ;Package Code        ;Code20        ;TableRelation="Config. Package";
                                                   CaptionML=[ENU=Package Code;
                                                              NOR=Pakkekode;
                                                              SVE=Paketkod] }
    { 37  ;   ;Package Caption     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Config. Package"."Package Name" WHERE (Code=FIELD(Package Code)));
                                                   CaptionML=[ENU=Package Caption;
                                                              NOR=Pakkeoverskrift];
                                                   Editable=No }
    { 38  ;   ;Package Exists      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Config. Package" WHERE (Code=FIELD(Package Code)));
                                                   CaptionML=[ENU=Package Exists;
                                                              NOR=Pakken finnes];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Line Type,Status,Promoted Table          }
    {    ;Table ID                                 }
    {    ;Vertical Sorting                         }
    {    ;Line Type,Parent Line No.                }
    {    ;Package Code                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConfigMgt@1001 : Codeunit 8616;
      ConfigPackageMgt@1008 : Codeunit 8611;
      Text001@1000 : TextConst 'ENU=Delete the line instead.;NOR=Slett linjen i stedet.';
      Text002@1002 : TextConst 'ENU=The status %1 is not supported.;NOR=Statusen %1 st›ttes ikke.';
      Text003@1003 : TextConst 'ENU=The table you are trying to rename is linked to a package. Do you want to remove the link?;NOR=Tabellen du pr›ver † endre navn p†, er koblet til en pakke. Vil du fjerne koblingen?';
      Text004@1004 : TextConst 'ENU=You cannot process line for table %1 and package code %2 because it is blocked.;NOR=Du kan ikke behandle linjen for tabellen %1 og pakkekoden %2 fordi den er sperret.';
      HideValidationDialog@1005 : Boolean;
      NoDuplicateLinesMsg@1006 : TextConst 'ENU=There are no duplicate lines.;NOR=Det finnes ingen dupliserte linjer.';
      NoOfDuplicateLinesDeletedMsg@1007 : TextConst 'ENU=%1 line(s) were deleted.;NOR=%1 linje(r) ble slettet.';

    [External]
    PROCEDURE CheckBlocked@4();
    BEGIN
      IF Status = Status::Blocked THEN
        ERROR(Text004,"Table ID","Package Code");
    END;

    [External]
    PROCEDURE ShowTableData@3();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeShowTableData(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF ("Line Type" = "Line Type"::Table) AND ("Page ID" <> 0) THEN
        PAGE.RUN("Page ID");
    END;

    [External]
    PROCEDURE ShowQuestions@10();
    VAR
      ConfigQuestionArea@1000 : Record 8611;
      ConfigQuestionAreaPage@1001 : Page 8611;
    BEGIN
      TESTFIELD("Line Type","Line Type"::Table);
      TESTFIELD("Table ID");

      ConfigQuestionArea.SETRANGE("Table ID","Table ID");
      ConfigQuestionArea.FINDFIRST;

      ConfigQuestionArea.RESET;
      ConfigQuestionArea.FILTERGROUP(2);
      ConfigQuestionArea.SETRANGE("Table ID","Table ID");
      ConfigQuestionArea.FILTERGROUP(0);
      ConfigQuestionAreaPage.SETTABLEVIEW(ConfigQuestionArea);
      ConfigQuestionAreaPage.RUNMODAL;
      CLEAR(ConfigQuestionAreaPage);
    END;

    [External]
    PROCEDURE GetProgress@1() : Integer;
    VAR
      Total@1001 : Integer;
      TotalStatusWeight@1005 : Decimal;
    BEGIN
      Total := GetNoTables;
      TotalStatusWeight := GetTotalStatusWeight;

      IF Total = 0 THEN
        EXIT(0);

      EXIT(ROUND(100 * TotalStatusWeight / Total,1));
    END;

    [External]
    PROCEDURE GetNoOfDirectChildrenTables@2() : Integer;
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      WITH ConfigLine DO BEGIN
        RESET;
        SETCURRENTKEY("Line Type");
        SETRANGE("Line Type","Line Type"::Table);
        SETRANGE("Parent Line No.",Rec."Line No.");
        EXIT(COUNT);
      END;
    END;

    [External]
    PROCEDURE GetDirectChildrenTablesStatusWeight@8() StatusWeight : Decimal;
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      WITH ConfigLine DO BEGIN
        RESET;
        SETCURRENTKEY("Line Type");
        SETRANGE("Line Type","Line Type"::Table);
        SETRANGE("Parent Line No.",Rec."Line No.");
        IF FINDSET THEN
          REPEAT
            StatusWeight += GetLineStatusWeight;
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE GetNoTables@7() Total : Integer;
    VAR
      ConfigLine@1001 : Record 8622;
    BEGIN
      CASE "Line Type" OF
        "Line Type"::Table:
          Total := 0;
        "Line Type"::Group:
          Total := GetNoOfDirectChildrenTables;
        "Line Type"::Area:
          BEGIN
            Total := GetNoOfDirectChildrenTables;

            ConfigLine.SETRANGE("Line Type",ConfigLine."Line Type"::Group);
            ConfigLine.SETRANGE("Parent Line No.","Line No.");
            IF ConfigLine.FINDSET THEN
              REPEAT
                Total += ConfigLine.GetNoOfDirectChildrenTables;
              UNTIL ConfigLine.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE GetTotalStatusWeight@13() Total : Decimal;
    VAR
      ConfigLine@1001 : Record 8622;
    BEGIN
      CASE "Line Type" OF
        "Line Type"::Table:
          Total := 0;
        "Line Type"::Group:
          Total := GetDirectChildrenTablesStatusWeight;
        "Line Type"::Area:
          BEGIN
            Total := GetDirectChildrenTablesStatusWeight;

            ConfigLine.SETRANGE("Line Type",ConfigLine."Line Type"::Group);
            ConfigLine.SETRANGE("Parent Line No.","Line No.");
            IF ConfigLine.FINDSET THEN
              REPEAT
                Total += ConfigLine.GetDirectChildrenTablesStatusWeight;
              UNTIL ConfigLine.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE GetRelatedTables@5();
    VAR
      ConfigRelatedTable@1000 : Record 8625;
      ConfigRelatedField@1002 : Record 8624;
      Field@1001 : Record 2000000041;
    BEGIN
      ConfigPackageMgt.SetFieldFilter(Field,"Table ID",0);
      IF Field.FINDSET THEN
        REPEAT
          IF Field.RelationTableNo <> 0 THEN
            IF NOT ConfigRelatedField.GET("Table ID",Field."No.") THEN BEGIN
              ConfigRelatedField.INIT;
              ConfigRelatedField."Table ID" := "Table ID";
              ConfigRelatedField."Field ID" := Field."No.";
              ConfigRelatedField."Relation Table ID" := Field.RelationTableNo;
              ConfigRelatedField.INSERT;
            END;
        UNTIL Field.NEXT = 0;

      IF ConfigRelatedField.FINDSET THEN
        REPEAT
          IF NOT ConfigRelatedTable.GET(ConfigRelatedField."Table ID",ConfigRelatedField."Relation Table ID") THEN BEGIN
            ConfigRelatedTable."Table ID" := ConfigRelatedField."Table ID";
            ConfigRelatedTable."Relation Table ID" := ConfigRelatedField."Relation Table ID";
            ConfigRelatedTable.INSERT;
          END;
        UNTIL ConfigRelatedField.NEXT = 0;
    END;

    [External]
    PROCEDURE GetLineStatusWeight@6() : Decimal;
    BEGIN
      CASE Status OF
        Status::" ":
          EXIT(0);
        Status::Completed,Status::Ignored:
          EXIT(1);
        Status::"In Progress",Status::Blocked:
          EXIT(0.5);
        ELSE
          ERROR(Text002,Status);
      END;
    END;

    LOCAL PROCEDURE CountWorksheetTableOccurrences@9(TableID@1000 : Integer) : Integer;
    VAR
      ConfigLine@1001 : Record 8622;
    BEGIN
      ConfigLine.SETRANGE("Table ID",TableID);
      EXIT(ConfigLine.COUNT);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE GetNoOfRecords@11() : Integer;
    BEGIN
      EXIT(GetNoOfDatabaseRecords("Table ID","Company Filter"));
    END;

    [External]
    PROCEDURE GetNoOfRecordsSourceTable@12() : Integer;
    BEGIN
      EXIT(GetNoOfDatabaseRecords("Table ID","Company Filter (Source Table)"));
    END;

    LOCAL PROCEDURE GetNoOfDatabaseRecords@15(TableID@1002 : Integer;Filter@1003 : Text) : Integer;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF TableID = 0 THEN
        EXIT(0);

      RecRef.OPEN(TableID,FALSE,Filter);
      EXIT(RecRef.COUNT);
    END;

    [External]
    PROCEDURE DeleteDuplicateLines@16();
    VAR
      ConfigLine@1001 : Record 8622;
      TempConfigLine@1002 : TEMPORARY Record 8622;
      NoOfDuplicateLines@1003 : Integer;
    BEGIN
      IF FINDSET THEN
        REPEAT
          TempConfigLine.RESET;
          TempConfigLine.SETRANGE("Line Type","Line Type"::Table);
          TempConfigLine.SETRANGE("Table ID","Table ID");
          TempConfigLine.SETRANGE("Package Code","Package Code");
          IF NOT TempConfigLine.ISEMPTY THEN BEGIN
            ConfigLine.GET("Line No.");
            ConfigLine.DELETE(TRUE);
            NoOfDuplicateLines := NoOfDuplicateLines + 1;
          END ELSE BEGIN
            TempConfigLine.INIT;
            TempConfigLine := Rec;
            TempConfigLine.INSERT;
          END;
        UNTIL NEXT = 0;

      IF NoOfDuplicateLines = 0 THEN
        MESSAGE(NoDuplicateLinesMsg)
      ELSE
        MESSAGE(NoOfDuplicateLinesDeletedMsg,NoOfDuplicateLines);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowTableData@17(ConfigLine@1000 : Record 8622;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

