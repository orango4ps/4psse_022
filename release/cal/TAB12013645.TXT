OBJECT Table 12013645 Template Rule
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF510000,4PS;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Changed By" := USERID;
               "Change Date" := CREATEDATETIME(TODAY,TIME);
             END;

    OnModify=BEGIN
               "Changed By" := USERID;
               "Change Date" := CREATEDATETIME(TODAY,TIME);
             END;

    OnDelete=VAR
               RuleLine@1100285001 : Record 12013603;
             BEGIN
               RuleLine.RESET;
               RuleLine.SETRANGE(Code, Code);
               RuleLine.DELETEALL;
             END;

    OnRename=VAR
               RuleLine@1100285001 : Record 12013603;
               RuleLine2@1100285000 : Record 12013603;
             BEGIN
               RuleLine.RESET;
               RuleLine.SETRANGE(Code,xRec.Code);
               IF RuleLine.FIND('-') THEN
                 REPEAT
                   RuleLine2.GET(RuleLine.Code,RuleLine."Line No.");
                   RuleLine2.RENAME(Code,RuleLine."Line No.");
                 UNTIL RuleLine.NEXT = 0;
             END;

    CaptionML=[ENU=Template Rule;
               SVE=Attestregel];
    LookupPageID=Page12013648;
  }
  FIELDS
  {
    { 2   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 10  ;   ;Name                ;Text30        ;CaptionML=[ENU=Name;
                                                              SVE=Namn] }
    { 11  ;   ;Dimension 1         ;Boolean       ;CaptionML=[ENU=Dimension 1;
                                                              SVE=Dimension 1] }
    { 12  ;   ;Dimension Code 1    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Dimension 1" := "Dimension Code 1" <> '';
                                                              END;

                                                   CaptionML=[ENU=Dimension Code 1;
                                                              SVE=Dimensionskod 1] }
    { 13  ;   ;Dimension Value 1 Filter;Code250   ;OnValidate=BEGIN
                                                                IF ("Dimension Code 1" = '') AND ("Dimension Value 1 Filter" <> '') THEN
                                                                  ERROR(EXF01);
                                                              END;

                                                   CaptionML=[ENU=Dimension Value 1 Filter;
                                                              SVE=Filter f”r dimensionsv„rde 1] }
    { 14  ;   ;Rule for            ;Option        ;OnValidate=BEGIN
                                                                IF NOT ("Rule for" IN ["Rule for"::Invoice,"Rule for"::" "]) THEN
                                                                  "Rule for Invoices" := "Rule for Invoices"::All;
                                                              END;

                                                   CaptionML=[ENU=Rule for;
                                                              SVE=Regel f”r];
                                                   OptionCaptionML=[ENU=" ,Order,Invoice,Requisition";
                                                                    SVE=" ,Order,Faktura,Rekvisition"];
                                                   OptionString=[ ,Order,Invoice,Requisition] }
    { 15  ;   ;Rule for Invoices   ;Option        ;OnValidate=BEGIN
                                                                IF "Rule for Invoices" <> "Rule for Invoices"::All THEN
                                                                  IF NOT ("Rule for" IN ["Rule for"::Invoice,"Rule for"::" "]) THEN
                                                                    ERROR(STRSUBSTNO(EXF02,FIELDCAPTION("Rule for")));
                                                              END;

                                                   CaptionML=[ENU=Rule for Invoices;
                                                              SVE=Regel f”r fakturor];
                                                   OptionCaptionML=[ENU=All,Cost account Invoices,Matched against Purchase Order,PO Connected with Difference,PO Connected without Difference;
                                                                    SVE=Alla,Omkostnadsfakturor,Kopplade mot ink”psorder,Kopplade mot order med differens,Kopplade mot order utan differens];
                                                   OptionString=All,Cost account Invoices,PO Connected Invoices,PO Connected with Diff,PO Connected without Diff }
    { 21  ;   ;Dimension 2         ;Boolean       ;CaptionML=[ENU=Dimension 2;
                                                              SVE=Dimension 2] }
    { 22  ;   ;Dimension Code 2    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Dimension 2" := "Dimension Code 2" <> '';
                                                              END;

                                                   CaptionML=[ENU=Dimension Code 2;
                                                              SVE=Dimensionskod 2] }
    { 23  ;   ;Dimension Value 2 Filter;Code250   ;CaptionML=[ENU=Dimension Value 2 Filter;
                                                              SVE=Filter f”r dimensionsv„rde 2] }
    { 31  ;   ;First Approver      ;Boolean       ;CaptionML=[ENU=First Approver;
                                                              SVE=F”rste attestant] }
    { 32  ;   ;First Approver Filter;Code250      ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "First Approver" := "First Approver Filter" <> '';
                                                              END;

                                                   CaptionML=[ENU=First Approver Filter;
                                                              SVE=Filter f”r f”rste attestant] }
    { 41  ;   ;Vendor              ;Boolean       ;CaptionML=[ENU=Vendor;
                                                              SVE=Leverant”r] }
    { 42  ;   ;Vendor Filter       ;Code250       ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                Vendor := "Vendor Filter" <> '';
                                                              END;

                                                   CaptionML=[ENU=Vendor Filter;
                                                              SVE=Leverant”rsfilter] }
    { 51  ;   ;Line Type           ;Boolean       ;CaptionML=[ENU=Line Type;
                                                              SVE=Radtyp] }
    { 52  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Line Type" := Type <> 0;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                                    SVE=" ,Redov.konto,Artikel,,Anl.tillg†ng,Omkostnad (artikel)"];
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 53  ;   ;Line Type Filter    ;Code250       ;CaptionML=[ENU=Line Type Filter;
                                                              SVE=Radtypsfilter] }
    { 54  ;   ;Total Invoice Amount;Boolean       ;CaptionML=[ENU=Use Total Invoice Amount;
                                                              SVE=Anv„nd totalt fakturabelopp] }
    { 55  ;   ;JobTag              ;Boolean       ;CaptionML=[ENU=Job;
                                                              SVE=Projekt] }
    { 56  ;   ;Job Filter          ;Code250       ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                JobTag := "Job Filter" <> '';
                                                              END;

                                                   CaptionML=[ENU=Job Filter;
                                                              SVE=Projektfilter] }
    { 60  ;   ;Purchaser Tag       ;Boolean       ;CaptionML=[ENU=Purchaser;
                                                              SVE=Ink”pare] }
    { 61  ;   ;Purchaser Filter    ;Code250       ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Purchaser Tag" := "Purchaser Filter" <> '';
                                                              END;

                                                   CaptionML=[ENU=Purchaser Filter;
                                                              SVE=Ink”parfilter] }
    { 70  ;   ;Person Responsible Tag;Boolean     ;CaptionML=[ENU=Person Responsible (Job);
                                                              SVE=Ansvarig (Projekt)] }
    { 71  ;   ;Person Responsible Filter;Code250  ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Person Responsible Tag" := "Person Responsible Filter" <> '';
                                                              END;

                                                   CaptionML=[ENU=Person Responsible Filter;
                                                              SVE=Ansvarigfilter] }
    { 80  ;   ;Vendor Posting Group Tag;Boolean   ;CaptionML=[ENU=Vendor Posting Group;
                                                              SVE=Leverant”rsbokf”ringsmall] }
    { 81  ;   ;Vendor Posting Group Filter;Code250;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Vendor Posting Group Tag" := "Vendor Posting Group Filter" <> '';
                                                              END;

                                                   CaptionML=[ENU=Vendor Posting Group Filter;
                                                              SVE=Leverant”rsbokf”ringsmallfilter] }
    { 100 ;   ;Disabled            ;Boolean       ;CaptionML=[ENU=Disabled;
                                                              SVE=Inaktiverad] }
    { 110 ;   ;Priority            ;Integer       ;CaptionML=[ENU=Priority;
                                                              SVE=Prioritet] }
    { 601 ;   ;Changed By          ;Code50        ;CaptionML=[ENU=Changed By;
                                                              SVE=Žndrad av];
                                                   Editable=No }
    { 602 ;   ;Change Date         ;DateTime      ;CaptionML=[ENU=Change Date;
                                                              SVE=Žndrad datum];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name                                }
  }
  CODE
  {
    VAR
      EXF01@1100285001 : TextConst 'ENU=Dimension code missing!;SVE=Dimensionskod saknas!';
      EXF02@1100285000 : TextConst 'ENU=Field %1 must be set to Blank or Invoice.;SVE=F„lt %1 m†ste vara satt till antingen blankt eller Faktura.';

    PROCEDURE FindTemplateFromPurch@1100285000(PurchLine@1100285002 : Record 39;VAR TemplateRule@1100285000 : Record 12013645;RuleFor@1100285008 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20];VAR TempDimValue@1100285003 : TEMPORARY Record 349) : Boolean;
    VAR
      TempExPriority@1100285001 : TEMPORARY Record 12013647;
    BEGIN
      CreateTemplateListFromPurch(TempExPriority,PurchLine,RuleFor,PurchaserCode,TempDimValue);

      TempExPriority.RESET;
      TempExPriority.SETCURRENTKEY(Hits,Priority);
      TempExPriority.ASCENDING(FALSE);
      IF TempExPriority.FIND('-') THEN BEGIN
        TemplateRule.GET(TempExPriority."Template Code");
        EXIT(TRUE)
      END ELSE BEGIN
        CLEAR(TemplateRule);
        EXIT(FALSE)
      END;
    END;

    PROCEDURE FindTemplateFromExFPurch@1100285013(ExFPurchLine@1100285002 : Record 12013588;VAR TemplateRule@1100285000 : Record 12013645;RuleFor@1100285008 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20];VAR TempDimValue@1100285003 : TEMPORARY Record 349) : Boolean;
    VAR
      TempExPriority@1100285001 : TEMPORARY Record 12013647;
    BEGIN
      CreateTemplateListFromExFPurch(TempExPriority,ExFPurchLine,RuleFor,PurchaserCode,TempDimValue);

      TempExPriority.RESET;
      TempExPriority.SETCURRENTKEY(Hits,Priority);
      TempExPriority.ASCENDING(FALSE);
      IF TempExPriority.FIND('-') THEN BEGIN
        TemplateRule.GET(TempExPriority."Template Code");
        EXIT(TRUE)
      END ELSE BEGIN
        CLEAR(TemplateRule);
        EXIT(FALSE)
      END;
    END;

    PROCEDURE FindTemplateFromDocLine@1100285015(DocLine@1100285002 : Record 12013609;VAR TemplateRule@1100285000 : Record 12013645;RuleFor@1100285008 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20];VAR TempDimValue@1100285003 : TEMPORARY Record 349) : Boolean;
    VAR
      TempExPriority@1100285001 : TEMPORARY Record 12013647;
    BEGIN
      CreateTemplateListFromDocLine(TempExPriority,DocLine,RuleFor,PurchaserCode,TempDimValue);

      TempExPriority.RESET;
      TempExPriority.SETCURRENTKEY(Hits,Priority);
      TempExPriority.ASCENDING(FALSE);
      IF TempExPriority.FIND('-') THEN BEGIN
        TemplateRule.GET(TempExPriority."Template Code");
        EXIT(TRUE)
      END ELSE BEGIN
        CLEAR(TemplateRule);
        EXIT(FALSE)
      END;
    END;

    PROCEDURE CreateTemplateListFromPurch@1100285009(VAR TempExPriority@1100285009 : TEMPORARY Record 12013647;PurchLine@1100285014 : Record 39;RuleFor@1100285011 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20];VAR TempDimValue@1100285020 : TEMPORARY Record 349);
    VAR
      PurchOrderLine@1100285003 : Record 39;
      PurchImportLine@1100285002 : Record 12013588;
      TemplateRule@1100285015 : Record 12013645;
      TotPurchLine@1100285006 : Record 39;
      PurchHeader@1100285016 : Record 38;
      ExFlowSetup@1100285017 : Record 12013601;
      ExFlowVend@1100285018 : Record 12013595;
      CurrExchRate@1100285019 : Record 330;
      ExFlowWorkFlowMgt@1100285001 : Codeunit 12013593;
      DiffExists@1100285000 : Boolean;
      TotMiscAmt@1100285007 : Decimal;
      MaxMiscAmt@1100285008 : Decimal;
    BEGIN
      TempExPriority.RESET;
      TempExPriority.DELETEALL;

      TemplateRule.RESET;
      TemplateRule.SETRANGE(Disabled, FALSE);
      FilterTemplateRuleByDocType(RuleFor, TemplateRule);

      // Go through document, check for diff
      DiffExists := FALSE;
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      TotPurchLine.RESET;
      TotPurchLine.SETRANGE("Document Type", PurchLine."Document Type");
      TotPurchLine.SETRANGE("Document No.", PurchLine."Document No.");
      TotPurchLine.SETFILTER("ExFlow Order No.", '<>%1', '');
      IF TotPurchLine.FINDFIRST THEN BEGIN
        TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::"PO Connected with Diff",
                                                             TemplateRule."Rule for Invoices"::"PO Connected without Diff");
        IF TemplateRule.FINDFIRST THEN BEGIN
          IF PurchLine."ExFlow Order No." <> '' THEN BEGIN
            CASE PurchLine."Document Type" OF
              PurchLine."Document Type"::Invoice:
                PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,PurchLine."ExFlow Order No.",PurchLine."ExFlow Order Line No.");
              PurchLine."Document Type"::"Credit Memo":
                PurchOrderLine.GET(PurchOrderLine."Document Type"::"Return Order",PurchLine."ExFlow Order No.",
                                   PurchLine."ExFlow Order Line No.");
              PurchLine."Document Type"::Order:
                PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,PurchLine."ExFlow Order No.",PurchLine."ExFlow Order Line No.");
              PurchLine."Document Type"::"Return Order":
                PurchOrderLine.GET(PurchOrderLine."Document Type"::"Return Order",PurchLine."ExFlow Order No.",
                                   PurchLine."ExFlow Order Line No.");
            END;

            PurchImportLine.INIT;
            PurchImportLine."Order No." := PurchLine."ExFlow Order No.";
            PurchImportLine."Direct Unit Cost (Order)" := PurchOrderLine."Direct Unit Cost";
            PurchImportLine."Buy-from Vendor No." := PurchLine."Buy-from Vendor No.";
            PurchImportLine."Line Amount" := PurchLine."Line Amount";
            PurchImportLine."Line Discount % (Order)" := PurchOrderLine."Line Discount %";
            PurchImportLine.Quantity := PurchLine.Quantity;
            DiffExists := NOT ExFlowWorkFlowMgt.PurchPriceOK(PurchImportLine);
          END;

          // if line has no diff, then check if the total of unmatched lines exceeds max misc charge. If yes, then diff exists
          ExFlowSetup.GET;
          IF NOT ExFlowVend.GET(PurchHeader."Buy-from Vendor No.") THEN
            CLEAR(ExFlowVend);

          IF ExFlowVend."Specific Max Misc. Setting" THEN
            MaxMiscAmt := ExFlowVend."Max Misc. Charges (LCY)"
          ELSE
            MaxMiscAmt := ExFlowSetup."Max Misc. Charges (LCY)";

          IF NOT DiffExists AND (MaxMiscAmt <> 0) THEN BEGIN
            TotPurchLine.RESET;
            TotPurchLine.SETRANGE("Document Type", PurchLine."Document Type");
            TotPurchLine.SETRANGE("Document No.", PurchLine."Document No.");
            TotPurchLine.SETFILTER("ExFlow Order No.", '%1', '');
            IF TotPurchLine.FINDSET THEN
              REPEAT
                TotMiscAmt += TotPurchLine."Line Amount";
              UNTIL TotPurchLine.NEXT = 0;

            IF PurchHeader."Currency Code" <> '' THEN
              TotMiscAmt := CurrExchRate.ExchangeAmtFCYToLCY(0,'', // 4PS
                                         PurchHeader."Posting Date",PurchHeader."Currency Code",
                                         TotMiscAmt,PurchHeader."Currency Factor",FALSE); // 4PS

            IF TotMiscAmt > MaxMiscAmt THEN
              DiffExists := TRUE;
          END;
        END;
      END;

      TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::All,
                                                           TemplateRule."Rule for Invoices"::"Cost account Invoices");

      FilterPOMatched(PurchLine."PO Matched Document", DiffExists, TemplateRule);

      IF TemplateRule.FINDSET THEN
        REPEAT
          CreateTempListWithMatchTemplateRules(
            TemplateRule,
            TempExPriority,
            TempDimValue,
            PurchaserCode,
            PurchLine."First Approver",
            PurchLine."Buy-from Vendor No.",
            PurchHeader."Pay-to Vendor No.",
            PurchLine."Job No.",
            PurchLine."No.",
            PurchLine.Type);
        UNTIL TemplateRule.NEXT = 0;
    END;

    PROCEDURE CreateTemplateListFromExFPurch@1100285014(VAR TempExPriority@1100285009 : TEMPORARY Record 12013647;ExFPurchLine@1100285014 : Record 12013588;RuleFor@1100285011 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20];VAR TempDimValue@1100285002 : TEMPORARY Record 349);
    VAR
      TemplateRule@1100285015 : Record 12013645;
      TotExFPurchLine@1100285019 : Record 12013588;
      ExFlowSetup@1100285017 : Record 12013601;
      ExFlowVend@1100285016 : Record 12013595;
      CurrExchRate@1100285007 : Record 330;
      ExFPurchHeader@1100285018 : Record 12013587;
      ExFlowWorkFlowMgt@1100285001 : Codeunit 12013593;
      DiffExists@1100285000 : Boolean;
      TotMiscAmt@1100285005 : Decimal;
      MaxMiscAmt@1100285004 : Decimal;
    BEGIN
      TempExPriority.RESET;
      TempExPriority.DELETEALL;

      TemplateRule.RESET;
      TemplateRule.SETRANGE(Disabled, FALSE);
      FilterTemplateRuleByDocType(RuleFor, TemplateRule);

      // Go through document, check for diff
      DiffExists := FALSE;
      ExFPurchHeader.GET(ExFPurchLine."Inbound Document No.");
      IF ExFPurchHeader."PO Matched Document" THEN BEGIN
        TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::"PO Connected with Diff",
                                                             TemplateRule."Rule for Invoices"::"PO Connected without Diff");
        IF TemplateRule.FINDFIRST THEN BEGIN
          DiffExists := NOT ExFlowWorkFlowMgt.PurchPriceOK(ExFPurchLine);

          // if line has no diff, then check if the total of unmatched lines exceeds max misc charge. If yes, then diff exists
          ExFlowSetup.GET;
          IF NOT ExFlowVend.GET(ExFPurchHeader."Buy-from Vendor No.") THEN
            CLEAR(ExFlowVend);

          IF ExFlowVend."Specific Max Misc. Setting" THEN
            MaxMiscAmt := ExFlowVend."Max Misc. Charges (LCY)"
          ELSE
            MaxMiscAmt := ExFlowSetup."Max Misc. Charges (LCY)";

          IF NOT DiffExists AND (MaxMiscAmt <> 0) THEN BEGIN
            TotExFPurchLine.RESET;
            TotExFPurchLine.SETRANGE("Inbound Document No.", ExFPurchLine."Inbound Document No.");
            TotExFPurchLine.SETFILTER("Order No.", '%1', '');
            IF TotExFPurchLine.FINDSET THEN
              REPEAT
                TotMiscAmt += TotExFPurchLine."Line Amount";
              UNTIL TotExFPurchLine.NEXT = 0;

            IF ExFPurchHeader."Currency Code" <> '' THEN
              TotMiscAmt := CurrExchRate.ExchangeAmtFCYToLCY(0,'', // 4PS
                                         ExFPurchHeader."Posting Date",ExFPurchHeader."Currency Code",
                                         TotMiscAmt,ExFPurchHeader."Currency Factor",FALSE); // 4PS

            IF TotMiscAmt > MaxMiscAmt THEN
              DiffExists := TRUE;
          END;
        END;
      END;

      TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::All,
                                                           TemplateRule."Rule for Invoices"::"Cost account Invoices");

      FilterPOMatched(ExFPurchLine."PO Matched Document", DiffExists, TemplateRule);

      IF TemplateRule.FINDSET THEN
        REPEAT
          CreateTempListWithMatchTemplateRules(
            TemplateRule,
            TempExPriority,
            TempDimValue,
            PurchaserCode,
            ExFPurchLine."First Approver",
            ExFPurchLine."Buy-from Vendor No.",
            ExFPurchLine."Pay-to Vendor No.",
            ExFPurchLine."Job No.",
            ExFPurchLine."No.",
            ExFPurchLine.Type);
        UNTIL TemplateRule.NEXT = 0;
    END;

    PROCEDURE CreateTemplateListFromDocLine@1100285016(VAR TempExPriority@1100285009 : TEMPORARY Record 12013647;DocLine@1100285014 : Record 12013609;RuleFor@1100285011 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20];VAR TempDimValue@1100285020 : TEMPORARY Record 349);
    VAR
      PurchOrderLine@1100285003 : Record 39;
      PurchImportLine@1100285002 : Record 12013588;
      TemplateRule@1100285015 : Record 12013645;
      TotPurchLine@1100285006 : Record 39;
      PurchHeader@1100285016 : Record 38;
      ExFlowSetup@1100285017 : Record 12013601;
      ExFlowVend@1100285018 : Record 12013595;
      CurrExchRate@1100285019 : Record 330;
      PurchLine@1100285012 : Record 39;
      ExFlowWorkFlowMgt@1100285001 : Codeunit 12013593;
      DiffExists@1100285000 : Boolean;
      TotMiscAmt@1100285007 : Decimal;
      MaxMiscAmt@1100285008 : Decimal;
    BEGIN
      TempExPriority.RESET;
      TempExPriority.DELETEALL;

      TemplateRule.RESET;
      TemplateRule.SETRANGE(Disabled, FALSE);
      FilterTemplateRuleByDocType(RuleFor, TemplateRule);

      // Go through document, check for diff
      DiffExists := FALSE;
      PurchHeader.GET(DocLine."Document Type",DocLine."Document No.");
      TotPurchLine.RESET;
      TotPurchLine.SETRANGE("Document Type", DocLine."Document Type");
      TotPurchLine.SETRANGE("Document No.", DocLine."Document No.");
      TotPurchLine.SETFILTER("ExFlow Order No.", '<>%1', '');
      IF TotPurchLine.FINDFIRST THEN BEGIN
        TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::"PO Connected with Diff",
                                                             TemplateRule."Rule for Invoices"::"PO Connected without Diff");
        IF TemplateRule.FINDFIRST THEN BEGIN
          IF DocLine."Order No." <> '' THEN BEGIN
            CASE DocLine."Document Type" OF
              DocLine."Document Type"::Invoice:
                PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,DocLine."Order No.",DocLine."Order Line No.");
              DocLine."Document Type"::"Credit Memo":
                PurchOrderLine.GET(PurchOrderLine."Document Type"::"Return Order",DocLine."Order No.",DocLine."Order Line No.");
              DocLine."Document Type"::Order:
                PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,DocLine."Order No.",DocLine."Order Line No.");
              DocLine."Document Type"::"Return Order":
                PurchOrderLine.GET(PurchOrderLine."Document Type"::"Return Order",DocLine."Order No.",DocLine."Order Line No.");
            END;

            PurchImportLine.INIT;
            PurchImportLine."Order No." := DocLine."Order No.";
            PurchImportLine."Direct Unit Cost (Order)" := PurchOrderLine."Direct Unit Cost";
            PurchImportLine."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
            PurchImportLine."Line Amount" := DocLine.Amount;
            PurchImportLine."Line Discount % (Order)" := PurchOrderLine."Line Discount %";
            PurchImportLine.Quantity := DocLine.Quantity;
            DiffExists := NOT ExFlowWorkFlowMgt.PurchPriceOK(PurchImportLine);
          END;

          // if line has no diff, then check if the total of unmatched lines exceeds max misc charge. If yes, then diff exists
          ExFlowSetup.GET;
          IF NOT ExFlowVend.GET(PurchHeader."Buy-from Vendor No.") THEN
            CLEAR(ExFlowVend);

          IF ExFlowVend."Specific Max Misc. Setting" THEN
            MaxMiscAmt := ExFlowVend."Max Misc. Charges (LCY)"
          ELSE
            MaxMiscAmt := ExFlowSetup."Max Misc. Charges (LCY)";

          IF NOT DiffExists AND (MaxMiscAmt <> 0) THEN BEGIN
            TotPurchLine.RESET;
            TotPurchLine.SETRANGE("Document Type", DocLine."Document Type");
            TotPurchLine.SETRANGE("Document No.", DocLine."Document No.");
            TotPurchLine.SETFILTER("ExFlow Order No.", '%1', '');
            IF TotPurchLine.FINDSET THEN
              REPEAT
                TotMiscAmt += TotPurchLine."Line Amount";
              UNTIL TotPurchLine.NEXT = 0;

            IF PurchHeader."Currency Code" <> '' THEN
              TotMiscAmt := CurrExchRate.ExchangeAmtFCYToLCY(0,'', // 4PS
                                         PurchHeader."Posting Date",PurchHeader."Currency Code",
                                         TotMiscAmt,PurchHeader."Currency Factor",FALSE); // 4PS

            IF TotMiscAmt > MaxMiscAmt THEN
              DiffExists := TRUE;
          END;
        END;
      END;

      TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::All,
                                                           TemplateRule."Rule for Invoices"::"Cost account Invoices");

      IF NOT PurchLine.GET(DocLine."Document Type",DocLine."Document No.",DocLine."Line No.") THEN
        CLEAR(PurchLine);

      FilterPOMatched(PurchLine."PO Matched Document", DiffExists, TemplateRule);

      IF TemplateRule.FINDSET THEN
        REPEAT
          CreateTempListWithMatchTemplateRules(
            TemplateRule,
            TempExPriority,
            TempDimValue,
            PurchaserCode,
            DocLine."First Approver",
            PurchHeader."Buy-from Vendor No.",
            PurchHeader."Pay-to Vendor No.",
            DocLine."Job No.",
            DocLine."No.",
            DocLine."Line Type");
        UNTIL TemplateRule.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateTempListWithMatchTemplateRules@1100285021(VAR TemplateRule@1100285000 : Record 12013645;VAR TempExPriority@1100285001 : Record 12013647;VAR TempDimValue@1100285004 : TEMPORARY Record 349;PurchaserCode@1100285006 : Code[20];FirstApprover@1100285017 : Code[50];"BuyFromVendorNo."@1100285016 : Code[20];"PayToVendorNo."@1100285015 : Code[20];"Job No."@1100285014 : Code[20];"No."@1100285007 : Code[20];Type@1100285005 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)');
    VAR
      FilterHit@1100285002 : Integer;
    BEGIN
      FilterHit := 0;

      IF TemplateRule."Dimension 1" THEN
        IF DimMatch(TRUE, TemplateRule, TempDimValue) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule."Dimension 2" THEN
        IF DimMatch(FALSE, TemplateRule, TempDimValue) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule."First Approver" THEN
        IF FirstMatch(FirstApprover, TemplateRule) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule.Vendor THEN
        IF VendorMatch("BuyFromVendorNo.", TemplateRule) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule."Line Type" THEN
        IF LineMatch(Type, "No.", TemplateRule) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule.JobTag THEN
        IF JobMatch("Job No.", TemplateRule) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule."Purchaser Tag" THEN
        IF PurchaserMatch(PurchaserCode, TemplateRule) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule."Person Responsible Tag" THEN
        IF PersonRespMatch("Job No.", TemplateRule) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      IF TemplateRule."Vendor Posting Group Tag" THEN
        IF VendorPostGroupMatch("PayToVendorNo.", TemplateRule) THEN
          FilterHit := FilterHit + 1
        ELSE
          EXIT;

      TempExPriority.INIT;
      TempExPriority."Template Code" := TemplateRule.Code;
      TempExPriority.Hits := FilterHit;
      TempExPriority.Priority := TemplateRule.Priority;
      TempExPriority.INSERT;
    END;

    PROCEDURE ShowPotentialTemplatesWkshFromExFPurch@1100285012(ExfPurchDocLine@1100285006 : Record 12013588);
    VAR
      TempExPriority@1100285000 : TEMPORARY Record 12013647;
      TempDimValue@1100285004 : TEMPORARY Record 349;
      ExFlowDimMgt@1100285007 : Codeunit 12013605;
      CurrentDocDimFound@1100285008 : Boolean;
      CurrDocDimCode@1100285009 : Code[20];
      CurrDocDimValue@1100285010 : Code[20];
      RuleFor@1100285003 : Integer;
    BEGIN
      ExFlowDimMgt.GetDimFromExFPurchLine(ExfPurchDocLine,CurrentDocDimFound,CurrDocDimCode,CurrDocDimValue,TempDimValue);

      RuleFor := 2; // invoice / credit memo

      CreateTemplateListFromExFPurch(TempExPriority,ExfPurchDocLine,RuleFor,ExfPurchDocLine."Purchaser Code",TempDimValue);

      IF ExfPurchDocLine."Template Rule" <> '' THEN BEGIN
        IF TempExPriority.GET(ExfPurchDocLine."Template Rule") THEN BEGIN
          TempExPriority.Hits := 1000;
          TempExPriority.MODIFY;
        END ELSE BEGIN
          TempExPriority."Template Code" := ExfPurchDocLine."Template Rule";
          TempExPriority.Hits := 1000;
          TempExPriority.INSERT;
        END;
      END;

      TempExPriority.RESET;
      TempExPriority.SETCURRENTKEY(Hits,Priority);
      TempExPriority.ASCENDING(FALSE);
      IF TempExPriority.FIND('-') THEN
        PAGE.RUN(PAGE::"Available template rules",TempExPriority);
    END;

    PROCEDURE ShowPotentialTemplatesWkshFromDocLine@1100285017(ExDocLine@1100285006 : Record 12013609);
    VAR
      TempExPriority@1100285000 : TEMPORARY Record 12013647;
      PurchLine@1100285011 : Record 39;
      TempDimValue@1100285004 : TEMPORARY Record 349;
      PurchaseHeader@1100285001 : Record 38;
      ExFlowDimMgt@1100285007 : Codeunit 12013605;
      CurrentDocDimFound@1100285008 : Boolean;
      CurrDocDimCode@1100285009 : Code[20];
      CurrDocDimValue@1100285010 : Code[20];
      RuleFor@1100285003 : Integer;
    BEGIN
      ExFlowDimMgt.GetDimFromDocLine(ExDocLine,CurrentDocDimFound,CurrDocDimCode,CurrDocDimValue,TempDimValue);

      IF NOT PurchaseHeader.GET(ExDocLine."Document Type",ExDocLine."Document No.") THEN
        CLEAR(PurchaseHeader);

      RuleFor := 0;
      CASE ExDocLine."Document Type" OF
        ExDocLine."Document Type"::Quote: RuleFor := 3;
        ExDocLine."Document Type"::Order: RuleFor := 1;
        ExDocLine."Document Type"::Invoice: RuleFor := 2;
        ExDocLine."Document Type"::"Credit Memo": RuleFor := 2;
      END;

      CreateTemplateListFromDocLine(TempExPriority,ExDocLine,RuleFor,PurchaseHeader."Purchaser Code",TempDimValue);

      IF PurchLine.GET(ExDocLine."Document Type",ExDocLine."Document No.",ExDocLine."Line No.") THEN
        IF PurchLine."Template Rule" <> '' THEN
          IF TempExPriority.GET(PurchLine."Template Rule") THEN BEGIN
            TempExPriority.Hits := 1000;
            TempExPriority.MODIFY;
          END ELSE BEGIN
            TempExPriority."Template Code" := PurchLine."Template Rule";
            TempExPriority.Hits := 1000;
            TempExPriority.INSERT;
          END;


      TempExPriority.RESET;
      TempExPriority.SETCURRENTKEY(Hits,Priority);
      TempExPriority.ASCENDING(FALSE);
      IF TempExPriority.FIND('-') THEN
        PAGE.RUN(PAGE::"Available template rules",TempExPriority);
    END;

    PROCEDURE DimMatch@1100285002(First@1100285005 : Boolean;TempRule@1100285003 : Record 12013645;VAR TempDimValue@1100285002 : TEMPORARY Record 349) : Boolean;
    VAR
      DimValue@1100285004 : Record 349;
      TargetValue@1100285007 : Code[20];
    BEGIN
      TargetValue := '';
      TempDimValue.RESET;

      IF First THEN BEGIN
        TempDimValue.SETRANGE("Dimension Code", TempRule."Dimension Code 1");
        IF TempDimValue.FINDFIRST THEN
          TargetValue := TempDimValue.Code;
      END ELSE BEGIN
        TempDimValue.SETRANGE("Dimension Code", TempRule."Dimension Code 2");
        IF TempDimValue.FINDFIRST THEN
          TargetValue := TempDimValue.Code;
      END;

      IF TargetValue = '' THEN
        EXIT(FALSE);

      DimValue.RESET;

      IF First THEN BEGIN
        DimValue.SETRANGE("Dimension Code", TempRule."Dimension Code 1");
        DimValue.SETFILTER(Code, TempRule."Dimension Value 1 Filter");
      END ELSE BEGIN
        DimValue.SETRANGE("Dimension Code", TempRule."Dimension Code 2");
        DimValue.SETFILTER(Code, TempRule."Dimension Value 2 Filter");
      END;

      DimValue."Dimension Code" := TempDimValue."Dimension Code";
      DimValue.Code := TargetValue;

      IF DimValue.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE FirstMatch@1100285005(LineApprover@1100285000 : Code[50];TempRule@1100285001 : Record 12013645) : Boolean;
    VAR
      UserGroup@1100285003 : Record 12013606;
    BEGIN
      UserGroup.RESET;
      UserGroup.SETFILTER(Code,TempRule."First Approver Filter");

      UserGroup.Code := LineApprover;

      IF UserGroup.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE VendorMatch@1100285006(LineVendor@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Vend@1100285002 : Record 23;
    BEGIN
      Vend.RESET;
      Vend.SETFILTER("No.", TempRule."Vendor Filter");
      Vend."No." := LineVendor;

      IF Vend.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LineMatch@1100285007(PurchLineType@1100285000 : Integer;PurchLineNo@1100285006 : Code[20];TempRule@1100285002 : Record 12013645) : Boolean;
    VAR
      Account@1100285001 : Record 15;
      Item@1100285003 : Record 27;
      Fixed@1100285004 : Record 5600;
      Charge@1100285005 : Record 5800;
    BEGIN
      CASE PurchLineType OF
        TempRule.Type::"G/L Account":
          BEGIN
            IF TempRule.Type = TempRule.Type::"G/L Account" THEN BEGIN
              Account.RESET;
              Account.SETFILTER("No.", TempRule."Line Type Filter");
              Account."No." := PurchLineNo;
              IF Account.FIND('=') THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE);
            END ELSE
              EXIT(FALSE);
          END;

        TempRule.Type::Item:
          BEGIN
            IF TempRule.Type = TempRule.Type::Item THEN BEGIN
              Item.RESET;
              Item.SETFILTER("No.", TempRule."Line Type Filter");
              Item."No." := PurchLineNo;

              IF Item.FIND('=') THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE);
            END ELSE
              EXIT(FALSE);
          END;

        TempRule.Type::"Fixed Asset":
          BEGIN
            IF TempRule.Type = TempRule.Type::"Fixed Asset" THEN BEGIN
              Fixed.RESET;
              Fixed.SETFILTER("No.", TempRule."Line Type Filter");
              Fixed."No." := PurchLineNo;

              IF Fixed.FIND('=') THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE);
            END ELSE
              EXIT(FALSE);
          END;


        TempRule.Type::"Charge (Item)":
          BEGIN
            IF TempRule.Type = TempRule.Type::"Charge (Item)" THEN BEGIN
              Charge.RESET;
              Charge.SETFILTER("No.", TempRule."Line Type Filter");
              Charge."No." := PurchLineNo;

              IF Charge.FIND('=') THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE);
            END ELSE
              EXIT(FALSE);
          END ELSE
            EXIT(FALSE);
      END;
    END;

    PROCEDURE CopyRule@1100285001(FromRule@1100285001 : Record 12013645);
    VAR
      TempRule@1100285003 : TEMPORARY Record 12013645;
      RuleLine@1100285000 : Record 12013603;
      FromRuleLine@1100285002 : Record 12013603;
    BEGIN
      TempRule := Rec;
      TRANSFERFIELDS(FromRule,FALSE);
      IF TempRule.Name <> '' THEN
        Name := TempRule.Name;
      MODIFY;
      GET(TempRule.Code);

      RuleLine.RESET;
      RuleLine.SETRANGE(Code, Code);
      RuleLine.DELETEALL;

      FromRuleLine.RESET;
      FromRuleLine.SETRANGE(Code, FromRule.Code);
      IF FromRuleLine.FIND('-') THEN
        REPEAT
          RuleLine.INIT;
          RuleLine.Code := Code;
          RuleLine."Line No." := FromRuleLine."Line No.";
          RuleLine."Approver Group" := FromRuleLine."Approver Group";
          RuleLine."Group Name" := FromRuleLine."Group Name";
          RuleLine."Over Amount" := FromRuleLine."Over Amount";
          RuleLine.INSERT(FALSE);
        UNTIL FromRuleLine.NEXT = 0;
    END;

    PROCEDURE JobMatch@1100285003(LineJob@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Job@1100285002 : Record 11072003;
    BEGIN
      Job.RESET;
      Job.SETFILTER("No.", TempRule."Job Filter");
      Job."No." := LineJob;

      IF Job.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PurchaserMatch@1100285008(LinePurchaser@1100285001 : Code[10];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      PurchaserTab@1100285002 : Record 13;
    BEGIN
      PurchaserTab.RESET;
      PurchaserTab.SETFILTER(Code, TempRule."Purchaser Filter");
      PurchaserTab.Code := LinePurchaser;

      IF PurchaserTab.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PersonRespMatch@1100285010(JobNo@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Job@1100285002 : Record 11072003;
    BEGIN
      Job.RESET;
      IF Job.SETCURRENTKEY("Person Responsible") THEN;
      Job.SETFILTER("Person Responsible", TempRule."Person Responsible Filter");
      Job.SETRANGE("No.", JobNo);
      IF Job.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE VendorPostGroupMatch@1100285011(PayToVendorNo@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Vendor@1100285002 : Record 23;
    BEGIN
      Vendor.RESET;
      IF Vendor.SETCURRENTKEY("Vendor Posting Group") THEN;
      Vendor.SETFILTER("Vendor Posting Group", TempRule."Vendor Posting Group Filter");
      Vendor.SETRANGE("No.", PayToVendorNo);
      IF Vendor.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LookUpExFlow@1100285004(VAR FilterText@1100285021 : Text[1024];"Column Source"@1100285014 : Code[20]) : Boolean;
    VAR
      Dim1List@1100285001 : Page 560;
      AccountList@1100285002 : Page 18;
      Account@1100285003 : Record 15;
      Item@1100285004 : Record 27;
      DimValue@1100285010 : Record 349;
      ItemList@1100285008 : Page 31;
      FixedList@1100285007 : Page 5601;
      FixedAsset@1100285011 : Record 5600;
      ChargeList@1100285006 : Page 5800;
      Charge@1100285012 : Record 5800;
      JobList@1100285005 : Page 11072004;
      Job@1100285013 : Record 11072003;
      FirstList@1100285015 : Page 12013618;
      First@1100285016 : Record 12013606;
      VendorList@1100285017 : Page 27;
      Vend@1100285018 : Record 23;
      PurchaserList@1100285020 : Page 14;
      Purchaser@1100285019 : Record 13;
      ResourceList@1100285022 : Page 77;
      Resource@1100285000 : Record 156;
      VendorPostingGroupList@1100285024 : Page 111;
      VendorPostingGroup@1100285023 : Record 93;
    BEGIN
      CASE "Column Source" OF
        'ACCOUNT' :
          BEGIN
            CLEAR(AccountList);
            AccountList.LOOKUPMODE(TRUE);
            AccountList.SETTABLEVIEW(Account);
            IF AccountList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              AccountList.GETRECORD(Account);
              FilterText := FilterText + AccountList.GetSelectionFilter;
              EXIT(TRUE);
            END;
          END;

        'DIM1':
          BEGIN
            CLEAR(Dim1List);
            Dim1List.LOOKUPMODE(TRUE);
            DimValue.RESET;
            DimValue.SETRANGE("Dimension Code", "Dimension Code 1");
            Dim1List.SETTABLEVIEW(DimValue);
            IF Dim1List.RUNMODAL = ACTION::LookupOK THEN BEGIN
              Dim1List.GETRECORD(DimValue);
              FilterText := FilterText + DimValue.Code;
              EXIT(TRUE);
            END;
          END;

        'DIM2':
          BEGIN
            CLEAR(Dim1List);
            Dim1List.LOOKUPMODE(TRUE);
            DimValue.RESET;
            DimValue.SETRANGE("Dimension Code", "Dimension Code 2");
            Dim1List.SETTABLEVIEW(DimValue);
            IF Dim1List.RUNMODAL = ACTION::LookupOK THEN BEGIN
              Dim1List.GETRECORD(DimValue);
              FilterText := FilterText + DimValue.Code;
              EXIT(TRUE);
            END;
          END;

        'ITEM':
          BEGIN
            CLEAR(ItemList);
            ItemList.LOOKUPMODE(TRUE);
            Item.RESET;
            ItemList.SETTABLEVIEW(Item);
            IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ItemList.GETRECORD(Item);
              FilterText := FilterText + Item."No.";
              EXIT(TRUE);
            END;
          END;

        'FIXED':
          BEGIN
            CLEAR(FixedList);
            FixedList.LOOKUPMODE(TRUE);
            FixedAsset.RESET;
            FixedList.SETTABLEVIEW(FixedAsset);
            IF FixedList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              FixedList.GETRECORD(FixedAsset);
              FilterText := FilterText + FixedAsset."No.";
              EXIT(TRUE);
            END;
          END;

        'CHARGE':
          BEGIN
            CLEAR(ChargeList);
            ChargeList.LOOKUPMODE(TRUE);
            Charge.RESET;
            ChargeList.SETTABLEVIEW(Charge);
            IF ChargeList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ChargeList.GETRECORD(Charge);
              FilterText := FilterText + Charge."No.";
              EXIT(TRUE);
            END;
          END;

        'FIRST':
          BEGIN
            CLEAR(FirstList);
            FirstList.LOOKUPMODE(TRUE);
            First.RESET;
            FirstList.SETTABLEVIEW(First);
            IF FirstList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              FirstList.GETRECORD(First);
              FilterText := FilterText + First.Code;
              EXIT(TRUE);
            END;
          END;

        'VENDOR':
          BEGIN
            CLEAR(VendorList);
            VendorList.LOOKUPMODE(TRUE);
            Vend.RESET;
            VendorList.SETTABLEVIEW(Vend);
            IF VendorList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              VendorList.GETRECORD(Vend);
              FilterText := FilterText + Vend."No.";
              EXIT(TRUE);
            END;
          END;

        'JOB':
          BEGIN
            CLEAR(JobList);
            JobList.LOOKUPMODE(TRUE);
            Job.RESET;
            JobList.SETTABLEVIEW(Job);
            IF JobList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              JobList.GETRECORD(Job);
              FilterText := FilterText + Job."No.";
              EXIT(TRUE);
            END;
          END;

        'PURCHASER':
          BEGIN
            CLEAR(PurchaserList);
            PurchaserList.LOOKUPMODE(TRUE);
            Purchaser.RESET;
            PurchaserList.SETTABLEVIEW(Purchaser);
            IF PurchaserList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              PurchaserList.GETRECORD(Purchaser);
              FilterText := FilterText + Purchaser.Code;
              EXIT(TRUE);
            END;
          END;

        'PERSRESP':
          BEGIN
            CLEAR(ResourceList);
            ResourceList.LOOKUPMODE(TRUE);
            Resource.RESET;
            ResourceList.SETTABLEVIEW(Resource);
            IF ResourceList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ResourceList.GETRECORD(Resource);
              FilterText := FilterText + Resource."No.";
              EXIT(TRUE);
            END;
          END;

        'VENDPOSTGROUP':
          BEGIN
            CLEAR(VendorPostingGroupList);
            VendorPostingGroupList.LOOKUPMODE(TRUE);
            VendorPostingGroup.RESET;
            VendorPostingGroupList.SETTABLEVIEW(VendorPostingGroup);
            IF VendorPostingGroupList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              VendorPostingGroupList.GETRECORD(VendorPostingGroup);
              FilterText := FilterText + VendorPostingGroup.Code;
              EXIT(TRUE);
            END
          END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FilterTemplateRuleByDocType@1100285027(RuleFor@1100285000 : ' ,Order,Invoice,Requisition';VAR TemplateRule@1100285001 : Record 12013645);
    BEGIN
      IF RuleFor <> 0 THEN
        IF RuleFor = 1 THEN  // Order
          TemplateRule.SETFILTER("Rule for",'%1|%2|%3',0,1,3) // when Order search for both Order and Requisition
        ELSE
          TemplateRule.SETFILTER("Rule for",'%1|%2',0,RuleFor);
    END;

    LOCAL PROCEDURE FilterPOMatched@1100285022(POMatched@1100285001 : Boolean;DiffExists@1100285002 : Boolean;VAR TemplateRule@1100285000 : Record 12013645);
    BEGIN
      IF NOT POMatched THEN
        EXIT;

      IF DiffExists THEN
        TemplateRule.SETFILTER("Rule for Invoices", '%1|%2|%3', TemplateRule."Rule for Invoices"::All,
                                                                TemplateRule."Rule for Invoices"::"PO Connected Invoices",
                                                                TemplateRule."Rule for Invoices"::"PO Connected with Diff")
      ELSE
        TemplateRule.SETFILTER("Rule for Invoices", '%1|%2|%3', TemplateRule."Rule for Invoices"::All,
                                                                TemplateRule."Rule for Invoices"::"PO Connected Invoices",
                                                                TemplateRule."Rule for Invoices"::"PO Connected without Diff");
    END;

    BEGIN
    END.
  }
}

