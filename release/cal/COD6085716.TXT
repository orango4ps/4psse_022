OBJECT Codeunit 6085716 Purch./Sales - Line Capture
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00;
  }
  PROPERTIES
  {
    TableNo=6085590;
    OnRun=BEGIN
            CaptureTable(Rec);
          END;

  }
  CODE
  {
    VAR
      CaptureEngine@161024012 : Codeunit 6085575;
      CaptureMgnt@161024013 : Codeunit 6085576;

    PROCEDURE CaptureTable@1000000003(VAR Document@1000000000 : Record 6085590);
    VAR
      Template@161024012 : Record 6085579;
      Page@1000000014 : Record 6085591;
      PrevPage@1160040001 : Record 6085591;
      Field@1000000001 : Record 6085580;
      FieldCaption@1000000004 : Record 6085581;
      CaptionStartWord@1000000003 : ARRAY [100] OF Record 6085592;
      CaptionEndWord@1000000002 : ARRAY [100] OF Record 6085592;
      PrevCaptionStartWord@1000000005 : Record 6085592;
      Value@1000000013 : Record 6085593;
      Value2@1000000021 : Record 6085593;
      PrevCaption@1000000025 : Record 6085593;
      PrevValue@1000000022 : Record 6085593;
      Fields@1000000010 : ARRAY [20] OF Record 6085580;
      TempDocLine@1000000026 : TEMPORARY Record 6085596;
      WordFunc@1000000006 : Codeunit 6085574;
      Text@1000000027 : Text[1024];
      FieldLeft@1000000007 : ARRAY [20] OF Integer;
      FieldWidth@1000000008 : ARRAY [20] OF Integer;
      Bottom@1000000009 : Integer;
      Top@161024014 : Integer;
      CaptionBottom@161024015 : Integer;
      CaptionFound@1000000011 : Boolean;
      FieldCount@1000000012 : Integer;
      PageStop@1000000016 : Boolean;
      DocStop@1160040000 : Boolean;
      LineHeight@1000000017 : Integer;
      LineNo@1000000018 : Integer;
      i@1000000019 : Integer;
      i2@1000000015 : Integer;
      NewBottom@1000000020 : Decimal;
      StopPos@1000000023 : ARRAY [100] OF Integer;
      Right@1000000024 : Integer;
      PrevDPIFactor@1160040002 : Decimal;
      Found@161024013 : Boolean;
      MinLeft@6085573 : Integer;
      MaxRight@6085574 : Integer;
    BEGIN
      FieldCaption.SETRANGE("Template No.",Document."Template No.");
      FieldCaption.SETRANGE(Type,FieldCaption.Type::Line);
      IF FieldCaption.ISEMPTY THEN
        EXIT;
      FieldCaption.RESET;

      Template.GET(Document."Template No.");

      Page.SETRANGE("Document No.",Document."No.");
      IF Page.FIND('-') THEN
        REPEAT
          CLEAR(PrevCaptionStartWord);
          CLEAR(Fields);
          CLEAR(FieldWidth);
          CLEAR(FieldLeft);
          FieldCount := 0;
          Bottom := 0;

          Field.RESET;
          Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
          Field.SETRANGE("Template No.",Document."Template No.");
          Field.SETRANGE(Type,Field.Type::Line);
          Field.SETRANGE("Search for Value",TRUE);
          Field.SETFILTER("Typical Field Width",'<>%1',0);
          IF Field.FINDSET THEN
            REPEAT
              FieldCaption.SETRANGE("Template No.",Field."Template No.");
              FieldCaption.SETRANGE(Type,Field.Type);
              FieldCaption.SETRANGE(Code,Field.Code);
              CaptionFound := FALSE;
              i := 0;
              IF FieldCaption.FIND('-') THEN
                REPEAT
                  IF CaptureEngine.FindCaption(Document."No.",Page."Page No.",Field,FieldCaption,
                    CaptionStartWord,CaptionEndWord)
                  THEN BEGIN
                    REPEAT
                      i := i + 1;
                      IF PrevCaptionStartWord.Top = 0 THEN
                        CaptionFound := TRUE
                      ELSE
                        CaptionFound := WordFunc.IsWordsOnSameLine(PrevCaptionStartWord,CaptionStartWord[i]);
                    UNTIL CaptionFound OR (CaptionStartWord[i]."Document No." = '')
                  END;
                UNTIL CaptionFound OR (FieldCaption.NEXT = 0);

                FieldCount := FieldCount + 1;
                Fields[FieldCount] := Field;
                FieldWidth[FieldCount] :=
                  ROUND(Field."Typical Field Width" * CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
                IF CaptionFound THEN BEGIN
                  IF Page."Page No." = 1 THEN
                    CaptureMgnt.CaptureFromPos(Page,Field,0,FALSE,CaptionStartWord[i].Top,CaptionStartWord[i].Left,
                      CaptionEndWord[i].Bottom,CaptionEndWord[i].Right,Value);

                  FieldLeft[FieldCount] := CaptionStartWord[i].Left +
                    ROUND(Field."Caption Offset X" * CaptureEngine.GetDPIFactor(Field."Offset DPI",Page."TIFF Image Resolution"),1);

                  IF NOT Template."First Table Line Has Captions" THEN
                    Bottom := CaptionStartWord[i].Top
                  ELSE
                    IF CaptionStartWord[i].Bottom > Bottom THEN
                      Bottom := CaptionStartWord[i].Bottom;

                  IF FieldWidth[FieldCount] < CaptionEndWord[i].Right - CaptionStartWord[i].Left THEN
                    FieldWidth[FieldCount] := CaptionEndWord[i].Right - CaptionStartWord[i].Left;

                  PrevCaptionStartWord := CaptionStartWord[i];
                END ELSE BEGIN
                  // Use the position from the last recognized caption
                  PrevCaption.SETCURRENTKEY("Template No.","Is Value",Type,Code);
                  PrevCaption.SETRANGE("Template No.",Field."Template No.");
                  PrevCaption.SETRANGE("Is Value",FALSE);
                  PrevCaption.SETRANGE(Type,Field.Type);
                  PrevCaption.SETRANGE(Code,Field.Code);
                  PrevCaption.SETFILTER(Top,'>%1',0);
                  PrevCaption.SETFILTER(Left,'>%1',0);
                  IF PrevCaption.FINDLAST THEN BEGIN
                    PrevPage.GET(PrevCaption."Document No.",PrevCaption."Page No.");
                    PrevDPIFactor := CaptureEngine.GetDPIFactor(Field."Offset DPI",PrevPage."TIFF Image Resolution");
                    FieldLeft[FieldCount] := ROUND((PrevCaption.Left * PrevDPIFactor) + (Field."Caption Offset X" * PrevDPIFactor),1);
                    IF FieldWidth[FieldCount] < ROUND((PrevCaption.Right * PrevDPIFactor) - (PrevCaption.Left * PrevDPIFactor),1) THEN
                      FieldWidth[FieldCount] := ROUND((PrevCaption.Right * PrevDPIFactor) - (PrevCaption.Left * PrevDPIFactor),1);
                  END;
                END;
            UNTIL Field.NEXT = 0;

          FOR i := 1 TO FieldCount DO BEGIN
            IF (MinLeft = 0) OR (MinLeft > FieldLeft[i]) THEN
              MinLeft := FieldLeft[i];

            IF (MaxRight = 0) OR (MaxRight < FieldLeft[i] + FieldWidth[i]) THEN
              MaxRight := FieldLeft[i] + FieldWidth[i];
          END;

          NewBottom := 0;
          LineNo := 1000 * Page."Page No.";
          LineHeight := 12;

          Top := Bottom;
          CaptureEngine.GetNextBottom(Page,Bottom,LineHeight,MinLeft,MaxRight);

          Field.RESET;
          Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
          Field.SETRANGE("Template No.",Document."Template No.");
          Field.SETRANGE(Type,Field.Type::Header);
          Field.SETFILTER("Stop Lines Recognition",'>%1',Field."Stop Lines Recognition"::" ");
          IF Field.FINDSET THEN
            REPEAT
              Value.RESET;
              Value.SETRANGE("Document No.",Document."No.");
              Value.SETRANGE(Type,Field.Type);
              Value.SETRANGE(Code,Field.Code);
              Value.SETRANGE("Page No.",Page."Page No.");
              CASE Field."Stop Lines Recognition" OF
                Field."Stop Lines Recognition"::"If Caption is on same line",
                Field."Stop Lines Recognition"::"If Caption is on same line (continue on next page)":
                  Value.SETRANGE("Is Value",FALSE);
                Field."Stop Lines Recognition"::"If Value is on same line",
                Field."Stop Lines Recognition"::"If Value is on same line (continue on next page)":
                  Value.SETRANGE("Is Value",TRUE);
                Field."Stop Lines Recognition"::"If Caption or Value is on same line",
                Field."Stop Lines Recognition"::"If Caption or Value is on same line (continue on next page)":
                  Value.SETRANGE("Is Value");
              END;

              Value.SETFILTER(Top,'>%1',0);
              IF Value.FINDFIRST THEN BEGIN
                IF ((StopPos[Value."Page No."] = 0) OR (StopPos[Value."Page No."] > Value.Top)) AND (Value.Top > Bottom) THEN
                  StopPos[Value."Page No."] := Value.Top;
              END;
            UNTIL Field.NEXT = 0;

          IF Page."Page No." = 1 THEN BEGIN
            Top := Bottom - LineHeight;
            Bottom := Top;
          END ELSE BEGIN
            Top := 0;
            Bottom := LineHeight;
          END;

          PageStop := FALSE;
          REPEAT
            LineNo := LineNo + 1;
            FOR i := 1 TO FieldCount DO BEGIN
              Right := FieldLeft[i] + FieldWidth[i];
              NewBottom := CaptureTableCell(Template,Document,Page,Fields[i],LineNo,Top,FieldLeft[i],Bottom,Right);
              IF NewBottom > Bottom THEN
                Bottom := NewBottom;
            END;

            IF NOT IsLineFieldsValid(Document,LineNo) THEN BEGIN
              Value.RESET;
              Value.SETRANGE("Document No.",Document."No.");
              Value.SETRANGE("Line No.",LineNo);
              Value.DELETEALL(TRUE);
            END;

            Top := Bottom;
            CaptureEngine.GetNextBottom(Page,Bottom,LineHeight,MinLeft,MaxRight);

            IF (StopPos[Page."Page No."] <> 0) AND (Bottom >= StopPos[Page."Page No."]) THEN BEGIN
              PageStop := TRUE;

              IF Field."Stop Lines Recognition" IN [
                Field."Stop Lines Recognition"::"If Caption is on same line",
                Field."Stop Lines Recognition"::"If Value is on same line",
                Field."Stop Lines Recognition"::"If Caption or Value is on same line"]
              THEN
                DocStop := TRUE;
            END;

            IF Bottom > Page."Bottom Word Pos." THEN
              PageStop := TRUE;
          UNTIL PageStop;

          CLEAR(PrevValue);
          Value.RESET;
          Value.SETCURRENTKEY("Document No.","Is Value",Type,"Page No.","Line No.",Code);
          Value.SETRANGE("Document No.",Document."No.");
          Value.SETRANGE("Is Value",TRUE);
          Value.SETRANGE(Type,Value.Type::Line);
          Value.SETRANGE("Page No.",Page."Page No.");
          IF Value.FINDSET(TRUE,FALSE) THEN
            REPEAT
              IF Value."Line No." <> PrevValue."Line No." THEN
                i2 := i2 + 1;

              IF (Value."Line No." <> i2) THEN BEGIN
                Value2 := Value;
                Value2."Line No." := i2;
                Value2.INSERT;
                Value.DELETE;
              END;
              PrevValue := Value;
            UNTIL Value.NEXT = 0;
        UNTIL (Page.NEXT = 0) OR DocStop;

      Field.RESET;
      Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
      Document.BuildTempLinesTable(TempDocLine);
      IF TempDocLine.FINDSET THEN BEGIN
        Field.SETRANGE("Template No.",Document."Template No.");
        Field.SETRANGE(Type,Field.Type::Line);

        REPEAT
          IF Field.FINDSET THEN
            REPEAT
              Text := CaptureMgnt.GetValueAsText(Document."No.",TempDocLine."Line No.",Field);
              IF Text = '' THEN
                CaptureEngine.UseFixedValue(Document,Field,TempDocLine."Line No.");
            UNTIL Field.NEXT = 0;
        UNTIL TempDocLine.NEXT = 0;
      END;
    END;

    PROCEDURE CaptureTableCell@1000000005(VAR Template@161024014 : Record 6085579;VAR Document@1000000009 : Record 6085590;VAR Page@1000000000 : Record 6085591;VAR Field@1000000010 : Record 6085580;LineNo@1000000003 : Integer;Top@1000000007 : Integer;Left@1000000006 : Integer;Bottom@1000000005 : Integer;Right@1000000004 : Integer) : Integer;
    VAR
      Value@1000000008 : Record 6085593;
    BEGIN
      IF (Right - Left <= 0) OR (Bottom-Top <= 0) THEN
        EXIT;

      CaptureMgnt.CaptureFromPos(Page,Field,LineNo,TRUE,Top,Left,Bottom,Right,Value);
      Value.FIND('=');

      IF (Value.IsBlank) OR TableCellAlreadyCaptured(Template,Page,Value) THEN
        Value.DELETE
      ELSE
        EXIT(Value.Bottom);
    END;

    PROCEDURE TableCellAlreadyCaptured@1000000007(VAR Template@161024012 : Record 6085579;VAR Page@1000000002 : Record 6085591;VAR Value@1000000000 : Record 6085593) : Boolean;
    VAR
      Value2@1000000001 : Record 6085593;
    BEGIN
      Value2.SETCURRENTKEY("Document No.","Is Value",Type,"Page No.");
      IF NOT Template."First Table Line Has Captions" THEN
        Value2.SETRANGE("Is Value",TRUE);
      Value2.SETRANGE("Document No.",Page."Document No.");
      Value2.SETRANGE(Type,Value2.Type::Line);
      Value2.SETRANGE("Page No.",Value."Page No.");

      Value.Top := Value.Top + ROUND((Value.Bottom - Value.Top) / 2,1);
      Value.Left := Value.Left + 3;

      IF Value2.FIND('-') THEN
        REPEAT
          IF (NOT ((Value2.Code = Value.Code) AND (Value2."Line No." = Value."Line No."))) THEN
            IF CaptureEngine.IntersectsWith(Value,Value2) THEN
              EXIT(TRUE);
        UNTIL Value2.NEXT = 0;
    END;

    PROCEDURE IsLineFieldsValid@1000000000(Document@1000000001 : Record 6085590;LineNo@1000000002 : Integer) : Boolean;
    VAR
      Field@1000000000 : Record 6085580;
      Value@161024012 : Record 6085593;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Line);
      IF Field.FIND('-') THEN
        REPEAT
          IF NOT CaptureMgnt.IsValidValue(Field,Document."No.",LineNo) THEN BEGIN
            IF (Field."Data Type" = Field."Data Type"::Number) AND (NOT Field.Required) THEN BEGIN
              IF Value.GET(Document."No.",TRUE,Field.Code,LineNo) THEN
                IF CaptureMgnt.ParseNumber(Field,Value."Value (Text)",Value."Value (Decimal)") THEN
                  EXIT(FALSE);
            END ELSE
              EXIT(FALSE);
          END;
        UNTIL Field.NEXT = 0;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

