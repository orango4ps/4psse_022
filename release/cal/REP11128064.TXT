OBJECT Report 11128064 VP Feedback BG File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE8.03 (12048861);
  }
  PROPERTIES
  {
    CaptionML=[ENU=Report back from Bank Giro;
               NOR=Rapporter tilbake fra bankgiro;
               SVE=LB èterrapportering frÜn bankgiro];
    ShowPrintStatus=No;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  gTxtFile.TEXTMODE := TRUE;
                  gServerFileName := gFileMgt.UploadFile(PEB006,'');

                  IF gServerFileName = '' THEN
                    CurrReport.QUIT;

                  gTxtFile.OPEN(gServerFileName);
                END;

    OnPostReport=BEGIN
                   gWindow.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                   WHILE gTxtFile.LEN <> gTxtFile.POS DO BEGIN
                     gWindow.UPDATE(1,ROUND((gTxtFile.POS/gTxtFile.LEN*10000),1.0));
                     gTxtFile.READ(gTxtLine);
                     gLineType := COPYSTR(gTxtLine,1,2);
                     CASE gLineType OF
                       '11':
                         BEGIN // Opening Line
                           gPostingDate := Txt2Date(gTxtLine,41,6);
                         END;
                       '14','16','54':
                         BEGIN // Transaction
                           gXGenJournalLine := gGenJournalLine;
                           gGenJournalLine.INIT;
                           gGenJournalLine."Line No." += 10000;
                           gGenJournalLine.SetUpNewLine(gXGenJournalLine,0,FALSE);
                           gGenJournalLine.VALIDATE("Posting Date",gPostingDate);
                           gDocumentNo := COPYSTR(gTxtLine,61,20);
                           IF gLineType <> '16' THEN BEGIN
                             IF InvoiceExists(gDocumentNo,gDocType,gGenJnlAccountType,gNo,gAppliesToDocType,gAppliesToDocNo,gExternalDocNo) THEN BEGIN
                               gGenJournalLine.VALIDATE("Document Type",gDocType);
                               gGenJournalLine.VALIDATE("Account Type",gGenJnlAccountType);
                               gGenJournalLine.VALIDATE("Account No.",gNo);
                               gGenJournalLine.VALIDATE("Applies-to Doc. Type",gAppliesToDocType);
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.",gAppliesToDocNo);
                             END ELSE
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.", '');
                             gGenJournalLine.VALIDATE(Amount,Txt2Dec(gTxtLine,38,12));
                           END ELSE BEGIN
                             IF CreditMemoExists(gDocumentNo,gDocType,gGenJnlAccountType,gNo,gAppliesToDocType,gAppliesToDocNo,gExternalDocNo) THEN BEGIN
                               gGenJournalLine.VALIDATE("Document Type",gDocType);
                               gGenJournalLine.VALIDATE("Account Type",gGenJnlAccountType);
                               gGenJournalLine.VALIDATE("Account No.",gNo);
                               gGenJournalLine.VALIDATE("Applies-to Doc. Type",gAppliesToDocType);
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.",gAppliesToDocNo);
                             END ELSE
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.", '');
                             gGenJournalLine.VALIDATE(Amount,-Txt2Dec(gTxtLine,38,12));
                           END;
                           IF gGenJournalLine."Applies-to Doc. No." = '' THEN
                             gGenJournalLine.VALIDATE(Description, COPYSTR(PEB004 + ' ' + gDocumentNo,1,50));
                           gGenJournalLine."External Document No." :=  gExternalDocNo;
                           gGenJournalLine.INSERT;
                         END;
                       '29':
                         BEGIN // End line
                           gXGenJournalLine := gGenJournalLine;
                           gGenJournalLine.INIT;
                           gGenJournalLine."Line No." += 10000;
                           gGenJournalLine.SetUpNewLine(gXGenJournalLine,0,FALSE);
                           gGenJournalLine.VALIDATE("Posting Date",gPostingDate);
                           gGenJournalLine.VALIDATE("Account Type",gAccountType);
                           gGenJournalLine.VALIDATE("Account No.",gBankAccountNo);
                           gGenJournalLine.VALIDATE(Amount,-Txt2Dec(gTxtLine,21,12));
                           gGenJournalLine.INSERT;
                         END;
                     END;
                   END;

                   gTxtFile.CLOSE;
                   ERASE(gServerFileName);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1070002;2;Field     ;
                  CaptionML=[ENU=Account Type;
                             NOR=Kontotype;
                             SVE=Kontotyp];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   NOR=Hovedbokskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  SourceExpr=gAccountType;
                  OnValidate=BEGIN
                               CLEAR(gBankAccountNo);
                             END;
                              }

      { 1070004;2;Field     ;
                  CaptionML=[ENU=Account No;
                             NOR=Nr;
                             SVE=Kontonr];
                  SourceExpr=gBankAccountNo;
                  OnValidate=BEGIN
                               IF gBankAccountNo = '' THEN
                                 EXIT;
                               CASE gAccountType OF
                                 gAccountType::"G/L Account":
                                   BEGIN
                                     gGLAccount.GET(gBankAccountNo);
                                   END;
                                 gAccountType::"Bank Account":
                                   BEGIN
                                     gBankAccount.GET(gBankAccountNo);
                                   END;
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE gAccountType OF
                               gAccountType::"G/L Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gGLAccount) = ACTION::LookupOK THEN
                                     gBankAccountNo := gGLAccount."No.";
                                 END;
                               gAccountType::"Bank Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gBankAccount) = ACTION::LookupOK THEN
                                     gBankAccountNo := gBankAccount."No.";
                                 END;
                             END;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      gTxtFile@1070012 : File;
      gTxtLine@1070011 : Text[1000];
      gGenJournalLine@1070010 : Record 81;
      gXGenJournalLine@1070009 : Record 81;
      gPostingDate@1070007 : Date;
      gDocumentNo@1070006 : Code[20];
      gDocType@12047965 : Integer;
      gGenJnlAccountType@12047964 : Integer;
      gNo@12047960 : Code[20];
      gAppliesToDocType@12047962 : Integer;
      gAppliesToDocNo@12047961 : Code[20];
      gExternalDocNo@12047963 : Code[35];
      gLineType@1070005 : Code[10];
      gWindow@1070004 : Dialog;
      gAccountType@1070003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      gBankAccountNo@1070002 : Code[20];
      gGLAccount@1070001 : Record 15;
      gBankAccount@1070000 : Record 270;
      PEB001@1070018 : TextConst 'ENU=File Name must not be blank;NOR=Filnavnet kan ikke vëre tomt;SVE=Filnamnet fÜr inte vara tomt';
      PEB004@1070015 : TextConst 'ENU="Wrong reference. Doc. No.: ";NOR=Feilaktig referanse. Dokumentnr:;SVE="Felaktig referens. Dokumentnr: "';
      PEB005@1070014 : TextConst 'ENU=The Decimal Value "%1" is wrong.;NOR=Desimalverdien "%1" er feilaktig.;SVE=DecimalvÑrdet "%1" Ñr felaktigt.';
      PEB006@1070020 : TextConst 'ENU=Import from file;NOR=Importer fra fil;SVE=Import frÜn fil';
      PEB007@1070019 : TextConst 'ENU=Text Files|*.txt|All Files|*.*;NOR=Tekstfiler|*.txt|Alle filer|*.*;SVE=Textfiler|*.txt|Alla filer|*.*';
      gFileMgt@12047959 : Codeunit 419;
      gServerFileName@12047958 : Text;
      gFileNameVisible@12047966 : Boolean INDATASET;

    PROCEDURE SetGenJournal@1070001(InGenJournalLine@1070000 : Record 81);
    BEGIN
      gGenJournalLine := InGenJournalLine;
    END;

    PROCEDURE InvoiceExists@1070002(pDocumentNo@1070001 : Code[20];VAR pvDocType@12047965 : Integer;VAR pvGenJnlAccountType@12047964 : Integer;VAR pvNo@12047960 : Code[20];VAR pvAppliesToDocType@12047959 : Integer;VAR pvAppliesToDocNo@12047958 : Code[20];VAR pvExternalDocNo@12047963 : Code[35]) : Boolean;
    VAR
      VendLedgEntry@12047961 : Record 25;
      CustLedgEntry@12047962 : Record 21;
    BEGIN
      pvDocType := 0;
      pvGenJnlAccountType := 0;
      pvNo := '';
      pvAppliesToDocType := 0;
      pvAppliesToDocNo := '';
      pvExternalDocNo := '';

      CASE TRUE OF
        (COPYSTR(pDocumentNo,1,5) = 'VERNR') OR
        (COPYSTR(pDocumentNo,1,1) = 'L')  :
          BEGIN
            IF COPYSTR(pDocumentNo,1,5) = 'VERNR' THEN
              pDocumentNo := COPYSTR(pDocumentNo,8)
            ELSE
              pDocumentNo := COPYSTR(pDocumentNo,2);
            VendLedgEntry.RESET;
            VendLedgEntry.SETCURRENTKEY("Document No.");
            VendLedgEntry.SETRANGE(Open,TRUE);
            VendLedgEntry.SETRANGE(Positive,FALSE);
            VendLedgEntry.SETRANGE("Document No.",pDocumentNo);
            IF VendLedgEntry.FINDFIRST THEN BEGIN
              pvDocType := 1;  // Payment
              pvGenJnlAccountType := 2;  // Vendor
              pvNo := VendLedgEntry."Vendor No.";
              pvAppliesToDocType := VendLedgEntry."Document Type";
              pvAppliesToDocNo := VendLedgEntry."Document No.";
              pvExternalDocNo := VendLedgEntry."External Document No.";
              EXIT(TRUE);
            END;
          END;
        (COPYSTR(pDocumentNo,1,1) = 'K')  :
          BEGIN
            pDocumentNo := COPYSTR(pDocumentNo,2);
            CustLedgEntry.RESET;
            CustLedgEntry.SETCURRENTKEY("Document No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
            CustLedgEntry.SETRANGE(Positive,FALSE);
            CustLedgEntry.SETRANGE("Document No.",pDocumentNo);
            IF CustLedgEntry.FINDFIRST THEN BEGIN
              pvDocType := 6;  // Refund
              pvGenJnlAccountType := 1;  // Customer
              pvNo := CustLedgEntry."Customer No.";
              pvAppliesToDocType := CustLedgEntry."Document Type";
              pvAppliesToDocNo := CustLedgEntry."Document No.";
              pvExternalDocNo := CustLedgEntry."External Document No.";
              EXIT(TRUE);
            END;
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CreditMemoExists@1070003(pDocumentNo@12047962 : Code[20];VAR pvDocType@12047966 : Integer;VAR pvGenJnlAccountType@12047963 : Integer;VAR pvNo@12047961 : Code[20];VAR pvAppliesToDocType@12047960 : Integer;VAR pvAppliesToDocNo@12047959 : Code[20];VAR pvExternalDocNo@12047958 : Code[35]) : Boolean;
    VAR
      VendLedgEntry@12047965 : Record 25;
      CustLedgEntry@12047964 : Record 21;
    BEGIN
      pvDocType := 0;
      pvGenJnlAccountType := 0;
      pvNo := '';
      pvAppliesToDocType := 0;
      pvAppliesToDocNo := '';
      pvExternalDocNo := '';

      CASE TRUE OF
        (COPYSTR(pDocumentNo,1,5) = 'VERNR') OR
        (COPYSTR(pDocumentNo,1,1) = 'L')  :
          BEGIN
            IF COPYSTR(pDocumentNo,1,5) = 'VERNR' THEN
              pDocumentNo := COPYSTR(pDocumentNo,8)
            ELSE
              pDocumentNo := COPYSTR(pDocumentNo,2);
            VendLedgEntry.RESET;
            VendLedgEntry.SETCURRENTKEY("Document No.");
            VendLedgEntry.SETRANGE(Open,TRUE);
            VendLedgEntry.SETRANGE(Positive,TRUE);
            VendLedgEntry.SETRANGE("Document No.",pDocumentNo);
            IF VendLedgEntry.FINDFIRST THEN BEGIN
              pvDocType := 6;  // Refund
              pvGenJnlAccountType := 2;
              pvNo := VendLedgEntry."Vendor No.";
              pvAppliesToDocType := VendLedgEntry."Document Type";
              pvAppliesToDocNo := VendLedgEntry."Document No.";
              pvExternalDocNo := VendLedgEntry."External Document No.";
              EXIT(TRUE);
            END;
          END;
        (COPYSTR(pDocumentNo,1,1) = 'K')  :
          BEGIN
            pDocumentNo := COPYSTR(pDocumentNo,2);
            CustLedgEntry.RESET;
            CustLedgEntry.SETCURRENTKEY("Document No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
            CustLedgEntry.SETRANGE(Positive,TRUE);
            CustLedgEntry.SETRANGE("Document No.",pDocumentNo);
            IF CustLedgEntry.FINDFIRST THEN BEGIN
              pvDocType := 1;  // Payment
              pvGenJnlAccountType := 1;
              pvNo := CustLedgEntry."Customer No.";
              pvAppliesToDocType := CustLedgEntry."Document Type";
              pvAppliesToDocNo := CustLedgEntry."Document No.";
              pvExternalDocNo := CustLedgEntry."External Document No.";
              EXIT(TRUE);
            END;
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE Txt2Date@1070004(InText@1070000 : Text[250];StartPos@1070005 : Integer;Length@1070004 : Integer) : Date;
    BEGIN
      InText := COPYSTR(InText,StartPos,Length);
      EXIT(DMY2DATE(Txt2Int(InText,5,2),Txt2Int(InText,3,2),2000 + Txt2Int(InText,1,2)));
    END;

    PROCEDURE Txt2Int@1070005(InText@1070000 : Text[250];StartPos@1070001 : Integer;Length@1070002 : Integer) rOutInt : Integer;
    BEGIN
      IF NOT EVALUATE(rOutInt,COPYSTR(InText,StartPos,Length)) THEN
        ERROR(PEB005,COPYSTR(InText,StartPos,Length));
    END;

    PROCEDURE Txt2Dec@1070006(InText@1070002 : Text[250];StartPos@1070001 : Integer;Length@1070000 : Integer) rOutDec : Decimal;
    BEGIN
      IF NOT EVALUATE(rOutDec,COPYSTR(InText,StartPos,Length)) THEN
        ERROR(PEB005,COPYSTR(InText,StartPos,Length));
      rOutDec := rOutDec/100;
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0091 Banking
      PEB
      PEB *** End ***
    }
    END.
  }
  RDLDATA
  {
  }
}

