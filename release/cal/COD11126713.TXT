OBJECT Codeunit 11126713 DSP Interface WS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DSPSetup@1100529900 : Record 11126726;
      GenericWebserviceSetup@1100529902 : Record 11126728;
      MessageVersionNotSupportedTxt@1100528305 : TextConst 'ENU=Message Version %1 is not supported.';
      OK@1100528500 : TextConst 'ENU=OK;SVE=OK';
      OnlyDebugTxt@1100528317 : TextConst 'ENU=Method %1 can only be used for Debug purposes, never in an operational situation!!';
      MustBeFilledErr@1100528318 : TextConst 'ENU=%1 must be filled.';
      VersionNotSupportedTxt@1100528306 : TextConst 'ENU=Version No. %1 is not supported.';
      Text000@1100529907 : TextConst 'ENU=%1 %2 unknown.';
      Text001@1100528303 : TextConst 'ENU=XmlMessage is empty.';
      Text002@1100528304 : TextConst 'ENU=XmlMessage cannot be deserialized to a %1 object.';
      Text003@1100528803 : TextConst 'ENU=User Setup does not exists.';
      Text004@1100528802 : TextConst 'ENU="ServSetup.""Send Mail Using""::""NAS (SMTP)"" "';
      Text005@1100528807 : TextConst 'ENU=Service Order %1 is gewijzigd. Herziene opdracht %2 is verwerkt.';
      GenericWebserviceFunctions@1100525002 : Codeunit 11126711;
      DotnetFunctions@1100528307 : Codeunit 11126712;
      DSPManagement@1100528302 : Codeunit 11126714;
      FileManagement@1100528315 : Codeunit 419;
      RegExpManagement@1100528301 : Codeunit 11012262;
      XMLDOMManagement@1100528320 : Codeunit 6224;
      CommonResponseMessageTxt@1100528309 : Text;
      DspCompanyName@1100528316 : Text;
      RootElement@1100528312 : Text;
      RootElementNamespace@1100528311 : Text;
      OStream@1100528313 : OutStream;
      BgText@1100528314 : BigText;
      DnDtCommonResponse@1100528310 : DotNet "'Fps.Webservices.Dsp.Opdracht_OS_XOP, PublicKeyToken=024bd013665211e9'.Fps.Webservices.Dsp.Opdracht_OS_XOP.DT_CommonResponse";
      DnFoundNode@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlDocument@1100528308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Text006@1100528501 : TextConst 'ENU=%1 %2 %3 already present.';

    [External]
    PROCEDURE Test@1100528320() : Text;
    BEGIN
      EXIT(OK);
    END;

    [External]
    PROCEDURE OpdrachtBericht@1100528305(Request@1100525001 : Text) : Text;
    BEGIN
      //A.Hak customization
      //Will become obsolete in BC15
      RemoveCdata(Request);
      EXIT(AssignmentWS(Request));
    END;

    [External]
    PROCEDURE AssignmentWS@1100528311(XmlMessage@1100525001 : Text) : Text;
    BEGIN
      SetGlobalVars;
      SetDnXmlDocument(XmlMessage);
      CheckDspVersion;
      EXIT(ProcessAssignmentWS);
    END;

    [External]
    PROCEDURE OpdrachtGereedBericht@1100528301(Request@1100525001 : Text) : Text;
    BEGIN
      //A.Hak customization
      //Will become obsolete in BC15
      RemoveCdata(Request);
      EXIT(AssignmentReadyWS(Request));
    END;

    [External]
    PROCEDURE AssignmentReadyWS@1100528313(XmlMessage@1100525001 : Text) : Text;
    BEGIN
      SetGlobalVars;
      SetDnXmlDocument(XmlMessage);
      CheckDspVersion;
      EXIT(ProcessAssignmentReadyWS);
    END;

    [External]
    PROCEDURE AnnuleringBericht@1100528304(Request@1100525001 : Text) : Text;
    BEGIN
      //A.Hak customization
      //Will become obsolete in BC15
      RemoveCdata(Request);
      EXIT(CancellationWS(Request));
    END;

    [External]
    PROCEDURE CancellationWS@1100528314(XmlMessage@1100525001 : Text) : Text;
    BEGIN
      SetGlobalVars;
      SetDnXmlDocument(XmlMessage);
      CheckDspVersion;
      EXIT(ProcessCancellationWS);
    END;

    [External]
    PROCEDURE BeoordelingAGProductiestaatBericht@1100529902(Request@1100529900 : Text) : Text;
    BEGIN
      //A.Hak customization
      //Will become obsolete in BC15
      RemoveCdata(Request);
      EXIT(JudgementProductionRecordingWS(Request));
    END;

    [External]
    PROCEDURE JudgementProductionRecordingWS@1100528315(XmlMessage@1100529900 : Text) : Text;
    BEGIN
      SetGlobalVars;
      SetDnXmlDocument(XmlMessage);
      CheckDspVersion;
      EXIT(ProcessJudgementProductionRecordingWS);
    END;

    [External]
    PROCEDURE StatusUpdateBericht@1100528317(Request@1100525001 : Text) : Text;
    BEGIN
      //A.Hak customization
      //Will become obsolete in BC15
      RemoveCdata(Request);
      EXIT(StatusUpdateWS(Request));
    END;

    [External]
    PROCEDURE StatusUpdateWS@1100528318(XmlMessage@1100525001 : Text) : Text;
    BEGIN
      SetGlobalVars;
      SetDnXmlDocument(XmlMessage);
      EXIT(ProcessStatusUpdateWS);
    END;

    [External]
    PROCEDURE LipAanvraagBericht@1100528321(Request@1100525001 : Text) : Text;
    BEGIN
      //A.Hak customization
      //used to simulate direct MA.nl communication with Soap UI
      //Will become obsolete in BC15
      DSPSetup.GET;
      DSPSetup.TESTFIELD("Debug Lip", TRUE);

      RemoveCdata(Request);
      SetGlobalVars;
      SetDnXmlDocument(Request);
      CheckLipVersion;
      EXIT(ProcessLipRequestWS);
    END;

    [External]
    PROCEDURE RequestWS@1100528322(XmlMessage@1100525001 : Text) : Text;
    BEGIN
      SetGlobalVars;
      SetDnXmlDocument(XmlMessage);
      CheckLipVersion;
      EXIT(ProcessRequestWS);
    END;

    [External]
    PROCEDURE RequestWS1@1100528308(XmlMessage@1100525001 : Text) : Text;
    BEGIN
      EXIT(RequestWS(XmlMessage)); //To test 'OphalenAanvraagResponse' and 'AanvraagRequest'
    END;

    LOCAL PROCEDURE "---Locals---"@1100529900();
    BEGIN
    END;

    LOCAL PROCEDURE CheckDspVersion@1100525004() : Text;
    VAR
      VersionNumber@1100528300 : Text;
    BEGIN
      //Version check implemented, because version is in the namespace
      VersionNumber := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Versienummer"]');
      CASE VersionNumber OF
        DSPManagement.GetDspVersionFirst(TRUE),
        DSPManagement.GetDspVersionSecond(TRUE): EXIT;
      END;
      ERROR(VersionNotSupportedTxt, VersionNumber);
    END;

    LOCAL PROCEDURE CheckLipVersion@1100528312();
    VAR
      MessageVersion@1100528300 : Text;
    BEGIN
      //Version check implemented, because version is in the namespace
      MessageVersion := DSPManagement.FindNodeMessageVersion(DnXmlDocument);
      CASE MessageVersion OF
        DSPManagement.GetLipVersionFirst,
        DSPManagement.GetLipVersionSecond: EXIT;
      END;
      ERROR(MessageVersionNotSupportedTxt, MessageVersion);
    END;

    LOCAL PROCEDURE CreateNewTask@1100525003(MethodName@1100525001 : Text;DirectionIn@1100529901 : Option;CompanyIn@1100528300 : Text;VAR GenericWebServiceQueue@1100528801 : Record 11126715) : BigInteger;
    VAR
      EmptyRecId@1100529900 : RecordID;
    BEGIN
      IF (CompanyIn = '') THEN
        CompanyIn := DSPSetup."Default Company";
      GenericWebServiceQueue.CreateNewQueueEntry(MethodName, EmptyRecId, DirectionIn, CompanyIn);
      EXIT(GenericWebServiceQueue."Entry No.");
    END;

    LOCAL PROCEDURE ProcessAssignmentWS@1100528307() : Text;
    VAR
      GenericWebServiceQueue@1100528800 : Record 11126715;
      DSPAssignment@1100528500 : Record 11126740;
      AssignmentId@1100528501 : Text;
      ClusterId@1100528300 : Text;
      ContractNo@1100528301 : Text;
      NoOfAdjustments@1100528502 : Integer;
    BEGIN
      ClusterId := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ClusterID"]');
      IF (ClusterId = '') THEN
        ERROR(MustBeFilledErr, 'ClusterID');
      ContractNo := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Contractnummer"]');
      IF (ContractNo = '') THEN
        ERROR(MustBeFilledErr, 'Contractnummer');

      AssignmentId := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]');
      IF (XMLDOMManagement.FindNode(DnXmlDocument, '//*[local-name()="AantalBijstellingen"]', DnFoundNode)) THEN
        EVALUATE(NoOfAdjustments, XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="AantalBijstellingen"]'));
      DspCompanyName := DSPManagement.GetCompanyNameByAgreementNo(ContractNo);
      DSPAssignment.SETRANGE("Assignment Id", AssignmentId);
      DSPAssignment.SETRANGE("No. Of Adjustments", NoOfAdjustments);
      IF (NOT DSPAssignment.ISEMPTY) THEN
        ERROR(Text006, DSPAssignment.TABLECAPTION, AssignmentId, NoOfAdjustments);

      CreateNewTask(DSPManagement.GetTcAssignment, 1, DspCompanyName, GenericWebServiceQueue);

      GenericWebServiceQueue."Xml Message".CREATEOUTSTREAM(OStream, TEXTENCODING::UTF8);
      BgText.WRITE(OStream);
      GenericWebServiceQueue.MODIFY(TRUE);
      COMMIT;

      SetCommonResponse(GenericWebServiceQueue,
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));
      CommonResponseMessageTxt := DotnetFunctions.SerializeToText(DnDtCommonResponse, DSPManagement.GetTcCommonResponse,
        DSPManagement.GetTcCommonResponseNamespace, TRUE);
      EXIT(CommonResponseMessageTxt);
    END;

    LOCAL PROCEDURE ProcessAssignmentReadyWS@1100528302() : Text;
    VAR
      GenericWebServiceQueue@1100528800 : Record 11126715;
      DSPAssignment@1100528300 : Record 11126740;
    BEGIN
      IF (NOT DSPManagement.GetDspAssignmentByAssignmentId(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'),
        DSPAssignment))
      THEN
        ERROR(Text000, DSPAssignment.FIELDCAPTION("Assignment Id"), XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));

      DspCompanyName := DSPManagement.GetCompanyNameByAgreementNo(DSPAssignment."Agreement No.");

      CreateNewTask(DSPManagement.GetTcAssignmentReady, 1, DspCompanyName, GenericWebServiceQueue);

      GenericWebServiceQueue."Xml Message".CREATEOUTSTREAM(OStream, TEXTENCODING::UTF8);
      BgText.WRITE(OStream);
      GenericWebServiceQueue.MODIFY(TRUE);
      COMMIT;

      SetCommonResponse(GenericWebServiceQueue,
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));
      CommonResponseMessageTxt := DotnetFunctions.SerializeToText(DnDtCommonResponse, DSPManagement.GetTcCommonResponse,
        DSPManagement.GetTcCommonResponseNamespace, TRUE);
      EXIT(CommonResponseMessageTxt);
    END;

    LOCAL PROCEDURE ProcessCancellationWS@1100528303() : Text;
    VAR
      GenericWebServiceQueue@1100528800 : Record 11126715;
      DSPAssignment@1100528305 : Record 11126740;
    BEGIN
      IF (NOT DSPManagement.GetDspAssignmentByAssignmentId(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'),
        DSPAssignment))
      THEN
        ERROR(Text000, DSPAssignment.FIELDCAPTION("Assignment Id"), XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));

      DspCompanyName := DSPManagement.GetCompanyNameByAgreementNo(DSPAssignment."Agreement No.");

      CreateNewTask(DSPManagement.GetTcCancellation, 1, DspCompanyName, GenericWebServiceQueue);

      GenericWebServiceQueue."Xml Message".CREATEOUTSTREAM(OStream, TEXTENCODING::UTF8);
      BgText.WRITE(OStream);
      GenericWebServiceQueue.MODIFY(TRUE);
      COMMIT;

      SetCommonResponse(GenericWebServiceQueue,
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));
      CommonResponseMessageTxt := DotnetFunctions.SerializeToText(DnDtCommonResponse, DSPManagement.GetTcCommonResponse,
        DSPManagement.GetTcCommonResponseNamespace, TRUE);
      EXIT(CommonResponseMessageTxt);
    END;

    LOCAL PROCEDURE ProcessJudgementProductionRecordingWS@1100528306() : Text;
    VAR
      GenericWebServiceQueue@1100529903 : Record 11126715;
      DSPAssignment@1100528303 : Record 11126740;
    BEGIN
      IF (NOT DSPManagement.GetDspAssignmentByAssignmentId(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'),
        DSPAssignment))
      THEN
        ERROR(Text000, DSPAssignment.FIELDCAPTION("Assignment Id"), XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));

      DspCompanyName := DSPManagement.GetCompanyNameByAgreementNo(DSPAssignment."Agreement No.");

      CreateNewTask(DSPManagement.GetTcJudgementProductionRecording, 1, DspCompanyName, GenericWebServiceQueue);

      GenericWebServiceQueue."Xml Message".CREATEOUTSTREAM(OStream, TEXTENCODING::UTF8);
      BgText.WRITE(OStream);
      GenericWebServiceQueue.MODIFY(TRUE);
      COMMIT;

      SetCommonResponse(GenericWebServiceQueue,
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));
      CommonResponseMessageTxt := DotnetFunctions.SerializeToText(DnDtCommonResponse, DSPManagement.GetTcCommonResponse,
        DSPManagement.GetTcCommonResponseNamespace, TRUE);
      EXIT(CommonResponseMessageTxt);
    END;

    LOCAL PROCEDURE ProcessLipRequestWS@1100528309() : Text;
    VAR
      ConsumedWebServiceLine@1100528306 : Record 11229798;
      GenericWebServiceQueue@1100528300 : Record 11126715;
      DSPLIPRequest@1100528301 : Record 11126755;
      TempBlob@1100528308 : TEMPORARY Record 99008535;
      DSPLIPManagement@1100528307 : Codeunit 11126719;
      RequestId@1100528302 : Text;
      MessageVersion@1100528303 : Text;
      EntryNo@1100528304 : BigInteger;
      ServiceCode@1100528305 : Code[20];
    BEGIN
      IF (NOT DSPSetup."Debug Lip") THEN
        ERROR(OnlyDebugTxt, DSPManagement.GetTcLipGetRequestId);
      RequestId := DSPManagement.FindNodeAanvraagID(DnXmlDocument);
      DSPLIPRequest.SETRANGE("Request Id", RequestId);
      IF (NOT DSPLIPRequest.ISEMPTY) THEN
        ERROR(Text006, DSPLIPRequest.TABLECAPTION, RequestId, '');

      DspCompanyName := COMPANYNAME;
      MessageVersion := DSPManagement.FindNodeMessageVersion(DnXmlDocument);
      ServiceCode := DSPManagement.GetLipServiceName(MessageVersion);

      EntryNo := CreateNewTask(DSPManagement.GetTcLipGetRequestId, 1, DspCompanyName, GenericWebServiceQueue);
      GenericWebServiceQueue.GET(EntryNo);
      GenericWebServiceQueue.AddParameter(0, 0, ServiceCode, ConsumedWebServiceLine.FIELDCAPTION("Web Service Code"));
      GenericWebServiceQueue.AddParameter(0, 1, MessageVersion, STRSUBSTNO('%1: 1', DSPManagement.GetTcLipGetRequestId));
      GenericWebServiceQueue.AddParameter(0, 2, RequestId, STRSUBSTNO('%1: 1', DSPManagement.GetTcLipGetRequestId));

      GenericWebServiceQueue."Xml Message".CREATEOUTSTREAM(OStream, TEXTENCODING::UTF8);
      BgText.WRITE(OStream);
      GenericWebServiceQueue.Status := GenericWebServiceQueue.Status::Processed;
      GenericWebServiceQueue.MODIFY(TRUE);

      TempBlob.Blob := GenericWebServiceQueue."Xml Message";
      ConsumedWebServiceLine.GET(ServiceCode, DSPManagement.GetSeqNoOphalenAanvraag);
      DSPLIPManagement.ProcessRequestId2(TempBlob, ConsumedWebServiceLine, EntryNo, MessageVersion);

      SetCommonResponse(GenericWebServiceQueue,
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="MessageID"]'));
      CommonResponseMessageTxt := DotnetFunctions.SerializeToText(DnDtCommonResponse, DSPManagement.GetTcCommonResponse,
        DSPManagement.GetTcCommonResponseNamespace, TRUE);
      EXIT(CommonResponseMessageTxt);
    END;

    LOCAL PROCEDURE ProcessRequestWS@1100528316() : Text;
    VAR
      GenericWebServiceQueue@1100528303 : Record 11126715;
      DSPLIPRequest@1100528300 : Record 11126755;
      DSPLIPManagement@1100528302 : Codeunit 11126719;
      RequestId@1100528304 : Text;
      ServiceAreaContractCode@1100528301 : Text;
      MessageVersion@1100528305 : Text;
      EntryNo@1100528306 : BigInteger;
    BEGIN
      ServiceAreaContractCode := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="VerzorgingsgebiedContractCode"]');
      IF (ServiceAreaContractCode = '') THEN
        ERROR(MustBeFilledErr, 'VerzorgingsgebiedContractCode');

      RequestId := DSPManagement.FindNodeAanvraagID(DnXmlDocument);
      DSPLIPRequest.SETRANGE("Request Id", RequestId);
      IF (NOT DSPLIPRequest.ISEMPTY) THEN
        ERROR(Text006, DSPLIPRequest.TABLECAPTION, RequestId, '');

      DspCompanyName := DSPManagement.GetCompanyNameByAgreementNo(ServiceAreaContractCode);
      MessageVersion := DSPManagement.FindNodeMessageVersion(DnXmlDocument);

      CreateNewTask(DSPManagement.GetTcRequest, 1, DspCompanyName, GenericWebServiceQueue);

      GenericWebServiceQueue.AddParameter(0, 1, MessageVersion, STRSUBSTNO('%1: 1', DSPManagement.GetTcRequest));
      GenericWebServiceQueue.AddParameter(0, 2, RequestId, STRSUBSTNO('%1: 1', DSPManagement.GetTcRequest));
      GenericWebServiceQueue."Xml Message".CREATEOUTSTREAM(OStream, TEXTENCODING::UTF8);
      BgText.WRITE(OStream);
      GenericWebServiceQueue.MODIFY(TRUE);

      CommonResponseMessageTxt := DSPManagement.GetCommonResponse(GenericWebServiceQueue,XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="MessageID"]'));
      EXIT(CommonResponseMessageTxt);
    END;

    LOCAL PROCEDURE ProcessStatusUpdateWS@1100528319() : Text;
    VAR
      GenericWebServiceQueue@1100528301 : Record 11126715;
      DSPAssignment@1100528300 : Record 11126740;
    BEGIN
      IF (NOT DSPManagement.GetDspAssignmentByAssignmentId(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'),
        DSPAssignment))
      THEN
        ERROR(Text000, DSPAssignment.FIELDCAPTION("Assignment Id"), XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));
      DspCompanyName := DSPManagement.GetCompanyNameByAgreementNo(DSPAssignment."Agreement No.");
      CreateNewTask(DSPManagement.GetTcStatusUpdate, 1, DspCompanyName, GenericWebServiceQueue);
      GenericWebServiceQueue."Xml Message".CREATEOUTSTREAM(OStream, TEXTENCODING::UTF8);
      BgText.WRITE(OStream);
      GenericWebServiceQueue.MODIFY(TRUE);
      COMMIT;

      SetCommonResponse(GenericWebServiceQueue,
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'));
      CommonResponseMessageTxt := DotnetFunctions.SerializeToText(DnDtCommonResponse, DSPManagement.GetTcCommonResponse,
        DSPManagement.GetTcCommonResponseNamespace, TRUE);

      EXIT(CommonResponseMessageTxt);
    END;

    LOCAL PROCEDURE RemoveCdata@1100528310(VAR Request@1100528300 : Text);
    BEGIN
      Request := RegExpManagement.Replace(Request, '^.*<!\[CDATA\[', '');
      Request := RegExpManagement.Replace(Request, '\]\]>.*$', '');
    END;

    LOCAL PROCEDURE SetCommonResponse@1100528300(GenericWebServiceQueue@1100528300 : Record 11126715;DspAssignmentId@1100528301 : Text);
    BEGIN
      DnDtCommonResponse := DnDtCommonResponse.DT_CommonResponse();
      DnDtCommonResponse.OpdrachtID := DspAssignmentId;
      DnDtCommonResponse.MessageID := FORMAT(GenericWebServiceQueue."Entry No.");
      DnDtCommonResponse.ResponseCode := OK;
    END;

    LOCAL PROCEDURE SetGlobalVars@1100529901();
    BEGIN
      DSPSetup.GET;
      DSPSetup.TESTFIELD("Dsp Active", TRUE);
      DSPSetup.TESTFIELD("Connection Type", DSPSetup."Connection Type"::Basic);
      DSPSetup.TESTFIELD("Default Company");

      GenericWebserviceSetup.GET;
    END;

    LOCAL PROCEDURE SetDnXmlDocument@1100525001(XmlMessage@1100525000 : Text);
    BEGIN
      IF (XmlMessage = '') THEN
        ERROR(Text001);

      BgText.ADDTEXT(XmlMessage);
      DnXmlDocument := DnXmlDocument.XmlDocument();
      DnXmlDocument.LoadXml(XmlMessage);
    END;

    EVENT DnXmlDocument@1100528308::NodeInserting@94(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeInserted@95(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeRemoving@96(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeRemoved@97(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeChanging@98(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeChanged@99(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

