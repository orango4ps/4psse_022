OBJECT Codeunit 2200 Azure Key Vault Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NavAzureKeyVaultClient@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureKeyVaultClient, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureKeyVaultClient.AzureKeyVaultClientHelper";
      AzureKeyVaultSecretProvider@1001 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.Encryption.IAzureKeyVaultSecretProvider";
      ApplicationSecretsTxt@1002 : TextConst
        '@@@={Locked}',
        'ENU=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandEnvironmentName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,xero-allowed,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService,MSWalletSignUpUrl,MSWalletMerchantAPI,MSWalletMerchantAPIResource,MailerResourceId,machinelearning,background-ml-enabled,extmgmt-marketplace-disable,opaycardoriginatorfornav,opaycardprivatekey,opaycardmerchantid,opaycarddisplayid,SmtpSetup,BusinessCentralTrialVisibleForInv',
        'NOR=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandEnvironmentName,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,xero-allowed,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService,MSWalletSignUpUrl,MSWalletMerchantAPI,MSWalletMerchantAPIResource,MailerResourceId,machinelearning,background-ml-enabled,extmgmt-marketplace-disable,opaycardoriginatorfornav,opaycardprivatekey,opaycardmerchantid,opaycarddisplayid,SmtpSetup,BusinessCentralTrialVisibleForInv',
        'SVE=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService';
      ApplicationSecrets2Txt@1018 : TextConst '@@@={Locked};ENU=UKHMRC-MTDVAT-PROD-ClientID,UKHMRC-MTDVAT-PROD-ClientSecret,UKHMRC-MTDVAT-Sandbox-ClientID,UKHMRC-MTDVAT-Sandbox-ClientSecret;NOR=UKHMRC-MTDVAT-PROD-ClientID,UKHMRC-MTDVAT-PROD-ClientSecret,UKHMRC-MTDVAT-Sandbox-ClientID,UKHMRC-MTDVAT-Sandbox-ClientSecret';
      SecretNotFoundErr@1003 : TextConst '@@@="%1 = Secret Name.";ENU=%1 is not an application secret.;NOR=%1 er ikke en programhemmelighet.;SVE=%1 „r ingen programhemlighet. V„lj en av f”ljande hemligheter: %2';
      CachedSecretsDictionary@1010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      AllowedSecretNames@1004 : Text;
      SecretNameCannotContainCommaErr@1005 : TextConst 'ENU=The secret name cannot contain comma.;NOR=Det hemmelige navnet kan ikke inneholde komma.';

    [TryFunction]
    [Internal]
    PROCEDURE GetAzureKeyVaultSecret@1(VAR Secret@1001 : Text;SecretName@1000 : Text);
    BEGIN
      // Gets the secret as a Text from the key vault, given a SecretName.

      InitializeAllowedSecretNames;
      IF NOT IsSecretNameAllowed(SecretName) THEN
        IF NOT (STRPOS(SecretName,'isv-') = 1) THEN
          ERROR(SecretNotFoundErr,SecretName);

      IF KeyValuePairInBuffer(SecretName,Secret) THEN
        EXIT;

      NavAzureKeyVaultClient := NavAzureKeyVaultClient.AzureKeyVaultClientHelper;
      NavAzureKeyVaultClient.SetAzureKeyVaultProvider(AzureKeyVaultSecretProvider);
      Secret := NavAzureKeyVaultClient.GetAzureKeyVaultSecret(SecretName);

      StoreKeyValuePairInBuffer(SecretName,Secret);
    END;

    [Internal]
    PROCEDURE SetAzureKeyVaultSecretProvider@5(NewAzureKeyVaultSecretProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.Encryption.IAzureKeyVaultSecretProvider");
    BEGIN
      // Sets the secret provider to simulate the vault. Used for testing.

      ClearSecrets;
      AzureKeyVaultSecretProvider := NewAzureKeyVaultSecretProvider;
    END;

    [Internal]
    PROCEDURE IsEnabled@3() : Boolean;
    BEGIN
      // Checks that the key vault is enabled and can retrieve keys

      NavAzureKeyVaultClient := NavAzureKeyVaultClient.AzureKeyVaultClientHelper;
      EXIT(NavAzureKeyVaultClient.Enable);
    END;

    LOCAL PROCEDURE KeyValuePairInBuffer@6(Key@1001 : Text;VAR Value@1000 : Text) : Boolean;
    VAR
      ValueFound@1002 : Boolean;
      ValueToReturn@1003 : Text;
    BEGIN
      InitBuffer;

      ValueFound := CachedSecretsDictionary.TryGetValue(Key,ValueToReturn);
      Value := ValueToReturn;
      EXIT(ValueFound);
    END;

    LOCAL PROCEDURE StoreKeyValuePairInBuffer@7(Key@1001 : Text;Value@1000 : Text);
    BEGIN
      InitBuffer;

      CachedSecretsDictionary.Add(Key,Value);
    END;

    PROCEDURE ClearSecrets@4();
    BEGIN
      CLEAR(NavAzureKeyVaultClient);
      CLEAR(AzureKeyVaultSecretProvider);

      InitBuffer;

      CachedSecretsDictionary.Clear;
    END;

    LOCAL PROCEDURE InitBuffer@16();
    BEGIN
      IF ISNULL(CachedSecretsDictionary) THEN
        CachedSecretsDictionary := CachedSecretsDictionary.Dictionary;
    END;

    [Internal]
    PROCEDURE AddAllowedSecretName@2(SecretName@1000 : Text);
    BEGIN
      // Allows a secret name to be retrieved. Unless the secret being sought is added to the list,
      // it will not be fetched from the key vault

      InitializeAllowedSecretNames;
      IF STRPOS(SecretName,',') > 0 THEN
        ERROR(SecretNameCannotContainCommaErr);
      IF NOT IsSecretNameAllowed(SecretName) THEN
        AllowedSecretNames := STRSUBSTNO('%1%2,',AllowedSecretNames,UPPERCASE(SecretName));
    END;

    LOCAL PROCEDURE IsSecretNameAllowed@10(SecretName@1000 : Text) : Boolean;
    BEGIN
      EXIT(STRPOS(AllowedSecretNames,STRSUBSTNO(',%1,',UPPERCASE(SecretName))) <> 0);
    END;

    LOCAL PROCEDURE InitializeAllowedSecretNames@11();
    BEGIN
      // the first character should be a comma otherwise the check IsSecretNameAllowed
      // for the first secret shall return false
      IF STRLEN(AllowedSecretNames) = 0 THEN
        AllowedSecretNames := STRSUBSTNO(',%1,%2,',UPPERCASE(ApplicationSecretsTxt),UPPERCASE(ApplicationSecrets2Txt));
    END;

    BEGIN
    END.
  }
}

