OBJECT Page 77812 AL Translation Full Text
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=TTool;
  }
  PROPERTIES
  {
    CaptionML=ENU=AL Translation Full Text;
    SourceTable=Table77812;
    ActionList=ACTIONS
    {
      { 1100525026;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525025;1 ;Action    ;
                      Name=ExportTranslations;
                      CaptionML=ENU=Export Translations (option strings);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Language@1100528500 : Text;
                                 AlternativeLanguage@1100528501 : Text;
                                 ThirdLanguage@1100528502 : Text;
                                 CurrentLanguage@1100528503 : Text;
                                 CurrentAlternativeLanguage@1100528504 : Text;
                                 CurrentThirdLanguage@1100528506 : Text;
                                 ExportFile@1100528505 : File;
                                 TTColumnWidth@1100528507 : TEMPORARY Record 77795;
                                 TTColumnWidth2@1100528508 : TEMPORARY Record 77795;
                                 TTColumnWidth3@1100528509 : TEMPORARY Record 77795;
                                 TTColumnWidth4@1100528510 : TEMPORARY Record 77795;
                               BEGIN
                                 Language := STRSUBSTNO(
                                   '%1%2%3%4%5', Caption1, Caption2, Caption3,
                                   Caption4, Caption5);
                                 AlternativeLanguage := STRSUBSTNO(
                                   '%1%2%3%4%5', "Alt. Caption1", "Alt. Caption2",
                                   "Alt. Caption3", "Alt. Caption4", "Alt. Caption5");

                                 ThirdLanguage := STRSUBSTNO(
                                  '%1%2%3%4%5', "Third Caption1", "Third Caption2",
                                  "Third Caption3", "Third Caption4", "Third Caption5");

                                 FirstColumnWidth := TToolHelperFunctions.GetMaxLength(Language, ',');
                                 SecondColumnWidth := TToolHelperFunctions.GetMaxLength(AlternativeLanguage, ',');
                                 ThirdColumnWidth := TToolHelperFunctions.GetMaxLength(ThirdLanguage, ',');

                                 IF SecondColumnWidth > FirstColumnWidth THEN
                                   FirstColumnWidth := SecondColumnWidth;
                                 IF ThirdColumnWidth > FirstColumnWidth THEN
                                   FirstColumnWidth := ThirdColumnWidth;

                                 ExportFile.WRITEMODE(TRUE);

                                 LineEnding[1] := 13;
                                 LineEnding[2] := 10;

                                 TToolHelperFunctions.GetMaxLengthInTable(Language, ',', TTColumnWidth);
                                 TToolHelperFunctions.GetMaxLengthInTable(AlternativeLanguage, ',', TTColumnWidth2);
                                 TToolHelperFunctions.GetMaxLengthInTable(ThirdLanguage, ',', TTColumnWidth3);
                                 TToolHelperFunctions.GetMaxForEveryTable(TTColumnWidth, TTColumnWidth2, TTColumnWidth3, TTColumnWidth4);

                                 TranslationExport :=
                                   CreateLanguageLineUsingTable(Language, FirstColumnWidth, TTColumnWidth4) +
                                   LineEnding +
                                   CreateLanguageLineUsingTable(AlternativeLanguage, FirstColumnWidth, TTColumnWidth4) +
                                   LineEnding +
                                   CreateLanguageLineUsingTable(ThirdLanguage, FirstColumnWidth, TTColumnWidth4);
                               END;
                                }
      { 1100525024;1 ;Action    ;
                      Name=ImportTranslation;
                      CaptionML=ENU=Import Translation (option strings);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF TranslationToImport = '' THEN
                                   IF NOT CONFIRM(Text001, FALSE) THEN
                                     EXIT;

                                 // IF the string equals ' ,xxx', the function RemoveSpacesBeforeAndAfterCommas transforms this to ',xxx'. But the first
                                 // space should be preserved (so it will be ' ,xxx' by adding the space).
                                 IF (TranslationToImport[1] = ' ') AND (TranslationToImport[2] = ',') THEN
                                   SetCaption(' ' + TToolHelperFunctions.RemoveSpacesBeforeAndAfterCommas(TranslationToImport))
                                 ELSE
                                   SetCaption(TToolHelperFunctions.RemoveSpacesBeforeAndAfterCommas(TranslationToImport));
                                 MODIFY;
                               END;
                                }
      { 1100525023;1 ;Action    ;
                      Name=ExportTranslationsText;
                      CaptionML=ENU=Export Translations (text);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 LineEnding[1] := 13;
                                 LineEnding[2] := 10;

                                 TranslationExport := GetCaption + LineEnding + GetAltCaption + LineEnding + GetThirdCaption;
                               END;
                                }
      { 1100525022;1 ;Action    ;
                      Name=ImportTranslationText;
                      CaptionML=ENU=Import Translations (text);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF TranslationToImport = '' THEN
                                   IF NOT CONFIRM(Text001, FALSE) THEN
                                     EXIT;

                                 Rec.SetCaption(TranslationToImport);
                                 CurrPage.UPDATE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100525013;0;Container;
                ContainerType=ContentArea }

    { 1100525012;1;Field  ;
                Width=20020;
                CaptionML=ENU=Full Source Caption;
                SourceExpr=GetAltCaption;
                Editable=False }

    { 1100525011;1;Field  ;
                Width=20020;
                CaptionML=ENU=Full Translation Caption;
                SourceExpr=GetCaption;
                Editable=false }

    { 1100525018;1;Group  ;
                Name=[Translation ];
                CaptionML=[ENU=Translation;
                           SVE=™vers„ttning];
                GroupType=Group }

    { 1100525017;2;Field  ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Source Caption 1;
                SourceExpr="Alt. Caption1";
                Editable=False }

    { 1100525016;2;Field  ;
                CaptionML=ENU=Translation 1;
                SourceExpr=Caption1 }

    { 1100525015;2;Field  ;
                Lookup=No;
                DrillDown=No;
                SourceExpr="Third Caption1";
                Importance=Additional;
                Editable=false }

    { 1100525014;2;Field  ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Source Caption 2;
                SourceExpr="Alt. Caption2";
                Editable=False }

    { 1100525010;2;Field  ;
                CaptionML=ENU=Translation 2;
                SourceExpr=Caption2 }

    { 1100525009;2;Field  ;
                Lookup=No;
                DrillDown=No;
                SourceExpr="Third Caption2";
                Importance=Additional;
                Editable=false }

    { 1100525008;2;Field  ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Source Caption 3;
                SourceExpr="Alt. Caption3";
                Editable=False }

    { 1100525007;2;Field  ;
                CaptionML=ENU=Translation 3;
                SourceExpr=Caption3 }

    { 1100525006;2;Field  ;
                Lookup=No;
                DrillDown=No;
                SourceExpr="Third Caption3";
                Importance=Additional;
                Editable=false }

    { 1100525005;2;Field  ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Source Caption 4;
                SourceExpr="Alt. Caption4";
                Editable=False }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Translation 4;
                SourceExpr=Caption4 }

    { 1100525003;2;Field  ;
                Lookup=No;
                DrillDown=No;
                SourceExpr="Third Caption4";
                Importance=Additional;
                Editable=false }

    { 1100525002;2;Field  ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Source Caption 5;
                SourceExpr="Alt. Caption5";
                Editable=False }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Translation 5;
                SourceExpr=Caption5 }

    { 1100525000;2;Field  ;
                Lookup=No;
                DrillDown=No;
                SourceExpr="Third Caption5";
                Importance=Additional;
                Editable=false }

    { 1100525021;1;Group  ;
                CaptionML=[ENU=Import/Export;
                           SVE=Importera,exportera];
                GroupType=Group }

    { 1100525020;2;Field  ;
                CaptionML=ENU=Translation export;
                SourceExpr=TranslationExport;
                MultiLine=Yes }

    { 1100525019;2;Field  ;
                CaptionML=ENU=Translation import;
                SourceExpr=TranslationToImport;
                MultiLine=Yes }

    { 1100525027;1;Group  ;
                CaptionML=[ENU=Info;
                           SVE=Info];
                GroupType=Group }

    { 1100525028;2;Field  ;
                SourceExpr="Xliff Generator Note";
                Editable=false }

    { 1100525029;2;Field  ;
                SourceExpr="Developer Note";
                Editable=false }

  }
  CODE
  {
    VAR
      FirstColumnWidth@1100525008 : Integer;
      SecondColumnWidth@1100525007 : Integer;
      ThirdColumnWidth@1100525006 : Integer;
      TToolHelperFunctions@1100525005 : Codeunit 77794;
      char13@1100525004 : Char;
      char10@1100525003 : Char;
      LineEnding@1100525002 : Text;
      TranslationExport@1100525001 : Text;
      TranslationToImport@1100525000 : Text;
      Text001@1100525010 : TextConst 'ENU=The field Translation import is empty. Do you want to update the translations?';
      Text002@1100525009 : TextConst 'ENU=Do you want to overwrite the value?';

    LOCAL PROCEDURE CreateLanguageLine@1100528502(Value@1100528500 : Text;Width@1100528501 : Integer) ReturnValue : Text;
    VAR
      NextPosition@1100528502 : Integer;
      CurrentValue@1100528503 : Text;
    BEGIN
      CurrentValue := Value;
      NextPosition := STRPOS(CurrentValue, ',');

      WHILE (NextPosition > 0) OR (CurrentValue <> '') DO BEGIN
        IF (NextPosition = 0) AND (CurrentValue <> '') THEN BEGIN
          ReturnValue += TToolHelperFunctions.PlaceRemainingSpaces(COPYSTR(CurrentValue, 1), Width);
          CurrentValue := '';
          EXIT;
        END;

        IF NextPosition = 1 THEN
          ReturnValue += ','
        ELSE
          ReturnValue += TToolHelperFunctions.PlaceRemainingSpaces(COPYSTR(CurrentValue, 1, NextPosition - 1), Width) + ',';

        CurrentValue := COPYSTR(CurrentValue, NextPosition + 1);
        NextPosition := STRPOS(CurrentValue, ',');


      END;
    END;

    LOCAL PROCEDURE CreateLanguageLineUsingTable@1100528500(Value@1100528500 : Text;Width@1100528501 : Integer;VAR TTColumnWidth@1100528504 : Record 77795) ReturnValue : Text;
    VAR
      NextPosition@1100528502 : Integer;
      CurrentValue@1100528503 : Text;
    BEGIN
      CurrentValue := Value;
      NextPosition := STRPOS(CurrentValue, ',');
      TTColumnWidth.FINDFIRST;

      WHILE (NextPosition > 0) OR (CurrentValue <> '') DO BEGIN
        IF (NextPosition = 0) AND (CurrentValue <> '') THEN BEGIN
          ReturnValue += TToolHelperFunctions.PlaceRemainingSpaces(COPYSTR(CurrentValue, 1), TTColumnWidth.CountWidth);
          CurrentValue := '';
          EXIT;
        END;

        IF NextPosition = 1 THEN
          ReturnValue += TToolHelperFunctions.PlaceRemainingSpaces('', TTColumnWidth.CountWidth) + ','
        ELSE
          ReturnValue += TToolHelperFunctions.PlaceRemainingSpaces(COPYSTR(CurrentValue, 1, NextPosition - 1), TTColumnWidth.CountWidth) + ',';

        CurrentValue := COPYSTR(CurrentValue, NextPosition + 1);
        NextPosition := STRPOS(CurrentValue, ',');
        TTColumnWidth.NEXT;
      END;
    END;

    BEGIN
    END.
  }
}

