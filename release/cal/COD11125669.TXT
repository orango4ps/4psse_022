OBJECT Codeunit 11125669 Recalculate Estimate RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EstimateParagraphRAWBuffer@1100525000 : ARRAY [2] OF TEMPORARY Record 11125679;
      Text010@1100525001 : TextConst 'ENU=Buffering...;NOR=Buffrer...;SVE=Buffrar...';
      Text011@1100525002 : TextConst 'ENU=Updating commitments...;NOR=Oppdaterer engasjementer...;SVE=Uppdaterar †taganden...';
      Text012@1100525003 : TextConst 'ENU=Writing results...;NOR=Skriver resultater...;SVE=Skriver resultat...';
      Text013@1100525004 : TextConst 'ENU=Writing subtotal...;NOR=Skriver delsummer...;SVE=Skriver delsummor...';
      Text014@1100525005 : TextConst 'ENU=Writing additional costs...;NOR=Skriver tilleggskoster...;SVE=Skriver till„ggskostnader...';
      Text015@1100525006 : TextConst 'ENU=Writing one-time costs...;NOR=Skriver engangskoster...;SVE=Skriver eng†ngskostnader...';
      Text016@1100525007 : TextConst 'ENU=Writing summary total...;NOR=Skriver totalsammendrag...;SVE=Skriver totalsummering...';

    PROCEDURE RecalculateEstimateRAW@1100525000(EstimateNo@1100525000 : Code[20]);
    BEGIN
      BufferCommitmtsAndDescriptions(EstimateNo);
      UpdateCommitments(EstimateNo);
      UpdateLockedCommitments(EstimateNo);
      // UpdateOtherLevels(EstimateNo); jhoek.050810
      WriteResults(EstimateNo);
    END;

    LOCAL PROCEDURE BufferCommitmtsAndDescriptions@1100525002(EstimateNo@1100525000 : Code[20]);
    VAR
      Estimate@1100528900 : Record 11012151;
      EstimateParagraphRAW@1100525001 : Record 11125679;
      Window@1100525002 : Dialog;
    BEGIN
      Window.OPEN(Text010);

      Estimate.GET(EstimateNo);

      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type, "Construction Spec. Line No.");
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETFILTER(Type, '%1|%2',
        EstimateParagraphRAW.Type::"Commitment Description (Main Line)", EstimateParagraphRAW.Type::"Commitment (Main Line)");
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');

      IF EstimateParagraphRAW.FINDSET THEN BEGIN
        REPEAT
          Window.UPDATE;
          EstimateParagraphRAW.CALCFIELDS(
            "Estimate Line Amount",
            "Surchrg. Amt. Labor (Calc.)",
            "Surchrg. Amt. Material (Calc.)",
            "Surchrg. Amt. Subcntr. (Calc.)",
            "Surchrg. Amt. Plant (Calc.)",
            "Calculated Amount Labor",
            "Calculated Amount Material",
            "Calculated Amount Subcontr.",
            "Calculated Amount Plant");
          BufferCommitmentOrDescription(
            EstimateParagraphRAW."Estimate No.",
            EstimateParagraphRAW."Tender Paragraph No.",
            EstimateParagraphRAW."Estimate Line Amount",
            // EstimateParagraphRAW."Estimate Line Amount" + EstimateParagraphRAW."Total Surcharge Amount",
            EstimateParagraphRAW."Estimate Line Amount" +
              EstimateParagraphRAW."Surchrg. Amt. Labor (Calc.)" +
              EstimateParagraphRAW."Surchrg. Amt. Material (Calc.)" +
              EstimateParagraphRAW."Surchrg. Amt. Subcntr. (Calc.)" +
              EstimateParagraphRAW."Surchrg. Amt. Plant (Calc.)",
            EstimateParagraphRAW."Surchrg. Amt. Labor (Calc.)",
            EstimateParagraphRAW."Surchrg. Amt. Material (Calc.)",
            EstimateParagraphRAW."Surchrg. Amt. Subcntr. (Calc.)",
            EstimateParagraphRAW."Surchrg. Amt. Plant (Calc.)",
            //DP00433 sn.
            EstimateParagraphRAW.SafeDivision(EstimateParagraphRAW."Surchrg. Amt. Labor (Calc.)",EstimateParagraphRAW."Calculated Amount Labor") * 100,
            EstimateParagraphRAW.SafeDivision(EstimateParagraphRAW."Surchrg. Amt. Material (Calc.)",EstimateParagraphRAW."Calculated Amount Material") * 100,
            EstimateParagraphRAW.SafeDivision(EstimateParagraphRAW."Surchrg. Amt. Subcntr. (Calc.)",EstimateParagraphRAW."Calculated Amount Subcontr.") * 100,
            EstimateParagraphRAW.SafeDivision(EstimateParagraphRAW."Surchrg. Amt. Plant (Calc.)",EstimateParagraphRAW."Calculated Amount Plant") * 100);
            //DP00433 en.
        UNTIL EstimateParagraphRAW.NEXT = 0;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE BufferCommitmentOrDescription@1100525015(EstimateNo@1100525000 : Code[20];ElementNo@1100525001 : Code[6];CalculatedAmount@1100525003 : Decimal;ActualAmount@1100525002 : Decimal;SurchargeAmountLabor@1100525004 : Decimal;SurchargeAmountMaterial@1100525005 : Decimal;SurchargeAmountSubcontracting@1100525006 : Decimal;SurchargeAmountPlant@1100525007 : Decimal;"Surcharge%Labor"@1100529303 : Decimal;"Surcharge%Material"@1100529302 : Decimal;"Surcharge%Subcontracting"@1100529301 : Decimal;"Surcharge%Plant"@1100529300 : Decimal);
    BEGIN
      BufferElement(EstimateNo, ElementNo, CalculatedAmount, ActualAmount, SurchargeAmountLabor,
        SurchargeAmountMaterial, SurchargeAmountSubcontracting, SurchargeAmountPlant,
        "Surcharge%Labor", "Surcharge%Material", "Surcharge%Subcontracting", "Surcharge%Plant");//DP00433
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // virtual level
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    END;

    LOCAL PROCEDURE BufferElement@1100525022(EstimateNo@1100525002 : Code[20];ElementNo@1100525001 : Code[6];CalculatedAmount@1100525000 : Decimal;ActualAmount@1100525003 : Decimal;SurchargeAmountLabor@1100525007 : Decimal;SurchargeAmountMaterial@1100525006 : Decimal;SurchargeAmountSubcontracting@1100525005 : Decimal;SurchargeAmountPlant@1100525004 : Decimal;"Surcharge%Labor"@1100529300 : Decimal;"Surcharge%Material"@1100529301 : Decimal;"Surcharge%Subcontracting"@1100529302 : Decimal;"Surcharge%Plant"@1100529303 : Decimal);
    BEGIN
      CASE EstimateParagraphRAWBuffer[1].GET(EstimateNo, ElementNo, 0) OF
        FALSE:
          BEGIN
            EstimateParagraphRAWBuffer[1].INIT;
            EstimateParagraphRAWBuffer[1]."Estimate No." := EstimateNo;
            EstimateParagraphRAWBuffer[1]."Tender Paragraph No." := ElementNo;
            EstimateParagraphRAWBuffer[1]."Calculated Amount" := CalculatedAmount;
            EstimateParagraphRAWBuffer[1]."Actual Amount" := ActualAmount;
            EstimateParagraphRAWBuffer[1]."Surcharge Amount Labor" := SurchargeAmountLabor;
            EstimateParagraphRAWBuffer[1]."Surcharge Amount Material" := SurchargeAmountMaterial;
            EstimateParagraphRAWBuffer[1]."Surcharge Amount Subcontr." := SurchargeAmountSubcontracting;
            EstimateParagraphRAWBuffer[1]."Surcharge Amount Plant" := SurchargeAmountPlant;
            //DP00433 sn.
            EstimateParagraphRAWBuffer[1]."Surcharge % Labor" := "Surcharge%Labor";
            EstimateParagraphRAWBuffer[1]."Surcharge % Material" := "Surcharge%Material";
            EstimateParagraphRAWBuffer[1]."Surcharge % Subcontracting" := "Surcharge%Subcontracting";
            EstimateParagraphRAWBuffer[1]."Surcharge % Plant" := "Surcharge%Plant";
            //Dp00433 en.
            EstimateParagraphRAWBuffer[1].Indentation := STRLEN(ElementNo);
            EstimateParagraphRAWBuffer[1].INSERT;
          END;
        TRUE:
          BEGIN
            EstimateParagraphRAWBuffer[1]."Calculated Amount" += CalculatedAmount;
            EstimateParagraphRAWBuffer[1]."Actual Amount" += ActualAmount;
            EstimateParagraphRAWBuffer[1].MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateCommitments@1100525003(EstimateNo@1100525000 : Code[20]);
    VAR
      EstimateParagraphRAW@1100525001 : Record 11125679;
      Window@1100525002 : Dialog;
    BEGIN
      Window.OPEN(Text011);

      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type, "Construction Spec. Line No.");
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');

      IF EstimateParagraphRAW.FINDSET THEN BEGIN
        REPEAT
          Window.UPDATE;
          UpdateCommitment(
            EstimateParagraphRAW."Estimate No.",
            EstimateParagraphRAW."Tender Paragraph No.");
        UNTIL EstimateParagraphRAW.NEXT = 0;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateCommitment@1100525007(EstimateNo@1100525002 : Code[20];ElementNo@1100525001 : Code[6]);
    VAR
      FromElementNo@1100525000 : Code[6];
      ToElementNo@1100525003 : Code[6];
      CalculatedAmount@1100525004 : Decimal;
      ActualAmount@1100525005 : Decimal;
    BEGIN
      FromElementNo := COPYSTR(ElementNo, 1, 5) + '1';
      ToElementNo := EstimateParagraphRAWBuffer[1].GetMaxSubParagraphNo(EstimateNo, ElementNo);  //C026972.n

      EstimateParagraphRAWBuffer[1].RESET;
      EstimateParagraphRAWBuffer[1].SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAWBuffer[1].SETRANGE("Tender Paragraph No.", FromElementNo, ToElementNo);
      EstimateParagraphRAWBuffer[1].CALCSUMS("Calculated Amount", "Actual Amount");

      CalculatedAmount := EstimateParagraphRAWBuffer[1]."Calculated Amount";
      ActualAmount := EstimateParagraphRAWBuffer[1]."Actual Amount";

      EstimateParagraphRAWBuffer[1].GET(EstimateNo, ElementNo, 0);
      EstimateParagraphRAWBuffer[1]."Calculated Amount" += CalculatedAmount;
      EstimateParagraphRAWBuffer[1]."Actual Amount" += ActualAmount;
      EstimateParagraphRAWBuffer[1].MODIFY;
    END;

    LOCAL PROCEDURE UpdateLockedCommitments@1100525006(EstimateNo@1100525000 : Code[20]);
    VAR
      EstimateParagraphRAW@1100525001 : Record 11125679;
    BEGIN
      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type, "Construction Spec. Line No.");
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      EstimateParagraphRAW.SETRANGE("Lock Actual Amount for Updates", TRUE);

      IF EstimateParagraphRAW.FINDSET THEN BEGIN
        REPEAT
          UpdateLockedCommitment(
            EstimateParagraphRAW."Estimate No.",
            EstimateParagraphRAW."Tender Paragraph No.",
            EstimateParagraphRAW."Actual Amount");
        UNTIL EstimateParagraphRAW.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateLockedCommitment@1100525001(EstimateNo@1100525000 : Code[20];ElementNo@1100525001 : Code[6];ActualAmount@1100525002 : Decimal);
    BEGIN
      EstimateParagraphRAWBuffer[1].GET(EstimateNo, ElementNo, 0);
      EstimateParagraphRAWBuffer[1]."Actual Amount" := ActualAmount;
      EstimateParagraphRAWBuffer[1]."Lock Actual Amount for Updates" := TRUE;
      EstimateParagraphRAWBuffer[1].MODIFY;
    END;

    LOCAL PROCEDURE UpdateOtherLevels@1100525004(EstimateNo@1100525000 : Code[20]);
    BEGIN
      UpdateOtherLevel(EstimateNo, '?????');
      UpdateOtherLevel(EstimateNo, '????');
      UpdateOtherLevel(EstimateNo, '???');
      UpdateOtherLevel(EstimateNo, '??');
      UpdateOtherLevel(EstimateNo, '?');
    END;

    LOCAL PROCEDURE UpdateOtherLevel@1100525014(EstimateNo@1100525000 : Code[20];ElementNoFilter@1100525001 : Code[6]);
    VAR
      FromElementNo@1100525002 : Code[6];
      ToElementNo@1100525003 : Code[6];
    BEGIN
      EstimateParagraphRAWBuffer[1].RESET;
      EstimateParagraphRAWBuffer[1].SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAWBuffer[1].SETFILTER("Tender Paragraph No.", ElementNoFilter);

      IF EstimateParagraphRAWBuffer[1].FINDSET(TRUE, FALSE) THEN
        REPEAT
          CASE STRLEN(EstimateParagraphRAWBuffer[1]."Tender Paragraph No.") OF
            5:
              BEGIN
                EstimateParagraphRAWBuffer[2].RESET;
                EstimateParagraphRAWBuffer[2].SETCURRENTKEY("Estimate No.", "Tender Paragraph No.", Indentation);
                EstimateParagraphRAWBuffer[2].SETRANGE("Estimate No.", EstimateNo);
                EstimateParagraphRAWBuffer[2].SETFILTER("Tender Paragraph No.", EstimateParagraphRAWBuffer[1]."Tender Paragraph No." + '0');
                EstimateParagraphRAWBuffer[2].SETRANGE(Indentation, 6);
                EstimateParagraphRAWBuffer[2].CALCSUMS("Calculated Amount", "Actual Amount");

                EstimateParagraphRAWBuffer[1]."Calculated Amount" := EstimateParagraphRAWBuffer[2]."Calculated Amount";
                EstimateParagraphRAWBuffer[1]."Actual Amount" := EstimateParagraphRAWBuffer[2]."Actual Amount";
                EstimateParagraphRAWBuffer[1].MODIFY;
              END;
            4, 3, 2, 1:
              BEGIN
                FromElementNo := EstimateParagraphRAWBuffer[1]."Tender Paragraph No." + '0';
                ToElementNo := EstimateParagraphRAWBuffer[1]."Tender Paragraph No." + '9';

                EstimateParagraphRAWBuffer[2].RESET;
                EstimateParagraphRAWBuffer[2].SETCURRENTKEY("Estimate No.", "Tender Paragraph No.", Indentation);
                EstimateParagraphRAWBuffer[2].SETRANGE("Estimate No.", EstimateNo);
                EstimateParagraphRAWBuffer[2].SETRANGE("Tender Paragraph No.", FromElementNo, ToElementNo);
                EstimateParagraphRAWBuffer[2].SETRANGE(Indentation, STRLEN(EstimateParagraphRAWBuffer[1]."Tender Paragraph No.") + 1);
                EstimateParagraphRAWBuffer[2].CALCSUMS("Calculated Amount", "Actual Amount");

                EstimateParagraphRAWBuffer[1]."Calculated Amount" := EstimateParagraphRAWBuffer[2]."Calculated Amount";
                EstimateParagraphRAWBuffer[1]."Actual Amount" := EstimateParagraphRAWBuffer[2]."Actual Amount";
                EstimateParagraphRAWBuffer[1].MODIFY;
              END;
          END;
        UNTIL EstimateParagraphRAWBuffer[1].NEXT = 0;
    END;

    LOCAL PROCEDURE WriteResults@1100525005(EstimateNo@1100525000 : Code[20]);
    VAR
      EstimateRAW@1100525002 : Record 11012151;
      EstimateRAWSetup@1100525010 : Record 11125673;
      EstimateParagraphRAW@1100525001 : Record 11125679;
      Window@1100525011 : Dialog;
      CalculatedOneTimeCostsTotal@1100525005 : Decimal;
      ActualOneTimeCostsTotal@1100525008 : Decimal;
      SubTotalActual@1100525003 : Decimal;
      SubTotalCalculated@1100525009 : Decimal;
      CalculatedSummaryTotal@1100525004 : Decimal;
      ActualSummaryTotal@1100525007 : Decimal;
      Contributions@1100525006 : Decimal;
    BEGIN
      Window.OPEN(Text012);

      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", "Construction Spec. Line No.");
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');

      EstimateRAWSetup.GET;
      IF EstimateRAWSetup."Debug Mode" THEN
        PAGE.RUNMODAL(PAGE::"Estimate Paragraph Buffer RAW", EstimateParagraphRAWBuffer[1]);

      EstimateParagraphRAW.SetSkipUpdateLogBook(TRUE);
      IF EstimateParagraphRAW.FINDSET(TRUE, FALSE) THEN
        REPEAT
          Window.UPDATE;

          IF EstimateParagraphRAWBuffer[1].GET(EstimateNo, EstimateParagraphRAW."Tender Paragraph No.", 0) THEN BEGIN
            EstimateParagraphRAW.VALIDATE("Calculated Amount", EstimateParagraphRAWBuffer[1]."Calculated Amount");
            EstimateParagraphRAW."Surcharge Amount Labor" := EstimateParagraphRAWBuffer[1]."Surcharge Amount Labor";
            EstimateParagraphRAW."Surcharge Amount Material" := EstimateParagraphRAWBuffer[1]."Surcharge Amount Material";
            EstimateParagraphRAW."Surcharge Amount Subcontr." := EstimateParagraphRAWBuffer[1]."Surcharge Amount Subcontr.";
            EstimateParagraphRAW."Surcharge Amount Plant" := EstimateParagraphRAWBuffer[1]."Surcharge Amount Plant";
            EstimateParagraphRAW."Total Surcharge Amount" :=
              EstimateParagraphRAWBuffer[1]."Actual Amount" - EstimateParagraphRAWBuffer[1]."Calculated Amount";
            //DP00433 sn.
            EstimateParagraphRAW."Surcharge % Labor" := EstimateParagraphRAWBuffer[1]."Surcharge % Labor";
            EstimateParagraphRAW."Surcharge % Material" := EstimateParagraphRAWBuffer[1]."Surcharge % Material";
            EstimateParagraphRAW."Surcharge % Subcontracting" := EstimateParagraphRAWBuffer[1]."Surcharge % Subcontracting";
            EstimateParagraphRAW."Surcharge % Plant" := EstimateParagraphRAWBuffer[1]."Surcharge % Plant";
            //DP00433 en.
            CASE EstimateParagraphRAW."Lock Actual Amount for Updates" OF
              FALSE:
                BEGIN
                  IF EstimateParagraphRAW.IsEuroParagraph THEN
                    EstimateParagraphRAW."Actual Quantity" := EstimateParagraphRAWBuffer[1]."Actual Amount";
                  IF EstimateParagraphRAW."Actual Quantity" <> 0 THEN
                    EstimateParagraphRAWBuffer[1]."Actual Amount" := EstimateParagraphRAW."Actual Quantity" *
                      ROUND(SafeDivision(EstimateParagraphRAWBuffer[1]."Actual Amount", EstimateParagraphRAW."Actual Quantity"));
                  EstimateParagraphRAW.VALIDATE("Actual Amount", EstimateParagraphRAWBuffer[1]."Actual Amount");

                  CASE STRLEN(EstimateParagraphRAW."Tender Paragraph No.") = 6 OF
                    TRUE:
                      EstimateParagraphRAW.VALIDATE(
                        "Total Surcharge Amount",
                        EstimateParagraphRAWBuffer[1]."Actual Amount" - EstimateParagraphRAWBuffer[1]."Calculated Amount");
                    FALSE:
                      EstimateParagraphRAW."Total Surcharge Amount" :=
                        EstimateParagraphRAWBuffer[1]."Actual Amount" - EstimateParagraphRAWBuffer[1]."Calculated Amount";
                  END;

                  CheckEUR(EstimateParagraphRAW);
                END;
              TRUE:
                BEGIN
                  EstimateParagraphRAW.VALIDATE(
                    "Total Surcharge Amount",
                    EstimateParagraphRAWBuffer[1]."Actual Amount" - EstimateParagraphRAWBuffer[1]."Calculated Amount");
                  CheckEUR(EstimateParagraphRAW);
                END;
            END;
            EstimateParagraphRAW.MODIFY;
          END;
        UNTIL EstimateParagraphRAW.NEXT = 0;

      Window.CLOSE;

      WriteSubTotal(EstimateNo, SubTotalActual, SubTotalCalculated);
      CreateAdditionalCost(EstimateNo);

      // Determine total one-time costs
      Window.OPEN(Text015);

      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
      EstimateParagraphRAW.SETRANGE("Tender Paragraph No.", '910010', '919980');
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      EstimateParagraphRAW.CALCSUMS("Calculated Amount", "Actual Amount");
      CalculatedOneTimeCostsTotal := EstimateParagraphRAW."Calculated Amount";
      ActualOneTimeCostsTotal := EstimateParagraphRAW."Actual Amount";

      // Write total one-time costs
      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", "Tender Paragraph No.");
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE("Tender Paragraph No.", '919990');
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      IF EstimateParagraphRAW.FINDFIRST THEN BEGIN
        EstimateParagraphRAW.Quantity := CalculatedOneTimeCostsTotal;
        EstimateParagraphRAW."Actual Quantity" := ActualOneTimeCostsTotal;
        EstimateParagraphRAW."Calculated Amount" := CalculatedOneTimeCostsTotal;
        EstimateParagraphRAW."Actual Amount" := ActualOneTimeCostsTotal;
        EstimateParagraphRAW.MODIFY;
      END;

      Window.CLOSE;

      // Determine total summary amount
      Window.OPEN(Text016);

      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
      EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", '>9&<>919990&<>960010&<>960020&<>960030');
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      EstimateParagraphRAW.CALCSUMS("Actual Amount", "Calculated Amount");
      CalculatedSummaryTotal := EstimateParagraphRAW."Calculated Amount";
      ActualSummaryTotal := EstimateParagraphRAW."Actual Amount";

      CheckProvisionalSum(EstimateNo,'',0);  //C056424
      CheckContributions(EstimateNo, SubTotalActual + ActualSummaryTotal);

      // Determine again total summary amount
      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
      EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", '>9&<>919990');
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      EstimateParagraphRAW.CALCSUMS("Actual Amount", "Calculated Amount");
      CalculatedSummaryTotal := EstimateParagraphRAW."Calculated Amount";
      ActualSummaryTotal := EstimateParagraphRAW."Actual Amount";

      Window.CLOSE;

      // Write estimate total
      EstimateRAW.GET(EstimateNo);
      EstimateRAW."Contract Amount (Calculated)" := SubTotalCalculated + CalculatedSummaryTotal;
      EstimateRAW."Contract Amount (Actual)" := SubTotalActual + ActualSummaryTotal;
      EstimateRAW.MODIFY(TRUE);

      //DP02340.sn
      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", "Construction Spec. Line No.");
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      EstimateParagraphRAW.MODIFYALL("Calculate Summary Cost", FALSE);
      //DP02340.en
    END;

    LOCAL PROCEDURE WriteSubTotal@1100525011(EstimateNo@1100525002 : Code[20];VAR SubTotalActual@1100525003 : Decimal;VAR SubTotalCalculated@1100525004 : Decimal);
    VAR
      EstimateRAW@1100525000 : Record 11012151;
      EstimateParagraphRAW@1100525001 : Record 11125679;
      Window@1100525005 : Dialog;
    BEGIN
      Window.OPEN(Text013);

      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
      EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", '<9');
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      EstimateParagraphRAW.CALCSUMS("Actual Amount", "Calculated Amount");

      EstimateRAW.GET(EstimateNo);

      EstimateRAW."Subtotal (Actual)" := EstimateParagraphRAW."Actual Amount";
      EstimateRAW."Subtotal (Calculated)" := EstimateParagraphRAW."Calculated Amount";
      EstimateRAW.MODIFY(TRUE);

      SubTotalActual := EstimateRAW."Subtotal (Actual)";
      SubTotalCalculated := EstimateRAW."Subtotal (Calculated)";

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CreateAdditionalCost@1100525010(EstimateNo@1100525000 : Code[20]);
    VAR
      RAWSetup@1100525001 : Record 11125673;
      Estimate@1100525006 : Record 11012151;
      EstimateLineRAW@1100528900 : Record 11125698;
      Window@1100525008 : Dialog;
      ElementType@1100525009 : Integer;
    BEGIN
      Window.OPEN(Text014);

      RAWSetup.GET;
      //db, 08-06-17: testfield (CostObject+ElementNo) moved to function where amount will be calculated if percentage filled
      Estimate.GET(EstimateNo);
      EstimateLineRAW.SETRANGE("Estimate No.", Estimate."No.");
      EstimateLineRAW.SETFILTER("Tender Paragraph No.", '%1|%2|%3|%4',
        RAWSetup."Paragraph No.(GeneralCost)", RAWSetup."Paragraph No.(Profit/Risk)",
        RAWSetup."Paragraph No.(ExecutionCost)", RAWSetup."Paragraph No.(Discount)");
      EstimateLineRAW.SETRANGE("Summary Line", TRUE);
      EstimateLineRAW.DELETEALL;

      FOR ElementType := 1 TO 4 DO BEGIN
        ProcessAdditionalCostByElementType(ElementType, Estimate);  //DP01488
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE ProcessAdditionalCostByElementType@1100525012(ElementType@1100525003 : Integer;Estimate@1100525008 : Record 11012151);
    VAR
      RAWSetup@1100525010 : Record 11125673;
      EstimateParagraphRAW@1100525005 : Record 11125679;
      EstimateLineRAW@1100528900 : Record 11125698;
      DimMgt@1100525001 : Codeunit 408;
      DimValRec@1100525000 : Record 349;
      LastLine@1100525002 : Integer;
      ElementPerc@1100525006 : Decimal;
      ElementNo@1100525009 : Code[20];
      CostObject@1100525007 : Code[20];
      DescriptionTxt@1100525011 : Text;
    BEGIN
      //DP01488
      RAWSetup.GET;
      IF ElementType = 1 THEN BEGIN
        ElementNo := RAWSetup."Paragraph No.(GeneralCost)";
        CostObject := RAWSetup."Cost Object (GeneralCost)";
        ElementPerc := Estimate."Percentage (GeneralCost)";
        IF ElementPerc <> 0 THEN BEGIN
          RAWSetup.TESTFIELD("Paragraph No.(GeneralCost)");
          RAWSetup.TESTFIELD("Cost Object (GeneralCost)");
        END;
        DescriptionTxt := Estimate.FIELDCAPTION("Percentage (GeneralCost)") + STRSUBSTNO(': %1%', ElementPerc);
      END;
      IF ElementType = 2 THEN BEGIN
        ElementNo := RAWSetup."Paragraph No.(Profit/Risk)";
        CostObject := RAWSetup."Cost Object (Profit/Risk)";
        ElementPerc := Estimate."Percentage (Profit/Risk)";
        IF ElementPerc <> 0 THEN BEGIN
          RAWSetup.TESTFIELD("Paragraph No.(Profit/Risk)");
          RAWSetup.TESTFIELD("Cost Object (Profit/Risk)");
        END;
        DescriptionTxt := Estimate.FIELDCAPTION("Percentage (Profit/Risk)") + STRSUBSTNO(': %1%', ElementPerc);
      END;
      IF ElementType = 3 THEN BEGIN
        ElementNo := RAWSetup."Paragraph No.(ExecutionCost)";
        CostObject := RAWSetup."Cost Object (ExecutionCost)";
        ElementPerc := Estimate."Percentage (ExecutionCost)";
        IF ElementPerc <> 0 THEN BEGIN
          RAWSetup.TESTFIELD("Paragraph No.(ExecutionCost)");
          RAWSetup.TESTFIELD("Cost Object (ExecutionCost)");
        END;
        DescriptionTxt := Estimate.FIELDCAPTION("Percentage (ExecutionCost)") + STRSUBSTNO(': %1%', ElementPerc);
      END;
      IF ElementType = 4 THEN BEGIN
        ElementNo := RAWSetup."Paragraph No.(Discount)";
        CostObject := RAWSetup."Cost Object (Discount)";
        ElementPerc := Estimate."Percentage (Discount)";
        IF ElementPerc <> 0 THEN BEGIN
          RAWSetup.TESTFIELD("Paragraph No.(Discount)");
          RAWSetup.TESTFIELD("Cost Object (Discount)");
        END;
        DescriptionTxt := Estimate.FIELDCAPTION("Percentage (Discount)") + STRSUBSTNO(': %1%', ElementPerc);
      END;

      IF ElementPerc <> 0 THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');

        EstimateLineRAW.SETRANGE("Estimate No.", Estimate."No.");
        EstimateLineRAW.SETRANGE("Tender Paragraph No.", ElementNo);
        IF EstimateLineRAW.FINDLAST THEN
          LastLine := EstimateLineRAW."Line No."
        ELSE
          LastLine := 0;

        EstimateLineRAW.INIT;
        EstimateLineRAW."Estimate No." := Estimate."No.";
        EstimateLineRAW."Tender Paragraph No." := ElementNo;
        EstimateLineRAW."Line No." := LastLine + 10000;
        EstimateLineRAW.INSERT;
        EstimateLineRAW.InitRecord;  //C060510: fill Element from Paragraph
        EstimateLineRAW.Source := EstimateLineRAW.Source::Summary;
        EstimateLineRAW."Summary Line" := TRUE;
        EstimateLineRAW."Ignore Paragraph Quantity" := TRUE;
        EstimateLineRAW."Part Quantity" := 1;
        EstimateLineRAW.VALIDATE(Quantity, 1);
        EstimateLineRAW."Net Cost Price" := Estimate.CalculateAdditionalCost(ElementType, Estimate."Subtotal (Actual)");  //DP01676
        EstimateLineRAW.VALIDATE("Cost Object", DimValRec.Code);  //DP01676: fill Cost Type
        EstimateLineRAW.Description := DescriptionTxt;
        EstimateLineRAW."Unit of Measure" := DimValRec."Unit of Measure";
        EstimateLineRAW."Cost Component" := DimValRec."Cost Component";
        EstimateLineRAW.VALIDATE("VAT Prod. Posting Group", Estimate."VAT Prod. Posting Group (H)");
        EstimateLineRAW.CalculateTotals;
        EstimateLineRAW.MODIFY;
      END;

      IF ElementNo <> '' THEN BEGIN
        EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type);
        EstimateParagraphRAW.SETRANGE("Estimate No.", Estimate."No.");
        EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
        EstimateParagraphRAW.SETRANGE("Tender Paragraph No.", ElementNo);
        IF EstimateParagraphRAW.FINDSET(TRUE, FALSE) THEN BEGIN
          EstimateParagraphRAW.CALCFIELDS("Estimate Line Amount");
          EstimateParagraphRAW."Calculated Amount" := EstimateParagraphRAW."Estimate Line Amount";
          EstimateParagraphRAW."Actual Amount" := EstimateParagraphRAW."Calculated Amount";
          EstimateParagraphRAW.Quantity := ElementPerc;
          EstimateParagraphRAW."Actual Quantity" := EstimateParagraphRAW.Quantity;
          IF EstimateParagraphRAW.Quantity<> 0 THEN BEGIN
            EstimateParagraphRAW."Calculated Unit Price" := EstimateParagraphRAW."Calculated Amount" / EstimateParagraphRAW.Quantity;
            EstimateParagraphRAW."Actual Unit Price" := EstimateParagraphRAW."Calculated Unit Price";
          END ELSE BEGIN
            EstimateParagraphRAW."Calculated Unit Price" := 0;
            EstimateParagraphRAW."Actual Unit Price" := 0;
          END;
          CheckEUR(EstimateParagraphRAW);
          EstimateParagraphRAW.MODIFY;
        END;
      END;
    END;

    PROCEDURE CheckProvisionalSum@1100528900(EstimateNo@1100528902 : Code[20];TenderParagraphNo@1100528905 : Code[20];ActualAmount@1100528906 : Decimal);
    VAR
      EstimateParagraphRAW@1100528901 : Record 11125679;
      EstimateLineRAW@1100528900 : Record 11125698;
      Estimate@1100528903 : Record 11012151;
      EstimateSetup@1100528904 : Record 11012150;
    BEGIN
      //C056424
      EstimateSetup.GET;
      Estimate.GET(EstimateNo);

      EstimateParagraphRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETRANGE(Type, EstimateParagraphRAW.Type::"Commitment (Main Line)");
      IF TenderParagraphNo <> '' THEN
        EstimateParagraphRAW.SETRANGE("Tender Paragraph No.", TenderParagraphNo)
      ELSE
        EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", '95*');
      IF EstimateParagraphRAW.FINDFIRST THEN BEGIN
        REPEAT
          IF EstimateParagraphRAW.IsEuroParagraph AND (EstimateParagraphRAW.Quantity <> 0) THEN BEGIN
            IF TenderParagraphNo = '' THEN
              ActualAmount := EstimateParagraphRAW."Actual Amount";
            EstimateLineRAW.SETRANGE("Estimate No.", EstimateParagraphRAW."Estimate No.");
            EstimateLineRAW.SETRANGE("Tender Paragraph No.", EstimateParagraphRAW."Tender Paragraph No.");
            EstimateLineRAW.SETRANGE("Summary Line", FALSE);
            IF EstimateLineRAW.ISEMPTY THEN
              GenerateSummaryLine(EstimateParagraphRAW, ActualAmount,
                EstimateSetup."Absence Value Sundry Cost", Estimate."VAT Prod. Posting Group (H)");
          END;
        UNTIL EstimateParagraphRAW.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckContributions@1100525008(EstimateNo@1100525001 : Code[20];BaseAmount@1100525011 : Decimal) : Decimal;
    VAR
      EstimateSetup@1100528901 : Record 11012150;
      Estimate@1100525002 : Record 11012151;
      EstimateParagraphRAW1@1100525000 : Record 11125679;
      EstimateParagraphRAW2@1100525012 : Record 11125679;
      EstimateParagraphRAW3@1100409000 : Record 11125679;
      EstimateLineRAW@1100528900 : Record 11125698;
      LastLine@1100525004 : Integer;
      Perc1@1100525005 : Decimal;
      Perc2@1100525006 : Decimal;
      Perc3@1100409001 : Decimal;
      ChrgAmnt@1100525007 : Decimal;
      ChrgMax@1100525008 : Decimal;
      TotalCalculatedAmount@1100525009 : Decimal;
      TotalActualAmount@1100525010 : Decimal;
      CostObject@1100528902 : Code[20];
      DimMgt@1100528904 : Codeunit 408;
      DimValRec@1100528903 : Record 349;
      ActualAmount@1100528905 : Decimal;
      VATProductPostingGroup@1100528906 : Code[20];
    BEGIN
      Estimate.GET(EstimateNo);
      VATProductPostingGroup := Estimate."VAT Prod. Posting Group (H)";  //C056424
      ChrgMax := 55000;

      EstimateParagraphRAW1.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW1.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW1.SETRANGE(Type, EstimateParagraphRAW1.Type::"Commitment (Main Line)");
      EstimateParagraphRAW1.SETFILTER("Tender Paragraph No.", '960010');
      IF EstimateParagraphRAW1.FINDFIRST THEN
        Perc1 := 0.15;

      EstimateParagraphRAW2.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW2.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW2.SETRANGE(Type, EstimateParagraphRAW2.Type::"Commitment (Main Line)");
      EstimateParagraphRAW2.SETFILTER("Tender Paragraph No.", '960020');
      IF EstimateParagraphRAW2.FINDFIRST THEN
        Perc2 := 0.15;

      EstimateParagraphRAW3.SETCURRENTKEY("Estimate No.", Type);
      EstimateParagraphRAW3.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW3.SETRANGE(Type, EstimateParagraphRAW3.Type::"Commitment (Main Line)");
      EstimateParagraphRAW3.SETFILTER("Tender Paragraph No.", '960030');
      IF EstimateParagraphRAW3.FINDFIRST THEN
        Perc3 := 0.15;

      IF (Perc1 <> 0) OR (Perc2 <> 0) OR (Perc3 <> 0) THEN BEGIN
        EstimateSetup.GET;
        EstimateSetup.TESTFIELD("Absence Value Sundry Cost");
        CostObject := EstimateSetup."Absence Value Sundry Cost";
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
      END;

      IF Perc1 <> 0 THEN BEGIN
        //C056424.sn
        ChrgAmnt := ROUND(BaseAmount * (Perc1/(100-Perc1-Perc2-Perc3)), 0.01);
        IF ChrgAmnt <= ChrgMax THEN BEGIN
          ActualAmount := ChrgAmnt;
          ChrgMax := ChrgMax - ChrgAmnt;
        END ELSE BEGIN
          ActualAmount := ChrgMax;
          ChrgMax := 0;
        END;
        GenerateSummaryLine(EstimateParagraphRAW1, ActualAmount, CostObject, VATProductPostingGroup);
        //C056424.en

        EstimateParagraphRAW1.CALCFIELDS("Estimate Line Amount");
        EstimateParagraphRAW1."Actual Amount" := EstimateParagraphRAW1."Estimate Line Amount";
        EstimateParagraphRAW1."Calculated Amount" := EstimateParagraphRAW1."Actual Amount";
        EstimateParagraphRAW1."Actual Quantity" := EstimateParagraphRAW1."Actual Amount";

        TotalCalculatedAmount := TotalCalculatedAmount + EstimateParagraphRAW1."Calculated Amount";
        TotalActualAmount := TotalActualAmount + EstimateParagraphRAW1."Actual Amount";

        CheckEUR(EstimateParagraphRAW1);
        EstimateParagraphRAW1.MODIFY;
      END;

      IF Perc2 <> 0 THEN BEGIN
        //C056424.sn
        ChrgAmnt := ROUND(BaseAmount * (Perc2/(100-Perc1-Perc2-Perc3)), 0.01);
        IF ChrgAmnt <= ChrgMax THEN BEGIN
          ActualAmount := ChrgAmnt;
          ChrgMax := ChrgMax - ChrgAmnt;
        END ELSE BEGIN
          ActualAmount := ChrgMax;
          ChrgMax := 0;
        END;
        GenerateSummaryLine(EstimateParagraphRAW2, ActualAmount, CostObject, VATProductPostingGroup);
        //C056424.en

        EstimateParagraphRAW2.CALCFIELDS("Estimate Line Amount");
        EstimateParagraphRAW2."Actual Amount" := EstimateParagraphRAW2."Estimate Line Amount";
        EstimateParagraphRAW2."Calculated Amount" := EstimateParagraphRAW2."Actual Amount";
        EstimateParagraphRAW2."Actual Quantity" := EstimateParagraphRAW2."Actual Amount";

        TotalCalculatedAmount := TotalCalculatedAmount + EstimateParagraphRAW2."Calculated Amount";
        TotalActualAmount := TotalActualAmount + EstimateParagraphRAW2."Actual Amount";

        CheckEUR(EstimateParagraphRAW2);
        EstimateParagraphRAW2.MODIFY;
      END;

      IF Perc3 <> 0 THEN BEGIN
        //C056424.sn
        ChrgAmnt := ROUND(BaseAmount * (Perc3/(100-Perc1-Perc2-Perc3)), 0.01);
        IF ChrgAmnt <= ChrgMax THEN BEGIN
          ActualAmount := ChrgAmnt;
          ChrgMax := ChrgMax - ChrgAmnt;
        END ELSE BEGIN
          ActualAmount := ChrgMax;
          ChrgMax := 0;
        END;
        GenerateSummaryLine(EstimateParagraphRAW3, ActualAmount, CostObject, VATProductPostingGroup);
        //C056424.en

        EstimateParagraphRAW3.CALCFIELDS("Estimate Line Amount");
        EstimateParagraphRAW3."Actual Amount" := EstimateParagraphRAW3."Estimate Line Amount";
        EstimateParagraphRAW3."Calculated Amount" := EstimateParagraphRAW3."Actual Amount";
        EstimateParagraphRAW3."Actual Quantity" := EstimateParagraphRAW3."Actual Amount";

        TotalCalculatedAmount := TotalCalculatedAmount + EstimateParagraphRAW3."Calculated Amount";
        TotalActualAmount := TotalActualAmount + EstimateParagraphRAW3."Actual Amount";

        CheckEUR(EstimateParagraphRAW3);
        EstimateParagraphRAW3.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CheckEUR@1100525009(VAR EstimateParagraphRAW@1100525000 : Record 11125679);
    BEGIN
      IF EstimateParagraphRAW.IsEuroParagraph THEN BEGIN
        EstimateParagraphRAW."Actual Amount" := ROUND(EstimateParagraphRAW."Actual Amount", 0.01);
        EstimateParagraphRAW."Calculated Unit Price" := 1;
        EstimateParagraphRAW."Actual Unit Price" := 1;
        EstimateParagraphRAW.Quantity := EstimateParagraphRAW."Calculated Amount";
        EstimateParagraphRAW."Actual Quantity" := EstimateParagraphRAW."Actual Amount";
      END;
    END;

    LOCAL PROCEDURE SafeDivision@1100525019(Numerator@1100525000 : Decimal;Denominator@1100525001 : Decimal) : Decimal;
    BEGIN
      IF Denominator = 0 THEN
        EXIT(0);
      EXIT(Numerator / Denominator);
    END;

    PROCEDURE GenerateSummaryLine@1100528901(EstimateParagraphRAW@1100528901 : Record 11125679;LineAmount@1100528905 : Decimal;CostObject@1100528902 : Code[20];VATProductPostingGroup@1100528906 : Code[20]);
    VAR
      EstimateLineRAW@1100528900 : Record 11125698;
      LastLine@1100528903 : Integer;
    BEGIN
      //C056424
      EstimateLineRAW.SETRANGE("Estimate No.", EstimateParagraphRAW."Estimate No.");
      EstimateLineRAW.SETRANGE("Tender Paragraph No.", EstimateParagraphRAW."Tender Paragraph No.");
      EstimateLineRAW.SETRANGE("Summary Line", TRUE);
      EstimateLineRAW.DELETEALL;
      EstimateLineRAW.SETRANGE("Summary Line");
      IF EstimateLineRAW.FINDLAST THEN
        LastLine := EstimateLineRAW."Line No."
      ELSE
        LastLine := 0;

      EstimateLineRAW.INIT;
      EstimateLineRAW."Estimate No." := EstimateParagraphRAW."Estimate No.";
      EstimateLineRAW."Tender Paragraph No." := EstimateParagraphRAW."Tender Paragraph No.";
      EstimateLineRAW."Line No." := LastLine + 10000;
      EstimateLineRAW.INSERT;
      EstimateLineRAW.InitRecord;  //C060510: fill Element from Paragraph
      EstimateLineRAW.Source := EstimateLineRAW.Source::Summary;
      EstimateLineRAW."Summary Line" := TRUE;
      EstimateLineRAW."Ignore Paragraph Quantity" := TRUE;
      EstimateLineRAW."Part Quantity" := 1;
      EstimateLineRAW.VALIDATE(Quantity, 1);
      EstimateLineRAW."Net Cost Price" := LineAmount;
      EstimateLineRAW.VALIDATE("Cost Object", CostObject);
      EstimateLineRAW.Description := EstimateParagraphRAW.Text;
      EstimateLineRAW.VALIDATE("VAT Prod. Posting Group", VATProductPostingGroup);
      EstimateLineRAW.CalculateTotals;
      EstimateLineRAW.MODIFY;
    END;

    BEGIN
    END.
  }
}

