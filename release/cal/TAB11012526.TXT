OBJECT Table 11012526 Project Material Req. Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               JobsSetup@1100525001 : Record 315;
             BEGIN
               IF "Line No." = 0 THEN
                 "Line No." := GetNextLineNo;
               IF (Origin = Origin::Manual) THEN BEGIN
                 JobsSetup.GET;
                 "Unique Traceable" := JobsSetup."Default Unique Traceable";
                 "Exclude Logistics" := FALSE;
               END;
               OnDeleteQuestionAsked := FALSE;
               IF Origin <> Origin::Manual THEN
                 VALIDATE(Element);
               CheckEntityNo;
               CheckProjectElementItem;
               FillCreatedByOn();
               "Price Agreement" := FALSE;  //C045139
               IF PriceAgreementActive THEN BEGIN
                 VALIDATE("Price Agreement", TRUE);
                 PriceAgreementActive := FALSE;
               END;
               //C046460.sn
               "Purchase Route Reference" := '';
               "Created from Budget" := FALSE;
               "Created from Assembly Object" := FALSE;
               //C046460.en
             END;

    OnModify=BEGIN
               OnDeleteQuestionAsked := FALSE;
               CheckEntityNo;
               CheckProjectElementItem;
               FillModifiedByOn();
             END;

    OnDelete=VAR
               PurchaseLineDetail@1210190000 : Record 11020660;
               ProjectMaterialReqLine@1100525000 : Record 11012526;
             BEGIN
               IF TransferedToAdviceOrder THEN BEGIN  //C046460
                 IF (NOT OnDeleteQuestionAsked) THEN BEGIN
                   OnDeleteQuestionAsked := TRUE;
                   OnDeleteQuestion := CONFIRM(Text005, FALSE);
                 END;
                 IF (NOT OnDeleteQuestion) THEN
                   ERROR('');
               END;

               IF PurchaseLineDetail.GET(
                 PurchaseLineDetail."Line Type"::"Material Requirement",
                 PurchaseLineDetail."Record Type"::Project,
                 "Project No.",
                 "Yard No.",
                 "System No.",
                 "Entity Type",
                 "Entity No.",
                 '',
                 '',
                 "Line No.")
               THEN
                 PurchaseLineDetail.DELETE;

               //DP01732.sn
               IF "Line No." <> 0 THEN BEGIN
                 IF ("Source Type" = "Source Type"::"Recipe Header") AND (Recipe <> '') THEN BEGIN
                   ProjectMaterialReqLine.SETRANGE("Project No.", "Project No.");
                   ProjectMaterialReqLine.SETRANGE("Yard No.", "Yard No.");
                   ProjectMaterialReqLine.SETRANGE("System No.", "System No.");
                   ProjectMaterialReqLine.SETRANGE("Entity Type", "Entity Type");
                   ProjectMaterialReqLine.SETRANGE("Entity No.", "Entity No.");
                   ProjectMaterialReqLine.SETRANGE("Attached to Line No.","Line No.");
                   ProjectMaterialReqLine.DELETEALL(TRUE);
                 END;
               END;
               //DP01732.en

               DeleteDocumentLinks;
             END;

    OnRename=VAR
               ProjectMaterialReqLine@1100525000 : Record 11012526;
             BEGIN
               IF ProjectMaterialReqLine.GET(
                 "Project No.",
                 "Yard No.",
                 "Entity Type",
                 "System No.",
                 "Entity No.",
                 "Line No.")
               THEN
                 "Line No." := GetNextLineNo;
               RenamePurchaseLineDetail;
               CheckEntityNo;
             END;

    CaptionML=[ENU=Project Material Req. Line;
               NOR="Rad for prosjektmaterialekrav ";
               SVE=Projektmaterialkrav Rad];
    LookupPageID=Page11072352;
    DrillDownPageID=Page11072352;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   OnValidate=VAR
                                                                Job@1100526100 : Record 11072003;
                                                              BEGIN
                                                                IF ("Project No." <> '') THEN BEGIN;
                                                                  Job.GET("Project No.");
                                                                  IF (NOT Job."Posting Element Mandatory") THEN
                                                                    Element := '';
                                                                  VALIDATE("Delivery Date", Job."Starting Date");
                                                                END ELSE BEGIN
                                                                  "Delivery Date" := 0D;
                                                                  Element := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   Editable=No }
    { 15  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                Job@1210190000 : Record 11072003;
                                                                ProjectElement@1100526100 : Record 11012010;
                                                                FormatManagement@1100526101 : Codeunit 11012022;
                                                              BEGIN
                                                                Job.GET("Project No.");
                                                                IF (Job."Posting Element Mandatory") AND (Element = '') THEN
                                                                  TESTFIELD(Element);
                                                                IF (Element <> '') THEN BEGIN;
                                                                  FormatManagement.FormatElem(Element, 2, COMPANYNAME);
                                                                  ProjectElement.GET("Project No.", Element);
                                                                  ProjectElement.CheckProjectElementBlocked;
                                                                  IF (NOT DeliveryDateIsModified) AND
                                                                     (ProjectElement."Starting Date" <> 0D)
                                                                  THEN
                                                                    "Delivery Date" := ProjectElement."Starting Date";
                                                                END ELSE BEGIN
                                                                  IF ("Delivery Date" = 0D) THEN
                                                                    IF (NOT DeliveryDateIsModified) THEN
                                                                      "Delivery Date" := Job."Starting Date";
                                                                END;
                                                                DeliveryDateIsModified := FALSE;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 20  ;   ;Yard No.            ;Code20        ;TableRelation="Assembly Yard Number Object"."Yard No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                ValidateObjectData;
                                                              END;

                                                   CaptionML=[ENU=Yard No.;
                                                              NOR=Plassnr;
                                                              SVE=Platsnr];
                                                   Description=Engineering }
    { 25  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 30  ;   ;Entity Type         ;Option        ;OnValidate=BEGIN
                                                                ValidateObjectData;
                                                              END;

                                                   CaptionML=[ENU=Entity Type;
                                                              NOR=Enhetstype;
                                                              SVE=Enhetstyp];
                                                   OptionCaptionML=[ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                                    NOR=Ingen,Kabel,Enhet,Ekstra behov,Kabeloverf›ring,,,,,Posisjon;
                                                                    SVE=Ingen,Kabel,Anordning,Extra behov,Kabel”verf”ring,,,,,Position];
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering }
    { 40  ;   ;System No.          ;Code20        ;TableRelation="Assembly Yard Number Object"."System No." WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Yard No.=FIELD(Yard No.));
                                                   OnValidate=BEGIN
                                                                ValidateObjectData;
                                                              END;

                                                   CaptionML=[ENU=System;
                                                              NOR=System;
                                                              SVE=System];
                                                   Description=Engineering }
    { 50  ;   ;Entity No.          ;Code20        ;TableRelation="Assembly Yard Number Object"."Entity No." WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Yard No.=FIELD(Yard No.),
                                                                                                                   Entity Type=FIELD(Entity Type),
                                                                                                                   System No.=FIELD(System No.));
                                                   OnValidate=BEGIN
                                                                ValidateObjectData;
                                                              END;

                                                   CaptionML=[ENU=Entity No.;
                                                              NOR=Enhetsnr;
                                                              SVE=Enhetsnr];
                                                   Description=Engineering }
    { 55  ;   ;Origin              ;Option        ;InitValue=Manual;
                                                   CaptionML=[ENU=Origin;
                                                              NOR=Utstedt;
                                                              SVE=Origin];
                                                   OptionCaptionML=[ENU=Manual,PEC,Budget,Advice Order,Import,Assembly Object Material Requirement;
                                                                    NOR=Manuell,PEC,Budsjett,Bestillingsunderlag,Importer,Materialekrav for Monteringsobjekt;
                                                                    SVE=Manuell,PEC,Budget,Best„llningsunderlag,Importera,Materialkrav f”r monteringsobjekt];
                                                   OptionString=Manual,PEC,Budget,Advice Order,Import,Assembly Object Material Requirement;
                                                   Editable=No }
    { 60  ;   ;Cable Transit Pos.  ;Option        ;CaptionML=[ENU=Cable Transit Postion;
                                                              NOR=Kabeloverf›ringsposisjon;
                                                              SVE=Kabel”verf”ringsposition];
                                                   OptionCaptionML=[ENU=" ,From Side,To Side";
                                                                    NOR=" ,Fra side,Til side";
                                                                    SVE=" ,Fr†n sida,Till sida"];
                                                   OptionString=,From,To;
                                                   Description=Engineering;
                                                   Editable=No }
    { 100 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                Item@1210190000 : Record 27;
                                                              BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                  ItemRec.TESTFIELD(Blocked,FALSE);
                                                                  IF (Item.GET("Item No.")) THEN
                                                                    "Item Category Code" := Item."Item Category Code";
                                                                END;
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';
                                                                IF "Item No." = '' THEN
                                                                  "Item Category Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 105 ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD("Item No.");
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod] }
    { 110 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 120 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                                END;
                                                                OperationCodebyItem.CheckItemOperationCode("Vendor (Trade Item)", "Trade Item", "Item Operation Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 130 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                END;
                                                                OperationCodebyItem.CheckItemOperationCode("Vendor (Trade Item)", "Trade Item", "Item Operation Code");
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 135 ;   ;Vendor Name (Trade Item);Text100   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Vendor - Central Mgt".Name WHERE (Code=FIELD("Vendor (Trade Item)")));
                                                   CaptionML=[ENU=Vendor Name (Trade Item);
                                                              NOR=Leverand›rsnavn (katalogartikkel);
                                                              SVE=Leverant”rsnamn (skaffningsartikel)];
                                                   Editable=No }
    { 140 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Manufacturer Name");
                                                              END;

                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 150 ;   ;Manufacturer Name   ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Vendor - Central Mgt".Name WHERE (Code=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Manufacturer Name;
                                                              NOR=Fabrikantens navn;
                                                              SVE=Tillverkarens namn];
                                                   Editable=No }
    { 160 ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 170 ;   ;Description2        ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 180 ;   ;Preferred Vendor    ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Preferred Vendor;
                                                              NOR=Foretrukket leverand›r;
                                                              SVE=F”rvald leverant”r] }
    { 185 ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Preferred Vendor)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Editable=No }
    { 200 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO(Quantity) THEN
                                                                  CheckRecipeTotals;  //DP01732

                                                                UpdateQuantityToProcure;  //DP00803
                                                                UpdateAmounts(FIELDNO(Quantity));  //DP00803
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal] }
    { 210 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=M†ttenhet];
                                                   Editable=Yes }
    { 220 ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                               Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF ("Cost Object" <> '') AND ("Item No." + "Trade Item" + "Basic Item" = '') THEN
                                                                  IF xRec."Cost Object" = '' THEN
                                                                    GetDefaultsCostObject()
                                                                  ELSE
                                                                    IF "Cost Object" <> xRec."Cost Object" THEN
                                                                      IF CONFIRM(Text007 + Text008) THEN
                                                                        GetDefaultsCostObject();
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 230 ;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              NOR=Varekategorikode;
                                                              SVE=Artikelkategorikod];
                                                   Description=#27790 }
    { 240 ;   ;Item Operation Code ;Code20        ;TableRelation="Operation Code by Item"."Item Operation Code" WHERE (Vendor (Trade Item)=FIELD("Vendor (Trade Item)"),
                                                                                                                       Item Code=FIELD(Trade Item));
                                                   CaptionML=ENU=Item Operation Code }
    { 250 ;   ;Location Code       ;Code10        ;TableRelation=Location.Code WHERE (Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                Location@1100529600 : Record 14;
                                                                Bin@1100529603 : Record 7354;
                                                                WMSManagement@1100529602 : Codeunit 7302;
                                                              BEGIN
                                                                IF (xRec."Location Code" <> "Location Code") AND ("Location Code" <> '') THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  Location.TESTFIELD(Blocked, FALSE);
                                                                  IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                    "Bin Code" := WMSManagement.GetDefaultBinLocation(
                                                                      "Project No.", '', "Location Code", "Item No.", "Variant Code", FALSE);
                                                                  IF "Bin Code" <> '' THEN
                                                                    IF NOT Bin.GET("Location Code", "Bin Code") THEN
                                                                      "Bin Code" := '';
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Location Code;
                                                              SVE=Lagerst„llekod] }
    { 260 ;   ;Bin Code            ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN
                                                                  WMSManagement.FindBin("Location Code", "Bin Code", "Variant Code");
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              BinCode := WMSManagement.BinLookUpSpecific("Location Code", "Item No.", "Variant Code", '', "Project No.", '',"Bin Code");
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code", BinCode);
                                                            END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Bin Code;
                                                              SVE=Lagerplatskod] }
    { 320 ;   ;Delivery Date       ;Date          ;OnValidate=BEGIN
                                                                DeliveryDateIsModified := TRUE;
                                                              END;

                                                   CaptionML=[ENU=Delivery Date;
                                                              NOR=Leveringsdato;
                                                              SVE=Leveransdatum] }
    { 330 ;   ;Unique Traceable    ;Boolean       ;CaptionML=[ENU=Unique Traceable;
                                                              NOR=Unik Sporbar;
                                                              SVE=Unik sp†rbar];
                                                   Editable=No }
    { 340 ;   ;Exclude Logistics   ;Boolean       ;CaptionML=[ENU=Exclude Logistics;
                                                              NOR=Ekskluder logistikk;
                                                              SVE=Exkludera logistik] }
    { 350 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=[ENU=External Text;
                                                              NOR=Ekstern Tekst;
                                                              SVE=Extern text];
                                                   Editable=No }
    { 351 ;   ;External Text Block ;Boolean       ;CaptionML=[ENU=External Text Block;
                                                              NOR=Ekstern Tekstblokk;
                                                              SVE=Externt textblock];
                                                   Editable=No }
    { 360 ;   ;E-Plan Item         ;Code50        ;TableRelation="E-Plan Item".No.;
                                                   CaptionML=[ENU=E-Plan Item;
                                                              NOR=E-Plan-artikkel;
                                                              SVE=E-Plan-artikel];
                                                   Editable=No }
    { 370 ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapades av];
                                                   Editable=No }
    { 371 ;   ;Created on          ;DateTime      ;CaptionML=[ENU=Created on;
                                                              NOR=Opprettet den;
                                                              SVE=Skapades];
                                                   Editable=No }
    { 380 ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified by;
                                                              NOR=Endret av;
                                                              SVE=Žndrad av];
                                                   Editable=No }
    { 381 ;   ;Modified on         ;DateTime      ;CaptionML=[ENU=Modified on;
                                                              NOR=Endret den;
                                                              SVE=Žndrad den];
                                                   Editable=No }
    { 390 ;   ;Processed by        ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Processed by;
                                                              NOR=Behandlet av;
                                                              SVE=Behandlades av];
                                                   Description=C024706;
                                                   Editable=No }
    { 391 ;   ;Processed on        ;DateTime      ;CaptionML=[ENU=Processed on;
                                                              NOR=Behandlet den;
                                                              SVE=Behandlat den];
                                                   Description=C024706;
                                                   Editable=No }
    { 400 ;   ;Quantity to procure ;Decimal       ;CaptionML=ENU=Quantity to procure;
                                                   Description=inherit from UK }
    { 401 ;   ;Quantity procured   ;Decimal       ;CaptionML=ENU=Quantity procured;
                                                   Description=inherit from UK;
                                                   Editable=No }
    { 402 ;   ;Expected Price      ;Decimal       ;OnValidate=VAR
                                                                PurchasesPayablesSetup@1100525000 : Record 312;
                                                              BEGIN
                                                                UpdateAmounts(FIELDNO("Expected Price"));  //DP00803
                                                                PurchasesPayablesSetup.GET;
                                                                IF PurchasesPayablesSetup."Price Agreement" <> PurchasesPayablesSetup."Price Agreement"::" " THEN
                                                                  VALIDATE("Price Agreement", TRUE);
                                                              END;

                                                   CaptionML=ENU=Expected Price;
                                                   DecimalPlaces=2:5;
                                                   Description=inherit from UK }
    { 403 ;   ;Expected Amount     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts(FIELDNO("Expected Amount"));  //DP00803
                                                              END;

                                                   CaptionML=[ENU=Expected Amount;
                                                              NOR=Forventet bel›p;
                                                              SVE=F”rv„ntat belopp];
                                                   Description=inherit from UK }
    { 410 ;   ;Quantity (delivered);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry".Quantity WHERE (Job No.=FIELD(Project No.),
                                                                                                      Element=FIELD(Element),
                                                                                                      Item No.=FIELD(Item No.),
                                                                                                      Yard No.=FIELD(Yard No.),
                                                                                                      Entity Type=FIELD(Entity Type),
                                                                                                      Entity No.=FIELD(Entity No.),
                                                                                                      System No.=FIELD(System No.)));
                                                   CaptionML=ENU=Quantity (delivered);
                                                   Description=C024706;
                                                   Editable=No }
    { 411 ;   ;Quantity (adviced)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Advice Order Line"."Quantity (Advice)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                  Element=FIELD(Element),
                                                                                                                  Item No.=FIELD(Item No.),
                                                                                                                  Record Type=CONST(Project),
                                                                                                                  Transaction=CONST(Inventory),
                                                                                                                  Processed=CONST(No),
                                                                                                                  Yard No.=FIELD(Yard No.),
                                                                                                                  Entity Type=FIELD(Entity Type),
                                                                                                                  Entity No.=FIELD(Entity No.),
                                                                                                                  System No.=FIELD(System No.)));
                                                   CaptionML=ENU=Quantity (adviced);
                                                   Description=C024706;
                                                   Editable=No }
    { 412 ;   ;Quantity (to deliver);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Line".Quantity WHERE (Job No.=FIELD(Project No.),
                                                                                                       Element=FIELD(Element),
                                                                                                       Item No.=FIELD(Item No.),
                                                                                                       Entry Type=CONST(Sale),
                                                                                                       Yard No.=FIELD(Yard No.),
                                                                                                       Entity Type=FIELD(Entity Type),
                                                                                                       Entity No.=FIELD(Entity No.),
                                                                                                       System No.=FIELD(System No.)));
                                                   CaptionML=ENU=Quantity (to deliver);
                                                   Description=C024706;
                                                   Editable=No }
    { 420 ;   ;Price Agreement     ;Boolean       ;CaptionML=[ENU=Price Agreement;
                                                              NOR=Prisavtale;
                                                              SVE=Prisavtal];
                                                   Description=C045139 }
    { 430 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Purchase Route Reference;
                                                              SVE=Referens f”r ink”psf”ljd];
                                                   Description=C046460;
                                                   Editable=No }
    { 440 ;   ;Created from Budget ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Create from Budget;
                                                   Description=C046460 }
    { 441 ;   ;Created from Assembly Object;Boolean;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Create from Assembly Object;
                                                   Description=C046460 }
    { 500 ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   CaptionML=[ENU=Recipe Group;
                                                              NOR=Maltype;
                                                              SVE=Malltyp];
                                                   Description=DP01732 }
    { 510 ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   CaptionML=[ENU=Recipe;
                                                              NOR=Mal;
                                                              SVE=Mall];
                                                   Description=DP01732 }
    { 520 ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              NOR=Kildetype;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=[ENU=" ,Recipe Header,Recipe Line,BOM Header,BOM Line";
                                                                    NOR=" ,Maltittel,Malrad,Stykklistetittel,Stykklisterad";
                                                                    SVE=" ,Mallrubrik,Mallrad,Strukturrubrik,Strukturrad"];
                                                   OptionString=[ ,Recipe Header,Recipe Line,BOM Header,BOM Line];
                                                   Description=DP01732 }
    { 530 ;   ;Attached to Line No.;Integer       ;TableRelation="Project Material Req. Line"."Line No." WHERE (Project No.=FIELD(Project No.),
                                                                                                                Yard No.=FIELD(Yard No.),
                                                                                                                Entity Type=FIELD(Entity Type),
                                                                                                                System No.=FIELD(System No.),
                                                                                                                Entity No.=FIELD(Entity No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              NOR=Knyttet til linjenr.;
                                                              SVE=Bifogad till radnr];
                                                   Description=DP01732;
                                                   Editable=No }
    { 540 ;   ;Remark              ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Remark }
    { 560 ;   ;Part of Line        ;Integer       ;TableRelation="Project Material Req. Line"."Line No." WHERE (Project No.=FIELD(Project No.),
                                                                                                                Yard No.=FIELD(Yard No.),
                                                                                                                Entity Type=FIELD(Entity Type),
                                                                                                                System No.=FIELD(System No.),
                                                                                                                Entity No.=FIELD(Entity No.));
                                                   OnValidate=BEGIN
                                                                DetermineBOMLevel("Part of Line","Level BOM");
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Part of Line;
                                                              SVE=Del av rad] }
    { 565 ;   ;Original Quantity   ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Original Quantity;
                                                              SVE=Ursprungligt antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 570 ;   ;Level BOM           ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Level BOM;
                                                              SVE=Niv†struktur];
                                                   Description=Level after exploding BOM-Item;
                                                   Editable=No }
    { 575 ;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=BOM Item No.;
                                                              SVE=Strukturartikelnr];
                                                   Description=Original Item before exploding BOM }
  }
  KEYS
  {
    {    ;Project No.,Yard No.,Entity Type,System No.,Entity No.,Line No.;
                                                   Clustered=Yes }
    {    ;Project No.,Yard No.,Entity Type,System No.,Entity No.,Cable Transit Pos. }
    {    ;Project No.,Yard No.,Item No.,Basic Item,Trade Item,Vendor (Trade Item),Manufacturer,Cost Object }
    {    ;Project No.,Element,Cost Object          }
    {    ;Item No.,Variant Code,Delivery Date      }
    {    ;Purchase Route Reference                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ItemRec@1100525002 : Record 27;
      OperationCodebyItem@1100529600 : Record 11229436;
      ItemTypeOpt@1100525001 : 'Item,Basic Item,Trade Item,Trade Vendor';
      ValidateCu@1100525000 : Codeunit 11012033;
      Text000@1210190000 : TextConst 'ENU=Input is aborted.;NOR=Innmating avbrutt;SVE=Indata har tagits bort.';
      Text003@1100525005 : TextConst 'ENU=First select lines which are not processed.';
      Text005@1100525007 : TextConst 'ENU=There are lines already processed to an Advice Order, do you want to delete these lines anyway?;NOR=Det finnes rader som allerede er behandlet til et bestillingsunderlag. Vil du fjerne disse radene likevel?;SVE=Det finns rader som redan har behandlats till ett best„llningsunderlag. Vill du ta bort dessa rader „nd†?';
      Text006@1100525008 : TextConst 'ENU=%1 Advice Order Lines are created.;NOR=%1 bestillingsunderlagsrader er opprettet.;SVE=%1 best„llningsunderlagsrader har skapats.';
      Text007@1100526001 : TextConst 'ENU=Copy Data from new Cost Object?\\;NOR=Kopier data fra nytt Kostnadsobjekt?\\;SVE=Kopiera data fr†n nytt kostnadsobjekt?\\';
      Text008@1100526000 : TextConst 'ENU=Empty fields only will be updated. Existing data will not be overruled.;NOR=Kun tomme felt vil oppdateres. Eksisterende data vil ikke bli overstyrt.;SVE=Endast tomma f„lt kommer att uppdateras. Befintliga data kommer inte att †sidos„ttas.';
      Text010@1100526100 : TextConst 'ENU=Requirement Date updated from Project / Element.;NOR=Behovsdato Oppdatert fra prosjekt / Element.;SVE=Kravdatum har uppdaterats fr†n projekt/element.';
      OnDeleteQuestionAsked@1100526101 : Boolean;
      OnDeleteQuestion@1100526102 : Boolean;
      DeliveryDateIsModified@1210190002 : Boolean;
      Text012@1100525004 : TextConst 'ENU=@1@@@@@@@@@@@@@@@';
      Text999@1100525003 : TextConst 'ENU=Combination of Element and Item should occur once in Project.';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      PriceAgreementActive@1100525006 : Boolean;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      lvDummyDat@1100485005 : Date;
      lvDummyDec@1100525000 : Decimal;
      lvCostComp@1100485006 : Code[20];
      lvRefDate@1100485004 : Date;
      lvDiscRef1@1100485003 : Code[20];
      lvDiscRef2@1100485002 : Code[20];
      ProjRec@1100485001 : Record 11072003;
    BEGIN
      IF ProjRec.GET("Project No.") THEN BEGIN
        lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
        lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
        lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
      END;

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item", "Cost Object",Description,"Unit of Measure","Expected Price",  //DP00803
                              lvDummyDec,lvDummyDat,lvDummyDec,Description2,lvCostComp,
                              lvDiscRef1,lvDiscRef2,lvRefDate,'');

      IF ItemRec.GET("Item No.") THEN;
      UpdateAmounts(FIELDNO("Expected Price"));  //DP00803
    END;

    PROCEDURE GetDefaultsCostObject@3();
    VAR
      DimValRec@1100526001 : Record 349;
      DimMgt@1100526000 : Codeunit 408;
    BEGIN
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');

      IF Description = '' THEN
        Description := DimValRec.Name;
      IF "Unit of Measure" = '' THEN
        "Unit of Measure" := DimValRec."Unit of Measure";
    END;

    PROCEDURE CreateAdviceOrderLine@1100525001(IDefaultLocationCode@1100525001 : Code[20]);
    VAR
      ProjSetup@1100525003 : Record 315;
      AdviceOrderLine@1100525000 : Record 11012055;
      Project@1100526100 : Record 11072003;
      PurchaseLineDetail@1210190000 : Record 11020660;
      Bin@1100529600 : Record 7354;
      MaterialMonitorManagement@1100526101 : Codeunit 11072073;
      lvNextLineNo@1100525002 : Integer;
      UOMfactor@1100526102 : Decimal;
      ReqQuan@1100525004 : Decimal;
      LastRefNo@1100528500 : Code[20];
      RouteRefMgtCU@1100528501 : Codeunit 11012045;
    BEGIN
      //Note: If this function is changed, you have to check the function in
      //      Codeunit Material Monitor Management::B_CreateExtraAdviceOrder
      AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
      AdviceOrderLine.SETRANGE("Project No.", "Project No.");
      IF AdviceOrderLine.FINDLAST THEN
        lvNextLineNo := AdviceOrderLine."Line No." + 10000
      ELSE
        lvNextLineNo := 10000;

      Project.GET("Project No.");

      AdviceOrderLine.INIT;
      AdviceOrderLine."Record Type" := AdviceOrderLine."Record Type"::Project;
      AdviceOrderLine."Project No." := "Project No.";
      AdviceOrderLine."Line No." := lvNextLineNo;
      AdviceOrderLine.InitRecord;
      AdviceOrderLine.VALIDATE(Element, Element);
      AdviceOrderLine.VALIDATE("E-Plan Item","E-Plan Item");
      //C045139.sn
      IF "Trade Item" <> '' THEN BEGIN
        AdviceOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        AdviceOrderLine.VALIDATE("Trade Item", "Trade Item");
      END ELSE BEGIN
        IF "Basic Item" <> '' THEN BEGIN
          AdviceOrderLine.Manufacturer := Manufacturer;
          AdviceOrderLine.VALIDATE("Basic Item", "Basic Item");
        END ELSE BEGIN
          IF "Item No." <> '' THEN
            AdviceOrderLine.VALIDATE("Item No.", "Item No.");
        END;
      END;
      //C045139.en
      AdviceOrderLine.VALIDATE("Cost Object", "Cost Object");
      AdviceOrderLine.VALIDATE("Variant Code", "Variant Code");
      AdviceOrderLine.VALIDATE("Item Category Code", "Item Category Code");

      AdviceOrderLine.Description := Description;
      AdviceOrderLine."Description 2" := Description2;
      AdviceOrderLine."Unit of Measure" := MaterialMonitorManagement.GetUOM("Item No.", "Basic Item", Manufacturer,
        "Trade Item", "Vendor (Trade Item)", "Unit of Measure");
      IF AdviceOrderLine."Order Date" = 0D THEN
        AdviceOrderLine.VALIDATE("Order Date", WORKDATE);
      IF "Delivery Date" <> 0D THEN
        AdviceOrderLine.VALIDATE("Receipt Date", "Delivery Date");
      AdviceOrderLine.VALIDATE("Requested Receipt Date", "Delivery Date");
      AdviceOrderLine.VALIDATE(Deliver, Project.Deliver);
      UOMfactor := MaterialMonitorManagement.GetFactorUOM("Item No.", "Basic Item", Manufacturer,
        "Trade Item", "Vendor (Trade Item)", "Unit of Measure");
      //DP00803.sn
      ReqQuan := "Quantity to procure" * UOMfactor;
      AdviceOrderLine."Quantity (Advice)" := ReqQuan;
      AdviceOrderLine.VALIDATE("Quantity (Budget)", ReqQuan);
      AdviceOrderLine.VALIDATE("Quantity (Advice)", ReqQuan);
      //C045139.sn
      IF "Price Agreement" THEN BEGIN
        AdviceOrderLine."Price Agreement" := "Price Agreement";
        AdviceOrderLine.VALIDATE("Price (LCY)", "Expected Price");
      END;
      //C045139.en
      IF ("Preferred Vendor" <> '') AND (AdviceOrderLine."Vendor (Trade Item)" = '') THEN
        AdviceOrderLine.VALIDATE(AdviceOrderLine.Vendor, "Preferred Vendor");
      //C054621.so
      //"Quantity procured" += "Quantity to procure";
      //UpdateQuantityToProcure;  //take care: "Quantity to procure" in filter of dataset
      //C054621.eo
      //DP00803.en
      IF ("Unique Traceable") OR (Origin = Origin::Import) THEN BEGIN
        AdviceOrderLine."Yard No." := "Yard No.";
        AdviceOrderLine."Entity Type" := "Entity Type";
        AdviceOrderLine."System No." := "System No.";
        AdviceOrderLine."Entity No." := "Entity No.";
        AdviceOrderLine."Cable Transit Pos." := "Cable Transit Pos.";
      END;
      AdviceOrderLine."Main Project No." := Project."Main Project";
      AdviceOrderLine."External Text" := "External Text";
      AdviceOrderLine."External Text Block" := "External Text Block";
      AdviceOrderLine."Created by" := USERID;
      AdviceOrderLine."Date Created" := TODAY;
      AdviceOrderLine."Modified by" := AdviceOrderLine."Created by";
      AdviceOrderLine."Last Date Modified" := AdviceOrderLine."Date Created";
      AdviceOrderLine."Item Operation Code" := "Item Operation Code";

      ProjSetup.GET;
      IF ProjSetup."Apply ProjMat for ReqLine" THEN
        IF "Item No." <> '' THEN
          AdviceOrderLine.Transaction := AdviceOrderLine.Transaction::Inventory;

      IF (IDefaultLocationCode <> '') AND (AdviceOrderLine.Transaction = AdviceOrderLine.Transaction::Inventory) THEN BEGIN
        AdviceOrderLine."Location Code" := IDefaultLocationCode;
        IF "Bin Code" <> '' THEN
          IF Bin.GET(AdviceOrderLine."Location Code", "Bin Code") THEN
            AdviceOrderLine."Bin Code" := "Bin Code";
      END;

      AdviceOrderLine.INSERT(FALSE);

      PurchaseLineDetail.CopyLine(PurchaseLineDetail."Line Type"::"Material Requirement",
        PurchaseLineDetail."Record Type"::Project, "Project No.", "Yard No.",
        "System No.", "Entity Type", "Entity No.", '', '', "Line No.",
        PurchaseLineDetail."Line Type"::"Advice Order", '', lvNextLineNo,
        NOT "Unique Traceable");

      //C046460.sn
      IF ("Purchase Route Reference" = '') THEN BEGIN
        LastRefNo := RouteRefMgtCU.GetLastRefNo();
        LastRefNo := INCSTR(LastRefNo);
        "Purchase Route Reference" := LastRefNo;
        RouteRefMgtCU.WriteLastRefNo(LastRefNo);
      END;
      AdviceOrderLine."Purchase Route Reference" := "Purchase Route Reference";
      AdviceOrderLine.MODIFY;
      //C046460.en
      //MODIFY;  //C054621.o (update in procedure which activates this function)

      CopyDocLinksToAdviceOrderLine(AdviceOrderLine);
    END;

    PROCEDURE CreateAdviceOrderLines@1100525002(ConsiderMarkedOnly@1100528400 : Boolean;IDefaultLocationCode@1100525001 : Code[20]);
    VAR
      ProjectMaterialReqLine@1100525000 : Record 11012526;
    BEGIN
      ProjectMaterialReqLine.COPY(Rec);

      IF ConsiderMarkedOnly THEN BEGIN
        ProjectMaterialReqLine.MARKEDONLY(TRUE);
        IF ProjectMaterialReqLine.ISEMPTY THEN
          ERROR(Text003);
      END;

      ProjectMaterialReqLine.CreateAdvOrderLinesWithFilter('', IDefaultLocationCode);
    END;

    PROCEDURE CreateAdvOrderLinesWithFilter@1100528400(ItemCategoryFilter@1100528401 : Code[250];IDefaultLocationCode@1100525000 : Code[20]);
    VAR
      NoOfAdviceOrderLines@1100528402 : Integer;
      ProjectMaterialReqLine@1100528403 : Record 11012526;
      ProjectMaterialReqLine2@1100528900 : Record 11012526;
      RecCount@1100525001 : Integer;
      Counter@1100525002 : Integer;
      Window@1100525003 : Dialog;
    BEGIN
      ProjectMaterialReqLine.COPY(Rec);
      //C025630.sn
      //ProjectMaterialReqLine.SETRANGE("Advice Order Line No.", 0);
      ProjectMaterialReqLine.SETFILTER("Quantity to procure", '<>%1', 0);
      //C025630.en
      ProjectMaterialReqLine.SETRANGE("Exclude Logistics", FALSE);
      IF ProjectMaterialReqLine.FINDSET(TRUE, TRUE) THEN BEGIN  //C054621
        RecCount := ProjectMaterialReqLine.COUNT;
        Window.OPEN(Text012);
        REPEAT
          Counter += 1;
          Window.UPDATE(1, ROUND((Counter/RecCount)*10000, 1));
          IF ItemWithinItemCategoryFilter(
            ProjectMaterialReqLine."Item No.",
            ItemCategoryFilter)
          THEN BEGIN
            ProjectMaterialReqLine.CreateAdviceOrderLine(IDefaultLocationCode);
            //C054621.sn
            ProjectMaterialReqLine2 := ProjectMaterialReqLine;
            ProjectMaterialReqLine2."Quantity procured" += ProjectMaterialReqLine2."Quantity to procure";
            ProjectMaterialReqLine2.UpdateQuantityToProcure;
            ProjectMaterialReqLine2.MODIFY;
            //C054621.en
            NoOfAdviceOrderLines := NoOfAdviceOrderLines + 1;
          END;
        UNTIL ProjectMaterialReqLine.NEXT = 0;
        Window.CLOSE;
      END;

      MESSAGE(Text006, NoOfAdviceOrderLines);
    END;

    LOCAL PROCEDURE ItemWithinItemCategoryFilter@1100528403(ItemNo@1100528400 : Code[20];ItemCategoryFilter@1100528401 : Code[250]) : Boolean;
    VAR
      Item@1100528402 : Record 27;
    BEGIN
      IF ItemCategoryFilter = '' THEN
        EXIT(TRUE);

      IF (ItemNo = '') THEN
        EXIT(FALSE);

      Item.SETRANGE("No.", ItemNo);
      Item.SETFILTER("Item Category Code", ItemCategoryFilter);
      IF Item.ISEMPTY THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE UpdateReqDateFromProject@1100526100(ProjectNo@1100526101 : Code[20]);
    VAR
      ProjectMaterialReqLine@1100526100 : Record 11012526;
    BEGIN
      WITH ProjectMaterialReqLine DO BEGIN
        SETRANGE("Project No.", ProjectNo);
        IF FINDSET(TRUE) THEN BEGIN
          REPEAT
            "Delivery Date" := GetLatestStartingDate("Project No.", Element, "Delivery Date");
            MODIFY;
          UNTIL (NEXT=0);
          MESSAGE(Text010);
        END;
      END;
    END;

    LOCAL PROCEDURE GetLatestStartingDate@1100526101(ProjectNo@1100526100 : Code[20];ElementNo@1100526101 : Code[20];DeliveryDate@1100526102 : Date) : Date;
    VAR
      Project@1100526104 : Record 11072003;
      ProjectElement@1100526105 : Record 11012010;
      NewDeliveryDate@1100526103 : Date;
    BEGIN
      NewDeliveryDate := 0D;
      IF (ElementNo <> '') THEN BEGIN
        ProjectElement.GET(ProjectNo, ElementNo);
        NewDeliveryDate := ProjectElement."Starting Date";
      END;
      IF (NewDeliveryDate = 0D) THEN BEGIN
        Project.GET(ProjectNo);
        NewDeliveryDate := Project."Starting Date";
      END;
      IF (NewDeliveryDate = 0D) THEN
        NewDeliveryDate := DeliveryDate;

      EXIT(NewDeliveryDate);
    END;

    PROCEDURE AdviceOrderPresentForThisLine@1100526102(ProjectMaterialReqLine@1100526102 : Record 11012526) : Boolean;
    VAR
      AdviceOrderLine@1100526100 : Record 11012055;
    BEGIN
      AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
      AdviceOrderLine.SETRANGE("Project No.", ProjectMaterialReqLine."Project No.");
      AdviceOrderLine.SETRANGE("Yard No.", ProjectMaterialReqLine."Yard No.");
      AdviceOrderLine.SETRANGE("System No.", ProjectMaterialReqLine."System No.");
      AdviceOrderLine.SETRANGE("Entity Type", ProjectMaterialReqLine."Entity Type");
      AdviceOrderLine.SETRANGE("Entity No.", ProjectMaterialReqLine."Entity No.");
      AdviceOrderLine.SETRANGE("Item No.", ProjectMaterialReqLine."Item No.");
      AdviceOrderLine.SETRANGE("Basic Item", ProjectMaterialReqLine."Basic Item");
      AdviceOrderLine.SETRANGE(Manufacturer, ProjectMaterialReqLine.Manufacturer);
      AdviceOrderLine.SETRANGE("Trade Item", ProjectMaterialReqLine."Trade Item");
      AdviceOrderLine.SETRANGE("Vendor (Trade Item)", ProjectMaterialReqLine."Vendor (Trade Item)");
      AdviceOrderLine.SETRANGE("Quantity (Budget)", ProjectMaterialReqLine.Quantity);
      AdviceOrderLine.SETRANGE("Unit of Measure", ProjectMaterialReqLine."Unit of Measure");
      IF (AdviceOrderLine.FINDSET) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ResetProcessedMatReqLines@1210190000();
    VAR
      ProjectMaterialReqLine@1100525000 : Record 11012526;
      AdviceOrderLine@1100528500 : Record 11012055;
    BEGIN
      //C046460: redesign based on Purchase Route Reference
      ProjectMaterialReqLine.COPY(Rec);
      ProjectMaterialReqLine.SETFILTER("Purchase Route Reference", '<>%1', '');
      IF ProjectMaterialReqLine.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          ProjectMaterialReqLine."Quantity procured" := 0;
          AdviceOrderLine.SETRANGE("Project No.", ProjectMaterialReqLine."Project No.");
          AdviceOrderLine.SETRANGE("Purchase Route Reference", ProjectMaterialReqLine."Purchase Route Reference");
          IF AdviceOrderLine.FINDSET THEN BEGIN
            REPEAT
              ProjectMaterialReqLine."Quantity procured" := ProjectMaterialReqLine."Quantity procured" + AdviceOrderLine."Quantity (Budget)";
            UNTIL AdviceOrderLine.NEXT = 0;
          END;
          ProjectMaterialReqLine."Quantity to procure" := ProjectMaterialReqLine.Quantity - ProjectMaterialReqLine."Quantity procured";
          ProjectMaterialReqLine.MODIFY;
        UNTIL ProjectMaterialReqLine.NEXT = 0;
      END;
    END;

    PROCEDURE ChangeDeliveryDates@1210190001();
    VAR
      ProjectMaterialReqLine@1210190000 : Record 11012526;
      Cancelled@1210190001 : Boolean;
      DeliveryDate@1210190002 : Date;
      ModifyDeliveryDate@1210190003 : Report 11012375;
    BEGIN
      ModifyDeliveryDate.SetDeliveryDate(TODAY);
      ModifyDeliveryDate.RUNMODAL;
      ModifyDeliveryDate.GetModifyDeliveryDateData(DeliveryDate, Cancelled);
      IF Cancelled THEN ERROR(Text000);

      ProjectMaterialReqLine.COPY(Rec);
      IF ProjectMaterialReqLine.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          ProjectMaterialReqLine."Delivery Date" := DeliveryDate;
          ProjectMaterialReqLine.MODIFY;
        UNTIL ProjectMaterialReqLine.NEXT = 0;
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190002(VAR MainNewRec@1210190006 : Record 11012526;MainOldRec@1210190007 : Record 11012526);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    LOCAL PROCEDURE ValidateObjectData@1210190004();
    VAR
      AssemblyYardNumberObject@1210190000 : Record 11020596;
    BEGIN
      IF (AssemblyYardNumberObject.GET("Project No.","Yard No.","Entity Type","System No.","Entity No.")) THEN BEGIN
        IF AssemblyYardNumberObject."Delivery Date Material" <> 0D THEN  //C006035
          "Delivery Date" := AssemblyYardNumberObject."Delivery Date Material";
        IF AssemblyYardNumberObject."Element No." <> '' THEN  //C038224
          Element := AssemblyYardNumberObject."Element No.";
      END;
    END;

    PROCEDURE ShowOrEditText@1210190003(Type@1210190000 : 'External,Assembly';Editable@1210190001 : Boolean);
    VAR
      TextFrm@11012001 : Page 11012120;
    BEGIN
      IF Type = Type::External THEN
        TextFrm.SetSelection(DATABASE::"Project Material Req. Line",
          "Project No.", "Yard No.", "System No.", "Entity No.", '', 'EXTERNAL', "Entity Type", "Line No.")
      ELSE
        TextFrm.SetSelection(DATABASE::"Project Material Req. Line",
          "Project No.", "Yard No.", "System No.", "Entity No.", '', 'ASSEMBLY', "Entity Type", "Line No.");

      IF (NOT Editable) THEN BEGIN
        TextFrm.EDITABLE(FALSE);
        TextFrm.RUNMODAL;
      END ELSE BEGIN
        IF (TextFrm.RUNMODAL = ACTION::OK) THEN;
      END;
    END;

    PROCEDURE ShowDocuments@1210190005();
    VAR
      RecRef@1210190000 : RecordRef;
      DocumentFilters@1210190001 : Codeunit 11012432;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, '', FALSE, TRUE);
    END;

    PROCEDURE HasDocumentLinks@1210190007() : Boolean;
    VAR
      DocumentLink@1100528400 : Record 11012747;
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentLink) THEN
        EXIT(FALSE);

      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkMgt.EntityHasDocumentLinks(RecRef));
    END;

    PROCEDURE CopyDocLinksToAdviceOrderLine@1210190006(AdviceOrderLine@1210190000 : Record 11012055);
    VAR
      ProjectMaterialReqLineRecRef@1210190001 : RecordRef;
      AdviceOrderLineRecRef@1210190002 : RecordRef;
      DocumentLinkMgt@1210190003 : Codeunit 11012401;
    BEGIN
      ProjectMaterialReqLineRecRef.GETTABLE(Rec);
      AdviceOrderLineRecRef.GETTABLE(AdviceOrderLine);
      DocumentLinkMgt.CopyDocLinks(ProjectMaterialReqLineRecRef, AdviceOrderLineRecRef);
    END;

    LOCAL PROCEDURE DeleteDocumentLinks@1100528401();
    VAR
      DocumentLink@1100528402 : Record 11012747;
      DocumentLinkMgt@1100528400 : Codeunit 11012401;
      RecRef@1100528401 : RecordRef;
    BEGIN
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentLink) THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    LOCAL PROCEDURE RenamePurchaseLineDetail@1100528404();
    VAR
      PurchaseLineDetail@1100528400 : Record 11020660;
    BEGIN
      IF PurchaseLineDetail.GET(
        PurchaseLineDetail."Line Type"::"Material Requirement",
        PurchaseLineDetail."Record Type"::Project,
        xRec."Project No.",
        xRec."Yard No.",
        xRec."System No.",
        xRec."Entity Type",
        xRec."Entity No.",
        '',
        '',
        xRec."Line No.")
      THEN
        PurchaseLineDetail.RENAME(
          PurchaseLineDetail."Line Type"::"Material Requirement",
          PurchaseLineDetail."Record Type"::Project,
          "Project No.",
          "Yard No.",
          "System No.",
          "Entity Type",
          "Entity No.",
          '',
          '',
          "Line No.");
    END;

    PROCEDURE GetNextLineNo@1100528402() LineNo : Integer;
    VAR
      ProjectMaterialReqLine@1100528400 : Record 11012526;
    BEGIN
      ProjectMaterialReqLine.SETRANGE("Project No.", "Project No.");
      ProjectMaterialReqLine.SETRANGE("Yard No.", "Yard No.");
      ProjectMaterialReqLine.SETRANGE("Entity Type", "Entity Type");
      ProjectMaterialReqLine.SETRANGE("System No.", "System No.");
      ProjectMaterialReqLine.SETRANGE("Entity No.", "Entity No.");
      IF ProjectMaterialReqLine.FINDLAST THEN
        LineNo := ProjectMaterialReqLine."Line No." + 10000
      ELSE
        LineNo := 10000;
    END;

    LOCAL PROCEDURE CheckEntityNo@1100528405();
    VAR
      JobsSetup@1100528400 : Record 315;
    BEGIN
      IF "Entity Type" = "Entity Type"::None THEN
        EXIT;

      IF JobsSetup.GET AND
         JobsSetup."Entity No. Mandatory"
      THEN
        TESTFIELD("Entity No.");
    END;

    PROCEDURE FillCreatedByOn@1100528001();
    BEGIN
      "Created by" := USERID;
      "Created on" := CURRENTDATETIME;
      FillModifiedByOn();
    END;

    PROCEDURE FillModifiedByOn@1100528002();
    BEGIN
      "Modified by" := USERID;
      "Modified on" := CURRENTDATETIME;
    END;

    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27);
    BEGIN
      //C024706
      RESET;
      SETCURRENTKEY("Item No.");
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Delivery Date",Item.GETFILTER("Date Filter"));
      SETFILTER(Quantity,'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@1100529015(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      //C024706
      FilterLinesWithItemToPlan(Item);
      EXIT(FINDFIRST);
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      //C024706
      FilterLinesWithItemToPlan(Item);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE UpdateAmounts@10528005(CalledByFieldNo@10528000 : Integer);
    VAR
      GLSetup@10528001 : Record 98;
    BEGIN
      //DP00803
      GLSetup.GET;

      CASE CalledByFieldNo OF
        FIELDNO(Quantity), FIELDNO("Expected Price"):
          BEGIN
            "Expected Amount" := ROUND(Quantity * "Expected Price", GLSetup."Amount Rounding Precision");
          END;
        FIELDNO("Expected Amount"):
          BEGIN
            IF Quantity <> 0 THEN
              "Expected Price" := ROUND("Expected Amount" / Quantity, GLSetup."Unit-Amount Rounding Precision")
            ELSE
              "Expected Price" := 0;
          END;
      END;
    END;

    PROCEDURE UpdateQuantityToProcure@10528003();
    BEGIN
      //DP00803
      "Quantity to procure" := Quantity - "Quantity procured";
    END;

    PROCEDURE GetPreferredLocation@1100525000(ProjectNo@1100525001 : Code[20]) LocationCode : Code[10];
    VAR
      CompInfo@1100525000 : Record 79;
      PrefLocation@1100525002 : Record 11020353;
    BEGIN
      //C025630
      PrefLocation.SETCURRENTKEY(Priority);
      PrefLocation.SETRANGE(Type, PrefLocation.Type::Job);
      PrefLocation.SETRANGE("No.", ProjectNo);
      IF PrefLocation.FINDFIRST THEN BEGIN
        LocationCode := PrefLocation."Location Code";
      END ELSE BEGIN
        CompInfo.GET;
        LocationCode := CompInfo."Location Code";
      END;
      EXIT(LocationCode);
    END;

    PROCEDURE GetRemainingQuantity@1100525003() Result : Decimal;
    VAR
      ProjRec@1100525000 : Record 11072003;
    BEGIN
      IF ProjRec.GET("Project No.") THEN
        IF ProjRec."Project Status" >= ProjRec."Project Status"::"Technical Finished" THEN
          EXIT(0);

      CALCFIELDS("Quantity (delivered)");
      Result := Quantity - "Quantity (delivered)";
      IF Result < 0 THEN Result := 0;
      EXIT(Result);
    END;

    LOCAL PROCEDURE CheckProjectElementItem@1100525005();
    VAR
      ProjMatReqLine@1100525000 : Record 11012526;
      ProjSetup@1100525001 : Record 315;
    BEGIN
      EXIT;  //db, 23-11-15 (expired, due to use of Engineering keyfields)

      ProjSetup.GET;
      IF NOT ProjSetup."Apply ProjMat for ReqLine" THEN EXIT;

      IF "Item No." <> '' THEN BEGIN
        TESTFIELD(Element);
        ProjMatReqLine.SETRANGE("Project No.", "Project No.");
        ProjMatReqLine.SETRANGE(Element, Element);
        ProjMatReqLine.SETRANGE("Item No.", "Item No.");
        ProjMatReqLine.SETFILTER("Line No.", '<>%1', "Line No.");
        IF ProjMatReqLine.FINDFIRST THEN
          ERROR(Text999);
      END;
    END;

    PROCEDURE SetQuantityProcuredToQuantityAdvice@1100525006(VAR ProjMatReqLine@1100525000 : Record 11012526);
    BEGIN
      //C029489
      IF ProjMatReqLine.FINDFIRST THEN BEGIN
        REPEAT
          ProjMatReqLine.CALCFIELDS("Quantity (adviced)");
          ProjMatReqLine."Quantity procured" := ProjMatReqLine."Quantity (adviced)";
          ProjMatReqLine.UpdateQuantityToProcure;
          ProjMatReqLine.MODIFY;
        UNTIL ProjMatReqLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckRecipeTotals@1100525007();
    VAR
      ProjectMaterialReqLine@1100525002 : Record 11012526;
      OldQuan@1100525000 : Decimal;
      NewQuan@1100525001 : Decimal;
    BEGIN
      //DP01732
      IF "Source Type" <> "Source Type"::"Recipe Header" THEN EXIT;

      //DP02339.sn
      OldQuan := xRec.Quantity;
      NewQuan := Quantity;
      //DP02339.en

      ProjectMaterialReqLine.SETRANGE("Project No.", "Project No.");
      ProjectMaterialReqLine.SETRANGE("Yard No.", "Yard No.");
      ProjectMaterialReqLine.SETRANGE("System No.", "System No.");
      ProjectMaterialReqLine.SETRANGE("Entity Type", "Entity Type");
      ProjectMaterialReqLine.SETRANGE("Entity No.", "Entity No.");
      ProjectMaterialReqLine.SETRANGE("Source Type", ProjectMaterialReqLine."Source Type"::"Recipe Line");
      ProjectMaterialReqLine.SETRANGE("Recipe Group", "Recipe Group");
      ProjectMaterialReqLine.SETRANGE(Recipe, Recipe);
      ProjectMaterialReqLine.SETRANGE("Attached to Line No.", "Line No.");
      IF ProjectMaterialReqLine.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF OldQuan = 0 THEN
            ProjectMaterialReqLine.VALIDATE(Quantity, ProjectMaterialReqLine."Original Quantity" * NewQuan)  //DP02339
          ELSE
            ProjectMaterialReqLine.VALIDATE(Quantity, ProjectMaterialReqLine.Quantity * NewQuan / OldQuan);
          ProjectMaterialReqLine.MODIFY(TRUE);
        UNTIL ProjectMaterialReqLine.NEXT = 0;
      END;
    END;

    PROCEDURE SelectBaseRecipe@1100525008(SelectEntity@1100525007 : Boolean);
    VAR
      BaseRecipeList@1100525000 : Page 11125073;
      AssemblyYardNumberObject@1100525001 : Record 11020596;
      YardNo@1100525004 : Text;
      SystemNo@1100525005 : Text;
      EntityNo@1100525006 : Text;
      EntityType@1100525002 : Text;
      EntityInt@1100525003 : Integer;
    BEGIN
      //DP01732
      IF SelectEntity THEN BEGIN
        AssemblyYardNumberObject.SETRANGE("Project No.", "Project No.");
        IF PAGE.RUNMODAL(PAGE::"Ass. Yard No Obj. Project List", AssemblyYardNumberObject) = ACTION::LookupOK THEN BEGIN
          YardNo := AssemblyYardNumberObject."Yard No.";
          SystemNo := AssemblyYardNumberObject."System No.";
          EntityNo := AssemblyYardNumberObject."Entity No.";
          EntityInt := AssemblyYardNumberObject."Entity Type";
          EntityType := FORMAT(EntityInt);
        END;
      END;
      //
      CLEAR(BaseRecipeList);
      BaseRecipeList.SetSelection(DATABASE::"Project Material Req. Line",
        "Project No.",YardNo,EntityType,SystemNo,EntityNo,Element,'','','',TRUE,"Line No.");
      BaseRecipeList.RUNMODAL;
    END;

    PROCEDURE PurchaseDetailDescription@1100529000() : Text;
    VAR
      PurchaseLineDetail@1100529000 : Record 11020660;
    BEGIN
      IF PurchaseLineDetail.GET(
        PurchaseLineDetail."Line Type"::"Material Requirement", PurchaseLineDetail."Record Type"::Project, "Project No.",
        "Yard No.", "System No.", "Entity Type", "Entity No.", '', '', "Line No.")
      THEN
        EXIT(PurchaseLineDetail.DetailDescription);
    END;

    LOCAL PROCEDURE TransferedToAdviceOrder@1100528500() : Boolean;
    VAR
      AdviceOrderLine@1100528500 : Record 11012055;
    BEGIN
      //C046460
      AdviceOrderLine.SETRANGE("Project No.", "Project No.");
      AdviceOrderLine.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
      IF AdviceOrderLine.ISEMPTY THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE SetPriceAgreementActive@1100525004(NewPriceAgreementActive@1100525000 : Boolean);
    BEGIN
      PriceAgreementActive := NewPriceAgreementActive;
    END;

    PROCEDURE HandleAssistEditTradeItem@1100528406();
    VAR
      RecRef@1100528400 : RecordRef;
      WebshopItemMgt@1100528401 : Codeunit 11012306;
    BEGIN
      RecRef.GETTABLE(Rec);
      WebshopItemMgt.RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
    END;

    PROCEDURE CompressProjectMatReqLines@1100528900(VAR ProjectMaterialReqLine@1100528901 : Record 11012526);
    VAR
      ProjectMaterialReqLine1@1100528903 : Record 11012526;
      ProjectMaterialReqLine2@1100528902 : Record 11012526;
    BEGIN
      //C053852
      WITH ProjectMaterialReqLine DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            ProjectMaterialReqLine1.SETRANGE("Project No.", "Project No.");
            ProjectMaterialReqLine1.SETRANGE(Element, Element);
            ProjectMaterialReqLine1.SETRANGE("Item No.", "Item No.");
            ProjectMaterialReqLine1.SETRANGE("Basic Item", "Basic Item");
            ProjectMaterialReqLine1.SETRANGE(Manufacturer, Manufacturer);
            ProjectMaterialReqLine1.SETRANGE("Trade Item", "Trade Item");
            ProjectMaterialReqLine1.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
            ProjectMaterialReqLine1.SETRANGE("Cost Object", "Cost Object");
            ProjectMaterialReqLine1.SETRANGE("Unit of Measure", "Unit of Measure");
            ProjectMaterialReqLine1.SETRANGE(Description, Description);
            ProjectMaterialReqLine1.SETRANGE(Description2, Description2);
            ProjectMaterialReqLine1.SETRANGE("External Text", "External Text");
            ProjectMaterialReqLine1.SETRANGE("Recipe Group", "Recipe Group");
            ProjectMaterialReqLine1.SETRANGE(Recipe, Recipe);
            ProjectMaterialReqLine1.SETRANGE("Source Type", "Source Type");
            IF "Entity No." <> '' THEN
              ProjectMaterialReqLine1.SETFILTER("Entity No.", '<>%1', "Entity No.")
            ELSE
              ProjectMaterialReqLine1.SETFILTER("Line No.", '<>%1', "Line No.");
            IF ProjectMaterialReqLine1.FINDSET(TRUE, FALSE) THEN BEGIN
              ProjectMaterialReqLine1.Quantity := ProjectMaterialReqLine1.Quantity + Quantity;
              ProjectMaterialReqLine1."Quantity (delivered)" := ProjectMaterialReqLine1."Quantity (delivered)" + "Quantity (delivered)";
              ProjectMaterialReqLine1."Quantity (adviced)" := ProjectMaterialReqLine1."Quantity (adviced)" + "Quantity (adviced)";
              ProjectMaterialReqLine1."Quantity (to deliver)" := ProjectMaterialReqLine1."Quantity (to deliver)" + "Quantity (to deliver)";
              ProjectMaterialReqLine1."Quantity to procure" := ProjectMaterialReqLine1."Quantity to procure" + "Quantity to procure";
              ProjectMaterialReqLine1."Quantity procured" := ProjectMaterialReqLine1."Quantity procured" + "Quantity procured";
              ProjectMaterialReqLine1."Purchase Route Reference" := "Purchase Route Reference";
              IF "Source Type" <> "Source Type"::" " THEN
                ProjectMaterialReqLine1."Attached to Line No." := "Attached to Line No.";
              ProjectMaterialReqLine1.MODIFY;
              //
              IF ProjectMaterialReqLine2.GET("Project No.", "Yard No.", "Entity Type", "System No.", "Entity No.", "Line No.") THEN
                ProjectMaterialReqLine2.DELETE;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DetermineBOMLevel@1100528901(LineNo@1100525000 : Integer;VAR BOMLevel@1100525002 : Integer);
    VAR
      ProjectMaterialReqLine@1100525001 : Record 11012526;
    BEGIN
      ProjectMaterialReqLine.SETRANGE("Project No.","Project No.");
      ProjectMaterialReqLine.SETRANGE("Yard No.","Yard No.");
      ProjectMaterialReqLine.SETRANGE("Entity Type","Entity Type");
      ProjectMaterialReqLine.SETRANGE("System No.","System No.");
      ProjectMaterialReqLine.SETRANGE("Entity No.","Entity No.");
      ProjectMaterialReqLine.SETRANGE("Line No.",LineNo);
      IF ProjectMaterialReqLine.FINDFIRST THEN
        BOMLevel := ProjectMaterialReqLine."Level BOM" + 1;
    END;

    PROCEDURE EditLineDetails@1100527300();
    VAR
      PurchaseLineDetail@1100527303 : Record 11020660;
      PurchSetup@1100527302 : Record 312;
      QuantityOld@1100527301 : Decimal;
      QuantityNew@1100527300 : Decimal;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Calc Qty (PMR) Based On Detail" THEN
        QuantityOld := PurchaseLineDetail.GetCalculatedQuantity(PurchaseLineDetail."Line Type"::"Material Requirement",
          PurchaseLineDetail."Record Type"::Project, "Project No.", "Yard No.", "System No.",
          "Entity Type", "Entity No.", '', '', "Line No.");
      PurchaseLineDetail.ShowCard(PurchaseLineDetail."Line Type"::"Material Requirement",
        PurchaseLineDetail."Record Type"::Project, "Project No.", "Yard No.", "System No.",
        "Entity Type", "Entity No.", '', '', "Line No.", TRUE);
      IF PurchSetup."Calc Qty (PMR) Based On Detail" THEN BEGIN
        QuantityNew := PurchaseLineDetail.GetCalculatedQuantity(PurchaseLineDetail."Line Type"::"Material Requirement",
          PurchaseLineDetail."Record Type"::Project, "Project No.", "Yard No.", "System No.",
          "Entity Type", "Entity No.", '', '', "Line No.");
        IF QuantityOld <> QuantityNew THEN BEGIN
          VALIDATE(Quantity, QuantityNew);
          MODIFY(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      4PS01 MMA 20100429 Optionvalue Entity Type/Anonymous renamed into UniqueTraceable
      db, 02-11-15: DeliveryDate added to index Item+Variant
    }
    END.
  }
}

