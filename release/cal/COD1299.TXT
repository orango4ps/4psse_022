OBJECT Codeunit 1299 Web Request Helper
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ConnectionErr@1001 : TextConst 'ENU=Connection to the remote service could not be established.\\;NOR=Kan ikke opprette tilkobling til ekstern tjeneste.\\;SVE=Det gick inte att uppr„tta en anslutning till fj„rrtj„nsten.\\';
      InvalidUriErr@1002 : TextConst 'ENU=The URI is not valid.;NOR=URI-adressen er ikke gyldig.;SVE=URI:n „r ogiltig.';
      NonSecureUriErr@1004 : TextConst 'ENU=The URI is not secure.;NOR=URI-adressen er ikke sikker.;SVE=URI:en „r inte s„ker.';
      ProcessingWindowMsg@1003 : TextConst 'ENU=Please wait while the server is processing your request.\This may take several minutes.;NOR=Vent mens serveren behandler foresp›rselen.\Dette kan ta flere minutter.;SVE=V„nta medan servern bearbetar din beg„ran.\Detta kan ta flera minuter.';
      ServiceURLTxt@1000 : TextConst '@@@=Example: ServiceURL: http://www.contoso.com/;ENU=\\Service URL: %1.;NOR=\\URL-adresse for tjeneste: %1.;SVE=\\Servicesida: %1.';
      GlobalHttpWebResponseError@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";

    [TryFunction]
    [External]
    PROCEDURE IsValidUri@6(Url@1001 : Text);
    VAR
      ResultUri@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      Uri@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      UriKind@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.UriKind";
    BEGIN
      IF NOT Uri.IsWellFormedUriString(Url,UriKind.Absolute) THEN
        IF NOT Uri.TryCreate(Url,UriKind.Absolute,ResultUri) THEN
          ERROR(InvalidUriErr);
    END;

    [TryFunction]
    [External]
    PROCEDURE IsValidUriWithoutProtocol@3(Url@1001 : Text);
    BEGIN
      IF NOT IsValidUri(Url) THEN
        IF NOT IsValidUri('http://' + Url) THEN
          ERROR(InvalidUriErr);
    END;

    [TryFunction]
    [External]
    PROCEDURE IsSecureHttpUrl@8(Url@1000 : Text);
    VAR
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IsValidUri(Url);
      Uri := Uri.Uri(Url);
      IF Uri.Scheme <> 'https' THEN
        ERROR(NonSecureUriErr);
    END;

    [TryFunction]
    [External]
    PROCEDURE IsHttpUrl@2(Url@1000 : Text);
    VAR
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IsValidUri(Url);
      Uri := Uri.Uri(Url);
      IF (Uri.Scheme <> 'http') AND (Uri.Scheme <> 'https') THEN
        ERROR(InvalidUriErr);
    END;

    [TryFunction]
    [Internal]
    PROCEDURE GetWebResponse@1(VAR HttpWebRequest@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";VAR HttpWebResponse@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";VAR ResponseInStream@1002 : InStream;VAR HttpStatusCode@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";VAR ResponseHeaders@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";ProgressDialogEnabled@1003 : Boolean);
    VAR
      ProcessingWindow@1000 : Dialog;
    BEGIN
      IF ProgressDialogEnabled THEN
        ProcessingWindow.OPEN(ProcessingWindowMsg);

      CLEARLASTERROR;
      HttpWebResponse := HttpWebRequest.GetResponse;
      HttpWebResponse.GetResponseStream.CopyTo(ResponseInStream);
      HttpStatusCode := HttpWebResponse.StatusCode;
      ResponseHeaders := HttpWebResponse.Headers;

      IF ProgressDialogEnabled THEN
        ProcessingWindow.CLOSE;
    END;

    [Internal]
    PROCEDURE GetWebResponseError@15(VAR WebException@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";VAR ServiceURL@1006 : Text) : Text;
    VAR
      DotNetExceptionHandler@1000 : Codeunit 1291;
      WebExceptionStatus@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebExceptionStatus";
      HttpStatusCode@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ErrorText@1009 : Text;
    BEGIN
      DotNetExceptionHandler.Collect;

      IF NOT DotNetExceptionHandler.CastToType(WebException,GETDOTNETTYPE(WebException)) THEN
        DotNetExceptionHandler.Rethrow;

      IF NOT ISNULL(WebException.Response) THEN
        IF NOT ISNULL(WebException.Response.ResponseUri) THEN
          ServiceURL := STRSUBSTNO(ServiceURLTxt,WebException.Response.ResponseUri.AbsoluteUri);

      ErrorText := ConnectionErr + WebException.Message + ServiceURL;
      IF NOT WebException.Status.Equals(WebExceptionStatus.ProtocolError) THEN
        EXIT(ErrorText);

      IF ISNULL(WebException.Response) THEN
        DotNetExceptionHandler.Rethrow;

      GlobalHttpWebResponseError := WebException.Response;
      IF NOT (GlobalHttpWebResponseError.StatusCode.Equals(HttpStatusCode.Found) OR
              GlobalHttpWebResponseError.StatusCode.Equals(HttpStatusCode.InternalServerError))
      THEN
        EXIT(ErrorText);

      EXIT('');
    END;

    [TryFunction]
    [Internal]
    PROCEDURE GetResponseText@11(Method@1006 : Text;Url@1004 : Text;AccessToken@1001 : Text;VAR ResponseText@1010 : Text);
    VAR
      TempBlob@1000 : Record 99008535;
      HttpWebRequest@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      ResponseInputStream@1005 : InStream;
      ChunkText@1009 : Text;
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(Url);
      HttpWebRequest.Method := Method;
      HttpWebRequest.ContentLength := 0;
      // add the access token to the authorization bearer header
      HttpWebRequest.Headers.Add('Authorization','Bearer ' + AccessToken);
      HttpWebResponse := HttpWebRequest.GetResponse;

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ResponseInputStream);
      HttpWebResponse.GetResponseStream.CopyTo(ResponseInputStream);

      // the READTEXT() function apparently only reads a single line, so we must loop through the stream to get the contents of every line.
      WHILE NOT ResponseInputStream.EOS DO BEGIN
        ResponseInputStream.READTEXT(ChunkText);
        ResponseText += ChunkText;
      END;

      HttpWebResponse.Close; // close connection
      HttpWebResponse.Dispose; // cleanup of IDisposable
    END;

    [External]
    PROCEDURE GetHostNameFromUrl@4(Url@1000 : Text) : Text;
    VAR
      Uri@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IsValidUri(Url);
      Uri := Uri.Uri(Url);
      EXIT(Uri.Host);
    END;

    BEGIN
    END.
  }
}

