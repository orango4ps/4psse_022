OBJECT Codeunit 443 Sales-Post Prepayment (Yes/No)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05,4PS14.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to post the prepayments for %1 %2?;NOR=Vil du bokf›re forskuddsbetalinger for %1 %2?;SVE=Vill du bokf”ra f”rskottsbetalningarna f”r %1 %2?';
      Text001@1001 : TextConst 'ENU=Do you want to post a credit memo for the prepayments for %1 %2?;NOR=Vil du bokf›re en kreditnota for forskuddsbetalingene for %1 %2?;SVE=Vill du bokf”ra en kreditnota f”r f”rskottsbetalningarna f”r %1 %2?';
      SalesInvHeader@1003 : Record 112;
      SalesCrMemoHeader@1002 : Record 114;
      PrepmtDocumentType@1004 : ',,Invoice,Credit Memo';
      UnsupportedDocTypeErr@1005 : TextConst 'ENU=Unsupported prepayment document type.;NOR=Ust›ttet dokumenttype for forskuddsbetaling.';

    [External]
    PROCEDURE PostPrepmtInvoiceYN@1(VAR SalesHeader2@1001 : Record 36;Print@1002 : Boolean);
    VAR
      SalesHeader@1003 : Record 36;
      ConfirmManagement@1004 : Codeunit 27;
    BEGIN
      SalesHeader.COPY(SalesHeader2);
      WITH SalesHeader DO BEGIN
        IF NOT ConfirmManagement.ConfirmProcess(
             STRSUBSTNO(Text000,"Document Type","No."),TRUE)
        THEN
          EXIT;

        PostPrepmtDocument(SalesHeader,"Document Type"::Invoice);

        IF Print THEN
          GetReport(SalesHeader,0);

        COMMIT;
        OnAfterPostPrepmtInvoiceYN(SalesHeader);

        SalesHeader2 := SalesHeader;
      END;
    END;

    [External]
    PROCEDURE PostPrepmtCrMemoYN@2(VAR SalesHeader2@1001 : Record 36;Print@1002 : Boolean);
    VAR
      SalesHeader@1003 : Record 36;
      ConfirmManagement@1004 : Codeunit 27;
    BEGIN
      SalesHeader.COPY(SalesHeader2);
      WITH SalesHeader DO BEGIN
        IF NOT ConfirmManagement.ConfirmProcess(
             STRSUBSTNO(Text001,"Document Type","No."),TRUE)
        THEN
          EXIT;

        PostPrepmtDocument(SalesHeader,"Document Type"::"Credit Memo");

        IF Print THEN
          GetReport(SalesHeader,1);

        COMMIT;
        OnAfterPostPrepmtCrMemoYN(SalesHeader);

        SalesHeader2 := SalesHeader;
      END;
    END;

    LOCAL PROCEDURE PostPrepmtDocument@3(VAR SalesHeader@1003 : Record 36;PrepmtDocumentType@1000 : Option);
    VAR
      SalesPostPrepayments@1002 : Codeunit 442;
      ErrorMessageHandler@1004 : Codeunit 29;
      ErrorMessageMgt@1001 : Codeunit 28;
    BEGIN
      OnBeforePostPrepmtDocument(SalesHeader,PrepmtDocumentType);

      ErrorMessageMgt.Activate(ErrorMessageHandler);
      SalesPostPrepayments.SetDocumentType(PrepmtDocumentType);
      COMMIT;
      IF NOT SalesPostPrepayments.RUN(SalesHeader) THEN
        ErrorMessageHandler.ShowErrors;
    END;

    PROCEDURE Preview@7(VAR SalesHeader@1000 : Record 36;DocumentType@1003 : Option);
    VAR
      SalesPostPrepaymentYesNo@1001 : Codeunit 443;
      GenJnlPostPreview@1002 : Codeunit 19;
    BEGIN
      BINDSUBSCRIPTION(SalesPostPrepaymentYesNo);
      SalesPostPrepaymentYesNo.SetDocumentType(DocumentType);
      GenJnlPostPreview.Preview(SalesPostPrepaymentYesNo,SalesHeader);
    END;

    LOCAL PROCEDURE GetReport@4(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : 'Invoice,Credit Memo');
    VAR
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetReport(SalesHeader,DocumentType,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH SalesHeader DO
        CASE DocumentType OF
          DocumentType::Invoice:
            BEGIN
              SalesInvHeader."No." := "Last Prepayment No.";
              SalesInvHeader.SETRECFILTER;
              //SalesInvHeader.PrintRecords(FALSE); //**4PS.o
              SalesInvHeader.PrintRecords(FALSE,FALSE); //**4PS.n
            END;
          DocumentType::"Credit Memo":
            BEGIN
              SalesCrMemoHeader."No." := "Last Prepmt. Cr. Memo No.";
              SalesCrMemoHeader.SETRECFILTER;
              SalesCrMemoHeader.PrintRecords(FALSE);
            END;
        END;
    END;

    PROCEDURE SetDocumentType@6(NewPrepmtDocumentType@1000 : Option);
    BEGIN
      PrepmtDocumentType := NewPrepmtDocumentType;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostPrepmtInvoiceYN@9(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostPrepmtCrMemoYN@10(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [EventSubscriber(Codeunit,19,OnRunPreview)]
    LOCAL PROCEDURE OnRunPreview@8(VAR Result@1000 : Boolean;Subscriber@1001 : Variant;RecVar@1002 : Variant);
    VAR
      SalesHeader@1004 : Record 36;
      SalesPostPrepayments@1003 : Codeunit 442;
    BEGIN
      WITH SalesHeader DO BEGIN
        COPY(RecVar);
        Invoice := TRUE;

        IF PrepmtDocumentType IN [PrepmtDocumentType::Invoice,PrepmtDocumentType::"Credit Memo"] THEN
          SalesPostPrepayments.SetDocumentType(PrepmtDocumentType)
        ELSE
          ERROR(UnsupportedDocTypeErr);
      END;

      SalesPostPrepayments.SetPreviewMode(TRUE);
      Result := SalesPostPrepayments.RUN(SalesHeader);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetReport@5(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : 'Invoice,Credit Memo';VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostPrepmtDocument@11(VAR SalesHeader@1000 : Record 36;PrepmtDocumentType@1001 : Option);
    BEGIN
    END;

    BEGIN
    END.
  }
}

