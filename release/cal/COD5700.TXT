OBJECT Codeunit 5700 User Setup Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 14=r,
                TableData 5714=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=customer;NOR=kunde;SVE=kund';
      Text001@1001 : TextConst 'ENU=vendor;NOR=leverandõr;SVE=leverantîr';
      Text002@1002 : TextConst 'ENU=This %1 is related to %2 %3. Your identification is setup to process from %2 %4.;NOR=%1 er knyttet til %2 %3. Identifikasjonen din er satt opp til Ü behandle fra %2 %4.;SVE=%1 Ñr knutet till %2 %3. Din identifikation har lagts upp fîr att behandlas frÜn %2 %4.';
      Text003@1003 : TextConst 'ENU=This document will be processed in your %2.;NOR=Dette dokumentet behandles i  %2.;SVE=Dokumentet kommer att behandlas i %2.';
      UserSetup@1004 : Record 91;
      RespCenter@1005 : Record 5714;
      CompanyInfo@1006 : Record 79;
      UserLocation@1008 : Code[10];
      UserRespCenter@1014 : Code[10];
      SalesUserRespCenter@1013 : Code[10];
      PurchUserRespCenter@1012 : Code[10];
      ServUserRespCenter@1007 : Code[10];
      HasGotSalesUserSetup@1009 : Boolean;
      HasGotPurchUserSetup@1010 : Boolean;
      HasGotServUserSetup@1011 : Boolean;
      AllowedPostingDateErr@1015 : TextConst 'ENU=The date in the Allow Posting From field must not be after the date in the Allow Posting To field.;NOR=Datoen i feltet Bokf. tillatt fra kan ikke vëre etter datoen i feltet Bokf. tillatt til.';
      AllowedPostingDateMsg@1016 : TextConst 'ENU=The setup of allowed posting dates is incorrect.The date in the Allow Posting From field must not be after the date in the Allow Posting To field.;NOR=Oppsettet for tillatte bokfõringsdatoer er ugyldig. Datoen i feltet Bokf. tillatt fra kan ikke vëre etter datoen i feltet Bokf. tillatt til.';
      OpenGLSetupActionTxt@1017 : TextConst 'ENU=Open the General Ledger Setup window;NOR=èpne vinduet Finansoppsett';
      OpenUserSetupActionTxt@1019 : TextConst 'ENU=Open the User Setup window;NOR=èpne vinduet Brukeroppsett';
      PostingDateRangeErr@1018 : TextConst 'ENU=The Posting Date is not within your range of allowed posting dates.;NOR=Bokfõringsdatoen er ikke innenfor omrÜdet for tillatte bokfõringsdatoer.';
      HasGotPurchUserDefSetup@1100485000 : Boolean;

    [External]
    PROCEDURE GetSalesFilter@1() : Code[10];
    BEGIN
      EXIT(GetSalesFilter2(USERID));
    END;

    [External]
    PROCEDURE GetPurchasesFilter@3() : Code[10];
    BEGIN
      EXIT(GetPurchasesFilter2(USERID));
    END;

    [External]
    PROCEDURE GetServiceFilter@5() : Code[10];
    BEGIN
      EXIT(GetServiceFilter2(USERID));
    END;

    [External]
    PROCEDURE GetSalesFilter2@6(UserCode@1000 : Code[50]) : Code[10];
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IF NOT HasGotSalesUserSetup THEN BEGIN
        IsHandled := FALSE;
        OnBeforeGetSalesFilter2(UserCode,UserLocation,SalesUserRespCenter,IsHandled);
        IF IsHandled THEN
          EXIT(SalesUserRespCenter);

        CompanyInfo.GET;
        SalesUserRespCenter := CompanyInfo."Responsibility Center";
        UserLocation := CompanyInfo."Location Code";
        IF UserSetup.GET(UserCode) AND (UserCode <> '') THEN
          IF UserSetup."Sales Resp. Ctr. Filter" <> '' THEN
            SalesUserRespCenter := UserSetup."Sales Resp. Ctr. Filter";
        OnAfterGetSalesFilter2(UserSetup,SalesUserRespCenter);
        HasGotSalesUserSetup := TRUE;
      END;
      EXIT(SalesUserRespCenter);
    END;

    [External]
    PROCEDURE GetPurchasesFilter2@13(UserCode@1000 : Code[50]) : Code[10];
    BEGIN
      IF NOT HasGotPurchUserSetup THEN BEGIN
        CompanyInfo.GET;
        PurchUserRespCenter := CompanyInfo."Responsibility Center";
        UserLocation := CompanyInfo."Location Code";
        IF UserSetup.GET(UserCode) AND (UserCode <> '') THEN
          IF UserSetup."Purchase Resp. Ctr. Filter" <> '' THEN
            PurchUserRespCenter := UserSetup."Purchase Resp. Ctr. Filter";
        OnAfterGetPurchFilter2(UserSetup,PurchUserRespCenter);
        HasGotPurchUserSetup := TRUE;
      END;
      EXIT(PurchUserRespCenter);
    END;

    [External]
    PROCEDURE GetServiceFilter2@17(UserCode@1000 : Code[50]) : Code[10];
    BEGIN
      IF NOT HasGotServUserSetup THEN BEGIN
        CompanyInfo.GET;
        ServUserRespCenter := CompanyInfo."Responsibility Center";
        UserLocation := CompanyInfo."Location Code";
        IF UserSetup.GET(UserCode) AND (UserCode <> '') THEN
          IF UserSetup."Service Resp. Ctr. Filter" <> '' THEN
            ServUserRespCenter := UserSetup."Service Resp. Ctr. Filter";
        OnAfterGetServiceFilter2(UserSetup,ServUserRespCenter);
        HasGotServUserSetup := TRUE;
      END;
      EXIT(ServUserRespCenter);
    END;

    [External]
    PROCEDURE GetRespCenter@2(DocType@1000 : 'Sales,Purchase,Service';AccRespCenter@1001 : Code[10]) : Code[10];
    VAR
      AccType@1002 : Text[50];
      IsHandled@1003 : Boolean;
    BEGIN
      OnBeforeGetRespCenter(DocType,AccRespCenter,IsHandled,UserRespCenter);
      IF IsHandled THEN
        EXIT(UserRespCenter);

      CASE DocType OF
        DocType::Sales:
          BEGIN
            AccType := Text000;
            UserRespCenter := GetSalesFilter;
          END;
        DocType::Purchase:
          BEGIN
            AccType := Text001;
            UserRespCenter := GetPurchasesFilter;
          END;
        DocType::Service:
          BEGIN
            AccType := Text000;
            UserRespCenter := GetServiceFilter;
          END;
      END;
      IF (AccRespCenter <> '') AND
         (UserRespCenter <> '') AND
         (AccRespCenter <> UserRespCenter)
      THEN
        MESSAGE(
          Text002 +
          Text003,
          AccType,RespCenter.TABLECAPTION,AccRespCenter,UserRespCenter);
      IF UserRespCenter = '' THEN
        EXIT(AccRespCenter);

      EXIT(UserRespCenter);
    END;

    [External]
    PROCEDURE CheckRespCenter@4(DocType@1000 : 'Sales,Purchase,Service';AccRespCenter@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(CheckRespCenter2(DocType,AccRespCenter,USERID));
    END;

    [External]
    PROCEDURE CheckRespCenter2@7(DocType@1000 : 'Sales,Purchase,Service';AccRespCenter@1001 : Code[10];UserCode@1002 : Code[50]) : Boolean;
    VAR
      IsHandled@1003 : Boolean;
      Result@1004 : Boolean;
    BEGIN
      OnBeforeCheckRespCenter2(DocType,AccRespCenter,UserCode,IsHandled,Result);
      IF IsHandled THEN
        EXIT(Result);

      CASE DocType OF
        DocType::Sales:
          UserRespCenter := GetSalesFilter2(UserCode);
        DocType::Purchase:
          UserRespCenter := GetPurchasesFilter2(UserCode);
        DocType::Service:
          UserRespCenter := GetServiceFilter2(UserCode);
      END;
      IF (UserRespCenter <> '') AND
         (AccRespCenter <> UserRespCenter)
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetLocation@46(DocType@1000 : 'Sales,Purchase,Service';AccLocation@1001 : Code[10];RespCenterCode@1002 : Code[10]) : Code[10];
    BEGIN
      CASE DocType OF
        DocType::Sales:
          UserRespCenter := GetSalesFilter;
        DocType::Purchase:
          UserRespCenter := GetPurchasesFilter;
        DocType::Service:
          UserRespCenter := GetServiceFilter;
      END;
      IF UserRespCenter <> '' THEN
        RespCenterCode := UserRespCenter;
      IF RespCenter.GET(RespCenterCode) THEN
        IF RespCenter."Location Code" <> '' THEN
          UserLocation := RespCenter."Location Code";
      IF AccLocation <> '' THEN
        EXIT(AccLocation);

      EXIT(UserLocation);
    END;

    [External]
    PROCEDURE CheckAllowedPostingDate@9(PostingDate@1000 : Date);
    BEGIN
      IF NOT IsPostingDateValid(PostingDate) THEN
        ERROR(PostingDateRangeErr);
    END;

    [External]
    PROCEDURE TestAllowedPostingDate@12(PostingDate@1000 : Date;VAR ErrorText@1001 : Text[250]) : Boolean;
    BEGIN
      IF IsPostingDateValid(PostingDate) THEN
        EXIT(TRUE);

      ErrorText := COPYSTR(PostingDateRangeErr,1,MAXSTRLEN(ErrorText));
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CheckAllowedPostingDatesRange@8(AllowPostingFrom@1000 : Date;AllowPostingTo@1001 : Date;NotificationType@1003 : 'Error,Notification';InvokedBy@1004 : Integer);
    VAR
      AllowedPostingDatesNotification@1002 : Notification;
    BEGIN
      IF AllowPostingFrom <= AllowPostingTo THEN
        EXIT;

      IF (AllowPostingFrom = 0D) OR (AllowPostingTo = 0D) THEN
        EXIT;

      CASE NotificationType OF
        NotificationType::Notification:
          BEGIN
            AllowedPostingDatesNotification.MESSAGE := AllowedPostingDateMsg;
            CASE InvokedBy OF
              DATABASE::"General Ledger Setup":
                AllowedPostingDatesNotification.ADDACTION(OpenGLSetupActionTxt,
                  CODEUNIT::"Document Notifications",'ShowGLSetup');
              DATABASE::"User Setup":
                AllowedPostingDatesNotification.ADDACTION(OpenUserSetupActionTxt,
                  CODEUNIT::"Document Notifications",'ShowUserSetup');
            END;
            AllowedPostingDatesNotification.SEND;
            ERROR('');
          END;
        NotificationType::Error:
          ERROR(AllowedPostingDateErr);
      END;
    END;

    [External]
    PROCEDURE IsPostingDateValid@10(PostingDate@1000 : Date) : Boolean;
    VAR
      RecID@1005 : RecordID;
    BEGIN
      EXIT(IsPostingDateValidWithSetup(PostingDate,RecID));
    END;

    [External]
    PROCEDURE IsPostingDateValidWithSetup@11(PostingDate@1000 : Date;VAR SetupRecordID@1005 : RecordID) Result : Boolean;
    VAR
      GLSetup@1004 : Record 98;
      UserSetup@1003 : Record 91;
      AllowPostingFrom@1002 : Date;
      AllowPostingTo@1001 : Date;
      IsHandled@1006 : Boolean;
    BEGIN
      OnBeforeIsPostingDateValidWithSetup(PostingDate,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      IF USERID <> '' THEN
        IF UserSetup.GET(USERID) THEN BEGIN
          UserSetup.CheckAllowedPostingDates(1);
          AllowPostingFrom := UserSetup."Allow Posting From";
          AllowPostingTo := UserSetup."Allow Posting To";
          SetupRecordID := UserSetup.RECORDID;
        END;
      IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
        GLSetup.GET;
        GLSetup.CheckAllowedPostingDates(1);
        AllowPostingFrom := GLSetup."Allow Posting From";
        AllowPostingTo := GLSetup."Allow Posting To";
        SetupRecordID := GLSetup.RECORDID;
      END;
      IF AllowPostingTo = 0D THEN
        AllowPostingTo := DMY2DATE(31,12,9999);
      EXIT(PostingDate IN [AllowPostingFrom..AllowPostingTo]);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetPurchFilter2@16(VAR UserSetup@1000 : Record 91;VAR UserRespCenter@1001 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetSalesFilter2@15(VAR UserSetup@1000 : Record 91;VAR UserRespCenter@1001 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetServiceFilter2@14(VAR UserSetup@1000 : Record 91;VAR UserRespCenter@1001 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckRespCenter2@22(DocType@1001 : 'Sales,Purchase,Service';AccRespCenter@1000 : Code[10];UserCode@1004 : Code[50];VAR IsHandled@1002 : Boolean;VAR Result@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetRespCenter@19(DocType@1001 : 'Sales,Purchase,Service';AccRespCenter@1000 : Code[10];VAR IsHandled@1002 : Boolean;VAR UserRespCenter@1003 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetSalesFilter2@18(UserCode@1000 : Code[50];VAR UserLocation@1002 : Code[10];VAR UserRespCenter@1001 : Code[10];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsPostingDateValidWithSetup@20(PostingDate@1000 : Date;VAR Result@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    PROCEDURE GetPurchasesDefault@1100485000() : Code[10];
    BEGIN
      //**4PS
      IF NOT HasGotPurchUserDefSetup THEN BEGIN
        CompanyInfo.GET;
        PurchUserRespCenter := CompanyInfo."Responsibility Center";
        UserLocation := CompanyInfo."Location Code";
        IF (UserSetup.GET(USERID)) AND (USERID <> '') THEN
          IF UserSetup."Purchase Resp. Ctr. Default" <> '' THEN
            PurchUserRespCenter := UserSetup."Purchase Resp. Ctr. Default";
        HasGotPurchUserDefSetup := TRUE;
      END;
      EXIT(PurchUserRespCenter);
    END;

    BEGIN
    END.
  }
}

