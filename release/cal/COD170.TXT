OBJECT Codeunit 170 Standard Codes Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GetRecurringLinesTxt@1002 : TextConst 'ENU=Get Recurring Lines.;NOR=Hent gjentakende linjer.';
      GetSalesRecurringLinesQst@1003 : TextConst '@@@=%1 - customer number;ENU=Recurring sales lines exist for customer %1. Do you want to insert them on this document?;NOR=Gjentakende salgslinjer finnes for kunden %1. Vil du sette dem inn i dette dokumentet?';
      GetPurchRecurringLinesQst@1000 : TextConst '@@@=%1 - vendor number;ENU=Recurring purchase lines exist for vendor %1. Do you want to insert them on this document?;NOR=Gjentakende kj›pslinjer finnes for leverand›ren %1. Vil du sette dem inn i dette dokumentet?';

    [External]
    PROCEDURE GetSalesRecurringLines@3(SalesHeader@1000 : Record 36);
    VAR
      StandardCustomerSalesCode@1002 : Record 172;
    BEGIN
      OnBeforeGetSalesRecurringLines(SalesHeader);

      StandardCustomerSalesCode.SetFilterByAutomaticAndAlwaysAskCodes(SalesHeader);
      StandardCustomerSalesCode.SETRANGE("Customer No.",SalesHeader."Sell-to Customer No.");
      StandardCustomerSalesCode.FINDFIRST;
      IF (StandardCustomerSalesCode.COUNT = 1) AND
         StandardCustomerSalesCode.IsInsertRecurringLinesOnDocumentAutomatic(SalesHeader)
      THEN
        StandardCustomerSalesCode.ApplyStdCodesToSalesLines(SalesHeader,StandardCustomerSalesCode)
      ELSE
        StandardCustomerSalesCode.InsertSalesLines(SalesHeader);
    END;

    [External]
    PROCEDURE GetPurchRecurringLines@4(PurchHeader@1010 : Record 38);
    VAR
      StandardVendorPurchaseCode@1012 : Record 175;
    BEGIN
      OnBeforeGetPurchRecurringLines(PurchHeader);

      StandardVendorPurchaseCode.SetFilterByAutomaticAndAlwaysAskCodes(PurchHeader);
      StandardVendorPurchaseCode.SETRANGE("Vendor No.",PurchHeader."Buy-from Vendor No.");
      StandardVendorPurchaseCode.FINDFIRST;
      IF (StandardVendorPurchaseCode.COUNT = 1) AND
         StandardVendorPurchaseCode.IsInsertRecurringLinesOnDocumentAutomatic(PurchHeader)
      THEN
        StandardVendorPurchaseCode.ApplyStdCodesToPurchaseLines(PurchHeader,StandardVendorPurchaseCode)
      ELSE
        StandardVendorPurchaseCode.InsertPurchLines(PurchHeader);
    END;

    LOCAL PROCEDURE IsSalesDocumentEmpty@6(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      EXIT(SalesLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsPurchDocumentEmpty@9(PurchaseHeader@1000 : Record 38) : Boolean;
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      EXIT(PurchaseLine.ISEMPTY);
    END;

    [External]
    PROCEDURE CheckShowSalesRecurringLinesNotification@2(VAR SalesHeader@1000 : Record 36);
    BEGIN
      IF CanGetSalesRecurringLines(SalesHeader) THEN
        ShowGetSalesRecurringLinesNotification(SalesHeader);
    END;

    [External]
    PROCEDURE CheckShowPurchRecurringLinesNotification@11(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      IF CanGetPurchRecurringLines(PurchaseHeader) THEN
        ShowGetPurchRecurringLinesNotification(PurchaseHeader);
    END;

    [External]
    PROCEDURE ShowGetSalesRecurringLinesNotification@7(SalesHeader@1001 : Record 36);
    VAR
      NotificationLifecycleMgt@1002 : Codeunit 1511;
      StandardCodesExistNotification@1000 : Notification;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeShowGetSalesRecurringLinesNotification(SalesHeader,IsHandled);
      IF IsHandled THEN
        EXIT;

      StandardCodesExistNotification.ID := GetSalesRecurringLinesNotificationId;
      StandardCodesExistNotification.MESSAGE := STRSUBSTNO(GetSalesRecurringLinesQst,SalesHeader."Sell-to Customer No.");
      StandardCodesExistNotification.ADDACTION(
        GetRecurringLinesTxt,CODEUNIT::"Standard Codes Mgt.",'GetSalesRecurringLinesFromNotification');
      StandardCodesExistNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      StandardCodesExistNotification.SETDATA(SalesHeader.FIELDNAME("Document Type"),FORMAT(SalesHeader."Document Type"));
      StandardCodesExistNotification.SETDATA(SalesHeader.FIELDNAME("No."),SalesHeader."No.");
      NotificationLifecycleMgt.SendNotificationWithAdditionalContext(
        StandardCodesExistNotification,SalesHeader.RECORDID,GetSalesRecurringLinesNotificationId);
    END;

    [External]
    PROCEDURE ShowGetPurchRecurringLinesNotification@12(PurchHeader@1001 : Record 38);
    VAR
      NotificationLifecycleMgt@1002 : Codeunit 1511;
      StandardCodesExistNotification@1000 : Notification;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeShowGetPurchRecurringLinesNotification(PurchHeader,IsHandled);
      IF IsHandled THEN
        EXIT;

      StandardCodesExistNotification.ID := GetPurchRecurringLinesNotificationId;
      StandardCodesExistNotification.MESSAGE := STRSUBSTNO(GetPurchRecurringLinesQst,PurchHeader."Buy-from Vendor No.");
      StandardCodesExistNotification.ADDACTION(
        GetRecurringLinesTxt,CODEUNIT::"Standard Codes Mgt.",'GetPurchRecurringLinesFromNotification');
      StandardCodesExistNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      StandardCodesExistNotification.SETDATA(PurchHeader.FIELDNAME("Document Type"),FORMAT(PurchHeader."Document Type"));
      StandardCodesExistNotification.SETDATA(PurchHeader.FIELDNAME("No."),PurchHeader."No.");
      NotificationLifecycleMgt.SendNotificationWithAdditionalContext(
        StandardCodesExistNotification,PurchHeader.RECORDID,GetPurchRecurringLinesNotificationId);
    END;

    [External]
    PROCEDURE GetSalesRecurringLinesNotificationId@18() : GUID;
    BEGIN
      EXIT('5FBC61D4-9344-4BA4-A977-5C0E3A8E3BB9');
    END;

    [External]
    PROCEDURE GetPurchRecurringLinesNotificationId@1() : GUID;
    BEGIN
      EXIT('4C35449A-FA4C-4BA2-9982-3F9D08529052');
    END;

    [External]
    PROCEDURE GetSalesRecurringLinesFromNotification@20(Notification@1000 : Notification);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      IF NOT (Notification.HASDATA(SalesHeader.FIELDNAME("Document Type")) AND
              Notification.HASDATA(SalesHeader.FIELDNAME("No.")))
      THEN
        EXIT;

      EVALUATE(SalesHeader."Document Type",Notification.GETDATA(SalesHeader.FIELDNAME("Document Type")));
      SalesHeader.GET(
        SalesHeader."Document Type",
        Notification.GETDATA(SalesHeader.FIELDNAME("No.")));
      GetSalesRecurringLines(SalesHeader);
    END;

    [External]
    PROCEDURE GetPurchRecurringLinesFromNotification@10(Notification@1000 : Notification);
    VAR
      PurchHeader@1001 : Record 38;
    BEGIN
      IF NOT (Notification.HASDATA(PurchHeader.FIELDNAME("Document Type")) AND
              Notification.HASDATA(PurchHeader.FIELDNAME("No.")))
      THEN
        EXIT;

      EVALUATE(PurchHeader."Document Type",Notification.GETDATA(PurchHeader.FIELDNAME("Document Type")));
      PurchHeader.GET(
        PurchHeader."Document Type",
        Notification.GETDATA(PurchHeader.FIELDNAME("No.")));
      GetPurchRecurringLines(PurchHeader);
    END;

    [External]
    PROCEDURE CanGetSalesRecurringLines@13(VAR SalesHeader@1000 : Record 36) : Boolean;
    VAR
      StandardCustomerSalesCode@1002 : Record 172;
    BEGIN
      IF SalesHeader.ISTEMPORARY THEN
        EXIT(FALSE);

      IF SalesHeader."Sell-to Customer No." = '' THEN
        EXIT(FALSE);

      IF NOT IsSalesDocumentEmpty(SalesHeader) THEN
        EXIT(FALSE);

      IF SalesHeader."Document Type" IN
         [SalesHeader."Document Type"::"Blanket Order",SalesHeader."Document Type"::"Return Order"]
      THEN
        EXIT(FALSE);

      StandardCustomerSalesCode.SetFilterByAutomaticAndAlwaysAskCodes(SalesHeader);
      StandardCustomerSalesCode.SETRANGE("Customer No.",SalesHeader."Sell-to Customer No.");
      EXIT(NOT StandardCustomerSalesCode.ISEMPTY);
    END;

    [External]
    PROCEDURE CanGetPurchRecurringLines@5(VAR PurchHeader@1000 : Record 38) : Boolean;
    VAR
      StandardVendorPurchaseCode@1001 : Record 175;
    BEGIN
      IF PurchHeader.ISTEMPORARY THEN
        EXIT(FALSE);

      IF PurchHeader."Buy-from Vendor No." = '' THEN
        EXIT(FALSE);

      IF NOT IsPurchDocumentEmpty(PurchHeader) THEN
        EXIT(FALSE);

      IF PurchHeader."Document Type" IN
         [PurchHeader."Document Type"::"Blanket Order",PurchHeader."Document Type"::"Return Order"]
      THEN
        EXIT(FALSE);

      StandardVendorPurchaseCode.SetFilterByAutomaticAndAlwaysAskCodes(PurchHeader);
      StandardVendorPurchaseCode.SETRANGE("Vendor No.",PurchHeader."Buy-from Vendor No.");
      EXIT(NOT StandardVendorPurchaseCode.ISEMPTY);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetPurchRecurringLines@14(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetSalesRecurringLines@8(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowGetSalesRecurringLinesNotification@15(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowGetPurchRecurringLinesNotification@16(VAR PurchaseHeader@1000 : Record 38;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

