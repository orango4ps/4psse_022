OBJECT Codeunit 1208 Pmt Export Mgt Cust Ledg Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,NAVDK,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExportAgainQst@1002 : TextConst 'ENU=One or more of the selected lines has already been exported. Do you want to export it again?;NOR=ên eller flere av de valgte linjene er allerede eksportert. Vil du eksportere den pÜ nytt?;SVE=Minst en av de valda raderna har redan exporterats. Vill du exportera den igen?';
      ProgressMsg@1001 : TextConst 'ENU=Processing line no. #1######.;NOR=Behandler linje nr. #1######.;SVE=Behandlar rad nr #1######.';
      PaymentExportMgt@1000 : Codeunit 1210;
      GLSetup@1100285500 : Record 98;
      gotGLSetup@1100285501 : Boolean;

    [Internal]
    PROCEDURE ExportCustPaymentFileYN@7(VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      IF IsCustLedgerEntryExported(CustLedgerEntry) OR IsAppliedToCustPaymentExported(CustLedgerEntry) THEN
        IF NOT CONFIRM(ExportAgainQst) THEN
          EXIT;
      ExportCustPaymentFile(CustLedgerEntry);
    END;

    LOCAL PROCEDURE IsCustLedgerEntryExported@28(VAR CustLedgerEntry@1000 : Record 21) : Boolean;
    VAR
      CustLedgerEntry2@1001 : Record 21;
    BEGIN
      // In case of selecting more than one line on the page.
      IF CustLedgerEntry.MARKEDONLY THEN
        WITH CustLedgerEntry2 DO BEGIN
          MARKEDONLY(TRUE);
          SETRANGE("Exported to Payment File",TRUE);
          EXIT(NOT ISEMPTY);
        END;

      // In case of selecting one line on the page or passing a variable directly.
      IF CustLedgerEntry.HASFILTER THEN
        WITH CustLedgerEntry2 DO BEGIN
          COPYFILTERS(CustLedgerEntry);
          SETRANGE("Exported to Payment File",TRUE);
          EXIT(NOT ISEMPTY);
        END;

      // The case of a record not being passed via the user interface is not supported.
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsAppliedToCustPaymentExported@33(VAR CustLedgerEntry@1000 : Record 21) : Boolean;
    VAR
      AppliedToCustLedgerEntry@1002 : Record 21;
      ExportCustLedgerEntry@1001 : Record 21;
    BEGIN
      CASE TRUE OF
        CustLedgerEntry.MARKEDONLY:
          ExportCustLedgerEntry.MARKEDONLY(TRUE);
        CustLedgerEntry.HASFILTER:
          BEGIN
            ExportCustLedgerEntry.COPYFILTERS(CustLedgerEntry);
            ExportCustLedgerEntry.FINDSET;
          END;
        ELSE
          ExportCustLedgerEntry.COPY(CustLedgerEntry);
      END;

      AppliedToCustLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
      REPEAT
        AppliedToCustLedgerEntry.SETRANGE("Closed by Entry No.",ExportCustLedgerEntry."Entry No.");
        IF NOT AppliedToCustLedgerEntry.ISEMPTY THEN
          EXIT(TRUE);
      UNTIL ExportCustLedgerEntry.NEXT = 0;

      EXIT(FALSE);
    END;

    [Internal]
    PROCEDURE ExportCustPaymentFile@112(VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Pmt. Export Cust. Ledger Check",CustLedgerEntry);
      ExportCustLedgerEntry(CustLedgerEntry);
      SetExportFlagOnCustLedgerEntries(CustLedgerEntry);
    END;

    [Internal]
    PROCEDURE ExportCustLedgerEntry@19(VAR CustLedgerEntry@1000 : Record 21);
    VAR
      CustLedgerEntry2@1004 : Record 21;
      DataExch@1001 : Record 1220;
      Window@1003 : Dialog;
      LineNo@1002 : Integer;
      LineAmount@1050 : Decimal;
      TransferDate@1051 : Date;
      TotalAmount@1052 : Decimal;
      HandledGenJnlDataExchLine@1053 : Boolean;
      HandledPaymentExportVendLedgerEntry@1054 : Boolean;
    BEGIN
      CustLedgerEntry2.COPY(CustLedgerEntry);
      PaymentExportMgt.CreateDataExch(DataExch,CustLedgerEntry2."Bal. Account No.");
      Window.OPEN(ProgressMsg);
      REPEAT
        LineNo += 1;
        Window.UPDATE(1,LineNo);
        OnBeforeCreateCustLedgerDataExchLine(DataExch,CustLedgerEntry2,LineNo,LineAmount,
          TotalAmount,TransferDate,HandledGenJnlDataExchLine);
        IF NOT HandledGenJnlDataExchLine THEN
        CreateCustLedgerDataExchLine(DataExch."Entry No.",CustLedgerEntry2,LineNo,LineAmount,TransferDate);
        TotalAmount += LineAmount;
      UNTIL CustLedgerEntry2.NEXT = 0;
      Window.CLOSE;
      OnBeforePaymentExportCustLedgerEntry(CustLedgerEntry."Bal. Account No.",DataExch."Entry No.",
        LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
      GetGLSetup;  //4PSSE.DK
      IF GLSetup."Danish Localization Active" THEN
        ExportDataFromBuffer(CustLedgerEntry."Bal. Account No.",DataExch."Entry No.",LineNo,TotalAmount,TransferDate)  //NAVDK
      ELSE
      IF NOT HandledPaymentExportVendLedgerEntry THEN
        PaymentExportMgt.ExportToFile(DataExch."Entry No.")
    END;

    LOCAL PROCEDURE CreateCustLedgerDataExchLine@20(DataExchEntryNo@1000 : Integer;CustLedgerEntry@1001 : Record 21;LineNo@1002 : Integer;VAR PmtExportLineAmount@1060001 : Decimal;VAR PmtExportTransferDate@1060000 : Date);
    VAR
      PaymentExportData@1003 : Record 1226;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        PreparePaymentExportDataCLE(PaymentExportData,CustLedgerEntry,DataExchEntryNo,LineNo);
        PmtExportLineAmount := PaymentExportData.Amount;
        PmtExportTransferDate := PaymentExportData."Transfer Date";
        PaymentExportMgt.CreatePaymentLines(PaymentExportData);
      END;
    END;

    [External]
    PROCEDURE PreparePaymentExportDataCLE@14(VAR TempPaymentExportData@1000 : TEMPORARY Record 1226;CustLedgerEntry@1001 : Record 21;DataExchEntryNo@1003 : Integer;LineNo@1007 : Integer);
    VAR
      Customer@1006 : Record 18;
      CustomerBankAccount@1008 : Record 287;
      GeneralLedgerSetup@1002 : Record 98;
      PaymentMethod@1009 : Record 289;
      BankAccount@1005 : Record 270;
      BankExportImportSetup@1004 : Record 1200;
    BEGIN
      GeneralLedgerSetup.GET;
      Customer.GET(CustLedgerEntry."Customer No.");
      CustomerBankAccount.GET(CustLedgerEntry."Customer No.",CustLedgerEntry."Recipient Bank Account");

      WITH TempPaymentExportData DO BEGIN
        BankAccount.GET(CustLedgerEntry."Bal. Account No.");
        BankAccount.GetBankExportImportSetup(BankExportImportSetup);
        SetPreserveNonLatinCharacters(BankExportImportSetup."Preserve Non-Latin Characters");

        INIT;
        "Data Exch Entry No." := DataExchEntryNo;
        "Sender Bank Account Code" := CustLedgerEntry."Bal. Account No.";

        IF BankAccount."Country/Region Code" = CustomerBankAccount."Country/Region Code" THEN BEGIN
          CustLedgerEntry.CALCFIELDS("Amount (LCY)");
          Amount := CustLedgerEntry."Amount (LCY)";
          "Currency Code" := GeneralLedgerSetup."LCY Code";
        END ELSE BEGIN
          CustLedgerEntry.CALCFIELDS(Amount);
          Amount := CustLedgerEntry.Amount;
          "Currency Code" := GeneralLedgerSetup.GetCurrencyCode(CustLedgerEntry."Currency Code");
        END;

        "Recipient Bank Acc. No." :=
          COPYSTR(CustomerBankAccount.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
        "Recipient Reg. No." := CustomerBankAccount."Bank Branch No.";
        "Recipient Acc. No." := CustomerBankAccount."Bank Account No.";
        "Recipient Bank Country/Region" := CustomerBankAccount."Country/Region Code";
        "Recipient Bank Name" := COPYSTR(CustomerBankAccount.Name,1,35);
        "Recipient Bank Address" := COPYSTR(CustomerBankAccount.Address,1,35);
        "Recipient Bank City" := COPYSTR(CustomerBankAccount."Post Code" + CustomerBankAccount.City,1,35);
        "Recipient Bank BIC" := CustomerBankAccount."SWIFT Code";

        "Recipient Name" := COPYSTR(Customer.Name,1,35);
        "Recipient Address" := COPYSTR(Customer.Address,1,35);
        "Recipient City" := COPYSTR(Customer."Post Code" + ' ' + Customer.City,1,35);
        "Transfer Date" := CustLedgerEntry."Posting Date";
        "Message to Recipient 1" := COPYSTR(CustLedgerEntry."Message to Recipient",1,35);
        "Message to Recipient 2" := COPYSTR(CustLedgerEntry."Message to Recipient",36,70);
        "Document No." := CustLedgerEntry."Document No.";
        "Applies-to Ext. Doc. No." := CustLedgerEntry."Applies-to Ext. Doc. No.";
        "Short Advice" := CustLedgerEntry."Applies-to Ext. Doc. No.";
        "Line No." := LineNo;
        IF PaymentMethod.GET(CustLedgerEntry."Payment Method Code") THEN
          "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ExportDataFromBuffer@1060002(BalAccountNo@1060001 : Code[20];DataExchEntryNo@1060004 : Integer;LineCount@1060006 : Integer;TotalAmount@1060007 : Decimal;TransferDate@1060008 : Date);
    VAR
      BankAccount@1060000 : Record 270;
      BankExportImportSetup@1060002 : Record 1200;
      DataExchDef@1060003 : Record 1222;
      TempPaymentExportData@1060005 : TEMPORARY Record 1226;
      DataExch@1060009 : Record 1220;
    BEGIN
      GetGLSetup;  //4PSSE.DK
      IF NOT GLSetup."Danish Localization Active" THEN EXIT;
      BankAccount.GET(BalAccountNo);
      BankExportImportSetup.GET(BankAccount."Payment Export Format");
      DataExchDef.GET(BankExportImportSetup."Data Exch. Def. Code");
      IF DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Export BankData Fixed Width" THEN BEGIN
        TempPaymentExportData.INIT;
        TempPaymentExportData."Data Exch Entry No." := DataExchEntryNo;
        TempPaymentExportData."Line No." := LineCount;
        TempPaymentExportData.Amount := TotalAmount;
        TempPaymentExportData."Transfer Date" := TransferDate;
        TempPaymentExportData.INSERT;
        CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",TempPaymentExportData);
        DataExch.GET(DataExchEntryNo);
        CODEUNIT.RUN(DataExchDef."Ext. Data Handling Codeunit",DataExch);
      END ELSE
        PaymentExportMgt.ExportToFile(DataExchEntryNo);
    END;

    [External]
    PROCEDURE EnableExportToServerTempFile@27(SilentServerMode@1000 : Boolean;ServerFileExtension@1001 : Text[3]);
    BEGIN
      PaymentExportMgt.EnableExportToServerTempFile(SilentServerMode,ServerFileExtension);
    END;

    [External]
    PROCEDURE GetServerTempFileName@29() : Text[1024];
    BEGIN
      EXIT(PaymentExportMgt.GetServerTempFileName);
    END;

    LOCAL PROCEDURE SetExportFlagOnCustLedgerEntries@40(VAR CustLedgerEntry@1000 : Record 21);
    VAR
      CustLedgerEntry2@1001 : Record 21;
    BEGIN
      WITH CustLedgerEntry2 DO BEGIN
        COPY(CustLedgerEntry);
        REPEAT
          VALIDATE("Exported to Payment File",TRUE);
          CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgerEntry2);
        UNTIL NEXT = 0;
      END;
    END;

    [Integration]
    PROCEDURE OnBeforePaymentExportCustLedgerEntry@1214(BalAccountNo@1213 : Code[20];DataExchEntryNo@1214 : Integer;LineCount@1215 : Integer;TotalAmount@1216 : Decimal;TransferDate@1217 : Date;VAR Handled@1218 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeCreateCustLedgerDataExchLine@1213(DataExch@1219 : Record 1220;CustLedgerEntry@1218 : Record 21;LineNo@1217 : Integer;VAR LineAmount@1216 : Decimal;VAR TotalAmount@1215 : Decimal;VAR TransferDate@1214 : Date;VAR Handled@1213 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE GetGLSetup@1100285500();
    BEGIN
      //4PSSE.DK
      IF NOT gotGLSetup THEN
        GLSetup.GET;
      gotGLSetup := TRUE;
    END;

    BEGIN
    END.
  }
}

