OBJECT Report 393 Suggest Vendor Payments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Vendor Payments;
               NOR=Betalingsforslag - leverand›r;
               SVE=Betalningsf”rslag f”r lev.];
    ProcessingOnly=Yes;
    OnInitReport=VAR
                   PermissionManager@1000 : Codeunit 9002;
                 BEGIN
                   IF PermissionManager.SoftwareAsAService THEN
                     CheckOtherJournalBatches := TRUE;
                   GLSetup.GET;
                   FIinfoEnable := GLSetup."Finnish localization active";
                 END;

    OnPreReport=BEGIN
                  CompanyInformation.GET;
                  VendorLedgEntryTemp.DELETEALL;
                  ShowPostingDateWarning := FALSE;
                END;

    OnPostReport=VAR
                   ConfirmManagement@1000 : Codeunit 27;
                 BEGIN
                   COMMIT;
                   IF NOT VendorLedgEntryTemp.ISEMPTY THEN
                     IF ConfirmManagement.ConfirmProcessUI(Text024,TRUE) THEN
                       PAGE.RUNMODAL(0,VendorLedgEntryTemp);

                   IF CheckOtherJournalBatches THEN
                     IF NOT TempErrorMessage.ISEMPTY THEN
                       IF ConfirmManagement.ConfirmProcessUI(ReviewNotSuggestedLinesQst,TRUE) THEN
                         TempErrorMessage.ShowErrorMessages(FALSE);
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Blocked)
                                 WHERE(Blocked=FILTER(=' '));
               OnPreDataItem=VAR
                               ConfirmManagement@1000 : Codeunit 27;
                             BEGIN
                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text000);
                               IF (PostingDate = 0D) AND (NOT UseDueDateAsPostingDate) THEN
                                 ERROR(Text001);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := FALSE;
                               SeveralCurrencies := FALSE;
                               MessageText := '';

                               IF ((BankPmtType = GenJnlLine2."Bank Payment Type"::" ") OR
                                   SummarizePerVend) AND
                                  (NextDocNo = '')
                               THEN
                                 ERROR(Text002);

                               IF ((BankPmtType = GenJnlLine2."Bank Payment Type"::"Manual Check") AND
                                   NOT SummarizePerVend AND
                                   NOT DocNoPerLine)
                               THEN
                                 ERROR(Text017,GenJnlLine2.FIELDCAPTION("Bank Payment Type"),FORMAT(GenJnlLine2."Bank Payment Type"::"Manual Check"));

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text003,WORKDATE),TRUE) THEN
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Vendor);

                               OriginalAmtAvailable := AmountAvailable;
                               IF UsePriority THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text006);

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Vendor Payments");
                               SummarizePerDim := (NOT SelectedDim.ISEMPTY) AND SummarizePerVend;

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(VendorBalance);
                                  CALCFIELDS("Balance (LCY)");
                                  VendorBalance := "Balance (LCY)";

                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  IF (VendorBalance > 0) OR InclCreditMemo THEN BEGIN
                                    GetVendLedgEntries(TRUE,FALSE);
                                    GetVendLedgEntries(FALSE,FALSE);
                                    CheckAmounts(FALSE);
                                    ClearNegative;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FINDSET THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      IF (VendorBalance > 0) OR InclCreditMemo THEN BEGIN
                                        Window.UPDATE(1,"No.");
                                        GetVendLedgEntries(TRUE,FALSE);
                                        GetVendLedgEntries(FALSE,FALSE);
                                        CheckAmounts(FALSE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window2.OPEN(Text007);
                                  IF FINDSET THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      Window2.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      IF (VendorBalance > 0) OR InclCreditMemo THEN BEGIN
                                        GetVendLedgEntries(TRUE,TRUE);
                                        GetVendLedgEntries(FALSE,TRUE);
                                        CheckAmounts(TRUE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                  Window2.CLOSE;
                                END ELSE
                                  IF FINDSET THEN
                                    REPEAT
                                      ClearNegative;
                                    UNTIL NEXT = 0;

                                DimSetEntry.LOCKTABLE;
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                IF GenJnlLine.FINDLAST THEN BEGIN
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                END;

                                Window2.OPEN(Text008);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window2.CLOSE;
                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=No.,Payment Method Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               SummarizePerDimTextEnable := TRUE;
               SkipExportedPayments := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF LastDueDateToPayReq = 0D THEN
                     LastDueDateToPayReq := WORKDATE;
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   ValidatePostingDate;
                   SetDefaults;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 4   ;2   ;Group     ;
                  CaptionML=[ENU=Find Payments;
                             NOR=S›k etter betalinger;
                             SVE=Hitta betalningar];
                  GroupType=Group }

      { 1   ;3   ;Field     ;
                  Name=LastPaymentDate;
                  CaptionML=[ENU=Last Payment Date;
                             NOR=Siste betalingsdato;
                             SVE=Senaste betalningsdatum];
                  ToolTipML=[ENU=Specifies the latest payment date that can appear on the vendor ledger entries to be included in the batch job. Only entries that have a due date or a payment discount date before or on this date will be included. If the payment date is earlier than the system date, a warning will be displayed.;
                             NOR=Angir siste betalingsdato i leverand›rposter som skal v‘re med i kj›rselen. Kj›rselen tar bare med poster med forfallsdato eller kontantrabattdato f›r eller etter denne datoen. Hvis betalingsdatoen kommer f›r systemdatoen, vil det bli gitt en advarsel.;
                             SVE=Anger det senaste betalningsdatumet som kan f”rekomma p† leverant”rsreskontratransaktionerna, och som ska tas med i batch-jobbet. Det „r bara ”ppna transaktioner som har ett f”rfallodatum eller kassarabattsdatum tidigare eller lika med det h„r datumet, som kommer att tas med. Om betalningsdatumet „r tidigare „n systemdatumet kommer en varning att visas.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=LastDueDateToPayReq }

      { 2   ;3   ;Field     ;
                  Name=FindPaymentDiscounts;
                  CaptionML=[ENU=Find Payment Discounts;
                             NOR=S›k etter kontantrabatter;
                             SVE=Utnyttja kassarabatter];
                  ToolTipML=[ENU=Specifies if you want the batch job to include vendor ledger entries for which you can receive a payment discount.;
                             NOR=Angir om du vil at kj›rselen skal ta med leverand›rposter som kan gi kontantrabatt.;
                             SVE=Anger att batch-jobbet ska ta med leverant”rsreskontratransaktioner, f”r vilka du kan erh†lla en kassarabatt.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePaymentDisc;
                  Importance=Additional;
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               IF UsePaymentDisc AND UseDueDateAsPostingDate THEN
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 3   ;3   ;Field     ;
                  Name=UseVendorPriority;
                  CaptionML=[ENU=Use Vendor Priority;
                             NOR=Bruk leverand›rprioritet;
                             SVE=Anv„nd leverant”rsprioritet];
                  ToolTipML=[ENU=Specifies if the Priority field on the vendor cards will determine in which order vendor entries are suggested for payment by the batch job. The batch job always prioritizes vendors for payment suggestions if you specify an available amount in the Available Amount (LCY) field.;
                             NOR=Angir om feltet Prioritet p† leverand›rkortene fastsl†r i hvilken rekkef›lge leverand›rposter blir foresl†tt for betaling av kj›rselen. Kj›rselen prioriterer alltid leverand›rer for betalingsforslag hvis du angir et tilgjengelig bel›p i feltet Disponibelt bel›p (NOK).;
                             SVE=Anger om f„ltet Prioritet p† leverant”rskortet ska best„mma i vilken ordning leverant”rstransaktionerna ska f”resl†s f”r betalning av batch-jobbet. Batch-jobbet prioriterar alltid leverant”rer f”r betalningsf”rslag om du anger ett disponibelt belopp i f„ltet Disponibelt belopp (BVA).];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePriority;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text011);
                             END;
                              }

      { 11  ;3   ;Field     ;
                  Name=Available Amount (LCY);
                  CaptionML=[ENU=Available Amount (LCY);
                             NOR=Disponibelt bel›p (NOK);
                             SVE=Disponibelt belopp (BVA)];
                  ToolTipML=[ENU=Specifies a maximum amount (in LCY) that is available for payments. The batch job will then create a payment suggestion on the basis of this amount and the Use Vendor Priority check box. It will only include vendor entries that can be paid fully.;
                             NOR=Angir et maksimumsbel›p (i NOK) som er tilgjengelig for betalinger. Kj›rselen oppretter deretter et betalingsforslag p† bakgrunn av dette bel›pet og avmerkingsboksen Bruk leverand›rprioritet. Den inkluderer bare leverand›rposter som kan betales fullstendig.;
                             SVE=Anger ett maximibelopp (i BVA) som „r tillg„ngligt f”r betalningar. Batch-jobbet skapar sedan ett betalningsf”rslag som grundar sig p† detta belopp och kryssrutan Anv„nd leverant”rsprioritet. Det tar bara med leverant”rstransaktioner som kan betalas helt (kan kopplas helt).];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AmountAvailable;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF AmountAvailable <> 0 THEN
                                 UsePriority := TRUE;
                             END;
                              }

      { 1090000;3;Field     ;
                  CaptionML=ENU=Send to Bank;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SendToBank;
                  Visible=FIinfoEnable }

      { 13  ;3   ;Field     ;
                  Name=SkipExportedPayments;
                  CaptionML=[ENU=Skip Exported Payments;
                             NOR=Hopp over eksporterte betalinger;
                             SVE=Hoppa ”ver exporterade betalningar];
                  ToolTipML=[ENU=Specifies if you do not want the batch job to insert payment journal lines for documents for which payments have already been exported to a bank file.;
                             NOR=Angir om du ikke vil at kj›rselen skal sette inn utbetalingskladdelinjer for dokumenter der betalinger allerede er eksportert til en bankfil.;
                             SVE=Anger om du inte vill att batch-jobbet ska infoga utbetalningsjournalrader f”r dokument f”r vilka betalningar redan har exporterats till en bankfil.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SkipExportedPayments;
                  Importance=Additional }

      { 19  ;3   ;Field     ;
                  Name=CheckOtherJournalBatches;
                  CaptionML=[ENU=Check Other Journal Batches;
                             NOR=Kontroller andre kladder];
                  ToolTipML=[ENU=Specifies whether to exclude payments that are already included in another journal batch from new suggested payments. This helps avoid duplicate payments.;
                             NOR=Angir om du skal utelate betalinger som allerede er inkludert i en annen kladd fra nye foresl†tte betalinger. Da unng†r dupliserte betalinger.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CheckOtherJournalBatches }

      { 7   ;2   ;Group     ;
                  CaptionML=[ENU=Summarize Results;
                             NOR=Summer resultater;
                             SVE=Sammanfatta resultat];
                  GroupType=Group }

      { 6   ;3   ;Field     ;
                  Name=SummarizePerVendor;
                  CaptionML=[ENU=Summarize per Vendor;
                             NOR=Summer per leverand›r;
                             SVE=Summering per leverant”r];
                  ToolTipML=[ENU=Specifies if you want the batch job to make one line per vendor for each currency in which the vendor has ledger entries. If, for example, a vendor uses two currencies, the batch job will create two lines in the payment journal for this vendor. The batch job then uses the Applies-to ID field when the journal lines are posted to apply the lines to vendor ledger entries. If you do not select this check box, then the batch job will make one line per invoice.;
                             NOR=Angir om du vil at kj›rselen skal opprette ‚n linje per leverand›r for hver valuta som leverand›ren har poster i. Hvis leverand›ren for eksempel bruker to valutatyper, oppretter kj›rselen to linjer i utbetalingskladden for denne leverand›ren. Kj›rselen bruker da feltet Utlignings-ID n†r kladdelinjene bokf›res for † utligne linjene til leverand›rpostene. Hvis du ikke merker av her, oppretter kj›rselen en linje per faktura.;
                             SVE=Anger om du vill att batch-jobbet skapar en rad per leverant”r f”r varje valuta, i vilken leverant”ren har transaktioner. Anv„nder en leverant”r t.ex. tv† valutor, skapar batch-jobbet tv† rader i utbetalningsjournalen f”r den leverant”ren. Batch-jobbet anv„nder sedan f„ltet Koppla till ID n„r journalraderna „r bokf”rda f”r att koppla till raderna i leverant”rsreskontratransaktionerna. Om du inte markerar den h„r kryssrutan skapar batch-jobbet en rad per faktura.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SummarizePerVend;
                  OnValidate=BEGIN
                               IF SummarizePerVend AND UseDueDateAsPostingDate THEN
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 17  ;3   ;Field     ;
                  Name=SummarizePerDimText;
                  CaptionML=[ENU=By Dimension;
                             NOR=Per dimensjon;
                             SVE=Per dimension];
                  ToolTipML=[ENU=Specifies the dimensions that you want the batch job to consider.;
                             NOR=Angir dimensjonene du vil at kj›rselen skal vurdere.;
                             SVE=Anger de dimensioner som du vill att batch-jobbet ska ”verv„ga.];
                  ApplicationArea=#Dimensions;
                  SourceExpr=SummarizePerDimText;
                  Importance=Additional;
                  Enabled=SummarizePerDimTextEnable;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record 368;
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Suggest Vendor Payments",SummarizePerDimText);
                               END;
                                }

      { 8   ;2   ;Group     ;
                  CaptionML=[ENU=Fill in Journal Lines;
                             NOR=Fyll ut kladdelinjer;
                             SVE=Fyll i journalrader];
                  GroupType=Group }

      { 5   ;3   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             NOR=Bokf›ringsdato;
                             SVE=Bokf”ringsdatum];
                  ToolTipML=[ENU=Specifies the date for the posting of this batch job. By default, the working date is entered, but you can change it.;
                             NOR=Angir datoen for bokf›ring av denne kj›rselen. Som standard oppgis arbeidsdatoen, men du kan endre den.;
                             SVE=Anger datumet f”r bokf”ringen av detta batch-jobb. Arbetsdatumet anges standard, men du kan „ndra det.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate;
                  Importance=Promoted;
                  Editable=UseDueDateAsPostingDate = FALSE;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 16  ;3   ;Field     ;
                  Name=UseDueDateAsPostingDate;
                  CaptionML=[ENU=Calculate Posting Date from Applies-to-Doc. Due Date;
                             NOR=Beregn bokf›ringsdato fra forfallsdato for utligningsbilag;
                             SVE=Ber„kna bokf”ringsdatum fr†n dokumentets f”rfallodatum];
                  ToolTipML=[ENU=Specifies if the due date on the purchase invoice will be used as a basis to calculate the payment posting date.;
                             NOR=Angir om forfallsdatoen p† kj›psfakturaen skal brukes som grunnlag til † beregne bokf›ringsdatoen for betaling.;
                             SVE=Anger om f”rfallodatum p† ink”psfakturan ska anv„ndas som utg†ngspunkt f”r att ber„kna betalningens bokf”ringsdatum.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UseDueDateAsPostingDate;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF UseDueDateAsPostingDate AND (SummarizePerVend OR UsePaymentDisc) THEN
                                 ERROR(PmtDiscUnavailableErr);
                               IF NOT UseDueDateAsPostingDate THEN
                                 CLEAR(DueDateOffset);
                             END;
                              }

      { 15  ;3   ;Field     ;
                  Name=DueDateOffset;
                  CaptionML=[ENU=Applies-to-Doc. Due Date Offset;
                             NOR=Forskyvning av forfallsdato for utligningsbilag;
                             SVE=Dokumentets f”rfallodatum „r f”rskjutet];
                  ToolTipML=[ENU=Specifies a period of time that will separate the payment posting date from the due date on the invoice. Example 1: To pay the invoice on the Friday in the week of the due date, enter CW-2D (current week minus two days). Example 2: To pay the invoice two days before the due date, enter -2D (minus two days).;
                             NOR=Angir en tidsperiode som skiller bokf›ringsdatoen for betalingen fra forfallsdatoen p† fakturaen. Eksempel 1: Hvis du vil betale fakturaen p† fredagen i forfallsdatoens uke, angir du GU-2D (gjeldende uke minus to dager). Eksempel 2: Hvis du vil betale fakturaen to dager f›r forfallsdatoen, angir du -2D (minus to dager).;
                             SVE=Anger en tidsperiod som ska avgr„nsa betalningbokf”ringsdatumet fr†n f”rfallodatumet p† fakturan. Exempel 1: Ange LV-2D (aktuell vecka minus tv† dagar) f”r att betala fakturan p† fredag i veckan med f”rfallodatum). Exempel 2: Ange -2D (minus tv† dagar) f”r att betala fakturan tv† dagar f”re f”rfallodatumet.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DueDateOffset;
                  Importance=Additional;
                  Enabled=UseDueDateAsPostingDate;
                  Editable=UseDueDateAsPostingDate }

      { 9   ;3   ;Field     ;
                  Name=StartingDocumentNo;
                  CaptionML=[ENU=Starting Document No.;
                             NOR=Startbilagsnr.;
                             SVE=Fr.o.m. dokumentnr];
                  ToolTipML=[ENU=Specifies the next available number in the number series for the journal batch that is linked to the payment journal. When you run the batch job, this is the document number that appears on the first payment journal line. You can also fill in this field manually.;
                             NOR=Angir det neste tilgjengelige nummeret i nummerserien for kladden som er knyttet til betalingskladden. N†r du kj›rer kj›rselen, er det dette dokumentnummeret som vises p† den f›rste betalingskladdelinjen. Du kan ogs† fylle ut dette feltet manuelt.;
                             SVE=Anger n„sta tillg„ngliga nummer i nummerserien f”r den journal som „r kopplad till utbetalningsjournalen. N„r du k”r batch-jobbet visas det h„r dokumentnumret p† den f”rsta utbetalningsjournalraden. Du kan „ven fylla i f„ltet manuellt.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NextDocNo;
                  OnValidate=VAR
                               TextManagement@1000 : Codeunit 41;
                             BEGIN
                               IF NextDocNo <> '' THEN
                                 TextManagement.EvaluateIncStr(NextDocNo,StartingDocumentNoErr);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=NewDocNoPerLine;
                  CaptionML=[ENU=New Doc. No. per Line;
                             NOR=Nytt bilagsnr. per linje;
                             SVE=Nytt ver.nr per rad];
                  ToolTipML=[ENU=Specifies if you want the batch job to fill in the payment journal lines with consecutive document numbers, starting with the document number specified in the Starting Document No. field.;
                             NOR=Angir om du vil at kj›rselen skal fylle ut betalingskladdelinjene med dokumentnumre i nummerrekkef›lge, med utgangspunkt i nummeret som er angitt i feltet Startdokumentnr.;
                             SVE=Anger om du vill att batch-jobbet ska fylla i utbetalningsjournalraderna med dokumentnummer i nummerordning och b”rja med dokumentnumret som angetts i f„ltet Fr.o.m. dokumentnr.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocNoPerLine;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text013);
                             END;
                              }

      { 10  ;3   ;Field     ;
                  Name=BalAccountType;
                  CaptionML=[ENU=Bal. Account Type;
                             NOR=Motkontotype;
                             SVE=Motkontotyp];
                  ToolTipML=[ENU=Specifies the balancing account type that payments on the payment journal are posted to.;
                             NOR=Angir motkontotypen som betalinger i utbetalingskladden bokf›res i.;
                             SVE=Anger typen av balanskonto som betalningar i utbetalningsjournalen bokf”rs till.];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   NOR=Finanskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               GenJnlLine2."Bal. Account No." := '';
                             END;
                              }

      { 12  ;3   ;Field     ;
                  Name=BalAccountNo;
                  CaptionML=[ENU=Bal. Account No.;
                             NOR=Motkontonr.;
                             SVE=Motkonto];
                  ToolTipML=[ENU=Specifies the balancing account number that payments on the payment journal are posted to.;
                             NOR=Angir motkontonummeret som betalinger i utbetalingskladden bokf›res til.;
                             SVE=Anger numret f”r balanskontot som betalningar i utbetalningsjournalen bokf”rs till.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account No.";
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF GenJnlLine2."Bal. Account No." <> '' THEN
                                 CASE GenJnlLine2."Bal. Account Type" OF
                                   GenJnlLine2."Bal. Account Type"::"G/L Account":
                                     GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                   GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                     ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                                   GenJnlLine2."Bal. Account Type"::"Bank Account":
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                                 END;
                             END;

                  OnLookup=BEGIN
                             CASE GenJnlLine2."Bal. Account Type" OF
                               GenJnlLine2."Bal. Account Type"::"G/L Account":
                                 IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := GLAcc."No.";
                               GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                 ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                               GenJnlLine2."Bal. Account Type"::"Bank Account":
                                 IF PAGE.RUNMODAL(0,BankAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := BankAcc."No.";
                             END;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  Name=BankPaymentType;
                  CaptionML=[ENU=Bank Payment Type;
                             NOR=Bankbetalingstype;
                             SVE=Bankbetalningstyp];
                  ToolTipML=[ENU=Specifies the check type to be used, if you use Bank Account as the balancing account type.;
                             NOR=Angir sjekktypen som skal brukes hvis du bruker Bankkonto som motkontotype.;
                             SVE=Anger vilken checktyp som ska anv„ndas, om du anv„nder Bankkonto som balanskontotyp.];
                  OptionCaptionML=[ENU=" ,Computer Check,Manual Check";
                                   NOR=" ,Maskinell sjekk,Manuell sjekk";
                                   SVE=" ,Datorcheck,Handskriven check"];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bank Payment Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF (GenJnlLine2."Bal. Account Type" <> GenJnlLine2."Bal. Account Type"::"Bank Account") AND
                                  (GenJnlLine2."Bank Payment Type" > 0)
                               THEN
                                 ERROR(
                                   Text010,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),
                                   GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                             END;
                              }

      { 1070000;2;Field     ;
                  CaptionML=[ENU=Payment Immediately;
                             NOR=Umiddelbar Betaling;
                             SVE=Omedelbar betalning];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PmtImmediatly }

      { 1070002;2;Field     ;
                  Name=AlwaysInclCreditMemo;
                  CaptionML=[ENU=Always Include Credit Memos;
                             NOR=Inkluder Alltid kreditnotaer;
                             SVE=Inkludera alltid kreditnotor];
                  ToolTipML=SVE=Anger om vill ta med kreditnoteinformation i rapporten.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=InclCreditMemo }

      { 1100285100;2;Field  ;
                  CaptionML=[ENU=Include negative balance per Vendor;
                             NOR=Inkluder negativ saldo per Vendor;
                             SVE=Inkludera negativt saldo per leverant”r];
                  SourceExpr=InclNegBalance }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=In the Last Payment Date field, specify the last possible date that payments must be made.;NOR=I feltet Siste betalingsdato angir du den siste mulige datoen som betalinger m† bli utf›rt p†.;SVE=I f„ltet Senaste betalningsdatum anger du datumet d† betalningen senast m†ste ske.';
      Text001@1001 : TextConst 'ENU=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.;NOR=I feltet Bokf›ringsdato angir datoen som skal brukes som bokf›ringsdato for journaloppf›ringene.;SVE=I f„ltet Bokf”ringsdatum anger du datumet som ska anv„ndas som bokf”ringsdatum f”r journalposterna.';
      Text002@1002 : TextConst 'ENU=In the Starting Document No. field, specify the first document number to be used.;NOR=I feltet Startbilagsnr. angir du det f›rste bilagsnummeret som skal brukes.;SVE=I f„ltet Fr.o.m. verifikationsnr anger du f”rsta dokumentnumret som ska anv„ndas.';
      Text003@1003 : TextConst '@@@=%1 is a date;ENU=The payment date is earlier than %1.\\Do you still want to run the batch job?;NOR=Betalingsdato er f›r %1.\\Vil du fremdeles starte kj›rselen?;SVE=Betalningsdatumet „r tidigare „n %1.\\Vill du fortfarande k”ra batchjobbet?';
      Text005@1005 : TextConst 'ENU=The batch job was interrupted.;NOR=Kj›rselen ble avbrutt.;SVE=Batch-jobbet blev avbrutet.';
      Text006@1006 : TextConst 'ENU=Processing vendors     #1##########;NOR=Behandler leverand›rer                   #1##########;SVE=Behandlar leverant”rer                   #1##########';
      Text007@1007 : TextConst 'ENU=Processing vendors for payment discounts #1##########;NOR=Behandler leverand›rer for kontantrabatt #1##########;SVE=Behandlar leverant”rers kassarabatter    #1##########';
      Text008@1008 : TextConst 'ENU=Inserting payment journal lines #1##########;NOR=Setter inn betalingskladdelinjer         #1##########;SVE=Infogar utbetalningsjnlrader             #1##########';
      Text009@1009 : TextConst 'ENU=%1 must be G/L Account or Bank Account.;NOR=%1 m† v‘re en finans- eller bankkonto.;SVE=%1 m†ste vara ett redovisningskonto eller ett bankkonto.';
      Text010@1010 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.;NOR=%1 skal bare fylles ut n†r %2 er en bankkonto.;SVE=%1 m†ste endast fyllas i n„r %2 „r ett bankkonto.';
      Text011@1011 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.;NOR=Bruk leverand›rprioritet m† aktiveres n†r verdien i feltet Disponibelt bel›p ikke er 0.;SVE=Anv„nd leverant”rsprioritet m†ste aktiveras n„r v„rdet i f„ltet disponibelt belopp inte „r noll.';
      Text013@1013 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available Amount (LCY) field is not 0.;NOR=Bruk leverand›rprioritet m† aktiveres n†r verdien i feltet Disponibelt bel›p (NOK) ikke er 0.;SVE=Anv„nd leverant”rsprioritet m†ste aktiveras n„r v„rdet i f„ltet disponibelt belopp (BVA) inte „r noll.';
      Text017@1017 : TextConst '@@@="If Bank Payment Type = Computer Check and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";ENU="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";NOR="Hvis %1 = %2 og du ikke har valgt feltet Summer per leverand›r,\ m† du velge Nytt bilagsnr. per linje.";SVE="Om %1 = %2 och du inte har valt f„ltet Summering per leverant”r,\ m†ste du v„lja Nytt ver.nr per rad."';
      Text020@1020 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR.\ However, there are other open vendor ledger entries in currencies other than EUR.;ENU=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.\\;NOR=Du har bare opprettet foresl†tte leverand›rbetalingslinjer for %1 %2.\ Det finnes imidlertid andre †pne leverand›rposter i andre valutaer enn %2.\\;SVE=Du har endast skapat rader med betalningsf”rslag f”r leverant”rer f”r %1 %2.\ Det finns emellertid andra ”ppna leverant”rsreskontratransaktioner i andra valutor „n %2.\\';
      Text021@1021 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR\ There are no other open vendor ledger entries in other currencies.\\;ENU=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.\\;NOR=Du har bare opprettet foresl†tte leverand›rbetalingslinjer for %1 %2.\ Det finnes ingen andre †pne leverand›rposter i andre valutaer.\\;SVE=Du har endast skapat rader med betalningsf”rslag f”r leverant”rer f”r %1 %2.\ Det finns inga ”ppna leverant”rsreskontratransaktioner i andra valutor.\\';
      Text022@1022 : TextConst 'ENU=You have created suggested vendor payment lines for all currencies.\\;NOR=Du har opprettet foresl†tte leverand›rbetalingslinjer for alle valutaer.\\;SVE=Du har skapat betalningsf”rslagsrader (lev.) f”r alla valutor.\\';
      Vend2@1023 : Record 23;
      GenJnlTemplate@1024 : Record 80;
      GenJnlBatch@1025 : Record 232;
      GenJnlLine@1026 : Record 81;
      DimSetEntry@1027 : Record 480;
      GenJnlLine2@1028 : Record 81;
      VendLedgEntry@1029 : Record 25;
      GLAcc@1030 : Record 15;
      BankAcc@1031 : Record 270;
      PayableVendLedgEntry@1032 : TEMPORARY Record 317;
      CompanyInformation@1062 : Record 79;
      TempPaymentBuffer@1033 : TEMPORARY Record 372;
      OldTempPaymentBuffer@1034 : TEMPORARY Record 372;
      SelectedDim@1035 : Record 369;
      VendorLedgEntryTemp@1102601000 : TEMPORARY Record 25;
      TempErrorMessage@1037 : TEMPORARY Record 700;
      NoSeriesMgt@1036 : Codeunit 396;
      DimMgt@1038 : Codeunit 408;
      DimBufMgt@1018 : Codeunit 411;
      Window@1039 : Dialog;
      Window2@1004 : Dialog;
      UsePaymentDisc@1040 : Boolean;
      PostingDate@1041 : Date;
      LastDueDateToPayReq@1042 : Date;
      NextDocNo@1043 : Code[20];
      AmountAvailable@1044 : Decimal;
      OriginalAmtAvailable@1045 : Decimal;
      UsePriority@1046 : Boolean;
      SummarizePerVend@1047 : Boolean;
      SummarizePerDim@1048 : Boolean;
      SummarizePerDimText@1049 : Text[250];
      LastLineNo@1051 : Integer;
      NextEntryNo@1052 : Integer;
      DueDateOffset@1118 : DateFormula;
      UseDueDateAsPostingDate@1066 : Boolean;
      StopPayments@1053 : Boolean;
      DocNoPerLine@1054 : Boolean;
      BankPmtType@1055 : Option;
      BalAccType@1056 : 'G/L Account,Customer,Vendor,Bank Account';
      BalAccNo@1057 : Code[20];
      MessageText@1058 : Text;
      GenJnlLineInserted@1059 : Boolean;
      SeveralCurrencies@1060 : Boolean;
      Text024@1102601001 : TextConst 'ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?;NOR=Det er ‚n eller flere poster hvor det ikke er lagt inn betalingsforslag fordi bokf›ringsdatoene for postene er senere enn den forespurte bokf›ringsdatoen. Vil du se postene?;SVE=Det finns en eller flera poster f”r vilka inga betalningsf”rslag har gjorts, eftersom deras bokf”ringsdatum „r senare „n det beg„rda bokf”ringsdatumet. Vill du visa dessa poster?';
      SummarizePerDimTextEnable@19039578 : Boolean INDATASET;
      Text025@1063 : TextConst 'ENU=The %1 with the number %2 has a %3 with the number %4.;NOR=%1 med nummeret %2 har %3 med nummeret %4.;SVE=%1 med nummer %2 har en %3 med nummer %4.';
      ShowPostingDateWarning@1119 : Boolean;
      VendorBalance@1065 : Decimal;
      ReplacePostingDateMsg@1064 : TextConst 'ENU=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.;NOR=Den forespurte bokf›ringsdatoen for ‚n eller flere poster er tidligere enn arbeidsdatoen.\\Arbeidsdatoen brukes for disse bokf›ringsdatoene.;SVE=Det beg„rda bokf”ringsdatumet ligger f”re arbetsdatumet f”r en eller flera poster.\\Dessa bokf”ringsdatum kommer att anv„nda arbetsdatumet.';
      PmtDiscUnavailableErr@1067 : TextConst 'ENU=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.;NOR=Du kan ikke bruke S›k etter kontantrabatter eller Summer per leverand›r sammen med Beregn bokf›ringsdato fra forfallsdato for utligningsbilag, fordi den resulterende bokf›ringsdatoen kanskje ikke vil samsvare med kontantrabattdatoen.;SVE=Du kan inte anv„nda Hitta kassarabatter eller Sammanfatta efter leverant”r tillsammans med Ber„kna bokf”ringsdatum fr†n dokumentets f”rfallodatum, eftersom bokf”ringsdatumet kanske inte ”verensst„mmer med betalningsrabattdatumet.';
      SkipExportedPayments@1019 : Boolean;
      MessageToRecipientMsg@1068 : TextConst '@@@=%1 document type, %2 Document No.;ENU="Payment of %1 %2 ";NOR=Betaling av %1 %2;SVE=Betalning f”r %1 %2';
      StartingDocumentNoErr@1012 : TextConst 'ENU=Starting Document No.;NOR=Startbilagsnr.;SVE=Fr.o.m. dokumentnr';
      CheckOtherJournalBatches@1014 : Boolean;
      ReviewNotSuggestedLinesQst@1050 : TextConst 'ENU=There are payments in other journal batches that are not suggested here. This helps avoid duplicate payments. To add them to this batch, remove the payment from the other batch, and then suggest payments again.\\Do you want to review the payments from the other journal batches now?;NOR=Det finnes betalinger i andre kladder som ikke foresl†s her. Da unng†r dupliserte betalinger. Legg dem til i denne bunken ved † fjerne betalingen fra den andre kladden, og foresl† deretter betalinger igjen.\\Vil du se gjennom betalingene fra de andre kladdene n†?';
      NotSuggestedPaymentInfoTxt@1061 : TextConst '@@@=There are payments in Journal Template Name PAYMENT, Journal Batch Name GENERAL, Applies-to Doc. No. 101321;ENU=There are payments in %1 %2, %3 %4, %5 %6;NOR=Det finnes betalinger i %1 %2, %3 %4, %5 %6;SVE=" ,Datorcheck,Handskriven check,Elektronisk betalning"';
      PmtImmediatly@1070001 : Boolean;
      InclCreditMemo@1070004 : Boolean;
      SendToBank@1090000 : Boolean;
      GLSetup@11019 : Record 98;
      FIinfoEnable@11062 : Boolean INDATASET;
      InclNegBalance@1100285100 : Boolean;

    [External]
    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGenJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    [External]
    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewSkipExportedPayments@1009 : Boolean;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1007 : Code[20];BankPmtType@1008 : Option);
    BEGIN
      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
      SkipExportedPayments := NewSkipExportedPayments;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerVend := NewSummarizePerVend;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    LOCAL PROCEDURE GetVendLedgEntries@13(Positive@1000 : Boolean;Future@1001 : Boolean);
    VAR
      IsHandled@1002 : Boolean;
      RefPaymentLines@1090000 : Record 11126182;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("Applies-to ID",'');
      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq + 1,DMY2DATE(31,12,9999));
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Remaining Pmt. Disc. Possible",'<>0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      IF SkipExportedPayments THEN
        VendLedgEntry.SETRANGE("Exported to Payment File",FALSE);
      VendLedgEntry.SETRANGE("On Hold",'');
      VendLedgEntry.SETFILTER("Currency Code",Vendor.GETFILTER("Currency Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 1 Code",Vendor.GETFILTER("Global Dimension 1 Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 2 Code",Vendor.GETFILTER("Global Dimension 2 Filter"));

      IF VendLedgEntry.FINDSET THEN
        REPEAT
          IsHandled := FALSE;
          OnGetVendLedgEntriesOnBeforeLoop(VendLedgEntry,PostingDate,LastDueDateToPayReq,Future,IsHandled);
          //NAVFI
          IF GLSetup."Finnish localization active" AND SendToBank THEN BEGIN // + NSFI BANK
            RefPaymentLines.RESET;
            IF GenJnlLine2."Bal. Account Type" = 3 THEN
              RefPaymentLines.SETFILTER("Payment Account",GenJnlLine2."Bal. Account No.");
            RefPaymentLines.SETRANGE(Transferred,TRUE);
            RefPaymentLines.SETRANGE("Posted to G/L",FALSE);
            RefPaymentLines.SETRANGE("Entry No.",VendLedgEntry."Entry No.");
            RefPaymentLines.SETRANGE("Payment Date",0D,LastDueDateToPayReq);
            IF RefPaymentLines.FIND('-') THEN
              BEGIN
                PostingDate := RefPaymentLines."Payment Date";
                SaveAmount;
                IF (VendLedgEntry."Accepted Pmt. Disc. Tolerance") OR
                  (VendLedgEntry."Accepted Payment Tolerance" <> 0)
                THEN BEGIN
                  VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                  VendLedgEntry."Accepted Payment Tolerance" := 0;
                  CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
                END;
              END;
            END
          ELSE BEGIN // - NSFI BANK
          IF NOT IsHandled THEN BEGIN
            SaveAmount;
            IF VendLedgEntry."Accepted Pmt. Disc. Tolerance" OR (VendLedgEntry."Accepted Payment Tolerance" <> 0) THEN BEGIN
              VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
              VendLedgEntry."Accepted Payment Tolerance" := 0;
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END;
            END;
          END;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    VAR
      RefPaymentLines@1090000 : Record 11126182;
      PaymentToleranceMgt@1000 : Codeunit 426;
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        SetPostingDate(GenJnlLine,VendLedgEntry."Due Date",PostingDate);
        "Document Type" := "Document Type"::Payment;
        "Account Type" := "Account Type"::Vendor;
        Vend2.GET(VendLedgEntry."Vendor No.");
        Vend2.CheckBlockedVendOnJnls(Vend2,"Document Type",FALSE);
        Description := Vend2.Name;
        "Posting Group" := Vend2."Vendor Posting Group";
        "Salespers./Purch. Code" := Vend2."Purchaser Code";
        "Payment Terms Code" := Vend2."Payment Terms Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        VALIDATE("Payment Terms Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
      //IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE) //**4PS.o
        IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE,0)  //**4PS.n
        THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";
        VALIDATE(Amount);

        //NAVFI
        IF GLSetup."Finnish localization active" AND SendToBank THEN // + NSFI BANK
          BEGIN
            RefPaymentLines.RESET;
            IF GenJnlLine2."Bal. Account Type" = 3 THEN
              RefPaymentLines.SETFILTER("Payment Account",GenJnlLine2."Bal. Account No.");
            RefPaymentLines.SETRANGE(Transferred,TRUE);
            RefPaymentLines.SETRANGE("Posted to G/L",FALSE);
            RefPaymentLines.SETRANGE("Entry No.",VendLedgEntry."Entry No.");
            IF RefPaymentLines.FIND('-') THEN
              Amount := 0;
              REPEAT
                Amount := RefPaymentLines.Amount;
              UNTIL RefPaymentLines.NEXT = 0;
          END; // - NSFI BANK
      END;

      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Vendor.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenJnlLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    LOCAL PROCEDURE CheckAmounts@10(Future@1000 : Boolean);
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);

      IF PayableVendLedgEntry.FINDSET THEN BEGIN
        PrevCurrency := PayableVendLedgEntry."Currency Code";
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance > 0 THEN
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF (CurrencyBalance < 0) AND (NOT InclCreditMemo)
        THEN BEGIN
          PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Currency Code");
        END ELSE
          IF OriginalAmtAvailable > 0 THEN
            AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      GenJnlLine1@1010 : Record 81;
      DimBuf@1002 : Record 360;
      RemainingAmtAvailable@1008 : Decimal;
      HandledEntry@1000 : Boolean;
      RefPaymentLines@1090000 : Record 11126182;
    BEGIN
      TempPaymentBuffer.RESET;
      TempPaymentBuffer.DELETEALL;

      IF BalAccType = BalAccType::"Bank Account" THEN BEGIN
        CheckCurrencies(BalAccType,BalAccNo,PayableVendLedgEntry);
        SetBankAccCurrencyFilter(BalAccType,BalAccNo,PayableVendLedgEntry);
      END;

      IF OriginalAmtAvailable <> 0 THEN BEGIN
        RemainingAmtAvailable := OriginalAmtAvailable;
        RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
      END;
      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            SetPostingDate(GenJnlLine1,VendLedgEntry."Due Date",PostingDate);
            HandledEntry := VendLedgEntry."Posting Date" <= GenJnlLine1."Posting Date";
            OnBeforeHandledVendLedgEntry(VendLedgEntry,GenJnlLine1,HandledEntry);
            IF HandledEntry THEN BEGIN
              TempPaymentBuffer."Vendor No." := VendLedgEntry."Vendor No.";
              TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";
              TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
              TempPaymentBuffer."Creditor No." := VendLedgEntry."Creditor No.";
              TempPaymentBuffer."Giro Acc. No." := VendLedgEntry."Giro Acc. No.";  //NAVDK
              TempPaymentBuffer."Payment Reference" := VendLedgEntry."Payment Reference";
              TempPaymentBuffer."Exported to Payment File" := VendLedgEntry."Exported to Payment File";
              TempPaymentBuffer."Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
              OnUpdateTempBufferFromVendorLedgerEntry(TempPaymentBuffer,VendLedgEntry);

              SetTempPaymentBufferDims(DimBuf);

              VendLedgEntry.CALCFIELDS("Remaining Amount");

              IF IsNotAppliedEntry(GenJnlLine,VendLedgEntry) THEN
                IF SummarizePerVend THEN BEGIN
                  TempPaymentBuffer."Vendor Ledg. Entry No." := 0;
                  IF TempPaymentBuffer.FIND THEN BEGIN
                    TempPaymentBuffer.Amount := TempPaymentBuffer.Amount + PayableVendLedgEntry.Amount;
                    TempPaymentBuffer.MODIFY;
                  END ELSE BEGIN
                    TempPaymentBuffer."Document No." := NextDocNo;
                    NextDocNo := INCSTR(NextDocNo);
                    TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                    Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                    TempPaymentBuffer.INSERT;
                  END;
                  VendLedgEntry."Applies-to ID" := TempPaymentBuffer."Document No.";
                END ELSE BEGIN
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type" := VendLedgEntry."Document Type";
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No." := VendLedgEntry."Document No.";
                  TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                  TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
                  TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
                  TempPaymentBuffer."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;

                //NAVFI
                IF GLSetup."Finnish localization active" THEN BEGIN
                  // +NSFI BANK
                  TempPaymentBuffer."Message Type" := VendLedgEntry."Message Type";
                  TempPaymentBuffer."Invoice Message" := VendLedgEntry."Invoice Message";
                  RefPaymentLines.RESET;
                  IF GenJnlLine2."Bal. Account Type" = 3 THEN
                    RefPaymentLines.SETFILTER("Payment Account",GenJnlLine2."Bal. Account No.");
                  RefPaymentLines.SETRANGE(Transferred,TRUE);
                  RefPaymentLines.SETRANGE("Posted to G/L",FALSE);
                  RefPaymentLines.SETRANGE("Entry No.",VendLedgEntry."Entry No.");
                  IF RefPaymentLines.FIND('+') THEN BEGIN
                    TempPaymentBuffer."Bal. Account No." := RefPaymentLines."Payment Account";
                    TempPaymentBuffer."Payment Date" := RefPaymentLines."Payment Date";
                  END;
                  // -NSFI BANK
                END;

                  Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                  TempPaymentBuffer.INSERT;
                END;

              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END ELSE BEGIN
              VendorLedgEntryTemp := VendLedgEntry;
              VendorLedgEntryTemp.INSERT;
            END;

            PayableVendLedgEntry.DELETE;
            IF OriginalAmtAvailable <> 0 THEN BEGIN
              RemainingAmtAvailable := RemainingAmtAvailable - PayableVendLedgEntry."Amount (LCY)";
              RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
            END;

          UNTIL NOT PayableVendLedgEntry.FINDSET;
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentBuffer);
      //NAVFI
      // +NAFI BANK
      IF GLSetup."Finnish localization active" AND SendToBank THEN
        TempPaymentBuffer.SETCURRENTKEY("Payment Date","Vendor No.","Document No.")
      ELSE
      // -NSFI BANK
        TempPaymentBuffer.SETCURRENTKEY("Document No.");
      TempPaymentBuffer.SETFILTER(
        "Vendor Ledg. Entry Doc. Type",'<>%1&<>%2',TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Refund,
        TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Payment);

      IF TempPaymentBuffer.FIND('-') THEN
        REPEAT
          InsertGenJournalLine;
        UNTIL TempPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertGenJournalLine@27();
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        Window2.UPDATE(1,TempPaymentBuffer."Vendor No.");
        LastLineNo := LastLineNo + 10000;
        "Line No." := LastLineNo;
        "Document Type" := "Document Type"::Payment;
        "Posting No. Series" := GenJnlBatch."Posting No. Series";
        IF SummarizePerVend THEN
          "Document No." := TempPaymentBuffer."Document No."
        ELSE
          IF DocNoPerLine THEN BEGIN
            IF TempPaymentBuffer.Amount < 0 THEN
              "Document Type" := "Document Type"::Refund;

            "Document No." := NextDocNo;
            NextDocNo := INCSTR(NextDocNo);
          END ELSE
            IF (TempPaymentBuffer."Vendor No." = OldTempPaymentBuffer."Vendor No.") AND
               (TempPaymentBuffer."Currency Code" = OldTempPaymentBuffer."Currency Code")
            THEN
              "Document No." := OldTempPaymentBuffer."Document No."
            ELSE BEGIN
              "Document No." := NextDocNo;
              NextDocNo := INCSTR(NextDocNo);
              OldTempPaymentBuffer := TempPaymentBuffer;
              OldTempPaymentBuffer."Document No." := "Document No.";
            END;
        "Account Type" := "Account Type"::Vendor;
        SetHideValidation(TRUE);
        ShowPostingDateWarning := ShowPostingDateWarning OR
          SetPostingDate(GenJnlLine,GetApplDueDate(TempPaymentBuffer."Vendor Ledg. Entry No."),PostingDate);
        VALIDATE("Account No.",TempPaymentBuffer."Vendor No.");
        Vendor.GET(TempPaymentBuffer."Vendor No.");
        IF (Vendor."Pay-to Vendor No." <> '') AND (Vendor."Pay-to Vendor No." <> "Account No.") THEN
          MESSAGE(Text025,Vendor.TABLECAPTION,Vendor."No.",Vendor.FIELDCAPTION("Pay-to Vendor No."),
            Vendor."Pay-to Vendor No.");
        "Bal. Account Type" := BalAccType;
        VALIDATE("Bal. Account No.",BalAccNo);
        VALIDATE("Currency Code",TempPaymentBuffer."Currency Code");
        "Message to Recipient" := GetMessageToRecipient(SummarizePerVend);
        "Bank Payment Type" := BankPmtType;
        IF SummarizePerVend THEN
          "Applies-to ID" := "Document No.";
        Description := Vendor.Name;
        "Source Line No." := TempPaymentBuffer."Vendor Ledg. Entry No.";
        "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
        "Dimension Set ID" := TempPaymentBuffer."Dimension Set ID";
        "Source Code" := GenJnlTemplate."Source Code";
        "Reason Code" := GenJnlBatch."Reason Code";
        VALIDATE(Amount,TempPaymentBuffer.Amount);
        "Applies-to Doc. Type" := TempPaymentBuffer."Vendor Ledg. Entry Doc. Type";
        "Applies-to Doc. No." := TempPaymentBuffer."Vendor Ledg. Entry Doc. No.";
        "Payment Method Code" := TempPaymentBuffer."Payment Method Code";
        "Creditor No." := TempPaymentBuffer."Creditor No.";
            "Giro Acc. No." := TempPaymentBuffer."Giro Acc. No.";  //NAVDK
        "Payment Reference" := TempPaymentBuffer."Payment Reference";
        "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
        "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";
            UpdateVendorPaymentDetails;  //NAVDK

        OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer(GenJnlLine,TempPaymentBuffer);
        UpdateDimensions(GenJnlLine);
        INSERT;
        GenJnlLineInserted := TRUE;
      END;
    END;

    LOCAL PROCEDURE UpdateDimensions@17(VAR GenJnlLine@1005 : Record 81);
    VAR
      DimBuf@1002 : Record 360;
      TempDimSetEntry@1001 : TEMPORARY Record 480;
      TempDimSetEntry2@1000 : TEMPORARY Record 480;
      DimVal@1004 : Record 349;
      NewDimensionID@1003 : Integer;
      DimSetIDArr@1006 : ARRAY [10] OF Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        NewDimensionID := "Dimension Set ID";
        IF SummarizePerVend THEN BEGIN
          DimBuf.RESET;
          DimBuf.DELETEALL;
          DimBufMgt.GetDimensions(TempPaymentBuffer."Dimension Entry No.",DimBuf);
          IF DimBuf.FINDSET THEN
            REPEAT
              DimVal.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
              TempDimSetEntry."Dimension Code" := DimBuf."Dimension Code";
              TempDimSetEntry."Dimension Value Code" := DimBuf."Dimension Value Code";
              TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
              TempDimSetEntry.INSERT;
            UNTIL DimBuf.NEXT = 0;
          NewDimensionID := DimMgt.GetDimensionSetID(TempDimSetEntry);
          "Dimension Set ID" := NewDimensionID;
        END;
        CreateDim(
          DimMgt.TypeToTableID1("Account Type"),"Account No.",
          DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
          //**4PS.sn
          DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."),
          DATABASE::"Plant Type", "Plant Type",
          //**4PS.en
          DATABASE::Job,"Job No.",
          DATABASE::"Service Order","Service Order No.", //**4PS.n
          DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
          DATABASE::Campaign,"Campaign No.");
        IF NewDimensionID <> "Dimension Set ID" THEN BEGIN
          DimSetIDArr[1] := "Dimension Set ID";
          DimSetIDArr[2] := NewDimensionID;
          "Dimension Set ID" :=
            DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        END;

        IF SummarizePerVend THEN BEGIN
          DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
          IF AdjustAgainstSelectedDim(TempDimSetEntry,TempDimSetEntry2) THEN
            "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
            "Shortcut Dimension 2 Code");
        END;
      END;
    END;

    LOCAL PROCEDURE SetBankAccCurrencyFilter@11(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN
            TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code");
        END;
    END;

    LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text);
    BEGIN
      IF GenJnlLineInserted THEN BEGIN
        IF ShowPostingDateWarning THEN
          Text += ReplacePostingDateMsg;
        IF Text <> '' THEN
          MESSAGE(Text);
      END;
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
      TmpPayableVendLedgEntry2@1004 : TEMPORARY Record 317;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN BEGIN
            TmpPayableVendLedgEntry2.RESET;
            TmpPayableVendLedgEntry2.DELETEALL;
            IF TmpPayableVendLedgEntry.FINDSET THEN
              REPEAT
                TmpPayableVendLedgEntry2 := TmpPayableVendLedgEntry;
                TmpPayableVendLedgEntry2.INSERT;
              UNTIL TmpPayableVendLedgEntry.NEXT = 0;

            TmpPayableVendLedgEntry2.SETFILTER("Currency Code",'<>%1',BankAcc."Currency Code");
            SeveralCurrencies := SeveralCurrencies OR TmpPayableVendLedgEntry2.FINDFIRST;

            IF SeveralCurrencies THEN
              MessageText :=
                STRSUBSTNO(Text020,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code")
            ELSE
              MessageText :=
                STRSUBSTNO(Text021,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code");
          END ELSE
            MessageText := Text022;
        END;
    END;

    LOCAL PROCEDURE ClearNegative@8();
    VAR
      TempCurrency@1000 : TEMPORARY Record 4;
      PayableVendLedgEntry2@1001 : TEMPORARY Record 317;
      CurrencyBalance@1002 : Decimal;
    BEGIN
      CLEAR(PayableVendLedgEntry);
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");

      WHILE PayableVendLedgEntry.NEXT <> 0 DO BEGIN
        TempCurrency.Code := PayableVendLedgEntry."Currency Code";
        CurrencyBalance := 0;
        IF TempCurrency.INSERT THEN BEGIN
          PayableVendLedgEntry2 := PayableVendLedgEntry;
          PayableVendLedgEntry.SETRANGE("Currency Code",PayableVendLedgEntry."Currency Code");
          REPEAT
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          UNTIL PayableVendLedgEntry.NEXT = 0;
          //IF CurrencyBalance < 0 THEN
          IF (CurrencyBalance < 0) AND (NOT InclNegBalance) THEN BEGIN
            PayableVendLedgEntry.DELETEALL;
            AmountAvailable += CurrencyBalance;
          END;
          PayableVendLedgEntry.SETRANGE("Currency Code");
          PayableVendLedgEntry := PayableVendLedgEntry2;
        END;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE DimCodeIsInDimBuf@1101(DimCode@1111 : Code[20];DimBuf@1112 : Record 360) : Boolean;
    BEGIN
      DimBuf.RESET;
      DimBuf.SETRANGE("Dimension Code",DimCode);
      EXIT(NOT DimBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE RemovePaymentsAboveLimit@5(VAR PayableVendLedgEntry@1000 : Record 317;RemainingAmtAvailable@1001 : Decimal);
    BEGIN
      PayableVendLedgEntry.SETFILTER("Amount (LCY)",'>%1',RemainingAmtAvailable);
      PayableVendLedgEntry.DELETEALL;
      PayableVendLedgEntry.SETRANGE("Amount (LCY)");
    END;

    LOCAL PROCEDURE InsertDimBuf@9(VAR DimBuf@1004 : Record 360;TableID@1000 : Integer;EntryNo@1001 : Integer;DimCode@1002 : Code[20];DimValue@1003 : Code[20]);
    BEGIN
      DimBuf.INIT;
      DimBuf."Table ID" := TableID;
      DimBuf."Entry No." := EntryNo;
      DimBuf."Dimension Code" := DimCode;
      DimBuf."Dimension Value Code" := DimValue;
      DimBuf.INSERT;
    END;

    LOCAL PROCEDURE GetMessageToRecipient@18(SummarizePerVend@1000 : Boolean) : Text[140];
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      IF SummarizePerVend THEN
        EXIT(CompanyInformation.Name);

      VendorLedgerEntry.GET(TempPaymentBuffer."Vendor Ledg. Entry No.");
      IF VendorLedgerEntry."Message to Recipient" <> '' THEN
        EXIT(VendorLedgerEntry."Message to Recipient");

      EXIT(
        STRSUBSTNO(
          MessageToRecipientMsg,
          TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
          TempPaymentBuffer."Applies-to Ext. Doc. No."));
    END;

    LOCAL PROCEDURE SetPostingDate@92(VAR GenJnlLine@1002 : Record 81;DueDate@1001 : Date;PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF NOT UseDueDateAsPostingDate THEN BEGIN
        GenJnlLine.VALIDATE("Posting Date",PostingDate);
        EXIT(FALSE);
      END;

      IF DueDate = 0D THEN
        DueDate := GenJnlLine.GetAppliesToDocDueDate;
      EXIT(GenJnlLine.SetPostingDateAsDueDate(DueDate,DueDateOffset));
    END;

    LOCAL PROCEDURE GetApplDueDate@94(VendLedgEntryNo@1001 : Integer) : Date;
    VAR
      AppliedVendLedgEntry@1000 : Record 25;
    BEGIN
      IF AppliedVendLedgEntry.GET(VendLedgEntryNo) THEN
        EXIT(AppliedVendLedgEntry."Due Date");

      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE AdjustAgainstSelectedDim@16(VAR TempDimSetEntry@1000 : TEMPORARY Record 480;VAR TempDimSetEntry2@1003 : TEMPORARY Record 480) : Boolean;
    BEGIN
      IF SelectedDim.FINDSET THEN BEGIN
        REPEAT
          TempDimSetEntry.SETRANGE("Dimension Code",SelectedDim."Dimension Code");
          IF TempDimSetEntry.FINDFIRST THEN BEGIN
            TempDimSetEntry2.TRANSFERFIELDS(TempDimSetEntry,TRUE);
            TempDimSetEntry2.INSERT;
          END;
        UNTIL SelectedDim.NEXT = 0;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetTempPaymentBufferDims@12(VAR DimBuf@1000 : Record 360);
    VAR
      GLSetup@1003 : Record 98;
      EntryNo@1001 : Integer;
    BEGIN
      IF SummarizePerDim THEN BEGIN
        DimBuf.RESET;
        DimBuf.DELETEALL;
        IF SelectedDim.FINDSET THEN
          REPEAT
            IF DimSetEntry.GET(VendLedgEntry."Dimension Set ID",SelectedDim."Dimension Code") THEN
              InsertDimBuf(DimBuf,DATABASE::"Dimension Buffer",0,DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
          UNTIL SelectedDim.NEXT = 0;
        EntryNo := DimBufMgt.FindDimensions(DimBuf);
        IF EntryNo = 0 THEN
          EntryNo := DimBufMgt.InsertDimensions(DimBuf);
        TempPaymentBuffer."Dimension Entry No." := EntryNo;
        IF TempPaymentBuffer."Dimension Entry No." <> 0 THEN BEGIN
          GLSetup.GET;
          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 1 Code",DimBuf) THEN
            TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code"
          ELSE
            TempPaymentBuffer."Global Dimension 1 Code" := '';
          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 2 Code",DimBuf) THEN
            TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code"
          ELSE
            TempPaymentBuffer."Global Dimension 2 Code" := '';
        END ELSE BEGIN
          TempPaymentBuffer."Global Dimension 1 Code" := '';
          TempPaymentBuffer."Global Dimension 2 Code" := '';
        END;
        TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
      END ELSE BEGIN
        TempPaymentBuffer."Dimension Entry No." := 0;
        TempPaymentBuffer."Global Dimension 1 Code" := '';
        TempPaymentBuffer."Global Dimension 2 Code" := '';
        TempPaymentBuffer."Dimension Set ID" := 0;
      END;
    END;

    LOCAL PROCEDURE IsNotAppliedEntry@19(GenJournalLine@1001 : Record 81;VendorLedgerEntry@1000 : Record 25) : Boolean;
    BEGIN
      EXIT(
        IsNotAppliedToCurrentBatchLine(GenJournalLine,VendorLedgerEntry) AND
        IsNotAppliedToOtherBatchLine(GenJournalLine,VendorLedgerEntry));
    END;

    LOCAL PROCEDURE IsNotAppliedToCurrentBatchLine@30(GenJournalLine@1001 : Record 81;VendorLedgerEntry@1000 : Record 25) : Boolean;
    VAR
      PaymentGenJournalLine@1002 : Record 81;
    BEGIN
      WITH PaymentGenJournalLine DO BEGIN
        SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
        SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
        SETRANGE("Account No.",VendorLedgerEntry."Vendor No.");
        SETRANGE("Applies-to Doc. Type",VendorLedgerEntry."Document Type");
        SETRANGE("Applies-to Doc. No.",VendorLedgerEntry."Document No.");
        EXIT(ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE IsNotAppliedToOtherBatchLine@25(GenJournalLine@1002 : Record 81;VendorLedgerEntry@1001 : Record 25) : Boolean;
    VAR
      PaymentGenJournalLine@1000 : Record 81;
    BEGIN
      IF NOT CheckOtherJournalBatches THEN
        EXIT(TRUE);

      WITH PaymentGenJournalLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Payment);
        SETRANGE("Account Type","Account Type"::Vendor);
        SETRANGE("Account No.",VendorLedgerEntry."Vendor No.");
        SETRANGE("Applies-to Doc. Type",VendorLedgerEntry."Document Type");
        SETRANGE("Applies-to Doc. No.",VendorLedgerEntry."Document No.");
        IF ISEMPTY THEN
          EXIT(TRUE);

        IF FINDSET THEN BEGIN
          REPEAT
            IF ("Journal Batch Name" <> GenJournalLine."Journal Batch Name") OR
               ("Journal Template Name" <> GenJournalLine."Journal Template Name")
            THEN
              LogNotSuggestedPaymentMessage(PaymentGenJournalLine);
          UNTIL NEXT = 0;
          EXIT(TempErrorMessage.ISEMPTY);
        END;
      END;
    END;

    LOCAL PROCEDURE LogNotSuggestedPaymentMessage@26(GenJournalLine@1000 : Record 81);
    BEGIN
      TempErrorMessage.LogMessage(
        GenJournalLine,GenJournalLine.FIELDNO("Applies-to ID"),
        TempErrorMessage."Message Type"::Warning,
        STRSUBSTNO(
          NotSuggestedPaymentInfoTxt,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),
          GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),
          GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Applies-to Doc. No."),
          GenJournalLine."Applies-to Doc. No."));
    END;

    LOCAL PROCEDURE SetDefaults@14();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."Bal. Account No." <> '' THEN BEGIN
        GenJnlLine2."Bal. Account Type" := GenJnlBatch."Bal. Account Type";
        GenJnlLine2."Bal. Account No." := GenJnlBatch."Bal. Account No.";
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateTempBufferFromVendorLedgerEntry@1085(VAR TempPaymentBuffer@1086 : TEMPORARY Record 372;VendorLedgerEntry@1088 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeHandledVendLedgEntry@22(VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81;VAR HandledEntry@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer@1090(VAR GenJournalLine@1091 : Record 81;TempPaymentBuffer@1092 : TEMPORARY Record 372);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetVendLedgEntriesOnBeforeLoop@21(VAR VendorLedgerEntry@1000 : Record 25;PostingDate@1001 : Date;LastDueDateToPayReq@1002 : Date;Future@1003 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      4PS, Objects renumbered
      151104 ITERO.DL RFC-034 Change in vendor payment proposal - only payments when liability
    }
    END.
  }
  RDLDATA
  {
  }
}

