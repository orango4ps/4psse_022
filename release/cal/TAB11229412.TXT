OBJECT Table 11229412 Project Schedule Employee
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "User ID" := USERID;
               "Last Date Modified" := TODAY;
             END;

    OnModify=BEGIN
               "User ID" := USERID;
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Project Schedule Employee;
    LookupPageID=Page11129938;
    DrillDownPageID=Page11129938;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Employee No.        ;Code20        ;CaptionML=[ENU=Employee No.;
                                                              SVE=Anst„llningsnr];
                                                   NotBlank=Yes }
    { 30  ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=[ENU=Discipline;
                                                              SVE=Disciplin] }
    { 40  ;   ;Scheduled Date      ;Date          ;CaptionML=[ENU=Date;
                                                              SVE=Datum] }
    { 50  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              SVE=Anv„ndar-ID];
                                                   Editable=No }
    { 60  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              SVE=Uppdateringsdatum];
                                                   Editable=No }
    { 70  ;   ;Scheduled Hours     ;Decimal       ;CaptionML=[ENU=Scheduled Hours;
                                                              SVE=Schemalagda timmar] }
    { 100 ;   ;Job Description     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Job Description;
                                                              SVE=Projektbeskrivning];
                                                   Editable=No }
    { 110 ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Employee Name;
                                                              SVE=Namn p† anst„lld];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Employee No.,Discipline,Scheduled Date;
                                                   Clustered=Yes }
    {    ;Employee No.,Scheduled Date             ;SumIndexFields=Scheduled Hours;
                                                   MaintainSQLIndex=No }
    {    ;Project No.,Discipline,Scheduled Date   ;SumIndexFields=Scheduled Hours;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE ScheduleEmployee@1100528501(ProjectNo@1100528501 : Code[20];EmployeeNo@1100528505 : Code[20];DisciplineCode@1100528502 : Text;PeriodStart@1100528503 : Date;PeriodEnd@1100528504 : Date;DirectMatrixInput@1100528518 : Boolean;RequestedHoursProject@1100528506 : Decimal;HoursToScheduleProject@1100528507 : Decimal);
    VAR
      ScheduleEmployeesUserSetup@1100528516 : Record 11229413;
      ProjectScheduleEmployee@1100528500 : Record 11229412;
      Date@1100528509 : Record 2000000007;
      HourAccountingLine@1100528511 : Record 11012039;
      EmployeeAbsence@1100528519 : Record 5207;
      ScheduledHoursProject@1100528510 : Decimal;
      ScheduledHoursEmployee@1100528512 : Decimal;
      NormHoursEmployee@1100528513 : Decimal;
      MaxHoursToScheduleEmployee@1100528514 : Decimal;
      HoursToScheduleEmployee@1100528517 : Decimal;
      DummyTime@1100528515 : Time;
      ScheduleProjectToTheMax@1100528508 : Boolean;
    BEGIN
      IF NOT ScheduleEmployeesUserSetup.GET(USERID) THEN
        ScheduleEmployeesUserSetup.InitRecord;

      ScheduleProjectToTheMax := DirectMatrixInput AND (HoursToScheduleProject = 0);

      IF NOT DirectMatrixInput THEN BEGIN
        ProjectScheduleEmployee.SETRANGE("Project No.",ProjectNo);
        ProjectScheduleEmployee.SETFILTER(Discipline,DisciplineCode);
        ProjectScheduleEmployee.SETRANGE("Scheduled Date",PeriodStart,PeriodEnd);
        ProjectScheduleEmployee.CALCSUMS("Scheduled Hours");
        ScheduledHoursProject := ProjectScheduleEmployee."Scheduled Hours";
        HoursToScheduleProject := RequestedHoursProject - ScheduledHoursProject;
      END;

      IF NOT ScheduleProjectToTheMax AND
        ((NOT DirectMatrixInput AND (HoursToScheduleProject <= 0)) OR (HoursToScheduleProject < ScheduleEmployeesUserSetup.Threshold)) THEN
        EXIT;

      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETRANGE("Period Start",PeriodStart,PeriodEnd);
      IF Date.FINDSET THEN
        REPEAT

          NormHoursEmployee := 0;
          IF EmployeeAbsence.ReadEmployeeAbsenceCode(EmployeeNo,Date."Period Start",TRUE) = '' THEN
            HourAccountingLine.GetNormalEmployeeWorkingTimeForWeekDay(
              EmployeeNo,TRUE,Date."Period Start",DATE2DWY(Date."Period Start",1),
              NormHoursEmployee,DummyTime,DummyTime,DummyTime,DummyTime);

          IF NormHoursEmployee <= 0 THEN
            MaxHoursToScheduleEmployee := 0
          ELSE BEGIN
            ProjectScheduleEmployee.RESET;
            ProjectScheduleEmployee.SETRANGE("Employee No.",EmployeeNo);
            ProjectScheduleEmployee.SETRANGE("Scheduled Date",Date."Period Start");
            ProjectScheduleEmployee.CALCSUMS("Scheduled Hours");
            ScheduledHoursEmployee := ProjectScheduleEmployee."Scheduled Hours";
            MaxHoursToScheduleEmployee := NormHoursEmployee - ScheduledHoursEmployee;
          END;

          IF MaxHoursToScheduleEmployee > 0 THEN BEGIN
            IF ScheduleEmployeesUserSetup."Schedule Full Day" THEN
              HoursToScheduleEmployee := MaxHoursToScheduleEmployee
            ELSE BEGIN
              IF ScheduleProjectToTheMax THEN
                HoursToScheduleEmployee := MaxHoursToScheduleEmployee
              ELSE
                HoursToScheduleEmployee := HoursToScheduleProject;
              IF ScheduleEmployeesUserSetup."Round to Whole Hours" THEN
                HoursToScheduleEmployee := ROUND(HoursToScheduleEmployee,1);
              IF HoursToScheduleEmployee < ScheduleEmployeesUserSetup."Minimum of Hours to Schedule" THEN
                HoursToScheduleEmployee := ScheduleEmployeesUserSetup."Minimum of Hours to Schedule";
              IF HoursToScheduleEmployee > MaxHoursToScheduleEmployee THEN
                HoursToScheduleEmployee := MaxHoursToScheduleEmployee;
            END;

            UpdateEmployeeSchedule(ProjectNo,EmployeeNo,DisciplineCode,Date."Period Start",FALSE,HoursToScheduleEmployee);

            HoursToScheduleProject -= HoursToScheduleEmployee;
          END;

        UNTIL (Date.NEXT = 0) OR (NOT ScheduleProjectToTheMax AND ((HoursToScheduleProject <= 0) OR (HoursToScheduleProject < ScheduleEmployeesUserSetup.Threshold)));
    END;

    PROCEDURE UpdateFromScheduleMatrix@1100528500(ProjectNo@1100528501 : Code[20];EmployeeNo@1100528502 : Code[20];DisciplineCode@1100528503 : Code[10];PeriodStart@1100528507 : Date;PeriodEnd@1100528504 : Date;DeleteOnly@1100528506 : Boolean;HoursToSchedule@1100528505 : Decimal);
    VAR
      Date@1100528508 : Record 2000000007;
    BEGIN
      IF DeleteOnly THEN BEGIN
        Date.SETRANGE("Period Type",Date."Period Type"::Date);
        Date.SETRANGE("Period Start",PeriodStart,PeriodEnd);
        IF Date.FINDSET THEN
          REPEAT
            UpdateEmployeeSchedule(ProjectNo,EmployeeNo,DisciplineCode,Date."Period Start",DeleteOnly,0);
          UNTIL Date.NEXT = 0;
      END ELSE
        ScheduleEmployee(ProjectNo,EmployeeNo,DisciplineCode,PeriodStart,PeriodEnd,TRUE,0,HoursToSchedule);
    END;

    LOCAL PROCEDURE UpdateEmployeeSchedule@1100528502(ProjectNo@1100528501 : Code[20];EmployeeNo@1100528502 : Code[20];DisciplineCode@1100528503 : Code[10];ScheduledDate@1100528504 : Date;DeleteOnly@1100528506 : Boolean;HoursToSchedule@1100528505 : Decimal);
    VAR
      ProjectScheduleEmployee@1100528500 : Record 11229412;
    BEGIN
      IF NOT DeleteOnly AND (HoursToSchedule = 0) THEN
        EXIT;

      IF ProjectScheduleEmployee.GET(ProjectNo,EmployeeNo,DisciplineCode,ScheduledDate) THEN BEGIN
        ProjectScheduleEmployee."Scheduled Hours" += HoursToSchedule;
        IF DeleteOnly OR (ProjectScheduleEmployee."Scheduled Hours" = 0) THEN
          ProjectScheduleEmployee.DELETE(TRUE)
        ELSE
          ProjectScheduleEmployee.MODIFY(TRUE);
      END ELSE
        IF NOT DeleteOnly THEN BEGIN
          ProjectScheduleEmployee.INIT;
          ProjectScheduleEmployee.VALIDATE("Project No.",ProjectNo);
          ProjectScheduleEmployee.VALIDATE("Employee No.",EmployeeNo);
          ProjectScheduleEmployee.VALIDATE(Discipline,DisciplineCode);
          ProjectScheduleEmployee."Scheduled Date" := ScheduledDate;
          ProjectScheduleEmployee."Scheduled Hours" := HoursToSchedule;
          ProjectScheduleEmployee.INSERT(TRUE);
        END;
    END;

    PROCEDURE CalcEmployeeAvailableHours@1100528512(EmployeeNo@1100528501 : Code[20];StartDate@1100528502 : Date;EndDate@1100528500 : Date) EmployeeAvailableHours : Decimal;
    VAR
      ProjectScheduleEmployee@1100528505 : Record 11229412;
      EmployeeNormHours@1100528503 : Decimal;
      EmployeeScheduledHours@1100528506 : Decimal;
    BEGIN
      EmployeeNormHours := CalcEmployeeNormHours(EmployeeNo,StartDate,EndDate,TRUE);

      IF EmployeeNormHours <= 0 THEN
        EmployeeAvailableHours := 0
      ELSE BEGIN
        ProjectScheduleEmployee.RESET;
        ProjectScheduleEmployee.SETRANGE("Employee No.",EmployeeNo);
        ProjectScheduleEmployee.SETRANGE("Scheduled Date",StartDate,EndDate);
        ProjectScheduleEmployee.CALCSUMS("Scheduled Hours");
        EmployeeScheduledHours := ProjectScheduleEmployee."Scheduled Hours";
        EmployeeAvailableHours := EmployeeNormHours - EmployeeScheduledHours;
      END;
      IF EmployeeAvailableHours < 0 THEN
        EmployeeAvailableHours := 0
    END;

    PROCEDURE CalcEmployeeNormHours@1100528515(EmployeeNo@1100528501 : Code[20];StartDate@1100528500 : Date;EndDate@1100528504 : Date;SubtractAbsence@1100528507 : Boolean) EmployeeNormHours : Decimal;
    VAR
      HourAccountingLine@1100528502 : Record 11012039;
      Date@1100528505 : Record 2000000007;
      EmployeeAbsence@1100528509 : Record 5207;
      DummyTime@1100528503 : Time;
      EmployeeNormHoursOnDay@1100528506 : Decimal;
      CountNormHours@1100528508 : Boolean;
    BEGIN
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETRANGE("Period Start",StartDate,EndDate);
      IF Date.FINDSET THEN
        REPEAT
          CountNormHours := TRUE;
          IF SubtractAbsence THEN
            CountNormHours := EmployeeAbsence.ReadEmployeeAbsenceCode(EmployeeNo,Date."Period Start",TRUE) = '';

          IF CountNormHours THEN BEGIN
            HourAccountingLine.GetNormalEmployeeWorkingTimeForWeekDay(
              EmployeeNo,TRUE,Date."Period Start",DATE2DWY(Date."Period Start",1),
              EmployeeNormHoursOnDay,DummyTime,DummyTime,DummyTime,DummyTime);
            EmployeeNormHours += EmployeeNormHoursOnDay;
          END;
        UNTIL Date.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

