OBJECT Codeunit 11012949 DPT Interface ServLoc
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DPTSetup@1100528303 : Record 11229823;
      ErrorMessage@1100528304 : TEMPORARY Record 700;
      DPTInterface@1100528302 : Codeunit 11012451;
      GlobalVarsSet@1100528301 : Boolean;
      DPTType@1100528300 : Integer;
      StartedFrom@1100528311 : 'UI,EventLog,NAS,JobQueue';
      ImpersonationUserSID@1100528310 : Text;
      Text000@1100529400 : TextConst 'DEU=Konfiguration erstellt.;ENU=Setup created.;NLD=Configuratie aangemaakt.';
      Text001@1100529401 : TextConst 'DEU=%1 ist kein %2 dieses Service-Standorts.;ENU=%1 is no %2 of this Service Location.;NLD=%1 is geen %2 van deze servicelocatie.';
      EventLogSeqNo@1100525000 : Integer;
      Text002@1100525001 : TextConst 'DEU=%1 %2 hat mehr als 1 %3.;ENU=%1 %2 has more than 1 %3.;NLD=%1 %2 heeft meer dan 1 %3.';

    PROCEDURE CreateSubsiteAndPermissionSetup@1100528312(ServiceLocation@1100528300 : Record 11012801);
    VAR
      DPTHeaderText@1100529400 : Record 11229943;
      DPTSubsiteServLoc@1100528304 : Record 11072344;
      DPTSubsiteDocTypeServLoc@1100528301 : Record 11072345;
      DPTRespPersPermServLoc@1100528302 : Record 11072340;
      DPTAuthorityPermServLoc@1100528303 : Record 11072343;
    BEGIN
      DPTHeaderText.CopySourceText(DATABASE::"Service Location", ServiceLocation.FIELDNO("Document Portal Site Generated"), ServiceLocation."No.");
      DPTSubsiteServLoc.CreateAllSubsites(ServiceLocation."No.");
      DPTSubsiteDocTypeServLoc.CreateAllDocumentTypeLinks(ServiceLocation."No.");
      DPTRespPersPermServLoc.AddPortalPermissions(ServiceLocation."No.", 0, '', FALSE);
      DPTAuthorityPermServLoc.AddPortalPermissions(ServiceLocation."No.", '', '', '', '', FALSE);
      MESSAGE(Text000);
    END;

    PROCEDURE DeleteDocument@1100528310(ServiceLocation@1100528301 : Record 11012801;DocumentProperties@1100528302 : Record 11012746);
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      //No checks done, record is already deleted
      IF (NOT DPTInterface.DeleteDocument(ServiceLocation, DocumentProperties)) THEN
        ShowDPTError;
    END;

    PROCEDURE GetWordDocumentFromPortal@1100528339(ServiceLocationNo@1100528309 : Code[20];VAR DocumentProperties@1100528307 : Record 11012746;StorageDir@1100525000 : Text) : Text;
    VAR
      ServiceLocation@1100528301 : Record 11012801;
      WebLink@1100529400 : Text;
    BEGIN
      ServiceLocation.GET(ServiceLocationNo);
      IF (NOT ServiceLocation.IsDocumentPortalServiceLocation) THEN
        EXIT('');
      IF (DocumentProperties."External Document") THEN
        EXIT('');

      SetGlobalVars;
      SetInterfaceVars;
      WebLink := DocumentProperties.GetStorageURI;
      IF (NOT DPTInterface.GetDocumentFromPortal(ServiceLocation, DocumentProperties, StorageDir, WebLink, FALSE)) THEN
        WebLink := '';

      EXIT(WebLink);
    END;

    PROCEDURE SetEventLogSeqNo@1100525003(EventLogSeqNoIn@1100528300 : Integer);
    BEGIN
      EventLogSeqNo := EventLogSeqNoIn;
    END;

    PROCEDURE SetImpersonationUser@1100528332(ImpersonationUserSIDIn@1100528300 : Text);
    BEGIN
      ImpersonationUserSID := ImpersonationUserSIDIn;
    END;

    PROCEDURE SetStartedFrom@1100528323(StartedFromIn@1100528300 : Option);
    BEGIN
      StartedFrom := StartedFromIn;
    END;

    PROCEDURE SyncAuthorities@1100528324(ServiceLocation@1100528301 : Record 11012801);
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckAuthorities(ServiceLocation);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      IF (NOT DPTInterface.SyncServiceAuthorirties(ServiceLocation)) THEN
        ShowDPTError;
    END;

    PROCEDURE SyncAuthority@1100528336(ServiceLocation@1100528301 : Record 11012801;ContactNo@1100528300 : Code[20];ContactPersonNo@1100528302 : Code[20]);
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckAuthorities(ServiceLocation);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      IF (NOT DPTInterface.SyncServiceAuthorirty(ServiceLocation, ContactNo, ContactPersonNo)) THEN
        ShowDPTError;
    END;

    PROCEDURE SyncDocument@1100528311(ServiceLocation@1100528301 : Record 11012801;DocumentProperties@1100528302 : Record 11012746);
    VAR
      WebLink@1100527800 : Text;
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckDocumentProperties(ServiceLocation, DocumentProperties);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      WebLink := '';
      IF (DPTInterface.SyncDocument(ServiceLocation, DocumentProperties, WebLink)) THEN BEGIN
        IF (WebLink <> '') THEN BEGIN
          DocumentProperties.GET(DocumentProperties."No.");
          DocumentProperties.ValidateStorageURI(DocumentProperties."Storage Type"::DPTDUAL, WebLink);
          DocumentProperties.MODIFY;
        END;
      END ELSE
        ShowDPTError;
    END;

    PROCEDURE SyncPortalData@1100528322(ServiceLocation@1100528301 : Record 11012801);
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckPortalData(ServiceLocation);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      IF (NOT DPTInterface.SyncPortalData(ServiceLocation)) THEN
        ShowDPTError;
      SetSyncLocationSiteSynchronizedOn(ServiceLocation);
    END;

    PROCEDURE SyncPortalMetaData@1100528313(ServiceLocation@1100528300 : Record 11012801);
    VAR
      DPTEventLog@1100528301 : Record 11229822;
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckPortalMetaData(ServiceLocation);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncPortalMetaDataText, TRUE);
      IF (NOT DPTInterface.SyncPortalMetaData(ServiceLocation)) THEN
        ShowDPTError;
      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncPortalMetaDataText, FALSE);
    END;

    PROCEDURE SyncPortalSearchData@1100528318(ServiceLocation@1100528301 : Record 11012801);
    VAR
      DPTEventLog@1100528300 : Record 11229822;
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckPortalSearchData(ServiceLocation);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncPortalSearchDataText, TRUE);
      IF (NOT DPTInterface.SyncPortalSearchData(ServiceLocation)) THEN
        ShowDPTError;
      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncPortalSearchDataText, FALSE);
    END;

    PROCEDURE SyncPortalSite@1100528303(ServiceLocation@1100528300 : Record 11012801);
    VAR
      DPTEventLog@1100528304 : Record 11229822;
      DPTSubsiteServLoc@1100529400 : Record 11072344;
      DPTSubsiteDocTypeServLoc@1100529401 : Record 11072345;
      DocumentPortalURL@1100528301 : Text;
      CreateEvents@1100529402 : Boolean;
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckServiceLocationNoDPTCreated(ServiceLocation);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      IF (ServiceLocation."Document Portal URL" = '') THEN BEGIN
        AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetEnsurePortalSiteCollectionText, TRUE);
        DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
        IF (NOT DPTSubsiteServLoc.FINDFIRST) THEN
          DPTSubsiteServLoc.CreateAllSubsites(ServiceLocation."No.");
        COMMIT;
        IF (NOT DPTInterface.EnsurePortalSiteCollection(ServiceLocation, DocumentPortalURL)) THEN
          ShowDPTError
        ELSE BEGIN
          ServiceLocation."Document Portal Site Generated" := TRUE;
          ServiceLocation."Document Portal URL" := DocumentPortalURL;
          IF (ServiceLocation."Document Portal Language" = '') THEN
            ServiceLocation."Document Portal Language" := DPTSetup."Language Code";
          ServiceLocation.MODIFY(TRUE);
        END;
        AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetEnsurePortalSiteCollectionText, FALSE);
        COMMIT;
        DPTSubsiteServLoc.RESET;
      END;

      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncPortalSiteText, TRUE);
      IF (NOT DPTInterface.SyncPortalSite(ServiceLocation)) THEN
        ShowDPTError;

      CreateEvents := FALSE;
      DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTSubsiteServLoc.SETRANGE("Synchronized On", 0DT);
      IF (DPTSubsiteServLoc.FINDFIRST) THEN
        CreateEvents := TRUE;
      DPTSubsiteDocTypeServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTSubsiteDocTypeServLoc.SETRANGE("Synchronized On", 0DT);
      IF (DPTSubsiteDocTypeServLoc.FINDFIRST) THEN
        CreateEvents := TRUE;

      IF (CreateEvents) THEN
        InsertEventLogLocationSite(ServiceLocation);

      DPTInterface.UpdateExistingDocumentProperties(ServiceLocation);
      SetSyncLocationSiteSynchronizedOn(ServiceLocation);
      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncPortalSiteText, FALSE);
    END;

    PROCEDURE SyncResponsiblePersons@1100528325(ServiceLocation@1100528301 : Record 11012801);
    VAR
      DPTEventLog@1100529400 : Record 11229822;
    BEGIN
      SetGlobalVars;
      SetInterfaceVars;
      CheckResponsiblePersons(ServiceLocation);
      ShowCheckErrors;
      IF (ErrorMessage.COUNT > 0) AND (StartedFrom  IN [StartedFrom::JobQueue, StartedFrom::NAS]) THEN
        EXIT;

      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncResponsiblePersonText , TRUE);
      IF (NOT DPTInterface.SyncServiceResponsiblePersons(ServiceLocation)) THEN
        ShowDPTError;
      AddDPTChangeLogEntry(ServiceLocation.RECORDID, DPTEventLog.GetSyncResponsiblePersonText , FALSE);
    END;

    LOCAL PROCEDURE "---Locals---"@1100528307();
    BEGIN
    END;

    LOCAL PROCEDURE AddDPTChangeLogEntry@1100525000(RecordIdIn@1100528300 : RecordID;ActionTxt@1100528302 : Text;ActionStart@1100528303 : Boolean);
    VAR
      DPTChangeLogEntry@1100528301 : Record 11012207;
    BEGIN
      DPTChangeLogEntry.AddLogEntry(RecordIdIn, ActionTxt, ActionStart);
    END;

    LOCAL PROCEDURE CheckAuthorities@1100528326(ServiceLocation@1100528300 : Record 11012801);
    VAR
      ServiceAuthorityDPT@1100528301 : Record 11072298;
    BEGIN
      ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPT."Source Type"::ServLocation);
      ServiceAuthorityDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (NOT ServiceAuthorityDPT.FINDSET) THEN
        EXIT;

      IF (NOT CheckOwnerPermissionCurrentUser(ServiceLocation)) THEN
        LogErrorMessage(ServiceLocation, 0);
      CheckServiceLocation(ServiceLocation);
      CheckForSameServiceLocationAuthorities(ServiceLocation);
      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckEmailBodyText(ServiceLocation);
      REPEAT
        IF (ServiceAuthorityDPT."Contact No." <> '') OR (ServiceAuthorityDPT."Contact Person No." <> '') THEN BEGIN
          DPTInterface.CheckServLocAuthority(ServiceAuthorityDPT);
        END;
      UNTIL (ServiceAuthorityDPT.NEXT = 0);
      DPTInterface.GetErrorMessage(ErrorMessage);
    END;

    LOCAL PROCEDURE CheckDocumentProperties@1100528316(ServiceLocation@1100528300 : Record 11012801;DocumentProperties@1100528301 : Record 11012746);
    BEGIN
      CheckServiceLocation(ServiceLocation);
      ShowProgress(DPTInterface.GetCheckText, DocumentProperties.RECORDID, '');
      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckDocumentProperties(DocumentProperties);
      DPTInterface.GetErrorMessage(ErrorMessage);
    END;

    LOCAL PROCEDURE CheckDocumentPropertiesForDelete@1100528317(ServiceLocation@1100528300 : Record 11012801;DocumentProperties@1100528301 : Record 11012746);
    BEGIN
      CheckServiceLocation(ServiceLocation);
      ShowProgress(DPTInterface.GetCheckText, DocumentProperties.RECORDID, '');
      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckDocumentPropertiesForDelete(DocumentProperties);
      DPTInterface.GetErrorMessage(ErrorMessage);
    END;

    LOCAL PROCEDURE CheckForSameServiceLocationAuthorities@1100525006(ServiceLocation@1100525001 : Record 11012801);
    VAR
      ServiceAuthorityDPT@1100525000 : Record 11072298;
    BEGIN
      ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPT."Source Type"::ServLocation);
      ServiceAuthorityDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (NOT ServiceAuthorityDPT.FINDSET) THEN
        EXIT;

      REPEAT
        IF (NOT TestForSameServiceLocationAuthority(ServiceAuthorityDPT)) THEN
          LogErrorMessage(ServiceAuthorityDPT, ServiceAuthorityDPT.FIELDNO("Authority Type"));
      UNTIL (ServiceAuthorityDPT.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckForSameServiceLocationResponsiblePersons@1100525002(ServiceLocation@1100525000 : Record 11012801);
    VAR
      ServiceResponsiblePersonDPT@1100525001 : Record 11072297;
    BEGIN
      ServiceResponsiblePersonDPT.SETRANGE("Source Type", ServiceResponsiblePersonDPT."Source Type"::ServLocation);
      ServiceResponsiblePersonDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (NOT ServiceResponsiblePersonDPT.FINDSET) THEN
        EXIT;

      REPEAT
        IF (NOT TestForSameServiceLocationResponsiblePerson(ServiceResponsiblePersonDPT)) THEN
          LogErrorMessage(ServiceResponsiblePersonDPT, ServiceResponsiblePersonDPT.FIELDNO(Responsibility));
      UNTIL (ServiceResponsiblePersonDPT.NEXT = 0);
    END;

    [TryFunction]
    LOCAL PROCEDURE CheckOwnerPermissionCurrentUser@1100529400(ServiceLocation@1100529400 : Record 11012801);
    VAR
      User@1100529404 : Record 2000000120;
      UserSetup@1100529401 : Record 91;
      ServiceResponsiblePersonDPT@1100529402 : Record 11072297;
      DPTRespPersPermServLoc@1100529403 : Record 11072340;
    BEGIN
      IF (ImpersonationUserSID <> '') THEN BEGIN
        User.GET(ImpersonationUserSID);
        UserSetup.GET(User."User Name");
      END ELSE BEGIN
        User.GET(USERSECURITYID);
        UserSetup.GET(USERID);
      END;
      IF (DPTInterface.IsNSTUserID(User)) THEN
        EXIT;
      UserSetup.TESTFIELD("Employee No.");

      ServiceResponsiblePersonDPT.SETRANGE("Source Type", ServiceResponsiblePersonDPT."Source Type"::ServLocation);
      ServiceResponsiblePersonDPT.SETRANGE("Source Code", ServiceLocation."No.");
      ServiceResponsiblePersonDPT.SETRANGE("Employee No.", UserSetup."Employee No.");
      IF (NOT ServiceResponsiblePersonDPT.FINDFIRST) THEN
          ERROR(Text001, UserSetup."User ID", DPTRespPersPermServLoc."Permission Level"::Owner);

      DPTRespPersPermServLoc.SETRANGE(Type, DPTRespPersPermServLoc.Type::Access);
      DPTRespPersPermServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTRespPersPermServLoc.SETRANGE("Line No.", ServiceResponsiblePersonDPT."Line No.");
      DPTRespPersPermServLoc.SETFILTER("Permission Level", '<>%1', DPTRespPersPermServLoc."Permission Level"::Owner);
      IF (DPTRespPersPermServLoc.FINDFIRST) THEN
        ERROR(Text001, UserSetup."User ID", DPTRespPersPermServLoc."Permission Level"::Owner);
    END;

    LOCAL PROCEDURE CheckPortalData@1100528335(ServiceLocation@1100528300 : Record 11012801);
    BEGIN
      IF (NOT CheckOwnerPermissionCurrentUser(ServiceLocation)) THEN
        LogErrorMessage(ServiceLocation, 0);
      CheckServiceLocation(ServiceLocation);
    END;

    LOCAL PROCEDURE CheckPortalMetaData@1100528319(ServiceLocation@1100528300 : Record 11012801);
    BEGIN
      IF (NOT CheckOwnerPermissionCurrentUser(ServiceLocation)) THEN
        LogErrorMessage(ServiceLocation, 0);
      CheckServiceLocation(ServiceLocation);
      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckPortalMetaData(ServiceLocation);
      DPTInterface.GetErrorMessage(ErrorMessage);
    END;

    LOCAL PROCEDURE CheckPortalSearchData@1100528321(ServiceLocation@1100528300 : Record 11012801);
    BEGIN
      IF (NOT CheckOwnerPermissionCurrentUser(ServiceLocation)) THEN
        LogErrorMessage(ServiceLocation, 0);
      CheckServiceLocation(ServiceLocation);
      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckPortalSearchData(ServiceLocation);
      DPTInterface.GetErrorMessage(ErrorMessage);
    END;

    LOCAL PROCEDURE CheckServiceLocation@1100528300(ServiceLocation@1100528300 : Record 11012801);
    BEGIN
      DPTInterface.CheckDPTSetup;

      ShowProgress(DPTInterface.GetCheckText, ServiceLocation.RECORDID, '');
      IF (NOT TestDPTSetupUseLocationPortal) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Use Location Portal"));
      IF (NOT TestServiceLocationGenerateDocumentPortalSite(ServiceLocation, TRUE)) THEN
        LogErrorMessage(ServiceLocation.RECORDID, ServiceLocation.FIELDNO("Generate Document Portal Site"));
      IF (NOT TestServiceLocationDocumentPortalSiteGenerated(ServiceLocation, TRUE)) THEN
        LogErrorMessage(ServiceLocation.RECORDID, ServiceLocation.FIELDNO("Document Portal Site Generated"));
      IF (NOT TestServiceLocationDocumentPortalURL(ServiceLocation, TRUE)) THEN
        LogErrorMessage(ServiceLocation.RECORDID, ServiceLocation.FIELDNO("Document Portal URL"));

      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckDPTSetup;
      DPTInterface.CheckUser;
      DPTInterface.CheckLanguage(ServiceLocation);
      DPTInterface.GetErrorMessage(ErrorMessage);
      CheckSubsiteCodes(ServiceLocation);
    END;

    LOCAL PROCEDURE CheckServiceLocationNoDPTCreated@1100528315(ServiceLocation@1100528300 : Record 11012801);
    BEGIN
      IF (NOT CheckOwnerPermissionCurrentUser(ServiceLocation)) THEN
        LogErrorMessage(ServiceLocation, 0);
      ShowProgress(DPTInterface.GetCheckText, ServiceLocation.RECORDID, '');
      IF (NOT TestDPTSetupUseLocationPortal) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Use Project Portal"));
      IF (NOT TestServiceLocationGenerateDocumentPortalSite(ServiceLocation, TRUE)) THEN
        LogErrorMessage(ServiceLocation.RECORDID, ServiceLocation.FIELDNO("Generate Document Portal Site"));

      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckDPTSetup;
      DPTInterface.CheckUser;
      DPTInterface.CheckLanguage(ServiceLocation);
      DPTInterface.GetErrorMessage(ErrorMessage);
      CheckSubsiteCodes(ServiceLocation);
    END;

    LOCAL PROCEDURE CheckResponsiblePersons@1100528327(ServiceLocation@1100528300 : Record 11012801);
    VAR
      ServiceResponsiblePersonDPT@1100528301 : Record 11072297;
    BEGIN
      IF (NOT CheckOwnerPermissionCurrentUser(ServiceLocation)) THEN
        LogErrorMessage(ServiceLocation, 0);
      CheckServiceLocation(ServiceLocation);
      ServiceResponsiblePersonDPT.SETRANGE("Source Type", ServiceResponsiblePersonDPT."Source Type"::ServLocation);
      ServiceResponsiblePersonDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (NOT ServiceResponsiblePersonDPT.FINDSET) THEN
        EXIT;

      CheckServiceLocation(ServiceLocation);
      CheckForSameServiceLocationResponsiblePersons(ServiceLocation);
      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.CheckEmailBodyText(ServiceLocation);
      REPEAT
        DPTInterface.CheckServLocResponsiblePerson(ServiceResponsiblePersonDPT);
      UNTIL (ServiceResponsiblePersonDPT.NEXT = 0);
      DPTInterface.GetErrorMessage(ErrorMessage);
    END;

    LOCAL PROCEDURE CheckSubsiteCodes@1100525001(ServiceLocation@1100525000 : Record 11012801);
    VAR
      DPTSubsiteServLoc@1100525001 : Record 11072344;
      DPTSubsiteDocTypeServLoc@1100525002 : Record 11072345;
    BEGIN
      DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      IF (NOT DPTSubsiteServLoc.FINDSET) THEN
        EXIT;

      REPEAT
        IF (NOT DPTInterface.TestSubsiteCode(DPTSubsiteServLoc.Code)) THEN
          LogErrorMessage(DPTSubsiteServLoc, DPTSubsiteServLoc.FIELDNO(Code));
        //#DPT-552
        DPTSubsiteDocTypeServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
        DPTSubsiteDocTypeServLoc.SETRANGE("Subsite Code", DPTSubsiteServLoc.Code);
        IF (DPTSubsiteDocTypeServLoc.FINDSET) THEN BEGIN
          REPEAT
            IF (NOT DPTInterface.TestDocumentTypeDescription(DPTSubsiteDocTypeServLoc."Document Type")) THEN
              LogErrorMessage(DPTSubsiteDocTypeServLoc, DPTSubsiteDocTypeServLoc.FIELDNO("Document Type Description"));
          UNTIL (DPTSubsiteDocTypeServLoc.NEXT = 0);
        END;
      UNTIL (DPTSubsiteServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE InsertEventLogLocationSite@1100528320(ServiceLocation@1100528300 : Record 11012801);
    VAR
      DPTEventLog@1100528304 : Record 11229822;
      ServiceResponsiblePersonDPT@1100528301 : Record 11072297;
      ServiceAuthorityDPT@1100528302 : Record 11072298;
      DPTMetadata@1100528303 : Record 11229825;
      xRecID@1100528305 : RecordID;
      UserSID@1100529900 : GUID;
    BEGIN
      IF (ImpersonationUserSID <> '') THEN
        UserSID := ImpersonationUserSID
      ELSE
        UserSID := USERSECURITYID;

      DPTEventLog.AddEventLog2(DPTEventLog.GetSyncPortalMetaDataText, 2, ServiceLocation."No.", ServiceLocation.RECORDID, xRecID, UserSID);

      DPTMetadata.SETRANGE("Source Type", DPTMetadata."Source Type"::ServiceLocation);
      DPTMetadata.SETRANGE("Show in Search", TRUE);
      IF (DPTMetadata.FINDFIRST) THEN
        DPTEventLog.AddEventLog2(DPTEventLog.GetSyncPortalSearchDataText, 2, ServiceLocation."No.", ServiceLocation.RECORDID, xRecID, UserSID);

      ServiceResponsiblePersonDPT.SETRANGE("Source Type", ServiceResponsiblePersonDPT."Source Type"::ServLocation);
      ServiceResponsiblePersonDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (ServiceResponsiblePersonDPT.FINDFIRST) THEN
        DPTEventLog.AddEventLog2(DPTEventLog.GetSyncResponsiblePersonText, 2, ServiceLocation."No.", ServiceLocation.RECORDID, xRecID, UserSID);

      ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPT."Source Type"::ServLocation);
      ServiceAuthorityDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (ServiceAuthorityDPT.FINDFIRST) THEN
        DPTEventLog.AddEventLog2(DPTEventLog.GetSyncAuthorityText, 2, ServiceLocation."No.", ServiceLocation.RECORDID, xRecID, UserSID);
    END;

    LOCAL PROCEDURE LogErrorMessage@1100528302(RecVariant@1100528300 : Variant;FieldNo@1100528301 : Integer);
    BEGIN
      ErrorMessage.LogMessage(RecVariant, FieldNo, ErrorMessage."Message Type"::Error, GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE SetGlobalVars@1100528306();
    BEGIN
      IF (GlobalVarsSet) THEN
        EXIT;
      DPTSetup.GET;
      DPTType := 2; //DPT Service Location
      GlobalVarsSet := TRUE;
      ErrorMessage.DELETEALL;
    END;

    LOCAL PROCEDURE SetInterfaceVars@1100528334();
    BEGIN
      DPTInterface.SetDPTType(DPTType);
      DPTInterface.SetImpersonationUser(ImpersonationUserSID);
      DPTInterface.SetStartedFrom(StartedFrom);
      DPTInterface.SetEventLogSeqNo(EventLogSeqNo);
    END;

    LOCAL PROCEDURE SetSyncLocationSiteSynchronizedOn@1100528337(ServiceLocation@1100528300 : Record 11012801);
    VAR
      DPTSubsiteServLoc@1100528301 : Record 11072344;
      DPTSubsiteDocTypeServLoc@1100528302 : Record 11072345;
    BEGIN
      DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTSubsiteServLoc.SETRANGE("Synchronized On", 0DT);
      DPTSubsiteServLoc.MODIFYALL("Synchronized On", CURRENTDATETIME);

      DPTSubsiteDocTypeServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTSubsiteDocTypeServLoc.SETRANGE("Synchronized On", 0DT);
      DPTSubsiteDocTypeServLoc.MODIFYALL("Synchronized On", CURRENTDATETIME);
    END;

    LOCAL PROCEDURE ShowCheckErrors@1100528301();
    BEGIN
      DPTInterface.SetErrorMessage(ErrorMessage);
      DPTInterface.ShowCheckErrors;
    END;

    LOCAL PROCEDURE ShowDPTError@1100528304();
    BEGIN
      DPTInterface.ShowDPTError;
    END;

    LOCAL PROCEDURE ShowProgress@1100528314(Action@1100528301 : Text;Message@1100528300 : Variant;Message2@1100529400 : Variant);
    BEGIN
      DPTInterface.ShowProgress(Action, Message, Message2);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupUseLocationPortal@1100528329();
    BEGIN
      DPTSetup.TESTFIELD("Use Location Portal", TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestForSameServiceLocationAuthority@1100525007(ServiceAuthorityDPTIn@1100525000 : Record 11072298);
    VAR
      ServiceAuthorityDPT@1100525001 : Record 11072298;
      Contact@1100525004 : Record 5050;
      ContactFrom@1100525002 : Record 5050;
      DPTInterface@1100525003 : Codeunit 11012451;
    BEGIN
      ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPTIn."Source Type");
      ServiceAuthorityDPT.SETRANGE("Source Code", ServiceAuthorityDPTIn."Source Code");
      IF (NOT ServiceAuthorityDPT.FINDSET) THEN
        EXIT;
      DPTInterface.GetContact(ContactFrom, ServiceAuthorityDPTIn."Contact No.", ServiceAuthorityDPTIn."Contact Person No.");

      REPEAT
        DPTInterface.GetContact(Contact, ServiceAuthorityDPT."Contact No.", ServiceAuthorityDPT."Contact Person No.");
        IF (ContactFrom."E-Mail 2" = Contact."E-Mail 2") AND
           ((ContactFrom."No." <> Contact."No.") OR
            (ServiceAuthorityDPTIn."Authority Type" <> ServiceAuthorityDPT."Authority Type") OR
            (ServiceAuthorityDPTIn."Contact No." <> ServiceAuthorityDPT."Contact No.") OR
            (ServiceAuthorityDPTIn."Contact Person No." <> ServiceAuthorityDPT."Contact Person No."))
        THEN
          ERROR(Text002, ServiceAuthorityDPTIn.TABLECAPTION, Contact."E-Mail 2",
            ServiceAuthorityDPTIn.FIELDCAPTION("Authority Type"));
      UNTIL (ServiceAuthorityDPT.NEXT = 0);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestForSameServiceLocationResponsiblePerson@1100525004(ServiceResponsiblePersonDPTIn@1100525000 : Record 11072297);
    VAR
      ServiceResponsiblePersonDPT@1100525001 : Record 11072297;
    BEGIN
      ServiceResponsiblePersonDPT.SETRANGE("Source Type", ServiceResponsiblePersonDPTIn."Source Type");
      ServiceResponsiblePersonDPT.SETRANGE("Source Code", ServiceResponsiblePersonDPTIn."Source Code");
      ServiceResponsiblePersonDPT.SETRANGE("Employee No.", ServiceResponsiblePersonDPTIn."Employee No.");
      IF (ServiceResponsiblePersonDPT.COUNT > 1) THEN
        ERROR(Text002, ServiceResponsiblePersonDPTIn.TABLECAPTION, ServiceResponsiblePersonDPTIn."Employee No.",
          ServiceResponsiblePersonDPTIn.FIELDCAPTION(Responsibility));
    END;

    [TryFunction]
    LOCAL PROCEDURE TestServiceLocationGenerateDocumentPortalSite@1100528305(ServiceLocation@1100528300 : Record 11012801;TestValue@1100528301 : Boolean);
    BEGIN
      ServiceLocation.TESTFIELD("Generate Document Portal Site", TestValue);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestServiceLocationDocumentPortalSiteGenerated@1100528308(ServiceLocation@1100528300 : Record 11012801;TestValue@1100528301 : Boolean);
    BEGIN
      ServiceLocation.TESTFIELD("Document Portal Site Generated", TestValue);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestServiceLocationDocumentPortalURL@1100528309(ServiceLocation@1100528300 : Record 11012801;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        ServiceLocation.TESTFIELD("Document Portal URL")
      ELSE
        ServiceLocation.TESTFIELD("Document Portal URL", '');
    END;

    BEGIN
    END.
  }
}

