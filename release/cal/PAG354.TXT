OBJECT Page 354 Item Turnover Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Lines;
               NOR=Linjer;
               SVE=Rader];
    LinksAllowed=No;
    SourceTable=Table2000000007;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 RESET;
               END;

    OnFindRecord=BEGIN
                   EXIT(PeriodFormMgt.FindDate(Which,Rec,PeriodType));
                 END;

    OnNextRecord=BEGIN
                   EXIT(PeriodFormMgt.NextDate(Steps,Rec,PeriodType));
                 END;

    OnAfterGetRecord=BEGIN
                       SetDateFilter;
                       Item.CALCFIELDS("Purchases (Qty.)","Purchases (LCY)","Sales (Qty.)","Sales (LCY)");
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Period Start;
                           NOR=Periodens start;
                           SVE=Periodstart];
                ToolTipML=[ENU=Specifies the start date of the period defined on the line, related to year-to-date inventory turnover.;
                           NOR=Angir startdatoen for perioden som er definert p† linjen relatert til vareomsetning hittil i †r.;
                           SVE=Anger startdatumet f”r den period som angetts p† raden, relaterat till lageroms„ttning hittills i †r.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Period Start" }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Period Name;
                           NOR=Periodenavn;
                           SVE=Periodnamn];
                ToolTipML=[ENU=Specifies the name of the period defined on the line, related to year-to-date inventory turnover.;
                           NOR=Angir navnet p† perioden som er definert p† linjen relatert til vareomsetning hittil i †r.;
                           SVE=Anger namnet p† den period som angetts p† raden, relaterat till lageroms„ttning hittills i †r.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Period Name" }

    { 4   ;2   ;Field     ;
                Name=PurchasesQty;
                DrillDown=Yes;
                CaptionML=[ENU=Purchases (Qty.);
                           NOR=Kj›p (antall);
                           SVE=Ink”pt antal];
                ToolTipML=[ENU=Specifies how many units of the item have been purchased. The program automatically calculates and updates the contents of the field, using the Invoiced Quantity field in the Item Ledger Entry table for those entries of the Purchase type.;
                           NOR=Angir hvor mange enheter av varen som har blitt kj›pt. Programmet beregner og oppdaterer innholdet i feltet automatisk ved hjelp av feltet Fakturert antall i tabellen Varepost for poster av typen Kj›p.;
                           SVE=Anger hur m†nga enheter av artikeln som har k”pts. Inneh†llet i f„ltet ber„knas och uppdateras automatiskt utifr†n f„ltet Fakturerat antal i tabellen Artikeltransaktion f”r transaktioner av typen Ink”p.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=Item."Purchases (Qty.)";
                OnDrillDown=BEGIN
                              ShowItemEntries(FALSE);
                            END;
                             }

    { 6   ;2   ;Field     ;
                Name=PurchasesLCY;
                DrillDown=Yes;
                CaptionML=[ENU=Purchases (LCY);
                           NOR=Kj›p (NOK);
                           SVE=Ink”p (BVA)];
                ToolTipML=[ENU=Specifies the total purchase amount, in LCY, of the item that has been purchased. The program automatically calculates and updates the contents of the field, using the Sales Amount (Actual) field in the Value Entry table for those entries that have been posted as purchases.;
                           NOR=Angir det totale kj›psbel›pet, i NOK, for varen som er kj›pt. Programmet beregner og oppdaterer innholdet i feltet ved hjelp av feltet Salgsbel›p (faktisk) i tabellen Verdipost for poster som er bokf›rt som kj›p automatisk.;
                           SVE=Anger det totala ink”psbeloppet i BVA f”r den artikel som har k”pts. Inneh†llet i f„ltet ber„knas och uppdateras automatiskt utifr†n f„ltet F”rs. belopp (aktuellt) i tabellen V„rdetransaktion f”r de transaktioner som har bokf”rts som ink”p.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Item."Purchases (LCY)";
                AutoFormatType=1;
                OnDrillDown=BEGIN
                              ShowValueEntries(FALSE);
                            END;
                             }

    { 8   ;2   ;Field     ;
                Name=SalesQty;
                DrillDown=Yes;
                CaptionML=[ENU=Sales (Qty.);
                           NOR=Salg (antall);
                           SVE=F”rs„ljning antal];
                ToolTipML=[ENU=Specifies how many units of the item have been sold. The program automatically calculates and updates the contents of the field, using the Invoiced Quantity field in the Item Ledger Entry table for those entries of the Sales type.;
                           NOR=Angir hvor mange enheter av varen som har blitt solgt. Programmet beregner og oppdaterer innholdet i feltet automatisk ved hjelp av feltet Fakturert antall i tabellen Varepost for poster av typen Salg.;
                           SVE=Anger hur m†nga enheter av artikeln som har s†lts. Inneh†llet i f„ltet ber„knas och uppdateras automatiskt utifr†n f„ltet Fakturerat antal i tabellen Artikeltransaktion f”r transaktioner av typen F”rs„ljning.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=Item."Sales (Qty.)";
                OnDrillDown=BEGIN
                              ShowItemEntries(TRUE);
                            END;
                             }

    { 10  ;2   ;Field     ;
                Name=SalesLCY;
                DrillDown=Yes;
                CaptionML=[ENU=Sales (LCY);
                           NOR=Salg (NOK);
                           SVE=F”rs„ljning (BVA)];
                ToolTipML=[ENU=Specifies the sales amount, in LCY, of the item that has been sold. The program automatically calculates and updates the contents of the field, using the Sales Amount (Actual) field in the Value Entry table for those entries that have been posted as sales.;
                           NOR=Angir salgsbel›pet, i NOK, for varen som er solgt. Programmet beregner og oppdaterer innholdet i feltet ved hjelp av feltet Salgsbel›p (faktisk) i tabellen Verdipost for poster som er bokf›rt som salg automatisk.;
                           SVE=Anger f”rs„ljningsbeloppet i BVA f”r den artikel som har s†lts. Inneh†llet i f„ltet ber„knas och uppdateras automatiskt utifr†n f„ltet F”rs. belopp (aktuellt) i tabellen V„rdetransaktion f”r de transaktioner som har bokf”rts som f”rs„ljning.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Item."Sales (LCY)";
                AutoFormatType=1;
                OnDrillDown=BEGIN
                              ShowValueEntries(TRUE);
                            END;
                             }

  }
  CODE
  {
    VAR
      Item@1000 : Record 27;
      PeriodFormMgt@1002 : Codeunit 359;
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1004 : 'Net Change,Balance at Date';

    [External]
    PROCEDURE Set@1(VAR NewItem@1000 : Record 27;NewPeriodType@1001 : Integer;NewAmountType@1002 : 'Net Change,Balance at Date');
    BEGIN
      Item.COPY(NewItem);
      PeriodType := NewPeriodType;
      AmountType := NewAmountType;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ShowItemEntries@2(ShowSales@1000 : Boolean);
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      SetDateFilter;
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ItemLedgEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      ItemLedgEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ItemLedgEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ItemLedgEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ItemLedgEntry.SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
      IF ShowSales THEN
        ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Sale)
      ELSE
        ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Purchase);
      PAGE.RUN(0,ItemLedgEntry);
    END;

    LOCAL PROCEDURE ShowValueEntries@3(ShowSales@1000 : Boolean);
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      SetDateFilter;
      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY(
        "Item No.","Posting Date","Item Ledger Entry Type","Entry Type","Variance Type","Item Charge No.",
        "Location Code","Variant Code","Global Dimension 1 Code","Global Dimension 2 Code","Source Type","Source No.");
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ValueEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      ValueEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ValueEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ValueEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ValueEntry.SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
      IF ShowSales THEN
        ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Sale)
      ELSE
        ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Purchase);
      PAGE.RUN(0,ValueEntry);
    END;

    LOCAL PROCEDURE SetDateFilter@4();
    BEGIN
      IF AmountType = AmountType::"Net Change" THEN
        Item.SETRANGE("Date Filter","Period Start","Period End")
      ELSE
        Item.SETRANGE("Date Filter",0D,"Period End");
    END;

    BEGIN
    END.
  }
}

