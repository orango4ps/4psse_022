OBJECT Codeunit 11020502 Post Pl. Transport Order (Y/N)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11020505;
    OnRun=BEGIN
            TransOrderRec.COPY(Rec);
            Code;
            Rec := TransOrderRec;
          END;

  }
  CODE
  {
    VAR
      Text000@11012002 : TextConst 'DEU=Mîchten Sie die Transportkosten buchen?;ENU=Do you want to post the Transport Costs?;NLD=Wilt u de Transportkosten boeken?;NOR=Vil du bokfõre transportkostene?;SVE=Vill du bokfîra transportkostnaderna?';
      PlantSetup@1100529405 : Record 11012550;
      TransOrderRec@11012000 : Record 11020505;
      TransRideRec@1100485004 : Record 11020517;
      PostTransOrder@11012001 : Codeunit 11020501;
      Text001@1100485003 : TextConst 'DEU=ACHTUNG: Es sind KEINE Kostenzeilen vorhanden.;ENU=NOTE: There are NO cost lines present.;NLD=LET OP: Er zijn GEEN kostenregels aanwezig.;NOR=OBS! Det finnes ingen kostrader.;SVE=OBS! Det finns inga kostnadsrader.';
      Text002@1100485002 : TextConst 'DEU=ACHTUNG:\Nur Kostenzeile(n) vorhanden, wobei die Anzahl NICHT eingegeben ist.\Alle Kostenzeilen werden gelîscht. Es sind dann KEINE Kostenzeilen mehr vorhanden.;ENU=NOTE:\Only cost line(s) with quantity NOT filled present.\All cost line(s) will be deleted, then there are NO cost lines anymore.;NLD=LET OP:\Alleen kostenregel(s) aanwezig waarbij het aantal NIET is ingegeven.\Alle kostenregel(s) worden verwijderd, er zijn dan GEEN kostenregels meer aanwezig.;NOR=OBS!\Kun kostrader hvor antallet IKKE er fylt ut vises.\Alle kostrader vil fjernes, og INGEN kostrader gjenstÜr.;SVE=OBS!\Endast kostnadsrader dÑr antalet INTE har fyllts i visas.\Alla kostnadsrader kommer att tas bort, sedan ÜterstÜr det INGA kostnadsrader.';
      Text003@1100485001 : TextConst 'DEU=ACHTUNG: Kostenzeile(n) vorhanden, wobei die Anzahl NICHT eingegeben ist, Nullzeilen werden gelîscht.;ENU=NOTE: Cost line(s) with quantity NOT filled present, zero line(s) will be deleted.;NLD=LET OP: Kostenregel(s) aanwezig waarbij het aantal NIET is ingegeven, nulregels worden verwijderd.;NOR=OBS! Det finnes kostrad(r) hvor antallet IKKE er fylt ut, null rader fjernes.;SVE=OBS! Kostnadsrad(er) dÑr antalet INTE har fyllts i (nollrader/nollrader) kommer att tas bort.';
      Text004@1100485000 : TextConst 'DEU=Mîchten Sie die TransportauftrÑge buchen?;ENU=Do you want to post the Transport Order?;NLD=Wilt u de Transportorder boeken?;NOR=Vil du bokfõre transportordren?;SVE=Vill du bokfîra transportordern?';
      Text005@1100485005 : TextConst 'DEU=Mîchten Sie die %1 buchen?;ENU=Do you want to post the %1?;NLD=Wilt u de %1 boeken?;NOR=Vil du bokfõre %1?;SVE=Vill du bokfîra %1?';
      Text006@1100485006 : TextConst 'DEU=ACHTUNG:;ENU=ATTENTION:;NLD=LET OP:;NOR=OBS!;SVE=OBSERVERA:';
      Text007@1100485007 : TextConst 'DEU=TransportauftrÑge ohne Kostenzeilen vorhanden.;ENU=Transport Orders without cost lines present.;NLD=Transportorder(s) zonder kostenregels aanwezig.;NOR=Transportordre uten kostrader finnes.;SVE=Transportorder utan kostnadsrader finns.';
      Text008@1100485008 : TextConst 'DEU=TransportauftrÑge Kostenzeile(n) vorhanden, wobei die Anzahl NICHT eingetragen ist. Nullzeilen werden gelîscht.;ENU=Transport Order Cost line(s) present with quantity NOT filled, zero line(s) will be deleted.;NLD=Transportorder kostenregel(s) aanwezig waarbij het aantal NIET is ingegeven, nulregels worden verwijderd.;NOR=Kostrad(r) for transportordre finnes der antallet IKKE er fylt ut. Null rad(r) fjernes.;SVE=Kostnadsrad(er) fîr transportorder finns dÑr antalet INTE har fyllts i. Nollrad(er) kommer att tas bort.';
      Text009a@1100529400 : TextConst 'DEU=Menge entspricht nicht dem Gewicht, %1ÅberprÅfen;ENU="Quantity is unequal to weight, check %1(s) ";NLD="Aantal is ongelijk aan gewicht, controleer %1(s) "';
      Text009b@1100529401 : TextConst 'DEU=Menge entspricht nicht dem Gewicht, dies muss in %1geÑndert werden;ENU="Quantity is unequal to weight, this must be modified in %1(s) ";NLD=Aantal is ongelijk aan gewicht, dit moet aangepast worden in %1(s)';
      Text010@1100529402 : TextConst 'DEU=Storniert;ENU=Canceled;NLD=Afgebroken;NOR=Kansellert;SVE=Annullerad';
      Text011@1100529403 : TextConst 'DEU=Menge entspricht immer noch nicht dem Gewicht;ENU=Quantity still not equal to weight;NLD="Aantal nog steeds niet gelijk aan gewicht "';
      Text012@1100529404 : TextConst 'DEU=Unterschied zwischen Menge und Gewicht akzeptieren?;ENU=Accept differences between quantity and weight?;NLD=Verschillen tussen aantal en gewicht accepteren?';

    LOCAL PROCEDURE Code@2();
    VAR
      MarkedTransportOrder@1100529401 : Record 11020505;
    BEGIN
      PlantSetup.GET;
      WITH TransOrderRec DO BEGIN
        CALCFIELDS("Invoice with Transport Order");
        IF ("Invoice with Transport Order" <> '') THEN BEGIN
          IF NOT CONFIRM(Text000,FALSE) THEN
            EXIT;
        END ELSE BEGIN
          IF PlantSetup."Check Qty is Weigth on Post TO" <> PlantSetup."Check Qty is Weigth on Post TO"::No THEN BEGIN
            MarkedTransportOrder.GET("No.");
            MarkedTransportOrder.MARK(TRUE);
            CheckQtyIsWeightOnReleaseTO(MarkedTransportOrder);
          END;
          CASE GetQuanTypeOnCostLines("No.") OF
            0:
              IF NOT CONFIRM(Text000,FALSE) THEN
                EXIT;
            1:
              IF NOT CONFIRM(Text001 + '\ \' + Text004,FALSE) THEN
                EXIT;
            2:
              BEGIN
                IF NOT CONFIRM(Text002 + '\ \' + Text004,FALSE) THEN
                  EXIT;
                DeleteZeroQuantityCostLines("No.", TRUE);
              END;
            3:
              BEGIN
                IF NOT CONFIRM(Text003 + '\ \' + Text000,FALSE) THEN
                  EXIT;
                DeleteZeroQuantityCostLines("No.", FALSE);
              END;
          END;
        END;

        PostTransOrder.RUN(TransOrderRec);
      END;
    END;

    PROCEDURE RunPostBatchTransportOrder@1100529500(VAR Rec@1100529500 : Record 11020505);
    VAR
      TransportOrder@1100529501 : Record 11020505;
      MarkedTransportOrder@1100529502 : Record 11020505;
    BEGIN
      TransportOrder.COPY(Rec);
      PlantSetup.GET;
      IF PlantSetup."Check Qty is Weigth on Post TO" <> PlantSetup."Check Qty is Weigth on Post TO"::No THEN BEGIN
        IF TransportOrder.FINDSET THEN BEGIN
          REPEAT
            IF MarkedTransportOrder.GET(TransportOrder."No.") THEN BEGIN
              MarkedTransportOrder.CALCFIELDS("Invoice with Transport Order");
              IF MarkedTransportOrder."Invoice with Transport Order" = '' THEN
                MarkedTransportOrder.MARK(TRUE);
            END;
          UNTIL TransportOrder.NEXT = 0;
          CheckQtyIsWeightOnReleaseTO(MarkedTransportOrder);
        END;
      END;
      IF TransportOrder.FINDSET THEN BEGIN
        REPEAT
          CLEAR(PostTransOrder);
          PostTransOrder.RUN(TransportOrder);
          COMMIT;
        UNTIL TransportOrder.NEXT = 0;
      END;
    END;

    PROCEDURE RunPostTransportRideYN@1100485000(VAR Rec@1100485000 : Record 11020517);
    VAR
      lvTransRideLineRec@1100485001 : Record 11020518;
      MarkedTransportOrder@1100529400 : Record 11020505;
      lvQuanType1@1100485002 : Boolean;
      lvQuanType2@1100485003 : Boolean;
      lvQuanType3@1100485004 : Boolean;
      lvConfirmTxt@1100485005 : Text[1024];
    BEGIN
      TransRideRec.COPY(Rec);
      PlantSetup.GET;

      WITH TransRideRec DO BEGIN
        TESTFIELD(Status, Status::Released);

        IF PlantSetup."Check Qty is Weigth on Post TO" <> PlantSetup."Check Qty is Weigth on Post TO"::No THEN BEGIN
          lvTransRideLineRec.RESET;
          lvTransRideLineRec.SETRANGE("Ride No.", "No.");
          lvTransRideLineRec.SETRANGE("Posted (TO)", FALSE);
          IF lvTransRideLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              IF MarkedTransportOrder.GET(lvTransRideLineRec."Transport Order No.") THEN BEGIN
                MarkedTransportOrder.CALCFIELDS("Invoice with Transport Order");
                IF MarkedTransportOrder."Invoice with Transport Order" = '' THEN
                  MarkedTransportOrder.MARK(TRUE);
              END;
            UNTIL lvTransRideLineRec.NEXT = 0;
            CheckQtyIsWeightOnReleaseTO(MarkedTransportOrder);
          END;
        END;
        lvTransRideLineRec.RESET;
        lvTransRideLineRec.SETRANGE("Ride No.", "No.");
        lvTransRideLineRec.SETRANGE("Posted (TO)", FALSE);
        IF lvTransRideLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            TransOrderRec.GET(lvTransRideLineRec."Transport Order No.");
            TransOrderRec.CALCFIELDS("Invoice with Transport Order");
            IF (TransOrderRec."Invoice with Transport Order" = '') THEN BEGIN
              CASE GetQuanTypeOnCostLines(TransOrderRec."No.") OF
                1:
                  lvQuanType1 := TRUE;
                2:
                  BEGIN
                    lvQuanType2 := TRUE;
                    DeleteZeroQuantityCostLines(TransOrderRec."No.", TRUE);
                  END;
                3:
                  BEGIN
                    lvQuanType3 := TRUE;
                    DeleteZeroQuantityCostLines(TransOrderRec."No.", FALSE);
                  END;
              END;
            END;
          UNTIL (lvTransRideLineRec.NEXT = 0) OR (lvQuanType1 AND lvQuanType2 AND lvQuanType3);
        END;
        IF (lvQuanType1 OR lvQuanType2 OR lvQuanType3) THEN BEGIN
          lvConfirmTxt := Text006 + '\';
          IF lvQuanType1 OR lvQuanType2 THEN
            lvConfirmTxt := lvConfirmTxt + Text007 + '\';
          IF lvQuanType2 OR lvQuanType3 THEN
            lvConfirmTxt := lvConfirmTxt + Text008 + '\';
          lvConfirmTxt := lvConfirmTxt + '\';
        END;
        lvConfirmTxt := lvConfirmTxt + STRSUBSTNO(Text005, TABLECAPTION);
        IF NOT CONFIRM(lvConfirmTxt,FALSE) THEN
          ERROR('');  //* Niet 'EXIT' want 'DeleteZeroLines terugdraaien.

        PostTransOrder.RunPostTransportRide(TransRideRec);

      END;

      Rec := TransRideRec;
    END;

    PROCEDURE GetQuanTypeOnCostLines@1100485006(TransportOrderNo@1100529400 : Code[20]) : Integer;
    VAR
      lvTransCostLineRec@1100485000 : Record 11020506;
    BEGIN
      //* ReturnType: 0=Alleen kostenregels met aantal; 1=Geen kostenregels; 2=Alleen nulregels; 3=Beide soorten kostenregels

      lvTransCostLineRec.SETRANGE("Transport Order No.", TransportOrderNo);
      lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);
      lvTransCostLineRec.SETRANGE(Quantity, 0);
      IF NOT lvTransCostLineRec.FIND('-') THEN BEGIN
        lvTransCostLineRec.SETFILTER(Quantity, '<>%1', 0);
        IF lvTransCostLineRec.FIND('-') THEN
          EXIT(0)
        ELSE
          EXIT(1);
      END ELSE BEGIN
        lvTransCostLineRec.SETFILTER(Quantity, '<>%1', 0);
        IF NOT lvTransCostLineRec.FIND('-') THEN
          EXIT(2)
        ELSE
          EXIT(3);
      END;

      EXIT(0);
    END;

    PROCEDURE DeleteZeroQuantityCostLines@1100485005(TransportOrderNo@1100529400 : Code[20];IInclText@1100485001 : Boolean);
    VAR
      lvTransCostLineRec@1100485000 : Record 11020506;
    BEGIN
      lvTransCostLineRec.SETRANGE("Transport Order No.", TransportOrderNo);
      IF NOT IInclText THEN
        lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);
      lvTransCostLineRec.SETRANGE(Quantity, 0);
      lvTransCostLineRec.DELETEALL;
    END;

    LOCAL PROCEDURE CheckQtyIsWeightOnReleaseTO@1100529400(VAR MarkedTransportOrder@1100529400 : Record 11020505);
    VAR
      MarkedTransportCostLine@1100529401 : Record 11020506;
      TransportOrderCostQtyWeight@1100529406 : Page 11071779;
    BEGIN
      PlantSetup.GET;
      IF PlantSetup."Check Qty is Weigth on Post TO" = PlantSetup."Check Qty is Weigth on Post TO"::No THEN
        EXIT;
      IF ((PlantSetup."Unit of Measure Weight 1" = '') OR (PlantSetup."Qty. per Unit of Msr. Weight 1" <= 0)) AND
         ((PlantSetup."Unit of Measure Weight 2" = '') OR (PlantSetup."Qty. per Unit of Msr. Weight 2" <= 0))
      THEN
        EXIT;

      IF NOT CheckQuantityIsWeight(MarkedTransportOrder, MarkedTransportCostLine,
        PlantSetup."Unit of Measure Weight 1", PlantSetup."Qty. per Unit of Msr. Weight 1",
        PlantSetup."Unit of Measure Weight 2", PlantSetup."Qty. per Unit of Msr. Weight 2")
      THEN BEGIN
        IF PlantSetup."Check Qty is Weigth on Post TO" = PlantSetup."Check Qty is Weigth on Post TO"::Warning THEN
          MESSAGE(Text009a, MarkedTransportCostLine.TABLECAPTION)
        ELSE
          MESSAGE(Text009b, MarkedTransportCostLine.TABLECAPTION);
        TransportOrderCostQtyWeight.SETTABLEVIEW(MarkedTransportCostLine);
        TransportOrderCostQtyWeight.SETRECORD(MarkedTransportCostLine);
        TransportOrderCostQtyWeight.LOOKUPMODE(TRUE);
        IF TransportOrderCostQtyWeight.RUNMODAL <> ACTION::LookupOK THEN
          ERROR(Text010);
        IF NOT CheckQuantityIsWeight(MarkedTransportOrder, MarkedTransportCostLine,
          PlantSetup."Unit of Measure Weight 1", PlantSetup."Qty. per Unit of Msr. Weight 1",
          PlantSetup."Unit of Measure Weight 2", PlantSetup."Qty. per Unit of Msr. Weight 2")
        THEN BEGIN
          IF PlantSetup."Check Qty is Weigth on Post TO" = PlantSetup."Check Qty is Weigth on Post TO"::Yes THEN
            ERROR(Text011)
          ELSE BEGIN
            IF NOT CONFIRM(Text012, FALSE) THEN
              ERROR('');
          END;
        END
      END;
    END;

    LOCAL PROCEDURE CheckQuantityIsWeight@1100529401(VAR MarkedTransportOrder@1100529400 : Record 11020505;VAR TransportCostLine@1100529401 : Record 11020506;WeightUnit1@1100529405 : Code[10];QtyOfMeasure1@1100529407 : Decimal;WeightUnit2@1100529404 : Code[10];QtyOfMeasure2@1100529409 : Decimal) : Boolean;
    VAR
      QtyOfMeasure@1100529402 : Decimal;
      Weight@1100529403 : Decimal;
    BEGIN
      CLEAR(TransportCostLine);
      MarkedTransportOrder.MARKEDONLY(TRUE);
      IF MarkedTransportOrder.FINDSET THEN BEGIN
        TransportCostLine.FILTERGROUP(9);
        TransportCostLine.SETFILTER(Type, '<>%1', TransportCostLine.Type::Text);
        TransportCostLine.SETRANGE("Plant Type", '');
        IF (WeightUnit1 <> '') AND (WeightUnit2 <> '') THEN
          TransportCostLine.SETFILTER("Unit of Measure", '%1|%2', WeightUnit1, WeightUnit2)
        ELSE BEGIN
          IF WeightUnit1 <> ''  THEN
            TransportCostLine.SETRANGE("Unit of Measure", WeightUnit1)
          ELSE
            TransportCostLine.SETRANGE("Unit of Measure", WeightUnit2);
        END;
        REPEAT
          TransportCostLine.SETRANGE("Transport Order No.", MarkedTransportOrder."No.");
          IF TransportCostLine.FINDSET THEN BEGIN
            REPEAT
              IF TransportCostLine."Unit of Measure" = WeightUnit1 THEN
                QtyOfMeasure := QtyOfMeasure1
              ELSE
                QtyOfMeasure := QtyOfMeasure2;
              Weight := TransportCostLine.GetWeightCostLine();
              Weight := ROUND((Weight / QtyOfMeasure), 0.01);  // Round as in function DetermineQuantityForUnit (table TO Cost Line)
              IF (TransportCostLine.Quantity <> Weight) AND (Weight > 0) THEN
               TransportCostLine.MARK(TRUE);
            UNTIL TransportCostLine.NEXT = 0;
          END;
        UNTIL MarkedTransportOrder.NEXT = 0;
        TransportCostLine.SETRANGE("Transport Order No.");  // Reset filter
        TransportCostLine.FILTERGROUP(0);
      END;

      TransportCostLine.MARKEDONLY(TRUE);
      EXIT(NOT TransportCostLine.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

