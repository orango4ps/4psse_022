OBJECT Table 11128530 Barcode Hour Accounting
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Employee@1100528200 : Record 5200;
             BEGIN
               TESTFIELD("Start Date");
               TESTFIELD("Employee No.");
               Employee.GET("Employee No.");
               IF Employee."Cost Object Code" <> '' THEN
                 VALIDATE("Cost Object", Employee."Cost Object Code");
             END;

    CaptionML=ENU=Barcode Hour Accounting;
  }
  FIELDS
  {
    { 10  ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=Anst„llningsnr] }
    { 15  ;   ;Barcode             ;Code250       ;OnValidate=VAR
                                                                BarcodeHourAccounting@1100528200 : Record 11128530;
                                                                BarcodeHourAccountingSetup@1100528201 : Record 11128531;
                                                              BEGIN
                                                                BarcodeHourAccountingSetup.GET;

                                                                TESTFIELD("Employee No.");
                                                                TESTFIELD("Start Date");

                                                                IF Barcode <> BarcodeHourAccountingSetup."Confirm Code" THEN BEGIN

                                                                  IF Barcode <> BarcodeHourAccountingSetup."Sign Out Code" THEN
                                                                    ExtractBarcode(Barcode);

                                                                  BarcodeHourAccounting.SETRANGE("Employee No.", "Employee No.");
                                                                  BarcodeHourAccounting.SETRANGE("Start Date", "Start Date");
                                                                  BarcodeHourAccounting.SETFILTER("Line No.", '<>%1',"Line No.");
                                                                  BarcodeHourAccounting.SETRANGE("End Date", 0D);
                                                                  IF BarcodeHourAccounting.FINDSET(TRUE,TRUE) THEN BEGIN
                                                                    "Start Time" := TIME;
                                                                  END ELSE BEGIN
                                                                    IF BarcodeHourAccounting.Barcode = BarcodeHourAccountingSetup."Sign Out Code" THEN
                                                                      ERROR(Text003, "Employee No.");
                                                                  END;

                                                                  CloseActiveLines("Employee No.");

                                                                  IF Barcode = BarcodeHourAccountingSetup."Sign Out Code" THEN
                                                                    FinishDailyHours;

                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Barcode;
                                                              SVE=Streckkod] }
    { 20  ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("End Date" <> 0D) AND ("End Date" < "Start Date") THEN
                                                                  ERROR(Text001);

                                                                IF ("End Date" = "Start Date") AND ("Start Time" > "End Time") THEN
                                                                  ERROR(Text002);

                                                                CalculateHours;
                                                              END;

                                                   CaptionML=[ENU=Start Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 25  ;   ;Start Time          ;Time          ;OnValidate=BEGIN
                                                                IF "End Time" <> 0T THEN
                                                                  IF ("Start Time" > "End Time") AND ("Start Date" = "End Date") THEN
                                                                    ERROR(Text002);
                                                                CalculateHours;
                                                              END;

                                                   CaptionML=[ENU=Start Time;
                                                              NOR=Starttid;
                                                              SVE=Starttid] }
    { 30  ;   ;Line No.            ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 40  ;   ;Project No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job.No.;
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC;
                                                                Job.GET("Project No.");
                                                                IF "Project No." <> '' THEN BEGIN
                                                                  CheckProjectStatus;
                                                                  IF "Project No." <> xRec."Project No." THEN BEGIN
                                                                    IF "Cost Object" <> '' THEN
                                                                      VALIDATE("Cost Object");
                                                                  END;
                                                                END;

                                                                IF NOT ProjectElement.GET("Project No.",Element) THEN
                                                                  VALIDATE(Element, '');

                                                                "Cost Code" := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupProjectNo;
                                                            END;

                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 50  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Blocked=CONST(No),
                                                                                                                                 Cost Type=CONST(Labor),
                                                                                                                                 Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                DimMgt@1100528200 : Codeunit 408;
                                                              BEGIN
                                                                IF "Cost Object" = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                DimMgt.SetCompany("Receiving Company");
                                                                DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, TRUE, "Project No.");
                                                                DimensionValue.TESTFIELD(Blocked, FALSE);
                                                                DimensionValue.TESTFIELD("Proj. Rel. Cost Object Blocked", FALSE);

                                                                IF (DimensionValue.Element <> '') AND ("Project No." <> '') THEN BEGIN
                                                                  IF ProjectElement.GET("Project No.", DimensionValue.Element) THEN BEGIN
                                                                    IF NOT ProjectElement.Blocked THEN
                                                                      VALIDATE(Element, DimensionValue.Element);
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostObject;
                                                            END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 60  ;   ;Element             ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                FormatManagement@1100528200 : Codeunit 11012022;
                                                              BEGIN
                                                                IF Element <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  FormatManagement.FormatElem(Element,2,"Receiving Company");
                                                                  ProjectElement.GET("Project No.",Element);
                                                                  ProjectElement.CheckProjectElementBlocked;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              ProjectElement.SETRANGE("Project No.", "Project No.");
                                                              ProjectElement."Project No." := "Project No.";

                                                              ProjectElement.SETRANGE(Blocked, FALSE);
                                                              ProjectElement.Element := Element;
                                                              IF PAGE.RUNMODAL(0, ProjectElement) = ACTION::LookupOK THEN
                                                                VALIDATE(Element, ProjectElement.Element);
                                                            END;

                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 70  ;   ;Cost Code           ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Code".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cost Code" <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  CostCode.GET("Cost Code");
                                                                  CostCode.TESTFIELD(Blocked, FALSE);
                                                                END;

                                                                "Project No." := '';
                                                                Element := '';
                                                                "Cost Object" := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostCode;
                                                            END;

                                                   CaptionML=[ENU=Cost Code;
                                                              NOR=Kostkode;
                                                              SVE=Kostnadskod] }
    { 80  ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                IF "End Date" <> 0D THEN
                                                                  IF "End Date" < "Start Date" THEN
                                                                    ERROR(Text001);

                                                                IF ("End Date" = "Start Date") AND ("End Time" <> 0T) AND ("Start Time" > "End Time") THEN
                                                                  ERROR(Text002);

                                                                CalculateHours;
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 90  ;   ;End Time            ;Time          ;OnValidate=BEGIN
                                                                IF "End Time" <> 0T THEN
                                                                  IF ("End Time" < "Start Time") AND ("End Date" = "Start Date") THEN
                                                                    ERROR(Text002);

                                                                CalculateHours;
                                                              END;

                                                   CaptionML=[ENU=End Time;
                                                              NOR=Sluttid;
                                                              SVE=Sluttid] }
    { 110 ;   ;Hours               ;Decimal       ;CaptionML=[ENU=Hours;
                                                              NOR="Timer ";
                                                              SVE=Timmar] }
    { 120 ;   ;Hour Line Template Code;Code20     ;TableRelation=IF (Receiving Company=FILTER('')) "Hour Line Template".Code WHERE (Source=CONST(Site Mngmnt. Hours),
                                                                                                                                    Receiving Company=FIELD(Supplying Company));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Line Template Code;
                                                              SVE=Mallrad kod] }
    { 130 ;   ;Supplying Company   ;Text50        ;TableRelation=Company;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Supplying Company;
                                                              SVE=Levererande f”retag] }
    { 140 ;   ;Receiving Company   ;Text50        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                CheckLicenceIC@1100528200 : Codeunit 11012780;
                                                              BEGIN
                                                                IF "Receiving Company" <> '' THEN
                                                                  CheckLicenceIC.CheckICEntry("Receiving Company");

                                                                IF (xRec."Receiving Company" <> "Receiving Company") THEN BEGIN
                                                                  "Project No." := '';
                                                                  Element := '';
                                                                  "Cost Object" := '';
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Receiving Company;
                                                              SVE=Mottagningsf”retag] }
  }
  KEYS
  {
    {    ;Employee No.,Start Date,Line No.        ;SumIndexFields=Hours;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528514 : TextConst 'ENU=End date must be later than start date.';
      Text002@1100528515 : TextConst 'ENU=End time must be later than start time.';
      Text003@1100528200 : TextConst 'ENU=Employee %1 allready signed out';
      ICProjSetup@1100528201 : Record 315;
      Job@1100528202 : Record 11072003;
      ProjectElement@1100528203 : Record 11012010;
      DimensionValue@1100528204 : Record 349;
      CostCode@1100528205 : Record 11012083;
      Text004@1100528206 : TextConst 'ENU=Barcode unknown.';

    LOCAL PROCEDURE CalculateHours@1100528515() : Decimal;
    VAR
      BarcodeHourAccountingSetup@1100528200 : Record 11128531;
      StartDateTime@1100528500 : DateTime;
      EndDateTime@1100528501 : DateTime;
      TotalHours@1100528502 : Decimal;
    BEGIN
      Hours := 0;
      BarcodeHourAccountingSetup.GET;
      IF ("End Date" <> 0D) AND ("End Time"<>0T) THEN BEGIN
        IF BarcodeHourAccountingSetup."Discount Break Time" THEN BEGIN
          Hours := CalcWorkingHours;
        END ELSE BEGIN
          StartDateTime := CREATEDATETIME("Start Date", "Start Time");
          EndDateTime := CREATEDATETIME("End Date", "End Time");
          TotalHours := (EndDateTime - StartDateTime) / 1000 / 60 / 60;
          Hours := TotalHours;
        END;
      END;
    END;

    PROCEDURE CalcDailyWorkedHoursPerEmployee@1100528519(EmployeeNo@1100528500 : Code[20];Date@1100528502 : Date) : Decimal;
    VAR
      DailyHours@1100528501 : Decimal;
      BarcodeHourAccounting@1100528200 : Record 11128530;
    BEGIN
      BarcodeHourAccounting.RESET;
      BarcodeHourAccounting.SETRANGE("Employee No.", EmployeeNo);
      BarcodeHourAccounting.SETRANGE("Start Date", Date);

      IF BarcodeHourAccounting.CALCSUMS(Hours) THEN
        DailyHours := BarcodeHourAccounting.Hours;

      EXIT(ROUND(DailyHours,0.01));
    END;

    LOCAL PROCEDURE ExtractBarcode@1100528511(lvBarcode@1100528500 : Text[250]);
    VAR
      BarcodeHourAccountingSetup@1100528202 : Record 11128531;
      Job@1100528200 : Record 11072003;
      Company@1100528206 : Record 2000000006;
      SeparatorChar@1100528203 : Code[2];
      HashPosition@1100528205 : Integer;
      ReceivingCompanyTxt@1100528201 : Text[80];
      ProjectNoBarcode@1100528209 : Code[20];
      ElementBarcode@1100528208 : Code[20];
      CostObjectBarcode@1100528207 : Code[20];
      Ipos@1100528204 : Integer;
    BEGIN
      SeparatorChar := '#';
      BarcodeHourAccountingSetup.GET;
      IF BarcodeHourAccountingSetup."Separator Character" <> '' THEN
        SeparatorChar := BarcodeHourAccountingSetup."Separator Character";

      HashPosition := STRPOS(lvBarcode, SeparatorChar);
      IF HashPosition = 0 THEN BEGIN
        ProjectNoBarcode := lvBarcode;
      END ELSE BEGIN
        IF HashPosition = 1 THEN BEGIN
          ReceivingCompanyTxt := ''
        END ELSE BEGIN
          ReceivingCompanyTxt := COPYSTR(lvBarcode, 1, HashPosition-1);
          FOR Ipos := 1 TO STRLEN(ReceivingCompanyTxt) DO
            BEGIN
              IF COPYSTR(ReceivingCompanyTxt,Ipos,1) = '+' THEN
                 ReceivingCompanyTxt := COPYSTR(ReceivingCompanyTxt,1, Ipos - 1) +  COPYSTR(ReceivingCompanyTxt,Ipos+1);
            END;

          IF UPPERCASE(ReceivingCompanyTxt) = UPPERCASE(COMPANYNAME) THEN BEGIN
            ReceivingCompanyTxt := '';
          END ELSE BEGIN
            Company.FINDFIRST;
            REPEAT
              IF UPPERCASE(Company.Name) = UPPERCASE(ReceivingCompanyTxt) THEN
                ReceivingCompanyTxt := Company.Name;
            UNTIL (Company.NEXT = 0) OR (UPPERCASE(Company.Name) = UPPERCASE(ReceivingCompanyTxt));
            IF UPPERCASE(Company.Name) = UPPERCASE(ReceivingCompanyTxt) THEN
              ReceivingCompanyTxt := Company.Name;
          END;
        END;

        ProjectNoBarcode := '';
        ElementBarcode := '';
        CostObjectBarcode := '';

        lvBarcode := DELSTR(lvBarcode, 1, HashPosition);
        HashPosition := STRPOS(lvBarcode, SeparatorChar);
        IF HashPosition = 0 THEN BEGIN
          ProjectNoBarcode := lvBarcode;
        END ELSE BEGIN
          IF HashPosition > 1 THEN BEGIN
            ProjectNoBarcode := COPYSTR(lvBarcode, 1, HashPosition-1);
            lvBarcode := DELSTR(lvBarcode, 1, HashPosition);
            HashPosition := STRPOS(lvBarcode, SeparatorChar);
            IF HashPosition > 1 THEN BEGIN
              ElementBarcode := COPYSTR(lvBarcode, 1, HashPosition-1);
              CostObjectBarcode := DELSTR(lvBarcode, 1, HashPosition);
            END ELSE BEGIN
              IF HashPosition = 1 THEN
                CostObjectBarcode := DELSTR(lvBarcode, 1, HashPosition);
            END;
          END;
        END;
      END;

      VALIDATE("Receiving Company", ReceivingCompanyTxt);

      IF ProjectNoBarcode <> '' THEN BEGIN
        CheckCompanyIC;
        IF Job.GET(ProjectNoBarcode) THEN BEGIN
          VALIDATE("Project No.",ProjectNoBarcode);
          IF ElementBarcode <>'' THEN
            VALIDATE(Element,ElementBarcode);
          IF CostObjectBarcode <> '' THEN
           VALIDATE("Cost Object", CostObjectBarcode);
        END ELSE BEGIN
          IF CostCode.GET(lvBarcode) THEN
            VALIDATE("Cost Code", lvBarcode)
          ELSE
            ERROR(Text004);
        END;
      END;
    END;

    PROCEDURE CloseLine@1100527215(VAR BarcodeHourAccLine@1100527202 : Record 11128530);
    BEGIN
      BarcodeHourAccLine."End Date" := "Start Date";
      BarcodeHourAccLine.VALIDATE("End Time",TIME);
      BarcodeHourAccLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CloseActiveLines@1100528510(Employee@1100527200 : Code[20]);
    VAR
      BarcodeHourAccounting@1100528200 : Record 11128530;
    BEGIN
      BarcodeHourAccounting.SETFILTER("Employee No.", Employee);
      BarcodeHourAccounting.SETRANGE("Start Date","Start Date");
      BarcodeHourAccounting.SETRANGE("End Date", 0D);
      BarcodeHourAccounting.SETFILTER("Line No.", '<>%1',"Line No.");
      IF BarcodeHourAccounting.FINDSET(TRUE,TRUE) THEN
        REPEAT
          CloseLine(BarcodeHourAccounting);
        UNTIL BarcodeHourAccounting.NEXT = 0
    END;

    PROCEDURE CalculateNormHours@1100525000(EmployeeCde@1100528202 : Code[20];CheckDate@1100528201 : Date) HoursAvailable : Decimal;
    VAR
      BarcodeHourAccountingSetup@1100528204 : Record 11128531;
      ProjActivCapCommonMgt@1100525000 : Codeunit 11125706;
      DateIsWorkingDate@1100525002 : Boolean;
      CalendarCde@1100528200 : Code[10];
      Employee@1100528203 : Record 5200;
    BEGIN
      BarcodeHourAccountingSetup.GET;
      IF EmployeeCde = '' THEN
        EXIT;

      IF BarcodeHourAccountingSetup."Discount Break Time" THEN BEGIN
        CalendarCde := ProjActivCapCommonMgt.GetCalendarCode;
        IF CalendarCde <> '' THEN
          DateIsWorkingDate := ProjActivCapCommonMgt.DateIsWorkingDate(CalendarCde, CheckDate);
        IF DateIsWorkingDate THEN
          HoursAvailable := ProjActivCapCommonMgt.CalcAvailableEmplHoursOnDate(EmployeeCde, CheckDate);
      END ELSE BEGIN
        Employee.GET(EmployeeCde);
        IF Employee."Norm Hours" * Employee."Norm Days" <> 0 THEN
          HoursAvailable := Employee."Norm Hours"/Employee."Norm Days";
      END;
      EXIT(ROUND(HoursAvailable,0.01));
    END;

    PROCEDURE CalcWorkingHours@1100528442() ActualWorkingHours : Decimal;
    VAR
      NormalWorkFrom@1100528410 : Time;
      NormalWorkUntil@1100528409 : Time;
      NormalPauseFrom@1100528408 : Time;
      NormalPauseUntil@1100528407 : Time;
      ActualWorkingFromTime@1100528406 : Time;
      ActualWorkingUntilTime@1100528405 : Time;
      WorkOrderStartingTime@1100528411 : Time;
      WorkOrderEndingTime@1100528412 : Time;
      WorkOrderStartingDate@1100528414 : Date;
      WorkOrderEndingDate@1100528413 : Date;
      NormalHours@1100528402 : Decimal;
      WeekDay@1100528200 : Integer;
      HourAccountingLine@1100528201 : Record 11012039;
    BEGIN
      WeekDay := DATE2DWY("Start Date", 1);

      HourAccountingLine.GetNormalEmployeeWorkingTimeForWeekDay(
        "Employee No.", TRUE, "Start Date", WeekDay, NormalHours, NormalWorkFrom,
        NormalWorkUntil, NormalPauseFrom, NormalPauseUntil);

      IF NormalHours = 0 THEN
        EXIT; //Only calculate hours for days on which the employee normally works.

      WorkOrderStartingTime := "Start Time";
      WorkOrderStartingDate := "Start Date";
      IF (WorkOrderStartingTime > 0T) AND
         (WorkOrderStartingTime <> NormalWorkFrom)
      THEN
        ActualWorkingFromTime := WorkOrderStartingTime;

      WorkOrderEndingTime := "End Time";
      WorkOrderEndingDate := "End Date";
      IF (WorkOrderEndingTime > 0T) AND
         (WorkOrderEndingTime <> NormalWorkUntil)
      THEN
        ActualWorkingUntilTime := WorkOrderEndingTime;

      ActualWorkingHours := HourAccountingLine.CalcActualWorkingHours(
        NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil,
        ActualWorkingFromTime, ActualWorkingUntilTime, TRUE);
    END;

    LOCAL PROCEDURE FinishDailyHours@1100528200();
    VAR
      BarcodeHourAccountingSetup@1100528200 : Record 11128531;
      BarcodeHourAccounting@1100528205 : Record 11128530;
      DailyWorkedHours@1100528204 : Decimal;
      DailyNormHours@1100528203 : Decimal;
      BarcodeHourAccountingCard@1100528202 : Page 11127161;
      LastLineNo@1100528201 : Integer;
      Repeatloop@1100528206 : Integer;
    BEGIN
      BarcodeHourAccountingSetup.GET;
      IF Barcode = BarcodeHourAccountingSetup."Sign Out Code" THEN BEGIN
        IF "Start Date" = 0D THEN
          "Start Date" := TODAY;
        IF "Start Time"= 0T THEN
          "Start Time" := TIME;
        "End Date" := "Start Date";
        "End Time" := "Start Time";
        DailyWorkedHours := CalcDailyWorkedHoursPerEmployee("Employee No.", "Start Date");
        DailyNormHours := CalculateNormHours("Employee No.", "Start Date");
        IF DailyWorkedHours < DailyNormHours THEN BEGIN
          BarcodeHourAccounting.RESET;
          BarcodeHourAccounting.SETRANGE("Employee No.","Employee No.");
          BarcodeHourAccounting.SETRANGE("Start Date","Start Date");
          IF BarcodeHourAccounting.FINDLAST THEN
            LastLineNo := BarcodeHourAccounting."Line No.";
          IF ABS(DailyNormHours-DailyWorkedHours) * 60 > BarcodeHourAccountingSetup."Tolerance Norm Hours" THEN BEGIN
            BarcodeHourAccounting := Rec;
            IF NOT BarcodeHourAccounting.FIND('=') THEN BEGIN
              "Line No." := LastLineNo + 10000;
              INSERT(TRUE);
              BarcodeHourAccounting := Rec;
              BarcodeHourAccounting.FIND('=')
            END;
            BarcodeHourAccounting.VALIDATE("Cost Code",BarcodeHourAccountingSetup."Cost Code Unaccounted Hours");
            BarcodeHourAccounting."Start Date" := "Start Date";
            BarcodeHourAccounting."Start Time" := "Start Time";
            BarcodeHourAccounting."End Date" := "Start Date";
            BarcodeHourAccounting.VALIDATE("End Time", "Start Time" + (ABS(DailyNormHours-DailyWorkedHours) * 60 * 60 * 1000));
            BarcodeHourAccounting.Hours := ROUND(BarcodeHourAccounting.Hours,0.01);
            BarcodeHourAccounting.MODIFY;
            IF DailyNormHours-DailyWorkedHours - BarcodeHourAccounting.Hours <> 0 THEN BEGIN
              REPEAT
                Repeatloop += 1;
                BarcodeHourAccounting."End Time" := BarcodeHourAccounting."End Time" + ((DailyNormHours-DailyWorkedHours - BarcodeHourAccounting.Hours) * 60 * 60 * 1000);
                IF BarcodeHourAccounting."End Time" < BarcodeHourAccounting."Start Time" THEN
                  BarcodeHourAccounting."End Time" := BarcodeHourAccounting."Start Time";
                BarcodeHourAccounting.VALIDATE("End Time");
                BarcodeHourAccounting.Hours := ROUND(BarcodeHourAccounting.Hours,0.01);
                BarcodeHourAccounting.MODIFY;
              UNTIL (DailyNormHours-DailyWorkedHours - BarcodeHourAccounting.Hours = 0) OR (Repeatloop = 5);
            END;
            Rec := BarcodeHourAccounting;
            FIND('=');
            COMMIT;
            BarcodeHourAccounting.SETRECFILTER;
            BarcodeHourAccountingCard.SETTABLEVIEW(BarcodeHourAccounting);
            BarcodeHourAccountingCard.SETRECORD(BarcodeHourAccounting);
            BarcodeHourAccountingCard.RUNMODAL;
            BarcodeHourAccountingCard.GETRECORD(Rec);
          END ELSE BEGIN
            VALIDATE("Cost Code",BarcodeHourAccountingSetup."Cost Code Unaccounted Hours");
            VALIDATE("End Date", "Start Date");
            VALIDATE("End Time", "Start Time" + (ABS(DailyNormHours-DailyWorkedHours) * 60 * 60 * 1000));
            BarcodeHourAccounting.Hours := ROUND(BarcodeHourAccounting.Hours,0.01);
            MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE GetProjectDescription@1100528201() : Text;
    BEGIN
      CheckCompanyIC;
      IF "Project No." <> '' THEN BEGIN
        Job.GET("Project No.");
        EXIT(Job.Description);
      END ELSE
        EXIT('');
    END;

    PROCEDURE GetCostObjectDescription@1100528202() : Text;
    BEGIN
      CheckCompanyIC;
      IF "Cost Object" <>  '' THEN BEGIN
        DimensionValue.RESET;
        DimensionValue.SETRANGE("Global Dimension No.",2);
        DimensionValue.SETRANGE(Code,"Cost Object");
        IF DimensionValue.FINDFIRST THEN BEGIN
          EXIT(DimensionValue.Name);
        END;
      END ELSE
        EXIT('');
    END;

    PROCEDURE GetElementDescription@1100528203() : Text;
    BEGIN
      CheckCompanyIC;
      IF (Element <> '') AND ("Project No." <> '') THEN BEGIN
        ProjectElement.GET("Project No.",Element);
        EXIT(ProjectElement.Description);
      END ELSE
        EXIT('');
    END;

    PROCEDURE GetCostCodeDescription@1100528204() : Text;
    BEGIN
      CheckCompanyIC;
      IF "Cost Code" <> '' THEN BEGIN
        CostCode.GET("Cost Code");
        EXIT(CostCode.Description);
      END ELSE
        EXIT('');
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE CheckCompanyIC@32();
    BEGIN
      ICProjSetup.CHANGECOMPANY("Receiving Company");
      Job.CHANGECOMPANY("Receiving Company");
      ProjectElement.CHANGECOMPANY("Receiving Company");
      DimensionValue.CHANGECOMPANY("Receiving Company");
      CostCode.CHANGECOMPANY("Receiving Company");

      ICProjSetup.GET;
    END;

    PROCEDURE LookupCostCode@1100528406();
    BEGIN
      CheckCompanyIC;
      CostCode.Code := "Cost Code";
      IF PAGE.RUNMODAL(0, CostCode) = ACTION::LookupOK THEN BEGIN
        CurrFieldNo := FIELDNO("Cost Code");
        VALIDATE("Cost Code", CostCode.Code);
      END;
    END;

    PROCEDURE LookupProjectNo@1100528409();
    VAR
      PageNo@1100528400 : Integer;
    BEGIN
      CheckCompanyIC;
      Job."No." := "Project No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF PAGE.RUNMODAL(PageNo, Job) = ACTION::LookupOK THEN
        VALIDATE("Project No.", Job."No.");
    END;

    PROCEDURE LookupCostObject@1100528410();
    BEGIN
      CheckCompanyIC;

      DimensionValue.RESET;
      DimensionValue.Code := "Cost Object";
      DimensionValue.SETRANGE("Global Dimension No.", 2);
      DimensionValue.SETFILTER("Cost Type",'%1|%2', DimensionValue."Cost Type"::Labor, DimensionValue."Cost Type"::Sundry);
      DimensionValue.SETRANGE("Project Filter", "Project No.");
      IF "Receiving Company" = '' THEN
        DimensionValue.SETRANGE("Company Filter")
      ELSE
        DimensionValue.SETRANGE("Company Filter", "Receiving Company");
      IF PAGE.RUNMODAL(PAGE::"Cost Object List",DimensionValue) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Cost Object", DimensionValue.Code);
      END;
      DimensionValue.RESET;
    END;

    LOCAL PROCEDURE LookupHourLineTemplate@1100528000();
    VAR
      HourLineTemplate@1100528000 : Record 11229799;
    BEGIN
      HourLineTemplate.Code := "Hour Line Template Code";
      IF "Receiving Company" = '' THEN
        HourLineTemplate.SETRANGE("Receiving Company", COMPANYNAME)
      ELSE
        HourLineTemplate.SETRANGE("Receiving Company", "Receiving Company");

      IF "Project No." <> '' THEN
        HourLineTemplate.SETRANGE(Type, HourLineTemplate.Type::Project);
      IF "Cost Code" <> '' THEN
        HourLineTemplate.SETRANGE(Type, HourLineTemplate.Type::Indirect);

      IF PAGE.RUNMODAL(PAGE::"Hour Line Template List", HourLineTemplate) = ACTION::LookupOK THEN
        VALIDATE("Hour Line Template Code", HourLineTemplate.Code);
    END;

    PROCEDURE CheckProjectStatus@1100525006();
    VAR
      BlockingCode@1100525000 : Record 11012027;
    BEGIN
      Job.CHANGECOMPANY("Receiving Company");
      Job.GET("Project No.");
      ICProjSetup.CHANGECOMPANY("Receiving Company");
      ICProjSetup.GET;

      IF (Job."Blocking Code" <> '') AND
         ((Job."Project Status" = Job."Project Status"::"Technical Finished") OR
          (Job."Project Status" = Job."Project Status"::"Administrative Finished") OR
          ((Job."Project Status" = Job."Project Status"::Finished) AND ICProjSetup."Provisions at Closure")
         ) THEN
      BEGIN
        BlockingCode.Switch := BlockingCode.Switch::"Hour Accounting";
        BlockingCode.CheckBlocked(Job."Blocking Code", BlockingCode.Switch, Job, TRUE);
      END ELSE BEGIN
        IF (ICProjSetup."Provisions at Closure") THEN
          Job.CheckProjectStatus(-1)
        ELSE
          Job.CheckProjectStatus(1);
      END;
    END;

    BEGIN
    END.
  }
}

