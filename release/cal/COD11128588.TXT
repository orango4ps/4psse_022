OBJECT Codeunit 11128588 Sales-Post + XML File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVDK9.00 (13618);
  }
  PROPERTIES
  {
    TableNo=36;
    Permissions=TableData 112=rimd,
                TableData 114=rimd;
    OnRun=BEGIN
            SalesHeader.COPY(Rec);
            Code;
            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      HowToPostQst@1000 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;NOR=&Lever,F&akturer,Lever &og fakturer;SVE=&Leverera,&Fakturera,Leverera &och fakturera';
      PostAndFileQst@1001 : TextConst 'ENU=Do you want to post and file the %1?';
      HowToReceiveQst@1002 : TextConst 'ENU=&Receive,&Invoice,Receive &and Invoice;NOR=&Motta,F&akturer,Motta &og fakturer;SVE=&Inleverera,&Fakturera,Inleverera &och fakturera';
      SalesHeader@1003 : Record 36;
      SalesInvHeader@1005 : Record 112;
      SalesCrMemoHeader@1006 : Record 114;
      Selection@1010 : Integer;
      NoEANNoErr@1060000 : TextConst 'ENU=There are no EAN no. specificed. The file cannot be uploaded.';

    LOCAL PROCEDURE Code@2();
    VAR
      SalesSetup@1001 : Record 311;
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      WITH SalesHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              Selection := STRMENU(HowToPostQst,3);
              IF Selection = 0 THEN
                EXIT;
              Ship := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END;
          "Document Type"::"Return Order":
            BEGIN
              Selection := STRMENU(HowToReceiveQst,3);
              IF Selection = 0 THEN
                EXIT;
              Receive := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END
          ELSE
            IF NOT
               CONFIRM(PostAndFileQst,FALSE,"Document Type")
            THEN
              EXIT;
        END;

        "Print Posted Documents" := TRUE;
        SalesSetup.GET;
        IF SalesSetup."Post & Print with Job Queue" THEN
          SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
        ELSE BEGIN
          SalesSetup.VerifyAndSetOIOUBLPathSetup("Document Type");
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
          COMMIT;
          SaveOIOXML(SalesHeader);
        END;
      END;
    END;

    PROCEDURE SaveOIOXML@3(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
        IF "EAN No." = '' THEN
          ERROR(NoEANNoErr);
        CASE "Document Type" OF
          "Document Type"::Order:
            SaveInvoiceOIOXML(SalesInvHeader."No.");
          "Document Type"::Invoice:
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesInvHeader."No." := "No."
              ELSE
                SalesInvHeader."No." := "Last Posting No.";
              SaveInvoiceOIOXML(SalesInvHeader."No.");
            END;
          "Document Type"::"Return Order":
           IF Invoice THEN
              SaveCreditmemoOIOXML(SalesCrMemoHeader."No.");
          "Document Type"::"Credit Memo":
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesCrMemoHeader."No." := "No."
              ELSE
                SalesCrMemoHeader."No." := "Last Posting No.";
              SaveCreditmemoOIOXML(SalesCrMemoHeader."No.");
            END;

        END;
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE SaveInvoiceOIOXML@1060000(DocumentNo@1060007 : Code[20]);
    VAR
      OIOUBLExportSalesInvoice@1060000 : Codeunit 11128579;
    BEGIN
      IF SalesInvHeader.GET(DocumentNo) THEN
        OIOUBLExportSalesInvoice.ExportXML(SalesInvHeader);
    END;

    LOCAL PROCEDURE SaveCreditmemoOIOXML@1060001(DocumentNo@1060007 : Code[20]);
    VAR
      OIOUBLExportSalesCrMemo@1060000 : Codeunit 11128580;
    BEGIN
      IF SalesCrMemoHeader.GET(DocumentNo) THEN
        OIOUBLExportSalesCrMemo.ExportXML(SalesCrMemoHeader);
    END;

    BEGIN
    END.
  }
}

