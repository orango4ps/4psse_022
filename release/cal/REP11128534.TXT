OBJECT Report 11128534 Remittance - Import (BBS)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO10.00 (15000063),4PSSE.NO;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Remittance - Import (BBS);
               NOR=Remittering - les inn (BBS)];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   DateNow := TODAY;
                   TimeNow := TIME;
                   Recordtype89IsRead := FALSE;
                   CreateNewDocumentNo := TRUE;
                   MoreReturnJournals := FALSE;
                   FileImp := STRSUBSTNO(Text15000004,CurrentFilename);
                 END;

    OnPreReport=BEGIN
                  ServerTempFile := FileMgt.UploadFileSilent(CurrentFilename);
                  // Create work file.
                  // No changes are made directly to the OriginalFilename, since it is renamed
                  // at the end (the file can't be renamed while it's open).

                  TxtFile.TEXTMODE := TRUE;
                  TxtFile.OPEN(ServerTempFile);

                  CreatePaymOrder;
                  WHILE TxtFile.LEN <> TxtFile.POS DO BEGIN
                    TxtFile.READ(FileData);
                    PaymentOrderData2.INIT;
                    PaymentOrderData2."Payment Order No." := PaymOrder.ID;
                    PaymentOrderData2."Line No" += 1;
                    PaymentOrderData2.Data := PADSTR(FileData,80,' '); // Make sure the line is 80 chars long.;
                    PaymentOrderData2.INSERT;
                  END
                END;

    OnPostReport=BEGIN
                   TxtFile.CLOSE;

                   // Recordtype89 must be read by the end of import:
                   IF NOT Recordtype89IsRead THEN
                     ERROR(Text15000006,FileImp);

                   IF NOT CONFIRM(STRSUBSTNO(
                          Text15000000,
                          FileMgt.GetFileName(CurrentFilename),NumberSettled),TRUE)
                   THEN
                     ERROR(Text15000003);

                   PaymentOrderData2.DELETEALL;
                 END;

    UseRequestPage=No;
  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               SETRANGE(Number,1,PaymentOrderData2.COUNT);
                             END;

               OnAfterGetRecord=VAR
                                  Recordtype@1460000 : Code[2];
                                BEGIN
                                  IF Number = 1 THEN
                                    PaymentOrderData2.FINDSET
                                  ELSE
                                    PaymentOrderData2.NEXT;

                                  // import line to a variable, handle it later:
                                  LineData := PaymentOrderData2.Data;

                                  Recordtype := COPYSTR(LineData,7,2);
                                  CASE Recordtype OF
                                    '10':
                                      Recordtype10;
                                    '20':
                                      Recordtype20;
                                    '30':
                                      Recordtype30;
                                    '31':
                                      Recordtype31;
                                    '88':
                                      Recordtype88;
                                    '89':
                                      Recordtype89;
                                    ELSE
                                      ERROR(Text15000005,FileImp,Recordtype);
                                  END;

                                  PaymentOrderData := PaymentOrderData2;
                                  PaymentOrderData.INSERT;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      RemAccount@1080000 : Record 11128506;
      LatestRemAccount@1080001 : Record 11128506;
      PaymOrder@1080002 : Record 11128504;
      RemAgreement@1080003 : Record 11128503;
      LatestRemAgreement@1080004 : Record 11128503;
      WaitingJournal@1080005 : Record 11128507;
      CurrentJournal@1080007 : Record 81;
      PaymentOrderData@1080008 : Record 11128505;
      PaymentOrderData2@1080009 : TEMPORARY Record 11128505;
      NoSeriesControl@1080011 : Codeunit 396;
      RemTools@1080012 : Codeunit 11128515;
      FileMgt@1080058 : Codeunit 419;
      TxtFile@1080060 : File;
      JournalNextLineNo@1080016 : Integer;
      NumberSettled@1080017 : Integer;
      PaymOrderNo@1080018 : Integer;
      TransNo@1080019 : Integer;
      TransOwnref@1080020 : Integer;
      ShipmentNo@1080021 : Integer;
      BalanceEntryAmountLCY@1080022 : Decimal;
      TransAmount@1080023 : Decimal;
      LatestVend@1080025 : Code[20];
      DataRecipient@1080026 : Code[8];
      TransDocumentNo@1080027 : Code[10];
      CurrentFilename@1080028 : Text[250];
      LineData@1080030 : Text[80];
      CurrentNote@1080031 : Text[80];
      FileData@1080061 : Text[80];
      FileImp@1080032 : Text[250];
      ServerTempFile@1080059 : Text[1024];
      First@1080033 : Boolean;
      Recordtype89IsRead@1080034 : Boolean;
      CreateNewDocumentNo@1080035 : Boolean;
      MoreReturnJournals@1080036 : Boolean;
      LatestDate@1080037 : Date;
      TransBBSDate@1080038 : Date;
      Text15000000@1080041 : TextConst '@@@=Parameter 1 - file name, 2 - integer number.;ENU=Return data was imported correctly from the file "%1":\Settled: %2.\\%2 settled payments are transferred to the payment journal.;NOR=Returdata ble lest inn riktig fra filen %1:\Avregnet: %2.\\%2 avregnede betalinger overf›res til betalingskladden.';
      Text15000003@1080044 : TextConst 'ENU=Import is cancelled.;NOR=Innlesing avbrutt.';
      Text15000004@1080045 : TextConst 'ENU=Return file "%1":;NOR=Returfil "%1":';
      Text15000005@1080046 : TextConst 'ENU=%1\Error: Record type is not valid "%2".;NOR=%1\Feil: Ugyldig posttype "%2".';
      Text15000006@1080047 : TextConst 'ENU=%1\Return file is not complete. Cannot find closing record for shipment (Recordtype 89) in the return file.\Import is cancelled.;NOR=%1\Returfilen er ikke komplett. Fant ikke sluttpost for forsendelse (Posttype 89) i returfilen.\Innlesing avbrutt.';
      Text15000008@1080049 : TextConst 'ENU=The file does not correspond to this BBS contract.\The BBS Customer Unit ID %1 is registered in the agreement, while %2 is registered in the file.\Import is cancelled.;NOR=Filen tilh›rer ikke denne avtalen med BBS.\Enhets-ID for BBS-kunde %1 er registrert i avtalen, mens %2 er registrert i filen.\Innlesing avbrutt.';
      Text15000010@1080051 : TextConst 'ENU=can not be %1 in settlement;NOR=kan ikke v‘re %1 ved avregning';
      Text15000011@1080052 : TextConst 'ENU=Due date is changed from %1 to %2.;NOR=Forfallsdato endret fra %1 til %2.';
      Text15000012@1080053 : TextConst 'ENU=Remittance: Vendor %1;NOR=Remittering: Leverand›r %1';
      Text15000013@1080054 : TextConst 'ENU=Remittance: Vendor %1;NOR=Remittering: Leverand›r %1';
      Text15000014@1080055 : TextConst 'ENU=must be specified;NOR=m† angis';
      Text15000015@1080056 : TextConst 'ENU=%1\The Remittance Status cannot be %2 for waiting journal line with Reference %3.;NOR=%1\Remitteringsstatusen kan ikke v‘re %2 for ventekladdlinjen med referanse %3.';
      DateNow@1080039 : Date;
      TimeNow@1080040 : Time;
      GenJnlLineExt@111280000 : Record 11128091;

    LOCAL PROCEDURE Recordtype10@1080000();
    BEGIN
      // Start record shipment
      EVALUATE(ShipmentNo,COPYSTR(LineData,17,7));
      DataRecipient := COPYSTR(LineData,24,8);
    END;

    LOCAL PROCEDURE Recordtype20@1080001();
    BEGIN
      // Start record payment order
      EVALUATE(PaymOrderNo,COPYSTR(LineData,18,7));
    END;

    LOCAL PROCEDURE Recordtype30@1080002();
    BEGIN
      // Transaction record, amount entry 1
      NewTransaction;
      EVALUATE(TransNo,COPYSTR(LineData,9,7));
      EVALUATE(TransBBSDate,COPYSTR(LineData,16,6));
      EVALUATE(TransAmount,COPYSTR(LineData,33,17));
    END;

    LOCAL PROCEDURE Recordtype31@1080003();
    BEGIN
      // Transaction record, amount entry 2
      EVALUATE(TransOwnref,COPYSTR(LineData,26,25));
      ProcessTransaction;
    END;

    LOCAL PROCEDURE Recordtype88@1080004();
    BEGIN
      // End record PaymOrder
    END;

    LOCAL PROCEDURE Recordtype89@1080005();
    BEGIN
      // End record shipment
      Recordtype89IsRead := TRUE;
    END;

    LOCAL PROCEDURE ProcessTransaction@1080006();
    VAR
      GenJnlLine@1000000000 : Record 81;
      TransAmountCheck@1000000001 : Decimal;
    BEGIN
      // Process transaction - i.e. Recordtype 31 is now read and the OwnRef is known.

      // Update Waiting journal:
      WaitingJournal.SETCURRENTKEY("BBS Referance");
      WaitingJournal.SETRANGE("BBS Referance",TransOwnref);
      WaitingJournal.FIND('-');

      RemAccount.GET(WaitingJournal."Remittance Account Code");
      RemAgreement.GET(RemAccount."Remittance Agreement Code");
      // make sure the return file belongs to the user:
      IF RemAgreement."BBS Customer Unit ID" <> DataRecipient THEN
        ERROR(
          Text15000008,
          RemAgreement."BBS Customer Unit ID",DataRecipient);

      TransAmountCheck := 0;
      REPEAT
        NumberSettled := NumberSettled + 1;
        FindDocumentNo(TransBBSDate);

        // If the status is not sent or approved, it will not be changed to settled.
        // Note: Waiting journal can never have status approved for BBS.
        IF (WaitingJournal."Remittance Status" <> WaitingJournal."Remittance Status"::Sent) AND
           (WaitingJournal."Remittance Status" <> WaitingJournal."Remittance Status"::Approved)
        THEN
          WaitingJournal.FIELDERROR(
            "Remittance Status",STRSUBSTNO(Text15000010,WaitingJournal."Remittance Status"));

        // Prepare and insert into journal:
        GenJnlLine.INIT;
        GenJnlLine.TRANSFERFIELDS(WaitingJournal);
        InitJournalLine(GenJnlLine,RemAccount);
        GenJnlLineExt.InitGetLine(GenJnlLine);//4PSSE
        IF GenJnlLine."Posting Date" <> TransBBSDate THEN
          RemTools.InsertWarning(
            GenJnlLineExt,STRSUBSTNO(Text15000011,
              GenJnlLine."Posting Date",TransBBSDate));
        GenJnlLine.VALIDATE("Posting Date",TransBBSDate);
        GenJnlLine.VALIDATE("Document No.",TransDocumentNo);
        GenJnlLine.INSERT(TRUE);
        GenJnlLineExt.SaveUpdateLine(GenJnlLine);//4PSSE
        WaitingJournal.RecreateLineDimensions(GenJnlLine);

        // Update amount to balance entry etc.
        BalanceEntryAmountLCY := BalanceEntryAmountLCY + GenJnlLine."Amount (LCY)";
        TransAmountCheck := TransAmountCheck + GenJnlLine."Amount (LCY)";

        // Update waiting journal
        WaitingJournal.VALIDATE("Payment Order ID - Settled",PaymOrder.ID);
        WaitingJournal.VALIDATE("BBS Shipment No.",ShipmentNo);
        WaitingJournal.VALIDATE("BBS Payment Order No.",PaymOrderNo);
        WaitingJournal.VALIDATE("BBS Transaction No.",TransNo);
        WaitingJournal.VALIDATE("Journal, Settlement Template",GenJnlLine."Journal Template Name");
        WaitingJournal.VALIDATE("Journal - Settlement",GenJnlLine."Journal Batch Name");
        WaitingJournal.MODIFY(TRUE);
      UNTIL WaitingJournal.NEXT = 0;

      CreateBalanceEntry(TransBBSDate,WaitingJournal."Account No.",RemAccount,RemAgreement);
    END;

    LOCAL PROCEDURE CreatePaymOrder@1080007();
    VAR
      NextPaymOrderID@1000000000 : Integer;
    BEGIN
      // Create import of PaymOrder.
      // Find ID. Find Next:
      PaymOrder.LOCKTABLE;
      IF PaymOrder.FINDLAST THEN
        NextPaymOrderID := PaymOrder.ID + 1
      ELSE
        NextPaymOrderID := 1;

      // Insert new PaymOrder. Set the remaining data later:
      PaymOrder.INIT;
      PaymOrder.VALIDATE(ID,NextPaymOrderID);
      PaymOrder.VALIDATE(Date,DateNow);
      PaymOrder.VALIDATE(Time,TimeNow);
      PaymOrder.VALIDATE(Type,PaymOrder.Type::Return);
      PaymOrder.VALIDATE(Comment,CurrentNote);
      PaymOrder.INSERT(TRUE);
    END;

    LOCAL PROCEDURE FindDocumentNo@1080008(PostDate@1000000000 : Date);
    BEGIN
      IF CreateNewDocumentNo THEN BEGIN
        CLEAR(NoSeriesControl);
        TransDocumentNo := '';
        NoSeriesControl.InitSeries(
          RemAccount."Document No. Series",'',PostDate,TransDocumentNo,RemAccount."Document No. Series");
        CreateNewDocumentNo := FALSE;
      END;
      // TransDocumentNo is now current Document no.
    END;

    LOCAL PROCEDURE CreateBalanceEntry@1080009(CurrentDate@1000000000 : Date;CurrentVend@1000000002 : Code[20];CurrentRemAccount@1000000003 : Record 11128506;CurrentRemAgreement@100000008 : Record 11128503);
    VAR
      GenJnlLine@1000000005 : Record 81;
    BEGIN
      // Create balance entries for each vendor transaction.
      // In general:
      // - Variabels Current... store values for current processes.
      // - Variabels Latest... store values for newly created payments.
      // - Check if Current... and Latest... are different. If so, create a new balance entry.
      // - Balance entries are created with info from the newly created payments (variabels Latest...).

      // First chance to create balance entry. Don't create. Instead, store date and vendor for later:
      IF First THEN BEGIN
        First := FALSE; // not the first any more.
        LatestDate := CurrentDate;
        LatestVend := CurrentVend;
        LatestRemAgreement := CurrentRemAgreement;
        LatestRemAccount := CurrentRemAccount;
      END;

      IF BalanceEntryAmountLCY = 0 THEN // Balance entry won't be created anyway:
        EXIT;

      // Create balance entry:
      GenJnlLine.INIT;
      InitJournalLine(GenJnlLine,LatestRemAccount);
      GenJnlLine.VALIDATE("Posting Date",LatestDate);
      GenJnlLine.VALIDATE("Account Type",LatestRemAccount."Account Type");
      GenJnlLine.VALIDATE("Account No.",LatestRemAccount."Account No.");
      GenJnlLine.VALIDATE(Amount,-BalanceEntryAmountLCY);
      GenJnlLine.VALIDATE("Document No.",TransDocumentNo);
      CASE LatestRemAgreement."New Document Per." OF
        LatestRemAgreement."New Document Per."::Date:
          GenJnlLine.VALIDATE(
            Description,STRSUBSTNO(Text15000012,LatestDate));
        LatestRemAgreement."New Document Per."::Vendor:
          GenJnlLine.VALIDATE(
            Description,STRSUBSTNO(Text15000013,LatestVend));
      END;
      GenJnlLine.INSERT(TRUE);

      // Prepare for the next balance entry:
      CreateNewDocumentNo := TRUE;
      BalanceEntryAmountLCY := 0;
      LatestDate := CurrentDate; // Store Current Date, vendor etc..
      LatestVend := CurrentVend;
      LatestRemAccount := CurrentRemAccount;
      LatestRemAgreement := CurrentRemAgreement;
    END;

    LOCAL PROCEDURE NewTransaction@1080010();
    BEGIN
      // Initialize transaction import.
      // Called before import is started, after a transaction in the file is closed (BETFOR99)
      // and before the next transaction from the same file starts.
      First := TRUE; // Control of balance entry;
      BalanceEntryAmountLCY := 0;
      LatestDate := 0D;
      LatestVend := '';
      CLEAR(LatestRemAccount);
    END;

    PROCEDURE InitJournalLine@1080011(VAR GenJnlLine@1000000000 : Record 81;RemAccount@1000000001 : Record 11128506);
    VAR
      RegisterJournal@1000000002 : Record 232;
      CHeckGenJnlLine@1000000003 : Record 81;
    BEGIN
      // Initialize journal line
      IF RemAccount."Return Journal Name" = '' THEN BEGIN
        // Def. Journal name is used (journal user imports from)
        // Make sure the user imports into journal. Read from the main meny if
        // the journal is specified for the account:
        IF CurrentJournal."Journal Batch Name" = '' THEN
          RemAccount.FIELDERROR("Return Journal Name",Text15000014);
        GenJnlLine.VALIDATE("Journal Template Name",CurrentJournal."Journal Template Name");
        GenJnlLine.VALIDATE("Journal Batch Name",CurrentJournal."Journal Batch Name");
      END ELSE BEGIN
        // Journal name specified for the Account is used
        RemAccount.TESTFIELD("Return Journal Name");
        GenJnlLine.VALIDATE("Journal Template Name",RemAccount."Return Journal Template Name");
        GenJnlLine.VALIDATE("Journal Batch Name",RemAccount."Return Journal Name");
        MoreReturnJournals := TRUE; // If True, the settlement status is shown last.
      END;

      // Find next LineNo for the current journal
      CHeckGenJnlLine := GenJnlLine;
      CHeckGenJnlLine.SETRANGE("Journal Template Name",CHeckGenJnlLine."Journal Template Name");
      CHeckGenJnlLine.SETRANGE("Journal Batch Name",CHeckGenJnlLine."Journal Batch Name");
      IF CHeckGenJnlLine.FINDLAST THEN
        JournalNextLineNo := CHeckGenJnlLine."Line No." + 10000
      ELSE
        JournalNextLineNo := 10000;

      GenJnlLine.VALIDATE("Line No.",JournalNextLineNo);
      RegisterJournal.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      GenJnlLine."Posting No. Series" := RegisterJournal."Posting No. Series";
    END;

    PROCEDURE SetJournal@1080012(GenJnlLine@1000000000 : Record 81);
    BEGIN
      // Specify import journal.
      // Called from external function, which imports upon return.
      CurrentJournal := GenJnlLine;
    END;

    PROCEDURE Initialize@1080013(GenJnlLine@1000000000 : Record 81;FileName@1000000001 : Text[200];Note@1000000002 : Text[80]);
    BEGIN
      // Specify import variabels.
      // Called from external function, which imports upon return.
      CurrentJournal := GenJnlLine;
      CurrentFilename := FileName;
      CurrentNote := Note;
    END;

    PROCEDURE ReadStatus@1080014(VAR Approved@1080000 : Integer;VAR Rejected@1080001 : Integer;VAR Settled@1000000002 : Integer;VAR ReturnMoreReturnJournals@1000000003 : Boolean;VAR ReturnPaymOrder@1000000004 : Record 11128504);
    BEGIN
      // Return info on the newly performed import.
      // Count parameters with new values.
      Approved := 0;
      Rejected := 0;
      Settled := Settled + NumberSettled;
      ReturnMoreReturnJournals := MoreReturnJournals;
      ReturnPaymOrder := PaymOrder;
    END;

    PROCEDURE StatusError@1080015(CurrentWaitingJournal@1000000000 : Record 11128507);
    BEGIN
      ERROR(
        Text15000015,
        FileImp,
        CurrentWaitingJournal."Remittance Status",
        CurrentWaitingJournal.Reference);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

