OBJECT Page 11129844 Budget FB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=Budget;
               ENU=Budget;
               NLD=Begroot;
               NOR=Budsjett;
               SVE=Budget];
    SourceTable=Table11012001;
    PageType=CardPart;
    RefreshOnActivate=Yes;
  }
  CONTROLS
  {
    { 1210190000;0;Container;
                ContainerType=ContentArea }

    { 1100529703;1;Field  ;
                Name=Original Budget;
                CaptionML=[DEU=UrsprÅngliches Budget;
                           ENU=Original Budget;
                           NLD=Origineel begroot;
                           NOR=Opprinnelig budsjett;
                           SVE=Ursprunglig budget];
                SourceExpr=Amounts[1];
                OnDrillDown=BEGIN
                              Drilldown(1)
                            END;
                             }

    { 1100529704;1;Field  ;
                Name=Budget;
                CaptionML=[DEU=Budget;
                           ENU=Budget;
                           NLD=Begroot;
                           NOR=Budsjett;
                           SVE=Budget];
                SourceExpr=Amounts[5];
                Editable=FALSE;
                OnDrillDown=BEGIN
                              Drilldown(5)
                            END;
                             }

    { 1100529700;1;Field  ;
                Name=Adjustments;
                CaptionML=[DEU=Korrekturen;
                           ENU=Adjustments;
                           NLD=Correcties;
                           NOR=Justeringer;
                           SVE=Justeringar];
                SourceExpr=Amounts[2];
                OnDrillDown=BEGIN
                              Drilldown(2)
                            END;
                             }

    { 1100529701;1;Field  ;
                Name=Extensions;
                CaptionML=[DEU=Sonderleistung;
                           ENU=Extension;
                           NLD=Meer- minderwerk;
                           NOR=Direktenr.;
                           SVE=Extension];
                SourceExpr=Amounts[3];
                OnDrillDown=BEGIN
                              Drilldown(3)
                            END;
                             }

    { 1100529702;1;Field  ;
                Name=Option;
                CaptionML=[DEU=Optionen;
                           ENU=Options;
                           NLD=Meerwerkopties;
                           NOR=Alternativer;
                           SVE=Alternativ];
                SourceExpr=Amounts[4];
                OnDrillDown=BEGIN
                              Drilldown(4)
                            END;
                             }

  }
  CODE
  {
    VAR
      PrognosisLine@1100529701 : Record 11012035;
      Amounts@1100529700 : ARRAY [5] OF Decimal;
      BudgetLine@1100529702 : Record 11012001;
      ViewPrognPerElementByCostObj@1100529600 : Boolean;

    PROCEDURE SetParamerts@1100528105(PrognosisLineNew@1100528100 : Record 11012035;ViewPrognPerElementByCostObjNew@1100529600 : Boolean);
    BEGIN
      ViewPrognPerElementByCostObj := ViewPrognPerElementByCostObjNew;
      IF (PrognosisLine."Project No." <> PrognosisLineNew."Project No.") OR
        (PrognosisLine."Prognosis Date" <> PrognosisLineNew."Prognosis Date") OR
        (PrognosisLine.Element <> PrognosisLineNew.Element) OR
        (PrognosisLine."Cost Type" <> PrognosisLineNew."Cost Type") OR
        (PrognosisLine."Cost Object" <> PrognosisLineNew."Cost Object")
      THEN BEGIN
        PrognosisLine.COPY(PrognosisLineNew);
        SETRANGE("Project No.", PrognosisLine."Project No.");
        CalcAmounts;
        CurrPage.UPDATE(FALSE);
      END
    END;

    LOCAL PROCEDURE BudgetLine_SETFILTERS@1100529715();
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF Job.GET(PrognosisLine."Project No.") THEN;
      BudgetLine.RESET;
      BudgetLine.SETRANGE("Main Project No.", PrognosisLine."Main Project No.");
      IF ViewPrognPerElementByCostObj THEN BEGIN
        BudgetLine.SETRANGE("Cost Type", PrognosisLine."Cost Type");
        IF PrognosisLine.Level >= 2 THEN
          BudgetLine.SETRANGE("Cost Object", PrognosisLine."Cost Object");
        IF PrognosisLine.Level = 3 THEN
          BudgetLine.SETRANGE(Element, PrognosisLine.Element);
      END ELSE BEGIN
        IF (PrognosisLine.Element <> '') OR Job."Prognosis per Element" THEN
          BudgetLine.SETRANGE(Element, PrognosisLine.Element);
        IF PrognosisLine."Cost Type" >= 0 THEN
          BudgetLine.SETRANGE("Cost Type", PrognosisLine."Cost Type");
        IF NOT (PrognosisLine."Cost Object" IN ['', '-']) THEN
          BudgetLine.SETRANGE("Cost Object", PrognosisLine."Cost Object");
      END;
      IF PrognosisLine."Project No." <> PrognosisLine."Main Project No." THEN
        BudgetLine.SETRANGE("Project No.", PrognosisLine."Project No.");
      BudgetLine.SETRANGE("Version Date", 0D, PrognosisLine."Prognosis Date");
    END;

    LOCAL PROCEDURE CalcAmounts@1100529704();
    VAR
      Prognosis@1100528500 : Record 11012034;
    BEGIN
      CLEAR(Amounts);
      Prognosis.GET(PrognosisLine."Project No.", PrognosisLine."Prognosis Date");
      IF Prognosis."Fix Prognosis Line" THEN BEGIN
        Amounts[1] := PrognosisLine."Original Budget Amount";
        Amounts[2] := PrognosisLine.Adjustments;
        Amounts[3] := PrognosisLine.Extension;
        Amounts[4] := PrognosisLine.Options;
        Amounts[5] := PrognosisLine."Budget Amount";
      END ELSE BEGIN
        BudgetLine_SETFILTERS;
        BudgetLine.SETFILTER(Adjustment, '=%1', '');
        BudgetLine.SETFILTER("Extension Contract", '=%1', '');
        BudgetLine.SETFILTER(Option, '=%1', '');
        BudgetLine.CALCSUMS("Amount (LCY)");
        Amounts[1] := BudgetLine."Amount (LCY)";

        BudgetLine.SETFILTER(Adjustment, '<>%1', '');
        BudgetLine.SETRANGE("Extension Contract");
        BudgetLine.SETRANGE(Option);
        BudgetLine.CALCSUMS("Amount (LCY)");
        Amounts[2] := BudgetLine."Amount (LCY)";

        BudgetLine.SETRANGE(Adjustment);
        BudgetLine.SETFILTER("Extension Contract", '<>%1', '');
        BudgetLine.CALCSUMS("Amount (LCY)");
        Amounts[3] := BudgetLine."Amount (LCY)";

        BudgetLine.SETRANGE("Extension Contract");
        BudgetLine.SETFILTER(Option, '<>%1', '');
        BudgetLine.CALCSUMS("Amount (LCY)");
        Amounts[4] := BudgetLine."Amount (LCY)";
        BudgetLine.SETRANGE(Option);

        BudgetLine.SETFILTER("Extension Contract Status", '(%1)|(>=%2&<%3)', "Extension Contract Status"::"Not Applicable", "Extension Contract Status"::Order, "Extension Contract Status"::Expired);
        BudgetLine.CALCSUMS("Amount (LCY)");
        Amounts[5] := BudgetLine."Amount (LCY)";
        BudgetLine.SETRANGE("Extension Contract Status");
      END;
    END;

    LOCAL PROCEDURE Drilldown@1100529703(AmountType@1100529700 : Integer);
    BEGIN
      BudgetLine_SETFILTERS;
      CASE AmountType OF
        1:BEGIN
            BudgetLine.SETFILTER(Adjustment, '=%1', '');
            BudgetLine.SETFILTER("Extension Contract", '=%1', '');
            BudgetLine.SETFILTER(Option, '=%1', '');
          END;
        2: BudgetLine.SETFILTER(Adjustment, '<>%1', '');
        3: BudgetLine.SETFILTER("Extension Contract", '<>%1', '');
        4: BudgetLine.SETFILTER(Option, '<>%1', '');
        5: BudgetLine.SETFILTER("Extension Contract Status", '(%1)|(>=%2&<%3)', "Extension Contract Status"::"Not Applicable", "Extension Contract Status"::Order, "Extension Contract Status"::Expired)
      END;
      PAGE.RUNMODAL(0, BudgetLine);
    END;

    BEGIN
    END.
  }
}

