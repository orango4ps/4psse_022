OBJECT Codeunit 77794 TTool Helper Functions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=TTool;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            // Testcases:
            IF GetMaxLength('hello', ',') <> 5 THEN
              ERROR('hello');
            IF GetMaxLength('hello,wor', ',') <> 5 THEN
              ERROR('hello,wor');
            IF GetMaxLength('wor,hello', ',') <> 5 THEN
              ERROR('wor,hello');
            IF GetMaxLength(',een,twee,negen,twintig', ',') <> 7 THEN
              ERROR(',een,twee,negen,twintig');
            IF GetMaxLength(',hello,test,hello world',',') <> 11 THEN
              ERROR(',hello,test,hello world');

            IF PlaceRemainingSpaces('test', 7) <> 'test   ' THEN
              ERROR('test,7');
            IF PlaceRemainingSpaces('', 1) <> ' ' THEN
              ERROR(',1');
            IF STRLEN(PlaceRemainingSpaces('blabla', 15)) <> 15 THEN
              ERROR('blabla,15');

            IF RemoveSpace(' hello ') <> 'hello' THEN
              ERROR(' hello ');
            IF RemoveSpace('hello  ') <> 'hello' THEN
              ERROR('hello  ');
            IF RemoveSpace('h el lo  ') <> 'h el lo' THEN
              ERROR('h el lo  ');

            IF RemoveSpacesBeforeAndAfterCommas(' ,te s t ,  hello  world  ') <> ',te s t,hello  world' THEN
              ERROR(' ,te s t ,  hello  world  ');

            MESSAGE('Tests done');
          END;

  }
  CODE
  {

    PROCEDURE GetMaxLength@1100528500(Value@1100528500 : Text;Separator@1100528501 : Text) MaxLength : Integer;
    VAR
      PreviousPosition@1100528502 : Integer;
      CurrentText@1100528503 : Text;
      CurrentPosition@1100528504 : Integer;
    BEGIN
      MaxLength := 0;
      PreviousPosition := 0;
      CurrentText := Value;
      CurrentPosition := STRPOS(CurrentText, Separator);

      // We check the length from the start until the first separator.
      WHILE (CurrentPosition > 0) OR (STRLEN(CurrentText) > 0) DO BEGIN
        IF CurrentPosition - 1 > MaxLength THEN
          MaxLength := CurrentPosition - 1;

        CurrentText := COPYSTR(CurrentText, CurrentPosition + 1);
        PreviousPosition := CurrentPosition;
        CurrentPosition := STRPOS(CurrentText, Separator);

        // If there is no separator left, we check the remainder
        IF (CurrentPosition = 0) AND (STRLEN(CurrentText) > 0) THEN BEGIN
          IF STRLEN(CurrentText) > MaxLength THEN
            MaxLength := STRLEN(CurrentText);
          CurrentText := ''; // We are done
        END;
      END;
    END;

    PROCEDURE PlaceRemainingSpaces@1100528501(Value@1100528500 : Text;Length@1100528502 : Integer) ReturnValue : Text;
    VAR
      i@1100528501 : Integer;
    BEGIN
      ReturnValue := Value;

      FOR i := STRLEN(Value) TO Length - 1 DO BEGIN
        ReturnValue += ' ';
      END;
    END;

    PROCEDURE RemoveSpacesBeforeAndAfterCommas@1100528503(Value@1100528500 : Text) ReturnValue : Text;
    VAR
      CurrentValue@1100528501 : Text;
      CurrentCommaPosition@1100528502 : Integer;
    BEGIN
      CurrentValue := Value;
      CurrentCommaPosition := STRPOS(CurrentValue, ',');

      WHILE CurrentValue <> '' DO BEGIN
        IF CurrentCommaPosition = 0 THEN BEGIN
          IF CurrentValue = '' THEN
            EXIT
          ELSE BEGIN
            ReturnValue += RemoveSpace(CurrentValue);
            EXIT;
          END;
        END;
        ReturnValue += RemoveSpace(COPYSTR(CurrentValue, 1, CurrentCommaPosition - 1)) + ',';
        CurrentValue := COPYSTR(CurrentValue, CurrentCommaPosition + 1);
        CurrentCommaPosition := STRPOS(CurrentValue, ',');
      END;
    END;

    LOCAL PROCEDURE RemoveSpace@1100528511(Value@1100528500 : Text) ReturnValue : Text;
    BEGIN
      ReturnValue := DELCHR(Value, '<>', ' ');
      IF ReturnValue = Value THEN
        EXIT
      ELSE
        EXIT(RemoveSpace(ReturnValue));
    END;

    PROCEDURE GetMaxLengthInTable@1100528502(Value@1100528500 : Text;Separator@1100528501 : Text;VAR TTColumnWidth@1100528505 : Record 77795);
    VAR
      PreviousPosition@1100528502 : Integer;
      CurrentText@1100528503 : Text;
      CurrentPosition@1100528504 : Integer;
    BEGIN
      PreviousPosition := 0;
      CurrentText := Value;
      CurrentPosition := STRPOS(CurrentText, Separator);
      IF TTColumnWidth.FINDSET THEN;

      // We check the length from the start until the first separator.
      WHILE (CurrentPosition > 0) OR (STRLEN(CurrentText) > 0) DO BEGIN
        IF TTColumnWidth.CountWidth < (CurrentPosition - 1) THEN
          TTColumnWidth.CountWidth := CurrentPosition - 1;

        CurrentText := COPYSTR(CurrentText, CurrentPosition + 1);
        PreviousPosition := CurrentPosition;
        CurrentPosition := STRPOS(CurrentText, Separator);

        // If there is no separator left, we check the remainder
        IF (CurrentPosition = 0) AND (STRLEN(CurrentText) > 0) THEN BEGIN
          {IF STRLEN(CurrentText) > MaxLength THEN
            MaxLength := STRLEN(CurrentText);}
          IF TTColumnWidth.NEXT = 0 THEN BEGIN
            TTColumnWidth.ID := TTColumnWidth.ID + 1;
            TTColumnWidth.INSERT;
            TTColumnWidth.CountWidth := 0;
          END;
          IF TTColumnWidth.CountWidth < STRLEN(CurrentText) THEN
            TTColumnWidth.CountWidth := STRLEN(CurrentText);

          CurrentText := ''; // We are done

        END;

        IF TTColumnWidth.NEXT = 0 THEN BEGIN
          TTColumnWidth.ID := TTColumnWidth.ID + 1;
          TTColumnWidth.INSERT;
          TTColumnWidth.CountWidth := 0;
        END;
      END;
    END;

    PROCEDURE GetMaxForEveryTable@1100528509(VAR TTColumnWidth1@1100528500 : Record 77795;VAR TTColumnWidth2@1100528501 : Record 77795;VAR TTColumnWidth3@1100528502 : Record 77795;VAR TTColumnResult@1100528503 : Record 77795);
    VAR
      Done@1100528504 : Boolean;
    BEGIN
      IF TTColumnWidth1.FINDFIRST THEN;
      IF TTColumnWidth2.FINDFIRST THEN;
      IF TTColumnWidth3.FINDFIRST THEN;

      REPEAT
        TTColumnResult.ID := TTColumnResult.ID + 1;
        TTColumnResult.CountWidth := Max3Ints(TTColumnWidth1.CountWidth, TTColumnWidth2.CountWidth, TTColumnWidth3.CountWidth);
        TTColumnResult.INSERT;

        Done := TRUE;

        // Dont refactor this to 1 statement!
        // We want to be sure every NEXT statement is executed...
        IF TTColumnWidth1.NEXT <> 0 THEN
          Done := FALSE;
        IF TTColumnWidth2.NEXT <> 0 THEN
          Done := FALSE;
        IF TTColumnWidth3.NEXT <> 0 THEN
          Done := FALSE;
      UNTIL Done;
    END;

    LOCAL PROCEDURE Max3Ints@1100528510(Int1@1100528500 : Integer;Int2@1100528501 : Integer;Int3@1100528502 : Integer) ReturnInt : Integer;
    BEGIN
      ReturnInt := Int1;

      IF Int2 > ReturnInt THEN
        ReturnInt := Int2;

      IF Int3 > ReturnInt THEN
        ReturnInt := Int3;
    END;

    BEGIN
    END.
  }
}

