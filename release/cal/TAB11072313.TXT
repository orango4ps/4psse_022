OBJECT Table 11072313 Service Preclosure Result Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               DetermineValues;
             END;

    OnModify=BEGIN
               TESTFIELD(Posted, FALSE);
             END;

    OnDelete=BEGIN
               TESTFIELD(Posted, FALSE);
             END;

    CaptionML=ENU=Service Preclosure Result Line;
  }
  FIELDS
  {
    { 10  ;   ;Posting Date        ;Date          ;TableRelation="Service Preclosure Result"."Posting Date";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum];
                                                   Editable=No }
    { 20  ;   ;Seq. No.            ;Integer       ;TableRelation="Service Preclosure Result"."Seq. No." WHERE (Posting Date=FIELD(Posting Date));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Seq. No.;
                                                              NOR=Sekv. nr;
                                                              SVE=Sekv. nr] }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 40  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=ENU=,Period,Service Category,Source Type,Service Order;
                                                   OptionString=,Period,Service Category,Source Type,Service Order;
                                                   Description=Keep this in sync with T11072310F75;
                                                   Editable=No }
    { 50  ;   ;Indentation         ;Integer       ;CaptionML=ENU=Ident Value;
                                                   Editable=No }
    { 60  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   OnValidate=VAR
                                                                ServiceContract@1100529660 : Record 11012812;
                                                                ServiceCategory@1100529600 : Record 11071985;
                                                              BEGIN
                                                                IF "Service Contract No." <> '' THEN
                                                                  IF ServiceContract.GET("Service Contract No.") THEN BEGIN
                                                                    "Level Progress Measurement" := ServiceContract."Level Progress Measurement";
                                                                    "Global Dimension 1 Code" := ServiceContract."Global Dimension 1 Code";
                                                                    IF ("Line Type" = "Line Type"::Period) AND NOT ServiceContract."Result Calc. on Total Contract" THEN BEGIN
                                                                      ServiceCategory.SETRANGE("Service Contract No.", "Service Contract No.");
                                                                      "Calc. Interim Results by Order" := NOT ServiceCategory.ISEMPTY;
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 70  ;   ;Service Contract Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract.Description WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Service Contract Description;
                                                              NOR=Servicekontraktsbeskrivelse;
                                                              SVE=Servicekontraktsbeskrivning];
                                                   Editable=No }
    { 80  ;   ;Control Period Code ;Code10        ;TableRelation=IF (Service Contract No.=FILTER(<>'')) "Service-Contract Ctrl. Period".Code WHERE (Service Contract No.=FIELD(Service Contract No.))
                                                                 ELSE IF (Service Contract No.=CONST('')) "Service Control Period".Code;
                                                   OnValidate=VAR
                                                                ServiceControlPeriod@1100528601 : Record 11071755;
                                                                ServiceContractCtrlPeriod@1100528600 : Record 11071746;
                                                              BEGIN
                                                                IF "Service Contract No." = '' THEN BEGIN
                                                                  IF ServiceControlPeriod.GET("Control Period Code") THEN BEGIN
                                                                    "Starting Date" := ServiceControlPeriod."Starting Date";
                                                                    "Ending Date" := ServiceControlPeriod."Ending Date";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF ServiceContractCtrlPeriod.GET("Service Contract No.", "Control Period Code") THEN BEGIN
                                                                    "Starting Date" := ServiceContractCtrlPeriod."Starting Date";
                                                                    "Ending Date" := ServiceContractCtrlPeriod."Ending Date";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Control Period Code;
                                                              NOR=Kontrollperiodekode;
                                                              SVE=Kontrollperiodskod];
                                                   Editable=No }
    { 90  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum];
                                                   Editable=No }
    { 100 ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum];
                                                   Editable=No }
    { 105 ;   ;Service Category    ;Code10        ;OnValidate=VAR
                                                                ServiceCategory@1100529660 : Record 11071985;
                                                              BEGIN
                                                                IF "Service Category" = '' THEN
                                                                  "Calc. Interim Results by Order" := FALSE
                                                                ELSE BEGIN
                                                                  ServiceCategory.GET("Service Contract No.", "Service Category");
                                                                  "Calc. Interim Results by Order" := ServiceCategory."Calc. Interim Results by Order";
                                                                END;
                                                                IF "Calc. Interim Results by Order" THEN
                                                                  "Level Progress Measurement" := "Level Progress Measurement"::"Service Order";
                                                              END;

                                                   CaptionML=[ENU=Service Category;
                                                              SVE=Servicekategori];
                                                   Editable=No }
    { 110 ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              NOR=Kildetype;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=[ENU=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                                    NOR=Samtale,Kontrakt,Direkte,Kalkyle,,,Endring,Erstatning;
                                                                    SVE=Samtal,Kontrakt,Direkt,Kalkyl,,,Žndring,Ers„ttning];
                                                   OptionString=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                   Editable=No }
    { 120 ;   ;Progress Method     ;Option        ;CaptionML=[ENU=Progress Method;
                                                              NOR=Fremdriftsmetode;
                                                              SVE=F”rloppsmetod];
                                                   OptionCaptionML=ENU=Allowed Hours,,,Actual Cost,Elapsed Time,,Available Hours,,Allowed Cost,,Available Cost,,None;
                                                   OptionString=Allowed Hours,,,Actual Cost,Elapsed Time,,Available Hours,,Allowed Cost,,Available Cost,,None;
                                                   Editable=No }
    { 125 ;   ;Include Commitments ;Boolean       ;CaptionML=ENU=Include Commitments;
                                                   Editable=No }
    { 130 ;   ;Calculated Cum. Progress %;Decimal ;CaptionML=ENU=Calculated Cum. Progress %;
                                                   Editable=No }
    { 140 ;   ;Cumulative Progress %;Decimal      ;OnValidate=BEGIN
                                                                TestIfCorrectProgressLevel;
                                                                DeterminePrognosisValues;
                                                                DeterminePreclosureValues;
                                                              END;

                                                   CaptionML=[ENU=Cumulative Progress %;
                                                              NOR=Akkumulert Fremdrift %;
                                                              SVE=Ackumulerad f”rloppsprocent];
                                                   MaxValue=100 }
    { 150 ;   ;Prognosis Total Revenue;Decimal    ;CaptionML=[ENU=Prognosis Total Revenue;
                                                              NOR=Prognose totalresultat;
                                                              SVE=Prognos totala int„kter];
                                                   Editable=No }
    { 160 ;   ;Closed Revenue      ;Decimal       ;CaptionML=ENU=Closed Revenue;
                                                   Editable=No }
    { 170 ;   ;Prognosis Total Cost;Decimal       ;CaptionML=[ENU=Prognosis Total Cost;
                                                              NOR=Prognose for totale kostnader;
                                                              SVE=Prognos totala kostnader];
                                                   Editable=No }
    { 180 ;   ;Closed Cost         ;Decimal       ;CaptionML=[ENU=Closed Cost;
                                                              NOR=Opparbeidet kost;
                                                              SVE=Upparbetad kostnad];
                                                   Editable=No }
    { 190 ;   ;Prognosis Financial Result;Decimal ;CaptionML=[ENU=Prognosis Financial Result;
                                                              NOR=Resultatprognose, finans;
                                                              SVE=Prognos finansiellt resultat];
                                                   Editable=No }
    { 200 ;   ;Calculated Preclosure Result;Decimal;
                                                   CaptionML=[ENU=Calculated Preclosure Result;
                                                              NOR=Estimert resultat (Pr›veregnskap);
                                                              SVE=Ber„knat provredovisningsresultat];
                                                   Editable=No }
    { 210 ;   ;Corrected Preclosure Result;Decimal;OnValidate=VAR
                                                                UpperLevelLineType@1100529600 : Integer;
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Corrected Preclosure Result") THEN BEGIN
                                                                  TestIfCorrectMethod(0);
                                                                  TestIfCorrectProgressLevel;
                                                                  IF NOT PrognosisFinancialResultPositive THEN
                                                                    ERROR(Text007, FIELDCAPTION("Prognosis Financial Result"));
                                                                  IF "Corrected Preclosure Result" <> 0 THEN
                                                                    IF "Corrected Preclosure Result" < 0 THEN
                                                                      ERROR(Text007, FIELDCAPTION("Corrected Preclosure Result"))
                                                                    ELSE
                                                                      "Corrected Provision Loss" := 0;
                                                                END ELSE BEGIN
                                                                  GetUpperLevelLineType(UpperLevelLineType);
                                                                  IF "Line Type" >= UpperLevelLineType THEN
                                                                    IF NOT PrognosisFinancialResultPositive THEN
                                                                      "Corrected Preclosure Result" := 0;
                                                                END;
                                                                CalcTotalResultCorrected(0);
                                                                UpdateUpperLevelAmounts("Line Type", CurrFieldNo, "Corrected Provision Loss" <> xRec."Corrected Provision Loss");
                                                              END;

                                                   CaptionML=[ENU=Corrected Preclosure Result;
                                                              NOR=R„ttat resultat (Preclosure);
                                                              SVE=R„ttat resultat (preclosure)] }
    { 220 ;   ;Prev. Actual Preclosure Result;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Preclosure Result Line"."Actual Preclosure Result" WHERE (Line Type=FIELD(Line Type),
                                                                                                                                      Service Contract No.=FIELD(Service Contract No.),
                                                                                                                                      Global Dimension 1 Code=FIELD(Global Dimension 1 Code),
                                                                                                                                      Control Period Code=FIELD(Control Period Code),
                                                                                                                                      Service Category=FIELD(Service Category),
                                                                                                                                      Service Order No.=FIELD(Service Order No.),
                                                                                                                                      Source Type=FIELD(Source Type),
                                                                                                                                      Totaling Type=FIELD(Totaling Type),
                                                                                                                                      Posted=CONST(Yes),
                                                                                                                                      Correction Posted=CONST(No)));
                                                   CaptionML=ENU=Prev. Actual Preclosure Result;
                                                   Editable=No }
    { 230 ;   ;Actual Preclosure Result;Decimal   ;CaptionML=[ENU=Actual Preclosure Result;
                                                              NOR=Reelle pr›veregnskapsresultater;
                                                              SVE=Periodiserat resultat];
                                                   Editable=No }
    { 240 ;   ;Calculated Preclosure Revenue;Decimal;
                                                   CaptionML=[ENU=Calculated Preclosure Revenue;
                                                              NOR=Kalkulert prelim. inntekt;
                                                              SVE=Ber„knade provredovisningsint„kter];
                                                   Editable=No }
    { 250 ;   ;Calculated Preclosure Cost;Decimal ;CaptionML=[ENU=Calculated Preclosure Cost;
                                                              NOR=Kalkulert prelim. kostnad;
                                                              SVE=Ber„knad provredovisningskostnad];
                                                   Editable=No }
    { 260 ;   ;Prev. Actual Preclosure Rev.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Preclosure Result Line"."Actual Preclosure Revenue" WHERE (Line Type=FIELD(Line Type),
                                                                                                                                       Service Contract No.=FIELD(Service Contract No.),
                                                                                                                                       Global Dimension 1 Code=FIELD(Global Dimension 1 Code),
                                                                                                                                       Control Period Code=FIELD(Control Period Code),
                                                                                                                                       Service Category=FIELD(Service Category),
                                                                                                                                       Service Order No.=FIELD(Service Order No.),
                                                                                                                                       Source Type=FIELD(Source Type),
                                                                                                                                       Totaling Type=FIELD(Totaling Type),
                                                                                                                                       Posted=CONST(Yes),
                                                                                                                                       Correction Posted=CONST(No)));
                                                   CaptionML=[ENU=Prev. Actual Preclosure Rev.;
                                                              SVE=F”reg†ende oms„ttning];
                                                   Editable=No }
    { 270 ;   ;Prev. Actual Preclosure Cost;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Preclosure Result Line"."Actual Preclosure Cost" WHERE (Line Type=FIELD(Line Type),
                                                                                                                                    Service Contract No.=FIELD(Service Contract No.),
                                                                                                                                    Global Dimension 1 Code=FIELD(Global Dimension 1 Code),
                                                                                                                                    Control Period Code=FIELD(Control Period Code),
                                                                                                                                    Service Category=FIELD(Service Category),
                                                                                                                                    Service Order No.=FIELD(Service Order No.),
                                                                                                                                    Source Type=FIELD(Source Type),
                                                                                                                                    Totaling Type=FIELD(Totaling Type),
                                                                                                                                    Posted=CONST(Yes),
                                                                                                                                    Correction Posted=CONST(No)));
                                                   CaptionML=[ENU=Prev. Actual Preclosure Cost;
                                                              SVE=F”reg†ende kostnad];
                                                   Editable=No }
    { 280 ;   ;Corrected Preclosure Revenue;Decimal;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Corrected Preclosure Revenue") THEN BEGIN
                                                                  TestIfCorrectMethod(1);
                                                                  TestIfCorrectProgressLevel;
                                                                END;
                                                                IF "Corrected Preclosure Revenue" - "Corrected Preclosure Cost" + "Corrected Provision Loss" > 0 THEN
                                                                  "Corrected Provision Loss" := 0;
                                                                CalcTotalResultCorrected(1);
                                                                UpdateUpperLevelAmounts("Line Type", CurrFieldNo, FALSE);
                                                              END;

                                                   CaptionML=[ENU=Corrected Preclosure Revenue;
                                                              NOR=Korrigert Inntekt, prelimin‘rt regnskap;
                                                              SVE=Korrigerad provredovisningsint„kter] }
    { 290 ;   ;Corrected Preclosure Cost;Decimal  ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Corrected Preclosure Cost") THEN BEGIN
                                                                  TestIfCorrectMethod(1);
                                                                  TestIfCorrectProgressLevel;
                                                                END;
                                                                IF "Corrected Preclosure Revenue" - "Corrected Preclosure Cost" + "Corrected Provision Loss" > 0 THEN
                                                                  "Corrected Provision Loss" := 0;
                                                                CalcTotalResultCorrected(1);
                                                                UpdateUpperLevelAmounts("Line Type", CurrFieldNo, FALSE);
                                                              END;

                                                   CaptionML=[ENU=Corrected Preclosure Cost;
                                                              NOR=Korrigerte kostnader, prelimin‘rt regnskap;
                                                              SVE=Korrigerad provredovisningskostnad] }
    { 300 ;   ;Posted              ;Boolean       ;OnValidate=VAR
                                                                ServicePreclosureResultLine@1100528600 : Record 11072313;
                                                              BEGIN
                                                                TestLineTypeOnPosting;
                                                                IF NOT "Calc. Interim Results by Order" THEN BEGIN
                                                                  ServicePreclosureResultLine.SETRANGE("Posting Date", "Posting Date");
                                                                  ServicePreclosureResultLine.SETRANGE("Seq. No.", "Seq. No.");
                                                                  IF "Totaling Type" <> "Totaling Type"::All THEN
                                                                    ServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");
                                                                  ServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
                                                                  IF "Service Contract No." = '' THEN
                                                                    ServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
                                                                  ServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
                                                                  ServicePreclosureResultLine.SETFILTER("Line Type", '>%1', "Line Type");
                                                                  IF "Line Type" = "Line Type"::"Service Category" THEN
                                                                    ServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
                                                                  ServicePreclosureResultLine.MODIFYALL(Posted, Posted);
                                                                END;
                                                                UpdatePostedOnPeriodLine(FIELDNO(Posted));
                                                              END;

                                                   CaptionML=[ENU=Posted;
                                                              NOR=Bokf›rt;
                                                              SVE=Bokf”rd];
                                                   Editable=No }
    { 310 ;   ;Budget Hours        ;Decimal       ;CaptionML=[ENU=Budget Hours;
                                                              NOR=Budsjett (Timer);
                                                              SVE=Budget (timmar)];
                                                   Editable=No }
    { 320 ;   ;Allowed Hours       ;Decimal       ;CaptionML=[ENU=Allowed Hours;
                                                              NOR=Tillatte timer;
                                                              SVE=Till†tna timmar];
                                                   Editable=No }
    { 330 ;   ;Actual Cost         ;Decimal       ;CaptionML=[ENU=Actual Cost;
                                                              NOR=Faktisk kost;
                                                              SVE=Faktisk kostnad];
                                                   Editable=No }
    { 335 ;   ;Firm Commitments    ;Decimal       ;CaptionML=[ENU=Firm Commitments;
                                                              NOR=Faste engasjementer;
                                                              SVE=Fasta †taganden];
                                                   Editable=No }
    { 340 ;   ;Prognosis Date      ;Date          ;CaptionML=[ENU=Prognosis Date;
                                                              NOR=Prognosedato;
                                                              SVE=Prognosdatum];
                                                   Editable=No }
    { 350 ;   ;Account Sales       ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=[ENU=Account Salest;
                                                              NOR=Salgskonto;
                                                              SVE=F”rs„ljningskonto];
                                                   Editable=No }
    { 360 ;   ;Balance Account Sales;Code20       ;TableRelation="G/L Account".No.;
                                                   CaptionML=[ENU=Balance Account Sales;
                                                              NOR=Balansekonto salg;
                                                              SVE=Balanskonto f”rs„ljning];
                                                   Editable=No }
    { 370 ;   ;G/L Register No. Sales;Integer     ;TableRelation="G/L Register";
                                                   CaptionML=[ENU=G/L Register No. Sales;
                                                              NOR=Hovedboksregisternr, salg;
                                                              SVE=Redovisningsregisternr, f”rs„ljning];
                                                   Editable=No }
    { 380 ;   ;Account Cost        ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=[ENU=Account Cost;
                                                              NOR=Kontokost;
                                                              SVE=Kontokostnad];
                                                   Editable=No }
    { 390 ;   ;Balance Account Cost;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=[ENU=Balance Account Cost;
                                                              NOR=Balansekonto Kostnad;
                                                              SVE=Balanskonto kostnader];
                                                   Editable=No }
    { 400 ;   ;G/L Register No. Cost;Integer      ;TableRelation="G/L Register";
                                                   CaptionML=[ENU=G/L Register No. Cost;
                                                              NOR=Hovedboksregisternr. kostnad;
                                                              SVE=Redovisningsregisternr, kostnad];
                                                   Editable=No }
    { 410 ;   ;Posted by           ;Code50        ;CaptionML=[ENU=Posted by;
                                                              NOR=Bokf›rt av;
                                                              SVE=Bokf”rt av];
                                                   Editable=No }
    { 420 ;   ;Posted on           ;Date          ;CaptionML=[ENU=Posted on;
                                                              NOR=Bokf›rt den;
                                                              SVE=Bokf”rt den];
                                                   Editable=No }
    { 430 ;   ;Actual Preclosure Revenue;Decimal  ;CaptionML=[ENU=Actual Preclosure Revenue;
                                                              NOR=Faktiske Inntekter, Prelimin‘rt Regnskap;
                                                              SVE=Periodiserad int„kt];
                                                   Editable=No }
    { 440 ;   ;Actual Preclosure Cost;Decimal     ;CaptionML=[ENU=Actual Preclosure Cost;
                                                              NOR=Faktisk Kostnad, Prelimin‘rt Regnskap;
                                                              SVE=Periodiserad kostnad];
                                                   Editable=No }
    { 450 ;   ;Original Budget Hours;Decimal      ;CaptionML=[ENU=Original Budget Hours;
                                                              NOR=Opprinnelige budsjetttimer;
                                                              SVE=Ursprungliga budgettimmar];
                                                   Editable=No }
    { 455 ;   ;Original Budget Cost;Decimal       ;CaptionML=ENU=Original Budget Cost;
                                                   Editable=No }
    { 460 ;   ;Budget Cost         ;Decimal       ;CaptionML=[ENU=Budget Cost;
                                                              NOR=Budsjett Kostnad;
                                                              SVE=Budgeterad kostnad];
                                                   Editable=No }
    { 470 ;   ;Allowed Cost        ;Decimal       ;CaptionML=[ENU=Allowed Cost;
                                                              SVE=Till†ten];
                                                   Editable=No }
    { 480 ;   ;Actual Hours        ;Decimal       ;CaptionML=[ENU=Actual Hours;
                                                              NOR=Reelle timer;
                                                              SVE=Verkliga timmar];
                                                   Editable=No }
    { 490 ;   ;Actual Hours (Additional);Decimal  ;CaptionML=[ENU=Actual Hours (Additional);
                                                              NOR=Faktiske timer (Ekstra);
                                                              SVE=Verkliga timmar (extra)];
                                                   Editable=No }
    { 500 ;   ;Actual Cost (Additional);Decimal   ;CaptionML=[ENU=Actual Cost (Additional);
                                                              SVE=Verkliga kostnader (extra)];
                                                   Editable=No }
    { 505 ;   ;Firm Commitments (Additional);Decimal;
                                                   CaptionML=ENU=Firm Commitments (Additional);
                                                   Editable=No }
    { 510 ;   ;Service Contract WIP Processed;Boolean;
                                                   CaptionML=[ENU=Service Contract WIP Processed;
                                                              NOR=Servicekontrakt Arbeidskapital prosessert;
                                                              SVE=Servicekontrakt, WIP behandlat];
                                                   Editable=No }
    { 520 ;   ;Actual Provision Loss;Decimal      ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Actual Provision Loss;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 530 ;   ;Previous Actual Provision Loss;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Preclosure Result Line"."Actual Provision Loss" WHERE (Line Type=FIELD(Line Type),
                                                                                                                                   Service Contract No.=FIELD(Service Contract No.),
                                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Code),
                                                                                                                                   Control Period Code=FIELD(Control Period Code),
                                                                                                                                   Service Category=FIELD(Service Category),
                                                                                                                                   Service Order No.=FIELD(Service Order No.),
                                                                                                                                   Source Type=FIELD(Source Type),
                                                                                                                                   Totaling Type=FIELD(Totaling Type),
                                                                                                                                   Posted=CONST(Yes),
                                                                                                                                   Correction Posted=CONST(No)));
                                                   CaptionML=ENU=Previous Actual Provision Loss;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 540 ;   ;Account Provision Loss;Code20      ;TableRelation="G/L Account".No.;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Account Provision Loss;
                                                   Editable=No }
    { 550 ;   ;Balance Account Provision Loss;Code20;
                                                   TableRelation="G/L Account".No.;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Balance Account Provision Loss;
                                                   Editable=No }
    { 560 ;   ;G/L Reg. No. Provision Loss;Integer;TableRelation="G/L Register";
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=G/L Reg. No. Provision Loss;
                                                   Editable=No }
    { 570 ;   ;Calculated Provision Loss;Decimal  ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Provision Loss;
                                                   Editable=No }
    { 580 ;   ;Corrected Provision Loss;Decimal   ;OnValidate=VAR
                                                                PostServicePreclosureMgt@1100529670 : Codeunit 11012886;
                                                                UpperLevelLineType@1100529600 : Integer;
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Corrected Provision Loss") THEN BEGIN
                                                                  TestIfCorrectProgressLevel;
                                                                  IF "Corrected Provision Loss" <> 0 THEN
                                                                    IF "Corrected Provision Loss" > 0 THEN
                                                                      ERROR(Text006, FIELDCAPTION("Corrected Provision Loss"))
                                                                    ELSE
                                                                      "Corrected Preclosure Result" := 0;
                                                                END ELSE
                                                                  IF "Corrected Provision Loss" > 0 THEN
                                                                    "Corrected Provision Loss" := 0;

                                                                CalcTotalResultCorrected(PostServicePreclosureMgt.PreclosureMethodServiceContract("Service Contract No.", "Service Category"));

                                                                IF CurrFieldNo = FIELDNO("Corrected Provision Loss") THEN BEGIN
                                                                  IF "Total Result Corrected" > 0 THEN
                                                                    ERROR(Text006, FIELDCAPTION("Total Result Corrected"));
                                                                END ELSE BEGIN
                                                                  GetUpperLevelLineType(UpperLevelLineType);
                                                                  IF "Line Type" >= UpperLevelLineType THEN
                                                                    IF "Total Result Corrected" > 0 THEN BEGIN
                                                                      "Corrected Provision Loss" := 0;
                                                                      CalcTotalResultCorrected(PostServicePreclosureMgt.PreclosureMethodServiceContract("Service Contract No.", "Service Category"));
                                                                    END;
                                                                END;

                                                                UpdateUpperLevelAmounts("Line Type", CurrFieldNo, "Corrected Preclosure Result" <> xRec."Corrected Preclosure Result");
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Corrected Provision Loss }
    { 590 ;   ;Total Result Corrected;Decimal     ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Total Result Corrected;
                                                   Editable=No }
    { 600 ;   ;Revenue Amount      ;Decimal       ;CaptionML=ENU=Revenue Amount;
                                                   Editable=No }
    { 610 ;   ;Calculated Revenue Accrual;Decimal ;CaptionML=ENU=Calculated Revenue Accrual;
                                                   Editable=No }
    { 620 ;   ;Corrected Revenue Accrual;Decimal  ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Corrected Revenue Accrual") THEN BEGIN
                                                                  TestIfCorrectMethod(2);
                                                                  TestIfCorrectProgressLevel;
                                                                END;
                                                                IF "Revenue Amount" + "Corrected Revenue Accrual" - "Actual Cost" - "Corrected Cost Accrual" + "Corrected Provision Loss" > 0 THEN
                                                                  "Corrected Provision Loss" := 0;
                                                                CalcTotalResultCorrected(2);
                                                                UpdateUpperLevelAmounts("Line Type", CurrFieldNo, FALSE);
                                                              END;

                                                   CaptionML=ENU=Corrected Revenue Accrual }
    { 630 ;   ;Previous Revenue Accrual;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Preclosure Result Line"."Actual Revenue Accrual" WHERE (Line Type=FIELD(Line Type),
                                                                                                                                    Service Contract No.=FIELD(Service Contract No.),
                                                                                                                                    Global Dimension 1 Code=FIELD(Global Dimension 1 Code),
                                                                                                                                    Control Period Code=FIELD(Control Period Code),
                                                                                                                                    Service Category=FIELD(Service Category),
                                                                                                                                    Service Order No.=FIELD(Service Order No.),
                                                                                                                                    Source Type=FIELD(Source Type),
                                                                                                                                    Totaling Type=FIELD(Totaling Type),
                                                                                                                                    Posted=CONST(Yes),
                                                                                                                                    Correction Posted=CONST(No)));
                                                   CaptionML=ENU=Previous Revenue Accrual;
                                                   Editable=No }
    { 640 ;   ;Actual Revenue Accrual;Decimal     ;CaptionML=ENU=Actual Revenue Accrual;
                                                   Editable=No }
    { 660 ;   ;Calculated Cost Accrual;Decimal    ;CaptionML=ENU=Calculated Cost Accrual;
                                                   Editable=No }
    { 670 ;   ;Corrected Cost Accrual;Decimal     ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Corrected Cost Accrual") THEN BEGIN
                                                                  TestIfCorrectMethod(2);
                                                                  TestIfCorrectProgressLevel;
                                                                END;
                                                                IF "Revenue Amount" + "Corrected Revenue Accrual" - "Actual Cost" - "Corrected Cost Accrual" + "Corrected Provision Loss" > 0 THEN
                                                                  "Corrected Provision Loss" := 0;
                                                                CalcTotalResultCorrected(2);
                                                                UpdateUpperLevelAmounts("Line Type", CurrFieldNo, FALSE);
                                                              END;

                                                   CaptionML=ENU=Corrected Cost Accrual }
    { 680 ;   ;Previous Cost Accrual;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Preclosure Result Line"."Actual Cost Accrual" WHERE (Line Type=FIELD(Line Type),
                                                                                                                                 Service Contract No.=FIELD(Service Contract No.),
                                                                                                                                 Global Dimension 1 Code=FIELD(Global Dimension 1 Code),
                                                                                                                                 Control Period Code=FIELD(Control Period Code),
                                                                                                                                 Service Category=FIELD(Service Category),
                                                                                                                                 Service Order No.=FIELD(Service Order No.),
                                                                                                                                 Source Type=FIELD(Source Type),
                                                                                                                                 Totaling Type=FIELD(Totaling Type),
                                                                                                                                 Posted=CONST(Yes),
                                                                                                                                 Correction Posted=CONST(No)));
                                                   CaptionML=ENU=Previous Cost Accrual;
                                                   Editable=No }
    { 690 ;   ;Actual Cost Accrual ;Decimal       ;CaptionML=ENU=Actual Cost Accrual;
                                                   Editable=No }
    { 700 ;   ;Correction Posted   ;Boolean       ;OnValidate=VAR
                                                                ServicePreclosureResultLine@1100528600 : Record 11072313;
                                                              BEGIN
                                                                TestLineTypeOnPosting;
                                                                ServicePreclosureResultLine.SETRANGE("Posting Date", "Posting Date");
                                                                ServicePreclosureResultLine.SETRANGE("Seq. No.", "Seq. No.");
                                                                IF "Totaling Type" <> "Totaling Type"::All THEN
                                                                  ServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");
                                                                ServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
                                                                IF "Service Contract No." = '' THEN
                                                                  ServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
                                                                ServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
                                                                ServicePreclosureResultLine.SETFILTER("Line Type", '>%1', "Line Type");
                                                                IF "Line Type" = "Line Type"::"Service Category" THEN
                                                                  ServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
                                                                ServicePreclosureResultLine.MODIFYALL("Correction Posted", "Correction Posted");
                                                                UpdatePostedOnPeriodLine(FIELDNO("Correction Posted"));
                                                              END;

                                                   CaptionML=[ENU=Correction Posted;
                                                              NOR=Bokf›rt;
                                                              SVE=Bokf”rd];
                                                   Editable=No }
    { 701 ;   ;Correction Posted by;Code20        ;CaptionML=[ENU=Correction Posted by;
                                                              NOR=Bokf›rt av;
                                                              SVE=Bokf”rt av];
                                                   Editable=No }
    { 702 ;   ;Correction Posted on;Date          ;CaptionML=[ENU=Correction Posted on;
                                                              NOR=Bokf›rt den;
                                                              SVE=Bokf”rt den];
                                                   Editable=No }
    { 800 ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Service Order No.;
                                                              SVE=Serviceordernr];
                                                   Editable=No }
    { 810 ;   ;Calc. Interim Results by Order;Boolean;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculate Interim Results by Order;
                                                   Editable=No }
    { 820 ;   ;Level Progress Measurement;Option  ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Level Progress Measurement;
                                                   OptionCaptionML=ENU=Period,Service Category,Source Type,Service Order;
                                                   OptionString=Period,Service Category,Source Type,Service Order;
                                                   Editable=No }
    { 830 ;   ;Totaling Type       ;Option        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Totaling Type;
                                                              SVE=Summeringstyp];
                                                   OptionCaptionML=ENU=All,Profit,Loss;
                                                   OptionString=All,Profit,Loss;
                                                   Editable=No }
    { 840 ;   ;Summary Level       ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Summary Level;
                                                   Editable=No }
    { 850 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              SVE=Global dimension 1 kod];
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
  }
  KEYS
  {
    {    ;Posting Date,Seq. No.,Line No.          ;Clustered=Yes }
    {    ;Service Contract No.                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528601 : TextConst 'ENU=Progress: \Phase 1: @1@@@@@\Phase 2: @2@@@@@';
      Text001@1100528602 : TextConst 'ENU=Period;NOR=Periode;SVE=Period';
      Text002@1100528604 : TextConst 'ENU=Prognosis %1 not found';
      Text003@1100528603 : TextConst 'ENU=No Prognosis Present';
      Text004@1100529660 : TextConst 'ENU=Amounts Source Type Level';
      Text005@1100528605 : TextConst 'ENU=Contract;NOR=Contract;SVE=Kontrakt (EBITA %)';
      Text006@1100529670 : TextConst 'ENU=%1 must be negative.;SVE=%1 m†ste vara negativt.';
      Text007@1100529600 : TextConst 'ENU=%1 must be positive.;SVE=%1 m†ste vara positiv.';

    LOCAL PROCEDURE DetermineIndentation@1100528606();
    VAR
      Indentations@1100529660 : ',Period,Service Category,Source Type,Service Order';
    BEGIN
      CASE "Line Type" OF
        "Line Type"::Period:
          Indentation := Indentations::Period;
        "Line Type"::"Service Category":
          Indentation := Indentations::"Service Category";
        "Line Type"::"Source Type":
          Indentation := Indentations::"Source Type";
        "Line Type"::"Service Order":
          Indentation := Indentations::"Service Order";
      END;
    END;

    PROCEDURE RefreshValues@1100528609(VAR IServicePreclosureResultLine@1100528600 : Record 11072313);
    VAR
      MarkedServicePreclosureResultLine@1100528601 : Record 11072313;
      ProgressDialog@1100528602 : Dialog;
      TotalNoOfLines@1100528603 : Integer;
      NoOfLinesProcessed@1100528604 : Integer;
      LineType@1100528605 : Option;
    BEGIN
      IServicePreclosureResultLine.SETRANGE(Posted, FALSE);
      IF IServicePreclosureResultLine.FINDSET THEN
        REPEAT
          MarkedServicePreclosureResultLine.SETRANGE("Posting Date", IServicePreclosureResultLine."Posting Date");
          MarkedServicePreclosureResultLine.SETRANGE("Seq. No.", IServicePreclosureResultLine."Seq. No.");
          MarkedServicePreclosureResultLine.SETRANGE("Service Contract No.", IServicePreclosureResultLine."Service Contract No.");
          MarkedServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", IServicePreclosureResultLine."Global Dimension 1 Code");
          IF MarkedServicePreclosureResultLine.FINDSET THEN
            REPEAT
              MarkedServicePreclosureResultLine.MARK(TRUE);
            UNTIL MarkedServicePreclosureResultLine.NEXT = 0;
        UNTIL IServicePreclosureResultLine.NEXT = 0;
      MarkedServicePreclosureResultLine.SETRANGE("Posting Date");
      MarkedServicePreclosureResultLine.SETRANGE("Seq. No.");
      MarkedServicePreclosureResultLine.SETRANGE("Service Contract No.");
      MarkedServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code");
      MarkedServicePreclosureResultLine.MARKEDONLY(TRUE);
      IF MarkedServicePreclosureResultLine.FINDSET THEN BEGIN
        IF GUIALLOWED THEN
          ProgressDialog.OPEN(Text000);
        TotalNoOfLines := MarkedServicePreclosureResultLine.COUNT;
        REPEAT
          MarkedServicePreclosureResultLine.ResetValues;
          MarkedServicePreclosureResultLine.DetermineValues;
          MarkedServicePreclosureResultLine.MODIFY(TRUE);
          NoOfLinesProcessed += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(1, ROUND(NoOfLinesProcessed / TotalNoOfLines * 10000, 1));
        UNTIL MarkedServicePreclosureResultLine.NEXT = 0;
      END;

      TotalNoOfLines := MarkedServicePreclosureResultLine.COUNT;
      NoOfLinesProcessed := 0;
      FOR LineType := MarkedServicePreclosureResultLine."Line Type"::"Source Type" DOWNTO MarkedServicePreclosureResultLine."Line Type"::Period DO BEGIN
        MarkedServicePreclosureResultLine.SETRANGE("Line Type", LineType);
        IF MarkedServicePreclosureResultLine.FINDSET THEN BEGIN
          REPEAT
            MarkedServicePreclosureResultLine.DetermineTotals;
            MarkedServicePreclosureResultLine.MODIFY(TRUE);
            NoOfLinesProcessed += 1;
            IF GUIALLOWED THEN
              ProgressDialog.UPDATE(2, ROUND(NoOfLinesProcessed / TotalNoOfLines * 10000, 1));
          UNTIL MarkedServicePreclosureResultLine.NEXT = 0;
        END;
      END;
      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;
    END;

    PROCEDURE ResetValues@1100525002();
    BEGIN
      CASE "Line Type" OF
        "Line Type"::"Service Category":;
        "Line Type"::"Source Type":
          IF NOT "Calc. Interim Results by Order" THEN BEGIN
            "Closed Revenue" := 0;
            "Budget Hours" := 0;
            "Budget Cost" := 0;
            "Original Budget Hours" := 0;
            "Original Budget Cost" := 0;
            "Allowed Hours" := 0;
            "Allowed Cost" := 0;

            "Closed Cost" := 0;
            "Actual Cost" := 0;
            "Actual Cost (Additional)" := 0;
            "Actual Hours" := 0;
            "Actual Hours (Additional)" := 0;
            "Firm Commitments" := 0;
            "Firm Commitments (Additional)" := 0;

            "Prognosis Financial Result" :=  0;
            "Prognosis Total Revenue" :=  0;
            "Prognosis Total Cost" := 0;
          END;
        "Line Type"::"Service Order":
          BEGIN
            "Closed Revenue" := 0;
            "Budget Hours" := 0;
            "Budget Cost" := 0;
            "Original Budget Hours" := 0;
            "Original Budget Cost" := 0;
            "Allowed Hours" := 0;
            "Allowed Cost" := 0;

            "Closed Cost" := 0;
            "Actual Cost" := 0;
            "Actual Cost (Additional)" := 0;
            "Actual Hours" := 0;
            "Actual Hours (Additional)" := 0;
            "Firm Commitments" := 0;
            "Firm Commitments (Additional)" := 0;

            "Prognosis Financial Result" :=  0;
            "Prognosis Total Revenue" :=  0;
            "Prognosis Total Cost" := 0;
          END;
      END;
    END;

    PROCEDURE DetermineValues@1100528603();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      DetermineProgressMethod;
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        ServiceContract.INIT;
      DetermineIndentation;

      CASE "Line Type" OF
        "Line Type"::Period:
          IF NOT "Calc. Interim Results by Order" THEN
            DeterminePrognosisValues;
        "Line Type"::"Service Category":
          IF NOT "Calc. Interim Results by Order" THEN
            DeterminePrognosisValues;
        "Line Type"::"Source Type":
          IF NOT "Calc. Interim Results by Order" THEN BEGIN
            DeterminePrognosisValues;
            DetermineValuesBySourceType;
            ServiceOrder.SETCURRENTKEY("Service Contract No.");
            ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
            IF "Service Contract No." = '' THEN
              ServiceOrder.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
            IF ("Control Period Code" <> '') OR "Summary Level" THEN
              ServiceOrder.SETRANGE("Service Control Period Date", "Starting Date", "Ending Date");
            ServiceOrder.SETRANGE("Source Type", "Source Type");
            ServiceOrder.SETRANGE("Service Category", "Service Category");
            ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
            ServiceOrder.SETRANGE("Base Service Order", TRUE);
            IF ServiceOrder.FINDSET THEN
              REPEAT
                DetermineValuesByServiceOrder("Service Category", ServiceOrder."Service Contract No.", ServiceOrder."No.");
              UNTIL ServiceOrder.NEXT = 0;
            DetermineProgressPercentage;
          END;
        "Line Type"::"Service Order":
          IF "Calc. Interim Results by Order" THEN BEGIN
            DeterminePrognosisValues;
            IF "Service Order No." = '' THEN BEGIN
              IF (("Totaling Type" = "Totaling Type"::Profit) AND ("Prognosis Financial Result" < 0)) OR
                 (("Totaling Type" = "Totaling Type"::Loss) AND ("Prognosis Financial Result" >= 0))
              THEN BEGIN
                "Prognosis Total Cost" := 0;
                "Prognosis Total Revenue" := 0;
                "Prognosis Financial Result" := 0;
              END ELSE
                DetermineValuesBySourceType;
            END ELSE BEGIN
              IF "Prognosis Financial Result" >= 0 THEN
                "Totaling Type" := "Totaling Type"::Profit
              ELSE
                "Totaling Type" := "Totaling Type"::Loss;
              ServiceOrder.GET("Service Order No.");
              DetermineValuesByServiceOrder("Service Category", ServiceOrder."Service Contract No.", ServiceOrder."No.");
            END;
            DetermineProgressPercentage;
          END;
      END;

      DeterminePreclosureValues;
    END;

    LOCAL PROCEDURE DetermineValuesBySourceType@1100528641();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      SCBudgetCallsRelease@1100528605 : Record 11071699;
      SCControlbyPeriodMgt@1100528602 : Codeunit 11012885;
      Factor@1100528601 : Decimal;
      BudgetHours@1100528603 : Decimal;
      BudgetCost@1100528606 : Decimal;
      ReleasePercentage@1100528604 : Decimal;
      DummyCost@1100528200 : Decimal;
      DummyHours@1100528201 : Decimal;
      DummyBudgetRevenue@1100529640 : Decimal;
      PostingDateFilter@1100527300 : Text;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        ServiceContract.INIT;

      PostingDateFilter := STRSUBSTNO('..%1', "Posting Date");

      //The goal is to get "Revenue Amount". Because the results are not the same as from ControlbyPeriodMgt.GetSCMaintenanceBudget use Dummy variables,
      DummyCost := SCControlbyPeriodMgt.GetMaintenanceBudgetAndRevenue(
                    "Service Contract No.", "Control Period Code", "Starting Date", "Ending Date", "Service Category", "Source Type",
                    "Line Type", PostingDateFilter, "Revenue Amount", DummyHours, DummyBudgetRevenue);
      //
      IF NOT (ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::"Maintenance Scheme", ServiceContract."Budget Based on"::"Category + Maintenance Scheme"]) THEN
        EXIT;
      Factor := 1;
      IF ((ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Maintenance Scheme") AND
          ("Source Type" IN ["Source Type"::Call, "Source Type"::Contract])) OR
         (ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Category + Maintenance Scheme")
      THEN BEGIN
        IF ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Maintenance Scheme" THEN BEGIN
          Factor := ServiceContract.GetPercentageShareCalls("Ending Date") / 100;
          IF "Source Type" = "Source Type"::Contract THEN
            Factor := 1 - Factor;
        END;
        "Closed Revenue" +=
          SCControlbyPeriodMgt.GetSCClosedRevenue("Service Contract No.", "Starting Date", "Ending Date", "Service Category", 0, GetPostingDateFilter) * Factor;
        BudgetCost := SCControlbyPeriodMgt.GetSCMaintenanceBudgetAndCreateDetails(
          "Service Contract No.", "Control Period Code", "Starting Date", "Ending Date", "Service Category", "Source Type",
          "Source Type" = "Source Type"::Call, BudgetHours, DummyBudgetRevenue);
        IF "Source Type" = "Source Type"::Contract THEN
          Factor := 1;
        "Budget Hours" += BudgetHours * Factor;
        "Budget Cost" += BudgetCost * Factor;
        "Original Budget Hours" += BudgetHours * Factor;
        "Original Budget Cost" += BudgetCost * Factor;
        IF "Source Type" = "Source Type"::Call THEN BEGIN
          IF "Prognosis Date" <> 0D THEN
            ReleasePercentage := SCBudgetCallsRelease.CalcTotalReleasePerc("Service Contract No.", "Starting Date", "Prognosis Date", "Ending Date")
          ELSE
            ReleasePercentage := SCBudgetCallsRelease.CalcTotalReleasePerc("Service Contract No.", "Starting Date", WORKDATE, "Ending Date");
          "Allowed Hours" += "Budget Hours" * ReleasePercentage / 100;
          "Allowed Cost" += "Budget Cost" * ReleasePercentage / 100;
        END;
      END;
    END;

    LOCAL PROCEDURE DetermineValuesByServiceOrder@1100528604(IServiceCategoryCode@1100528605 : Code[10];IServiceContractNo@1100528608 : Code[20];IServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceContract@1100528609 : Record 11012812;
      SCControlbyPeriodMgt@1100528601 : Codeunit 11012885;
      BudgetHours@1100528606 : Decimal;
      BudgetCost@1100528607 : Decimal;
      PostingDateFilter@1100529600 : Text;
    BEGIN
      IF IServiceOrderNo = '' THEN
        EXIT;
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        ServiceContract.INIT;
      PostingDateFilter := GetPostingDateFilter;
      "Closed Revenue" += SCControlbyPeriodMgt.GetSOClosedRevenue(IServiceOrderNo, 0, PostingDateFilter);
      "Closed Cost" += SCControlbyPeriodMgt.GetSOClosedCost(IServiceOrderNo, 0, PostingDateFilter);
      BudgetHours := SCControlbyPeriodMgt.GetSOBudgetHours(IServiceOrderNo, 0);
      BudgetCost := SCControlbyPeriodMgt.GetSOBudget(IServiceOrderNo, 0);
      IF (ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::Category) OR
         (("Source Type" <> "Source Type"::Contract) AND (ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Category + Maintenance Scheme"))
      THEN
        ConsumeServiceCategoryBudget(BudgetHours, BudgetCost);
      "Budget Hours" += BudgetHours;
      "Budget Cost" += BudgetCost;
      "Allowed Hours" += SCControlbyPeriodMgt.GetSOAllowedHours(IServiceOrderNo, 0);
      "Allowed Cost" += SCControlbyPeriodMgt.GetSOAllowedCost(IServiceOrderNo, 0);
      "Actual Cost" += SCControlbyPeriodMgt.GetSOActualCost(IServiceOrderNo, 0, PostingDateFilter);
      "Actual Cost (Additional)" += SCControlbyPeriodMgt.GetSOActualCost(IServiceOrderNo, 2, PostingDateFilter);
      "Actual Hours" += SCControlbyPeriodMgt.GetSOActualHours(IServiceOrderNo, 0, PostingDateFilter);
      "Actual Hours (Additional)" += SCControlbyPeriodMgt.GetSOActualHours(IServiceOrderNo, 2, PostingDateFilter);
      "Revenue Amount" += SCControlbyPeriodMgt.GetSORevenue(IServiceOrderNo, 0,  PostingDateFilter);
      "Firm Commitments" += (SCControlbyPeriodMgt.GetSOReceivedNotInvoiced(IServiceOrderNo, 0,  PostingDateFilter) +
        SCControlbyPeriodMgt.GetSOReceivedNotInvoicedSurcharge(IServiceOrderNo, 0,  PostingDateFilter));
      "Firm Commitments (Additional)" += (SCControlbyPeriodMgt.GetSOReceivedNotInvoiced(IServiceOrderNo, 2,  PostingDateFilter) +
        SCControlbyPeriodMgt.GetSOReceivedNotInvoicedSurcharge(IServiceOrderNo, 2,  PostingDateFilter));
    END;

    PROCEDURE DetermineTotals@1100528608();
    VAR
      ServiceContract@1100528602 : Record 11012812;
      ServicePreclosureResultLine@1100528601 : Record 11072313;
      LowerLevelLineType@1100528600 : Option;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        ServiceContract.INIT;
      CASE "Line Type" OF
        "Line Type"::Period:
          IF ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Maintenance Scheme" THEN
            LowerLevelLineType := "Line Type"::"Source Type"
          ELSE
            LowerLevelLineType := "Line Type"::"Service Category";
        "Line Type"::"Service Category":
          LowerLevelLineType := "Line Type"::"Source Type";
        "Line Type"::"Source Type":
          LowerLevelLineType := "Line Type"::"Service Order";
      END;
      ServicePreclosureResultLine.SETRANGE("Posting Date", "Posting Date");
      ServicePreclosureResultLine.SETRANGE("Seq. No.", "Seq. No.");
      IF "Totaling Type" <> "Totaling Type"::All THEN
        ServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");
      ServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Contract No." = '' THEN
        ServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
      ServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
      IF "Line Type" IN ["Line Type"::"Service Category", "Line Type"::"Source Type"] THEN
        ServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
      IF "Line Type" IN ["Line Type"::"Source Type"] THEN
        ServicePreclosureResultLine.SETRANGE("Source Type", "Source Type");
      ServicePreclosureResultLine.SETRANGE("Line Type", LowerLevelLineType);
      ServicePreclosureResultLine.CALCSUMS(
        "Budget Hours", "Budget Cost", "Actual Hours", "Actual Hours (Additional)", "Actual Cost", "Actual Cost (Additional)",
        "Allowed Hours", "Allowed Cost", "Closed Cost", "Closed Revenue", "Original Budget Cost", "Original Budget Hours","Revenue Amount");
      ServicePreclosureResultLine.CALCSUMS(
        "Calculated Preclosure Result", "Calculated Preclosure Cost", "Calculated Preclosure Revenue","Calculated Revenue Accrual", "Calculated Cost Accrual",
        "Corrected Preclosure Result", "Corrected Preclosure Cost", "Corrected Preclosure Revenue", "Corrected Revenue Accrual", "Corrected Cost Accrual",
        "Calculated Provision Loss", "Corrected Provision Loss");
      IF "Calc. Interim Results by Order" THEN
        ServicePreclosureResultLine.CALCSUMS("Prognosis Total Cost", "Prognosis Total Revenue");
      "Budget Hours" := ServicePreclosureResultLine."Budget Hours";
      "Original Budget Hours" := ServicePreclosureResultLine."Original Budget Hours";
      "Budget Cost" := ServicePreclosureResultLine."Budget Cost";
      "Original Budget Cost" := ServicePreclosureResultLine."Original Budget Cost";
      "Actual Hours" := ServicePreclosureResultLine."Actual Hours";
      "Actual Hours (Additional)" := ServicePreclosureResultLine."Actual Hours (Additional)";
      "Actual Cost" := ServicePreclosureResultLine."Actual Cost";
      "Actual Cost (Additional)" := ServicePreclosureResultLine."Actual Cost (Additional)";
      "Firm Commitments" := ServicePreclosureResultLine."Firm Commitments";
      "Firm Commitments (Additional)" := ServicePreclosureResultLine."Firm Commitments (Additional)" ;
      "Allowed Hours" := ServicePreclosureResultLine."Allowed Hours";
      "Allowed Cost" := ServicePreclosureResultLine."Allowed Cost";
      "Closed Cost" := ServicePreclosureResultLine."Closed Cost";
      "Closed Revenue" := ServicePreclosureResultLine."Closed Revenue";
      "Calculated Preclosure Result" := ServicePreclosureResultLine."Calculated Preclosure Result";
      "Calculated Preclosure Cost" := ServicePreclosureResultLine."Calculated Preclosure Cost";
      "Calculated Preclosure Revenue" := ServicePreclosureResultLine."Calculated Preclosure Revenue";
      "Revenue Amount" := ServicePreclosureResultLine."Revenue Amount";
      "Calculated Revenue Accrual" := ServicePreclosureResultLine."Calculated Revenue Accrual";
      "Calculated Cost Accrual" := ServicePreclosureResultLine."Calculated Cost Accrual";
      "Calculated Provision Loss" := ServicePreclosureResultLine."Calculated Provision Loss";
      IF "Calc. Interim Results by Order" THEN BEGIN
        "Prognosis Total Cost" := ServicePreclosureResultLine."Prognosis Total Cost";
        "Prognosis Total Revenue" := ServicePreclosureResultLine."Prognosis Total Revenue";
        "Prognosis Financial Result" := "Prognosis Total Revenue" - "Prognosis Total Cost";
      END;
      VALIDATE("Corrected Preclosure Result", ServicePreclosureResultLine."Corrected Preclosure Result");
      VALIDATE("Corrected Preclosure Cost", ServicePreclosureResultLine."Corrected Preclosure Cost");
      VALIDATE("Corrected Preclosure Revenue", ServicePreclosureResultLine."Corrected Preclosure Revenue");
      VALIDATE("Corrected Revenue Accrual", ServicePreclosureResultLine."Corrected Revenue Accrual");
      VALIDATE("Corrected Cost Accrual", ServicePreclosureResultLine."Corrected Cost Accrual");
      VALIDATE("Corrected Provision Loss", ServicePreclosureResultLine."Corrected Provision Loss");
      DetermineProgressPercentage;
      DeterminePreclosureValues;
    END;

    LOCAL PROCEDURE DetermineProgressPercentage@1100528623();
    VAR
      Date@1100528600 : Record 2000000007;
      ServicePrognosisManagement@1100528602 : Codeunit 11012884;
      NoOfDaysPast@1100528601 : Integer;
    BEGIN
      IF "Service Contract No." = '' THEN BEGIN
        "Calculated Cum. Progress %" := 100;
        "Cumulative Progress %" := 100;
        EXIT;
      END;
      "Calculated Cum. Progress %" := 0;
      "Cumulative Progress %" := 0;
      IF "Line Type" = "Level Progress Measurement" + 1 THEN BEGIN
        CASE "Progress Method" OF
          "Progress Method"::"Allowed Hours":
            CASE "Source Type" OF
              "Source Type"::Call,
              "Source Type"::Contract:
                IF "Budget Hours" <> 0 THEN
                  "Calculated Cum. Progress %" := "Allowed Hours" / "Budget Hours" * 100;
              "Source Type"::Direct:
                "Calculated Cum. Progress %" := 100;
            END;
          "Progress Method"::"Allowed Cost":
            CASE "Source Type" OF
              "Source Type"::Call,
              "Source Type"::Contract:
                IF "Budget Cost" <> 0 THEN
                  "Calculated Cum. Progress %" := "Allowed Cost" / "Budget Cost" * 100;
              "Source Type"::Direct:
                "Calculated Cum. Progress %" := 100;
            END;
          "Progress Method"::"Actual Cost":
            IF "Prognosis Total Cost" <> 0 THEN
              IF "Include Commitments" THEN
                 "Calculated Cum. Progress %" := ("Actual Cost" + "Firm Commitments") / "Prognosis Total Cost" * 100
              ELSE
                "Calculated Cum. Progress %" := "Actual Cost" / "Prognosis Total Cost" * 100;
          "Progress Method"::"Elapsed Time":
            BEGIN
              Date.SETRANGE("Period Type", Date."Period Type"::Date);
              IF "Prognosis Date" > "Ending Date" THEN
                Date.SETRANGE("Period Start", "Starting Date", "Ending Date")
              ELSE
                Date.SETRANGE("Period Start", "Starting Date", "Prognosis Date");
              NoOfDaysPast := Date.COUNT;
              Date.SETRANGE("Period Start", "Starting Date", "Ending Date");
              IF NOT Date.ISEMPTY THEN
                "Calculated Cum. Progress %" := NoOfDaysPast / Date.COUNT * 100;
            END;
          "Progress Method"::"Available Hours":
            CASE "Source Type" OF
              "Source Type"::Call,
              "Source Type"::Contract:
                IF "Budget Hours" <> 0 THEN
                  "Calculated Cum. Progress %" := ("Actual Hours" - "Actual Hours (Additional)") / "Budget Hours" * 100;
              "Source Type"::Direct:
                "Calculated Cum. Progress %" := 100;
            END;
          "Progress Method"::"Available Cost":
            CASE "Source Type" OF
              "Source Type"::Call,
              "Source Type"::Contract:
                IF "Budget Cost" <> 0 THEN
                  IF "Include Commitments" THEN
                   "Calculated Cum. Progress %" := (("Actual Cost" - "Actual Cost (Additional)") + ("Firm Commitments" - "Firm Commitments (Additional)")) / "Budget Cost" * 100
                  ELSE
                  "Calculated Cum. Progress %" := ("Actual Cost" - "Actual Cost (Additional)") / "Budget Cost" * 100;
              "Source Type"::Direct:
                "Calculated Cum. Progress %" := 100;
            END;
          "Progress Method"::None:
            "Cumulative Progress %" := 0;
        END;
      END;
      IF "Prognosis Date" <> 0D THEN
        IF "Summary Level" THEN
          "Cumulative Progress %" :=
            ServicePrognosisManagement.GetPrognosisProgressPercentageSummaryLevel("Prognosis Date", "Line Type", "Service Contract No.", "Starting Date", "Ending Date",
              "Service Category", "Source Type", "Service Order No.", "Totaling Type")
        ELSE
          "Cumulative Progress %" :=
            ServicePrognosisManagement.GetPrognosisProgressPercentage(
              "Prognosis Date", "Line Type", "Service Contract No.", "Control Period Code", "Service Category", "Source Type", "Service Order No.", "Global Dimension 1 Code")
      ELSE
        "Cumulative Progress %" := "Calculated Cum. Progress %";
    END;

    PROCEDURE DeterminePrognosisValues@1100528643();
    VAR
      ServicePrognosisManagement@1100528601 : Codeunit 11012884;
      DummyDec@1100529660 : Decimal;
    BEGIN
      IF "Summary Level" THEN
        ServicePrognosisManagement.GetPrognosisValuesSummaryLevel("Line Type", "Service Contract No.", "Starting Date", "Ending Date", "Service Category",
          "Source Type", "Service Order No.", "Totaling Type", "Posting Date", "Prognosis Date", "Prognosis Total Cost", "Prognosis Total Revenue")
      ELSE
        ServicePrognosisManagement.GetPrognosisValues("Line Type", "Service Contract No.", "Control Period Code", "Service Category", "Source Type", "Service Order No.",
          "Global Dimension 1 Code", "Posting Date", "Prognosis Date", DummyDec, "Prognosis Total Cost", "Prognosis Total Revenue", DummyDec, DummyDec);
      "Prognosis Financial Result" := "Prognosis Total Revenue" - "Prognosis Total Cost";
    END;

    LOCAL PROCEDURE DeterminePreclosureValues@1100528607();
    VAR
      PostServicePreclosureMgt@1100528600 : Codeunit 11012886;
      PreclosureMethod@1100528200 : 'Net,Gross,GrossPL';
    BEGIN
      IF "Service Contract No." <> '' THEN
        IF "Line Type" <> "Level Progress Measurement" + 1 THEN
          EXIT;

      "Calculated Preclosure Result" := 0;
      "Calculated Preclosure Revenue" := 0;
      "Calculated Preclosure Cost" := 0;
      "Calculated Revenue Accrual" := 0;
      "Calculated Cost Accrual" := 0;

      PreclosureMethod := PostServicePreclosureMgt.PreclosureMethodServiceContract("Service Contract No.", "Service Category");

      IF PreclosureMethod IN [PreclosureMethod::Gross, PreclosureMethod::GrossPL] THEN
        IF PrognosisFinancialResultPositive THEN
          "Calculated Provision Loss" := 0
        ELSE
          "Calculated Provision Loss" := "Prognosis Financial Result" * (1 - "Cumulative Progress %" / 100);

      CASE PreclosureMethod OF
        PreclosureMethod::Net:
          BEGIN
            IF PrognosisFinancialResultPositive THEN BEGIN
              "Calculated Preclosure Result" := ("Cumulative Progress %" / 100 * "Prognosis Financial Result") - ("Closed Revenue" - "Closed Cost");
              "Calculated Provision Loss" := 0;
            END ELSE BEGIN
              "Calculated Preclosure Result" := 0;
              "Calculated Provision Loss" := ("Prognosis Financial Result" - ("Closed Revenue" - "Closed Cost"));
            END;
            VALIDATE("Corrected Preclosure Result", "Calculated Preclosure Result");
          END;
        PreclosureMethod::Gross:
          BEGIN
            "Calculated Preclosure Revenue" := "Cumulative Progress %" / 100 * "Prognosis Total Revenue" - "Closed Revenue";
            "Calculated Preclosure Cost" := "Cumulative Progress %" / 100 * "Prognosis Total Cost" - "Closed Cost";
            VALIDATE("Corrected Preclosure Cost", "Calculated Preclosure Cost");
            VALIDATE("Corrected Preclosure Revenue", "Calculated Preclosure Revenue");
          END;
        PreclosureMethod::GrossPL:
          BEGIN
            "Calculated Preclosure Revenue" := "Cumulative Progress %" / 100 * "Prognosis Total Revenue";
            "Calculated Preclosure Cost" := "Cumulative Progress %" / 100 * "Prognosis Total Cost";
            "Calculated Revenue Accrual" := ("Cumulative Progress %" / 100 * "Prognosis Total Revenue") - "Revenue Amount";
            "Calculated Cost Accrual"    := ("Cumulative Progress %" / 100 * "Prognosis Total Cost") - "Actual Cost";
            VALIDATE("Corrected Revenue Accrual", "Calculated Revenue Accrual");
            VALIDATE("Corrected Cost Accrual", "Calculated Cost Accrual");
          END;
      END;

      VALIDATE("Corrected Provision Loss", "Calculated Provision Loss");
    END;

    PROCEDURE GetLineLevelDescription@1100528600() LevelDescription : Text;
    VAR
      CaptionManagement@1100529600 : Codeunit 42;
    BEGIN
      CASE "Line Type" OF
        "Line Type"::Period:
          BEGIN
            IF "Service Contract No." <> '' THEN
              LevelDescription := STRSUBSTNO('%1: %2, ', Text005, "Service Contract No.")
            ELSE
              IF "Global Dimension 1 Code" <> '' THEN
                LevelDescription := STRSUBSTNO('%1: %2, ', CaptionManagement.CaptionClassTranslate(GLOBALLANGUAGE, '1,1,1'), "Global Dimension 1 Code");
            LevelDescription += STRSUBSTNO('%1: %2 - %3', Text001, "Starting Date", "Ending Date");
          END;
        "Line Type"::"Service Category":
          LevelDescription := STRSUBSTNO('%1: %2', FIELDCAPTION("Service Category"), "Service Category");
        "Line Type"::"Source Type":
          LevelDescription := STRSUBSTNO('%1: %2', FIELDCAPTION("Source Type"), "Source Type");
        "Line Type"::"Service Order":
          IF "Service Order No." <> '' THEN
            LevelDescription := STRSUBSTNO('%1: %2', FIELDCAPTION("Service Order No."), "Service Order No.")
          ELSE
            LevelDescription := Text004;
      END;

      IF ("Line Type" < "Line Type"::"Source Type") AND ("Totaling Type" <> "Totaling Type"::All) THEN
        LevelDescription := LevelDescription + ' (' + FORMAT("Totaling Type") + ')';

      IF ("Line Type" = "Line Type"::Period) AND "Summary Level" THEN
        LevelDescription := FIELDCAPTION("Summary Level") + ' ' + LevelDescription;
    END;

    LOCAL PROCEDURE GetPostingDateFilter@1100528620() : Text;
    BEGIN
      EXIT(STRSUBSTNO('..%1', "Posting Date"));
    END;

    LOCAL PROCEDURE TestIfCorrectMethod@1100528602(IMethodPreclosureResults@1100528602 : 'Net,Gross,GrossPL');
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceType@1100528601 : Record 11012814;
      ServiceCategory@1100529600 : Record 11071985;
    BEGIN
      CLEAR(ServiceType);
      IF "Service Category" <> '' THEN
        IF ServiceCategory.GET("Service Contract No.", "Service Category") THEN
          IF ServiceCategory."Service Type" <> '' THEN
            IF NOT ServiceType.GET(ServiceCategory."Service Type") THEN
              CLEAR(ServiceType);
      IF ServiceType.Code = '' THEN BEGIN
        IF NOT ServiceContract.GET("Service Contract No.") THEN
          EXIT;
        IF NOT ServiceType.GET(ServiceContract."Service Type") THEN
          EXIT;
      END;
      ServiceType.TESTFIELD("Method Preclosure Results", IMethodPreclosureResults);
    END;

    LOCAL PROCEDURE TestIfCorrectProgressLevel@1100528601();
    BEGIN
      TESTFIELD("Service Contract No.");
      TESTFIELD("Level Progress Measurement", "Line Type" - 1);
    END;

    PROCEDURE ShowServicePrognosisCard@1100528610();
    VAR
      ServicePrognosis@1100528601 : Record 11072309;
      ServicePrognosisManagement@1100528603 : Codeunit 11012884;
      ServicePrognosisPage@1100528602 : Page 11126799;
    BEGIN
      IF "Prognosis Date" = 0D THEN
        ERROR(Text003);
      IF ServicePrognosisManagement.GetServicePrognosis("Prognosis Date", "Service Contract No.", ServicePrognosis) THEN BEGIN
        ServicePrognosisPage.SetServiceContractFilter("Service Contract No.");
        ServicePrognosisPage.SETRECORD(ServicePrognosis);
        ServicePrognosisPage.RUN;
      END ELSE
        ERROR(Text002, "Prognosis Date");
    END;

    PROCEDURE RemoveServiceContractLines@1100528611(VAR IServicePreclosureResultLine@1100528600 : Record 11072313);
    VAR
      MarkedServicePreclosureResultLine@1100528601 : Record 11072313;
    BEGIN
      IServicePreclosureResultLine.SETRANGE(Posted, FALSE);
      IF IServicePreclosureResultLine.FINDSET THEN
        REPEAT
          MarkedServicePreclosureResultLine.SETRANGE("Posting Date", IServicePreclosureResultLine."Posting Date");
          MarkedServicePreclosureResultLine.SETRANGE("Seq. No.", IServicePreclosureResultLine."Seq. No.");
          MarkedServicePreclosureResultLine.SETRANGE("Service Contract No.", IServicePreclosureResultLine."Service Contract No.");
          MarkedServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", IServicePreclosureResultLine."Global Dimension 1 Code");
          IF MarkedServicePreclosureResultLine.FINDSET THEN
            REPEAT
              MarkedServicePreclosureResultLine.MARK(TRUE);
            UNTIL MarkedServicePreclosureResultLine.NEXT = 0;
        UNTIL IServicePreclosureResultLine.NEXT = 0;
      MarkedServicePreclosureResultLine.SETRANGE("Posting Date");
      MarkedServicePreclosureResultLine.SETRANGE("Seq. No.");
      MarkedServicePreclosureResultLine.SETRANGE("Service Contract No.");
      MarkedServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code");
      MarkedServicePreclosureResultLine.MARKEDONLY(TRUE);
      MarkedServicePreclosureResultLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DetermineProgressMethod@1100528614();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceCategory@1100528602 : Record 11071985;
      ServicePrognosisManagement@1100528601 : Codeunit 11012884;
      ServiceSetup@1100528200 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      "Include Commitments" := ServiceSetup."Calc. Progress P Incl. Firm C";
      IF "Service Contract No." <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        IF ("Service Category" = '') OR ServiceContract."Result Calc. on Total Contract" THEN BEGIN
          ServicePrognosisManagement.TestProgressMethodvsProgressMeasurement("Service Contract No.", ServiceContract."Calc. Progress Perc. Progn/Res", ServiceContract."Level Progress Measurement");
          "Progress Method" := ServiceContract."Calc. Progress Perc. Progn/Res";
        END ELSE BEGIN
          ServiceCategory.GET("Service Contract No.", "Service Category");
          ServicePrognosisManagement.TestProgressMethodvsProgressMeasurement("Service Contract No.", ServiceCategory."Calc. Progress Perc. Progn/Res", ServiceContract."Level Progress Measurement");
          "Progress Method" := ServiceCategory."Calc. Progress Perc. Progn/Res";
        END;
      END ELSE
        "Progress Method" := "Progress Method"::None;
    END;

    LOCAL PROCEDURE ConsumeServiceCategoryBudget@1100528612(IBudgetHours@1100528601 : Decimal;IBudgetCost@1100528602 : Decimal);
    VAR
      ServicePreclosureResultLine@1100528600 : Record 11072313;
    BEGIN
      IF "Service Contract No." = '' THEN
        EXIT;
      IF "Service Category" = '' THEN
        EXIT;
      ServicePreclosureResultLine.SETRANGE("Posting Date", "Posting Date");
      ServicePreclosureResultLine.SETRANGE("Seq. No.", "Seq. No.");
      ServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");
      ServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
      ServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
      ServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
      ServicePreclosureResultLine.SETRANGE("Source Type", "Source Type");
      ServicePreclosureResultLine.SETRANGE("Line Type", ServicePreclosureResultLine."Line Type"::"Source Type");
      IF ServicePreclosureResultLine.FINDFIRST THEN BEGIN
        ServicePreclosureResultLine."Budget Hours" -= IBudgetHours;
        ServicePreclosureResultLine."Budget Cost" -= IBudgetCost;
        IF ServicePreclosureResultLine."Budget Hours" < 0 THEN
          ServicePreclosureResultLine."Budget Hours" := 0;
        IF ServicePreclosureResultLine."Budget Cost" < 0 THEN
          ServicePreclosureResultLine."Budget Cost" := 0;
        ServicePreclosureResultLine.MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateUpperLevelAmounts@1100528613(ILineType@1100528604 : Option;IFieldNo@1100528608 : Integer;IUpdateRelatedField@1100529601 : Boolean);
    VAR
      ServiceContract@1100528603 : Record 11012812;
      ServicePreclosureResultLine@1100528601 : Record 11072313;
      UpperServicePreclosureResultLine@1100528600 : Record 11072313;
      UpperLevelLineType@1100528602 : Option;
      CorrectedPreclosureResult@1100528605 : Decimal;
      CorrectedPreclosureCost@1100528606 : Decimal;
      CorrectedPreclosureRevenue@1100528607 : Decimal;
      CorrectedCostAccrual@1100528200 : Decimal;
      CorrectedRevenueAccrual@1100528201 : Decimal;
      CorrectedProvisionLoss@1100529670 : Decimal;
      CalculatedPreclosureResult@1100529600 : Decimal;
      CalculatedPreclosureRevenue@1100528202 : Decimal;
      CalculatedPreclosureCost@1100528203 : Decimal;
      CalculatedRevenueAccrual@1100528204 : Decimal;
      CalculatedCostAccrual@1100528205 : Decimal;
      CalculatedProvisionLoss@1100529671 : Decimal;
    BEGIN
      IF ILineType = "Line Type"::Period THEN
        EXIT;
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        ServiceContract.INIT;
      UpperLevelLineType := ILineType - 1;
      UpperServicePreclosureResultLine.SETRANGE("Posting Date", "Posting Date");
      UpperServicePreclosureResultLine.SETRANGE("Seq. No.", "Seq. No.");
      UpperServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Contract No." = '' THEN
        UpperServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
      UpperServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
      UpperServicePreclosureResultLine.SETRANGE("Line Type", UpperLevelLineType);
      UpperServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");
      CASE ILineType OF
        "Line Type"::"Service Category":
          UpperServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type"::All);
        "Line Type"::"Source Type":
          IF ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"] THEN
            UpperServicePreclosureResultLine.SETRANGE("Service Category", "Service Category")
          ELSE BEGIN
            UpperLevelLineType := UpperLevelLineType - 1; // skip category level
            UpperServicePreclosureResultLine.SETRANGE("Line Type", UpperLevelLineType);
          END;
        "Line Type"::"Service Order":
          BEGIN
            UpperServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
            UpperServicePreclosureResultLine.SETRANGE("Source Type", "Source Type");
          END;
      END;
      IF NOT UpperServicePreclosureResultLine.FINDFIRST THEN
        EXIT;

      ServicePreclosureResultLine.SETRANGE("Posting Date", UpperServicePreclosureResultLine."Posting Date");
      ServicePreclosureResultLine.SETRANGE("Seq. No.", UpperServicePreclosureResultLine."Seq. No.");
      IF ILineType = "Line Type" THEN
        ServicePreclosureResultLine.SETFILTER("Line No.", '<>%1', "Line No.");
      ServicePreclosureResultLine.SETRANGE("Service Contract No.", UpperServicePreclosureResultLine."Service Contract No.");
      IF UpperServicePreclosureResultLine."Service Contract No." = '' THEN
        ServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", UpperServicePreclosureResultLine."Global Dimension 1 Code");
      ServicePreclosureResultLine.SETRANGE("Control Period Code", UpperServicePreclosureResultLine."Control Period Code");
      CASE ILineType OF
        "Line Type"::"Source Type":
          BEGIN
            IF ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"] THEN
              ServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
            ServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");
          END;
        "Line Type"::"Service Order":
          BEGIN
            ServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
            ServicePreclosureResultLine.SETRANGE("Source Type", "Source Type");
            ServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");
          END;
      END;
      ServicePreclosureResultLine.SETRANGE("Line Type", ILineType);
      ServicePreclosureResultLine.CALCSUMS(
        "Corrected Preclosure Result", "Corrected Preclosure Cost", "Corrected Preclosure Revenue",
        "Corrected Revenue Accrual", "Corrected Cost Accrual", "Corrected Provision Loss");
      IF IFieldNo = FIELDNO("Cumulative Progress %") THEN
        ServicePreclosureResultLine.CALCSUMS(
          "Calculated Preclosure Result", "Calculated Revenue Accrual", "Calculated Cost Accrual",
          "Calculated Preclosure Revenue", "Calculated Preclosure Cost", "Calculated Provision Loss");

      CorrectedPreclosureResult := ServicePreclosureResultLine."Corrected Preclosure Result";
      CorrectedPreclosureCost := ServicePreclosureResultLine."Corrected Preclosure Cost";
      CorrectedPreclosureRevenue := ServicePreclosureResultLine."Corrected Preclosure Revenue";
      CorrectedCostAccrual := ServicePreclosureResultLine."Corrected Cost Accrual";
      CorrectedRevenueAccrual := ServicePreclosureResultLine."Corrected Revenue Accrual";
      CorrectedProvisionLoss := ServicePreclosureResultLine."Corrected Provision Loss";

      IF IFieldNo = FIELDNO("Cumulative Progress %") THEN BEGIN
        CalculatedPreclosureResult := ServicePreclosureResultLine."Calculated Preclosure Result";
        CalculatedCostAccrual := ServicePreclosureResultLine."Calculated Cost Accrual";
        CalculatedRevenueAccrual := ServicePreclosureResultLine."Calculated Revenue Accrual";
        CalculatedPreclosureRevenue := ServicePreclosureResultLine."Calculated Preclosure Revenue";
        CalculatedPreclosureCost := ServicePreclosureResultLine."Calculated Preclosure Cost";
        CalculatedProvisionLoss := ServicePreclosureResultLine."Calculated Provision Loss";
      END;

      IF ILineType = "Line Type" THEN BEGIN
        CorrectedPreclosureResult += "Corrected Preclosure Result";
        CorrectedPreclosureCost += "Corrected Preclosure Cost";
        CorrectedPreclosureRevenue += "Corrected Preclosure Revenue";
        CorrectedCostAccrual += "Corrected Cost Accrual";
        CorrectedRevenueAccrual += "Corrected Revenue Accrual";
        CorrectedProvisionLoss += "Corrected Provision Loss";

        IF IFieldNo = FIELDNO("Cumulative Progress %") THEN BEGIN
          CalculatedPreclosureResult += "Calculated Preclosure Result";
          CalculatedCostAccrual += "Calculated Cost Accrual";
          CalculatedRevenueAccrual += "Calculated Revenue Accrual";
          CalculatedPreclosureRevenue += "Calculated Preclosure Revenue";
          CalculatedPreclosureCost += "Calculated Preclosure Cost";
          CalculatedProvisionLoss += "Calculated Provision Loss";
        END;
      END;

      CASE IFieldNo OF
        FIELDNO("Corrected Preclosure Result"):
          BEGIN
            UpperServicePreclosureResultLine.VALIDATE("Corrected Preclosure Result", CorrectedPreclosureResult);
            IF IUpdateRelatedField THEN
              UpperServicePreclosureResultLine.VALIDATE("Corrected Provision Loss", CorrectedProvisionLoss);
          END;
        FIELDNO("Corrected Preclosure Cost"):
          UpperServicePreclosureResultLine.VALIDATE("Corrected Preclosure Cost", CorrectedPreclosureCost);
        FIELDNO("Corrected Preclosure Revenue"):
          UpperServicePreclosureResultLine.VALIDATE("Corrected Preclosure Revenue", CorrectedPreclosureRevenue);
        FIELDNO("Corrected Cost Accrual"):
          UpperServicePreclosureResultLine.VALIDATE("Corrected Cost Accrual", CorrectedCostAccrual);
        FIELDNO("Corrected Revenue Accrual"):
          UpperServicePreclosureResultLine.VALIDATE("Corrected Revenue Accrual", CorrectedRevenueAccrual);
        FIELDNO("Corrected Provision Loss"):
          BEGIN
            UpperServicePreclosureResultLine.VALIDATE("Corrected Provision Loss", CorrectedProvisionLoss);
            IF IUpdateRelatedField THEN
              UpperServicePreclosureResultLine.VALIDATE("Corrected Preclosure Result", CorrectedPreclosureResult);
          END;
        FIELDNO("Cumulative Progress %"):
          BEGIN
            UpperServicePreclosureResultLine.VALIDATE("Calculated Preclosure Result", CalculatedPreclosureResult);
            UpperServicePreclosureResultLine.VALIDATE("Calculated Preclosure Revenue", CalculatedPreclosureRevenue);
            UpperServicePreclosureResultLine.VALIDATE("Calculated Preclosure Cost", CalculatedPreclosureCost);
            UpperServicePreclosureResultLine.VALIDATE("Calculated Revenue Accrual", CalculatedRevenueAccrual);
            UpperServicePreclosureResultLine.VALIDATE("Calculated Cost Accrual", CalculatedCostAccrual);
            UpperServicePreclosureResultLine.VALIDATE("Calculated Provision Loss", CalculatedProvisionLoss);

            UpperServicePreclosureResultLine.VALIDATE("Corrected Preclosure Result", CorrectedPreclosureResult);
            UpperServicePreclosureResultLine.VALIDATE("Corrected Revenue Accrual", CorrectedRevenueAccrual);
            UpperServicePreclosureResultLine.VALIDATE("Corrected Cost Accrual", CorrectedCostAccrual);
            UpperServicePreclosureResultLine.VALIDATE("Corrected Preclosure Revenue", CorrectedPreclosureRevenue);
            UpperServicePreclosureResultLine.VALIDATE("Corrected Preclosure Cost", CorrectedPreclosureCost);
            UpperServicePreclosureResultLine.VALIDATE("Corrected Provision Loss", CorrectedProvisionLoss);
          END;
      END;

      UpperServicePreclosureResultLine.MODIFY;

      IF UpperLevelLineType > "Line Type"::Period THEN
        UpdateUpperLevelAmounts(UpperLevelLineType, IFieldNo, IUpdateRelatedField);
    END;

    PROCEDURE TestLineTypeOnPosting@1100529660();
    VAR
      ServiceContract@1100529660 : Record 11012812;
    BEGIN
      IF "Service Contract No." = '' THEN
        TESTFIELD("Line Type", "Line Type"::Period)
      ELSE BEGIN
        ServiceContract.GET("Service Contract No.");
        IF ServiceContract."Result Calc. on Total Contract" OR (ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Maintenance Scheme") THEN
          TESTFIELD("Line Type", "Line Type"::Period)
        ELSE
          TESTFIELD("Line Type", "Line Type"::"Service Category");
      END;
    END;

    LOCAL PROCEDURE UpdatePostedOnPeriodLine@1100529661(UpdateFieldNo@1100529661 : Integer);
    VAR
      ServicePreclosureResultLine@1100529660 : Record 11072313;
    BEGIN
      IF "Line Type" <> "Line Type"::"Service Category" THEN
        EXIT;
      ServicePreclosureResultLine.SETRANGE("Posting Date", "Posting Date");
      ServicePreclosureResultLine.SETRANGE("Seq. No.", "Seq. No.");
      ServicePreclosureResultLine.SETFILTER("Line No.", '<>%1', "Line No.");
      ServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Contract No." = '' THEN
        ServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
      ServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
      ServicePreclosureResultLine.SETRANGE("Line Type", "Line Type");
      CASE UpdateFieldNo OF
        FIELDNO(Posted):
          ServicePreclosureResultLine.SETFILTER(Posted, '<>%1', Posted);
        FIELDNO("Correction Posted"):
          ServicePreclosureResultLine.SETFILTER("Correction Posted", '<>%1', "Correction Posted");
        ELSE
          EXIT;
      END;
      IF NOT ServicePreclosureResultLine.ISEMPTY THEN
        EXIT;

      ServicePreclosureResultLine.SETRANGE("Line Type", "Line Type"::Period);
      ServicePreclosureResultLine.SETRANGE("Line No.");
      IF NOT ServicePreclosureResultLine.FINDLAST THEN
        EXIT;
      CASE UpdateFieldNo OF
        FIELDNO(Posted):
          BEGIN
            ServicePreclosureResultLine.Posted := Posted;
            ServicePreclosureResultLine."Posted by" := "Posted by";
            ServicePreclosureResultLine."Posted on" := "Posted on";
            IF Posted THEN BEGIN
              ServicePreclosureResultLine."Actual Preclosure Result" := ServicePreclosureResultLine."Corrected Preclosure Result";
              ServicePreclosureResultLine."Actual Preclosure Revenue" := ServicePreclosureResultLine."Corrected Preclosure Revenue";
              ServicePreclosureResultLine."Actual Preclosure Cost" := ServicePreclosureResultLine."Corrected Preclosure Cost";
              ServicePreclosureResultLine."Actual Revenue Accrual" := ServicePreclosureResultLine."Corrected Revenue Accrual";
              ServicePreclosureResultLine."Actual Cost Accrual" := ServicePreclosureResultLine."Corrected Cost Accrual";
              ServicePreclosureResultLine."Actual Provision Loss" := ServicePreclosureResultLine."Corrected Provision Loss";
            END;
            ServicePreclosureResultLine.MODIFY;
          END;
        FIELDNO("Correction Posted"):
          BEGIN
            ServicePreclosureResultLine."Correction Posted" := "Correction Posted";
            ServicePreclosureResultLine."Correction Posted by" := "Correction Posted by";
            ServicePreclosureResultLine."Correction Posted on" := "Correction Posted on";
            ServicePreclosureResultLine.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcTotalResultCorrected@1100529683(PreclosureMethod@1100529670 : 'Net,Gross,GrossPL');
    BEGIN
      CASE PreclosureMethod OF
        PreclosureMethod::Net:
          "Total Result Corrected" := "Corrected Preclosure Result" + "Corrected Provision Loss";
        PreclosureMethod::Gross:
          "Total Result Corrected" := "Corrected Preclosure Revenue" - "Corrected Preclosure Cost" + "Corrected Provision Loss";
        PreclosureMethod::GrossPL:
          "Total Result Corrected" := "Revenue Amount" + "Corrected Revenue Accrual" - "Actual Cost" - "Corrected Cost Accrual" + "Corrected Provision Loss";
      END;
    END;

    PROCEDURE GetServiceControlPeriodDate@1100529600(PostingDate@1100529600 : Date) ServiceControlPeriodDate : Date;
    VAR
      ServiceContractCtrlPeriod@1100529601 : Record 11071746;
    BEGIN
      IF PostingDate = 0D THEN
        EXIT;
      ServiceControlPeriodDate := PostingDate;
      IF ServiceControlPeriodDate < "Starting Date" THEN
        ServiceControlPeriodDate := "Starting Date";
      IF ServiceControlPeriodDate > "Ending Date" THEN
        ServiceControlPeriodDate := "Ending Date";
      IF NOT "Summary Level" THEN
        EXIT;

      ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
      ServiceContractCtrlPeriod.SETFILTER("Starting Date", '<=%1', ServiceControlPeriodDate);
      ServiceContractCtrlPeriod.SETFILTER("Ending Date", '>=%1', ServiceControlPeriodDate);
      IF ServiceContractCtrlPeriod.ISEMPTY THEN BEGIN
        ServiceContractCtrlPeriod.SETRANGE("Starting Date");
        ServiceContractCtrlPeriod.SETRANGE("Ending Date");
        IF ServiceContractCtrlPeriod.FINDLAST THEN
          ServiceControlPeriodDate := ServiceContractCtrlPeriod."Starting Date";
      END;
    END;

    PROCEDURE GetPrevServicePreclosureResultLine@1100529601(VAR PrevServicePreclosureResultLine@1100529600 : Record 11072313);
    BEGIN
      PrevServicePreclosureResultLine.RESET;
      PrevServicePreclosureResultLine.SETFILTER("Posting Date", '<%1', "Posting Date");
      PrevServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Contract No." = '' THEN
        PrevServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
      PrevServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
      PrevServicePreclosureResultLine.SETRANGE("Line Type", "Line Type");
      IF "Line Type" >= "Line Type"::"Service Category" THEN
        PrevServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
      IF "Line Type" >= "Line Type"::"Source Type" THEN
        PrevServicePreclosureResultLine.SETRANGE("Source Type", "Source Type");
      IF "Line Type" = "Line Type"::"Service Order" THEN
        PrevServicePreclosureResultLine.SETRANGE("Service Order No.", "Service Order No.");
      PrevServicePreclosureResultLine.SETRANGE(Posted, TRUE);
      IF PrevServicePreclosureResultLine.ISEMPTY THEN BEGIN
        CLEAR(PrevServicePreclosureResultLine);
        EXIT;
      END;
      PrevServicePreclosureResultLine.FINDLAST;
    END;

    LOCAL PROCEDURE PrognosisFinancialResultPositive@1100529602() : Boolean;
    VAR
      UpperServicePreclosureResultLine@1100529601 : Record 11072313;
      UpperLevelLineType@1100529602 : Integer;
    BEGIN
      IF "Prognosis Financial Result" >= 0 THEN
        EXIT(TRUE);

      IF "Totaling Type" <> "Totaling Type"::All THEN
        EXIT("Totaling Type" = "Totaling Type"::Profit);

      GetUpperLevelLineType(UpperLevelLineType);
      IF "Line Type" <= UpperLevelLineType THEN
        EXIT(FALSE);

      UpperServicePreclosureResultLine.SETRANGE("Posting Date", "Posting Date");
      UpperServicePreclosureResultLine.SETRANGE("Seq. No.", "Seq. No.");
      UpperServicePreclosureResultLine.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Contract No." = '' THEN
        UpperServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
      UpperServicePreclosureResultLine.SETRANGE("Control Period Code", "Control Period Code");
      UpperServicePreclosureResultLine.SETRANGE("Line Type", UpperLevelLineType);
      IF UpperLevelLineType = "Line Type"::Period THEN
        UpperServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type"::All)
      ELSE
        UpperServicePreclosureResultLine.SETRANGE("Totaling Type", "Totaling Type");

      CASE "Line Type" OF
        "Line Type"::"Source Type":
          IF UpperLevelLineType = "Line Type"::"Service Category" THEN
            UpperServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
        "Line Type"::"Service Order":
          BEGIN
            UpperServicePreclosureResultLine.SETRANGE("Service Category", "Service Category");
            UpperServicePreclosureResultLine.SETRANGE("Source Type", "Source Type");
          END;
      END;
      IF UpperServicePreclosureResultLine.ISEMPTY THEN
        EXIT(FALSE);
      UpperServicePreclosureResultLine.FINDFIRST;
      EXIT(UpperServicePreclosureResultLine."Prognosis Financial Result" >= 0);
    END;

    LOCAL PROCEDURE GetUpperLevelLineType@1100529603(VAR UpperLevelLineType@1100529600 : Integer);
    VAR
      ServiceContract@1100529601 : Record 11012812;
    BEGIN
      UpperLevelLineType := "Line Type"::Period;
      IF "Service Contract No." <> '' THEN
        IF ServiceContract.GET("Service Contract No.") THEN
          IF NOT ServiceContract."Result Calc. on Total Contract" AND
             (ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"])
          THEN
            UpperLevelLineType := "Line Type"::"Service Category";
    END;

    BEGIN
    END.
  }
}

