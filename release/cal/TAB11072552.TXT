OBJECT Table 11072552 SC Control by Period Detail
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Updated at" := CURRENTDATETIME;
               DetermineValues(TRUE);
             END;

    OnModify=BEGIN
               DetermineValues(FALSE);
             END;

    CaptionML=ENU=Service Contract Control by Period by Cost Type;
  }
  FIELDS
  {
    { 10  ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              SVE=L”pnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 21  ;   ;Service Contract Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract.Description WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Service Contract Description;
                                                              SVE=Servicekontraktsbeskrivning];
                                                   Editable=No }
    { 30  ;   ;Control Period Code ;Code10        ;TableRelation=IF (Service Contract No.=FILTER(<>'')) "Service-Contract Ctrl. Period".Code WHERE (Service Contract No.=FIELD(Service Contract No.))
                                                                 ELSE IF (Service Contract No.=CONST('')) "Service Control Period".Code;
                                                   CaptionML=[ENU=Control Period Code;
                                                              SVE=Kontrollperiodskod];
                                                   Editable=No }
    { 40  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              SVE=Startdatum];
                                                   Editable=No }
    { 50  ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              SVE=Slutdatum];
                                                   Editable=No }
    { 60  ;   ;Service Category    ;Code10        ;CaptionML=[ENU=Service Category;
                                                              SVE=Servicekategori] }
    { 61  ;   ;Service Category Description;Text30;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Category".Description WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                            Code=FIELD(Service Category)));
                                                   CaptionML=ENU=Service Category Description;
                                                   Editable=No }
    { 70  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=[ENU=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                                    SVE=Samtal,Kontrakt,Direkt,Kalkyl,,,Žndring,Ers„ttning];
                                                   OptionString=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                   Editable=No }
    { 80  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=[ENU=Service Order No.;
                                                              SVE=Serviceordernr];
                                                   Editable=No }
    { 90  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=ENU=,Period,Service Category,Source Type,Service Order;
                                                   OptionString=,Period,Service Category,Source Type,Service Order }
    { 100 ;   ;Cost Type           ;Option        ;CaptionML=[ENU=Cost Type;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse,Int„kt];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue }
    { 110 ;   ;Cost Object         ;Code20        ;CaptionML=[ENU=Cost Object;
                                                              SVE=Kostnadsobjekt] }
    { 120 ;   ;Indentation         ;Integer       ;CaptionML=ENU=Ident Value;
                                                   Editable=No }
    { 130 ;   ;Budget Cost         ;Decimal       ;CaptionML=[ENU=Budget Cost;
                                                              SVE=Budgeterad kostnad];
                                                   Editable=No }
    { 140 ;   ;Budget Hours        ;Decimal       ;CaptionML=[ENU=Budget Hours;
                                                              SVE=Budget (timmar)];
                                                   Editable=No }
    { 150 ;   ;Open (Purchase)     ;Decimal       ;CaptionML=[ENU=Open (Purchase);
                                                              SVE=™ppna ink”p];
                                                   Editable=No }
    { 160 ;   ;Received/Not Invoiced;Decimal      ;CaptionML=[ENU=Received/Not Invoiced;
                                                              SVE=Mottaget/inte fakturerat];
                                                   Editable=No }
    { 170 ;   ;Open Amount (Hours) ;Decimal       ;CaptionML=[ENU=Open Amount (Hours);
                                                              SVE=™ppna belopp (timmar)];
                                                   Editable=No }
    { 180 ;   ;Open Hours          ;Decimal       ;CaptionML=[ENU=Open Hours;
                                                              SVE=™ppna timmar];
                                                   Editable=No }
    { 190 ;   ;Purchase            ;Decimal       ;CaptionML=[ENU=Purchase;
                                                              SVE=Ink”p] }
    { 200 ;   ;Actual Cost         ;Decimal       ;CaptionML=[ENU=Actual Cost;
                                                              SVE=Faktisk kostnad];
                                                   Editable=No }
    { 210 ;   ;Actual Hours        ;Decimal       ;CaptionML=[ENU=Actual Hours;
                                                              SVE=Verkliga timmar];
                                                   Editable=No }
    { 220 ;   ;Total Cost          ;Decimal       ;CaptionML=[ENU=Total Cost;
                                                              SVE=Totalkostnad];
                                                   Editable=No }
    { 230 ;   ;Total Hours         ;Decimal       ;CaptionML=[ENU=Total Hours;
                                                              SVE=Timmar totalt];
                                                   Editable=No }
    { 240 ;   ;Total Hours (Additional);Decimal   ;CaptionML=ENU=Total Hours (Additional);
                                                   Editable=No }
    { 250 ;   ;Allowed Cost        ;Decimal       ;CaptionML=[ENU=Allowed Cost;
                                                              SVE=Till†ten];
                                                   Editable=No }
    { 260 ;   ;Allowed Hours       ;Decimal       ;CaptionML=[ENU=Allowed Hours;
                                                              SVE=Till†tna timmar];
                                                   Editable=No }
    { 270 ;   ;Result              ;Decimal       ;CaptionML=[ENU=Result;
                                                              SVE=Resultat];
                                                   Editable=No }
    { 280 ;   ;Result Hours        ;Decimal       ;CaptionML=[ENU=Result Hours;
                                                              SVE=Resultattimmar];
                                                   Editable=No }
    { 290 ;   ;Total Budget Revenue;Decimal       ;CaptionML=ENU=Total Budget Revenue;
                                                   Editable=No }
    { 300 ;   ;Revenue Amount      ;Decimal       ;CaptionML=ENU=Revenue Amount;
                                                   Editable=No }
    { 310 ;   ;Revenue Amount (Additional);Decimal;CaptionML=ENU=Revenue Amount (Additional);
                                                   Editable=No }
    { 320 ;   ;Open Ovh. Surch. Soft (Purch.);Decimal;
                                                   CaptionML=[ENU=Open Ovh. Surch. Soft Commitments (Purchase);
                                                              SVE=™ppen overheadkostnad, l”pande †taganden (ink”p)];
                                                   Editable=No }
    { 330 ;   ;Open Ovh. Surch. Firm (Purch.);Decimal;
                                                   CaptionML=[ENU=Open Ovh. Surch. Firm Commitments (Purchase);
                                                              SVE=™ppen overheadkostnad, fasta †taganden (ink”p)];
                                                   Editable=No }
    { 340 ;   ;Open (Inventory)    ;Decimal       ;CaptionML=[ENU=Open (Inventory);
                                                              SVE=™ppna (lager)];
                                                   Editable=No }
    { 350 ;   ;Open Ovh. Surch. (Inventory);Decimal;
                                                   CaptionML=[ENU=Open Ovh. Surch. (Inventory);
                                                              SVE=™ppen overheadkostnad (lager)];
                                                   Editable=No }
    { 360 ;   ;Open Ovh. Surch. (Hours);Decimal   ;CaptionML=[ENU=Open Ovh. Surch. (Hours);
                                                              SVE=™ppen overheadkostnad (timmar)];
                                                   Editable=No }
    { 370 ;   ;Release Percentage  ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Release Percentage;
                                                   Editable=No }
    { 500 ;   ;Prognosis Total Cost;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Prognosis Total Cost;
                                                              SVE=Prognos totala kostnader];
                                                   Editable=No }
    { 510 ;   ;Deviation from Budget (Amount);Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Deviation from Budget (Amount);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 520 ;   ;Deviation from Budget (Hours);Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Deviation from Budget (Hours);
                                                   Editable=No }
    { 530 ;   ;Lower Level Progn. Total Cost;Decimal;
                                                   CaptionML=ENU=Lower Level Prognosis Total Cost;
                                                   Editable=No }
    { 540 ;   ;Calc. Prognosis Total Cost;Decimal ;CaptionML=[ENU=Calculated Prognosis Total Cost;
                                                              SVE=Ber„knad prognos f”r totalkostnader];
                                                   Editable=No }
    { 550 ;   ;Budget Costs Incl. Deviation;Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Budget Costs Including Deviation;
                                                   Editable=No }
    { 560 ;   ;Budget Hours Incl. Deviation;Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Budget Hours Including Deviation;
                                                   Editable=No }
    { 570 ;   ;Last Updated at     ;DateTime      ;CaptionML=ENU=Last Updated at;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.,Cost Type,Cost Object         ;Clustered=Yes }
    {    ;Service Contract No.                     }
    {    ;Cost Type,Cost Object,Service Contract No.,Control Period Code,Service Category,Source Type,Line Type }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      SCControlbyPeriodDetail@1100529900 : Record 11072552;
      GLSetup@1100529600 : Record 98;
      HasGotGLSetup@1100529601 : Boolean;

    LOCAL PROCEDURE DetermineIndentation@1100528606();
    BEGIN
      Indentation := 0;
      IF "Cost Object" <> '' THEN
        Indentation := 1;
    END;

    LOCAL PROCEDURE DetermineValues@1100528603(FromOnInsert@1100529600 : Boolean);
    BEGIN
      IF FromOnInsert THEN
        DetermineIndentation;
      RoundAmounts;
      IF "Line Type" = "Line Type"::"Service Order" THEN
        CalcTotalsAndResult;
      CalculateBudgetIncludingDeviation;
    END;

    PROCEDURE SetMultiLevelFilter@1100529903(VAR SCControlbyPeriodDetail@1100529905 : Record 11072552);
    BEGIN
      SETRANGE("Service Contract No.", SCControlbyPeriodDetail."Service Contract No.");
      SETRANGE("Starting Date", SCControlbyPeriodDetail."Starting Date");
      SETRANGE("Ending Date", SCControlbyPeriodDetail."Ending Date");
      SETRANGE("Cost Type", SCControlbyPeriodDetail."Cost Type");
      IF SCControlbyPeriodDetail."Cost Object" <> '' THEN
        SETRANGE("Cost Object", SCControlbyPeriodDetail."Cost Object");
      IF SCControlbyPeriodDetail."Line Type" <> "Line Type"::Period THEN BEGIN
        SETRANGE("Service Category",SCControlbyPeriodDetail."Service Category");
        IF SCControlbyPeriodDetail."Line Type" <> "Line Type"::"Service Category" THEN BEGIN
          SETRANGE("Source Type", SCControlbyPeriodDetail."Source Type");
          IF SCControlbyPeriodDetail."Line Type" <> "Line Type"::"Source Type" THEN
            SETRANGE("Service Order No.", SCControlbyPeriodDetail."Service Order No.");
        END;
      END;
    END;

    PROCEDURE GetPrognosisData@1100529600(SCControlbyPeriod@1100529600 : Record 11072311;VAR SCControlbyPeriodDetail@1100529602 : Record 11072552);
    VAR
      ServicePrognosisByCostType@1100529601 : Record 11072553;
    BEGIN
      IF (SCControlbyPeriod."Prognosis Date" = 0D) OR (SCControlbyPeriod."Line Type" = SCControlbyPeriod."Line Type"::"Service Order") THEN
        EXIT;
      IF SCControlbyPeriodDetail."Cost Type" = SCControlbyPeriodDetail."Cost Type"::Revenue THEN
        EXIT;
      ServicePrognosisByCostType.SETRANGE("Prognosis Date", SCControlbyPeriod."Prognosis Date");
      ServicePrognosisByCostType.SETRANGE("Service Category", SCControlbyPeriod."Service Category");
      ServicePrognosisByCostType.SETRANGE("Service Contract No.", SCControlbyPeriod."Service Contract No.");
      ServicePrognosisByCostType.SETRANGE("Line Type", SCControlbyPeriod."Line Type");
      ServicePrognosisByCostType.SETRANGE("Source Type", SCControlbyPeriod."Source Type");
      ServicePrognosisByCostType.SETRANGE("Control Period Code", SCControlbyPeriod."Control Period Code");
      ServicePrognosisByCostType.SETRANGE("Cost Type", SCControlbyPeriodDetail."Cost Type");
      ServicePrognosisByCostType.SETRANGE("Cost Object", SCControlbyPeriodDetail."Cost Object");
      IF ServicePrognosisByCostType.ISEMPTY THEN
        EXIT;
      ServicePrognosisByCostType.FINDLAST;

      SCControlbyPeriodDetail."Prognosis Total Cost" := ServicePrognosisByCostType."Prognosis Total Cost";
      SCControlbyPeriodDetail."Deviation from Budget (Hours)" := ServicePrognosisByCostType."Deviation from Budget (Hours)";
      SCControlbyPeriodDetail."Deviation from Budget (Amount)" := ServicePrognosisByCostType."Deviation from Budget (Amount)";
      SCControlbyPeriodDetail."Lower Level Progn. Total Cost" := ServicePrognosisByCostType."Lower Level Progn. Total Cost";
      SCControlbyPeriodDetail."Calc. Prognosis Total Cost" := ServicePrognosisByCostType."Calc. Prognosis Total Cost";
    END;

    LOCAL PROCEDURE CalculateBudgetIncludingDeviation@1100529602();
    BEGIN
      "Budget Hours Incl. Deviation" := "Budget Hours" + "Deviation from Budget (Hours)";
      "Budget Costs Incl. Deviation" := "Budget Cost" + "Deviation from Budget (Amount)";
    END;

    LOCAL PROCEDURE RoundAmounts@1100529603();
    BEGIN
      GetGLSetup;

      "Budget Cost" := ROUND("Budget Cost", GLSetup."Amount Rounding Precision");
      "Budget Hours" := ROUND("Budget Hours", GLSetup."Amount Rounding Precision");
      "Revenue Amount" := ROUND("Revenue Amount", GLSetup."Amount Rounding Precision");
      "Total Budget Revenue" := ROUND("Total Budget Revenue", GLSetup."Amount Rounding Precision");
      "Allowed Cost" := ROUND("Allowed Cost", GLSetup."Amount Rounding Precision");
      "Allowed Hours" := ROUND("Allowed Hours", GLSetup."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE GetGLSetup@1100529606();
    BEGIN
      IF HasGotGLSetup THEN
        EXIT;
      GLSetup.GET;
      HasGotGLSetup := TRUE;
    END;

    LOCAL PROCEDURE CalcTotalsAndResult@1100529604();
    BEGIN
      IF "Cost Type" = "Cost Type"::Revenue THEN
        EXIT;
      "Total Cost" := "Actual Cost" + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)" + "Received/Not Invoiced" +
                      "Open Ovh. Surch. Firm (Purch.)" + "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
                      "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)";
      Result := "Allowed Cost" - "Total Cost";
      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        "Total Hours" := "Actual Hours" + "Open Hours";
        "Result Hours" := "Allowed Hours" - "Total Hours";
      END;
    END;

    PROCEDURE InitValuesFromSCControlByPeriod@1100529605(SCControlByPeriod@1100529601 : Record 11072311);
    BEGIN
      INIT;
      "Entry No." := SCControlByPeriod."Entry No.";
      "Service Contract No." := SCControlByPeriod."Service Contract No.";
      "Control Period Code" := SCControlByPeriod."Control Period Code";
      "Starting Date" := SCControlByPeriod."Starting Date";
      "Ending Date" := SCControlByPeriod."Ending Date";
      "Service Category" := SCControlByPeriod."Service Category";
      "Source Type" := SCControlByPeriod."Source Type";
      "Service Order No." := SCControlByPeriod."Service Order No.";
      "Line Type" := SCControlByPeriod."Line Type";
    END;

    BEGIN
    END.
  }
}

