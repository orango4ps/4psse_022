OBJECT Table 11012825 Service Order Cost Plus Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11012015=r,
                TableData 11012819=r;
    OnInsert=VAR
               CostPlusRec@1100525000 : Record 11012825;
               LastLino@1100525001 : Integer;
             BEGIN
               "Creation Date" := TODAY;
               "Last Date Modified" := 0D;
               IF "Posting Date" = 0D THEN
                 "Posting Date" := WORKDATE;
               "Entry No. Service Ledger" := 0;
               Invoiced := FALSE;
               "Source Document" := '';
               "Source Line" := 0;
               InitCreatedByFields();

               //mg.sn, 16-12-10: M19900, also workaround for auto-splitkey in F11012837 within F11125118
               IF ("Line No." = 0) OR CostPlusRec.GET("Service Order No.", "Line No.") THEN BEGIN
                 CostPlusRec.RESET;
                 CostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
                 IF CostPlusRec.FINDLAST THEN
                   LastLino := CostPlusRec."Line No."
                 ELSE
                   LastLino := 0;
                 "Line No." := LastLino + 10000;
               END;
               //mg.en, 16-12-10: M19900

               DetermineChargeable;
               GetServOrder(TRUE);
               VALIDATE("Cost Component");
               ServOrderRec.CheckStatus(1);
               IF "Object No." = '' THEN
                 DetermineObjectNo(TRUE);

               IF "Bill-to Customer No." = ServOrderRec."Bill-to Customer No." THEN
                 "Collective List No." := ServOrderRec."Collective List No.";
               ReopenCollectiveList;
               MarkCollectiveListForRecalc;
             END;

    OnModify=VAR
               PBInstallmentOverview@1100528600 : Record 11072317;
             BEGIN
               TESTFIELD(Invoiced,FALSE);
               IF "Installment Overview No." <> '' THEN BEGIN
                 PBInstallmentOverview.GET("Installment Overview No.");
                 IF PBInstallmentOverview.Status <> PBInstallmentOverview.Status::Open THEN
                   PBInstallmentOverview.FIELDERROR(Status);
               END;
               CheckInstallmentScheme(1);
               "Last Date Modified" := TODAY;
               GetServOrder(FALSE);
               ServOrderRec.CheckStatus(1);
               ReopenCollectiveList;
               MarkCollectiveListForRecalc;
             END;

    OnDelete=VAR
               PBInstallmentOverview@1100528600 : Record 11072317;
             BEGIN
               GetServOrder(FALSE);
               IF Invoiced AND NOT (ServOrderRec.Status IN [ServOrderRec.Status::Finished, ServOrderRec.Status::Cancelled]) AND GUIALLOWED THEN
                 IF NOT CONFIRM(Text013) THEN
                   ERROR('');
               IF ("Installment Overview No." <> '') AND NOT (ServOrderRec.Status IN [ServOrderRec.Status::Finished, ServOrderRec.Status::Cancelled]) AND GUIALLOWED THEN BEGIN
                 PBInstallmentOverview.GET("Installment Overview No.");
                 IF PBInstallmentOverview.Status <> PBInstallmentOverview.Status::Open THEN
                   PBInstallmentOverview.FIELDERROR(Status);
               END;
               CheckInstallmentScheme(2);
               CheckSourceDocument;
               CheckRemovalContribution;
               DeleteRelatedRecipeLines;  //DP01183
               MarkCollectiveListForRecalc;
               ResetSUPProductionLine;
               CheckExtraCostLine(2);
             END;

    OnRename=BEGIN
               TESTFIELD(Invoiced,FALSE);
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Service Order Cost Plus Entry;
               NOR=Serviceordre, selvkosttransaksjon;
               SVE=Redovisad sj„lvkostnad f”r serviceorder];
    LookupPageID=Page11126293;
    DrillDownPageID=Page11126293;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   OnValidate=BEGIN
                                                                IF "Service Order No." <> '' THEN BEGIN //mg, 31-05-11
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  VALIDATE("Customer No.", ServOrderRec."Customer No.");
                                                                  VALIDATE("Bill-to Customer No.", ServOrderRec."Bill-to Customer No.");
                                                                  VALIDATE("Alternative Bill-to Address", ServOrderRec."Alternative Bill-to Address");
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Base Service Order No." := ServOrderRec."Base Service Order No.";
                                                                END;
                                                                //GetBasicPrice; //Not here, Copy Paste will result in new basic price
                                                              END;

                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr;
                                                              SVE=Serviceordernr] }
    { 20  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                //GetBasicPrice; //Not here, Copy Paste will result in new basic price
                                                              END;

                                                   CaptionML=[ENU=Customer No.;
                                                              NOR=Kundenr;
                                                              SVE=Kundnr];
                                                   Editable=No }
    { 30  ;   ;Bill-to Customer No.;Code20        ;FieldClass=Normal;
                                                   TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1100529400 : Record 18;
                                                              BEGIN
                                                                IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN BEGIN
                                                                  IF "Bill-to Customer No." <> "Customer No." THEN
                                                                    IF Customer.GET("Bill-to Customer No.") THEN
                                                                      Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Order Cost Plus Entry", FIELDNO("Bill-to Customer No."));
                                                                  TESTFIELD("Collective List No.", '');
                                                                  VALIDATE("Alternative Bill-to Address", '');
                                                                  DetermineAlternativeBilltoAddress;
                                                                END;

                                                                "Currency Code" := DetermineCurrencyCode;
                                                                CheckVATServOrder;
                                                                IF "Installment No." = '' THEN BEGIN
                                                                  IF "Basic Price Found at" <> Text104 THEN BEGIN
                                                                    IF CheckItemLine THEN BEGIN
                                                                      FindSalesPrice;
                                                                    END ELSE BEGIN
                                                                      SetValidateHourRateCode(TRUE);
                                                                      GetBasicPrice;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              NOR=Faktureringskundenr;
                                                              SVE=Faktureringskundnr] }
    { 35  ;   ;Bill-to Name        ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=[ENU=Bill-to Name;
                                                              NOR=Faktureringsnavn;
                                                              SVE=Faktureringsnamn];
                                                   Editable=No }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 50  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Installment Scheme=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(<>Revenue),
                                                                                                                                  Global Dimension No.=CONST(2))
                                                                                                                                  ELSE IF (Installment Scheme=FILTER(<>'')) "Dimension Value".Code WHERE (Cost Type=FILTER(Revenue),
                                                                                                                                                                                                          Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Cost Type");

                                                                SkipGetCostObjectDesc := TRUE;  //*31430.n
                                                                IF TransferCostObjectData() THEN BEGIN
                                                                  SkipGetCostObjectDesc := FALSE;  //*31430.n
                                                                  GetDescription;
                                                                  "Unit of Measure" := DimValRec."Unit of Measure";
                                                                  VALIDATE("Cost Component", DimValRec."Cost Component");

                                                                  IF ("Cost Object" <> '') AND
                                                                     ("Cost Type" = "Cost Type"::Labor) AND
                                                                     (DimValRec."Wage Component" <> '') AND
                                                                     ("Wage Component" <> DimValRec."Wage Component") THEN
                                                                    VALIDATE("Wage Component", DimValRec."Wage Component");
                                                                END;

                                                                IF "Cost Type" <> "Cost Type"::Labor THEN BEGIN
                                                                  "Hour Rate Code" := '';
                                                                  "Employee No." := '';
                                                                  "Wage Component" := '';
                                                                  "From Date" := 0D;
                                                                  "To Date" := 0D;
                                                                END;
                                                                IF NOT CheckItemLine() THEN  //C028519: skip reset cost object if item filled (price already determined at change item)
                                                                  GetBasicPrice;
                                                                CheckAdditionalCostService;
                                                                "VAT Prod. Posting Group" := UpdateVatProdPostingGrp;  //RFC 547

                                                                //mg.sn, 10-05-11: M27128
                                                                IF "Cost Object" <> xRec."Cost Object" THEN
                                                                  IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                    IF "Installment Scheme" = '' THEN
                                                                      GetDiscountPerc();
                                                                //mg.en, 10-05-11: M27128
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 55  ;   ;Cost Type           ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value"."Cost Type" WHERE (Code=FIELD(Cost Object),
                                                                                                           Global Dimension No.=CONST(2)));
                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kosttype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                                    NOR=Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse,Inntekt;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse,Int„kt];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 60  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 65  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 70  ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component".Code WHERE (Component Type=FILTER(Hours|Expenses));
                                                   OnValidate=BEGIN
                                                                GetBasicPrice;

                                                                IF ("Wage Component" <> xRec."Wage Component") THEN
                                                                  GetDescription;
                                                              END;

                                                   CaptionML=[ENU=Wage Component;
                                                              NOR=L›nnsart;
                                                              SVE=L”neart] }
    { 75  ;   ;Description Wage Component;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component".Description WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=[ENU=Description Wage Component;
                                                              NOR=L›nnsartsbeskrivelse;
                                                              SVE=L”neartsbeskrivning];
                                                   Editable=No }
    { 80  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF CheckItemLine THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  IF NOT ServContractRec.GET("Service Contract No.") THEN ServContractRec.INIT;
                                                                  IF UPPERCASE(ValidateCu.GetBaseUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)")) =
                                                                    "Unit of Measure" THEN
                                                                    FindSalesPrice;
                                                                END;

                                                                GetDiscountPerc;
                                                                VALIDATE("Discount % (ServOrder)");
                                                                UpdateAttachedLine;  //C024476
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 85  ;   ;Dimensional Factor  ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Discount % (ServOrder)");
                                                              END;

                                                   CaptionML=ENU=Dimensional Factor;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 90  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Cost Type");
                                                                //IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                //db, 24-08-04: conversion required at import service entries if calc.method based on gross price
                                                                  IF ("Cost Type" = "Cost Type"::Material) THEN
                                                                    IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                      CheckItemUnitConversion(Rec, xRec);
                                                                IF "Unit of Measure" <> xRec."Unit of Measure" THEN
                                                                  TESTFIELD("Unit Price Code", '');
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet] }
    { 95  ;   ;Hour Rate Code      ;Code10        ;TableRelation="Hour Rate".Code WHERE (Project Filter=FILTER(''),
                                                                                         Principal Filter=FIELD(Customer No.),
                                                                                         Service Contract Filter=FIELD(Service Contract No.));
                                                   OnValidate=BEGIN
                                                                IF ("Hour Rate Code" <> xRec."Hour Rate Code") OR
                                                                   ("Service Order No." <> xRec."Service Order No.") OR
                                                                   ("Bill-to Customer No." <> xRec."Bill-to Customer No.")
                                                                THEN BEGIN
                                                                  GetDescription;
                                                                  GetBasicPrice;
                                                                END;

                                                                GetCostPrice;
                                                              END;

                                                   CaptionML=[ENU=Hour Rate Code;
                                                              NOR=Timesatskode;
                                                              SVE=Timtaxakod] }
    { 98  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 99  ;   ;Currency Code Costs ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code Costs;
                                                              NOR=Valutakode, kostnader;
                                                              SVE=Valutakod, kostnader];
                                                   Editable=No }
    { 100 ;   ;Basic Price (LCY)   ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Basic Price (LCY)") THEN
                                                                  "Basic Price Found at" := Text009;

                                                                CalculateFCYFromLCY(FIELDNO("Basic Price (LCY)"));  //DP00887

                                                                IF NOT CheckItemLine THEN
                                                                  IF CurrFieldNo <> FIELDNO("Gross Price (LCY)") THEN
                                                                    IF ROUND("Gross Price (LCY)" * (100 - "Sales Discount % (Item)")/100 - "Basic Price (LCY)" ) <> 0 THEN //call C001248
                                                                      VALIDATE("Gross Price (LCY)", "Basic Price (LCY)"/((100 - "Sales Discount % (Item)")/100));

                                                                IF "Basic Price (LCY)" <> xRec."Basic Price (LCY)" THEN
                                                                  IF NOT PriceDisc THEN //ORNAGO.PR 200528
                                                                    VALIDATE("Surcharge %", GetSurcharge)
                                                                ELSE
                                                                  VALIDATE("Surcharge %");

                                                                GetDiscountPerc; //mg, 19-12-12: C003293
                                                                GetSalesDiscount;
                                                              END;

                                                   CaptionML=[ENU=Basic Price (LCY);
                                                              NOR=Grunnpris (NOK);
                                                              SVE=Grundpris (BVA)];
                                                   BlankZero=Yes;
                                                   Description=former field Unit Cost;
                                                   AutoFormatType=2 }
    { 102 ;   ;Basic Price         ;Decimal       ;OnValidate=BEGIN
                                                                //DP00887
                                                                IF CurrFieldNo = FIELDNO("Basic Price") THEN BEGIN
                                                                  CalculateLCYFromFCY(FIELDNO("Basic Price"),TRUE);
                                                                  "Basic Price Found at" := Text009;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Basic Price;
                                                              NOR=Grunnpris;
                                                              SVE=Grundpris];
                                                   BlankZero=Yes;
                                                   Description=former field Unit Cost;
                                                   AutoFormatType=2 }
    { 105 ;   ;Cost Price (LCY)    ;Decimal       ;OnValidate=BEGIN
                                                                GetPurchaseDiscount;
                                                                CalculateFCYFromLCY(FIELDNO("Cost Price (LCY)"));  //DP00887
                                                              END;

                                                   CaptionML=[ENU=Cost Price (LCY);
                                                              NOR=Selvkost (NOK);
                                                              SVE=Sj„lvkostnadspris (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 107 ;   ;Cost Price          ;Decimal       ;OnValidate=BEGIN
                                                                //DP00887
                                                                IF CurrFieldNo = FIELDNO("Cost Price") THEN
                                                                  CalculateLCYFromFCY(FIELDNO("Cost Price") ,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Cost Price;
                                                              NOR=Selvkost;
                                                              SVE=Sj„lvkostnadspris];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 110 ;   ;Surcharge %         ;Decimal       ;OnValidate=BEGIN
                                                                CheckSurcharge;
                                                                //DP00887.sn
                                                                "Sales Price (LCY)" := "Basic Price (LCY)" * (1 + "Surcharge %"/100);
                                                                "Sales Price (LCY)" := ROUND("Sales Price (LCY)", GetRoundingFactor(RoundOption::Price,FALSE));  //C012946
                                                                VALIDATE("Sales Price (LCY)");
                                                                VALIDATE("Surcharge Amount (LCY)");
                                                                AssignFCYafterValidateLCY(FIELDNO("Surcharge %"));  //C029223
                                                                //DP00887.en
                                                                //VALIDATE("Discount % (ServOrder)");
                                                                GetDiscountPerc; //mg, 19-12-12: C003293
                                                              END;

                                                   CaptionML=[ENU=Surcharge %;
                                                              NOR=Tilleggsgebyrsprosent;
                                                              SVE=Till„ggsavgiftsprocent];
                                                   BlankZero=Yes }
    { 115 ;   ;Surcharge Amount (LCY);Decimal     ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Surcharge Amount (LCY)") THEN BEGIN
                                                                  CheckSurcharge;
                                                                  CalculateFCYFromLCY(FIELDNO("Surcharge Amount (LCY)"));  //DP00887
                                                                  IF "Basic Price (LCY)" <> 0 THEN BEGIN
                                                                    "Sales Price (LCY)" := "Basic Price (LCY)" + "Surcharge Amount (LCY)";
                                                                    CalculateFCYFromLCY(FIELDNO("Sales Price (LCY)"));  //DP00887
                                                                    IF NOT PriceDisc THEN //ORNAGO.PR 200528
                                                                      "Surcharge %" := ("Sales Price (LCY)"/"Basic Price (LCY)" -1) * 100;
                                                                  END ELSE BEGIN
                                                                    "Surcharge %" := 0;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF CurrFieldNo <> FIELDNO("Surcharge Amount (FCY)") THEN BEGIN  //DP00887
                                                                    "Surcharge Amount (LCY)" := "Sales Price (LCY)" - "Basic Price (LCY)";
                                                                    CalculateFCYFromLCY(FIELDNO("Surcharge Amount (LCY)"));  //DP00887
                                                                  END;
                                                                END;
                                                                GetDiscountPerc; //C035018.n
                                                              END;

                                                   CaptionML=[ENU=Surcharge Amount (LCY);
                                                              NOR=Tilleggsgebyrsbel›p (NOK);
                                                              SVE=Till„ggsbelopp (BVA)];
                                                   BlankZero=Yes;
                                                   Description=DP00887 }
    { 116 ;   ;Surcharge Amount (FCY);Decimal     ;OnValidate=BEGIN
                                                                //DP00887
                                                                IF CurrFieldNo = FIELDNO("Surcharge Amount (FCY)") THEN BEGIN
                                                                  CheckSurcharge;
                                                                  IF "Basic Price" <> 0 THEN BEGIN
                                                                    "Sales Price" := "Basic Price" + "Surcharge Amount (FCY)";
                                                                    CalculateFCYFromLCY(FIELDNO("Sales Price"));
                                                                    IF NOT PriceDisc THEN //ORNAGO.PR 200528
                                                                      "Surcharge %" := ("Sales Price"/"Basic Price" -1) * 100;
                                                                  END ELSE BEGIN
                                                                    "Surcharge %" := 0;
                                                                END;
                                                                END ELSE BEGIN
                                                                  "Surcharge Amount (FCY)" := "Sales Price" - "Basic Price";
                                                                END;
                                                                IF CurrFieldNo = FIELDNO("Surcharge Amount (FCY)") THEN
                                                                  CalculateLCYFromFCY(FIELDNO("Surcharge Amount (FCY)"),TRUE);
                                                              END;

                                                   CaptionML=[ENU=Surcharge Amount;
                                                              NOR=Tilleggsgebyrsbel›p;
                                                              SVE=Till„ggsbelopp];
                                                   BlankZero=Yes;
                                                   Description=DP00887 }
    { 120 ;   ;Sales Price (LCY)   ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Sales Price (LCY)")) OR
                                                                   (CurrFieldNo = FIELDNO("Sales Price")) THEN BEGIN //C003981
                                                                  IF "Basic Price (LCY)" <> 0 THEN
                                                                    "Surcharge %" := ("Sales Price (LCY)"/"Basic Price (LCY)" -1) * 100
                                                                  ELSE
                                                                    "Surcharge %" := 0;
                                                                  VALIDATE("Surcharge Amount (LCY)");
                                                                END;
                                                                VALIDATE("Discount % (ServOrder)");
                                                                CalculateFCYFromLCY(FIELDNO("Sales Price (LCY)"));  //DP00887
                                                              END;

                                                   CaptionML=[ENU=Sales Price (LCY);
                                                              NOR=Salgspris (NOK);
                                                              SVE=F”rs„ljningspris (BVA)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 122 ;   ;Sales Price         ;Decimal       ;OnValidate=BEGIN
                                                                //DP00887
                                                                IF CurrFieldNo = FIELDNO("Sales Price") THEN
                                                                  CalculateLCYFromFCY(FIELDNO("Sales Price"),TRUE);
                                                              END;

                                                   CaptionML=[ENU=Sales Price;
                                                              NOR=Salgspris;
                                                              SVE=F”rs„ljningspris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 130 ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group".Code;
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              NOR=Moms produktbokf›ringsmal;
                                                              SVE=Moms produktbokf”ringsmall] }
    { 140 ;   ;Posting Date        ;Date          ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF "Installment Scheme" = '' THEN BEGIN
                                                                  GetBasicPrice;
                                                                  GetDiscountPerc;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum] }
    { 160 ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              NOR=Opprettet den;
                                                              SVE=Uppl„ggningsdatum];
                                                   Editable=No }
    { 170 ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              NOR=Oppdateringsdato;
                                                              SVE=Uppdateringsdatum];
                                                   Editable=No }
    { 180 ;   ;Entry No. Service Ledger;Integer   ;TableRelation="Service-Ledger Entry";
                                                   CaptionML=[ENU=Entry No. Service Ledger;
                                                              NOR=Transaksjonsnr, Servicereskontro;
                                                              SVE=Transaktionsnr, servicereskontra];
                                                   Editable=No }
    { 190 ;   ;Invoiced            ;Boolean       ;CaptionML=[ENU=Invoiced;
                                                              NOR=Fakturert;
                                                              SVE=Fakturerat];
                                                   Editable=No }
    { 200 ;   ;Chargeable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAttachedLine;  //C024476
                                                              END;

                                                   CaptionML=[ENU=Chargeable;
                                                              NOR=Belastbar;
                                                              SVE=Debiterbar] }
    { 210 ;   ;Invoiced Price (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                                       Cost Plus Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Invoiced Price (LCY);
                                                              NOR=Fakturert  pris (NOK);
                                                              SVE=Fakturerat pris (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 212 ;   ;Invoiced Price      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue" WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                                 Cost Plus Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Invoiced Price;
                                                              NOR=Fakturert pris;
                                                              SVE=Fakturerat pris];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 220 ;   ;Invoice in Process (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                      Service Invoice=CONST(Yes),
                                                                                                      Service Order No.=FIELD(Service Order No.),
                                                                                                      Cost Plus Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Invoice in Process (LCY);
                                                              NOR=P†g†ende fakturering (NOK);
                                                              SVE=P†g†ende fakturering (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 222 ;   ;Invoice in Process  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=CONST(Invoice),
                                                                                              Service Invoice=CONST(Yes),
                                                                                              Service Order No.=FIELD(Service Order No.),
                                                                                              Cost Plus Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Invoice in Process;
                                                              NOR=P†g†ende fakturering;
                                                              SVE=P†g†ende fakturering];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 230 ;   ;Credit Memo in Process (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Credit Memo),
                                                                                                       Service Invoice=CONST(Yes),
                                                                                                       Service Order No.=FIELD(Service Order No.),
                                                                                                       Cost Plus Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Credit Memo in Process (LCY);
                                                              NOR=Kreditnotaen behandles (NOK);
                                                              SVE=Kreditnotan behandlas (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 232 ;   ;Credit Memo in Process;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line".Amount WHERE (Document Type=CONST(Credit Memo),
                                                                                               Service Invoice=CONST(Yes),
                                                                                               Service Order No.=FIELD(Service Order No.),
                                                                                               Cost Plus Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Credit Memo in Process;
                                                              NOR=Kreditnotaen behandles;
                                                              SVE=Kreditnotan behandlas];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 240 ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                GetBasicPrice;
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=Anst„llningsnr] }
    { 260 ;   ;From Date           ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("To Date");
                                                              END;

                                                   CaptionML=[ENU=From Date;
                                                              NOR=Fra dato;
                                                              SVE=Fr†n datum] }
    { 261 ;   ;From Time           ;Time          ;CaptionML=[ENU=From Time;
                                                              NOR=Fra tid;
                                                              SVE=Fr†n tid] }
    { 270 ;   ;To Date             ;Date          ;OnValidate=BEGIN
                                                                IF ("To Date" <> 0D) AND ("To Date" < "From Date") THEN
                                                                  FIELDERROR("To Date",STRSUBSTNO(Text000,FIELDCAPTION("From Date")));
                                                              END;

                                                   CaptionML=[ENU=To Date;
                                                              NOR=Til dato;
                                                              SVE=Till datum] }
    { 271 ;   ;To Time             ;Time          ;CaptionML=[ENU=To Time;
                                                              NOR=Til Tid;
                                                              SVE=Till tid] }
    { 280 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 281 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 282 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 284 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 285 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Fabrikant;
                                                              SVE=Tillverkare] }
    { 290 ;   ;Discount % (ServOrder);Decimal     ;OnValidate=BEGIN
                                                                DetermineChargeable;
                                                                IF "Currency Code" <> '' THEN BEGIN  //C029223
                                                                  "Invoice Price" := Quantity * DimensionalFactor * "Sales Price" * (1 - "Discount % (ServOrder)"/100);
                                                                  "Invoice Price" := ROUND("Invoice Price", GetRoundingFactor(RoundOption::Amount,TRUE));
                                                                  CalculateLCYFromFCY(FIELDNO("Invoice Price"),FALSE);
                                                                END ELSE BEGIN
                                                                  "Invoice Price (LCY)" := Quantity * DimensionalFactor * "Sales Price (LCY)" * (1 - "Discount % (ServOrder)"/100);
                                                                  "Invoice Price (LCY)" := ROUND("Invoice Price (LCY)", GetRoundingFactor(RoundOption::Amount,FALSE));  //C012946
                                                                  CalculateFCYFromLCY(FIELDNO("Invoice Price (LCY)"));  //DP00887
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Discount % (Service Order);
                                                              NOR=Rabatt % (Serviceordre);
                                                              SVE=Rabattprocent (serviceorder)];
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 291 ;   ;Discount % (Warranty);Decimal      ;CaptionML=[ENU=Discount % (Warranty);
                                                              NOR=Rabatt % (Garanti);
                                                              SVE=Rabattprocent (Garanti)];
                                                   MaxValue=100;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 292 ;   ;Discount % (ServContr);Decimal     ;CaptionML=[ENU=Discount % (Service Contract);
                                                              NOR=Rabatt % (Servicekontrakt);
                                                              SVE=Rabattprocent (servicekontrakt)];
                                                   MaxValue=100;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 295 ;   ;Warranty Code       ;Code10        ;TableRelation="Service Warranty";
                                                   CaptionML=[ENU=Warranty Code;
                                                              NOR=Garantikode;
                                                              SVE=Garantikod];
                                                   Editable=No }
    { 300 ;   ;Invoice Price (LCY) ;Decimal       ;OnValidate=BEGIN
                                                                CalculateFCYFromLCY(FIELDNO("Invoice Price (LCY)"));  //DP00887
                                                                CalculateDiscountServOrder;  //C029223
                                                              END;

                                                   CaptionML=[ENU=Invoice Price (LCY);
                                                              NOR=Fakturapris (NOK);
                                                              SVE=Fakturapris (BVA)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 302 ;   ;Invoice Price       ;Decimal       ;OnValidate=BEGIN
                                                                //DP00887
                                                                IF CurrFieldNo = FIELDNO("Invoice Price") THEN
                                                                  CalculateLCYFromFCY(FIELDNO("Invoice Price"),TRUE);
                                                                CalculateDiscountServOrder;  //C029223
                                                              END;

                                                   CaptionML=[ENU=Invoice Price;
                                                              NOR=Fakturapris;
                                                              SVE=Fakturapris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 305 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr];
                                                   Editable=No }
    { 320 ;   ;Object No.          ;Code20        ;TableRelation="Standard Object".No.;
                                                   OnValidate=BEGIN
                                                                CheckObject;
                                                                IF "Object No." <> xRec."Object No." THEN
                                                                  IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                    IF "Installment Scheme" = '' THEN
                                                                      GetDiscountPerc();
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupObjectNo();
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Object No.;
                                                              NOR=Objektnr.;
                                                              SVE=Objektnr] }
    { 321 ;   ;Object Customer     ;Code20        ;CaptionML=[ENU=Object Customer;
                                                              NOR=Objektkunde;
                                                              SVE=Objektkund] }
    { 325 ;   ;Service Contract No.;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order"."Service Contract No." WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 330 ;   ;Text                ;Text250       ;OnValidate=BEGIN
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=[ENU=Text;
                                                              NOR=Tekst;
                                                              SVE=Ben„mning] }
    { 331 ;   ;Text Block          ;Boolean       ;CaptionML=[ENU=Text Block;
                                                              NOR=Tekstblokk;
                                                              SVE=Textblock];
                                                   Editable=No }
    { 340 ;   ;Gross Price (LCY)   ;Decimal       ;OnValidate=BEGIN
                                                                CalculateFCYFromLCY(FIELDNO("Gross Price (LCY)"));  //DP00887

                                                                VALIDATE("Purchase Discount % (Item)");
                                                                IF CurrFieldNo <> FIELDNO("Sales Discount % (Item)") THEN
                                                                  VALIDATE("Sales Discount % (Item)");

                                                                IF CurrFieldNo = FIELDNO("Gross Price (LCY)") THEN
                                                                  "Basic Price Found at" := Text009;

                                                                GetDiscountPerc; //mg, 19-12-12: C003293
                                                              END;

                                                   CaptionML=[ENU=Gross Price (LCY);
                                                              NOR=Bruttopris (NOK);
                                                              SVE=Bruttopris (BVA)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 342 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                //DP00887
                                                                IF CurrFieldNo = FIELDNO("Gross Price") THEN BEGIN
                                                                  CalculateLCYFromFCY(FIELDNO("Gross Price"),TRUE);
                                                                  "Basic Price Found at" := Text009;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Gross Price;
                                                              NOR=Bruttopris;
                                                              SVE=Bruttopris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 344 ;   ;Purchase Discount % (Item);Decimal ;OnValidate=BEGIN
                                                                IF CheckItemLine OR ("Entry No. Service Ledger" = 0) THEN BEGIN //Call 18326
                                                                  VALIDATE("Cost Price (LCY)", "Gross Price (LCY)" * (100 - "Purchase Discount % (Item)")/100);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Purchase Discount % (Item);
                                                              NOR=Innkj›psrabatt % (Artikkel);
                                                              SVE=Ink”psrabattprocent (artikel)];
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 345 ;   ;Sales Discount % (Item);Decimal    ;OnValidate=BEGIN
                                                                IF "Sales Discount % (Item)" <> xRec."Sales Discount % (Item)" THEN
                                                                  VALIDATE("Surcharge %", GetSurcharge);

                                                                VALIDATE("Basic Price (LCY)", "Gross Price (LCY)" * (100 - "Sales Discount % (Item)")/100);
                                                                AssignFCYafterValidateLCY(FIELDNO("Sales Discount % (Item)"));  //C029223

                                                                //>> 160621 ITERO.AC RFC082 Added Check for Sales discount or Existing text = ''
                                                                IF CheckItemLine THEN BEGIN
                                                                  IF ("Sales Discount % (Item)" <> 0) OR ("Basic Price Found at" = '') THEN
                                                                    "Basic Price Found at" := Text010;
                                                                END ELSE BEGIN
                                                                  "Basic Price Found at" := Text009;
                                                                END;
                                                                //<< 160621 ITERO.AC RFC082
                                                              END;

                                                   CaptionML=[ENU=Sales Discount % (Item);
                                                              NOR=Salgsrabatt % (Artikkel);
                                                              SVE=F”rs„ljningsrabattprocent (artikel)];
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 349 ;   ;Sales Condition Present;Boolean    ;CaptionML=[ENU=Sales Condition Present;
                                                              SVE=F”rs„ljningsvillkor Present];
                                                   Description=C015604;
                                                   Editable=No }
    { 350 ;   ;Installment Scheme  ;Code10        ;TableRelation="Installment Scheme".Code WHERE (Type=CONST(Service Order));
                                                   OnValidate=BEGIN
                                                                IF "Installment Scheme" <> '' THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  TESTFIELD("Installment Scheme", ServOrderRec."Installment Scheme");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Installment Scheme;
                                                              NOR=Betalingsplan;
                                                              SVE=Betalplan] }
    { 355 ;   ;Installment No.     ;Code10        ;TableRelation=Installment."Installment No." WHERE (Scheme=FIELD(Installment Scheme));
                                                   CaptionML=[ENU=Installment No.;
                                                              NOR=Betalingsplansnummer;
                                                              SVE=Betalplansnummer];
                                                   SQL Data Type=Integer;
                                                   NotBlank=Yes;
                                                   Numeric=Yes }
    { 360 ;   ;Source Document     ;Code20        ;CaptionML=[ENU=Source Document;
                                                              NOR=Kildedokument;
                                                              SVE=K„lldokument];
                                                   Editable=No }
    { 361 ;   ;Source Line         ;Integer       ;CaptionML=[ENU=Source Line;
                                                              NOR=Kilderad;
                                                              SVE=Ursprungsrad];
                                                   Editable=No }
    { 370 ;   ;Additional Cost     ;Boolean       ;OnValidate=BEGIN
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=[ENU=Additional Cost;
                                                              NOR=Tilleggskoster;
                                                              SVE=Till„ggskostnader] }
    { 371 ;   ;Add. Cost Changed Manually;Boolean ;CaptionML=ENU=Add. Cost Changed Manually }
    { 375 ;   ;Extra Cost          ;Boolean       ;CaptionML=[ENU=Extra Cost;
                                                              NOR=Ekstra kostnad;
                                                              SVE=Extra kostnad] }
    { 380 ;   ;Cost Component      ;Code20        ;TableRelation=IF (Charge to Plant Location=CONST(No)) "Cost Component".Code
                                                                 ELSE IF (Charge to Plant Location=CONST(Yes)) "Cost Component".Code WHERE (Additional Cost (Service)=CONST(No));
                                                   OnValidate=VAR
                                                                lvCostCompRec@1100485002 : Record 11012012;
                                                              BEGIN
                                                                ValidateCostComponent;
                                                                IF CurrFieldNo <> FIELDNO("Cost Component") THEN BEGIN
                                                                  lvCostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", '', "Cost Type",
                                                                    "Additional Cost");
                                                                END;
                                                                IF ("Cost Component" <> xRec."Cost Component") THEN
                                                                  GetDiscountPerc;
                                                              END;

                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadsdel];
                                                   NotBlank=Yes }
    { 390 ;   ;Sales Surcharge Overtime %;Decimal ;CaptionML=[ENU=Sales Surcharge Overtime %;
                                                              NOR=Salgstilleggsgebyr for overtid %;
                                                              SVE=F”rs„ljningstill„ggsavgiftsprocent f”r ”vertid];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 400 ;   ;Removal Contribution;Boolean       ;CaptionML=[ENU=Removal Contribution;
                                                              NOR=Fjerningsbidrag;
                                                              SVE=Borttagningsbidrag] }
    { 410 ;   ;Basic Price Found at;Text250       ;CaptionML=[ENU=Basic Price Found at;
                                                              NOR=Grunnpris funnet ved;
                                                              SVE=Grundpris funnet vid];
                                                   Editable=No }
    { 430 ;   ;Attached to Line No. (RC);Integer  ;TableRelation="Service Order Cost Plus Entry"."Line No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   CaptionML=[ENU=Attached to Line No. (Removal Contribution);
                                                              NOR=Vedlagt Radnr (Fjerningsbidrag);
                                                              SVE=Bifogad till radnr (borttagningsbidrag)];
                                                   Editable=No }
    { 440 ;   ;Base Service Order No.;Code20      ;TableRelation="Service Order".No.;
                                                   CaptionML=[ENU=Base Service Order No.;
                                                              NOR=Baseserviceordrenr;
                                                              SVE=Basserviceordernr];
                                                   Editable=No }
    { 450 ;   ;Checked             ;Boolean       ;CaptionML=[ENU=Checked;
                                                              NOR=Kontrollert;
                                                              SVE=Kontrollerad] }
    { 460 ;   ;Charge to Plant Location;Boolean   ;OnValidate=BEGIN
                                                                IF "Charge to Plant Location" THEN BEGIN
                                                                  TESTFIELD("Service Order No.");
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.TESTFIELD("Plant Location");
                                                                  IF "Additional Cost" THEN
                                                                    VALIDATE("Additional Cost", FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Charge to Plant Location }
    { 470 ;   ;Execution Date      ;Date          ;CaptionML=[ENU=Execution Date;
                                                              NOR=Gjennomf›ringsdato;
                                                              SVE=Utf”randedatum] }
    { 700 ;   ;Serial No.          ;Code40        ;CaptionML=[ENU=Serial No.;
                                                              NOR=Serienr;
                                                              SVE=Serienr];
                                                   Description=DP00121 }
    { 710 ;   ;Lot No.             ;Code20        ;CaptionML=[ENU=Lot No.;
                                                              NOR=Partinr;
                                                              SVE=Partinr];
                                                   Description=DP00121 }
    { 750 ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   OnValidate=BEGIN
                                                                IF ("Recipe Group" = '') AND (Recipe <> '') THEN
                                                                  Recipe := '';
                                                              END;

                                                   CaptionML=[ENU=Recipe Group;
                                                              NOR=Maltype;
                                                              SVE=Malltyp];
                                                   Description=DP01183 }
    { 755 ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=VAR
                                                                RecipeRec@1210190000 : Record 11020581;
                                                              BEGIN
                                                                IF (Recipe <> xRec.Recipe) AND (Recipe <> '') THEN BEGIN
                                                                  RecipeRec.GET("Recipe Group", Recipe);
                                                                  RecipeRec.TESTFIELD(Blocked, FALSE);
                                                                  Description := COPYSTR(RecipeRec.Description, 1, MAXSTRLEN(Description));
                                                                  "Description 2" := COPYSTR(RecipeRec.Description, MAXSTRLEN(Description) + 1);
                                                                  "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Recipe;
                                                              NOR=Mal;
                                                              SVE=Mall];
                                                   Description=DP01183 }
    { 760 ;   ;Recipe Header       ;Boolean       ;CaptionML=[ENU=Recipe Header;
                                                              NOR=Maltittel;
                                                              SVE=Mallrubrik];
                                                   Description=DP01183 }
    { 770 ;   ;Attached to Recipe Line;Integer    ;TableRelation="Service Order Cost Plus Entry"."Line No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   CaptionML=[ENU=Attached to Recipe Line;
                                                              NOR=Tilknyttet Malrad;
                                                              SVE=Bifogad till mallrad];
                                                   Description=DP01183;
                                                   Editable=No }
    { 775 ;   ;Assembly Project No.;Code20        ;TableRelation=Job WHERE (Assembly Project=CONST(Yes));
                                                   CaptionML=ENU=Assembly Project No.;
                                                   Description=DP01183 }
    { 780 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=[ENU=Purchase Route Reference;
                                                              NOR=Referanse for Innkj›psrute;
                                                              SVE=Referens f”r ink”psf”ljd];
                                                   Description=DP01183;
                                                   Editable=No }
    { 790 ;   ;Price Agreement     ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Price Agreement;
                                                              SVE=Prisavtal];
                                                   Description=C051034 }
    { 1200;   ;Glazing Service Call No.;Code20    ;TableRelation="Glazing Service Call";
                                                   CaptionML=[ENU=Glazing Service Call No.;
                                                              NOR=Servicesamtalenr. for Innglassing;
                                                              SVE=Servicesamtalsnr f”r inglasning];
                                                   Description=jhoek.050511;
                                                   Editable=No }
    { 1210;   ;Glazing Service Call Line No.;Integer;
                                                   TableRelation="Glazing Service Call Line"."Line No." WHERE (Glazing Service Call No.=FIELD(Glazing Service Call No.));
                                                   CaptionML=[ENU=Glazing Service Call Line No.;
                                                              NOR=Servicesamtalsradnr. for Innglassing;
                                                              SVE=Servicesamtalsradnr f”r inglasning];
                                                   Description=jhoek.050511;
                                                   Editable=No }
    { 1220;   ;Collective List No. ;Code20        ;TableRelation="Service Collective-List";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TESTFIELD(Invoiced, FALSE);
                                                                CheckCollectiveList;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupCollectiveListNo();
                                                            END;

                                                   CaptionML=[ENU=Collective List No.;
                                                              NOR=Samlingsfaktura nr.;
                                                              SVE=Samlingsfaktura nr.] }
    { 1230;   ;FSA-Created Entry   ;Boolean       ;CaptionML=[ENU=FSA-Created Entry;
                                                              NOR=FSA-opprettet transaksjon;
                                                              SVE=FSA-skapad transaktion];
                                                   Editable=No }
    { 1310;   ;Price Book Code     ;Code20        ;OnValidate=BEGIN
                                                                //>> 200114 ORANGO.SB
                                                                CALCFIELDS("Payment Code (SUP)");
                                                                //<<
                                                              END;

                                                   CaptionML=[ENU=Price Book Code;
                                                              SVE=Enhetspriskod];
                                                   Editable=No }
    { 1320;   ;Unit Price Index Date;Date         ;CaptionML=[ENU=Unit Price Index Date;
                                                              NOR=Enhetsprisindeks, dato;
                                                              SVE=Indexdatum f”r enhetspris];
                                                   Editable=No }
    { 1330;   ;Unit Price Extention;Boolean       ;CaptionML=[ENU=Unit Price Extention;
                                                              NOR=Enhetspris, ETA;
                                                              SVE=Enhetspris, ŽTA];
                                                   Editable=No }
    { 1340;   ;Production Recording Date;Date     ;CaptionML=[ENU=Production Recording Date;
                                                              NOR=Produksjonsregistreringsdato;
                                                              SVE=Produktionsregistreringsdatum];
                                                   Editable=No }
    { 1350;   ;Unit Price Room     ;Code20        ;TableRelation="SUP Room".Code;
                                                   OnLookup=VAR
                                                              ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              ServiceLocationType@1100528601 : Code[20];
                                                            BEGIN
                                                              ServiceLocationType := ServiceUnitPriceManagement.GetServiceLocationTypeFromServiceOrder("Service Order No.");
                                                              ServiceUnitPriceManagement.LookupRoom("Customer No.", ServiceLocationType, "Unit Price Room");
                                                            END;

                                                   CaptionML=[ENU=Unit Price Room;
                                                              NOR=Enhetspris, Rom;
                                                              SVE=Enhetspris rum];
                                                   Editable=No }
    { 1360;   ;Unit Price Code     ;Code20        ;OnValidate=VAR
                                                                ServiceUnitPriceLine@1100409000 : Record 11071769;
                                                                ServiceOrder@1100528600 : Record 11012823;
                                                                ServiceOrderExtension@1100409001 : Record 11071727;
                                                              BEGIN
                                                                IF "Unit Price Code" <> '' THEN BEGIN
                                                                  IF NOT ServiceOrder.GET("Service Order No.") THEN
                                                                    ServiceOrder.INIT;
                                                                  ServiceOrder.TESTFIELD("Settlement Method", ServiceOrder."Settlement Method"::"Cost Plus");
                                                                  ServiceOrderExtension.GetServOrderExtension("Service Order No.");
                                                                  ServiceUnitPriceLine.GET(ServiceOrderExtension."Price Book Code", ServiceOrderExtension."Price Book Index Date", "Unit Price Code");
                                                                  Quantity := ServiceUnitPriceLine.Quantity;
                                                                  VALIDATE("Basic Price (LCY)", ServiceUnitPriceLine."Unit Price");
                                                                  "Cost Object" := ServiceUnitPriceLine."Cost Object";
                                                                  "Unit Price Code" := ServiceUnitPriceLine.Code;
                                                                  "Unit Price Index Date" := ServiceUnitPriceLine."Index Date";
                                                                  "Unit of Measure" := ServiceUnitPriceLine."Unit of Measure";
                                                                  Description := ServiceUnitPriceLine.Description;
                                                                  "Description 2" := ServiceUnitPriceLine."Description 2";
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPriceLine@1100409002 : Record 11071769;
                                                              ServiceOrderExtension@1100409003 : Record 11071727;
                                                            BEGIN
                                                              IF ServiceOrderExtension.GET("Service Order No.") THEN BEGIN
                                                                ServiceUnitPriceLine.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
                                                                ServiceUnitPriceLine.SETRANGE("Index Date", ServiceOrderExtension."Price Book Index Date");
                                                                IF PAGE.RUNMODAL(0, ServiceUnitPriceLine) = ACTION::LookupOK THEN
                                                                  VALIDATE("Unit Price Code", ServiceUnitPriceLine.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Unit Price Code;
                                                              NOR=Enhetspris, radkode;
                                                              SVE=Enhetspriskod] }
    { 1370;   ;Created by Employee No.;Code20     ;TableRelation=IF (Created by Employee Company=FILTER('')) Employee;
                                                   CaptionML=[ENU=Created by Employee No.;
                                                              NOR=Opprettet av ansatt nr.;
                                                              SVE=Skapat av anst„lld nr];
                                                   Description=(Mobile);
                                                   Editable=No }
    { 1371;   ;Created by Employee Company;Text30 ;TableRelation=Company;
                                                   CaptionML=[ENU=Created by Employee Company;
                                                              SVE=Skapat av anst„lld f”retag];
                                                   Description=Mobile;
                                                   Editable=No }
    { 1372;   ;Created by Work Order No.;Code20   ;TableRelation="Work Order";
                                                   CaptionML=ENU=Created by Work Order No.;
                                                   Description=Mobile;
                                                   Editable=No }
    { 1380;   ;Production Seq. No. ;Integer       ;TableRelation="SUP Production"."Seq. No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Production Seq. No.;
                                                   Editable=No }
    { 1390;   ;Production Line No. ;Integer       ;OnValidate=VAR
                                                                SUPProductionLine@1100409000 : Record 11071774;
                                                              BEGIN
                                                                IF "Production Line No." <> 0 THEN BEGIN
                                                                  IF SUPProductionLine.GET("Service Order No.", "Production Seq. No.", "Production Line No.") THEN BEGIN
                                                                    "Price Book Code" := SUPProductionLine."Price Book Code";
                                                                    "Unit Price Index Date" := SUPProductionLine."Index Date";
                                                                    "Production Recording Date" := SUPProductionLine."Production Date";
                                                                    "Unit Price Room" := SUPProductionLine.Room;
                                                                    VALIDATE("Unit Price Code", SUPProductionLine."Unit Price Code");
                                                                    VALIDATE("Basic Price (LCY)", SUPProductionLine."Unit Price");
                                                                    Description := SUPProductionLine.Description;
                                                                    "Description 2" := SUPProductionLine."Description 2";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Production Line No.;
                                                   Editable=No }
    { 1400;   ;Discount Term Level ;Option        ;CaptionML=ENU=Discount Term Level;
                                                   OptionCaptionML=ENU=" ,Line,Base Service Order,Period,Object/Period";
                                                   OptionString=[ ,Line,Base Service Order,Period,Object/Period];
                                                   Editable=No }
    { 1410;   ;Service Package     ;Code10        ;TableRelation="Service Package";
                                                   CaptionML=[ENU=Service Package;
                                                              NOR=Servicepakke;
                                                              SVE=Servicepaket];
                                                   Editable=No }
    { 1420;   ;Discount Term Line No.;Integer     ;TableRelation="Service Contract Discount Term"."Line No." WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                                    Service Package=FIELD(Service Package));
                                                   CaptionML=ENU=Discount Term Line No.;
                                                   Editable=No }
    { 1430;   ;Compression Id      ;Code32        ;CaptionML=ENU=Compression Id;
                                                   Description=code on which lines are compressed;
                                                   Editable=No }
    { 1500;   ;Department Filter   ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              NOR=Avdelingsfilter;
                                                              SVE=Global dimension 1 filter];
                                                   CaptionClass='1,3,1' }
    { 1510;   ;Hour Line Template Code;Code20     ;TableRelation="Hour Line Template".Code;
                                                   OnValidate=VAR
                                                                HourLineTemplateMgt@1100529400 : Codeunit 11012025;
                                                                HourLineTemplate@1100525001 : Record 11229799;
                                                                CheckType@1100525000 : 'Project,Indirect,Service,Plant,Unmanned Plant';
                                                              BEGIN
                                                                IF NOT HourLineTemplate.ValidateCodeforSource(COMPANYNAME,FALSE,"Hour Line Template Code",CheckType::Service,FALSE) THEN
                                                                  FIELDERROR("Hour Line Template Code");
                                                                IF ("Hour Line Template Code") <> '' THEN
                                                                  HourLineTemplateMgt.FillServCostPlusLineFromHourLineTemplate("Hour Line Template Code", "Posting Date", Rec);
                                                              END;

                                                   CaptionML=[ENU=Hour Line Template Code;
                                                              SVE=Tidrapportmallkod];
                                                   Editable=No }
    { 1520;   ;Alternative Bill-to Address;Code10 ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Alternative Bill-to Address" <> xRec."Alternative Bill-to Address" THEN
                                                                  TESTFIELD("Collective List No.", '');
                                                                //CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=[ENU=Alternative Bill-to Address;
                                                              NOR=Alternativ Faktureringsadresse;
                                                              SVE=Alternativ faktureringsadress] }
    { 1530;   ;Installment Overview No.;Code20    ;TableRelation="PB Installment Overview";
                                                   OnValidate=BEGIN
                                                                IF "Installment Overview No." = '' THEN
                                                                  VALIDATE("Installment Overview Line No.", 0);
                                                              END;

                                                   CaptionML=ENU=Installment Overview No.;
                                                   Editable=No }
    { 1540;   ;Installment Overview Line No.;Integer;
                                                   CaptionML=ENU=Installment Overview Line No.;
                                                   Editable=No }
    { 1550;   ;Surcharge Set Code (PriceBook);Code10;
                                                   TableRelation="Price Book Surcharge Set".Code WHERE (Price Book Code=FIELD(Price Book Code),
                                                                                                        Price Book Index Date=FIELD(Unit Price Index Date));
                                                   OnValidate=BEGIN
                                                                IF "Surcharge Set Code (PriceBook)" <> xRec."Surcharge Set Code (PriceBook)" THEN
                                                                  TESTFIELD("Unit Price Code", '');
                                                              END;

                                                   CaptionML=ENU=Surcharge Set Code (Price Book) }
    { 1560;   ;Resource No.        ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   OnValidate=VAR
                                                                ResourceWOP@1100527000 : Record 11229278;
                                                              BEGIN
                                                                IF ResourceWOP.GET("Resource No.") THEN
                                                                  VALIDATE("Trade Association",ResourceWOP."Trade Association");
                                                              END;

                                                   CaptionML=[ENU=Resource No.;
                                                              NOR=Ressursnr.;
                                                              SVE=Resursnr] }
    { 1570;   ;Trade Association   ;Code10        ;TableRelation="Trade Association";
                                                   OnValidate=VAR
                                                                TradeAssociation@1100527000 : Record 11012015;
                                                              BEGIN
                                                                IF TradeAssociation.GET("Trade Association") THEN BEGIN
                                                                  GetHourRateCode;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Trade Association;
                                                              NOR=Bransjeorganisasjon;
                                                              SVE=Branschorganisation] }
    { 1580;   ;Supplying Company   ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service-Ledger Entry"."Supplying Company" WHERE (Entry No.=FIELD(Entry No. Service Ledger)));
                                                   CaptionML=[ENU=Supplying Company;
                                                              SVE=Levererande f”retag];
                                                   Editable=No }
    { 1590;   ;Resource Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Resource No.)));
                                                   CaptionML=[ENU=Resource Name;
                                                              SVE=Resursnamn];
                                                   Editable=No }
    { 1600;   ;Sub-part of (Unit Price Code);Code20;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Sub-part of (Unit Price Code) }
    { 1610;   ;Dsp Assignment Id   ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=DSP Assignment ID;
                                                   Editable=No }
    { 1620;   ;Service Order Object No.;Code20    ;TableRelation="Service Order Object"."Object No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Service Order Object No.;
                                                   Editable=No }
    { 1621;   ;Service Order Object Descr;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Description WHERE (No.=FIELD(Service Order Object No.)));
                                                   CaptionML=ENU=Service Order Object Description;
                                                   Editable=No }
    { 11128270;;Price History Found;Boolean       ;CaptionML=[ENU=Price History (Customer) Found;
                                                              SVE=Prishistorik (kund) finns];
                                                   Description=ITERO }
    { 11128271;;Price History Vendor No.;Code20   ;CaptionML=[ENU=Price History (Customer) Vendor No.;
                                                              SVE=Prishistorik (kund) kataloglev.];
                                                   Description=ITERO }
    { 11128272;;Price History PriceList;Code20    ;CaptionML=[ENU=Customer price list;
                                                              NOR=Kundeprisliste;
                                                              SVE=Kundprislista];
                                                   Description=ITERO }
    { 11128273;;Total Cost Price (LCY);Decimal    ;CaptionML=[ENU=Total Cost Price (LCY);
                                                              SVE=Total sj„lvkostnad (BVA)];
                                                   Description=ITERO }
    { 11128274;;Cost Price Adjustment;Decimal     ;CaptionML=[ENU=Adjustment % (Cost Price);
                                                              NOR=Justering % (selvkost);
                                                              SVE=Justering % (sj„lvkostnad)];
                                                   Description=ITERO }
    { 11128275;;Usage from FSA     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Debrief Cost Plus Entry (Mob.)".Quantity WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                                    Trade Item=FIELD(Trade Item)));
                                                   CaptionML=[ENU=Usage from FSA;
                                                              SVE=F”rbrukning fr†n FSA];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11128276;;Work Order No.     ;Code20        ;TableRelation="Work Order".No. WHERE (Source Type=CONST(ServiceOrder),
                                                                                         Source No.=FIELD(Service Order No.));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Work Order No.;
                                                              SVE=Arbetsorder nr];
                                                   Description=ORANGO }
    { 11128277;;Payment Code (SUP) ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Unit Price"."Payment Code" WHERE (Price Book Code=FIELD(Price Book Code),
                                                                                                                 Index Date=FIELD(Unit Price Index Date),
                                                                                                                 Code=FIELD(Unit Price Code)));
                                                   CaptionML=[ENU=Payment Code (SUP);
                                                              SVE=Ers„ttningsform (Enhetspris)];
                                                   Description=SRFC-1010;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Order No.,Line No.              ;MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Service Order No.,Invoiced,Chargeable,Additional Cost;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Base Service Order No.,Service Order No.,Installment Scheme,Posting Date;
                                                   MaintainSIFTIndex=No }
    {    ;Service Order No.,Cost Object,Posting Date;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Entry No. Service Ledger                ;MaintainSIFTIndex=No }
    {    ;Base Service Order No.,Service Order No.,Cost Component,Invoiced,Chargeable;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Base Service Order No.                  ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Collective List No.,Base Service Order No.,Service Order No.,Line No.,Invoiced,Chargeable;
                                                   MaintainSIFTIndex=No }
    {    ;Service Order No.,Object No.,Line No.   ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Collective List No.,Base Service Order No.,Service Order No.,Created by Work Order No.,Cost Object;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Purchase Route Reference                 }
    {    ;Service Order No.,Checked,Customer No.   }
    {    ;Installment Overview No.                 }
    {    ;Price Book Code,Unit Price Index Date,Installment Overview No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012009 : TextConst 'ENU=may not before %1;NOR=kan ikke v‘re f›r %1;SVE=f†r inte vara f”re %1';
      Text001@11012010 : TextConst 'ENU=Copy Cost Object Data ?;NOR=Kopiere Kostnadsobjektdata?;SVE=Kopiera kostnadsobjektdata?';
      ServOrderRec@1210190002 : Record 11012823;
      ServLocRec@1210190008 : Record 11012801;
      ServContractRec@1210190003 : Record 11012812;
      ServSetup@1100525003 : Record 11012800;
      GlSetupRec@1210190015 : Record 98;
      EmplRec@1210190021 : Record 5200;
      CustRec@1210190001 : Record 18;
      ItemRec@1210190014 : Record 27;
      DimValRec@1210190019 : Record 349;
      WageCompRec@1100485001 : Record 11012014;
      DimMgt@1210190004 : Codeunit 408;
      ValidateCu@11012007 : Codeunit 11012033;
      SalesPriceMgt@1100485002 : Codeunit 11012036;
      ItemTypeOpt@11012008 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text005@1210190018 : TextConst 'ENU=Total Installments  %1 differs from Order Amount %2.;NOR=Totale avdrag %1 avviker fra Ordrebel›p %2.';
      Text006@1210190020 : TextConst 'ENU=Hours;NOR="Timer ";SVE=Timmar';
      Text007@1100485000 : TextConst 'ENU=Already processed Installment Terms: Invoice Amount %1;NOR=Allerede prosesserte avdragsvilk†r: Fakturabel›p %1';
      Text009@1100485003 : TextConst 'ENU=Manually entered Price;NOR=Manuellt angitt pris;SVE=Manuellt angivet pris';
      Text010@1100485004 : TextConst 'ENU=Gross Price - Discount;NOR=Bruttopris Í rabatt;SVE=Bruttopris Í rabatt';
      BasicPriceCalcRunning@1100525000 : Boolean;
      ValidateHourRateCode@1100525001 : Boolean;
      CostObjectFixed@1210190007 : Boolean;
      SkipGetCostObjectDesc@1100409000 : Boolean;
      Text011@1100528600 : TextConst 'ENU=not found;NOR=ikke funnet;SVE=Ej hittad';
      SkipDetermineChargeable@1100525002 : Boolean;
      RoundOption@1100525004 : 'Price,Amount';
      OverruleServiceContractNo@1100528601 : Code[20];
      RecipeExpanded@1100529400 : Boolean;
      Text012@1100528602 : TextConst 'ENU=Filters on FlowFields across Companies not allowed';
      Text013@1100528603 : TextConst 'ENU=Line already Invoiced, are you sure to delete this line?';
      Text104@1100529401 : TextConst 'ENU=Manually entered Price;NOR=Manuellt angitt pris;SVE=Manuellt angivet pris';
      ConvertFCYtoLCY@1100525005 : ARRAY [10] OF Boolean;
      "-- ITERO --"@1100285000 : Integer;
      UseManualPriceList@1100285001 : Code[20];
      Text11128001@1101285000 : TextConst 'ENU=Cost Price + Surcharge Customer Price List;NOR=Selvkost + Tillegg kundeprisliste;SVE=Sj„lvkostnadspris + Till„gg kundprislista';
      Text11128002@1101285001 : TextConst 'ENU=Cost Price + Cost Price adjustment;NOR=Selvkost + Justering selvkost;SVE=Sj„lvkostnadspris + Justering sj„lvkostnad';
      Text11128003@1101285002 : TextConst 'ENU=Vendor Gross Price;NOR=Bruttopris leverand›r;SVE=Bruttopris leverant”r';
      Text11128004@1101285003 : TextConst 'ENU=Sales Price Warehouse Item;NOR=Salgspris lagerartikkel;SVE=F”rs„ljningspris lagerartikel';
      Text11128005@1101285004 : TextConst 'ENU=Unit Price Warehouse Item;NOR=Enhetspris lagerartikkel;SVE=A-pris lagerartikel';
      PriceDisc@1100285100 : Boolean;

    PROCEDURE GetServOrder@1210190012(lvInit@1210190000 : Boolean);
    VAR
      SaveFieldNo@1100525000 : Integer;
      Customer@1100528800 : Record 18;
    BEGIN
      ServOrderRec.GET("Service Order No.");
      "Customer No." := ServOrderRec."Customer No.";
      "Service Location No." := ServOrderRec."Service Location No.";

      IF ("Bill-to Customer No." = '') THEN
        "Bill-to Customer No." := ServOrderRec."Bill-to Customer No.";

      IF "Bill-to Customer No." = ServOrderRec."Bill-to Customer No." THEN
        "Currency Code" := ServOrderRec."Currency Code"
      ELSE
        IF Customer.GET("Bill-to Customer No.") THEN
          "Currency Code" := Customer."Currency Code";

      IF lvInit = TRUE THEN BEGIN
      //  "VAT Prod. Posting Group" := ServOrderRec."VAT Prod. Posting Group";  //RFC 547 old
        "VAT Prod. Posting Group" := UpdateVatProdPostingGrp;                   //RFC 547
        SaveFieldNo := CurrFieldNo; // C022905.n
        CurrFieldNo := FIELDNO("Service Order No.");
        xRec."Cost Object" := '';  //disable default option Cost Type
        CheckAdditionalCostService;
        CurrFieldNo := SaveFieldNo; // C022905.n
      END;
    END;

    PROCEDURE GetSurcharge@1100485017() lvPerc : Decimal;
    VAR
      CustSurchRec@1100485000 : Record 11020367;
      ServiceOrderExtension@1100528600 : Record 11071727;
      ProjSetup@1100525002 : Record 315;
      LocPlantNumber@1100529600 : Record 11012552;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      lvCustPriceList@1100525003 : Record 11128273;
    BEGIN
      lvPerc := 0;

      CALCFIELDS("Cost Type");
      IF NOT ServOrderRec.GET("Service Order No.") THEN
        ServOrderRec.INIT;

      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(LocPlantNumber) THEN BEGIN
        IF NOT LocPlantNumber.CheckExternalPostNoSurcharge(ServOrderRec."Plant Type", ServOrderRec."Plant Number", FALSE) THEN
          EXIT
      END;

      //>> 160621 ITERO.AC RFC082 (similar to ENH-007, 4PSSE, DL/DJ and LAHE 130117 in Project Cost Plus Entry)
      IF ("Cost Type" = "Cost Type"::Material) THEN BEGIN
        IF lvCustPriceList.GET(ServOrderRec."Price List Code") THEN
          IF lvCustPriceList."Apply Material Surcharge" THEN BEGIN
            IF NOT ServiceOrderExtension.GET("Service Order No.") THEN
              CLEAR(ServiceOrderExtension);
            EXIT(ServiceOrderExtension."Surcharge % Material");
          END;
      END;

      IF NOT ServiceOrderExtension.GET("Service Order No.") THEN
        CLEAR(ServiceOrderExtension);
      IF "Price History Found" THEN
        EXIT(0);
      IF "Trade Item" <> '' THEN
        IF NOT (ServiceOrderExtension."Item Price Cost Plus Entry" = ServiceOrderExtension."Item Price Cost Plus Entry"::CostPrice) THEN
          EXIT(0);

      //<< 160621 ITERO.AC RFC082

      //C005338.sn
      IF "Cost Type" = "Cost Type"::Material THEN BEGIN
        ProjSetup.GET;
        IF ProjSetup."Apply SurchMat PriceZero Only" THEN
          IF "Trade Item" + "Basic Item" + "Item No." <> '' THEN
            IF "Sales Condition Present" THEN  //C015604
              EXIT(0);
      END;
      //C005338.en

      IF ServOrderRec."Charge Vendor (Warranty)" THEN
        EXIT;

      IF ServOrderRec."Service Contract No." <> '' THEN BEGIN
        CustSurchRec.SETRANGE("Record Type", CustSurchRec."Record Type"::ServContr);
        CustSurchRec.SETRANGE(Code, ServOrderRec."Service Contract No.");
      END ELSE BEGIN
        CustSurchRec.SETRANGE("Record Type", CustSurchRec."Record Type"::Customer);
        CustSurchRec.SETRANGE("Customer No.", ServOrderRec."Bill-to Customer No.");
      END;
      CustSurchRec.SETRANGE("Cost Type", "Cost Type");
      CustSurchRec.SETFILTER(Price, '%1..', "Basic Price (LCY)");
      IF CustSurchRec.FINDFIRST THEN BEGIN
        lvPerc := CustSurchRec."Surcharge %";
      END ELSE BEGIN
        CustSurchRec.SETFILTER(Price, '..%1', "Basic Price (LCY)");
        IF CustSurchRec.FINDLAST THEN
          lvPerc := CustSurchRec."Surcharge %";
      END;

      IF lvPerc = 0 THEN BEGIN
        IF ServiceOrderExtension.GET("Service Order No.") THEN
          CASE "Cost Type" OF
            "Cost Type"::Labor:
              lvPerc := ServiceOrderExtension."Surcharge % Labor";
            "Cost Type"::Material:
              lvPerc := ServiceOrderExtension."Surcharge % Material";
            "Cost Type"::Subcontracting:
              lvPerc := ServiceOrderExtension."Surcharge % Subcontr.";
            "Cost Type"::Plant:
              lvPerc := ServiceOrderExtension."Surcharge % Plant";
             "Cost Type"::Sundry:
              lvPerc := ServiceOrderExtension."Surcharge % Sundry";
          END;
      END;

      EXIT(lvPerc);
    END;

    PROCEDURE CalcSurcharge@1100485012(lvServOrder@1100485001 : Code[20]);
    VAR
      CostPlusRec@1100485000 : Record 11012825;
    BEGIN
      CostPlusRec.SETRANGE("Service Order No.", lvServOrder);
      CostPlusRec.SETRANGE(Invoiced, FALSE);
      IF NOT CostPlusRec.ISEMPTY THEN BEGIN
        IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
            CostPlusRec.MODIFY;
          UNTIL CostPlusRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CalcDiscount@1100485015(lvServOrder@1100485001 : Code[20]);
    VAR
      CostPlusRec@1100485000 : Record 11012825;
    BEGIN
      CostPlusRec.SETRANGE("Service Order No.", lvServOrder);
      CostPlusRec.SETRANGE(Invoiced, FALSE);
      IF NOT CostPlusRec.ISEMPTY THEN BEGIN
        IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF SkipDetermineChargeable THEN
              CostPlusRec.SetSkipDetermineChargeable(SkipDetermineChargeable);
            CostPlusRec.GetDiscountPerc;
            CostPlusRec.MODIFY;
          UNTIL CostPlusRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetDiscountPerc@1210190000();
    BEGIN
      "Discount % (ServOrder)" := 0;
      "Discount % (Warranty)" := 0;
      "Discount % (ServContr)" := 0;
      "Warranty Code" := '';
      CALCFIELDS("Cost Type");

      IF ServOrderRec.GET("Service Order No.") THEN
        //>> 190412 ORANGO.SB Support #23893
        //IF (ServOrderRec."Order Amount (LCY)" <> 0) AND ("Entry No. Service Ledger" <> 0) THEN
        IF (ServOrderRec."Order Amount (LCY)" <> 0) AND ("Entry No. Service Ledger" <> 0) AND (ServOrderRec."Settlement Method"<>ServOrderRec."Settlement Method"::"Cost Plus") THEN
          "Discount % (ServOrder)" := 100;
        //<<
      GetWarrantyDiscount;
      GetContractDiscount;

      IF "Discount % (ServContr)" > "Discount % (ServOrder)" THEN
        "Discount % (ServOrder)" := "Discount % (ServContr)";
      IF "Discount % (Warranty)" > "Discount % (ServOrder)" THEN
        "Discount % (ServOrder)" := "Discount % (Warranty)";

      VALIDATE("Discount % (ServOrder)");
    END;

    PROCEDURE GetDescription@1210190006();
    VAR
      ServSetup@1100525000 : Record 11012800;
      ServLedgerEntryRec@1100525001 : Record 11012819;
      PostedHourHeader@1210190002 : Record 11012084;
      HourRateRec@1100409000 : Record 11012022;
      ContractHourRateRec@1100409001 : Record 11012815;
      PlantLabor@1210190000 : Boolean;
      SESetup@1100285300 : Record 11128004;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      IF "Extra Cost" THEN EXIT;

      ServSetup.GET;

      CALCFIELDS("Cost Type");
      //mg.sc, 20-09-11: M27549
      IF ("Cost Type" = "Cost Type"::Plant) AND ("Source Document" <> '') THEN BEGIN
        PostedHourHeader.SETCURRENTKEY("Document No.");
        PostedHourHeader.SETRANGE("Document No.", "Source Document");
        PlantLabor := NOT PostedHourHeader.ISEMPTY;
      END;

      IF ("Cost Type" = "Cost Type"::Labor) OR (("Cost Type" = "Cost Type"::Plant) AND PlantLabor) THEN BEGIN
      //mg.ec, 20-09-11: M27549
        CASE ServSetup."Description Cost Plus Entry" OF
          ServSetup."Description Cost Plus Entry"::Employee:
            IF ((CurrFieldNo = FIELDNO("Employee No.")) OR (CurrFieldNo = 0)) THEN
              IF EmplRec.GET("Employee No.") THEN
                Description := COPYSTR(Text006 + ' ' + EmplRec."Full Name", 1, MAXSTRLEN(Description));
          ServSetup."Description Cost Plus Entry"::RateCode:
            IF ((CurrFieldNo = FIELDNO("Hour Rate Code")) OR (CurrFieldNo = 0)) OR
              ("Hour Rate Code" <> xRec."Hour Rate Code")
            THEN BEGIN
              ContractHourRateRec.SETRANGE("Service Contract No.","Service Contract No.");
              ContractHourRateRec.SETRANGE("Hour Rate Code","Hour Rate Code");
              ContractHourRateRec.SETRANGE("Starting Date",0D,"Posting Date");
              IF ContractHourRateRec.FINDLAST THEN BEGIN
                Description := ContractHourRateRec.Description;
              END ELSE BEGIN
                HourRateRec.SETRANGE(Code,"Hour Rate Code");
                HourRateRec.SETRANGE("Starting Date",0D,"Posting Date");
                IF HourRateRec.FINDLAST THEN
                  Description := HourRateRec.Description;
              END;
            END;
          ServSetup."Description Cost Plus Entry"::CostObject:
            IF NOT ((CurrFieldNo = FIELDNO("Cost Object")) AND SkipGetCostObjectDesc) THEN BEGIN  //*31430.n
              IF ((CurrFieldNo = FIELDNO("Cost Object")) OR (CurrFieldNo = 0)) THEN BEGIN
                DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
                Description := DimValRec.Name;
              END;
            END;
          ServSetup."Description Cost Plus Entry"::WageComponent:
            IF ((CurrFieldNo = FIELDNO("Wage Component")) OR (CurrFieldNo = 0) OR
                ("Wage Component" <> xRec."Wage Component")) THEN
              IF WageCompRec.GET("Wage Component") THEN BEGIN
                Description := WageCompRec.Description;
                //>> 160620 ITERO.SB RAD-010 Mapping of description, wage component
                SESetup.SETRANGE(Code,WageCompRec.Code);
                SESetup.SETRANGE("Line type",SESetup."Line type"::Mapping);
                IF SESetup.FINDFIRST AND (SESetup."Value (txt)"<>'') THEN
                  Description := SESetup."Value (txt)";
                //<<
              END;
        END;
        IF Description <> xRec.Description THEN
          AddDateToDescription("Posting Date","Execution Date");
      END ELSE BEGIN
        IF NOT ((CurrFieldNo = FIELDNO("Cost Object")) AND SkipGetCostObjectDesc) THEN BEGIN  //*31430.n
          IF ("Source Document" = '') THEN BEGIN
            DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
            Description := DimValRec.Name;
          END ELSE BEGIN
            IF "Entry No. Service Ledger" <> 0 THEN BEGIN
              IF ServLedgerEntryRec.GET("Entry No. Service Ledger") THEN BEGIN
                IF ServLedgerEntryRec.Chargeable AND ServLedgerEntryRec.Expense THEN BEGIN
                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE,'');
                  Description := DimValRec.Name;
                END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetBasicPrice@1100485002();
    VAR
      BasicPrice@1100485000 : Decimal;
      BasicPriceFoundAt@1100525000 : Text[250];
    BEGIN
      IF BasicPriceCalcRunning THEN
        EXIT;

      BasicPriceCalcRunning := TRUE;
      IF "Trade Item" <> '' THEN
        ItemTypeOpt := ItemTypeOpt::"Trade Item"
      ELSE
        IF "Basic Item" <> '' THEN
          ItemTypeOpt := ItemTypeOpt::"Basic Item"
        ELSE
          ItemTypeOpt := ItemTypeOpt::Item;

      GetHourRateCode;

      CALCFIELDS("Service Contract No.");
      CASE TRUE OF
        (CheckItemLine):
          ValidateItem(ItemTypeOpt);
        ELSE BEGIN
          BasicPrice :=
            SalesPriceMgt.GetSalesPrice(
              1,'', "Service Order No.", "Service Contract No.", "Bill-to Customer No.", "Cost Object",
              "Wage Component", '', "Employee No.", "Hour Rate Code",
              '', '', '', '', '', "Posting Date",
              "Cost Price (LCY)", BasicPriceFoundAt);
          //200528 ORANGO.PR
          PriceDisc := FALSE;
          IF BasicPrice <> 0 THEN BEGIN
            "Surcharge %" :=
              SalesPriceMgt.GetSalesDisc(
                1,"Service Order No.", '', '', "Bill-to Customer No.", "Cost Object",
                "Wage Component", '', "Employee No.", "Hour Rate Code",
                '', '', '', '', '', "Posting Date",
                "Cost Price (LCY)", BasicPriceFoundAt) * -1;
            IF "Surcharge %" <> 0 THEN BEGIN
              PriceDisc := TRUE;
            END;
          END;
          //200528 ORANGO.PR

          IF BasicPriceFoundAt = '' THEN BEGIN
            IF (CurrFieldNo = 0) OR
               ((xRec."Basic Price Found at" <> Text009) AND
                (xRec."Basic Price Found at" <> '')) THEN BEGIN
              "Basic Price Found at" := '';
              VALIDATE("Basic Price (LCY)", 0);
            END;
          END ELSE BEGIN
            CalcOvertimeSurcharge(BasicPrice);
            VALIDATE("Basic Price (LCY)", BasicPrice);
            "Basic Price Found at" := BasicPriceFoundAt;
          END;
        END;
      END;

      "Price Agreement" := (BasicPriceFoundAt <> '');  //C051034
      BasicPriceCalcRunning := FALSE;
    END;

    PROCEDURE CalcOvertimeSurcharge@1100485004(VAR ioSalesPrice@1100485000 : Decimal);
    VAR
      lvOverTimeSurcharge@1100485001 : Record 11020256;
      lvWageCompRec@1100485002 : Record 11012014;
    BEGIN
      //Overtime Surcharge by Wage Component on General Level or on Customer Level
      "Sales Surcharge Overtime %" := 0;
      IF ("Wage Component" = '') OR (ioSalesPrice = 0) THEN
        EXIT;

      IF lvWageCompRec.GET("Wage Component") THEN  BEGIN
        IF lvWageCompRec."Sales Surcharge %" <> 0 THEN BEGIN
          ioSalesPrice := ROUND(ioSalesPrice * lvWageCompRec."Sales Surcharge %" / 100);
        END;
      END;

      lvOverTimeSurcharge.SETRANGE("Customer No.", "Bill-to Customer No.");
      lvOverTimeSurcharge.SETRANGE("Wage Component No.", "Wage Component");
      lvOverTimeSurcharge.SETFILTER("Start Date", '..%1', "Posting Date");
      IF lvOverTimeSurcharge.FINDLAST THEN BEGIN
        IF lvOverTimeSurcharge."Surcharge %" > 0 THEN BEGIN
          ioSalesPrice := ROUND(ioSalesPrice * lvOverTimeSurcharge."Surcharge %" / 100);
          "Sales Surcharge Overtime %" := lvOverTimeSurcharge."Surcharge %";
        END;
      END ELSE BEGIN
        IF lvWageCompRec.GET("Wage Component") THEN
          IF lvWageCompRec."Sales Surcharge Overtime %" > 0 THEN BEGIN
            ioSalesPrice := ROUND(ioSalesPrice * lvWageCompRec."Sales Surcharge Overtime %" / 100);
            "Sales Surcharge Overtime %" := lvWageCompRec."Sales Surcharge Overtime %";
          END;
      END;
    END;

    PROCEDURE GetRoundingFactor@1210190005(RoundOption@1100525000 : 'Price,Amount';UseCurrencyFormat@1100525002 : Boolean) : Decimal;
    VAR
      Currency@1100525001 : Record 4;
    BEGIN
      //C029223.sn
      IF UseCurrencyFormat THEN
        IF "Currency Code" = '' THEN
          UseCurrencyFormat := FALSE;
      IF UseCurrencyFormat THEN BEGIN
        Currency.GET("Currency Code");
        IF RoundOption = RoundOption::Price THEN BEGIN
          Currency.TESTFIELD("Unit-Amount Rounding Precision");
          EXIT(Currency."Unit-Amount Rounding Precision");
        END ELSE BEGIN
          Currency.TESTFIELD("Amount Rounding Precision");
          EXIT(Currency."Amount Rounding Precision");
        END;
      END;
      //C029223.en
      //
      GlSetupRec.GET;
      IF RoundOption = RoundOption::Price THEN BEGIN  //C012946
        GlSetupRec.TESTFIELD("Unit-Amount Rounding Precision");
        EXIT(GlSetupRec."Unit-Amount Rounding Precision");
      END ELSE BEGIN
        GlSetupRec.TESTFIELD("Amount Rounding Precision");
        EXIT(GlSetupRec."Amount Rounding Precision");
      END;
    END;

    PROCEDURE TransferCostObjectData@2() : Boolean;
    BEGIN
      IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
        EXIT(FALSE);
      IF ("Cost Object" <> xRec."Cost Object") THEN BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');
        IF xRec."Cost Object" <> '' THEN
          IF NOT CONFIRM(Text001,FALSE) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      lvPriceHistoryFound@1100525000 : Boolean;
      lvDoSalesPriceCalulation@1100525001 : Boolean;
      lvSurchargeIfMissingArticles@1100525002 : Decimal;
      lvPriceFactor@1100525003 : Decimal;
      lvGrossPrice@1100525004 : Decimal;
      lvRefDate@1100525005 : Date;
      lvItemSalesPrice@1100525006 : Record 7002;
    BEGIN
      ServOrderRec.GET("Service Order No.");
      IF NOT ServContractRec.GET("Service Contract No.") THEN
        CLEAR(ServContractRec);  //db, 07-04-17: fill RefPrio, may be DiscRef1/2 filled on ServOrder (instead of ServContractRec.INIT);

      FindCostPrice(LTypeArtOpt);
      lvPriceFactor := 1;          // 160621 ITERO.AC RFC082 Just to make code similar to Project Cost Plus Entry
      "Basic Price (LCY)" := "Cost Price (LCY)";
      CalculateFCYFromLCY(FIELDNO("Basic Price (LCY)"));  //DP00887
      //>> 160621 ITERO.AC RFC082 Check for Cost Price Behaviour, Price factors and Price List Surcharges
      IF lvPriceFactor <> 1 THEN
        "Basic Price Found at" := Text11128002
      ELSE
        "Basic Price Found at" := FIELDCAPTION("Cost Price (LCY)");

      lvDoSalesPriceCalulation := TRUE;
      lvPriceHistoryFound := FALSE;
      lvGrossPrice := 0;

      lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);

      IF (LTypeArtOpt = LTypeArtOpt::"Trade Item") OR (LTypeArtOpt = LTypeArtOpt::Item) THEN BEGIN  // 160816 ITERO.AC Added price calculation for NAV Items
        lvPriceHistoryFound := CheckIfPriceHistoryExists("Service Order No.", lvRefDate, "Trade Item", lvGrossPrice);

        IF CheckCostPriceBehaviour("Service Order No.", "Customer No.") THEN BEGIN
          IF lvPriceHistoryFound THEN BEGIN
            "Gross Price (LCY)" := lvGrossPrice;
            "Basic Price Found at" := Text010;
          END
          ELSE BEGIN
            "Cost Price Adjustment" := (lvPriceFactor - 1) * 100;
            "Gross Price (LCY)" := "Cost Price" * lvPriceFactor;
            "Basic Price (LCY)" := "Gross Price (LCY)";
          END;
        END
        ELSE BEGIN
          IF lvPriceHistoryFound THEN BEGIN
            "Basic Price Found at" := Text010;
          END
          ELSE BEGIN
            lvSurchargeIfMissingArticles := GetSurchargeIfMissingArticles("Service Order No.");
            IF lvSurchargeIfMissingArticles <> 1 THEN BEGIN
              "Cost Price Adjustment" := (lvSurchargeIfMissingArticles - 1) * 100;
              //VALIDATE("Gross Price", "Cost Price" * lvSurchargeIfMissingArticles);   // 160324 ITERO.AC RFC083 Do not use Validate (will lead to wrong Cost Price)
              "Gross Price (LCY)" := "Cost Price" * lvSurchargeIfMissingArticles;
              VALIDATE("Sales Discount % (Item)", 0);
              "Basic Price Found at" := Text11128001;
              lvDoSalesPriceCalulation := FALSE;
            END
            ELSE BEGIN
              "Basic Price Found at" := Text11128003;
            END;
            //>> 161012 ITERO.AC RAD043 Get Sales price if Item not found in Customer pricelist or in Vendor Price List
            // Warehouse Items with no sales price.. NOTE: We do not handle different Currencies in Sales Prices. All prices are calculated in LCY !
            IF (LTypeArtOpt = LTypeArtOpt::Item) AND ("Item No." <> '') AND ("Trade Item" = '') AND (lvPriceHistoryFound = FALSE) THEN BEGIN
              lvItemSalesPrice.SETRANGE( "Item No.", "Item No.");
              lvItemSalesPrice.SETRANGE("Starting Date", 0D, lvRefDate);
              IF lvItemSalesPrice.FINDLAST THEN BEGIN
                "Gross Price (LCY)" := CalculatePriceWithoutVAT("Item No.", lvItemSalesPrice."Price Includes VAT", lvItemSalesPrice."Unit Price");
                "Price History Found" := TRUE;
                VALIDATE("Sales Discount % (Item)", 0);
                "Basic Price Found at" := Text11128004;   // Sales Price Warehouse Item
                lvDoSalesPriceCalulation := FALSE;
              END ELSE BEGIN
                "Basic Price Found at" := Text11128005;   // Price Warehouse Item
              END;
            END;
            //<< 161012 ITERO.AC RAD043
          END;
        END;
      END;

      IF lvDoSalesPriceCalulation THEN BEGIN
        "Price History Found" := lvPriceHistoryFound;
      //<< 160621 ITERO.AC RFC082
        FindSalesPrice;
      END;

      IF NOT PriceDisc THEN //ORNAGO.PR 200528
        VALIDATE("Surcharge %", GetSurcharge);
      GetDiscountPerc;

      IF ("Item No." <> '') AND ("Item No." <> ItemRec."No.") THEN
        IF ItemRec.GET("Item No.") THEN
          VALIDATE(Text, ItemRec.Text);

      "VAT Prod. Posting Group" := UpdateVatProdPostingGrp;   //RFC 547
    END;

    PROCEDURE FindCostPrice@1100525008(LTypeArtOpt@1100525005 : 'Item,Basic Item,Trade Item');
    VAR
      ServiceOrderCostPlusEntry@1210190000 : Record 11012825;
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525004 : 'Purchase,Sales';
      DummyDat@1100525006 : Date;
      SaveField@1100525007 : Integer;
      ProjSetup@1100285000 : Record 315;
      lvSaveCostPrice@1100285001 : Decimal;
    BEGIN
      ServiceOrderCostPlusEntry := Rec;
      ValidateCu.SetQuantity(Quantity);
      lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      ValidateCu.GetRefDiscServOrder(ServOrderRec, lvDiscRef1, lvDiscRef2, lvDiscType::Purchase);  //DP01339
      lvRefPrio := ValidateCu.GetRefPrioServContract(ServContractRec, lvDiscType::Purchase);

      //>> 150905 ITERO.AC Check project settings and keep existing cost price if any
      ProjSetup.GET;
      lvSaveCostPrice := 0;
      IF (ProjSetup."Copy Price Item from Entry") AND ("Cost Price (LCY)" <> 0) THEN BEGIN
        lvSaveCostPrice := "Cost Price (LCY)";
      END;
      //<< 150905 ITERO.AC

      ValidateCu.SetPriceListCode('');  // Itero ANCA 150807 Added Price List Code To Service Order
      ValidateCu.SetDontUseSingleGTIN(TRUE); // 160116 ITERO.AC (Same as IME420)

      ValidateCu.ValidateItem(LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)",
        "Basic Item", "Cost Object", Description, "Unit of Measure", "Cost Price (LCY)", "Purchase Discount % (Item)", DummyDat,
        "Gross Price (LCY)", "Description 2", "Cost Component",
         lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);
      //>> 150905 ITERO.AC
      IF lvSaveCostPrice <> 0 THEN
        "Cost Price (LCY)" := lvSaveCostPrice;
      //<< 150905 ITERO.AC

      //>> 160621 ITERO.AC RFC082 If not FindSalesPrice calculation is executed or article not found in customer price list, this value will remain as an information
      "Price History Vendor No." := ValidateCu.GetPriceHistVendorNo();
      //<< 160621 ITERO.AC RFC082

      IF CostObjectFixed AND (ServiceOrderCostPlusEntry."Cost Object" <> '') THEN BEGIN
        "Cost Object" := ServiceOrderCostPlusEntry."Cost Object";
        "Cost Type" := ServiceOrderCostPlusEntry."Cost Type";
      END;

      CalculateFCYFromLCY(FIELDNO("Cost Price (LCY)"));  //DP00887
      CalculateFCYFromLCY(FIELDNO("Gross Price (LCY)"));  //DP00887

      VALIDATE("Cost Component");

      IF CurrFieldNo <> 0 THEN BEGIN
        SaveField := CurrFieldNo;
        CurrFieldNo := FIELDNO("Cost Object");
        CheckAdditionalCostService;
        CurrFieldNo := SaveField;
      END;
    END;

    PROCEDURE FindSalesPrice@1100525005();
    VAR
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525004 : 'Purchase,Sales';
      BasicPrice@1100529400 : Decimal;
      SalesDiscount@1100529401 : Decimal;
      ProjSetup@1100529402 : Record 315;
      lvCustPriceListFromPrio@1100285000 : Code[20];
      lvTempPriceHistVendor@1100525005 : Code[20];
      SESetup@1100285101 : Record 11128004;
      SurchSpecial@1100285100 : Boolean;
    BEGIN
      IF NOT CustRec.GET("Bill-to Customer No.") THEN CustRec.INIT;
      //>> Itero AC 150807 Price Calulation when Customer Price List is Selected
      IF NOT UseCostPrice(CustRec) THEN BEGIN
        ValidateCu.SetQuantity(Quantity);
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
        ValidateCu.GetRefDiscServOrder(ServOrderRec, lvDiscRef1, lvDiscRef2, lvDiscType::Sales);
        IF lvDiscRef1 <> '' THEN BEGIN
          lvRefPrio := '01~';  // ITERO.AC: Betyder Rabattvilkorsgrupp (Kund) i Serviceorder
        END ELSE BEGIN
          lvRefPrio := ValidateCu.GetRefPrioServContract(ServContractRec, lvDiscType::Sales);
        END;
        IF UseManualPriceList = '' THEN BEGIN
          ValidateCu.SetPriceListCode(ServOrderRec."Price List Code");
        END ELSE BEGIN
          ValidateCu.SetPriceListCode(UseManualPriceList);
        END;
        //Orango 200407
        SurchSpecial := FALSE;
        IF SESetup.GET(SESetup."Line type"::Setup,'SURCHARGE','SPECIAL') THEN
          SurchSpecial :=  SESetup."Value (bool)";
        //Orango 200407
        IF SurchSpecial THEN BEGIN
          ValidateCu.GetSalesDiscountSurcharge(
            CustRec."No.", "Item No.", "Basic Item", "Trade Item",
            Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Surcharge %", "Gross Price (LCY)", lvRefDate, '',
            lvDiscRef1, lvDiscRef2, lvRefPrio,'');
            IF "Surcharge %" <> 0 THEN BEGIN
              ValidateCu.GetSalesDiscountSurcharge(
                CustRec."No.", "Item No.", "Basic Item", "Trade Item",
                Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Surcharge %", "Cost Price (LCY)", lvRefDate, '',
                lvDiscRef1, lvDiscRef2, lvRefPrio,'');

                VALIDATE("Surcharge %");
          END;
        END ELSE BEGIN
        //Orango 200407
          ValidateCu.GetSalesDiscount(CustRec."No.", "Item No.", "Basic Item", "Trade Item",
            Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Sales Discount % (Item)", "Gross Price (LCY)", lvRefDate, '',
            lvDiscRef1, lvDiscRef2, lvRefPrio);
        END;
        //>> 150905 ITERO.AC Search for alternative Customer Price List
        //>> 161010 ITERO.AC RAD043 Use new field "Sales Discount Term Percent" if entered and Curent Trade Item exists in Customer price list
        IF ValidateCu.GetPriceHistFound() THEN BEGIN
          IF ServOrderRec."Sales Discount Term Percent" <> 0 THEN BEGIN
            "Basic Price (LCY)" := "Gross Price (LCY)" - ("Gross Price (LCY)" * ServOrderRec."Sales Discount Term Percent" / 100);
            "Sales Discount % (Item)" := ServOrderRec."Sales Discount Term Percent";
          END;
        END;
        //<< 161010 ITERO.AC RAD043
        IF NOT ValidateCu.GetPriceHistFound() THEN BEGIN
          lvCustPriceListFromPrio := GetCustPriceListFromPriority("Trade Item", lvRefDate, lvDiscRef1);
          IF lvCustPriceListFromPrio <> '' THEN BEGIN
            ValidateCu.SetPriceListCode(lvCustPriceListFromPrio);
            //Orango 200407
            IF SurchSpecial THEN BEGIN
              ValidateCu.GetSalesDiscountSurcharge(CustRec."No.", "Item No.", "Basic Item", "Trade Item",
                Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Surcharge %", "Cost Price (LCY)", lvRefDate, '',
                lvDiscRef1, lvDiscRef2, lvRefPrio,'');
              IF "Surcharge %" <> 0 THEN BEGIN
                ValidateCu.GetSalesDiscountSurcharge(CustRec."No.", "Item No.", "Basic Item", "Trade Item",
                  Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Surcharge %", "Gross Price (LCY)", lvRefDate, '',
                  lvDiscRef1, lvDiscRef2, lvRefPrio,'');
              END;
            END ELSE BEGIN
            //Orango 200407
              ValidateCu.GetSalesDiscount(CustRec."No.", "Item No.", "Basic Item", "Trade Item",
                Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Sales Discount % (Item)", "Gross Price (LCY)", lvRefDate, '',
                lvDiscRef1, lvDiscRef2, lvRefPrio);
            END;
            //>> 161010 ITERO.AC RAD043 Use new filed "Sales Discount Term Percent" if entered
            IF ServOrderRec."Sales Discount Term Percent" <> 0 THEN BEGIN
              "Basic Price (LCY)" := "Gross Price (LCY)" - ("Gross Price (LCY)" * ServOrderRec."Sales Discount Term Percent" / 100);
              "Sales Discount % (Item)" := ServOrderRec."Sales Discount Term Percent";
            END
            //>> 161010 ITERO.AC RAD043
          END;
        END;
        //<< 150905 ITERO.AC
        "Price History Found" := ValidateCu.GetPriceHistFound();
        //>> 160621 ITERO.AC RFC082 Do not replace "Price History Vendor No." with blank
        lvTempPriceHistVendor := ValidateCu.GetPriceHistVendorNo();
        IF lvTempPriceHistVendor <> '' THEN
          "Price History Vendor No." := lvTempPriceHistVendor;
        //"Price History Vendor No." := ValidateCu.GetPriceHistVendorNo();
        //<< 160621 ITERO.AC RFC082

        "Gross Price (LCY)" :=  ValidateCu.GetLatestCustGrossPrice();
      //  CalculateGrossPriceFromLCY; // 160622 ITERO.AC RFC082
      CalculateFCYFromLCY(FIELDNO("Gross Price (LCY)"));  //DP00887
        IF ("Price History Found") AND (UseManualPriceList = '')  THEN BEGIN
          IF lvCustPriceListFromPrio = '' THEN
            "Price History PriceList" := ServOrderRec."Price List Code"
          ELSE
            "Price History PriceList" := lvCustPriceListFromPrio;
        END;
        //Orango 200407
        //VALIDATE("Sales Discount % (Item)");
        //GetSalesDiscount;
        IF NOT SurchSpecial THEN BEGIN   //Orango 200407
          VALIDATE("Sales Discount % (Item)");
          GetSalesDiscount;
        END;
        //Orango 200407
        EXIT;
      END;
      //<< ITERO.AC 150807
      IF ItemPriceCPEisGrossMin(CustRec) THEN BEGIN
        ValidateCu.SetQuantity(Quantity);
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
        ValidateCu.GetRefDiscServOrder(ServOrderRec, lvDiscRef1, lvDiscRef2, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioServContract(ServContractRec, lvDiscType::Sales);
        //Orango 200407
        IF SurchSpecial THEN BEGIN
          "Sales Condition Present" := ValidateCu.GetSalesDiscountSurcharge(  //C015604
            CustRec."No.", "Item No.", "Basic Item", "Trade Item",
            Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Surcharge %" ,"Cost Price (LCY)", lvRefDate, '',
            lvDiscRef1, lvDiscRef2, lvRefPrio,'');
          CalculateFCYFromLCY(FIELDNO("Basic Price (LCY)"));  //DP00887
        END ELSE BEGIN
        //Orango 200407
          "Sales Condition Present" := ValidateCu.GetSalesDiscount(  //C015604
            CustRec."No.", "Item No.", "Basic Item", "Trade Item",
            Manufacturer, "Vendor (Trade Item)", "Basic Price (LCY)", "Sales Discount % (Item)", "Gross Price (LCY)", lvRefDate, '',
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          CalculateFCYFromLCY(FIELDNO("Basic Price (LCY)"));  //DP00887
          VALIDATE("Sales Discount % (Item)");
        END;
      END ELSE BEGIN
        //Orango 200407
        SurchSpecial := FALSE;
        IF SESetup.GET(SESetup."Line type"::Setup,'SURCHARGE','SPECIAL') THEN
          SurchSpecial :=  SESetup."Value (bool)";
        //Orango 200407
        //DP01243.sn
        ProjSetup.GET;
        IF ProjSetup."Apply SalesPrice for SurchMat" THEN BEGIN
          ValidateCu.SetQuantity(Quantity);
          lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
          ValidateCu.GetRefDiscServOrder(ServOrderRec, lvDiscRef1, lvDiscRef2, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioServContract(ServContractRec, lvDiscType::Sales);
          //Orango 200407
          IF NOT SurchSpecial THEN BEGIN
          "Sales Condition Present" := ValidateCu.GetSalesDiscount(
            CustRec."No.", "Item No.", "Basic Item", "Trade Item",
            Manufacturer, "Vendor (Trade Item)", BasicPrice, SalesDiscount, "Gross Price (LCY)", lvRefDate, '',
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          END ELSE BEGIN
            //Orango 200407
            "Sales Condition Present" := ValidateCu.GetSalesDiscountSurcharge(
              CustRec."No.", "Item No.", "Basic Item", "Trade Item",
              Manufacturer, "Vendor (Trade Item)", BasicPrice, "Surcharge %", "Cost Price (LCY)", lvRefDate, '',
              lvDiscRef1, lvDiscRef2, lvRefPrio,'');
            IF "Surcharge %" <> 0 THEN BEGIN
              "Sales Condition Present" := ValidateCu.GetSalesDiscountSurcharge(
                CustRec."No.", "Item No.", "Basic Item", "Trade Item",
                Manufacturer, "Vendor (Trade Item)", BasicPrice, "Surcharge %", "Gross Price (LCY)", lvRefDate, '',
                lvDiscRef1, lvDiscRef2, lvRefPrio,'');
            END;
          END;
          //Orango 200407
          IF "Sales Condition Present" THEN BEGIN
            "Basic Price (LCY)" := BasicPrice;
            "Sales Discount % (Item)" := SalesDiscount;
            CalculateFCYFromLCY(FIELDNO("Basic Price (LCY)"));  //DP00887
            IF NOT SurchSpecial THEN  //Orango 200407
              VALIDATE("Sales Discount % (Item)");
          END ELSE BEGIN
            IF NOT SurchSpecial THEN  //Orango 200407
              GetSalesDiscount;
          END;
        END;
        //DP01243.en
      END;
    END;

    PROCEDURE CheckTimerData@1210190003(QuanTime@1210190000 : Decimal);
    VAR
      ServSetup@1100525000 : Record 11012800;
      CostPlusRec@1210190002 : Record 11012825;
      UserSetup@1210190003 : Record 91;
      LastLino@1210190001 : Integer;
    BEGIN
      ServSetup.GET;
      ServSetup.TESTFIELD("Cost Object Consult");
      ServOrderRec.GET("Service Order No.");

      CostPlusRec.RESET;
      CostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
      IF CostPlusRec.FINDLAST THEN
        LastLino := CostPlusRec."Line No."
      ELSE
        LastLino := 0;

      DimMgt.GetDimValueRec(2, ServSetup."Cost Object Consult", DimValRec, TRUE,'');

      CostPlusRec.INIT;
      CostPlusRec.VALIDATE("Service Order No.", ServOrderRec."No.");
      CostPlusRec."Line No." := LastLino + 10000;
      CostPlusRec.INSERT(TRUE);

      IF UserSetup.GET(USERID) THEN
        CostPlusRec."Employee No." := UserSetup."Employee No.";
      CostPlusRec."Cost Object" := DimValRec.Code;
      CostPlusRec.Description := DimValRec.Name;
      CostPlusRec.Quantity := QuanTime;
      CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
      CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
      IF DimValRec."Rate Code" <> '' THEN
        CostPlusRec.VALIDATE("Hour Rate Code", DimValRec."Rate Code")
      ELSE
        CostPlusRec.GetBasicPrice;
      CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
      CostPlusRec.GetDiscountPerc;
      CostPlusRec.MODIFY;
    END;

    PROCEDURE CheckTravelData@1210190001();
    VAR
      ServSetup@1100525000 : Record 11012800;
      CostPlusRec@1210190000 : Record 11012825;
      LastLino@1210190001 : Integer;
    BEGIN
      ServSetup.GET;
      ServSetup.TESTFIELD("Cost Object Travel Time");
      ServSetup.TESTFIELD("Cost Object Travel Distance");
      ServSetup.TESTFIELD("Cost Object Travel Cost");

      ServOrderRec.GET("Service Order No.");
      ServLocRec.GET(ServOrderRec."Service Location No.");

      CostPlusRec.RESET;
      CostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
      IF CostPlusRec.FINDLAST THEN
        LastLino := CostPlusRec."Line No."
      ELSE
        LastLino := 0;

      CostPlusRec.SETRANGE("Cost Object", ServSetup."Cost Object Travel Time");
      IF NOT CostPlusRec.FINDFIRST THEN BEGIN
        DimMgt.GetDimValueRec(2, ServSetup."Cost Object Travel Time", DimValRec, TRUE,'');

        IF ServLocRec."Travel Time" <> 0 THEN BEGIN
          CostPlusRec.INIT;
          CostPlusRec.VALIDATE("Service Order No.", ServOrderRec."No.");
          CostPlusRec."Line No." := LastLino + 10000;
          CostPlusRec.INSERT(TRUE);

          CostPlusRec."Cost Object" := DimValRec.Code;
          CostPlusRec.Description := DimValRec.Name;
          CostPlusRec.Quantity := ServLocRec."Travel Time";
          CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
          CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
          IF DimValRec."Rate Code" <> '' THEN
            CostPlusRec.VALIDATE("Hour Rate Code", DimValRec."Rate Code")
          ELSE
            CostPlusRec.GetBasicPrice;
          CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
          CostPlusRec.GetDiscountPerc;
          CostPlusRec.MODIFY;

          LastLino := CostPlusRec."Line No.";
        END;
      END;

      CostPlusRec.SETRANGE("Cost Object", ServSetup."Cost Object Travel Distance");
      IF NOT CostPlusRec.FINDFIRST THEN BEGIN
        DimMgt.GetDimValueRec(2, ServSetup."Cost Object Travel Distance", DimValRec, TRUE,'');

        IF ServLocRec."Travel Distance" <> 0 THEN BEGIN
          CostPlusRec.INIT;
          CostPlusRec.VALIDATE("Service Order No.", ServOrderRec."No.");
          CostPlusRec."Line No." := LastLino + 10000;
          CostPlusRec.INSERT(TRUE);

          CostPlusRec."Cost Object" := DimValRec.Code;
          CostPlusRec.Description := DimValRec.Name;
          CostPlusRec.Quantity := ServLocRec."Travel Distance";
          CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
          CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
          CostPlusRec.GetBasicPrice;
          CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
          CostPlusRec.GetDiscountPerc;
          CostPlusRec.MODIFY;

          LastLino := CostPlusRec."Line No.";
        END;
      END;

      CostPlusRec.SETRANGE("Cost Object", ServSetup."Cost Object Travel Cost");
      IF NOT CostPlusRec.FINDFIRST THEN BEGIN
        DimMgt.GetDimValueRec(2, ServSetup."Cost Object Travel Cost", DimValRec, TRUE,'');

        IF ServLocRec.GetTravelCostWithIndexDate(ServOrderRec."Order Date") <> 0 THEN BEGIN
          CostPlusRec.INIT;
          CostPlusRec.VALIDATE("Service Order No.", ServOrderRec."No.");
          CostPlusRec."Line No." := LastLino + 10000;
          CostPlusRec.INSERT(TRUE);

          CostPlusRec."Cost Object" := DimValRec.Code;
          CostPlusRec.Description := DimValRec.Name;
          CostPlusRec.Quantity := 1;
          CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
          CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
          CostPlusRec."Basic Price (LCY)" := ServLocRec.GetTravelCostWithIndexDate(ServOrderRec."Order Date");
          CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));  //DP00887
          CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
          CostPlusRec.GetDiscountPerc;
          CostPlusRec.MODIFY;

          LastLino := CostPlusRec."Line No.";
        END;
      END;
    END;

    PROCEDURE CheckInvoiceBaseAmount@1210190008();
    VAR
      AmntTotal@1100525008 : Decimal;
      AmntLabor@1100525007 : Decimal;
      AmntMaterial@1100525006 : Decimal;
      AmntSubcontracting@1100525005 : Decimal;
      AmntPlant@1100525003 : Decimal;
      AmntSundry@1100525002 : Decimal;
      InvAmnt@1100525001 : Decimal;
      InvHrs@1100525000 : Decimal;
    BEGIN
      ServOrderRec.GET("Service Order No.");
      IF ServOrderRec."Invoice Base Method" = ServOrderRec."Invoice Base Method"::" " THEN EXIT;
      IF ServOrderRec."Settlement Method" = ServOrderRec."Settlement Method"::"Fixed Price" THEN EXIT;
      IF ServOrderRec."Charge Vendor (Warranty)" THEN EXIT;  //DP01008.n

      ServSetup.GET;
      ServSetup.TESTFIELD("Cost Object Invoice Base");
      DimMgt.GetDimValueRec(2, ServSetup."Cost Object Invoice Base", DimValRec, TRUE,'');

      //DP01008.sn
      CalcSubtotalsForInvoiceBaseAmount("Service Order No.",
        AmntTotal, AmntLabor, AmntMaterial, AmntSubcontracting,AmntPlant, AmntSundry,
        InvAmnt, InvHrs);
      CheckAndCreateInvoiceBaseAmountLine("Service Order No.",
        AmntTotal, AmntLabor, AmntMaterial, AmntSubcontracting,AmntPlant, AmntSundry,
        InvAmnt, InvHrs);
      //DP01008.en
    END;

    PROCEDURE CheckInvBaseAmountBaseOrder@1100528602();
    VAR
      ServiceOrder2@1100525008 : Record 11012823;
      AmntTotal@1100525007 : Decimal;
      AmntLabor@1100525006 : Decimal;
      AmntMaterial@1100525005 : Decimal;
      AmntSubcontracting@1100525004 : Decimal;
      AmntPlant@1100525003 : Decimal;
      AmntSundry@1100525002 : Decimal;
      InvAmnt@1100525001 : Decimal;
      InvHrs@1100525000 : Decimal;
    BEGIN
      ServOrderRec.GET("Service Order No.");

      IF ServOrderRec."Base Service Order No." <> ServOrderRec."No." THEN EXIT; // skip "next" order
      IF ServOrderRec."Settlement Method" = ServOrderRec."Settlement Method"::"Fixed Price" THEN EXIT;
      IF ServOrderRec."Charge Vendor (Warranty)" THEN EXIT;  //DP01008.n

      ServSetup.GET;
      ServSetup.TESTFIELD("Cost Object Invoice Base");
      DimMgt.GetDimValueRec(2, ServSetup."Cost Object Invoice Base", DimValRec, TRUE,'');

      //DP01008.sn
      ServiceOrder2.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder2.SETRANGE("Base Service Order No.", ServOrderRec."No.");
      IF ServiceOrder2.FINDSET THEN BEGIN
        REPEAT
          IF NOT ServiceOrder2.InvoiceDataDiffersFromBaseOrder THEN
            CalcSubtotalsForInvoiceBaseAmount(ServiceOrder2."No.",
              AmntTotal, AmntLabor, AmntMaterial, AmntSubcontracting,AmntPlant, AmntSundry,
              InvAmnt, InvHrs);
        UNTIL ServiceOrder2.NEXT = 0;
      END;

      CheckAndCreateInvoiceBaseAmountLine("Service Order No.",
        AmntTotal, AmntLabor, AmntMaterial, AmntSubcontracting,AmntPlant, AmntSundry,
        InvAmnt, InvHrs);
      //DP01008.en
    END;

    LOCAL PROCEDURE CalcSubtotalsForInvoiceBaseAmount@1100525012(ServiceOrderNo@1100525010 : Code[20];VAR AmntTotal@1100525009 : Decimal;VAR AmntLabor@1100525008 : Decimal;VAR AmntMaterial@1100525007 : Decimal;VAR AmntSubcontracting@1100525006 : Decimal;VAR AmntPlant@1100525005 : Decimal;VAR AmntSundry@1100525004 : Decimal;VAR InvAmnt@1100525003 : Decimal;VAR InvHrs@1100525002 : Decimal);
    VAR
      CostPlusRec@1100525000 : Record 11012825;
    BEGIN
      //DP01008
      CostPlusRec.SETRANGE("Service Order No.", ServiceOrderNo);
      IF NOT CostPlusRec.ISEMPTY THEN BEGIN
        IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CostPlusRec.CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)", "Credit Memo in Process (LCY)");
            IF (CostPlusRec."Cost Object" = ServSetup."Cost Object Invoice Base") AND
               (CostPlusRec."Discount Term Level" IN [CostPlusRec."Discount Term Level"::" ", CostPlusRec."Discount Term Level"::"Base Service Order"]) //C037044.c
            THEN BEGIN
              IF (CostPlusRec."Invoiced Price (LCY)" = 0) AND
                 (CostPlusRec."Invoice in Process (LCY)" = 0) AND
                 (CostPlusRec."Credit Memo in Process (LCY)" = 0) THEN
              BEGIN
                CostPlusRec."Invoice Price (LCY)" := 0;
                CostPlusRec."Invoice Price" := 0;
                CostPlusRec.DELETE;
              END ELSE BEGIN
                InvAmnt :=
                  InvAmnt -
                  (CostPlusRec."Invoiced Price (LCY)" + CostPlusRec."Invoice in Process (LCY)" + CostPlusRec."Credit Memo in Process (LCY)");
              END;
            END ELSE BEGIN
              IF CostPlusRec.Chargeable OR
                 (CostPlusRec."Invoiced Price (LCY)" + CostPlusRec."Invoice in Process (LCY)" + CostPlusRec."Credit Memo in Process (LCY)" <> 0)
              THEN BEGIN
                CostPlusRec.CALCFIELDS("Cost Type");
                AmntTotal += CostPlusRec."Invoice Price (LCY)";
                CASE CostPlusRec."Cost Type" OF
                  CostPlusRec."Cost Type"::Labor:
                    BEGIN
                      AmntLabor += CostPlusRec."Invoice Price (LCY)";
                      InvHrs += CostPlusRec.Quantity;
                    END;
                  CostPlusRec."Cost Type"::Material:
                    AmntMaterial += CostPlusRec."Invoice Price (LCY)";
                  CostPlusRec."Cost Type"::Subcontracting:
                    AmntSubcontracting += CostPlusRec."Invoice Price (LCY)";
                  CostPlusRec."Cost Type"::Plant:
                    AmntPlant += CostPlusRec."Invoice Price (LCY)";
                  CostPlusRec."Cost Type"::Sundry:
                    AmntSundry += CostPlusRec."Invoice Price (LCY)";
                END;
              END;
            END;
          UNTIL CostPlusRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckAndCreateInvoiceBaseAmountLine@1100525013(ServiceOrderNo@1100525000 : Code[20];AmntTotal@1100525009 : Decimal;AmntLabor@1100525008 : Decimal;AmntMaterial@1100525007 : Decimal;AmntSubcontracting@1100525006 : Decimal;AmntPlant@1100525005 : Decimal;AmntSundry@1100525004 : Decimal;InvAmnt@1100525003 : Decimal;InvHrs@1100525002 : Decimal);
    VAR
      CostPlusRec@1100525001 : Record 11012825;
      DummyCostPlusRec@1100525016 : Record 11012825;
      ServiceContractDiscountTerm@1100525015 : Record 11012828;
      LastLino@1100525010 : Integer;
      ServicePackage@1100525014 : Code[10];
      CostTypeMethod@1100525013 : 'Specific Cost Type,All Cost Types';
      InFilterGroup@1100525012 : Boolean;
    BEGIN
      //DP01008
      ServOrderRec.GET(ServiceOrderNo);
      LastLino := GetLastLino(ServOrderRec."No.");

      IF ServOrderRec."Invoice Base Method" <> ServOrderRec."Invoice Base Method"::" " THEN BEGIN // standard method
        IF ServOrderRec."Invoice Base Method" = ServOrderRec."Invoice Base Method"::"total-base" THEN BEGIN
          IF (ServOrderRec."Invoice Base Amount Labor" +
              ServOrderRec."Invoice Base Amount Material" <>
              ServOrderRec."Invoice Base Amount Total") THEN BEGIN
            IF AmntTotal > ServOrderRec."Invoice Base Amount Total" THEN
              InvAmnt := InvAmnt - ServOrderRec."Invoice Base Amount Total"
            ELSE
              InvAmnt := InvAmnt - AmntTotal;
          END ELSE BEGIN
            IF ServOrderRec."Invoice Base Amount Labor" <> 0 THEN BEGIN
             IF AmntLabor > ServOrderRec."Invoice Base Amount Labor" THEN
                InvAmnt := InvAmnt - ServOrderRec."Invoice Base Amount Labor"
              ELSE
                InvAmnt := InvAmnt - AmntLabor;
            END;
            IF ServOrderRec."Invoice Base Amount Material" <> 0 THEN BEGIN
             IF AmntMaterial > ServOrderRec."Invoice Base Amount Material" THEN
                InvAmnt := InvAmnt - ServOrderRec."Invoice Base Amount Material"
              ELSE
                InvAmnt := InvAmnt - AmntMaterial;
            END;
          END;
        END;

        IF ServOrderRec."Invoice Base Method" = ServOrderRec."Invoice Base Method"::"total>base" THEN BEGIN
          IF ServOrderRec."Invoice Base Amount Labor" >= AmntLabor THEN
            InvAmnt := InvAmnt - AmntLabor;
          IF ServOrderRec."Invoice Base Amount Material" >= AmntMaterial THEN
            InvAmnt := InvAmnt - AmntMaterial;
          IF ServOrderRec."Invoice Base Amount Total" >= AmntTotal THEN
            IF (ServOrderRec."Invoice Base Amount Labor" +
                ServOrderRec."Invoice Base Amount Material" <>
                ServOrderRec."Invoice Base Amount Total") THEN
              InvAmnt := InvAmnt - AmntTotal;
        END;

        IF InvAmnt = 0 THEN EXIT;

        CostPlusRec.INIT;
        CostPlusRec.VALIDATE("Service Order No.", ServOrderRec."No.");
        CostPlusRec."Line No." := LastLino + 10000;
        CostPlusRec.INSERT(TRUE);
        CostPlusRec."Cost Object" := DimValRec.Code;
        CostPlusRec.Description := DimValRec.Name;
        CostPlusRec."Description 2" := '';
        IF InvHrs > ServOrderRec."Invoice Base Hours" THEN
          IF CostPlusRec."Description 2" = '' THEN
            CostPlusRec."Description 2" := ServOrderRec.FIELDCAPTION("Invoice Base Hours") + '=' +
              STRSUBSTNO('%1', ServOrderRec."Invoice Base Hours");
        IF AmntLabor > ServOrderRec."Invoice Base Amount Labor" THEN
          IF CostPlusRec."Description 2" = '' THEN
            CostPlusRec."Description 2" := ServOrderRec.FIELDCAPTION("Invoice Base Amount Labor") + '=' +
              STRSUBSTNO('%1', ServOrderRec."Invoice Base Amount Labor");
        IF AmntMaterial > ServOrderRec."Invoice Base Amount Material" THEN
          IF CostPlusRec."Description 2" = '' THEN
            CostPlusRec."Description 2" := ServOrderRec.FIELDCAPTION("Invoice Base Amount Material") + '=' +
              STRSUBSTNO('%1', ServOrderRec."Invoice Base Amount Material");
        IF AmntTotal > ServOrderRec."Invoice Base Amount Total" THEN
          IF CostPlusRec."Description 2" = '' THEN
            CostPlusRec."Description 2" := ServOrderRec.FIELDCAPTION("Invoice Base Amount Total") + '=' +
              STRSUBSTNO('%1', ServOrderRec."Invoice Base Amount Total");
        CostPlusRec.Quantity := 1;
        CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
        CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
        CostPlusRec.VALIDATE("Basic Price (LCY)", InvAmnt);
        CostPlusRec."Sales Price (LCY)" := CostPlusRec."Basic Price (LCY)";
        CostPlusRec."Invoice Price (LCY)" := CostPlusRec."Basic Price (LCY)";
        CostPlusRec.VALIDATE("Discount % (ServOrder)", 0);
        CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Sales Price (LCY)"));  //DP00887
        CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Invoice Price (LCY)"));  //DP00887
        CostPlusRec.Chargeable := TRUE;
        CostPlusRec.MODIFY;
      END ELSE BEGIN // Invoice Base via Service Contract Discount Terms
        IF ServOrderRec."Service Contract No." = '' THEN
          EXIT;

        ServicePackage := GetServicePackage();
        ServiceContractDiscountTerm.SETRANGE("Service Contract No.", ServOrderRec."Service Contract No.");
        ServiceContractDiscountTerm.SETRANGE("Service Package", ServicePackage);
        ServiceContractDiscountTerm.SETRANGE(Level, ServiceContractDiscountTerm.Level::"Base Service Order");
        ServiceContractDiscountTerm.SETFILTER("Invoice Base Method", '<>%1', ServiceContractDiscountTerm."Invoice Base Method"::" ");
        ServiceContractDiscountTerm.SETFILTER("Source Type", '%1|%2', ServiceContractDiscountTerm."Source Type"::None, ServOrderRec."Source Type");
        FOR CostTypeMethod := CostTypeMethod::"Specific Cost Type" TO CostTypeMethod::"All Cost Types" DO BEGIN
          CASE CostTypeMethod OF
            CostTypeMethod::"Specific Cost Type":
              ServiceContractDiscountTerm.SETFILTER("Cost Type", '<>%1', ServiceContractDiscountTerm."Cost Type"::" ");
            CostTypeMethod::"All Cost Types":
              ServiceContractDiscountTerm.SETRANGE("Cost Type", ServiceContractDiscountTerm."Cost Type"::" ");
          END;
          IF ServiceContractDiscountTerm.FINDSET THEN
            REPEAT
              DummyCostPlusRec."Service Order No." := "Service Order No.";
              InFilterGroup :=
                IsInFilterGroup(Rec, ServiceContractDiscountTerm."Filter Group") AND
                IsInFilterGroup(Rec, ServiceContractDiscountTerm."Filter Group 2");
              IF ((ServiceContractDiscountTerm."Filter Groups Method" =
                    ServiceContractDiscountTerm."Filter Groups Method"::Exclude) AND
                    NOT InFilterGroup) OR
                  ((ServiceContractDiscountTerm."Filter Groups Method" =
                    ServiceContractDiscountTerm."Filter Groups Method"::Include) AND
                   InFilterGroup)
              THEN BEGIN
                InvAmnt := 0;
                CASE ServiceContractDiscountTerm."Invoice Base Method" OF
                  ServiceContractDiscountTerm."Invoice Base Method"::"total-base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          IF AmntLabor > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntLabor;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntSundry;
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"total>base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF AmntLabor <= ServiceContractDiscountTerm."Invoice Base" THEN
                              InvAmnt -= AmntLabor;
                            IF InvHrs <= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                              InvAmnt -= AmntLabor;
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSundry;
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"total<base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF AmntLabor >= ServiceContractDiscountTerm."Invoice Base" THEN
                              InvAmnt -= AmntLabor;
                            IF InvHrs >= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                              InvAmnt -= AmntLabor;
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSundry;
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"base when total>base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntTotal - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntMaterial - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF (AmntLabor >= ServiceContractDiscountTerm."Invoice Base") AND (ServiceContractDiscountTerm."Invoice Base" <> 0) THEN
                              InvAmnt -= AmntLabor - ServiceContractDiscountTerm."Invoice Base";
                            IF (InvHrs >= ServiceContractDiscountTerm."Invoice Base Quantity") AND (ServiceContractDiscountTerm."Invoice Base Quantity" <> 0) THEN
                              IF InvHrs <> 0 THEN
                                InvAmnt -= (InvHrs - ServiceContractDiscountTerm."Invoice Base Quantity") * (AmntLabor / InvHrs);
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSubcontracting - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntPlant - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSundry - ServiceContractDiscountTerm."Invoice Base";
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"base when total<base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF AmntLabor <= ServiceContractDiscountTerm."Invoice Base" THEN
                              InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntLabor;
                            IF InvHrs <= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                              IF InvHrs <> 0 THEN
                                InvAmnt += (ServiceContractDiscountTerm."Invoice Base Quantity" - InvHrs) * (AmntLabor / InvHrs);
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntSundry;
                      END;
                    END;
                END;
                IF CostTypeMethod = CostTypeMethod::"Specific Cost Type" THEN
                  AmntTotal += InvAmnt;
                IF InvAmnt <> 0 THEN BEGIN
                  CostPlusRec.INIT;
                  CostPlusRec.VALIDATE("Service Order No.", ServOrderRec."No.");
                  CostPlusRec."Line No." := LastLino + 10000;
                  CostPlusRec.INSERT(TRUE);
                  CostPlusRec."Cost Object" := DimValRec.Code;
                  CostPlusRec.Description := ServiceContractDiscountTerm.Description;
                  CostPlusRec."Description 2" := '';
                  CostPlusRec.Quantity := 1;
                  CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
                  CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
                  CostPlusRec.VALIDATE("Basic Price (LCY)", InvAmnt);
                  CostPlusRec."Sales Price (LCY)" := CostPlusRec."Basic Price (LCY)";
                  CostPlusRec."Invoice Price (LCY)" := CostPlusRec."Basic Price (LCY)";
                  CostPlusRec."Discount Term Level" := ServiceContractDiscountTerm.Level +1;
                  CostPlusRec."Service Package" := ServiceContractDiscountTerm."Service Package";
                  CostPlusRec."Discount Term Line No." := ServiceContractDiscountTerm."Line No.";
                  CostPlusRec.VALIDATE("Discount % (ServOrder)", 0);
                  CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Sales Price (LCY)"));  //DP00887
                  CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Invoice Price (LCY)"));  //DP00887
                  CostPlusRec.Chargeable := TRUE;
                  CostPlusRec.MODIFY;
                END;
              END;
            UNTIL ServiceContractDiscountTerm.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckInstallment@1210190007(ServOrderNew@1210190003 : Record 11012823;ServOrderOld@1210190004 : Record 11012823);
    VAR
      ServSetup@1100525000 : Record 11012800;
      CostPlusRec@1210190000 : Record 11012825;
      InstallmentRec@1210190002 : Record 11012017;
      LastLino@1210190001 : Integer;
      lvInvoiced@1100485000 : Decimal;
      lvOrderAmnt@1100485001 : Decimal;
      lvLineAmnt@1100485003 : Decimal;
      lvOpenLine@1100485002 : Integer;
    BEGIN
      //function used when order amount or installment scheme changes on service order.

      ServSetup.GET;
      ServSetup.TESTFIELD("Cost Object Revenues");

      ServOrderNew.CheckStatus(1);

      WITH ServOrderOld DO BEGIN
        IF "Installment Scheme" <> '' THEN BEGIN
          CostPlusRec.RESET;
          CostPlusRec.SETRANGE("Service Order No.", "No.");
          CostPlusRec.SETRANGE("Installment Scheme", "Installment Scheme");
          CostPlusRec.SETFILTER("Installment No.", '<>%1', '');
          IF NOT CostPlusRec.ISEMPTY THEN BEGIN
            IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                CostPlusRec.CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)", "Credit Memo in Process (LCY)");
                lvInvoiced := lvInvoiced + CostPlusRec."Invoiced Price (LCY)" +
                  CostPlusRec."Invoice in Process (LCY)" + CostPlusRec."Credit Memo in Process (LCY)";
                IF CostPlusRec."Installment No." <> '' THEN
                  lvLineAmnt := lvLineAmnt + CostPlusRec."Basic Price (LCY)";
              UNTIL CostPlusRec.NEXT = 0;
              IF lvInvoiced = 0 THEN CostPlusRec.DELETEALL;
            END;
          END;
        END;
      END;

      WITH ServOrderNew DO BEGIN
        IF "Installment Scheme" <> '' THEN BEGIN
          CostPlusRec.RESET;
          CostPlusRec.SETRANGE("Service Order No.", "No.");
          IF CostPlusRec.FINDLAST THEN
            LastLino := CostPlusRec."Line No."
          ELSE
            LastLino := 0;

          lvOrderAmnt := "Order Amount (LCY)" - lvInvoiced;
          IF lvInvoiced <> 0 THEN BEGIN
            IF ServOrderNew."Installment Scheme" <> ServOrderOld."Installment Scheme" THEN
              ERROR(Text007, lvInvoiced)
            ELSE
              MESSAGE(Text007, lvInvoiced);

            CostPlusRec.RESET;
            CostPlusRec.SETRANGE("Service Order No.", "No.");
            CostPlusRec.SETRANGE("Installment Scheme", "Installment Scheme");
            CostPlusRec.SETFILTER("Installment No.", '%1', '');
            IF NOT CostPlusRec.ISEMPTY THEN BEGIN
              IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
                REPEAT
                  CostPlusRec.CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)", "Credit Memo in Process (LCY)");
                  IF (CostPlusRec."Invoiced Price (LCY)" = 0) AND
                     (CostPlusRec."Invoice in Process (LCY)" = 0) AND
                     (CostPlusRec."Credit Memo in Process (LCY)" = 0) THEN
                    lvOpenLine := CostPlusRec."Line No.";
                UNTIL (CostPlusRec.NEXT = 0) OR (lvOpenLine <> 0);
              END;
            END;

            IF lvOpenLine = 0 THEN BEGIN
              CostPlusRec.INIT;
              CostPlusRec.VALIDATE("Service Order No.", "No.");
              CostPlusRec."Line No." := LastLino + 10000;
              CostPlusRec.INSERT(TRUE);
              CostPlusRec."Cost Object" := ServSetup."Cost Object Revenues";
              DimMgt.GetDimValueRec(2, CostPlusRec."Cost Object", DimValRec, TRUE,'');
              CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
              CostPlusRec.Description := DimValRec.Name;
            END ELSE BEGIN
              CostPlusRec.GET("No.", lvOpenLine);
            END;

            CostPlusRec.Quantity := 1;
            CostPlusRec."Basic Price (LCY)" := ServOrderNew."Order Amount (LCY)" - lvLineAmnt;
            CostPlusRec."Sales Price (LCY)" := CostPlusRec."Basic Price (LCY)";
            CostPlusRec."Invoice Price (LCY)" := CostPlusRec."Basic Price (LCY)";
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));  //DP00887
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Sales Price (LCY)"));  //DP00887
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Invoice Price (LCY)"));  //DP00887
            CostPlusRec."Installment Scheme" := "Installment Scheme";
            CostPlusRec."Installment No." := '';
            CostPlusRec.DetermineChargeable;
            IF ServSetup."Release CPE CntrAmnt Mandatory" = TRUE THEN
              CostPlusRec.Chargeable := FALSE;
            IF CostPlusRec."Basic Price (LCY)" = 0 THEN
              CostPlusRec.DELETE
            ELSE
              CostPlusRec.MODIFY;
            LastLino := CostPlusRec."Line No.";

            IF ServOrderNew."Installment Scheme" = ServOrderOld."Installment Scheme" THEN EXIT;
          END;

          InstallmentRec.SETRANGE(Scheme, "Installment Scheme");
          IF InstallmentRec.FINDSET THEN BEGIN
            REPEAT
              CostPlusRec.INIT;
              CostPlusRec.VALIDATE("Service Order No.", "No.");
              CostPlusRec."Line No." := LastLino + 10000;
              CostPlusRec.INSERT(TRUE);
              IF InstallmentRec."Cost Object" <> '' THEN
                CostPlusRec."Cost Object" := InstallmentRec."Cost Object"
              ELSE
                CostPlusRec."Cost Object" := ServSetup."Cost Object Revenues";
              DimMgt.GetDimValueRec(2, CostPlusRec."Cost Object", DimValRec, TRUE,'');
              CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
              CostPlusRec.Description := InstallmentRec.Description;
              CostPlusRec.Quantity := 1;
              CostPlusRec."Basic Price (LCY)" := ROUND(InstallmentRec.Percentage/100 * lvOrderAmnt, 0.01);
              CostPlusRec."Sales Price (LCY)" := CostPlusRec."Basic Price (LCY)";
              CostPlusRec."Invoice Price (LCY)" := CostPlusRec."Basic Price (LCY)";
              CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));  //DP00887
              CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Sales Price (LCY)"));  //DP00887
              CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Invoice Price (LCY)"));  //DP00887
              CostPlusRec."Installment Scheme" := "Installment Scheme";
              CostPlusRec."Installment No." := InstallmentRec."Installment No.";
              IF InstallmentRec."VAT Prod. Posting Group" <> '' THEN
                CostPlusRec."VAT Prod. Posting Group" := InstallmentRec."VAT Prod. Posting Group";
              CostPlusRec.DetermineChargeable;
              IF ServSetup."Release CPE CntrAmnt Mandatory" = TRUE THEN
                CostPlusRec.Chargeable := FALSE;
              CostPlusRec.MODIFY;

              LastLino := CostPlusRec."Line No.";
            UNTIL InstallmentRec.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CheckObject@1210190002();
    BEGIN
    END;

    PROCEDURE CheckInstallmentScheme@1210190010(lvAction@1210190002 : Integer);
    VAR
      CostPlusRec@1210190000 : Record 11012825;
      InstAmnt@1210190001 : Decimal;
    BEGIN
      IF "Installment Scheme" = '' THEN EXIT;

      InstAmnt := 0;
      CostPlusRec.RESET;
      CostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
      CostPlusRec.SETRANGE("Installment Scheme", "Installment Scheme");
      IF CostPlusRec.FINDSET THEN BEGIN
        REPEAT
          IF lvAction = 1 THEN
            IF CostPlusRec."Line No." = "Line No." THEN
              InstAmnt := InstAmnt + "Invoice Price (LCY)"
            ELSE
              InstAmnt := InstAmnt + CostPlusRec."Invoice Price (LCY)";
          IF lvAction = 2 THEN
            IF CostPlusRec."Line No." <> "Line No." THEN
              InstAmnt := InstAmnt + CostPlusRec."Invoice Price (LCY)";
        UNTIL CostPlusRec.NEXT = 0;
      END;

      ServOrderRec.GET("Service Order No.");
      IF ServOrderRec."Order Amount (LCY)" <> InstAmnt THEN
        MESSAGE(Text005, InstAmnt, ServOrderRec."Order Amount (LCY)");
    END;

    PROCEDURE HandleLookupUnit@1210190004();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190013(VAR MainNewRec@1210190006 : Record 11012825;MainOldRec@1210190007 : Record 11012825);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        ValidateCu.SkipErrorUnitConversion(CurrFieldNo=0);  //C002191
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew <> 0) AND
           (UnitFactorOld <> 0) AND
           (UnitFactorNew <> UnitFactorOld) THEN BEGIN
          GlSetupRec.GET;
          GlSetupRec.TESTFIELD("Unit-Amount Rounding Precision");
          IF "Gross Price (LCY)" <> 0 THEN BEGIN
            VALIDATE("Gross Price (LCY)", ROUND("Gross Price (LCY)" * UnitFactorNew / UnitFactorOld,
              GlSetupRec."Unit-Amount Rounding Precision"))
          END ELSE BEGIN
            VALIDATE("Basic Price (LCY)", ROUND("Basic Price (LCY)" * UnitFactorNew / UnitFactorOld,
              GlSetupRec."Unit-Amount Rounding Precision"))
          END;
        END;
      END;
    END;

    PROCEDURE AddDateToDescription@1100485000(PostingDate@1100485001 : Date;ExecutionDate@1100528200 : Date);
    VAR
      DateTxt@1100485000 : Text[30];
      lDate@1100528201 : Date;
    BEGIN
      ServSetup.GET;

      CASE ServSetup."Add Date to Description CPE" OF
        ServSetup."Add Date to Description CPE"::" ":
          BEGIN
            EXIT;
          END;
        ServSetup."Add Date to Description CPE"::"Posting Date":
          BEGIN
            lDate := PostingDate;
          END;
        ServSetup."Add Date to Description CPE"::"Execution Date":
          BEGIN
            lDate := ExecutionDate;
          END;
      END;

      IF (lDate = 0D) OR (Description = '') THEN
        EXIT;

      CALCFIELDS("Cost Type");
      IF "Cost Type" <> "Cost Type"::Labor THEN
        EXIT;

      DateTxt := STRSUBSTNO(' %1', lDate);

      IF STRLEN(Description + DateTxt) > MAXSTRLEN(Description) THEN
        Description := COPYSTR(Description, 1, MAXSTRLEN(Description) - STRLEN(DateTxt));

      Description := Description + DateTxt;
    END;

    PROCEDURE SetInvoiceStatus@1100485001(VAR ServCostPlus@1100525000 : Record 11012825);
    VAR
      CostPlusRec@1100485000 : Record 11012825;
    BEGIN
      CostPlusRec.COPY(ServCostPlus);
      CostPlusRec.SETRANGE(Chargeable, FALSE);
      CostPlusRec.SETRANGE(Invoiced, FALSE);
      IF NOT CostPlusRec.ISEMPTY THEN BEGIN
        IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CostPlusRec.VALIDATE(Chargeable, TRUE);
            CostPlusRec.MODIFY;
          UNTIL CostPlusRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DetermineChargeable@1100485003();
    VAR
      ServSetup@1100525000 : Record 11012800;
    BEGIN
      //T003311
      IF SkipDetermineChargeable THEN
        EXIT;
      //

      IF "Installment Scheme" = '' THEN BEGIN
        IF NOT ServOrderRec.GET("Service Order No.") THEN
          EXIT;
        CASE ServOrderRec."Settlement Method" OF
          ServOrderRec."Settlement Method"::"Fixed Price":
            EXIT;
          ServOrderRec."Settlement Method"::"Collective Installment Overview",
          ServOrderRec."Settlement Method"::"Installment Overview by Service Order":
            BEGIN
              Chargeable := FALSE;
              EXIT;
            END;
        END;
      END;

      ServSetup.GET;
      CASE ServSetup."Release CPE Mandatory" OF
        ServSetup."Release CPE Mandatory"::No:
          Chargeable := TRUE;
        ServSetup."Release CPE Mandatory"::Yes:
          Chargeable := FALSE;
        ServSetup."Release CPE Mandatory"::"At 100% Discount":
          Chargeable := "Discount % (ServOrder)" <> 100;
      END;
    END;

    PROCEDURE Navigate@1100485005();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc(0D,"Source Document");
      NavigateForm.RUN;
    END;

    PROCEDURE DetermineRemovalContribution@1100485007(IForceChargeable@1100528600 : Boolean);
    VAR
      lvCostPlusRec@1100485007 : Record 11012825;
      lvSalesReceivablesSetup@1100525000 : Record 311;
    BEGIN
      lvCostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
      lvCostPlusRec.SETRANGE(Invoiced, FALSE);
      lvCostPlusRec.SETRANGE("Removal Contribution", TRUE);
      lvCostPlusRec.DELETEALL(TRUE);

      lvSalesReceivablesSetup.GET;                                       //CALL C025831 n
      IF NOT lvSalesReceivablesSetup."Charge Removal Contribution" THEN  //CALL C025831 n
        EXIT;                                                            //CALL C025831 n

      lvCostPlusRec.SETRANGE("Removal Contribution", FALSE);
      IF lvCostPlusRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          DetermineRemovalContribLine(lvCostPlusRec, IForceChargeable);
        UNTIL lvCostPlusRec.NEXT = 0;
      END;
    END;

    PROCEDURE DetermineRemovalContribLine@1100525110(ServiceOrderCostPlusEntry@1100525000 : Record 11012825;IForceChargeable@1100528600 : Boolean);
    VAR
      lvCostPlusRec2@1100485008 : Record 11012825;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
      lvUnitFactor@1100485002 : Decimal;
      UnitControl@1100485003 : Codeunit 5402;
    BEGIN
      lvCostObject := '';
      lvRemovalContribution := 0;

      IF ServiceOrderCostPlusEntry."Trade Item" <> '' THEN BEGIN
        IF lvTradeItemRec.GET(ServiceOrderCostPlusEntry."Vendor (Trade Item)", ServiceOrderCostPlusEntry."Trade Item") THEN BEGIN  //C024844
          lvCostObject := lvTradeItemRec."Cost Object (Removal)";
          lvRemovalContribution := lvTradeItemRec."Removal Contribution";
        END;
        IF lvRemovalContribution <> 0 THEN BEGIN
          lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
          IF lvTradeItemRec."Application Unit" = ServiceOrderCostPlusEntry."Unit of Measure" THEN
            lvUnitFactor := 1
          ELSE
            lvUnitFactor := lvTradeItemRec."Qty. per Unit of Measure";
        END;
      END ELSE BEGIN
        IF ServiceOrderCostPlusEntry."Item No." <> '' THEN BEGIN
          IF lvItemRec.GET(ServiceOrderCostPlusEntry."Item No.") THEN BEGIN  //C024844
            lvCostObject := lvItemRec."Cost Object (Removal)";
            lvRemovalContribution := lvItemRec."Removal Contribution";
          END;
          IF lvRemovalContribution <> 0 THEN BEGIN
            lvItemRec.TESTFIELD("Cost Object (Removal)");
            lvUnitFactor := UnitControl.GetQtyPerUnitOfMeasure(lvItemRec, ServiceOrderCostPlusEntry."Unit of Measure");
          END;
        END;
      END;

      IF lvRemovalContribution <> 0 THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE,'');
        lvCostPlusRec2.INIT;
        lvCostPlusRec2.VALIDATE("Service Order No.", ServiceOrderCostPlusEntry."Service Order No.");
        lvCostPlusRec2."Line No." := ServiceOrderCostPlusEntry."Line No.";
        REPEAT
          lvCostPlusRec2."Line No." := lvCostPlusRec2."Line No." + 1;
        UNTIL lvCostPlusRec2.INSERT(TRUE);

        lvCostPlusRec2."Service Location No." := ServiceOrderCostPlusEntry."Service Location No.";
        lvCostPlusRec2."Cost Object" := DimValRec.Code;
        lvCostPlusRec2.Description := DimValRec.Name;
        lvCostPlusRec2.Quantity := ServiceOrderCostPlusEntry.Quantity * lvUnitFactor;
        lvCostPlusRec2."Unit of Measure" := DimValRec."Unit of Measure";
        lvCostPlusRec2.VALIDATE("Cost Component", DimValRec."Cost Component");
        lvCostPlusRec2."Basic Price (LCY)" := lvRemovalContribution;
        lvCostPlusRec2.CalculateFCYFromLCY(lvCostPlusRec2.FIELDNO("Basic Price (LCY)"));  //DP00887
        lvCostPlusRec2.VALIDATE("Surcharge %", 0);
        lvCostPlusRec2."Sales Price (LCY)" := lvCostPlusRec2."Basic Price (LCY)" * (1 + lvCostPlusRec2."Surcharge %"/100);
        lvCostPlusRec2.CalculateFCYFromLCY(lvCostPlusRec2.FIELDNO("Sales Price (LCY)"));  //DP00887
        lvCostPlusRec2.GetDiscountPerc;
        lvCostPlusRec2."Posting Date" := ServiceOrderCostPlusEntry."Posting Date";
        lvCostPlusRec2."Execution Date" := ServiceOrderCostPlusEntry."Execution Date";
        lvCostPlusRec2."Additional Cost" := ServiceOrderCostPlusEntry."Additional Cost";
        lvCostPlusRec2."VAT Prod. Posting Group" := ServiceOrderCostPlusEntry."VAT Prod. Posting Group";
        lvCostPlusRec2."Removal Contribution" := TRUE;
        lvCostPlusRec2."Attached to Line No. (RC)" := ServiceOrderCostPlusEntry."Line No.";
        lvCostPlusRec2.Chargeable := ServiceOrderCostPlusEntry.Chargeable;  //C024476
        IF IForceChargeable THEN
          lvCostPlusRec2.Chargeable := TRUE;
        lvCostPlusRec2.MODIFY;
      END;
    END;

    PROCEDURE GetCostPrice@1100485008();
    VAR
      lvHourLineRec@1100485000 : Record 11012039;
    BEGIN
      IF ("Entry No. Service Ledger" = 0) AND NOT "FSA-Created Entry" THEN
        EXIT;

      IF ("Employee No." <> xRec."Employee No.") OR
         ("Service Order No." <> xRec."Service Order No.") OR
         ("Service Contract No." <> xRec."Service Contract No.") OR
         ("Hour Rate Code" <> xRec."Hour Rate Code") OR
         ("Wage Component" <> xRec."Wage Component") OR
         ("Cost Component" <> xRec."Cost Component") OR
         ("Cost Object" <> xRec."Cost Object") THEN
      BEGIN
        lvHourLineRec.INIT;
        lvHourLineRec.Type := lvHourLineRec.Type::Service;
        lvHourLineRec."Employee No." := "Employee No.";
        lvHourLineRec."Service Order No." := "Service Order No.";
        lvHourLineRec."Service Contract No." := "Service Contract No.";
        lvHourLineRec."Posting Date" := TODAY;  //instead of "Posting Date";
        //lvHourLineRec."Plant Rate Code" := "Hour Rate Code"; //* "Hour Rate Code" is not the same as "Plant Rate Code"
        lvHourLineRec."Wage Component" := "Wage Component";
        lvHourLineRec."Cost Component" := "Cost Component";
        lvHourLineRec."Cost Object" := "Cost Object";
        lvHourLineRec."Cost Type" := lvHourLineRec."Cost Type"::Labor;
        IF EmplRec.GET("Employee No.") THEN
          lvHourLineRec.External := EmplRec.External;
        lvHourLineRec.CalcRateAndAmount;
        "Cost Price (LCY)" := lvHourLineRec."Unit Cost (LCY)";
        CalculateFCYFromLCY(FIELDNO("Cost Price (LCY)"));  //DP00887
      END;
    END;

    PROCEDURE CheckSourceDocument@1100485009();
    VAR
      lvHourLineRec@1100485000 : Record 11012039;
      lvPurchLineRec@1100485001 : Record 39;
    BEGIN
      IF ("Source Document" = '') OR ("Source Line" = 0) THEN EXIT;

      CALCFIELDS("Cost Type");
      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        lvHourLineRec.SETCURRENTKEY("Document No.", "Employee No.");
        lvHourLineRec.SETRANGE("Document No.", "Source Document");
        lvHourLineRec.SETRANGE("Line No.", "Source Line");
        lvHourLineRec.SETRANGE("Employee No.", "Employee No.");
        lvHourLineRec.MODIFYALL("Cost Plus Entry Created", FALSE);
      END ELSE BEGIN
        lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::Order);
        lvPurchLineRec.SETRANGE("Document No.", "Source Document");
        lvPurchLineRec.SETRANGE("Line No.", "Source Line");
        lvPurchLineRec."Modified by" := USERID; //DP00469
        lvPurchLineRec."Last Date Modified" := TODAY;//DP00469
        lvPurchLineRec.MODIFYALL("Cost Plus Entry Created", FALSE);
      END;
    END;

    PROCEDURE GetContractDiscount@1100485014();
    VAR
      ServiceSetup@1100528607 : Record 11012800;
      ServiceOrder@1100528606 : Record 11012823;
      ServiceContractDiscountTerm@1100528605 : Record 11012828;
      ContractObject@1100528604 : Record 11071702;
      StartDate@1100528603 : Date;
      EndDate@1100528602 : Date;
      ServicePackage@1100528601 : Code[10];
      InFilterGroup@1100528600 : Boolean;
    BEGIN
      IF OverruleServiceContractNo <> '' THEN
        "Service Contract No." := OverruleServiceContractNo
      ELSE BEGIN
        IF CURRENTCOMPANY = COMPANYNAME THEN
          CALCFIELDS("Service Contract No.")
        ELSE BEGIN
          ServiceOrder.CHANGECOMPANY(CURRENTCOMPANY);
          IF ServiceOrder.GET("Service Order No.") THEN
            "Service Contract No." := ServiceOrder."Service Contract No.";
        END;
      END;
      IF "Service Contract No." = '' THEN
        EXIT;

      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        ServContractRec.CHANGECOMPANY(CURRENTCOMPANY);
        ServiceSetup.CHANGECOMPANY(CURRENTCOMPANY);
        ServiceContractDiscountTerm.CHANGECOMPANY(CURRENTCOMPANY);
        ContractObject.CHANGECOMPANY(CURRENTCOMPANY);
      END;

      ServContractRec.GET("Service Contract No.");
      ServContractRec.TESTFIELD("Starting Date");

      ServiceSetup.GET;
      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;

      IF ServiceOrder."Charge Vendor (Warranty)" THEN
        EXIT;

      ServiceContractDiscountTerm.SETRANGE("Service Contract No.", ServContractRec."No.");
      ServiceContractDiscountTerm.SETRANGE(Level, ServiceContractDiscountTerm.Level::Line);
      ServicePackage := GetServicePackage();
      IF ServicePackage = '' THEN
        EXIT;
      IF "Cost Object" = '' THEN
        EXIT;
      ServiceContractDiscountTerm.SETRANGE("Service Package", ServicePackage);

      IF ServiceSetup."Contract Discount Level" = ServiceSetup."Contract Discount Level"::SourceType THEN
        ServiceContractDiscountTerm.SETFILTER("Source Type", '%1|%2', ServiceContractDiscountTerm."Source Type"::None, ServiceOrder."Source Type");
      IF ServiceSetup."Contract Discount Level" = ServiceSetup."Contract Discount Level"::CostComponent THEN
        IF "Cost Component" <> '' THEN
          ServiceContractDiscountTerm.SETRANGE("Cost Component", "Cost Component");

      ServiceContractDiscountTerm.SETFILTER("Cost Type", '%1|%2', ServiceContractDiscountTerm."Cost Type"::" ", "Cost Type" +1);
      ServiceContractDiscountTerm.SETFILTER("Cost Object", '%1|%2', '', "Cost Object");

      IF ServiceSetup."Contract Discount Level" = ServiceSetup."Contract Discount Level"::SourceType THEN
        IF ServiceContractDiscountTerm.ISEMPTY THEN
          ServiceContractDiscountTerm.SETRANGE("Source Type", ServiceContractDiscountTerm."Source Type"::None);

      "Discount % (ServContr)" := 0;
      IF ServiceContractDiscountTerm.FINDSET THEN BEGIN
        REPEAT
          IF ServiceContractDiscountTerm."Starting Date Discount" <> 0D THEN
            StartDate := ServiceContractDiscountTerm."Starting Date Discount"
          ELSE
            IF ContractObject.GET(ServContractRec."No.", "Object No.") THEN
              StartDate := ContractObject."Starting Date"
            ELSE
              StartDate := ServContractRec."Starting Date";
          IF FORMAT(ServiceContractDiscountTerm."Discount Period") <> '' THEN
            EndDate := CALCDATE(ServiceContractDiscountTerm."Discount Period", StartDate)
          ELSE
            IF ContractObject.GET(ServContractRec."No.", "Object No.") THEN
              EndDate := ContractObject."Ending Date"
            ELSE
              EndDate := ServContractRec."Ending Date";

          IF ("Posting Date" >= StartDate) THEN
            IF ("Posting Date" <= EndDate) OR (EndDate = 0D) THEN BEGIN
              InFilterGroup :=
                IsInFilterGroup(Rec, ServiceContractDiscountTerm."Filter Group") AND
                IsInFilterGroup(Rec, ServiceContractDiscountTerm."Filter Group 2");
              IF (ServiceContractDiscountTerm.Percentage >= "Discount % (ServContr)") AND
                 (((ServiceContractDiscountTerm."Filter Groups Method" =
                    ServiceContractDiscountTerm."Filter Groups Method"::Exclude) AND
                    NOT InFilterGroup) OR
                   ((ServiceContractDiscountTerm."Filter Groups Method" =
                     ServiceContractDiscountTerm."Filter Groups Method"::Include) AND
                    InFilterGroup))
              THEN
                CASE TRUE OF
                  ServiceContractDiscountTerm."Invoice Base Method" =
                    ServiceContractDiscountTerm."Invoice Base Method"::" ":
                    BEGIN
                      "Discount % (ServContr)" := ServiceContractDiscountTerm.Percentage;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method" =
                    ServiceContractDiscountTerm."Invoice Base Method"::"total>base":
                    BEGIN
                      IF ServiceContractDiscountTerm."Invoice Base" > 0 THEN
                        IF "Sales Price (LCY)" * Quantity * DimensionalFactor <= ServiceContractDiscountTerm."Invoice Base" THEN
                          "Discount % (ServContr)" := ServiceContractDiscountTerm.Percentage;
                      IF ServiceContractDiscountTerm."Invoice Base Quantity" > 0 THEN
                        IF Quantity <= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                          "Discount % (ServContr)" := ServiceContractDiscountTerm.Percentage;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method" =
                    ServiceContractDiscountTerm."Invoice Base Method"::"total<base":
                    BEGIN
                      IF ServiceContractDiscountTerm."Invoice Base" > 0 THEN
                        IF "Sales Price (LCY)" * Quantity * DimensionalFactor >= ServiceContractDiscountTerm."Invoice Base" THEN
                          "Discount % (ServContr)" := ServiceContractDiscountTerm.Percentage;
                      IF ServiceContractDiscountTerm."Invoice Base Quantity" > 0 THEN
                        IF Quantity >= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                          "Discount % (ServContr)" := ServiceContractDiscountTerm.Percentage;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method" =
                    ServiceContractDiscountTerm."Invoice Base Method"::"total-base":
                    BEGIN
                      IF (ServiceContractDiscountTerm."Invoice Base" = 0) AND
                         (ServiceContractDiscountTerm."Invoice Base Quantity" = 0) THEN
                      BEGIN
                        "Discount % (ServContr)" := ServiceContractDiscountTerm.Percentage;
                      END ELSE BEGIN
                        CASE TRUE OF
                          (ServiceContractDiscountTerm."Invoice Base" > 0) AND
                          ("Sales Price (LCY)" * Quantity * DimensionalFactor > ServiceContractDiscountTerm."Invoice Base"):
                            BEGIN
                              "Invoice Price (LCY)" := "Sales Price (LCY)" * Quantity * DimensionalFactor - ServiceContractDiscountTerm."Invoice Base";
                              VALIDATE("Invoice Price (LCY)",
                                ROUND("Invoice Price (LCY)", GetRoundingFactor(RoundOption::Amount,FALSE)));  //C012946
                              "Discount % (ServContr)" := "Discount % (ServOrder)";
                            END;
                          (ServiceContractDiscountTerm."Invoice Base Quantity" > 0) AND
                          (Quantity > ServiceContractDiscountTerm."Invoice Base Quantity"):
                            BEGIN
                              "Invoice Price (LCY)" :=
                                "Sales Price (LCY)" * (Quantity - ServiceContractDiscountTerm."Invoice Base Quantity");
                              VALIDATE("Invoice Price (LCY)",
                                ROUND("Invoice Price (LCY)", GetRoundingFactor(RoundOption::Amount,FALSE)));  //C012946
                              "Discount % (ServContr)" := "Discount % (ServOrder)";
                            END
                        ELSE
                          "Discount % (ServContr)" := ServiceContractDiscountTerm.Percentage;
                        END;
                        CalculateFCYFromLCY(FIELDNO("Invoice Price (LCY)"));  //DP00887
                      END;
                    END;
                END;
            END;
          IF "Discount % (ServContr)" <> 0 THEN BEGIN
            "Discount Term Level" := ServiceContractDiscountTerm.Level +1;
            "Service Package" := ServiceContractDiscountTerm."Service Package";
            "Discount Term Line No." := ServiceContractDiscountTerm."Line No.";
          END;
        UNTIL ServiceContractDiscountTerm.NEXT = 0;
      END;
    END;

    PROCEDURE GetWarrantyDiscount@1100485011();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceObject@1100528601 : Record 11071691;
      ServWarrDiscountTerm@1100528602 : Record 11071811;
      BilltoVendorNo@1100525000 : Code[20];
      WarrantyExpirationDate@1100528603 : Date;
    BEGIN
      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;

      "Discount % (Warranty)" := 0;
      IF ServiceObject.GET("Object No.") THEN BEGIN
        IF NOT ServiceObject.VendorWillBeCharged("Service Order No.", "Posting Date", BilltoVendorNo) THEN BEGIN
          IF (ServiceObject."Warranty Code Customer" <> '') AND (ServiceObject."Warranty Starting Date Cust." <> 0D) THEN BEGIN
            ServWarrDiscountTerm.SETRANGE("Warranty Code", ServiceObject."Warranty Code Customer");
            IF ServWarrDiscountTerm.FINDSET THEN
              REPEAT
                WarrantyExpirationDate := ServiceObject."Warranty Exp. Date Customer";
                IF (WarrantyExpirationDate = 0D) AND (FORMAT(ServWarrDiscountTerm.Period) <> '') THEN
                  WarrantyExpirationDate := CALCDATE(ServWarrDiscountTerm.Period, ServiceObject."Warranty Starting Date Cust.");
                IF ServWarrDiscountTermIsApplicable(
                  ServWarrDiscountTerm, ServiceObject."Warranty Starting Date Cust.", WarrantyExpirationDate)
                THEN BEGIN
                  "Discount % (Warranty)" := ServWarrDiscountTerm.Percentage;
                  "Warranty Code" := ServWarrDiscountTerm."Warranty Code";
                END;
              UNTIL ServWarrDiscountTerm.NEXT = 0;
          END;
        END ELSE BEGIN
          IF (ServiceObject."Warranty Code Vendor" <> '') AND (ServiceObject."Warranty Starting Date Vendor" <> 0D) THEN BEGIN
            ServWarrDiscountTerm.SETRANGE("Warranty Code", ServiceObject."Warranty Code Vendor");
            IF ServWarrDiscountTerm.FINDSET THEN
              REPEAT
                WarrantyExpirationDate := ServiceObject."Warranty Exp. Date Vendor";
                IF (WarrantyExpirationDate = 0D) AND (FORMAT(ServWarrDiscountTerm.Period) <> '') THEN
                  WarrantyExpirationDate := CALCDATE(ServWarrDiscountTerm.Period, ServiceObject."Warranty Starting Date Vendor");
                IF ServWarrDiscountTermIsApplicable(
                  ServWarrDiscountTerm, ServiceObject."Warranty Starting Date Vendor", WarrantyExpirationDate)
                THEN BEGIN
                  "Discount % (Warranty)" := ServWarrDiscountTerm.Percentage;
                  "Warranty Code" := ServWarrDiscountTerm."Warranty Code";
                END;
              UNTIL ServWarrDiscountTerm.NEXT = 0;
            "Discount % (Warranty)" := 100 - "Discount % (Warranty)";
          END;
        END;
      END ELSE
        GetWarrantyDiscountBasedOnServiceOrder(ServiceOrder);
    END;

    LOCAL PROCEDURE GetWarrantyDiscountBasedOnServiceOrder@1100528400(ServiceOrder@1100528400 : Record 11012823);
    VAR
      ServWarrDiscountTerm@1100528401 : Record 11071811;
      WarrantyStartingDate@1100528402 : Date;
      WarrantyExpirationDate@1100528403 : Date;
    BEGIN
      IF ServiceOrder."Service Warranty Code" = '' THEN
        EXIT;
      IF ServiceOrder."Charge Vendor (Warranty)" THEN
        EXIT;
      WarrantyStartingDate := ServiceOrder.GetStartingDate;
      IF WarrantyStartingDate = 0D THEN
        EXIT;

      ServWarrDiscountTerm.SETRANGE("Warranty Code", ServiceOrder."Service Warranty Code");
      IF ServWarrDiscountTerm.FINDSET THEN
        REPEAT
          WarrantyExpirationDate := CALCDATE(ServWarrDiscountTerm.Period, WarrantyStartingDate);
          IF ServWarrDiscountTermIsApplicable(
            ServWarrDiscountTerm, WarrantyStartingDate, WarrantyExpirationDate)
          THEN BEGIN
            "Discount % (Warranty)" := ServWarrDiscountTerm.Percentage;
            "Warranty Code" := ServWarrDiscountTerm."Warranty Code";
          END;
        UNTIL ServWarrDiscountTerm.NEXT = 0;
    END;

    LOCAL PROCEDURE ServWarrDiscountTermIsApplicable@1100528406(ServWarrDiscountTerm@1100528402 : Record 11071811;WarrantyStartingDate@1100528400 : Date;WarrantyExpirationDate@1100528401 : Date) : Boolean;
    BEGIN
      IF ("Posting Date" >= WarrantyStartingDate) AND
         ((WarrantyExpirationDate = 0D) OR ("Posting Date" <= WarrantyExpirationDate)) AND
         ((ServWarrDiscountTerm."Cost Type" = ServWarrDiscountTerm."Cost Type"::" ") OR
          ("Cost Type" + 1 = ServWarrDiscountTerm."Cost Type")) AND
         (ServWarrDiscountTerm.Percentage > "Discount % (Warranty)")
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE DrillDownDiscount@1100485010(lvAction@1100485000 : Integer);
    VAR
      lvServContrDiscRec@1100485003 : Record 11012828;
      lvFrmDiscContract@1100485001 : Page 11012836;
      ServiceObjectInfoMgt@1100528601 : Codeunit 11012840;
      ServiceOrderInfoMgt@1100528400 : Codeunit 11012841;
      WarrantyType@1100528600 : 'Customer,Vendor';
    BEGIN
      ServOrderRec.GET("Service Order No.");
      IF lvAction = 0 THEN BEGIN
        IF ServOrderRec."Charge Vendor (Warranty)" THEN
          EXIT;
        lvServContrDiscRec.SETRANGE("Service Contract No.", ServOrderRec."Service Contract No.");
        lvServContrDiscRec.SETRANGE("Service Package", GetServicePackage());
        CLEAR(lvFrmDiscContract);
        lvFrmDiscContract.SETTABLEVIEW(lvServContrDiscRec);
        lvFrmDiscContract.EDITABLE(FALSE);
        lvFrmDiscContract.RUNMODAL;
      END;
      IF lvAction = 1 THEN BEGIN
        WarrantyType := WarrantyType::Customer;
        IF ServOrderRec."Charge Vendor (Warranty)" THEN
          WarrantyType := WarrantyType::Vendor;
        IF "Object No." <> '' THEN
          ServiceObjectInfoMgt.ShowActiveWarrantyDiscTerms("Object No.", "Posting Date", "Cost Type" + 1, WarrantyType)
        ELSE
          ServiceOrderInfoMgt.ShowActiveWarrantyDiscTerms(
            "Service Order No.", "Posting Date", "Cost Type" + 1, WarrantyType, FALSE);
      END;
    END;

    PROCEDURE CheckItemLine@1210190015() : Boolean;
    BEGIN
      EXIT(("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> ''));
    END;

    PROCEDURE GetHourRateCode@1100485018();
    VAR
      TradeAssociation@1100526000 : Code[20];
      HourRateCodeTradeAssociation@1100526002 : Code[20];
      HourRateCodeCostObject@1100526001 : Code[20];
      HourRateCode@1100526003 : Code[20];
    BEGIN
      IF (CurrFieldNo = FIELDNO("Hour Rate Code")) OR ValidateHourRateCode THEN
        EXIT;
      ValidateHourRateCode := FALSE;

      ServSetup.GET;

      CALCFIELDS("Cost Type");
      IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
        TradeAssociation := "Trade Association";
        IF EmplRec.GET("Employee No.") THEN
          IF EmplRec."Trade Association" <> '' THEN
            TradeAssociation := EmplRec."Trade Association";
        HourRateCodeTradeAssociation := DetermineHourRateCodeBasedOnTradeAssociation(TradeAssociation);

        IF ("Cost Object" <> '') THEN BEGIN
          DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
          IF DimValRec."Hour Rate Code (Cost Plus)" <> '' THEN
            HourRateCodeCostObject := DimValRec."Hour Rate Code (Cost Plus)";
        END;

        IF (ServSetup."Get Hour Rate Sequence" = ServSetup."Get Hour Rate Sequence"::TradeGroup_CostObject) THEN BEGIN
          HourRateCode := HourRateCodeTradeAssociation;
          IF HourRateCode = '' THEN
            HourRateCode := HourRateCodeCostObject;
        END ELSE BEGIN
          HourRateCode := HourRateCodeCostObject;
          IF HourRateCode = '' THEN
            HourRateCode := HourRateCodeTradeAssociation;
        END;

        IF HourRateCode <> "Hour Rate Code" THEN
          VALIDATE("Hour Rate Code", HourRateCode);
      END;
    END;

    LOCAL PROCEDURE DetermineHourRateCodeBasedOnTradeAssociation@1100528401(TradeAssociationCode@1100528400 : Code[10]) HourRateCode : Code[10];
    VAR
      TradeAssociation@1100528401 : Record 11012015;
      RatebyTradeAssWageComp@1100528402 : Record 11012086;
    BEGIN
      IF NOT TradeAssociation.GET(TradeAssociationCode) THEN
        TradeAssociation.INIT;  //db, 06-09-18
      IF NOT RatebyTradeAssWageComp.GET(TradeAssociationCode, "Wage Component") THEN
        RatebyTradeAssWageComp.INIT;  //db, 06-09-18
      HourRateCode := RatebyTradeAssWageComp."Hour Rate Code";
      IF HourRateCode = '' THEN
        HourRateCode := TradeAssociation."Hour Rate Code (Cost Plus)";
    END;

    PROCEDURE SetValidateHourRateCode@1100525000(lValidateHourRateCode@1100525000 : Boolean);
    BEGIN
      ValidateHourRateCode := lValidateHourRateCode;
    END;

    PROCEDURE GetSalesDiscount@1100525003();
    BEGIN
      IF "Gross Price (LCY)" <> 0 THEN
        "Sales Discount % (Item)" := (("Gross Price (LCY)" - "Basic Price (LCY)") / "Gross Price (LCY)") * 100;
    END;

    PROCEDURE GetPurchaseDiscount@1100525004();
    BEGIN
      IF "Gross Price (LCY)" <> 0 THEN
        "Purchase Discount % (Item)" := (("Gross Price (LCY)" - "Cost Price (LCY)") / "Gross Price (LCY)") * 100;
      IF NOT CheckItemLine THEN
        "Purchase Discount % (Item)" := 0;
    END;

    PROCEDURE GetExtraCostLines@1100525001();
    VAR
      ExtraCost@1100525000 : Record 11020344;
      CostPlusEntry@1100525001 : Record 11012825;
      LastLineNo@1100525002 : Integer;
    BEGIN
      ExtraCost.SETRANGE("Entity Type", ExtraCost."Entity Type"::"Service Order");
      ExtraCost.SETRANGE("Entity Code", "Service Order No.");
      IF ExtraCost.FINDSET THEN BEGIN
        CostPlusEntry.RESET;
        CostPlusEntry.SETRANGE("Service Order No.", "Service Order No.");
        IF CostPlusEntry.FINDLAST THEN
          LastLineNo := CostPlusEntry."Line No."
        ELSE
          LastLineNo := 0;

        REPEAT
          CostPlusEntry.INIT;
          CostPlusEntry.VALIDATE("Service Order No.", "Service Order No.");
          CostPlusEntry."Line No." := LastLineNo + 10000;
          LastLineNo := CostPlusEntry."Line No.";
          CostPlusEntry.VALIDATE("Cost Object", ExtraCost."Cost Object");
          CostPlusEntry.VALIDATE(Description, ExtraCost.Description);
          CostPlusEntry.VALIDATE(Quantity, ExtraCost.Quantity);
          CostPlusEntry.VALIDATE("Unit of Measure", ExtraCost."Unit of Measure");
          CostPlusEntry.VALIDATE("Basic Price (LCY)", ExtraCost.Amount);
          CostPlusEntry."Extra Cost" := TRUE;
          CostPlusEntry.INSERT(TRUE);
        UNTIL ExtraCost.NEXT = 0;
      END;
    END;

    PROCEDURE GetExtraCostLinesByContract@1100528606();
    VAR
      ExtraCost@1100525000 : Record 11020344;
      CostPlusEntry@1100525001 : Record 11012825;
      ServiceOrder@1100528600 : Record 11012823;
      LastLineNo@1100525002 : Integer;
    BEGIN
      CALCFIELDS("Service Contract No.");

      CostPlusEntry.SETRANGE("Service Order No.", "Service Order No.");
      CostPlusEntry.SETRANGE("Extra Cost", TRUE);
      IF CostPlusEntry.FINDFIRST THEN
        CostPlusEntry.DELETEALL;

      IF "Service Contract No." = '' THEN EXIT;

      ServiceOrder.GET("Service Order No.");
      ExtraCost.SETRANGE("Entity Type", ExtraCost."Entity Type"::"Service Contract");
      ExtraCost.SETRANGE("Entity Code", "Service Contract No.");
      ExtraCost.SETFILTER("Apply at Source Type", '%1|%2',
        ServiceOrder."Source Type", ExtraCost."Apply at Source Type"::"All Source Types");
      ExtraCost.SetPostCodeGroupFilter(ServiceOrder.GetPostCodeGroupCode);
      IF ExtraCost.FINDSET THEN BEGIN
        CostPlusEntry.RESET;
        CostPlusEntry.SETRANGE("Service Order No.", "Service Order No.");
        IF CostPlusEntry.FINDLAST THEN
          LastLineNo := CostPlusEntry."Line No."
        ELSE
          LastLineNo := 0;

        REPEAT
          CostPlusEntry.INIT;
          CostPlusEntry.VALIDATE("Service Order No.", "Service Order No.");
          CostPlusEntry."Line No." := LastLineNo + 10000;
          LastLineNo := CostPlusEntry."Line No.";
          CostPlusEntry.VALIDATE("Cost Object", ExtraCost."Cost Object");
          CostPlusEntry.VALIDATE(Description, ExtraCost.Description);
          CostPlusEntry.VALIDATE(Quantity, ExtraCost.Quantity);
          CostPlusEntry.VALIDATE("Unit of Measure", ExtraCost."Unit of Measure");
          CostPlusEntry.VALIDATE("Basic Price (LCY)", ExtraCost.Amount);
          CostPlusEntry."Extra Cost" := TRUE;
          CostPlusEntry.INSERT(TRUE);
        UNTIL ExtraCost.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateAttachedLine@1100525011();
    VAR
      CostPlusEntry@1100525000 : Record 11012825;
    BEGIN
      //C024476
      IF "Line No." = 0 THEN EXIT;  //C028952
      CostPlusEntry.SETRANGE("Service Order No.", "Service Order No.");
      CostPlusEntry.SETRANGE("Attached to Line No. (RC)", "Line No.");
      IF CostPlusEntry.FINDSET THEN BEGIN
        REPEAT
          CostPlusEntry.VALIDATE(Quantity, Quantity);
          CostPlusEntry.Chargeable := Chargeable;
          CostPlusEntry."Posting Date" := "Posting Date";
          CostPlusEntry."Execution Date" := "Execution Date";
          CostPlusEntry."Additional Cost" := "Additional Cost";
          CostPlusEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
          CostPlusEntry.MODIFY;
        UNTIL CostPlusEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CheckRemovalContribution@1100525002();
    VAR
      lvCostPlusRec@1100525000 : Record 11012825;
    BEGIN
      lvCostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
      lvCostPlusRec.SETRANGE("Attached to Line No. (RC)", "Line No.");
      lvCostPlusRec.SETRANGE("Removal Contribution", TRUE);
      lvCostPlusRec.DELETEALL;
    END;

    PROCEDURE CheckAdditionalCostService@1100525017();
    BEGIN
      IF "Service Order No." = '' THEN
        EXIT;
      IF NOT ServOrderRec.GET("Service Order No.") THEN
        EXIT;

      IF NOT "Add. Cost Changed Manually" THEN
        IF "Charge to Plant Location" AND (ServOrderRec."Plant Number" <> '') THEN
          "Additional Cost" := FALSE
        ELSE
          "Additional Cost" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Cost Object","Cost Type" + 1, '', Rec);

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Cost Object")) THEN BEGIN
        IF xRec."Cost Object" = '' THEN
          xRec."Cost Type":= -1  //disable default option
        ELSE
          xRec.CALCFIELDS("Cost Type");
        CALCFIELDS("Cost Type");
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE ValidateAdditionalCost@1100525007();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      SaveCostComp := "Cost Component";
      IF CurrFieldNo = FIELDNO("Additional Cost") THEN
        "Add. Cost Changed Manually" := TRUE;
      TESTFIELD("Service Order No.");
      IF "Additional Cost" THEN
        TESTFIELD("Charge to Plant Location", FALSE);
      VALIDATE("Service Order No.");
      IF (CurrFieldNo <> FIELDNO("Additional Cost")) AND
         (CurrFieldNo <> FIELDNO("Charge to Plant Location"))
      THEN
        EXIT;

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
        "Cost Component" := SaveCostComp;
        IF "Additional Cost" THEN BEGIN
          IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
            "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
        END ELSE BEGIN
          CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
          IF CostCompRec.FINDSET THEN
            REPEAT
              IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                "Cost Component" := CostCompRec.Code;
            UNTIL CostCompRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525006();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN
        EXIT;

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN
            EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN
            EXIT;
        END;
        "Additional Cost" := CostCompRec."Additional Cost (Service)";
        IF "Additional Cost" AND "Charge to Plant Location" THEN BEGIN
          "Charge to Plant Location" := FALSE;
          IF "Service Order No." = '' THEN
            EXIT;
          IF NOT ServOrderRec.GET("Service Order No.") THEN
            EXIT;
          IF ServOrderRec."Plant Number" = '' THEN
            EXIT;
          CostCompRec.TESTFIELD("Additional Cost (Service)", FALSE);
        END;
      END;
    END;

    PROCEDURE GenerateCostPlusFromServEntry@1100530000(ServEntryRec@1100530007 : Record 11012819;ConvertUnit@1100530012 : Boolean;AutoTranslate@1100530014 : Boolean;SerialNo@1100528501 : Code[40];LotNo@1100528500 : Code[20]);
    VAR
      CostPlusRec@1100530000 : Record 11012825;
      TradeItemRec@1100530011 : Record 11012317;
      BasicItemRec@1100530010 : Record 11012316;
      ItemRec@1100530009 : Record 27;
      HumanResourcesSetup@1210190000 : Record 5218;
      JobsSetup@1100525003 : Record 315;
      ItemTranslation@1210190004 : Record 30;
      ServiceLocation@1210190005 : Record 11012801;
      CostPriceLCY@1100530005 : Decimal;
      lvMissUnit@1100530004 : Boolean;
      lvUnitFactor@1100530003 : Decimal;
      QtyPerUnitOfMeas@1100409000 : Decimal;
      lvItemUnknown@1100530002 : Boolean;
      lvQuantity@1100530001 : Decimal;
      LastEntryNo@1100530006 : Integer;
      HistCostPriceItem@1210190002 : Boolean;
      HistCostPriceCostObject@1210190001 : Boolean;
      UOMMgt@1210190003 : Codeunit 5402;
      CostPriceFCY@1100525000 : Decimal;
      CostPlusRec2@1100525001 : Record 11012825;
      SavePurchPerc@1100525002 : Decimal;
      lvServiceOrderExtension@1101285000 : Record 11071727;
      lvSurchargeIfMissingArticles@1101285001 : Decimal;
      lvPriceHistoryFound@1101285002 : Boolean;
      lvPriceFactor@1101285003 : Decimal;
      lvGrossPrice@1101285004 : Decimal;
      lvSkipCalcInventoryPrice@1101285005 : Boolean;
    BEGIN
      //db, 10-01-11: M22696 (removed from report 11012801)
      JobsSetup.GET;
      ServSetup.GET;
      HumanResourcesSetup.GET;

      HistCostPriceItem := JobsSetup."Copy Price Item from Entry";
      HistCostPriceCostObject := JobsSetup."Copy Price C.Object from Entry";

      WITH ServEntryRec DO BEGIN
        CostPlusRec.SETRANGE("Service Order No.", "Service Order No.");
        CostPlusRec.SETRANGE("Line No.");
        IF CostPlusRec.FINDLAST THEN
          LastEntryNo := CostPlusRec."Line No."
        ELSE
          LastEntryNo := 0;

        CostPlusRec.INIT;
        CostPlusRec.VALIDATE("Service Order No.", "Service Order No.");
        CostPlusRec."Line No." := LastEntryNo + 10000;
        CostPlusRec.INSERT(TRUE);

        //>> 160609 ITERO.SB Set CurrFieldNo to zero when generate cost plus entries, to get correct value in GetDescription function.
        CostPlusRec.SetCurrFieldNoToZero;
        //<<

        //C024844.sn
        IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
          "Vendor (Trade Item)" := '';
          "Trade Item" := '';
        END;
        IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BEGIN
          "Basic Item" := '';
          Manufacturer := '';
        END;
        //C024844.en

        CostPlusRec."Execution Date" := "Execution Date";
        IF CostPlusRec."Execution Date" = 0D THEN
          CostPlusRec."Execution Date" := "Posting Date";

        IF "Execution Date" <> 0D THEN
          CostPlusRec."Posting Date" := "Execution Date"
        ELSE
          CostPlusRec."Posting Date" := "Posting Date";

        CostPlusRec.CALCFIELDS("Service Contract No.");
        //DP00887.sn
        CostPlusRec."Currency Code Costs" := "Currency Code";
        //C039256.sn
        //When a purchase invoice is posted in two steps, the foreign currency may not be on the Service ledger entry.
        //So an extra step is made to check the invoice- currency.
        IF ("Currency Code" = '') AND ("Document Line No." = 0) THEN
          CostPlusRec."Currency Code Costs" := CheckDocumentCurrency("Document Type", "Document No.");
        //C039256.en
        //The Currency can not be used because in the the create invoice (11012859) the amount fields are not used as expected. (Because currency of the sales invoice empty/differs)
        //IF ProjSetup."Inherit Currency Code CPE from" = ProjSetup."Inherit Currency Code CPE from"::SourceDocument THEN
        //  IF CostPlusRec."Currency Code Costs" <> '' THEN
        //    CostPlusRec."Currency Code" := CostPlusRec."Currency Code Costs";
        //DP00887.en

        IF Quantity = 0 THEN BEGIN
          IF "Unit Cost (LCY)" <> 0 THEN BEGIN
            lvQuantity := ROUND("Total Cost (LCY)"/ "Unit Cost (LCY)");  //expense (kilometer)
            CostPriceLCY := "Unit Cost (LCY)";
            CostPriceFCY := "Unit Cost";
          END ELSE BEGIN
            lvQuantity := 1;
            CostPriceLCY := "Total Cost (LCY)";
            CostPriceFCY := "Total Cost";
          END;
        END ELSE BEGIN
          lvQuantity := Quantity;
          CostPriceLCY := "Unit Cost (LCY)";
          CostPriceFCY := "Unit Cost";
        END;
        IF "Qty. per Unit of Measure" <> 0 THEN BEGIN
          CostPriceLCY := CostPriceLCY / "Qty. per Unit of Measure";
          CostPriceFCY := CostPriceFCY / "Qty. per Unit of Measure";
        END ELSE BEGIN
          //*32947.sn   db, 21-09-12
          //* In the Service Entry there is no field "Qty. per Unit of Measure" (as in Project Entry, see also T11012019).
          //* So a temp solution is made to determine this field by a function. In future this field will also be added in Service entry
          QtyPerUnitOfMeas := GetUnitFactorItem("Vendor (Trade Item)", "Trade Item", "Item No.", "Unit of Measure Code");
          IF QtyPerUnitOfMeas <> 0 THEN BEGIN
            CostPriceLCY := CostPriceLCY / QtyPerUnitOfMeas;
            CostPriceFCY := CostPriceFCY / QtyPerUnitOfMeas;
          END;
          //*32947.en
        END;

        CostPlusRec.Quantity := lvQuantity;

        CostPlusRec."Unit of Measure" := "Unit of Measure Code";
        CostPlusRec."Employee No." := "Employee No.";
        CostPlusRec."Cost Object" := "Global Dimension 2 Code";
        IF "Global Dimension 2 Code" <> '' THEN
          DimMgt.GetDimValueRec(2, "Global Dimension 2 Code", DimValRec, TRUE, '');
        CostPlusRec.VALIDATE("Cost Component", "Cost Component");
        CostPlusRec."Wage Component" := "Wage Component";
        CostPlusRec."Item No." := "Item No.";
        CostPlusRec."Serial No." := SerialNo;
        CostPlusRec."Lot No." := LotNo;
        CostPlusRec."Basic Item" := "Basic Item";
        CostPlusRec."Trade Item" := "Trade Item";
        CostPlusRec.Manufacturer := Manufacturer;
        CostPlusRec."Vendor (Trade Item)" := "Vendor (Trade Item)";

        //>> 160621 ITERO.AC RFC082 Price Factor for current Cost Type. Just added to make code similar to Project Cost Plus Entry::GenerateCostPlusFromProjEntry
        CostPlusRec.CALCFIELDS("Cost Type");
        lvPriceFactor := 1;   // Possible to implement function for price factor ( if new fields are added in Servide Order Extension similar to fields in Project Principal added in RFC082 )
        CostPlusRec."Cost Price Adjustment" := (lvPriceFactor - 1) * 100;
        //<< 160621 ITERO.AC RFC082
        CostPlusRec.SetValidateHourRateCode(FALSE); //C037674.n
        CostPlusRec.GetBasicPrice;

        IF "Basic Item" <> '' THEN BEGIN
          CostPlusRec."Basic Item" := "Basic Item";
          CostPlusRec.Manufacturer := Manufacturer;
        END;
        IF "Trade Item" <> '' THEN BEGIN
          CostPlusRec."Trade Item" := "Trade Item";
          CostPlusRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        END;
        CostPlusRec.TESTFIELD("Bill-to Customer No.");
        CustRec.GET(CostPlusRec."Bill-to Customer No.");
        IF CostPlusRec.CheckItemLine THEN BEGIN
          //>> 160621 ITERO.AC RFC082 (Similar to changes made by LAHE 130117 and by AC in Project Cost Plus Entry)
          //IF (CostPlusRec."Basic Price (LCY)" = 0) OR (HistCostPriceItem = TRUE) THEN BEGIN  //db, 17-09-09: M14148+16524
          IF NOT CostPlusRec.UseCostPrice(CustRec) THEN BEGIN
            CostPlusRec."Cost Price (LCY)" := CostPriceLCY;  //db, 08-08-11
      //      CostPlusRec.CalculateCostPriceFromLCY;
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Cost Price (LCY)"));
            CostPlusRec."Basic Price Found at" := TABLECAPTION;
          END ELSE BEGIN
            IF lvServiceOrderExtension.GET("Service Order No.") THEN BEGIN
              IF (lvServiceOrderExtension."Item Price Cost Plus Entry" = lvServiceOrderExtension."Item Price Cost Plus Entry"::CostPrice) THEN BEGIN
                IF CostPlusRec."Price History Found" THEN BEGIN
                  CostPlusRec."Cost Price Adjustment" := 0;
                END ELSE BEGIN
                  lvSkipCalcInventoryPrice := TRUE;   // 160816 ITERO.AC Added control variable to avoid inventory price calculation
                  CostPlusRec."Basic Price (LCY)" := CostPriceLCY * lvPriceFactor;
                  CostPlusRec."Gross Price (LCY)" := CostPriceLCY * lvPriceFactor;
      //            CostPlusRec.CalculateBasicPriceFromLCY;
      //            CostPlusRec.CalculateGrossPriceFromLCY;
                  CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));
                  CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Gross Price (LCY)"));
                  IF lvPriceFactor <> 1 THEN
                    CostPlusRec."Basic Price Found at" := Text11128002
                  ELSE
                    CostPlusRec."Basic Price Found at" := TABLECAPTION;
                END;
              END ELSE BEGIN
                lvGrossPrice := 0;
                lvPriceHistoryFound := CheckIfPriceHistoryExists(CostPlusRec."Service Order No.", ServOrderRec."Reference Date (Item)", CostPlusRec."Trade Item", lvGrossPrice);
                IF NOT lvPriceHistoryFound THEN BEGIN
                  lvSurchargeIfMissingArticles := GetSurchargeIfMissingArticles(CostPlusRec."Service Order No.");
                  IF lvSurchargeIfMissingArticles <> 1 THEN BEGIN
                    CostPlusRec."Cost Price Adjustment" := (lvSurchargeIfMissingArticles - 1) * 100;
                    CostPlusRec."Basic Price (LCY)" := CostPriceLCY * lvSurchargeIfMissingArticles;
                    CostPlusRec."Gross Price (LCY)" := CostPriceLCY * lvSurchargeIfMissingArticles;
      //              CostPlusRec.CalculateBasicPriceFromLCY;
      //              CostPlusRec.CalculateGrossPriceFromLCY;
                    CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));
                    CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Gross Price (LCY)"));
                    CostPlusRec."Sales Discount % (Item)" :=0;
                    CostPlusRec."Basic Price Found at" := Text11128001;
                  END;
                END;
              END;
            END;
            //<< 160621 ITERO.AC RFC082
            CostPlusRec."Cost Price (LCY)" := CostPriceLCY;
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Cost Price (LCY)"));
            IF NOT CostPlusRec.ItemPriceCPEisGrossMin(CustRec) THEN BEGIN
              CostPlusRec."Basic Price (LCY)" := CostPriceLCY;
              CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));
              CostPlusRec."Basic Price Found at" := TABLECAPTION;
            END;
          END;
        END;

        IF "Trade Item" <> '' THEN BEGIN
          TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
          IF ConvertUnit = TRUE THEN BEGIN
            IF (UPPERCASE(TradeItemRec."Packaging Unit") = "Unit of Measure Code") AND
               (UPPERCASE(TradeItemRec."Packaging Unit") <> UPPERCASE(TradeItemRec."Application Unit")) THEN
              lvUnitFactor := TradeItemRec."Qty. per Unit of Measure";
          END;
          lvMissUnit := ((UPPERCASE(TradeItemRec."Application Unit") <> "Unit of Measure Code") AND
                         (UPPERCASE(TradeItemRec."Packaging Unit") <> "Unit of Measure Code"));
          IF (lvMissUnit = FALSE) AND
             ((TradeItemRec."Removal Contribution" <> 0) OR
              //>> 160621 ITERO.AC RFC082 (same as LAHE 130117 in Project Cost Plus Entry)
              // CostPlusRec.ItemPriceCPEisGrossMin(CustRec)) THEN BEGIN
              (NOT UseCostPrice(CustRec))) THEN BEGIN
              //<< 160621 ITERO.AC RFC082
            CostPlusRec.VALIDATE("Trade Item", "Trade Item");
            CostPriceLCY := CostPlusRec."Cost Price (LCY)";
            CostPriceFCY := CostPlusRec."Cost Price";
          END ELSE BEGIN
            CostPriceLCY := CostPlusRec."Cost Price (LCY)";
            CostPriceFCY := CostPlusRec."Cost Price";
            CostPlusRec.FindCostPrice(2);
            CostPlusRec.GetSalesDiscount;
          END;
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            BasicItemRec.GET(Manufacturer, "Basic Item");
            IF ConvertUnit = TRUE THEN BEGIN
              IF (UPPERCASE(BasicItemRec."Packaging Unit") = "Unit of Measure Code") AND
                 (UPPERCASE(BasicItemRec."Packaging Unit") <> UPPERCASE(BasicItemRec."Application Unit")) THEN
                lvUnitFactor := BasicItemRec."Qty. per Unit of Measure";
            END;
            lvMissUnit := ((UPPERCASE(BasicItemRec."Application Unit") <> "Unit of Measure Code") AND
                           (UPPERCASE(BasicItemRec."Packaging Unit") <> "Unit of Measure Code"));
            IF (lvMissUnit = FALSE) AND
               ((BasicItemRec."Removal Contribution" <> 0) OR
                CostPlusRec.ItemPriceCPEisGrossMin(CustRec)) THEN BEGIN
              CostPlusRec.VALIDATE("Basic Item", "Basic Item");
              CostPriceLCY := CostPlusRec."Cost Price (LCY)";
              CostPriceFCY := CostPlusRec."Cost Price";
            END ELSE BEGIN
              CostPriceLCY := CostPlusRec."Cost Price (LCY)";
              CostPriceFCY := CostPlusRec."Cost Price";
              CostPlusRec.FindCostPrice(1);
              CostPlusRec.GetSalesDiscount;
            END;
          END ELSE BEGIN
            IF ("Item No." <> '') AND (NOT lvSkipCalcInventoryPrice) THEN BEGIN    // 160816 ITERO.AC Added control variable to avoid Inventory price calculation
              IF ItemRec.GET("Item No.") THEN BEGIN
                IF ConvertUnit = TRUE THEN BEGIN
                  IF (ItemRec."Purch. Unit of Measure" = "Unit of Measure Code") AND
                     (ItemRec."Purch. Unit of Measure" <> ItemRec."Base Unit of Measure") THEN
                    lvUnitFactor := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code");
                END;
                IF (ItemRec."Removal Contribution" <> 0) OR
                   CostPlusRec.ItemPriceCPEisGrossMin(CustRec) THEN BEGIN
                  CostPlusRec.VALIDATE("Item No.", "Item No.");
                  CostPriceLCY := CostPlusRec."Cost Price (LCY)";
                  CostPriceFCY := CostPlusRec."Cost Price";
                  //32761.sn
                  IF HistCostPriceItem AND ("Unit of Measure Code" <> CostPlusRec."Unit of Measure") AND
                     (UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code") <> 0)
                  THEN BEGIN
                    CostPriceLCY := CostPriceLCY /  UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code");
                    CostPriceFCY := CostPriceFCY /  UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code");
                  END;
                  //32761.en
                END ELSE BEGIN
                  CostPriceLCY := CostPlusRec."Cost Price (LCY)";
                  CostPriceFCY := CostPlusRec."Cost Price";
                  CostPlusRec.FindCostPrice(0);
                  CostPlusRec.GetSalesDiscount;
                END;
              END ELSE
                lvItemUnknown := TRUE; //Item unknown, Probably intercompany posting
            END ELSE BEGIN
              CostPlusRec2 := CostPlusRec;  //C041707
              CostPlusRec."Sales Discount % (Item)" := CostPlusRec."Purchase Discount % (Item)";
              IF "Currency Code" = CostPlusRec."Currency Code" THEN BEGIN
                CheckDocument("Document Type", "Document No.", "Document Line No.", HistCostPriceCostObject, TRUE, CostPlusRec);  //C042946
                SavePurchPerc := CostPlusRec."Purchase Discount % (Item)";  //db, 02-03-18
                //DP00887.sn
                IF "Document Line No." = 0 THEN BEGIN
                  CheckPLE("Document Type","Document No.", "Document Line No.",
                    CostPlusRec."Gross Price (LCY)", CostPlusRec."Cost Price (LCY)", CostPlusRec."Purchase Discount % (Item)",
                    CostPlusRec."Basic Price Found at", HistCostPriceCostObject,ServEntryRec);
                END;
                //DP00887.en
                CostPlusRec.CalculateLCYFromFCY(CostPlusRec.FIELDNO("Gross Price"),FALSE);
                CostPlusRec.CalculateLCYFromFCY(CostPlusRec.FIELDNO("Cost Price"),FALSE);
                CostPlusRec.CalculateLCYFromFCY(CostPlusRec.FIELDNO("Basic Price"),FALSE);
              END ELSE BEGIN
                CheckDocument("Document Type", "Document No.", "Document Line No.", HistCostPriceCostObject, FALSE, CostPlusRec);  //C042946
                SavePurchPerc := CostPlusRec."Purchase Discount % (Item)";  //db, 02-03-18
                CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Gross Price (LCY)"));
                CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Cost Price (LCY)"));
                CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));
              END;
              CostPlusRec."Purchase Discount % (Item)" := SavePurchPerc;  //db, 02-03-18: disturbed by validate Price (LCY/FCY)
              //C041707.sn
              IF CostPlusRec."Cost Price (LCY)" <> 0 THEN BEGIN
                IF CostPlusRec."Cost Price (LCY)" <> CostPlusRec2."Cost Price (LCY)" THEN BEGIN
                  CostPriceLCY := CostPlusRec."Cost Price (LCY)";
                  CostPriceFCY := CostPlusRec."Cost Price";
                END
              END;
              //C041707.en
            END;
          END;
        END;

        IF "Global Dimension 2 Code" <> '' THEN
          CostPlusRec."Cost Object" := "Global Dimension 2 Code";

        IF CostPriceLCY <> 0 THEN BEGIN
          IF CostPriceLCY * lvQuantity = ServEntryRec."Total Cost (LCY)" THEN BEGIN
            CostPlusRec."Cost Price (LCY)" := CostPriceLCY;
            CostPlusRec."Cost Price" := CostPriceFCY;
          END ELSE BEGIN
            IF "Currency Code" = CostPlusRec."Currency Code" THEN
              CostPlusRec.VALIDATE("Cost Price", CostPriceFCY)
            ELSE
              CostPlusRec.VALIDATE("Cost Price (LCY)", CostPriceLCY);
          END;
        END;

        //>>160621 ITERO.AC RFC082 Add Customer Price List Surcharge if no "Trade Item" or "Item No."
        IF NOT CostPlusRec.CheckItemLine THEN BEGIN
          IF (CostPlusRec."Basic Price (LCY)" = 0) AND (CostPlusRec."Price Agreement" = FALSE) THEN BEGIN  //C051034
            //C042132.sn
          IF "Currency Code" = CostPlusRec."Currency Code" THEN BEGIN
            CostPlusRec."Cost Price" := CostPriceFCY;
            CostPlusRec.CalculateLCYFromFCY(CostPlusRec.FIELDNO("Cost Price"),FALSE);

            CostPlusRec."Gross Price" := CostPriceFCY;
            CostPlusRec.CalculateLCYFromFCY(CostPlusRec.FIELDNO("Gross Price"),FALSE);
            CostPlusRec."Basic Price" := CostPriceFCY;
            CostPlusRec.CalculateLCYFromFCY(CostPlusRec.FIELDNO("Basic Price"),FALSE);
          END ELSE BEGIN
            CostPlusRec."Cost Price (LCY)" := CostPriceLCY;
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Cost Price (LCY)"));
            CostPlusRec."Gross Price (LCY)" := CostPriceLCY;
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Gross Price (LCY)"));
            CostPlusRec."Basic Price (LCY)" := CostPriceLCY;
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));
            END;
            //C042132.en
            //CostPlusRec.GetBasicPrice;  //C042132.o (this is tried before without result; the only reason is to evaluate Gross/Basic/SalesPrice with Discount/Surcharge %)
          END;
        //>>160621 ITERO.AC RFC082 Add Customer Price List Surcharge if no "Trade Item" or "Item No."
        IF NOT CostPlusRec.CheckItemLine AND (CostPlusRec."Basic Price (LCY)" = 0) THEN BEGIN
          //CostPlusRec.GetBasicPrice;
          IF CheckCostPriceBehaviour("Service Order No.", "Customer No.") THEN BEGIN
            CostPlusRec."Gross Price (LCY)" := CostPriceLCY * lvPriceFactor;
            CostPlusRec."Basic Price (LCY)" := CostPriceLCY * lvPriceFactor;
      //      CostPlusRec.CalculateGrossPriceFromLCY;
      //      CostPlusRec.CalculateBasicPriceFromLCY;
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Gross Price (LCY)"));
          END
          ELSE BEGIN
            lvSurchargeIfMissingArticles := GetSurchargeIfMissingArticles("Service Order No.");
            IF lvSurchargeIfMissingArticles <> 1 THEN BEGIN
              IF CostPriceLCY <> 0 THEN BEGIN
                CostPlusRec."Cost Price Adjustment" := (lvSurchargeIfMissingArticles - 1) * 100;
                CostPlusRec.VALIDATE("Basic Price (LCY)", CostPriceLCY * lvSurchargeIfMissingArticles);
                CostPlusRec."Cost Price (LCY)" := CostPriceLCY;
                CostPlusRec."Basic Price Found at" := Text11128001;
              END;
            END;
          END;
        END;

        // Alter text if Cost Price and we have got a CostPriceSurcharge from current Projcet Principal
        IF (CostPlusRec."Basic Price Found at" = CostPlusRec.FIELDCAPTION("Cost Price")) AND (lvPriceFactor <> 1) THEN
          CostPlusRec."Basic Price Found at" := Text11128002;
        //<< 160621 ITERO.AC RFC082
        END;

        //validate item-data disturbes quantity/unit: evaluate function CheckItemUnitConversion
        IF lvMissUnit = FALSE THEN
          IF ConvertUnit = FALSE THEN
            CostPlusRec.VALIDATE("Unit of Measure","Unit of Measure Code");

        IF lvUnitFactor <> 0 THEN
          lvQuantity := lvQuantity * lvUnitFactor;
        CostPlusRec.VALIDATE(Quantity, lvQuantity);

        CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;
        CostPlusRec."Sales Price (LCY)" := CostPlusRec."Basic Price (LCY)" * (1 + CostPlusRec."Surcharge %"/100);
        //>> 160222 ITERO.SB Calculate sales price
      //  CostPlusRec.CalculateSalesPriceFromLCY;
        CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Sales Price (LCY)"));
        //<< 160222 ITERO.SB
        //>> 160621 ITERO.AC RFC082 / IME477 (This value is used to calculate net price in Invoices)
        CostPlusRec."Surcharge Amount (LCY)" := CostPlusRec."Sales Price" - CostPlusRec."Basic Price";
        //<< 160621 ITERO.AC
        IF "Sales Price Purch. Order" <> 0 THEN BEGIN
          CostPlusRec.VALIDATE("Sales Price (LCY)", "Sales Price Purch. Order");
          CostPlusRec."Basic Price Found at" := FIELDCAPTION("Sales Price Purch. Order");
          IF CostPlusRec."Basic Price (LCY)" <> 0 THEN
            CostPlusRec."Surcharge %" := (CostPlusRec."Sales Price (LCY)"/CostPlusRec."Basic Price (LCY)" -1) * 100
          ELSE BEGIN
            CostPlusRec."Surcharge %" := 0;
            CostPlusRec."Basic Price (LCY)" := CostPlusRec."Sales Price (LCY)";
            CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Basic Price (LCY)"));
            //DP00887.sn
            IF CostPlusRec."Gross Price (LCY)" <> 0 THEN BEGIN
              CostPlusRec."Purchase Discount % (Item)" :=
                ((CostPlusRec."Gross Price (LCY)" - CostPlusRec."Cost Price (LCY)") / CostPlusRec."Gross Price (LCY)") * 100;
              CostPlusRec."Sales Discount % (Item)" :=
                ((CostPlusRec."Gross Price (LCY)" - CostPlusRec."Basic Price (LCY)") / CostPlusRec."Gross Price (LCY)") * 100;
            END;
            //DP00887.en
          END;
        END;
        CostPlusRec.CalculateFCYFromLCY(CostPlusRec.FIELDNO("Sales Price (LCY)"));
        CostPlusRec.VALIDATE("Surcharge Amount (LCY)"); //C035396.n

        CostPlusRec."Additional Cost" := "Additional Cost";
        CostPlusRec."Cost Component" := "Cost Component";
        CostPlusRec."Entry No. Service Ledger" := "Entry No.";
        CostPlusRec.GetDiscountPerc;
        CostPlusRec."Source Document" := "Document No.";
        IF "Entry No." = 0 THEN  //db, 10-01-11: fill source line for obligations only
          CostPlusRec."Source Line" := "Document Line No.";
        CostPlusRec."Removal Contribution" := "Removal Contribution";

        IF lvItemUnknown THEN
          CostPlusRec."Item No." := '';

        IF AutoTranslate THEN BEGIN
          IF  ("Item No." <> '') AND ("Service Location No." <> '') THEN BEGIN
            IF NOT ServiceLocation.GET("Service Location No.") THEN
              FIELDERROR("Service Location No.", Text011);
            IF ItemTranslation.GET("Item No.",'',ServiceLocation."Language Code") THEN BEGIN
              CostPlusRec.Description := ItemTranslation.Description;
              CostPlusRec."Description 2" := ItemTranslation."Description 2";
            END;
          END;
        END ELSE BEGIN
          CostPlusRec.Description := Description;
          CostPlusRec."Description 2" := "Description 2";
        END;

        IF ServSetup."Copy Entry Description to CPE" THEN
          CostPlusRec.AddDateToDescription(CostPlusRec."Posting Date", CostPlusRec."Execution Date")
        ELSE
          CostPlusRec.GetDescription;

        CostPlusRec."VAT Prod. Posting Group" := CostPlusRec.UpdateVatProdPostingGrp;  //RFC 547

        IF HumanResourcesSetup."Post Hours Per Day" THEN BEGIN
          CostPlusRec."From Time" := "Time From";
          CostPlusRec."To Time" := "Time Until";
          CostPlusRec."From Date" := "Posting Date";
          CostPlusRec."To Date" := "Posting Date";
        END;

        CostPlusRec.VALIDATE(Text, Text);
        //Itero.PR 151111
        CostPlusRec."Total Cost Price (LCY)" := CostPlusRec.Quantity * CostPlusRec."Cost Price (LCY)";
        //Itero 151111
        CostPlusRec.MODIFY;
        CostPlusRec.DetermineRemovalContribution(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckDocument@1100530001(DocType@1210190003 : ' ,Purchase Invoice,Purchase Credit Memo,Sales Invoice,Sales Credit Memo';DocNo@1210190000 : Code[20];LineNo@1210190001 : Integer;HistCostPriceCostObject@1100530000 : Boolean;UseFCYAmounts@1100525002 : Boolean;VAR CostPlusEntry@1100525001 : Record 11012825);
    VAR
      PurchInvLine@1210190002 : Record 123;
      UseDocumentPrice@1100525000 : Boolean;
      GrossPrice@1100525005 : Decimal;
      NetPrice@1100525004 : Decimal;
      Discount@1100525003 : Decimal;
    BEGIN
      //C042946: redesign
      IF (DocType <> DocType::"Purchase Invoice") AND
         (DocType <> DocType::"Purchase Credit Memo") THEN EXIT;

      WITH CostPlusEntry DO BEGIN
        IF UseFCYAmounts THEN BEGIN
          GrossPrice := "Gross Price";
          NetPrice := "Cost Price";
        END ELSE BEGIN
          GrossPrice := "Gross Price (LCY)";
          NetPrice := "Cost Price (LCY)";
        END;
        //
        IF PurchInvLine.GET(DocNo, LineNo) THEN BEGIN
          IF (GrossPrice = 0) AND (NetPrice = 0) THEN
            UseDocumentPrice := TRUE;  //no price found on any level
          IF HistCostPriceCostObject OR UseDocumentPrice THEN BEGIN
            IF UseFCYAmounts THEN BEGIN
              GrossPrice := PurchInvLine."Direct Unit Cost";
              NetPrice := PurchInvLine."Unit Cost";
            END ELSE BEGIN
              GrossPrice := PurchInvLine."Unit Price (LCY)";
              NetPrice := PurchInvLine."Unit Cost (LCY)";
            END;
            IF PurchInvLine."Line Discount %" <> 0 THEN BEGIN
              Discount := PurchInvLine."Line Discount %";
            END ELSE BEGIN
              //Item Discount used on Purchase Order
              IF PurchInvLine."Unit Price (LCY)" <> 0 THEN
                Discount := 100 * ((PurchInvLine."Unit Price (LCY)" - PurchInvLine."Unit Cost (LCY)") / PurchInvLine."Unit Price (LCY)");
            END;
            IF Discount <> 100 THEN
              GrossPrice := NetPrice * 100 / (100 - Discount);
            "Purchase Discount % (Item)" := Discount;
            "Sales Discount % (Item)" := 0;
            IF UseFCYAmounts THEN BEGIN
              "Cost Price" := NetPrice;
              "Gross Price" := GrossPrice;
            END ELSE BEGIN
              "Cost Price (LCY)" := NetPrice;
              "Gross Price (LCY)" := GrossPrice;
            END;
            "Basic Price Found at" :=  PurchInvLine.TABLECAPTION;
          END;
          //
          IF ItemPriceCPEisGrossMin(CustRec) THEN BEGIN
            IF UseFCYAmounts THEN
              "Basic Price" := "Gross Price"
            ELSE
              "Basic Price (LCY)" := "Gross Price (LCY)";
          END ELSE BEGIN
            IF UseFCYAmounts THEN
              "Basic Price" := "Cost Price"
            ELSE
              "Basic Price (LCY)" := "Cost Price (LCY)";
          END;
        END;
      END;
    END;

    PROCEDURE UpdateVatProdPostingGrp@1100525018() VatProdPostingGrp : Code[20];
    VAR
      ServiceSetup@1100525001 : Record 11012800;
      ItemRec@1100525002 : Record 27;
      DimValRec@1100525006 : Record 349;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      // RFC 547
      VatProdPostingGrp := '';

      ServiceSetup.GET;
      IF ServOrderRec.GET("Service Order No.") THEN;

      IF (ServiceSetup."Source VAT Prod. Posting Group" =
          ServiceSetup."Source VAT Prod. Posting Group"::"Item/CostObject") THEN
      BEGIN
        IF NOT ItemRec.GET("Item No.") THEN
          ItemRec.INIT;

        IF (ItemRec."VAT Prod. Posting Group" <> '') THEN
          VatProdPostingGrp := ItemRec."VAT Prod. Posting Group";

        IF VatProdPostingGrp = '' THEN BEGIN
          DimMgt.GetDimValueRec(2,"Cost Object",DimValRec,FALSE,'');
          IF (DimValRec."VAT Prod. Posting Group" <> '') THEN
            VatProdPostingGrp := DimValRec."VAT Prod. Posting Group";
        END;
      END;

      IF VatProdPostingGrp = '' THEN
        VatProdPostingGrp := ServOrderRec."VAT Prod. Posting Group";
    END;

    PROCEDURE LookupHourRate@1210190011();
    VAR
      ContrHourRateRec@1210190003 : Record 11012815;
      HourRateRec@1210190002 : Record 11012022;
      TmpHourRateRec@1210190001 : TEMPORARY Record 11012022;
      Desc@1210190000 : Text[100];
      NumContrRate@1210190004 : Integer;
    BEGIN
      ContrHourRateRec.SETRANGE("Service Contract No.", "Service Contract No.");
      IF ContrHourRateRec.FINDSET THEN BEGIN
        REPEAT
          HourRateRec.SETRANGE(Code, ContrHourRateRec."Hour Rate Code");
          IF HourRateRec.FINDSET THEN
            REPEAT
              TmpHourRateRec := HourRateRec;
              TmpHourRateRec."Starting Date" := 0D;
              TmpHourRateRec."Ending Date" := 0D;
              IF TmpHourRateRec.INSERT THEN;
              TmpHourRateRec.MARK := TRUE;
              NumContrRate := NumContrRate + 1;
            UNTIL HourRateRec.NEXT = 0;
        UNTIL ContrHourRateRec.NEXT = 0;
      END;

      HourRateRec.SETRANGE(Code); //remove filter;
      IF HourRateRec.FINDSET THEN BEGIN
        REPEAT
          TmpHourRateRec := HourRateRec;
          IF NumContrRate <> 0 THEN BEGIN
            TmpHourRateRec."Starting Date" := 0D;
            TmpHourRateRec."Ending Date" := 0D;
          END;
          IF TmpHourRateRec.INSERT THEN;
        UNTIL HourRateRec.NEXT = 0;
      END;
      IF NumContrRate <> 0 THEN
        TmpHourRateRec.MARKEDONLY(TRUE);

      TmpHourRateRec.SETFILTER("Project Filter", '%1', '');
      TmpHourRateRec.SETRANGE("Principal Filter", "Bill-to Customer No."); //mg.c, 25-06-12: M27434
      TmpHourRateRec.SETRANGE("Service Contract Filter", "Service Contract No.");
      TmpHourRateRec.SETRANGE("Date Filter", 0D, "Posting Date");
      TmpHourRateRec.Code := "Hour Rate Code";
      IF PAGE.RUNMODAL(0, TmpHourRateRec) = ACTION::LookupOK THEN BEGIN
        Desc := Description;
        SetValidateHourRateCode(TRUE);
        VALIDATE("Hour Rate Code",TmpHourRateRec.Code);
        ServSetup.GET;  //db, 02-10-12: C002119
        IF ServSetup."Description Cost Plus Entry" <> ServSetup."Description Cost Plus Entry"::RateCode THEN
          Description := Desc;
      END;
    END;

    PROCEDURE ReopenCollectiveList@1100528600();
    VAR
      ServiceCollectiveList@1100528600 : Record 11071730;
      ServiceSetup@1100528601 : Record 11012800;
    BEGIN
      IF "Collective List No." <> '' THEN BEGIN
        ServiceSetup.GET;
        ServiceCollectiveList.GET("Collective List No.");
        IF ServiceSetup."Auto Reopen Coll.List Disabled" THEN
          ServiceCollectiveList.TESTFIELD(Status, ServiceCollectiveList.Status::Open)
        ELSE BEGIN
          IF ServiceCollectiveList.Status > ServiceCollectiveList.Status::Open THEN BEGIN
            ServiceCollectiveList.VALIDATE(Status, ServiceCollectiveList.Status::Open);
            ServiceCollectiveList.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE HandleLookupObjectNo@1100528601();
    VAR
      ServiceOrderObject@1100528602 : Record 11071724;
    BEGIN
      ServiceOrderObject.SETRANGE("Service Order No.", "Service Order No.");
      IF PAGE.RUNMODAL(0, ServiceOrderObject) = ACTION::LookupOK THEN
        VALIDATE("Object No.", ServiceOrderObject."Object No.");
    END;

    PROCEDURE HandleLookupCollectiveListNo@1100528603() : Boolean;
    VAR
      ServiceCollectiveList@1100528602 : Record 11071730;
      ServiceOrder@1100528800 : Record 11012823;
      Customer@1100528603 : Record 18;
      ServiceCollectiveListMgt@1100528802 : Codeunit 11012850;
      ServiceCollectiveListsPAGE@1100528804 : Page 11125230;
      ServiceOrderNo@1100528801 : Code[20];
      StartingDate@1100528803 : Date;
    BEGIN
      TESTFIELD("Bill-to Customer No.");
      Customer.GET("Bill-to Customer No.");
      ServiceOrder.GET("Service Order No.");

      IF ServiceOrder."No." <> ServiceOrder."Base Service Order No." THEN
        ServiceOrderNo := ServiceOrder."Base Service Order No."
      ELSE
        ServiceOrderNo := ServiceOrder."No.";
      ServiceCollectiveList.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");

      IF NOT ServiceCollectiveListMgt.UseBilltoAsSelltoCustomer("Customer No.", "Service Contract No.") THEN
        ServiceCollectiveList.SETRANGE("Customer No.", "Customer No.")
      ELSE
        ServiceCollectiveList.SETRANGE("Customer No.", "Bill-to Customer No.");

      ServiceCollectiveList.SETRANGE("Alternative Bill-to Address", "Alternative Bill-to Address");
      ServiceCollectiveList.SETRANGE("Bill-to Contact Person No.", '');

      IF "Collective List No." = '' THEN
        ServiceCollectiveList.SETRANGE(Status, ServiceCollectiveList.Status::Open);

      IF ServiceOrder.IsPlantServiceOrder OR ServiceOrder.IsPlantInternalCharge THEN
        Customer."Collect SO Invoices By" := Customer."Collect SO Invoices By"::"Service Order";

      CASE Customer."Collect SO Invoices By" OF
        Customer."Collect SO Invoices By"::"Service Contract":
          BEGIN
            ServiceCollectiveList.SETFILTER("Service Contract No.", '%1|%2', '', "Service Contract No.");
            ServiceCollectiveList.SETFILTER("Service Order No.", '%1|%2', '', ServiceOrderNo);
          END;
        Customer."Collect SO Invoices By"::Complex:
          ServiceCollectiveList.SETFILTER("Complex Code", '%1|%2', '', ServiceOrder.GetComplexCode);
        Customer."Collect SO Invoices By"::"Service Location":
          BEGIN
            ServiceCollectiveList.SETFILTER("Service Contract No.", '%1|%2', '', "Service Contract No.");
            ServiceCollectiveList.SETRANGE("Service Location No.", "Service Location No.");
            ServiceCollectiveList.SETFILTER("Service Order No.", '%1|%2', '', ServiceOrderNo);
          END;
        Customer."Collect SO Invoices By"::"Service Order":
          ServiceCollectiveList.SETRANGE("Service Order No.", ServiceOrderNo)
      END;
      ServiceCollectiveList.SETRANGE("Currency Code", "Currency Code");
      StartingDate := ServiceOrder.GetStartingDate;
      ServiceCollectiveList.SETFILTER("Starting Date", '%1|<=%2', 0D, StartingDate);
      ServiceCollectiveList.SETFILTER("Ending Date", '%1|>=%2', 0D, StartingDate);
      ServiceCollectiveList."No." := "Collective List No.";
      ServiceCollectiveListsPAGE.SetDefaults(ServiceOrder);
      ServiceCollectiveListsPAGE.SETTABLEVIEW(ServiceCollectiveList);
      ServiceCollectiveListsPAGE.SETRECORD(ServiceCollectiveList);
      ServiceCollectiveListsPAGE.LOOKUPMODE(TRUE);
      IF ServiceCollectiveListsPAGE.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServiceCollectiveListsPAGE.GETRECORD(ServiceCollectiveList);
        VALIDATE("Collective List No.", ServiceCollectiveList."No.");
      END;
    END;

    PROCEDURE MarkCollectiveListForRecalc@1100528604();
    VAR
      ServiceCollectiveList@1100528600 : Record 11071730;
    BEGIN
      IF "Collective List No." <> '' THEN BEGIN
        ServiceCollectiveList.GET("Collective List No.");
        ServiceCollectiveList.MarkAsDirty;
      END;
    END;

    PROCEDURE CheckCollectiveList@1100528608();
    VAR
      ServiceCollectiveList@1100528600 : Record 11071730;
      Customer@1100528601 : Record 18;
      ServiceCollectiveListMgt@1100528602 : Codeunit 11012850;
    BEGIN
      IF "Collective List No." = '' THEN
        EXIT;
      TESTFIELD("Bill-to Customer No.");
      TESTFIELD("Customer No.");
      ServiceCollectiveList.GET("Collective List No.");
      ServiceCollectiveList.TESTFIELD(Status, ServiceCollectiveList.Status::Open);
      ServiceCollectiveList.TESTFIELD("Bill-to Customer No.", "Bill-to Customer No.");
      IF ServiceCollectiveListMgt.UseBilltoAsSelltoCustomer("Customer No.", "Service Contract No.") THEN
        ServiceCollectiveList.TESTFIELD("Customer No.", "Bill-to Customer No.")
      ELSE
        ServiceCollectiveList.TESTFIELD("Customer No.", "Customer No.");
      Customer.GET("Customer No.");

      IF ServiceCollectiveList."Service Contract No." <> '' THEN
        ServiceCollectiveList.TESTFIELD("Service Contract No.", "Service Contract No.");
      IF ServiceCollectiveList."Service Location No." <> '' THEN
      ServiceCollectiveList.TESTFIELD("Service Location No.", "Service Location No.");
    END;

    PROCEDURE ResetSUPProductionLine@1100528607();
    VAR
      SUPProductionLine@1100528600 : Record 11071774;
    BEGIN
      SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPProductionLine.SETRANGE("Production Seq. No.", "Production Seq. No.");
      SUPProductionLine.SETRANGE("Line No.", "Production Line No.");
      //SUPProductionLine.SETRANGE("Cost Plus Line No.", "Line No.");
      SUPProductionLine.SETRANGE("Cost Plus Entries Created", TRUE);
      IF SUPProductionLine.ISEMPTY THEN
        EXIT;
      SUPProductionLine.FINDSET(TRUE);
      REPEAT
        SUPProductionLine."Cost Plus Entries Created" := FALSE;
        SUPProductionLine."Creation Date Cost Plus Entry" := 0D;
        SUPProductionLine."Cost Plus Line No." := 0;
        SUPProductionLine.MODIFY;
      UNTIL SUPProductionLine.NEXT = 0;
    END;

    PROCEDURE ItemPriceCPEisGrossMin@1100528609(ICustomer@1100528600 : Record 18) : Boolean;
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      ServiceOrderExtension@1100528603 : Record 11071727;
    BEGIN
      ServiceOrder.GET("Service Order No.");
      IF ServiceOrderExtension.GET("Service Order No.") THEN
        EXIT(ServiceOrderExtension."Item Price Cost Plus Entry" = ServiceOrderExtension."Item Price Cost Plus Entry"::GrossMin);
    END;

    PROCEDURE GetServicePackage@1210190014() : Code[10];
    VAR
      ServiceOrder@1210190000 : Record 11012823;
      ContractObject@1210190002 : Record 11071702;
      ServicePackage@1210190001 : Record 11012806;
      ServiceContract@1100528601 : Record 11012812;
      ServicePackageCode@1100528600 : Code[10];
    BEGIN
      IF CURRENTCOMPANY = COMPANYNAME THEN
        CALCFIELDS("Service Contract No.")
      ELSE BEGIN
        ServiceOrder.CHANGECOMPANY(CURRENTCOMPANY);
        IF ServiceOrder.GET("Service Order No.") THEN
          "Service Contract No." := ServiceOrder."Service Contract No.";
        ServiceContract.CHANGECOMPANY(CURRENTCOMPANY);
        ServicePackage.CHANGECOMPANY(CURRENTCOMPANY);
        ContractObject.CHANGECOMPANY(CURRENTCOMPANY);
      END;
      IF "Service Contract No." = '' THEN
        IF OverruleServiceContractNo = '' THEN
          EXIT
        ELSE
          "Service Contract No." := OverruleServiceContractNo;
      IF ServiceContract.GET("Service Contract No.") THEN
        ServicePackageCode := ServiceContract."Service Package";

      IF ContractObject.GET(ServiceContract."No.", "Object No.") THEN
        ServicePackageCode := ContractObject."Service Package";

      IF "Service Order No." = '' THEN
        ServiceOrder."Source Type" := ServiceOrder."Source Type"::Call
      ELSE
        IF NOT ServiceOrder.GET("Service Order No.") THEN
          EXIT;

      IF NOT ServicePackage.GET(ServicePackageCode) THEN
        EXIT(ServicePackageCode);

      CASE ServiceOrder."Source Type" OF
        ServiceOrder."Source Type"::Call:
          IF ServicePackage."Service Package Call" <> '' THEN
            EXIT(ServicePackage."Service Package Call");
        ServiceOrder."Source Type"::Contract:
          IF ServicePackage."Service Package Contract" <> '' THEN
            EXIT(ServicePackage."Service Package Contract");
        ServiceOrder."Source Type"::Direct:
          IF ServicePackage."Service Package Direct" <> '' THEN
            EXIT(ServicePackage."Service Package Direct");
      END;
      EXIT(ServicePackageCode);
    END;

    PROCEDURE DetermineObjectNo@1100528610(IUseValidateTrigger@1100528601 : Boolean);
    VAR
      ServiceOrderObject@1100528600 : Record 11071724;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        ServOrderRec.CHANGECOMPANY(CURRENTCOMPANY);
        ServiceOrderObject.CHANGECOMPANY(CURRENTCOMPANY);
      END;
      IF ServOrderRec."No." <> "Service Order No." THEN
        IF NOT ServOrderRec.GET("Service Order No.") THEN
          ServOrderRec.INIT;

      ServiceOrderObject.SETRANGE("Service Order No.", "Service Order No.");
      IF ServiceOrderObject.FINDFIRST THEN BEGIN
        ServiceOrderObject.SETFILTER("Object No.", '<>%1', ServiceOrderObject."Object No.");
        IF ServiceOrderObject.ISEMPTY THEN
          VALIDATE("Object No.", ServiceOrderObject."Object No.");
      END;
    END;

    PROCEDURE SetCostObject@1210190016();
    BEGIN
      CostObjectFixed := TRUE;
    END;

    PROCEDURE GetUnitFactorItem@1100528900(VendTradeItem@1100409000 : Code[20];TradeItem@1100409001 : Code[20];ItemNo@1100409002 : Code[20];UnitOfMeas@1100409003 : Code[10]) UnitFactor : Decimal;
    VAR
      ItemRec@1100528900 : Record 27;
      TradeItemRec@1100528901 : Record 11012317;
      UnitControl@1100528902 : Codeunit 5402;
    BEGIN
      UnitFactor := 1;
      IF TradeItem <> '' THEN BEGIN
        IF TradeItemRec.GET(VendTradeItem, TradeItem) THEN
          IF UPPERCASE(TradeItemRec."Packaging Unit") = UnitOfMeas THEN
            UnitFactor := TradeItemRec."Qty. per Unit of Measure";
      END ELSE BEGIN
        IF ItemNo <> '' THEN BEGIN
          IF ItemRec.GET(ItemNo) THEN
            UnitFactor := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, UnitOfMeas);
        END;
      END;
      EXIT(UnitFactor);
    END;

    PROCEDURE IsInFilterGroup@1100528611(IServiceOrderCostPlusEntry@1100528600 : Record 11012825;IFilterGroup@1100528601 : Code[20]) : Boolean;
    VAR
      Item@1100528602 : Record 27;
      TradeItem@1100528603 : Record 11012317;
      BasicItem@1100528604 : Record 11012316;
      ServDiscFilterGroupLine@1100528606 : Record 11071936;
      LinkedToServDiscFilterGroupLine@1100528609 : Record 11071936;
      ServiceOrder@1100528608 : Record 11012823;
      TableRef@1100528605 : RecordRef;
      FieldRef@1100528607 : FieldRef;
    BEGIN
      IF IFilterGroup = '' THEN
        EXIT(TRUE);
      IF IServiceOrderCostPlusEntry.CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        Item.CHANGECOMPANY(IServiceOrderCostPlusEntry.CURRENTCOMPANY);
        TradeItem.CHANGECOMPANY(IServiceOrderCostPlusEntry.CURRENTCOMPANY);
        BasicItem.CHANGECOMPANY(IServiceOrderCostPlusEntry.CURRENTCOMPANY);
        ServiceOrder.CHANGECOMPANY(IServiceOrderCostPlusEntry.CURRENTCOMPANY);
        ServDiscFilterGroupLine.CHANGECOMPANY(IServiceOrderCostPlusEntry.CURRENTCOMPANY);
        LinkedToServDiscFilterGroupLine.CHANGECOMPANY(IServiceOrderCostPlusEntry.CURRENTCOMPANY);
      END;
      ServDiscFilterGroupLine.SETRANGE(Code, IFilterGroup);
      ServDiscFilterGroupLine.SETRANGE("Linked To Line No.", 0);
      IF ServDiscFilterGroupLine.FINDSET THEN BEGIN
        REPEAT
          CASE ServDiscFilterGroupLine."Table Type" OF
            ServDiscFilterGroupLine."Table Type"::Item:
              BEGIN
                Item.RESET;
                Item.SETRANGE("No.", IServiceOrderCostPlusEntry."Item No.");
                TableRef.GETTABLE(Item);
              END;
            ServDiscFilterGroupLine."Table Type"::"Trade Item":
              BEGIN
                TradeItem.RESET;
                TradeItem.SETRANGE(Vendor, IServiceOrderCostPlusEntry."Vendor (Trade Item)");
                TradeItem.SETRANGE("Item Code", IServiceOrderCostPlusEntry."Trade Item");
                TableRef.GETTABLE(TradeItem);
              END;
            ServDiscFilterGroupLine."Table Type"::"Basic Item":
              BEGIN
                BasicItem.RESET;
                BasicItem.SETRANGE(Manufacturer, IServiceOrderCostPlusEntry.Manufacturer);
                BasicItem.SETRANGE("Product Code", IServiceOrderCostPlusEntry."Basic Item");
                TableRef.GETTABLE(BasicItem);
              END;
            ServDiscFilterGroupLine."Table Type"::"Service Order":
              BEGIN
                ServiceOrder.RESET;
                ServiceOrder.SETRANGE("No.", IServiceOrderCostPlusEntry."Service Order No.");
                TableRef.GETTABLE(ServiceOrder);
              END;
          END;
          TableRef.FILTERGROUP(7);
          FieldRef := TableRef.FIELD(ServDiscFilterGroupLine."Field No.");
          FieldRef.SETFILTER(ServDiscFilterGroupLine."Value Filter");

          IF IServiceOrderCostPlusEntry.CURRENTCOMPANY <> COMPANYNAME THEN
            IF UPPERCASE(FORMAT(FieldRef.CLASS)) = 'FLOWFIELD' THEN
              ServDiscFilterGroupLine.FIELDERROR("Field No.", Text012);

          LinkedToServDiscFilterGroupLine.SETRANGE(Code, ServDiscFilterGroupLine.Code);
          LinkedToServDiscFilterGroupLine.SETRANGE("Linked To Line No.", ServDiscFilterGroupLine."Line No.");
          IF LinkedToServDiscFilterGroupLine.FINDSET THEN
            REPEAT
              FieldRef := TableRef.FIELD(LinkedToServDiscFilterGroupLine."Field No.");
              FieldRef.SETFILTER(LinkedToServDiscFilterGroupLine."Value Filter");
            UNTIL LinkedToServDiscFilterGroupLine.NEXT = 0;
          TableRef.FILTERGROUP(0);
          IF NOT TableRef.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL ServDiscFilterGroupLine.NEXT = 0;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE SetSkipDetermineChargeable@1100525009(SetSkipDetermChargeable@1100525000 : Boolean);
    BEGIN
      SkipDetermineChargeable := SetSkipDetermChargeable;
    END;

    PROCEDURE GetInvoicePriceInclVAT@1100528612() : Decimal;
    VAR
      VATPostingSetup@1100528600 : Record 325;
      ServiceOrder@1100528602 : Record 11012823;
      AmountInclVat@1100528601 : Decimal;
    BEGIN
      IF "Invoice Price (LCY)" = 0 THEN
        EXIT;

      AmountInclVat := "Invoice Price (LCY)";

      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;

      IF NOT VATPostingSetup.GET(ServiceOrder."VAT Bus. Posting Group", "VAT Prod. Posting Group") THEN
        VATPostingSetup.INIT;

      IF (VATPostingSetup."VAT %" = 0) OR VATPostingSetup.Manually THEN
        EXIT(AmountInclVat);

      CASE VATPostingSetup."VAT Calculation Type" OF
        VATPostingSetup."VAT Calculation Type"::"Normal VAT":
      //  VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT"://C019387.o
          AmountInclVat := "Invoice Price (LCY)" + "Invoice Price (LCY)" * VATPostingSetup."VAT %" / 100;
      END;

      EXIT(AmountInclVat);
    END;

    PROCEDURE CheckExtraCostLine@1100525010(lvAction@1100525000 : Integer);
    VAR
      ServiceExtraCost@1100525001 : Record 11020344;
    BEGIN
      IF NOT "Extra Cost" THEN
        EXIT;
      IF lvAction <> 2 THEN
        EXIT;
      ServiceExtraCost.SETRANGE("Entity Type", ServiceExtraCost."Entity Type"::"Service Order");
      ServiceExtraCost.SETRANGE("Entity Code", "Service Order No.");
      ServiceExtraCost.SETRANGE("Cost Plus Line No.", "Line No.");
      IF ServiceExtraCost.FINDFIRST THEN BEGIN
        ServiceExtraCost."Cost Plus Line No." := 0;
        ServiceExtraCost.MODIFY;
      END;
    END;

    PROCEDURE InitCreatedByFields@1100527000();
    VAR
      UserSetup@1100527000 : Record 91;
    BEGIN
      "Created by Employee No." := '';
      "Created by Employee Company" := '';
      "Created by Work Order No." := '';
      IF UserSetup.GET(USERID) THEN
        "Created by Employee No." := UserSetup."Employee No.";
    END;

    PROCEDURE AssistEditItemData@1100528300(VAR ZoomType@1210190000 : Integer);
    VAR
      WebshopItemMgt@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      IF ZoomType = 3 THEN BEGIN
        RecRef.GETTABLE(Rec);
        WebshopItemMgt.RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        ZoomType := -1;
      END;
    END;

    LOCAL PROCEDURE "--- ITERO ---"@1();
    BEGIN
    END;

    PROCEDURE UseCostPrice@1100285000(_customer@1100285000 : Record 18) : Boolean;
    VAR
      lvServiceOrderExtension@1100525000 : Record 11071727;
    BEGIN
      //>> 160621 ITERO.AC RCF082 Rewrite of logic in order to make it similar to Project Cost Plus Entry
      IF NOT lvServiceOrderExtension.GET(ServOrderRec."No.") THEN BEGIN
        CLEAR(lvServiceOrderExtension);
        EXIT(FALSE);
      END;
      //IF (ServOrderRec."Price List Code" <> '' ) OR (UseManualPriceList <> '') THEN BEGIN
      //>> 161016 ITERO.AC RAD043-1 Adjustment, Do not read from Customer settings !!
      //EXIT((_customer."Item Price Cost Plus Project" = _customer."Item Price Cost Plus Project"::CostPrice)
      //  OR ((lvServiceOrderExtension."Item Price Cost Plus Entry" = lvServiceOrderExtension."Item Price Cost Plus Entry"::CostPrice) AND NOT "Price History Found"));
      EXIT(((lvServiceOrderExtension."Item Price Cost Plus Entry" = lvServiceOrderExtension."Item Price Cost Plus Entry"::CostPrice) AND NOT "Price History Found"));
      //<< 161016 ITERO.AC RAD043-1
      //END ELSE BEGIN
      //  EXIT(TRUE);
      //END;
      //<< 160621 ITERO.AC RCF082
    END;

    PROCEDURE SetManualPriceList@1100285001(_UseManualPl@1100285000 : Code[20]);
    BEGIN
      // ITERO.AC 150904 This flag is used to handle process flow in FindSalesPrice
      UseManualPriceList := _UseManualPl;
    END;

    PROCEDURE GetCustPriceListFromPriority@1100285005(lvTradeItem@1100285000 : Code[20];lvRefDate@1100285003 : Date;VAR lvDiscRef1@1100285004 : Code[20]) : Code[20];
    VAR
      lvCustPlPriority@1100285001 : Record 11128278;
      lvPriceHistRec@1100285002 : Record 11012315;
    BEGIN
      // 150905 ITERO.AC This function tries to find an alternative Trade Item Vendor by a loop through the table "Customer Price List priority"
      // and for each alternative price list: search if current article code exists in "Price History Trade Item"

      CLEAR(lvCustPlPriority);
      lvCustPlPriority.SETCURRENTKEY(Priority,"Price List Code");

      IF lvCustPlPriority.FINDSET THEN BEGIN
        REPEAT

          lvPriceHistRec.SETCURRENTKEY("Item Code", "Starting Date", "Price List Code");
          lvPriceHistRec.SETRANGE("Item Code", lvTradeItem);
          lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
          lvPriceHistRec.SETRANGE("Price List Code", lvCustPlPriority."Price List Code");

          IF lvPriceHistRec.FINDLAST THEN BEGIN
            IF lvCustPlPriority."Sales Discount Term Group 1" <> '' THEN
               lvDiscRef1 := lvCustPlPriority."Sales Discount Term Group 1";
            EXIT(lvPriceHistRec."Price List Code");
          END;

        UNTIL lvCustPlPriority.NEXT=0;
      END;

      EXIT('');
    END;

    PROCEDURE SetCurrFieldNoToZero@1100285300();
    BEGIN
      //>> 160609 ITERO.SB Set CurrFieldNo to zero when generate cost plus entries, to get correct value in GetDescription function.
      CurrFieldNo:=0;
      //<<
    END;

    PROCEDURE CheckCostPriceBehaviour@1100528011(pServiceOrderNo@1100525000 : Code[20];pCustomerNo@1100525001 : Code[20]) : Boolean;
    VAR
      lvCustomer@1100525002 : Record 18;
      lvServiceOrderExtension@1100525003 : Record 11071727;
    BEGIN
      // 160621 ITERO.AC RFC082 New function used to determine if Cost Price Behaviour should be used

      IF NOT lvCustomer.GET(pCustomerNo) THEN
        CLEAR(lvCustomer);
      IF NOT lvServiceOrderExtension.GET(pServiceOrderNo) THEN
        CLEAR(lvServiceOrderExtension);
      EXIT((lvCustomer."Item Price Cost Plus Service" = lvCustomer."Item Price Cost Plus Service"::CostPrice)
        OR (lvServiceOrderExtension."Item Price Cost Plus Entry" = lvServiceOrderExtension."Item Price Cost Plus Entry"::CostPrice));
    END;

    PROCEDURE CheckIfPriceHistoryExists@1100528013(pServiceOrderNo@1100525000 : Code[20];pReferenceDate@1100525001 : Date;pItemCode@1100525002 : Code[20];VAR pGrossPrice@1100525003 : Decimal) : Boolean;
    VAR
      lvPriceHistRec@1100525004 : Record 11012315;
      lvServiceOrderRec@1100525005 : Record 11012823;
      lvPriceListCode@1100525006 : Code[20];
      lvDiscRef@1100525007 : Code[20];
    BEGIN
      // 160621 ITERO.AC RFC082 New function used to Determine if "Price History Trade Item" exists for Current Customer PriceList And Current Trade Item Code
      IF NOT lvServiceOrderRec.GET(pServiceOrderNo) THEN CLEAR(lvServiceOrderRec);
      pGrossPrice := 0;

      IF lvServiceOrderRec."Price List Code" <> '' THEN BEGIN
        lvPriceHistRec.SETCURRENTKEY("Item Code", "Starting Date", "Price List Code");
        lvPriceHistRec.SETRANGE("Item Code", pItemCode);
        lvPriceHistRec.SETRANGE("Starting Date", 0D, pReferenceDate);
        lvPriceHistRec.SETRANGE("Price List Code", lvServiceOrderRec."Price List Code");

        IF lvPriceHistRec.FINDLAST THEN BEGIN
          pGrossPrice := lvPriceHistRec."Gross Price";
          EXIT(TRUE);
        END ELSE BEGIN
          // If Trade Item was not found, check for Customer Price List priority
          lvPriceListCode := GetCustPriceListFromPriority(pItemCode, pReferenceDate, lvDiscRef);
          IF lvPriceListCode <> '' THEN BEGIN
            lvPriceHistRec.SETRANGE("Price List Code", lvPriceListCode);
            IF lvPriceHistRec.FINDLAST THEN BEGIN
              pGrossPrice := lvPriceHistRec."Gross Price";
              EXIT(TRUE);
            END;
          END;
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetSurchargeIfMissingArticles@1100525316(pServiceOrderNo@1100525000 : Code[20]) : Decimal;
    VAR
      lvCustPriceList@1100525001 : Record 11128273;
      lvServiceOrderRec@1100525002 : Record 11012823;
    BEGIN
      // 160621 ITERO.AC RFC082 Get new Surcharge value from current Customer Price List as a factor
      // Return 1 if there is no customer price list is selected or it doesnt exist

      IF NOT lvServiceOrderRec.GET(pServiceOrderNo) THEN CLEAR(lvServiceOrderRec);
      IF lvServiceOrderRec."Price List Code" <> '' THEN BEGIN
        IF lvCustPriceList.GET(lvServiceOrderRec."Price List Code") THEN
          EXIT(1 + (lvCustPriceList.SurchargeIfMissingArticles / 100))
        ELSE
          EXIT(1);
      END;

      EXIT(1);
    END;

    LOCAL PROCEDURE CalculatePriceWithoutVAT@1100528012(pItemCode@1100525002 : Code[10];pPriceIncludesVAT@1100525003 : Boolean;pUnitPrice@1100525001 : Integer) : Decimal;
    VAR
      lvItemRec@1100525004 : Record 27;
      lvInvetSetupRec@1100525005 : Record 313;
      lvVATPostingSetupRec@1100525007 : Record 325;
      lvVATProdPostingGroup@1100525006 : Code[10];
      lvVATBusPostingGroup@1100525008 : Code[10];
      lvRetVal@1100525009 : Decimal;
      lvVATPercent@1100525010 : Decimal;
    BEGIN
      // 161012 ITERO.AC RAD043 Calculate Item Sales Price excluding VAT amount

      lvRetVal := pUnitPrice;

      IF pPriceIncludesVAT THEN BEGIN
        IF NOT lvInvetSetupRec.GET() THEN lvInvetSetupRec.INIT;
        lvVATBusPostingGroup := lvInvetSetupRec."VAT Bus. Posting Group";

        IF NOT lvItemRec.GET(pItemCode) THEN lvItemRec.INIT;
        lvVATProdPostingGroup := lvItemRec."VAT Prod. Posting Group";

        // Key: VAT Bus. Posting Group,VAT Prod. Posting Group
        IF lvVATPostingSetupRec.GET(lvVATBusPostingGroup, lvVATProdPostingGroup) THEN BEGIN
          lvVATPercent := lvVATPostingSetupRec."VAT %";
          lvRetVal := pUnitPrice / (1 + lvVATPercent / 100);
        END;

      END;

      EXIT(lvRetVal);
    END;

    PROCEDURE DuplicateLine@1100528605();
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry := Rec;
      ServiceOrderCostPlusEntry."Line No." := 0;
      ServiceOrderCostPlusEntry.INSERT(TRUE);
    END;

    PROCEDURE GetLastLino@1100525019(ServiceOrderNo@1100525001 : Code[20]) LastLino : Integer;
    VAR
      CostPlusRec@1100525000 : Record 11012825;
    BEGIN
      //DP01008
      CostPlusRec.SETRANGE("Service Order No.", ServiceOrderNo);
      IF CostPlusRec.FINDLAST THEN
        LastLino := CostPlusRec."Line No."
      ELSE
        LastLino := 0;
      EXIT(LastLino);
    END;

    PROCEDURE AssistEditSalesCondition@1100525027();
    VAR
      ServOrderRec@1100525000 : Record 11012823;
      lvRefDate@1100525005 : Date;
      lvDiscRef1@1100525004 : Code[20];
      lvDiscRef2@1100525003 : Code[20];
      lvRefPrio@1100525002 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
      ValidateCu@1100525006 : Codeunit 11012033;
    BEGIN
      //C015604
      ServOrderRec.GET("Service Order No.");
      lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      ValidateCu.GetRefDiscServOrder(ServOrderRec, lvDiscRef1, lvDiscRef2, lvDiscType::Sales);
      lvRefPrio := ValidateCu.GetRefPrioServContract(ServContractRec, lvDiscType::Sales);
      ValidateCu.ShowSalesCondition(
        "Bill-to Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
        "Basic Price", "Sales Discount % (Item)", "Gross Price", lvRefDate, '',
        lvDiscRef1, lvDiscRef2, lvRefPrio);
    END;

    PROCEDURE SetOverruleServiceContractNo@1100528617(IOverruleServiceContractNo@1100528600 : Code[20]);
    BEGIN
      OverruleServiceContractNo := IOverruleServiceContractNo;
    END;

    PROCEDURE LookupRecipe@1100529400(CopyBln@1100529400 : Boolean);
    VAR
      RecipeFrm@1100525001 : Page 11125073;
      RecipeRec@1100525000 : Record 11020581;
      UserSetup@1100525002 : Record 91;
    BEGIN
      //DP01183
      IF NOT CopyBln THEN
        RecipeFrm.LOOKUPMODE(TRUE);
      RecipeFrm.SetSelection(
        DATABASE::"Service Order Cost Plus Entry","Service Order No.",'','','','','','','','',TRUE,"Line No.");
      IF "Recipe Group" <> '' THEN
        RecipeRec.SETRANGE("Recipe Group","Recipe Group")
      ELSE
        IF UserSetup.GET(USERID) AND (UserSetup."Recipe Group" <> '') THEN
          RecipeRec.SETRANGE("Recipe Group",UserSetup."Recipe Group");
      RecipeFrm.SETTABLEVIEW(RecipeRec);
      IF RecipeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        RecipeFrm.GETRECORD(RecipeRec);
        "Recipe Group" := RecipeRec."Recipe Group";
        VALIDATE(Recipe, RecipeRec."No.");
      END;
    END;

    PROCEDURE ExpandRecipe@1100529401();
    BEGIN
      //DP01183
      IF RecipeExpanded THEN BEGIN
        SETRANGE("Attached to Recipe Line");
        RecipeExpanded := FALSE;
      END ELSE BEGIN
        SETRANGE("Attached to Recipe Line", 0);
        RecipeExpanded := TRUE;
      END;
    END;

    PROCEDURE DeleteRelatedRecipeLines@1100529402();
    VAR
      CostPlusEntry@1100529400 : Record 11012825;
    BEGIN
      //DP01193
      IF "Line No." <> 0 THEN BEGIN
        CostPlusEntry.SETRANGE("Service Order No.", "Service Order No.");
        CostPlusEntry.SETRANGE("Attached to Recipe Line", "Line No.");
        CostPlusEntry.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE DetermineCurrencyCode@1100529404() : Code[10];
    VAR
      Customer@1100485000 : Record 18;
      MaintenanceInvoiceMgt@1100528800 : Codeunit 11012828;
      ContractCurr@1100528801 : Code[10];
    BEGIN
      ContractCurr := MaintenanceInvoiceMgt.GetContractCurrency("Service Contract No.");
      IF ContractCurr <> '' THEN BEGIN
        EXIT(ContractCurr)
      END ELSE BEGIN
        IF Customer.GET("Bill-to Customer No.") THEN //mg.c, 15-02-13: C005445
          EXIT(Customer."Currency Code");
      END;
    END;

    PROCEDURE CheckVATServOrder@1100529405();
    VAR
      VatGroupFoundAt@1100525000 : 'Customer,Contract,Location';
      ServiceOrder@1100529400 : Record 11012823;
      ServContrRec@1100529401 : Record 11012812;
    BEGIN
      IF CustRec.GET("Bill-to Customer No.") THEN
        "VAT Prod. Posting Group" := CustRec."VAT Prod. Posting Group";

      IF ServiceOrder.GET("Service Order No.") THEN BEGIN
        IF NOT ServiceOrder."Charge Vendor (Warranty)" THEN BEGIN
          IF ServContrRec.GET(ServiceOrder."Service Contract No.") THEN BEGIN
            IF ServContrRec."VAT Prod. Posting Group" <> '' THEN BEGIN
              "VAT Prod. Posting Group" := ServContrRec."VAT Prod. Posting Group";
              VatGroupFoundAt := VatGroupFoundAt::Contract;
            END;
          END;
          IF ServLocRec.GET("Service Location No.") THEN BEGIN
            IF ServLocRec."VAT Prod. Posting Group" <> '' THEN BEGIN
              "VAT Prod. Posting Group" := ServLocRec."VAT Prod. Posting Group";
              VatGroupFoundAt := VatGroupFoundAt::Location;
            END;
          END;
          IF ((VatGroupFoundAt = VatGroupFoundAt::Contract) AND ("Bill-to Customer No." <> ServContrRec."Bill-to Customer No. (CP)")) OR
             ((VatGroupFoundAt = VatGroupFoundAt::Location) AND ("Bill-to Customer No." <> ServContrRec."Customer No.")) THEN BEGIN
            IF NOT CustRec.GET("Bill-to Customer No.") THEN CustRec.INIT;
            "VAT Prod. Posting Group" := CustRec."VAT Prod. Posting Group";
          END;
        END;
      END;
    END;

    PROCEDURE CalculateFCYFromLCY@1100525023(iField@1100525003 : Integer);
    VAR
      OrigValue@1100525004 : Decimal;
      DestValue@1100525002 : Decimal;
      SalesExchange@1100525008 : Boolean;
      RoundingPrecision@1100525009 : Decimal;
      CurrencyCode@1100525006 : Code[10];
      CurrencyDate@1100525007 : Date;
      CurrencyFactor@1100525005 : Decimal;
      CurrencyExchangeRate@1100525001 : Record 330;
      Currency2@1100525000 : Record 4;
    BEGIN
      //DP00887
      Currency2.InitRoundingPrecision;
      RoundingPrecision := Currency2."Unit-Amount Rounding Precision";
      CurrencyCode := "Currency Code";
      SalesExchange := TRUE;
      //
      CASE iField OF
        FIELDNO("Gross Price (LCY)"):
          BEGIN
            IF ConvertFCYtoLCY[1] = TRUE THEN EXIT;
            OrigValue := "Gross Price (LCY)";
          END;
        FIELDNO("Basic Price (LCY)"):
          BEGIN
            IF ConvertFCYtoLCY[2] = TRUE THEN EXIT;
            OrigValue := "Basic Price (LCY)";
          END;
        FIELDNO("Cost Price (LCY)"):
          BEGIN
            IF ConvertFCYtoLCY[3] = TRUE THEN EXIT;
            OrigValue := "Cost Price (LCY)";
            CurrencyCode := "Currency Code Costs";
            SalesExchange := FALSE;
          END;
        FIELDNO("Sales Price (LCY)"):
          BEGIN
            IF ConvertFCYtoLCY[4] = TRUE THEN EXIT;
            OrigValue := "Sales Price (LCY)";
          END;
        FIELDNO("Invoice Price (LCY)"):
          BEGIN
            IF ConvertFCYtoLCY[5] = TRUE THEN EXIT;
            OrigValue := "Invoice Price (LCY)";
          END;
        FIELDNO("Surcharge Amount (LCY)"):
          BEGIN
            IF ConvertFCYtoLCY[6] = TRUE THEN EXIT;
            OrigValue := "Surcharge Amount (LCY)";
            RoundingPrecision := Currency2."Amount Rounding Precision";
          END;
      END;
      IF CurrencyCode <> '' THEN BEGIN
        CurrencyDate := "Posting Date";
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, CurrencyCode, SalesExchange);
        DestValue :=
          ROUND(
            CurrencyExchangeRate.ExchangeAmtLCYToFCY(
              0, '', CurrencyDate, CurrencyCode, OrigValue, CurrencyFactor, SalesExchange),
            RoundingPrecision);
      END ELSE BEGIN
        DestValue := OrigValue;
      END;
      CASE iField OF
        FIELDNO("Gross Price (LCY)"): "Gross Price" := DestValue;
        FIELDNO("Basic Price (LCY)"): "Basic Price" := DestValue;
        FIELDNO("Cost Price (LCY)"): "Cost Price" := DestValue;
        FIELDNO("Sales Price (LCY)"): "Sales Price" := DestValue;
        FIELDNO("Invoice Price (LCY)"): "Invoice Price" := DestValue;
        FIELDNO("Surcharge Amount (LCY)"): "Surcharge Amount (FCY)" := DestValue;
      END;
    END;

    PROCEDURE CalculateLCYFromFCY@1100525020(iField@1100525003 : Integer;ValidateLCYField@1100525010 : Boolean);
    VAR
      OrigValue@1100525004 : Decimal;
      DestValue@1100525005 : Decimal;
      SalesExchange@1100525008 : Boolean;
      RoundingPrecision@1100525009 : Decimal;
      CurrencyCode@1100525001 : Code[10];
      CurrencyDate@1100525002 : Date;
      CurrencyFactor@1100525007 : Decimal;
      CurrencyExchangeRate@1100525006 : Record 330;
      Currency2@1100525000 : Record 4;
    BEGIN
      //DP00887
      Currency2.InitRoundingPrecision;
      RoundingPrecision := Currency2."Unit-Amount Rounding Precision";
      CurrencyCode := "Currency Code";
      SalesExchange := TRUE;
      //
      CASE iField OF
        FIELDNO("Gross Price"):
          BEGIN
            IF ConvertFCYtoLCY[1] = TRUE THEN EXIT;
            OrigValue := "Gross Price";
          END;
        FIELDNO("Basic Price"):
          BEGIN
            IF ConvertFCYtoLCY[2] = TRUE THEN EXIT;
            OrigValue := "Basic Price";
          END;
        FIELDNO("Cost Price"):
          BEGIN
            IF ConvertFCYtoLCY[3] = TRUE THEN EXIT;
            OrigValue := "Cost Price";
            CurrencyCode := "Currency Code Costs";
            SalesExchange := FALSE;
          END;
        FIELDNO("Sales Price"):
          BEGIN
            IF ConvertFCYtoLCY[4] = TRUE THEN EXIT;
            OrigValue := "Sales Price";
          END;
        FIELDNO("Invoice Price"):
          BEGIN
            IF ConvertFCYtoLCY[5] = TRUE THEN EXIT;
            OrigValue := "Invoice Price";
          END;
        FIELDNO("Surcharge Amount (FCY)"):
          BEGIN
            IF ConvertFCYtoLCY[6] = TRUE THEN EXIT;
            OrigValue := "Surcharge Amount (FCY)";
            RoundingPrecision := Currency2."Amount Rounding Precision";
          END;
      END;
      IF CurrencyCode <> '' THEN BEGIN
        CurrencyDate := "Posting Date";
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, CurrencyCode, SalesExchange);
        DestValue :=
          ROUND(
            CurrencyExchangeRate.ExchangeAmtFCYToLCY(
              0, '', CurrencyDate, CurrencyCode, OrigValue, CurrencyFactor, SalesExchange),
            RoundingPrecision);
      END ELSE BEGIN
        DestValue := OrigValue;
      END;
      CASE iField OF
        FIELDNO("Gross Price"):
          BEGIN
            IF ValidateLCYField THEN BEGIN
              ConvertFCYtoLCY[1] := TRUE;
              VALIDATE("Gross Price (LCY)", DestValue);
              ConvertFCYtoLCY[1] := FALSE;
            END ELSE
              "Gross Price (LCY)" := DestValue;
          END;
        FIELDNO("Basic Price"):
          BEGIN
            IF ValidateLCYField THEN BEGIN
              ConvertFCYtoLCY[2] := TRUE;
              VALIDATE("Basic Price (LCY)", DestValue);
              ConvertFCYtoLCY[2] := FALSE;
            END ELSE
              "Basic Price (LCY)" := DestValue;
          END;
        FIELDNO("Cost Price"):
          BEGIN
            IF ValidateLCYField THEN BEGIN
              ConvertFCYtoLCY[3] := TRUE;
              VALIDATE("Cost Price (LCY)", DestValue);
              ConvertFCYtoLCY[3] := FALSE;
            END ELSE
              "Cost Price (LCY)" := DestValue;
          END;
        FIELDNO("Sales Price"):
          BEGIN
            IF ValidateLCYField THEN BEGIN
              ConvertFCYtoLCY[4] := TRUE;
              VALIDATE("Sales Price (LCY)", DestValue);
              ConvertFCYtoLCY[4] := FALSE;
            END ELSE
              "Sales Price (LCY)" := DestValue;
          END;
        FIELDNO("Invoice Price"):
          BEGIN
            IF ValidateLCYField THEN BEGIN
              ConvertFCYtoLCY[5] := TRUE;
              VALIDATE("Invoice Price (LCY)", DestValue);
              ConvertFCYtoLCY[5] := FALSE;
            END ELSE
              "Invoice Price (LCY)" := DestValue;
          END;
        FIELDNO("Surcharge Amount (FCY)"):
          BEGIN
            IF ValidateLCYField THEN BEGIN
              ConvertFCYtoLCY[6] := TRUE;
              VALIDATE("Surcharge Amount (LCY)", DestValue);
              ConvertFCYtoLCY[6] := FALSE;
            END ELSE
              "Surcharge Amount (LCY)" := DestValue;
          END;
      END;
    END;

    LOCAL PROCEDURE AssignFCYafterValidateLCY@1100525014(iField@1100525000 : Integer);
    BEGIN
      //C029223
      IF "Currency Code" = '' THEN EXIT;
      CASE iField OF
        FIELDNO("Surcharge %"):
          BEGIN
            "Sales Price" := ROUND(("Basic Price" * (1 + "Surcharge %"/100)), GetRoundingFactor(RoundOption::Price,TRUE));
            "Surcharge Amount (FCY)":= ROUND("Surcharge Amount (FCY)", GetRoundingFactor(RoundOption::Amount,TRUE));
            "Invoice Price" := ROUND((Quantity * DimensionalFactor * "Sales Price" * (1 - "Discount % (ServOrder)"/100)), GetRoundingFactor(RoundOption::Amount,TRUE));
          END;
        FIELDNO("Sales Discount % (Item)"):
          BEGIN
            "Basic Price" := ROUND(("Gross Price" * (100 - "Sales Discount % (Item)")/100), GetRoundingFactor(RoundOption::Price,TRUE));
            "Sales Price" := ROUND(("Basic Price" * (1 + "Surcharge %"/100)), GetRoundingFactor(RoundOption::Price,TRUE));
            "Surcharge Amount (FCY)":= ROUND("Surcharge Amount (FCY)", GetRoundingFactor(RoundOption::Amount,TRUE));
            "Invoice Price" := ROUND((Quantity * DimensionalFactor * "Sales Price" * (1 - "Discount % (ServOrder)"/100)), GetRoundingFactor(RoundOption::Amount,TRUE));
          END;
      END;
      CalculateDiscountServOrder;
    END;

    LOCAL PROCEDURE CalculateDiscountServOrder@1100525015();
    BEGIN
      //C029223
      IF "Currency Code" <> '' THEN BEGIN
        IF "Sales Price" <> 0 THEN BEGIN
          IF Quantity <> 0 THEN
            "Discount % (ServOrder)" := (("Sales Price" - ("Invoice Price"/Quantity))/"Sales Price") * 100
          ELSE
            "Discount % (ServOrder)" := (("Sales Price" - "Invoice Price")/"Sales Price") * 100;
        END ELSE BEGIN
          IF "Invoice Price" <> 0 THEN
            "Discount % (ServOrder)" := 100
          ELSE
            "Discount % (ServOrder)" := 0;
        END;
      END ELSE BEGIN
        IF "Sales Price (LCY)" <> 0 THEN BEGIN
          IF Quantity <> 0 THEN
            "Discount % (ServOrder)" := (("Sales Price (LCY)" - ("Invoice Price (LCY)"/Quantity))/"Sales Price (LCY)") * 100
          ELSE
            "Discount % (ServOrder)" := (("Sales Price (LCY)" - "Invoice Price (LCY)")/"Sales Price (LCY)") * 100;
        END ELSE BEGIN
          IF "Invoice Price (LCY)" <> 0 THEN
            "Discount % (ServOrder)" := 100
          ELSE
            "Discount % (ServOrder)" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE DetermineAlternativeBilltoAddress@1100528763();
    VAR
      ShiptoAddress@1100528600 : Record 222;
    BEGIN
      IF ShiptoAddress.GetAlternativeBilltoAddress("Bill-to Customer No.", ShiptoAddress.Code) THEN
        VALIDATE("Alternative Bill-to Address", ShiptoAddress.Code);
    END;

    PROCEDURE DimensionalFactor@1100529900() : Decimal;
    BEGIN
      //DP01519
      IF "Dimensional Factor" = 0 THEN
        EXIT(1);

      EXIT("Dimensional Factor");
    END;

    PROCEDURE CheckPLE@1100525016(DocType@1100525001 : ' ,Purchase Invoice,Purchase Credit Memo,Sales Invoice,Sales Credit Memo';DocNo@1210190000 : Code[20];LineNo@1210190001 : Integer;VAR GrossPrice@1210190005 : Decimal;VAR NetPrice@1210190006 : Decimal;VAR Discount@1210190007 : Decimal;VAR PriceFoundAt@1100485000 : Text[250];HistCostPriceCostObject@1100525002 : Boolean;ServiceLedgerEntry@1100525000 : Record 11012819);
    VAR
      PurchInvLine@1210190002 : Record 123;
      PurchSetup@1210190004 : Record 312;
    BEGIN
      //C039256
      IF (DocType <> DocType::"Purchase Invoice") AND
         (DocType <> DocType::"Purchase Credit Memo") THEN EXIT;

      PurchSetup.GET;
      PurchInvLine.SETRANGE("Document No.",DocNo);
      IF PurchInvLine.FINDFIRST THEN BEGIN  //check if PLE is for posted purchase line
        IF (GrossPrice = 0) AND (NetPrice = 0) THEN BEGIN
          NetPrice := ServiceLedgerEntry."Unit Cost (LCY)";
          Discount := 0;
          GrossPrice := NetPrice;
          PriceFoundAt := ServiceLedgerEntry.TABLECAPTION;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckDocumentCurrency@1100525021(DocType@1210190003 : ' ,Purchase Invoice,Purchase Credit Memo,Sales Invoice,Sales Credit Memo';DocNo@1210190000 : Code[20]) : Code[10];
    VAR
      PurchInvHeader@1100525001 : Record 122;
    BEGIN
      //C039256
      IF (DocType <> DocType::"Purchase Invoice") AND
         (DocType <> DocType::"Purchase Credit Memo") THEN EXIT;

      IF PurchInvHeader.GET(DocNo) THEN BEGIN
        EXIT(PurchInvHeader."Currency Code");
      END;
    END;

    PROCEDURE LookupUnitPriceLineCode@1100528700(CopyAllowed@1100528702 : Boolean;VAR CopyUsed@1100529600 : Boolean);
    VAR
      ServiceUnitPriceLine@1100528701 : Record 11071769;
      ServiceOrder@1100529604 : Record 11012823;
      ServiceOrderExtension@1100529603 : Record 11071727;
      ServiceUnitPriceLineList@1100528700 : Page 11125271;
      Dummy@1100528500 : Code[20];
    BEGIN
      ServiceOrder.GET("Service Order No.");
      ServiceOrderExtension.GetServOrderExtension("Service Order No.");

      ServiceUnitPriceLine.SETRANGE("Price Book Type", ServiceOrder."Price Book Type");
      ServiceUnitPriceLine.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      ServiceUnitPriceLine.SETRANGE("Index Date", ServiceOrderExtension."Price Book Index Date");
      ServiceUnitPriceLine.SETFILTER("Unit Price Type", '<>%1', ServiceUnitPriceLine."Unit Price Type"::"Summary Element");

      ServiceUnitPriceLineList.LOOKUPMODE(TRUE);
      ServiceUnitPriceLineList.SETTABLEVIEW(ServiceUnitPriceLine);
      ServiceUnitPriceLineList.LOOKUPMODE(TRUE);
      ServiceUnitPriceLineList.SETTABLEVIEW(ServiceUnitPriceLine);
      ServiceUnitPriceLine.SETRANGE(Code, "Unit Price Code");
      IF ServiceUnitPriceLine.FINDFIRST THEN
        ServiceUnitPriceLineList.SETRECORD(ServiceUnitPriceLine);
      ServiceUnitPriceLine.SETRANGE(Code);

      IF CopyAllowed THEN
        ServiceUnitPriceLineList.SetCopyFilter("Service Order No.", ServiceOrder."Price Book Type",
          ServiceOrderExtension."Price Book Code",  ServiceOrderExtension."Price Book Index Date", "Unit Price Code", Dummy, "Unit Price Room",
          "Production Seq. No.", DATABASE::"Service Order Cost Plus Entry");
      IF ServiceUnitPriceLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServiceUnitPriceLineList.GETRECORD(ServiceUnitPriceLine);
        VALIDATE("Unit Price Code", ServiceUnitPriceLine.Code);
      END;
      CopyUsed := ServiceUnitPriceLineList.GetCopyUsed;
    END;

    LOCAL PROCEDURE CheckSurcharge@1100529600();
    VAR
      LocServiceOrder@1100529601 : Record 11012823;
      LocPlantNumber@1100529600 : Record 11012552;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF ("Surcharge %" = 0) AND ("Surcharge Amount (FCY)" = 0) AND ("Surcharge Amount (LCY)" = 0) THEN
        EXIT;
      IF NOT LocServiceOrder.GET("Service Order No.") THEN
        EXIT;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(LocPlantNumber) THEN
        LocPlantNumber.CheckExternalPostNoSurcharge(LocServiceOrder."Plant Type", LocServiceOrder."Plant Number", TRUE);
    END;

    PROCEDURE HandleLookupItem@1100528901(iFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525012 : Record 27;
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      RefDate@1100525003 : Date;
      PurchDiscRef1@1100525002 : Code[20];
      PurchDiscRef2@1100525001 : Code[20];
      SalesDiscRef1@1100528901 : Code[20];
      SalesDiscRef2@1100528900 : Code[20];
      DiscType@1100525000 : 'Purchase,Sales';
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
      TempServiceOrderCostPlusEntry@1100528902 : TEMPORARY Record 11012825;
    BEGIN
      //DP02213
      IF "Recipe Header" THEN EXIT;

      ServOrderRec.GET("Service Order No.");
      ValidateCu.GetRefDiscServOrder(ServOrderRec, PurchDiscRef1, PurchDiscRef2, DiscType::Purchase);

      IF Rec."Line No." <> xRec."Line No." THEN
        xRec.INIT;

      IF iFieldNo = FIELDNO("Item No.") THEN BEGIN
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Service Order Cost Plus Entry",
          "Service Order No.",'','','',0,'','',"Line No.",'','');
        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);
        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF iFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Service Order Cost Plus Entry",
          "Service Order No.",'','','',0,'','',"Line No.",'','');

        BasicItemFrm.SetReference(RefDate, PurchDiscRef1, PurchDiscRef2);
        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          lvRefresh := BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF iFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          TempServiceOrderCostPlusEntry.INIT;
          TempServiceOrderCostPlusEntry."Service Contract No." := "Service Contract No.";
          TempServiceOrderCostPlusEntry."Service Order No." := "Service Order No.";
          TempServiceOrderCostPlusEntry."Customer No." := "Customer No.";
          TempServiceOrderCostPlusEntry."Bill-to Customer No." := "Bill-to Customer No.";
          TempServiceOrderCostPlusEntry.VALIDATE("Item No.","Item No.");
          g_ItemCode := TempServiceOrderCostPlusEntry."Trade Item";
          g_Vendor := TempServiceOrderCostPlusEntry."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Service Order Cost Plus Entry",
          "Service Order No.", '', '', '', 0, '', '', "Line No.", '', '',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

        TradeItemFrm.SetReference(RefDate, PurchDiscRef1, PurchDiscRef2);
        //DP02213.sn
        ValidateCu.GetRefDiscServOrder(ServOrderRec, SalesDiscRef1, SalesDiscRef2, DiscType::Sales);
        TradeItemFrm.SetReferenceSales(SalesDiscRef1, SalesDiscRef2);
        //DP02213.en

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;
      EXIT(lvRefresh);
    END;

    [Integration]
    PROCEDURE OnAfterUnitPriceCodeValidate@1100285100(VAR Rec@1100285100 : Record 11012825;VAR xRec@1100285101 : Record 11012825);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterPostingDateValidate@1100285101(VAR Rec@1100285100 : Record 11012825;VAR xRec@1100285101 : Record 11012825);
    BEGIN
    END;

    BEGIN
    {
      4PS, 15-11-13, DP00483, Performance tuning:
      - MaintainSIFTIndex disabled for all keys
      - MaintainSQLIndex disabled for keys:
          Service Order No.,Invoiced,Chargeable,Additional Cost
          Service Order No.,Cost Object,Posting Date
          Base Service Order No.,Service Order No.,Cost Component,Invoiced,Chargeable
          Base Service Order No.
          Service Order No.,Object No.,Line No.
          Collective List No.,Base Service Order No.,Service Order No.,Cost Object

      4PS, 11-12-13, C008689, In case of Credit Memo the Cost Price will not be set to negative
      DP00887: C029223 (db, 11-04-2017)

      130122 ITERO.SB Filter on indexdate added
      140204 4PSSE.DL take "Unit of Measure" from pricelist and "Unit Price Line Code"
      150807 ITERO.AC Added columns for PriceHistory and modified functions FindCostPrice And FindSalesPrice
      150904 ITERO.AC Added UseManualPriceList in order to flow control in FindSalesPrice
      150905 ITERO.AC Modified function FindSalesPrice and added a new function GetVendorFromCustPriceListPriority (Support for Customer Price List priority)
      151111 ITERO.PR New field: 11128273 Cost Price (LCY) Total sj„lvkostnad
      160116 ITERO.AC Set variable DontUseSingleGTIN in CodeUnit ValidateItems to avoid mixup of GTIN Code in Item Relation (Same as IME420)
      160222 ITERO.SB Calculate sales price
      160609 ITERO.SB Set CurrFieldNo to zero when generate cost plus entries, to get correct value in GetDescription function.
      160620 ITERO.SB RAD-010 Mapping of description, wage component
      160621 ITERO.AC RFC082 Handle calculation for Cost Price Behaviour / Apply Material Surcharge / Bug Fixes
      160622 ITERO.AC RFC082 Bugfix
      160816 ITERO.AC RFC082 Handle price calculation for NAV Items in ValidateItem() and GenerateCostPlusFromServEntry()
      161010 ITERO.AC RAD043 New field "Sales Discount Percent" in Service Order (Use either Sales Discount Group or Sales Discount Percent or none)
      161012 ITERO.AC RAD043 Handle Sales Prices from Item Card for Items without Item Relation (No trade item)
      161016 ITERO.AC RAD043-1 Skip check in Customer table to decide CostPlusBehaviour
      180903 ORANGO.DL By setup, don't post material from FSA to ServiceCostPlusEntries
      180919 ORANGO.DL adjust decimalplaces "Usage from FSA"
      190412 ORANGO.SB Support #23893
      200114 ORANGO.SB Support #26911 SRFC-1010 Added fields work order no., Payment Code (SUP)
      200407 ORANGO.PR Certego Prices Added Code in function FindSalesPrice
      200528 ORANGO.PR Added Code + New Global - PriceDisc
    }
    END.
  }
}

