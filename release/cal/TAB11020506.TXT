OBJECT Table 11020506 Plant Transport Cost Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Transport Order No.");
               "Generated Automatically" := FALSE;
             END;

    CaptionML=[ENU=Transport Cost Line;
               NOR=Transportkostrad;
               SVE=Transportkostnadsrad];
  }
  FIELDS
  {
    { 10  ;   ;Transport Order No. ;Code20        ;TableRelation="Plant Transport Order";
                                                   CaptionML=[ENU=Transport Order No.;
                                                              NOR=Transportordrenr.;
                                                              SVE=Transportordernr] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Plant Order No.     ;Code20        ;TableRelation="Transport Plant Order Line"."Plant Order No." WHERE (Transport Order No.=FIELD(Transport Order No.));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Transfer Date", "From Location", "To Location");

                                                                IF "Plant Order No." = '' THEN BEGIN
                                                                  "Plant Type" := '';
                                                                  EXIT;
                                                                END;

                                                                GetPlantOrderHeader();
                                                                PlantOrderRec.TESTFIELD("Collect Order", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Plant Order No.;
                                                              NOR=Maskinordrenummer;
                                                              SVE=Maskinordernummer] }
    { 31  ;   ;Transfer Date       ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order"."Transfer Date" WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=[ENU=Transfer Date;
                                                              NOR=Overf›ringsdato;
                                                              SVE=™verf”ringsdatum];
                                                   Editable=No }
    { 32  ;   ;From Location       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order"."From Location" WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=[ENU=From Location;
                                                              NOR=Fra lokasjon;
                                                              SVE=Fr†n lagerst„lle];
                                                   Editable=No }
    { 33  ;   ;To Location         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order"."To Location" WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=[ENU=To Location;
                                                              NOR=Til lokasjon;
                                                              SVE=Till lagerst„lle];
                                                   Editable=No }
    { 40  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=VAR
                                                                lvPlantOrderLineRec@1100525000 : Record 11012557;
                                                              BEGIN
                                                                IF "Plant Type" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Plant Order No.");
                                                                lvPlantOrderLineRec.SETRANGE("Plant Order No.", "Plant Order No.");
                                                                lvPlantOrderLineRec.SETRANGE(Type, lvPlantOrderLineRec.Type::Plant);
                                                                lvPlantOrderLineRec.SETRANGE("Plant Type", "Plant Type");
                                                                lvPlantOrderLineRec.FINDFIRST;
                                                              END;

                                                   OnLookup=VAR
                                                              lvPlantOrderLineRec@1100525000 : Record 11012557;
                                                            BEGIN
                                                              lvPlantOrderLineRec.FILTERGROUP(9);
                                                              lvPlantOrderLineRec.SETRANGE("Plant Order No.", "Plant Order No.");
                                                              lvPlantOrderLineRec.SETRANGE(Type, lvPlantOrderLineRec.Type::Plant);
                                                              lvPlantOrderLineRec.FILTERGROUP(0);
                                                              lvPlantOrderLineRec."Plant Type" := "Plant Type";
                                                              IF PAGE.RUNMODAL(PAGE::"Plant Order Line List", lvPlantOrderLineRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Plant Type", lvPlantOrderLineRec."Plant Type");
                                                            END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 60  ;   ;Type                ;Option        ;InitValue=Text;
                                                   OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  "No." := '';
                                                                  Description := '';
                                                                  Quantity := 0;
                                                                  "Unit of Measure" := '';
                                                                  Price := 0;
                                                                  Amount := 0;
                                                                  "Invoice-to" := "Invoice-to"::" ";
                                                                  IF Type = Type::"Load/Unload" THEN
                                                                    FillLoadUnloadDefaultInvoiceTo();
                                                                END;

                                                                GetDefaultCostObject();
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Transport,Load/Unload,Text;
                                                                    NOR=Transport,Laste/Laste av,Tekst;
                                                                    SVE=Transport,lasta/lasta av,text];
                                                   OptionString=Transport,Load/Unload,Text }
    { 70  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Text)) "Standard Text"
                                                                 ELSE IF (Type=CONST(Load/Unload)) "Dimension Value".Code WHERE (Plant=CONST(Load/Unload),
                                                                                                                                 Global Dimension No.=CONST(2))
                                                                                                                                 ELSE "Dimension Value".Code WHERE (Plant=CONST(Transport),
                                                                                                                                                                    Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF "No." = '' THEN
                                                                  EXIT;

                                                                CASE Type OF
                                                                  Type::Text:
                                                                    BEGIN
                                                                      IF "No." <> '' THEN BEGIN
                                                                        StandTextRec.GET("No.");
                                                                        Description := StandTextRec.Description;
                                                                      END;
                                                                    END;
                                                                  Type::Transport,
                                                                  Type::"Load/Unload":
                                                                    BEGIN
                                                                      DimMgtCU.GetDimValueRec(2,"No.",DimValRec,TRUE,'');
                                                                      Description := DimValRec.Name;
                                                                      VALIDATE("Unit of Measure", DimValRec."Unit of Measure");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 80  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 90  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF (Type = Type::Text) THEN BEGIN
                                                                  IF (Quantity <> 0) THEN
                                                                    FIELDERROR(Quantity);
                                                                  EXIT;
                                                                END;

                                                                IF (Quantity <> 0) AND (("Unit of Measure" <> '') OR ("No." <> '')) AND (Price = 0) THEN BEGIN
                                                                  GetTransOrderHeader();
                                                                  Price := SearchTransportPrice(TransOrderRec);
                                                                END;
                                                                VALIDATE(Price);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   BlankZero=Yes }
    { 100 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF (Type = Type::Text) THEN BEGIN
                                                                  IF ("Unit of Measure" <> '') THEN
                                                                    FIELDERROR("Unit of Measure");
                                                                  EXIT;
                                                                END;

                                                                DetermineQuantityForUnit();
                                                                GetTransOrderHeader();
                                                                Price := SearchTransportPrice(TransOrderRec);
                                                                VALIDATE(Price);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet] }
    { 110 ;   ;Price               ;Decimal       ;OnValidate=BEGIN
                                                                IF (Type = Type::Text) THEN BEGIN
                                                                  IF (Price <> 0) THEN
                                                                    FIELDERROR(Price);
                                                                  EXIT;
                                                                END;

                                                                Amount := ROUND((Quantity * Price), 0.01);
                                                              END;

                                                   CaptionML=[ENU=Price;
                                                              NOR=Pris;
                                                              SVE=Pris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 120 ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Type = Type::Text) THEN BEGIN
                                                                  IF (Amount <> 0) THEN
                                                                    FIELDERROR(Amount);
                                                                  EXIT;
                                                                END;

                                                                IF Quantity = 0 THEN
                                                                  Quantity := 1;
                                                                Price := ROUND((Amount / Quantity), 0.00001);
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp];
                                                   BlankZero=Yes }
    { 130 ;   ;Invoice-to          ;Option        ;OnValidate=BEGIN
                                                                GetTransOrderHeader();
                                                                CheckInvoiceTo(TransOrderRec, Rec);
                                                              END;

                                                   CaptionML=[ENU=Invoice-to (Different);
                                                              NOR=Fakturer-til (Annen);
                                                              SVE=Fakturera-till (annan)];
                                                   OptionCaptionML=[ENU=" ,Internal,Project,Location,From Location,To Location";
                                                                    NOR=" ,Internt,Prosjekt,Plassering,Fra lokasjon,Til lokasjon";
                                                                    SVE=" ,Internt,Projekt,Lagerst„lle,Fr†n lagerst„lle,Till lagerst„lle"];
                                                   OptionString=[ ,Internal,Project,Location,From Location,To Location];
                                                   BlankZero=Yes;
                                                   Description=Deviation regarding to transport order header }
    { 150 ;   ;Order Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Transport Cost Line".Amount WHERE (Transport Order No.=FIELD(Transport Order No.)));
                                                   CaptionML=[ENU=Order Amount;
                                                              NOR=Ordrebel›p;
                                                              SVE=Orderbelopp];
                                                   Editable=No }
    { 160 ;   ;Linked Transport Order (Cost);Code20;
                                                   TableRelation="Plant Transport Order";
                                                   CaptionML=[ENU=Linked Transport Order (Cost);
                                                              NOR=Koblet Transportordre (kost);
                                                              SVE=L„nkad transportorder (kostnad)];
                                                   Editable=No }
    { 170 ;   ;Linked Plant Order No. (Cost);Code20;
                                                   TableRelation="Transport Plant Order Line"."Plant Order No." WHERE (Transport Order No.=FIELD("Linked Transport Order (Cost)"));
                                                   CaptionML=[ENU=Linked Plant Order No. (Cost);
                                                              NOR=Koblet maskinordrenr. (kost);
                                                              SVE=L„nkat Maskinsordernr (kostnad)];
                                                   Editable=No }
    { 180 ;   ;Generated Automatically;Boolean    ;CaptionML=[ENU=Generated Automatically;
                                                              NOR=Automatisk Generert;
                                                              SVE=Genereras automatiskt];
                                                   Editable=No }
    { 800 ;   ;Plant Group         ;Code20        ;TableRelation="Plant Group";
                                                   CaptionML=ENU=Plant Group }
  }
  KEYS
  {
    {    ;Transport Order No.,Line No.            ;SumIndexFields=Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1100485000 : Record 11012550;
      TransOrderRec@1100485006 : Record 11020505;
      PlantOrderRec@1100485002 : Record 11012556;
      PlantLocRec@1100485009 : Record 11012554;
      StandTextRec@1100485003 : Record 7;
      DimValRec@1100485004 : Record 349;
      DimMgtCU@1100485005 : Codeunit 408;
      HoldWeightPlantOrderTotWeight@1100485007 : Decimal;
      HoldWeightPlantOrderNo@1100485008 : Code[20];
      Text000@1100485001 : TextConst 'ENU=''%1'' not allowed for a Depot;NOR=%1'' er ikke tillatt for et Depot;SVE=''%1'' „r inte till†tet f”r en dep†';
      HoldWeightType@1100485010 : Option;

    PROCEDURE GetTransOrderHeader@5();
    BEGIN
      IF ("Transport Order No." <> '') THEN
        TransOrderRec.GET("Transport Order No.");
    END;

    PROCEDURE GetPlantOrderHeader@1100485003();
    BEGIN
      IF ("Plant Order No." <> PlantOrderRec."No.") THEN
        PlantOrderRec.GET("Plant Order No.");
    END;

    PROCEDURE GetDefaultCostObject@1100485006();
    VAR
      TransCostObject@1210190000 : Record 11020499;
    BEGIN
      IF (Type = Type::Text) OR ("No." <> '') THEN
        EXIT;

      GetTransOrderHeader();
      //22057.so
      //CASE Type OF
      //  Type::Transport:
      //    IF TransOrderRec."Cost Object Transport" <> '' THEN
      //      VALIDATE("No.", TransOrderRec."Cost Object Transport")
      //    ELSE BEGIN
      //      IF TransOrderRec."Cost Object Transport 2" <> '' THEN
      //        VALIDATE("No.", TransOrderRec."Cost Object Transport 2");
      //    END;
      //  Type::"Load/Unload":
      //    IF TransOrderRec."Cost Object Load/Unload" <> '' THEN
      //      VALIDATE("No.", TransOrderRec."Cost Object Load/Unload");
      //END;
      //22057.eo
      //22057.sn
      IF (TransOrderRec."Shipping Agent" = '') OR (TransOrderRec."Means of Transport" = '') THEN
        EXIT;
      TransCostObject.SETRANGE("Shipping Agent",  TransOrderRec."Shipping Agent");
      TransCostObject.SETRANGE("Means of Transport", TransOrderRec."Means of Transport");
      IF Type <> Type::"Load/Unload" THEN
        TransCostObject.SETRANGE(Type, TransCostObject.Type::Transport)
      ELSE
        TransCostObject.SETRANGE(Type, TransCostObject.Type::"Load/Unload");
      TransCostObject.SETFILTER("Cost Object", '<>%1', '');
      IF TransCostObject.FINDFIRST THEN
        VALIDATE("No.", TransCostObject."Cost Object");
      //22057.en
    END;

    PROCEDURE SearchTransportPrice@1100485000(ITransOrderRec@1100485001 : Record 11020505) : Decimal;
    VAR
      lvTranportRateRec@1100485000 : Record 11020504;
      lvI@1100485002 : Integer;
    BEGIN
      //* Read until a rate (record) is found.
      //* First read rates on 'Means of Transport' mainlevel ("Shipping Agent" and "Means of Transport" both filled).
      //* Then read rates on common mainlevel ("Shipping Agent" and "Means of Transport" both empty).
      //* Whithin these mainlevel read on the next sublevels:
      //* - Cost Object / Unit
      //* - Cost Object (Unit empty)
      //* - Unit (Cost Object empty)


      FOR lvI := 1 TO 2 DO BEGIN
        lvTranportRateRec.RESET;
        IF lvI = 1 THEN BEGIN
          lvTranportRateRec.SETRANGE("Shipping Agent", ITransOrderRec."Shipping Agent");
          lvTranportRateRec.SETRANGE("Means of Transport", ITransOrderRec."Means of Transport");
        END ELSE BEGIN
          lvTranportRateRec.SETRANGE("Shipping Agent", '');
          lvTranportRateRec.SETRANGE("Means of Transport", '');
        END;
        CASE Type OF
          Type::Transport:
            lvTranportRateRec.SETRANGE(Type, lvTranportRateRec.Type::Transport);
          Type::"Load/Unload":
            lvTranportRateRec.SETRANGE(Type, lvTranportRateRec.Type::"Load/Unload");
          ELSE
            EXIT(0);
        END;

        lvTranportRateRec.SETRANGE("Cost Object", "No.");
        lvTranportRateRec.SETRANGE("Unit of Measure Code", "Unit of Measure");
        lvTranportRateRec.SETFILTER("Starting Date", '<=%1', ITransOrderRec."Transport Date");
        IF lvTranportRateRec.FIND('+') THEN
          EXIT(lvTranportRateRec.Rate);

        lvTranportRateRec.SETRANGE("Cost Object", "No.");
        lvTranportRateRec.SETRANGE("Unit of Measure Code", '');
        lvTranportRateRec.SETFILTER("Starting Date", '<=%1', ITransOrderRec."Transport Date");
        IF lvTranportRateRec.FIND('+') THEN
          EXIT(lvTranportRateRec.Rate);

        lvTranportRateRec.SETRANGE("Cost Object", '');
        lvTranportRateRec.SETRANGE("Unit of Measure Code", "Unit of Measure");
        lvTranportRateRec.SETFILTER("Starting Date", '<=%1', ITransOrderRec."Transport Date");
        IF lvTranportRateRec.FIND('+') THEN
          EXIT(lvTranportRateRec.Rate);
      END;

      EXIT(0);
    END;

    PROCEDURE GetWeightCostLine@1100485008() : Decimal;
    VAR
      lvWeight@1100485000 : Decimal;
    BEGIN
      PlantSetupRec.GET;
      IF PlantSetupRec."Lnk TO Cost on Main TO allowed" AND
        (Type = Type::"Load/Unload") AND ("Linked Transport Order (Cost)" <> '')
      THEN BEGIN
        IF "Linked Plant Order No. (Cost)" <> '' THEN
          lvWeight := lvGetTotalWeightPlantOrder("Linked Plant Order No. (Cost)")
        ELSE
          lvWeight := lvGetTotalWeightTransOrder("Linked Transport Order (Cost)");
      END ELSE BEGIN
        IF "Plant Order No." <> '' THEN BEGIN
          IF "Plant Type" <> '' THEN
            lvWeight := lvGetTotalWeightPOPlantType("Plant Order No.", "Plant Type")
          ELSE
            lvWeight := lvGetTotalWeightPlantOrder("Plant Order No.")
        END ELSE
          lvWeight := lvGetTotalWeightTransOrder("Transport Order No.");
      END;

      EXIT(lvWeight);
    END;

    LOCAL PROCEDURE lvGetTotalWeightTransOrder@1100485004(ITransOrderNo@1100485002 : Code[20]) : Decimal;
    VAR
      lvTransPlantOrderRec@1100485000 : Record 11020509;
      lvWeight@1100485001 : Decimal;
    BEGIN
      IF ITransOrderNo = '' THEN
        EXIT(0);

      lvTransPlantOrderRec.SETRANGE("Transport Order No.", ITransOrderNo);
      IF NOT lvTransPlantOrderRec.FIND('-') THEN
        EXIT(0);

      REPEAT
        lvWeight := lvWeight + lvGetTotalWeightPlantOrder(lvTransPlantOrderRec."Plant Order No.");
      UNTIL lvTransPlantOrderRec.NEXT = 0;

      EXIT(lvWeight);
    END;

    LOCAL PROCEDURE lvGetTotalWeightPlantOrder@1100485001(IPlantOrderNo@1100485001 : Code[20]) : Decimal;
    VAR
      lvPlantOrderLine@1100485000 : Record 11012557;
    BEGIN
      IF IPlantOrderNo = '' THEN
        EXIT(0);

      IF (IPlantOrderNo <> HoldWeightPlantOrderNo) OR (Type <> HoldWeightType) THEN BEGIN
        lvPlantOrderLine."Plant Order No." := IPlantOrderNo;
        HoldWeightPlantOrderTotWeight := lvPlantOrderLine.PlantOrderTotalWeight((Type = Type::"Load/Unload"));
        HoldWeightPlantOrderNo := IPlantOrderNo;
        HoldWeightType := Type;
      END;

      EXIT(HoldWeightPlantOrderTotWeight);
    END;

    LOCAL PROCEDURE lvGetTotalWeightPOPlantType@1100525000(IPlantOrderNo@1100485001 : Code[20];IPlantType@1100525000 : Code[20]) : Decimal;
    VAR
      lvPlantOrderLine@1100485000 : Record 11012557;
    BEGIN
      IF (IPlantOrderNo = '') OR (IPlantType = '') THEN
        EXIT(0);

      lvPlantOrderLine."Plant Order No." := IPlantOrderNo;
      EXIT(lvPlantOrderLine.PlantOrderTotalWeightPlantType(IPlantType, (Type = Type::"Load/Unload")));
    END;

    PROCEDURE DetermineQuantityForUnit@1100485002();
    VAR
      lvWeight@1100485000 : Decimal;
    BEGIN
      IF ("Unit of Measure" = '') OR ("Plant Type" <> '') THEN
        EXIT;

      PlantSetupRec.GET;

      CASE "Unit of Measure" OF
        PlantSetupRec."Unit of Measure Distance":
          BEGIN
            GetTransOrderHeader();
            TransOrderRec.CALCFIELDS("From Depot", "To Depot");
            IF ((TransOrderRec."From Depot") AND (NOT TransOrderRec."To Depot")) OR
               (NOT TransOrderRec."From Depot") AND (TransOrderRec."To Depot")
            THEN BEGIN                                                               //* Arrival or Removal
              IF TransOrderRec."From Depot" THEN
                GetLocation(TransOrderRec."To Location")
              ELSE
                GetLocation(TransOrderRec."From Location");
              IF PlantLocRec.Distance <> 0 THEN
                VALIDATE(Quantity, PlantLocRec.Distance);
            END;
          END;
        PlantSetupRec."Unit of Measure Weight 1":
          BEGIN
            PlantSetupRec.TESTFIELD("Qty. per Unit of Msr. Weight 1");
            lvWeight := GetWeightCostLine();
            IF lvWeight <> 0 THEN
              VALIDATE(Quantity, ROUND((lvWeight / PlantSetupRec."Qty. per Unit of Msr. Weight 1"), 0.01));
          END;
        PlantSetupRec."Unit of Measure Weight 2":
          BEGIN
            PlantSetupRec.TESTFIELD("Qty. per Unit of Msr. Weight 2");
            lvWeight := GetWeightCostLine();
            IF lvWeight <> 0 THEN
              VALIDATE(Quantity, ROUND((lvWeight / PlantSetupRec."Qty. per Unit of Msr. Weight 2"), 0.01));
          END;
      END;
    END;

    PROCEDURE GetLocation@1100485005(ILocation@1100485000 : Code[20]);
    BEGIN
      IF (ILocation <> PlantLocRec.Code) THEN BEGIN
        IF (ILocation = '') THEN
          CLEAR(PlantLocRec)
        ELSE BEGIN
          IF NOT PlantLocRec.GET(ILocation) THEN
            CLEAR(PlantLocRec)
        END;
      END;
    END;

    PROCEDURE FillLoadUnloadDefaultInvoiceTo@1100485009();
    BEGIN
      PlantSetupRec.GET;

      CASE PlantSetupRec."Default Invoice-to Load/Unload" OF
        PlantSetupRec."Default Invoice-to Load/Unload"::Location:
          "Invoice-to" := "Invoice-to"::Location;
        PlantSetupRec."Default Invoice-to Load/Unload"::Internal:
          "Invoice-to" := "Invoice-to"::Internal;
        PlantSetupRec."Default Invoice-to Load/Unload"::Project:
          "Invoice-to" := "Invoice-to"::Project;
      END;
    END;

    PROCEDURE CheckInvoiceTo@1100485007(ITransOrderRec@1100485000 : Record 11020505;ITransOrderCostLineRec@1100485001 : Record 11020506);
    BEGIN
      //* This function is also called at releasing/posting of transport order.
      WITH ITransOrderCostLineRec DO BEGIN
        CASE "Invoice-to" OF
          "Invoice-to"::" ":
            EXIT;
          "Invoice-to"::Internal:
            ITransOrderRec.TESTFIELD("Internal Customer No.");
          "Invoice-to"::Project:
            ITransOrderRec.TESTFIELD("Project No.");
          "Invoice-to"::Location:
            BEGIN
              IF ITransOrderRec.Type = ITransOrderRec.Type::"Other Transfers" THEN BEGIN
                ITransOrderRec.CALCFIELDS("From Depot", "To Depot");
                IF ITransOrderRec."From Depot" AND ITransOrderRec."To Depot" THEN
                  FIELDERROR("Invoice-to", STRSUBSTNO(Text000, "Invoice-to"));
              END;
            END;
          "Invoice-to"::"From Location":
            BEGIN
              ITransOrderRec.TESTFIELD(Type, ITransOrderRec.Type::"Other Transfers");
              ITransOrderRec.CALCFIELDS("From Depot");
              IF ITransOrderRec."From Depot" THEN
                FIELDERROR("Invoice-to", STRSUBSTNO(Text000, "Invoice-to"));
            END;
          "Invoice-to"::"To Location":
            BEGIN
              ITransOrderRec.TESTFIELD(Type, ITransOrderRec.Type::"Other Transfers");
              ITransOrderRec.CALCFIELDS("To Depot");
              IF ITransOrderRec."To Depot" THEN
                FIELDERROR("Invoice-to", STRSUBSTNO(Text000, "Invoice-to"));
            END;
          ELSE
            FIELDERROR("Invoice-to");
        END;
      END;
    END;

    BEGIN
    END.
  }
}

