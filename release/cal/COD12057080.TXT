OBJECT Codeunit 12057080 ExFlow Event Bus. Logic
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100285000 : TextConst 'ENU=Amount is too big for rounding, %1 %3 \Maximum is %2 %3;SVE=Beloppet f”r avrundning „r f”r stort, %1 %3. \F†r max vara %2 %3';

    PROCEDURE OnAfterDeleteWebCompany@1100285000(VAR Rec@1100285001 : Record 2000000006;RunTrigger@1100285000 : Boolean);
    VAR
      WebCompany@1100285002 : Record 12013630;
    BEGIN
      IF WebCompany.GET(Rec.Name) THEN
        IF WebCompany.DELETE THEN;
    END;

    PROCEDURE OnValidateDeferalStartDate@1100285001(VAR Rec@1100285000 : Record 1701;VAR xRec@1100285008 : Record 1701;CurrFieldNo@1100285007 : Integer);
    VAR
      PurchLine@1100285001 : Record 39;
      ExfPurchLine@1100285002 : Record 12013588;
      ExfImpMgr@1100285003 : Codeunit 12013604;
      IntInbDocNo@1100285004 : Integer;
      ExPerCodeMgt@1100285006 : Codeunit 12013599;
      DocLine@1100285009 : Record 12013609;
    BEGIN
      IF CurrFieldNo <> Rec.FIELDNO("Start Date") THEN
        EXIT;

      IF Rec."Start Date" = xRec."Start Date" THEN
        EXIT;

      IF Rec."Deferral Doc. Type" <> Rec."Deferral Doc. Type"::Purchase THEN
        EXIT;

      PurchLine.SETRANGE("Document Type",Rec."Document Type");
      PurchLine.SETRANGE("Document No.",Rec."Document No.");
      PurchLine.SETRANGE("Line No.",Rec."Line No.");
      PurchLine.SETRANGE("Deferral Code",Rec."Deferral Code");
      IF PurchLine.FINDFIRST THEN
        IF PurchLine."Returns Deferral Start Date" <> Rec."Start Date" THEN BEGIN
          PurchLine."Returns Deferral Start Date" := Rec."Start Date";
          PurchLine.MODIFY(FALSE);
          IF DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
            ExPerCodeMgt.UpdatePerdateForExDoc(DocLine,PurchLine);
          EXIT;
        END;

      ExfImpMgr.TransformInteger(Rec."Document No.",IntInbDocNo);
      IF IntInbDocNo = 0 THEN
        EXIT;

      ExfPurchLine.SETRANGE("Document Type",Rec."Document Type");
      ExfPurchLine.SETRANGE("Inbound Document No.",IntInbDocNo);
      ExfPurchLine.SETRANGE("Line No.",Rec."Line No.");
      ExfPurchLine.SETRANGE("Deferral Code",Rec."Deferral Code");
      IF ExfPurchLine.FINDFIRST THEN
        IF ExfPurchLine."Returns Deferral Start Date" <> Rec."Start Date" THEN BEGIN
          ExfPurchLine."Returns Deferral Start Date" := Rec."Start Date";
          ExfPurchLine.MODIFY(FALSE);
        END;
    END;

    PROCEDURE C90_OnBeforeInvoiceRoundingAmount@1100285002(PurchHeader@1100285000 : Record 38;TotalAmountIncludingVAT@1100285001 : Decimal;UseTempData@1100285002 : Boolean;VAR InvoiceRoundingAmount@1100285003 : Decimal);
    VAR
      ExFlowSetup@1100285004 : Record 12013601;
      MaxPurchRounding@1100285005 : Decimal;
      CurrExchRate@1100285006 : Record 330;
      GLSetup@1100285007 : Record 98;
      CurrCode@1100285008 : Code[10];
    BEGIN
      InvoiceRoundingAmount := ROUND(PurchHeader."Gross Invoice Amount ExFlow" - TotalAmountIncludingVAT);
      IF InvoiceRoundingAmount = 0 THEN
        EXIT;

      IF NOT ExFlowSetup.GET THEN
        EXIT;

      GLSetup.GET;
      GLSetup.TESTFIELD("LCY Code");

      IF PurchHeader."Currency Code" <> '' THEN BEGIN
        MaxPurchRounding := ROUND(ExFlowSetup."Max. Diff. Gross Amount" / CurrExchRate.ExchangeAmtFCYToLCY(0,'',TODAY,PurchHeader."Currency Code",1,PurchHeader."Currency Factor",FALSE)); //4PS
        InvoiceRoundingAmount := ROUND(InvoiceRoundingAmount/CurrExchRate.ExchangeAmtFCYToLCY(0,'',TODAY,PurchHeader."Currency Code",1,PurchHeader."Currency Factor",FALSE)); //4PS
        CurrCode := PurchHeader."Currency Code";
      END ELSE BEGIN
        MaxPurchRounding := ExFlowSetup."Max. Diff. Gross Amount";
        CurrCode := GLSetup."LCY Code";
      END;

      IF ABS(InvoiceRoundingAmount) > ABS(MaxPurchRounding) THEN
        ERROR(Text001,InvoiceRoundingAmount,CurrCode);
    END;

    BEGIN
    {
      4PS Currency Exchange adaption
    }
    END.
  }
}

