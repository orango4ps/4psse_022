OBJECT Report 11012299 Generate Vendor Assessment New
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Erzeugen Kreditorenbeurteilung;
               ENU=Generate Vendor Assessment;
               NLD=Genereren leveranciersbeoordeling;
               SVE=Generera leverant”rsbed”mning];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CheckSelections;
                END;

  }
  DATASET
  {
    { 1100528500;0;DataItem;                 ;
               DataItemTable=Table23;
               OnAfterGetRecord=BEGIN
                                  TmpPurchaseHeader.RESET;
                                  TmpPurchaseHeader.DELETEALL;
                                  VendorHasOwnCriteria := FALSE;
                                  VendorAssessmentCriterion.SETRANGE("Vendor No.", Vendor."No.");
                                  VendorHasOwnCriteria := NOT VendorAssessmentCriterion.ISEMPTY;
                                END;

               ReqFilterFields=No. }

    { 1100528502;1;DataItem;                 ;
               DataItemTable=Table11012297;
               DataItemTableView=SORTING(Code);
               DataItemLink=Code=FIELD(Vendor Assessment Rule) }

    { 1100528501;2;DataItem;                 ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,Buy-from Vendor No.)
                                 WHERE(Document Type=FILTER(Order));
               OnPreDataItem=BEGIN
                               IF ("Vendor Assessment Rules"."Vendor Qualification" <> '') AND ("Vendor Assessment Rules"."Vendor Qualification" <> Vendor."Vendor Qualification") THEN
                                 CurrReport.BREAK;
                               "Purchase Header".SETRANGE("Document Date",AssessmentStartDate,AssessmentEndDate);
                             END;

               OnAfterGetRecord=VAR
                                  OrderAmount@1100528500 : Decimal;
                                BEGIN
                                  OrderAmount := "Purchase Header".CalcTotalOrderAmountLCY;
                                  IF OrderAmount >= "Vendor Assessment Rules"."Minimum Order Amount" THEN BEGIN
                                    TmpPurchaseHeader := "Purchase Header";
                                    TmpPurchaseHeader.INSERT;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                TmpPurchaseHeader.RESET;
                                IF "Vendor Assessment Rules"."Number of Orders" <= TmpPurchaseHeader.COUNT THEN BEGIN
                                  IF "Vendor Assessment Rules"."Sample of Number" = 0 THEN
                                    "Vendor Assessment Rules"."Sample of Number" := 1;
                                  IF TmpPurchaseHeader.FINDSET THEN
                                    REPEAT
                                      TmpPurchaseHeader.MARK(TRUE);
                                    UNTIL TmpPurchaseHeader.NEXT("Vendor Assessment Rules"."Sample of Number") <> "Vendor Assessment Rules"."Sample of Number";
                                  IF TmpPurchaseHeader.FINDSET THEN
                                    REPEAT
                                      IF NOT TmpPurchaseHeader.MARK THEN
                                        TmpPurchaseHeader.DELETE;
                                  UNTIL TmpPurchaseHeader.NEXT = 0;
                                END ELSE BEGIN
                                  TmpPurchaseHeader.RESET;
                                  TmpPurchaseHeader.DELETEALL;
                                END;
                              END;

               DataItemLinkReference=Vendor;
               DataItemLink=Buy-from Vendor No.=FIELD(No.) }

    { 1100528504;2;DataItem;                 ;
               DataItemTable=Table11012290;
               DataItemTableView=SORTING(Code);
               OnPreDataItem=BEGIN
                               TmpPurchaseHeader.RESET;
                               TmpPurchaseHeader.MARKEDONLY;
                               IF NOT TmpPurchaseHeader.FINDFIRST THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  PurchaseLine.RESET;
                                  TmpPurchaseHeader.RESET;
                                  TmpPurchaseHeader.MARKEDONLY;

                                  IF TmpPurchaseHeader.FINDSET THEN
                                    REPEAT
                                      ResponsibleEmployee := '';
                                      PurchaseLine.SETRANGE("Document Type", TmpPurchaseHeader."Document Type");
                                      PurchaseLine.SETRANGE("Document No.", TmpPurchaseHeader."No.");
                                      PurchaseLine.SETFILTER(Type, '<>%1', PurchaseLine.Type::" ");
                                      IF PurchaseLine.FINDSET THEN BEGIN
                                        REPEAT
                                          IF PurchaseLine."Job No." <> '' THEN
                                            ResponsibleEmployee := ResponsiblePersonProject();
                                          IF (ResponsibleEmployee = '') AND (PurchaseLine."Service Order No." <> '') THEN
                                            ResponsibleEmployee := ResponsiblePersonService();
                                        UNTIL (ResponsibleEmployee <> '') OR (PurchaseLine.NEXT = 0);
                                      END;
                                      IF (ResponsibleEmployee = '') AND (TmpPurchaseHeader."Purchaser Code" <> '') THEN
                                        ResponsibleEmployee := ResponsiblePurchaser(TmpPurchaseHeader."Purchaser Code");
                                      IF (ResponsibleEmployee = '') AND (Vendor."Purchaser Code" <> '') THEN
                                        ResponsibleEmployee := ResponsiblePurchaser(Vendor."Purchaser Code");
                                      TmpPurchaseHeader."Applies-to Doc. No." := ResponsibleEmployee;
                                      TmpPurchaseHeader.MODIFY;
                                    UNTIL TmpPurchaseHeader.NEXT = 0;
                                END;
                                 }

    { 2089;3   ;DataItem;                    ;
               DataItemTable=Table11012291;
               DataItemTableView=SORTING(Department,Criterion);
               OnPreDataItem=BEGIN
                               TmpPurchaseHeader.RESET;
                               TmpPurchaseHeader.MARKEDONLY;
                               IF NOT TmpPurchaseHeader.FINDFIRST THEN
                                 CurrReport.BREAK;

                               IF NOT VendorAssessmentNew.GET(AssessmentDate) THEN BEGIN
                                 VendorAssessmentNew.Date := AssessmentDate;
                                 VendorAssessmentNew."Assessment Period" := AssessmentPeriod;
                                 VendorAssessmentNew."Assessment Period Length" := AssessmentPeriodQuantity;
                                 VendorAssessmentNew."Start Date" := AssessmentStartDate;
                                 VendorAssessmentNew."End Date" := AssessmentEndDate;
                                 VendorAssessmentNew."Assessment Year" := AssessmentYear;
                                 VendorAssessmentNew.Description := AssessmentDescription;
                                 VendorAssessmentNew.INSERT;
                               END;

                               IF NOT VendorAssessmentVendor.GET(AssessmentDate, Vendor."No.") THEN BEGIN
                                 VendorAssessmentVendor.Date := AssessmentDate;
                                 VendorAssessmentVendor."Vendor No." := Vendor."No.";
                                 VendorAssessmentVendor.INSERT;
                               END;
                             END;

               OnAfterGetRecord=VAR
                                  lvInsertCrit@1210190000 : Boolean;
                                BEGIN
                                  lvInsertCrit := TRUE;
                                  IF (NOT Mandatory) AND VendorHasOwnCriteria THEN BEGIN
                                    IF NOT VendorAssessmentCriterion.GET(Vendor."No.", Department, Criterion) THEN
                                      lvInsertCrit := FALSE;
                                  END;

                                  IF lvInsertCrit THEN BEGIN
                                    IF NOT VendorAssessmentLineNew.GET(AssessmentDate, Vendor."No.", '', '', '') THEN BEGIN
                                      VendorAssessmentLineNew.INIT;
                                      VendorAssessmentLineNew.Date := AssessmentDate;
                                      VendorAssessmentLineNew."Vendor No." := Vendor."No.";
                                      VendorAssessmentLineNew.Department := '';
                                      VendorAssessmentLineNew.Criterion := '';
                                      VendorAssessmentLineNew."Employee No." := '';
                                      VendorAssessmentLineNew."Weight Factor" := 0;
                                      VendorAssessmentLineNew.INSERT;
                                    END;

                                    IF NOT VendorAssessmentLineNew.GET(AssessmentDate, Vendor."No.", Department, '', '') THEN BEGIN
                                      VendorAssessmentLineNew.INIT;
                                      VendorAssessmentLineNew.Date := AssessmentDate;
                                      VendorAssessmentLineNew."Vendor No." := Vendor."No.";
                                      VendorAssessmentLineNew.Department := Department;
                                      VendorAssessmentLineNew.Criterion := '';
                                      VendorAssessmentLineNew."Employee No." := '';
                                      VendorAssessmentLineNew."Weight Factor" := 0;
                                      VendorAssessmentLineNew.INSERT;
                                    END;
                                  {
                                    VendorAssessmentLineNew.INIT;
                                    IF NOT VendorAssessmentLineNew.GET(AssessmentDate, Vendor."No.", Department, Criterion) THEN BEGIN
                                      VendorAssessmentLineNew.Date := AssessmentDate;
                                      VendorAssessmentLineNew."Vendor No." := Vendor."No.";
                                      VendorAssessmentLineNew.Department := Department;
                                      VendorAssessmentLineNew.Criterion := Criterion;
                                      VendorAssessmentLineNew."Employee new" := '';
                                      VendorAssessmentLineNew."Weight Factor" := "Weight Factor";
                                      VendorAssessmentLineNew.INSERT;
                                    END;

                                  }
                                    TmpPurchaseHeader.RESET;
                                    TmpPurchaseHeader.MARKEDONLY;
                                    IF TmpPurchaseHeader.FINDSET THEN BEGIN
                                      REPEAT
                                        VendorAssessmentLineNew.INIT;
                                        IF NOT VendorAssessmentLineNew.GET(AssessmentDate, Vendor."No.", Department, Criterion, TmpPurchaseHeader."Applies-to Doc. No.") THEN BEGIN
                                          VendorAssessmentLineNew.Date := AssessmentDate;
                                          VendorAssessmentLineNew."Vendor No." := Vendor."No.";
                                          VendorAssessmentLineNew.Department := Department;
                                          VendorAssessmentLineNew.Criterion := Criterion;
                                          VendorAssessmentLineNew."Employee No." := TmpPurchaseHeader."Applies-to Doc. No.";
                                          VendorAssessmentLineNew."Purchase Order" := TmpPurchaseHeader."No.";
                                          VendorAssessmentLineNew."Weight Factor" := "Weight Factor";
                                          VendorAssessmentLineNew.INSERT;
                                        END;
                                      UNTIL TmpPurchaseHeader.NEXT = 0;
                                    END;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                VendorAssessmentLineNew.RESET;
                                VendorAssessmentLineNew.SETRANGE(Date, AssessmentDate);
                                VendorAssessmentLineNew.SETRANGE("Vendor No.",Vendor."No.");
                                IF NOT VendorAssessmentLineNew.ISEMPTY THEN BEGIN
                                  TmpPurchaseHeader.RESET;
                                  TmpPurchaseHeader.MARKEDONLY;
                                  IF TmpPurchaseHeader.FINDFIRST THEN
                                    REPEAT
                                      VendorAssessmentOrder.Date := AssessmentDate;
                                      VendorAssessmentOrder."Vendor No." := Vendor."No.";
                                      VendorAssessmentOrder.Department := '';
                                      VendorAssessmentOrder.Employee := '';
                                      VendorAssessmentOrder."Purchase Order" := TmpPurchaseHeader."No.";
                                      IF NOT VendorAssessmentOrder.GET(AssessmentDate,Vendor."No.",'','',TmpPurchaseHeader."No.") THEN
                                        VendorAssessmentOrder.INSERT;

                                      VendorAssessmentOrder.Department := "Department Assessment".Code;
                                      IF NOT VendorAssessmentOrder.GET(AssessmentDate,Vendor."No.","Department Assessment".Code,'',TmpPurchaseHeader."No.") THEN
                                        VendorAssessmentOrder.INSERT;

                                      VendorAssessmentOrder.Employee := TmpPurchaseHeader."Applies-to Doc. No." ;
                                      IF NOT VendorAssessmentOrder.GET(AssessmentDate,Vendor."No.","Department Assessment".Code,TmpPurchaseHeader."Applies-to Doc. No.",TmpPurchaseHeader."No.") THEN
                                        VendorAssessmentOrder.INSERT;

                                      IF NOT VendorAssessmentEmployee.GET(AssessmentDate,TmpPurchaseHeader."Applies-to Doc. No.") THEN BEGIN
                                        VendorAssessmentEmployee.Date := AssessmentDate;
                                        VendorAssessmentEmployee."Employee No." := TmpPurchaseHeader."Applies-to Doc. No.";
                                        VendorAssessmentEmployee.INSERT;
                                      END;

                                    UNTIL TmpPurchaseHeader.NEXT = 0;
                                END;


                                VendorAssessmentLineNew.RESET;
                                VendorAssessmentLineNew.SETRANGE(Date, AssessmentDate);
                                VendorAssessmentLineNew.SETRANGE("Vendor No.",Vendor."No.");
                                IF NOT VendorAssessmentLineNew.ISEMPTY THEN BEGIN
                                  TmpPurchaseHeader.RESET;
                                  TmpPurchaseHeader.MARKEDONLY;
                                  IF TmpPurchaseHeader.FINDFIRST THEN
                                    REPEAT
                                      VendorAssessmentOrder.INIT;
                                      VendorAssessmentOrder.Date := AssessmentDate;
                                      VendorAssessmentOrder."Vendor No." := Vendor."No.";
                                      VendorAssessmentOrder.Department := "Department Assessment".Code;
                                      VendorAssessmentOrder."Purchase Order" := TmpPurchaseHeader."No.";
                                      VendorAssessmentOrder.Employee := TmpPurchaseHeader."Applies-to Doc. No." ;
                                      IF VendorAssessmentOrder.INSERT THEN;
                                    UNTIL TmpPurchaseHeader.NEXT = 0;
                                END;
                              END;

               DataItemLink=Department=FIELD(Code) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=VAR
                   VendorAssessmentNew@1100528500 : Record 11012298;
                   PeriodCharacter@1100528502 : Text[1];
                 BEGIN
                   IF VendorAssessmentNew.FINDLAST THEN BEGIN
                     CASE VendorAssessmentNew."Assessment Period" OF
                       VendorAssessmentNew."Assessment Period"::Day:
                         PeriodCharacter := 'D';
                       VendorAssessmentNew."Assessment Period"::Week:
                         PeriodCharacter := 'W';
                       VendorAssessmentNew."Assessment Period"::Month:
                         PeriodCharacter := 'M';
                       VendorAssessmentNew."Assessment Period"::Quarter:
                         PeriodCharacter := 'Q';
                     END;
                     AssessmentPeriod := VendorAssessmentNew."Assessment Period";
                     AssessmentPeriodQuantity := VendorAssessmentNew."Assessment Period Length";
                     AssessmentStartDate := CALCDATE('<+1D>', VendorAssessmentNew."End Date");
                     AssessmentEndDate := CALCDATE('<+'+ FORMAT(VendorAssessmentNew."Assessment Period Length") + PeriodCharacter + '>', VendorAssessmentNew."End Date");
                     AssessmentYear := DATE2DMY(AssessmentEndDate, 3);
                     AssessmentDate := AssessmentEndDate;
                   END ELSE BEGIN
                     AssessmentPeriod := AssessmentPeriod::Month;
                     AssessmentPeriodQuantity := 1;
                     AssessmentStartDate := CALCDATE('<-1M>', TODAY);
                     AssessmentStartDate += 1;
                     AssessmentEndDate := TODAY;
                     AssessmentYear := DATE2DMY(TODAY, 3);
                     AssessmentDate := AssessmentEndDate;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1100409001;0;Container;
                  ContainerType=ContentArea }

      { 1100409000;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             SVE=Alternativ] }

      { 1100528201;2;Field  ;
                  CaptionML=[DEU=Beurteilen bis einschl. Datum;
                             ENU=Assessment until Date;
                             NLD=Beoordelen t/m datum];
                  NotBlank=Yes;
                  SourceExpr=AssessmentDate;
                  OnValidate=VAR
                               PeriodCharacter@1100528200 : Text[1];
                             BEGIN
                               AssessmentEndDate := AssessmentDate;
                               CASE AssessmentPeriod OF
                                   AssessmentPeriod::Day:
                                     PeriodCharacter := 'D';
                                   AssessmentPeriod::Week:
                                     PeriodCharacter := 'W';
                                   AssessmentPeriod::Month:
                                     PeriodCharacter := 'M';
                                   AssessmentPeriod::Quarter:
                                     PeriodCharacter := 'Q';
                               END;
                               AssessmentStartDate := CALCDATE('<-'+ FORMAT(AssessmentPeriodQuantity) + PeriodCharacter + '>',
                                 AssessmentDate);
                               AssessmentStartDate += 1;
                             END;
                              }

      { 1100528200;2;Field  ;
                  CaptionML=[DEU=Beschreibung;
                             ENU=Description;
                             NLD=Omschrijving;
                             SVE=Beskrivning];
                  SourceExpr=AssessmentDescription }

      { 1100528501;2;Field  ;
                  CaptionML=[DEU=L„nge Periode;
                             ENU=Period Length;
                             NLD=Lengte Periode;
                             SVE=Periodl„ngd];
                  OptionCaptionML=[DEU=Tag,Woche,Monat,Quartal;
                                   ENU=Day,Week,Month,Quarter;
                                   NLD=Dag,Week,Maand,Kwartaal;
                                   SVE=Dag,Vecka,M†nad,Kvartal];
                  SourceExpr=AssessmentPeriod;
                  OnValidate=VAR
                               PeriodCharacter@1100528200 : Text[1];
                             BEGIN
                               CASE AssessmentPeriod OF
                                   AssessmentPeriod::Day:
                                     PeriodCharacter := 'D';
                                   AssessmentPeriod::Week:
                                     PeriodCharacter := 'W';
                                   AssessmentPeriod::Month:
                                     PeriodCharacter := 'M';
                                   AssessmentPeriod::Quarter:
                                     PeriodCharacter := 'Q';
                               END;
                               AssessmentStartDate := CALCDATE('<-'+ FORMAT(AssessmentPeriodQuantity) + PeriodCharacter + '>',
                                 AssessmentDate);
                               AssessmentStartDate += 1;
                             END;
                              }

      { 1100528502;2;Field  ;
                  CaptionML=[DEU=Anzahl Perioden;
                             ENU=Period Quantity;
                             NLD=Aantal Periodes];
                  SourceExpr=AssessmentPeriodQuantity;
                  OnValidate=VAR
                               PeriodCharacter@1100528200 : Text[1];
                             BEGIN
                               CASE AssessmentPeriod OF
                                   AssessmentPeriod::Day:
                                     PeriodCharacter := 'D';
                                   AssessmentPeriod::Week:
                                     PeriodCharacter := 'W';
                                   AssessmentPeriod::Month:
                                     PeriodCharacter := 'M';
                                   AssessmentPeriod::Quarter:
                                     PeriodCharacter := 'Q';
                               END;
                               AssessmentStartDate := CALCDATE('<-'+ FORMAT(AssessmentPeriodQuantity) + PeriodCharacter + '>',
                                 AssessmentDate);
                               AssessmentStartDate += 1;
                             END;
                              }

      { 1100528503;2;Field  ;
                  CaptionML=[DEU=Beurteilen ab Datum;
                             ENU=Assessment from Date;
                             NLD=Beoordelen vanaf datum];
                  SourceExpr=AssessmentStartDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      VendorAssessmentNew@1100528511 : Record 11012298;
      VendorAssessmentVendor@1210190005 : Record 11012299;
      VendorAssessmentLineNew@1210190006 : Record 11072420;
      VendorAssessmentCriterion@1210190007 : Record 11012296;
      Text000@1210190001 : TextConst 'DEU=''%1'' muss in Registerkarte ''Optionen'' eingegeben werden.;ENU=%1 must be filled;NLD=%1 moet worden ingevuld.;SVE=%1 m†ste fyllas';
      Text001@1210190004 : TextConst 'DEU=Beurteilungsdatum;ENU=Assessment Date;NLD=Beoordelingsdatum;SVE=Bed”mningsdatum';
      VendorAssessmentOrder@1100528510 : Record 11072421;
      VendorAssessmentEmployee@1100528200 : Record 11072423;
      TmpPurchaseHeader@1100528500 : TEMPORARY Record 38;
      PurchaseLine@1100528509 : Record 39;
      VendorHasOwnCriteria@1100528501 : Boolean;
      ResponsibleEmployee@1100528502 : Code[20];
      AssessmentYear@1100528503 : Integer;
      AssessmentPeriod@1100528504 : 'Day,Week,Month,Quarter';
      AssessmentPeriodQuantity@1100528505 : Integer;
      AssessmentStartDate@1100528506 : Date;
      AssessmentEndDate@1100528507 : Date;
      AssessmentDate@1100528508 : Date;
      AssessmentDescription@1100528512 : Text[50];

    LOCAL PROCEDURE CheckSelections@1100525004();
    BEGIN
      IF (AssessmentDate = 0D) THEN
        ERROR(Text000, Text001);
    END;

    LOCAL PROCEDURE ResponsiblePersonProject@1100528516() : Code[20];
    VAR
      ProjectResponsiblePerson@1100528500 : Record 11012040;
      Job@1100528501 : Record 11072003;
    BEGIN
      IF Job.GET(PurchaseLine."Job No.") THEN BEGIN
        ProjectResponsiblePerson.SETRANGE("Project No.", PurchaseLine."Job No.");
        ProjectResponsiblePerson.SETRANGE(Responsibility, "Department Assessment"."Project Responsibility");
        IF ProjectResponsiblePerson.FINDFIRST THEN
          EXIT(ProjectResponsiblePerson."Employee No.");
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE ResponsiblePersonService@1100528517() : Code[20];
    VAR
      ServiceResponsiblePerson@1100528500 : Record 11012808;
      ServiceOrder@1100528501 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(PurchaseLine."Service Order No." ) THEN BEGIN
        ServiceResponsiblePerson.SETRANGE("Service Order No.", PurchaseLine."Service Order No.");
        ServiceResponsiblePerson.SETRANGE(Responsibility, "Department Assessment"."Service Responsibility");
        IF ServiceResponsiblePerson.FINDFIRST THEN
          EXIT(ServiceResponsiblePerson."Employee No.");
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE ResponsiblePurchaser@1100528518(Purchaser@1100528502 : Code[20]) : Code[20];
    VAR
      SalespersonPurchaser@1100528500 : Record 13;
      Employee@1100528501 : Record 5200;
    BEGIN
      IF SalespersonPurchaser.GET(Purchaser) THEN BEGIN
        Employee.SETRANGE("Salespers./Purch. Code", Purchaser);
        IF Employee.FINDFIRST THEN
          EXIT(Employee."No.");

        IF Employee.GET(Purchaser) THEN
          EXIT(Employee."No.");
      END;
      EXIT('');
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

