OBJECT Table 11071885 Shipping Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen();
               CheckSourceLineType;

               ShippingOrderMgt.UpdateProjInventDeliveryLine(Rec,0); //DP00121
             END;

    OnModify=BEGIN
               CheckSourceLineType;
               ShippingOrderMgt.UpdateProjInventDeliveryLine(Rec,1); //DP00121
             END;

    OnDelete=VAR
               CommentLine@1100529800 : Record 11071887;
             BEGIN
               TestStatusOpen();

               CommentLine.RESET;
               CommentLine.SETRANGE("Document No.", "Document No.");
               CommentLine.SETRANGE("Shipping Order Line No.", "Line No.");
               CommentLine.DELETEALL(TRUE);

               ShippingOrderMgt.UpdateProjInventDeliveryLine(Rec,2); //DP00121
             END;

    CaptionML=[ENU=Shipping Order Line;
               NOR=Leveringsordrerad;
               SVE=Leveransorderrad];
  }
  FIELDS
  {
    { 10  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Dokumentnr] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Parcel No.          ;Code20        ;CaptionML=[ENU=Parcel No.;
                                                              NOR=Kollinr;
                                                              SVE=Paketnr] }
    { 40  ;   ;Source Line Type    ;Option        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckSourceLineType;
                                                                IF "Source Line Type" <> xRec."Source Line Type" THEN BEGIN
                                                                  "Source No. 2" := '';
                                                                  "Source No. 3" := '';
                                                                  "Source Line No." := 0;
                                                                  ResetFields;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Source Line Type;
                                                   OptionCaptionML=ENU=,Sales Order Line,,,,,,,,,,Purchase Return Order Line,,,,,,,,,,Project Inventory Entry,,,,,,,,,,Service-Ledger Entry,Advice Order Line (Service Order),Item Journal Line (Service Order),Purchase Order Line (Service Order);
                                                   OptionString=,Sales Order Line,,,,,,,,,,Purchase Return Order Line,,,,,,,,,,Project Inventory Entry,,,,,,,,,,Service-Ledger Entry,Advice Order Line (Service Order),Item Journal Line (Service Order),Purchase Order Line (Service Order);
                                                   BlankZero=Yes }
    { 41  ;   ;Source No. 2        ;Code20        ;TableRelation=IF (Source Line Type=CONST("Item Journal Line (Service Order)")) "Item Journal Template".Name WHERE (Type=CONST(Item))
                                                                 ELSE IF (Source Line Type=CONST("Purchase Order Line (Service Order)")) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Source No. 2;
                                                              NOR=Kildenr. 2;
                                                              SVE=K„lla nr 2];
                                                   Editable=No }
    { 42  ;   ;Source No. 3        ;Code20        ;TableRelation=IF (Source Line Type=CONST("Item Journal Line (Service Order)")) "Item Journal Batch".Name WHERE (Journal Template Name=FIELD(Source No. 2));
                                                   CaptionML=ENU=Source No. 3;
                                                   Editable=No }
    { 50  ;   ;Source Line No.     ;Integer       ;OnValidate=VAR
                                                                MultipleLinesCopied2@1100528400 : Boolean;
                                                              BEGIN
                                                                TestStatusOpen();
                                                                IF "Source Line No." = 0 THEN
                                                                  Quantity := 0;
                                                                GetSourceDocument(FALSE,MultipleLinesCopied2);
                                                                ShippingOrderMgt.CalcWeight(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              MultipleLinesCopied2@1100528400 : Boolean;
                                                            BEGIN
                                                              GetSourceDocument(TRUE,MultipleLinesCopied2);
                                                            END;

                                                   CaptionML=[ENU=Source Line No.;
                                                              NOR=Kildelinjenr.;
                                                              SVE=Ursprungsradnr] }
    { 60  ;   ;Packaging Type      ;Code10        ;TableRelation="Packaging Type";
                                                   OnValidate=VAR
                                                                PackagingType@1100525000 : Record 11020622;
                                                              BEGIN
                                                                TestStatusOpen();

                                                                IF PackagingType.GET("Packaging Type") THEN BEGIN
                                                                  Length := PackagingType.Length;
                                                                  Width := PackagingType.Width;
                                                                  Height := PackagingType.Height;
                                                                  "Packaging Type Weight" := PackagingType.Weight;  //4PS.n 26351
                                                                  CalcVolume();
                                                                END;

                                                                IF ("Packaging Type" = '') AND (xRec."Packaging Type" <> '') THEN
                                                                  TESTFIELD("Parcel No.", '');

                                                                CALCFIELDS("Packaging Type Description");
                                                              END;

                                                   CaptionML=[ENU=Packaging Type;
                                                              NOR=Emballasjetype;
                                                              SVE=F”rpackningstyp] }
    { 70  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Order Comment Line" WHERE (Document No.=FIELD(Document No.),
                                                                                                          Shipping Order Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar];
                                                   Editable=No }
    { 80  ;   ;Packaging Type Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Packaging Type".Description WHERE (Code=FIELD(Packaging Type)));
                                                   CaptionML=[ENU=Packaging Type Description;
                                                              NOR=Beskrivelse av emballasjetype;
                                                              SVE=Beskrivning av f”rpackningstyp];
                                                   Editable=No }
    { 90  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                IF "Source Line No." = 0 THEN
                                                                  TESTFIELD(Quantity, 0);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:0 }
    { 100 ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                CalcVolume();
                                                              END;

                                                   CaptionML=[ENU=Length;
                                                              NOR=Lengde;
                                                              SVE=L„ngd];
                                                   MinValue=0 }
    { 110 ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                CalcVolume();
                                                              END;

                                                   CaptionML=[ENU=Width;
                                                              NOR=Bredde;
                                                              SVE=Bredd];
                                                   MinValue=0 }
    { 120 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                CalcVolume();
                                                              END;

                                                   CaptionML=[ENU=Height;
                                                              NOR=H›yde;
                                                              SVE=H”jd];
                                                   MinValue=0 }
    { 130 ;   ;Volume              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Volume;
                                                              NOR=Volum;
                                                              SVE=Volym];
                                                   MinValue=0;
                                                   Editable=No }
    { 140 ;   ;Net Weight Contents ;Decimal       ;OnValidate=BEGIN
                                                                 TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Net Weight Contents;
                                                   MinValue=0 }
    { 150 ;   ;Gross Weight Contents;Decimal      ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Gross Weight Contents;
                                                              NOR=Bruttovekt for innhold;
                                                              SVE=Bruttovikt f”r inneh†ll];
                                                   MinValue=0 }
    { 160 ;   ;Item No.            ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 170 ;   ;Trade Item          ;Code20        ;TableRelation=IF (Vendor (Trade Item)=FILTER(<>'')) "Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"))
                                                                 ELSE IF (Vendor (Trade Item)=FILTER('')) "Trade Item"."Item Code";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 180 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 190 ;   ;Vendor (Trade Item) ;Code20        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 200 ;   ;Manufacturer        ;Code20        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 203 ;   ;Drop Shipment       ;Boolean       ;CaptionML=[ENU=Drop Shipment;
                                                              NOR=Direkte levering;
                                                              SVE=Direktutleverans] }
    { 206 ;   ;Special Order       ;Boolean       ;CaptionML=[ENU=Special Order;
                                                              NOR=Spesialbestilling;
                                                              SVE=Specialorder] }
    { 210 ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                QtyToShip@1100528800 : Decimal;
                                                              BEGIN
                                                                TestStatusOpen();
                                                                IF CurrFieldNo = FIELDNO("Qty. to Ship") THEN BEGIN
                                                                  QtyToShip := ShippingOrderMgt.AvailableQtyToShipSameSource(Rec);
                                                                  IF "Source Qty. to Ship" < QtyToShip THEN
                                                                    ERROR(Text002,"Qty. to Ship" - QtyToShip + "Source Qty. to Ship");
                                                                END;

                                                                ShippingOrderMgt.CalcWeight(Rec);
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              NOR=Ant. † levere;
                                                              SVE=Ant. att utleverera];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 220 ;   ;Item Description    ;Text100       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Item Description;
                                                              NOR=Artikkelbeskrivelse;
                                                              SVE=Artikelbeskrivning] }
    { 221 ;   ;Item Description 2  ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Item Description 2;
                                                              NOR=Artikkelbeskrivelse 2;
                                                              SVE=Artikelbeskrivning 2] }
    { 230 ;   ;Packaging Type Weight;Decimal      ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Packaging Type Weight;
                                                              NOR=Emballasjetype, vekt;
                                                              SVE=F”rpackningstypsvikt] }
    { 240 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              NOR=Linjebel›p;
                                                              SVE=Radbelopp];
                                                   MinValue=0 }
    { 250 ;   ;CMR Description     ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=CMR Description;
                                                              NOR=CMR-beskrivelse;
                                                              SVE=CMR-beskrivning] }
    { 260 ;   ;Source Qty. to Ship ;Decimal       ;CaptionML=[ENU=Source Qty. to Ship;
                                                              NOR=Kildeant. † leverere;
                                                              SVE=Ursprungsantal att leverera];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 270 ;   ;Good Customs        ;Boolean       ;CaptionML=[ENU=Good Customs;
                                                              NOR=Varetoll;
                                                              SVE=Varutull] }
    { 300 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1100529400 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=[ENU=Purchase Route Reference;
                                                              NOR=Referanse for Innkj›psrute;
                                                              SVE=Referens f”r ink”psf”ljd];
                                                   Description=DP01137;
                                                   Editable=No }
    { 305 ;   ;Purchase Requisition No.;Code20    ;TableRelation="Purchase Requisition";
                                                   CaptionML=[ENU=Purchase Requisition No.;
                                                              SVE=Ink”psrekvisition nr];
                                                   Description=DP01137;
                                                   Editable=No }
    { 310 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp];
                                                   Description=DP01137 }
    { 320 ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr];
                                                   Description=DP01137 }
    { 420 ;   ;Purchase Order Number;Code20       ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Purchase Order Number;
                                                   Description=BI026 }
    { 430 ;   ;Comments for Logistics;Text50      ;CaptionML=[ENU=Comments for Logistics;
                                                              NOR=Kommentarer for logistikk;
                                                              SVE=Kommentarer f”r logistik];
                                                   Description=BI003a }
    { 440 ;   ;Tariff No.          ;Text20        ;TableRelation="Tariff Number";
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Tariff No.;
                                                              SVE=EU tull statistiknr] }
    { 450 ;   ;Country/Region of Origin Code;Text10;
                                                   TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Country/Region of Origin Code;
                                                              SVE=Kod f”r tillverkningsland/-region] }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;SumIndexFields=Net Weight Contents,Gross Weight Contents,Line Amount,Quantity,Volume;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Parcel No.                               }
    {    ;Purchase Requisition No.                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ShippingOrderMgt@1100525000 : Codeunit 11012254;
      Text002@1100528803 : TextConst 'ENU=You cannot ship more than %1 units.;NOR=Du kan ikke levere mer enn %1 enheter.;SVE=Du kan inte leverera mer „n %1 stycken.';
      Text003@1100528800 : TextConst 'ENU=Source No. is empty;NOR=Kildenr er tom;SVE=K„llnr „r tomt';
      Text004@1100528801 : TextConst 'ENU=Order Line not present;NOR=Ordrerad finnes ikke;SVE=Orderrad finns inte';
      Text005@1100528802 : TextConst 'ENU=Line not present;NOR=Rad finnes ikke;SVE=Rad finns inte';

    PROCEDURE TestStatusOpen@1100525001();
    VAR
      ShippingOrderHeader@1100525000 : Record 11020623;
    BEGIN
      IF ShippingOrderHeader.GET("Document No.") THEN
        ShippingOrderHeader.TESTFIELD(Status,ShippingOrderHeader.Status::Open);
    END;

    PROCEDURE GetSourceDocument@1100525003(Lookup@1100525000 : Boolean;VAR MultipleLinesCopied@1100528400 : Boolean);
    VAR
      ShippingOrderHeader@1100528804 : Record 11020623;
    BEGIN
      WITH ShippingOrderHeader DO BEGIN
        GET("Document No.");
        IF "Source No." = '' THEN BEGIN
          MESSAGE(Text003);
          EXIT;
        END;
      END;

      CASE ShippingOrderHeader."Source Type" OF
        ShippingOrderHeader."Source Type"::"Sales Order":
          GetSalesOrderLines(ShippingOrderHeader,Lookup,MultipleLinesCopied);
        ShippingOrderHeader."Source Type"::"Purchase Return Order":
          GetPurchaseOrderLines(ShippingOrderHeader,Lookup,MultipleLinesCopied);
        ShippingOrderHeader."Source Type"::Project:
          GetProjectInventoryEntries(ShippingOrderHeader,Lookup,MultipleLinesCopied);
        ShippingOrderHeader."Source Type"::"Service Order":
          CASE "Source Line Type" OF
            "Source Line Type"::"Service-Ledger Entry":
              GetServiceLedgerEntries(ShippingOrderHeader,Lookup,MultipleLinesCopied);
            "Source Line Type"::"Advice Order Line (Service Order)":
              GetAdviceOrderLines(ShippingOrderHeader,Lookup,MultipleLinesCopied);
            "Source Line Type"::"Item Journal Line (Service Order)":
              GetItemJournalLines(ShippingOrderHeader,Lookup,MultipleLinesCopied);
            "Source Line Type"::"Purchase Order Line (Service Order)":
              GetPurchaseOrderLines(ShippingOrderHeader,Lookup,MultipleLinesCopied);
          END;
      END;
    END;

    LOCAL PROCEDURE GetSalesOrderLines@1100528402(ShippingOrderHeader@1100528400 : Record 11020623;Lookup@1100525000 : Boolean;VAR MultipleLinesCopied@1100528401 : Boolean);
    VAR
      SalesLine@1100528801 : Record 37;
      SalesOrderLineList@1100528800 : Page 48;
      RecRef@1100525013 : RecordRef;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",ShippingOrderHeader."Source No.");
      IF NOT Lookup THEN BEGIN
        IF SalesLine.GET(
          SalesLine."Document Type"::Order,ShippingOrderHeader."Source No.","Source Line No.")
        THEN BEGIN
          RecRef.GETTABLE(SalesLine);
          FillShipmentLine(RecRef);
        END ELSE
          ERROR(Text004);
      END ELSE BEGIN
        SalesOrderLineList.LOOKUPMODE(TRUE);
        IF SalesLine.GET(
          SalesLine."Document Type"::Order,ShippingOrderHeader."Source No.","Source Line No.")
        THEN
          SalesOrderLineList.SETRECORD(SalesLine);
        SalesOrderLineList.SETTABLEVIEW(SalesLine);
        SalesOrderLineList.DetermineInterface(
          DATABASE::"Shipping Order Line","Document No.","Parcel No.",'','',0,'','',"Line No.",'','');
        IF SalesOrderLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          SalesOrderLineList.GETRECORD(SalesLine);
          RecRef.GETTABLE(SalesLine);
          FillShipmentLine(RecRef);
        END;
        MultipleLinesCopied := SalesOrderLineList.MultipleLinesHaveBeenCopied;
      END;
    END;

    LOCAL PROCEDURE GetPurchaseOrderLines@1100528403(ShippingOrderHeader@1100528400 : Record 11020623;Lookup@1100525000 : Boolean;VAR MultipleLinesCopied@1100528402 : Boolean);
    VAR
      PurchaseLine@1100528803 : Record 39;
      PurchaseOrderLineList@1100528802 : Page 56;
      RecRef@1100525013 : RecordRef;
      PurchaseOrderNo@1100528401 : Code[20];
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      CASE "Source Line Type" OF
        "Source Line Type"::"Purchase Return Order Line":
          BEGIN
            PurchaseOrderNo := ShippingOrderHeader."Source No.";
            PurchaseLine.SETRANGE("Document No.",ShippingOrderHeader."Source No.");
          END;
        "Source Line Type"::"Purchase Order Line (Service Order)":
          BEGIN
            PurchaseOrderNo := "Source No. 2";
            PurchaseLine.SETRANGE("Service Order No.",ShippingOrderHeader."Source No.");
          END;
        ELSE
          FIELDERROR("Source Line Type");
      END;
      IF NOT Lookup THEN BEGIN
        IF PurchaseLine.GET(
          PurchaseLine."Document Type"::Order,PurchaseOrderNo,"Source Line No.")
        THEN BEGIN
          RecRef.GETTABLE(PurchaseLine);
          FillShipmentLine(RecRef);
        END ELSE
          ERROR(Text004);
      END ELSE BEGIN
        PurchaseOrderLineList.LOOKUPMODE(TRUE);
        IF PurchaseLine.GET(
          PurchaseLine."Document Type"::Order,PurchaseOrderNo,"Source Line No.")
        THEN
          PurchaseOrderLineList.SETRECORD(PurchaseLine);
        PurchaseOrderLineList.SETTABLEVIEW(PurchaseLine);
        PurchaseOrderLineList.DetermineInterface(
          DATABASE::"Shipping Order Line","Document No.","Parcel No.",'','',0,'','',"Line No.",'','');
        IF PurchaseOrderLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          PurchaseOrderLineList.GETRECORD(PurchaseLine);
          RecRef.GETTABLE(PurchaseLine);
          FillShipmentLine(RecRef);
        END;
        MultipleLinesCopied := PurchaseOrderLineList.MultipleLinesHaveBeenCopied;
      END;
    END;

    LOCAL PROCEDURE GetProjectInventoryEntries@1100528404(ShippingOrderHeader@1100528400 : Record 11020623;Lookup@1100525000 : Boolean;VAR MultipleLinesCopied@1100528401 : Boolean);
    VAR
      ProjectInventoryEntry@1100528806 : Record 11012670;
      ProjectInventoryList@1100528805 : Page 11012673;
      RecRef@1100525013 : RecordRef;
    BEGIN
      ProjectInventoryEntry.SETFILTER(Quantity,'<>%1', 0);
      ProjectInventoryEntry.SETRANGE("Project No.", ShippingOrderHeader."Source No.");
      IF NOT Lookup THEN BEGIN
        IF ProjectInventoryEntry.GET("Source Line No.") THEN BEGIN
          ProjectInventoryEntry.CALCFIELDS("Inventory Quantity");
          RecRef.GETTABLE(ProjectInventoryEntry);
          FillShipmentLine(RecRef);
        END ELSE
          ERROR(Text005);
      END ELSE BEGIN
        ProjectInventoryList.LOOKUPMODE(TRUE);
        IF ProjectInventoryEntry.GET("Source Line No.") THEN
          ProjectInventoryList.SETRECORD(ProjectInventoryEntry);
        ProjectInventoryList.SETTABLEVIEW(ProjectInventoryEntry);
        ProjectInventoryList.DetermineInterface(
          DATABASE::"Shipping Order Line","Document No.","Parcel No.",'','',0,'','',"Line No.",'','');  //db, 13-07-15: C009868
        IF ProjectInventoryList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ProjectInventoryList.GETRECORD(ProjectInventoryEntry);
          RecRef.GETTABLE(ProjectInventoryEntry);
          FillShipmentLine(RecRef);
        END;
        MultipleLinesCopied := ProjectInventoryList.MultipleLinesHaveBeenCopied;
      END;
    END;

    LOCAL PROCEDURE GetServiceLedgerEntries@1100528405(ShippingOrderHeader@1100528400 : Record 11020623;Lookup@1100525000 : Boolean;VAR MultipleLinesCopied@1100528401 : Boolean);
    VAR
      ServiceLedgerEntry@1100528807 : Record 11012819;
      ServiceEntryList@1100528808 : Page 11012826;
      RecRef@1100525013 : RecordRef;
    BEGIN
      ServiceLedgerEntry.SETFILTER(Quantity,'<>%1',0);
      ServiceLedgerEntry.SETRANGE("Service Order No.",ShippingOrderHeader."Source No.");
      IF NOT Lookup THEN BEGIN
        IF ServiceLedgerEntry.GET("Source Line No.") THEN BEGIN
          IF (ServiceLedgerEntry.Quantity = 0) OR
             (ServiceLedgerEntry."Service Order No." <> ShippingOrderHeader."Source No.")
          THEN BEGIN
            ERROR(Text005)
          END ELSE BEGIN
            RecRef.GETTABLE(ServiceLedgerEntry);
            FillShipmentLine(RecRef);
          END;
        END ELSE
          ERROR(Text005);
      END ELSE BEGIN
        ServiceEntryList.LOOKUPMODE(TRUE);
        IF ServiceLedgerEntry.GET("Source Line No.") THEN
          ServiceEntryList.SETRECORD(ServiceLedgerEntry);
        ServiceEntryList.SETTABLEVIEW(ServiceLedgerEntry);
        ServiceEntryList.SetSelection(
          DATABASE::"Shipping Order Line","Document No.","Parcel No.",'','',0,'','',"Line No.");
        IF ServiceEntryList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ServiceEntryList.GETRECORD(ServiceLedgerEntry);
          RecRef.GETTABLE(ServiceLedgerEntry);
          FillShipmentLine(RecRef);
        END;
        MultipleLinesCopied := ServiceEntryList.MultipleLinesHaveBeenCopied;
      END;
    END;

    LOCAL PROCEDURE GetAdviceOrderLines@1100528414(ShippingOrderHeader@1100528400 : Record 11020623;Lookup@1100525000 : Boolean;VAR MultipleLinesCopied@1100528401 : Boolean);
    VAR
      AdviceOrderLine@1100528803 : Record 11012055;
      AdviceOrderLines@1100528802 : Page 11012122;
      RecRef@1100525013 : RecordRef;
    BEGIN
      AdviceOrderLine.SETRANGE("Record Type",AdviceOrderLine."Record Type"::ServOrder);
      AdviceOrderLine.SETRANGE("Project No.",'');
      AdviceOrderLine.SETRANGE("Service Order No.",ShippingOrderHeader."Source No.");
      AdviceOrderLine.SETRANGE("G/L Account",'');
      IF NOT Lookup THEN BEGIN
        IF AdviceOrderLine.GET(
          AdviceOrderLine."Record Type"::ServOrder,'',ShippingOrderHeader."Source No.",'',"Source Line No.")
        THEN BEGIN
          RecRef.GETTABLE(AdviceOrderLine);
          FillShipmentLine(RecRef);
        END ELSE
          ERROR(Text004);
      END ELSE BEGIN
        AdviceOrderLines.LOOKUPMODE(TRUE);
        IF AdviceOrderLine.GET(
          AdviceOrderLine."Record Type"::ServOrder,'',ShippingOrderHeader."Source No.",'',"Source Line No.")
        THEN
          AdviceOrderLines.SETRECORD(AdviceOrderLine);
        AdviceOrderLines.SETTABLEVIEW(AdviceOrderLine);
        AdviceOrderLines.DetermineInterface(
          DATABASE::"Shipping Order Line","Document No.","Parcel No.",'','',0,'','',"Line No.",'','');
        AdviceOrderLines.SetIgnoreServiceOrderFilters(TRUE);
        IF AdviceOrderLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
          AdviceOrderLines.GETRECORD(AdviceOrderLine);
          RecRef.GETTABLE(AdviceOrderLine);
          FillShipmentLine(RecRef);
        END;
        MultipleLinesCopied := AdviceOrderLines.MultipleLinesHaveBeenCopied;
      END;
    END;

    LOCAL PROCEDURE GetItemJournalLines@1100528417(ShippingOrderHeader@1100528400 : Record 11020623;Lookup@1100525000 : Boolean;VAR MultipleLinesCopied@1100528401 : Boolean);
    VAR
      ItemJournalLine@1100528803 : Record 83;
      ItemJournalLines@1100528802 : Page 519;
      RecRef@1100525013 : RecordRef;
    BEGIN
      ItemJournalLine.SETRANGE("Service Order No.",ShippingOrderHeader."Source No.");
      IF NOT Lookup THEN BEGIN
        IF ItemJournalLine.GET(
          "Source No. 2","Source No. 3","Source Line No.")
        THEN BEGIN
          RecRef.GETTABLE(ItemJournalLine);
          FillShipmentLine(RecRef);
        END ELSE
          ERROR(Text005);
      END ELSE BEGIN
        ItemJournalLines.LOOKUPMODE(TRUE);
        IF ItemJournalLine.GET(
          "Source No. 2","Source No. 3","Source Line No.")
        THEN
          ItemJournalLines.SETRECORD(ItemJournalLine);
        ItemJournalLines.SETTABLEVIEW(ItemJournalLine);
        ItemJournalLines.SetSelection(
          DATABASE::"Shipping Order Line","Document No.","Parcel No.",'','',0,"Line No.",FALSE);
        IF ItemJournalLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemJournalLines.GETRECORD(ItemJournalLine);
          RecRef.GETTABLE(ItemJournalLine);
          FillShipmentLine(RecRef);
        END;
        MultipleLinesCopied := ItemJournalLines.MultipleLinesHaveBeenCopied;
      END;
    END;

    PROCEDURE ResetFields@1100525002();
    BEGIN
      "Item No." := '';
      "Vendor (Trade Item)" := '';
      "Trade Item" := '';
      Manufacturer := '';
      "Basic Item" := '';
      "Qty. to Ship" := 0;
      "Line Amount" := 0;
      "Drop Shipment" :=  FALSE;
      "Special Order" := FALSE;
      "Good Customs" := FALSE;
      Quantity := 1;
      "Net Weight Contents" := 0;
      "Gross Weight Contents" := 0;
    END;

    PROCEDURE FillShipmentLine@1100525016(RecRef@1100525002 : RecordRef);
    VAR
      SalesLine@1100525007 : Record 37;
      PurchaseLine@1100525005 : Record 39;
      ProjectInventoryEntry@1100528800 : Record 11012670;
      ServiceLedgerEntry@1100528801 : Record 11012819;
      AdviceOrderLine@1100528400 : Record 11012055;
      ItemJournalLine@1100528401 : Record 83;
    BEGIN
      TestStatusOpen();
      ResetFields();

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Line":
          BEGIN
            RecRef.SETTABLE(SalesLine);
            FillShipmentLineFromSalesLine(SalesLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            RecRef.SETTABLE(PurchaseLine);
            FillShipmentLineFromPurchaseLine(PurchaseLine);
          END;
        DATABASE::"Project Inventory Entry":
          BEGIN
            RecRef.SETTABLE(ProjectInventoryEntry);
            FillShipmentLineFromProjectInventoryEntry(ProjectInventoryEntry);
          END;
        DATABASE::"Service-Ledger Entry":
          BEGIN
            RecRef.SETTABLE(ServiceLedgerEntry);
            FillShipmentLineFromServiceLedgerEntry(ServiceLedgerEntry);
          END;
        DATABASE::"Advice Order Line":
          BEGIN
            RecRef.SETTABLE(AdviceOrderLine);
            FillShipmentLineFromAdviceOrderLine(AdviceOrderLine);
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            RecRef.SETTABLE(ItemJournalLine);
            FillShipmentLineFromItemJournalLine(ItemJournalLine);
          END;
      END;
    END;

    LOCAL PROCEDURE FillShipmentLineFromSalesLine@1100528408(SalesLine@1100528400 : Record 37);
    BEGIN
      "Source Line No." := SalesLine."Line No.";
      "Item No." := SalesLine."Item No.";
      "Item Description" := SalesLine.Description;
      "Item Description 2" := SalesLine."Description 2";
      "Source Qty. to Ship" := SalesLine."Outstanding Qty. (Base)";
      "Drop Shipment" := SalesLine."Drop Shipment";
      "Special Order" := SalesLine."Special Order";
      "Good Customs" := FillGoodCustoms(SalesLine);
      //C015243.sn
      IF SalesLine.Type = SalesLine.Type::" " THEN
        Quantity := 0;
      //C015243.en
      VALIDATE("Qty. to Ship",ShippingOrderMgt.GetQtyToShipSameSource(Rec,SalesLine."Outstanding Qty. (Base)"));
      VALIDATE("Line Amount",SalesLine."Unit Price" * "Qty. to Ship");
    END;

    LOCAL PROCEDURE FillShipmentLineFromPurchaseLine@1100528409(PurchaseLine@1100528400 : Record 39);
    VAR
      PurchaseHeader@1100528900 : Record 38;
    BEGIN
      IF "Source Line Type" = "Source Line Type"::"Purchase Order Line (Service Order)" THEN
        "Source No. 2" := PurchaseLine."Document No.";
      "Source Line No." := PurchaseLine."Line No.";
      "Item No." := PurchaseLine."Item No.";
      "Vendor (Trade Item)" := PurchaseLine."Vendor (Trade Item)";
      "Trade Item" := PurchaseLine."Trade Item";
      Manufacturer := PurchaseLine.Manufacturer;
      "Basic Item" := PurchaseLine."Basic Item";
      "Item Description" := PurchaseLine.Description;
      "Item Description 2" := PurchaseLine."Description 2";
      //DP01137.sn
      IF NOT PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.") THEN
        PurchaseHeader.INIT;
      "Purchase Route Reference" := PurchaseLine."Purchase Route Reference";
      "Purchase Requisition No." := PurchaseHeader."Purchase Requisition No.";
      "Plant Type" := PurchaseLine."Plant Type";
      "Plant No." := PurchaseLine."Plant No.";
      //DP01137.en
      //C015243.sn
      IF PurchaseLine.Type = PurchaseLine.Type::" " THEN
        Quantity := 0;
      //C015243.en
      IF PurchaseLine."Outstanding Qty. (Base)" <> 0 THEN BEGIN
        "Source Qty. to Ship" := ABS(PurchaseLine."Outstanding Qty. (Base)");
        VALIDATE("Qty. to Ship",ShippingOrderMgt.GetQtyToShipSameSource(Rec,(ABS(PurchaseLine."Outstanding Qty. (Base)"))));
      END ELSE BEGIN
        "Source Qty. to Ship" := ABS(PurchaseLine."Qty. Received (Base)");
        VALIDATE("Qty. to Ship",ShippingOrderMgt.GetQtyToShipSameSource(Rec,(ABS(PurchaseLine."Qty. Received (Base)"))));
      END;
      VALIDATE("Line Amount",PurchaseLine."Unit Cost (LCY)" * "Qty. to Ship");
    END;

    LOCAL PROCEDURE FillShipmentLineFromProjectInventoryEntry@1100528410(ProjectInventoryEntry@1100528400 : Record 11012670);
    BEGIN
      "Source Line No." := ProjectInventoryEntry."Entry No.";
      "Item No." := ProjectInventoryEntry."Item No.";
      "Vendor (Trade Item)" := ProjectInventoryEntry."Vendor (Trade Item)";
      "Trade Item" := ProjectInventoryEntry."Trade Item";
      Manufacturer := ProjectInventoryEntry.Manufacturer;
      "Basic Item" := ProjectInventoryEntry."Basic Item";
      "Item Description" := ProjectInventoryEntry.Description;
      "Item Description 2" := ProjectInventoryEntry."Description 2";
      //DP01137.sn
      "Purchase Route Reference" := ProjectInventoryEntry."Purchase Route Reference";
      "Purchase Requisition No." := ProjectInventoryEntry."Purchase Requisition No.";
      "Plant Type" := ProjectInventoryEntry."Plant Type";
      "Plant No." := ProjectInventoryEntry."Plant No.";
      //DP01137.en
      ProjectInventoryEntry.CALCFIELDS("Inventory Quantity");  //db, 13-07-15: C009868
      "Source Qty. to Ship" := ProjectInventoryEntry."Inventory Quantity";
      VALIDATE("Qty. to Ship",ShippingOrderMgt.GetQtyToShipSameSource(Rec,ProjectInventoryEntry."Inventory Quantity"));
      "Line Amount" := 0;
      "Comments for Logistics" := ProjectInventoryEntry."Comments for Logistics"; //**4PS.n BI003a KD 08-02-17
    END;

    LOCAL PROCEDURE FillShipmentLineFromServiceLedgerEntry@1100528411(ServiceLedgerEntry@1100528400 : Record 11012819);
    BEGIN
      "Source Line No." := ServiceLedgerEntry."Entry No.";
      "Item No." := ServiceLedgerEntry."Item No.";
      "Vendor (Trade Item)" := ServiceLedgerEntry."Vendor (Trade Item)";
      "Trade Item" := ServiceLedgerEntry."Trade Item";
      Manufacturer := ServiceLedgerEntry.Manufacturer;
      "Basic Item" := ServiceLedgerEntry."Basic Item";
      "Item Description" := ServiceLedgerEntry.Description;
      "Item Description 2" := ServiceLedgerEntry."Description 2";
      "Source Qty. to Ship" := ServiceLedgerEntry.Quantity;
      VALIDATE("Qty. to Ship",ShippingOrderMgt.GetQtyToShipSameSource(Rec,ServiceLedgerEntry.Quantity));
      "Line Amount" := 0;
    END;

    LOCAL PROCEDURE FillShipmentLineFromAdviceOrderLine@1100528406(AdviceOrderLine@1100528400 : Record 11012055);
    BEGIN
      "Source Line No." := AdviceOrderLine."Line No.";
      "Item No." := AdviceOrderLine."Item No.";
      "Vendor (Trade Item)" := AdviceOrderLine."Vendor (Trade Item)";
      "Trade Item" := AdviceOrderLine."Trade Item";
      Manufacturer := AdviceOrderLine.Manufacturer;
      "Basic Item" := AdviceOrderLine."Basic Item";
      "Item Description" := AdviceOrderLine.Description;
      "Item Description 2" := AdviceOrderLine."Description 2";
      "Purchase Route Reference" := AdviceOrderLine."Purchase Route Reference";
      "Plant Type" := AdviceOrderLine."Plant Type";
      "Source Qty. to Ship" := AdviceOrderLine."Quantity (Advice)";
      VALIDATE("Qty. to Ship",ShippingOrderMgt.GetQtyToShipSameSource(Rec,AdviceOrderLine."Quantity (Advice)"));
      "Line Amount" := 0;
    END;

    LOCAL PROCEDURE FillShipmentLineFromItemJournalLine@1100528420(ItemJournalLine@1100528400 : Record 83);
    BEGIN
      "Source No. 2" := ItemJournalLine."Journal Template Name";
      "Source No. 3" := ItemJournalLine."Journal Batch Name";
      "Source Line No." := ItemJournalLine."Line No.";
      "Item No." := ItemJournalLine."Item No.";
      "Item Description" := ItemJournalLine.Description;
      "Item Description 2" := ItemJournalLine."Description 2";
      "Purchase Route Reference" := ItemJournalLine."Purchase Route Reference";
      "Plant Type" := ItemJournalLine."Plant Type";
      "Source Qty. to Ship" := ItemJournalLine.Quantity;
      VALIDATE("Qty. to Ship",ShippingOrderMgt.GetQtyToShipSameSource(Rec,ItemJournalLine.Quantity));
      "Line Amount" := 0;
    END;

    LOCAL PROCEDURE FillGoodCustoms@19(SalesLine@1002 : Record 37) : Boolean;
    VAR
      TrackingSpecification@1001 : Record 336;
      NSTrackingSpecification@1100528600 : Record 11071901;
      ReservEntry@1100409000 : Record 337;
      NSReservEntry@1100409001 : Record 11071900;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source ID",SalesLine."Document No.");
      TrackingSpecification.SETRANGE("Source Type",DATABASE::"Sales Line");
      TrackingSpecification.SETRANGE("Source Subtype",SalesLine."Document Type");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      TrackingSpecification.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF TrackingSpecification.FINDSET THEN
        REPEAT
          IF TrackingSpecification."Good Customs" THEN
            EXIT(TRUE);
        UNTIL TrackingSpecification.NEXT = 0;

      NSTrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      NSTrackingSpecification.SETRANGE("Source ID",SalesLine."Document No.");
      NSTrackingSpecification.SETRANGE("Source Type",DATABASE::"Sales Line");
      NSTrackingSpecification.SETRANGE("Source Subtype",SalesLine."Document Type");
      NSTrackingSpecification.SETRANGE("Source Batch Name",'');
      NSTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      NSTrackingSpecification.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF NSTrackingSpecification.FINDSET THEN
        REPEAT
          IF NSTrackingSpecification."Good Customs" THEN
            EXIT(TRUE);
        UNTIL NSTrackingSpecification.NEXT = 0;

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");
      ReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF ReservEntry.FINDSET THEN
        REPEAT
          IF ReservEntry."Good Customs" THEN
            EXIT(TRUE);
        UNTIL ReservEntry.NEXT = 0;

      NSReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");
      NSReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      NSReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      NSReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      NSReservEntry.SETRANGE("Source Batch Name",'');
      NSReservEntry.SETRANGE("Source Prod. Order Line",0);
      NSReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF NSReservEntry.FINDSET THEN
        REPEAT
          IF NSReservEntry."Good Customs" THEN
            EXIT(TRUE);
        UNTIL NSReservEntry.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE CalcVolume@1100525000();
    BEGIN
      Volume := Length * Width * Height;
    END;

    PROCEDURE GetPackagingTypeDesc@1100528800() : Text[50];
    BEGIN
      CALCFIELDS("Packaging Type Description");
      EXIT("Packaging Type Description");
    END;

    PROCEDURE OpenItemTrackingLines@1100409000();
    VAR
      ShippingOrderHeader@1100409000 : Record 11020623;
      SalesLine@1100409001 : Record 37;
      PurchLine@1100409002 : Record 39;
      ProjectInventoryDelivery@1100409003 : Record 11012671;
      ProjectInventoryEntry@1100409004 : Record 11012670;
    BEGIN
      //DP00121
      ShippingOrderHeader.GET("Document No.");

      CASE ShippingOrderHeader."Source Type" OF
        ShippingOrderHeader."Source Type"::"Sales Order":
          BEGIN
            SalesLine.GET(
              SalesLine."Document Type"::Order,
              ShippingOrderHeader."Source No.",
              "Source Line No.");
            SalesLine.OpenItemTrackingLines;
          END;
        ShippingOrderHeader."Source Type"::"Purchase Return Order":
          BEGIN
            PurchLine.GET(
              PurchLine."Document Type"::Order,
              ShippingOrderHeader."Source No.",
              "Source Line No.");
            PurchLine.OpenItemTrackingLines;
          END;
        ShippingOrderHeader."Source Type"::Project:
          BEGIN
            ProjectInventoryEntry.GET("Source Line No.");
            //T007665.sn
            IF ProjectInventoryEntry.GetProjInventoryDeliveryLineReceipt(ProjectInventoryDelivery) THEN
              IF ProjectInventoryDelivery.Shipped THEN BEGIN
                ProjectInventoryDelivery.OpenItemTrackingLines;
                EXIT;
              END;
            //T007665.en
            IF ProjectInventoryEntry.GetProjInventoryDeliveryLine(ProjectInventoryDelivery) THEN
              ProjectInventoryDelivery.OpenItemTrackingLines;
          END;
        ShippingOrderHeader."Source Type"::"Service Order":;
          //No Support for Item Tracking
      END;
    END;

    LOCAL PROCEDURE CheckSourceLineType@1100528400();
    VAR
      ShippingOrderHeader@1100528400 : Record 11020623;
    BEGIN
      ShippingOrderHeader.GET("Document No.");
      CASE ShippingOrderHeader."Source Type" OF
        ShippingOrderHeader."Source Type"::"Sales Order":
          TESTFIELD("Source Line Type","Source Line Type"::"Sales Order Line");
        ShippingOrderHeader."Source Type"::"Purchase Return Order":
          TESTFIELD("Source Line Type","Source Line Type"::"Purchase Return Order Line");
        ShippingOrderHeader."Source Type"::Project:
          TESTFIELD("Source Line Type","Source Line Type"::"Project Inventory Entry");
        ShippingOrderHeader."Source Type"::"Service Order":
          IF NOT ("Source Line Type" IN [
            "Source Line Type"::"Service-Ledger Entry",
            "Source Line Type"::"Advice Order Line (Service Order)",
            "Source Line Type"::"Item Journal Line (Service Order)",
            "Source Line Type"::"Purchase Order Line (Service Order)"])
          THEN
            FIELDERROR("Source Line Type");
        ELSE
          ShippingOrderHeader.FIELDERROR("Source Type");
      END;
    END;

    PROCEDURE GetDefaultValueOfSourceLineType@1100528401() : Integer;
    VAR
      ShippingOrderHeader@1100528400 : Record 11020623;
    BEGIN
      IF NOT ShippingOrderHeader.GET("Document No.") THEN
        EXIT;

      EXIT(GetDefaultValueOfSourceLineTypeBasedOnSourceType(
        ShippingOrderHeader."Source Type"));
    END;

    PROCEDURE GetDefaultValueOfSourceLineTypeBasedOnSourceType@1100528407(SourceType@1100528401 : Integer) : Integer;
    VAR
      ShippingOrderHeader@1100528400 : Record 11020623;
    BEGIN
      CASE SourceType OF
        ShippingOrderHeader."Source Type"::"Sales Order":
          EXIT("Source Line Type"::"Sales Order Line");
        ShippingOrderHeader."Source Type"::"Purchase Return Order":
          EXIT("Source Line Type"::"Purchase Return Order Line");
        ShippingOrderHeader."Source Type"::Project:
          EXIT("Source Line Type"::"Project Inventory Entry");
        ShippingOrderHeader."Source Type"::"Service Order":
          EXIT("Source Line Type"::"Service-Ledger Entry");
      END;
    END;

    BEGIN
    {
      4PS 01-09-2016 UKR-C26351 (BI026) VAKAT Fields Packaging Type Weight
                                              Editabled changed to <TRUE>
                                              FileldClass changed to normal from flowfields
                                      added OnVAlidate TestStatusOpen()
                                      changed triger Packaging Type - OnValidate
                                      Field Purchase Order Number added
      4PS 20-10-2016 UKR-C26351 (BI026) VAKAT triger Purchase Route Reference - OnLookup() changed
      4PS 08-02-17 UKR-C32789 KD: Comments for logistics (BI003a) - Field "Comments for Logistics" added; trigger FillShipmentLine chaged
    }
    END.
  }
}

