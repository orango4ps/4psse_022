OBJECT Page 9850 Tenant Permissions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Permissions;
               NOR=Tillatelser;
               SVE=Beh”righeter];
    SourceTable=Table2000000166;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    DataCaptionFields=Object Type,Object Name;
    PageType=List;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Read,Insert,Modify,Delete,Execute;
                                NOR=Ny,Prosess,Rapport,Les,Sett inn,Endre,Slett,Kj›r;
                                SVE=Ny,Process,Rapport,L„sa,Infoga,Žndra,Ta bort,K”ra];
    ShowFilter=No;
    OnInit=BEGIN
             SetControlsAsReadOnly;
           END;

    OnOpenPage=VAR
                 TenantPermissionSet@1000 : Record 2000000165;
                 PermissionSetLink@1001 : Record 9802;
                 PermissionPagesMgt@1002 : Codeunit 9001;
               BEGIN
                 IF GETFILTER("App ID") <> '' THEN
                   CurrentAppID := GETRANGEMIN("App ID")
                 ELSE
                   IF TenantPermissionSet.FINDFIRST THEN
                     CurrentAppID := TenantPermissionSet."App ID";

                 IF NOT ISNULLGUID(CurrentAppID) THEN
                   PermissionPagesMgt.RaiseNotificationThatSecurityFilterNotEditableForSystemAndExtension;

                 IF CurrentRoleID = '' THEN
                   IF GETFILTER("Role ID") <> '' THEN
                     CurrentRoleID := GETRANGEMIN("Role ID")
                   ELSE
                     IF TenantPermissionSet.FINDFIRST THEN
                       CurrentRoleID := TenantPermissionSet."Role ID";

                 CopiedFromSystemRoleId := PermissionSetLink.GetSourceForLinkedPermissionSet(CurrentRoleID);

                 RESET;
                 FillTempPermissions;
                 IsEditable := CurrPage.EDITABLE;
               END;

    OnAfterGetRecord=BEGIN
                       SetObjectZeroName(Rec);
                       ZeroObjStyleExpr := "Object ID" = 0;
                       IsValidatedObjectID := FALSE;
                       IsNewRecord := FALSE;
                       CurrPage.EDITABLE := ISNULLGUID("App ID");
                     END;

    OnNewRecord=BEGIN
                  ActivateControls;
                  PermissionRecExists := FALSE;
                  IsNewRecord := TRUE;
                  IsValidatedObjectID := FALSE;
                  EmptyIrrelevantPermissionFields;
                END;

    OnInsertRecord=VAR
                     TenantPermission@1000 : Record 2000000166;
                     PermissionPagesMgt@1002 : Codeunit 9001;
                   BEGIN
                     IF ("Object ID" = 0) AND ((Show = Show::All) OR IsValidatedObjectID) THEN
                       EXIT(FALSE);

                     IF NOT ISNULLGUID(CurrentAppID) THEN
                       ERROR(CannotChangeExtensionPermissionErr);

                     PermissionPagesMgt.DisallowEditingPermissionSetsForNonAdminUsers;

                     IF ("Execute Permission" = "Execute Permission"::" ") AND
                        ("Read Permission" = "Read Permission"::" ") AND
                        ("Insert Permission" = "Insert Permission"::" ") AND
                        ("Modify Permission" = "Modify Permission"::" ") AND
                        ("Delete Permission" = "Delete Permission"::" ")
                     THEN
                       EXIT(FALSE);

                     IF "Object Type" = "Object Type"::"Table Data" THEN
                       "Execute Permission" := "Execute Permission"::" "
                     ELSE BEGIN
                       "Read Permission" := "Read Permission"::" ";
                       "Insert Permission" := "Insert Permission"::" ";
                       "Modify Permission" := "Modify Permission"::" ";
                       "Delete Permission" := "Delete Permission"::" ";
                     END;
                     TenantPermission := Rec;
                     TenantPermission.INSERT;
                     IF AddRelatedTables THEN
                       DoAddRelatedTables(Rec);
                     Rec := TenantPermission;
                     SetObjectZeroName(Rec);
                     PermissionRecExists := TRUE;
                     IsNewRecord := FALSE;
                     ZeroObjStyleExpr := "Object ID" = 0;
                     EXIT(TRUE);
                   END;

    OnModifyRecord=VAR
                     PermissionPagesMgt@1000 : Codeunit 9001;
                   BEGIN
                     IF NOT ISNULLGUID(CurrentAppID) THEN
                       ERROR(CannotChangeExtensionPermissionErr);

                     PermissionPagesMgt.DisallowEditingPermissionSetsForNonAdminUsers;

                     ModifyRecord(Rec);
                     PermissionRecExists := TRUE;
                     IsNewRecord := FALSE;
                     EXIT(MODIFY);
                   END;

    OnDeleteRecord=VAR
                     TenantPermission@1000 : Record 2000000166;
                     PermissionPagesMgt@1001 : Codeunit 9001;
                   BEGIN
                     IF (Show = Show::All) AND ("Object ID" <> 0) THEN
                       EXIT(FALSE);

                     IF NOT ISNULLGUID(CurrentAppID) THEN
                       ERROR(CannotChangeExtensionPermissionErr);

                     PermissionPagesMgt.DisallowEditingPermissionSetsForNonAdminUsers;

                     TenantPermission := Rec;
                     TenantPermission.FIND;
                     EXIT(TenantPermission.DELETE);
                   END;

    OnAfterGetCurrRecord=VAR
                           TenantPermission@1000 : Record 2000000166;
                         BEGIN
                           ActivateControls;
                           SetObjectZeroName(Rec);
                           IF NOT IsNewRecord THEN BEGIN
                             TenantPermission := Rec;
                             PermissionRecExists := TenantPermission.FIND;
                           END ELSE
                             PermissionRecExists := FALSE;
                           AllowChangePrimaryKey := NOT PermissionRecExists AND (Show = Show::"Only In Permission Set");
                           ZeroObjStyleExpr := PermissionRecExists AND ("Object ID" = 0);
                         END;

    ActionList=ACTIONS
    {
      { 12      ;    ;ActionContainer;
                      CaptionML=[ENU=Set Permission;
                                 NOR=Angi tillatelse;
                                 SVE=Ange beh”righet];
                      ActionContainerType=ActionItems }
      { 18      ;1   ;ActionGroup;
                      CaptionML=[ENU=Read Permission;
                                 NOR=Lesetillatelse;
                                 SVE=L„sbeh”righet];
                      ActionContainerType=NewDocumentItems;
                      Image=Ledger }
      { 41      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Read;
                                 NOR=Tillat lesing;
                                 SVE=Till†t l„sning];
                      Enabled=IsEditable AND ("Object Type" = "Object Type"::"Table Data");
                      Image=Confirm }
      { 16      ;3   ;Action    ;
                      Name=AllowReadYes;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Yes;
                                 NOR=Ja;
                                 SVE=Ja];
                      ToolTipML=[ENU=Allow access to read data in the object.;
                                 NOR=Gi tilgang til † lese data i objektet.;
                                 SVE=Bevilja †tkomst till att l„sa data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('R',"Read Permission"::Yes);
                               END;
                                }
      { 15      ;3   ;Action    ;
                      Name=AllowReadNo;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=No;
                                 NOR=Nei;
                                 SVE=Nej];
                      ToolTipML=[ENU=Disallow access to read data in the object.;
                                 NOR=Ikke gi tilgang til † lese data i objektet.;
                                 SVE=Bevilja inte †tkomst till att l„sa data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('R',"Read Permission"::" ");
                               END;
                                }
      { 17      ;3   ;Action    ;
                      Name=AllowReadIndirect;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Indirect;
                                 NOR=Indirekte;
                                 SVE=Indirekt];
                      ToolTipML=[ENU=Allow access to read data in the object if there is read access to a related object.;
                                 NOR=Gi tilgang til † lese data i objektet hvis det er lesetillatelse til et tilknyttet objekt.;
                                 SVE=Bevilja †tkomst till att l„sa data i objektet om det finns l„sbeh”righet till ett relaterat objekt.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('R',"Read Permission"::Indirect);
                               END;
                                }
      { 22      ;1   ;ActionGroup;
                      CaptionML=[ENU=Insert Permission;
                                 NOR=Innsettingstillatelse;
                                 SVE=Infogandebeh”righet];
                      ActionContainerType=NewDocumentItems;
                      Image=FiledPosted }
      { 43      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Insertion;
                                 NOR=Tillat innsetting;
                                 SVE=Till†t infogning];
                      Enabled=IsEditable AND ("Object Type" = "Object Type"::"Table Data");
                      Image=Confirm }
      { 20      ;3   ;Action    ;
                      Name=AllowInsertYes;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Yes;
                                 NOR=Ja;
                                 SVE=Ja];
                      ToolTipML=[ENU=Allow access to insert data in the object.;
                                 NOR=Gi tilgang til † sette inn data i objektet.;
                                 SVE=Bevilja †tkomst till att infoga data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('I',"Insert Permission"::Yes);
                               END;
                                }
      { 21      ;3   ;Action    ;
                      Name=AllowInsertNo;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=No;
                                 NOR=Nei;
                                 SVE=Nej];
                      ToolTipML=[ENU=Disallow access to insert data in the object.;
                                 NOR=Ikke gi tilgang til † sette inn data i objektet.;
                                 SVE=Bevilja inte †tkomst till att infoga data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('I',"Insert Permission"::" ");
                               END;
                                }
      { 19      ;3   ;Action    ;
                      Name=AllowInsertIndirect;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Indirect;
                                 NOR=Indirekte;
                                 SVE=Indirekt];
                      ToolTipML=[ENU=Allow access to insert data in the object if there is insert access to a related object.;
                                 NOR=Gi tilgang til † sette inn data i objektet hvis det er innsettingstillatelse til et tilknyttet objekt.;
                                 SVE=Bevilja †tkomst till att infoga data i objektet om det finns infogandebeh”righet till ett relaterat objekt.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('I',"Insert Permission"::Indirect);
                               END;
                                }
      { 26      ;1   ;ActionGroup;
                      CaptionML=[ENU=Modify Permission;
                                 NOR=Endringstillatelse;
                                 SVE=Žndringsbeh”righet];
                      ActionContainerType=NewDocumentItems;
                      Image=Statistics }
      { 44      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Modification;
                                 NOR=Tillat endring;
                                 SVE=Till†t „ndring];
                      Enabled=IsEditable AND ("Object Type" = "Object Type"::"Table Data");
                      Image=Confirm }
      { 24      ;3   ;Action    ;
                      Name=AllowModifyYes;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Yes;
                                 NOR=Ja;
                                 SVE=Ja];
                      ToolTipML=[ENU=Allow access to modify data in the object.;
                                 NOR=Gi tilgang til † endre data i objektet.;
                                 SVE=Bevilja †tkomst till att „ndra data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('M',"Modify Permission"::Yes);
                               END;
                                }
      { 25      ;3   ;Action    ;
                      Name=AllowModifyNo;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=No;
                                 NOR=Nei;
                                 SVE=Nej];
                      ToolTipML=[ENU=Disallow access to modify data in the object.;
                                 NOR=Ikke gi tilgang til † endre data i objektet.;
                                 SVE=Till†t inte †tkomst till att „ndra data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('M',"Modify Permission"::" ");
                               END;
                                }
      { 23      ;3   ;Action    ;
                      Name=AllowModifyIndirect;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Indirect;
                                 NOR=Indirekte;
                                 SVE=Indirekt];
                      ToolTipML=[ENU=Allow access to modify data in the object if there is modify access to a related object.;
                                 NOR=Gi tilgang til † endre data i objektet hvis det er endringstillatelse til et tilknyttet objekt.;
                                 SVE=Bevilja †tkomst till att „ndra data i objektet om det finns „ndringsbeh”righet till ett relaterat objekt.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('M',"Modify Permission"::Indirect);
                               END;
                                }
      { 30      ;1   ;ActionGroup;
                      CaptionML=[ENU=Delete Permission;
                                 NOR=Slettetillatelse;
                                 SVE=Borttagningsbeh”righet];
                      ActionContainerType=NewDocumentItems;
                      Image=Transactions }
      { 45      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Deletion;
                                 NOR=Tillat sletting;
                                 SVE=Till†t borttagning];
                      Enabled=IsEditable AND ("Object Type" = "Object Type"::"Table Data");
                      Image=Confirm }
      { 28      ;3   ;Action    ;
                      Name=AllowDeleteYes;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Yes;
                                 NOR=Ja;
                                 SVE=Ja];
                      ToolTipML=[ENU=Allow access to delete data in the object.;
                                 NOR=Gi tilgang til † slette data i objektet.;
                                 SVE=Bevilja †tkomst till att ta bort data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('D',"Delete Permission"::Yes);
                               END;
                                }
      { 29      ;3   ;Action    ;
                      Name=AllowDeleteNo;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=No;
                                 NOR=Nei;
                                 SVE=Nej];
                      ToolTipML=[ENU=Disallow access to delete data in the object.;
                                 NOR=Ikke gi tilgang til † slette data i objektet.;
                                 SVE=Bevilja inte †tkomst till att ta bort data i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('D',"Delete Permission"::" ");
                               END;
                                }
      { 27      ;3   ;Action    ;
                      Name=AllowDeleteIndirect;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Indirect;
                                 NOR=Indirekte;
                                 SVE=Indirekt];
                      ToolTipML=[ENU=Allow access to delete data in the object if there is delete access to a related object.;
                                 NOR=Gi tilgang til † slette data i objektet hvis det er slettetillatelse til et tilknyttet objekt.;
                                 SVE=Bevilja †tkomst till att ta bort data i objektet om det finns borttagningsbeh”righet till ett relaterat objekt.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('D',"Delete Permission"::Indirect);
                               END;
                                }
      { 33      ;1   ;ActionGroup;
                      CaptionML=[ENU=Execute Permission;
                                 NOR=Kj›ringstillatelse;
                                 SVE=K”rningsbeh”righet];
                      ActionContainerType=NewDocumentItems;
                      Image=Transactions }
      { 46      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Execution;
                                 NOR=Tillat kj›ring;
                                 SVE=Till†t k”rning];
                      Enabled=IsEditable AND ("Object Type" <> "Object Type"::"Table Data");
                      Image=Confirm }
      { 31      ;3   ;Action    ;
                      Name=AllowExecuteYes;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Yes;
                                 NOR=Ja;
                                 SVE=Ja];
                      ToolTipML=[ENU=Allow access to execute functions in the object.;
                                 NOR=Gi tilgang til † kj›re funksjoner i objektet.;
                                 SVE=Bevilja †tkomst till att k”ra funktioner i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('X',"Execute Permission"::Yes);
                               END;
                                }
      { 32      ;3   ;Action    ;
                      Name=AllowExecuteNo;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=No;
                                 NOR=Nei;
                                 SVE=Nej];
                      ToolTipML=[ENU=Disallow access to execute functions in the object.;
                                 NOR=Ikke gi tilgang til † kj›re funksjoner i objektet.;
                                 SVE=Bevilja inte †tkomst till att k”ra funktioner i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('X',"Execute Permission"::" ");
                               END;
                                }
      { 14      ;3   ;Action    ;
                      Name=AllowExecuteIndirect;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Indirect;
                                 NOR=Indirekte;
                                 SVE=Indirekt];
                      ToolTipML=[ENU=Allow access to execute functions in the object if there is execute access to a related object.;
                                 NOR=Gi tilgang til † kj›re funksjoner i objektet hvis det er kj›ringstillatelse til et tilknyttet objekt.;
                                 SVE=Bevilja †tkomst till att k”ra funktioner i objektet om det finns k”rningsbeh”righet till ett relaterat objekt.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('X',"Execute Permission"::Indirect);
                               END;
                                }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=All Permissions;
                                 NOR=Alle tillatelser;
                                 SVE=Alla beh”righeter];
                      ActionContainerType=NewDocumentItems;
                      Image=Transactions }
      { 47      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow All;
                                 NOR=Tillat alt;
                                 SVE=Till†t alla];
                      Image=Confirm }
      { 35      ;3   ;Action    ;
                      Name=AllowAllYes;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Yes;
                                 NOR=Ja;
                                 SVE=Ja];
                      ToolTipML=[ENU=Allow access to perform all actions in the object.;
                                 NOR=Gi tilgang til † utf›re alle handlinger i objektet.;
                                 SVE=Bevilja †tkomst till att utf”ra alla funktioner i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=IsEditable;
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('*',"Read Permission"::Yes);
                               END;
                                }
      { 36      ;3   ;Action    ;
                      Name=AllowAllNo;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=No;
                                 NOR=Nei;
                                 SVE=Nej];
                      ToolTipML=[ENU=Disallow access to perform all actions in the object.;
                                 NOR=Ikke gi tilgang til † utf›re alle handlinger i objektet.;
                                 SVE=Bevilja inte †tkomst till att utf”ra alla funktioner i objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=IsEditable;
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('*',"Read Permission"::" ");
                               END;
                                }
      { 34      ;3   ;Action    ;
                      Name=AllowAllIndirect;
                      AccessByPermission=TableData 2000000166=M;
                      CaptionML=[ENU=Indirect;
                                 NOR=Indirekte;
                                 SVE=Indirekt];
                      ToolTipML=[ENU=Allow access to perform all actions in the object if there is full access to a related object.;
                                 NOR=Gi tilgang til † utf›re alle handlinger i objektet hvis det er fullstendig tillatelse til et tilknyttet objekt.;
                                 SVE=Bevilja †tkomst till att utf”ra alla funktioner i objektet om det finns fullst„ndig †tkomst till ett relaterat objekt.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=IsEditable;
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('*',"Read Permission"::Indirect);
                               END;
                                }
      { 52      ;1   ;ActionGroup;
                      CaptionML=[ENU=Manage Permission Sets;
                                 NOR=Administrer tillatelsessett;
                                 SVE=Hantera beh”righetsupps„ttningar] }
      { 54      ;2   ;Action    ;
                      Name=AddRelatedTablesAction;
                      AccessByPermission=TableData 2000000166=I;
                      CaptionML=[ENU=Add Read Permission to Related Tables;
                                 NOR=Legg til lesetillatelse i relaterte tabeller;
                                 SVE=L„gg till l„sbeh”righet i relaterade tabeller];
                      ToolTipML=[ENU=Define read access to tables that are related to the object.;
                                 NOR=Definer lesetillatelse til tabeller som er tilknyttet objektet.;
                                 SVE=Definiera l„sbeh”righet till tabeller som „r relaterade till objektet.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=IsEditable;
                      Image=Relationship;
                      OnAction=VAR
                                 StandardAuthManagement@1100529200 : Codeunit 11012269;
                               BEGIN
                                 StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('M',"Role ID"); //**4PS.n

                                 AddRelatedTablesToSelected;
                               END;
                                }
      { 53      ;2   ;Action    ;
                      Name=IncludeExclude;
                      AccessByPermission=TableData 2000000166=ID;
                      CaptionML=[ENU=Include/Exclude Permission Set;
                                 NOR=Inkluder/ekskluder tillatelsessett;
                                 SVE=Inkludera/exkludera beh”righetsupps„ttning];
                      ToolTipML=[ENU=Add or remove a specific permission set.;
                                 NOR=Legg til eller fjern et bestemt tillatelsessett.;
                                 SVE=L„gg till eller ta bort en specifik beh”righetsupps„ttning.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=IsEditable;
                      Image=Edit;
                      OnAction=VAR
                                 AggregatePermissionSet@1001 : Record 2000000167;
                                 AddSubtractPermissionSet@1000 : Report 9000;
                                 StandardAuthManagement@1100529200 : Codeunit 11012269;
                               BEGIN
                                 StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('M',"Role ID"); //**4PS.n

                                 AggregatePermissionSet.GET(AggregatePermissionSet.Scope::Tenant,"App ID","Role ID");
                                 AddSubtractPermissionSet.SetDestination(AggregatePermissionSet);
                                 AddSubtractPermissionSet.RUNMODAL;
                                 FillTempPermissions;
                               END;
                                }
      { 51      ;1   ;ActionGroup;
                      Name=Code Coverage Actions;
                      CaptionML=[ENU=Record Permissions;
                                 NOR=Registrer tillatelser;
                                 SVE=Registrera beh”righeter];
                      ActionContainerType=ActionItems }
      { 50      ;2   ;Action    ;
                      Name=Start;
                      AccessByPermission=TableData 2000000166=I;
                      CaptionML=[ENU=Start;
                                 NOR=Start;
                                 SVE=Starta];
                      ToolTipML=[ENU=Start recording UI activities to generate the required permission set.;
                                 NOR=Start registrering av grensesnittaktiviteter for † generere det n›dvendige tillatelsessettet.;
                                 SVE=B”rja registrera anv„ndargr„nssnittsaktiviteter f”r att generera n”dv„ndig beh”righetsupps„ttning.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=NOT PermissionLoggingRunning;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 StandardAuthManagement@1100529200 : Codeunit 11012269;
                               BEGIN
                                 StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('M',"Role ID"); //**4PS.n

                                 IF NOT CONFIRM(StartRecordingQst) THEN
                                   EXIT;
                                 LogTablePermissions.Start;
                                 PermissionLoggingRunning := TRUE;
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Name=Stop;
                      AccessByPermission=TableData 2000000166=I;
                      CaptionML=[ENU=Stop;
                                 NOR=Stopp;
                                 SVE=Stoppa];
                      ToolTipML=[ENU=Stop recording.;
                                 NOR=Stopp registrering.;
                                 SVE=Stoppa inspelningen.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=PermissionLoggingRunning;
                      Image=Stop;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 TempTablePermissionBuffer@1000 : TEMPORARY Record 9800;
                                 StandardAuthManagement@1100529200 : Codeunit 11012269;
                               BEGIN
                                 StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('M',"Role ID"); //**4PS.n

                                 LogTablePermissions.Stop(TempTablePermissionBuffer);
                                 PermissionLoggingRunning := FALSE;
                                 IF NOT CONFIRM(AddPermissionsQst) THEN
                                   EXIT;
                                 AddLoggedPermissions(TempTablePermissionBuffer);
                                 FillTempPermissions;
                                 IF FINDFIRST THEN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 38  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=Allm„nt];
                Editable=ControlsAreEditable;
                GroupType=Group }

    { 42  ;2   ;Group     ;
                Editable=ControlsAreEditable;
                GroupType=Group }

    { 39  ;3   ;Field     ;
                Name=CurrentRoleID;
                CaptionML=[ENU=Permission Set;
                           NOR=Tillatelsessett;
                           SVE=Beh”righetsupps„ttning];
                ToolTipML=[ENU=Specifies the permission set that the permission belongs to.;
                           NOR=Angir tillatelsessettet som tillatelsen tilh›rer.;
                           SVE=Anger den beh”righetsupps„ttning som beh”righeten tillh”r.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentRoleID;
                Importance=Promoted;
                Editable=FALSE;
                OnValidate=BEGIN
                             FillTempPermissions;
                           END;
                            }

    { 40  ;3   ;Field     ;
                Name=Show;
                CaptionML=[ENU=Show;
                           NOR=Vis;
                           SVE=Visa];
                ToolTipML=[ENU=Specifies if the selected value is shown in the window.;
                           NOR=Angir om den valgte verdien vises i vinduet.;
                           SVE=Anger om det valda v„rdet visas i f”nstret.];
                OptionCaptionML=[ENU=Only In Permission Set,All;
                                 NOR=Bare i tillatelsessett,Alle;
                                 SVE=Endast i beh”righetsupps„ttning,Alla];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Show;
                Visible=ControlsAreEditable;
                OnValidate=BEGIN
                             FillTempPermissions;
                           END;
                            }

    { 49  ;2   ;Field     ;
                Name=AddRelatedTables;
                CaptionML=[ENU=Add Read Permission to Related Tables;
                           NOR=Legg til lesetillatelse i relaterte tabeller;
                           SVE=L„gg till l„sbeh”righet i relaterade tabeller];
                ToolTipML=[ENU=Specifies that all tables that are related to the selected table will be added to the window with Read permission.;
                           NOR=Angir at alle tabeller som er knyttet til den valgte tabellen blir lagt til i vinduet med lesetillatelse.;
                           SVE=Anger att alla tabeller som „r relaterade till den valda tabellen kommer att l„ggas till i f”nstret med l„sbeh”righet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AddRelatedTables;
                Visible=ControlsAreEditable }

    { 56  ;2   ;Field     ;
                Name=CopiedFromSystemRoleId;
                CaptionML=[ENU=Copied from System Permission Set;
                           NOR=Kopiert fra systemtillatelsessett;
                           SVE=Kopierad systembeh”righetsupps„ttning];
                ToolTipML=[ENU=Specifies the System Permission Set from which this was copied.;
                           NOR=Angir systemtillatelsessettet dette ble kopiert fra.;
                           SVE=Anger den systembeh”righetsupps„ttning som detta kopierades fr†n.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CopiedFromSystemRoleId;
                Visible=ControlsAreEditable;
                Editable=FALSE;
                OnDrillDown=VAR
                              AggregatePermissionSet@1001 : Record 2000000167;
                              PermissionPagesMgt@1000 : Codeunit 9001;
                              ZeroGuid@1002 : GUID;
                            BEGIN
                              IF CopiedFromSystemRoleId = '' THEN
                                EXIT;

                              PermissionPagesMgt.ShowPermissions(AggregatePermissionSet.Scope::System,ZeroGuid,CopiedFromSystemRoleId,FALSE);
                            END;
                             }

    { 2   ;1   ;Group     ;
                Name=Group;
                CaptionML=[ENU=AllPermission;
                           NOR=Alle tillatelser;
                           SVE=All beh”righet];
                Editable=ControlsAreEditable;
                GroupType=Repeater }

    { 13  ;2   ;Field     ;
                Name=PermissionSet;
                CaptionML=[ENU=Permission Set;
                           NOR=Tillatelsessett;
                           SVE=Beh”righetsupps„ttning];
                ToolTipML=[ENU=Specifies the ID of the permission sets that exist in the current database. This field is used internally.;
                           NOR=Angir ID-en for tillatelsessettene som finnes i den gjeldende databasen. Dette feltet brukes internt.;
                           SVE=Anger ID:t f”r beh”righetsupps„ttningarna som finns i den aktuella databasen. Det h„r f„ltet anv„nds internt.];
                ApplicationArea=#Advanced;
                SourceExpr="Role ID";
                Visible=FALSE;
                Enabled=FALSE }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of object that the permissions apply to in the current database.;
                           NOR=Angir hvilken objekttype tillatelsene gjelder for i den gjeldende databasen.;
                           SVE=Anger typen f”r objektet som beh”righeterna g„ller i den aktuella databasen.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Object Type";
                Enabled=AllowChangePrimaryKey;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr;
                OnValidate=BEGIN
                             ActivateControls;
                             SetObjectZeroName(Rec);
                             EmptyIrrelevantPermissionFields;
                             SetRelevantPermissionFieldsToYes;
                           END;
                            }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the object that the permissions apply to.;
                           NOR=Angir ID-en for objektet som tillatelsene gjelder for.;
                           SVE=Anger ID:t f”r det objekt som beh”righeterna g„ller f”r.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Object ID";
                Enabled=AllowChangePrimaryKey;
                LookupPageID=All Objects with Caption;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr;
                OnValidate=BEGIN
                             IsValidatedObjectID := FALSE;
                             ActivateControls;
                             SetObjectZeroName(Rec);
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=ObjectName;
                CaptionML=[ENU=Object Name;
                           NOR=Objektnavn;
                           SVE=Objektnamn];
                ToolTipML=[ENU=Specifies the name of the object that the permissions apply to.;
                           NOR=Angir navnet p† objektet som tillatelsene gjelder for.;
                           SVE=Anger namnet p† det objekt som beh”righeterna g„ller f”r.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ObjectName;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the permission set has read permission to this object. The values for the field are blank, Yes, and Indirect. Indirect means permission only through another object. If the field is empty, the permission set does not have read permission.;
                           NOR=Angir om tillatelsessettet har lesetillatelse til dette objektet eller ikke. Verdiene for feltet er Tomt, Ja og Indirekte. Indirekte betyr tillatelse bare gjennom et annet objekt. Hvis feltet er tomt, har ikke tillatelsessettet lesetillatelse.;
                           SVE=Anger om beh”righetsupps„ttningen har l„sbeh”righet till det h„r objektet. F„ltet kan vara tomt eller ha v„rdet Ja eller Indirekt. Indirekt inneb„r att beh”righet bara ges via ett annat objekt. Om f„ltet „r tomt har beh”righetsupps„ttningen inte l„sbeh”righet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Read Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 7   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the permission set has insert permission to this object. The values for the field are blank, Yes, and Indirect. Indirect means permission only through another object. If the field is empty, the permission set does not have insert permission.;
                           NOR=Angir om tillatelsessettet har innsettingstillatelse til dette objektet eller ikke. Verdiene for feltet er Tomt, Ja og Indirekte. Indirekte betyr tillatelse bare gjennom et annet objekt. Hvis feltet er tomt, har ikke tillatelsessettet innsettingstillatelse.;
                           SVE=Anger om beh”righetsupps„ttningen har infogningsbeh”righet till det h„r objektet. F„ltet kan vara tomt eller ha v„rdet Ja eller Indirekt. Indirekt inneb„r att beh”righet bara ges via ett annat objekt. Om f„ltet „r tomt har beh”righetsupps„ttningen inte infogningsbeh”righet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Insert Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the permission set has modify permission to this object. The values for the field are blank, Yes, and Indirect. Indirect means permission only through another object. If the field is empty, the permission set does not have modify permission.;
                           NOR=Angir om tillatelsessettet har endringstillatelse til dette objektet eller ikke. Verdiene for feltet er Tomt, Ja og Indirekte. Indirekte betyr tillatelse bare gjennom et annet objekt. Hvis feltet er tomt, har ikke tillatelsessettet endringstillatelse.;
                           SVE=Anger om beh”righetsupps„ttningen har „ndringsbeh”righet till det h„r objektet. F„ltet kan vara tomt eller ha v„rdet Ja eller Indirekt. Indirekt inneb„r att beh”righet bara ges via ett annat objekt. Om f„ltet „r tomt har beh”righetsupps„ttningen inte „ndringsbeh”righet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Modify Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the permission set has delete permission to this object. The values for the field are blank, Yes, and Indirect. Indirect means permission only through another object. If the field is empty, the permission set does not have delete permission.;
                           NOR=Angir om tillatelsessettet har slettetillatelse til dette objektet eller ikke. Verdiene for feltet er Tomt, Ja og Indirekte. Indirekte betyr tillatelse bare gjennom et annet objekt. Hvis feltet er tomt, har ikke tillatelsessettet slettetillatelse.;
                           SVE=Anger om beh”righetsupps„ttningen har borttagningsbeh”righet till det h„r objektet. F„ltet kan vara tomt eller ha v„rdet Ja eller Indirekt. Indirekt inneb„r att beh”righet bara ges via ett annat objekt. Om f„ltet „r tomt har beh”righetsupps„ttningen inte borttagningsbeh”righet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Delete Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the permission set has execute permission to this object. The values for the field are blank, Yes, and Indirect. Indirect means permission only through another object. If the field is empty, the permission set does not have execute permission.;
                           NOR=Angir om tillatelsessettet har kj›ringstillatelse til dette objektet eller ikke. Verdiene for feltet er Tomt, Ja og Indirekte. Indirekte betyr tillatelse bare gjennom et annet objekt. Hvis feltet er tomt, har ikke tillatelsessettet kj›ringstillatelse.;
                           SVE=Anger om beh”righetsupps„ttningen har k”rningsbeh”righet till det h„r objektet. F„ltet kan vara tomt eller ha v„rdet Ja eller Indirekt. Indirekt inneb„r att beh”righet bara ges via ett annat objekt. Om f„ltet „r tomt har beh”righetsupps„ttningen inte k”rningsbeh”righet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Execute Permission";
                Enabled=NOT IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a security filter that applies to this permission set to limit the access that this permission set has to the data contained in this table.;
                           NOR=Angir et sikkerhetsfilter som brukes p† dette tillatelsessettet for † begrense tilgangen som tillatelsessettet har til dataene i denne tabellen.;
                           SVE=Anger ett s„kerhetsfilter som g„ller f”r denna beh”righetsupps„ttning och begr„nsar den †tkomst som den h„r beh”righetsupps„ttningen har till data i den h„r tabellen.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Security Filter";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr;
                OnAssistEdit=VAR
                               PermissionPagesMgt@1000 : Codeunit 9001;
                               OutputSecurityFilter@1001 : Text;
                             BEGIN
                               // User cannot edit Security filter field for Extensions but can edit for user created types.
                               // Since this field is empty and GUID exists for Extensions it can be used as a flag for them.
                               IF (FORMAT("Security Filter") = '') AND (NOT ISNULLGUID(CurrentAppID)) THEN
                                 EXIT;

                               IF PermissionPagesMgt.ShowSecurityFilterForTenantPermission(OutputSecurityFilter,Rec,ControlsAreEditable) THEN
                                 EVALUATE("Security Filter",OutputSecurityFilter);
                             END;
                              }

  }
  CODE
  {
    VAR
      LogTablePermissions@1013 : Codeunit 9800;
      CurrentAppID@1015 : GUID;
      CurrentRoleID@1000 : Code[20];
      CopiedFromSystemRoleId@1018 : Code[20];
      Show@1002 : 'Only In Permission Set,All';
      AddRelatedTables@1006 : Boolean;
      IsTableData@1001 : Boolean INDATASET;
      IsNewRecord@1010 : Boolean;
      IsValidatedObjectID@1012 : Boolean;
      PermissionRecExists@1008 : Boolean;
      AllowChangePrimaryKey@1004 : Boolean;
      AddPermissionsQst@1007 : TextConst 'ENU=Do you want to add the recorded permissions?;NOR=Vil du legge til de registrerte tillatelsene?;SVE=Vill du l„gga till de registrerade beh”righeterna?';
      StartRecordingQst@1014 : TextConst 'ENU=Do you want to start the recording now?;NOR=Vil du starte registreringen n†?;SVE=Vill du starta inspelningen nu?';
      AllObjTxt@1009 : TextConst '@@@="%1= type name, e.g. Table Data or Report or Page";ENU=All objects of type %1;NOR=Alle objekter av typen %1;SVE=Alla objekt av typen %1';
      ZeroObjStyleExpr@1011 : Boolean;
      PermissionLoggingRunning@1003 : Boolean;
      ControlsAreEditable@1016 : Boolean;
      ObjectName@1005 : Text;
      IsEditable@1017 : Boolean;
      CannotChangeExtensionPermissionErr@1019 : TextConst 'ENU=You cannot change permissions sets of type Extension.;NOR=Du kan ikke endre tillatelsessett av typen Utvidelse.;SVE=Du kan inte „ndra beh”righetsupps„ttningar av typen Till„gg.';

    LOCAL PROCEDURE FillTempPermissions@1003();
    VAR
      TempTenantPermission@1000 : TEMPORARY Record 2000000166;
      TenantPermission@1002 : Record 2000000166;
    BEGIN
      TempTenantPermission.COPY(Rec,TRUE);
      TempTenantPermission.RESET;
      TempTenantPermission.DELETEALL;
      FILTERGROUP(2);
      SETRANGE("Role ID",CurrentRoleID);
      TenantPermission.SETRANGE("Role ID",CurrentRoleID);
      FILTERGROUP(0);

      IF TenantPermission.FINDSET THEN
        REPEAT
          TempTenantPermission := TenantPermission;
          TempTenantPermission.INSERT;
        UNTIL TenantPermission.NEXT = 0;

      IF Show = Show::All THEN
        FillTempPermissionsForAllObjects(TempTenantPermission);
      IsNewRecord := FALSE;
      IF FIND('=<>') THEN;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE FillTempPermissionsForAllObjects@5(VAR TenantPermission@1005 : Record 2000000166);
    VAR
      TempTenantPermission@1007 : TEMPORARY Record 2000000166;
      AllObj@1006 : Record 2000000038;
    BEGIN
      AllObj.SETFILTER("Object Type",'%1|%2|%3|%4|%5|%6|%7|%8|%9',
        TenantPermission."Object Type"::"Table Data",
        TenantPermission."Object Type"::Table,
        TenantPermission."Object Type"::Report,
        TenantPermission."Object Type"::Codeunit,
        TenantPermission."Object Type"::XMLport,
        TenantPermission."Object Type"::MenuSuite,
        TenantPermission."Object Type"::Page,
        TenantPermission."Object Type"::Query,
        TenantPermission."Object Type"::System);
      TempTenantPermission.COPY(TenantPermission,TRUE);
      TempTenantPermission.INIT;
      IF AllObj.FINDSET THEN
        REPEAT
          TempTenantPermission."Object Type" := AllObj."Object Type";
          TempTenantPermission."Object ID" := AllObj."Object ID";
          TempTenantPermission."Read Permission" := "Read Permission"::" ";
          TempTenantPermission."Insert Permission" := "Insert Permission"::" ";
          TempTenantPermission."Modify Permission" := "Modify Permission"::" ";
          TempTenantPermission."Delete Permission" := "Delete Permission"::" ";
          TempTenantPermission."Execute Permission" := "Execute Permission"::" ";
          SetObjectZeroName(TempTenantPermission);
          IF TempTenantPermission.INSERT THEN;
        UNTIL AllObj.NEXT = 0;
    END;

    LOCAL PROCEDURE ActivateControls@1();
    BEGIN
      IsTableData := "Object Type" = "Object Type"::"Table Data"
    END;

    LOCAL PROCEDURE ModifyRecord@59(VAR ModifiedTenantPermission@1000 : Record 2000000166);
    VAR
      TenantPermission@1001 : Record 2000000166;
      IsNewPermission@1003 : Boolean;
    BEGIN
      TenantPermission.LOCKTABLE;
      IsNewPermission :=
        NOT TenantPermission.GET(ModifiedTenantPermission."App ID",ModifiedTenantPermission."Role ID",
          ModifiedTenantPermission."Object Type",ModifiedTenantPermission."Object ID");
      IF IsNewPermission THEN BEGIN
        TenantPermission.TRANSFERFIELDS(ModifiedTenantPermission,TRUE);
        TenantPermission.INSERT;
      END ELSE BEGIN
        TenantPermission.TRANSFERFIELDS(ModifiedTenantPermission,FALSE);
        TenantPermission.MODIFY;
      END;

      IF (TenantPermission."Read Permission" = 0) AND
         (TenantPermission."Insert Permission" = 0) AND
         (TenantPermission."Modify Permission" = 0) AND
         (TenantPermission."Delete Permission" = 0) AND
         (TenantPermission."Execute Permission" = 0)
      THEN BEGIN
        TenantPermission.DELETE;
        IF Show = Show::"Only In Permission Set" THEN
          ModifiedTenantPermission.DELETE;
        IsNewPermission := FALSE;
      END;
      IF IsNewPermission AND AddRelatedTables THEN
        DoAddRelatedTables(ModifiedTenantPermission);
    END;

    LOCAL PROCEDURE UpdateSelected@55(RIMDX@1000 : Text[1];PermissionOption@1001 : Option);
    VAR
      TempTenantPermission@1003 : TEMPORARY Record 2000000166;
      OriginalTenantPermission@1002 : Record 2000000166;
      StandardAuthManagement@1100529200 : Codeunit 11012269;
    BEGIN
      StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('M',"Role ID"); //**4PS.n

      OriginalTenantPermission := Rec;
      TempTenantPermission.COPY(Rec,TRUE);
      CurrPage.SETSELECTIONFILTER(TempTenantPermission);

      IF TempTenantPermission.FINDSET THEN
        REPEAT
          CASE RIMDX OF
            'R':
              IF TempTenantPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempTenantPermission."Read Permission" := PermissionOption;
            'I':
              IF TempTenantPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempTenantPermission."Insert Permission" := PermissionOption;
            'M':
              IF TempTenantPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempTenantPermission."Modify Permission" := PermissionOption;
            'D':
              IF TempTenantPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempTenantPermission."Delete Permission" := PermissionOption;
            'X':
              IF TempTenantPermission."Object Type" <> "Object Type"::"Table Data" THEN
                TempTenantPermission."Execute Permission" := PermissionOption;
            '*':
              BEGIN
                IF TempTenantPermission."Object Type" = "Object Type"::"Table Data" THEN BEGIN
                  TempTenantPermission."Read Permission" := PermissionOption;
                  TempTenantPermission."Insert Permission" := PermissionOption;
                  TempTenantPermission."Modify Permission" := PermissionOption;
                  TempTenantPermission."Delete Permission" := PermissionOption;
                END ELSE
                  TempTenantPermission."Execute Permission" := PermissionOption;
              END;
          END;
          ModifyRecord(TempTenantPermission);
          IF GET(TempTenantPermission."App ID",TempTenantPermission."Role ID",
               TempTenantPermission."Object Type",TempTenantPermission."Object ID")
          THEN BEGIN
            Rec := TempTenantPermission;
            MODIFY(TRUE);
          END;
        UNTIL TempTenantPermission.NEXT = 0;

      Rec := OriginalTenantPermission;
      IF FIND THEN;
    END;

    LOCAL PROCEDURE AddRelatedTablesToSelected@8();
    VAR
      TempTenantPermission@1003 : TEMPORARY Record 2000000166;
    BEGIN
      TempTenantPermission.COPY(Rec,TRUE);
      CurrPage.SETSELECTIONFILTER(TempTenantPermission);
      IF TempTenantPermission.FINDSET THEN
        REPEAT
          DoAddRelatedTables(TempTenantPermission);
        UNTIL TempTenantPermission.NEXT = 0;
      IF FIND THEN;
    END;

    LOCAL PROCEDURE AddLoggedPermissions@11(VAR TablePermissionBuffer@1001 : Record 9800);
    BEGIN
      TablePermissionBuffer.SETRANGE("Session ID",SESSIONID);
      IF TablePermissionBuffer.FINDSET THEN
        REPEAT
          AddPermission(CurrentAppID,CurrentRoleID,
            TablePermissionBuffer."Object Type",
            TablePermissionBuffer."Object ID",
            TablePermissionBuffer."Read Permission",
            TablePermissionBuffer."Insert Permission",
            TablePermissionBuffer."Modify Permission",
            TablePermissionBuffer."Delete Permission",
            TablePermissionBuffer."Execute Permission");
        UNTIL TablePermissionBuffer.NEXT = 0;
      TablePermissionBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE DoAddRelatedTables@7(VAR TenantPermission@1000 : Record 2000000166);
    VAR
      TableRelationsMetadata@1002 : Record 2000000141;
    BEGIN
      IF TenantPermission."Object Type" <> TenantPermission."Object Type"::"Table Data" THEN
        EXIT;
      IF TenantPermission."Object ID" = 0 THEN
        EXIT;

      TableRelationsMetadata.SETRANGE("Table ID",TenantPermission."Object ID");
      TableRelationsMetadata.SETFILTER("Related Table ID",'>0&<>%1',TenantPermission."Object ID");
      IF TableRelationsMetadata.FINDSET THEN
        REPEAT
          AddPermission(
            CurrentAppID,CurrentRoleID,"Object Type"::"Table Data",TableRelationsMetadata."Related Table ID","Read Permission"::Yes,
            "Insert Permission"::" ","Modify Permission"::" ","Delete Permission"::" ","Execute Permission"::" ");
        UNTIL TableRelationsMetadata.NEXT = 0;
    END;

    LOCAL PROCEDURE AddPermission@12(AppID@1010 : GUID;RoleID@1000 : Code[20];ObjectType@1001 : Option;ObjectID@1002 : Integer;AddRead@1007 : Option;AddInsert@1004 : Option;AddModify@1005 : Option;AddDelete@1006 : Option;AddExecute@1008 : Option) : Boolean;
    VAR
      TenantPermission@1003 : Record 2000000166;
      LogTablePermissions@1009 : Codeunit 9800;
    BEGIN
      IF NOT GET(AppID,RoleID,ObjectType,ObjectID) THEN BEGIN
        INIT;
        "App ID" := AppID;
        "Role ID" := RoleID;
        "Object Type" := ObjectType;
        "Object ID" := ObjectID;
        "Read Permission" := "Read Permission"::" ";
        "Insert Permission" := "Insert Permission"::" ";
        "Modify Permission" := "Modify Permission"::" ";
        "Delete Permission" := "Delete Permission"::" ";
        "Execute Permission" := "Execute Permission"::" ";
        INSERT;
        TenantPermission.TRANSFERFIELDS(Rec,TRUE);
        TenantPermission.INSERT;
      END;

      "Read Permission" := LogTablePermissions.GetMaxPermission("Read Permission",AddRead);
      "Insert Permission" := LogTablePermissions.GetMaxPermission("Insert Permission",AddInsert);
      "Modify Permission" := LogTablePermissions.GetMaxPermission("Modify Permission",AddModify);
      "Delete Permission" := LogTablePermissions.GetMaxPermission("Delete Permission",AddDelete);
      "Execute Permission" := LogTablePermissions.GetMaxPermission("Execute Permission",AddExecute);

      SetObjectZeroName(Rec);
      MODIFY;
      TenantPermission.LOCKTABLE;
      IF NOT TenantPermission.GET(AppID,RoleID,ObjectType,ObjectID) THEN BEGIN
        TenantPermission.TRANSFERFIELDS(Rec,TRUE);
        TenantPermission.INSERT;
      END ELSE BEGIN
        TenantPermission.TRANSFERFIELDS(Rec,FALSE);
        TenantPermission.MODIFY;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetObjectZeroName@9(VAR TenantPermission@1000 : Record 2000000166);
    BEGIN
      IF TenantPermission."Object ID" <> 0 THEN BEGIN
        TenantPermission.CALCFIELDS("Object Name");
        ObjectName := TenantPermission."Object Name";
      END ELSE
        ObjectName := COPYSTR(STRSUBSTNO(AllObjTxt,TenantPermission."Object Type"),1,MAXSTRLEN(TenantPermission."Object Name"));
    END;

    [External]
    PROCEDURE SetControlsAsEditable@4();
    BEGIN
      ControlsAreEditable := TRUE;
    END;

    [External]
    PROCEDURE SetControlsAsReadOnly@3();
    BEGIN
      ControlsAreEditable := FALSE;
    END;

    LOCAL PROCEDURE EmptyIrrelevantPermissionFields@2();
    BEGIN
      IF "Object Type" = "Object Type"::"Table Data" THEN
        "Execute Permission" := "Execute Permission"::" "
      ELSE BEGIN
        "Read Permission" := "Read Permission"::" ";
        "Insert Permission" := "Insert Permission"::" ";
        "Modify Permission" := "Modify Permission"::" ";
        "Delete Permission" := "Delete Permission"::" ";
      END;
    END;

    LOCAL PROCEDURE SetRelevantPermissionFieldsToYes@6();
    BEGIN
      IF "Object Type" = "Object Type"::"Table Data" THEN BEGIN
        "Read Permission" := "Read Permission"::Yes;
        "Insert Permission" := "Insert Permission"::Yes;
        "Modify Permission" := "Modify Permission"::Yes;
        "Delete Permission" := "Delete Permission"::Yes;
      END ELSE
        "Execute Permission" := "Execute Permission"::Yes;
    END;

    BEGIN
    END.
  }
}

