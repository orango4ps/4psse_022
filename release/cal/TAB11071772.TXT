OBJECT Table 11071772 SUP Recording Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServiceOrder@1100529600 : Record 11012823;
             BEGIN
               IF ("Base Service Order No." = '') AND ("Service Order No." <> '') THEN
                 IF ServiceOrder.GET("Base Service Order No.") THEN
                   "Base Service Order No." := ServiceOrder."Base Service Order No.";
               SetLineNo;
             END;

    OnModify=BEGIN
               CalculateRealizationAmount;
             END;

    OnDelete=VAR
               SUPRecLineCommentLine@1100528800 : Record 11072290;
               DocumentLinkManagement@1100528600 : Codeunit 11012401;
             BEGIN
               TestIfNoProductionLinesExists;
               SUPRecLineCommentLine.SETRANGE("Service Order No.", "Service Order No.");
               SUPRecLineCommentLine.SETRANGE("SUP Recording Line No.", "Line No.");
               SUPRecLineCommentLine.DELETEALL;
               DocumentLinkManagement.DeleteDocumentLinksByRecordID(RECORDID);
               ClearSUPRecordingLineNoFromAdviceOrderLine(TRUE);
             END;

    OnRename=BEGIN
               IF ("Service Order No." <> xRec."Service Order No.") OR
                  ("Price Book Type" <> xRec."Price Book Type") OR
                  ("Price Book Code" <> xRec."Price Book Code") OR
                  ("Index Date" <> xRec."Index Date") OR
                  ("Unit Price Code" <> xRec."Unit Price Code")
               THEN
                 ERROR(Text001);
             END;

    CaptionML=[ENU=SUP Recording Line;
               SVE=Enhetspris f”r serviceorder];
    LookupPageID=Page11125295;
    DrillDownPageID=Page11125295;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   OnValidate=VAR
                                                                ServiceOrder@1100528600 : Record 11012823;
                                                                ServiceOrderExtension@1100528601 : Record 11071727;
                                                              BEGIN
                                                                IF "Service Order No." <> '' THEN BEGIN
                                                                  ServiceOrder.GET("Service Order No.");
                                                                  ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
                                                                  "Price Book Type" := ServiceOrder."Price Book Type";
                                                                  "Base Service Order No." := ServiceOrder."Base Service Order No.";
                                                                  "Price Book Code" := ServiceOrderExtension."Price Book Code";
                                                                  "Index Date" := ServiceOrderExtension."Price Book Index Date";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr];
                                                   NotBlank=Yes }
    { 15  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 17  ;   ;External Line No.   ;Integer       ;CaptionML=[ENU=External Line No.;
                                                              NOR=Eksternt radnr;
                                                              SVE=Externt radnr] }
    { 20  ;   ;Price Book Type     ;Option        ;CaptionML=[ENU=Price Book Type;
                                                              SVE=Enhetspristyp];
                                                   OptionCaptionML=[ENU=" ,Internal,Customer";
                                                                    NOR=" ,Intern,Kunde";
                                                                    SVE=" ,Intern,Kund"];
                                                   OptionString=[ ,Internal,Customer];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 30  ;   ;Price Book Code     ;Code20        ;TableRelation="Service Price Book".Code WHERE (Type=FIELD(Price Book Type));
                                                   OnLookup=VAR
                                                              ServiceUnitPrice@1100528600 : Record 11071768;
                                                              ServiceUnitPriceList@1100528601 : Page 11125269;
                                                            BEGIN
                                                              ServiceUnitPrice.SETRANGE(Type, "Price Book Type");
                                                              ServiceUnitPriceList.LOOKUPMODE(TRUE);
                                                              ServiceUnitPriceList.SETTABLEVIEW(ServiceUnitPrice);
                                                              IF ServiceUnitPriceList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ServiceUnitPriceList.GETRECORD(ServiceUnitPrice);
                                                                "Price Book Code" := ServiceUnitPrice.Code;
                                                                "Index Date" := ServiceUnitPrice."Index Date";
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Price Book Code;
                                                              SVE=Enhetspriskod];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 40  ;   ;Index Date          ;Date          ;CaptionML=[ENU=Index Date;
                                                              NOR=Indeksdato;
                                                              SVE=Indexdatum];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 45  ;   ;Room                ;Code20        ;TableRelation="SUP Room".Code;
                                                   OnLookup=VAR
                                                              ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              CustomerNo@1100528601 : Code[20];
                                                              ServiceLocationType@1100528602 : Code[20];
                                                            BEGIN
                                                              CustomerNo := ServiceUnitPriceManagement.DetermineCustomerNo("Price Book Type", "Price Book Code");
                                                              ServiceLocationType := ServiceUnitPriceManagement.GetServiceLocationTypeFromServiceOrder("Service Order No.");
                                                              IF ServiceUnitPriceManagement.LookupRoom(CustomerNo, ServiceLocationType, Room) THEN
                                                                VALIDATE(Room);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Room;
                                                              NOR=Rom;
                                                              SVE=Rum] }
    { 50  ;   ;Unit Price Code     ;Code20        ;TableRelation="Service Unit Price".Code;
                                                   OnValidate=VAR
                                                                ServiceUnitPriceLine@1100528600 : Record 11071769;
                                                                ServiceOrder@1100528601 : Record 11012823;
                                                                SUPRecordingLine@1100527550 : Record 11071772;
                                                              BEGIN
                                                                IF xRec."Unit Price Code" <> '' THEN BEGIN
                                                                  SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
                                                                  SUPRecordingLine.SETFILTER("Line No.", '<>%1', "Line No.");
                                                                  SUPRecordingLine.SETRANGE("Sub-part of", xRec."Unit Price Code");
                                                                  IF NOT SUPRecordingLine.ISEMPTY THEN
                                                                    ERROR(Text0011);
                                                                END;

                                                                IF "Unit Price Code" <> xRec."Unit Price Code" THEN
                                                                  TestIfNoProductionLinesExists;
                                                                CALCFIELDS("Unit Price Type");
                                                                IF "Unit Price Type" = "Unit Price Type"::"Summary Element" THEN
                                                                  FIELDERROR("Unit Price Type");
                                                                IF ServiceUnitPriceLine.GET("Price Book Code", "Index Date", "Unit Price Code") THEN BEGIN
                                                                  IF NOT ServiceOrder.GET("Service Order No.") THEN
                                                                  ServiceOrder.INIT;
                                                                  IF ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Installment Overview by Service Order" THEN
                                                                    IF ServiceUnitPriceLine."Unit Price Type" = ServiceUnitPriceLine."Unit Price Type"::Administrative THEN
                                                                      ServiceUnitPriceLine.FIELDERROR("Unit Price Type");
                                                                  VALIDATE(Discipline, ServiceUnitPriceLine.Discipline);
                                                                  VALIDATE("Trade Speciality", ServiceUnitPriceLine."Trade Speciality");
                                                                  VALIDATE("Purchase Price Subcontracting", ServiceUnitPriceLine."Purchase Price Subcontracting");
                                                                  Description := ServiceUnitPriceLine.Description;
                                                                  "Description 2" := ServiceUnitPriceLine."Description 2";
                                                                  "Description 3" := ServiceUnitPriceLine."Description 3";
                                                                  "Unit of Measure" := ServiceUnitPriceLine."Unit of Measure";
                                                                  "Unit Price" := ServiceUnitPriceLine."Unit Price";
                                                                  "Surcharge Set Code" := ServiceUnitPriceLine."Surcharge Set Code";
                                                                  VALIDATE("Sub-part of", ServiceUnitPriceLine."Sub-part of");
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Description 3" := '';
                                                                  "Unit of Measure" := '';
                                                                  "Unit Price" := 0;
                                                                END;
                                                                "Alternative Unit Price Code" := "Unit Price Code";
                                                                IF "Unit Price Code" <> '' THEN
                                                                  "VAT Prod. Posting Group" := '';
                                                                CalculateAmountFields;
                                                                SetLineNo;

                                                                PopulateElementsAfterValidate;
                                                              END;

                                                   CaptionML=[ENU=Unit Price Code;
                                                              NOR=Enhetspriskode;
                                                              SVE=Enhetspriskod] }
    { 55  ;   ;Alternative Unit Price Code;Code20 ;OnValidate=VAR
                                                                ServiceOrder@1100528201 : Record 11012823;
                                                                ServiceOrder2@1100528202 : Record 11012823;
                                                                SUPRecordingLine@1100528203 : Record 11071772;
                                                                TempSUPRecordingLine@1100528205 : TEMPORARY Record 11071772;
                                                                ServiceUnitPrice@1100528209 : Record 11071769;
                                                                DialogWindow@1100528208 : Dialog;
                                                                WarningDone@1100528200 : Boolean;
                                                                ShowSUPrecordingLines@1100528204 : Boolean;
                                                                RecordCount@1100528206 : Integer;
                                                                LoopCount@1100528207 : Integer;
                                                              BEGIN
                                                                IF ("Alternative Unit Price Code" <> xRec."Alternative Unit Price Code") AND
                                                                  ("Alternative Unit Price Code" <> '') AND ("Alternative Unit Price Code" <> "Unit Price Code")  AND
                                                                  GUIALLOWED THEN BEGIN

                                                                  ServiceUnitPrice.SETRANGE("Price Book Type", "Price Book Type");
                                                                  ServiceUnitPrice.SETRANGE("Price Book Code", "Price Book Code");
                                                                  ServiceUnitPrice.SETRANGE("Index Date","Index Date");
                                                                  ServiceUnitPrice.SETRANGE(Code, "Alternative Unit Price Code");
                                                                  IF ServiceUnitPrice.FINDFIRST THEN
                                                                    ERROR(Text010, FIELDCAPTION("Alternative Unit Price Code"), "Alternative Unit Price Code", ServiceUnitPrice.TABLECAPTION);

                                                                  IF ServiceOrder.GET("Service Order No.") THEN;
                                                                  SUPRecordingLine.SETCURRENTKEY("Alternative Unit Price Code");
                                                                  SUPRecordingLine.SETRANGE("Alternative Unit Price Code", "Alternative Unit Price Code");
                                                                  SUPRecordingLine.SETFILTER("Unit Price Code", '=%1', '');
                                                                  IF SUPRecordingLine.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      IF NOT ((SUPRecordingLine."Service Order No." = "Service Order No.") AND (SUPRecordingLine."Line No." = "Line No.")) THEN BEGIN
                                                                        IF ServiceOrder2.GET(SUPRecordingLine."Service Order No.") THEN BEGIN
                                                                          IF ServiceOrder."Bill-to Customer No." = ServiceOrder2."Bill-to Customer No." THEN BEGIN
                                                                            IF CONFIRM(Text007, TRUE, FIELDCAPTION("Alternative Unit Price Code"), "Alternative Unit Price Code") THEN
                                                                              ShowSUPrecordingLines := TRUE;
                                                                            WarningDone := TRUE;
                                                                          END;
                                                                        END;
                                                                      END;
                                                                    UNTIL (SUPRecordingLine.NEXT = 0) OR WarningDone;
                                                                    IF ShowSUPrecordingLines THEN BEGIN
                                                                      SUPRecordingLine.SETFILTER("Alternative Unit Price Code", '<>%1' ,'');
                                                                      RecordCount := SUPRecordingLine.COUNT;
                                                                      DialogWindow.OPEN(Text009);
                                                                      SUPRecordingLine.FINDSET;
                                                                      REPEAT
                                                                        LoopCount += 1;
                                                                        DialogWindow.UPDATE(1,ROUND(LoopCount / RecordCount * 10000, 1));
                                                                        IF ServiceOrder2.GET(SUPRecordingLine."Service Order No.") THEN BEGIN
                                                                          IF ServiceOrder."Bill-to Customer No." = ServiceOrder2."Bill-to Customer No." THEN BEGIN
                                                                            TempSUPRecordingLine := SUPRecordingLine;
                                                                            TempSUPRecordingLine.INSERT;
                                                                          END;
                                                                        END;
                                                                      UNTIL SUPRecordingLine.NEXT = 0;
                                                                      DialogWindow.CLOSE();
                                                                      PAGE.RUN(PAGE::"SUP Recording Lines (Temp)",TempSUPRecordingLine);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Alternative Unit Price Code }
    { 60  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF Description <> xRec.Description THEN BEGIN
                                                                  IF GUIALLOWED THEN //TODO.mg: Needed for VMA
                                                                    TESTFIELD("Unit Price Code", '');
                                                                  TestIfNoProductionLinesExists;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 61  ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                IF "Description 2" <> xRec."Description 2" THEN BEGIN
                                                                  IF GUIALLOWED THEN //TODO.mg: Needed for VMA
                                                                    TESTFIELD("Unit Price Code", '');
                                                                  TestIfNoProductionLinesExists;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 62  ;   ;Description 3       ;Text50        ;OnValidate=BEGIN
                                                                IF "Description 3" <> xRec."Description 3" THEN BEGIN
                                                                  IF GUIALLOWED THEN //TODO.mg: Needed for VMA
                                                                    TESTFIELD("Unit Price Code", '');
                                                                  TestIfNoProductionLinesExists;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Description 3;
                                                              NOR=Beskrivelse 3;
                                                              SVE=Beskrivning 3] }
    { 65  ;   ;Description Customer;Text35        ;CaptionML=ENU=Description Customer }
    { 66  ;   ;Description 2 Customer;Text70      ;CaptionML=ENU=Description 2 Customer }
    { 70  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF "Unit of Measure" <> xRec."Unit of Measure" THEN BEGIN
                                                                  IF GUIALLOWED THEN //TODO.mg: Needed for VMA
                                                                    TESTFIELD("Unit Price Code", '');
                                                                  TestIfNoProductionLinesExists;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet] }
    { 80  ;   ;Unit Price          ;Decimal       ;OnValidate=VAR
                                                                ServiceSetup@1100528500 : Record 11012800;
                                                              BEGIN
                                                                IF "Unit Price" <> xRec."Unit Price" THEN BEGIN
                                                                  ServiceSetup.GET;
                                                                  IF ("Price Book Type" <> "Price Book Type"::Internal) OR NOT ServiceSetup."Allow Internal SUP Line Modif." THEN
                                                                    IF GUIALLOWED THEN
                                                                      TESTFIELD("Unit Price Code", '');
                                                                  TestIfNoProductionLinesExists;
                                                                  CalculateAmountFields;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit Price;
                                                              NOR=Salgspris;
                                                              SVE=A-pris];
                                                   DecimalPlaces=2:5 }
    { 90  ;   ;Pre-Recording Quantity;Decimal     ;OnValidate=BEGIN
                                                                IF "Pre-Recording Quantity" <> 0 THEN
                                                                  TestIfLineIsNonHeader;
                                                                CalculateAmountFields;

                                                                CopyQuantitiesToSubParts;
                                                              END;

                                                   CaptionML=[ENU=Pre-Recording Quantity;
                                                              NOR=Forh†ndregistrering Kvantum;
                                                              SVE=F”rregistreringsantal];
                                                   DecimalPlaces=0:2 }
    { 100 ;   ;Pre-Recording Amount;Decimal       ;CaptionML=[ENU=Pre-Recording Amount;
                                                              NOR=Forh†ndsregistrering Bel›p;
                                                              SVE=F”rregistreringsbelopp];
                                                   DecimalPlaces=2:5 }
    { 110 ;   ;Recording Quantity  ;Decimal       ;OnValidate=VAR
                                                                ServiceSetup@1100527452 : Record 11012800;
                                                                AdviceOrderLine@1100527451 : Record 11012055;
                                                                SubcontractorNo@1100527450 : Code[20];
                                                                SUPRecordingLine@1100527453 : Record 11071772;
                                                                Position@1100527454 : Integer;
                                                              BEGIN
                                                                IF "Recording Quantity" <> 0 THEN
                                                                  TestIfLineIsNonHeader;
                                                                CalculateAmountFields;

                                                                CopyQuantitiesToSubParts;

                                                                IF (CurrFieldNo = FIELDNO("Recording Quantity")) AND ("Work Order No." <> '') THEN BEGIN
                                                                  ServiceSetup.GET;
                                                                  IF NOT ServiceSetup."Advice Orders by Unit Price" THEN
                                                                    EXIT;
                                                                  AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
                                                                  AdviceOrderLine.SETRANGE("Service Order No.", "Service Order No.");
                                                                  AdviceOrderLine.SETRANGE("SUP Recording Line No.", "Line No.");
                                                                  IF AdviceOrderLine.FINDFIRST THEN BEGIN
                                                                    AdviceOrderLine.VALIDATE("Quantity (Advice)", "Recording Quantity");
                                                                    AdviceOrderLine.MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Recording Quantity;
                                                              NOR=Registrering Kvantum;
                                                              SVE=Registreringsantal];
                                                   DecimalPlaces=0:2 }
    { 120 ;   ;Recording Amount    ;Decimal       ;CaptionML=[ENU=Recording Amount;
                                                              NOR=Registrering Bel›p;
                                                              SVE=Registreringsbelopp];
                                                   DecimalPlaces=2:5 }
    { 130 ;   ;Production Recording Quantity;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("SUP Production Line".Production WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                           Recording Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Production Recording Quantity;
                                                              SVE=Realiseringssantal];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 135 ;   ;Prod. Rec. Quantity (Approved);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("SUP Production Line".Production WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                           Recording Line No.=FIELD(Line No.),
                                                                                                           SUP Production Status=CONST(Approved)));
                                                   CaptionML=ENU=Production Recording Quantity (Approved);
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 140 ;   ;Production Recording Amount;Decimal;CaptionML=[ENU=Production Recording Amount;
                                                              SVE=Realiseringsbelopp];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 150 ;   ;Object No.          ;Code20        ;TableRelation="Service Order Object"."Object No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   OnValidate=VAR
                                                                ServiceOrder@1100528600 : Record 11012823;
                                                                ServiceObject@1100528601 : Record 11071691;
                                                              BEGIN
                                                                CALCFIELDS("Object Description");
                                                                IF "Object No." = '' THEN
                                                                  EXIT;

                                                                ServiceOrder.GET("Service Order No.");
                                                                ServiceObject.GET("Object No.");
                                                                IF GUIALLOWED AND (ServiceOrder."Service Location No." <> ServiceObject."Service Location No.") THEN
                                                                  MESSAGE(Text000,
                                                                    ServiceOrder.TABLECAPTION,
                                                                    ServiceOrder.FIELDCAPTION("Service Location No."),
                                                                    ServiceOrder."Service Location No.",
                                                                    ServiceObject.TABLECAPTION,
                                                                    ServiceObject.FIELDCAPTION("Service Location No."));
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceOrderObject@1100528601 : Record 11071724;
                                                              ServiceOrder@1100528600 : Record 11012823;
                                                            BEGIN
                                                              ServiceOrder.GET("Service Order No.");
                                                              ServiceOrderObject.FILTERGROUP(9);
                                                              ServiceOrderObject.SETRANGE("Service Order No.", "Service Order No.");
                                                              ServiceOrderObject.FILTERGROUP(0);
                                                              IF PAGE.RUNMODAL(0, ServiceOrderObject) = ACTION::LookupOK THEN
                                                                VALIDATE("Object No.", ServiceOrderObject."Object No.");
                                                            END;

                                                   CaptionML=[ENU=Object No.;
                                                              NOR=Objektnr.;
                                                              SVE=Objektnr] }
    { 151 ;   ;Object Description  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Description WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=[ENU=Object Description;
                                                              SVE=Objektbeskrivning];
                                                   Editable=No }
    { 160 ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              NOR=Faktureringskundenr;
                                                              SVE=Faktureringskundnr] }
    { 165 ;   ;Bill-to Name        ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=[ENU=Bill-to Name;
                                                              NOR=Faktura til-navn;
                                                              SVE=Faktureringsnamn];
                                                   Editable=No }
    { 170 ;   ;Unit Price Status   ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order"."Unit Price Status" WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Unit Price Status;
                                                              NOR=Enhetspris, status;
                                                              SVE=Enhetsprisstatus];
                                                   OptionCaptionML=[ENU=" ,Pre-Recording,Recording,Production Recording,,,,,Finished";
                                                                    NOR=" ,Forh†ndsregistrering,Registrering,Realisering,,,,,Finished";
                                                                    SVE=" ,F”rregistrering,Registrering,Realisering,,,,,Avslutad"];
                                                   OptionString=[ ,Pre-Recording,Recording,Production Recording,,,,,Finished];
                                                   Editable=No }
    { 180 ;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar] }
    { 190 ;   ;Part                ;Code20        ;TableRelation="SUP Part".Code;
                                                   OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                                CustomerNo@1100528601 : Code[20];
                                                              BEGIN
                                                                CustomerNo := ServiceUnitPriceManagement.DetermineCustomerNo("Price Book Type", "Price Book Code");
                                                                ServiceUnitPriceManagement.ValidatePart(CustomerNo, Part);
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPriceManagement@1100528601 : Codeunit 11012846;
                                                              CustomerNo@1100528600 : Code[20];
                                                            BEGIN
                                                              CustomerNo := ServiceUnitPriceManagement.DetermineCustomerNo("Price Book Type", "Price Book Code");
                                                              IF ServiceUnitPriceManagement.LookupPart(CustomerNo, Room, Part) THEN
                                                                VALIDATE(Part);
                                                            END;

                                                   CaptionML=[ENU=Part;
                                                              NOR=Del;
                                                              SVE=Del] }
    { 200 ;   ;Quantity Recording  ;Decimal       ;OnValidate=BEGIN
                                                                CalculateRecording;
                                                              END;

                                                   CaptionML=[ENU=Quantity Recording;
                                                              NOR=Kvantum Registrering;
                                                              SVE=Antal registrering];
                                                   DecimalPlaces=0:2 }
    { 210 ;   ;Length Recording    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateRecording;
                                                              END;

                                                   CaptionML=[ENU=Length Recording;
                                                              NOR=Lengde Registrering;
                                                              SVE=L„ngd registrering];
                                                   DecimalPlaces=0:2 }
    { 220 ;   ;Width Recording     ;Decimal       ;OnValidate=BEGIN
                                                                CalculateRecording;
                                                              END;

                                                   CaptionML=[ENU=Width Recording;
                                                              NOR=Bredde Registrering;
                                                              SVE=Breddregistrering];
                                                   DecimalPlaces=0:2 }
    { 230 ;   ;Height Recording    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateRecording;
                                                              END;

                                                   CaptionML=[ENU=Height Recording;
                                                              NOR=H›yde Registrering;
                                                              SVE=H”jdregistrering];
                                                   DecimalPlaces=0:2 }
    { 240 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   OnValidate=BEGIN
                                                                IF Discipline <> xRec.Discipline THEN
                                                                  VALIDATE("Trade Speciality", '');
                                                              END;

                                                   CaptionML=[ENU=Discipline;
                                                              NOR=Disiplin;
                                                              SVE=Disciplin] }
    { 250 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=[ENU=Trade Speciality;
                                                              NOR=SNI-nummer;
                                                              SVE=SNI-nummer] }
    { 260 ;   ;Work Order No.      ;Code20        ;OnValidate=VAR
                                                                ServiceOrder@1100527000 : Record 11012823;
                                                                WorkOrder@1100528600 : Record 11229279;
                                                                OldSUPRecordingLine@1100528601 : Record 11071772;
                                                                OldWorkOrderNo@1100528602 : Code[20];
                                                              BEGIN
                                                                CheckIfRelationToWorkOrderIsAllowed;

                                                                IF "Work Order No." <> '' THEN BEGIN
                                                                  ServiceOrder.GET("Service Order No.");
                                                                  ServiceOrder.TESTFIELD("Recording Work Order No.", '');
                                                                  ServiceOrder.TESTFIELD("Recording Unit Prices by", '');

                                                                  WorkOrder.SETCURRENTKEY("Source Company");
                                                                  WorkOrder.SETRANGE("Source Company", COMPANYNAME);
                                                                  WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
                                                                  WorkOrder.SETRANGE("Source No.", "Service Order No.");
                                                                  WorkOrder.SETRANGE("No.", "Work Order No.");
                                                                  WorkOrder.FINDFIRST;
                                                                END;
                                                                IF NOT OldSUPRecordingLine.GET("Service Order No.", "Line No.") THEN
                                                                  OldSUPRecordingLine.INIT;
                                                                UpdateAdviceOrder(OldSUPRecordingLine."Work Order No.");
                                                                OldWorkOrderNo := xRec."Work Order No.";
                                                                IF MODIFY(TRUE) THEN BEGIN
                                                                  IF "Work Order No." <> '' THEN BEGIN
                                                                    WorkOrder.UpdateWorkOrderDurationTime;
                                                                    WorkOrder.MODIFY(TRUE);
                                                                  END;
                                                                  IF (OldWorkOrderNo <> '') AND (OldWorkOrderNo <> "Work Order No.") THEN BEGIN
                                                                    WorkOrder.GET(OldWorkOrderNo);
                                                                    WorkOrder.UpdateWorkOrderDurationTime;
                                                                    WorkOrder.MODIFY(TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              WorkOrder@1100528600 : Record 11229279;
                                                              WorkOrdersPAGE@1100525000 : Page 11229284;
                                                            BEGIN
                                                              WorkOrder.SETCURRENTKEY("Source Company");
                                                              WorkOrder.SETRANGE("Source Company", COMPANYNAME);
                                                              WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
                                                              WorkOrder.SETRANGE("Source No.", "Service Order No.");
                                                              IF "Work Order No." <> '' THEN
                                                                IF WorkOrder.GET("Work Order No.") THEN;
                                                              WorkOrdersPAGE.SetSelections(WorkOrder."Source Type"::ServiceOrder, "Service Order No.", '');
                                                              WorkOrdersPAGE.SETTABLEVIEW(WorkOrder);
                                                              WorkOrdersPAGE.LOOKUPMODE(TRUE);
                                                              IF WorkOrdersPAGE.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                WorkOrdersPAGE.GETRECORD(WorkOrder);
                                                                VALIDATE("Work Order No.", WorkOrder."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Work Order No.;
                                                              SVE=Serviceordernr] }
    { 270 ;   ;Purchase Price Subcontracting;Decimal;
                                                   CaptionML=ENU=Purchase Price Subcontracting;
                                                   DecimalPlaces=2:5 }
    { 280 ;   ;Production Recording Exists;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Exist("SUP Production Line" WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                  Recording Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Production Recording Exists;
                                                   Editable=No }
    { 285 ;   ;Decentral Guid      ;Text36        ;CaptionML=ENU=Decentral Guid }
    { 290 ;   ;Surcharge Set Code  ;Code10        ;TableRelation="Price Book Surcharge Set".Code WHERE (Price Book Code=FIELD(Price Book Code),
                                                                                                        Price Book Index Date=FIELD(Index Date));
                                                   OnValidate=BEGIN
                                                                IF "Surcharge Set Code" <> xRec."Surcharge Set Code" THEN
                                                                  IF GUIALLOWED THEN //mg: Needed for VMA
                                                                    TESTFIELD("Unit Price Code", '');
                                                              END;

                                                   CaptionML=ENU=Surcharge Set Code }
    { 300 ;   ;Unit Price Type     ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Unit Price"."Unit Price Type" WHERE (Price Book Type=FIELD(Price Book Type),
                                                                                                                    Price Book Code=FIELD(Price Book Code),
                                                                                                                    Index Date=FIELD(Index Date),
                                                                                                                    Code=FIELD(Unit Price Code)));
                                                   CaptionML=[ENU=Unit Price Type;
                                                              SVE=Enhetspristyp];
                                                   OptionCaptionML=ENU=" ,Header,Administrative,Summary Element";
                                                   OptionString=[ ,Header,Administrative,Summary Element];
                                                   Editable=No }
    { 310 ;   ;Price Book Quantity ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Unit Price".Quantity WHERE (Price Book Code=FIELD(Price Book Code),
                                                                                                           Index Date=FIELD(Index Date),
                                                                                                           Code=FIELD(Unit Price Code)));
                                                   CaptionML=ENU=Price Book Quantity;
                                                   Editable=No }
    { 320 ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "VAT Prod. Posting Group" <> '' THEN
                                                                  TESTFIELD("Unit Price Code", '');
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              NOR=Moms produktbokf›ringsmal;
                                                              SVE=Moms produktbokf”ringsmall] }
    { 330 ;   ;Base Service Order No.;Code20      ;TableRelation="Service Order".No.;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Base Service Order No.;
                                                              SVE=Basserviceordernr];
                                                   Editable=No }
    { 340 ;   ;Sub-part of         ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Sub-part of }
  }
  KEYS
  {
    {    ;Service Order No.,Line No.              ;SumIndexFields=Recording Quantity;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Work Order No.                           }
    {    ;Base Service Order No.                  ;SumIndexFields=Recording Amount }
    {    ;Alternative Unit Price Code              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=NOTE: %1 %2 ''%3'' differs from %4 %5.;NOR=OBS: %1 %2 ''%3'' avviker fra %4 %5.;SVE=OBS! %1 %2 ''%3'' skiljer sig fr†n %4 %5.';
      Text001@1100528601 : TextConst 'ENU=Rename is not allowed.;NOR=Gi nytt navn ikke tillatt;SVE=Att ge nytt namn „r inte till†tet.';
      Text003@1100528602 : TextConst 'ENU=There exist %1s, modify or delete not possible';
      Text005@1100529501 : TextConst 'ENU=No related unit prices found in price book.';
      Text006@1100529502 : TextConst 'ENU=Connecting an item to a work order while there are sub-parts listed. Do you want to continue?';
      Text008@1100529504 : TextConst 'ENU="Select a main item to remove its sub-parts from the list. "';
      Text007@1100528200 : TextConst 'ENU=%1 %2 already used, show overview of used codes?';
      Text009@1100528201 : TextConst 'ENU=%1@@@@@@@@@@@@@@';
      Text010@1100528202 : TextConst 'ENU=%1  %2 already used in table %3.';
      Text0011@1100529505 : TextConst 'ENU=Delete an item before adding a new item.';

    PROCEDURE CalculateAmountFields@1100528600();
    BEGIN
      "Pre-Recording Amount" := ROUND("Pre-Recording Quantity" * "Unit Price", 0.00001);
      "Recording Amount" := ROUND("Recording Quantity" * "Unit Price", 0.00001);
    END;

    PROCEDURE CalculateRealizationAmount@1210190000();
    BEGIN
      CALCFIELDS("Production Recording Quantity");
      "Production Recording Amount" := ROUND("Production Recording Quantity" * "Unit Price", 0.00001);
    END;

    PROCEDURE LookupUnitPriceLineCode@1100528700(CopyAllowed@1100528702 : Boolean;VAR OCopyUsed@1100528601 : Boolean);
    VAR
      ServiceUnitPriceLine@1100528701 : Record 11071769;
      SUPRoomRelationLine@1100528600 : Record 11071983;
      ServiceUnitPriceSetLine@1100528602 : Record 11072285;
      ServiceUnitPriceLineList@1100528700 : Page 11125271;
    BEGIN
      ServiceUnitPriceLine.SETRANGE("Price Book Type", "Price Book Type");
      ServiceUnitPriceLine.SETRANGE("Price Book Code", "Price Book Code");
      ServiceUnitPriceLine.SETRANGE("Index Date", "Index Date");
      ServiceUnitPriceLine.SETRANGE("Sub-part of", '');
      ServiceUnitPriceLine.SETFILTER(Part, '%1', '');
      IF (Part <> '') THEN
        ServiceUnitPriceLine.SETFILTER(Part, '%1|%2', '', Part);
      IF (Room <> '') AND ("Price Book Type" = "Price Book Type"::Customer) THEN BEGIN
        SUPRoomRelationLine.SETRANGE("Customer No.", "Price Book Code");
        SUPRoomRelationLine.SETRANGE("Room Code", Room);
        SUPRoomRelationLine.SETRANGE("Index Date", "Index Date");
        IF SUPRoomRelationLine.FINDSET THEN BEGIN
          REPEAT
            IF SUPRoomRelationLine."Unit Price Code" <> '' THEN
              IF ServiceUnitPriceLine.GET(
                SUPRoomRelationLine."Price Book Code", SUPRoomRelationLine."Index Date", SUPRoomRelationLine."Unit Price Code")
              THEN
                ServiceUnitPriceLine.MARK(TRUE);
            IF SUPRoomRelationLine."Unit Price Set Code" <> '' THEN BEGIN
              ServiceUnitPriceSetLine.SETRANGE("Price Book Code", "Price Book Code");
              ServiceUnitPriceSetLine.SETRANGE("Price Book Index Date", "Index Date");
              ServiceUnitPriceSetLine.SETRANGE("Set Code", SUPRoomRelationLine."Unit Price Set Code");
              IF ServiceUnitPriceSetLine.FINDSET THEN
                REPEAT
                  IF ServiceUnitPriceLine.GET("Price Book Code", "Index Date", ServiceUnitPriceSetLine."Unit Price Code") THEN
                    ServiceUnitPriceLine.MARK(TRUE);
                UNTIL ServiceUnitPriceSetLine.NEXT = 0;
            END;
          UNTIL SUPRoomRelationLine.NEXT = 0;
          ServiceUnitPriceLine.MARKEDONLY(TRUE);
        END;
      END;
      ServiceUnitPriceLineList.LOOKUPMODE(TRUE);
      ServiceUnitPriceLineList.SETTABLEVIEW(ServiceUnitPriceLine);
      ServiceUnitPriceLine.SETRANGE(Code, "Unit Price Code");
      IF ServiceUnitPriceLine.FINDFIRST THEN
        ServiceUnitPriceLineList.SETRECORD(ServiceUnitPriceLine);
      ServiceUnitPriceLine.SETRANGE(Code);
      IF CopyAllowed THEN
        ServiceUnitPriceLineList.SetCopyFilter("Service Order No.", "Price Book Type",
          "Price Book Code", "Index Date", "Unit Price Code", Part, Room, 0, DATABASE::"SUP Recording Line");
      IF ServiceUnitPriceLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServiceUnitPriceLineList.GETRECORD(ServiceUnitPriceLine);
        VALIDATE("Unit Price Code", ServiceUnitPriceLine.Code);
      END;
      OCopyUsed := ServiceUnitPriceLineList.GetCopyUsed;
    END;

    PROCEDURE CalculateRecording@1100528701();
    BEGIN
      IF "Quantity Recording" <> 0 THEN BEGIN
        "Recording Quantity" := "Quantity Recording";
        IF "Length Recording" <> 0 THEN
          "Recording Quantity" := "Recording Quantity" * "Length Recording";
        IF "Width Recording" <> 0 THEN
          "Recording Quantity" := "Recording Quantity" * "Width Recording";
        IF "Height Recording" <> 0 THEN
          "Recording Quantity" := "Recording Quantity" * "Height Recording";
        VALIDATE("Recording Quantity");
      END;
    END;

    PROCEDURE InitRecord@1100528601();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderExtension@1100528601 : Record 11071727;
    BEGIN
      IF "Service Order No." = '' THEN
        EXIT;
      IF NOT ServiceOrder.GET("Service Order No.") THEN
        EXIT;
      ServiceOrderExtension.GetServOrderExtension("Service Order No.");
      "Price Book Type" := ServiceOrder."Price Book Type";
      "Base Service Order No." := ServiceOrder."Base Service Order No.";
      "Price Book Code" := ServiceOrderExtension."Price Book Code";
      "Index Date" := ServiceOrderExtension."Price Book Index Date";
    END;

    PROCEDURE ShowDocuments@1100528602();
    VAR
      DocumentFilters@1100528601 : Codeunit 11012432;
      RecRef@1100528600 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, '', FALSE, FALSE);
    END;

    PROCEDURE CommentExist@1100528800() : Boolean;
    VAR
      SUPRecLineCommentLine@1100528800 : Record 11072290;
    BEGIN
      SUPRecLineCommentLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPRecLineCommentLine.SETRANGE("SUP Recording Line No.", "Line No.");
      IF SUPRecLineCommentLine.FINDFIRST THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetNoOfDocuments@1100528605() : Integer;
    VAR
      DocumentLinkManagement@1100528602 : Codeunit 11012401;
      RecRef@1100528600 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkManagement.EntityNumberOfDocumentLinks(RecRef));
    END;

    PROCEDURE LinkToWorkOrder@1100528603() : Boolean;
    VAR
      ServiceSetup@1100528600 : Record 11012800;
      WorkOrder@1100528601 : Record 11229279;
      TmpWorkOrderToUse@1100528602 : TEMPORARY Record 11229279;
      ServiceOrder@1100528604 : Record 11012823;
      SeekDate@1100528605 : Date;
    BEGIN
      IF Discipline = '' THEN
        EXIT;
      IF "Work Order No." <> '' THEN
        EXIT;
      ServiceSetup.GET;
      IF ServiceSetup."Link SUP to Work Order" = ServiceSetup."Link SUP to Work Order"::None THEN
        EXIT;
      ServiceOrder.GET("Service Order No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "Service Order No.");
      CASE ServiceSetup."Link SUP to Work Order" OF
        ServiceSetup."Link SUP to Work Order"::Subcontractor:
          WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
        ServiceSetup."Link SUP to Work Order"::Employee:
          WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
        ServiceSetup."Link SUP to Work Order"::Both:
          WorkOrder.SETFILTER("Resource Type", '%1|%2', WorkOrder."Resource Type"::Employee, WorkOrder."Resource Type"::Subcontractor);
      END;
      WorkOrder.SETFILTER("Resource No.", '<>%1', '');
      IF WorkOrder.FINDSET THEN
        REPEAT
          IF WorkOrder.IsModificationAllowed THEN BEGIN
            SeekDate := ServiceOrder."Starting Date";
            IF SeekDate = 0D THEN
              SeekDate := TODAY;
            IF ResourceCanDoSUPLine(WorkOrder."Resource No.", SeekDate, SeekDate, 1) THEN BEGIN
              TmpWorkOrderToUse := WorkOrder;
              TmpWorkOrderToUse.INSERT;
            END;
          END;
        UNTIL WorkOrder.NEXT = 0;

      IF TmpWorkOrderToUse.COUNT = 1 THEN BEGIN
        VALIDATE("Work Order No.", TmpWorkOrderToUse."No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ResourceCanDoSUPLine@1100528610(IResourceNo@1100528603 : Code[20];IPlanDateFrom@1100528602 : Date;IPlanDateUntil@1100528601 : Date;IPlanSeqNo@1100528600 : Integer) : Boolean;
    VAR
      ServiceOrder@1100528612 : Record 11012823;
      ResourceWOP@1100528606 : Record 11229278;
      ResourcePlanData@1100528607 : Record 11229287;
      ResourceDiscipline@1100528608 : Record 11229286;
      Period@1100528609 : Record 2000000007;
      PeriodStart@1100528610 : Date;
      PeriodEnd@1100528611 : Date;
    BEGIN
      ServiceOrder.GET("Service Order No.");
      IF NOT ResourceWOP.GET(IResourceNo) THEN
        EXIT(FALSE);
      ResourcePlanData.SETCURRENTKEY("Resource No.", "Plan Seq. No.");
      ResourcePlanData.SETRANGE("Resource No.", IResourceNo);
      IF ResourcePlanData.ISEMPTY THEN BEGIN
        ResourceDiscipline.SETRANGE("Resource No.", IResourceNo);
        IF ResourceDiscipline.ISEMPTY THEN
          EXIT(Discipline = '');
        IF Discipline = '' THEN
          EXIT(TRUE);
        ResourceDiscipline.SETRANGE(Discipline, Discipline);
        IF NOT ResourceDiscipline.ISEMPTY THEN
          EXIT(TRUE);
      END;
      ResourcePlanData.SETFILTER("Plan Seq. No.", '<=%1', IPlanSeqNo);
      ResourcePlanData.SETFILTER("Source Type", '%1|%2', ResourcePlanData."Source Type"::" ", ServiceOrder."Source Type" +1);
      ResourcePlanData.SETFILTER("Order Kind", '%1|%2', '', ServiceOrder."Order Kind");
      ResourcePlanData.SETFILTER("Order Type", '%1|%2', '', ServiceOrder."Order Type");
      IF Discipline <> '' THEN
        ResourcePlanData.SETFILTER(Discipline, '%1|%2', '', Discipline);
      IF "Trade Speciality" <> '' THEN
        ResourcePlanData.SETFILTER("Trade Speciality", '%1|%2', '', "Trade Speciality");
      ResourcePlanData.SETFILTER("Territory Code", '%1|%2', '', ServiceOrder."Territory Code");
      Period.SETRANGE("Period Type", Period."Period Type"::Month);
      Period.SETFILTER("Period Start", '..%1', IPlanDateFrom);
      IF Period.FINDLAST THEN
        PeriodStart := Period."Period Start";
      Period.SETFILTER("Period Start", '..%1', IPlanDateUntil);
      IF Period.FINDLAST THEN
        PeriodEnd := Period."Period Start";
      Period.SETRANGE("Period Start", PeriodStart, PeriodEnd);
      IF ResourcePlanData.FINDSET THEN
        REPEAT
          IF Period.FINDSET THEN
            REPEAT
              CASE Period."Period No." OF
                1:
                  IF ResourcePlanData.January THEN
                    EXIT(TRUE);
                2:
                  IF ResourcePlanData.February THEN
                    EXIT(TRUE);
                3:
                  IF ResourcePlanData.March THEN
                    EXIT(TRUE);
                4:
                  IF ResourcePlanData.April THEN
                    EXIT(TRUE);
                5:
                  IF ResourcePlanData.May THEN
                    EXIT(TRUE);
                6:
                  IF ResourcePlanData.June THEN
                    EXIT(TRUE);
                7:
                  IF ResourcePlanData.July THEN
                    EXIT(TRUE);
                8:
                  IF ResourcePlanData.August THEN
                    EXIT(TRUE);
                9:
                  IF ResourcePlanData.September THEN
                    EXIT(TRUE);
                10:
                  IF ResourcePlanData.October THEN
                    EXIT(TRUE);
                11:
                  IF ResourcePlanData.November THEN
                    EXIT(TRUE);
                12:
                  IF ResourcePlanData.December THEN
                    EXIT(TRUE);
              END;
            UNTIL Period.NEXT = 0;
        UNTIL ResourcePlanData.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateAdviceOrder@1100528604(OldWorkOrderNo@1100528604 : Code[20]);
    VAR
      ServiceSetup@1100528600 : Record 11012800;
      AdviceOrderLine@1100528605 : Record 11012055;
      SubcontractorNo@1100528603 : Code[20];
      OldSubcontractorNo@1100528607 : Code[20];
    BEGIN
      ServiceSetup.GET;
      IF NOT ServiceSetup."Advice Orders by Unit Price" THEN
        EXIT;
      ServiceSetup.TESTFIELD("Cost Object Subcontracting");
      SubcontractorNo := GetSubcontractorNoByWorkOrder("Work Order No.");
      OldSubcontractorNo := GetSubcontractorNoByWorkOrder(OldWorkOrderNo);

      IF OldSubcontractorNo <> '' THEN BEGIN
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        AdviceOrderLine.SETRANGE("Service Order No.", "Service Order No.");
        AdviceOrderLine.SETRANGE("Work Order No.", OldWorkOrderNo);
        AdviceOrderLine.SETRANGE(Vendor, OldSubcontractorNo);
        AdviceOrderLine.SETRANGE("Cost Type", AdviceOrderLine."Cost Type"::Subcontracting);
        AdviceOrderLine.SETRANGE("Cost Object", ServiceSetup."Cost Object Subcontracting");
        AdviceOrderLine.SETRANGE(Description, Description);
        IF OldSubcontractorNo <> SubcontractorNo THEN
          AdviceOrderLine.DELETEALL(TRUE)
        ELSE
          AdviceOrderLine.MODIFYALL("Work Order No.", "Work Order No.");
      END;
      IF (SubcontractorNo <> '') AND (OldSubcontractorNo <> SubcontractorNo) THEN BEGIN
        AdviceOrderLine.RESET;
        AdviceOrderLine.INIT;
        AdviceOrderLine.VALIDATE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        AdviceOrderLine.VALIDATE("Service Order No.", "Service Order No.");
        AdviceOrderLine.VALIDATE("Line No.", 0);
        AdviceOrderLine.INSERT(TRUE);

        AdviceOrderLine.VALIDATE(Vendor, SubcontractorNo);
        AdviceOrderLine.VALIDATE("Cost Type", AdviceOrderLine."Cost Type"::Subcontracting);
        AdviceOrderLine.VALIDATE("Cost Object", ServiceSetup."Cost Object Subcontracting");
        AdviceOrderLine.VALIDATE("Quantity (Advice)", "Recording Quantity");
        AdviceOrderLine.VALIDATE(Description, Description);
        AdviceOrderLine.VALIDATE("Unit of Measure", "Unit of Measure");
        AdviceOrderLine.VALIDATE("Price (LCY)", "Purchase Price Subcontracting");
        AdviceOrderLine.VALIDATE("Work Order No.", "Work Order No.");
        AdviceOrderLine."SUP Recording Line No." := "Line No.";
        AdviceOrderLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetSubcontractorNoByWorkOrder@1100528616(IWorkOrderNo@1100528602 : Code[20]) : Code[20];
    VAR
      WorkOrder@1100528600 : Record 11229279;
      ResourceWOP@1100528601 : Record 11229278;
    BEGIN
      IF NOT WorkOrder.GET(IWorkOrderNo) THEN
        WorkOrder.INIT;
      WorkOrder.CALCFIELDS("Resource Company");
      IF (WorkOrder."Resource Company" = COMPANYNAME) AND (WorkOrder."Resource Type" = WorkOrder."Resource Type"::Subcontractor) THEN
        IF ResourceWOP.GET(WorkOrder."Resource No.") THEN
          EXIT(ResourceWOP."Source No.");
    END;

    LOCAL PROCEDURE TestIfNoProductionLinesExists@1100528608();
    VAR
      SUPProductionLine@1100528600 : Record 11071774;
    BEGIN
      CALCFIELDS("Production Recording Exists");
      IF "Production Recording Exists" THEN
        ERROR(Text003, SUPProductionLine.TABLECAPTION);
    END;

    PROCEDURE InsertCommentLines@1100528000(CommentBuffer@1100528000 : Text);
    VAR
      TempCommentLineBuffer@1100528001 : TEMPORARY Record 11072290;
    BEGIN
      SplitCommentText(CommentBuffer, TempCommentLineBuffer);
      WriteBuffer(TempCommentLineBuffer);
    END;

    LOCAL PROCEDURE SplitCommentText@1100528001(CommentBuffer@1100528000 : Text;VAR TempCommentLineBuffer@1100528002 : TEMPORARY Record 11072290);
    VAR
      Pos@1100528003 : Integer;
      MaxLen@1100528004 : Integer;
      Len@1100528006 : Integer;
      FoundCRLF@1100528005 : Boolean;
      FoundLF@1100528001 : Boolean;
    BEGIN
      MaxLen := MAXSTRLEN(TempCommentLineBuffer.Comment);

      WHILE (STRLEN(CommentBuffer) > 0) DO BEGIN
        FoundLF := FALSE;
        FoundCRLF := FALSE;

        Pos := STRPOS(CommentBuffer, CRLF);
        FoundCRLF := Pos > 0;
        IF NOT FoundCRLF THEN BEGIN
          Pos := STRPOS(CommentBuffer, LF);
          FoundLF := Pos > 0;
        END;

        IF FoundCRLF OR FoundLF THEN
          Len := Pos - 1
        ELSE
          Len := STRLEN(CommentBuffer);

        IF Len > MaxLen THEN
          Len := MaxLen;

        AddToBuffer(COPYSTR(CommentBuffer, 1, Len), TempCommentLineBuffer);
        IF FoundCRLF THEN
          Len := Len + 2
        ELSE
          IF FoundLF THEN
            Len := Len + 1;

        IF (STRLEN(CommentBuffer) > Len) THEN
          CommentBuffer := COPYSTR(CommentBuffer, Len + 1)
        ELSE
          CommentBuffer := '';

      END;
    END;

    PROCEDURE GetCommentText@1100528003() CommentText : Text;
    VAR
      SUPRecLineCommentLine@1100528001 : Record 11072290;
    BEGIN
      SUPRecLineCommentLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPRecLineCommentLine.SETRANGE("SUP Recording Line No.", "Line No.");
      IF NOT SUPRecLineCommentLine.FINDSET THEN
        EXIT('');

      CommentText := CommentText + SUPRecLineCommentLine.Comment;
      WHILE SUPRecLineCommentLine.NEXT <> 0 DO
        CommentText := CommentText + CRLF + SUPRecLineCommentLine.Comment;

      EXIT(CommentText);
    END;

    LOCAL PROCEDURE AddToBuffer@1100528004(LineToAdd@1100528001 : Text;VAR TempCommentLineBuffer@1100528000 : TEMPORARY Record 11072290);
    BEGIN
      IF NOT TempCommentLineBuffer.FINDLAST THEN BEGIN
        TempCommentLineBuffer."Service Order No." := "Service Order No.";
        TempCommentLineBuffer."SUP Recording Line No." := "Line No.";
        TempCommentLineBuffer.Date := TODAY;
        TempCommentLineBuffer."Line No."  := 0;
      END;

      TempCommentLineBuffer."Line No." := TempCommentLineBuffer."Line No." + 10000;
      TempCommentLineBuffer.Comment := LineToAdd;
      TempCommentLineBuffer.INSERT;
    END;

    LOCAL PROCEDURE WriteBuffer@1100528005(VAR TempCommentLineBuffer@1100528000 : TEMPORARY Record 11072290);
    VAR
      CommentLine@1100528001 : Record 11072290;
    BEGIN
      CommentLine.SETRANGE("Service Order No.", "Service Order No.");
      CommentLine.SETRANGE("SUP Recording Line No.", "Line No.");
      CommentLine.DELETEALL;

      IF NOT TempCommentLineBuffer.FINDSET THEN
        EXIT;

      REPEAT
        CommentLine.COPY(TempCommentLineBuffer);
        CommentLine.INSERT;
      UNTIL TempCommentLineBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE CRLF@1100528002() ReturnValue : Text[2];
    BEGIN
      ReturnValue[1] := 13;
      ReturnValue[2] := 10;
    END;

    LOCAL PROCEDURE LF@1100528007() ReturnValue : Text[1];
    BEGIN
      ReturnValue[1] := 10;
    END;

    PROCEDURE GetApprovedProductionQuantity@1100528606() : Decimal;
    VAR
      SUPProductionLine@1100528600 : Record 11071774;
    BEGIN
      SUPProductionLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPProductionLine.SETRANGE("Recording Line No.", "Line No.");
      SUPProductionLine.SETRANGE("SUP Production Status", SUPProductionLine."SUP Production Status"::Approved);
      SUPProductionLine.CALCSUMS(Production);
      EXIT(SUPProductionLine.Production);
    END;

    LOCAL PROCEDURE TestIfLineIsNonHeader@1100528609();
    BEGIN
      CALCFIELDS("Unit Price Type");
      IF "Unit Price Type" = "Unit Price Type"::Header THEN
        FIELDERROR("Unit Price Type");
    END;

    PROCEDURE GetQuantity@1100528607() : Decimal;
    BEGIN
      IF "Recording Quantity" = 0 THEN
        EXIT("Pre-Recording Quantity")
      ELSE
        EXIT("Recording Quantity");
    END;

    PROCEDURE GetLastLineNo@1100528500(ServiceOrderNo@1100528501 : Code[20]) LineNo : Integer;
    VAR
      SUPRecordingLine@1100528500 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETFILTER("Service Order No.", ServiceOrderNo);

      IF SUPRecordingLine.FINDLAST THEN
        LineNo := SUPRecordingLine."Line No.";
    END;

    PROCEDURE PopulateElements@1100528501(VAR SUPRecordingLine@1100528500 : Record 11071772);
    VAR
      ServiceUnitPrice@1100528501 : Record 11071769;
      SUPRecordingLineNew@1100529500 : Record 11071772;
      i@1100529501 : Integer;
    BEGIN
      IF SUPRecordingLine.FINDFIRST THEN BEGIN
        ServiceUnitPrice.SETFILTER("Sub-part of", SUPRecordingLine."Unit Price Code");
        i := 0;
        IF ServiceUnitPrice.FINDSET THEN
          REPEAT
            i += 1;
            SUPRecordingLineNew.INIT;
            SUPRecordingLineNew.VALIDATE("Service Order No.", "Service Order No.");
            SUPRecordingLineNew.VALIDATE("Line No.", SUPRecordingLine."Line No." + 1 * i);
            SUPRecordingLineNew.Description := ServiceUnitPrice.Description;
            SUPRecordingLineNew.VALIDATE("Sub-part of", ServiceUnitPrice."Sub-part of");
            SUPRecordingLineNew."Unit Price Code" := ServiceUnitPrice.Code;
            SUPRecordingLineNew.VALIDATE("Pre-Recording Quantity", "Pre-Recording Quantity");
            SUPRecordingLineNew.VALIDATE("Quantity Recording", "Quantity Recording");
            SUPRecordingLineNew.VALIDATE("Alternative Unit Price Code", ServiceUnitPrice.Code);
            SUPRecordingLineNew."Unit Price" := ServiceUnitPrice."Unit Price";
            SUPRecordingLineNew."Unit of Measure" := ServiceUnitPrice."Unit of Measure";
            SUPRecordingLineNew.Discipline := ServiceUnitPrice.Discipline;
            SUPRecordingLineNew."Trade Speciality" := ServiceUnitPrice."Trade Speciality";
            SUPRecordingLineNew."Surcharge Set Code" := ServiceUnitPrice."Surcharge Set Code";
            SUPRecordingLineNew."Unit Price Type" := ServiceUnitPrice."Unit Price Type";

            SUPRecordingLineNew.INSERT;
          UNTIL ServiceUnitPrice.NEXT = 0
      ELSE
        MESSAGE(Text005);
      END;
    END;

    PROCEDURE RemoveElements@1100528502(VAR SUPRecordingLine@1100528500 : Record 11071772);
    BEGIN
      IF SUPRecordingLine.FINDFIRST THEN
        IF SUPRecordingLine."Sub-part of" <> '' THEN BEGIN
          MESSAGE(Text008);
          EXIT
        END;

        IF SUPRecordingLine."Sub-part of" = '' THEN BEGIN
          SUPRecordingLine.RESET;
          SUPRecordingLine.SETRANGE("Sub-part of", SUPRecordingLine."Unit Price Code");
          SUPRecordingLine.SETFILTER("Line No.", '%1..%2', "Line No.", "Line No."+9999);
          SUPRecordingLine.ClearSUPRecordingLineNoFromAdviceOrderLine(FALSE);
          SUPRecordingLine.DELETEALL;
        END;
    END;

    PROCEDURE PopulateAllElements@1100529520();
    VAR
      ServiceUnitPrice@1100528501 : Record 11071769;
      SUPRecordingLine@1100529502 : Record 11071772;
      SUPRecordingLineNew@1100529500 : Record 11071772;
      i@1100529503 : Integer;
    BEGIN
      RemoveAllElements;
      SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPRecordingLine.SETRANGE("Sub-part of", '');

      IF SUPRecordingLine.FINDSET THEN
        REPEAT
          ServiceUnitPrice.SETFILTER("Sub-part of", SUPRecordingLine."Unit Price Code");
          i := 0;

          IF ServiceUnitPrice.FINDSET THEN
            REPEAT
              i += 1;
              SUPRecordingLineNew.INIT;
              SUPRecordingLineNew.VALIDATE("Service Order No.", "Service Order No.");
              SUPRecordingLineNew.VALIDATE("Line No.", SUPRecordingLine."Line No." + 1 * i);
              SUPRecordingLineNew.Description := ServiceUnitPrice.Description;
              SUPRecordingLineNew.VALIDATE("Sub-part of", ServiceUnitPrice."Sub-part of");
              SUPRecordingLineNew."Unit Price Code" := ServiceUnitPrice.Code;
              SUPRecordingLineNew."Pre-Recording Quantity" := SUPRecordingLine."Pre-Recording Quantity";
              SUPRecordingLineNew."Quantity Recording" := SUPRecordingLine."Quantity Recording";
              SUPRecordingLineNew.VALIDATE("Alternative Unit Price Code", ServiceUnitPrice.Code);
              SUPRecordingLineNew."Unit Price" := ServiceUnitPrice."Unit Price";
              SUPRecordingLineNew."Unit of Measure" := ServiceUnitPrice."Unit of Measure";
              SUPRecordingLineNew.Discipline := ServiceUnitPrice.Discipline;
              SUPRecordingLineNew."Trade Speciality" := ServiceUnitPrice."Trade Speciality";
              SUPRecordingLineNew."Surcharge Set Code" := ServiceUnitPrice."Surcharge Set Code";
              SUPRecordingLineNew."Unit Price Type" := ServiceUnitPrice."Unit Price Type";
              SUPRecordingLineNew.INSERT;
            UNTIL ServiceUnitPrice.NEXT = 0;
        UNTIL SUPRecordingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckIfRelationToWorkOrderIsAllowed@1100529501();
    VAR
      SUPRecordingLine@1100529500 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPRecordingLine.SETFILTER("Sub-part of", '<>%1', '');
      SUPRecordingLine.SETFILTER("Line No.", '%1..%2', "Line No.", "Line No."+9999);

      IF "Sub-part of" = '' THEN
        IF SUPRecordingLine.FINDSET THEN
          IF NOT DIALOG.CONFIRM(Text006) THEN
            EXIT;
    END;

    PROCEDURE RemoveAllElements@1100529524();
    VAR
      SUPRecordingLine@1100529500 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPRecordingLine.SETFILTER("Sub-part of", '<>%1', '');

      IF SUPRecordingLine.FINDSET THEN
        REPEAT
          SUPRecordingLine.ClearSUPRecordingLineNoFromAdviceOrderLine(TRUE);
          SUPRecordingLine.DELETE;
        UNTIL SUPRecordingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyQuantitiesToSubParts@1100529540();
    VAR
      SUPRecordingLine@1100529500 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
      SUPRecordingLine.SETFILTER("Line No.", '%1..%2', "Line No.", "Line No." + 9999);
      SUPRecordingLine.SETRANGE("Sub-part of", "Unit Price Code");

      IF ("Pre-Recording Quantity" <> xRec."Pre-Recording Quantity") AND (xRec."Pre-Recording Quantity" = 0) THEN
        SUPRecordingLine.MODIFYALL("Pre-Recording Quantity", "Pre-Recording Quantity");

      IF ("Recording Quantity" <> xRec."Recording Quantity") AND (xRec."Recording Quantity" = 0) THEN
        SUPRecordingLine.MODIFYALL("Recording Quantity", "Recording Quantity");
    END;

    LOCAL PROCEDURE PopulateElementsAfterValidate@1100529503();
    VAR
      LastLineNo@1100529500 : Integer;
      ServiceUnitPrice@1100529501 : Record 11071769;
      SUPRecordingLineNew@1100529502 : Record 11071772;
      SUPRecordingLine@1100529503 : Record 11071772;
      i@1100529504 : Integer;
    BEGIN
      LastLineNo := (GetLastLineNo("Service Order No.") + (10000 - (GetLastLineNo("Service Order No.") MOD 10000)));

      ServiceUnitPrice.SETRANGE("Price Book Code", "Price Book Code");
      ServiceUnitPrice.SETRANGE("Index Date", "Index Date");

      IF ("Unit Price Code" <> '') AND ("Sub-part of" = '') THEN BEGIN
        ServiceUnitPrice.SETRANGE("Sub-part of", "Unit Price Code");
        i := 0;

        IF SUPRecordingLine.FINDFIRST THEN BEGIN
          ServiceUnitPrice.SETRANGE("Sub-part of", "Unit Price Code");
          i := 0;
          IF ServiceUnitPrice.FINDFIRST THEN
            REPEAT
              i += 1;
              SUPRecordingLineNew.INIT;
              SUPRecordingLineNew.VALIDATE("Service Order No.", "Service Order No.");
              SUPRecordingLineNew.VALIDATE("Line No.", LastLineNo + 1 * i);
              SUPRecordingLineNew.Description := ServiceUnitPrice.Description;
              SUPRecordingLineNew.VALIDATE("Sub-part of", ServiceUnitPrice."Sub-part of");
              SUPRecordingLineNew."Unit Price Code" := ServiceUnitPrice.Code;
              SUPRecordingLineNew.VALIDATE("Pre-Recording Quantity", "Pre-Recording Quantity");
              SUPRecordingLineNew.VALIDATE("Quantity Recording", "Quantity Recording");
              SUPRecordingLineNew.VALIDATE("Alternative Unit Price Code", ServiceUnitPrice.Code);
              SUPRecordingLineNew."Unit Price" := ServiceUnitPrice."Unit Price";
              SUPRecordingLineNew."Unit of Measure" := ServiceUnitPrice."Unit of Measure";
              SUPRecordingLineNew.Discipline := ServiceUnitPrice.Discipline;
              SUPRecordingLineNew."Trade Speciality" := ServiceUnitPrice."Trade Speciality";
              SUPRecordingLineNew."Surcharge Set Code" := ServiceUnitPrice."Surcharge Set Code";
              SUPRecordingLineNew."Unit Price Type" := ServiceUnitPrice."Unit Price Type";
              SUPRecordingLineNew.INSERT;
            UNTIL ServiceUnitPrice.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE SetLineNo@1100527550();
    BEGIN
      IF "Line No." = 0 THEN
        "Line No." := GetLastLineNo("Service Order No.") + 10000 - GetLastLineNo("Service Order No.") MOD 10000;
    END;

    [External]
    PROCEDURE ClearSUPRecordingLineNoFromAdviceOrderLine@1100527450(UseCurrRec@1100527452 : Boolean);
    VAR
      AdviceOrderLine@1100527450 : Record 11012055;
      SUPRecordingLine@1100527451 : Record 11071772;
    BEGIN
      IF NOT UseCurrRec THEN BEGIN
        SUPRecordingLine.COPYFILTERS(Rec);
        IF SUPRecordingLine.GETFILTERS = '' THEN
          EXIT;
      END ELSE BEGIN
        SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
        SUPRecordingLine.SETRANGE("Line No.", "Line No.");
      END;
      IF SUPRecordingLine.FINDSET THEN BEGIN
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        REPEAT
          AdviceOrderLine.SETRANGE("Service Order No.", SUPRecordingLine."Service Order No.");
          AdviceOrderLine.SETRANGE("SUP Recording Line No.", SUPRecordingLine."Line No.");
          IF AdviceOrderLine.FINDFIRST THEN BEGIN
            AdviceOrderLine."SUP Recording Line No." := 0;
            AdviceOrderLine.MODIFY;
          END;
        UNTIL SUPRecordingLine.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

