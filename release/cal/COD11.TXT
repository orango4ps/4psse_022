OBJECT Codeunit 11 Gen. Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00,NAVDK.NO,4PSSE;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 252=rimd;
    OnRun=BEGIN
            RunCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=can only be a closing date for G/L entries;NOR=kan bare v‘re en avslutningsdato for finansposter;SVE=kan endast vara ett avslutsdatum f”r redovisningstransaktioner';
      Text001@1001 : TextConst 'ENU=is not within your range of allowed posting dates;NOR=er ikke innenfor tillatte bokf›ringsdatoer;SVE=„r inte i ditt till†tna intervall f”r bokf”ringsdatum';
      Text002@1002 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;NOR=%1 eller %2 m† v‘re en finanskonto eller bankkonto.;SVE=%1 eller %2 m†ste vara ett redovisnings- eller bankkonto.';
      Text003@1003 : TextConst 'ENU=must have the same sign as %1;NOR=m† ha samme fortegn som %1;SVE=m†ste ha samma tecken som %1';
      Text004@1004 : TextConst 'ENU=You must not specify %1 when %2 is %3.;NOR=Du kan ikke angi %1 n†r %2 er %3.;SVE=Du ska inte specificera %1 n„r %2 „r %3.';
      Text005@1005 : TextConst 'ENU=%1 + %2 must be %3.;NOR=%1 + %2 m† v‘re %3.;SVE=%1 + %2 m†ste vara %3.';
      Text006@1006 : TextConst 'ENU=%1 + %2 must be -%3.;NOR=%1 + %2 m† v‘re -%3.;SVE=%1 + %2 m†ste vara -%3.';
      Text007@1007 : TextConst 'ENU=must be positive;NOR=m† v‘re positiv;SVE=m†ste vara positivt';
      Text008@1008 : TextConst 'ENU=must be negative;NOR=m† v‘re negativ;SVE=m†ste vara negativt';
      Text009@1009 : TextConst 'ENU=must have a different sign than %1;NOR=m† ha et annet fortegn enn %1';
      Text010@1010 : TextConst 'ENU=%1 %2 and %3 %4 is not allowed.;NOR=%1 %2 og %3 %4 er ikke tillatt.';
      Text011@1011 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5;NOR=Kombinasjonen av dimensjonene som brukes i %1 %2, %3, %4 er sperret. %5;SVE=Kombinationen av dimensioner i %1 %2, %3, %4 „r sp„rrad. %5';
      Text012@1012 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5;NOR=En dimensjon som brukes i %1 %2, %3, %4 har for†rsaket en feil. %5;SVE=En dimension anv„nd i %1 %2, %3, %4 har orsakat ett fel. %5';
      GLSetup@1014 : Record 98;
      GenJnlTemplate@1020 : Record 80;
      CostAccSetup@1024 : Record 1108;
      DimMgt@1017 : Codeunit 408;
      VATTools@1080008 : Codeunit 11128500;
      CostAccMgt@1023 : Codeunit 1100;
      SkipFiscalYearCheck@1015 : Boolean;
      AllowPostingInClosedVATPeriod@1080000 : Boolean;
      GenJnlTemplateFound@1021 : Boolean;
      OverrideDimErr@1022 : Boolean;
      SalesDocAlreadyExistsErr@1026 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Sales %1 %2 already exists.;NOR=Salg %1 %2 finnes allerede.;SVE=F”rs„ljning %1 %2 finns redan.';
      PurchDocAlreadyExistsErr@1025 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists.;NOR=Kj›p %1 %2 finnes allerede.';
      IsBatchMode@1016 : Boolean;
      EmployeeBalancingDocTypeErr@1013 : TextConst 'ENU=must be empty or set to Payment when Balancing Account Type field is set to Employee;NOR=m† v‘re tom eller satt til Betaling hvis feltet Motkontotype er satt til Ansatt';
      EmployeeAccountDocTypeErr@1027 : TextConst 'ENU=must be empty or set to Payment when Account Type field is set to Employee;NOR=m† v‘re tom eller satt til Betaling hvis feltet Kontotype er satt til Ansatt';
      PurchSetup@1100485002 : Record 312;
      DimValRec@11012003 : Record 349;
      ProjTypeRec@11012004 : Record 11012009;
      ProjRec@11012005 : Record 11072003;
      ProjElemRec@1100485001 : Record 11012010;
      ProjectTypeExtension@1100529600 : Record 11229469;
      GlAccount@11012006 : Record 15;
      ErrorStr@11012010 : Text[50];
      Text11012000@1000000002 : TextConst 'ENU="%1 %2 may not be a %3 if entries are posted without %4 "';
      Text11012001@1000000000 : TextConst 'ENU="%1 %2 must be a %3 to be able to post %4 %5 "';
      Text11012002@1000000001 : TextConst 'ENU=does not match with Cost Type';
      ProjSetupRec@1210190000 : Record 315;
      Servicesetup@1100525000 : Record 11012800;
      EmployeeRec@1100485005 : Record 5200;
      VendorRec@1100485006 : Record 23;
      PurchSetupRead@1100485003 : Boolean;
      Text11012003@1100485004 : TextConst 'ENU=%1 %2 ''%3'' does not exist in Company ''%4''.';
      Text11012004@1100525001 : TextConst 'ENU=and without %1';
      TextRfc061@1100285100 : TextConst 'ENU=Posting to Main Projects are not allowed;SVE=Bokf”ring p† huvudprojekt „r inte till†tet';
      GenJnlLineExt@111280000 : Record 11128091;

    [External]
    PROCEDURE RunCheck@4(VAR GenJnlLine@1000 : Record 81);
    VAR
      ICGLAcount@1008 : Record 410;
      lJob@1101285000 : Record 11072003;
    BEGIN
      OnBeforeRunCheck(GenJnlLine);

      GLSetup.GET;
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;

        IF NOT GenJnlTemplateFound THEN BEGIN
          IF GenJnlTemplate.GET("Journal Template Name") THEN;
          GenJnlTemplateFound := TRUE;
        END;

        CheckDates(GenJnlLine);
        ValidateSalesPersonPurchaserCode(GenJnlLine);

        TESTFIELD("Document No.");

        IF ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset",
             "Account Type"::"IC Partner"]) AND
           ("Bal. Account Type" IN
            ["Bal. Account Type"::Customer,
             "Bal. Account Type"::Vendor,
             "Bal. Account Type"::"Fixed Asset",
             "Bal. Account Type"::"IC Partner"])
        THEN
          ERROR(
            Text002,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

        IF "Bal. Account No." = '' THEN
          TESTFIELD("Account No.");

        IF NeedCheckZeroAmount AND NOT (IsRecurring AND IsBatchMode) THEN
          TESTFIELD(Amount);

        IF ((Amount < 0) XOR ("Amount (LCY)" < 0)) AND (Amount <> 0) AND ("Amount (LCY)" <> 0) THEN
          FIELDERROR("Amount (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));

        //TESTFIELD(Description); //**4PS.o M19033

        IF ("Account Type" = "Account Type"::"G/L Account") AND
           ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
        THEN
          TESTFIELD("Applies-to Doc. No.",'');

        IF ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
           ("Currency Code" <> '')
        THEN
          ERROR(
            Text004,
            FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

        IF "Account No." <> '' THEN
          CheckAccountNo(GenJnlLine);

        IF "Bal. Account No." <> '' THEN
          CheckBalAccountNo(GenJnlLine);

        IF "IC Partner G/L Acc. No." <> '' THEN
          IF ICGLAcount.GET("IC Partner G/L Acc. No.") THEN
            ICGLAcount.TESTFIELD(Blocked,FALSE);

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           (("Document Type" <> "Document Type"::Invoice) AND
            (NOT
             (("Document Type" = "Document Type"::"Credit Memo") AND
              CalcPmtDiscOnCrMemos("Payment Terms Code"))))
        THEN BEGIN
          TESTFIELD("Pmt. Discount Date",0D);
          TESTFIELD("Payment Discount %",0);
        END;

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ("Applies-to Doc. No." <> '')
        THEN
          TESTFIELD("Applies-to ID",'');

        IF ("Account Type" <> "Account Type"::"Bank Account") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
        THEN
          TESTFIELD("Bank Payment Type","Bank Payment Type"::" ");

        IF ("Account Type" = "Account Type"::"Fixed Asset") OR
           ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
        THEN
          CODEUNIT.RUN(CODEUNIT::"FA Jnl.-Check Line",GenJnlLine);

        IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
        THEN BEGIN
          TESTFIELD("Depreciation Book Code",'');
          TESTFIELD("FA Posting Type",0);
        END;

        IF NOT OverrideDimErr THEN
          IF NOT "Skip WIP Check" THEN //**4PS.n
            CheckDimensions(GenJnlLine);

        //>>RFC061
        IF ProjSetupRec.GET THEN
          IF (ProjSetupRec."Disallow posting to Main Proj") AND (GenJnlLine."Job No." <> '') THEN BEGIN
            lJob.GET(GenJnlLine."Job No.");
            IF lJob."Single/Main/Sub Project" = lJob."Single/Main/Sub Project"::"Main Project" THEN
              ERROR(TextRfc061);
          END;

      END;

      IF CostAccSetup.GET THEN
        CostAccMgt.CheckValidCCAndCOInGLEntry(GenJnlLine."Dimension Set ID");

      OnAfterCheckGenJnlLine(GenJnlLine);
    END;

    LOCAL PROCEDURE CalcPmtDiscOnCrMemos@9(PaymentTermsCode@1000 : Code[10]) : Boolean;
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      IF PaymentTermsCode <> '' THEN BEGIN
        PaymentTerms.GET(PaymentTermsCode);
        EXIT(PaymentTerms."Calc. Pmt. Disc. on Cr. Memos");
      END;
    END;

    [External]
    PROCEDURE DateNotAllowed@1(PostingDate@1000 : Date) : Boolean;
    VAR
      SetupRecordID@1002 : RecordID;
    BEGIN
      EXIT(IsDateNotAllowed(PostingDate,SetupRecordID));
    END;

    [External]
    PROCEDURE IsDateNotAllowed@27(PostingDate@1000 : Date;VAR SetupRecordID@1002 : RecordID) DateIsNotAllowed : Boolean;
    VAR
      UserSetupManagement@1001 : Codeunit 5700;
    BEGIN
      DateIsNotAllowed := NOT UserSetupManagement.IsPostingDateValidWithSetup(PostingDate,SetupRecordID);
      OnAfterDateNoAllowed(PostingDate,DateIsNotAllowed);
      EXIT(DateIsNotAllowed);
    END;

    [External]
    PROCEDURE SetSkipFiscalYearCheck@29(NewValue@1000 : Boolean);
    BEGIN
      SkipFiscalYearCheck := NewValue;
    END;

    LOCAL PROCEDURE ErrorIfPositiveAmt@2(GenJnlLine@1000 : Record 81);
    VAR
      RaiseError@1001 : Boolean;
    BEGIN
      RaiseError := GenJnlLine.Amount > 0;
      OnBeforeErrorIfPositiveAmt(GenJnlLine,RaiseError);
      IF RaiseError THEN
        GenJnlLine.FIELDERROR(Amount,Text008);
    END;

    LOCAL PROCEDURE ErrorIfNegativeAmt@3(GenJnlLine@1000 : Record 81);
    VAR
      RaiseError@1001 : Boolean;
    BEGIN
      RaiseError := GenJnlLine.Amount < 0;
      OnBeforeErrorIfNegativeAmt(GenJnlLine,RaiseError);
      IF RaiseError THEN
        GenJnlLine.FIELDERROR(Amount,Text007);
    END;

    [External]
    PROCEDURE SetOverDimErr@5(lvOverrideDimErr@1100525000 : Boolean);
    BEGIN
      //OverrideDimErr := TRUE; //**4PS o
      OverrideDimErr := lvOverrideDimErr; //**4PS n DP00387
    END;

    LOCAL PROCEDURE CheckDates@14(GenJnlLine@1000 : Record 81);
    VAR
      AccountingPeriodMgt@1001 : Codeunit 360;
      DateCheckDone@1002 : Boolean;
      IsHandled@1003 : Boolean;
      VATTools@1080008 : Codeunit 11128500;
    BEGIN
      WITH GenJnlLine DO BEGIN
        TESTFIELD("Posting Date");
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN BEGIN
          IF ("Account Type" <> "Account Type"::"G/L Account") OR
             ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
          THEN
            FIELDERROR("Posting Date",Text000);
          IF NOT SkipFiscalYearCheck THEN BEGIN
            IsHandled := FALSE;
            OnBeforeCheckPostingDateInFiscalYear(GenJnlLine,IsHandled);
            IF NOT IsHandled THEN
              AccountingPeriodMgt.CheckPostingDateInFiscalYear("Posting Date");
          END;
        END;

        OnBeforeDateNotAllowed(GenJnlLine,DateCheckDone);
        IF NOT DateCheckDone THEN
          IF DateNotAllowed("Posting Date") THEN
            FIELDERROR("Posting Date",Text001);

        IF GLSetup."Norwegian Localization Active" THEN BEGIN
          GenJnlLineExt.InitGetLine(GenJnlLine);//4PSSE
          VATTools.RunCheckNorwegianVAT(GenJnlLine,GenJnlLineExt,AllowPostingInClosedVATPeriod);  //NAVNO9.00
        END;

        IF "Document Date" <> 0D THEN
          IF ("Document Date" <> NORMALDATE("Document Date")) AND
             (("Account Type" <> "Account Type"::"G/L Account") OR
              ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account"))
          THEN
            FIELDERROR("Document Date",Text000);
      END;
    END;

    LOCAL PROCEDURE CheckAccountNo@10(GenJnlLine@1000 : Record 81);
    VAR
      ICPartner@1001 : Record 413;
      CheckDone@1002 : Boolean;
      FIKManagement@1060000 : Codeunit 11128589;
    BEGIN
      OnBeforeCheckAccountNo(GenJnlLine,CheckDone);
      IF CheckDone THEN
        EXIT;

      WITH GenJnlLine DO
        CASE "Account Type" OF
          "Account Type"::"G/L Account":
            BEGIN
              IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                 ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
              THEN
                IF NOT GenJnlLine."Block VAT Posting" THEN  //**4PS.n 20-12-2007
                  TESTFIELD("Gen. Posting Type");

              CheckGenProdPostingGroupWhenAdjustForPmtDisc(GenJnlLine);

              IF ("Gen. Posting Type" <> "Gen. Posting Type"::" ") AND
                 ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
              THEN BEGIN
                IF "VAT Amount" + "VAT Base Amount" <> Amount THEN
                  ERROR(
                    Text005,FIELDCAPTION("VAT Amount"),FIELDCAPTION("VAT Base Amount"),
                    FIELDCAPTION(Amount));
                IF "Currency Code" <> '' THEN
                  IF "VAT Amount (LCY)" + "VAT Base Amount (LCY)" <> "Amount (LCY)" THEN
                    ERROR(
                      Text005,FIELDCAPTION("VAT Amount (LCY)"),
                      FIELDCAPTION("VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
              END;
              //**4PS.sn
              ValidateAccount(GenJnlLine);
              IF "Plant Type" <> '' THEN    //**4PS.n SR, 09-12-13 C004021
                ValidatePlantNo;
              //**4PS.en
            END;
          "Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee:
            BEGIN
              TESTFIELD("Gen. Posting Type",0);
              TESTFIELD("Gen. Bus. Posting Group",'');
              TESTFIELD("Gen. Prod. Posting Group",'');
              TESTFIELD("VAT Bus. Posting Group",'');
              TESTFIELD("VAT Prod. Posting Group",'');

              IF (("Account Type" = "Account Type"::Customer) AND
                  ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase)) OR
                 (("Account Type" = "Account Type"::Vendor) AND
                  ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Sale))
              THEN
                ERROR(
                  Text010,
                  FIELDCAPTION("Account Type"),"Account Type",
                  FIELDCAPTION("Bal. Gen. Posting Type"),"Bal. Gen. Posting Type");

              CheckDocType(GenJnlLine);
      //**4PS.so
      //      IF NOT "System-Created Entry" AND
      //         (((Amount < 0) XOR ("Sales/Purch. (LCY)" < 0)) AND (Amount <> 0) AND ("Sales/Purch. (LCY)" <> 0))
      //      THEN
      //        FIELDERROR("Sales/Purch. (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));
      //**4PS.eo
              TESTFIELD("Job No.",'');
              CheckICPartner("Account Type","Account No.","Document Type");
              //>>NAVDK
              IF ("Account Type" = "Account Type"::Vendor) AND GLSetup."Danish Localization Active" THEN
                FIKManagement.EvaluateFIK("Payment Reference","Payment Method Code");
              //<<NAVDK
            END;
          "Account Type"::"Bank Account":
            BEGIN
              TESTFIELD("Gen. Posting Type",0);
              TESTFIELD("Gen. Bus. Posting Group",'');
              TESTFIELD("Gen. Prod. Posting Group",'');
              TESTFIELD("VAT Bus. Posting Group",'');
              TESTFIELD("VAT Prod. Posting Group",'');
              TESTFIELD("Job No.",'');
              IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                TESTFIELD("Check Printed",TRUE);
              IF ("Bank Payment Type" = "Bank Payment Type"::"Electronic Payment") OR
                 ("Bank Payment Type" = "Bank Payment Type"::"Electronic Payment-IAT")
              THEN BEGIN
                TESTFIELD("Exported to Payment File",TRUE);
                TESTFIELD("Check Transmitted",TRUE);
              END;
            END;
          "Account Type"::"IC Partner":
            BEGIN
              ICPartner.GET("Account No.");
              ICPartner.CheckICPartner;
              IF "Journal Template Name" <> '' THEN
                IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                  FIELDERROR("Account Type");
            END;
        END;

      OnAfterCheckAccountNo(GenJnlLine);
    END;

    LOCAL PROCEDURE CheckBalAccountNo@13(GenJnlLine@1000 : Record 81);
    VAR
      ICPartner@1001 : Record 413;
      CheckDone@1002 : Boolean;
      GLBalAccount@1100409001 : Record 15;
      FIKManagement@1101285000 : Codeunit 11128589;
    BEGIN
      OnBeforeCheckBalAccountNo(GenJnlLine,CheckDone);
      IF CheckDone THEN
        EXIT;

      WITH GenJnlLine DO
        CASE "Bal. Account Type" OF
          "Bal. Account Type"::"G/L Account":
            BEGIN
              IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                 ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
              THEN
                TESTFIELD("Bal. Gen. Posting Type");

              CheckBalGenProdPostingGroupWhenAdjustForPmtDisc(GenJnlLine);

              IF ("Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" ") AND
                 ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
              THEN BEGIN
                IF "Bal. VAT Amount" + "Bal. VAT Base Amount" <> -Amount THEN
                  ERROR(
                    Text006,FIELDCAPTION("Bal. VAT Amount"),FIELDCAPTION("Bal. VAT Base Amount"),
                    FIELDCAPTION(Amount));
                IF "Currency Code" <> '' THEN
                  IF "Bal. VAT Amount (LCY)" + "Bal. VAT Base Amount (LCY)" <> -"Amount (LCY)" THEN
                    ERROR(
                      Text006,FIELDCAPTION("Bal. VAT Amount (LCY)"),
                      FIELDCAPTION("Bal. VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
              END;
              //**4PS.sn C016580
              IF ("Closed Project No." = '') AND ("Closed Service Order No." = '') AND
                 ("Closed Service Contract No." = '') THEN
              BEGIN //C019579
                GLBalAccount.GET("Bal. Account No.");
                GLBalAccount.TESTFIELD("WIP Account",FALSE);
              END; //C019579
              //**4PS.en
            END;
          "Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::Employee:
            BEGIN
              TESTFIELD("Bal. Gen. Posting Type",0);
              TESTFIELD("Bal. Gen. Bus. Posting Group",'');
              TESTFIELD("Bal. Gen. Prod. Posting Group",'');
              TESTFIELD("Bal. VAT Bus. Posting Group",'');
              TESTFIELD("Bal. VAT Prod. Posting Group",'');

              IF (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                  ("Gen. Posting Type" = "Gen. Posting Type"::Purchase)) OR
                 (("Bal. Account Type" = "Bal. Account Type"::Vendor) AND
                  ("Gen. Posting Type" = "Gen. Posting Type"::Sale))
              THEN
                ERROR(
                  Text010,
                  FIELDCAPTION("Bal. Account Type"),"Bal. Account Type",
                  FIELDCAPTION("Gen. Posting Type"),"Gen. Posting Type");

              CheckBalDocType(GenJnlLine);

      //**4PS.so
      //      IF ((Amount > 0) XOR ("Sales/Purch. (LCY)" < 0)) AND (Amount <> 0) AND ("Sales/Purch. (LCY)" <> 0) THEN
      //        FIELDERROR("Sales/Purch. (LCY)",STRSUBSTNO(Text009,FIELDCAPTION(Amount)));
      //**4PS.eo
              TESTFIELD("Job No.",'');

              CheckICPartner("Bal. Account Type","Bal. Account No.","Document Type");
            END;
          "Bal. Account Type"::"Bank Account":
            BEGIN
              TESTFIELD("Bal. Gen. Posting Type",0);
              TESTFIELD("Bal. Gen. Bus. Posting Group",'');
              TESTFIELD("Bal. Gen. Prod. Posting Group",'');
              TESTFIELD("Bal. VAT Bus. Posting Group",'');
              TESTFIELD("Bal. VAT Prod. Posting Group",'');
              IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                TESTFIELD("Check Printed",TRUE);
              IF ("Bank Payment Type" = "Bank Payment Type"::"Electronic Payment") OR
                 ("Bank Payment Type" = "Bank Payment Type"::"Electronic Payment-IAT")
              THEN BEGIN
                TESTFIELD("Exported to Payment File",TRUE);
                TESTFIELD("Check Transmitted",TRUE);
              END;
            END;
          "Bal. Account Type"::"IC Partner":
            BEGIN
              ICPartner.GET("Bal. Account No.");
              ICPartner.CheckICPartner;
              IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                FIELDERROR("Bal. Account Type");
            END;
        END;

      OnAfterCheckBalAccountNo(GenJnlLine);
    END;

    [External]
    PROCEDURE CheckSalesDocNoIsNotUsed@115(DocType@1000 : Option;DocNo@1001 : Code[20]);
    VAR
      OldCustLedgEntry@1002 : Record 21;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckSalesDocNoIsNotUsed(DocType,DocNo,IsHandled);
      IF IsHandled THEN
        EXIT;

      OldCustLedgEntry.SETRANGE("Document No.",DocNo);
      OldCustLedgEntry.SETRANGE("Document Type",DocType);
      IF OldCustLedgEntry.FINDFIRST THEN
        ERROR(SalesDocAlreadyExistsErr,OldCustLedgEntry."Document Type",DocNo);
    END;

    [External]
    PROCEDURE CheckPurchDocNoIsNotUsed@107(DocType@1000 : Option;DocNo@1002 : Code[20]);
    VAR
      OldVendLedgEntry@1001 : Record 25;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckPurchDocNoIsNotUsed(DocType,DocNo,IsHandled);
      IF IsHandled THEN
        EXIT;

      OldVendLedgEntry.SETRANGE("Document No.",DocNo);
      OldVendLedgEntry.SETRANGE("Document Type",DocType);
      IF OldVendLedgEntry.FINDFIRST THEN
        ERROR(PurchDocAlreadyExistsErr,OldVendLedgEntry."Document Type",DocNo);
    END;

    PROCEDURE CheckPostingPeriod@1080001(CheckPeriod@1080000 : Boolean);
    VAR
      AllowPosting@1080001 : Boolean;
      AllowPostingFrom@1018 : Date;
      AllowPostingTo@1019 : Date;
      UserSetup@1015 : Record 91;
    BEGIN
      //NAVNO
      IF CheckPeriod THEN BEGIN
        AllowPostingFrom := 0D;
        AllowPostingTo := 0D;
        AllowPostingInClosedVATPeriod := FALSE;
      END ELSE BEGIN
        AllowPosting := FALSE;
        GLSetup.GET;
        AllowPosting := GLSetup."Application always Allowed";
        IF NOT AllowPosting THEN
          IF UserSetup.GET(USERID) THEN
            AllowPosting := UserSetup."Application always Allowed";
        IF AllowPosting THEN BEGIN
          AllowPostingFrom := 0D;
          AllowPostingTo := 99991231D;
        END ELSE BEGIN
          AllowPostingFrom := 0D;
          AllowPostingTo := 0D;
        END;
        AllowPostingInClosedVATPeriod := AllowPosting;
      END;
    END;

    LOCAL PROCEDURE CheckDocType@7(GenJnlLine@1001 : Record 81);
    VAR
      IsPayment@1000 : Boolean;
      IsHandled@1002 : Boolean;
      lvVendorLedgerEntry@1100583000 : Record 25;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckDocType(GenJnlLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH GenJnlLine DO
        IF "Document Type" <> 0 THEN BEGIN
          IF ("Account Type" = "Account Type"::Employee) AND NOT
             ("Document Type" IN ["Document Type"::Payment,"Document Type"::" "])
          THEN
            FIELDERROR("Document Type",EmployeeAccountDocTypeErr);

      //>>190520
          //IsPayment := "Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"];
          IsPayment := "Document Type" IN ["Document Type"::Payment];
      //<<190520
      //>>181203
      //    IF IsPayment XOR (("Account Type" = "Account Type"::Customer) XOR IsVendorPaymentToCrMemo(GenJnlLine)) THEN
      //      ErrorIfNegativeAmt(GenJnlLine)
      //    ELSE
      //      ErrorIfPositiveAmt(GenJnlLine);

          IF IsPayment XOR (IsCustomerPaymentToCrMemo(GenJnlLine) XOR IsVendorPaymentToCrMemo(GenJnlLine)) THEN BEGIN
            //>> 190513 #24163 Added code from 100-dev (4PSSE.sn SC004719)
            PurchSetup.GET;
            lvVendorLedgerEntry.SETRANGE("Vendor No.", GenJnlLine."Account No.");
            lvVendorLedgerEntry.SETRANGE(Open, TRUE);
            lvVendorLedgerEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
            IF (lvVendorLedgerEntry.FINDFIRST)  AND (PurchSetup."Description Part. Payment" = lvVendorLedgerEntry.Description) THEN BEGIN
            END ELSE
            //<<
              ErrorIfNegativeAmt(GenJnlLine)
          END ELSE
            ErrorIfPositiveAmt(GenJnlLine);
        END;
    END;

    LOCAL PROCEDURE CheckBalDocType@19(GenJnlLine@1000 : Record 81);
    VAR
      IsPayment@1001 : Boolean;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckBalDocType(GenJnlLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH GenJnlLine DO
        IF "Document Type" <> 0 THEN BEGIN
          IF ("Bal. Account Type" = "Bal. Account Type"::Employee) AND NOT
             ("Document Type" IN ["Document Type"::Payment,"Document Type"::" "])
          THEN
            FIELDERROR("Document Type",EmployeeBalancingDocTypeErr);

          IsPayment := "Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"];
          IF IsPayment = ("Bal. Account Type" = "Bal. Account Type"::Customer) THEN
            ErrorIfNegativeAmt(GenJnlLine)
          ELSE
            ErrorIfPositiveAmt(GenJnlLine);
        END;
    END;

    LOCAL PROCEDURE CheckICPartner@11(AccountType@1004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee';AccountNo@1000 : Code[20];DocumentType@1005 : Option);
    VAR
      Customer@1001 : Record 18;
      Vendor@1002 : Record 23;
      ICPartner@1003 : Record 413;
      Employee@1007 : Record 5200;
      CheckDone@1006 : Boolean;
    BEGIN
      OnBeforeCheckICPartner(AccountType,AccountNo,DocumentType,CheckDone);
      IF CheckDone THEN
        EXIT;

      CASE AccountType OF
        AccountType::Customer:
          IF Customer.GET(AccountNo) THEN BEGIN
            Customer.CheckBlockedCustOnJnls(Customer,DocumentType,TRUE);
            IF (Customer."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
               ICPartner.GET(Customer."IC Partner Code")
            THEN
              ICPartner.CheckICPartnerIndirect(FORMAT(AccountType),AccountNo);
          END;
        AccountType::Vendor:
          IF Vendor.GET(AccountNo) THEN BEGIN
            Vendor.CheckBlockedVendOnJnls(Vendor,DocumentType,TRUE);
            IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
               ICPartner.GET(Vendor."IC Partner Code")
            THEN
              ICPartner.CheckICPartnerIndirect(FORMAT(AccountType),AccountNo);
          END;
        AccountType::Employee:
          IF Employee.GET(AccountNo) THEN
            Employee.CheckBlockedEmployeeOnJnls(TRUE)
      END;
    END;

    LOCAL PROCEDURE CheckDimensions@12(GenJnlLine@1000 : Record 81);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1001 : ARRAY [10] OF Code[20];
      CheckDone@1003 : Boolean;
    BEGIN
      OnBeforeCheckDimensions(GenJnlLine,CheckDone);
      IF CheckDone THEN
        EXIT;

      WITH GenJnlLine DO BEGIN
        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ThrowGenJnlLineError(GenJnlLine,Text011,DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID1("Account Type");
        No[1] := "Account No.";
        TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
        No[2] := "Bal. Account No.";
        IF NOT ("Plant Invoice" AND ("Job No." <> '')) THEN BEGIN  //**4PS.n
          TableID[3] := DATABASE::Job;
          No[3] := "Job No.";
        END;  //**4PS.n
        TableID[4] := DATABASE::"Salesperson/Purchaser";
        No[4] := "Salespers./Purch. Code";
        TableID[5] := DATABASE::Campaign;
        No[5] := "Campaign No.";
      //**4PS.sn C020939
        IF ("Receiving Company" <> '') AND
           ( "Memo Posting" OR NOT "Intercompany Transaction" ) THEN //C022038
           IF "Reversing Entry" AND ("Recurring Method" >= "Recurring Method"::"RF Reversing Fixed") THEN
             DimMgt.SetCompany(COMPANYNAME)
           ELSE
             DimMgt.SetCompany("Receiving Company")
        ELSE
          DimMgt.SetCompany(COMPANYNAME);
      //**4PS.en C020939
        IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
          ThrowGenJnlLineError(GenJnlLine,Text012,DimMgt.GetDimValuePostingErr);

      END;
    END;

    LOCAL PROCEDURE IsVendorPaymentToCrMemo@26(GenJournalLine@1002 : Record 81) : Boolean;
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF ("Account Type" = "Account Type"::Vendor) AND
           ("Document Type" = "Document Type"::Payment) AND
           ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
           ("Applies-to Doc. No." <> '')
        THEN BEGIN
          GenJournalTemplate.GET("Journal Template Name");
          EXIT(GenJournalTemplate.Type = GenJournalTemplate.Type::Payments);
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE ThrowGenJnlLineError@8(GenJournalLine@1000 : Record 81;ErrorTemplate@1001 : Text;ErrorText@1002 : Text);
    BEGIN
      WITH GenJournalLine DO
        IF "Line No." <> 0 THEN
          ERROR(
            ErrorTemplate,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            ErrorText);
      ERROR(ErrorText);
    END;

    [External]
    PROCEDURE SetBatchMode@30(NewBatchMode@1000 : Boolean);
    BEGIN
      IsBatchMode := NewBatchMode;
    END;

    LOCAL PROCEDURE CheckGenProdPostingGroupWhenAdjustForPmtDisc@33(GenJnlLine@1000 : Record 81);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF ("Payment Discount %" = 0) OR "System-Created Entry" OR
           NOT ("Gen. Posting Type" IN ["Gen. Posting Type"::Purchase,"Gen. Posting Type"::Sale]) OR
           NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])
        THEN
          EXIT;

        IF VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") AND
           VATPostingSetup."Adjust for Payment Discount"
        THEN
          TESTFIELD("Gen. Prod. Posting Group");
      END;
    END;

    LOCAL PROCEDURE CheckBalGenProdPostingGroupWhenAdjustForPmtDisc@34(GenJnlLine@1000 : Record 81);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF ("Payment Discount %" = 0) OR "System-Created Entry" OR
           NOT ("Bal. Gen. Posting Type" IN ["Bal. Gen. Posting Type"::Purchase,"Bal. Gen. Posting Type"::Sale]) OR
           NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])
        THEN
          EXIT;

        IF VATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") AND
           VATPostingSetup."Adjust for Payment Discount"
        THEN
          TESTFIELD("Bal. Gen. Prod. Posting Group");
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckAccountNo@36(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckBalAccountNo@37(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckGenJnlLine@6(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDateNoAllowed@21(PostingDate@1000 : Date;VAR DateIsNotAllowed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDateNotAllowed@15(GenJnlLine@1000 : Record 81;VAR DateCheckDone@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckAccountNo@18(VAR GenJnlLine@1001 : Record 81;VAR CheckDone@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBalAccountNo@20(VAR GenJnlLine@1001 : Record 81;VAR CheckDone@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckDimensions@17(VAR GenJnlLine@1001 : Record 81;VAR CheckDone@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckDocType@23(GenJournalLine@1000 : Record 81;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBalDocType@24(GenJournalLine@1000 : Record 81;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckICPartner@22(AccountType@1003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';AccountNo@1002 : Code[20];DocumentType@1001 : Option;VAR CheckDone@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckSalesDocNoIsNotUsed@31(DocType@1001 : Option;DocNo@1000 : Code[20];VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckPurchDocNoIsNotUsed@32(DocType@1001 : Option;DocNo@1000 : Code[20];VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeErrorIfNegativeAmt@25(GenJnlLine@1000 : Record 81;VAR RaiseError@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeErrorIfPositiveAmt@16(GenJnlLine@1000 : Record 81;VAR RaiseError@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRunCheck@28(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckPostingDateInFiscalYear@35(GenJournalLine@1000 : Record 81;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    PROCEDURE ValidateAccount@11012000(GenJnlLine@11012000 : Record 81);
    VAR
      ServContrRec@1210190003 : Record 11012812;
      ServOrderRec@1210190004 : Record 11012823;
      ServTypeRec@1210190005 : Record 11012814;
      lvSalesHeadRec@1100485001 : Record 36;
      lvSalesInvoiceRec@1100485003 : Record 112;
      lvSalesCrMemoRec@1100485004 : Record 114;
      lvICRelationRec@1100525000 : Record 11012057;
      lvICPostingSetupBySourceRec@1100525003 : Record 11020565;
      SalesHeader@1100529601 : Record 36;
      LedgerbyProjTypeCustGr@1100529600 : Record 11229378;
      lvDoCheck@1100485002 : Boolean;
      IsPlantServiceOrder@1100525005 : Boolean;
      RentalUnitWIP@1100409000 : Boolean;
      lvCompName@1100485000 : Text[50];
      LvVendorCde@1100485005 : Code[20];
      lvVendorPostingGroep@1100525001 : Code[20];
      lvICHoursPosting@1100525002 : 'NotApplicable,ReceiverSide,Supplierside';
      TableText@1100525004 : Text[250];
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      lvCustomerPostingGroup@1100528200 : Code[20];
      lvServType@1100527300 : Code[20];
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN
        lvCheckCompanyIC(GenJnlLine);
        IF ("Receiving Company" = '') OR AccountIsSupplyingCurrentCompanyICAccount THEN
          GlAccount.GET("Account No.")
        ELSE BEGIN
          IF NOT GlAccount.GET("Account No.") THEN
            ERROR(Text11012003, GlAccount.TABLECAPTION, GlAccount.FIELDCAPTION("No."), "Account No.", "Receiving Company");
        END;
        IF GlAccount."WIP Account" THEN BEGIN
          IF ("Job No." + "Service Contract No." + "Service Order No." = '') AND NOT "Skip WIP Check" THEN BEGIN
            IF "Posting Date" <> CLOSINGDATE("Posting Date") THEN BEGIN
              TableText := ProjRec.TABLECAPTION;
              IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServContrRec) THEN
                TableText := TableText + ' ' + STRSUBSTNO(Text11012004, ServContrRec.TABLECAPTION);
              ERROR(STRSUBSTNO(Text11012000,
                FIELDCAPTION("Account No."), "Account No.",
                GlAccount.FIELDCAPTION("WIP Account"),
                TableText));
            END;
          END;
        END;

        IF "Job No." <> '' THEN BEGIN
          lvDoCheck := TRUE;
          IF "Plant Invoice" THEN BEGIN
            IF lvSalesHeadRec.GET("Document Type", "Document No.") THEN BEGIN
              IF (lvSalesHeadRec."Company Name" <> '') AND (lvSalesHeadRec."Company Name" <> COMPANYNAME) THEN
                lvDoCheck := FALSE;
            END ELSE BEGIN
              //* Sometimes (depending setup) the invoice is already deleted here, then read in posted
              IF "Document Type" <> "Document Type"::"Credit Memo" THEN BEGIN
                IF lvSalesInvoiceRec.GET("Document No.") THEN BEGIN
                  IF (lvSalesInvoiceRec."Company Name" <> '') AND (lvSalesInvoiceRec."Company Name" <> COMPANYNAME) THEN
                    lvDoCheck := FALSE;
                END;
              END ELSE BEGIN
                IF lvSalesCrMemoRec.GET("Document No.") THEN BEGIN
                  IF (lvSalesCrMemoRec."Company Name" <> '') AND (lvSalesCrMemoRec."Company Name" <> COMPANYNAME) THEN
                    lvDoCheck := FALSE;
                END;
              END;
            END;
          END;
          IF lvDoCheck THEN BEGIN
            ProjRec.GET("Job No.");
            IF (ProjSetupRec."Provisions at Closure") THEN
              ProjRec.CheckProjectStatus(-1)
            ELSE
              ProjRec.CheckProjectStatus(0);
          END;
          GetPurchSetup;

          IF NOT ((PurchSetup."Approve Purchase Invoices") AND
                  (PurchSetup."Preregister WIP Purch. Inv.") AND
                  (PurchSetup."Preregistration WIP Account" = "Account No.") AND
                  ("Shortcut Dimension 2 Code" = '')) THEN
          BEGIN
            TESTFIELD("Shortcut Dimension 2 Code");
            DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, '');
          END;
        END;

        IF ("Service Order No." <> '') THEN BEGIN
          IF ("Closed Service Contract No." = '') THEN BEGIN
            Servicesetup.GET;
            IF Servicesetup."Cost Component Mandatory" THEN
              TESTFIELD("Cost Component");
          END;
        END;
        IF ("Job No." <> '') THEN BEGIN
          IF ("Closed Project No." = '') THEN BEGIN
            IF ProjSetupRec."Cost Component Mandatory" THEN
              TESTFIELD("Cost Component");
          END;
        END;

        IF ("Service Order No." <> '') THEN BEGIN
          IF "Receiving Company" <> '' THEN
            ServOrderRec.CHANGECOMPANY("Receiving Company");
          IF ServOrderRec.GET("Service Order No.") THEN
            IsPlantServiceOrder := ServOrderRec.IsPlantServiceOrder;
        END;
        IF (NOT "Plant Invoice") AND (NOT (("Job No."<>'') AND ProjRec."Small Project" AND ProjRec."Plant Job Order"))
            AND (NOT (("Job No."<>'') AND ("Origin Type" = "Origin Type"::Service) AND IsPlantServiceOrder))
        THEN BEGIN

          IF "Job No." <> '' THEN BEGIN
            IF NOT "Skip WIP Check" AND NOT GlAccount."WIP Account" THEN
              ERROR(STRSUBSTNO(Text11012001,
                FIELDCAPTION("Account No."), "Account No.",
                GlAccount.FIELDCAPTION("WIP Account"),
                FIELDCAPTION("Job No."), "Job No."));


              ProjRec.TESTFIELD("Project Type");
              ProjTypeRec.GET(ProjRec."Project Type");
              CLEAR(LedgerbyProjTypeCustGr);
              IF SalesHeader.GET("Document Type", GetOriginalSalesDocumentNo(GenJnlLine)) THEN
                IF LedgerbyProjTypeCustGr.GET(ProjTypeRec.Code, SalesHeader."Customer Posting Group") THEN;
              IF ProjRec."Posting Element Mandatory" AND (GenJnlLine."Retention Entry Type" = 0) THEN
                TESTFIELD(Element);
              IF Element <> '' THEN BEGIN
                ProjElemRec.GET("Job No.", Element);
                ProjElemRec.CheckProjectElementBlocked;
              END;
            ErrorStr := Text11012002;
          END;

          IF ("Job No." <> '') OR ("Service Order No." <> '') THEN BEGIN
            IF "Document Type" = 0 THEN BEGIN

              TESTFIELD("Shortcut Dimension 2 Code");
              DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, '');

              ErrorStr := Text11012002;

              lvICHoursPosting := lvICHoursPosting::NotApplicable;
              IF NOT "Intercompany Transaction" THEN BEGIN
                IF "Receiving Company" <> '' THEN
                  lvCompName := "Receiving Company"
                ELSE
                  lvCompName := COMPANYNAME;

                LvVendorCde := '';
                IF ("Employee No." <> '') THEN BEGIN
                  IF EmployeeRec.GET("Employee No.") THEN BEGIN
                    IF (EmployeeRec.External) AND (EmployeeRec.Employer <> '' ) THEN BEGIN
                      IF VendorRec.GET(EmployeeRec.Employer) THEN
                        LvVendorCde := VendorRec."No.";
                    END;
                  END;
                END;

                IF "Supplying Company" <> '' THEN
                BEGIN
                  IF lvICPostingSetupBySourceRec.GET("Source Code", "Supplying Company", COMPANYNAME) THEN
                  BEGIN
                    lvICHoursPosting := lvICHoursPosting::ReceiverSide;
                    IF lvICRelationRec.GET("Supplying Company", COMPANYNAME) THEN BEGIN
                       lvVendorPostingGroep := lvICRelationRec."Vendor Posting Group";
                    END;
                  END;
                END;

                IF (lvVendorPostingGroep = '') AND ("Vendor Posting Group" <> '') AND (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue)  THEN BEGIN
                  lvICHoursPosting := lvICHoursPosting::Supplierside;
                  lvVendorPostingGroep := "Vendor Posting Group";
                END;
                IF ("Customer Posting Group" <> '') AND (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) THEN BEGIN
                  lvICHoursPosting := lvICHoursPosting::Supplierside;
                  lvCustomerPostingGroup := "Customer Posting Group";
                END;

                IF "Job No." <> '' THEN BEGIN
                  IF NOT "Skip WIP Check" THEN BEGIN
                    IF "Account No." <> ProjTypeRec.GetWipAccByPostingGrp(
                                                              ProjRec."Project Type",
                                                              DimValRec."Cost Type",
                                                              ProjRec."Project Status",
                                                              ProjSetupRec."Provisions at Closure",
                                                              lvCompName,
                                                              "Cost Type Cost Plus Line",
                                                              LvVendorCde,
                                                              lvICHoursPosting,
                                                              lvVendorPostingGroep,
                                                              lvCustomerPostingGroup)
                    THEN
                      FIELDERROR("Account No.",ErrorStr);
                  END;
                END;

                IF "Service Order No." <> '' THEN BEGIN
                  IF NOT "Skip WIP Check" THEN BEGIN
                    IF "Additional Cost (Service)" THEN BEGIN
                      ServOrderRec.TESTFIELD("Service Type (Other)");
                      lvServType := ServOrderRec."Service Type (Other)";
                    END ELSE BEGIN
                      ServOrderRec.TESTFIELD("Service Type");
                      lvServType := ServOrderRec."Service Type";
                    END;
                    IF "Account No." <> ServTypeRec.GetWipAccByPostingGrp(
                                                              lvServType,
                                                              DimValRec."Cost Type",
                                                              "Receiving Company",
                                                              "Cost Type Cost Plus Line",
                                                              LvVendorCde,
                                                              lvICHoursPosting,
                                                              lvVendorPostingGroep,
                                                              lvCustomerPostingGroup)
                    THEN
                      FIELDERROR("Account No.",ErrorStr);
                  END;
                END;
              END;
            END ELSE BEGIN
              IF "Job No." <> '' THEN BEGIN //weer afvragen
                IF NOT "Skip WIP Check" THEN BEGIN
                  RentalUnitWIP := (("Rental Unit" <>'') AND ("Rental Unit Line Type" <> 0));
                  IF ("Origin Type" = "Origin Type"::Project) AND
                     (ProjRec."Project Status" >= ProjRec."Project Status"::Finished) AND
                     (ProjSetupRec."Provisions at Closure" = TRUE) THEN
                  BEGIN
                    IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) AND
                       ((("Account No." <> ProjTypeRec."Provision Account Revenue") AND (NOT RentalUnitWIP)) OR
                        (("Account No." <> ProjTypeRec."Provision Account Rental UR") AND RentalUnitWIP) OR
                        (("Account No." <> LedgerbyProjTypeCustGr."Provision Account Revenue") AND
                         (LedgerbyProjTypeCustGr."Provision Account Revenue" <> '') AND (NOT RentalUnitWIP)))
                    THEN
                      FIELDERROR("Account No.",ErrorStr);
                  END ELSE BEGIN
                    ProjTypeRec.GET(ProjRec."Project Type");
                    ProjectTypeExtension.GetProjectTypeExtension(ProjTypeRec.Code);
                    CLEAR(LedgerbyProjTypeCustGr);
                    IF SalesHeader.GET("Document Type", GetOriginalSalesDocumentNo(GenJnlLine)) THEN
                      IF LedgerbyProjTypeCustGr.GET(ProjTypeRec.Code, SalesHeader."Customer Posting Group") THEN;
                    IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) THEN
                      IF (NOT RentalUnitWIP) THEN BEGIN  //*C017909.c
                        IF NOT "Advance Payment" THEN
                          IF ("Account No." = ProjTypeRec."Advance Payment Account") AND
                             ("Account No." <> ProjTypeRec."WIP Account Revenue") AND
                             ("Account No." <> ProjTypeRec."WIP Account Revenue Labor") AND
                             ("Account No." <> ProjTypeRec."WIP Account Revenue Material") AND
                             ("Account No." <> ProjTypeRec."WIP Account Revenue Subcontr.") AND
                             ("Account No." <> ProjTypeRec."WIP Account Revenue Plant") AND
                             ("Account No." <> ProjTypeRec."WIP Account Revenue Sundry") AND
                             ("Account No." <> ProjTypeRec."Interest Installments") AND
                             ("Account No." <> LedgerbyProjTypeCustGr."WIP Account Revenue") AND
                             ("Account No." <> LedgerbyProjTypeCustGr."WIP Account Revenue Labor") AND
                             ("Account No." <> LedgerbyProjTypeCustGr."WIP Account Revenue Material") AND
                             ("Account No." <> LedgerbyProjTypeCustGr."WIP Account Revenue Subcontr.") AND
                             ("Account No." <> LedgerbyProjTypeCustGr."WIP Account Revenue Plant") AND
                             ("Account No." <> LedgerbyProjTypeCustGr."WIP Account Revenue Sundry")
                          THEN
                            FIELDERROR("Account No.",ErrorStr);
                      END ELSE BEGIN
                        IF ("Account No." <> ProjTypeRec."Rental Unit Account Revenue") AND
                           ("Account No." <> ProjTypeRec."Rental Unit Service Cost Rev.") AND
                           ("Account No." <> ProjTypeRec."Rental Unit Acc Utilities Rev.") AND
                           ("Account No." <> ProjectTypeExtension."Rental Unit One-off Cost Rev.") AND
                           ("Account No." <> ProjectTypeExtension."Rental Unit Deposit Revenue") AND
                           ("Account No." <> LedgerbyProjTypeCustGr."Rental Unit Account Revenue") AND
                           ("Account No." <> LedgerbyProjTypeCustGr."Rental Unit Service Cost Rev.") AND
                           ("Account No." <> LedgerbyProjTypeCustGr."Rental Unit Acc Utilities Rev.")
                        THEN
                          FIELDERROR("Account No.",ErrorStr);
                      END;
                  END;
                END;
              END; // tot hier
            END;
          END;
        END;
      END;
    END;

    PROCEDURE lvCheckCompanyIC@11012001(GenJnlLine@11012000 : Record 81);
    BEGIN
      //**4PS
      IF GenJnlLine."Receiving Company" <> '' THEN BEGIN
        IF (NOT GenJnlLine.AccountIsSupplyingCurrentCompanyICAccount) AND (NOT GenJnlLine."Plant Invoice") THEN
          GlAccount.CHANGECOMPANY(GenJnlLine."Receiving Company")
        ELSE
          GlAccount.CHANGECOMPANY(COMPANYNAME);
        ProjSetupRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        ProjRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        ProjElemRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        DimValRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        ProjTypeRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
      END ELSE BEGIN
        GlAccount.CHANGECOMPANY(COMPANYNAME);
        ProjSetupRec.CHANGECOMPANY(COMPANYNAME);
        ProjRec.CHANGECOMPANY(COMPANYNAME);
        ProjElemRec.CHANGECOMPANY(COMPANYNAME);
        DimValRec.CHANGECOMPANY(COMPANYNAME);
        ProjTypeRec.CHANGECOMPANY(COMPANYNAME);
      END;

      ProjSetupRec.GET;
    END;

    PROCEDURE CheckInterestDate@1210190000(VAR IGenJnlLineRec@1210190004 : Record 81);
    VAR
      lvInterestSetupRec@1100485000 : Record 11012117;
      lvICAccInterestRec@1210190001 : Record 11012118;
      lvText11012000@1210190002 : TextConst 'ENU=may not be empty for posting on %4 ''%5'';NOR=kan ikke v‘re tomt for bokf›ring p† %4 ''%5'';SVE=f†r inte vara tomt f”r bokf”ring p† %4 ''%5''';
      lvText11012001@1210190000 : TextConst 'ENU=(%1) may not be greater than the de %2 (%3);NOR=(%1) kan ikke v‘re mer enn %2 (%3);SVE=(%1) f†r inte vara mer „n %2 (%3)';
      lvInterestCalcMgtCU@1210190003 : Codeunit 11012049;
    BEGIN
      //**4PS
      IF NOT lvInterestCalcMgtCU.PermissionInterestGranule() THEN
        EXIT;

      WITH IGenJnlLineRec DO BEGIN
        IF ("Interest Date" = 0D) THEN BEGIN
      //>>181018
      //    lvInterestSetupRec.GET;
          IF NOT lvInterestSetupRec.GET THEN EXIT;
      //<<181018
          IF ("Account No." <> '') AND ("Account Type" = "Account Type"::"G/L Account") THEN BEGIN
            IF lvICAccInterestRec.GET("Account No.") THEN BEGIN
              IF lvInterestSetupRec."Aut. fill empty Interest Date" THEN
                "Interest Date" := "Posting Date"
              ELSE
                FIELDERROR("Interest Date", STRSUBSTNO(lvText11012000, FIELDCAPTION("Account No."), "Account No."));
            END;
          END;
          IF ("Bal. Account No." <> '') AND ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") THEN BEGIN
            IF lvICAccInterestRec.GET("Bal. Account No.") THEN BEGIN
              IF lvInterestSetupRec."Aut. fill empty Interest Date" THEN
                "Interest Date" := "Posting Date"
              ELSE
                FIELDERROR("Interest Date", STRSUBSTNO(lvText11012000, FIELDCAPTION("Bal. Account No."), "Bal. Account No."));
            END;
          END;
        END;

        IF ("Interest Date" <> 0D) THEN BEGIN
          IF ("Interest Date" > "Posting Date") THEN
            FIELDERROR("Interest Date", STRSUBSTNO(lvText11012001, "Interest Date", FIELDCAPTION("Posting Date"), "Posting Date"));
          IF DateNotAllowed("Interest Date") THEN
            FIELDERROR("Interest Date",Text001);
        END;
      END;
    END;

    LOCAL PROCEDURE GetPurchSetup@1100485000();
    BEGIN
      //**4PS
      IF NOT PurchSetupRead THEN
        PurchSetup.GET;
      PurchSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetOriginalSalesDocumentNo@1100527004(GenJournalLine@1100527000 : Record 81) OriginalSalesDocumentNo : Code[20];
    VAR
      SalesInvoiceHeader@1100527002 : Record 112;
      SalesCrMemoHeader@1100527001 : Record 114;
    BEGIN
      //**4PS
      CASE GenJournalLine."Document Type" OF
        GenJournalLine."Document Type"::Invoice:
          IF SalesInvoiceHeader.GET(GenJournalLine."Document No.") THEN BEGIN
            IF SalesInvoiceHeader."Pre-Assigned No." <> '' THEN
              OriginalSalesDocumentNo := SalesInvoiceHeader."Pre-Assigned No."
            ELSE
              OriginalSalesDocumentNo := SalesInvoiceHeader."Order No.";
          END;
        GenJournalLine."Document Type"::"Credit Memo":
          IF SalesCrMemoHeader.GET(GenJournalLine."Document No.") THEN BEGIN
            IF SalesCrMemoHeader."Pre-Assigned No." <> '' THEN
              OriginalSalesDocumentNo := SalesCrMemoHeader."Pre-Assigned No."
            ELSE
              OriginalSalesDocumentNo := SalesCrMemoHeader."Return Order No.";
          END;
      END;

      IF OriginalSalesDocumentNo = '' THEN
        OriginalSalesDocumentNo := GenJournalLine."Document No.";
    END;

    LOCAL PROCEDURE IsCustomerPaymentToCrMemo@1000000004(GenJournalLine@1002 : Record 81) : Boolean;
    VAR
      GenJournalTemplate@1001 : Record 80;
      TestTemplType@1000000000 : Boolean;
    BEGIN
      //181203
      WITH GenJournalLine DO BEGIN
      //>>181211
        IF ("Account Type" <> "Account Type"::Customer) THEN
          EXIT(FALSE);
      //<<181211

        IF ("Account Type" = "Account Type"::Customer) AND
           ("Document Type" = "Document Type"::Payment) AND
           ("Applies-to Doc. Type" <> "Applies-to Doc. Type"::"Credit Memo") AND
           ("Applies-to Doc. No." <> '')
        THEN BEGIN
          GenJournalTemplate.GET("Journal Template Name");
          EXIT(GenJournalTemplate.Type = GenJournalTemplate.Type::"Cash Receipts");
        END;

      //>>190520
        IF ("Account Type" = "Account Type"::Customer) AND
           ("Document Type" = "Document Type"::Invoice)
        THEN BEGIN
          EXIT(TRUE);
        END;
      //<<190520
      //>>181211
        IF ("Account Type" = "Account Type"::Customer) AND
           ("Document Type" <> "Document Type"::Payment)
        THEN BEGIN
          IF NOT GenJournalTemplate.GET("Journal Template Name") THEN
            EXIT(TRUE);
          EXIT(GenJournalTemplate.Type = GenJournalTemplate.Type::"Cash Receipts");
        END;
      //<<181211

        EXIT(FALSE);
      END;
    END;

    BEGIN
    {
      4PS
      30-10-2000 A. Overeem.  Test added on project postings.
      10-11-2000 A. Overeem.  Strengthen test on work in proces G/L account.
      4PS01 JD, 8 aug 2007, Call 5990, "Posting Element Mandatory" also on project card

      151113 ITERO.DL RFC061  no posting to main projects are allowed, by setup
      181018 ORANGO.DL CheckInterestDate
      181203 ORANGO.DL #22137 correction of credit notes for both customer and vendors in corresponding journals
      181211 ORANGO.DL correction in IsCustomerPaymentToCrMemo()
      190513 #24163 Added code from 100-dev (4PSSE.sn SC004719)
      190520 correction
    }
    END.
  }
}

