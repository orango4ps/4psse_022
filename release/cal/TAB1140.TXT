OBJECT Table 1140 OAuth 2.0 Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               DeleteToken("Client ID");
               DeleteToken("Client Secret");
               DeleteToken("Access Token");
               DeleteToken("Refresh Token");
             END;

    ReplicateData=No;
    CaptionML=[ENU=OAuth 2.0 Setup;
               NOR=OAuth 2.0-oppsett;
               SVE=Inst„llningar f”r OAuth 2.0];
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 3   ;   ;Service URL         ;Text250       ;OnValidate=VAR
                                                                WebRequestHelper@1000 : Codeunit 1299;
                                                              BEGIN
                                                                IF "Service URL" <> '' THEN
                                                                  WebRequestHelper.IsSecureHttpUrl("Service URL");
                                                              END;

                                                   CaptionML=[ENU=Service URL;
                                                              NOR=Tjeneste-URL;
                                                              SVE=Servicesida] }
    { 4   ;   ;Redirect URL        ;Text250       ;CaptionML=[ENU=Redirect URL;
                                                              NOR=Omdirigerings-URL] }
    { 5   ;   ;Client ID           ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Client ID;
                                                              NOR=Klient-ID] }
    { 6   ;   ;Client Secret       ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Client Secret;
                                                              NOR=Klienthemmelighet] }
    { 7   ;   ;Access Token        ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Access Token;
                                                              NOR=Tilgangstoken] }
    { 8   ;   ;Refresh Token       ;GUID          ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Refresh Token;
                                                              NOR=Oppdateringstoken] }
    { 9   ;   ;Authorization URL Path;Text250     ;OnValidate=BEGIN
                                                                CheckAndAppendURLPath("Authorization URL Path");
                                                              END;

                                                   CaptionML=[ENU=Authorization URL Path;
                                                              NOR=Autorisasjons-URL-bane] }
    { 10  ;   ;Access Token URL Path;Text250      ;OnValidate=BEGIN
                                                                CheckAndAppendURLPath("Access Token URL Path");
                                                              END;

                                                   CaptionML=[ENU=Access Token URL Path;
                                                              NOR=URL-bane til tilgangstoken] }
    { 11  ;   ;Refresh Token URL Path;Text250     ;OnValidate=BEGIN
                                                                CheckAndAppendURLPath("Refresh Token URL Path");
                                                              END;

                                                   CaptionML=[ENU=Refresh Token URL Path;
                                                              NOR=URL-bane til oppdateringstoken] }
    { 12  ;   ;Scope               ;Text250       ;CaptionML=[ENU=Scope;
                                                              NOR=Omfang;
                                                              SVE=omfattning] }
    { 13  ;   ;Authorization Response Type;Text250;CaptionML=[ENU=Authorization Response Type;
                                                              NOR=Autorisasjonssvartype] }
    { 14  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=" ,Enabled,Disabled,Connected,Error";
                                                                    NOR=" ,Aktivert,Deaktivert,Tilkoblet,Feil";
                                                                    SVE=" ,Aktiverad,Inaktiverad,Ansluten,Fel"];
                                                   OptionString=[ ,Enabled,Disabled,Connected,Error] }
    { 15  ;   ;Token DataScope     ;Option        ;CaptionML=[ENU=Token DataScope;
                                                              NOR=DataScope-token];
                                                   OptionCaptionML=[ENU=Module,User,Company,UserAndCompany;
                                                                    NOR=Modul,Bruker,Selskap,BrukerOgSelskap];
                                                   OptionString=Module,User,Company,UserAndCompany }
    { 16  ;   ;Activity Log ID     ;Integer       ;CaptionML=[ENU=Activity Log ID;
                                                              NOR=Aktivitetslogg-ID] }
    { 17  ;   ;Daily Limit         ;Integer       ;CaptionML=[ENU=Daily Limit;
                                                              NOR=Daglig grense];
                                                   Editable=No }
    { 18  ;   ;Daily Count         ;Integer       ;CaptionML=[ENU=Daily Count;
                                                              NOR=Daglig antall];
                                                   Editable=No }
    { 19  ;   ;Latest Datetime     ;DateTime      ;CaptionML=[ENU=Latest Datetime;
                                                              NOR=Seneste dato/klokkeslett];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      OAuth20Mgt@1000 : Codeunit 1140;

    LOCAL PROCEDURE CheckAndAppendURLPath@1(VAR value@1000 : Text);
    BEGIN
      IF value <> '' THEN
        IF value[1] <> '/' THEN
          value := '/' + value;
    END;

    [NonDebuggableAttribute]
    PROCEDURE SetToken@22(VAR TokenKey@1001 : GUID;TokenValue@1000 : Text);
    BEGIN
      IF ISNULLGUID(TokenKey) THEN
        TokenKey := CREATEGUID;

      ISOLATEDSTORAGE.SET(TokenKey,OAuth20Mgt.EncryptForOnPrem(TokenValue),GetTokenDataScope);
    END;

    [NonDebuggableAttribute]
    PROCEDURE GetToken@21(TokenKey@1001 : GUID) TokenValue : Text;
    BEGIN
      TokenValue := '';
      IF NOT HasToken(TokenKey) THEN
        EXIT;

      ISOLATEDSTORAGE.GET(TokenKey,GetTokenDataScope,TokenValue);
      EXIT(OAuth20Mgt.DecryptForOnPrem(TokenValue));
    END;

    PROCEDURE DeleteToken@20(TokenKey@1000 : GUID);
    BEGIN
      IF NOT HasToken(TokenKey) THEN
        EXIT;

      ISOLATEDSTORAGE.DELETE(TokenKey,GetTokenDataScope);
    END;

    PROCEDURE HasToken@19(TokenKey@1001 : GUID) : Boolean;
    BEGIN
      EXIT(NOT ISNULLGUID(TokenKey) AND ISOLATEDSTORAGE.CONTAINS(TokenKey,GetTokenDataScope));
    END;

    [External]
    PROCEDURE GetTokenDataScope@16() : DataScope;
    BEGIN
      CASE "Token DataScope" OF
        "Token DataScope"::Company:
          EXIT(DATASCOPE::Company);
        "Token DataScope"::UserAndCompany:
          EXIT(DATASCOPE::CompanyAndUser);
        "Token DataScope"::User:
          EXIT(DATASCOPE::User);
        "Token DataScope"::Module:
          EXIT(DATASCOPE::Module);
      END;
    END;

    [External]
    PROCEDURE RequestAuthorizationCode@2();
    VAR
      Processed@1000 : Boolean;
    BEGIN
      OAuth20Mgt.CheckEncryption;

      OnBeforeRequestAuthoizationCode(Rec,Processed);
      IF Processed THEN
        EXIT;

      OAuth20Mgt.RequestAuthorizationCode(Rec);
    END;

    [NonDebuggableAttribute]
    [External]
    PROCEDURE RequestAccessToken@8(VAR MessageText@1006 : Text;AuthorizationCode@1000 : Text) Result : Boolean;
    VAR
      Processed@1002 : Boolean;
    BEGIN
      OnBeforeRequestAccessToken(Rec,AuthorizationCode,Result,MessageText,Processed);
      IF NOT Processed THEN
        Result := OAuth20Mgt.RequestAndSaveAccessToken(Rec,MessageText,AuthorizationCode);

      OnAfterRequestAccessToken(Rec,Result,MessageText);
    END;

    [External]
    PROCEDURE RefreshAccessToken@4(VAR MessageText@1000 : Text) Result : Boolean;
    VAR
      Processed@1002 : Boolean;
    BEGIN
      OnBeforeRefreshAccessToken(Rec,Result,MessageText,Processed);
      IF NOT Processed THEN
        Result := OAuth20Mgt.RefreshAndSaveAccessToken(Rec,MessageText);
    END;

    [External]
    PROCEDURE InvokeRequest@3(RequestJSON@1007 : Text;VAR ResponseJSON@1005 : Text;VAR HttpError@1006 : Text;RetryOnCredentialsFailure@1001 : Boolean) Result : Boolean;
    VAR
      Processed@1000 : Boolean;
    BEGIN
      OnBeforeInvokeRequest(Rec,RequestJSON,ResponseJSON,HttpError,Result,Processed,RetryOnCredentialsFailure);
      IF NOT Processed THEN
        Result := OAuth20Mgt.InvokeRequestBasic(Rec,RequestJSON,ResponseJSON,HttpError,RetryOnCredentialsFailure);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRequestAccessToken@100(OAuth20Setup@1000 : Record 1140;Result@1002 : Boolean;VAR MessageText@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRequestAuthoizationCode@5(OAuth20Setup@1000 : Record 1140;VAR Processed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRefreshAccessToken@7(VAR OAuth20Setup@1000 : Record 1140;VAR Result@1003 : Boolean;VAR MessageText@1002 : Text;VAR Processed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRequestAccessToken@9(VAR OAuth20Setup@1000 : Record 1140;AuthorizationCode@1001 : Text;VAR Result@1003 : Boolean;VAR MessageText@1004 : Text;VAR Processed@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInvokeRequest@23(VAR OAuth20Setup@1003 : Record 1140;RequestJSON@1002 : Text;VAR ResponseJSON@1001 : Text;VAR HttpError@1000 : Text;VAR Result@1006 : Boolean;VAR Processed@1004 : Boolean;RetryOnCredentialsFailure@1005 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

