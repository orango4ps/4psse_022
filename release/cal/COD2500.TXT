OBJECT Codeunit 2500 NavExtensionInstallationMgmt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Permissions=TableData 2000000153=rimd,
                TableData 2000000160=rimd;
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DotNet_NavAppALInstaller@1001 : Codeunit 3016;
      InstallerHasBeenCreated@1002 : Boolean;
      InstalledTxt@1004 : TextConst 'ENU=Installed;NOR=Installert;SVE=Installerad';
      NotInstalledTxt@1003 : TextConst 'ENU=Not Installed;NOR=Ikke installert;SVE=Ej installerad';
      FullVersionStringTxt@1007 : TextConst '@@@="%1=Version Major, %2=Version Minor, %3=Version build, %4=Version revision";ENU=%1.%2.%3.%4;NOR=%1.%2.%3.%4;SVE=%1.%2.%3.%4';
      NoRevisionVersionStringTxt@1006 : TextConst '@@@="%1=Version Major, %2=Version Minor, %3=Version build";ENU=%1.%2.%3;NOR=%1.%2.%3;SVE=%1.%2.%3';
      NoBuildVersionStringTxt@1005 : TextConst '@@@="%1=Version Major, %2=Version Minor";ENU=%1.%2;NOR=%1.%2;SVE=%1.%2';
      NullGuidTok@1008 : TextConst '@@@={Locked};ENU=00000000-0000-0000-0000-000000000000;NOR=00000000-0000-0000-0000-000000000000;SVE=00000000-0000-0000-0000-000000000000';
      PermissionErr@1009 : TextConst 'ENU=You do not have the required permissions to install the selected app. Contact your Partner or system administrator to install the app or assign you permissions.;NOR=Du har ikke de n›dvendige tillatelsene til † installere den valgte appen. Kontakt partner eller systemansvarlig for † installere appen eller gi deg tillatelser.';

    [External]
    PROCEDURE IsInstalled@1(PackageID@1000 : GUID) : Boolean;
    VAR
      NAVAppInstalledApp@1001 : Record 2000000153;
    BEGIN
      // Check if the user is entitled to make extension changes.
      IF (NOT NAVAppInstalledApp.READPERMISSION) OR (NOT NAVAppInstalledApp.WRITEPERMISSION) THEN
        ERROR(PermissionErr);

      NAVAppInstalledApp.SETFILTER("Package ID",'%1',PackageID);
      EXIT(NAVAppInstalledApp.FINDFIRST);
    END;

    [External]
    PROCEDURE IsInstalledByAppId@12(AppID@1000 : GUID) : Boolean;
    VAR
      NAVAppInstalledApp@1001 : Record 2000000153;
    BEGIN
      // Check if the user is entitled to make extension changes.
      IF (NOT NAVAppInstalledApp.READPERMISSION) OR (NOT NAVAppInstalledApp.WRITEPERMISSION) THEN
        ERROR(PermissionErr);

      NAVAppInstalledApp.SETFILTER("App ID",'%1',AppID);
      EXIT(NAVAppInstalledApp.FINDFIRST);
    END;

    [Internal]
    PROCEDURE InstallNavExtension@2(PackageID@1000 : GUID;Lcid@1001 : Integer);
    BEGIN
      AssertIsInitialized;
      DotNet_NavAppALInstaller.ALInstallNavApp(PackageID,Lcid);
    END;

    [External]
    PROCEDURE GetExtensionInstalledDisplayString@9(PackageId@1000 : GUID) : Text[15];
    BEGIN
      IF IsInstalled(PackageId) THEN
        EXIT(InstalledTxt);

      EXIT(NotInstalledTxt);
    END;

    [Internal]
    PROCEDURE GetDependenciesForExtensionToInstall@3(PackageID@1000 : GUID) : Text;
    BEGIN
      AssertIsInitialized;
      EXIT(DotNet_NavAppALInstaller.ALGetAppDependenciesToInstallString(PackageID));
    END;

    [Internal]
    PROCEDURE GetDependentForExtensionToUninstall@4(PackageID@1000 : GUID) : Text;
    BEGIN
      AssertIsInitialized;
      EXIT(DotNet_NavAppALInstaller.ALGetDependentAppsToUninstallString(PackageID));
    END;

    LOCAL PROCEDURE AssertIsInitialized@6();
    BEGIN
      IF NOT InstallerHasBeenCreated THEN BEGIN
        DotNet_NavAppALInstaller.NavAppALInstaller;
        InstallerHasBeenCreated := TRUE;
      END;
    END;

    [Internal]
    PROCEDURE UninstallNavExtension@7(PackageID@1000 : GUID);
    BEGIN
      AssertIsInitialized;
      DotNet_NavAppALInstaller.ALUninstallNavApp(PackageID);
    END;

    [External]
    PROCEDURE GetVersionDisplayString@5(Major@1000 : Integer;Minor@1001 : Integer;Build@1002 : Integer;Revision@1003 : Integer) : Text;
    BEGIN
      IF Build <= -1 THEN
        EXIT(STRSUBSTNO(NoBuildVersionStringTxt,Major,Minor));

      IF Revision <= -1 THEN
        EXIT(STRSUBSTNO(NoRevisionVersionStringTxt,Major,Minor,Build));

      EXIT(STRSUBSTNO(FullVersionStringTxt,Major,Minor,Build,Revision));
    END;

    [External]
    PROCEDURE GetLatestVersionPackageId@8(AppId@1000 : GUID) : GUID;
    VAR
      NavAppTable@1001 : Record 2000000160;
      Result@1002 : GUID;
    BEGIN
      NavAppTable.SETFILTER(ID,'%1',AppId);
      NavAppTable.SETCURRENTKEY(Name,"Version Major","Version Minor","Version Build","Version Revision");
      NavAppTable.ASCENDING(FALSE);
      Result := NullGuidTok;
      IF NavAppTable.FINDFIRST THEN
        Result := NavAppTable."Package ID";

      EXIT(Result);
    END;

    [External]
    PROCEDURE IsInstalledNoPermissionCheck@10(ExtensionName@1000 : Text[250]) : Boolean;
    VAR
      NAVAppInstalledApp@1001 : Record 2000000153;
    BEGIN
      NAVAppInstalledApp.SETFILTER(Name,'%1',ExtensionName);
      EXIT(NAVAppInstalledApp.FINDFIRST);
    END;

    [Internal]
    PROCEDURE UnpublishNavTenantExtension@11(PackageID@1000 : GUID);
    BEGIN
      AssertIsInitialized;
      DotNet_NavAppALInstaller.ALUnpublishNavTenantApp(PackageID);
    END;

    BEGIN
    END.
  }
}

