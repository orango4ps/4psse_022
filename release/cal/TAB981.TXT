OBJECT Table 981 Payment Registration Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=Payment Registration Buffer;
               NOR=Betalingsregistreringsbuffer;
               SVE=Betalningsregistreringsbuffert];
  }
  FIELDS
  {
    { 1   ;   ;Ledger Entry No.    ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Ledger Entry No.;
                                                              NOR=Postnummer;
                                                              SVE=Transaktionsnr] }
    { 2   ;   ;Source No.          ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Source No.;
                                                              NOR=Kildenr.;
                                                              SVE=Ursprungsnr] }
    { 3   ;   ;Document Type       ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Document Type;
                                                              NOR=Bilagstype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    NOR=" ,Betaling,Faktura,Kreditnota,Rentenota,Purring,Refusjon";
                                                                    SVE=" ,Betalning,Faktura,Kreditnota,RÑntefaktura,BetalningspÜminnelse,èterbetalning"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 4   ;   ;Document No.        ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
    { 5   ;   ;Description         ;Text100       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 6   ;   ;Due Date            ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Due Date;
                                                              NOR=Forfallsdato;
                                                              SVE=Fîrfallodatum] }
    { 7   ;   ;Name                ;Text100       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 8   ;   ;Remaining Amount    ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Remaining Amount;
                                                              NOR=Restbelõp;
                                                              SVE=èterstÜende belopp] }
    { 9   ;   ;Payment Made        ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Payment Made" THEN BEGIN
                                                                  "Amount Received" := 0;
                                                                  "Date Received" := 0D;
                                                                  "Remaining Amount" := "Original Remaining Amount";
                                                                  "External Document No." := '';
                                                                  EXIT;
                                                                END;

                                                                AutoFillDate;
                                                                IF "Amount Received" = 0 THEN
                                                                  SuggestAmountReceivedBasedOnDate;
                                                                UpdateRemainingAmount;
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Payment Made;
                                                              NOR=Betaling utfõrt;
                                                              SVE=Utfîrd betalning] }
    { 10  ;   ;Date Received       ;Date          ;OnValidate=BEGIN
                                                                IF "Date Received" <> 0D THEN
                                                                  VALIDATE("Payment Made",TRUE);
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Date Received;
                                                              NOR=Mottatt den;
                                                              SVE=Tillbaka datum] }
    { 11  ;   ;Amount Received     ;Decimal       ;OnValidate=VAR
                                                                MaximumRemainingAmount@1000 : Decimal;
                                                              BEGIN
                                                                IF "Limit Amount Received" THEN BEGIN
                                                                  MaximumRemainingAmount := GetMaximumPaymentAmountBasedOnDate;
                                                                  IF "Amount Received" > MaximumRemainingAmount THEN
                                                                    "Amount Received" := MaximumRemainingAmount;
                                                                END;

                                                                AutoFillDate;
                                                                "Payment Made" := TRUE;
                                                                UpdateRemainingAmount;
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Amount Received;
                                                              NOR=Belõp mottatt;
                                                              SVE=Inlevererat belopp] }
    { 12  ;   ;Original Remaining Amount;Decimal  ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Original Remaining Amount;
                                                              NOR=Opprinnelig restbelõp;
                                                              SVE=Ursprungligt ÜterstÜende belopp] }
    { 13  ;   ;Rem. Amt. after Discount;Decimal   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rem. Amt. after Discount;
                                                              NOR=Restbelõp etter rabatt;
                                                              SVE=èterstÜende belopp efter rabatt] }
    { 14  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                IF "Pmt. Discount Date" <> 0D THEN
                                                                  VALIDATE("Payment Made",TRUE);
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              NOR=Kont.rabattdato;
                                                              SVE=Kassarabattsdatum] }
    { 15  ;   ;Limit Amount Received;Boolean      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Limit Amount Received;
                                                              NOR=Grensebelõp mottatt;
                                                              SVE=BegrÑnsa mottaget belopp] }
    { 16  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method" WHERE (Use for Invoicing=CONST(Yes));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Payment Method Code;
                                                              NOR=BetalingsmÜte - kode;
                                                              SVE=BetalningssÑtt] }
    { 17  ;   ;Bal. Account Type   ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bal. Account Type;
                                                              NOR=Motkontotype;
                                                              SVE=Motkontotyp];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    NOR=Finanskonto,Bankkonto;
                                                                    SVE=Redov.konto,Bankkonto];
                                                   OptionString=G/L Account,Bank Account }
    { 18  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              NOR=Motkontonr.;
                                                              SVE=Motkonto] }
    { 19  ;   ;External Document No.;Code35       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=External Document No.;
                                                              NOR=Eksterndokumentnr.;
                                                              SVE=Externt dokumentnr] }
  }
  KEYS
  {
    {    ;Ledger Entry No.                        ;Clustered=Yes }
    {    ;Due Date                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DueDateMsg@1000 : TextConst 'ENU=The payment is overdue. You can calculate interest for late payments from customers by choosing the Finance Charge Memo button.;NOR=Betalingen er forfalt. Du kan beregne renter for forsinkede betalinger fra kunder ved Ü velge Rentenota-knappen.;SVE=Betalningen har fîrfallit. Du kan berÑkna rÑnta fîr sena betalningar frÜn kunder genom att vÑlja knappen RÑntefaktura.';
      PmtDiscMsg@1001 : TextConst 'ENU=Payment Discount Date is earlier than Date Received. Payment will be registered as partial payment.;NOR=Kontantrabattdato er tidligere enn mottaksdato. Betaling vil bli registrert som delvis betaling.;SVE=Kassarabattdatumet Ñr tidigare Ñn Tillbaka datum. Betalningen kommer att registreras som en delbetalning.';

    [External]
    PROCEDURE PopulateTable@1();
    VAR
      CustLedgerEntry@1000 : Record 21;
      Customer@1001 : Record 18 SECURITYFILTERING(Filtered);
      PaymentRegistrationSetup@1002 : Record 980;
    BEGIN
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup.TESTFIELD("Bal. Account No.");

      RESET;
      DELETEALL;

      CustLedgerEntry.SETFILTER("Document Type",'<>%1',CustLedgerEntry."Document Type"::Payment);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      IF CustLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          IF Customer.GET(CustLedgerEntry."Customer No.") THEN BEGIN
            CustLedgerEntry.CALCFIELDS("Remaining Amount");

            INIT;
            "Ledger Entry No." := CustLedgerEntry."Entry No.";
            "Source No." := CustLedgerEntry."Customer No.";
            Name := Customer.Name;
            "Document No." := CustLedgerEntry."Document No.";
            "Document Type" := CustLedgerEntry."Document Type";
            Description := CustLedgerEntry.Description;
            "Due Date" := CustLedgerEntry."Due Date";
            "Remaining Amount" := CustLedgerEntry."Remaining Amount";
            "Original Remaining Amount" := CustLedgerEntry."Remaining Amount";
            "Pmt. Discount Date" := CustLedgerEntry."Pmt. Discount Date";
            "Rem. Amt. after Discount" := "Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible";
            "Payment Method Code" := GetO365DefalutPaymentMethodCode;
            "Bal. Account Type" := PaymentRegistrationSetup."Bal. Account Type";
            "Bal. Account No." := PaymentRegistrationSetup."Bal. Account No.";
            INSERT;
          END;
        UNTIL CustLedgerEntry.NEXT = 0;
      END;

      IF FINDSET THEN;
    END;

    [External]
    PROCEDURE Navigate@3();
    VAR
      CustLedgerEntry@1001 : Record 21;
      Navigate@1000 : Page 344;
    BEGIN
      CustLedgerEntry.GET("Ledger Entry No.");
      Navigate.SetDoc(CustLedgerEntry."Posting Date",CustLedgerEntry."Document No.");
      Navigate.RUN;
    END;

    [External]
    PROCEDURE Reload@15();
    VAR
      TempDataSavePmtRegnBuf@1001 : TEMPORARY Record 981;
      TempRecSavePmtRegnBuf@1000 : TEMPORARY Record 981;
    BEGIN
      TempRecSavePmtRegnBuf.COPY(Rec,TRUE);

      SaveUserValues(TempDataSavePmtRegnBuf);

      PopulateTable;

      RestoreUserValues(TempDataSavePmtRegnBuf);

      COPY(TempRecSavePmtRegnBuf);
      IF GET("Ledger Entry No.") THEN;
    END;

    LOCAL PROCEDURE SaveUserValues@12(VAR TempSavePmtRegnBuf@1000 : TEMPORARY Record 981);
    VAR
      TempWorkPmtRegnBuf@1001 : TEMPORARY Record 981;
    BEGIN
      TempWorkPmtRegnBuf.COPY(Rec,TRUE);
      TempWorkPmtRegnBuf.RESET;
      TempWorkPmtRegnBuf.SETRANGE("Payment Made",TRUE);
      IF TempWorkPmtRegnBuf.FINDSET THEN
        REPEAT
          TempSavePmtRegnBuf := TempWorkPmtRegnBuf;
          TempSavePmtRegnBuf.INSERT;
        UNTIL TempWorkPmtRegnBuf.NEXT = 0;
    END;

    LOCAL PROCEDURE RestoreUserValues@13(VAR TempSavePmtRegnBuf@1001 : TEMPORARY Record 981);
    BEGIN
      IF TempSavePmtRegnBuf.FINDSET THEN
        REPEAT
          IF GET(TempSavePmtRegnBuf."Ledger Entry No.") THEN BEGIN
            "Payment Made" := TempSavePmtRegnBuf."Payment Made";
            "Date Received" := TempSavePmtRegnBuf."Date Received";
            "Pmt. Discount Date" := TempSavePmtRegnBuf."Pmt. Discount Date";
            SuggestAmountReceivedBasedOnDate;
            "Remaining Amount" := TempSavePmtRegnBuf."Remaining Amount";
            "Amount Received" := TempSavePmtRegnBuf."Amount Received";
            "External Document No." := TempSavePmtRegnBuf."External Document No.";
            MODIFY;
          END;
        UNTIL TempSavePmtRegnBuf.NEXT = 0;
    END;

    [External]
    PROCEDURE GetPmtDiscStyle@5() : Text;
    BEGIN
      IF ("Pmt. Discount Date" < "Date Received") AND ("Remaining Amount" <> 0) AND ("Date Received" < "Due Date") THEN
        EXIT('Unfavorable');
      EXIT('');
    END;

    [External]
    PROCEDURE GetDueDateStyle@8() : Text;
    BEGIN
      IF "Due Date" < "Date Received" THEN
        EXIT('Unfavorable');
      EXIT('');
    END;

    [External]
    PROCEDURE GetWarning@6() : Text;
    BEGIN
      IF "Date Received" <= "Pmt. Discount Date" THEN
        EXIT('');

      IF "Date Received" > "Due Date" THEN
        EXIT(DueDateMsg);

      IF "Remaining Amount" <> 0 THEN
        EXIT(PmtDiscMsg);

      EXIT('');
    END;

    LOCAL PROCEDURE AutoFillDate@2();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      IF "Date Received" = 0D THEN BEGIN
        PaymentRegistrationSetup.GET(USERID);
        IF PaymentRegistrationSetup."Auto Fill Date Received" THEN
          "Date Received" := WORKDATE;
      END;
    END;

    LOCAL PROCEDURE SuggestAmountReceivedBasedOnDate@4();
    BEGIN
      "Amount Received" := GetMaximumPaymentAmountBasedOnDate;
      IF "Date Received" = 0D THEN
        EXIT;
      "Remaining Amount" := 0;
    END;

    LOCAL PROCEDURE GetMaximumPaymentAmountBasedOnDate@9() : Decimal;
    BEGIN
      IF "Date Received" = 0D THEN
        EXIT(0);

      IF "Date Received" <= "Pmt. Discount Date" THEN
        EXIT("Rem. Amt. after Discount");

      EXIT("Original Remaining Amount");
    END;

    LOCAL PROCEDURE GetO365DefalutPaymentMethodCode@10() : Code[10];
    VAR
      O365SalesInitialSetup@1000 : Record 2110;
    BEGIN
      IF O365SalesInitialSetup.GET THEN
        EXIT(O365SalesInitialSetup."Default Payment Method Code");
    END;

    LOCAL PROCEDURE UpdateRemainingAmount@7();
    BEGIN
      IF "Date Received" = 0D THEN
        EXIT;
      IF ABS("Amount Received") >= ABS("Original Remaining Amount") THEN
        "Remaining Amount" := 0
      ELSE
        IF "Date Received" <= "Pmt. Discount Date" THEN BEGIN
          IF "Amount Received" >= "Rem. Amt. after Discount" THEN
            "Remaining Amount" := 0
          ELSE
            "Remaining Amount" := "Original Remaining Amount" - "Amount Received";
        END ELSE
          "Remaining Amount" := "Original Remaining Amount" - "Amount Received";
    END;

    BEGIN
    END.
  }
}

