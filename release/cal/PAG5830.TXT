OBJECT Page 5830 Demand Overview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    AccessByPermission=TableData 5900=R;
    CaptionML=[ENU=Demand Overview;
               NOR=Behovsoversikt;
               SVE=Behovs”versikt];
    ApplicationArea=#Service;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table5830;
    SourceTableView=SORTING(Item No.,Date,Attached to Entry No.,Type);
    PageType=Worksheet;
    UsageCategory=ReportsAndAnalysis;
    AdditionalSearchTermsML=[ENU=supply planning,availability overview;
                             NOR=forsyningsplanlegging,tilgjengelighetsoversikt;
                             SVE=leveransplanering,dispositions”versikt];
    SourceTableTemporary=Yes;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             DemandNoCtrlEnable := TRUE;
             MatchCriteria := TRUE;
           END;

    OnOpenPage=BEGIN
                 InitTempTable;

                 SETRANGE("Matches Criteria");
                 IF MatchCriteria THEN
                   SETRANGE("Matches Criteria",TRUE);
                 DemandNoCtrlEnable := DemandType <> DemandType::" ";
                 CurrPage.UPDATE(FALSE);
               END;

    OnAfterGetRecord=BEGIN
                       TypeIndent := 0;
                       ItemNoHideValue := Type <> Type::Item;
                       IF Type = Type::Item THEN
                         ItemNoEmphasize := "Matches Criteria";

                       TypeEmphasize := "Matches Criteria" AND (Type IN [Type::Item,Type::"As of Date"]);
                       TypeIndent := Level;

                       SourceTypeText := FORMAT("Source Type");
                       SourceTypeTextOnFormat(SourceTypeText);

                       IF Type IN [Type::Item,Type::"As of Date"] THEN BEGIN
                         QuantityText := '';
                         ReservedQuantityText := '';
                       END ELSE BEGIN
                         QuantityText := FORMAT(Quantity);
                         ReservedQuantityText := FORMAT("Reserved Quantity");
                       END;

                       SupplyRunningTotalHideValue := Type = Type::Item;
                       SourceOrderStatusHideValue := Type = Type::Item;
                       RunningTotalHideValue := Type = Type::Item;
                       InventoryRunningTotalHideValue := Type = Type::Item;
                       DemandRunningTotalHideValue := Type = Type::Item;

                       DateEmphasize := "Running Total" < 0;
                       DescriptionEmphasize := Type = Type::Item;
                       SupplyRunningTotalEmphasize := Type = Type::"As of Date";
                       DemandRunningTotalEmphasize := Type = Type::"As of Date";
                       RunningTotalEmphasize := Type = Type::"As of Date";
                       InventoryRunningTotalEmphasize := Type = Type::"As of Date";
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 65      ;1   ;Action    ;
                      Name=Calculate;
                      CaptionML=[ENU=Calculate;
                                 NOR=Beregn;
                                 SVE=Ber„kna];
                      ToolTipML=[ENU="Update the window with any demand. ";
                                 NOR="Oppdater vinduet med alle typer ettersp›rsel. ";
                                 SVE=Uppdatera f”nstret med eventuella behov.];
                      ApplicationArea=#Service;
                      Promoted=Yes;
                      Image=Calculate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalculationOfDemand := TRUE;
                                 InitTempTable;
                                 IsCalculated := TRUE;
                                 SETRANGE("Matches Criteria");
                                 IF MatchCriteria THEN
                                   SETRANGE("Matches Criteria",TRUE);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 37  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=Allm„nt] }

    { 39  ;2   ;Field     ;
                CaptionML=[ENU=Start Date;
                           NOR=Startdato;
                           SVE=Startdatum];
                ToolTipML=[ENU=Specifies the start date of the period for which you want to calculate demand.;
                           NOR=Angir startdatoen for perioden du vil beregne behovet for.;
                           SVE=Anger startdatumet f”r den period som du vill ber„kna efterfr†gan f”r.];
                ApplicationArea=#Service;
                SourceExpr=StartDate;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;
                            }

    { 41  ;2   ;Field     ;
                CaptionML=[ENU=End Date;
                           NOR=Sluttdato;
                           SVE=Slutdatum];
                ToolTipML=[ENU=Specifies the end date of the period for which you want to calculate demand. Enter a date that is later than the start date.;
                           NOR=Angir sluttdatoen for perioden du vil beregne behovet for. Angi en dato som er senere enn startdatoen.;
                           SVE=Anger slutdatumet f”r den period som du vill ber„kna efterfr†gan f”r. Ange ett datum som infaller senare „n startdatumet.];
                ApplicationArea=#Service;
                SourceExpr=EndDate;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;
                            }

    { 43  ;2   ;Field     ;
                CaptionML=[ENU=Demand Type;
                           NOR=Behovstype;
                           SVE=Behovstyp];
                ToolTipML=[ENU=Specifies a list of the types of orders for which you can calculate demand. Select one order type from the list:;
                           NOR=Angir en liste over ordretypene som du kan beregne behov for. Velg ‚n ordretype fra listen:;
                           SVE=Anger en lista ”ver de typer av order f”r vilka du kan ber„kna efterfr†gan. V„lj en ordertyp i listan:];
                OptionCaptionML=[ENU=" All Demand,Sale,Production,Job,Service,Assembly";
                                 NOR=" Alle behov,Salg,Produksjon,Prosjekt,Service,Montering";
                                 SVE=" Alla behov,F”rs„ljning,Produktion,Projekt,Service,Montering"];
                ApplicationArea=#Service;
                SourceExpr=DemandType;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                             DemandNoCtrlEnable := DemandType <> DemandType::" ";
                           END;
                            }

    { 45  ;2   ;Field     ;
                Name=DemandNoCtrl;
                CaptionML=[ENU=Demand No.;
                           NOR=Behovsnr.;
                           SVE=Behovsnr];
                ToolTipML=[ENU=Specifies the number of the item for which the demand calculation was initiated.;
                           NOR=Angir nummeret for varen som behovsberegningen ble startet for.;
                           SVE=Anger numret p† den artikel som behovsber„kningen initierades f”r.];
                ApplicationArea=#Service;
                SourceExpr=DemandNo;
                Enabled=DemandNoCtrlEnable;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           SalesHeader@1007 : Record 36;
                           ProdOrder@1006 : Record 5405;
                           Job@1005 : Record 11072003;
                           ServHeader@1004 : Record 5900;
                           AsmHeader@1010 : Record 900;
                           SalesList@1000 : Page 45;
                           ProdOrderList@1001 : Page 99000815;
                           JobList@1002 : Page 11072004;
                           ServiceOrders@1003 : Page 9318;
                           AsmOrders@1011 : Page 902;
                         BEGIN
                           CASE DemandType OF
                             DemandType::Sales:
                               BEGIN
                                 SalesHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                                 SalesList.SETTABLEVIEW(SalesHeader);
                                 SalesList.LOOKUPMODE := TRUE;
                                 IF SalesList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   SalesList.GETRECORD(SalesHeader);
                                   Text := SalesHeader."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Production:
                               BEGIN
                                 ProdOrder.SETRANGE(Status,ProdOrder.Status::Planned,ProdOrder.Status::Released);
                                 ProdOrderList.SETTABLEVIEW(ProdOrder);
                                 ProdOrderList.LOOKUPMODE := TRUE;
                                 IF ProdOrderList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   ProdOrderList.GETRECORD(ProdOrder);
                                   Text := ProdOrder."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Services:
                               BEGIN
                                 ServHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                                 ServiceOrders.SETTABLEVIEW(ServHeader);
                                 ServiceOrders.LOOKUPMODE := TRUE;
                                 IF ServiceOrders.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   ServiceOrders.GETRECORD(ServHeader);
                                   Text := ServHeader."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Jobs:
                               BEGIN
                                 Job.SETRANGE(Status,Job.Status::Open);
                                 JobList.SETTABLEVIEW(Job);
                                 JobList.LOOKUPMODE := TRUE;
                                 IF JobList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   JobList.GETRECORD(Job);
                                   Text := Job."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Assembly:
                               BEGIN
                                 AsmHeader.SETRANGE("Document Type",AsmHeader."Document Type"::Order);
                                 AsmOrders.SETTABLEVIEW(AsmHeader);
                                 AsmOrders.LOOKUPMODE := TRUE;
                                 IF AsmOrders.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   AsmOrders.GETRECORD(AsmHeader);
                                   Text := AsmHeader."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                           END;
                         END;
                          }

    { 55  ;2   ;Field     ;
                CaptionML=[ENU=Calculated;
                           NOR=Beregnet;
                           SVE=Ber„knat];
                ToolTipML=[ENU=Specifies whether the demand overview has been calculated. The check box is selected after you choose the Calculate button.;
                           NOR=Angir om behovsoversikten har blitt beregnet. Det settes inn en hake i avmerkingsboksen n†r du velger knappen Beregn.;
                           SVE=Anger om behovs”versikten har ber„knats. Kryssrutan markeras n„r du v„ljer knappen Ber„kna.];
                ApplicationArea=#Service;
                SourceExpr=IsCalculated;
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                IndentationColumnName=TypeIndent;
                IndentationControls=Type;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the identifier number for the item.;
                           NOR=Angir varens identifikasjonsnummer.;
                           SVE=Anger artikelns ID-nummer.];
                ApplicationArea=#Service;
                SourceExpr="Item No.";
                Editable=FALSE;
                HideValue=ItemNoHideValue;
                Style=Strong;
                StyleExpr=ItemNoEmphasize }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the line in the Demand Overview window is related to the lines where the demand overview was calculated.;
                           NOR=Angir om linjen i vinduet Behovsoversikt er knyttet til linjene som behovsoversikten ble beregnet fra.;
                           SVE=Anger om raden i f”nstret Behovs”versikt avser raderna d„r behovs”versikten ber„knades.];
                ApplicationArea=#Service;
                SourceExpr="Matches Criteria";
                Visible=FALSE;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of availability being calculated.;
                           NOR=Angir typen tilgjengelighet som blir beregnet.;
                           SVE=Anger vilken typ av tillg„nglighet som ber„knas.];
                ApplicationArea=#Service;
                SourceExpr=Type;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TypeEmphasize }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date of the availability calculation.;
                           NOR=Angir datoen for tilgjengelighetsberegningen.;
                           SVE=Anger datumet f”r tillg„nglighetsber„kningen.];
                ApplicationArea=#Service;
                SourceExpr=Date;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=DateEmphasize }

    { 12  ;2   ;Field     ;
                ApplicationArea=#Service;
                SourceExpr=SourceTypeText;
                CaptionClass=FIELDCAPTION("Source Type");
                Editable=FALSE;
                HideValue=SourceTypeHideValue }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the order status of the item for which availability is being calculated.;
                           NOR=Angir ordrestatusen for varen som det beregnes tilgjengelighet for.;
                           SVE=Anger orderstatusen f”r den artikel vars tillg„nglighet ber„knas.];
                ApplicationArea=#Service;
                SourceExpr="Source Order Status";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=SourceOrderStatusHideValue }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the identifier code of the source.;
                           NOR=Angir identifikasjonskoden for kilden.;
                           SVE=Anger ID-koden f”r k„llan.];
                ApplicationArea=#Service;
                SourceExpr="Source ID";
                Visible=FALSE;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the description of the item for which availability is being calculated.;
                           NOR=Angir beskrivelsen av varen som det beregnes tilgjengelighet for.;
                           SVE=Anger beskrivningen av den artikel vars tillg„nglighet ber„knas.];
                ApplicationArea=#Service;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=DescriptionEmphasize }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the location code of the item for which availability is being calculated.;
                           NOR=Angir lokasjonskoden for varen som det beregnes tilgjengelighet for.;
                           SVE=Anger lagerst„llekoden f”r den artikel vars tillg„nglighet ber„knas.];
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the variant of the item on the line.;
                           NOR=Angir varianten for varen p† linjen.;
                           SVE=Anger varianten av artikeln p† raden.];
                ApplicationArea=#Planning;
                SourceExpr="Variant Code";
                Editable=FALSE }

    { 24  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           NOR=Antall;
                           SVE=Antal];
                ToolTipML=[ENU=Specifies how many units of the item are demanded.;
                           NOR=Angir hvor mange enheter av varen som kreves.;
                           SVE=Anger hur m†nga enheter av artikeln som efterfr†gas.];
                ApplicationArea=#Service;
                SourceExpr=QuantityText;
                CaptionClass=FIELDCAPTION(Quantity);
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Reserved Quantity;
                           NOR=Reservert antall;
                           SVE=Reserverat antal];
                ToolTipML=[ENU=Specifies how many units of the demanded item are reserved.;
                           NOR=Angir hvor mange enheter av den etterspurte varen som er reservert.;
                           SVE=Anger hur m†nga enheter av den efterfr†gade artikeln som reserveras.];
                ApplicationArea=#Reservation;
                SourceExpr=ReservedQuantityText;
                CaptionClass=FIELDCAPTION("Reserved Quantity");
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total count of items from inventory, supply, and demand.;
                           NOR=Angir totalt antall varer fra lager, forsyning og behov.;
                           SVE=Anger totalt antal artiklar fr†n lager, leverans och behov.];
                ApplicationArea=#Service;
                SourceExpr="Running Total";
                CaptionClass=FIELDCAPTION("Running Total");
                Editable=FALSE;
                HideValue=RunningTotalHideValue;
                Style=Strong;
                StyleExpr=RunningTotalEmphasize }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the count of items in inventory.;
                           NOR=Angir antall varer p† lager.;
                           SVE=Anger antalet artiklar i lager.];
                ApplicationArea=#Service;
                SourceExpr="Inventory Running Total";
                CaptionClass=FIELDCAPTION("Inventory Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=InventoryRunningTotalHideValue;
                Style=Strong;
                StyleExpr=InventoryRunningTotalEmphasize }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the count of items in supply.;
                           NOR=Angir antall varer p† i forsyningen.;
                           SVE=Anger antalet artiklar i leverans.];
                ApplicationArea=#Service;
                SourceExpr="Supply Running Total";
                CaptionClass=FIELDCAPTION("Supply Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=SupplyRunningTotalHideValue;
                Style=Strong;
                StyleExpr=SupplyRunningTotalEmphasize }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the count of items in demand.;
                           NOR=Angir antall varer i ettersp›rselen.;
                           SVE=Anger antalet artiklar i efterfr†gan.];
                ApplicationArea=#Service;
                SourceExpr="Demand Running Total";
                CaptionClass=FIELDCAPTION("Demand Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=DemandRunningTotalHideValue;
                Style=Strong;
                StyleExpr=DemandRunningTotalEmphasize }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           NOR=Filtre;
                           SVE=Filter] }

    { 70  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           NOR=Varefilter;
                           SVE=Artikelfilter];
                ToolTipML=[ENU=Specifies the item number or a filter on the item numbers that you want to trace.;
                           NOR=Angir varenummeret eller et filter p† varenumrene du vil spore.;
                           SVE=Anger artikelnumret eller ett filter f”r de artikelnummer som du vill sp†ra.];
                ApplicationArea=#Service;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           Item@1001 : Record 27;
                           ItemList@1000 : Page 31;
                         BEGIN
                           Item.SETRANGE(Type,Item.Type::Inventory);
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := TRUE;
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           NOR=Lokasjonsfilter;
                           SVE=Lagerst„llefilter];
                ToolTipML=[ENU=Specifies the location you want to show item availability for.;
                           NOR=Angir lokasjonen du vil vise varetilgjengelighet for.;
                           SVE=Anger lagerst„llet som du vill visa artikeldisposition f”r.];
                ApplicationArea=#Location;
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           Location@1001 : Record 14;
                           LocationList@1000 : Page 15;
                         BEGIN
                           LocationList.SETTABLEVIEW(Location);
                           LocationList.LOOKUPMODE := TRUE;
                           IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             LocationList.GETRECORD(Location);
                             Text := Location.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 49  ;2   ;Field     ;
                CaptionML=[ENU=Variant Filter;
                           NOR=Variantfilter;
                           SVE=Variantfilter];
                ToolTipML=[ENU=Specifies the variant code or a filter on the variant code that you want to trace.;
                           NOR=Angir variantkoden eller et filter p† variantkoden du vil spore.;
                           SVE=Anger variantkoden eller ett filter f”r den variantkod som du vill sp†ra.];
                ApplicationArea=#Planning,#Service;
                SourceExpr=VariantFilter;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           ItemVariant@1001 : Record 5401;
                           ItemVariants@1000 : Page 5401;
                         BEGIN
                           ItemVariant.SETFILTER("Item No.",ItemFilter);
                           ItemVariants.SETTABLEVIEW(ItemVariant);
                           ItemVariants.LOOKUPMODE := TRUE;
                           IF ItemVariants.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemVariants.GETRECORD(ItemVariant);
                             Text := ItemVariant.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

  }
  CODE
  {
    VAR
      TempAvailCalcOverview@1011 : TEMPORARY Record 5830;
      CalcAvailOverview@1010 : Codeunit 5830;
      ItemFilter@1008 : Code[250];
      LocationFilter@1007 : Code[250];
      VariantFilter@1006 : Code[250];
      StartDate@1005 : Date;
      EndDate@1004 : Date;
      DemandType@1003 : ' ,Sales,Production,Jobs,Services,Assembly';
      DemandNo@1002 : Code[20];
      IsCalculated@1001 : Boolean;
      MatchCriteria@1000 : Boolean;
      Text001@1026 : TextConst 'ENU=Sales;NOR=Salg;SVE=F”rs„ljning';
      Text002@1025 : TextConst 'ENU=Production;NOR=Produksjon;SVE=Produktion';
      Text003@1024 : TextConst 'ENU=Purchase;NOR=Kj›p;SVE=Ink”p';
      Text004@1023 : TextConst 'ENU=Inventory;NOR=Beholdning;SVE=Lager';
      Text005@1022 : TextConst 'ENU=Service;NOR=Service;SVE=Service';
      Text006@1021 : TextConst 'ENU=Job;NOR=Jobb;SVE=Projekt';
      Text007@1020 : TextConst 'ENU=Prod. Comp.;NOR=Prod.komp.;SVE=Prod.komp.';
      Text008@1019 : TextConst 'ENU=Transfer;NOR=Overf›ring;SVE=™verf”ring';
      Text009@1009 : TextConst 'ENU=Assembly;NOR=Montering;SVE=Montering';
      Text020@1018 : TextConst 'ENU=Expanding...\;NOR=Utvider ...\;SVE=Expanderar...\';
      Text021@1017 : TextConst 'ENU=Status    #1###################\;NOR=Status    #1###################\;SVE=Status    #1###################\';
      Text022@1016 : TextConst 'ENU=Setting Filters;NOR=Angi filtre;SVE=St„ller in filter';
      Text023@1015 : TextConst 'ENU=Fetching Items;NOR=Hente varer;SVE=H„mtar artiklar';
      Text025@1013 : TextConst 'ENU=Fetching Specific Entries in Dates;NOR=Hente bestemte poster i datoer;SVE=H„mtar specifika transaktioner i datum';
      Text026@1012 : TextConst 'ENU=Displaying results;NOR=Vise resultater;SVE=Visar resultat';
      DemandNoCtrlEnable@2080 : Boolean INDATASET;
      ItemNoHideValue@1153 : Boolean INDATASET;
      ItemNoEmphasize@8303 : Boolean INDATASET;
      TypeEmphasize@6671 : Boolean INDATASET;
      TypeIndent@9080 : Integer INDATASET;
      SourceTypeHideValue@1193 : Boolean INDATASET;
      SourceTypeText@4593 : Text[1024] INDATASET;
      SourceOrderStatusHideValue@6400 : Boolean INDATASET;
      DescriptionEmphasize@4350 : Boolean INDATASET;
      QuantityText@1128 : Text[1024] INDATASET;
      DateEmphasize@1027 : Boolean INDATASET;
      ReservedQuantityText@8095 : Text[1024] INDATASET;
      RunningTotalHideValue@1102 : Boolean INDATASET;
      RunningTotalEmphasize@9683 : Boolean INDATASET;
      InventoryRunningTotalHideValue@9121 : Boolean INDATASET;
      InventoryRunningTotalEmphasize@4919 : Boolean INDATASET;
      SupplyRunningTotalHideValue@1903 : Boolean INDATASET;
      SupplyRunningTotalEmphasize@6245 : Boolean INDATASET;
      DemandRunningTotalHideValue@9127 : Boolean INDATASET;
      DemandRunningTotalEmphasize@6320 : Boolean INDATASET;
      CalculationOfDemand@1014 : Boolean;

    LOCAL PROCEDURE ApplyUserFilters@6(VAR AvailCalcOverview@1000 : Record 5830);
    BEGIN
      AvailCalcOverview.RESET;
      AvailCalcOverview.SETFILTER("Item No.",ItemFilter);
      IF (StartDate <> 0D) OR (EndDate <> 0D) THEN BEGIN
        IF EndDate <> 0D THEN
          AvailCalcOverview.SETRANGE(Date,StartDate,EndDate)
        ELSE
          AvailCalcOverview.SETRANGE(Date,StartDate,DMY2DATE(31,12,9999));
      END;
      IF LocationFilter <> '' THEN
        AvailCalcOverview.SETFILTER("Location Code",LocationFilter);
      IF VariantFilter <> '' THEN
        AvailCalcOverview.SETFILTER("Variant Code",VariantFilter);
    END;

    [External]
    PROCEDURE InitTempTable@1();
    VAR
      AvailCalcOverviewFilters@1000 : Record 5830;
    BEGIN
      IF NOT CalculationOfDemand THEN
        EXIT;
      AvailCalcOverviewFilters.COPY(Rec);
      ApplyUserFilters(TempAvailCalcOverview);
      CalcAvailOverview.SetParam(DemandType,DemandNo);
      CalcAvailOverview.RUN(TempAvailCalcOverview);
      TempAvailCalcOverview.RESET;
      RESET;
      DELETEALL;
      IF TempAvailCalcOverview.FIND('-') THEN
        REPEAT
          IF TempAvailCalcOverview.Level = 0 THEN BEGIN
            Rec := TempAvailCalcOverview;
            INSERT;
          END;
        UNTIL TempAvailCalcOverview.NEXT = 0;
      COPYFILTERS(AvailCalcOverviewFilters);
      ExpandAll(TempAvailCalcOverview);
      COPY(AvailCalcOverviewFilters);
      IF FIND('-') THEN;
      IsCalculated := TRUE;
    END;

    LOCAL PROCEDURE ExpandAll@12(VAR AvailCalcOverview@1000 : Record 5830);
    VAR
      AvailCalcOverviewFilters@1001 : Record 5830;
      Window@1002 : Dialog;
    BEGIN
      Window.OPEN(Text020 + Text021);
      AvailCalcOverviewFilters.COPY(Rec);

      // Set Filters
      Window.UPDATE(1,Text022);
      AvailCalcOverview.RESET;
      AvailCalcOverview.DELETEALL;
      ApplyUserFilters(AvailCalcOverview);
      CalcAvailOverview.SetParam(DemandType,DemandNo);

      // Fetching Items
      Window.UPDATE(1,Text023);
      RESET;
      IF FIND('+') THEN
        REPEAT
          IF Type = Type::Item THEN BEGIN
            AvailCalcOverview := Rec;
            IF CalcAvailOverview.EntriesExist(AvailCalcOverview) THEN BEGIN
              AvailCalcOverview.INSERT;
              CalcAvailOverview.CalculateItem(AvailCalcOverview);
            END;
          END;
        UNTIL NEXT(-1) = 0;

      // Fetch Entries in Dates
      Window.UPDATE(1,Text025);
      IF AvailCalcOverview.FIND('+') THEN
        REPEAT
          Rec := AvailCalcOverview;
          IF AvailCalcOverview.Type = Type::"As of Date" THEN
            CalcAvailOverview.CalculateDate(AvailCalcOverview);
          AvailCalcOverview := Rec;
        UNTIL AvailCalcOverview.NEXT(-1) = 0;

      // Copy to View Table
      Window.UPDATE(1,Text026);
      DELETEALL;
      IF AvailCalcOverview.FIND('-') THEN
        REPEAT
          Rec := AvailCalcOverview;
          INSERT;
        UNTIL AvailCalcOverview.NEXT = 0;

      Window.CLOSE;
      COPY(AvailCalcOverviewFilters);
      IF FIND('-') THEN;
    END;

    [External]
    PROCEDURE SetRecFilters@5();
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.",Date,"Attached to Entry No.",Type);
      CurrPage.UPDATE(FALSE);
    END;

    [External]
    PROCEDURE Initialize@2(NewStartDate@1000 : Date;NewDemandType@1001 : Integer;NewDemandNo@1002 : Code[20];NewItemNo@1003 : Code[20];NewLocationFilter@1004 : Code[250]);
    BEGIN
      StartDate := NewStartDate;
      DemandType := NewDemandType;
      DemandNo := NewDemandNo;
      ItemFilter := NewItemNo;
      LocationFilter := NewLocationFilter;
      MatchCriteria := TRUE;
    END;

    LOCAL PROCEDURE SourceTypeTextOnFormat@456(VAR Text@5134 : Text[1024]);
    BEGIN
      SourceTypeHideValue := FALSE;
      CASE "Source Type" OF
        DATABASE::"Sales Line":
          Text := Text001;
        DATABASE::"Service Line":
          Text := Text005;
        DATABASE::"Job Planning Line":
          Text := Text006;
        DATABASE::"Prod. Order Line":
          Text := Text002;
        DATABASE::"Prod. Order Component":
          Text := Text007;
        DATABASE::"Purchase Line":
          Text := Text003;
        DATABASE::"Item Ledger Entry":
          Text := Text004;
        DATABASE::"Transfer Line":
          Text := Text008;
        DATABASE::"Assembly Header",
        DATABASE::"Assembly Line":
          Text := Text009;
        ELSE
          SourceTypeHideValue := TRUE;
      END
    END;

    [External]
    PROCEDURE SetCalculationParameter@7(CalculateDemandParam@1000 : Boolean);
    BEGIN
      CalculationOfDemand := CalculateDemandParam;
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
}

