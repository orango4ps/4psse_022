OBJECT Table 11130032 App Replication Message
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Seq. No.,App,Request Type;
    CaptionML=ENU=App Replication Message;
    LookupPageID=Page11130775;
  }
  FIELDS
  {
    { 10  ;   ;Seq. No.            ;BigInteger    ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Seq. No.;
                                                              SVE=Sekv. nr] }
    { 15  ;   ;Priority            ;Integer       ;InitValue=100;
                                                   CaptionML=[ENU=Priority;
                                                              SVE=Prioritet] }
    { 20  ;   ;App                 ;Code10        ;CaptionML=ENU=App }
    { 25  ;   ;Sent by             ;Code100       ;TableRelation="App User";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sent by;
                                                              SVE=Skickat av] }
    { 26  ;   ;Sent at             ;DateTime      ;CaptionML=ENU=Sent at }
    { 30  ;   ;Request Type        ;Text30        ;CaptionML=ENU=Request Type }
    { 35  ;   ;Response Type       ;Text30        ;CaptionML=[ENU=Response Type;
                                                              SVE=Svarstyp] }
    { 40  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=,New,Waiting,In Progress,Completed,,,,,Error;
                                                   OptionString=,New,Waiting,InProgress,Completed,,,,,Error }
    { 50  ;   ;Queued at           ;DateTime      ;CaptionML=ENU=Queued at }
    { 60  ;   ;Processed at        ;DateTime      ;CaptionML=[ENU=Processed at;
                                                              SVE=Behandlad vid] }
    { 70  ;   ;Last Error          ;Text250       ;CaptionML=[ENU=Last Error;
                                                              SVE=Senaste fel] }
    { 100 ;   ;Request Data (JSON) ;BLOB          ;CaptionML=ENU=Request Data (JSON) }
    { 120 ;   ;Response Data (JSON);BLOB          ;CaptionML=ENU=Response Data (JSON) }
    { 130 ;   ;Replication Model Version;Integer  ;CaptionML=ENU=Data model version }
    { 140 ;   ;Replication Message Version;Integer;CaptionML= }
  }
  KEYS
  {
    {    ;Seq. No.                                ;Clustered=Yes }
    {    ;Priority                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoValidBase64@1100528000 : TextConst 'ENU=*** No valid Base64 content ***';
      ReplicationMessage@1100528003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonConvert@1100528002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.JsonConvert";
      BaseLib@1100528001 : Codeunit 11130048;

    PROCEDURE GetRequestData@1100528000() : Text;
    VAR
      Istream@1100528000 : InStream;
      JSONData@1100528001 : Text;
    BEGIN
      IF "Request Data (JSON)".HASVALUE THEN
        CALCFIELDS("Request Data (JSON)");

      "Request Data (JSON)".CREATEINSTREAM(Istream);
      Istream.READTEXT(JSONData);
      EXIT(JSONData);
    END;

    PROCEDURE GetResponseData@1100528003() : Text;
    VAR
      Istream@1100528000 : InStream;
      JSONData@1100528001 : Text;
    BEGIN
      IF "Response Data (JSON)".HASVALUE THEN
        CALCFIELDS("Response Data (JSON)");

      "Response Data (JSON)".CREATEINSTREAM(Istream);
      Istream.READTEXT(JSONData);
      EXIT(JSONData);
    END;

    PROCEDURE SetRequestData@1100528009(JsonText@1100528000 : Text) ResultText : Text;
    VAR
      Ostream@1100528003 : OutStream;
    BEGIN
      CLEAR("Request Data (JSON)");
      "Request Data (JSON)".CREATEOUTSTREAM(Ostream);
      Ostream.WRITETEXT(JsonText);
    END;

    PROCEDURE SetResponseData@1100528008(JsonText@1100528000 : Text) ResultText : Text;
    VAR
      Ostream@1100528003 : OutStream;
    BEGIN
      CLEAR("Response Data (JSON)");
      "Response Data (JSON)".CREATEOUTSTREAM(Ostream);
      Ostream.WRITETEXT(JsonText);
    END;

    PROCEDURE GetRequestDataUTF8@1100528004() ResultText : Text;
    VAR
      BaseLib@1100528001 : Codeunit 11130048;
    BEGIN
      IF NOT BaseLib.TryConvertBase64ToUTF8(GetRequestData, ResultText) THEN
        ResultText := NoValidBase64;
    END;

    PROCEDURE GetResponseDataUTF8@1100528002() ResultText : Text;
    VAR
      BaseLib@1100528001 : Codeunit 11130048;
    BEGIN
      IF NOT BaseLib.TryConvertBase64ToUTF8(GetResponseData, ResultText) THEN
        ResultText := NoValidBase64;
    END;

    PROCEDURE FromJson@1100528006(JsonMessage@1100528000 : Text);
    VAR
      ResultText@1100527100 : Text;
      RequestData@1100526200 : Text;
      JsonManagement@1100528701 : Codeunit 5459;
    BEGIN
      CLEAR(JsonManagement);
      JsonManagement.InitializeObject(JsonMessage);
      JsonManagement.GetJSONObject(ReplicationMessage);

      App := UPPERCASE(BaseLib.GetPropertyValueByNameAsText(ReplicationMessage, 'App'));
      "Request Type" := BaseLib.GetPropertyValueByNameAsText(ReplicationMessage, 'RequestType');
      "Sent at" := BaseLib.GetPropertyValueByNameAsDateTime(ReplicationMessage, 'SentAt');
      "Sent by" := BaseLib.GetPropertyValueByNameAsText(ReplicationMessage, 'SentBy');
      "Replication Model Version" := BaseLib.GetPropertyValueByNameAsInt(ReplicationMessage, 'ReplicationModelVersion');
      "Response Type" := BaseLib.GetPropertyValueByNameAsText(ReplicationMessage, 'ResponseType');
      "Replication Message Version" := BaseLib.GetPropertyValueByNameAsInt(ReplicationMessage, 'ReplicationMessageVersion');

      RequestData := BaseLib.GetPropertyValueByNameAsText(ReplicationMessage, 'RequestDataJSON');

      IF BaseLib.TryConvertBase64ToUTF8(RequestData, ResultText) THEN
        SetRequestData(RequestData)
      ELSE
        SetRequestData(BaseLib.ConvertUTF8ToBase64(RequestData));

      SetResponseData(BaseLib.GetPropertyValueByNameAsText(ReplicationMessage, 'ResponseDataJSON'));
    END;

    PROCEDURE ToJson@1100528005() : Text;
    VAR
      JsonManagement@1100528700 : Codeunit 5459;
    BEGIN
      CALCFIELDS("Request Data (JSON)", "Response Data (JSON)");

      ReplicationMessage := ReplicationMessage.JObject;

      BaseLib.SetPropertyByName(ReplicationMessage, 'App', App);
      BaseLib.SetPropertyByName(ReplicationMessage, 'RequestType', "Request Type");
      BaseLib.SetPropertyByName(ReplicationMessage, 'RequestDataJSON', '');
      BaseLib.SetPropertyByName(ReplicationMessage, 'ResponseType', "Response Type");
      BaseLib.SetPropertyByName(ReplicationMessage, 'ResponseDataJSON', GetResponseData);
      BaseLib.SetPropertyByName(ReplicationMessage, 'ReplicationModelVersion', "Replication Model Version");

      EXIT(JsonConvert.SerializeObject(ReplicationMessage));
    END;

    PROCEDURE GetUserID@1100527100() : Code[50];
    VAR
      AppUser@1100527102 : Record 11130031;
      Resource@1100527101 : Record 11229278;
      UserSetup@1100527100 : Record 91;
      AppUserSetupGAP@1100528700 : Record 11124976;
      PlantAppSetup@1100528701 : Record 11124924;
      CCAAppSetup@1100528702 : Record 11128520;
      FieldServiceAppSetup@1100528704 : Record 11126700;
      UseGAP@1100528703 : Boolean;
    BEGIN
      UseGAP := (App <> 'PLA') AND (App <> 'CCA') AND (App <> 'FSA');

      IF NOT UseGAP THEN BEGIN
        IF (App = 'PLA') AND PlantAppSetup.GET THEN
          UseGAP := PlantAppSetup."Use Generic User Management";

        IF (App = 'CCA') AND CCAAppSetup.GET THEN
          UseGAP := CCAAppSetup."Use Generic User Management";

        IF (App = 'FSA') AND FieldServiceAppSetup.GET THEN
          UseGAP := TRUE;
      END;

      IF UseGAP THEN BEGIN
        IF AppUserSetupGAP.GET("Sent by") THEN BEGIN
          IF Resource.GET(AppUserSetupGAP."Resource No.") THEN BEGIN
            IF Resource.Type = Resource.Type::Employee THEN BEGIN
              UserSetup.CHANGECOMPANY(Resource.Company);
              UserSetup.SETRANGE("Employee No.", Resource."Source No.");
              IF UserSetup.COUNT = 1 THEN
                IF UserSetup.FINDFIRST THEN
                  EXIT(UserSetup."User ID");
            END;
          END;
        END;
      END ELSE BEGIN
        IF AppUser.GET("Sent by") THEN BEGIN
          IF Resource.GET(AppUser."Resource No.") THEN BEGIN
            IF Resource.Type = Resource.Type::Employee THEN BEGIN
              UserSetup.CHANGECOMPANY(Resource.Company);
              UserSetup.SETRANGE("Employee No.", Resource."Source No.");
              IF UserSetup.COUNT = 1 THEN
                IF UserSetup.FINDFIRST THEN
                  EXIT(UserSetup."User ID");
            END;
          END;
        END;
      END;
    END;

    EVENT ReplicationMessage@1100528003::PropertyChanged@123(sender@1100528701 : Variant;e@1100528700 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.PropertyChangedEventArgs");
    BEGIN
    END;

    EVENT ReplicationMessage@1100528003::PropertyChanging@124(sender@1100528701 : Variant;e@1100528700 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.PropertyChangingEventArgs");
    BEGIN
    END;

    EVENT ReplicationMessage@1100528003::ListChanged@125(sender@1100528701 : Variant;e@1100528700 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.ListChangedEventArgs");
    BEGIN
    END;

    EVENT ReplicationMessage@1100528003::AddingNew@126(sender@1100528701 : Variant;e@1100528700 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.AddingNewEventArgs");
    BEGIN
    END;

    EVENT ReplicationMessage@1100528003::CollectionChanged@127(sender@1100528701 : Variant;e@1100528700 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NotifyCollectionChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

