OBJECT Codeunit 11012405 Document Management Webservice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100528101 : TextConst 'DEU=Datei %1 besteht bereits.;ENU=File %1 allready exists.;NLD=Bestand %1 bestaat reeds.;SVE=Fil %1 finns redan.';
      Text002@1100528100 : TextConst 'DEU=Datei %1 besteht nicht.;ENU=File %1 does not exist.;NLD=Bestand %1 bestaat niet.;SVE=Fil %1 existerar inte.';
      Text003@1100528102 : TextConst 'DEU=Beleg %1 besteht nicht.;ENU=Document %1 does not exist.;NLD=Document %1 bestaat niet.';

    [External]
    PROCEDURE AreDocumentsPresent@1100528101(tableNo@1100528100 : Integer;entityKeys@1100528101 : ARRAY [250] OF Code[20];VAR documentsArePresent@1100528102 : ARRAY [250] OF Boolean);
    VAR
      FilterFor@1100409000 : 'SPT,MOB,FSW';
      i@1100528103 : Integer;
    BEGIN
      FilterFor := FilterFor::SPT;
      i := 1;
      REPEAT
        IF entityKeys[i] <> '' THEN
          documentsArePresent[i] := AreDocumentsPresentForOne(tableNo, entityKeys[i], FilterFor)
        ELSE
          documentsArePresent[i] := FALSE;
        i += 1;
      UNTIL i = 250;
    END;

    LOCAL PROCEDURE AreDocumentsPresentForOne@1100528104(tableNo@1100528102 : Integer;entityKey@1100528101 : Code[20];FilterFor@1100409001 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable') : Boolean;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
      EntityKeyArr@1100528100 : ARRAY [5] OF Code[20];
    BEGIN
      EntityKeyArr[1] := entityKey;
      GetDocuments(tableNo, EntityKeyArr, DocumentProperties, FilterFor);
      EXIT(NOT DocumentProperties.ISEMPTY());
    END;

    [External]
    PROCEDURE DoGetDocumentNos@1100409001(tableNo@1100528100 : Integer;entityKey@1100528101 : Code[20];VAR documentNos@1100528102 : ARRAY [250] OF Code[20];FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable');
    VAR
      EntityKeyArr@1100528105 : ARRAY [5] OF Code[20];
    BEGIN
      EntityKeyArr[1] := entityKey;
      DoGetDocumentNos2(tableNo, EntityKeyArr, documentNos, FilterFor);
    END;

    [External]
    PROCEDURE DoGetDocumentNos2@1100528107(tableNo@1100528100 : Integer;entityKey@1100528105 : ARRAY [10] OF Code[20];VAR documentNos@1100528102 : ARRAY [250] OF Code[20];FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable');
    VAR
      DocumentProperties@1100528104 : Record 11012746;
      i@1100528103 : Integer;
    BEGIN
      GetDocuments(tableNo, entityKey, DocumentProperties, FilterFor);
      i := 1;
      IF DocumentProperties.FINDSET THEN BEGIN
        REPEAT
          documentNos[i] := DocumentProperties."No.";
          i += 1;
        UNTIL (DocumentProperties.NEXT = 0) OR (i = 250);
      END;
    END;

    [External]
    PROCEDURE DoGetDocumentNos3@1100529400(tableNo@1100528100 : Integer;entityKey@1100528105 : ARRAY [10] OF Code[20];FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable') DocumentNos : ARRAY [250] OF Code[20];
    BEGIN
      DoGetDocumentNos2(tableNo, entityKey, DocumentNos, FilterFor);
    END;

    [External]
    PROCEDURE GetDocumentNos@1100528102(tableNo@1100528100 : Integer;entityKey@1100528101 : Code[20];VAR documentNos@1100528102 : ARRAY [250] OF Code[20]);
    VAR
      FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable';
    BEGIN
      //Warning!!! Only use for SPT
      FilterFor := FilterFor::SPT;
      DoGetDocumentNos(tableNo, entityKey, documentNos, FilterFor);
    END;

    [External]
    PROCEDURE GetDocuments@1100528103(TableNo@1100528100 : Integer;EntityKey@1100528101 : ARRAY [10] OF Code[20];VAR DocumentProperties@1100528102 : Record 11012746;FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable');
    VAR
      RecRef@1100528103 : RecordRef;
      PrimKeyRef@1100525001 : KeyRef;
      PrimFieldRef@1100525002 : FieldRef;
      DocumentLinkManagement@1100528108 : Codeunit 11012401;
      i@1100528104 : Integer;
    BEGIN
      CASE FilterFor OF
        FilterFor::SPT:
          BEGIN
            DocumentProperties.SETRANGE("Publish on Service Portal", TRUE);
          END;
        FilterFor::MOB:
          BEGIN
            DocumentProperties.SETRANGE("Available for Field Service", TRUE);
          END;
        FilterFor::FSW:
          BEGIN
            DocumentProperties.SETRANGE("Available for Field Service", TRUE);
          END;
      END;
      RecRef.OPEN(TableNo);
      i := 1;
      PrimKeyRef := RecRef.KEYINDEX(1);
      REPEAT
        PrimFieldRef := PrimKeyRef.FIELDINDEX(i);
        PrimFieldRef.VALUE := EntityKey[i];
        i += 1;
      UNTIL i > PrimKeyRef.FIELDCOUNT;
      IF NOT RecRef.FIND('=') THEN
        RecRef.INIT;
      DocumentLinkManagement.GetDocuments(DocumentProperties, RecRef);
      DocumentProperties.MARKEDONLY(TRUE);
    END;

    [External]
    PROCEDURE LinkDocument@1100531000(TableNo@1100528100 : Integer;EntityKey@1100528101 : Code[20];documentNo@1100528102 : Code[20]);
    VAR
      EntityKeyArr@1100528300 : ARRAY [5] OF Code[20];
    BEGIN
      EntityKeyArr[1] := EntityKey;
      LinkDocument2(1, TableNo, EntityKeyArr, documentNo);
    END;

    [External]
    PROCEDURE LinkDocument2@1100528300(Action@1100528315 : ',Insert,,Delete';TableNo@1100528100 : Integer;EntityKey@1100528101 : ARRAY [10] OF Code[20];DocumentNo@1100528102 : Code[20]);
    VAR
      RecRef@1100528304 : RecordRef;
      DocumentLinkManagement@1100528303 : Codeunit 11012401;
      DocLinkRID@1100528306 : ARRAY [5] OF RecordID;
      DocumentProperties@1100531002 : Record 11012746;
    BEGIN
      DocumentLinkManagement.GetLinkDocRecRef(TableNo, EntityKey, RecRef);

      DocumentProperties.GET(DocumentNo);
      CASE Action OF
        Action::Insert: BEGIN
          DocumentLinkManagement.GetAdditionalDocumentLinksFromRecordID(RecRef.RECORDID,DocLinkRID);
          DocumentLinkManagement.CreateDocumentLink(DocumentProperties, DocLinkRID);
        END;
        Action::Delete: BEGIN
          DocumentLinkManagement.DeleteDocumentLinksFromObject(RecRef);
        END;
      END;
    END;

    [External]
    PROCEDURE LinkDocument3@1100529406(Action@1100528315 : ',Insert,,Delete';TableNo@1100528100 : Integer;EntityKey@1100528101 : ARRAY [10] OF Code[20];DocumentNo@1100528102 : Code[20]);
    VAR
      RecRef@1100528304 : RecordRef;
      DocumentLinkManagement@1100528303 : Codeunit 11012401;
      DocLinkRID@1100528306 : ARRAY [5] OF RecordID;
      DocumentProperties@1100531002 : Record 11012746;
    BEGIN
      DocumentLinkManagement.GetLinkDocRecRef(TableNo, EntityKey, RecRef);

      DocumentProperties.GET(DocumentNo);
      CASE Action OF
        Action::Insert: BEGIN
          DocumentLinkManagement.GetAdditionalDocumentLinksFromRecordID(RecRef.RECORDID,DocLinkRID);
          DocumentLinkManagement.CreateDocumentLink(DocumentProperties, DocLinkRID);
        END;
        Action::Delete: BEGIN
          DocumentLinkManagement.DeleteDocumentLink2(DocumentProperties, RecRef.RECORDID);
        END;
      END;
    END;

    [External]
    PROCEDURE LinkDocument4@1100528000(Action@1100528315 : ',Insert,,Delete';RecordGUID@1100528101 : Code[36];DocumentNo@1100528102 : Code[20]);
    VAR
      DocumentLinkManagement@1100528303 : Codeunit 11012401;
      DocLinkRID@1100528306 : ARRAY [5] OF RecordID;
      DocumentProperties@1100531002 : Record 11012746;
      GUIDEntityLink@1100528000 : Record 11126703;
    BEGIN
      GUIDEntityLink.GET(RecordGUID);

      DocumentProperties.GET(DocumentNo);
      CASE Action OF
        Action::Insert: BEGIN
          DocumentLinkManagement.GetAdditionalDocumentLinksFromRecordID(GUIDEntityLink.RecordID,DocLinkRID);
          DocumentLinkManagement.CreateDocumentLink(DocumentProperties, DocLinkRID);
        END;
        Action::Delete: BEGIN
          DocumentLinkManagement.DeleteDocumentLink2(DocumentProperties, GUIDEntityLink.RecordID);
        END;
      END;
    END;

    [External]
    PROCEDURE LinkDocument5@1100528002(TableNo@1100528100 : Integer;EntityKey@1100528101 : ARRAY [10] OF Code[20];DocumentNo@1100528102 : Code[20]);
    VAR
      RecRef@1100528304 : RecordRef;
      DocumentLinkManagement@1100528303 : Codeunit 11012401;
      DocumentProperties@1100531002 : Record 11012746;
    BEGIN
      DocumentProperties.GET(DocumentNo);
      DocumentLinkManagement.GetLinkDocRecRef(TableNo, EntityKey, RecRef);
      DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, RecRef.RECORDID);
    END;

    [External]
    PROCEDURE GetDocumentFullFileName@1100528100(DocumentNo@1100528100 : Code[20]) : Text[260];
    VAR
      DocumentProperties@1100528101 : Record 11012746;
    BEGIN
      DocumentProperties.GET(DocumentNo);
      EXIT(DocumentProperties.FullFileName);
    END;

    [External]
    PROCEDURE GetDocumentShortFileName@1100528301(DocumentNo@1100528100 : Code[20]) : Text[260];
    VAR
      DocumentProperties@1100528101 : Record 11012746;
    BEGIN
      DocumentProperties.GET(DocumentNo);
      EXIT(DocumentProperties.FileNameShort);
    END;

    [External]
    PROCEDURE SaveBase64EncodedDocument@1100528106(documentNo@1100528102 : Code[20];contentsBase64Encoded@1100528101 : BigText;VAR errorMessage@1100528100 : Text) : Boolean;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
      DocumentManagement@1100528400 : Codeunit 11012406;
      TargetStorageType@1100527800 : Option;
      TargetFolderURI@1100528401 : Text;
      TargetStorageURI@1100528402 : Text;
    BEGIN
      IF NOT DocumentProperties.GET(documentNo) THEN BEGIN
        errorMessage := STRSUBSTNO(Text003, documentNo);
        EXIT(FALSE);
      END;
      IF (DocumentProperties.FileNameShort = '') THEN BEGIN
        errorMessage := STRSUBSTNO(Text002, DocumentProperties.FileNameShort);
        EXIT(FALSE);
      END;

      TargetStorageType := DocumentManagement.GetMainStorageType;
      DocumentManagement.GetStorageLocationForStorageType(
        TargetStorageType, DocumentProperties."Document Group", DocumentProperties."Document Template",
        DocumentProperties."Contact No.", DocumentProperties."Document Type",
        DocumentProperties."Creation Date", TargetFolderURI);
      DocumentManagement.CreateStorageLocationIfNotExists(TargetStorageType, TargetFolderURI);
      TargetStorageURI := TargetFolderURI + DocumentProperties.FileNameShort;

      IF DocumentManagement.URIExists(DocumentProperties."Storage Type", DocumentProperties.GetStorageURI) THEN
        DocumentManagement.DeleteStorageURI(DocumentProperties."Storage Type", DocumentProperties.GetStorageURI);
      IF DocumentManagement.PutContentToStorageByBase64(
        contentsBase64Encoded, TargetStorageType, TargetStorageURI)
      THEN BEGIN
        DocumentProperties.ValidateStorageURI(TargetStorageType,TargetStorageURI);
        DocumentProperties.MODIFY;
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE GetDocumentBase64Encoded@1100528105(DocumentNo@1100528102 : Code[20];VAR Base64EncodedContents@1100528101 : BigText;VAR ErrorMessage@1100528100 : Text) : Boolean;
    BEGIN
      // kept this wrapper function so compatibility with docmgt package is not broken
      EXIT(GetDocumentContent(DocumentNo, Base64EncodedContents, ErrorMessage));
    END;

    [External]
    PROCEDURE SaveDocumentBase64Encoded@1100529101(TableNo@1100525001 : Integer;EntityKey@1100525000 : ARRAY [10] OF Code[20];VAR DocumentNo@1100528102 : Code[20];Base64EncodedContents@1100528101 : BigText;VAR ErrorMessage@1100528100 : Text;VAR FileName@1100529100 : Text;VAR ModifyDateTime@1100529105 : DateTime;DocumentType@1100529108 : Code[10]) : Boolean;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
      File@1100529102 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Convert@1100529101 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Path@1100529113 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path";
      FullFileName@1100529103 : Text;
      ExternalDocumentManagement@1100529107 : Codeunit 11012403;
      DocumentLinkManagement@1100525003 : Codeunit 11012401;
      FileLength@1100529110 : BigInteger;
      RecRef@1100525002 : RecordRef;
    BEGIN
      FullFileName := Path.GetTempPath + FileName;
      IF File.Exists(FullFileName) THEN
        File.Delete(FullFileName);
      File.WriteAllBytes(FullFileName,Convert.FromBase64String(Base64EncodedContents));
      IF ModifyDateTime <> 0DT THEN
        File.SetLastWriteTimeUtc(FullFileName,ModifyDateTime);

      DocumentLinkManagement.GetLinkDocRecRef(TableNo, EntityKey, RecRef);
      DocumentNo := ExternalDocumentManagement.AddExternalDocument(RecRef,FullFileName,DocumentType);
      DocumentProperties.GET(DocumentNo);
      DocumentProperties.GetPropertiesFromFile(FileName,ModifyDateTime,FileLength);

      File.Delete(FullFileName);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetDocumentSizeInBytes@1100525003(documentNo@1100528102 : Code[20];VAR errorMessage@1100528100 : Text) : Integer;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
      ServerTempFileName@1100528400 : Text;
      DocumentSize@1100528401 : Integer;
    BEGIN
      IF NOT DocumentProperties.GET(documentNo) THEN BEGIN
        errorMessage := STRSUBSTNO(Text003, documentNo);
        EXIT(0);
      END;
      IF DocumentProperties.FullFileName <> '' THEN
        EXIT(GetFileSize(DocumentProperties.FullFileName(), errorMessage));
      IF DocumentProperties."Document Service URL" <> '' THEN BEGIN
        ServerTempFileName := DownloadFromDocumentService(DocumentProperties."Document Service URL");
        DocumentSize := GetFileSize(ServerTempFileName, errorMessage);
        FILE.ERASE(ServerTempFileName);
        EXIT(DocumentSize);
      END;
    END;

    [External]
    PROCEDURE SaveBase64TextAsFile@1100525001(fullFileName@1100525002 : Text;contentsBase64Encoded@1100525003 : BigText;VAR errorMessage@1100525004 : Text) : Boolean;
    VAR
      File@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Convert@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      File.WriteAllBytes(fullFileName, Convert.FromBase64String(contentsBase64Encoded));
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetFileAsBase64Text@1100525000(fullFileName@1100525000 : Text;VAR base64EncodedContents@1100525001 : BigText;VAR errorMessage@1100525005 : Text) : Boolean;
    VAR
      File@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Convert@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      IF NOT File.Exists(fullFileName) THEN BEGIN
        errorMessage := STRSUBSTNO(Text002, fullFileName);
        EXIT(FALSE);
      END;
      base64EncodedContents.ADDTEXT(Convert.ToBase64String(File.ReadAllBytes(fullFileName)));
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetFileAsBase64@1100528600(fullFileName@1100525000 : Text;VAR base64EncodedContents@1100525001 : Text;VAR errorMessage@1100525005 : Text) : Boolean;
    VAR
      File@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Convert@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      IF NOT File.Exists(fullFileName) THEN BEGIN
        errorMessage := STRSUBSTNO(Text002, fullFileName);
        EXIT(FALSE);
      END;
      base64EncodedContents := Convert.ToBase64String(File.ReadAllBytes(fullFileName));
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetFileSize@1100525004(fullFileName@1100525000 : Text;VAR errorMessage@1100525005 : Text) : Integer;
    VAR
      File@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      FileInfo@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
    BEGIN
      IF NOT File.Exists(fullFileName) THEN BEGIN
        errorMessage := STRSUBSTNO(Text002, fullFileName);
        EXIT(0);
      END;
      FileInfo := FileInfo.FileInfo(fullFileName);
      EXIT(FileInfo.Length);
    END;

    [External]
    PROCEDURE ExternDocumentFileRegistration@1100409000(documentNo@1100409000 : Code[20];sourcePathAndFile@1100409001 : Text[250]) : Text[250];
    VAR
      DocProperties@1100409002 : Record 11012746;
      ExternalDocumentManagement@1100409003 : Codeunit 11012403;
      TargetURI@1100528702 : Text;
      StorageType@1100528700 : Option;
    BEGIN
      //DP00688 (C017839)  Note: User of nst where webservice is running must have permissions for source- and target directory.
      DocProperties.GET(documentNo);
      DocProperties.TESTFIELD("No.");
      DocProperties.TESTFIELD("External Document", TRUE);
      IF sourcePathAndFile = '' THEN BEGIN
        DocProperties.File := '';
        DocProperties.TESTFIELD(File);
      END;

      ExternalDocumentManagement.RegisterFile(
        sourcePathAndFile, DocProperties."Document Type", DocProperties."Creation Date", TargetURI, StorageType);
      DocProperties.ValidateStorageURI(StorageType,TargetURI);
      DocProperties.MODIFY(TRUE);
      EXIT(DocProperties.FileNameShort);
    END;

    [External]
    PROCEDURE GetNewDocumentNo@1100525002() NewDocumentNo : Code[20];
    VAR
      DocumentMgtSetup@1100525000 : Record 11071831;
      NoSeriesManagement@1100525001 : Codeunit 396;
    BEGIN
      DocumentMgtSetup.GET;
      DocumentMgtSetup.TESTFIELD("External Document Nos.");
      NewDocumentNo := NoSeriesManagement.GetNextNo(DocumentMgtSetup."External Document Nos.", TODAY, TRUE);
      EXIT(NewDocumentNo);
    END;

    [External]
    PROCEDURE GetPropertiesFromFile@1100529102(DocumentNo@1100528100 : Code[20];VAR FileName@1100529100 : Text;VAR ModifyDateTime@1100529102 : DateTime;VAR FileLength@1100529103 : BigInteger);
    VAR
      DocumentProperties@1100528101 : Record 11012746;
    BEGIN
      IF DocumentProperties.GET(DocumentNo) THEN
        DocumentProperties.GetPropertiesFromFile(FileName,ModifyDateTime,FileLength);
    END;

    [External]
    PROCEDURE DownloadFromDocumentService@1100528430(DocumentServiceURL@1100528400 : Text) ServerTempFileName : Text;
    VAR
      DocumentServiceManagement@1100528401 : Codeunit 9510;
    BEGIN
      DocumentServiceManagement.SetUseDocumentService4PS(TRUE);
      ServerTempFileName := DocumentServiceManagement.DownloadFileFromCloudToServerSilent(
        DocumentServiceURL);
    END;

    [External]
    PROCEDURE GetDocumentPropertiesList@1100525013(TableNo@1100525001 : Integer;EntityKey@1100525000 : ARRAY [10] OF Code[20];DocumentTypes@1100525006 : Text;VAR DocumentPropertiesWS@1100525002 : XMLport 11012400);
    VAR
      DocumentProperties@1100525005 : Record 11012746;
    BEGIN
      DoGetDocumentPropertiesList(TableNo, EntityKey, DocumentTypes,'', '','', '', '', '',DocumentProperties);
      DocumentPropertiesWS.SETTABLEVIEW(DocumentProperties);
      DocumentPropertiesWS.EXPORT;
    END;

    [External]
    PROCEDURE DoGetDocumentPropertiesList@1100525006(TableNo@1100525001 : Integer;EntityKey@1100525000 : ARRAY [10] OF Code[20];DocumentTypes@1100525007 : Text;ContactNo@1100525011 : Code[20];ContactPersonNo@1100525010 : Code[20];ProjectElementCode@1100525009 : Code[20];ProjectCode@1100525008 : Code[20];DocumentGroup@1100525005 : Code[10];DocumentType@1100525002 : Code[10];VAR DocumentProperties@1100525006 : Record 11012746);
    VAR
      RecRef@1100525003 : RecordRef;
      DocumentLinkManagement@1100525004 : Codeunit 11012401;
      DocumentTypeFilter@1100525012 : Text;
    BEGIN
      SetRecReference(RecRef, TableNo, EntityKey);

      DocumentLinkManagement.GetDocuments(DocumentProperties, RecRef);
      DocumentProperties.MARKEDONLY(TRUE);

      DocumentTypeFilter := MapDocumentTypesToNav(DocumentTypes);

      IF (DocumentTypeFilter <> '') THEN
        DocumentProperties.SETFILTER("Document Type", DocumentTypeFilter);

      IF (DocumentGroup <> '') THEN
        DocumentProperties.SETRANGE("Document Group",DocumentGroup);

      IF DocumentProperties.FINDSET THEN;
    END;

    LOCAL PROCEDURE SetRecReference@1100525007(VAR RecRef@1100525003 : RecordRef;tableNo@1100525005 : Integer;entityKey@1100525004 : ARRAY [10] OF Code[20]);
    VAR
      PrimKeyRef@1100525002 : KeyRef;
      PrimFieldRef@1100525001 : FieldRef;
      i@1100525000 : Integer;
    BEGIN
      RecRef.OPEN(tableNo);
      i := 1;
      PrimKeyRef := RecRef.KEYINDEX(1);
      REPEAT
        PrimFieldRef := PrimKeyRef.FIELDINDEX(i);
        PrimFieldRef.VALUE := entityKey[i];
        i += 1;
      UNTIL i > PrimKeyRef.FIELDCOUNT;
      IF NOT RecRef.FIND('=') THEN
        RecRef.INIT;
    END;

    [External]
    PROCEDURE GetDocumentContent@1100525009(DocumentNo@1100525004 : Code[20];VAR Base64EncodedContents@1100525003 : BigText;VAR ErrorMessage@1100525002 : Text) : Boolean;
    VAR
      DocumentProperties@1100525010 : Record 11012746;
      Base64Encoded@1100525008 : Boolean;
      DocumentPortalProject@1100525006 : Codeunit 11012948;
      Job@1100525005 : Record 11072003;
      DocumentManagement@1100527800 : Codeunit 11012406;
      MemoryStream@1100527803 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      IF NOT DocumentProperties.GET(DocumentNo) THEN BEGIN
        ErrorMessage := STRSUBSTNO(Text003, DocumentNo);
        EXIT(FALSE);
      END;

      CASE TRUE OF
        (DocumentProperties."Storage Type" = DocumentProperties."Storage Type"::PPT): BEGIN
          IF Job.GET(DocumentProperties.GetPPTDocumentProject) THEN BEGIN
            Base64Encoded := DocumentPortalProject.DownloadDPTDocumentStreamed(Job."SharePoint Site URL",DocumentProperties.GetStorageURI,Base64EncodedContents,ErrorMessage);
            EXIT(Base64Encoded);
          END;
        END;
        (DocumentProperties."Storage Type" = DocumentProperties."Storage Type"::DPTDUAL): BEGIN
          MemoryStream := MemoryStream.MemoryStream;
          IF DocumentManagement.GetContentFromStorageByStreamForDPTDUAL(DocumentProperties."Document Portal Source Type",
                                                                        DocumentProperties."Document Portal Source No.",
                                                                        DocumentProperties."Document Portal Subsite",
                                                                        DocumentProperties.GetStorageURI,
                                                                        MemoryStream)
          THEN BEGIN
            DocumentManagement.ConvertMemoryStreamToBase64(MemoryStream, Base64EncodedContents);
            EXIT(TRUE);
          END;
        END;
        (DocumentProperties.HasStorageURI): BEGIN
          DocumentManagement.GetContentFromStorageByBase64(DocumentProperties."Storage Type",DocumentProperties.GetStorageURI,Base64EncodedContents);
          EXIT(TRUE);
        END;
      END;

      IF (ErrorMessage = '') THEN
        ErrorMessage := GETLASTERRORTEXT;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE AddExternalDocumentAndContent@1100525011(TableNo@1100525003 : Integer;EntityKey@1100525002 : ARRAY [10] OF Code[20];FileName@1100525004 : Text;Base64EncodedContents@1100525000 : BigText;ContactNo@1100525005 : Code[20];ContactPersonNo@1100525006 : Code[20];DocumentTypeCode@1100525007 : Code[10];DocumentGroup@1100525009 : Code[10];DocumentDescription@1100525029 : Text;ProjectNo@1100525023 : Code[20];ProjectElement@1100525022 : Code[20];DocumentDate@1100525015 : Text[10];CreatedDate@1100525016 : Text[20];ModificationDate@1100525014 : Text[10];Status@1100525012 : Integer;ProjectPortalSubSite@1100525017 : Code[20]) : Code[20];
    VAR
      DocumentPortalProject@1100525008 : Codeunit 11012948;
      DocumentProperties@1100525034 : Record 11012746;
      Job@1100525033 : Record 11072003;
      RecRef@1100525031 : RecordRef;
      Document@1100525036 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document";
      DocumentPortalManagement@1100525037 : Codeunit 11012203;
      ErrorMessage@1100525001 : Text;
      DocumentLinkManagement@1100525019 : Codeunit 11012401;
      ServiceLocation@1100525011 : Record 11012801;
      DocLinkRIDArray@1100528500 : ARRAY [5] OF RecordID;
      ExternalDocumentManagement@1100527800 : Codeunit 11012403;
      TargetURI@1100527802 : Text;
      StorageType@1100527801 : Option;
    BEGIN
      DocumentProperties.INIT;
      SetDocumentPropertiesGeneral(DocumentProperties,FileName,ContactNo,ContactPersonNo,DocumentDescription,DocumentTypeCode,ProjectElement,DocumentDate,CreatedDate, ModificationDate, Status);
      DocumentProperties.INSERT(TRUE);

      DocumentLinkManagement.GetLinkDocRecRef(TableNo, EntityKey, RecRef);
      DocumentLinkManagement.GetAdditionalDocumentLinksFromRecordID(RecRef.RECORDID,DocLinkRIDArray);
      DocumentLinkManagement.CreateDocumentLink(DocumentProperties, DocLinkRIDArray);

      //First, check DMS type for DPT old (PPT) based on entitykey
      IF (DocumentLinkManagement.HasPPTProject(DocLinkRIDArray,Job)) THEN
      BEGIN
        Document := Document.Document;
        SetDocumentPropertiesForPPT(DocumentProperties,ProjectPortalSubSite);
        DocumentProperties.MODIFY(TRUE);
        COMMIT;
        DocumentPortalManagement.SetDocumentPropertiesServerSide(DocumentProperties, Document);
        IF (NOT DocumentPortalProject.UploadDPTDocumentStreamed(Job."SharePoint Site URL",DocumentProperties,Document,Base64EncodedContents,ErrorMessage)) THEN
        BEGIN
          DocumentProperties.DELETE(TRUE);
          COMMIT;
          ERROR(ErrorMessage);
        END;
        EXIT(DocumentProperties."No.");
      END;

      IF (DocumentLinkManagement.HasDPTDualProject(DocLinkRIDArray,Job, ServiceLocation)) THEN
      BEGIN
        IF (Job."No." <> '') THEN
          SetDocumentPorpertiesForDPTDUALProject(DocumentProperties,ProjectPortalSubSite,Job);

        IF (ServiceLocation."No." <> '') THEN
          SetDocumentPropertiesForDPTDUALServiceLocation(DocumentProperties,ProjectPortalSubSite,ServiceLocation);
      END;

      ExternalDocumentManagement.RegisterFileByContent(
        Base64EncodedContents, FileName, DocumentTypeCode, DocumentProperties."Creation Date", TargetURI, StorageType);
      DocumentProperties.ValidateStorageURI(StorageType,TargetURI);
      DocumentProperties.MODIFY;


      EXIT(DocumentProperties."No.");
    END;

    LOCAL PROCEDURE MapDocumentTypesToNav@1100525012(ExternalDocumentTypesFilter@1100525001 : Text) MappedDocumentTypes : Text;
    VAR
      Filter@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      Seperator@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      DocumentTypes@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Counter@1100525004 : Integer;
      DocumentType@1100525006 : Record 11012405;
    BEGIN
      IF (ExternalDocumentTypesFilter <> '') THEN BEGIN
        Filter := ExternalDocumentTypesFilter;
        Seperator:= ',';
        DocumentTypes := Filter.Split(Seperator.ToCharArray());

        FOR Counter := 0 TO DocumentTypes.Length - 1 DO BEGIN
          DocumentType.GET(DocumentTypes.GetValue(Counter));

          IF MappedDocumentTypes = '' THEN
            MappedDocumentTypes := DocumentType.Type
          ELSE
            MappedDocumentTypes += '|' + DocumentType.Type;
        END;

        EXIT(MappedDocumentTypes);
      END;
    END;

    LOCAL PROCEDURE SetDocumentModificationDate@1100525022(DocumentProperties@1100525001 : Record 11012746;ModificationDate@1100525000 : Text[10]);
    VAR
      DocumentModificationDate@1100525005 : Record 11012406;
      XMLFormat4PS@1100525004 : Codeunit 11020221;
      LastLineNo@1100525003 : Integer;
      DocModificationDate@1100525002 : Date;
    BEGIN
      XMLFormat4PS.EvaluateDate(ModificationDate, DocModificationDate);

      DocumentModificationDate.SETRANGE("Document No.", DocumentProperties."No.");
      IF (DocumentModificationDate.FINDLAST) THEN
        LastLineNo := DocumentModificationDate."Line No."
      ELSE
        DocumentModificationDate.INIT;

      IF (DocumentModificationDate.Date <> DocModificationDate) THEN BEGIN
        LastLineNo += 10000;
        DocumentModificationDate.INIT;
        DocumentModificationDate."Document No." := DocumentProperties."No.";
        DocumentModificationDate."Line No." := LastLineNo;
        DocumentModificationDate.Date := DocModificationDate;
        DocumentModificationDate.Comment := STRSUBSTNO(Text001);
        DocumentModificationDate.INSERT;
      END;
    END;

    LOCAL PROCEDURE SetDocumentPropertiesGeneral@1100525023(VAR DocumentProperties@1100525000 : Record 11012746;FileName@1100525014 : Text;ContactNo@1100525010 : Code[20];ContactPersonNo@1100525009 : Code[20];DocDescription@1100525006 : Text;DocumentType@1100525004 : Code[10];ProjectElement@1100525007 : Code[20];DocumentDate@1100525008 : Text[10];CreatedDate@1100525013 : Text[20];ModificationDate@1100525012 : Text[10];Status@1100525011 : Integer);
    VAR
      XMLFormat4PS@1100525005 : Codeunit 11020221;
      StringFunctions@1100527801 : Codeunit 11012273;
    BEGIN
      DocumentProperties."External Document" := TRUE;
      DocumentProperties.Description := COPYSTR(DocDescription, 1, MAXSTRLEN(DocumentProperties.Description));
      DocumentProperties."Document Type" := DocumentType;
      DocumentProperties.File := COPYSTR(FileName, 1, MAXSTRLEN(DocumentProperties.File));
      DocumentProperties."File Extension" := StringFunctions.GetExtensionFromFileName(FileName);
      DocumentProperties."Project Element" := ProjectElement;
      DocumentProperties."Private Company Document" := ((ContactNo <> '') OR  (ContactPersonNo <> ''));
      DocumentProperties."Document Portal Private Doc" := ((ContactNo <> '') OR  (ContactPersonNo <> ''));
      XMLFormat4PS.EvaluateDate(DocumentDate, DocumentProperties."Document Date");
      XMLFormat4PS.EvaluateDate(DocumentDate, DocumentProperties."Modification Date");
      DocumentProperties."Contact No." := ContactNo;
      DocumentProperties."Contact Person No." := ContactPersonNo;
      DocumentProperties.Status := Status;
      IF (STRLEN(CreatedDate) >= 19) THEN
        XMLFormat4PS.EvaluateDateAndTime(CreatedDate, DocumentProperties."Creation Date", DocumentProperties."Creation Time");
    END;

    LOCAL PROCEDURE SetDocumentPropertiesForPPT@1100525024(VAR DocumentProperties@1100525000 : Record 11012746;ProjectPortalSubsite@1100525003 : Code[20]);
    VAR
      SharePointSetup4PS@1100525002 : Record 11012730;
    BEGIN
      DocumentProperties.VALIDATE("Project Portal Subsite", ProjectPortalSubsite);
      IF (SharePointSetup4PS.GET) THEN
        DocumentProperties."User ID" := SharePointSetup4PS."Owner ID";
    END;

    LOCAL PROCEDURE SetDocumentPorpertiesForDPTDUALProject@1100525025(VAR DocumentProperties@1100525000 : Record 11012746;SubSite@1100528500 : Code[20];Job@1100527800 : Record 11072003);
    BEGIN
      DocumentProperties.VALIDATE("Document Portal Source Type",DocumentProperties."Document Portal Source Type"::Project);
      DocumentProperties."Document Portal Source No." := Job."No.";
      DocumentProperties."Document Portal Subsite":= SubSite;
      DocumentProperties."User ID" := USERID;
    END;

    LOCAL PROCEDURE SetDocumentPropertiesForDPTDUALServiceLocation@1100527804(VAR DocumentProperties@1100525000 : Record 11012746;SubSite@1100528500 : Code[20];ServiceLocation@1100527800 : Record 11012801);
    BEGIN
      DocumentProperties.VALIDATE("Document Portal Source Type",DocumentProperties."Document Portal Source Type"::ServiceLoc);
      DocumentProperties."Document Portal Subsite" := SubSite;
      DocumentProperties."Document Portal Source No." := ServiceLocation."No.";
      DocumentProperties."User ID" := USERID;
    END;

    [External]
    PROCEDURE DeleteExternalDocument@1100525005(DocumentNo@1100525000 : Code[20]) : Boolean;
    VAR
      DocumentProperties@1100525002 : Record 11012746;
      DocumentPortalProject@1100525003 : Codeunit 11012948;
      Job@1100525005 : Record 11072003;
      JobCode@1100525006 : Code[20];
    BEGIN
      IF NOT DocumentProperties.GET(DocumentNo) THEN
        EXIT(FALSE);

      IF DocumentProperties.IsPPTDocument THEN BEGIN
        JobCode := DocumentProperties.GetPPTDocumentProject;
        IF (JobCode <> '') THEN BEGIN
          Job.GET(JobCode);
          DocumentPortalProject.RemoveDocumentServerSide(Job,DocumentProperties);
        END;
      END ELSE BEGIN
        DocumentProperties.DELETE(TRUE);
      END;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

