OBJECT Codeunit 12013627 ExFlow Email Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000;
  }
  PROPERTIES
  {
    OnRun=VAR
            EmailHeader@1100285000 : Record 12013619;
          BEGIN
            // Starting from menu
            IF GUIALLOWED THEN
              IF NOT CONFIRM(EXF002,FALSE) THEN
                ERROR(EXF003);

            EmailHeader.RESET;
            EmailHeader.SETCURRENTKEY("Send Order");
            EmailHeader.SETRANGE("Process Type",EmailHeader."Process Type"::Scheduled);
            IF EmailHeader.FINDSET(TRUE) THEN
              REPEAT
                RunJob(EmailHeader);
              UNTIL EmailHeader.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      EXF001@1100285000 : TextConst 'ENU=%1 %2;SVE=%1 %2';
      EXF002@1100285001 : TextConst 'ENU=Do you want to send emails based on the ExFlow email setup?;SVE=Vill du skicka ut epost baserat p† ExFlows epost inst„llningar?';
      EXF003@1100285002 : TextConst 'ENU=No emails sent.;SVE=Ingen epost skickad.';
      EXF004@1100285003 : TextConst 'ENU=Purchaser Code: %1;SVE=Ink”parkod: %1';
      EXF005@1100285004 : TextConst 'ENU=No email address for purchaser %1.;SVE=Ingen epost adress f”r ink”pare %1.';
      EXF006@1100285005 : TextConst 'ENU=No. of emails to send: %1, No. of emails sent: %2;SVE=" Antal epostmeddelande att skicka : %1, Antal skickade epostmeddelande: %2"';
      HideMessage@1100285006 : Boolean;
      EXF007@1100285007 : TextConst 'ENU=Order No.: %1;SVE=Ordernr: %1';
      EXF008@1100285008 : TextConst 'ENU=Return Order No.: %1;SVE=Returordernr: %1';
      EXF009@1100285010 : TextConst 'ENU=Do you want to send emails for job %1?;SVE=Vill du skicka ut epost f”r jobb %1?';
      EXF010@1100285013 : TextConst 'ENU=ExFlow sign in ticket;SVE=ExFlow inloggningsbiljett';
      EXF011@1100285012 : TextConst 'ENU=You have requested a new sign in code to ExFlow. Your code to sign in to ExFlow is:;SVE=H„r kommer din inloggningskod till ExFlow. Koden „r giltig i 5 minuter och kan bara anv„das en g†ng. Din kod:';
      EMAILTXT@1100285009 : TextConst 'ENU=Document No. %1;SVE=Dokumentnr. %1';
      EmailSubjectCapTxt@1100285011 : TextConst '@@@="%1 = Customer Name. %2 = Document Type %3 = Invoice No.";ENU=%1 - %2 %3;SVE=%1 - %2 %3';
      ReportAsPdfFileNameMsg@1100285014 : TextConst '@@@="%1 = Document Type %2 = Invoice No.";ENU=Purchase %1 %2 %3.pdf';
      EXF012@1100285015 : TextConst 'ENU=The provided email adress %1 is not registerd in ExFLow NAV;SVE=Epostaddressen %1 „r ej registrerad i ExFlow NAV';
      EXF013@1100285016 : TextConst 'ENU=There is no ExFlow e-mail setup for Order/Receipt Reminders;SVE=Det finns inget epost jobb uppsatt i ExFlow f”r order/inleverans p†minnelser';
      EXF014@1100285017 : TextConst 'ENU=Selected Document is not connected to an Order;SVE=Valt dokument „r inte kopplat till en order';
      EXF015@1100285018 : TextConst 'ENU=Do you want to send Order/Receipt Reminders?;SVE=Vill du skicka p†minnelser f”r saknade ordrar/inleveranser?';
      SSOHTMLtext@1100285019 : TextConst 'ENU=<html><body>%1 <b>%2</b></body></html>;SVE=<html><body>%1 <b>%2</b></body></html>';
      EXF016@1100285020 : TextConst 'ENU=Number of documents %1, Number of e-mails to send %2, Number of E-mails sent %3;SVE=Antal dokuement %1, Antal mail att skicka %2, Antal Skickade mail %3';
      MissingRecipts@1100285021 : TextConst 'ENU=Missing recipts has been found for:;SVE=Inleveranser saknas f”r:';
      LineReciptsMissing@1100285022 : TextConst 'ENU=Item No. %1, is Missing on Order No. %2, Invoice No. %3;SVE=Artikel %1, Saknas p† order %2, Fakturanummer %3';
      ReciptsMissing@1100285028 : TextConst 'ENU=Recpeipts missing on Order No. %1, Invoice No. %2;SVE=Inleverans saknas f”r order %2, Fakturanummer %3';
      MissingEmailAdress@1100285023 : TextConst 'ENU=No E-mail adress found;SVE=Ingen e-post adress att skicka till';
      MissingOrders@1100285025 : TextConst 'ENU=Missing orders has been found for:;SVE=Saknade ordrar finns f”r:';
      OrderLinesMissing@1100285024 : TextConst 'ENU=Vendor Order No. %1, Mentioned on Invoice No. %2;SVE=Leverant”rens ordernummer %1, H„nvisad till p† fakturanummer %2';
      DocumentComment@1100285026 : TextConst 'ENU=, Document Comment %1;SVE=, Dokument kommentar %1';
      MatchingComment@1100285027 : TextConst 'ENU=, Matching Comment %1;SVE=, Matchningskommentar %1';

    PROCEDURE RunJob@1100285008(VAR EmailHeader@1100285000 : Record 12013619);
    VAR
      NotSupported@1100285001 : TextConst 'ENU=E-mail job is no longer supported;SVE=E-post jobbet supporteras ej l„ngre';
    BEGIN
      // Starting from menu
      IF GUIALLOWED THEN
        IF NOT CONFIRM(STRSUBSTNO(EXF009,EmailHeader.Type),FALSE) THEN
          ERROR(EXF003);

      CASE EmailHeader.Type OF
        EmailHeader.Type::"Unreceived Order": BatchSendEmailUnreceived(EmailHeader, '', 0);
        EmailHeader.Type::"Header/Line Amount Mismatch": ERROR(NotSupported);
        EmailHeader.Type::"Order not found": BatchSendEmailOrderNotFound(EmailHeader,'',0);
        EmailHeader.Type::"Inbox Reminder": BatchSendEmailInboxReminder(EmailHeader);
        EmailHeader.Type::"Approved Order": BatchSendEmailApprovedOrder(EmailHeader);
        EmailHeader.Type::"Rejected Quote": BatchSendEmailRejectedQuote(EmailHeader);
        EmailHeader.Type::"Created requisition": BatchSendEmailCreatedReq(EmailHeader);
      END;
    END;

    PROCEDURE SendEmailFromUserGroup@1100285002(ExUserGroup@1100285008 : Record 12013606;AttachFileName@1100285007 : Text[250];ExBlobID@1100285009 : Integer);
    VAR
      ExUserGroupLine@1100285000 : Record 12013607;
      ExUserComp@1100285003 : Record 12013641;
      EmailAddr@1100285001 : Text[1024];
      TempAddr@1100285004 : Text[80];
      TotPos@1100285005 : Integer;
      TempPos@1100285006 : Integer;
    BEGIN
      WITH ExUserGroup DO BEGIN
        EmailAddr := '';
        ExUserGroupLine.RESET;
        ExUserGroupLine.SETRANGE(Code, Code);
        ExUserGroupLine.SETFILTER("Starting Date", '%1|<=%2', 0D, WORKDATE);
        ExUserGroupLine.SETFILTER("Ending Date", '%1|>=%2', 0D, WORKDATE);
        IF ExUserGroupLine.FINDSET THEN BEGIN
          REPEAT
            IF ExUserComp.GET(ExUserGroupLine."User ID") THEN
              IF ExUserComp."E-mail ExFlow" <> '' THEN
                EmailAddr := EmailAddr + ExUserComp."E-mail ExFlow" + ';'
          UNTIL ExUserGroupLine.NEXT = 0;

          IF EmailAddr <> '' THEN BEGIN
            EmailAddr := COPYSTR(EmailAddr,1,80);
            TempAddr := EmailAddr;
            TotPos := 0;
            REPEAT
              TempPos := STRPOS(TempAddr,';');
              TotPos := TotPos + TempPos;
              IF TempPos > 1 THEN
                TempAddr := DELSTR(TempAddr,1,TempPos);
            UNTIL TempPos <= 0;

            EmailAddr := COPYSTR(EmailAddr,1,TotPos - 1);
          END;

          SendEmail(EmailAddr,AttachFileName,ExBlobID);
        END;
      END;
    END;

    PROCEDURE BatchSendEmailOrderNotFound@1100285009(VAR EmailHeader@1100285002 : Record 12013619;BatchFilter@1100285020 : Code[10];InboundDocNoFilter@1100285019 : Integer);
    VAR
      ImportWkshHeader@1100285000 : Record 12013587;
      ImportWkshLine@1100285003 : Record 12013588;
      Purchaser@1100285006 : Record 13;
      TempImportWkshHeader@1100285007 : TEMPORARY Record 12013587;
      ExFlowUserSetup@1100285015 : Record 12013641;
      TempExFlowUserSetup@1100285014 : TEMPORARY Record 12013641;
      ExUserGroupLine@1100285013 : Record 12013607;
      SmtpMail@1100285001 : Codeunit 400;
      ExFlowFileMgt@1100285017 : Codeunit 12013602;
      AttachFileName@1100285008 : Text[1024];
      ToMailAddress@1100285016 : Text[1024];
      CR@1100285009 : Char;
      LF@1100285010 : Char;
      DocCounter@1100285018 : Integer;
      TotCounter@1100285011 : Integer;
      SentCounter@1100285012 : Integer;
      PurchCoordinator@1100285021 : TextConst 'ENU=Purchase Coordinator;SVE=Ink”pssamordnare';
      ProcessDoc@1100285004 : Boolean;
    BEGIN
      CR := 13;
      LF := 10;

      //Set filters
      ImportWkshHeader.RESET;
      ImportWkshHeader.SETRANGE("PO Matched Document", TRUE);
      ImportWkshHeader.SETRANGE("ExFlow Document Type",ImportWkshHeader."ExFlow Document Type"::Invoice);
      IF InboundDocNoFilter <> 0 THEN
        ImportWkshHeader.SETRANGE("Inbound Document No.",InboundDocNoFilter)
      ELSE IF BatchFilter <> '' THEN
        ImportWkshHeader.SETRANGE("Journal Batch Name",BatchFilter);

      //Build temp doc table
      IF ImportWkshHeader.FINDSET THEN
        REPEAT
          ImportWkshLine.SETRANGE("Inbound Document No.", ImportWkshHeader."Inbound Document No.");
          ImportWkshLine.SETFILTER(Type, '<>%1', ImportWkshLine.Type::" ");
          ImportWkshLine.SETFILTER("Order No.", '');
          ImportWkshLine.SETFILTER("Order No. (Import)", '<>%1', '');
          IF NOT ImportWkshLine.ISEMPTY THEN
            ProcessDoc := TRUE //Missing Lines
          ELSE IF ImportWkshHeader."Order No." = '' THEN
            ProcessDoc := TRUE;  //Set from header

          IF ProcessDoc THEN BEGIN
            IF CheckBatchSend(EmailHeader,ImportWkshHeader."Inbound Document No.",ImportWkshHeader."Date Created",InboundDocNoFilter) THEN BEGIN
              TempImportWkshHeader.INIT;
              TempImportWkshHeader.TRANSFERFIELDS(ImportWkshHeader);
              TempImportWkshHeader.INSERT;
            END;
          END;
        UNTIL ImportWkshHeader.NEXT = 0;

      DocCounter := TempImportWkshHeader.COUNT;

      //Find users by purchaser code
      TempImportWkshHeader.RESET;
      IF TempImportWkshHeader.FINDSET THEN
        REPEAT
          IF TempImportWkshHeader."Purchaser Code" <> '' THEN BEGIN
            TempExFlowUserSetup.SETRANGE("Purchaser Code", TempImportWkshHeader."Purchaser Code");
            IF TempExFlowUserSetup.ISEMPTY THEN BEGIN
              Purchaser.GET(TempImportWkshHeader."Purchaser Code");
              ExFlowUserSetup.RESET;
              ExFlowUserSetup.SETRANGE("Purchaser Code",TempImportWkshHeader."Purchaser Code");
              IF ExFlowUserSetup.FINDSET THEN BEGIN
                REPEAT
                  //Add all linked purchasers in ExFlow Setup
                  TempExFlowUserSetup.INIT;
                  TempExFlowUserSetup."User ID" := ExFlowUserSetup."User ID";
                  TempExFlowUserSetup."E-mail ExFlow" := ExFlowUserSetup."E-mail ExFlow";
                  TempExFlowUserSetup."User Name" := ExFlowUserSetup."User Name";
                  TempExFlowUserSetup."Purchaser Code" := TempImportWkshHeader."Purchaser Code";
                  TempExFlowUserSetup.INSERT;
                  TotCounter := TotCounter + 1;
                UNTIL ExFlowUserSetup.NEXT = 0;
              END ELSE BEGIN
                //Add from purchaser table
                TempExFlowUserSetup.INIT;
                TempExFlowUserSetup."User ID" := Purchaser.Code;
                TempExFlowUserSetup."E-mail ExFlow" := Purchaser."E-Mail";
                TempExFlowUserSetup."User Name" := Purchaser.Name;
                TempExFlowUserSetup."Purchaser Code" := TempImportWkshHeader."Purchaser Code";
                TempExFlowUserSetup.INSERT;
                TotCounter := TotCounter + 1;
              END;
            END;
          END ELSE BEGIN
            //Send to coordinator
            TempExFlowUserSetup.INIT;
            TempExFlowUserSetup."User ID" := PurchCoordinator;
            TempExFlowUserSetup."E-mail ExFlow" := Purchaser."E-Mail";
            TempExFlowUserSetup."User Name" := PurchCoordinator;
            TempExFlowUserSetup."Purchaser Code" := TempImportWkshHeader."Purchaser Code";
            TempExFlowUserSetup.INSERT;
            TotCounter := TotCounter + 1;
          END;
        UNTIL TempImportWkshHeader.NEXT = 0;

      //send mail per user
      TempExFlowUserSetup.RESET;
      IF TempExFlowUserSetup.FINDSET THEN BEGIN
        REPEAT
          CLEAR(SmtpMail);

          ToMailAddress := TempExFlowUserSetup."E-mail ExFlow";

          IF ToMailAddress = '' THEN
            ToMailAddress := EmailHeader."Purch. Coordinator Email";

          IF EmailHeader."Test Email" <> '' THEN
            ToMailAddress := EmailHeader."Test Email";

          IF ToMailAddress = '' THEN
            IF NOT HideMessage THEN
              ERROR(STRSUBSTNO(EXF005,TempExFlowUserSetup."User ID"));

          IF ToMailAddress <> '' THEN BEGIN
            SmtpMail.CreateMessage(EmailHeader."Sender Name",EmailHeader."Sender Address",
                                   ToMailAddress,EmailHeader."Email Subject",'',FALSE);

            IF EmailHeader."CC Email" <> '' THEN
              SmtpMail.AddCC(EmailHeader."CC Email");

            SmtpMail.AppendBody(STRSUBSTNO(EXF004,TempExFlowUserSetup."User ID"));
            SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
            SmtpMail.AppendBody(MissingOrders);
            SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
            SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));

            //Add document info
            TempImportWkshHeader.RESET;
            TempImportWkshHeader.SETRANGE("Purchaser Code", TempExFlowUserSetup."Purchaser Code");
            TempImportWkshHeader.FINDSET;
            REPEAT
              IF EmailHeader."Attach Image" THEN BEGIN
                AttachFileName := TempImportWkshHeader."Image File Name";
                CheckAttachment(AttachFileName,TempImportWkshHeader."Image Buffer ID");
                SmtpMail.AddAttachment(AttachFileName, ExFlowFileMgt.GetFileName(AttachFileName));
              END;

              SmtpMail.AppendBody(STRSUBSTNO(OrderLinesMissing,TempImportWkshHeader."Order No. (Import)",TempImportWkshHeader."Vendor Document No."));
              IF TempImportWkshHeader."Admin Comment" <> '' THEN
                SmtpMail.AppendBody(STRSUBSTNO(DocumentComment,TempImportWkshHeader."Admin Comment"));

              SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
              SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
            UNTIL TempImportWkshHeader.NEXT = 0;

            SentCounter := SentCounter + 1;
            SmtpMail.Send;
            CreateEmailLog(EmailHeader,ToMailAddress,TempExFlowUserSetup."User ID",0,TempImportWkshHeader."Inbound Document No.",TempImportWkshHeader."Vendor Document No.",'');
            COMMIT;
          END ELSE
            CreateEmailLog(EmailHeader,ToMailAddress,TempExFlowUserSetup."User ID",0,0,'',MissingEmailAdress);
        UNTIL TempExFlowUserSetup.NEXT = 0;
      END;

      IF NOT HideMessage AND GUIALLOWED THEN
        MESSAGE(STRSUBSTNO(EXF016,DocCounter,SentCounter, TotCounter));
    END;

    PROCEDURE BatchSendEmailUnreceived@1100285007(VAR EmailHeader@1100285002 : Record 12013619;BatchFilter@1100285020 : Code[10];InboundDocNoFilter@1100285019 : Integer);
    VAR
      ImportWkshHeader@1100285000 : Record 12013587;
      TempImportWkshHeader@1100285023 : TEMPORARY Record 12013587;
      ImportWkshLine@1100285003 : Record 12013588;
      Purchaser@1100285006 : Record 13;
      TempImportWkshLine@1100285013 : TEMPORARY Record 12013588;
      ExFlowUserSetup@1100285015 : Record 12013641;
      TempExFlowUserSetup@1100285014 : TEMPORARY Record 12013641;
      SmtpMail@1100285001 : Codeunit 400;
      ExFlowFileMgt@1100285017 : Codeunit 12013602;
      AttachFileName@1100285008 : Text[1024];
      ToMailAddress@1100285016 : Text[1024];
      CR@1100285009 : Char;
      LF@1100285010 : Char;
      DocCounter@1100285018 : Integer;
      TotCounter@1100285011 : Integer;
      SentCounter@1100285012 : Integer;
      ProcessDoc@1100285005 : Boolean;
      PurchCoordinator@1100285021 : TextConst 'ENU=Purchase Coordinator;SVE=Ink”pssamordnare';
      PurchOrder@1100285007 : Record 38;
      ExDoc@1100285022 : Record 12013608;
      TempPurchOrder@1100285024 : TEMPORARY Record 38;
      LastDoc@1100285025 : Integer;
      EmailBody@1100285028 : Text;
      LastImpDocNo@1100285004 : Integer;
    BEGIN
      CR := 13;
      LF := 10;

      //Set filters
      ImportWkshHeader.RESET;
      ImportWkshHeader.SETRANGE("PO Matched Document", TRUE);
      ImportWkshHeader.SETRANGE("ExFlow Document Type", ImportWkshHeader."ExFlow Document Type"::Invoice);
      IF InboundDocNoFilter <> 0 THEN
        ImportWkshHeader.SETRANGE("Inbound Document No.",InboundDocNoFilter)
      ELSE IF BatchFilter <> '' THEN
        ImportWkshHeader.SETRANGE("Journal Batch Name",BatchFilter);

      IF ImportWkshHeader.FINDSET THEN BEGIN
        IF NOT CheckReceiptBasedOnLines(ImportWkshHeader) THEN BEGIN
          REPEAT
            IF CheckBatchSend(EmailHeader,ImportWkshHeader."Inbound Document No.",ImportWkshHeader."Date Created",InboundDocNoFilter) THEN BEGIN
              IF ImportWkshHeader."Order No." <> '' THEN BEGIN
                TempImportWkshHeader.INIT;
                TempImportWkshHeader.TRANSFERFIELDS(ImportWkshHeader);
                TempImportWkshHeader.INSERT;
                TempImportWkshLine.INIT;
                TempImportWkshLine."Inbound Document No." := ImportWkshHeader."Inbound Document No.";
                TempImportWkshLine."Order No." := ImportWkshHeader."Order No.";
                TempImportWkshLine.INSERT;
              END;
            END;
          UNTIL ImportWkshHeader.NEXT = 0;
        END ELSE BEGIN
          //OCR Imported, Searh for lines
          REPEAT
            IF CheckBatchSend(EmailHeader, ImportWkshHeader."Inbound Document No.",ImportWkshHeader."Date Created",InboundDocNoFilter) THEN BEGIN
              ImportWkshLine.RESET;
              ImportWkshLine.SETRANGE("Inbound Document No.", ImportWkshHeader."Inbound Document No.");
              ImportWkshLine.SETFILTER(Type, '<>%1', ImportWkshLine.Type::" ");
              ImportWkshLine.SETFILTER("Order Line No.",'<>%1',0);
              ImportWkshLine.SETFILTER("Receipt No.", '%1', '');
              IF ImportWkshLine.FINDSET THEN BEGIN
                //Store headers
                TempImportWkshHeader.INIT;
                TempImportWkshHeader.TRANSFERFIELDS(ImportWkshHeader);
                TempImportWkshHeader.INSERT;
                REPEAT
                  TempImportWkshLine.INIT;
                  TempImportWkshLine.TRANSFERFIELDS(ImportWkshLine);
                  TempImportWkshLine."Temp Line Recipts Missing" := TRUE;
                  TempImportWkshLine.INSERT;
                UNTIL ImportWkshLine.NEXT = 0;
              END;
            END;
          UNTIL ImportWkshHeader.NEXT = 0;
        END;
      END;

      DocCounter := TempImportWkshHeader.COUNT;

      //Find repsonsible purchaser
      TempImportWkshLine.RESET;
      IF TempImportWkshLine.FINDSET THEN
        REPEAT
          IF NOT TempPurchOrder.GET(PurchOrder."Document Type"::Order,TempImportWkshLine."Order No.") THEN BEGIN
            PurchOrder.GET(PurchOrder."Document Type"::Order,TempImportWkshLine."Order No.");
            TempPurchOrder.INIT;
            TempPurchOrder.TRANSFERFIELDS(PurchOrder);
            IF ExDoc.RetrieveRecord(ExDoc,PurchOrder."Document Type",PurchOrder."No.") THEN BEGIN
              //For Order and RecFlow
              IF ExDoc.Initiator <> '' THEN
                TempPurchOrder."Purchaser Code" := ExDoc.Initiator;

              IF ExDoc."Assigned Receipt Group" <> '' THEN
                TempPurchOrder."Purchaser Code" := ExDoc."Assigned Receipt Group";
              END;
            TempPurchOrder.INSERT;
          END;

          IF TempPurchOrder."Purchaser Code" <> '' THEN BEGIN
            TempImportWkshLine."Purchaser Code" := TempPurchOrder."Purchaser Code";
            TempImportWkshLine.MODIFY;
            TempExFlowUserSetup.SETRANGE("Purchaser Code", TempPurchOrder."Purchaser Code");
            IF TempExFlowUserSetup.ISEMPTY THEN BEGIN
              IF Purchaser.GET(TempPurchOrder."Purchaser Code") THEN BEGIN
                ExFlowUserSetup.RESET;
                ExFlowUserSetup.SETRANGE("Purchaser Code",TempPurchOrder."Purchaser Code");
                IF ExFlowUserSetup.FINDSET THEN BEGIN
                  REPEAT
                    //Add all linked purchasers in ExFlow Setup
                    TempExFlowUserSetup.INIT;
                    TempExFlowUserSetup."User ID" := ExFlowUserSetup."User ID";
                    TempExFlowUserSetup."E-mail ExFlow" := ExFlowUserSetup."E-mail ExFlow";
                    TempExFlowUserSetup."User Name" := ExFlowUserSetup."User Name";
                    TempExFlowUserSetup."Purchaser Code" := TempPurchOrder."Purchaser Code";
                    TempExFlowUserSetup.INSERT;
                    TotCounter := TotCounter + 1;
                  UNTIL ExFlowUserSetup.NEXT = 0;
                END ELSE BEGIN
                  //Add from purchaser table
                  TempExFlowUserSetup.INIT;
                  TempExFlowUserSetup."User ID" := Purchaser.Code;
                  TempExFlowUserSetup."E-mail ExFlow" := Purchaser."E-Mail";
                  TempExFlowUserSetup."User Name" := Purchaser.Name;
                  TempExFlowUserSetup."Purchaser Code" := TempPurchOrder."Purchaser Code";
                  TempExFlowUserSetup.INSERT;
                  TotCounter := TotCounter + 1;
                END;
              END ELSE BEGIN
                //For Order and RecFlow
                ExFlowUserSetup.RESET;
                ExFlowUserSetup.GET(TempPurchOrder."Purchaser Code");
                TempExFlowUserSetup.INIT;
                TempExFlowUserSetup."User ID" := ExFlowUserSetup."User ID";
                TempExFlowUserSetup."E-mail ExFlow" := ExFlowUserSetup."E-mail ExFlow";
                TempExFlowUserSetup."User Name" := ExFlowUserSetup."User Name";
                TempExFlowUserSetup."Purchaser Code" := TempPurchOrder."Purchaser Code";
                TempExFlowUserSetup.INSERT;
                TotCounter := TotCounter + 1;
              END;
            END;
          END ELSE BEGIN
            //Send to coordinator
            TempExFlowUserSetup.INIT;
            TempExFlowUserSetup."User ID" := PurchCoordinator;
            TempExFlowUserSetup."E-mail ExFlow" := EmailHeader."Purch. Coordinator Email";
            TempExFlowUserSetup."User Name" := PurchCoordinator;
            TempExFlowUserSetup."Purchaser Code" := TempPurchOrder."Purchaser Code";
            TempExFlowUserSetup.INSERT;
            TotCounter := TotCounter + 1;
          END;
        UNTIL TempImportWkshLine.NEXT = 0;

      //send mail per user
      TempExFlowUserSetup.RESET;
      IF TempExFlowUserSetup.FINDSET THEN BEGIN
        REPEAT
          CLEAR(SmtpMail);

          ToMailAddress := TempExFlowUserSetup."E-mail ExFlow";

          IF ToMailAddress = '' THEN
            ToMailAddress := EmailHeader."Purch. Coordinator Email";

          IF EmailHeader."Test Email" <> '' THEN
            ToMailAddress := EmailHeader."Test Email";

          IF ToMailAddress = '' THEN
            IF NOT HideMessage THEN
              ERROR(STRSUBSTNO(EXF005,TempExFlowUserSetup."User ID"));

          IF ToMailAddress <> '' THEN BEGIN
            SmtpMail.CreateMessage(EmailHeader."Sender Name",EmailHeader."Sender Address",
                                   ToMailAddress,EmailHeader."Email Subject",'',FALSE);

            IF EmailHeader."CC Email" <> '' THEN
              SmtpMail.AddCC(EmailHeader."CC Email");

            SmtpMail.AppendBody(STRSUBSTNO(EXF004,TempExFlowUserSetup."User ID"));
            SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
            SmtpMail.AppendBody(MissingRecipts);
            SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
            SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));

            //Add document info
            TempImportWkshLine.RESET;
            TempImportWkshLine.SETCURRENTKEY("Inbound Document No.");
            TempImportWkshLine.SETRANGE("Purchaser Code", TempExFlowUserSetup."Purchaser Code");
            TempImportWkshLine.FINDSET;
            REPEAT
              IF LastImpDocNo <> TempImportWkshLine."Inbound Document No." THEN BEGIN
                LastImpDocNo := TempImportWkshLine."Inbound Document No.";
                TempImportWkshHeader.GET(TempImportWkshLine."Inbound Document No.");
                IF EmailHeader."Attach Image" THEN BEGIN
                  AttachFileName := TempImportWkshHeader."Image File Name";
                  CheckAttachment(AttachFileName,TempImportWkshHeader."Image Buffer ID");
                  SmtpMail.AddAttachment(AttachFileName, ExFlowFileMgt.GetFileName(AttachFileName));
                END;
              END;

              IF TempImportWkshLine."Temp Line Recipts Missing" THEN
                EmailBody := STRSUBSTNO(LineReciptsMissing,TempImportWkshLine."No.",TempImportWkshLine."Order No.",TempImportWkshHeader."Vendor Document No.")
              ELSE
                EmailBody := STRSUBSTNO(ReciptsMissing,TempImportWkshLine."Order No.",TempImportWkshHeader."Vendor Document No.");

              IF TempImportWkshHeader."Admin Comment" <> '' THEN
                EmailBody := EmailBody + STRSUBSTNO(DocumentComment,TempImportWkshHeader."Admin Comment");
              IF TempImportWkshLine."Matching Comment" <> '' THEN
                EmailBody := EmailBody + STRSUBSTNO(MatchingComment,TempImportWkshLine."Matching Comment");
              SmtpMail.AppendBody(EmailBody);
              SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
              SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
            UNTIL TempImportWkshLine.NEXT = 0;

            SentCounter := SentCounter + 1;
            SmtpMail.Send;
            CreateEmailLog(EmailHeader,ToMailAddress,TempExFlowUserSetup."User ID",0,TempImportWkshHeader."Inbound Document No.",TempImportWkshHeader."Vendor Document No.",'');
            COMMIT;
          END ELSE
            CreateEmailLog(EmailHeader,ToMailAddress,TempExFlowUserSetup."User ID",0,0,'',MissingEmailAdress);
        UNTIL TempExFlowUserSetup.NEXT = 0;
      END;

      IF NOT HideMessage AND GUIALLOWED THEN
        MESSAGE(STRSUBSTNO(EXF016,DocCounter,SentCounter, TotCounter));
    END;

    PROCEDURE BatchSendEmailInboxReminder@1100285012(VAR EmailHeader@1100285000 : Record 12013619);
    VAR
      _useSMTP@1100285029 : Boolean;
      _bigText@1100285007 : BigText;
      _xmlDoc@1100285011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      _xmlProcInstr@1100285010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      _xmlNodeList@1100285009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      _xmlNode@1100285008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      _exUserComp@1100285015 : Record 12013641;
      _tempEXUser@1100285016 : TEMPORARY Record 12013640;
      _exDoc@1100285013 : Record 12013608;
      _tempEXDoc@1100285001 : TEMPORARY Record 12013608;
      SMTPSetup@1100285031 : Record 409;
      WebCompID@1100285032 : Record 12013630;
      _f@1100285014 : File;
      _f2@1100285021 : File;
      _text@1100285019 : Text[1024];
      _appendText@1100285020 : Text[1024];
      _i@1100285012 : Integer;
      _asHTML@1100285017 : Boolean;
      CR@1100285006 : Char;
      LF@1100285005 : Char;
      TotCounter@1100285004 : Integer;
      SentCounter@1100285003 : Integer;
      ProcessDoc@1100285002 : Boolean;
      SmtpMail@1100285018 : Codeunit 400;
      _wsExFlow@1100285030 : Codeunit 12013635;
      _oStream@1100285022 : OutStream;
      _iStream@1100285026 : InStream;
      _writeHTML@1100285023 : Boolean;
      _color@1100285024 : Text[30];
      _bcolor@1100285025 : Text[30];
      _tempFilename@1100285027 : Text[250];
      _ch@1100285028 : Char;
      ExSendMailMgt@1100285033 : Codeunit 12013641;
      LogToAddress@1100285034 : Text[100];
    BEGIN
      CR := 13;
      LF := 10;

      TotCounter := 0;
      SentCounter := 0;

      IF NOT SMTPSetup.GET THEN
        CLEAR(SMTPSetup);
      _useSMTP := SMTPSetup."SMTP Server" <> '';

      _xmlDoc := _xmlDoc.XmlDocument();

      // When started through NAS and job queue, emails should not go out if the company where the job
      // queue is run from is not an active web company. Fixes the issue with duplicating a prod company
      // into a test company
      IF NOT GUIALLOWED THEN BEGIN
        WebCompID.RESET;
        WebCompID.SETRANGE("Company Name", COMPANYNAME);
        WebCompID.SETRANGE("Web enabled", TRUE);
        IF NOT WebCompID.FINDFIRST THEN
          EXIT;
      END;

      WebCompID.RESET;
      WebCompID.SETRANGE("Web enabled", TRUE);
      IF WebCompID.FINDSET THEN
        REPEAT
          _exUserComp.RESET;
          _exUserComp.CHANGECOMPANY(WebCompID."Company Name");
          _exUserComp.SETRANGE(Blocked,FALSE);
          _exUserComp.SETFILTER("E-mail ExFlow",'<>''''');
          IF _exUserComp.FINDSET THEN
            REPEAT
              IF NOT _tempEXUser.GET(_exUserComp."User ID") THEN BEGIN
                _tempEXUser."User ID" := _exUserComp."User ID";
                _tempEXUser.INSERT;

                // request user current inbox
                _tempEXDoc.RESET();
                _tempEXDoc.DELETEALL();

                CLEAR(_bigText);
                _wsExFlow.GetUserCurrentDocuments('',_exUserComp."User ID",_tempEXDoc); // empty compName = all docs

                  WITH _tempEXDoc DO BEGIN
                    RESET;
                    IF FINDSET THEN BEGIN
                      TotCounter := TotCounter + 1;
                      ExSendMailMgt.SetExFEmailHeader( EmailHeader);
                      ExSendMailMgt.SetExUserComp(_exUserComp);
                      ExSendMailMgt.SetTableNo(DATABASE::"EX Document");
                      IF EmailHeader."Test Email" <> '' THEN
                        LogToAddress := EmailHeader."Test Email"
                      ELSE
                        LogToAddress := _exUserComp."E-mail ExFlow";
                      COMMIT;
                      CLEARLASTERROR;
                      IF NOT ExSendMailMgt.RUN(_tempEXDoc) THEN BEGIN
                         CreateEmailLog(EmailHeader,LogToAddress,_exUserComp."User ID",_tempEXDoc."Temp ID",0,_tempEXDoc."Document No.",COPYSTR(GETLASTERRORTEXT,1,250));
                      END ELSE BEGIN
                        CreateEmailLog(EmailHeader,LogToAddress,_exUserComp."User ID",_tempEXDoc."Temp ID",0,_tempEXDoc."Document No.",'');
                        SentCounter := SentCounter + 1;
                      END;
                    END;
                  END;
              END;
          UNTIL _exUserComp.NEXT = 0;
        UNTIL WebCompID.NEXT = 0;

      IF NOT HideMessage AND GUIALLOWED THEN
        MESSAGE(STRSUBSTNO(EXF006, TotCounter, SentCounter));
    END;

    PROCEDURE BatchSendEmailApprovedOrder@1100285015(VAR EmailHeader@1100285000 : Record 12013619);
    VAR
      _useSMTP@1100285029 : Boolean;
      _exUserComp@1100285015 : Record 12013641;
      _tempEXUser@1100285016 : TEMPORARY Record 12013640;
      _exDoc@1100285013 : Record 12013608;
      _f@1100285014 : File;
      _f2@1100285021 : File;
      _text@1100285019 : Text[1024];
      _appendText@1100285020 : Text[1024];
      _i@1100285012 : Integer;
      _asHTML@1100285001 : Boolean;
      CR@1100285006 : Char;
      LF@1100285005 : Char;
      TotCounter@1100285004 : Integer;
      SentCounter@1100285003 : Integer;
      ProcessDoc@1100285002 : Boolean;
      SmtpMail@1100285018 : Codeunit 400;
      _wsExFlow@1100285030 : Codeunit 12013635;
      _oStream@1100285022 : OutStream;
      _iStream@1100285026 : InStream;
      _writeHTML@1100285023 : Boolean;
      _color@1100285024 : Text[30];
      _bcolor@1100285025 : Text[30];
      _tempFilename@1100285027 : Text[250];
      _ch@1100285028 : Char;
      SMTPSetup@1100285007 : Record 409;
    BEGIN
      IF NOT (EmailHeader."Process Type" = EmailHeader."Process Type"::Scheduled) THEN
        EXIT;

      IF NOT SMTPSetup.GET THEN
        CLEAR(SMTPSetup);

      TotCounter := 0;
      SentCounter := 0;
      // exflow user setup comp - if user once then skip, if email <> ''
      _exUserComp.RESET();
      _exUserComp.SETRANGE(Blocked,FALSE);
      _exUserComp.SETFILTER("E-mail ExFlow",'<>''''');
      IF _exUserComp.FINDSET() THEN REPEAT
        IF NOT _tempEXUser.GET(_exUserComp."User ID") THEN BEGIN
          _tempEXUser."User ID" := _exUserComp."User ID";
          _tempEXUser.INSERT;

          WITH _exDoc DO BEGIN
            RESET;
            SETRANGE("Document Type","Document Type"::Order);
            SETRANGE("Requisition Status","Requisition Status"::Unsubmitted);
            SETRANGE(Initiator,_exUserComp."User ID");
            SETRANGE(Status,Status::Approved);

            IF FINDSET THEN BEGIN
              SendTemplateEmail(_exDoc,EmailHeader,_exUserComp,SMTPSetup,DATABASE::"EX Document");
              SentCounter := SentCounter + 1;
            END;
          END;
        END;
      UNTIL _exUserComp.NEXT() = 0;

      IF NOT HideMessage AND GUIALLOWED THEN
        MESSAGE(STRSUBSTNO(EXF006, SentCounter, TotCounter));
    END;

    PROCEDURE BatchSendEmailRejectedQuote@1100285013(VAR EmailHeader@1100285000 : Record 12013619);
    VAR
      _useSMTP@1100285029 : Boolean;
      _exUserComp@1100285015 : Record 12013641;
      _tempEXUser@1100285016 : TEMPORARY Record 12013640;
      _exDoc@1100285013 : Record 12013608;
      _TempExDoc@1100285008 : TEMPORARY Record 12013608;
      _f@1100285014 : File;
      _f2@1100285021 : File;
      _text@1100285019 : Text[1024];
      _appendText@1100285020 : Text[1024];
      _i@1100285012 : Integer;
      _asHTML@1100285001 : Boolean;
      CR@1100285006 : Char;
      LF@1100285005 : Char;
      TotCounter@1100285004 : Integer;
      SentCounter@1100285003 : Integer;
      ProcessDoc@1100285002 : Boolean;
      SmtpMail@1100285018 : Codeunit 400;
      _wsExFlow@1100285030 : Codeunit 12013635;
      _oStream@1100285022 : OutStream;
      _iStream@1100285026 : InStream;
      _writeHTML@1100285023 : Boolean;
      _color@1100285024 : Text[30];
      _bcolor@1100285025 : Text[30];
      _tempFilename@1100285027 : Text[250];
      _ch@1100285028 : Char;
      SMTPSetup@1100285007 : Record 409;
    BEGIN
      IF NOT (EmailHeader."Process Type" = EmailHeader."Process Type"::Scheduled) THEN
        EXIT;

      IF NOT SMTPSetup.GET THEN
        CLEAR(SMTPSetup);

      TotCounter := 0;
      SentCounter := 0;
      // exflow user setup comp - if user once then skip, if email <> ''
      _exUserComp.RESET();
      _exUserComp.SETRANGE(Blocked,FALSE);
      _exUserComp.SETFILTER("E-mail ExFlow",'<>''''');
      IF _exUserComp.FINDSET() THEN REPEAT
        IF NOT _tempEXUser.GET(_exUserComp."User ID") THEN BEGIN
          _tempEXUser."User ID" := _exUserComp."User ID";
          _tempEXUser.INSERT;

          WITH _exDoc DO BEGIN
            _TempExDoc.RESET;
            _TempExDoc.DELETEALL;

            RESET;
            SETRANGE("Document Type","Document Type"::Quote);
            SETRANGE("Requisition Status","Requisition Status"::Unsubmitted);
            SETRANGE(Initiator,_exUserComp."User ID");
            IF FINDSET THEN BEGIN
              REPEAT
                CALCFIELDS(Rejected);
                IF Rejected THEN BEGIN
                  _TempExDoc.INIT;
                  _TempExDoc.TRANSFERFIELDS(_exDoc);
                  _TempExDoc.INSERT;
                END;
                SentCounter := SentCounter + 1;
              UNTIL NEXT = 0;

              IF _TempExDoc.FINDSET THEN
                SendTemplateEmail(_TempExDoc,EmailHeader,_exUserComp,SMTPSetup,DATABASE::"EX Document");
            END;
          END;
        END;
      UNTIL _exUserComp.NEXT() = 0;

      IF NOT HideMessage AND GUIALLOWED THEN
        MESSAGE(STRSUBSTNO(EXF006, SentCounter, TotCounter));
    END;

    PROCEDURE BatchSendEmailCreatedReq@1100285014(VAR EmailHeader@1100285000 : Record 12013619);
    VAR
      _exUserComp@1100285015 : Record 12013641;
      _tempEXUser@1100285016 : TEMPORARY Record 12013640;
      _exDoc@1100285013 : Record 12013608;
      _TempExDoc@1100285008 : TEMPORARY Record 12013608;
      SMTPSetup@1100285007 : Record 409;
      EmailLog@1100285010 : Record 12013634;
      _useSMTP@1100285011 : Boolean;
      _f@1100285014 : File;
      _f2@1100285021 : File;
      _text@1100285019 : Text[1024];
      _appendText@1100285020 : Text[1024];
      _i@1100285012 : Integer;
      _asHTML@1100285001 : Boolean;
      CR@1100285006 : Char;
      LF@1100285005 : Char;
      TotCounter@1100285004 : Integer;
      SentCounter@1100285003 : Integer;
      ProcessDoc@1100285002 : Boolean;
      SmtpMail@1100285018 : Codeunit 400;
      _wsExFlow@1100285030 : Codeunit 12013635;
      _oStream@1100285022 : OutStream;
      _iStream@1100285026 : InStream;
      _writeHTML@1100285023 : Boolean;
      _color@1100285024 : Text[30];
      _bcolor@1100285025 : Text[30];
      _tempFilename@1100285027 : Text[250];
      _ch@1100285028 : Char;
    BEGIN
      IF NOT (EmailHeader."Process Type" = EmailHeader."Process Type"::Scheduled) THEN
        EXIT;

      IF NOT SMTPSetup.GET THEN
        CLEAR(SMTPSetup);

      TotCounter := 0;
      SentCounter := 0;
      // exflow user setup comp - if user once then skip, if email <> ''
      _exUserComp.RESET();
      _exUserComp.SETRANGE(Blocked,FALSE);
      _exUserComp.SETFILTER("E-mail ExFlow",'<>''''');
      IF _exUserComp.FINDSET() THEN REPEAT
        IF NOT _tempEXUser.GET(_exUserComp."User ID") THEN BEGIN
          _tempEXUser."User ID" := _exUserComp."User ID";
          _tempEXUser.INSERT;

          WITH _exDoc DO BEGIN
            _TempExDoc.RESET;
            _TempExDoc.DELETEALL;

            RESET;
            SETRANGE("Document Type","Document Type"::Requisition);
            SETRANGE("Created By",_exUserComp."User ID");
            IF FINDSET THEN BEGIN
              REPEAT
                EmailLog.RESET;
                EmailLog.SETCURRENTKEY("Ex Document ID");
                EmailLog.SETRANGE("Ex Document ID", _exDoc.ID);
                IF NOT EmailLog.FINDFIRST THEN BEGIN
                  _TempExDoc.INIT;
                  _TempExDoc.TRANSFERFIELDS(_exDoc);
                  _TempExDoc.INSERT;
                END;
                SentCounter := SentCounter + 1;
              UNTIL NEXT = 0;

              IF _TempExDoc.FINDSET THEN
                SendTemplateEmail(_TempExDoc,EmailHeader,_exUserComp,SMTPSetup,DATABASE::"EX Document");
            END;
          END;
        END;
      UNTIL _exUserComp.NEXT() = 0;

      IF NOT HideMessage AND GUIALLOWED THEN
        MESSAGE(STRSUBSTNO(EXF006, SentCounter, TotCounter));
    END;

    PROCEDURE SendSSOMail@1100285016(SendTo@1100285000 : Text;SSOCode@1100285001 : Text);
    VAR
      EmailHeader@1100285006 : Record 12013619;
      User@1100285004 : Record 12013641;
      WebCompID@1100285008 : Record 12013630;
      SMTPMail@1100285002 : Codeunit 400;
      BodyTxt@1100285003 : Text;
      AddExists@1100285005 : Boolean;
      SSOFile@1100285007 : File;
    BEGIN
      AddExists := FALSE;
      WebCompID.RESET;
      WebCompID.SETRANGE("Web enabled", TRUE);
      IF WebCompID.FINDSET THEN BEGIN
        REPEAT
          User.RESET;
          User.CHANGECOMPANY(WebCompID."Company Name");
          User.SETRANGE(Blocked,FALSE);
          IF User.FINDSET THEN
            REPEAT
              IF LOWERCASE(User."E-mail ExFlow") = LOWERCASE(SendTo) THEN
                AddExists := TRUE;
            UNTIL (User.NEXT = 0) OR AddExists;
        UNTIL (WebCompID.NEXT = 0) OR AddExists;
      END;

      IF NOT AddExists THEN
        ERROR(EXF012,SendTo);

      EmailHeader.GET(EmailHeader.Type::"SSO Login Email");
      IF NOT EmailHeader."Send Ticket as Text" THEN
        BodyTxt:=STRSUBSTNO(SSOHTMLtext,EXF011,SSOCode)
      ELSE
        BodyTxt:= EXF011 + ' ' +SSOCode;

      CLEAR(SMTPMail);
      SMTPMail.CreateMessage(EmailHeader."Sender Name",EmailHeader."Sender Address",
                              SendTo,EXF010,BodyTxt,NOT EmailHeader."Send Ticket as Text");
      SMTPMail.Send;
      CreateEmailLog(EmailHeader,SendTo,User."User ID",0,0,'',SMTPMail.GetLastSendMailErrorText);
    END;

    LOCAL PROCEDURE CheckAttachment@1100285000(VAR AttachFileName@1100285001 : Text[250];ExBlobID@1100285002 : Integer);
    VAR
      ExBlob@1100285003 : Record 12013591;
      ExFlowFileMgt@1100285000 : Codeunit 12013602;
    BEGIN
      IF ExBlobID = 0 THEN
        EXIT;

      AttachFileName := ExFlowFileMgt.ServerTempFileName(ExFlowFileMgt.GetFileName(AttachFileName),'');

      ExBlob.GET(ExBlobID);
      ExBlob.CALCFIELDS(BLOB);
      ExFlowFileMgt.ExportBLOB(ExBlob,AttachFileName);
    END;

    PROCEDURE SendEmail@1100285001(EmailAddr@1100285000 : Text[1024];AttachFileName@1100285002 : Text[250];ExBlobID@1100285003 : Integer);
    VAR
      Mail@1100285001 : Codeunit 397;
    BEGIN
      CheckAttachment(AttachFileName,ExBlobID);
      Mail.NewMessage(EmailAddr,'','','','',AttachFileName,TRUE);
    END;

    LOCAL PROCEDURE SendTemplateEmail@1100285020(VAR TempExDoc@1100285000 : TEMPORARY Record 12013608;VAR _emailHeader@1100285004 : Record 12013619;_exUserComp@1100285005 : Record 12013641;SMTPSetup@1100285002 : Record 409;TableNo@1100285030 : Integer);
    VAR
      SmtpMail@1100285001 : Codeunit 400;
      _f@1100285018 : File;
      _f2@1100285017 : File;
      _appendText@1100285008 : Text[1024];
      _i@1100285006 : Integer;
      _int@1100285007 : Integer;
      _oStream@1100285015 : OutStream;
      _iStream@1100285014 : InStream;
      _writeHTML@1100285013 : Boolean;
      _color@1100285012 : Text[30];
      _bcolor@1100285011 : Text[30];
      _tempFilename@1100285010 : Text[250];
      _ch@1100285009 : Char;
      _text@1100285003 : Text[1024];
      AttachmentFile@1100285016 : Text[250];
      ExAppSetup@1100285019 : Record 12013601;
      LF@1100285020 : Char;
      CR@1100285021 : Char;
      dotNetArray@1100285026 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      dotNetFile@1100285025 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      dotNetEncoding@1100285024 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      dotNetFileStream@1100285023 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream";
      int@1100285027 : Integer;
      Company@1100285028 : Record 2000000006;
      EXFileMgt@1100285029 : Codeunit 12013602;
      ToMailAddress@1100285022 : Text[1024];
    BEGIN
      CR := 13;
      LF := 10;

      IF NOT SMTPSetup.GET THEN
        CLEAR(SMTPSetup);

      ExAppSetup.GET;

      _emailHeader.TESTFIELD("ExFlow Web URL");
      _emailHeader.CALCFIELDS("HTML Template File");

      IF _emailHeader."HTML Template File".HASVALUE() THEN BEGIN
        // create local template.htm from blob
        _f.CREATETEMPFILE();
        _tempFilename := _f.NAME +'.txt';
        _f.CLOSE();
        _f.CREATE(_tempFilename);
        _f.CREATEOUTSTREAM(_oStream);
        _emailHeader."HTML Template File".CREATEINSTREAM(_iStream);
        COPYSTREAM(_oStream,_iStream);
        _f.CLOSE;

        IF _emailHeader."Test Email" <> '' THEN
          ToMailAddress := _emailHeader."Test Email"
        ELSE
          ToMailAddress := _exUserComp."E-mail ExFlow";

        dotNetArray := dotNetFile.ReadAllLines(_tempFilename,dotNetEncoding.GetEncoding(1252));
        WITH TempExDoc DO BEGIN
          SmtpMail.CreateMessage(_emailHeader."Sender Name",
            _emailHeader."Sender Address",
            ToMailAddress,
            _emailHeader."Email Subject",_emailHeader."Email Subject",TRUE);

          _writeHTML := FALSE;
          FOR int := 0 TO (dotNetArray.Length - 1) DO BEGIN
            _text := dotNetArray.GetValue(int); // line by line
            IF STRPOS(_text,'<html') > 0 THEN
              _writeHTML := TRUE;

            IF _writeHTML THEN BEGIN
              _appendText := _text;

              _i := STRPOS(UPPERCASE(_text),'USER_NAME');
              IF _i > 0 THEN BEGIN
                _appendText := COPYSTR(_text,1,_i -1) +_exUserComp."User Name";
                IF STRLEN(_text) > _i +9 THEN
                  _appendText += COPYSTR(_text,_i +9);
              END;

              _i := STRPOS(UPPERCASE(_text),'EXFLOW_URL');
              IF _i > 0 THEN BEGIN
                _appendText := COPYSTR(_text,1,_i -1) +'<a href="' +_emailHeader."ExFlow Web URL" +'">ExFlow Web</a>';
                IF STRLEN(_text) > _i +10 THEN
                  _appendText += COPYSTR(_text,_i +10);
              END;

              _i := STRPOS(UPPERCASE(_text),'RESULT_TABLES');
              IF _i > 0 THEN BEGIN
                _appendText := '<table cellpadding ="5px" cellspacing="0px" border="0px"  style="border-left: 1px solid #eaeaea; border-bottom: 1px solid #eaeaea;">';
                SmtpMail.AppendBody(_appendText);

                _appendText := COPYSTR(_text,1,_i -1);
                SmtpMail.AppendBody(_appendText);

                REPEAT
                  _color := '#000000';
                  _bcolor := '#f5f5f5';
                  IF "Due Date" < WORKDATE THEN BEGIN
                    _bcolor := '#bb0000';
                    _color := '#fff';
                  END ELSE
                    IF "Due Date" < CALCDATE('<+7D>',WORKDATE) THEN
                      _color := '#bb0000';
                  _appendText := STRSUBSTNO('%1 %2 %3 %4 %5 %6 %7'
                    ,'<tr style="background-color: ' +_bcolor +'; color: #444339; font-weight:bold; font-size: 12px; font-family: Lucida Sans, Tahoma, Verdana;">'
                    ,'<td style="width: 70px; border-right: 1px solid #eaeaea; color: ' +_color +'">' +TempExDoc."Document No." +'</td>'
                    ,'<td style="width:100px; border-right: 1px solid #eaeaea; color: ' +_color +'">' +FORMAT(TempExDoc."Document Date") +'</td>'
                    ,'<td style="width:100px; border-right: 1px solid #eaeaea; color: ' +_color +'">' +FORMAT(TempExDoc."Due Date") +'</td>'
                    ,'<td style="width:150px; border-right: 1px solid #eaeaea; color: ' +_color +'">' +TempExDoc."Vendor Name" +'</td>'
                    ,'<td style="width:150px; border-right: 1px solid #eaeaea; color: ' +_color +'">' +TempExDoc."Temp Company Name" +'</td>'
                    ,'</tr>'
                    );

                  AttachmentFile := '';
                  IF _emailHeader."Attach Image" THEN BEGIN
                    AttachmentFile := ExAppSetup."Path to Used Invoices" + "Image Name";
                    IF NOT EXFileMgt.FileExist(ExAppSetup."Path to Used Invoices", "Image Name") THEN
                      AttachmentFile := '';
                  END;

                  SmtpMail.AppendBody(_appendText);
                  IF AttachmentFile <> '' THEN
                    SmtpMail.AddAttachment(AttachmentFile,"Image Name");

                UNTIL NEXT = 0;

                SmtpMail.AppendBody('</table>');
              END
              ELSE
                SmtpMail.AppendBody(_appendText)
            END;
          END;

          COMMIT;

          IF _emailHeader."CC Email" <> '' THEN
            SmtpMail.AddCC(_emailHeader."CC Email");

          SmtpMail.Send();
          CreateEmailLog(_emailHeader,ToMailAddress,_exUserComp."User ID",TempExDoc.ID,0,TempExDoc."Document No.",'');
        END;

        IF EXISTS(_tempFilename) THEN
          ERASE(_tempFilename);

      END ELSE BEGIN
        IF _emailHeader."Test Email" <> '' THEN
          ToMailAddress := _emailHeader."Test Email"
        ELSE
          ToMailAddress := _exUserComp."E-mail ExFlow";

        SmtpMail.CreateMessage(_emailHeader."Sender Name",
          _emailHeader."Sender Address",
          ToMailAddress,
          _emailHeader."Email Subject",_emailHeader."Email Subject",TRUE);

        WITH TempExDoc DO BEGIN
          REPEAT
            AttachmentFile := '';
            IF _emailHeader."Attach Image" THEN BEGIN
              AttachmentFile := ExAppSetup."Path to Used Invoices" + "Image Name";
              IF NOT EXFileMgt.FileExist(ExAppSetup."Path to Used Invoices", "Image Name") THEN
                AttachmentFile := '';
            END;

            _appendText := STRSUBSTNO(EMAILTXT,TempExDoc."Document No.") ;

            SmtpMail.AppendBody(_appendText);
            SmtpMail.AppendBody(FORMAT(CR)+FORMAT(LF));
            IF AttachmentFile <> '' THEN
              SmtpMail.AddAttachment(AttachmentFile,"Image Name");

          UNTIL NEXT = 0;
        END;

        COMMIT;

        IF _emailHeader."CC Email" <> '' THEN
          SmtpMail.AddCC(_emailHeader."CC Email");
        SmtpMail.Send();
        CreateEmailLog(_emailHeader,ToMailAddress,_exUserComp."User ID",TempExDoc.ID,0,TempExDoc."Document No.",'');
      END;
    END;

    PROCEDURE CheckBatchSend@1100285004(EmailHeader@1100285000 : Record 12013619;InboundDocNo@1100285004 : Integer;DateCreated@1100285001 : Date;InboundDocNoFilter@1100285003 : Integer) : Boolean;
    VAR
      EmailLog@1100285002 : Record 12013634;
    BEGIN
      IF InboundDocNoFilter <> 0 THEN
        EXIT(TRUE);

      EmailLog.RESET;
      EmailLog.SETRANGE("Inbound Document No.", InboundDocNo);
      EmailLog.SETRANGE("Created At", CURRENTDATETIME -23*1000*60*60, CURRENTDATETIME);
      IF EmailLog.FINDFIRST THEN
        EXIT(FALSE);

      IF EmailHeader."Delay sending (days)" = 0 THEN
        EXIT(TRUE);

      IF (DateCreated + EmailHeader."Delay sending (days)") <= TODAY THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE OpenEmailLog@1100285006(ExPurchDoc@1100285000 : Record 12013587);
    VAR
      ExFlowEmailLog@1100285001 : Record 12013634;
    BEGIN
      ExFlowEmailLog.RESET;
      ExFlowEmailLog.SETRANGE("Inbound Document No.", ExPurchDoc."Inbound Document No.");
      PAGE.RUN(0,ExFlowEmailLog);
    END;

    PROCEDURE SetHideMessage@1100285010();
    BEGIN
      HideMessage := TRUE;
    END;

    PROCEDURE CreateEmailLog@1100285011(VAR EmailHeader@1100285001 : Record 12013619;EmailAddr@1100285003 : Text[1024];SendToReference@1100285004 : Code[100];ExDocID@1100285010 : BigInteger;InboundDocID@1100285009 : Integer;DocNo@1100285008 : Code[100];ErrorMsg@1100285000 : Text);
    VAR
      EmailLog@1100285002 : Record 12013634;
      ExFlow@1100285005 : Codeunit 12013601;
      ExUserComp@1100285006 : Record 12013641;
      EmailHeader1@1100285007 : Record 12013619;
    BEGIN
      EmailLog.INIT;
      EmailLog."Entry No." := 0;
      EmailLog."Email Type" := EmailHeader.Type;
      EmailLog."Ex Document ID" := ExDocID;
      EmailLog."Inbound Document No." := InboundDocID;
      EmailLog."Document No." := COPYSTR(DocNo,1,MAXSTRLEN(EmailLog."Document No." ));
      EmailLog."Sent to" := COPYSTR(EmailAddr,1,MAXSTRLEN(EmailLog."Sent to"));
      EmailLog."Sent by" := USERID;
      IF ExFlow.GetUserComp(ExUserComp,USERID) THEN
        EmailLog."Sent by" := ExUserComp."User ID";
      EmailLog."Created At" := CURRENTDATETIME;

      EmailLog."Sent To Refernece" := SendToReference;
      IF ExFlow.GetUserComp(ExUserComp,SendToReference) THEN
        EmailLog."Sent To Refernece"  := ExUserComp."User ID";
      EmailLog."Error Message" := ErrorMsg;
      EmailLog.INSERT;
      IF ErrorMsg <> '' THEN BEGIN
        IF EmailHeader1.GET(EmailHeader.Type) THEN BEGIN
           EmailHeader1."Last Sent" := CURRENTDATETIME;
           EmailHeader1.MODIFY;
        END;
      END;
    END;

    PROCEDURE MailImportWkshHeader@50002(VAR TempImportWkshHeader@50000 : Record 12013587);
    VAR
      PDFFilename@50002 : Text;
      EmailDocHeader@50001 : Record 12013657;
      Vendor@50003 : Record 23;
      EXDocument@50004 : Record 12013608;
      ExFlowSetup@50005 : Record 12013601;
      AttachFileName@1100285000 : Text[250];
    BEGIN
      CheckAttachment(AttachFileName,TempImportWkshHeader."Image Buffer ID");

      PDFFilename := AttachFileName;

      Vendor.GET(TempImportWkshHeader."Buy-from Vendor No.");

      EmailDocHeader."Document Type" := TempImportWkshHeader."Document Type";

      EmailDocHeader."No." := FORMAT(TempImportWkshHeader."Vendor Document No.");
      EmailDocHeader."Vendor No." := Vendor."No.";
      EmailDocHeader."To E-mail" := Vendor."E-Mail";

      CreateTMPEmailItem(EmailDocHeader,PDFFilename,TempImportWkshHeader."Inbound Document No.");
    END;

    PROCEDURE CreateTMPEmailItem@12(EmailDocHeader@50001 : Record 12013657;PurchOrderDocLocation@50005 : Text;"Inbound Document No."@1100285001 : Integer);
    VAR
      FileManagement@50006 : Codeunit 419;
      TempEmailItem@50000 : TEMPORARY Record 9500;
      Vendor@50002 : Record 23;
      MailBodyText@50003 : Text;
      EmailLog@1100285000 : Record 12013634;
      EmailHeader@1100285002 : Record 12013619;
    BEGIN
      WITH TempEmailItem DO BEGIN
        Initialize;

        EmailHeader.RESET;
        EmailHeader.SETCURRENTKEY("Send Order");
        EmailHeader.SETRANGE("Process Type",EmailHeader."Process Type"::Scheduled);
        EmailHeader.SETRANGE(EmailHeader.Type,EmailHeader.Type::"Unreceived Order");

        IF EmailHeader.FINDSET(TRUE) THEN
         IF EmailHeader."Sender Name" <> '' THEN BEGIN
            TempEmailItem."From Name" := EmailHeader."Sender Name";
          IF EmailHeader."Sender Address" <> '' THEN
            TempEmailItem."From Address" := EmailHeader."Sender Address"
          ELSE
            TempEmailItem."From Address" := EmailHeader."Sender Name";
         END;

        Vendor.GET(EmailDocHeader."Vendor No.");
        "Send to" := EmailDocHeader."To E-mail";
        "Send CC" := TempEmailItem."Send CC";
        "Send BCC" := TempEmailItem."Send BCC";
        Subject := COPYSTR(
            STRSUBSTNO(
              EmailSubjectCapTxt,Vendor.Name,FORMAT(EmailDocHeader."Document Type"),EmailDocHeader."No."),1,
            MAXSTRLEN(Subject));


         IF PurchOrderDocLocation <> '' THEN
          "Attachment File Path" := PurchOrderDocLocation;


        "Attachment Name" := STRSUBSTNO(ReportAsPdfFileNameMsg,
                                        EmailDocHeader."Document Type",
                                        EmailDocHeader."No.",
                                        EmailDocHeader."Vendor No.");
        COMMIT;
        Send(FALSE);
      END;

      IF EmailDocHeader."Document Type" = EmailDocHeader."Document Type"::Quote THEN BEGIN
        EmailDocHeader."E-mail sent By" := USERID;
        EmailDocHeader."E-mail sent On" := CURRENTDATETIME;
        EmailDocHeader."Send E-mail" := FALSE;
        EmailDocHeader.MODIFY;
      END;
    END;

    PROCEDURE EmailUnreceiptedOrders@1100285018(BatchFilter@1100285001 : Code[10];InboundDocNo@1100285002 : Integer);
    VAR
      ExFlowEmailHeader@1100285000 : Record 12013619;
      SetupExist@1100285003 : Boolean;
    BEGIN
      //Function called by user in worksheet
      IF NOT CONFIRM(EXF015) THEN
        EXIT;

      ExFlowEmailHeader.RESET;
      ExFlowEmailHeader.SETRANGE(Type, ExFlowEmailHeader.Type::"Order not found");
      IF ExFlowEmailHeader.FINDFIRST THEN BEGIN
        BatchSendEmailOrderNotFound(ExFlowEmailHeader, BatchFilter, InboundDocNo);
        SetupExist := TRUE;
      END;

      ExFlowEmailHeader.RESET;
      ExFlowEmailHeader.SETRANGE(Type, ExFlowEmailHeader.Type::"Unreceived Order");
      IF ExFlowEmailHeader.FINDFIRST THEN BEGIN
        BatchSendEmailUnreceived(ExFlowEmailHeader, BatchFilter, InboundDocNo);
        SetupExist := TRUE;
      END;

      IF NOT SetupExist THEN
        ERROR(EXF013);
    END;

    LOCAL PROCEDURE CheckReceiptBasedOnLines@1100285003(ImportWkshHeader@1100285001 : Record 12013587) : Boolean;
    VAR
      ImportWkshLine@1100285000 : Record 12013588;
    BEGIN
      ImportWkshLine.RESET;
      ImportWkshLine.SETRANGE("Inbound Document No.", ImportWkshHeader."Inbound Document No.");
      ImportWkshLine.SETFILTER("Order No.",'<>%1','');
      EXIT(NOT ImportWkshLine.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

