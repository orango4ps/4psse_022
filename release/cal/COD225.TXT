OBJECT Codeunit 225 Gen. Jnl.-Apply
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    TableNo=81;
    OnRun=VAR
            IsHandled@1000 : Boolean;
          BEGIN
            GenJnlLine.COPY(Rec);

            IsHandled := FALSE;
            OnBeforeRun(GenJnlLine,IsHandled);
            IF IsHandled THEN
              EXIT;

            WITH GenJnlLine DO BEGIN
              GetCurrency;
              IF "Bal. Account Type" IN
                 ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::Employee]
              THEN BEGIN
                AccType := "Bal. Account Type";
                AccNo := "Bal. Account No.";
              END ELSE BEGIN
                AccType := "Account Type";
                AccNo := "Account No.";
              END;
              CASE AccType OF
                AccType::Customer:
                  ApplyCustomerLedgerEntry(GenJnlLine);
                AccType::Vendor:
                  ApplyVendorLedgerEntry(GenJnlLine);
                AccType::Employee:
                  ApplyEmployeeLedgerEntry(GenJnlLine);
                ELSE
                  ERROR(
                    Text005,
                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
              END;
            END;
            OnAfterRun(GenJnlLine);

            Rec := GenJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must specify %1 or %2.;NOR=Du mÜ angi %1 eller %2.;SVE=Du mÜste specificera %1 eller %2.';
      ConfirmChangeQst@1001 : TextConst '@@@="%1 = Table Name, %2 and %3 = Currency Code";ENU=CurrencyCode in the %1 will be changed from %2 to %3.\Do you wish to continue?;NOR=Valutakoden i %1 blir endret fra %2 til %3.\Vil du fortsette?;SVE=Valutakoden i %1 kommer att Ñndras frÜn %2 till %3.\Vill du fortsÑtta?';
      UpdateInterruptedErr@1003 : TextConst 'ENU=The update has been interrupted to respect the warning.;NOR=Oppdateringen er avbrutt som en reaksjon pÜ advarselen.;SVE=Avbryten uppdatering pÜ grund av varning.';
      Text005@1004 : TextConst 'ENU=The %1 or %2 must be Customer or Vendor.;NOR=%1 eller %2 mÜ vëre kunde eller leverandõr.;SVE=%1 eller %2 mÜste vara kund eller leverantîr.';
      Text006@1005 : TextConst 'ENU=All entries in one application must be in the same currency.;NOR=Alle poster i Çn utligning mÜ vëre i samme valuta.;SVE=Alla transaktioner i en koppling mÜste vara i samma valuta.';
      Text007@1006 : TextConst 'ENU="All entries in one application must be in the same currency or one or more of the EMU currencies. ";NOR="Alle postene i Çn utligning mÜ vëre i samme valuta eller Çn eller flere av ùMU-valutaene. ";SVE="Alla transaktioner i ett program mÜste vara i samma valuta eller en eller flera EMU-valutor. "';
      GenJnlLine@1008 : Record 81;
      GLSetup@1011 : Record 98;
      Currency@1012 : Record 4;
      CurrExchRate@1020 : Record 330;
      PaymentToleranceMgt@1007 : Codeunit 426;
      AccNo@1016 : Code[20];
      CurrencyCode2@1017 : Code[10];
      EntrySelected@1018 : Boolean;
      AccType@1019 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee';

    LOCAL PROCEDURE SelectCustLedgEntry@8(VAR GenJnlLine@1000 : Record 81) Selected : Boolean;
    VAR
      CustLedgEntry@1002 : Record 21;
      ApplyCustEntries@1001 : Page 232;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSelectCustLedgEntry(GenJnlLine,AccNo,Selected,IsHandled);
      IF IsHandled THEN
        EXIT(Selected);

      WITH GenJnlLine DO BEGIN
        CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
        CustLedgEntry.SETRANGE(Open,TRUE);
        OnSelectCustLedgEntryOnAfterSetFilters(CustLedgEntry,GenJnlLine);
        IF "Applies-to ID" = '' THEN
          "Applies-to ID" := "Document No.";
        IF "Applies-to ID" = '' THEN
          ERROR(
            Text000,
            FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
        ApplyCustEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
        ApplyCustEntries.SETRECORD(CustLedgEntry);
        ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
        ApplyCustEntries.LOOKUPMODE(TRUE);
        Selected := ApplyCustEntries.RUNMODAL = ACTION::LookupOK;
        CLEAR(ApplyCustEntries);
      END;

      OnAfterSelectCustLedgEntry(GenJnlLine,AccNo,Selected);
    END;

    LOCAL PROCEDURE SelectVendLedgEntry@9(VAR GenJnlLine@1000 : Record 81) Selected : Boolean;
    VAR
      VendLedgEntry@1002 : Record 25;
      ApplyVendEntries@1001 : Page 233;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSelectVendLedgEntry(GenJnlLine,AccNo,Selected,IsHandled);
      IF IsHandled THEN
        EXIT(Selected);

      WITH GenJnlLine DO BEGIN
        VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
        VendLedgEntry.SETRANGE("Vendor No.",AccNo);
        VendLedgEntry.SETRANGE(Open,TRUE);
        OnSelectVendLedgEntryOnAfterSetFilters(VendLedgEntry,GenJnlLine);
        IF "Applies-to ID" = '' THEN
          "Applies-to ID" := "Document No.";
        IF "Applies-to ID" = '' THEN
          ERROR(
            Text000,
            FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
        ApplyVendEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
        ApplyVendEntries.SETRECORD(VendLedgEntry);
        ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
        ApplyVendEntries.LOOKUPMODE(TRUE);
        Selected := ApplyVendEntries.RUNMODAL = ACTION::LookupOK;
        CLEAR(ApplyVendEntries);
      END;

      OnAfterSelectVendLedgEntry(GenJnlLine,AccNo,Selected);
    END;

    LOCAL PROCEDURE SelectEmplLedgEntry@10(VAR GenJnlLine@1000 : Record 81) Selected : Boolean;
    VAR
      EmplLedgEntry@1002 : Record 5222;
      ApplyEmplEntries@1001 : Page 234;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSelectEmplLedgEntry(GenJnlLine,AccNo,Selected,IsHandled);
      IF IsHandled THEN
        EXIT(Selected);

      WITH GenJnlLine DO BEGIN
        EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
        EmplLedgEntry.SETRANGE("Employee No.",AccNo);
        EmplLedgEntry.SETRANGE(Open,TRUE);
        OnSelectEmplLedgEntryOnAfterSetFilters(EmplLedgEntry,GenJnlLine);
        IF "Applies-to ID" = '' THEN
          "Applies-to ID" := "Document No.";
        IF "Applies-to ID" = '' THEN
          ERROR(
            Text000,
            FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
        ApplyEmplEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
        ApplyEmplEntries.SETRECORD(EmplLedgEntry);
        ApplyEmplEntries.SETTABLEVIEW(EmplLedgEntry);
        ApplyEmplEntries.LOOKUPMODE(TRUE);
        Selected := ApplyEmplEntries.RUNMODAL = ACTION::LookupOK;
        CLEAR(ApplyEmplEntries);
      END;

      OnAfterSelectEmplLedgEntry(GenJnlLine,AccNo,Selected);
    END;

    LOCAL PROCEDURE UpdateCustLedgEntry@6(VAR CustLedgEntry@1000 : Record 21);
    BEGIN
      WITH GenJnlLine DO BEGIN
        CustLedgEntry.CALCFIELDS("Remaining Amount");
        CustLedgEntry."Remaining Amount" :=
          CurrExchRate.ExchangeAmount(
          //CustLedgEntry."Remaining Amount",CustLedgEntry."Currency Code","Currency Code","Posting Date"); //**4PS.o
            CustLedgEntry."Remaining Amount",CustLedgEntry."Currency Code","Currency Code","Posting Date",TRUE); //**4PS.n
        CustLedgEntry."Remaining Amount" :=
          ROUND(CustLedgEntry."Remaining Amount",Currency."Amount Rounding Precision");
        CustLedgEntry."Remaining Pmt. Disc. Possible" :=
          CurrExchRate.ExchangeAmount(
          //CustLedgEntry."Remaining Pmt. Disc. Possible",CustLedgEntry."Currency Code","Currency Code","Posting Date"); //**4PS.o
            CustLedgEntry."Remaining Pmt. Disc. Possible",CustLedgEntry."Currency Code","Currency Code","Posting Date",TRUE); //**4PS.n
        CustLedgEntry."Remaining Pmt. Disc. Possible" :=
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible",Currency."Amount Rounding Precision");
        CustLedgEntry."Amount to Apply" :=
          CurrExchRate.ExchangeAmount(
          //CustLedgEntry."Amount to Apply",CustLedgEntry."Currency Code","Currency Code","Posting Date"); //**4PS.o
            CustLedgEntry."Amount to Apply",CustLedgEntry."Currency Code","Currency Code","Posting Date",TRUE); //**4PS.n
        CustLedgEntry."Amount to Apply" :=
          ROUND(CustLedgEntry."Amount to Apply",Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE UpdateVendLedgEntry@7(VAR VendLedgEntry@1000 : Record 25);
    BEGIN
      WITH GenJnlLine DO BEGIN
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        VendLedgEntry."Remaining Amount" :=
          CurrExchRate.ExchangeAmount(
          //VendLedgEntry."Remaining Amount",VendLedgEntry."Currency Code","Currency Code","Posting Date"); //**4PS.o
            VendLedgEntry."Remaining Amount",VendLedgEntry."Currency Code","Currency Code","Posting Date",FALSE); //**4PS.n
        VendLedgEntry."Remaining Amount" :=
          ROUND(VendLedgEntry."Remaining Amount",Currency."Amount Rounding Precision");
        VendLedgEntry."Remaining Pmt. Disc. Possible" :=
          CurrExchRate.ExchangeAmount(
          //VendLedgEntry."Remaining Pmt. Disc. Possible",VendLedgEntry."Currency Code","Currency Code","Posting Date"); //**4PS.o
            VendLedgEntry."Remaining Pmt. Disc. Possible",VendLedgEntry."Currency Code","Currency Code","Posting Date",FALSE); //**4PS.n
        VendLedgEntry."Remaining Pmt. Disc. Possible" :=
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible",Currency."Amount Rounding Precision");
        VendLedgEntry."Amount to Apply" :=
          CurrExchRate.ExchangeAmount(
          //VendLedgEntry."Amount to Apply",VendLedgEntry."Currency Code","Currency Code","Posting Date"); //**4PS.o
            VendLedgEntry."Amount to Apply",VendLedgEntry."Currency Code","Currency Code","Posting Date",FALSE); //**4PS.n
        VendLedgEntry."Amount to Apply" :=
          ROUND(VendLedgEntry."Amount to Apply",Currency."Amount Rounding Precision");

                      // ***4PSSE.sn Call SYM912
                      VALIDATE("External Document No.", VendLedgEntry."External Document No.");
                      // ***4PSSE.en Call SYM912
      END;
    END;

    [External]
    PROCEDURE CheckAgainstApplnCurrency@1(ApplnCurrencyCode@1000 : Code[10];CompareCurrencyCode@1001 : Code[10];AccType@1002 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';Message@1003 : Boolean) : Boolean;
    VAR
      Currency@1004 : Record 4;
      Currency2@1005 : Record 4;
      SalesSetup@1006 : Record 311;
      PurchSetup@1007 : Record 312;
      CurrencyAppln@1009 : 'No,EMU,All';
    BEGIN
      IF ApplnCurrencyCode = CompareCurrencyCode THEN
        EXIT(TRUE);

      CASE AccType OF
        AccType::Customer:
          BEGIN
            SalesSetup.GET;
            CurrencyAppln := SalesSetup."Appln. between Currencies";
            CASE CurrencyAppln OF
              CurrencyAppln::No:
                BEGIN
                  IF ApplnCurrencyCode <> CompareCurrencyCode THEN
                    IF Message THEN
                      ERROR(Text006)
                    ELSE
                      EXIT(FALSE);
                END;
              CurrencyAppln::EMU:
                BEGIN
                  GLSetup.GET;
                  IF NOT Currency.GET(ApplnCurrencyCode) THEN
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency2.GET(CompareCurrencyCode) THEN
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency."EMU Currency" OR NOT Currency2."EMU Currency" THEN
                    IF Message THEN
                      ERROR(Text007)
                    ELSE
                      EXIT(FALSE);
                END;
            END;
          END;
        AccType::Vendor:
          BEGIN
            PurchSetup.GET;
            CurrencyAppln := PurchSetup."Appln. between Currencies";
            CASE CurrencyAppln OF
              CurrencyAppln::No:
                BEGIN
                  IF ApplnCurrencyCode <> CompareCurrencyCode THEN
                    IF Message THEN
                      ERROR(Text006)
                    ELSE
                      EXIT(FALSE);
                END;
              CurrencyAppln::EMU:
                BEGIN
                  GLSetup.GET;
                  IF NOT Currency.GET(ApplnCurrencyCode) THEN
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency2.GET(CompareCurrencyCode) THEN
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency."EMU Currency" OR NOT Currency2."EMU Currency" THEN
                    IF Message THEN
                      ERROR(Text007)
                    ELSE
                      EXIT(FALSE);
                END;
            END;
          END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCurrency@2();
    BEGIN
      WITH GenJnlLine DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE ApplyCustomerLedgerEntry@21(VAR GenJnlLine@1000 : Record 81);
    VAR
      CustLedgEntry@1001 : Record 21;
      IsHandled@1002 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        EntrySelected := SelectCustLedgEntry(GenJnlLine);
        IF NOT EntrySelected THEN
          EXIT;

        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        OnAfterCustLedgEntrySetFilters(CustLedgEntry,GenJnlLine,AccNo);
        IF CustLedgEntry.FIND('-') THEN BEGIN
          CurrencyCode2 := CustLedgEntry."Currency Code";
          IF Amount = 0 THEN BEGIN
            REPEAT
              PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,CustLedgEntry."Document No.");
              OnApplyCustomerLedgerEntryOnBeforeCheckAgainstApplnCurrency(GenJnlLine,CustLedgEntry);
              CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
              UpdateCustLedgEntry(CustLedgEntry);
              IsHandled := FALSE;
              OnBeforeFindCustApply(GenJnlLine,CustLedgEntry,Amount,IsHandled);
              IF NOT IsHandled THEN
              //IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine,CustLedgEntry,0,FALSE) AND //**4PS.o
                IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine,CustLedgEntry,0,FALSE,0) AND //**4PS.n
                   (ABS(CustLedgEntry."Amount to Apply") >=
                    ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible"))
                THEN
                  Amount := Amount - (CustLedgEntry."Amount to Apply" - CustLedgEntry."Remaining Pmt. Disc. Possible")
                ELSE
                //**4PS.sn
                  IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine,CustLedgEntry,0,FALSE,1) AND
                     (ABS(CustLedgEntry."Amount to Apply") >=
                      ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remain. Pmt. Disc. Possible 2"))
                  THEN
                    Amount := Amount - (CustLedgEntry."Amount to Apply" - CustLedgEntry."Remain. Pmt. Disc. Possible 2")
                  ELSE
                    IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine,CustLedgEntry,0,FALSE,2) AND
                       (ABS(CustLedgEntry."Amount to Apply") >=
                        ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remain. Pmt. Disc. Possible 3"))
                    THEN
                      Amount := Amount - (CustLedgEntry."Amount to Apply" - CustLedgEntry."Remain. Pmt. Disc. Possible 3")
                    ELSE
                //**4PS.en
                      Amount := Amount - CustLedgEntry."Amount to Apply";
            UNTIL CustLedgEntry.NEXT = 0;
            IF ("Bal. Account Type" = "Bal. Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor) THEN
              Amount := -Amount;
            VALIDATE(Amount);
          END ELSE
            REPEAT
              CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
            UNTIL CustLedgEntry.NEXT = 0;
          IF "Currency Code" <> CurrencyCode2 THEN
            IF Amount = 0 THEN BEGIN
              ConfirmCurrencyUpdate(GenJnlLine,CustLedgEntry."Currency Code");
              "Currency Code" := CustLedgEntry."Currency Code"
            END ELSE
              CheckAgainstApplnCurrency("Currency Code",CustLedgEntry."Currency Code",AccType::Customer,TRUE);
          "Applies-to Doc. Type" := 0;
          "Applies-to Doc. No." := '';

          //**4PS.sn
          VALIDATE("Shortcut Dimension 1 Code", CustLedgEntry."Global Dimension 1 Code");
          //**4PS.en

        END ELSE
          "Applies-to ID" := '';
        IF MODIFY THEN;
        IF Amount <> 0 THEN
          IF NOT PaymentToleranceMgt.PmtTolGenJnl(GenJnlLine) THEN
            EXIT;
      END;
    END;

    LOCAL PROCEDURE ApplyVendorLedgerEntry@24(VAR GenJnlLine@1000 : Record 81);
    VAR
      VendLedgEntry@1001 : Record 25;
      IsHandled@1002 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        EntrySelected := SelectVendLedgEntry(GenJnlLine);
        IF NOT EntrySelected THEN
          EXIT;

        VendLedgEntry.RESET;
        VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
        VendLedgEntry.SETRANGE("Vendor No.",AccNo);
        VendLedgEntry.SETRANGE(Open,TRUE);
        VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        OnAfterVendLedgEntrySetFilters(VendLedgEntry,GenJnlLine,AccNo);
        IF VendLedgEntry.FIND('-') THEN BEGIN
          CurrencyCode2 := VendLedgEntry."Currency Code";
          IF Amount = 0 THEN BEGIN
            REPEAT
              PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,VendLedgEntry."Document No.");
              OnApplyVendorLedgerEntryOnBeforeCheckAgainstApplnCurrency(GenJnlLine,VendLedgEntry);
              CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
              UpdateVendLedgEntry(VendLedgEntry);
              IsHandled := FALSE;
              OnBeforeFindVendApply(GenJnlLine,VendLedgEntry,Amount,IsHandled);
              IF NOT IsHandled THEN
              //IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE) AND //**4PS.o
                IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE,0) AND //**4PS.n
                   (ABS(VendLedgEntry."Amount to Apply") >=
                    ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible"))
                THEN
                  Amount := Amount - (VendLedgEntry."Amount to Apply" - VendLedgEntry."Remaining Pmt. Disc. Possible")
                ELSE
                //**4PS.sn
                  IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE,1) AND
                     (ABS(VendLedgEntry."Amount to Apply") >=
                      ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remain. Pmt. Disc. Possible 2"))
                  THEN
                    Amount := Amount - (VendLedgEntry."Amount to Apply" - VendLedgEntry."Remain. Pmt. Disc. Possible 2")
                  ELSE
                    IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE,2) AND
                       (ABS(VendLedgEntry."Amount to Apply") >=
                        ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remain. Pmt. Disc. Possible 3"))
                    THEN
                      Amount := Amount - (VendLedgEntry."Amount to Apply" - VendLedgEntry."Remain. Pmt. Disc. Possible 3")
                    ELSE
                //**4PS.en
                      Amount := Amount - VendLedgEntry."Amount to Apply";
            UNTIL VendLedgEntry.NEXT = 0;
            IF ("Bal. Account Type" = "Bal. Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor) THEN
              Amount := -Amount;
            VALIDATE(Amount);
          END ELSE
            REPEAT
              CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
            UNTIL VendLedgEntry.NEXT = 0;
          IF "Currency Code" <> CurrencyCode2 THEN
            IF Amount = 0 THEN BEGIN
              ConfirmCurrencyUpdate(GenJnlLine,VendLedgEntry."Currency Code");
              "Currency Code" := VendLedgEntry."Currency Code"
            END ELSE
              CheckAgainstApplnCurrency("Currency Code",VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
          "Applies-to Doc. Type" := 0;
          "Applies-to Doc. No." := '';

          //**4PS.sn
          VALIDATE("Shortcut Dimension 1 Code", VendLedgEntry."Global Dimension 1 Code");
          //**4PS.en

        END ELSE
          "Applies-to ID" := '';
        IF MODIFY THEN;
        IF Amount <> 0 THEN
          IF NOT PaymentToleranceMgt.PmtTolGenJnl(GenJnlLine) THEN
            EXIT;
      END;
    END;

    LOCAL PROCEDURE ApplyEmployeeLedgerEntry@3(VAR GenJnlLine@1000 : Record 81);
    VAR
      EmplLedgEntry@1002 : Record 5222;
    BEGIN
      WITH GenJnlLine DO BEGIN
        EntrySelected := SelectEmplLedgEntry(GenJnlLine);
        IF NOT EntrySelected THEN
          EXIT;

        EmplLedgEntry.RESET;
        EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
        EmplLedgEntry.SETRANGE("Employee No.",AccNo);
        EmplLedgEntry.SETRANGE(Open,TRUE);
        EmplLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF EmplLedgEntry.FIND('-') THEN BEGIN
          IF Amount = 0 THEN BEGIN
            REPEAT
              OnApplyEmployeeLedgerEntryOnBeforeUpdateAmount(GenJnlLine,EmplLedgEntry);
              Amount := Amount - EmplLedgEntry."Amount to Apply";
            UNTIL EmplLedgEntry.NEXT = 0;
            IF ("Bal. Account Type" = "Bal. Account Type"::Customer) OR
               ("Bal. Account Type" = "Bal. Account Type"::Vendor) OR
               ("Bal. Account Type" = "Bal. Account Type"::Employee)
            THEN
              Amount := -Amount;
            VALIDATE(Amount);
          END;
          "Applies-to Doc. Type" := 0;
          "Applies-to Doc. No." := '';
        END ELSE
          "Applies-to ID" := '';
        IF MODIFY THEN;
      END;

      OnAfterApplyEmployeeLedgerEntry(GenJnlLine,EmplLedgEntry);
    END;

    LOCAL PROCEDURE ConfirmCurrencyUpdate@12(GenJournalLine@1000 : Record 81;CurrencyCode@1001 : Code[10]);
    VAR
      ConfirmManagement@1002 : Codeunit 27;
    BEGIN
      IF NOT ConfirmManagement.ConfirmProcess(
           STRSUBSTNO(
             ConfirmChangeQst,GenJournalLine.TABLECAPTION,GenJournalLine."Currency Code",
             CurrencyCode),TRUE)
      THEN
        ERROR(UpdateInterruptedErr);
    END;

    PROCEDURE GetEntrySelected@35() : Boolean;
    BEGIN
      EXIT(EntrySelected);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRun@5(VAR GenJnlLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCustLedgEntrySetFilters@26(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81;AccNo@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterVendLedgEntrySetFilters@28(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81;AccNo@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterApplyEmployeeLedgerEntry@17(VAR GenJournalLine@1000 : Record 81;EmployeeLedgerEntry@1001 : Record 5222);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSelectCustLedgEntry@27(VAR GenJournalLine@1000 : Record 81;VAR AccNo@1001 : Code[20];VAR Selected@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSelectEmplLedgEntry@29(VAR GenJournalLine@1000 : Record 81;VAR AccNo@1001 : Code[20];VAR Selected@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSelectVendLedgEntry@30(VAR GenJournalLine@1000 : Record 81;VAR AccNo@1001 : Code[20];VAR Selected@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApplyCustomerLedgerEntryOnBeforeCheckAgainstApplnCurrency@23(VAR GenJournalLine@1000 : Record 81;CustLedgerEntry@1001 : Record 21);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApplyVendorLedgerEntryOnBeforeCheckAgainstApplnCurrency@25(VAR GenJournalLine@1000 : Record 81;VendorLedgerEntry@1001 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApplyEmployeeLedgerEntryOnBeforeUpdateAmount@15(VAR GenJournalLine@1000 : Record 81;EmployeeLedgerEntry@1001 : Record 5222);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@4(VAR GenJnlLine@1000 : Record 81;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindCustApply@18(GenJournalLine@1000 : Record 81;CustLedgerEntry@1001 : Record 21;VAR Amount@1002 : Decimal;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindVendApply@19(GenJournalLine@1000 : Record 81;VendorLedgerEntry@1001 : Record 25;VAR Amount@1002 : Decimal;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSelectCustLedgEntry@11(VAR GenJournalLine@1000 : Record 81;VAR AccNo@1001 : Code[20];VAR Selected@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSelectEmplLedgEntry@14(VAR GenJournalLine@1000 : Record 81;VAR AccNo@1001 : Code[20];VAR Selected@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSelectVendLedgEntry@13(VAR GenJournalLine@1000 : Record 81;VAR AccNo@1001 : Code[20];VAR Selected@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSelectCustLedgEntryOnAfterSetFilters@16(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSelectEmplLedgEntryOnAfterSetFilters@22(VAR EmployeeLedgerEntry@1000 : Record 5222;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSelectVendLedgEntryOnAfterSetFilters@20(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    BEGIN
    {
      4PSSE.MK Call SYM912 2013-10-11 The journal line gets "External Document No." from the Vendor ledger entry.
    }
    END.
  }
}

