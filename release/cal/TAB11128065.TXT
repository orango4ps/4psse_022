OBJECT Table 11128065 VP Payment Suggestion Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE6.03.09 (12048862),4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=VP Payment Suggestion Line;
               SVE=LB Ubetalningsfîrslagrad];
  }
  FIELDS
  {
    { 1   ;   ;Giro Type Code      ;Code10        ;TableRelation="VP Giro Type";
                                                   CaptionML=[ENU=Giro Type Code;
                                                              SVE=Girotypkod] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 4   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Vendor,Customer;
                                                                    SVE=Leverantîr,Kund];
                                                   OptionString=Vendor,Customer }
    { 5   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Vendor)) Vendor.No.
                                                                 ELSE IF (Type=CONST(Customer)) Customer.No.;
                                                   OnValidate=BEGIN
                                                                gxSourceType := Type;
                                                                gxSourceNo := "No.";
                                                                INIT;
                                                                Type := gxSourceType;
                                                                "No." := gxSourceNo;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 6   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 7   ;   ;Invoice/Credit Memo No.;Code35     ;CaptionML=[ENU=Invoice/Credit Memo No.;
                                                              SVE=Faktura/kreditnotanr] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 9   ;   ;Due Date/Payment Date;Date         ;OnValidate=VAR
                                                                VendorLedgerEntry@12047958 : Record 25;
                                                                CustLedgerEntry@1100570000 : Record 21;
                                                                VPManagement@12047959 : Codeunit 11128061;
                                                              BEGIN
                                                                IF Type = Type::Vendor THEN BEGIN
                                                                  VendorLedgerEntry.GET("Ledger Entry No.");
                                                                  "Remaining Amount" := -VendorLedgerEntry."Remaining Amount";
                                                                  VALIDATE("Remaining Amount",VPManagement.CalcAmountToPayGJLrec(Rec));
                                                                END;
                                                                IF Type = Type::Customer THEN BEGIN
                                                                  CustLedgerEntry.GET("Ledger Entry No.");
                                                                  "Remaining Amount" := CustLedgerEntry."Remaining Amount";
                                                                  VALIDATE("Remaining Amount",VPManagement.CalcAmountToPayGJLrec(Rec));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Due Date/Payment Date;
                                                              SVE=Fîrf. datum/bet. datum] }
    { 10  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Remaining Amount");
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 11  ;   ;Remaining Amount    ;Decimal       ;OnValidate=BEGIN
                                                                GetSetup;
                                                                IF "Currency Code" = gGeneralLedgerSetup."LCY Code" THEN
                                                                  "Remaining Amount (LCY)" := "Remaining Amount"
                                                                ELSE
                                                                  "Remaining Amount (LCY)" := ROUND("Remaining Amount"/gCurrExcRate.ExchangeRate(0,'',TODAY,"Currency Code",TRUE));
                                                              END;

                                                   CaptionML=[ENU=Remaining Amount;
                                                              NOR=GjenstÜende belõp;
                                                              SVE=èterstÜende belopp];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 12  ;   ;Remaining Amount (LCY);Decimal     ;CaptionML=[ENU=Remaining Amount (LCY);
                                                              NOR=Restbelõp (NOK);
                                                              SVE=èterstÜende belopp (BVA)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 13  ;   ;Ledger Entry No.    ;Integer       ;TableRelation=IF (Type=CONST(Vendor)) "Vendor Ledger Entry"."Entry No."
                                                                 ELSE IF (Type=CONST(Customer)) "Cust. Ledger Entry"."Entry No.";
                                                   OnValidate=VAR
                                                                Vendor@1100570003 : Record 23;
                                                                VendorLedgerEntry@1100570000 : Record 25;
                                                                VendorBankAccount@1100570002 : Record 288;
                                                                GiroType@1100570004 : Record 11128061;
                                                                CodeforBankofSweden@1100570001 : Code[10];
                                                                Cust@1100570007 : Record 18;
                                                                CustLedgerEntry@1100570006 : Record 21;
                                                                CustBankAccount@1100570005 : Record 287;
                                                                VPMngm@12047958 : Codeunit 11128061;
                                                              BEGIN
                                                                gxLedgEntryNo := "Ledger Entry No.";
                                                                gxSourceType := Type;
                                                                INIT;
                                                                "Ledger Entry No." := gxLedgEntryNo;
                                                                Type := gxSourceType;

                                                                IF "Ledger Entry No." = 0 THEN
                                                                  EXIT;

                                                                IF Type = Type::Vendor THEN BEGIN
                                                                  VendorLedgerEntry.GET("Ledger Entry No.");

                                                                  Vendor.GET(VendorLedgerEntry."Vendor No.");
                                                                  "No." := VendorLedgerEntry."Vendor No.";
                                                                  TESTFIELD("No.");
                                                                  TESTFIELD("Giro Type Code");
                                                                  VendorLedgerEntry.TESTFIELD("VP Pack No.",0);

                                                                  IF VendorLedgerEntry."Recipient Bank Account" <> '' THEN BEGIN
                                                                    VendorBankAccount.GET(VendorLedgerEntry."Vendor No.",VendorLedgerEntry."Recipient Bank Account");
                                                                    GiroType.INIT;
                                                                  END ELSE BEGIN
                                                                    VendorBankAccount.RESET;
                                                                    VendorBankAccount.SETCURRENTKEY("Vendor No.","Giro Type Code","Currency Code");
                                                                    VendorBankAccount.SETRANGE("Vendor No.","No.");
                                                                    VendorBankAccount.SETRANGE("Giro Type Code","Giro Type Code");
                                                                    VendorBankAccount.SETFILTER("Currency Code",'%1|%2','',VendorLedgerEntry."Currency Code");

                                                                    IF NOT VendorBankAccount.FINDLAST THEN
                                                                      ERROR(PEB002,VendorBankAccount.TABLECAPTION,VendorBankAccount.FIELDCAPTION("Giro Type Code"),"Giro Type Code",Vendor.TABLECAPTION,"No.",VendorBankAccount.FIELDCAPTION("Currency Code"));

                                                                    VendorBankAccount.SETRANGE("Currency Code",VendorBankAccount."Currency Code");
                                                                    IF VendorBankAccount.COUNT > 1 THEN
                                                                        ERROR(PEB001,VendorBankAccount.FIELDCAPTION("Giro Type Code"),"Giro Type Code",Vendor.TABLECAPTION,"No.",VendorBankAccount.FIELDCAPTION("Currency Code"),VendorLedgerEntry."Currency Code");

                                                                    GiroType.GET(VendorBankAccount."Giro Type Code");
                                                                  END;

                                                                  IF VendorBankAccount."Code for Bank of Sweden" <> '' THEN
                                                                    CodeforBankofSweden := VendorBankAccount."Code for Bank of Sweden"
                                                                  ELSE
                                                                    CodeforBankofSweden := GiroType."Code for Bank of Sweden";

                                                                  VendorLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
                                                                  Name := Vendor.Name;
                                                                  "Invoice/Credit Memo No." := VendorLedgerEntry."External Document No.";
                                                                  Description := VendorLedgerEntry.Description;

                                                                  IF VendorLedgerEntry.Positive THEN
                                                                    "Due Date/Payment Date" := CALCDATE('<+1Y>',TODAY)
                                                                  ELSE BEGIN
                                                                    IF VendorLedgerEntry."Due Date" < TODAY THEN
                                                                      "Due Date/Payment Date" := TODAY
                                                                    ELSE
                                                                      "Due Date/Payment Date" := VendorLedgerEntry."Due Date";
                                                                  END;

                                                                  "Currency Code" := VPMngm.GetPayToCurrencyCode(VendorLedgerEntry."Currency Code");
                                                                  "Recipient Bank Account" := VendorBankAccount.Code;
                                                                  "Code for Bank of Sweden" := CodeforBankofSweden;
                                                                  "Currency Account" := VendorBankAccount."Currency Account";
                                                                  "Document No." := VendorLedgerEntry."Document No.";
                                                                  "External Document No." := VendorLedgerEntry."External Document No.";
                                                                  VALIDATE("Due Date/Payment Date");
                                                                END;

                                                                IF Type = Type::Customer THEN BEGIN
                                                                  CustLedgerEntry.GET("Ledger Entry No.");

                                                                  Cust.GET(CustLedgerEntry."Customer No.");
                                                                  "No." := CustLedgerEntry."Customer No.";
                                                                  TESTFIELD("No.");
                                                                  TESTFIELD("Giro Type Code");
                                                                  CustLedgerEntry.TESTFIELD("VP Pack No.",0);

                                                                  CustBankAccount.RESET;
                                                                  CustBankAccount.SETCURRENTKEY("Customer No.","Giro Type Code","Currency Code");
                                                                  CustBankAccount.SETRANGE("Customer No.","No.");
                                                                  CustBankAccount.SETRANGE("Giro Type Code","Giro Type Code");
                                                                  CustBankAccount.SETFILTER("Currency Code",'%1|%2','',CustLedgerEntry."Currency Code");

                                                                  IF NOT CustBankAccount.FINDLAST THEN
                                                                    ERROR(PEB002,CustBankAccount.TABLECAPTION,CustBankAccount.FIELDCAPTION("Giro Type Code"),"Giro Type Code",Cust.TABLECAPTION,"No.",CustBankAccount.FIELDCAPTION("Currency Code"));

                                                                  CustBankAccount.SETRANGE("Currency Code",CustBankAccount."Currency Code");
                                                                  IF CustBankAccount.COUNT > 1 THEN
                                                                    ERROR(PEB001,CustBankAccount.FIELDCAPTION("Giro Type Code"),"Giro Type Code",Cust.TABLECAPTION,"No.",CustBankAccount.FIELDCAPTION("Currency Code"),CustLedgerEntry."Currency Code");

                                                                  GiroType.GET(CustBankAccount."Giro Type Code");

                                                                  CustLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
                                                                  Name := Cust.Name;
                                                                  "Invoice/Credit Memo No." := CustLedgerEntry."External Document No.";
                                                                  Description := CustLedgerEntry.Description;

                                                                  IF CustLedgerEntry.Positive THEN
                                                                    "Due Date/Payment Date" := CALCDATE('<+1Y>',TODAY)
                                                                  ELSE BEGIN
                                                                    IF CustLedgerEntry."Due Date" < TODAY THEN
                                                                      "Due Date/Payment Date" := TODAY
                                                                    ELSE
                                                                      "Due Date/Payment Date" := CustLedgerEntry."Due Date";
                                                                  END;

                                                                  "Currency Code" := VPMngm.GetPayToCurrencyCode(CustLedgerEntry."Currency Code");
                                                                  "Recipient Bank Account" := CustBankAccount.Code;
                                                                  "Document No." := CustLedgerEntry."Document No.";
                                                                  "External Document No." := CustLedgerEntry."External Document No.";
                                                                  VALIDATE("Due Date/Payment Date");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              VendorLedgerEntry@1100570000 : Record 25;
                                                              CustLedgerEntry@1100570001 : Record 21;
                                                            BEGIN
                                                              IF Type = Type::Vendor THEN BEGIN
                                                                VendorLedgerEntry.RESET;
                                                                IF "No." <> '' THEN BEGIN
                                                                  VendorLedgerEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date","Currency Code");
                                                                  VendorLedgerEntry.SETRANGE("Vendor No.","No.");
                                                                END ELSE
                                                                  VendorLedgerEntry.SETCURRENTKEY(Open,"Due Date");
                                                                VendorLedgerEntry.SETRANGE(Open,TRUE);
                                                                VendorLedgerEntry.SETRANGE("VP Pack No.",0);
                                                                IF PAGE.RUNMODAL(0,VendorLedgerEntry) = ACTION::LookupOK THEN
                                                                  VALIDATE("Ledger Entry No.",VendorLedgerEntry."Entry No.");
                                                              END;

                                                              IF Type = Type::Customer THEN BEGIN
                                                                CustLedgerEntry.RESET;
                                                                IF "No." <> '' THEN BEGIN
                                                                  CustLedgerEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date","Currency Code");
                                                                  CustLedgerEntry.SETRANGE("Customer No.","No.");
                                                                END ELSE
                                                                  CustLedgerEntry.SETCURRENTKEY(Open,"Due Date");
                                                                CustLedgerEntry.SETRANGE(Open,TRUE);
                                                                CustLedgerEntry.SETRANGE("VP Pack No.",0);
                                                                IF PAGE.RUNMODAL(0,CustLedgerEntry) = ACTION::LookupOK THEN
                                                                  VALIDATE("Ledger Entry No.",CustLedgerEntry."Entry No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Ledger Entry No.;
                                                              NOR=Postnummer;
                                                              SVE=Reskontralîpnr] }
    { 14  ;   ;Recipient Bank Account;Code10      ;TableRelation=IF (Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=[ENU=Recipient Bank Account;
                                                              NOR=Mottakerbankkonto;
                                                              SVE=Mottagarens bankkonto] }
    { 15  ;   ;Due Date Next Payment;Date         ;CaptionML=[ENU=Due Date Next Payment;
                                                              NOR=Forf.dato for neste betaling;
                                                              SVE=Fîrfallodatum nÑsta betalning] }
    { 16  ;   ;Code for Bank of Sweden;Code3      ;CaptionML=[ENU=Code for Bank of Sweden;
                                                              NOR=Kode for Bank of Sweden;
                                                              SVE=Riksbankskod];
                                                   Numeric=Yes }
    { 17  ;   ;Currency Account    ;Boolean       ;CaptionML=[ENU=Currency Account;
                                                              NOR=Valutakonto;
                                                              SVE=Valutakonto] }
    { 18  ;   ;Vendor Pmt. Discount Date;Date     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Ledger Entry"."Pmt. Discount Date" WHERE (Entry No.=FIELD(Ledger Entry No.)));
                                                   CaptionML=[ENU=Vendor Pmt. Discount Date;
                                                              SVE=Lev. kassarabattsdatum];
                                                   Editable=No }
    { 19  ;   ;Vendor Rem. Pmt. Disc. Poss.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Ledger Entry"."Remaining Pmt. Disc. Possible" WHERE (Entry No.=FIELD(Ledger Entry No.)));
                                                   CaptionML=[ENU=Vendor Rem. Pmt. Disc. Poss.;
                                                              SVE=Lev. ÜterstÜende kassarabatt mîjlig];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 20  ;   ;Vendor Due Date     ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Ledger Entry"."Due Date" WHERE (Entry No.=FIELD(Ledger Entry No.)));
                                                   CaptionML=[ENU=Vendor Due Date;
                                                              SVE=Lev. fîrfallodatum];
                                                   Editable=No }
    { 21  ;   ;Customer Pmt. Discount Date;Date   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cust. Ledger Entry"."Pmt. Discount Date" WHERE (Entry No.=FIELD(Ledger Entry No.)));
                                                   CaptionML=[ENU=Customer Pmt. Discount Date;
                                                              SVE=Kund kassarabattsdatum];
                                                   Editable=No }
    { 22  ;   ;Customer Rem. Pmt. Disc. Poss.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cust. Ledger Entry"."Remaining Pmt. Disc. Possible" WHERE (Entry No.=FIELD(Ledger Entry No.)));
                                                   CaptionML=[ENU=Customer Rem. Pmt. Disc. Poss.;
                                                              SVE=Kund ÜterstÜende kassarabatt mîjlig];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 23  ;   ;Customer Due Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cust. Ledger Entry"."Due Date" WHERE (Entry No.=FIELD(Ledger Entry No.)));
                                                   CaptionML=[ENU=Customer Due Date;
                                                              SVE=Kund fîrfallodatum];
                                                   Editable=No }
    { 25  ;   ;Merging No.         ;Integer       ;CaptionML=[ENU=Merging No.;
                                                              SVE=Samsorteringsnr] }
    { 26  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Verifikationsnr] }
    { 27  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              NOR=Eksternt dokumentnr.;
                                                              SVE=Externt verifikationsnr] }
  }
  KEYS
  {
    {    ;Giro Type Code,Line No.                 ;Clustered=Yes }
    {    ;Merging No.                              }
    {    ;Giro Type Code,Type,No.                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PEB001@1100570000 : TextConst 'ENU=There are more than one %1, %2 for %3 %4 with %5 equal to "%6";NOR=Det er mer enn ett %1, %2 til %3 %4 til %5 lik "%6";SVE=Det finns mer Ñn en %1, %2 pÜ %3 %4 med %5 som Ñr "%6"';
      PEB002@1100570001 : TextConst 'ENU=There is no "%1" with %2 %3 for %4 %5 with blank %6\\There must be one  %1À with %6 as blank, It is used for other Currency;NOR=Det er ingen "%1" %2 %3 til %4 %5 med blank %6\\ Det mÜ vëre en "%1" med %6 som blank, Det er brukt for andre Currency;SVE=Det finns inget "%1" med %2 %3 fîr %4 %5 och med blank %6\\Det mÜste finnas en "%1" med %6 blank som anvÑnds fîr îvriga valutor';
      gxSourceType@1100570005 : Integer;
      gxSourceNo@1100570002 : Code[20];
      gxLedgEntryNo@1100570003 : Integer;
      gCurrExcRate@1100570004 : Record 330;
      gGeneralLedgerSetup@12047958 : Record 98;
      gSetupOk@12047959 : Boolean;

    PROCEDURE GetSetup@12047958();
    BEGIN
      IF gSetupOk THEN
        EXIT;
      gGeneralLedgerSetup.GET;
      gGeneralLedgerSetup.TESTFIELD("LCY Code");

      gSetupOk := TRUE;
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0091 Banking
      PEB
      PEB *** End ***
    }
    END.
  }
}

