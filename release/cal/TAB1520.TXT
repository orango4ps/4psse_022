OBJECT Table 1520 Workflow Event
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1523=rm;
    OnDelete=VAR
               WFEventResponseCombination@1001 : Record 1509;
               WorkflowManagement@1000 : Codeunit 1501;
             BEGIN
               WorkflowManagement.ClearSupportedCombinations("Function Name",WFEventResponseCombination.Type::"Event");
             END;

    ReplicateData=No;
    CaptionML=[ENU=Workflow Event;
               NOR=Arbeidsflythendelse;
               SVE=Arbetsfl”desh„ndelse];
    LookupPageID=Page1520;
  }
  FIELDS
  {
    { 1   ;   ;Function Name       ;Code128       ;CaptionML=[ENU=Function Name;
                                                              NOR=Funksjonsnavn;
                                                              SVE=Funktionsnamn];
                                                   NotBlank=Yes }
    { 2   ;   ;Table ID            ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 3   ;   ;Description         ;Text250       ;CaptionML=[ENU=When;
                                                              NOR=N†r;
                                                              SVE=N„r] }
    { 4   ;   ;Request Page ID     ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Report));
                                                   CaptionML=[ENU=Request Page ID;
                                                              NOR=ID for foresp›rselsside;
                                                              SVE=Beg„rt sid-ID] }
    { 5   ;   ;Dynamic Req. Page Entity Name;Code20;
                                                   TableRelation="Dynamic Request Page Entity".Name WHERE (Table ID=FIELD(Table ID));
                                                   CaptionML=[ENU=Dynamic Req. Page Entity Name;
                                                              NOR=Enhetsnavn for side for dynamisk foresp›rsel;
                                                              SVE=Namn p† dynamisk beg„rd sidenhet] }
    { 6   ;   ;Used for Record Change;Boolean     ;CaptionML=[ENU=Used for Record Change;
                                                              NOR=Brukes til postendring;
                                                              SVE=Anv„nds f”r post„ndring] }
    { 7   ;   ;Independent         ;Boolean       ;CaptionML=[ENU=Independent;
                                                              NOR=Uavhengig;
                                                              SVE=Oberoende] }
  }
  KEYS
  {
    {    ;Function Name                           ;Clustered=Yes }
    {    ;Independent,Description                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EventConditionsCaptionTxt@1000 : TextConst '@@@="%1 = Event description";ENU=Event Conditions - %1;NOR=Hendelsesvilk†r - %1;SVE=H„ndelsevillkor - %1';

    [Internal]
    PROCEDURE RunRequestPage@3(VAR ReturnFilters@1002 : Text;Filters@1001 : Text) : Boolean;
    BEGIN
      IF "Request Page ID" > 0 THEN
        EXIT(RunCustomRequestPage(ReturnFilters,Filters));

      EXIT(RunDynamicRequestPage(ReturnFilters,Filters));
    END;

    LOCAL PROCEDURE RunCustomRequestPage@4(VAR ReturnFilters@1002 : Text;Filters@1001 : Text) : Boolean;
    BEGIN
      ReturnFilters := REPORT.RUNREQUESTPAGE("Request Page ID",Filters);

      IF ReturnFilters = '' THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RunDynamicRequestPage@5(VAR ReturnFilters@1006 : Text;Filters@1000 : Text) : Boolean;
    VAR
      TableMetadata@1005 : Record 2000000136;
      RequestPageParametersHelper@1003 : Codeunit 1530;
      FilterPageBuilder@1002 : FilterPageBuilder;
    BEGIN
      IF NOT TableMetadata.GET("Table ID") THEN
        EXIT(FALSE);

      IF NOT RequestPageParametersHelper.BuildDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID") THEN
        EXIT(FALSE);

      IF Filters <> '' THEN
        IF NOT RequestPageParametersHelper.SetViewOnDynamicRequestPage(
             FilterPageBuilder,Filters,"Dynamic Req. Page Entity Name","Table ID")
        THEN
          EXIT(FALSE);

      FilterPageBuilder.PAGECAPTION := STRSUBSTNO(EventConditionsCaptionTxt,Description);
      IF NOT FilterPageBuilder.RUNMODAL THEN
        EXIT(FALSE);

      ReturnFilters :=
        RequestPageParametersHelper.GetViewFromDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID");

      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE CreateDefaultRequestPageFilters@6() : Text;
    VAR
      TableMetadata@1005 : Record 2000000136;
      RequestPageParametersHelper@1003 : Codeunit 1530;
      FilterPageBuilder@1002 : FilterPageBuilder;
    BEGIN
      IF NOT TableMetadata.GET("Table ID") THEN
        EXIT('');

      IF NOT RequestPageParametersHelper.BuildDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID") THEN
        EXIT('');

      EXIT(RequestPageParametersHelper.GetViewFromDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID"));
    END;

    [External]
    PROCEDURE HasPredecessors@1() : Boolean;
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      WFEventResponseCombination.SETRANGE(Type,WFEventResponseCombination.Type::"Event");
      WFEventResponseCombination.SETRANGE("Function Name","Function Name");
      EXIT(NOT WFEventResponseCombination.ISEMPTY);
    END;

    [External]
    PROCEDURE MakeDependentOnAllEvents@2();
    VAR
      WorkflowEvent@1001 : Record 1520;
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      IF WorkflowEvent.FINDSET THEN
        REPEAT
          WorkflowEventHandling.AddEventPredecessor("Function Name",WorkflowEvent."Function Name");
        UNTIL WorkflowEvent.NEXT = 0;
    END;

    [External]
    PROCEDURE MakeIndependent@8();
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      IF NOT HasPredecessors THEN
        EXIT;

      WFEventResponseCombination.MakeEventResponseIndependent(WFEventResponseCombination.Type::"Event","Function Name");
    END;

    BEGIN
    END.
  }
}

