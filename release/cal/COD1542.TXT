OBJECT Codeunit 1542 Workflow Webhook Responses
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SendNotificationToWebhookTxt@1000 : TextConst 'ENU=Send a record notification to a webhook.;NOR=Send en postvarsling til en webhook.';

    [External]
    PROCEDURE SendNotificationToWebhookCode@1() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendNotificationToWebhook'));
    END;

    [EventSubscriber(Codeunit,1521,OnAddWorkflowResponsePredecessorsToLibrary)]
    LOCAL PROCEDURE AddWorkflowWebhookEventResponseCombinationsToLibrary@2(ResponseFunctionName@1000 : Code[128]);
    VAR
      WorkflowEventHandling@1001 : Codeunit 1520;
      WorkflowResponseHandling@1002 : Codeunit 1521;
    BEGIN
      CASE ResponseFunctionName OF
        SendNotificationToWebhookCode:
          BEGIN
            WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
              WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
              WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
              WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
              WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
              WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
          END;
      END;
    END;

    [EventSubscriber(Codeunit,1521,OnAddWorkflowResponsesToLibrary)]
    LOCAL PROCEDURE AddWorkflowWebhookResponsesToLibrary@3();
    VAR
      WorkflowResponseHandling@1000 : Codeunit 1521;
    BEGIN
      WorkflowResponseHandling.AddResponseToLibrary(SendNotificationToWebhookCode,0,SendNotificationToWebhookTxt,'GROUP 8');
    END;

    [EventSubscriber(Codeunit,1521,OnExecuteWorkflowResponse)]
    LOCAL PROCEDURE ExecuteWorkflowWebhookResponses@9(VAR ResponseExecuted@1000 : Boolean;Variant@1001 : Variant;xVariant@1002 : Variant;ResponseWorkflowStepInstance@1003 : Record 1504);
    VAR
      WorkflowResponse@1004 : Record 1521;
    BEGIN
      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          SendNotificationToWebhookCode:
            BEGIN
              SendNotificationToWebhook(Variant,ResponseWorkflowStepInstance);
              ResponseExecuted := TRUE;
            END;
        END;
    END;

    LOCAL PROCEDURE SendNotificationToWebhook@6(VAR Variant@1000 : Variant;VAR WorkflowStepInstance@1002 : Record 1504);
    VAR
      WorkflowWebhookManagement@1001 : Codeunit 1543;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      WorkflowWebhookManagement.GenerateRequest(RecRef,WorkflowStepInstance);
    END;

    BEGIN
    END.
  }
}

