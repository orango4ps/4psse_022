OBJECT Table 5451 Graph Integration Record
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Graph Integration Record;
               NOR=Integreringspost for Graph];
  }
  FIELDS
  {
    { 2   ;   ;Graph ID            ;Text250       ;CaptionML=[ENU=Graph ID;
                                                              NOR=Graph-ID] }
    { 3   ;   ;Integration ID      ;GUID          ;TableRelation="Integration Record"."Integration ID";
                                                   CaptionML=[ENU=Integration ID;
                                                              NOR=Integrerings-ID] }
    { 4   ;   ;Last Synch. Modified On;DateTime   ;CaptionML=[ENU=Last Synch. Modified On;
                                                              NOR=Siste synkronisering endret den] }
    { 5   ;   ;Last Synch. Graph Modified On;DateTime;
                                                   CaptionML=[ENU=Last Synch. Graph Modified On;
                                                              NOR=Siste synkronisering med Graph endret den] }
    { 6   ;   ;Table ID            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Integration Record"."Table ID" WHERE (Integration ID=FIELD(Integration ID)));
                                                   CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 7   ;   ;ChangeKey           ;Text250       ;CaptionML=[ENU=ChangeKey;
                                                              NOR=ChangeKey] }
    { 8   ;   ;XRMId               ;GUID          ;CaptionML=[ENU=XRMId;
                                                              NOR=XRMId] }
  }
  KEYS
  {
    {    ;Graph ID,Integration ID                 ;Clustered=Yes }
    {    ;Integration ID                           }
    {    ;Last Synch. Modified On,Integration ID   }
    {    ;Last Synch. Graph Modified On,Graph ID   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IntegrationRecordNotFoundErr@1000 : TextConst '@@@="%1 = record id";ENU=The integration record for entity %1 was not found.;NOR=Finner ikke integreringsposten for enheten %1.';
      GraphIdAlreadyMappedErr@1003 : TextConst '@@@=%1 ID of the record, %2 ID of the already mapped record;ENU=Cannot couple %1 to this Microsoft Graph record, because the Microsoft Graph record is already coupled to %2.;NOR=Kan ikke koble %1 til denne Microsoft Graph-posten fordi Microsoft Graph-posten allerede er koblet til %2.';
      RecordIdAlreadyMappedErr@1004 : TextConst '@@@=%1 ID from the record, %2 ID of the already mapped record;ENU=Cannot couple the Microsoft Graph record to %1, because %1 is already coupled to another Microsoft Graph record.;NOR=Kan ikke koble Microsoft Graph-posten til %1 fordi %1 allerede er koblet til en annen Microsoft Graph-post.';

    [External]
    PROCEDURE IsRecordCoupled@5(DestinationRecordID@1001 : RecordID) : Boolean;
    VAR
      GraphID@1002 : Text[250];
    BEGIN
      EXIT(FindIDFromRecordID(DestinationRecordID,GraphID));
    END;

    [External]
    PROCEDURE FindRecordIDFromID@3(SourceGraphID@1001 : Text[250];DestinationTableID@1004 : Integer;VAR DestinationRecordId@1002 : RecordID) : Boolean;
    VAR
      GraphIntegrationRecord@1003 : Record 5451;
      IntegrationRecord@1005 : Record 5151;
    BEGIN
      IF FindRowFromGraphID(SourceGraphID,DestinationTableID,GraphIntegrationRecord) THEN
        IF IntegrationRecord.FindByIntegrationId(GraphIntegrationRecord."Integration ID") THEN BEGIN
          DestinationRecordId := IntegrationRecord."Record ID";
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE FindIDFromRecordID@2(SourceRecordID@1001 : RecordID;VAR DestinationGraphID@1002 : Text[250]) : Boolean;
    VAR
      GraphIntegrationRecord@1004 : Record 5451;
    BEGIN
      IF NOT FindRowFromRecordID(SourceRecordID,GraphIntegrationRecord) THEN
        EXIT(FALSE);

      DestinationGraphID := GraphIntegrationRecord."Graph ID";
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindIntegrationIDFromGraphID@20(SourceGraphID@1002 : Text[250];DestinationTableID@1004 : Integer;VAR DestinationIntegrationID@1001 : GUID) : Boolean;
    VAR
      GraphIntegrationRecord@1000 : Record 5451;
    BEGIN
      IF FindRowFromGraphID(SourceGraphID,DestinationTableID,GraphIntegrationRecord) THEN BEGIN
        DestinationIntegrationID := GraphIntegrationRecord."Integration ID";
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CoupleGraphIDToRecordID@1(GraphID@1000 : Text[250];RecordID@1001 : RecordID);
    VAR
      GraphIntegrationRecord@1003 : Record 5451;
      IntegrationRecord@1004 : Record 5151;
      GraphIntegrationRecord2@1006 : Record 5451;
      ErrGraphID@1005 : Text[250];
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(RecordID) THEN
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      // Find coupling between GraphID and TableNo
      IF NOT FindRowFromGraphID(GraphID,RecordID.TABLENO,GraphIntegrationRecord) THEN
        // Find rogue coupling beteen GraphID and table 0
        IF NOT FindRowFromGraphID(GraphID,0,GraphIntegrationRecord) THEN BEGIN
          // Find other coupling to the record
          IF GraphIntegrationRecord2.FindIDFromRecordID(RecordID,ErrGraphID) THEN
            ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));

          InsertGraphIntegrationRecord(GraphID,IntegrationRecord,RecordID);
          EXIT;
        END;

      // Update Integration ID
      IF GraphIntegrationRecord."Integration ID" <> IntegrationRecord."Integration ID" THEN BEGIN
        IF GraphIntegrationRecord2.FindIDFromRecordID(RecordID,ErrGraphID) THEN
          ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));
        GraphIntegrationRecord.RENAME(GraphIntegrationRecord."Graph ID",IntegrationRecord."Integration ID");
      END;
    END;

    [External]
    PROCEDURE CoupleRecordIdToGraphID@99(RecordID@1001 : RecordID;GraphID@1000 : Text[250]);
    VAR
      GraphIntegrationRecord@1003 : Record 5451;
      IntegrationRecord@1004 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(RecordID) THEN
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      IF NOT FindRowFromIntegrationID(IntegrationRecord."Integration ID",GraphIntegrationRecord) THEN BEGIN
        AssertRecordIDCanBeCoupled(RecordID,GraphID);
        InsertGraphIntegrationRecord(GraphID,IntegrationRecord,RecordID);
      END ELSE
        IF GraphIntegrationRecord."Graph ID" <> GraphID THEN BEGIN
          AssertRecordIDCanBeCoupled(RecordID,GraphID);
          GraphIntegrationRecord.RENAME(GraphID,GraphIntegrationRecord."Integration ID");
        END;
    END;

    [External]
    PROCEDURE RemoveCouplingToRecord@15(RecordID@1000 : RecordID) : Boolean;
    VAR
      GraphIntegrationRecord@1002 : Record 5451;
      IntegrationRecord@1001 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(RecordID) THEN
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      IF FindRowFromIntegrationID(IntegrationRecord."Integration ID",GraphIntegrationRecord) THEN BEGIN
        GraphIntegrationRecord.DELETE(TRUE);
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE RemoveCouplingToGraphID@13(GraphID@1000 : Text[250];DestinationTableID@1003 : Integer) : Boolean;
    VAR
      GraphIntegrationRecord@1002 : Record 5451;
    BEGIN
      IF FindRowFromGraphID(GraphID,DestinationTableID,GraphIntegrationRecord) THEN BEGIN
        GraphIntegrationRecord.DELETE(TRUE);
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE AssertRecordIDCanBeCoupled@4(RecordID@1001 : RecordID;GraphID@1000 : Text[250]);
    VAR
      GraphIntegrationRecord@1003 : Record 5451;
      ErrRecordID@1004 : RecordID;
      ErrIntegrationID@1005 : GUID;
    BEGIN
      IF FindIntegrationIDFromGraphID(GraphID,RecordID.TABLENO,ErrIntegrationID) THEN
        IF NOT UncoupleGraphIDIfRecordDeleted(ErrIntegrationID) THEN BEGIN
          GraphIntegrationRecord.FindRecordIDFromID(GraphID,RecordID.TABLENO,ErrRecordID);
          ERROR(GraphIdAlreadyMappedErr,FORMAT(RecordID,0,1),ErrRecordID);
        END;
    END;

    [External]
    PROCEDURE SetLastSynchModifiedOns@8(SourceGraphID@1001 : Text[250];DestinationTableID@1005 : Integer;GraphLastModifiedOn@1000 : DateTime;LastModifiedOn@1003 : DateTime);
    VAR
      GraphIntegrationRecord@1004 : Record 5451;
    BEGIN
      IF NOT FindRowFromGraphID(SourceGraphID,DestinationTableID,GraphIntegrationRecord) THEN
        EXIT;

      WITH GraphIntegrationRecord DO BEGIN
        "Last Synch. Graph Modified On" := GraphLastModifiedOn;
        "Last Synch. Modified On" := LastModifiedOn;
        MODIFY(TRUE);
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE SetLastSynchGraphModifiedOn@12(GraphID@1001 : Text[250];DestinationTableID@1003 : Integer;GraphLastModifiedOn@1000 : DateTime);
    VAR
      GraphIntegrationRecord@1004 : Record 5451;
    BEGIN
      IF NOT FindRowFromGraphID(GraphID,DestinationTableID,GraphIntegrationRecord) THEN
        EXIT;

      GraphIntegrationRecord."Last Synch. Graph Modified On" := GraphLastModifiedOn;
      GraphIntegrationRecord.MODIFY(TRUE);
      COMMIT;
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchonizedGraphRecord@6(GraphID@1000 : Text[250];DestinationTableID@1004 : Integer;CurrentModifiedOn@1002 : DateTime) : Boolean;
    VAR
      GraphIntegrationRecord@1003 : Record 5451;
      IntegrationTableMapping@1001 : Record 5335;
      GraphDataSetup@1005 : Codeunit 5455;
      TypeHelper@1007 : Codeunit 10;
      GraphRecordRef@1006 : RecordRef;
      GraphChangeKey@1009 : Text[250];
    BEGIN
      IF NOT FindRowFromGraphID(GraphID,DestinationTableID,GraphIntegrationRecord) THEN
        EXIT(FALSE);

      GraphIntegrationRecord.CALCFIELDS("Table ID");
      IntegrationTableMapping.FindMappingForTable(GraphIntegrationRecord."Table ID");
      IF IntegrationTableMapping."Int. Tbl. ChangeKey Fld. No." <> 0 THEN
        IF GraphDataSetup.GetGraphRecord(GraphRecordRef,GraphID,GraphIntegrationRecord."Table ID") THEN BEGIN
          GraphChangeKey := GraphRecordRef.FIELD(IntegrationTableMapping."Int. Tbl. ChangeKey Fld. No.").VALUE;
          EXIT(GraphChangeKey <> GraphIntegrationRecord.ChangeKey);
        END;

      EXIT(TypeHelper.CompareDateTime(CurrentModifiedOn,GraphIntegrationRecord."Last Synch. Graph Modified On") > 0);
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchronizedRecord@7(RecordID@1001 : RecordID;CurrentModifiedOn@1000 : DateTime) : Boolean;
    VAR
      GraphIntegrationRecord@1003 : Record 5451;
      TypeHelper@1002 : Codeunit 10;
    BEGIN
      IF NOT FindRowFromRecordID(RecordID,GraphIntegrationRecord) THEN
        EXIT(FALSE);

      EXIT(TypeHelper.CompareDateTime(CurrentModifiedOn,GraphIntegrationRecord."Last Synch. Modified On") > 0);
    END;

    LOCAL PROCEDURE UncoupleGraphIDIfRecordDeleted@9(IntegrationID@1001 : GUID) : Boolean;
    VAR
      IntegrationRecord@1000 : Record 5151;
      GraphIntegrationRecord@1003 : Record 5451;
    BEGIN
      IntegrationRecord.FindByIntegrationId(IntegrationID);
      IF IntegrationRecord."Deleted On" <> 0DT THEN BEGIN
        IF FindRowFromIntegrationID(IntegrationID,GraphIntegrationRecord) THEN
          GraphIntegrationRecord.DELETE;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE DeleteIfRecordDeleted@17(GraphID@1001 : Text[250];DestinationTableID@1002 : Integer) : Boolean;
    VAR
      IntegrationID@1004 : GUID;
    BEGIN
      IF NOT FindIntegrationIDFromGraphID(GraphID,DestinationTableID,IntegrationID) THEN
        EXIT(FALSE);

      EXIT(UncoupleGraphIDIfRecordDeleted(IntegrationID));
    END;

    LOCAL PROCEDURE FindRowFromRecordID@10(SourceRecordID@1000 : RecordID;VAR GraphIntegrationRecord@1001 : Record 5451) : Boolean;
    VAR
      IntegrationRecord@1002 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(SourceRecordID) THEN
        EXIT(FALSE);
      EXIT(FindRowFromIntegrationID(IntegrationRecord."Integration ID",GraphIntegrationRecord));
    END;

    LOCAL PROCEDURE FindRowFromGraphID@11(GraphID@1001 : Text[250];DestinationTableID@1003 : Integer;VAR GraphIntegrationRecord@1000 : Record 5451) : Boolean;
    BEGIN
      GraphIntegrationRecord.SETRANGE("Graph ID",GraphID);
      GraphIntegrationRecord.SETFILTER("Table ID",FORMAT(DestinationTableID));
      EXIT(GraphIntegrationRecord.FINDFIRST);
    END;

    LOCAL PROCEDURE FindRowFromIntegrationID@22(IntegrationID@1001 : GUID;VAR GraphIntegrationRecord@1000 : Record 5451) : Boolean;
    BEGIN
      GraphIntegrationRecord.SETCURRENTKEY("Integration ID");
      GraphIntegrationRecord.SETFILTER("Integration ID",IntegrationID);
      EXIT(GraphIntegrationRecord.FINDFIRST);
    END;

    LOCAL PROCEDURE InsertGraphIntegrationRecord@16(GraphID@1002 : Text[250];VAR IntegrationRecord@1001 : Record 5151;RecordID@1000 : RecordID);
    VAR
      GraphIntegrationRecord@1005 : Record 5451;
      GraphIntContact@1006 : Codeunit 5461;
    BEGIN
      GraphIntegrationRecord."Graph ID" := GraphID;
      GraphIntegrationRecord."Integration ID" := IntegrationRecord."Integration ID";
      GraphIntegrationRecord."Table ID" := RecordID.TABLENO;
      GraphIntContact.SetXRMId(GraphIntegrationRecord);

      GraphIntegrationRecord.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

