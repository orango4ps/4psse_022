OBJECT Codeunit 11012321 Exp. Plant Types (Plant Mgt.)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            PlantType@1100525000 : Record 11012551;
            WebsitePerPlantType@1100528702 : Record 11012662;
            PlantTypesElement@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
            PlantTypeElement@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
            XMLDOMManagement4PS@1100525003 : Codeunit 11020220;
          BEGIN
            IF GUIALLOWED THEN
              Window.OPEN(Text000);

            UtilityFunctions.CreateOutFolder;
            DOMDocument := DOMDocument.XmlDocument;

            AppendElement(DOMDocument, 'planttypes', '', PlantTypesElement);
            PlantTypesElement.SetAttribute('version', '1.0');
            PlantTypesElement.SetAttribute('exportdate', UtilityFunctions.FormatDateTime(CURRENTDATETIME));

            IF WebsitePerPlantType.FINDSET THEN
              REPEAT
                IF GUIALLOWED THEN
                  Window.UPDATE;

                IF PlantType.GET(WebsitePerPlantType."Plant Type Code") THEN
                  AppendPlantType(
                    PlantTypesElement,
                    PlantType,
                    PlantTypeElement);

                WebsitePerPlantType.SETRANGE("Plant Type Code", WebsitePerPlantType."Plant Type Code");
                WebsitePerPlantType.FINDLAST;
                WebsitePerPlantType.SETRANGE("Plant Type Code");
              UNTIL WebsitePerPlantType.NEXT = 0;

            IF GUIALLOWED THEN
              XMLDOMManagement4PS.SaveXMLToClientFile(DOMDocument, FileName)
            ELSE
              DOMDocument.Save(FileName);

            IF GUIALLOWED THEN
              Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      UtilityFunctions@1100525003 : Codeunit 11012318;
      DOMDocument@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Window@1100525000 : Dialog;
      Text000@1100525001 : TextConst 'DEU=Werkzeugarten exportieren...;ENU=Exporting Plant Types...;NLD=Materieelsoorten exporteren...;SVE=Exporterar Maskinstyper ...';

    PROCEDURE AppendPlantType@1100525006(ParentNode@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";PlantType@1100525000 : Record 11012551;VAR PlantType2@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      RentalRate@1100525005 : Record 11012567;
      UnitOfMeasure@1100525004 : Record 204;
      PlantTranslation@1100528704 : Record 11012542;
      UnitOfMeasureTranslation@1100528707 : Record 5402;
      PlantTypeTechSpecTransl@1100528709 : Record 11012660;
      WebsitePerPlantType@1100528710 : Record 11012662;
      Dummy@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      GroupLevel1@1100528700 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      GroupLevel2@1100528701 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      GroupLevel3@1100528702 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      DescriptionElement@1100528705 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      UnitOfMeasureElement@1100528706 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      TechSpecsElement@1100528708 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      WebsitesElement@1100528711 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      IF NOT UnitOfMeasure.GET(PlantType."Unit of Measure") THEN
        UnitOfMeasure.INIT;

      FindRentalRate(RentalRate, RentalRate."Rental Type"::Rental, PlantType.Code);

      PlantType.CALCFIELDS("Group Level 1 Description", "Group Level 2 Description", "Group Level 3 Description");

      AppendElement(ParentNode, 'planttype', '', PlantType2);
      AppendElement(PlantType2, 'code', PlantType.Code, Dummy);

      AppendElement(PlantType2, 'group1', '', GroupLevel1);
      GroupLevel1.SetAttribute('code', PlantType."Group Level 1");

      //DP00241.so (27089)
      //GroupingLevelTranslation.SETRANGE("Grouping Level Code", PlantType."Group Level 1");
      //IF GroupingLevelTranslation.FINDSET THEN
      //  REPEAT
      //    AppendElement(GroupLevel1, 'lang', GroupingLevelTranslation.Description, Dummy);
      //    Dummy.setAttribute('id', GroupingLevelTranslation."Language ID");
      //  UNTIL GroupingLevelTranslation.NEXT = 0;
      //DP00241.eo (27089)

      //DP00241.sn (27089)
      PlantTranslation.RESET;
      PlantTranslation.SETRANGE(Type,PlantTranslation.Type::PlantGroup);
      PlantTranslation.SETRANGE(Code, PlantType."Group Level 1");
      IF PlantTranslation.FINDSET THEN
        REPEAT
          AppendElement(GroupLevel1, 'lang', PlantTranslation.Translation, Dummy);
          Dummy.SetAttribute('id', FORMAT(LanguageIDFromLanguageCode(PlantTranslation."Language Code")));
        UNTIL PlantTranslation.NEXT = 0;
      //DP00241.en

      AppendElement(PlantType2, 'group2', '', GroupLevel2);
      GroupLevel2.SetAttribute('code', PlantType."Group Level 2");

      //DP00241.so (27089)
      //GroupingLevelTranslation.SETRANGE("Grouping Level Code", PlantType."Group Level 2");
      //IF GroupingLevelTranslation.FINDSET THEN
      //  REPEAT
      //    AppendElement(GroupLevel2, 'lang', GroupingLevelTranslation.Description, Dummy);
      //    Dummy.setAttribute('id', GroupingLevelTranslation."Language ID");
      //  UNTIL GroupingLevelTranslation.NEXT = 0;
      //DP00241.eo (27089)

      //DP00241.sn (27089)
      PlantTranslation.RESET;
      PlantTranslation.SETRANGE(Type,PlantTranslation.Type::PlantGroup);
      PlantTranslation.SETRANGE(Code, PlantType."Group Level 2");
      IF PlantTranslation.FINDSET THEN
        REPEAT
          AppendElement(GroupLevel2, 'lang', PlantTranslation.Translation, Dummy);
          Dummy.SetAttribute('id', FORMAT(LanguageIDFromLanguageCode(PlantTranslation."Language Code")));
        UNTIL PlantTranslation.NEXT = 0;
      //DP00241.en

      AppendElement(PlantType2, 'group3', '', GroupLevel3);
      GroupLevel3.SetAttribute('code', PlantType."Group Level 3");

      //DP00241.so (27089)
      //GroupingLevelTranslation.SETRANGE("Grouping Level Code", PlantType."Group Level 3");
      //IF GroupingLevelTranslation.FINDSET THEN
      //  REPEAT
      //    AppendElement(GroupLevel3, 'lang', GroupingLevelTranslation.Description, Dummy);
      //    Dummy.setAttribute('id', GroupingLevelTranslation."Language ID");
      //  UNTIL GroupingLevelTranslation.NEXT = 0;
      //DP00241.eo (27089)

      //DP00241.sn (27089)
      PlantTranslation.RESET;
      PlantTranslation.SETRANGE(Type,PlantTranslation.Type::PlantGroup);
      PlantTranslation.SETRANGE(Code, PlantType."Group Level 3");
      IF PlantTranslation.FINDSET THEN
        REPEAT
          AppendElement(GroupLevel3, 'lang', PlantTranslation.Translation, Dummy);
          Dummy.SetAttribute('id', FORMAT(LanguageIDFromLanguageCode(PlantTranslation."Language Code")));
        UNTIL PlantTranslation.NEXT = 0;
      //DP00241.en

      AppendElement(PlantType2, 'description', '', DescriptionElement);

      PlantTranslation.RESET;
      PlantTranslation.SETRANGE(Type,PlantTranslation.Type::PlantType);  //DP00241.n (27089)
      PlantTranslation.SETRANGE(Code, PlantType.Code);
      //PlantTranslation.SETRANGE("No.", '');  //DP00241.o (27089)
      IF PlantTranslation.FINDSET THEN
        REPEAT
          AppendElement(DescriptionElement, 'lang', PlantTranslation.Translation, Dummy);
          Dummy.SetAttribute('id', FORMAT(LanguageIDFromLanguageCode(PlantTranslation."Language Code")));
        UNTIL PlantTranslation.NEXT = 0;

      AppendElement(PlantType2, 'bulk', UtilityFunctions.FormatBoolean(PlantType.Bulk), Dummy);

      AppendElement(PlantType2, 'unitofmeasure', '', UnitOfMeasureElement);
      UnitOfMeasureElement.SetAttribute('code', PlantType."Unit of Measure");

      UnitOfMeasureTranslation.SETRANGE(Code, PlantType."Unit of Measure");
      IF UnitOfMeasureTranslation.FINDSET THEN
        REPEAT
          AppendElement(UnitOfMeasureElement, 'lang', UnitOfMeasureTranslation.Description, Dummy);
          Dummy.SetAttribute('id', FORMAT(LanguageIDFromLanguageCode(UnitOfMeasureTranslation."Language Code")));
        UNTIL UnitOfMeasureTranslation.NEXT = 0;

      AppendElement(PlantType2, 'searchname', PlantType."Search Name", Dummy);
      AppendElement(PlantType2, 'returnlocation', PlantType."Return Depot", Dummy);
      AppendElement(PlantType2, 'plantcalendar', PlantType."Plant Calendar", Dummy);
      AppendElement(PlantType2, 'rateunitofmeasure', PlantType."Rate Unit of Measure", Dummy);

      AppendElement(PlantType2, 'techspecs', '', TechSpecsElement);

      PlantTypeTechSpecTransl.SETRANGE("Plant Type Code", PlantType.Code);
      IF PlantTypeTechSpecTransl.FINDSET THEN
        REPEAT
          AppendElement(TechSpecsElement, 'lang', PlantTypeTechSpecTransl."Technical Specifications", Dummy);
          Dummy.SetAttribute('id', FORMAT(PlantTypeTechSpecTransl."Language ID"));
        UNTIL PlantTypeTechSpecTransl.NEXT = 0;

      AppendElement(PlantType2, 'weight', UtilityFunctions.FormatDecimal(PlantType.Weight), Dummy);
      AppendElement(PlantType2, 'internalrateperday', UtilityFunctions.FormatDecimal(RentalRate."Rental Rate (Days)"), Dummy);
      AppendElement(PlantType2, 'rentaltype',
        UtilityFunctions.FormatOption(PlantType."Rental Type", 'Rental,Sales/Buy Back,Both'), Dummy);

      AppendElement(PlantType2, 'websites', '', WebsitesElement);

      WebsitePerPlantType.SETRANGE("Plant Type Code", PlantType.Code);
      IF WebsitePerPlantType.FINDSET THEN
        REPEAT
          AppendElement(WebsitesElement, 'website', WebsitePerPlantType."Website Code", Dummy);
        UNTIL WebsitePerPlantType.NEXT = 0;
    END;

    PROCEDURE AppendElement@1100525001(ParentNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1100525001 : Text[80];Value@1100525002 : Text[1024];VAR NewElement@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      TextNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
    BEGIN
      NewElement := DOMDocument.CreateElement(Name);

      IF Value <> '' THEN BEGIN
        TextNode := DOMDocument.CreateTextNode(Value);
        NewElement.AppendChild(TextNode);
      END;

      ParentNode.AppendChild(NewElement);
    END;

    PROCEDURE LanguageIDFromLanguageCode@1100528701(LanguageCode@1100528700 : Code[10]) : Integer;
    VAR
      Language@1100528701 : Record 8;
    BEGIN
      IF NOT Language.GET(LanguageCode) THEN
        Language.INIT;

      EXIT(Language."Windows Language ID");
    END;

    PROCEDURE FindRentalRate@1100525007(VAR RentalRate@1100525000 : Record 11012567;RentalType@1100525001 : Integer;PlantType@1100525002 : Code[20]);
    BEGIN
      RentalRate.RESET;
      RentalRate.SETRANGE("Rental Type", RentalType);
      RentalRate.SETRANGE("Plant Type", PlantType);
      RentalRate.SETFILTER("Plant No.", '=%1', '');

      IF NOT RentalRate.FINDLAST THEN
        RentalRate.INIT;
    END;

    PROCEDURE FileName@1100525002() : Text[260];
    VAR
      PlantMgtFileExchangeSetup@1100525000 : Record 11125655;
    BEGIN
      PlantMgtFileExchangeSetup.GET;
      PlantMgtFileExchangeSetup.TESTFIELD("Export Path");

      EXIT(
        STRSUBSTNO('%1\planttypes%2.xml', DELCHR(PlantMgtFileExchangeSetup."Export Path", '>', '\'),
          UtilityFunctions.FileNameDateTime));
    END;

    BEGIN
    END.
  }
}

