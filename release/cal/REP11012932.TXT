OBJECT Report 11012932 Set Export Filters (Mobile)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Set Export Filters Field Service;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  FilterSetRec.GET(gFilterSetCode);  //* Must be present
                  FilterSetRec.TESTFIELD(Code);      //* Empty not allowed

                  UpdateFilters(DATABASE::Item, 0);
                  UpdateFilters(DATABASE::"Stockkeeping Unit", 0);
                  UpdateFilters(DATABASE::"Resource (WOP)", 0);  //DP00465
                  UpdateFilters(DATABASE::Employee, 0);
                  UpdateFilters(DATABASE::"Service Location", 0);
                  UpdateFilters(DATABASE::"Dimension Value", 2);  //* Cost Objects
                  UpdateFilters(DATABASE::"Wage Component", 0);
                  UpdateFilters(DATABASE::"Cost Code", 0);
                  UpdateFilters(DATABASE::"Unit of Measure", 0);
                  UpdateFilters(DATABASE::Vendor, 0);
                  UpdateFilters(DATABASE::"Standard Object", 0); // DP00826
                  UpdateFilters(DATABASE::"Service Order", 0);
                  UpdateFilters(DATABASE::"Work Order", 0);
                  UpdateFilters(DATABASE::"Hour Line Template", 0);
                  UpdateFilters(DATABASE::"Service Unit Price", 0);

                  COMMIT;
                  CurrReport.QUIT;
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27 }

    { 1100529400;;DataItem;                  ;
               DataItemTable=Table5700 }

    { 1100529000;;DataItem;                  ;
               DataItemTable=Table11229278 }

    { 7528;    ;DataItem;                    ;
               DataItemTable=Table5200 }

    { 1295;    ;DataItem;                    ;
               DataItemTable=Table11012801 }

    { 6608;    ;DataItem;CostObject          ;
               DataItemTable=Table349;
               DataItemTableView=WHERE(Global Dimension No.=CONST(2));
               ReqFilterHeadingML=[ENU=Cost Object;
                                   NOR=Kostnadsobjekt;
                                   SVE=Kostnadsobjekt] }

    { 8732;    ;DataItem;                    ;
               DataItemTable=Table11012014 }

    { 3069;    ;DataItem;                    ;
               DataItemTable=Table11012083 }

    { 7182;    ;DataItem;                    ;
               DataItemTable=Table204 }

    { 1100525000;;DataItem;                  ;
               DataItemTable=Table23 }

    { 1100525001;;DataItem;                  ;
               DataItemTable=Table11020334 }

    { 1100527000;;DataItem;                  ;
               DataItemTable=Table11012823 }

    { 1100527001;;DataItem;                  ;
               DataItemTable=Table11229279 }

    { 1100527002;;DataItem;                  ;
               DataItemTable=Table11229799 }

    { 1100526000;;DataItem;                  ;
               DataItemTable=Table11071769 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FilterSetRec@1100525002 : Record 11020440;
      gFilterSetCode@1100525001 : Code[20];
      FilterTxt@1100525000 : Text[1024];

    PROCEDURE SetFilterSet@1100525000(IFilterSetCode@1100525000 : Code[20]);
    BEGIN
      gFilterSetCode := IFilterSetCode;
    END;

    LOCAL PROCEDURE UpdateFilters@1100525001(ITableNo@1100525000 : Integer;ISubTableNo@1100525005 : Integer);
    VAR
      lvFieldRec@1100525004 : Record 2000000041;
      lvFilterRec@1100525003 : Record 11020441;
      lvRecRef@1100525002 : RecordRef;
      lvFldRef@1100525001 : FieldRef;
    BEGIN
      CASE ITableNo OF
        DATABASE::Item:
          lvRecRef.GETTABLE(Item);
        DATABASE::"Stockkeeping Unit":
          lvRecRef.GETTABLE("Stockkeeping Unit");
        DATABASE::"Resource (WOP)":  //DP00465
          lvRecRef.GETTABLE("Resource (WOP)");
        DATABASE::Employee:
          lvRecRef.GETTABLE(Employee);
        DATABASE::"Service Location":
          lvRecRef.GETTABLE("Service Location");
        DATABASE::"Dimension Value":
          CASE ISubTableNo OF
            2: lvRecRef.GETTABLE(CostObject);
            ELSE
              EXIT;
          END;
        DATABASE::"Wage Component":
          lvRecRef.GETTABLE("Wage Component");
        DATABASE::"Cost Code":
          lvRecRef.GETTABLE("Cost Code");
        DATABASE::"Unit of Measure":
          lvRecRef.GETTABLE("Unit of Measure");
        DATABASE::Vendor:
          lvRecRef.GETTABLE(Vendor);
        DATABASE::"Standard Object":
          lvRecRef.GETTABLE("Standard Object");
        DATABASE::"Service Order":
          lvRecRef.GETTABLE("Service Order");
        DATABASE::"Work Order":
          lvRecRef.GETTABLE("Work Order");
        DATABASE::"Hour Line Template":
          lvRecRef.GETTABLE("Hour Line Template");
        DATABASE::"Service Unit Price":
          lvRecRef.GETTABLE("Service Unit Price");
        ELSE
          EXIT;
      END;

      lvFilterRec.SETRANGE("Filter Set", gFilterSetCode);
      lvFilterRec.SETRANGE("Table No.", ITableNo);
      lvFilterRec.SETRANGE("Sub Table No.", ISubTableNo);
      lvFilterRec.DELETEALL;

      lvFieldRec.SETRANGE(TableNo, ITableNo);
      lvFieldRec.SETRANGE(Enabled, TRUE);
      lvFieldRec.SETRANGE(ObsoleteState, lvFieldRec.ObsoleteState::No);
      IF lvFieldRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          lvFldRef := lvRecRef.FIELD(lvFieldRec."No.");
          FilterTxt := lvFldRef.GETFILTER;
          IF FilterTxt <> '' THEN BEGIN
            //* Filter must be language independent (f.i. NAS can run in another language)
            CASE lvFieldRec.Type OF
              lvFieldRec.Type::Boolean:
                BooleanFilter_Caption2No(FilterTxt);
              lvFieldRec.Type::Option:
                OptionFilter_Caption2No(FilterTxt, lvFldRef.OPTIONCAPTION);
            END;
            lvFilterRec.INIT;
            lvFilterRec."Filter Set" := gFilterSetCode;
            lvFilterRec."Table No." := ITableNo;
            lvFilterRec."Sub Table No." := ISubTableNo;
            lvFilterRec."Field No." := lvFieldRec."No.";
            lvFilterRec."Field Filter" := FilterTxt;
            lvFilterRec.INSERT;
          END;
        UNTIL lvFieldRec.NEXT = 0;
      END;
    END;

    PROCEDURE BooleanFilter_Caption2No@1100525004(VAR VarFilterTxt@1100525000 : Text[1024]);
    VAR
      lvBool@1100525001 : Boolean;
      lvI@1100525005 : Integer;
      lvPos@1100525004 : Integer;
      lvLen@1100525003 : Integer;
      lvBoolTxt@1100525002 : Text[30];
    BEGIN
      IF VarFilterTxt = '' THEN
        EXIT;

      FOR lvI:= 0 TO 1 DO BEGIN
        IF lvI = 1 THEN
          lvBool := TRUE;
        lvBoolTxt := FORMAT(lvBool);
        lvLen := STRLEN(lvBoolTxt);
        REPEAT
          lvPos := STRPOS(VarFilterTxt, lvBoolTxt);
          IF lvPos > 0 THEN BEGIN
            IF lvPos = 1 THEN
              VarFilterTxt := FORMAT(lvI) + COPYSTR(VarFilterTxt, lvPos + lvLen)
            ELSE
              VarFilterTxt := COPYSTR(VarFilterTxt, 1, lvPos-1) + FORMAT(lvI) + COPYSTR(VarFilterTxt, lvPos + lvLen);
          END;
        UNTIL lvPos = 0;
      END;
    END;

    PROCEDURE OptionFilter_Caption2No@1100525002(VAR VarFilterTxt@1100525000 : Text[1024];IOptionCaption@1100525001 : Text[1024]);
    VAR
      lvMaxOptionNo@1100525003 : Integer;
      lvOptionNo@1100525004 : Integer;
      lvPos@1100525005 : Integer;
      lvLen@1100525006 : Integer;
      lvOptionTxt@1100525007 : Text[100];
      lvOptionCaption@1100525002 : Text[1024];
    BEGIN
      IF VarFilterTxt = '' THEN
        EXIT;

      lvOptionCaption := DELCHR(IOptionCaption, '=', ',');
      lvMaxOptionNo := STRLEN(IOptionCaption) - STRLEN(lvOptionCaption);

      lvOptionNo := 0;
      lvOptionCaption := IOptionCaption;

      FOR lvOptionNo := 0 TO lvMaxOptionNo DO BEGIN
        lvPos := STRPOS(lvOptionCaption, ',');
        lvOptionTxt := '';
        IF lvPos > 0 THEN BEGIN
          IF lvPos > 1 THEN
            lvOptionTxt := COPYSTR(lvOptionCaption, 1, lvPos-1);
          lvOptionCaption := COPYSTR(lvOptionCaption, lvPos+1);
        END ELSE BEGIN
          lvOptionTxt := lvOptionCaption;
          lvOptionCaption := '';
        END;

        IF lvOptionTxt <> '' THEN BEGIN
          lvLen := STRLEN(lvOptionTxt);
          IF (COPYSTR(lvOptionTxt, 1, 1) = ' ') OR (COPYSTR(lvOptionTxt, lvLen, 1) = ' ') THEN BEGIN
            lvOptionTxt := '''' + lvOptionTxt + '''';
            lvLen := STRLEN(lvOptionTxt);
          END;
          REPEAT
            lvPos := STRPOS(VarFilterTxt, lvOptionTxt);
            IF lvPos > 0 THEN BEGIN
              IF lvPos = 1 THEN
                VarFilterTxt := FORMAT(lvOptionNo) + COPYSTR(VarFilterTxt, lvPos + lvLen)
              ELSE
                VarFilterTxt := COPYSTR(VarFilterTxt, 1, lvPos-1) + FORMAT(lvOptionNo) + COPYSTR(VarFilterTxt, lvPos + lvLen);
            END;
          UNTIL lvPos = 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

