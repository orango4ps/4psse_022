OBJECT Table 11072553 Service Prognosis by Cost Type
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               SetDefaultValues;
             END;

    CaptionML=ENU=Service Prognosis by Cost Type;
    LookupPageID=Page11126846;
    DrillDownPageID=Page11126846;
  }
  FIELDS
  {
    { 10  ;   ;Prognosis Date      ;Date          ;TableRelation="Service Prognosis"."Prognosis Date";
                                                   CaptionML=[ENU=Prognosis Date;
                                                              SVE=Prognosdatum];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 20  ;   ;Prognosis Seq. No.  ;Integer       ;TableRelation="Service Prognosis"."Seq. No." WHERE (Prognosis Date=FIELD(Prognosis Date));
                                                   CaptionML=ENU=Prognosis Seq. No.;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 30  ;   ;Prognosis Line No.  ;Integer       ;CaptionML=ENU=Prognosis Line No.;
                                                   Editable=No }
    { 40  ;   ;Cost Type           ;Option        ;CaptionML=[ENU=Cost Type;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry;
                                                   Editable=No }
    { 50  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                           Global Dimension No.=CONST(2))
                                                                                                                           ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                             Global Dimension No.=CONST(2))
                                                                                                                                                                                             ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 60  ;   ;Service Category    ;Code10        ;CaptionML=[ENU=Service Category;
                                                              SVE=Servicekategori];
                                                   Editable=No }
    { 61  ;   ;Service Category Description;Text30;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Category".Description WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                            Code=FIELD(Service Category)));
                                                   CaptionML=ENU=Service Category Description;
                                                   Editable=No }
    { 70  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 71  ;   ;Service Contract Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract.Description WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=[ENU=Service Contract Description;
                                                              SVE=Servicekontraktsbeskrivning];
                                                   Editable=No }
    { 80  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              SVE=Startdatum];
                                                   Editable=No }
    { 90  ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              SVE=Slutdatum];
                                                   Editable=No }
    { 100 ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=ENU=,Period,Service Category,Source Type,Service Order;
                                                   OptionString=,Period,Service Category,Source Type,Service Order;
                                                   Description=Keep this in sync with T11072311F90;
                                                   Editable=No }
    { 110 ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=[ENU=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                                    SVE=Samtal,Kontrakt,Direkt,Kalkyl,,,Žndring,Ers„ttning];
                                                   OptionString=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                   Editable=No }
    { 120 ;   ;Indentation         ;Integer       ;CaptionML=ENU=Ident Value;
                                                   Editable=No }
    { 130 ;   ;Upper Level Prognosis Line No.;Integer;
                                                   CaptionML=ENU=Upper Level Prognosis Line No.;
                                                   Editable=No }
    { 140 ;   ;Control Period Code ;Code10        ;TableRelation=IF (Service Contract No.=FILTER(<>'')) "Service-Contract Ctrl. Period".Code WHERE (Service Contract No.=FIELD(Service Contract No.))
                                                                 ELSE IF (Service Contract No.=CONST('')) "Service Control Period".Code;
                                                   OnValidate=VAR
                                                                ServiceControlPeriod@1100528601 : Record 11071755;
                                                                ServiceContractCtrlPeriod@1100528600 : Record 11071746;
                                                              BEGIN
                                                                IF "Service Contract No." = '' THEN BEGIN
                                                                  IF ServiceControlPeriod.GET("Control Period Code") THEN BEGIN
                                                                    "Starting Date" := ServiceControlPeriod."Starting Date";
                                                                    "Ending Date" := ServiceControlPeriod."Ending Date";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF ServiceContractCtrlPeriod.GET("Service Contract No.", "Control Period Code") THEN BEGIN
                                                                    "Starting Date" := ServiceContractCtrlPeriod."Starting Date";
                                                                    "Ending Date" := ServiceContractCtrlPeriod."Ending Date";
                                                                  END;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Control Period Code;
                                                              SVE=Kontrollperiodskod];
                                                   Editable=No }
    { 200 ;   ;Budget Cost         ;Decimal       ;CaptionML=[ENU=Budget Cost;
                                                              SVE=Budgeterad kostnad];
                                                   Editable=No }
    { 210 ;   ;Budget Hours        ;Decimal       ;CaptionML=[ENU=Budget Hours;
                                                              SVE=Budget (timmar)];
                                                   Editable=No }
    { 220 ;   ;Actual Cost         ;Decimal       ;CaptionML=[ENU=Actual Cost;
                                                              SVE=Faktisk kostnad];
                                                   Editable=No }
    { 230 ;   ;Actual Hours        ;Decimal       ;CaptionML=[ENU=Actual Hours;
                                                              SVE=Verkliga timmar];
                                                   Editable=No }
    { 240 ;   ;Actual Cost (Additional);Decimal   ;CaptionML=[ENU=Actual Cost (Additional);
                                                              SVE=Verkliga kostnader (extra)];
                                                   Editable=No }
    { 250 ;   ;Actual Hours (Additional);Decimal  ;CaptionML=[ENU=Actual Hours (Additional);
                                                              SVE=Verkliga timmar (extra)];
                                                   Editable=No }
    { 260 ;   ;Open (Purchase)     ;Decimal       ;CaptionML=[ENU=Open (Purchase);
                                                              SVE=™ppna ink”p];
                                                   Editable=No }
    { 270 ;   ;Open Ovh. Surch. Soft (Purch.);Decimal;
                                                   CaptionML=[ENU=Open Ovh. Surch. Soft Commitments (Purchase);
                                                              SVE=™ppen overheadkostnad, l”pande †taganden (ink”p)];
                                                   Editable=No }
    { 280 ;   ;Received/Not Invoiced;Decimal      ;CaptionML=[ENU=Received/Not Invoiced;
                                                              SVE=Mottaget/inte fakturerat];
                                                   Editable=No }
    { 290 ;   ;Open Ovh. Surch. Firm (Purch.);Decimal;
                                                   CaptionML=[ENU=Open Ovh. Surch. Firm Commitments (Purchase);
                                                              SVE=™ppen overheadkostnad, fasta †taganden (ink”p)];
                                                   Editable=No }
    { 300 ;   ;Open (Inventory)    ;Decimal       ;CaptionML=[ENU=Open (Inventory);
                                                              SVE=™ppna (lager)];
                                                   Editable=No }
    { 310 ;   ;Open Ovh. Surch. (Inventory);Decimal;
                                                   CaptionML=[ENU=Open Ovh. Surch. (Inventory);
                                                              SVE=™ppen overheadkostnad (lager)];
                                                   Editable=No }
    { 320 ;   ;Open Amount (Hours) ;Decimal       ;CaptionML=[ENU=Open Amount (Hours);
                                                              SVE=™ppna belopp (timmar)];
                                                   Editable=No }
    { 330 ;   ;Open Ovh. Surch. (Hours);Decimal   ;CaptionML=[ENU=Open Ovh. Surch. (Hours);
                                                              SVE=™ppen overheadkostnad (timmar)];
                                                   Editable=No }
    { 340 ;   ;Open Hours          ;Decimal       ;CaptionML=[ENU=Open Hours;
                                                              SVE=™ppna timmar];
                                                   Editable=No }
    { 350 ;   ;Total Cost          ;Decimal       ;CaptionML=[ENU=Total Cost;
                                                              SVE=Totalkostnad];
                                                   Editable=No }
    { 360 ;   ;Total Hours         ;Decimal       ;CaptionML=[ENU=Total Hours;
                                                              SVE=Timmar totalt];
                                                   Editable=No }
    { 370 ;   ;Total Cost (Additional);Decimal    ;CaptionML=ENU=Total Cost (Additional);
                                                   Editable=No }
    { 380 ;   ;Total Hours (Additional);Decimal   ;CaptionML=ENU=Total Hours (Additional);
                                                   Editable=No }
    { 390 ;   ;Allowed Cost        ;Decimal       ;CaptionML=[ENU=Allowed Cost;
                                                              SVE=Till†ten];
                                                   Editable=No }
    { 400 ;   ;Allowed Hours       ;Decimal       ;CaptionML=[ENU=Allowed Hours;
                                                              SVE=Till†tna timmar];
                                                   Editable=No }
    { 410 ;   ;Result              ;Decimal       ;CaptionML=[ENU=Result;
                                                              SVE=Resultat];
                                                   Editable=No }
    { 420 ;   ;Result Hours        ;Decimal       ;CaptionML=[ENU=Result Hours;
                                                              SVE=Resultattimmar];
                                                   Editable=No }
    { 430 ;   ;Available           ;Decimal       ;CaptionML=[ENU=Available;
                                                              SVE=Disponibelt];
                                                   Editable=No }
    { 500 ;   ;Prognosis Total Cost;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND "Rest of Contract" THEN
                                                                  TESTFIELD("Rest of Contract Editable", TRUE);
                                                                DeterminePrognosisTotalContractCost;
                                                                UpdateUpperLevelPrognosisAmounts(FIELDNO("Prognosis Total Cost"));
                                                              END;

                                                   CaptionML=[ENU=Prognosis Total Cost;
                                                              SVE=Prognos totala kostnader] }
    { 510 ;   ;Calc. Prognosis Total Cost;Decimal ;CaptionML=[ENU=Calculated Prognosis Total Cost;
                                                              SVE=Ber„knad prognos f”r totalkostnader];
                                                   Editable=No }
    { 520 ;   ;Lower Level Progn. Total Cost;Decimal;
                                                   CaptionML=ENU=Lower Level Prognosis Total Cost;
                                                   Editable=No }
    { 530 ;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate".Code;
                                                   OnValidate=VAR
                                                                ServiceContract@1100528602 : Record 11012812;
                                                                BudgetRateManagement@1100528600 : Codeunit 11012358;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND "Rest of Contract" THEN
                                                                  TESTFIELD("Rest of Contract Editable", TRUE);

                                                                IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                                                                  ServiceContract.GET("Service Contract No.");
                                                                  VALIDATE(Rate, BudgetRateManagement.GetBudgetRateForServicePrognosis(ServiceContract."Global Dimension 1 Code", "Rate Code", "Starting Date", "Ending Date"));
                                                                END ELSE
                                                                  ERROR(Text001, "Cost Type", FIELDCAPTION("Cost Type"));
                                                              END;

                                                   OnLookup=VAR
                                                              BudgetRate@1100528601 : Record 11012000;
                                                            BEGIN
                                                              IF ("Cost Type" = "Cost Type"::Labor) AND ("Cost Object" <> '') THEN BEGIN
                                                                BudgetRate.SETFILTER("Starting Date", '%1|<=%2', 0D, "Ending Date");
                                                                BudgetRate.SETFILTER("Ending Date", '%1|>=%2', 0D, "Starting Date");
                                                                IF PAGE.RUNMODAL(0, BudgetRate) = ACTION::LookupOK THEN
                                                                  VALIDATE("Rate Code", BudgetRate.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Rate Code;
                                                              SVE=Avgiftskod] }
    { 540 ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND "Rest of Contract" THEN
                                                                  TESTFIELD("Rest of Contract Editable", TRUE);

                                                                IF ("Cost Type" <> "Cost Type"::Labor) AND (Rate <> 0) THEN
                                                                  ERROR(Text001, "Cost Type", FIELDCAPTION(Rate));

                                                                IF ("Deviation from Budget (Amount)" <> 0) AND (Rate <> 0) THEN BEGIN
                                                                  GetGLSetup;
                                                                  VALIDATE("Deviation from Budget (Amount)", ROUND(Rate * "Deviation from Budget (Hours)", GLSetup."Amount Rounding Precision"));
                                                                END ELSE
                                                                  IF "Deviation from Budget (Hours)" <> 0 THEN BEGIN
                                                                    GetGLSetup;
                                                                    VALIDATE("Deviation from Budget (Amount)", ROUND(Rate * "Deviation from Budget (Hours)", GLSetup."Amount Rounding Precision"));
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Rate;
                                                              SVE=Avgift];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 550 ;   ;Deviation from Budget (Amount);Decimal;
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND "Rest of Contract" THEN
                                                                  TESTFIELD("Rest of Contract Editable", TRUE);
                                                                RecalcDeviationAfterAmountChange;
                                                                UpdateDeviationFromBudget;
                                                              END;

                                                   CaptionML=ENU=Deviation from Budget (Amount);
                                                   AutoFormatType=1 }
    { 560 ;   ;Deviation from Budget (Hours);Decimal;
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND "Rest of Contract" THEN
                                                                  TESTFIELD("Rest of Contract Editable", TRUE);
                                                                IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                                                                  "Budget Hours Incl. Deviation" := "Budget Hours" + "Deviation from Budget (Hours)";
                                                                  GetGLSetup;
                                                                  VALIDATE("Deviation from Budget (Amount)", ROUND(Rate * "Deviation from Budget (Hours)", GLSetup."Amount Rounding Precision"));
                                                                END ELSE
                                                                  IF "Deviation from Budget (Hours)" <> 0 THEN
                                                                    ERROR(Text001, "Cost Type", FIELDCAPTION("Deviation from Budget (Hours)"));
                                                              END;

                                                   CaptionML=ENU=Deviation from Budget (Hours) }
    { 570 ;   ;Low. Lv. Dev. From Budget Amt;Decimal;
                                                   CaptionML=ENU=Lower Level Deviation from Budget (Amount);
                                                   Editable=No }
    { 580 ;   ;Prognosis Total Contract Cost;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Rest of Contract");
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TESTFIELD("Rest of Contract Editable", TRUE);
                                                                CALCFIELDS("Total Prognosis Total Cost");
                                                                "Prognosis Total Cost" := "Prognosis Total Contract Cost" - "Total Prognosis Total Cost";
                                                                UpdateUpperLevelPrognosisAmounts(FIELDNO("Prognosis Total Contract Cost"));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Prognosis Total Contract Cost }
    { 590 ;   ;Low. Lv. Pr. Total Contr. Cost;Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Lower Level Prognosis Total Contract Cost;
                                                   Editable=No }
    { 600 ;   ;Comment             ;Text250       ;CaptionML=[ENU=Comment;
                                                              SVE=Kommentar] }
    { 610 ;   ;Rest of Contract    ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Rest of Contract;
                                                   Editable=No }
    { 611 ;   ;Rest of Contract Editable;Boolean  ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Rest of Contract Editable;
                                                   Editable=No }
    { 620 ;   ;Total Prognosis Total Cost;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Prognosis by Cost Type"."Prognosis Total Cost" WHERE (Prognosis Date=FIELD(Prognosis Date),
                                                                                                                                  Prognosis Seq. No.=FIELD(Prognosis Seq. No.),
                                                                                                                                  Cost Type=FIELD(Cost Type),
                                                                                                                                  Cost Object=FIELD(Cost Object),
                                                                                                                                  Service Category=FIELD(Service Category),
                                                                                                                                  Service Contract No.=FIELD(Service Contract No.),
                                                                                                                                  Line Type=FIELD(Line Type),
                                                                                                                                  Source Type=FIELD(Source Type),
                                                                                                                                  Rest of Contract=CONST(No)));
                                                   CaptionML=ENU=Total Prognosis Total Cost;
                                                   Editable=No }
    { 630 ;   ;Budget Costs Incl. Deviation;Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Budget Costs Including Deviation;
                                                   Editable=No }
    { 640 ;   ;Budget Hours Incl. Deviation;Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Budget Hours Including Deviation;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Prognosis Date,Prognosis Seq. No.,Prognosis Line No.,Cost Type,Cost Object;
                                                   Clustered=Yes }
    {    ;Cost Type,Cost Object                    }
    {    ;Prognosis Date,Service Category,Service Contract No.,Line Type,Source Type,Control Period Code,Cost Type,Cost Object }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100529601 : TextConst 'ENU=Cost Type of Line is %1, input of %2 not allowed.';
      GLSetup@1100529602 : Record 98;
      DimMgt@1100529604 : Codeunit 408;
      HasGotGLSetup@1100529603 : Boolean;
      SkipUpdateUpperLevelPrognosis@1100529600 : Boolean;
      Text002@1100529605 : TextConst 'ENU=Service Surcharge is set up for Service Contract %1. Surcharge amounts may be calculated on Source Type level only.';

    LOCAL PROCEDURE SetDefaultValues@1100529601();
    BEGIN
      IF "Cost Object" = '' THEN
        Indentation := 0
      ELSE
        Indentation := 1;

      IF "Cost Type" <> "Cost Type"::Labor THEN BEGIN
        "Budget Hours" := 0;
        "Budget Hours Incl. Deviation" := 0;
        "Actual Hours" := 0;
        "Actual Hours (Additional)" := 0;
        "Open Hours" := 0;
        "Total Hours" := 0;
        "Total Hours (Additional)" := 0;
        "Allowed Hours" := 0;
        "Result Hours" := 0;
      END;
    END;

    PROCEDURE CalculateTotalsAndResults@1100529600();
    BEGIN
      VALIDATE("Total Cost",
        "Actual Cost" + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)" + "Received/Not Invoiced" +
        "Open Ovh. Surch. Firm (Purch.)" + "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
        "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)");
      "Total Hours" := "Actual Hours" + "Open Hours";

      Available := "Budget Cost" - "Total Cost";

      Result := "Allowed Cost" - "Total Cost";
      "Result Hours" := "Allowed Hours" - "Total Hours";
      "Budget Costs Incl. Deviation" := "Budget Cost" + "Deviation from Budget (Amount)";
      DetermineCalcPrognosisTotalCost;
    END;

    PROCEDURE DetermineCalcPrognosisTotalCost@1100529606();
    BEGIN
      IF "Total Cost" > "Budget Costs Incl. Deviation" THEN
        "Calc. Prognosis Total Cost" := "Total Cost"
      ELSE
        "Calc. Prognosis Total Cost" := "Budget Costs Incl. Deviation";
      "Prognosis Total Cost" := "Calc. Prognosis Total Cost";
    END;

    PROCEDURE DetermineDeviationFromBudgetHours@1100529608();
    BEGIN
      IF ("Cost Type" = "Cost Type"::Labor) AND (NOT (CurrFieldNo IN [FIELDNO(Rate), FIELDNO("Rate Code"), FIELDNO("Deviation from Budget (Hours)")])) THEN BEGIN
        IF "Deviation from Budget (Amount)" = 0 THEN
          "Deviation from Budget (Hours)" := 0
        ELSE
          IF Rate <> 0 THEN BEGIN
            GetGLSetup;
            "Deviation from Budget (Hours)" := ROUND("Deviation from Budget (Amount)" / Rate, GLSetup."Unit-Amount Rounding Precision");
          END;
        "Budget Hours Incl. Deviation" := "Budget Hours" + "Deviation from Budget (Hours)";
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@1100529603();
    BEGIN
      IF HasGotGLSetup THEN
        EXIT;
      GLSetup.GET;
      HasGotGLSetup := TRUE;
    END;

    PROCEDURE GetLaborRate@1100529602(ServiceContract@1100529600 : Record 11012812);
    VAR
      DimensionValue@1100529602 : Record 349;
      BudgetRateManagement@1100529605 : Codeunit 11012358;
    BEGIN
      IF ("Cost Type" <> "Cost Type"::Labor) OR ("Cost Object" = '') THEN
        EXIT;

      DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
      IF (DimensionValue.Code = '') OR (DimensionValue."Rate Code" = '') THEN
        EXIT;

      "Rate Code" := DimensionValue."Rate Code";
      Rate := BudgetRateManagement.GetBudgetRateForServicePrognosis(
        ServiceContract."Global Dimension 1 Code", "Rate Code",
        "Starting Date", "Ending Date");
    END;

    PROCEDURE UpdateUpperLevelPrognosisAmounts@1100528611(UpdateFieldNo@1100529603 : Integer);
    VAR
      ServicePrognosisByCostType@1100529601 : Record 11072553;
      UpperServicePrognosisByCostType@1100529602 : Record 11072553;
    BEGIN
      IF "Cost Object" <> '' THEN BEGIN
        UpperServicePrognosisByCostType.GET("Prognosis Date", "Prognosis Seq. No.", "Prognosis Line No.", "Cost Type", '');
        UpperServicePrognosisByCostType.SetSkipUpdateUpperLevelPrognosis(SkipUpdateUpperLevelPrognosis);

        ServicePrognosisByCostType.RESET;
        ServicePrognosisByCostType.SETRANGE("Prognosis Date", "Prognosis Date");
        ServicePrognosisByCostType.SETRANGE("Prognosis Seq. No.", "Prognosis Seq. No.");
        ServicePrognosisByCostType.SETRANGE("Prognosis Line No.", "Prognosis Line No.");
        ServicePrognosisByCostType.SETRANGE("Cost Type", "Cost Type");
        ServicePrognosisByCostType.SETFILTER("Cost Object", '<>%1&<>%2', '', "Cost Object");
        ServicePrognosisByCostType.CALCSUMS("Prognosis Total Cost", "Deviation from Budget (Amount)", "Deviation from Budget (Hours)", "Budget Costs Incl. Deviation");
        IF "Rest of Contract" THEN
          ServicePrognosisByCostType.CALCSUMS("Prognosis Total Contract Cost");

        UpperServicePrognosisByCostType."Low. Lv. Dev. From Budget Amt" := ServicePrognosisByCostType."Deviation from Budget (Amount)" + "Deviation from Budget (Amount)";
        UpperServicePrognosisByCostType."Lower Level Progn. Total Cost" := ServicePrognosisByCostType."Prognosis Total Cost" + "Prognosis Total Cost";
        IF "Rest of Contract" THEN
          UpperServicePrognosisByCostType."Low. Lv. Pr. Total Contr. Cost" := ServicePrognosisByCostType."Prognosis Total Contract Cost" + "Prognosis Total Contract Cost";

        IF NOT SkipUpdateUpperLevelPrognosis THEN
          CASE UpdateFieldNo OF
            FIELDNO("Deviation from Budget (Amount)"):
              BEGIN
                UpperServicePrognosisByCostType."Deviation from Budget (Amount)" := UpperServicePrognosisByCostType."Low. Lv. Dev. From Budget Amt";
                UpperServicePrognosisByCostType."Deviation from Budget (Hours)" := ServicePrognosisByCostType."Deviation from Budget (Hours)" + "Deviation from Budget (Hours)";
                UpperServicePrognosisByCostType."Budget Hours Incl. Deviation" := UpperServicePrognosisByCostType."Budget Hours" + UpperServicePrognosisByCostType."Deviation from Budget (Hours)";
                UpperServicePrognosisByCostType."Budget Costs Incl. Deviation" := ServicePrognosisByCostType."Budget Costs Incl. Deviation" + "Budget Costs Incl. Deviation";
                UpperServicePrognosisByCostType.RecalcDeviationAfterAmountChange;
                UpperServicePrognosisByCostType.DetermineCalcPrognosisTotalCost;
                UpperServicePrognosisByCostType.DeterminePrognosisTotalContractCost;
              END;
            FIELDNO("Prognosis Total Cost"):
              BEGIN
                UpperServicePrognosisByCostType."Prognosis Total Cost" := UpperServicePrognosisByCostType."Lower Level Progn. Total Cost";
                UpperServicePrognosisByCostType.DeterminePrognosisTotalContractCost;
              END;
            FIELDNO("Prognosis Total Contract Cost"):
              BEGIN
                IF "Rest of Contract" THEN BEGIN
                  UpperServicePrognosisByCostType."Prognosis Total Contract Cost" := UpperServicePrognosisByCostType."Low. Lv. Pr. Total Contr. Cost";
                  UpperServicePrognosisByCostType.CALCFIELDS("Total Prognosis Total Cost");
                  UpperServicePrognosisByCostType."Prognosis Total Cost" := UpperServicePrognosisByCostType."Prognosis Total Contract Cost" - UpperServicePrognosisByCostType."Total Prognosis Total Cost";
                END ELSE
                  UpperServicePrognosisByCostType."Prognosis Total Cost" := UpperServicePrognosisByCostType."Lower Level Progn. Total Cost";
              END;
          END;

        UpperServicePrognosisByCostType.MODIFY;
        UpperServicePrognosisByCostType.UpdateServicePrognosisLine(UpdateFieldNo);
      END ELSE
        UpdateServicePrognosisLine(UpdateFieldNo);

      IF ("Upper Level Prognosis Line No." <> 0) AND
         (("Cost Object" <> '') OR (NOT SkipUpdateUpperLevelPrognosis))
      THEN
        IF UpperServicePrognosisByCostType.GET("Prognosis Date", "Prognosis Seq. No.", "Upper Level Prognosis Line No.", "Cost Type", "Cost Object") THEN BEGIN
          UpperServicePrognosisByCostType.SetSkipUpdateUpperLevelPrognosis(SkipUpdateUpperLevelPrognosis);
          ServicePrognosisByCostType.SETRANGE("Prognosis Date", "Prognosis Date");
          ServicePrognosisByCostType.SETRANGE("Prognosis Seq. No.", "Prognosis Seq. No.");
          ServicePrognosisByCostType.SETRANGE("Upper Level Prognosis Line No.", "Upper Level Prognosis Line No.");
          ServicePrognosisByCostType.SETRANGE("Cost Type", "Cost Type");
          ServicePrognosisByCostType.SETRANGE("Cost Object", "Cost Object");
          ServicePrognosisByCostType.SETFILTER("Prognosis Line No.", '<>%1', "Prognosis Line No.");
          ServicePrognosisByCostType.CALCSUMS("Prognosis Total Cost", "Deviation from Budget (Amount)", "Budget Costs Incl. Deviation");
          IF "Rest of Contract" THEN
            ServicePrognosisByCostType.CALCSUMS("Prognosis Total Contract Cost");

          IF "Cost Object" <> '' THEN BEGIN
            UpperServicePrognosisByCostType."Low. Lv. Dev. From Budget Amt" := ServicePrognosisByCostType."Deviation from Budget (Amount)" + "Deviation from Budget (Amount)";
            UpperServicePrognosisByCostType."Lower Level Progn. Total Cost" := ServicePrognosisByCostType."Prognosis Total Cost" + "Prognosis Total Cost";
            IF "Rest of Contract" THEN
              UpperServicePrognosisByCostType."Low. Lv. Pr. Total Contr. Cost" := ServicePrognosisByCostType."Prognosis Total Contract Cost" + "Prognosis Total Contract Cost";
          END;

          IF NOT SkipUpdateUpperLevelPrognosis THEN
            CASE UpdateFieldNo OF
              FIELDNO("Deviation from Budget (Amount)"):
                BEGIN
                  UpperServicePrognosisByCostType."Deviation from Budget (Amount)" := ServicePrognosisByCostType."Deviation from Budget (Amount)" + "Deviation from Budget (Amount)";
                  UpperServicePrognosisByCostType."Deviation from Budget (Hours)" := ServicePrognosisByCostType."Deviation from Budget (Hours)" + "Deviation from Budget (Hours)";
                  UpperServicePrognosisByCostType."Budget Hours Incl. Deviation" := UpperServicePrognosisByCostType."Budget Hours" + UpperServicePrognosisByCostType."Deviation from Budget (Hours)";
                  UpperServicePrognosisByCostType."Budget Costs Incl. Deviation" := ServicePrognosisByCostType."Budget Costs Incl. Deviation" + "Budget Costs Incl. Deviation";
                  UpperServicePrognosisByCostType.RecalcDeviationAfterAmountChange;
                  UpperServicePrognosisByCostType.DetermineCalcPrognosisTotalCost;
                  UpperServicePrognosisByCostType.DeterminePrognosisTotalContractCost;
                END;
              FIELDNO("Prognosis Total Cost"):
                BEGIN
                  UpperServicePrognosisByCostType."Prognosis Total Cost" := UpperServicePrognosisByCostType."Lower Level Progn. Total Cost";
                  UpperServicePrognosisByCostType.DeterminePrognosisTotalContractCost;
                END;
              FIELDNO("Prognosis Total Contract Cost"):
                BEGIN
                  IF "Rest of Contract" THEN BEGIN
                    UpperServicePrognosisByCostType."Prognosis Total Contract Cost" := ServicePrognosisByCostType."Prognosis Total Contract Cost" + "Prognosis Total Contract Cost";
                    UpperServicePrognosisByCostType.CALCFIELDS("Total Prognosis Total Cost");
                    UpperServicePrognosisByCostType."Prognosis Total Cost" := UpperServicePrognosisByCostType."Prognosis Total Contract Cost" - UpperServicePrognosisByCostType."Total Prognosis Total Cost";
                  END ELSE
                    UpperServicePrognosisByCostType."Prognosis Total Cost" := ServicePrognosisByCostType."Deviation from Budget (Amount)" + "Deviation from Budget (Amount)";
                END;
            END;

          UpperServicePrognosisByCostType.MODIFY;
          UpperServicePrognosisByCostType.UpdateUpperLevelPrognosisAmounts(UpdateFieldNo);
        END;
    END;

    PROCEDURE UpdateServicePrognosisLine@1100529612(UpdateFieldNo@1100529603 : Integer);
    VAR
      ServicePrognosisLine@1100528601 : Record 11072310;
      ServicePrognosisByCostType@1100529601 : Record 11072553;
    BEGIN
      IF "Cost Object" <> '' THEN
        EXIT;
      IF SkipUpdateUpperLevelPrognosis THEN
        EXIT;

      ServicePrognosisLine.GET("Prognosis Date", "Prognosis Seq. No.", "Prognosis Line No.");

      ServicePrognosisByCostType.SETRANGE("Prognosis Date", "Prognosis Date");
      ServicePrognosisByCostType.SETRANGE("Prognosis Seq. No.", "Prognosis Seq. No.");
      ServicePrognosisByCostType.SETRANGE("Prognosis Line No.", "Prognosis Line No.");
      ServicePrognosisByCostType.SETFILTER("Cost Type", '<>%1', "Cost Type");
      ServicePrognosisByCostType.SETRANGE("Cost Object", '');

      CASE UpdateFieldNo OF
        FIELDNO("Deviation from Budget (Amount)"):
          BEGIN
            ServicePrognosisByCostType.CALCSUMS("Deviation from Budget (Amount)", "Budget Costs Incl. Deviation");
            ServicePrognosisLine."Deviation From Budget" := ServicePrognosisByCostType."Deviation from Budget (Amount)" + "Deviation from Budget (Amount)";
            ServicePrognosisLine."Budget Costs Incl. Deviation" := ServicePrognosisByCostType."Budget Costs Incl. Deviation" + "Budget Costs Incl. Deviation";
            ServicePrognosisLine.DetermineCalcPrognosisTotalCost;
            ServicePrognosisLine.DeterminePrognosisTotalContractCost;
          END;
        FIELDNO("Prognosis Total Cost"):
          BEGIN
            ServicePrognosisByCostType.CALCSUMS("Prognosis Total Cost");
            ServicePrognosisLine."Prognosis Total Cost" := ServicePrognosisByCostType."Prognosis Total Cost" + "Prognosis Total Cost";
            ServicePrognosisLine.DeterminePrognosisTotalContractCost;
          END;
        FIELDNO("Prognosis Total Contract Cost"):
          BEGIN
            IF ServicePrognosisLine."Rest of Contract" THEN BEGIN
              ServicePrognosisByCostType.CALCSUMS("Prognosis Total Contract Cost");
              ServicePrognosisLine."Prognosis Total Contract Cost" := ServicePrognosisByCostType."Prognosis Total Contract Cost" + "Prognosis Total Contract Cost";
              ServicePrognosisLine."Prognosis Total Cost" := ServicePrognosisLine."Prognosis Total Contract Cost" -
                ServicePrognosisLine.TotalPrognosisTotalCostRevenue(ServicePrognosisLine.FIELDNO("Prognosis Total Cost"));
            END ELSE BEGIN
              ServicePrognosisByCostType.CALCSUMS("Prognosis Total Cost");
              ServicePrognosisLine."Prognosis Total Cost" := ServicePrognosisByCostType."Prognosis Total Cost" + "Prognosis Total Cost";
              ServicePrognosisLine.DeterminePrognosisTotalContractCost;
            END;
          END;
      END;

      ServicePrognosisLine.DeterminePrognosisFinancialResult;
      ServicePrognosisLine.MODIFY;
      ServicePrognosisLine.SetDontUpdatePrognosisValueViaLowerLevelValue(TRUE);
      CASE UpdateFieldNo OF
        FIELDNO("Deviation from Budget (Amount)"):
          ServicePrognosisLine.UpdateUpperLevelPrognosisAmounts(ServicePrognosisLine."Line Type", ServicePrognosisLine.FIELDNO("Deviation From Budget"));
        FIELDNO("Prognosis Total Cost"):
          ServicePrognosisLine.UpdateUpperLevelPrognosisAmounts(ServicePrognosisLine."Line Type", ServicePrognosisLine.FIELDNO("Prognosis Total Cost"));
        FIELDNO("Prognosis Total Contract Cost"):
          ServicePrognosisLine.UpdateUpperLevelPrognosisAmounts(ServicePrognosisLine."Line Type", ServicePrognosisLine.FIELDNO("Prognosis Total Contract Cost"));
      END;
    END;

    PROCEDURE InitManualLine@1100529605(ServicePrognosisLine@1100529600 : Record 11072310);
    BEGIN
      "Service Category" := ServicePrognosisLine."Service Category";
      "Service Contract No." := ServicePrognosisLine."Service Contract No.";
      "Control Period Code" := ServicePrognosisLine."Control Period Code";
      "Starting Date" := ServicePrognosisLine."Starting Date";
      "Ending Date" := ServicePrognosisLine."Ending Date";
      "Line Type" := ServicePrognosisLine."Line Type";
      "Source Type" := ServicePrognosisLine."Source Type";
      "Rest of Contract" := ServicePrognosisLine."Rest of Contract";
      "Rest of Contract Editable" := ServicePrognosisLine."Rest of Contract Editable";
      "Upper Level Prognosis Line No." := ServicePrognosisLine.GetUpperLevelLineNo;
    END;

    PROCEDURE InsertUpperLevelCostTypeLine@1100529604();
    VAR
      ServicePrognosisLine@1100528601 : Record 11072310;
      NewServicePrognosisByCostType@1100529601 : Record 11072553;
    BEGIN
      IF ("Cost Object" = '') OR ("Upper Level Prognosis Line No." = 0) THEN
        EXIT;
      IF NOT NewServicePrognosisByCostType.GET("Prognosis Date", "Prognosis Seq. No.", "Upper Level Prognosis Line No.", "Cost Type", "Cost Object") THEN BEGIN
        ServicePrognosisLine.GET("Prognosis Date", "Prognosis Seq. No.", "Upper Level Prognosis Line No.");
        NewServicePrognosisByCostType := Rec;
        NewServicePrognosisByCostType."Prognosis Line No." := "Upper Level Prognosis Line No.";
        NewServicePrognosisByCostType.InitManualLine(ServicePrognosisLine);
        NewServicePrognosisByCostType.INSERT(TRUE);
        NewServicePrognosisByCostType.InsertUpperLevelCostTypeLine;
      END;
    END;

    PROCEDURE SetSkipUpdateUpperLevelPrognosis@1100529607(NewSkipUpdateUpperLevelPrognosis@1100529600 : Boolean);
    BEGIN
      SkipUpdateUpperLevelPrognosis := NewSkipUpdateUpperLevelPrognosis;
    END;

    PROCEDURE DeterminePrognosisTotalContractCost@1100529631();
    BEGIN
      IF NOT "Rest of Contract" THEN
        EXIT;
      CALCFIELDS("Total Prognosis Total Cost");
      "Prognosis Total Contract Cost" := "Prognosis Total Cost" + "Total Prognosis Total Cost";
    END;

    PROCEDURE UpdatePrognosisTotalContractCost@1100529620();
    VAR
      LocServicePrognosisByCostType@1100529620 : Record 11072553;
    BEGIN
      IF "Rest of Contract" THEN
        EXIT;

      LocServicePrognosisByCostType.SETRANGE("Prognosis Date", "Prognosis Date");
      LocServicePrognosisByCostType.SETRANGE("Prognosis Seq. No.", "Prognosis Seq. No.");
      LocServicePrognosisByCostType.SETRANGE("Cost Type", "Cost Type");
      LocServicePrognosisByCostType.SETRANGE("Cost Object", "Cost Object");
      LocServicePrognosisByCostType.SETRANGE("Service Contract No.", "Service Contract No.");
      LocServicePrognosisByCostType.SETRANGE("Service Category", "Service Category");
      LocServicePrognosisByCostType.SETRANGE("Source Type", "Source Type");
      LocServicePrognosisByCostType.SETRANGE("Line Type", "Line Type");
      LocServicePrognosisByCostType.SETRANGE("Rest of Contract", TRUE);
      IF LocServicePrognosisByCostType.ISEMPTY THEN
        EXIT;

      LocServicePrognosisByCostType.FINDLAST;
      LocServicePrognosisByCostType.DeterminePrognosisTotalContractCost;
      LocServicePrognosisByCostType.MODIFY;
      LocServicePrognosisByCostType.UpdateUpperLevelPrognosisAmounts(LocServicePrognosisByCostType.FIELDNO("Prognosis Total Contract Cost"));
    END;

    PROCEDURE InsertRestOfContractCostTypeLine@1100529621();
    VAR
      ServicePrognosisLine@1100528601 : Record 11072310;
      NewServicePrognosisByCostType@1100529601 : Record 11072553;
      LocServicePrognosisByCostType@1100529620 : Record 11072553;
    BEGIN
      IF ("Cost Object" = '') OR "Rest of Contract" THEN
        EXIT;

      LocServicePrognosisByCostType.SETRANGE("Prognosis Date", "Prognosis Date");
      LocServicePrognosisByCostType.SETRANGE("Prognosis Seq. No.", "Prognosis Seq. No.");
      LocServicePrognosisByCostType.SETRANGE("Cost Type", "Cost Type");
      LocServicePrognosisByCostType.SETRANGE("Cost Object", "Cost Object");
      LocServicePrognosisByCostType.SETRANGE("Service Contract No.", "Service Contract No.");
      LocServicePrognosisByCostType.SETRANGE("Service Category", "Service Category");
      LocServicePrognosisByCostType.SETRANGE("Source Type", "Source Type");
      LocServicePrognosisByCostType.SETRANGE("Line Type", "Line Type");
      LocServicePrognosisByCostType.SETRANGE("Rest of Contract", TRUE);
      IF NOT LocServicePrognosisByCostType.ISEMPTY THEN
        EXIT;

      LocServicePrognosisByCostType.SETRANGE("Cost Object", '');
      IF LocServicePrognosisByCostType.ISEMPTY THEN
        EXIT;

      LocServicePrognosisByCostType.FINDLAST;
      IF NOT NewServicePrognosisByCostType.GET(LocServicePrognosisByCostType."Prognosis Date", LocServicePrognosisByCostType."Prognosis Seq. No.",
                                               LocServicePrognosisByCostType."Prognosis Line No.", "Cost Type", "Cost Object")
      THEN BEGIN
        ServicePrognosisLine.GET(LocServicePrognosisByCostType."Prognosis Date", LocServicePrognosisByCostType."Prognosis Seq. No.", LocServicePrognosisByCostType."Prognosis Line No.");
        NewServicePrognosisByCostType := LocServicePrognosisByCostType;
        NewServicePrognosisByCostType."Cost Object" := "Cost Object";
        NewServicePrognosisByCostType.INIT;
        NewServicePrognosisByCostType.InitManualLine(ServicePrognosisLine);
        NewServicePrognosisByCostType.INSERT(TRUE);
        NewServicePrognosisByCostType.InsertUpperLevelCostTypeLine;
      END;
    END;

    PROCEDURE RecalcDeviationAfterAmountChange@1100529904();
    BEGIN
      IF ("Cost Type" = "Cost Type"::Labor) AND (NOT (CurrFieldNo IN [FIELDNO(Rate), FIELDNO("Rate Code"), FIELDNO("Deviation from Budget (Hours)")])) THEN
        IF "Deviation from Budget (Amount)" = 0 THEN
          Rate := 0
        ELSE
          IF "Deviation from Budget (Hours)" <> 0 THEN BEGIN
            GetGLSetup;
            Rate := ROUND("Deviation from Budget (Amount)" / "Deviation from Budget (Hours)", GLSetup."Unit-Amount Rounding Precision");
          END;
    END;

    PROCEDURE RoundAmounts@1100529609();
    BEGIN
      GetGLSetup;
      "Budget Cost" := ROUND("Budget Cost", GLSetup."Amount Rounding Precision");
      "Budget Hours" := ROUND("Budget Hours", GLSetup."Amount Rounding Precision");
      Available := ROUND(Available, GLSetup."Amount Rounding Precision");
      "Allowed Cost" := ROUND("Allowed Cost", GLSetup."Amount Rounding Precision");
      "Allowed Hours" := ROUND("Allowed Hours", GLSetup."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE UpdateDeviationFromBudget@1100529610();
    VAR
      ServicePrognosisByCostType@1100529605 : Record 11072553;
      TmpBuffer@1100529603 : TEMPORARY Record 11012875;
      BudgetCostInclDeviation@1100529602 : Decimal;
    BEGIN
      GetSurchargeAmountBuffer(TmpBuffer);
      TmpBuffer.RESET;
      TmpBuffer.SETRANGE("Surcharge Line", TRUE);

      ServicePrognosisByCostType.SETRANGE("Prognosis Date", "Prognosis Date");
      ServicePrognosisByCostType.SETRANGE("Prognosis Seq. No.", "Prognosis Seq. No.");
      ServicePrognosisByCostType.SETRANGE("Prognosis Line No.", "Prognosis Line No.");
      ServicePrognosisByCostType.SETFILTER("Cost Object", '<>%1', '');
      IF ServicePrognosisByCostType.FINDSET THEN
        REPEAT
          TmpBuffer.SETRANGE("Cost Type", ServicePrognosisByCostType."Cost Type");
          TmpBuffer.SETRANGE("Cost Object", ServicePrognosisByCostType."Cost Object");
          TmpBuffer.CALCSUMS(Amount);
          IF (ServicePrognosisByCostType."Cost Type" = "Cost Type") AND (ServicePrognosisByCostType."Cost Object" = "Cost Object") THEN
            "Budget Costs Incl. Deviation" := "Budget Cost" + "Deviation from Budget (Amount)" + TmpBuffer.Amount
          ELSE BEGIN
            BudgetCostInclDeviation := ServicePrognosisByCostType."Budget Cost" + ServicePrognosisByCostType."Deviation from Budget (Amount)" + TmpBuffer.Amount;
            IF ServicePrognosisByCostType."Budget Costs Incl. Deviation" <> BudgetCostInclDeviation THEN BEGIN
              ServicePrognosisByCostType."Budget Costs Incl. Deviation" := BudgetCostInclDeviation;
              ServicePrognosisByCostType.DetermineCalcPrognosisTotalCost;
              ServicePrognosisByCostType.DeterminePrognosisTotalContractCost;
              ServicePrognosisByCostType.MODIFY;
              ServicePrognosisByCostType.UpdateUpperLevelPrognosisAmounts(FIELDNO("Deviation from Budget (Amount)"));
            END;
          END;
        UNTIL ServicePrognosisByCostType.NEXT = 0;

      TmpBuffer.SETRANGE("Cost Object");
      ServicePrognosisByCostType.SETRANGE("Cost Object", '');
      ServicePrognosisByCostType.FINDSET;
      REPEAT
        TmpBuffer.SETRANGE("Cost Type", ServicePrognosisByCostType."Cost Type");
        TmpBuffer.CALCSUMS(Amount);
        IF (ServicePrognosisByCostType."Cost Type" = "Cost Type") AND (ServicePrognosisByCostType."Cost Object" = "Cost Object") THEN
          "Budget Costs Incl. Deviation" := "Budget Cost" + "Deviation from Budget (Amount)" + TmpBuffer.Amount
        ELSE BEGIN
          BudgetCostInclDeviation := ServicePrognosisByCostType."Budget Cost" + ServicePrognosisByCostType."Deviation from Budget (Amount)" + TmpBuffer.Amount;
          IF ServicePrognosisByCostType."Budget Costs Incl. Deviation" <> BudgetCostInclDeviation THEN BEGIN
            ServicePrognosisByCostType."Budget Costs Incl. Deviation" := BudgetCostInclDeviation;
            ServicePrognosisByCostType.DetermineCalcPrognosisTotalCost;
            ServicePrognosisByCostType.DeterminePrognosisTotalContractCost;
            ServicePrognosisByCostType.MODIFY;
            ServicePrognosisByCostType.UpdateUpperLevelPrognosisAmounts(FIELDNO("Deviation from Budget (Amount)"));
          END;
        END;
      UNTIL ServicePrognosisByCostType.NEXT = 0;

      DetermineCalcPrognosisTotalCost;
      DeterminePrognosisTotalContractCost;
      UpdateUpperLevelPrognosisAmounts(FIELDNO("Deviation from Budget (Amount)"));
    END;

    LOCAL PROCEDURE GetSurchargeAmountBuffer@1100529613(VAR TmpBuffer@1100529603 : TEMPORARY Record 11012875);
    VAR
      ServicePrognosisByCostType@1100529605 : Record 11072553;
      ServiceSurchargeManagement@1100529604 : Codeunit 11012834;
      TotalDeviation@1100529600 : Decimal;
      CostType@1100529601 : Integer;
    BEGIN
      IF NOT TmpBuffer.ISTEMPORARY THEN
        EXIT;
      TmpBuffer.RESET;
      TmpBuffer.DELETEALL;
      IF NOT ServiceSurchargeManagement.CheckServiceSurchargeVersionExists("Service Contract No.", "Source Type", "Ending Date") THEN
        EXIT;
      IF "Line Type" <> "Line Type"::"Source Type" THEN BEGIN
        IF GUIALLOWED AND (CurrFieldNo IN [FIELDNO("Deviation from Budget (Amount)"), FIELDNO("Deviation from Budget (Hours)")]) THEN
          MESSAGE(Text002, "Service Contract No.");
        EXIT;
      END;

      ServicePrognosisByCostType.SETRANGE("Prognosis Date", "Prognosis Date");
      ServicePrognosisByCostType.SETRANGE("Prognosis Seq. No.", "Prognosis Seq. No.");
      ServicePrognosisByCostType.SETRANGE("Prognosis Line No.", "Prognosis Line No.");

      ServicePrognosisByCostType.SETRANGE("Cost Type", "Cost Type");
      ServicePrognosisByCostType.SETFILTER("Cost Object", '<>%1', '');
      IF "Cost Object" = '' THEN BEGIN
        TotalDeviation := "Deviation from Budget (Amount)";
        IF ServicePrognosisByCostType.ISEMPTY THEN
          ServiceSurchargeManagement.InsertTmpBuffer(
            TmpBuffer, "Cost Type", '', TotalDeviation, 0, FALSE)
        ELSE BEGIN
          ServicePrognosisByCostType.CALCSUMS("Deviation from Budget (Amount)");
          IF TotalDeviation = ServicePrognosisByCostType."Deviation from Budget (Amount)" THEN BEGIN
            ServicePrognosisByCostType.FINDSET;
            REPEAT
              ServiceSurchargeManagement.InsertTmpBuffer(
                TmpBuffer, ServicePrognosisByCostType."Cost Type", ServicePrognosisByCostType."Cost Object",
                ServicePrognosisByCostType."Deviation from Budget (Amount)", 0, FALSE);
            UNTIL ServicePrognosisByCostType.NEXT = 0;
          END ELSE
            ServiceSurchargeManagement.InsertTmpBuffer(
              TmpBuffer, "Cost Type", '', TotalDeviation, 0, FALSE);
        END;
      END ELSE BEGIN
        ServicePrognosisByCostType.FINDSET;
        REPEAT
          IF (ServicePrognosisByCostType."Cost Type" = "Cost Type") AND (ServicePrognosisByCostType."Cost Object" = "Cost Object") THEN
            ServicePrognosisByCostType."Deviation from Budget (Amount)" := "Deviation from Budget (Amount)";
          ServiceSurchargeManagement.InsertTmpBuffer(
            TmpBuffer, ServicePrognosisByCostType."Cost Type", ServicePrognosisByCostType."Cost Object",
            ServicePrognosisByCostType."Deviation from Budget (Amount)", 0, FALSE);
        UNTIL ServicePrognosisByCostType.NEXT = 0;
      END;

      FOR CostType := "Cost Type"::Labor TO "Cost Type"::Sundry DO
        IF CostType <> "Cost Type" THEN BEGIN
          ServicePrognosisByCostType.SETRANGE("Cost Type", CostType);
          ServicePrognosisByCostType.SETRANGE("Cost Object", '');
          ServicePrognosisByCostType.FINDFIRST;
          TotalDeviation := ServicePrognosisByCostType."Deviation from Budget (Amount)";
          ServicePrognosisByCostType.SETFILTER("Cost Object", '<>%1', '');
          IF ServicePrognosisByCostType.ISEMPTY THEN
            ServiceSurchargeManagement.InsertTmpBuffer(
              TmpBuffer, ServicePrognosisByCostType."Cost Type", '',
              TotalDeviation, 0, FALSE)
          ELSE BEGIN
            ServicePrognosisByCostType.CALCSUMS("Deviation from Budget (Amount)");
            IF TotalDeviation = ServicePrognosisByCostType."Deviation from Budget (Amount)" THEN BEGIN
              ServicePrognosisByCostType.FINDSET;
              REPEAT
                ServiceSurchargeManagement.InsertTmpBuffer(
                  TmpBuffer, ServicePrognosisByCostType."Cost Type", ServicePrognosisByCostType."Cost Object",
                  ServicePrognosisByCostType."Deviation from Budget (Amount)", 0, FALSE);
              UNTIL ServicePrognosisByCostType.NEXT = 0;
            END ELSE
              ServiceSurchargeManagement.InsertTmpBuffer(
                TmpBuffer, ServicePrognosisByCostType."Cost Type", '',
                TotalDeviation, 0, FALSE);
          END;
        END;

      ServiceSurchargeManagement.CalculateSCSurchargeAmountCostObject("Service Contract No.", "Source Type", "Ending Date", TmpBuffer);
    END;

    BEGIN
    END.
  }
}

