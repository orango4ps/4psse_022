OBJECT Codeunit 8618 Config. Excel Exchange
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SelectedConfigPackage@1019 : Record 8623;
      SelectedTable@1028 : TEMPORARY Record 2000000026;
      ConfigXMLExchange@1006 : Codeunit 8614;
      FileMgt@1003 : Codeunit 419;
      ConfigProgressBar@1004 : Codeunit 8615;
      ConfigValidateMgt@1021 : Codeunit 8617;
      CannotCreateXmlSchemaErr@1016 : TextConst 'ENU=Could not create XML Schema.;NOR=Kan ikke opprette XML-skjema.;SVE=Det gick inte att skapa ett XML-schema.';
      CreatingExcelMsg@1011 : TextConst 'ENU=Creating Excel worksheet;NOR=Oppretter Excel-regneark;SVE=Skapar Excel-kalkylblad';
      OpenXMLManagement@1023 : Codeunit 6223;
      TypeHelper@1027 : Codeunit 10;
      WrkbkReader@1000 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader";
      WrkbkWriter@1002 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter";
      WrkShtWriter@1007 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      Worksheet@1025 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Worksheet";
      Workbook@1026 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Workbook";
      WorkBookPart@1030 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WorkbookPart";
      CreateWrkBkFailedErr@1033 : TextConst 'ENU=Could not create the Excel workbook.;NOR=Kan ikke opprette Excel-arbeidsboken.;SVE=Det gick inte att skapa Excel-arbetsboken.';
      WrkShtHelper@1001 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetHelper";
      DataSet@1038 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataSet";
      DataTable@1037 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataTable";
      DataColumn@1040 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataColumn";
      StringBld@1014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      id@1013 : BigInteger;
      HideDialog@1005 : Boolean;
      VmlDrawingXmlTxt@1015 : TextConst
        '@@@={Locked}',
        'ENU="<xml xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel""><o:shapelayout v:ext=""edit""><o:idmap v:ext=""edit"" data=""1""/></o:shapelayout><v:shapetype id=""_x0000_t202"" coordsize=""21600,21600"" o:spt=""202""  path=""m,l,21600r21600,l21600,xe""><v:stroke joinstyle=""miter""/><v:path gradientshapeok=""t"" o:connecttype=""rect""/></v:shapetype>"',
        'NOR="<xml xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel""><o:shapelayout v:ext=""edit""><o:idmap v:ext=""edit"" data=""1""/></o:shapelayout><v:shapetype id=""_x0000_t202"" coordsize=""21600,21600"" o:spt=""202""  path=""m,l,21600r21600,l21600,xe""><v:stroke joinstyle=""miter""/><v:path gradientshapeok=""t"" o:connecttype=""rect""/></v:shapetype>"',
        'SVE="<xml xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel""><o:shapelayout v:ext=""edit""><o:idmap v:ext=""edit"" data=""1""/></o:shapelayout><v:shapetype id=""_x0000_t202"" coordsize=""21600,21600"" o:spt=""202""  path=""m,l,21600r21600,l21600,xe""><v:stroke joinstyle=""miter""/><v:path gradientshapeok=""t"" o:connecttype=""rect""/></v:shapetype>"';
      EndXmlTokenTxt@1017 : TextConst '@@@={Locked};ENU=</xml>;NOR=</xml>;SVE=</xml>';
      FileExtensionFilterTok@1008 : TextConst 'ENU=Excel Files (*.xlsx)|*.xlsx|All Files (*.*)|*.*;NOR=Excel-filer (*.xlsx)|*.xlsx|Alle filer (*.*)|*.*;SVE=Excel-filer (*.xlsx)|*.xlsx|Alla filer (*.*)|*.*';
      ExcelFileNameTok@1009 : TextConst '@@@="%1 = String generated from current datetime to make sure file names are unique ";ENU=*%1.xlsx;NOR=*%1.xlsx;SVE=*%1.xlsx';
      ExcelFileExtensionTok@1010 : TextConst 'ENU=.xlsx;NOR=*.xlsx;SVE=.xlsx';
      InvalidDataInSheetMsg@1020 : TextConst '@@@="%1=excel sheet name";ENU=Data in sheet ''%1'' could not be imported, because the sheet has an unexpected format.;NOR=Dataene i arket %1 kan ikke importeres fordi arket har et uventet format.;SVE=Det gick inte att importera data i blad %1 eftersom bladet har ett ov„ntat format.';
      ImportFromExcelMsg@1022 : TextConst 'ENU=Import from Excel;NOR=Importer fra Excel;SVE=Importera fr†n Excel';
      FileOnServer@1024 : Boolean;

    [External]
    PROCEDURE ExportExcelFromConfig@19(VAR ConfigLine@1006 : Record 8622) : Text;
    VAR
      ConfigPackageTable@1005 : Record 8613;
      ConfigMgt@1000 : Codeunit 8616;
      FileName@1001 : Text;
      Filter@1003 : Text;
    BEGIN
      ConfigLine.FINDFIRST;
      ConfigPackageTable.SETRANGE("Package Code",ConfigLine."Package Code");
      Filter := ConfigMgt.MakeTableFilter(ConfigLine,TRUE);
      IF Filter <> '' THEN
        ConfigPackageTable.SETFILTER("Table ID",Filter);

      ConfigPackageTable.SETRANGE("Dimensions as Columns",TRUE);
      IF ConfigPackageTable.FINDSET THEN
        REPEAT
          IF NOT (ConfigPackageTable.DimensionPackageDataExist OR (ConfigPackageTable.DimensionFieldsCount > 0)) THEN
            ConfigPackageTable.InitDimensionFields;
        UNTIL ConfigPackageTable.NEXT = 0;
      ConfigPackageTable.SETRANGE("Dimensions as Columns");
      ExportExcel(FileName,ConfigPackageTable,TRUE,FALSE);
      EXIT(FileName);
    END;

    [External]
    PROCEDURE ExportExcelFromPackage@20(ConfigPackage@1000 : Record 8623) : Boolean;
    VAR
      ConfigPackageTable@1006 : Record 8613;
      FileName@1001 : Text;
    BEGIN
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      EXIT(ExportExcel(FileName,ConfigPackageTable,FALSE,FALSE));
    END;

    [External]
    PROCEDURE ExportExcelFromTables@3(VAR ConfigPackageTable@1000 : Record 8613) : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      EXIT(ExportExcel(FileName,ConfigPackageTable,FALSE,FALSE));
    END;

    [External]
    PROCEDURE ExportExcelTemplateFromTables@21(VAR ConfigPackageTable@1000 : Record 8613) : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      EXIT(ExportExcel(FileName,ConfigPackageTable,FALSE,TRUE));
    END;

    [External]
    PROCEDURE ExportExcel@13(VAR FileName@1025 : Text;VAR ConfigPackageTable@1001 : Record 8613;ExportFromWksht@1010 : Boolean;SkipData@1002 : Boolean) : Boolean;
    VAR
      TempBlob@1007 : Record 99008535;
      VmlDrawingPart@1024 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.VmlDrawingPart";
      TableDefinitionPart@1018 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.TableDefinitionPart";
      TableParts@1027 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableParts";
      TablePart@1040 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TablePart";
      SingleXMLCells@1033 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SingleXmlCells";
      XmlTextWriter@1015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
      FileMode@1014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileMode";
      Encoding@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Caption@1006 : Text;
      RootElementName@1003 : Text;
      TempSetupDataFileName@1000 : Text;
      TempSchemaFileName@1004 : Text;
      DataTableCounter@1012 : Integer;
    BEGIN
      OnBeforeExportExcel(ConfigPackageTable);

      CLEAR(ExportFromWksht); // Obsolete parameter
      TempSchemaFileName := CreateSchemaFile(ConfigPackageTable,RootElementName);
      TempSetupDataFileName := BuildDataSetForPackageTable(ConfigPackageTable);

      CreateBook(TempBlob);
      WrkShtHelper := WrkShtHelper.WorksheetHelper(WrkbkWriter.FirstWorksheet.Worksheet);
      OpenXMLManagement.ImportSchema(WrkbkWriter,TempSchemaFileName,1,RootElementName);
      OpenXMLManagement.CreateSchemaConnection(WrkbkWriter,TempSetupDataFileName);

      DataTableCounter := 1;

      IF NOT HideDialog THEN
        ConfigProgressBar.Init(ConfigPackageTable.COUNT,1,CreatingExcelMsg);

      DataTable := DataSet.Tables.Item(1);

      IF ConfigPackageTable.FINDSET THEN
        REPEAT
          IF ISNULL(StringBld) THEN BEGIN
            StringBld := StringBld.StringBuilder;
            StringBld.Append(VmlDrawingXmlTxt);
          END;

          ConfigPackageTable.CALCFIELDS("Table Caption");
          IF NOT HideDialog THEN
            ConfigProgressBar.Update(ConfigPackageTable."Table Caption");

          // Initialize WorkSheetWriter
          Caption := DELCHR(ConfigPackageTable."Table Caption",'=','/');
          IF id < 1 THEN BEGIN
            WrkShtWriter := WrkbkWriter.FirstWorksheet;
            WrkShtWriter.Name := Caption;
          END ELSE
            WrkShtWriter := WrkbkWriter.AddWorksheet(GetExcelWorksheetName(Caption,FORMAT(ConfigPackageTable."Table ID")));
          Worksheet := WrkShtWriter.Worksheet;

          // Add and initialize SingleCellTable part
          WrkShtWriter.AddSingleCellTablePart;
          SingleXMLCells := SingleXMLCells.SingleXmlCells;
          Worksheet.WorksheetPart.SingleCellTablePart.SingleXmlCells := SingleXMLCells;
          id += 3;

          OpenXMLManagement.AddAndInitializeCommentsPart(WrkShtWriter,VmlDrawingPart);
          AddPackageAndTableInformation(ConfigPackageTable,SingleXMLCells);
          AddAndInitializeTableDefinitionPart(ConfigPackageTable,DataTableCounter,TableDefinitionPart,SkipData);
          IF NOT SkipData THEN
            OpenXMLManagement.CopyDataToExcelTable(WrkShtWriter,DataTable);

          DataTableCounter += 2;
          TableParts := WrkShtWriter.CreateTableParts(1);
          WrkShtHelper.AppendElementToOpenXmlElement(Worksheet,TableParts);
          TablePart := WrkShtWriter.CreateTablePart(Worksheet.WorksheetPart.GetIdOfPart(TableDefinitionPart));
          WrkShtHelper.AppendElementToOpenXmlElement(TableParts,TablePart);

          StringBld.Append(EndXmlTokenTxt);

          XmlTextWriter := XmlTextWriter.XmlTextWriter(VmlDrawingPart.GetStream(FileMode.Create),Encoding.UTF8);
          XmlTextWriter.WriteRaw(StringBld.ToString);
          XmlTextWriter.Flush;
          XmlTextWriter.Close;

          CLEAR(StringBld);

        UNTIL ConfigPackageTable.NEXT = 0;

      FILE.ERASE(TempSchemaFileName);
      FILE.ERASE(TempSetupDataFileName);

      OpenXMLManagement.CleanMapInfo(WrkbkWriter.Workbook.WorkbookPart.CustomXmlMappingsPart.MapInfo);
      WrkbkWriter.Workbook.Save;
      WrkbkWriter.Close;
      ClearOpenXmlVariables;

      IF NOT HideDialog THEN
        ConfigProgressBar.Close;

      IF FileName = '' THEN
        FileName :=
          STRSUBSTNO(ExcelFileNameTok,FORMAT(CURRENTDATETIME,0,'<Day,2>_<Month,2>_<Year4>_<Hours24>_<Minutes,2>_<Seconds,2>'));

      IF NOT FileOnServer THEN
        FileName := FileMgt.BLOBExport(TempBlob,FileName,NOT HideDialog)
      ELSE
        FileMgt.BLOBExportToServerFile(TempBlob,FileName);

      EXIT(FileName <> '');
    END;

    [External]
    PROCEDURE ImportExcelFromConfig@16(ConfigLine@1000 : Record 8622);
    VAR
      ConfigPackage@1002 : Record 8623;
      TempBlob@1001 : Record 99008535;
    BEGIN
      ConfigLine.TESTFIELD("Line Type",ConfigLine."Line Type"::Table);
      ConfigLine.TESTFIELD("Table ID");
      IF ConfigPackage.GET(ConfigLine."Package Code") AND IsFileImportedToBLOB(TempBlob) THEN
        ImportExcel(TempBlob);
    END;

    [External]
    PROCEDURE ImportExcelFromPackage@18() : Boolean;
    VAR
      TempBlob@1002 : Record 99008535;
    BEGIN
      IF IsFileImportedToBLOB(TempBlob) THEN
        EXIT(ImportExcel(TempBlob));
      EXIT(FALSE)
    END;

    [External]
    PROCEDURE ImportExcelFromSelectedPackage@11(PackageCode@1000 : Code[20]) : Boolean;
    VAR
      TempBlob@1002 : Record 99008535;
    BEGIN
      SelectedConfigPackage.GET(PackageCode);
      IF IsFileImportedToBLOB(TempBlob) THEN
        EXIT(ImportExcel(TempBlob));
      EXIT(FALSE)
    END;

    PROCEDURE SetSelectedTables@14(VAR ConfigPackageTable@1000 : Record 8613);
    BEGIN
      IF ConfigPackageTable.FINDSET THEN
        REPEAT
          SelectedTable.Number := ConfigPackageTable."Table ID";
          IF SelectedTable.INSERT THEN;
        UNTIL ConfigPackageTable.NEXT = 0;
    END;

    LOCAL PROCEDURE IsTableSelected@25(TableId@1000 : Integer) : Boolean;
    BEGIN
      IF SelectedTable.ISEMPTY THEN
        EXIT(TRUE);
      EXIT(SelectedTable.GET(TableId));
    END;

    LOCAL PROCEDURE IsWorksheetSelected@38(VAR TempConfigPackageTable@1000 : TEMPORARY Record 8613;WrksheetId@1001 : Integer) : Boolean;
    BEGIN
      TempConfigPackageTable.RESET;
      TempConfigPackageTable.SETRANGE("Processing Order",WrksheetId);
      EXIT(NOT TempConfigPackageTable.ISEMPTY);
    END;

    LOCAL PROCEDURE IsImportFromExcelConfirmed@35(VAR TempConfigPackageTable@1000 : TEMPORARY Record 8613) : Boolean;
    VAR
      ConfigPackageImportPreview@1010 : Page 8617;
    BEGIN
      IF GUIALLOWED AND NOT HideDialog THEN
        IF ReadPackageTableKeysFromExcel(TempConfigPackageTable) THEN BEGIN
          ConfigPackageImportPreview.SetData(SelectedConfigPackage.Code,TempConfigPackageTable);
          ConfigPackageImportPreview.RUNMODAL;
          EXIT(ConfigPackageImportPreview.IsImportConfirmed);
        END;
      EXIT(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE ReadPackageTableKeysFromExcel@5(VAR TempConfigPackageTable@1000 : TEMPORARY Record 8613);
    VAR
      WrkShtReader@1008 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      Enumerator@1007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      CellData@1006 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData";
      Window@1001 : Dialog;
      WrkSheetId@1004 : Integer;
      SheetCount@1003 : Integer;
    BEGIN
      Window.OPEN(ImportFromExcelMsg);
      WrkSheetId := WrkbkReader.FirstSheetId;
      SheetCount := WrkbkReader.Workbook.Sheets.ChildElements.Count + WrkSheetId;
      REPEAT
        WrkShtReader := WrkbkReader.GetWorksheetById(FORMAT(WrkSheetId));
        Enumerator := WrkShtReader.GetEnumerator;
        WHILE NextCellInRow(Enumerator,CellData,1) DO
          FillImportPreviewBuffer(TempConfigPackageTable,WrkSheetId,CellData.ColumnNumber,CellData.Value);
        WrkSheetId += 1;
      UNTIL WrkSheetId >= SheetCount;
      SelectedTable.DELETEALL;
      IF TempConfigPackageTable.FINDFIRST THEN;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE FillImportPreviewBuffer@10(VAR TempConfigPackageTable@1000 : TEMPORARY Record 8613;WrkSheetId@1005 : Integer;ColumnNo@1001 : Integer;Value@1002 : Text);
    VAR
      ConfigPackage@1004 : Record 8623;
      ConfigPackageTable@1003 : Record 8613;
    BEGIN
      WITH TempConfigPackageTable DO
        CASE ColumnNo OF
          1: // first column contains Package Code
            "Package Code" := COPYSTR(Value,1,MAXSTRLEN("Package Code"));
          3: // third column contains Table ID
            BEGIN
              "Processing Order" := WrkSheetId;
              EVALUATE("Table ID",Value);
              "Delayed Insert" := NOT ConfigPackage.GET("Package Code"); // New Package flag value
              Validated := NOT ConfigPackageTable.GET("Package Code","Table ID"); // New Table flag value
              IF IsTableSelected("Table ID") THEN
                INSERT;
            END;
        END;
    END;

    LOCAL PROCEDURE NextCellInRow@36(Enumerator@1001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";CellData@1000 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData";RowNo@1002 : Integer) : Boolean;
    BEGIN
      IF Enumerator.MoveNext THEN BEGIN
        CellData := Enumerator.Current;
        EXIT(CellData.RowNumber = RowNo);
      END;
    END;

    [External]
    PROCEDURE ImportExcel@24(VAR TempBlob@1000 : Record 99008535) Imported : Boolean;
    VAR
      TempConfigPackageTable@1018 : TEMPORARY Record 8613;
      WorkBookPart@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WorkbookPart";
      InStream@1009 : InStream;
      XMLSchemaDataFile@1005 : Text;
      WrkSheetId@1023 : Integer;
      DataColumnTableId@1024 : Integer;
      SheetCount@1022 : Integer;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStream);
      WrkbkReader := WrkbkReader.Open(InStream);
      IF NOT IsImportFromExcelConfirmed(TempConfigPackageTable) THEN BEGIN
        CLEAR(WrkbkReader);
        EXIT(FALSE);
      END;
      WorkBookPart := WrkbkReader.Workbook.WorkbookPart;
      XMLSchemaDataFile := OpenXMLManagement.ExtractXMLSchema(WorkBookPart);

      WrkSheetId := WrkbkReader.FirstSheetId;
      SheetCount := WorkBookPart.Workbook.Sheets.ChildElements.Count + WrkSheetId;
      DataSet := DataSet.DataSet;
      DataSet.ReadXmlSchema(XMLSchemaDataFile);

      WrkSheetId := WrkbkReader.FirstSheetId;
      DataColumnTableId := 0;
      REPEAT
        IF IsWorksheetSelected(TempConfigPackageTable,WrkSheetId) THEN
          ReadWorksheetData(WrkSheetId,DataColumnTableId);
        WrkSheetId += 1;
        DataColumnTableId += 2;
      UNTIL WrkSheetId >= SheetCount;

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataSet.WriteXml(InStream);
      ConfigXMLExchange.SetExcelMode(TRUE);
      IF ConfigXMLExchange.ImportPackageXMLFromStream(InStream) THEN
        Imported := TRUE;

      EXIT(Imported);
    END;

    LOCAL PROCEDURE ReadWorksheetData@37(WrkSheetId@1001 : Integer;DataColumnTableId@1007 : Integer);
    VAR
      TempXMLBuffer@1002 : TEMPORARY Record 1235;
      CellData@1003 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData";
      DataRow@1006 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
      DataRow2@1005 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
      Enumerator@1004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Type@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      WrkShtReader@1000 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      SheetHeaderRead@1009 : Boolean;
      ColumnCount@1015 : Integer;
      TotalColumnCount@1014 : Integer;
      RowIn@1013 : Integer;
      CurrentRowIndex@1012 : Integer;
      RowChanged@1011 : Boolean;
      FirstDataRow@1010 : Integer;
      CellValueText@1016 : Text;
    BEGIN
      WrkShtReader := WrkbkReader.GetWorksheetById(FORMAT(WrkSheetId));
      IF InitColumnMapping(WrkShtReader,TempXMLBuffer) THEN BEGIN
        Enumerator := WrkShtReader.GetEnumerator;
        IF GetDataTable(DataColumnTableId) THEN BEGIN
          DataColumn := DataTable.Columns.Item(1);
          DataColumn.DataType := Type.GetType('System.String');
          DataTable.BeginLoadData;
          DataRow := DataTable.NewRow;
          SheetHeaderRead := FALSE;
          DataColumn := DataTable.Columns.Item(1);
          RowIn := 1;
          ColumnCount := 0;
          TotalColumnCount := 0;
          CurrentRowIndex := 1;
          FirstDataRow := 4;
          WHILE Enumerator.MoveNext DO BEGIN
            CellData := Enumerator.Current;
            CellValueText := CellData.Value;
            RowChanged := CurrentRowIndex <> CellData.RowNumber;
            IF NOT SheetHeaderRead THEN BEGIN // Read config and table information
              IF (CellData.RowNumber = 1) AND (CellData.ColumnNumber = 1) THEN
                DataRow.Item(1,CellValueText);
              IF (CellData.RowNumber = 1) AND (CellData.ColumnNumber = 3) THEN BEGIN
                DataColumn := DataTable.Columns.Item(0);
                DataRow.Item(0,CellValueText);
                DataTable.Rows.Add(DataRow);
                DataColumn := DataTable.Columns.Item(2);
                DataColumn.AllowDBNull(TRUE);
                DataTable := DataSet.Tables.Item(DataColumnTableId + 1);
                ColumnCount := 0;
                TotalColumnCount := DataTable.Columns.Count - 1;
                REPEAT
                  DataColumn := DataTable.Columns.Item(ColumnCount);
                  DataColumn.DataType := Type.GetType('System.String');
                  ColumnCount += 1;
                UNTIL ColumnCount = TotalColumnCount;
                ColumnCount := 0;
                DataRow2 := DataTable.NewRow;
                DataRow2.SetParentRow(DataRow);
                SheetHeaderRead := TRUE;
              END;
            END ELSE BEGIN // Read data rows
              IF (RowIn = 1) AND (CellData.RowNumber >= FirstDataRow) AND (CellData.ColumnNumber = 1) THEN BEGIN
                TotalColumnCount := ColumnCount;
                ColumnCount := 0;
                RowIn += 1;
                FirstDataRow := CellData.RowNumber;
              END;

              IF RowChanged AND (CellData.RowNumber > FirstDataRow) AND (RowIn <> 1) THEN BEGIN
                DataTable.Rows.Add(DataRow2);
                DataTable.EndLoadData;
                DataRow2 := DataTable.NewRow;
                DataRow2.SetParentRow(DataRow);
                RowIn += 1;
                ColumnCount := 0;
              END;

              IF RowIn <> 1 THEN
                IF TempXMLBuffer.GET(CellData.ColumnNumber) THEN BEGIN
                  DataColumn := DataTable.Columns.Item(TempXMLBuffer."Parent Entry No.");
                  DataColumn.AllowDBNull(TRUE);
                  DataRow2.Item(TempXMLBuffer."Parent Entry No.",CellValueText);
                END;

              ColumnCount := CellData.ColumnNumber + 1;
            END;
            CurrentRowIndex := CellData.RowNumber;
          END;
          // Add the last row
          DataTable.Rows.Add(DataRow2);
          DataTable.EndLoadData;
        END ELSE
          MESSAGE(InvalidDataInSheetMsg,WrkShtReader.Name);
      END;
    END;

    [External]
    PROCEDURE ClearOpenXmlVariables@7();
    BEGIN
      CLEAR(WrkbkReader);
      CLEAR(WrkbkWriter);
      CLEAR(WrkShtWriter);
      CLEAR(Workbook);
      CLEAR(WorkBookPart);
      CLEAR(WrkShtHelper);
    END;

    [External]
    PROCEDURE CreateBook@27(VAR TempBlob@1000 : Record 99008535);
    VAR
      InStream@1001 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStream);
      WrkbkWriter := WrkbkWriter.Create(InStream);
      IF ISNULL(WrkbkWriter) THEN
        ERROR(CreateWrkBkFailedErr);

      Workbook := WrkbkWriter.Workbook;
      WorkBookPart := Workbook.WorkbookPart;
    END;

    [External]
    PROCEDURE SetHideDialog@1(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    LOCAL PROCEDURE CreateSchemaFile@15(VAR ConfigPackageTable@1000 : Record 8613;VAR RootElementName@1005 : Text) : Text;
    VAR
      ConfigDataSchema@1004 : XMLport 8610;
      OStream@1002 : OutStream;
      TempSchemaFile@1003 : File;
      TempSchemaFileName@1001 : Text;
    BEGIN
      TempSchemaFile.CREATETEMPFILE;
      TempSchemaFileName := TempSchemaFile.NAME + '.xsd';
      TempSchemaFile.CLOSE;
      TempSchemaFile.CREATE(TempSchemaFileName);
      TempSchemaFile.CREATEOUTSTREAM(OStream);
      RootElementName := ConfigDataSchema.GetRootElementName;
      ConfigDataSchema.SETDESTINATION(OStream);
      ConfigDataSchema.SETTABLEVIEW(ConfigPackageTable);
      IF NOT ConfigDataSchema.EXPORT THEN
        ERROR(CannotCreateXmlSchemaErr);
      TempSchemaFile.CLOSE;
      EXIT(TempSchemaFileName);
    END;

    LOCAL PROCEDURE CreateXMLPackage@4(TempSetupDataFileName@1000 : Text;VAR ConfigPackageTable@1002 : Record 8613) : Text;
    BEGIN
      CLEAR(ConfigXMLExchange);
      ConfigXMLExchange.SetExcelMode(TRUE);
      ConfigXMLExchange.SetCalledFromCode(TRUE);
      ConfigXMLExchange.SetPrefixMode(TRUE);
      ConfigXMLExchange.ExportPackageXML(ConfigPackageTable,TempSetupDataFileName);
      ConfigXMLExchange.SetExcelMode(FALSE);
      EXIT(TempSetupDataFileName);
    END;

    LOCAL PROCEDURE CreateTableColumnNames@6(VAR ConfigPackageField@1000 : Record 8616;VAR ConfigPackageTable@1006 : Record 8613;TableColumns@1008 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumns");
    VAR
      Field@1002 : Record 2000000041;
      Dimension@1004 : Record 348;
      XmlColumnProperties@1005 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.XmlColumnProperties";
      TableColumn@1007 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumn";
      WrkShtWriter2@1011 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      RecRef@1012 : RecordRef;
      FieldRef@1010 : FieldRef;
      TableColumnName@1003 : Text;
      ColumnID@1001 : Integer;
    BEGIN
      RecRef.OPEN(ConfigPackageTable."Table ID");
      ConfigPackageField.SETCURRENTKEY("Package Code","Table ID","Processing Order");
      IF ConfigPackageField.FINDSET THEN BEGIN
        ColumnID := 1;
        REPEAT
          IF TypeHelper.GetField(ConfigPackageField."Table ID",ConfigPackageField."Field ID",Field) OR
             ConfigPackageField.Dimension
          THEN BEGIN
            IF ConfigPackageField.Dimension THEN
              TableColumnName := ConfigPackageField."Field Caption" + ' ' + STRSUBSTNO('(%1)',Dimension.TABLECAPTION)
            ELSE
              TableColumnName := ConfigPackageField."Field Caption";
            XmlColumnProperties := WrkShtWriter2.CreateXmlColumnProperties(
                1,
                '/DataList/' + (ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") + 'List') +
                '/' + ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") +
                '/' + ConfigXMLExchange.GetElementName(ConfigPackageField."Field Caption"),
                WrkShtWriter.XmlDataType2XmlDataValues(
                  ConfigXMLExchange.GetXSDType(ConfigPackageTable."Table ID",ConfigPackageField."Field ID")));
            TableColumn := WrkShtWriter.CreateTableColumn(
                ColumnID,
                TableColumnName,
                ConfigXMLExchange.GetElementName(ConfigPackageField."Field Caption"));
            WrkShtHelper.AppendElementToOpenXmlElement(TableColumn,XmlColumnProperties);
            WrkShtHelper.AppendElementToOpenXmlElement(TableColumns,TableColumn);
            WrkShtWriter.SetCellValueText(
              3,OpenXMLManagement.GetXLColumnID(ColumnID),TableColumnName,WrkShtWriter.DefaultCellDecorator);
            IF NOT ConfigPackageField.Dimension THEN BEGIN
              FieldRef := RecRef.FIELD(ConfigPackageField."Field ID");
              OpenXMLManagement.SetCellComment(
                WrkShtWriter,OpenXMLManagement.GetXLColumnID(ColumnID) + '3',ConfigValidateMgt.AddComment(FieldRef));
              StringBld.Append(OpenXMLManagement.CreateCommentVmlShapeXml(ColumnID,3));
            END;
          END;
          ColumnID += 1;
        UNTIL ConfigPackageField.NEXT = 0;
      END;
      RecRef.CLOSE;
    END;

    LOCAL PROCEDURE AddPackageAndTableInformation@28(VAR ConfigPackageTable@1002 : Record 8613;VAR SingleXMLCells@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SingleXmlCells");
    VAR
      SingleXMLCell@1000 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SingleXmlCell";
      RecRef@1003 : RecordRef;
      TableCaptionString@1004 : Text;
    BEGIN
      // Add package name
      SingleXMLCell := WrkShtWriter.AddSingleXmlCell(id);
      WrkShtHelper.AppendElementToOpenXmlElement(SingleXMLCells,SingleXMLCell);
      OpenXMLManagement.AddSingleXMLCellProperties(SingleXMLCell,'A1','/DataList/' +
        (ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") + 'List') + '/' +
        ConfigXMLExchange.GetElementName(ConfigPackageTable.FIELDNAME("Package Code")),1,1);
      WrkShtWriter.SetCellValueText(1,'A',ConfigPackageTable."Package Code",WrkShtWriter.DefaultCellDecorator);

      // Add Table name
      RecRef.OPEN(ConfigPackageTable."Table ID");
      TableCaptionString := RecRef.CAPTION;
      RecRef.CLOSE;
      WrkShtWriter.SetCellValueText(1,'B',TableCaptionString,WrkShtWriter.DefaultCellDecorator);

      // Add Table id
      id += 1;
      SingleXMLCell := WrkShtWriter.AddSingleXmlCell(id);
      WrkShtHelper.AppendElementToOpenXmlElement(SingleXMLCells,SingleXMLCell);

      OpenXMLManagement.AddSingleXMLCellProperties(SingleXMLCell,'C1','/DataList/' +
        (ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") + 'List') + '/' +
        ConfigXMLExchange.GetElementName(ConfigPackageTable.FIELDNAME("Table ID")),1,1);
      WrkShtWriter.SetCellValueText(1,'C',FORMAT(ConfigPackageTable."Table ID"),WrkShtWriter.DefaultCellDecorator);
    END;

    LOCAL PROCEDURE BuildDataSetForPackageTable@12(VAR ConfigPackageTable@1002 : Record 8613) : Text;
    VAR
      TempSetupDataFileName@1000 : Text;
    BEGIN
      TempSetupDataFileName := CreateXMLPackage(FileMgt.ServerTempFileName(''),ConfigPackageTable);
      DataSet := DataSet.DataSet;
      DataSet.ReadXml(TempSetupDataFileName);
      EXIT(TempSetupDataFileName);
    END;

    LOCAL PROCEDURE AddAndInitializeTableDefinitionPart@26(VAR ConfigPackageTable@1003 : Record 8613;DataTableCounter@1005 : Integer;VAR TableDefinitionPart@1011 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.TableDefinitionPart";SkipData@1000 : Boolean);
    VAR
      ConfigPackageField@1002 : Record 8616;
      TableColumns@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumns";
      Table@1007 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Table";
      BooleanValue@1006 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.BooleanValue";
      StringValue@1008 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.StringValue";
      RowsCount@1012 : Integer;
    BEGIN
      TableDefinitionPart := WrkShtWriter.CreateTableDefinitionPart;
      ConfigPackageField.RESET;
      ConfigPackageField.SETRANGE("Package Code",ConfigPackageTable."Package Code");
      ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
      ConfigPackageField.SETRANGE("Include Field",TRUE);

      DataTable := DataSet.Tables.Item(DataTableCounter);

      id += 1;
      IF SkipData THEN
        RowsCount := 1
      ELSE
        RowsCount := DataTable.Rows.Count;
      Table := WrkShtWriter.CreateTable(id);
      Table.TotalsRowShown := BooleanValue.BooleanValue(FALSE);
      Table.Reference :=
        StringValue.StringValue(
          'A3:' + OpenXMLManagement.GetXLColumnID(ConfigPackageField.COUNT) + FORMAT(RowsCount + 3));
      Table.Name := StringValue.StringValue('Table' + FORMAT(id));
      Table.DisplayName := StringValue.StringValue('Table' + FORMAT(id));
      OpenXMLManagement.AppendAutoFilter(Table);
      TableColumns := WrkShtWriter.CreateTableColumns(ConfigPackageField.COUNT);

      CreateTableColumnNames(ConfigPackageField,ConfigPackageTable,TableColumns);
      WrkShtHelper.AppendElementToOpenXmlElement(Table,TableColumns);
      OpenXMLManagement.AppendTableStyleInfo(Table);
      TableDefinitionPart.Table := Table;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetDataTable@41(TableId@1000 : Integer);
    BEGIN
      DataTable := DataSet.Tables.Item(TableId);
    END;

    LOCAL PROCEDURE InitColumnMapping@8(WrkShtReader@1002 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";VAR TempXMLBuffer@1003 : TEMPORARY Record 1235) : Boolean;
    VAR
      Table@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Table";
      TableColumn@1004 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumn";
      Enumerable@1009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerable";
      Enumerator@1008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      XmlColumnProperties@1012 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.XmlColumnProperties";
      TableStartColumnIndex@1015 : Integer;
      Index@1016 : Integer;
    BEGIN
      TempXMLBuffer.DELETEALL;
      IF NOT OpenXMLManagement.FindTableDefinition(WrkShtReader,Table) THEN
        EXIT(FALSE);

      TableStartColumnIndex := GetTableStartColumnIndex(Table);
      Index := 0;
      Enumerable := Table.TableColumns;
      Enumerator := Enumerable.GetEnumerator;
      WHILE Enumerator.MoveNext DO BEGIN
        TableColumn := Enumerator.Current;
        XmlColumnProperties := TableColumn.XmlColumnProperties;
        IF NOT ISNULL(XmlColumnProperties) THEN BEGIN
          // identifies column to xsd mapping.
          IF NOT ISNULL(XmlColumnProperties.XPath) THEN
            InsertXMLBuffer(Index + TableStartColumnIndex,TempXMLBuffer);
        END;
        Index += 1;
      END;

      // RowCount > 2 means sheet has datarow(s)
      EXIT(WrkShtReader.RowCount > 2);
    END;

    LOCAL PROCEDURE GetTableStartColumnIndex@31(Table@1000 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Table") : Integer;
    VAR
      String@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      Index@1002 : Integer;
      Length@1005 : Integer;
      ColumnIndex@1006 : Integer;
    BEGIN
      // <x:table id="5" ... ref="A3:E6" ...>
      // table.Reference = "A3:E6" (A3 - top left table corner, E6 - bottom right corner)
      // we convert "A" - to column index
      String := Table.Reference.Value;
      Length := String.IndexOf(':');
      String := DELCHR(String.Substring(0,Length),'=','0123456789');
      Length := String.Length - 1;
      FOR Index := 0 TO Length DO
        ColumnIndex += (String.Chars(Index) - 64) + Index * 26;
      EXIT(ColumnIndex);
    END;

    LOCAL PROCEDURE InsertXMLBuffer@71(ColumnIndex@1000 : Integer;VAR TempXMLBuffer@1001 : TEMPORARY Record 1235);
    BEGIN
      TempXMLBuffer.INIT;
      TempXMLBuffer."Entry No." := ColumnIndex; // column index in table definition
      TempXMLBuffer."Parent Entry No." := TempXMLBuffer.COUNT; // column index in dataset
      TempXMLBuffer.INSERT;
    END;

    [External]
    PROCEDURE SetFileOnServer@29(NewFileOnServer@1000 : Boolean);
    BEGIN
      FileOnServer := NewFileOnServer;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeExportExcel@72(VAR ConfigPackageTable@1000 : Record 8613);
    BEGIN
    END;

    LOCAL PROCEDURE GetExcelWorksheetName@42(Caption@1000 : Text;TableID@1001 : Text) : Text;
    VAR
      WorksheetNameMaxLen@1002 : Integer;
    BEGIN
      // maximum Worksheet Name length in Excel
      WorksheetNameMaxLen := 31;
      IF STRLEN(Caption) > WorksheetNameMaxLen THEN
        Caption := COPYSTR(TableID + ' ' + Caption,1,WorksheetNameMaxLen);
      EXIT(Caption);
    END;

    LOCAL PROCEDURE IsFileImportedToBLOB@2(VAR TempBlob@1000 : Record 99008535) : Boolean;
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      OnImportExcelFile(TempBlob,IsHandled);
      IF IsHandled THEN
        EXIT(TRUE);
      EXIT(FileMgt.BLOBImportWithFilter(TempBlob,ImportFromExcelMsg,'',FileExtensionFilterTok,ExcelFileExtensionTok) <> '');
    END;

    [Integration]
    LOCAL PROCEDURE OnImportExcelFile@9(VAR TempBlob@1000 : Record 99008535;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

