OBJECT Codeunit 13 Gen. Jnl.-Post Batch
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 232=imd;
    OnRun=VAR
            GenJnlLine@1000 : Record 81;
          BEGIN
            GenJnlLine.COPY(Rec);
            GenJnlLine.SETAUTOCALCFIELDS;
            Code(GenJnlLine);
            Rec := GenJnlLine;
          END;

  }
  CODE
  {
    VAR
      PostingStateMsg@1001 : TextConst '@@@=This is a message for dialog window. Parameters do not require translation.;ENU=Journal Batch Name    #1##########\\Posting @2@@@@@@@@@@@@@\#3#############;NOR=Kladdenavn    #1##########\\Bokfõrer @2@@@@@@@@@@@@@\#3#############;SVE=Journalnamn    #1##########\\Bokfîring @2@@@@@@@@@@@@@\#3#############';
      CheckingLinesMsg@1003 : TextConst 'ENU=Checking lines;NOR=Kontrollerer linjer;SVE=Kontrollerar rader';
      CheckingBalanceMsg@1004 : TextConst 'ENU=Checking balance;NOR=Kontrollerer saldo;SVE=Kontrollerar saldo';
      UpdatingBalLinesMsg@1005 : TextConst 'ENU=Updating bal. lines;NOR=Oppdaterer motkontolinjer;SVE=Uppdaterar saldorader';
      PostingLinesMsg@1006 : TextConst 'ENU=Posting lines;NOR=Bokfõrer linjer;SVE=Bokfîring rader';
      PostingReversLinesMsg@1007 : TextConst 'ENU=Posting revers. lines;NOR=Bokf. revers.linjer;SVE=Bokf. Üterf. rader';
      UpdatingLinesMsg@1036 : TextConst 'ENU=Updating lines;NOR=Oppdaterer linjer;SVE=Uppdaterar rader';
      Text008@1008 : TextConst 'ENU=must be the same on all lines for the same document;NOR=mÜ vëre det samme pÜ alle linjer for samme bilag;SVE=mÜste vara samma pÜ alla rader i ett dokument';
      Text009@1009 : TextConst 'ENU="%1 %2 posted on %3 includes more than one customer or vendor. ";NOR="%1 %2 bokfõrt pÜ %3 gjelder mer enn Çn kunde eller leverandõr. ";SVE="%1 %2 bokfîrd pÜ %3 inkluderar mer Ñn en kund eller leverantîr. "';
      Text010@1010 : TextConst 'ENU=In order for the program to calculate VAT, the entries must be separated by another document number or by an empty line.;NOR=For at programmet skal kunne beregne mva., mÜ postene vëre adskilt av et annet bilagsnummer eller en tom linje.;SVE=Fîr att berÑkna moms, mÜste transaktionerna separeras av ett annat dokumentnr eller av en tom rad.';
      Text012@1012 : TextConst 'ENU="%5 %2 is out of balance by %1. ";NOR="%5 %2 avviker med %1. ";SVE="%5 %2 balanserar inte, differensen Ñr %1. "';
      Text013@1013 : TextConst 'ENU=Please check that %3, %4, %5 and %6 are correct for each line.;NOR=Kontroller at %3, %4, %5 og %6 er riktig for hver linje.;SVE=Kontrollera att %3, %4, %5 och %6 Ñr rÑtt fîr varje rad.';
      Text014@1014 : TextConst 'ENU="The lines in %1 are out of balance by %2. ";NOR="Linjene i %1 balanserer ikke med %2. ";SVE="Raderna i %1 balanserar inte, differensen Ñr %2. "';
      Text015@1015 : TextConst 'ENU=Check that %3 and %4 are correct for each line.;NOR=Kontroller at %3 og %4 er riktig for hver linje.;SVE=Kontrollera varje rad att %3 och %4 Ñr rÑtt.';
      Text016@1016 : TextConst 'ENU="Your reversing entries in %4 %2 are out of balance by %1. ";NOR="Motpostene i %4 %2 balanserer ikke med %1. ";SVE="Dina transaktioner i %4 %2 som ska Üterfîras balanserar inte, differensen Ñr %1. "';
      Text017@1017 : TextConst 'ENU=Please check whether %3 is correct for each line for this %4.;NOR=Kontroller om %3 er riktig for hver linje for denne %4.;SVE=Kontrollera om %3 Ñr rÑtt fîr varje rad fîr detta %4.';
      Text018@1018 : TextConst 'ENU="Your reversing entries for %1 are out of balance by %2. ";NOR="Motpostene for %1 balanserer ikke med %2. ";SVE="Dina transaktioner som ska Üterfîras fîr %1 balanserar inte, differensen Ñr %2. "';
      Text019@1019 : TextConst 'ENU="%3 %1 is out of balance due to the additional reporting currency. ";NOR="%3 %1 balanserer ikke pÜ grunn av tilleggsrapporteringsvalutaen. ";SVE="%3 %1 balanserar inte pÜ grund av den alternativa rapporteringsvalutan. "';
      Text020@1020 : TextConst 'ENU=Please check that %2 is correct for each line.;NOR=Kontroller at %2 er riktig for hver linje.;SVE=Kontrollera fîr varje rad att %2 Ñr korrekt.';
      Text021@1021 : TextConst 'ENU=cannot be specified when using recurring journals.;NOR=kan ikke angis nÜr det brukes gjentakelseskladder.;SVE=kan inte specificeras nÑr Üterkommande journaler anvÑnds.';
      Text022@1022 : TextConst 'ENU=The Balance and Reversing Balance recurring methods can be used only for G/L accounts.;NOR=Gjentakelsesmetodene for saldo og reverseringssaldo kan bare brukes for finanskonti.;SVE=Metoderna balansering och Üterfîring balansering kan endast anvÑndas fîr redovisningskonton.';
      Text023@1023 : TextConst 'ENU=Allocations can only be used with recurring journals.;NOR=Fordelinger kan bare brukes i gjentakelseskladder.;SVE=Fîrdelningar kan endast anvÑndas med Üterkommande journaler.';
      Text024@1024 : TextConst 'ENU=<Month Text>;NOR=<Month Text>;SVE=<Month Text>';
      Text025@1025 : TextConst 'ENU=A maximum of %1 posting number series can be used in each journal.;NOR=Opptil %1 bokfõringsnummerserier kan brukes i hver kladd.;SVE=Maximalt kan %1 nr-serier fîr bokfîring anvÑndas i varje journal.';
      Text026@1026 : TextConst 'ENU="%5 %2 is out of balance by %1 %7. ";NOR="%5 %2 avviker med %1 %7. ";SVE="%5 %2 balanserar inte. Differensen Ñr %1 %7. "';
      Text027@1027 : TextConst 'ENU="The lines in %1 are out of balance by %2 %5. ";NOR="Linjene i %1 avviker med %2 %5. ";SVE="Raderna i %1 balanserar inte, differensen Ñr %2 %5. "';
      Text028@1028 : TextConst 'ENU=The Balance and Reversing Balance recurring methods can be used only with Allocations.;NOR=Gjentakelsesprinsippene Saldo og Saldo med tilbakefõring kan bare brukes med Fordeling.;SVE=Metoderna balansering och Üterfîring balansering kan endast anvÑndas med fîrdelningar.';
      GenJnlTemplate@1029 : Record 80;
      GenJnlBatch@1030 : Record 232;
      GenJnlLine2@1032 : Record 81;
      GenJnlLine3@1033 : Record 81;
      TempGenJnlLine4@1034 : TEMPORARY Record 81;
      GenJnlLine5@1035 : Record 81;
      GLEntry@1037 : Record 17;
      GLReg@1038 : Record 45;
      GLAcc@1039 : Record 15;
      GenJnlAlloc@1042 : Record 221;
      AccountingPeriod@1043 : Record 50;
      NoSeries@1044 : TEMPORARY Record 308;
      GLSetup@1045 : Record 98;
      FAJnlSetup@1046 : Record 5605;
      GenJnlLineTemp@1102601000 : TEMPORARY Record 81;
      GenJnlLine6@11012006 : Record 81;
      JobJnlLine@11012000 : Record 11072008;
      JobJnlLine2@11012005 : Record 11072008;
      ServJnlLine@1210190008 : Record 11012820;
      ServJnlLine2@1210190007 : Record 11012820;
      ServOrderRec@1210190009 : Record 11012823;
      DimValRec@11012002 : Record 349;
      SurchDimValRec@1000000001 : Record 349;
      SurchargeRec@11012001 : Record 11020208;
      ProjRec@1210190012 : Record 11072003;
      ICRec@11012007 : Record 11012057;
      ICEntryRec@11012008 : Record 11012058;
      PlantLedgerEntry@1210190000 : Record 11012572;
      TmpPlantLocChargePO@1100409000 : TEMPORARY Record 11012579;
      GenJnlLineSaveBeforeICRec@1100485003 : Record 81;
      JobJnlPostLine@11012009 : Codeunit 11072003;
      GenJnlCheckLine@1047 : Codeunit 11;
      GenJnlPostLine@1048 : Codeunit 12;
      GenJnlPostPreview@1080 : Codeunit 19;
      NoSeriesMgt@1049 : Codeunit 396;
      NoSeriesMgt2@1050 : ARRAY [10] OF Codeunit 396;
      ICOutboxMgt@1078 : Codeunit 427;
      PostingSetupMgt@1072 : Codeunit 48;
      PostPlantEntry@1210190001 : Codeunit 11012569;
      ServJnlPostLine@1210190006 : Codeunit 11012802;
      LoanJnlPostLine@1100528500 : Codeunit 11012627;
      Window@1052 : Dialog;
      GLRegNo@1053 : Integer;
      StartLineNo@1054 : Integer;
      StartLineNoReverse@1055 : Integer;
      LastDate@1056 : Date;
      LastDocType@1057 : Option;
      LastDocNo@1058 : Code[20];
      LastPostedDocNo@1059 : Code[20];
      CurrentBalance@1060 : Decimal;
      CurrentBalanceReverse@1061 : Decimal;
      Day@1062 : Integer;
      Week@1063 : Integer;
      Month@1064 : Integer;
      MonthText@1065 : Text[30];
      NoOfRecords@1066 : Integer;
      NoOfReversingRecords@1067 : Integer;
      LineCount@1068 : Integer;
      NoOfPostingNoSeries@1069 : Integer;
      PostingNoSeriesNo@1070 : Integer;
      DocCorrection@1071 : Boolean;
      VATEntryCreated@1073 : Boolean;
      LastFAAddCurrExchRate@1074 : Decimal;
      LastCurrencyCode@1075 : Code[10];
      CurrencyBalance@1076 : Decimal;
      Text029@1041 : TextConst '@@@="%1 = Document Type;%2 = Document No.;%3=Posting Date";ENU=%1 %2 posted on %3 includes more than one customer, vendor or IC Partner.;NOR=%1 %2 bokfõrt %3 inkluderer flere kunder, leverandõrer eller KI-partnere.;SVE=%1 %2 bokade den %3 omfattar flera kunder, leverantîrer eller koncerninterna partner.';
      Text030@1011 : TextConst 'ENU=You cannot enter G/L Account or Bank Account in both %1 and %2.;NOR=Du kan ikke angi finanskonto eller bankkonto i bÜde %1 og %2.;SVE=Du kan inte ange redovisningskonto eller bankkonto i bÜde %1 och %2.';
      Text031@1040 : TextConst 'ENU=Line No. %1 does not contain a G/L Account or Bank Account. When the %2 field contains an account number, either the %3 field or the %4 field must contain a G/L Account or Bank Account.;NOR=Linjenummer %1 inneholder ikke en finanskonto eller bankkonto. NÜr feltet %2 inneholder et kontonummer, mÜ feltet %3 eller feltet %4 inneholde en finanskonto eller bankkonto.;SVE=Radnr %1 innehÜller inte ett redovisningskonto eller bankkonto. NÑr fÑltet %2 innehÜller ett kontonummer mÜste fÑltet %3 eller fÑltet %4 innehÜlla ett redovisningskonto eller bankkonto.';
      RefPostingState@1002 : 'Checking lines,Checking balance,Updating bal. lines,Posting Lines,Posting revers. lines,Updating lines';
      PreviewMode@1051 : Boolean;
      SkippedLineMsg@1092 : TextConst 'ENU=One or more lines has not been posted because the amount is zero.;NOR=ên eller flere linjer er ikke bokfõrt fordi belõpet er null.;SVE=En eller flera rader har inte bokfîrts eftersom beloppet Ñr noll.';
      ConfirmPostingAfterCurrentPeriodQst@1079 : TextConst 'ENU=The posting date of one or more journal lines is after the current calendar date. Do you want to continue?;NOR=Bokfõringsdatoen for Çn eller flere kladdelinjer erˇetter den gjeldende kalenderdatoen. Vil du fortsette?;SVE=Bokfîringsdatumet fîr en eller flera journalrader infaller efter det aktuella rÑkenskapsÜret. Vill du fortsÑtta?';
      SuppressCommit@1031 : Boolean;
      Ok@11012055 : Boolean;
      ReadGLSetup@1100485000 : Boolean;
      StartLineNo2@1210190013 : Integer;
      "-EVRY-"@1100285002 : Integer;
      FA@1100285001 : Record 5600;
      FAMain@1100285000 : Record 5600;
      Text100@1100285005 : TextConst 'ENU=%1 is not within your range of allowed posting dates;NOR=%1 er ikke i ditt tillatte intervall for bokfõringsdatoer;SVE=%1 Ñr inte i det tillÜtna intervallet fîr bokfîringsdatum';
      "*ITERO*"@1100285003 : Integer;
      Currency@1100285004 : Record 4;
      gReplacePostingDatePeriodic@1100285300 : Boolean;

    LOCAL PROCEDURE Code@7(VAR GenJnlLine@1000 : Record 81);
    VAR
      TempMarkedGenJnlLine@1001 : TEMPORARY Record 81;
      IntegrationService@1004 : Codeunit 5151;
      IntegrationManagement@1003 : Codeunit 5150;
      RaiseError@1002 : Boolean;
      lvNoSeriesRec@1210190001 : Record 308;
      DimMgt@1100285001 : Codeunit 408;
      prevDimSetID@1100285000 : Integer;
    BEGIN
      OnBeforeCode(GenJnlLine,PreviewMode,SuppressCommit);

      // let's force Api Enabled check.
      // this will disable integration related subscribers in case of disabled Api setup
      BINDSUBSCRIPTION(IntegrationService);
      IntegrationManagement.ResetIntegrationActivated;

      WITH GenJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");

        LOCKTABLE;
        GenJnlAlloc.LOCKTABLE;

        GenJnlTemplate.GET("Journal Template Name");
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");

        OnBeforeRaiseExceedLengthError(GenJnlBatch,RaiseError);

        IF GenJnlTemplate.Recurring THEN BEGIN
          TempMarkedGenJnlLine.COPY(GenJnlLine);
          CheckGenJnlLineDates(TempMarkedGenJnlLine,GenJnlLine);
          TempMarkedGenJnlLine.SETRANGE("Posting Date",0D,WORKDATE);
          GLSetup.GET;
        END;

        IF GenJnlTemplate.Recurring THEN BEGIN
          ProcessLines(TempMarkedGenJnlLine);
          COPY(TempMarkedGenJnlLine);
        END ELSE
          ProcessLines(GenJnlLine);
      END;

      OnAfterCode(GenJnlLine,PreviewMode);
    END;

    LOCAL PROCEDURE ProcessLines@43(VAR GenJnlLine@1000 : Record 81);
    VAR
      TempGenJnlLine@1015 : TEMPORARY Record 81;
      GenJnlLineVATInfoSource@1014 : Record 81;
      UpdateAnalysisView@1010 : Codeunit 410;
      ICOutboxExport@1013 : Codeunit 431;
      ICLastDocNo@1009 : Code[20];
      CurrentICPartner@1005 : Code[20];
      LastLineNo@1008 : Integer;
      LastICTransactionNo@1012 : Integer;
      ICTransactionNo@1007 : Integer;
      ICLastDocType@1004 : Integer;
      ICLastDate@1006 : Date;
      VATInfoSourceLineIsInserted@1003 : Boolean;
      SkippedLine@1002 : Boolean;
      PostingAfterCurrentFiscalYearConfirmed@1001 : Boolean;
      DimMgt@1100583000 : Codeunit 408;
      prevDimSetID@1100583001 : Integer;
    BEGIN
      OnBeforeProcessLines(GenJnlLine,PreviewMode,SuppressCommit);

      WITH GenJnlLine DO BEGIN
        //IF NOT FIND('=><') THEN BEGIN //**4PS.o
        IF NOT SelectFirstValidGenJnlLine(GenJnlLine,'=><') THEN BEGIN //**4PS.n
          "Line No." := 0;
          IF PreviewMode THEN
            GenJnlPostPreview.ThrowError;
          IF NOT SuppressCommit THEN
            COMMIT;
          EXIT;
        END;

        Window.OPEN(PostingStateMsg);
        Window.UPDATE(1,"Journal Batch Name");

        //>>150121
        DimMgt.SetCompany("Receiving Company"); //**4PS.n
        DimMgt.SetDimensionValueChainsBool(TRUE);
        IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
          prevDimSetID := "Dimension Set ID";
          DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
          IF "Dimension Set ID" <> prevDimSetID THEN
            MODIFY(FALSE);
        END;
        IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
          prevDimSetID := "Dimension Set ID";
          DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");
          IF "Dimension Set ID" <> prevDimSetID THEN
            MODIFY(FALSE);
        END;
        //<<150121

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        NoOfRecords := COUNT;
        GenJnlCheckLine.SetBatchMode(TRUE);
        REPEAT
          LineCount := LineCount + 1;
          UpdateDialog(RefPostingState::"Checking lines",LineCount,NoOfRecords);
          CheckLine(GenJnlLine,PostingAfterCurrentFiscalYearConfirmed);
          TempGenJnlLine := GenJnlLine5;
          TempGenJnlLine.INSERT;
        //**4PS.so
        //  IF NEXT = 0 THEN
        //    FINDFIRST;
        //UNTIL "Line No." = StartLineNo;
        //**4PS.eo
        UNTIL NOT SelectNextValidGenJnlLine(GenJnlLine);  //**4PS.n

        IF GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany THEN
          CheckICDocument(TempGenJnlLine);

        ProcessBalanceOfLines(GenJnlLine,GenJnlLineVATInfoSource,VATInfoSourceLineIsInserted,LastLineNo,CurrentICPartner);

        // Find next register no.
        GLEntry.LOCKTABLE;
        IF GLEntry.FINDLAST THEN;
        FindNextGLRegisterNo;

        // Post lines
        LineCount := 0;
        LastDocNo := '';
        LastPostedDocNo := '';
        LastICTransactionNo := 0;
        TempGenJnlLine4.DELETEALL;
        TmpPlantLocChargePO.DELETEALL;  //**4PS.n (C001519)
        NoOfReversingRecords := 0;
        //FINDSET(TRUE,FALSE); //**4PS.o
        SelectFirstValidGenJnlLine(GenJnlLine,'-'); //**4PS.n
        REPEAT
          //**4PS.sn
          DeleteLinkedInteresLinesICAcc(GenJnlLine);
          "Memo Posting" := TRUE;
          //**4PS.en

          ProcessICLines(CurrentICPartner,ICTransactionNo,ICLastDocNo,ICLastDate,ICLastDocType,GenJnlLine,TempGenJnlLine);
          ProcessICTransaction(LastICTransactionNo,ICTransactionNo);

          GenJnlLine3 := GenJnlLine;
          IF NOT PostGenJournalLine(GenJnlLine3,CurrentICPartner,ICTransactionNo) THEN
            SkippedLine := TRUE;
      //UNTIL NEXT = 0; //**4PS.o
        UNTIL NOT SelectNextValidGenJnlLine(GenJnlLine); //**4PS.n

        IF LastICTransactionNo > 0 THEN
          ICOutboxExport.ProcessAutoSendOutboxTransactionNo(ICTransactionNo);

        // Post reversing lines
        PostReversingLines(TempGenJnlLine4);

        OnProcessLinesOnAfterPostGenJnlLines(GenJnlLine,GLReg,GLRegNo);

        PostPlantOrderChargePurch();  //**4PS.n

        // Copy register no. and current journal batch name to general journal
        IF NOT GLReg.FINDLAST OR (GLReg."No." <> GLRegNo) THEN
          GLRegNo := 0;

        INIT;
        "Line No." := GLRegNo;

        OnProcessLinesOnAfterAssignGLNegNo(GenJnlLine,GLReg,GLRegNo);

        IF PreviewMode THEN BEGIN
          OnBeforeThrowPreviewError(GenJnlLine,GLRegNo);
          GenJnlPostPreview.ThrowError;
        END;

        // Update/delete lines
        IF GLRegNo <> 0 THEN
          UpdateAndDeleteLines(GenJnlLine);

        IF GenJnlBatch."No. Series" <> '' THEN
          NoSeriesMgt.SaveNoSeries;
        IF NoSeries.FINDSET THEN
          REPEAT
            EVALUATE(PostingNoSeriesNo,NoSeries.Description);
            NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
          UNTIL NoSeries.NEXT = 0;

        OnBeforeCommit(GLRegNo,GenJnlLine,GenJnlPostLine);

        IF NOT SuppressCommit THEN
          COMMIT;
        CLEAR(GenJnlCheckLine);
        CLEAR(GenJnlPostLine);
        CLEAR(LoanJnlPostLine); //**4PS.n
        CLEARMARKS;
      END;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      GenJnlBatch.OnMoveGenJournalBatch(GLReg.RECORDID);
      IF NOT SuppressCommit THEN
        COMMIT;

      IF SkippedLine AND GUIALLOWED THEN
        MESSAGE(SkippedLineMsg);

      OnAfterProcessLines(TempGenJnlLine);
    END;

    LOCAL PROCEDURE ProcessBalanceOfLines@42(VAR GenJnlLine@1000 : Record 81;VAR GenJnlLineVATInfoSource@1003 : Record 81;VAR VATInfoSourceLineIsInserted@1002 : Boolean;VAR LastLineNo@1004 : Integer;CurrentICPartner@1001 : Code[20]);
    VAR
      VATPostingSetup@1006 : Record 325;
      BalVATPostingSetup@1005 : Record 325;
      ErrorMessage@1007 : Text;
      ForceCheckBalance@1008 : Boolean;
      IsProcessingKeySet@1009 : Boolean;
    BEGIN
      IsProcessingKeySet := FALSE;
      OnBeforeProcessBalanceOfLines(GenJnlLine,GenJnlBatch,GenJnlTemplate,IsProcessingKeySet);
      IF NOT IsProcessingKeySet THEN
        IF (GenJnlBatch."No. Series" = '') AND (GenJnlBatch."Posting No. Series" = '') AND GenJnlTemplate."Force Doc. Balance" THEN
          GenJnlLine.SETCURRENTKEY("Document No.");

      LineCount := 0;
      LastDate := 0D;
      LastDocType := 0;
      LastDocNo := '';
      LastFAAddCurrExchRate := 0;
      GenJnlLineTemp.RESET;
      GenJnlLineTemp.DELETEALL;
      VATEntryCreated := FALSE;
      CurrentBalance := 0;
      CurrentBalanceReverse := 0;
      CurrencyBalance := 0;

      WITH GenJnlLine DO BEGIN
        //FINDSET(TRUE,FALSE); //**4PS.o

        SelectFirstValidGenJnlLine(GenJnlLine,'-'); //**4PS.n

        LastCurrencyCode := "Currency Code";

        REPEAT
          LineCount := LineCount + 1;
          UpdateDialog(RefPostingState::"Checking balance",LineCount,NoOfRecords);

          IF NOT EmptyLine THEN BEGIN
            IF NOT PreviewMode THEN
              CheckDocNoBasedOnNoSeries(LastDocNo,GenJnlBatch."No. Series",NoSeriesMgt);
            IF "Posting No. Series" <> '' THEN
              TESTFIELD("Posting No. Series",GenJnlBatch."Posting No. Series");
            CheckCorrection(GenJnlLine);
          END;
          OnBeforeIfCheckBalance(GenJnlTemplate,GenJnlLine,LastDocType,LastDocNo,LastDate,ForceCheckBalance,SuppressCommit);
          IF ForceCheckBalance OR ("Posting Date" <> LastDate) OR GenJnlTemplate."Force Doc. Balance" AND
             (("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo))
          THEN BEGIN
            CheckBalance(GenJnlLine);
            CurrencyBalance := 0;
            LastCurrencyCode := "Currency Code";
            GenJnlLineTemp.RESET;
            GenJnlLineTemp.DELETEALL;
          END;

          IF Amount <> 0 THEN BEGIN
            IF LastFAAddCurrExchRate <> "FA Add.-Currency Factor" THEN
              CheckAddExchRateBalance(GenJnlLine);
            IF (CurrentBalance = 0) AND (CurrentICPartner = '') THEN BEGIN
              GenJnlLineTemp.RESET;
              GenJnlLineTemp.DELETEALL;
              IF VATEntryCreated AND VATInfoSourceLineIsInserted THEN
                UpdateGenJnlLineWithVATInfo(GenJnlLine,GenJnlLineVATInfoSource,StartLineNo,LastLineNo);
              VATEntryCreated := FALSE;
              VATInfoSourceLineIsInserted := FALSE;
              StartLineNo := "Line No.";
            END;
            IF CurrentBalanceReverse = 0 THEN
              StartLineNoReverse := "Line No.";
            UpdateLineBalance;
            OnAfterUpdateLineBalance(GenJnlLine);
            CurrentBalance := CurrentBalance + "Balance (LCY)";
            IF "Recurring Method" >= "Recurring Method"::"RF Reversing Fixed" THEN
              CurrentBalanceReverse := CurrentBalanceReverse + "Balance (LCY)";

            UpdateCurrencyBalanceForRecurringLine(GenJnlLine);
          END;

          LastDate := "Posting Date";
          LastDocType := "Document Type";
          IF NOT EmptyLine THEN
            LastDocNo := "Document No.";
          LastFAAddCurrExchRate := "FA Add.-Currency Factor";
          IF GenJnlTemplate."Force Doc. Balance" THEN BEGIN
            IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
              CLEAR(VATPostingSetup);
            IF NOT BalVATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") THEN
              CLEAR(BalVATPostingSetup);
            VATEntryCreated :=
              VATEntryCreated OR
              (("Account Type" = "Account Type"::"G/L Account") AND ("Account No." <> '') AND
               ("Gen. Posting Type" IN ["Gen. Posting Type"::Purchase,"Gen. Posting Type"::Sale]) AND
               (VATPostingSetup."VAT %" <> 0)) OR
              (("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '') AND
               ("Bal. Gen. Posting Type" IN ["Bal. Gen. Posting Type"::Purchase,"Bal. Gen. Posting Type"::Sale]) AND
               (BalVATPostingSetup."VAT %" <> 0));
            IF GenJnlLineTemp.IsCustVendICAdded(GenJnlLine) THEN BEGIN
              GenJnlLineVATInfoSource := GenJnlLine;
              VATInfoSourceLineIsInserted := TRUE;
            END;
            IF (GenJnlLineTemp.COUNT > 1) AND VATEntryCreated THEN BEGIN
              ErrorMessage := Text009 + Text010;
              ERROR(ErrorMessage,"Document Type","Document No.","Posting Date");
            END;
            IF (GenJnlLineTemp.COUNT > 1) AND (CurrentICPartner <> '') AND
               (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany)
            THEN
              ERROR(
                Text029,
                "Document Type","Document No.","Posting Date");
            LastLineNo := "Line No.";
          END;
          HandleICApplication(GenJnlLine); //**4PS.n
        //UNTIL NEXT = 0;                       //**4PS.o
        UNTIL NOT SelectNextValidGenJnlLine(GenJnlLine);  //**4PS.n
        CheckBalance(GenJnlLine);
        CopyFields(GenJnlLine);
        IF VATEntryCreated AND VATInfoSourceLineIsInserted THEN
          UpdateGenJnlLineWithVATInfo(GenJnlLine,GenJnlLineVATInfoSource,StartLineNo,LastLineNo);
      END;

      OnAfterProcessBalanceOfLines(GenJnlLine);
    END;

    LOCAL PROCEDURE ProcessICLines@49(VAR CurrentICPartner@1001 : Code[20];VAR ICTransactionNo@1002 : Integer;VAR ICLastDocNo@1006 : Code[20];VAR ICLastDate@1005 : Date;VAR ICLastDocType@1003 : Integer;VAR GenJnlLine@1000 : Record 81;VAR TempGenJnlLine@1004 : TEMPORARY Record 81);
    VAR
      HandledICInboxTrans@1007 : Record 420;
    BEGIN
      WITH GenJnlLine DO
        IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND NOT EmptyLine AND
           (("Posting Date" <> ICLastDate) OR ("Document Type" <> ICLastDocType) OR ("Document No." <> ICLastDocNo))
        THEN BEGIN
          CurrentICPartner := '';
          ICLastDate := "Posting Date";
          ICLastDocType := "Document Type";
          ICLastDocNo := "Document No.";
          TempGenJnlLine.RESET;
          TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
          TempGenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
          TempGenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
          TempGenJnlLine.SETRANGE("Posting Date","Posting Date");
          TempGenJnlLine.SETRANGE("Document No.","Document No.");
          TempGenJnlLine.SETFILTER("IC Partner Code",'<>%1','');
          IF TempGenJnlLine.FINDFIRST AND (TempGenJnlLine."IC Partner Code" <> '') THEN BEGIN
            CurrentICPartner := TempGenJnlLine."IC Partner Code";
            IF TempGenJnlLine."IC Direction" = TempGenJnlLine."IC Direction"::Outgoing THEN
              ICTransactionNo := ICOutboxMgt.CreateOutboxJnlTransaction(TempGenJnlLine,FALSE)
            ELSE
              IF HandledICInboxTrans.GET(
                   TempGenJnlLine."IC Partner Transaction No.",TempGenJnlLine."IC Partner Code",
                   HandledICInboxTrans."Transaction Source"::"Created by Partner",TempGenJnlLine."Document Type")
              THEN BEGIN
                HandledICInboxTrans.LOCKTABLE;
                HandledICInboxTrans.Status := HandledICInboxTrans.Status::Posted;
                HandledICInboxTrans.MODIFY;
              END
          END
        END;
    END;

    LOCAL PROCEDURE ProcessICTransaction@60(VAR LastICTransactionNo@1000 : Integer;ICTransactionNo@1001 : Integer);
    VAR
      ICOutboxExport@1002 : Codeunit 431;
    BEGIN
      IF LastICTransactionNo = 0 THEN
        LastICTransactionNo := ICTransactionNo
      ELSE
        IF LastICTransactionNo <> ICTransactionNo THEN BEGIN
          ICOutboxExport.ProcessAutoSendOutboxTransactionNo(LastICTransactionNo);
          LastICTransactionNo := ICTransactionNo;
        END;
    END;

    LOCAL PROCEDURE CheckBalance@8(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      OnBeforeCheckBalance(
        GenJnlTemplate,GenJnlLine,CurrentBalance,CurrentBalanceReverse,CurrencyBalance,
        StartLineNo,StartLineNoReverse,LastDocType,LastDocNo,LastDate,LastCurrencyCode,SuppressCommit);

      WITH GenJnlLine DO BEGIN
        IF CurrentBalance <> 0 THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNo);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text012 +
              Text013,
              CurrentBalance,LastDocNo,FIELDCAPTION("Posting Date"),FIELDCAPTION("Document Type"),
              FIELDCAPTION("Document No."),FIELDCAPTION(Amount));
          ERROR(
            Text014 +
            Text015,
            LastDate,CurrentBalance,FIELDCAPTION("Posting Date"),FIELDCAPTION(Amount));
        END;
        IF CurrentBalanceReverse <> 0 THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNoReverse);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text016 +
              Text017,
              CurrentBalanceReverse,LastDocNo,FIELDCAPTION("Recurring Method"),FIELDCAPTION("Document No."));
          ERROR(
            Text018 +
            Text017,
            LastDate,CurrentBalanceReverse,FIELDCAPTION("Recurring Method"),FIELDCAPTION("Posting Date"));
        END;
        IF (LastCurrencyCode <> '') AND (CurrencyBalance <> 0) THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNo);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text026 +
              Text013,
              CurrencyBalance,LastDocNo,FIELDCAPTION("Posting Date"),FIELDCAPTION("Document Type"),
              FIELDCAPTION("Document No."),FIELDCAPTION(Amount),
              LastCurrencyCode);
          ERROR(
            Text027 +
            Text015,
            LastDate,CurrencyBalance,FIELDCAPTION("Posting Date"),FIELDCAPTION(Amount),LastCurrencyCode);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckCorrection@73(GenJournalLine@1000 : Record 81);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckCorrection(GenJournalLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH GenJournalLine DO
        IF ("Posting Date" <> LastDate) OR ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo) THEN BEGIN
          IF Correction THEN
            GenJnlTemplate.TESTFIELD("Force Doc. Balance",TRUE);
          DocCorrection := Correction;
        END ELSE
          IF Correction <> DocCorrection THEN
            FIELDERROR(Correction,Text008);
    END;

    LOCAL PROCEDURE CheckAddExchRateBalance@9(GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF CurrentBalance <> 0 THEN
          ERROR(
            Text019 +
            Text020,
            LastDocNo,FIELDCAPTION("FA Add.-Currency Factor"),FIELDCAPTION("Document No."));
    END;

    LOCAL PROCEDURE CheckRecurringLine@1(VAR GenJnlLine2@1000 : Record 81);
    VAR
      DummyDateFormula@1001 : DateFormula;
    BEGIN
      WITH GenJnlLine2 DO
        IF "Account No." <> '' THEN
          IF GenJnlTemplate.Recurring THEN BEGIN
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            IF "Bal. Account No." <> '' THEN
              FIELDERROR("Bal. Account No.",Text021);
            CASE "Recurring Method" OF
              "Recurring Method"::"V  Variable","Recurring Method"::"RV Reversing Variable",
              "Recurring Method"::"F  Fixed","Recurring Method"::"RF Reversing Fixed":
                IF NOT "Allow Zero-Amount Posting" THEN
                  TESTFIELD(Amount);
              "Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance":
                TESTFIELD(Amount,0);
            END;
          END ELSE BEGIN
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency",DummyDateFormula);
          END;
    END;

    LOCAL PROCEDURE UpdateRecurringAmt@2(VAR GenJnlLine2@1000 : Record 81) : Boolean;
    BEGIN
      WITH GenJnlLine2 DO
        IF ("Account No." <> '') AND
           ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"])
        THEN BEGIN
          GLEntry.LOCKTABLE;
          IF "Account Type" = "Account Type"::"G/L Account" THEN BEGIN
            GLAcc."No." := "Account No.";
            GLAcc.SETRANGE("Date Filter",0D,"Posting Date");
            IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
              "Source Currency Code" := GLSetup."Additional Reporting Currency";
              GLAcc.CALCFIELDS("Additional-Currency Net Change");
              "Source Currency Amount" := -GLAcc."Additional-Currency Net Change";
              GenJnlAlloc.UpdateAllocationsAddCurr(GenJnlLine2,"Source Currency Amount");
            END;
            GLAcc.CALCFIELDS("Net Change");
            VALIDATE(Amount,-GLAcc."Net Change");
            EXIT(TRUE);
          END;
          ERROR(Text022);
        END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckAllocations@3(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO
        IF "Account No." <> '' THEN BEGIN
          IF "Recurring Method" IN
             ["Recurring Method"::"B  Balance",
              "Recurring Method"::"RB Reversing Balance"]
          THEN BEGIN
            GenJnlAlloc.RESET;
            GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
            GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
            IF GenJnlAlloc.ISEMPTY THEN
              ERROR(
                Text028);
          END;

          GenJnlAlloc.RESET;
          GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
          GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
          GenJnlAlloc.SETFILTER(Amount,'<>0');
          IF NOT GenJnlAlloc.ISEMPTY THEN BEGIN
            IF NOT GenJnlTemplate.Recurring THEN
              ERROR(Text023);
            GenJnlAlloc.SETRANGE("Account No.",'');
            IF GenJnlAlloc.FINDFIRST THEN
              GenJnlAlloc.TESTFIELD("Account No.");
          END;
        END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@4(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO
        IF ("Account No." <> '') AND ("Recurring Method" <> 0) THEN BEGIN
          Day := DATE2DMY("Posting Date",1);
          Week := DATE2DWY("Posting Date",2);
          Month := DATE2DMY("Posting Date",2);
          MonthText := FORMAT("Posting Date",0,Text024);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Posting Date");
          IF NOT AccountingPeriod.FINDLAST THEN
            AccountingPeriod.Name := '';
          "Document No." :=
            DELCHR(
              PADSTR(
                STRSUBSTNO("Document No.",Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN("Document No.")),
              '>');
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
          OnAfterMakeRecurringTexts(GenJnlLine2,AccountingPeriod,Day,Week,Month,MonthText);
        END;
    END;

    LOCAL PROCEDURE PostAllocations@5(VAR AllocateGenJnlLine@1000 : Record 81;Reversing@1001 : Boolean);
    VAR
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePostAllocations(AllocateGenJnlLine,Reversing,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH AllocateGenJnlLine DO
        IF "Account No." <> '' THEN BEGIN
          GenJnlAlloc.RESET;
          GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
          GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
          GenJnlAlloc.SETFILTER("Account No.",'<>%1','');
          IF GenJnlAlloc.FINDSET(TRUE,FALSE) THEN BEGIN
            GenJnlLine2.INIT;
            GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
            GenJnlLine2."Posting Date" := "Posting Date";
            GenJnlLine2."Document Type" := "Document Type";
            GenJnlLine2."Document No." := "Document No.";
            GenJnlLine2.Description := Description;
            GenJnlLine2."Description 2" := "Description 2";  //**4PS01.n
            GenJnlLine2."Source Code" := "Source Code";
            GenJnlLine2."Journal Batch Name" := "Journal Batch Name";
            GenJnlLine2."Line No." := "Line No.";
            GenJnlLine2."Reason Code" := "Reason Code";
            GenJnlLine2.Correction := Correction;
            GenJnlLine2."Recurring Method" := "Recurring Method";
            IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor] THEN BEGIN
              GenJnlLine2."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
              GenJnlLine2."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
            END;
            OnPostAllocationsOnBeforeCopyFromGenJnlAlloc(GenJnlLine2,AllocateGenJnlLine,Reversing);
            REPEAT
              GenJnlLine2.CopyFromGenJnlAllocation(GenJnlAlloc);
              GenJnlLine2."Shortcut Dimension 1 Code" := GenJnlAlloc."Shortcut Dimension 1 Code";
              GenJnlLine2."Shortcut Dimension 2 Code" := GenJnlAlloc."Shortcut Dimension 2 Code";
              GenJnlLine2."Dimension Set ID" := GenJnlAlloc."Dimension Set ID";
              GenJnlLine2."Allow Zero-Amount Posting" := TRUE;
              PrepareGenJnlLineAddCurr(GenJnlLine2);
              IF NOT Reversing THEN BEGIN
                OnPostAllocationsOnBeforePostNotReversingLine(GenJnlLine2,GenJnlPostLine);
                GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);   //RFC135
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                IF "Recurring Method" IN
                   ["Recurring Method"::"V  Variable","Recurring Method"::"B  Balance"]
                THEN BEGIN
                  GenJnlAlloc.Amount := 0;
                  GenJnlAlloc."Additional-Currency Amount" := 0;
                  GenJnlAlloc.MODIFY;
                END;
              END ELSE BEGIN
                MultiplyAmounts(GenJnlLine2,-1);
                GenJnlLine2."Reversing Entry" := TRUE;
                OnPostAllocationsOnBeforePostReversingLine(GenJnlLine2,GenJnlPostLine);
                GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                IF "Recurring Method" IN
                   ["Recurring Method"::"RV Reversing Variable",
                    "Recurring Method"::"RB Reversing Balance"]
                THEN BEGIN
                  GenJnlAlloc.Amount := 0;
                  GenJnlAlloc."Additional-Currency Amount" := 0;
                  GenJnlAlloc.MODIFY;
                END;
              END;
            UNTIL GenJnlAlloc.NEXT = 0;
          END;
        END;

      OnAfterPostAllocations(AllocateGenJnlLine,Reversing,SuppressCommit);
    END;

    LOCAL PROCEDURE MultiplyAmounts@6(VAR GenJnlLine2@1000 : Record 81;Factor@1001 : Decimal);
    BEGIN
      WITH GenJnlLine2 DO
        IF "Account No." <> '' THEN BEGIN
          Amount := Amount * Factor;
          "Debit Amount" := "Debit Amount" * Factor;
          "Credit Amount" := "Credit Amount" * Factor;
          "Amount (LCY)" := "Amount (LCY)" * Factor;
          "Balance (LCY)" := "Balance (LCY)" * Factor;
          "Sales/Purch. (LCY)" := "Sales/Purch. (LCY)" * Factor;
          "Profit (LCY)" := "Profit (LCY)" * Factor;
          "Inv. Discount (LCY)" := "Inv. Discount (LCY)" * Factor;
          Quantity := Quantity * Factor;
          "VAT Amount" := "VAT Amount" * Factor;
          "VAT Base Amount" := "VAT Base Amount" * Factor;
          "VAT Amount (LCY)" := "VAT Amount (LCY)" * Factor;
          "VAT Base Amount (LCY)" := "VAT Base Amount (LCY)" * Factor;
          "Source Currency Amount" := "Source Currency Amount" * Factor;
          IF "Job No." <> '' THEN BEGIN
            "Job Quantity" := "Job Quantity" * Factor;
            "Job Total Cost (LCY)" := "Job Total Cost (LCY)" * Factor;
            "Job Total Price (LCY)" := "Job Total Price (LCY)" * Factor;
            "Job Line Amount (LCY)" := "Job Line Amount (LCY)" * Factor;
            "Job Total Cost" := "Job Total Cost" * Factor;
            "Job Total Price" := "Job Total Price" * Factor;
            "Job Line Amount" := "Job Line Amount" * Factor;
            "Job Line Discount Amount" := "Job Line Discount Amount" * Factor;
            "Job Line Disc. Amount (LCY)" := "Job Line Disc. Amount (LCY)" * Factor;
          END;
        END;

      OnAfterMultiplyAmounts(GenJnlLine2,Factor,SuppressCommit);
    END;

    LOCAL PROCEDURE CheckDocumentNo@11(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO
        IF "Posting No. Series" = '' THEN
          "Posting No. Series" := GenJnlBatch."No. Series"
        ELSE
          IF NOT EmptyLine THEN
            IF "Document No." = LastDocNo THEN
              "Document No." := LastPostedDocNo
            ELSE BEGIN
              IF NOT NoSeries.GET("Posting No. Series") THEN BEGIN
                NoOfPostingNoSeries := NoOfPostingNoSeries + 1;
                IF NoOfPostingNoSeries > ARRAYLEN(NoSeriesMgt2) THEN
                  ERROR(
                    Text025,
                    ARRAYLEN(NoSeriesMgt2));
                NoSeries.Code := "Posting No. Series";
                NoSeries.Description := FORMAT(NoOfPostingNoSeries);
                NoSeries.INSERT;
              END;
              LastDocNo := "Document No.";
              EVALUATE(PostingNoSeriesNo,NoSeries.Description);
              "Document No." :=
                NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",TRUE);
              LastPostedDocNo := "Document No.";
            END;
    END;

    LOCAL PROCEDURE PrepareGenJnlLineAddCurr@10(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      IF (GLSetup."Additional Reporting Currency" <> '') AND
         (GenJnlLine."Recurring Method" IN
          [GenJnlLine."Recurring Method"::"B  Balance",
           GenJnlLine."Recurring Method"::"RB Reversing Balance"])
      THEN BEGIN
        GenJnlLine."Source Currency Code" := GLSetup."Additional Reporting Currency";
        IF (GenJnlLine.Amount = 0) AND
           (GenJnlLine."Source Currency Amount" <> 0)
        THEN BEGIN
          GenJnlLine."Additional-Currency Posting" :=
            GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
          GenJnlLine.Amount := GenJnlLine."Source Currency Amount";
          GenJnlLine."Source Currency Amount" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyFields@12(VAR GenJnlLine@1004 : Record 81);
    VAR
      GenJnlLine4@1000 : Record 81;
      GenJnlLine6@1001 : Record 81;
      TempGenJnlLine@1007 : TEMPORARY Record 81;
      JnlLineTotalQty@1002 : Integer;
      RefPostingSubState@1003 : 'Check account,Check bal. account,Update lines';
    BEGIN
      GenJnlLine6.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      GenJnlLine4.FILTERGROUP(2);
      GenJnlLine4.COPY(GenJnlLine);
      GenJnlLine4.FILTERGROUP(0);
      GenJnlLine6.FILTERGROUP(2);
      GenJnlLine6.COPY(GenJnlLine);
      GenJnlLine6.FILTERGROUP(0);
      GenJnlLine6.SETFILTER(
        "Account Type",'<>%1&<>%2',GenJnlLine6."Account Type"::Customer,GenJnlLine6."Account Type"::Vendor);
      GenJnlLine6.SETFILTER(
        "Bal. Account Type",'<>%1&<>%2',GenJnlLine6."Bal. Account Type"::Customer,GenJnlLine6."Bal. Account Type"::Vendor);
      GenJnlLine4.SETFILTER(
        "Account Type",'%1|%2',GenJnlLine4."Account Type"::Customer,GenJnlLine4."Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Bal. Account No.",'');
      CheckAndCopyBalancingData(GenJnlLine4,GenJnlLine6,TempGenJnlLine,FALSE);

      GenJnlLine4.SETRANGE("Account Type");
      GenJnlLine4.SETRANGE("Bal. Account No.");
      GenJnlLine4.SETFILTER(
        "Bal. Account Type",'%1|%2',GenJnlLine4."Bal. Account Type"::Customer,GenJnlLine4."Bal. Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Account No.",'');
      CheckAndCopyBalancingData(GenJnlLine4,GenJnlLine6,TempGenJnlLine,TRUE);

      JnlLineTotalQty := TempGenJnlLine.COUNT;
      LineCount := 0;
      IF TempGenJnlLine.FINDSET THEN
        REPEAT
          LineCount := LineCount + 1;
          UpdateDialogUpdateBalLines(RefPostingSubState::"Update lines",LineCount,JnlLineTotalQty);
          GenJnlLine4.GET(TempGenJnlLine."Journal Template Name",TempGenJnlLine."Journal Batch Name",TempGenJnlLine."Line No.");
          CopyGenJnlLineBalancingData(GenJnlLine4,TempGenJnlLine);
          GenJnlLine4.MODIFY;
        UNTIL TempGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckICDocument@13(VAR TempGenJnlLine1@1001 : TEMPORARY Record 81);
    VAR
      TempGenJnlLine2@1002 : TEMPORARY Record 81;
      CurrentICPartner@1000 : Code[20];
    BEGIN
      WITH TempGenJnlLine1 DO BEGIN
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        FINDSET;
        REPEAT
          IF ("Posting Date" <> LastDate) OR ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo) THEN BEGIN
            TempGenJnlLine2 := TempGenJnlLine1;
            SETRANGE("Posting Date","Posting Date");
            SETRANGE("Document No.","Document No.");
            SETFILTER("IC Partner Code",'<>%1','');
            IF FINDFIRST THEN
              CurrentICPartner := "IC Partner Code"
            ELSE
              CurrentICPartner := '';
            SETRANGE("Posting Date");
            SETRANGE("Document No.");
            SETRANGE("IC Partner Code");
            LastDate := "Posting Date";
            LastDocType := "Document Type";
            LastDocNo := "Document No.";
            TempGenJnlLine1 := TempGenJnlLine2;
          END;
          IF (CurrentICPartner <> '') AND ("IC Direction" = "IC Direction"::Outgoing) THEN BEGIN
            IF ("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
               ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
               ("Account No." <> '') AND
               ("Bal. Account No." <> '')
            THEN
              ERROR(Text030,FIELDCAPTION("Account No."),FIELDCAPTION("Bal. Account No."));
            IF (("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND ("Account No." <> '')) XOR
               (("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
                ("Bal. Account No." <> ''))
            THEN
              TESTFIELD("IC Partner G/L Acc. No.")
            ELSE
              IF "IC Partner G/L Acc. No." <> '' THEN
                ERROR(Text031,
                  "Line No.",FIELDCAPTION("IC Partner G/L Acc. No."),FIELDCAPTION("Account No."),
                  FIELDCAPTION("Bal. Account No."));
          END ELSE
            TESTFIELD("IC Partner G/L Acc. No.",'');
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateIncomingDocument@15(VAR GenJnlLine@1000 : Record 81);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      OnBeforeUpdateIncomingDocument(GenJnlLine);
      IncomingDocument.UpdateIncomingDocumentFromPosting(
        GenJnlLine."Incoming Document Entry No.",GenJnlLine."Posting Date",GenJnlLine."Document No.");
    END;

    LOCAL PROCEDURE CopyGenJnlLineBalancingData@18(VAR GenJnlLineTo@1000 : Record 81;VAR GenJnlLineFrom@1002 : Record 81);
    BEGIN
      GenJnlLineTo."Bill-to/Pay-to No." := GenJnlLineFrom."Bill-to/Pay-to No.";
      GenJnlLineTo."Ship-to/Order Address Code" := GenJnlLineFrom."Ship-to/Order Address Code";
      GenJnlLineTo."VAT Registration No." := GenJnlLineFrom."VAT Registration No.";
      GenJnlLineTo."Country/Region Code" := GenJnlLineFrom."Country/Region Code";
    END;

    LOCAL PROCEDURE CheckGenPostingType@19(GenJnlLine6@1000 : Record 81;AccountType@1001 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner');
    VAR
      IsHandled@1002 : Boolean;
    BEGIN
      OnBeforeCheckGenPostingType(GenJnlLine6,AccountType,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF (AccountType = AccountType::Customer) AND
         (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Purchase) OR
         (AccountType = AccountType::Vendor) AND
         (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Sale)
      THEN
        GenJnlLine6.FIELDERROR("Gen. Posting Type");
      IF (AccountType = AccountType::Customer) AND
         (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Purchase) OR
         (AccountType = AccountType::Vendor) AND
         (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Sale)
      THEN
        GenJnlLine6.FIELDERROR("Bal. Gen. Posting Type");
    END;

    LOCAL PROCEDURE CheckAndCopyBalancingData@16(VAR GenJnlLine4@1002 : Record 81;VAR GenJnlLine6@1001 : Record 81;VAR TempGenJnlLine@1004 : TEMPORARY Record 81;CheckBalAcount@1003 : Boolean);
    VAR
      TempGenJournalLineHistory@1006 : TEMPORARY Record 81;
      AccountType@1005 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';
      CheckAmount@1000 : Decimal;
      JnlLineTotalQty@1007 : Integer;
      RefPostingSubState@1009 : 'Check account,Check bal. account,Update lines';
      LinesFound@1008 : Boolean;
    BEGIN
      JnlLineTotalQty := GenJnlLine4.COUNT;
      LineCount := 0;
      IF CheckBalAcount THEN
        RefPostingSubState := RefPostingSubState::"Check bal. account"
      ELSE
        RefPostingSubState := RefPostingSubState::"Check account";
      IF GenJnlLine4.FINDSET THEN
        REPEAT
          LineCount := LineCount + 1;
          UpdateDialogUpdateBalLines(RefPostingSubState,LineCount,JnlLineTotalQty);
          TempGenJournalLineHistory.SETRANGE("Posting Date",GenJnlLine4."Posting Date");
          TempGenJournalLineHistory.SETRANGE("Document No.",GenJnlLine4."Document No.");
          IF TempGenJournalLineHistory.ISEMPTY THEN BEGIN
            TempGenJournalLineHistory := GenJnlLine4;
            TempGenJournalLineHistory.INSERT;
            GenJnlLine6.SETRANGE("Posting Date",GenJnlLine4."Posting Date");
            GenJnlLine6.SETRANGE("Document No.",GenJnlLine4."Document No.");
            LinesFound := GenJnlLine6.FINDSET;
          END;
          IF LinesFound THEN BEGIN
            AccountType := GetPostingTypeFilter(GenJnlLine4,CheckBalAcount);
            CheckAmount := 0;
            REPEAT
              IF (GenJnlLine6."Account No." = '') <> (GenJnlLine6."Bal. Account No." = '') THEN BEGIN
                CheckGenPostingType(GenJnlLine6,AccountType);
                IF GenJnlLine6."Bill-to/Pay-to No." = '' THEN BEGIN
                  TempGenJnlLine := GenJnlLine6;
                  CopyGenJnlLineBalancingData(TempGenJnlLine,GenJnlLine4);
                  IF TempGenJnlLine.INSERT THEN;
                END;
                CheckAmount := CheckAmount + GenJnlLine6.Amount;
              END;
              LinesFound := (GenJnlLine6.NEXT <> 0);
            UNTIL NOT LinesFound OR (-GenJnlLine4.Amount = CheckAmount);
          END;
        UNTIL GenJnlLine4.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateGenJnlLineWithVATInfo@26(VAR GenJournalLine@1005 : Record 81;GenJournalLineVATInfoSource@1000 : Record 81;StartLineNo@1003 : Integer;LastLineNo@1004 : Integer);
    VAR
      GenJournalLineCopy@1001 : Record 81;
      Finish@1002 : Boolean;
      OldLineNo@1007 : Integer;
    BEGIN
      OldLineNo := GenJournalLine."Line No.";
      WITH GenJournalLine DO BEGIN
        "Line No." := StartLineNo;
        Finish := FALSE;
        IF GET("Journal Template Name","Journal Batch Name","Line No.") THEN
          REPEAT
            IF "Line No." <> GenJournalLineVATInfoSource."Line No." THEN BEGIN
              "Bill-to/Pay-to No." := GenJournalLineVATInfoSource."Bill-to/Pay-to No.";
              "Country/Region Code" := GenJournalLineVATInfoSource."Country/Region Code";
              "VAT Registration No." := GenJournalLineVATInfoSource."VAT Registration No.";
              MODIFY;
              IF ISTEMPORARY THEN BEGIN
                GenJournalLineCopy.GET("Journal Template Name","Journal Batch Name","Line No.");
                GenJournalLineCopy."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
                GenJournalLineCopy."Country/Region Code" := "Country/Region Code";
                GenJournalLineCopy."VAT Registration No." := "VAT Registration No.";
                GenJournalLineCopy.MODIFY;
              END;
            END;
            Finish := "Line No." = LastLineNo;
          UNTIL (NEXT = 0) OR Finish;

        IF GET("Journal Template Name","Journal Batch Name",OldLineNo) THEN;
      END;
    END;

    LOCAL PROCEDURE GetPostingTypeFilter@17(VAR GenJnlLine4@1002 : Record 81;CheckBalAcount@1000 : Boolean) : Integer;
    BEGIN
      IF CheckBalAcount THEN
        EXIT(GenJnlLine4."Bal. Account Type");
      EXIT(GenJnlLine4."Account Type");
    END;

    LOCAL PROCEDURE UpdateDialog@23(PostingState@1000 : Integer;LineNo@1001 : Integer;TotalLinesQty@1002 : Integer);
    BEGIN
      UpdatePostingState(PostingState,LineNo);
      Window.UPDATE(2,GetProgressBarValue(PostingState,LineNo,TotalLinesQty));
    END;

    LOCAL PROCEDURE UpdateDialogUpdateBalLines@22(PostingSubState@1003 : Integer;LineNo@1001 : Integer;TotalLinesQty@1002 : Integer);
    BEGIN
      UpdatePostingState(RefPostingState::"Updating bal. lines",LineNo);
      Window.UPDATE(
        2,
        GetProgressBarUpdateBalLinesValue(
          CalcProgressPercent(PostingSubState,3,LineCount,TotalLinesQty)));
    END;

    LOCAL PROCEDURE UpdatePostingState@25(PostingState@1000 : Integer;LineNo@1002 : Integer);
    BEGIN
      Window.UPDATE(3,STRSUBSTNO('%1 (%2)',GetPostingStateMsg(PostingState),LineNo));
    END;

    LOCAL PROCEDURE UpdateCurrencyBalanceForRecurringLine@44(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Recurring Method" <> "Recurring Method"::" " THEN
          CALCFIELDS("Allocated Amt. (LCY)");
        IF ("Recurring Method" = "Recurring Method"::" ") OR ("Amount (LCY)" <> -"Allocated Amt. (LCY)") THEN
          IF "Currency Code" <> LastCurrencyCode THEN
            LastCurrencyCode := ''
          ELSE
            IF ("Currency Code" <> '') AND (("Account No." = '') XOR ("Bal. Account No." = '')) THEN
              IF "Account No." <> '' THEN
                CurrencyBalance := CurrencyBalance + Amount
              ELSE
                CurrencyBalance := CurrencyBalance - Amount;
      END;
    END;

    LOCAL PROCEDURE GetPostingStateMsg@29(PostingState@1000 : Integer) : Text;
    BEGIN
      CASE PostingState OF
        RefPostingState::"Checking lines":
          EXIT(CheckingLinesMsg);
        RefPostingState::"Checking balance":
          EXIT(CheckingBalanceMsg);
        RefPostingState::"Updating bal. lines":
          EXIT(UpdatingBalLinesMsg);
        RefPostingState::"Posting Lines":
          EXIT(PostingLinesMsg);
        RefPostingState::"Posting revers. lines":
          EXIT(PostingReversLinesMsg);
        RefPostingState::"Updating lines":
          EXIT(UpdatingLinesMsg);
      END;
    END;

    LOCAL PROCEDURE GetProgressBarValue@21(PostingState@1002 : Integer;LineNo@1001 : Integer;TotalLinesQty@1000 : Integer) : Integer;
    BEGIN
      EXIT(ROUND(100 * CalcProgressPercent(PostingState,GetNumberOfPostingStages,LineNo,TotalLinesQty),1));
    END;

    LOCAL PROCEDURE GetProgressBarUpdateBalLinesValue@34(PostingStatePercent@1000 : Decimal) : Integer;
    BEGIN
      EXIT(ROUND((RefPostingState::"Updating bal. lines" * 100 + PostingStatePercent) / GetNumberOfPostingStages * 100,1));
    END;

    LOCAL PROCEDURE CalcProgressPercent@20(PostingState@1001 : Integer;NumberOfPostingStates@1000 : Integer;LineNo@1002 : Integer;TotalLinesQty@1003 : Integer) : Decimal;
    BEGIN
      EXIT(100 / NumberOfPostingStates * (PostingState + LineNo / TotalLinesQty));
    END;

    LOCAL PROCEDURE GetNumberOfPostingStages@33() : Integer;
    BEGIN
      IF GenJnlTemplate.Recurring THEN
        EXIT(6);

      EXIT(4);
    END;

    LOCAL PROCEDURE FindNextGLRegisterNo@24();
    BEGIN
      GLReg.LOCKTABLE;
      IF GLReg.FINDLAST THEN
        GLRegNo := GLReg."No." + 1
      ELSE
        GLRegNo := 1;
    END;

    LOCAL PROCEDURE CheckGenJnlLineDates@36(VAR MarkedGenJnlLine@1001 : Record 81;VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF NOT FIND THEN
          FINDSET;
        SETRANGE("Posting Date",0D,WORKDATE);
        IF FINDSET THEN BEGIN
          StartLineNo := "Line No.";
          REPEAT
            IF IsNotExpired(GenJournalLine) AND IsPostingDateAllowed(GenJournalLine) THEN BEGIN
              MarkedGenJnlLine := GenJournalLine;
              MarkedGenJnlLine.INSERT;
            END;
            IF NEXT = 0 THEN
              FINDFIRST;
          UNTIL "Line No." = StartLineNo
        END;
        MarkedGenJnlLine := GenJournalLine;
      END;
    END;

    LOCAL PROCEDURE IsNotExpired@50(GenJournalLine@1000 : Record 81) : Boolean;
    BEGIN
      EXIT((GenJournalLine."Expiration Date" = 0D) OR (GenJournalLine."Expiration Date" >= GenJournalLine."Posting Date"));
    END;

    LOCAL PROCEDURE IsPostingDateAllowed@48(GenJournalLine@1000 : Record 81) : Boolean;
    BEGIN
      EXIT(NOT GenJnlCheckLine.DateNotAllowed(GenJournalLine."Posting Date"));
    END;

    [External]
    PROCEDURE SetPreviewMode@27(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    LOCAL PROCEDURE PostReversingLines@28(VAR TempGenJnlLine@1000 : TEMPORARY Record 81);
    VAR
      GenJournalLine1@1001 : Record 81;
      GenJournalLine2@1002 : Record 81;
      ICPosting@1100525000 : Boolean;
    BEGIN
      LineCount := 0;
      LastDocNo := '';
      LastPostedDocNo := '';
      IF TempGenJnlLine.FIND('-') THEN
        REPEAT
          GenJournalLine1 := TempGenJnlLine;

          WITH GenJournalLine1 DO BEGIN
            //**4PS.sn C039400.c
            ICPosting := CheckPostIC(GenJournalLine1,TRUE);
            //**4PS.en

            LineCount := LineCount + 1;
            UpdateDialog(RefPostingState::"Posting revers. lines",LineCount,NoOfReversingRecords);
            CheckDocumentNo(GenJournalLine1);
            GenJournalLine2.COPY(GenJournalLine1);
            PrepareGenJnlLineAddCurr(GenJournalLine2);
            OnPostReversingLinesOnBeforeGenJnlPostLine(GenJournalLine2,GenJnlPostLine);
            GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
            GenJnlPostLine.RunWithCheck(GenJournalLine2);
            PostAllocations(GenJournalLine1,TRUE);

            //**4PS.sn
            IF "Receiving Company" = '' THEN BEGIN
              IF "Job No." <> '' THEN BEGIN
                PostProject(GenJournalLine1,TRUE);
                PostComplementaryWIPProj(GenJournalLine1);
                PostSurcharge(GenJournalLine1,0);
              END;
              IF "Service Order No." <> '' THEN BEGIN
                PostService(GenJournalLine1);
                PostComplementaryWIPServ(GenJournalLine1);
                PostSurcharge(GenJournalLine1,1);
              END;
            END;
            PostPlant(GenJournalLine1);
            PostLoans(GenJournalLine1);
            //**4PS.en
          END;
        UNTIL TempGenJnlLine.NEXT = 0;

      OnAfterPostReversingLines(TempGenJnlLine,PreviewMode);
    END;

    LOCAL PROCEDURE UpdateAndDeleteLines@31(VAR GenJnlLine@1003 : Record 81);
    VAR
      TempGenJnlLine2@1002 : TEMPORARY Record 81;
      OldVATAmount@1000 : Decimal;
      OldVATPct@1001 : Decimal;
    BEGIN
      OnBeforeUpdateAndDeleteLines(GenJnlLine,SuppressCommit);

      ClearDataExchEntries(GenJnlLine);
      IF GenJnlTemplate.Recurring THEN BEGIN
        // Recurring journal
        LineCount := 0;
        GenJnlLine.SETRANGE(Amount);  //**4PS.n
        GenJnlLine2.COPY(GenJnlLine);
        GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
        GenJnlLine2.FINDSET(TRUE,FALSE);
        REPEAT
          //**4PS.sn
          IF (GenJnlLine2."Posting Date" <= GenJnlLine2."Expiration Date") OR
             (GenJnlLine2."Expiration Date" = 0D) THEN BEGIN
          //**4PS.en
            LineCount := LineCount + 1;
            UpdateDialog(RefPostingState::"Updating lines",LineCount,NoOfRecords);
            OldVATAmount := GenJnlLine2."VAT Amount";
            OldVATPct := GenJnlLine2."VAT %";
            TempGenJnlLine2 := GenJnlLine2; //**4PS.n C035605 use a Temptable to avoid a repeating monster query
            TempGenJnlLine2.INSERT; //C040207.n
            IF GenJnlLine2."Posting Date" <> 0D THEN
      //      GenJnlLine2.VALIDATE( //**4PS.o C035605
              TempGenJnlLine2.VALIDATE( //**4PS.n C035605
                "Posting Date",CALCDATE(GenJnlLine2."Recurring Frequency",GenJnlLine2."Posting Date"));
            IF NOT
               (GenJnlLine2."Recurring Method" IN
                [GenJnlLine2."Recurring Method"::"F  Fixed",
                 GenJnlLine2."Recurring Method"::"RF Reversing Fixed"])
            THEN
      //      MultiplyAmounts(GenJnlLine2,0) //**4PS.o C035605
              MultiplyAmounts(TempGenJnlLine2,0) //**4PS.n C035605
            ELSE
      //**4PS.so C035605
      //      IF (GenJnlLine2."VAT %" = OldVATPct) AND (GenJnlLine2."VAT Amount" <> OldVATAmount) THEN
      //        GenJnlLine2.VALIDATE("VAT Amount",OldVATAmount);
      //    GenJnlLine2.MODIFY;
      //**4PS.eo C035605
      //**4PS.sn C035605
              IF (TempGenJnlLine2."VAT %" = OldVATPct) AND (TempGenJnlLine2."VAT Amount" <> OldVATAmount) THEN
                TempGenJnlLine2.VALIDATE("VAT Amount",OldVATAmount);
            TempGenJnlLine2.MODIFY; //C040207.c
      //**4PS.en C035605
          END;  //**4PS.n
        UNTIL GenJnlLine2.NEXT = 0;
      //**4PS.sn C035605
        TempGenJnlLine2.RESET;
        IF TempGenJnlLine2.FINDSET THEN
          REPEAT
            GenJnlLine2 := TempGenJnlLine2;
            GenJnlLine2.MODIFY;
          UNTIL TempGenJnlLine2.NEXT = 0;
      //**4PS.en C035605
      END ELSE BEGIN
        // Not a recurring journal
        GenJnlLine2.COPY(GenJnlLine);
        GenJnlLine2.SETFILTER("Account No.",'<>%1','');
        IF GenJnlLine2.FINDLAST THEN; // Remember the last line
        GenJnlLine3.COPY(GenJnlLine);
        GenJnlLine3.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
        GenJnlLine3.DELETEALL;
        GenJnlLine3.RESET;
        GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
        GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        IF GenJnlTemplate."Increment Batch Name" THEN
          IF NOT GenJnlLine3.FINDLAST THEN
            IF INCSTR(GenJnlLine."Journal Batch Name") <> '' THEN BEGIN
              GenJnlBatch.DELETE;
              IF GenJnlTemplate.Type = GenJnlTemplate.Type::Assets THEN
                FAJnlSetup.IncGenJnlBatchName(GenJnlBatch);
              GenJnlBatch.Name := INCSTR(GenJnlLine."Journal Batch Name");
              IF GenJnlBatch.INSERT THEN;
              GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
              OnAfterIncrementBatchName(GenJnlBatch,GenJnlLine2."Journal Batch Name");
            END;

        GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        IF (GenJnlBatch."No. Series" = '') AND NOT GenJnlLine3.FINDLAST THEN BEGIN
          GenJnlLine3.INIT;
          GenJnlLine3."Journal Template Name" := GenJnlLine."Journal Template Name";
          GenJnlLine3."Journal Batch Name" := GenJnlLine."Journal Batch Name";
          GenJnlLine3."Line No." := 10000;
          GenJnlLine3.INSERT;
          TempGenJnlLine2 := GenJnlLine2;
          TempGenJnlLine2."Balance (LCY)" := 0;
          GenJnlLine3.SetUpNewLine(TempGenJnlLine2,0,TRUE);
          GenJnlLine3.MODIFY;
        END;
      END;
    END;

    [Internal]
    PROCEDURE Preview@32(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      PreviewMode := TRUE;
      GenJnlLine.COPY(GenJournalLine);
      GenJnlLine.SETAUTOCALCFIELDS;
      Code(GenJnlLine);
    END;

    LOCAL PROCEDURE CheckRestrictions@35(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      IF NOT PreviewMode THEN
        GenJournalLine.OnCheckGenJournalLinePostRestrictions;
    END;

    LOCAL PROCEDURE ClearDataExchEntries@37(VAR PassedGenJnlLine@1000 : Record 81);
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(PassedGenJnlLine);
      IF GenJnlLine.FINDSET THEN
        REPEAT
          GenJnlLine.ClearDataExchangeEntries(TRUE);
        UNTIL GenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PostGenJournalLine@39(VAR GenJournalLine@1000 : Record 81;CurrentICPartner@1001 : Code[20];ICTransactionNo@1002 : Integer) : Boolean;
    VAR
      IsPosted@1003 : Boolean;
      ICPosting@1100525000 : Boolean;
      GenJnlLineForPostProjOrServ@1100525001 : Record 81;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF NeedCheckZeroAmount AND (Amount = 0) AND IsRecurring THEN
          EXIT(FALSE);

        LineCount := LineCount + 1;
        IF CurrentICPartner <> '' THEN
          "IC Partner Code" := CurrentICPartner;
        UpdateDialog(RefPostingState::"Posting Lines",LineCount,NoOfRecords);
        MakeRecurringTexts(GenJournalLine);
        CheckDocumentNo(GenJournalLine);

        //**4PS.sn
        ICPosting := CheckPostIC(GenJournalLine,FALSE); //C039400.c
        IF ICPosting THEN BEGIN
          GenJnlLineSaveBeforeICRec."Document No." := "Document No.";
          GenJnlLineSaveBeforeICRec.Description := Description;
        END;
        //**4PS.en

        GenJnlLine5.COPY(GenJournalLine);
        PrepareGenJnlLineAddCurr(GenJnlLine5);
        UpdateIncomingDocument(GenJnlLine5);

        UpdateICApplicationBuffer(GenJnlLine5); //**4PS.n

        OnBeforePostGenJnlLine(GenJnlLine5,SuppressCommit,IsPosted,GenJnlPostLine);
        IF NOT IsPosted THEN
          GenJnlPostLine.RunWithoutCheck(GenJnlLine5);
        OnAfterPostGenJnlLine(GenJnlLine5,SuppressCommit,GenJnlPostLine);
        IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
           ("IC Direction" = "IC Direction"::Outgoing) AND (ICTransactionNo > 0)
        THEN
          ICOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,GenJnlLine5);
        IF ("Recurring Method" >= "Recurring Method"::"RF Reversing Fixed") AND ("Posting Date" <> 0D) THEN BEGIN
          "Posting Date" := "Posting Date" + 1;
      //  "Document Date" := "Posting Date"; //**4PS.o
         //MultiplyAmounts(GenJournalLine,-1);  //**4PS.o   (Call C-005898)
          TempGenJnlLine4 := GenJournalLine;
          //**4PS.sn   (Call C-005898)
          IF ICPosting THEN BEGIN
            TempGenJnlLine4 := GenJnlLineSaveBeforeICRec;
            TempGenJnlLine4."Posting Date" := GenJnlLine3."Posting Date";
            TempGenJnlLine4."Document No." := GenJnlLine3."Document No."; //WI W008001
            TempGenJnlLine4.Description := GenJnlLine3.Description;    //WI W008001
          END;
          MultiplyAmounts(TempGenJnlLine4,-1);
          //**4PS.en
          TempGenJnlLine4."Reversing Entry" := TRUE;
          TempGenJnlLine4.INSERT;
          NoOfReversingRecords := NoOfReversingRecords + 1;
          "Posting Date" := "Posting Date" - 1;
          "Document Date" := "Posting Date";
        END;
        PostAllocations(GenJournalLine,FALSE);

        //**4PS.sn
        GenJnlLineForPostProjOrServ.COPY(GenJournalLine);
        GenJnlLineForPostProjOrServ."Document No." := GenJnlLine3."Document No.";
        IF "Receiving Company" = '' THEN BEGIN
          IF "Job No." <> '' THEN BEGIN
            PostProject(GenJnlLineForPostProjOrServ,TRUE);
            PostComplementaryWIPProj(GenJnlLineForPostProjOrServ);
            PostSurcharge(GenJnlLineForPostProjOrServ,0);
          END;
          IF "Service Order No." <> '' THEN BEGIN
            PostService(GenJnlLineForPostProjOrServ);
            PostComplementaryWIPServ(GenJnlLineForPostProjOrServ);
            PostSurcharge(GenJnlLineForPostProjOrServ,1);
          END ELSE
            IF "Service Contract No." <> '' THEN
              PostService(GenJnlLineForPostProjOrServ);
        END;
        PostPlant(GenJournalLine);
        PostLoans(GenJournalLine);

        GLSetup.GET;
        IF "Receiving Company" <> '' THEN BEGIN
          //At IC a surcharge can also be added to supplying company.
          //This is different from 'normal' setup (parameter GLSetup.SurchargesIntercompany::ReceivingComp), where surcharges
          //are only determined in receiving company.
          //Result will be an (extra) IC mutation, because this surcharge should also be posted in receiving company.
          IF "Job No." <> '' THEN BEGIN
            PostProject(GenJnlLineForPostProjOrServ,FALSE);
            PostComplementaryWIPProj(GenJnlLineForPostProjOrServ);
            PostSurchargeIC(GenJnlLineForPostProjOrServ,0);
          END;

          IF "Service Order No." <> '' THEN BEGIN
            PostComplementaryWIPServ(GenJnlLineForPostProjOrServ);
            PostSurchargeIC(GenJnlLineForPostProjOrServ,1);
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckLine@38(VAR GenJnlLine@1000 : Record 81;VAR PostingAfterCurrentFiscalYearConfirmed@1002 : Boolean);
    VAR
      GenJournalLineToUpdate@1001 : Record 81;
      IsModified@1003 : Boolean;
    BEGIN
      GenJournalLineToUpdate.COPY(GenJnlLine);
      CheckRecurringLine(GenJournalLineToUpdate);
      IsModified := UpdateRecurringAmt(GenJournalLineToUpdate);
      CheckAllocations(GenJournalLineToUpdate);
      GenJnlLine5.COPY(GenJournalLineToUpdate);
      IF NOT PostingAfterCurrentFiscalYearConfirmed THEN
        PostingAfterCurrentFiscalYearConfirmed :=
          PostingSetupMgt.ConfirmPostingAfterCurrentCalendarDate(
            ConfirmPostingAfterCurrentPeriodQst,GenJnlLine5."Posting Date");
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      GenJnlLine5."Memo Posting" := TRUE; //**4PS.n C022038
      GenJnlCheckLine.RunCheck(GenJnlLine5);
      CheckRestrictions(GenJnlLine5);
      GenJnlLine.COPY(GenJournalLineToUpdate);
      IF IsModified THEN
        GenJnlLine.MODIFY;
    END;

    [External]
    PROCEDURE SetSuppressCommit@55(NewSuppressCommit@1000 : Boolean);
    BEGIN
      SuppressCommit := NewSuppressCommit;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCode@64(VAR GenJournalLine@1000 : Record 81;PreviewMode@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostGenJnlLine@41(VAR GenJournalLine@1000 : Record 81;CommitIsSuppressed@1001 : Boolean;VAR GenJnlPostLine@1002 : Codeunit 12);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProcessLines@77(VAR TempGenJournalLine@1000 : TEMPORARY Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBalance@51(GenJnlTemplate@1000 : Record 80;GenJnlLine@1001 : Record 81;CurrentBalance@1002 : Decimal;CurrentBalanceReverse@1003 : Decimal;CurrencyBalance@1004 : Decimal;StartLineNo@1005 : Integer;StartLineNoReverse@1006 : Integer;LastDocType@1010 : Option;LastDocNo@1007 : Code[20];LastDate@1008 : Date;LastCurrencyCode@1009 : Code[10];CommitIsSuppressed@1011 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckCorrection@75(GenJournalLine@1000 : Record 81;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckGenPostingType@72(GenJnlLine@1001 : Record 81;AccountType@1000 : Option;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCode@53(VAR GenJournalLine@1000 : Record 81;PreviewMode@1001 : Boolean;CommitIsSuppressed@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCommit@63(GLRegNo@1000 : Integer;VAR GenJournalLine@1001 : Record 81;VAR GenJnlPostLine@1002 : Codeunit 12);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIfCheckBalance@54(GenJnlTemplate@1004 : Record 80;GenJnlLine@1003 : Record 81;VAR LastDocType@1005 : Option;VAR LastDocNo@1002 : Code[20];VAR LastDate@1001 : Date;VAR CheckIfBalance@1000 : Boolean;CommitIsSuppressed@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostAllocations@58(VAR AllocateGenJnlLine@1001 : Record 81;Reversing@1000 : Boolean;IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostGenJnlLine@40(VAR GenJournalLine@1000 : Record 81;CommitIsSuppressed@1001 : Boolean;VAR Posted@1002 : Boolean;VAR GenJnlPostLine@1003 : Codeunit 12);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeProcessLines@52(VAR GenJournalLine@1000 : Record 81;PreviewMode@1001 : Boolean;CommitIsSuppressed@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeProcessBalanceOfLines@162(VAR GenJournalLine@1000 : Record 81;VAR GenJournalBatch@1002 : Record 232;VAR GenJournalTemplate@1003 : Record 80;VAR IsKeySet@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRaiseExceedLengthError@57(VAR GenJournalBatch@1000 : Record 232;VAR RaiseError@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeThrowPreviewError@61(VAR GenJournalLine@1000 : Record 81;GLRegNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateAndDeleteLines@47(VAR GenJournalLine@1000 : Record 81;CommitIsSuppressed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateIncomingDocument@62(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIncrementBatchName@14(VAR GenJournalBatch@1000 : Record 232;OldBatchName@1001 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostAllocations@46(GenJournalLine@1000 : Record 81;Reversing@1001 : Boolean;CommitIsSuppressed@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeRecurringTexts@65(VAR GenJournalLine@1000 : Record 81;VAR AccountingPeriod@1001 : Record 50;VAR Day@1002 : Integer;VAR Week@1003 : Integer;VAR Month@1004 : Integer;VAR MonthText@1005 : Text[30]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostAllocationsOnBeforeCopyFromGenJnlAlloc@68(VAR GenJournalLine@1000 : Record 81;VAR AllocateGenJournalLine@1001 : Record 81;VAR Reversing@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMultiplyAmounts@45(VAR GenJournalLine@1000 : Record 81;Factor@1001 : Decimal;CommitIsSuppressed@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostReversingLines@56(VAR GenJournalLine@1000 : Record 81;PreviewMode@1001 : Boolean);
    BEGIN
    END;

    [Integration(TRUE,TRUE)]
    LOCAL PROCEDURE OnAfterProcessBalanceOfLines@30(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateLineBalance@59(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostAllocationsOnBeforePostNotReversingLine@71(VAR GenJournalLine@1000 : Record 81;VAR GenJnlPostLine@1001 : Codeunit 12);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostAllocationsOnBeforePostReversingLine@70(VAR GenJournalLine@1000 : Record 81;VAR GenJnlPostLine@1001 : Codeunit 12);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostReversingLinesOnBeforeGenJnlPostLine@69(VAR GenJournalLine@1000 : Record 81;VAR GenJnlPostLine@1001 : Codeunit 12);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnProcessLinesOnAfterAssignGLNegNo@67(VAR GenJournalLine@1000 : Record 81;GLRegister@1001 : Record 45;GLRegNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnProcessLinesOnAfterPostGenJnlLines@66(GenJournalLine@1000 : Record 81;GLRegister@1001 : Record 45;VAR GLRegNo@1002 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE CheckPostIC@1100485001(VAR GenJournalLine@1100525000 : Record 81;IReverse@1100485001 : Boolean) : Boolean;
    BEGIN
      //**4PS
      //C039400 several changes
      WITH GenJournalLine DO BEGIN
        IF ("Account Type" = "Account Type"::"G/L Account") OR
           ("Account Type" = "Account Type"::Customer) OR
           ("Account Type" = "Account Type"::Vendor)
        THEN BEGIN
          IF "Receiving Company" <> '' THEN BEGIN
            GenJnlLineSaveBeforeICRec := GenJournalLine;

            ICRec.GET(COMPANYNAME, "Receiving Company");
            ICRec.TESTFIELD("Supplying Company IC Account");
            ICRec.TESTFIELD("Receiving Company IC Account");
            "Account No." := ICRec.GetICAccountOfCurrentCompany;
            "Account Type" := "Account Type"::"G/L Account";
            "Job No." := '';
            Element := '';
            "Extension Contract" := '';
            "Service Order No." := '';
            "Service Contract No." := '';
            "Service Location No." := '';
            "Service Category" := '';
            "Shortcut Dimension 1 Code" := '';
            "Shortcut Dimension 2 Code" := '';
            "Dimension Set ID" := 0;

            "System-Created Entry" := TRUE;
            CreateICEntry(GenJnlLineSaveBeforeICRec);

            SetSkipModify(TRUE);
            "Receiving Company" := ''; //C-028627
            //original "account no." from receiving company is replaced by IC-account from own company.
            //Validation should take care that linked dimensions to "account no." are given to mutation.

            "Plant Type" := ''; // M-31399 addition to C-028627
            VALIDATE("Account No.");
            IF "Currency Code" <> GenJnlLineSaveBeforeICRec."Currency Code" THEN     //* Recover, sometimes becomes empty at
              VALIDATE("Currency Code", GenJnlLineSaveBeforeICRec."Currency Code");  //* validate "Account No"

            "Receiving Company" := GenJnlLineSaveBeforeICRec."Receiving Company"; //C-028627
            "Plant Type" := GenJnlLineSaveBeforeICRec."Plant Type";  // M-31399 addition to C-028627
            GetPlantPostingGroup;
            //T007402.sn
            ICRec.AddICRelationDimsOfCurrentCompany(
              "Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            //T007402.en
            SetSkipModify(FALSE);

            EXIT(TRUE);
          END;
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CreateICEntry@1100485027(GenJnlLine@1100525001 : Record 81);
    VAR
      ICCounter@11012000 : Integer;
      lvPostingSetup@1100525000 : Record 11020565;
    BEGIN
      //**4PS
      ICEntryRec.LOCKTABLE;
      IF ICEntryRec.FINDLAST THEN
        ICCounter := ICEntryRec."Line No."
      ELSE
        ICCounter := 0;

      ICEntryRec.INIT;
      ICEntryRec."Line No." := ICCounter + 1;
      ICEntryRec."Post in Company" := GenJnlLine."Receiving Company";
      ICEntryRec."Supplying Company" := COMPANYNAME;
      ICEntryRec."Receiving Company" := GenJnlLine."Receiving Company";
      ICEntryRec."Account No." := ICRec."Receiving Company IC Account";
      ICEntryRec."Account Type" := GenJnlLine."Account Type";
      ICEntryRec."Bal. Account No." := GenJnlLine."Account No.";   //WIP-account (job), customer, vendor or bank
      //ICEntryRec.Description := GenJnlLine.Description;
      ICEntryRec.Description := GenJnlLine3.Description; // WI W008001 n

      ICEntryRec."Description 2" := GenJnlLine."Description 2";  //**4PS01.n
      ICEntryRec."Project No." := GenJnlLine."Job No.";
      ICEntryRec.Element := GenJnlLine.Element;
      ICEntryRec."Extension Contract" := GenJnlLine."Extension Contract";
      ICEntryRec."Service Order No." := GenJnlLine."Service Order No.";
      ICEntryRec."Service Contract No." := GenJnlLine."Service Contract No.";
      ICEntryRec."Service Location No." := GenJnlLine."Service Location No.";
      ICEntryRec."Additional Cost (Service)" := GenJnlLine."Additional Cost (Service)";  //db, 24-11-05
      ICEntryRec."Item No." := GenJnlLine."Item No.";
      ICEntryRec."Basic Item" := GenJnlLine."Basic Item";
      ICEntryRec."Trade Item" := GenJnlLine."Trade Item";
      ICEntryRec.Manufacturer := GenJnlLine.Manufacturer;
      ICEntryRec."Vendor (Trade Item)" := GenJnlLine."Vendor (Trade Item)";
      ICEntryRec."Cost Object" := GenJnlLine."Shortcut Dimension 2 Code";
      ICEntryRec."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      ICEntryRec."Dimension Set ID" := GenJnlLine."Dimension Set ID";

      IF (GenJnlLine.Quantity = 0) AND (GenJnlLine.Amount <= 0) THEN
        ICEntryRec.Quantity := 1
      ELSE
        ICEntryRec.Quantity := GenJnlLine.Quantity;
      ICEntryRec."Unit of Measure Code" := GenJnlLine."Unit of Measure Code";

      IF (GenJnlLine."Gen. Posting Type" <> 0) AND  // VAT M23139
         (GenJnlLine."VAT Amount" <> 0 ) AND
         (GenJnlLine."VAT Amount" + GenJnlLine."VAT Base Amount" = GenJnlLine.Amount )
      THEN
        ICEntryRec.Amount := GenJnlLine."VAT Base Amount" // VAT  M23139
      ELSE
        ICEntryRec.Amount := GenJnlLine.Amount;

      IF ICEntryRec.Quantity <> 0 THEN
        ICEntryRec.Price := ICEntryRec.Amount / ICEntryRec.Quantity
      ELSE
        ICEntryRec.Price := ICEntryRec.Amount;

      ICEntryRec."Document No." := GenJnlLine3."Document No.";
      ICEntryRec."Posting Date" := GenJnlLine."Posting Date";
      ICEntryRec."Interest Date" := GenJnlLine."Interest Date";
      //ICEntryRec."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"; //M23139.o
      ICEntryRec."Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      ICEntryRec."Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";

      IF NOT ((GenJnlLine."Gen. Posting Type" <> 0) AND  // VAT M23139.sn
              (GenJnlLine."VAT Amount" <> 0 ) AND
              (GenJnlLine."VAT Amount" + GenJnlLine."VAT Base Amount" = GenJnlLine.Amount ))
      THEN BEGIN //M23139.en
        ICEntryRec."Gen. Posting Type" := GenJnlLine."Gen. Posting Type";
        ICEntryRec."VAT Bus. Posting Group" := GenJnlLine."VAT Bus. Posting Group";
        ICEntryRec."VAT Prod. Posting Group" := GenJnlLine."VAT Prod. Posting Group";
      END; //M23139.n

      ICEntryRec."Posting Group" := GenJnlLine."Posting Group";
      ICEntryRec."Plant Type" := GenJnlLine."Plant Type";
      ICEntryRec."Plant No." := GenJnlLine."Plant No.";
      ICEntryRec."Cost Component Plant" := GenJnlLine."Cost Component Plant";
      ICEntryRec."Cost Component" := GenJnlLine."Cost Component";

      ICEntryRec.TESTFIELD("Account No.");
      ICEntryRec.TESTFIELD("Bal. Account No.");
      IF ICEntryRec."Project No." <> '' THEN
        ICEntryRec.TESTFIELD("Cost Object");
      ICEntryRec."Origin Salary Application" := GenJnlLine."Origin Salary Application";

      ICEntryRec."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type";
      ICEntryRec."Applies-to Doc. No." := GenJnlLine."Applies-to Doc. No.";

      ICEntryRec.CheckProjStatusReceivingComp();
      ICEntryRec.CheckProjElemBlockedRecComp();

      IF lvPostingSetup.GET(GenJnlLine."Source Code", COMPANYNAME, GenJnlLine."Receiving Company") THEN
        ICEntryRec."Use IC Vendor Posting Group" := TRUE;

      ICEntryRec.AddICRelationDims(ICRec);

      ICEntryRec.INSERT(TRUE);
      //DP02206.sn
      GLSetup.GET;  //db, 03-01-19
      ICEntryRec."Currency Code" := GLSetup.GetCurrencyCode(GenJnlLine."Currency Code");
      //DP02206.en
      ICEntryRec.MODIFY;
    END;

    PROCEDURE PostProject@1210190007(GenJnlLine@1100528400 : Record 81;lvPost@1100525000 : Boolean);
    VAR
      DimMgt@1100525001 : Codeunit 408;
      ServiceOrderCostPlusEntry@1100527550 : Record 11012825;
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN

        IF ("Receiving Company" <> '') THEN
          DimValRec.CHANGECOMPANY("Receiving Company");

        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Job No.");

        // Post project entries
        JobJnlLine.INIT;
        JobJnlLine."Posting Date" := "Posting Date";
        JobJnlLine."Document Date" := "Document Date";
        JobJnlLine."Job No." := "Job No.";
        JobJnlLine."No." := "Account No.";
        JobJnlLine.Description := Description;
        JobJnlLine."Description 2" := "Description 2";  //**4PS01.n
        JobJnlLine."Posting Group" := "Posting Group";
        JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        JobJnlLine."Dimension Set ID" := "Dimension Set ID";
        JobJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        JobJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        JobJnlLine."Document No." := "Document No.";
        JobJnlLine."External Document No." := "External Document No.";
        JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
      //JobJnlLine.Quantity := Quantity; //C011173.o
        JobJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN BEGIN
          JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Sale;
          JobJnlLine.Quantity := -Quantity; //C011173.n
          IF Quantity = 0 THEN BEGIN
            JobJnlLine."Unit Price (LCY)" := -"VAT Base Amount (LCY)";
            JobJnlLine."Unit Price" := -"VAT Base Amount";
          END ELSE BEGIN
            JobJnlLine."Unit Price (LCY)" := -"VAT Base Amount (LCY)" / Quantity;
            JobJnlLine."Unit Price" := -"VAT Base Amount" / Quantity;
          END;
          JobJnlLine."Total Price (LCY)" := -ROUND("VAT Base Amount (LCY)");
          JobJnlLine."Total Price" := -ROUND("VAT Base Amount");
          JobJnlLine."Source Currency Total Price" := -ROUND("Source Curr. VAT Base Amount");
        END ELSE BEGIN
          JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
          JobJnlLine.Quantity := Quantity; //C011173.n
          IF Quantity = 0 THEN BEGIN
            JobJnlLine."Direct Unit Cost (LCY)" := "VAT Base Amount (LCY)";
            JobJnlLine."Unit Cost" := "VAT Base Amount";
          END ELSE BEGIN
            JobJnlLine."Direct Unit Cost (LCY)" := "VAT Base Amount (LCY)" / Quantity;
            JobJnlLine."Unit Cost" := "VAT Base Amount" / Quantity;
          END;
          JobJnlLine."Unit Cost (LCY)" := JobJnlLine."Direct Unit Cost (LCY)";
          JobJnlLine."Total Cost (LCY)" := ROUND("VAT Base Amount (LCY)");
          JobJnlLine."Total Cost" := ROUND("VAT Base Amount");
          JobJnlLine."Source Currency Total Cost" := ROUND("Source Curr. VAT Base Amount");
        END;
        JobJnlLine."Reason Code" := "Reason Code";
        JobJnlLine."Source Code" := "Source Code";
        //JobJnlLine."Post Job Entry Only" := TRUE; //Removed in NAV2009
        JobJnlLine."Posting No. Series" := "Posting No. Series";
        JobJnlLine."Source Currency Code" := "Currency Code";
        JobJnlLine."Employee No." := "Employee No.";
        JobJnlLine."Wage Component" := "Wage Component";
        IF (JobJnlLine."Wage Component" = '') AND ("Cost Plus Line No." <> 0) THEN
          IF ServiceOrderCostPlusEntry.GET(COPYSTR(Comment, 1, 20), "Cost Plus Line No.") THEN
            JobJnlLine."Wage Component" := ServiceOrderCostPlusEntry."Wage Component";
        JobJnlLine.Element := Element;
        JobJnlLine."Extension Contract" := "Extension Contract";
        JobJnlLine."Item No." := "Item No.";
        JobJnlLine."Basic Item" := "Basic Item";
        JobJnlLine."Trade Item" := "Trade Item";
        JobJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        JobJnlLine.Manufacturer := Manufacturer;
        JobJnlLine."Service Order No." := "Service Order No.";
        JobJnlLine."Service Contract No." := "Service Contract No.";
        JobJnlLine."Service Location No." := "Service Location No.";
        JobJnlLine."Rental Unit" := "Rental Unit";
        JobJnlLine."Purchase Action" := "Purchase Action";
        JobJnlLine."Project Interest" := "Project Interest"; //jth 09-11-2004
        JobJnlLine."Cost Component" := "Cost Component";
        JobJnlLine."FSC Type Code" := "FSC Type Code"; //#C028628.n
        JobJnlLine.Comment := Comment;
        DeterminePostingGroup(GenJnlLine, JobJnlLine."Vendor Posting Group", JobJnlLine."Customer Posting Group");

        //>>190219, 190425
        CASE "Source Type" OF
        //>>190219
          "Source Type"::Vendor: JobJnlLine.Vendor := "Source No.";
        //<<190219

        //>>190425
          "Source Type"::Customer: JobJnlLine.Principal := "Source No.";
        //<<190425
        END;

        JobJnlPostLine.SetOriginSalaryApplication("Origin Salary Application");
        IF lvPost THEN
          JobJnlPostLine.RunWithCheck(JobJnlLine);
        JobJnlPostLine.SetOriginSalaryApplication(FALSE);
        //>> 140324 ITERO.SB Handle periodic periods for project lines
        IF "Periodic Template Code"<>'' THEN BEGIN
          PostPeriodicProject(GenJnlLine,TRUE);
        END;
        //<<
        IF ("Receiving Company" <> '') THEN
          DimValRec.CHANGECOMPANY(COMPANYNAME);

      END;
    END;

    PROCEDURE PostService@1210190002(GenJnlLine@1100528400 : Record 81);
    VAR
      ServiceOrderCostPlusEntry@1100529600 : Record 11012825;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN

        IF ("Receiving Company" <> '') THEN
          DimValRec.CHANGECOMPANY("Receiving Company");

        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, '');

        ServJnlLine.INIT;
        ServJnlLine."Service Contract No." := "Service Contract No.";
        ServJnlLine."Service Order No." := "Service Order No.";
        ServJnlLine."Service Category" := "Service Category";
        ServJnlLine."Service Location No." := "Service Location No.";
        ServJnlLine."Document No." := GenJnlLine5."Document No.";
        ServJnlLine."G/L Account" := "Account No.";
        ServJnlLine."Posting Date" := "Posting Date";
        ServJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ServJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ServJnlLine."Dimension Set ID" := "Dimension Set ID";
        ServJnlLine.Description := Description;
        ServJnlLine."Description 2" := "Description 2";  //**4PS01.n
      //ServJnlLine.Quantity := Quantity;  //C011173.o
        ServJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ServJnlLine."Currency Code" := "Currency Code"; // dp00116.n
        IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) OR ("Cost Plus Line No." <> 0) THEN BEGIN
          ServJnlLine."Entry Type" := ServJnlLine."Entry Type"::Sale; //C022170.n
          ServJnlLine.Quantity := -Quantity;  //C011173.n
          IF Quantity = 0 THEN
            ServJnlLine.VALIDATE("Sales Price (LCY)", -"VAT Base Amount (LCY)")
          ELSE
            ServJnlLine.VALIDATE("Sales Price (LCY)", -"VAT Base Amount (LCY)"/Quantity);
          ServJnlLine.VALIDATE("Total Revenue (LCY)", -ROUND("VAT Base Amount (LCY)"));
        END ELSE BEGIN
          ServJnlLine."Entry Type" := ServJnlLine."Entry Type"::Usage; //C022170.n
          ServJnlLine.Quantity := Quantity;  //C011173.n
          IF Quantity = 0 THEN
            ServJnlLine.VALIDATE("Unit Cost (LCY)", "VAT Base Amount (LCY)")
          ELSE
            ServJnlLine.VALIDATE("Unit Cost (LCY)", "VAT Base Amount (LCY)" / Quantity);
          ServJnlLine.VALIDATE("Total Cost (LCY)", ROUND("VAT Base Amount (LCY)"));
        END;
        ServJnlLine."Employee No." := "Employee No.";
        ServJnlLine."Wage Component" := "Wage Component";
        ServJnlLine."Source Code" := "Source Code";
        ServJnlLine."Reason Code" := "Reason Code";
        ServJnlLine."Item No." := "Item No.";
        ServJnlLine."Basic Item" := "Basic Item";
        ServJnlLine."Trade Item" := "Trade Item";
        ServJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ServJnlLine.Manufacturer := Manufacturer;
        ServJnlLine."Project No." := "Job No.";
        ServJnlLine."Additional Cost" := "Additional Cost (Service)";  //db, 24-11-05
        ServJnlLine."Cost Component" := "Cost Component";
        DeterminePostingGroup(GenJnlLine, ServJnlLine."Vendor Posting Group", ServJnlLine."Customer Posting Group");
        ServJnlLine."Cost Plus Line No." := "Cost Plus Line No.";
        IF "Cost Plus Line No." <> 0 THEN
          IF ServiceOrderCostPlusEntry.GET("Service Order No.", "Cost Plus Line No.") THEN BEGIN
            ServJnlLine."Customer No." := ServiceOrderCostPlusEntry."Bill-to Customer No.";
            ServJnlLine."Collective List No." := ServiceOrderCostPlusEntry."Collective List No.";
            ServJnlLine."Service Invoice" := TRUE;
          END;
        IF ("Service Order No." = '') AND ("Service Contract No." <> '') THEN
          IF ServJnlLine."Service Control Period Date" = 0D THEN
            ServJnlLine."Service Control Period Date" := "Posting Date";

        ServJnlPostLine.RunWithCheck(ServJnlLine);
        //>> 140324 ITERO.SB Handle periodic periods for Service lines
        IF "Periodic Template Code"<>'' THEN BEGIN
          PostPeriodicService(GenJnlLine);
        END;
        //<<

        IF ("Receiving Company" <> '') THEN
          DimValRec.CHANGECOMPANY(COMPANYNAME);

      END;
    END;

    PROCEDURE PostPlant@1210190000(GenJnlLine@1100525001 : Record 81);
    VAR
      lRecFixedAsset@1210190000 : Record 5600;
      PlantSetup@1210190001 : Record 11012550;
      lvPlantTypeRec@1100525000 : Record 11012551;
      PlantCostComp@1100409002 : Record 11012575;
      InsertPlantOrderMgt@1100409000 : Codeunit 11012552;
      lSign@1210190002 : Integer;
      Immediately@1100409003 : Integer;
      PlantOrderNo@1100409001 : Code[20];
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      WITH PlantLedgerEntry DO BEGIN
        IF (FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup)) THEN
          IF (PlantSetup.GET AND PlantSetup."Integration Fixed Assets") THEN
            IF ((GenJnlLine."Plant Type" = '') AND
                (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"Fixed Asset") AND
                (GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation) )
            THEN BEGIN
              //* Trigger 'Correctie exitorder', see also CU 5642+11012559 (call 7037)
              IF GenJnlLine."Reason Code" = 'EXIT-CORR' THEN
                EXIT;
              IF GenJnlLine."Depreciation Book Code" <> lRecFixedAsset.GetFA_MainDeprBook(GenJnlLine."Account No.", FALSE) THEN
                EXIT;
              IF (GenJnlTemplate.Type = GenJnlTemplate.Type::General) AND (GenJnlBatch."Suppress Plant Entry Depr.") THEN //C018453.n
                EXIT;
              lRecFixedAsset.GET(GenJnlLine."Account No.");
              lRecFixedAsset.CALCFIELDS("Plant Type", "Plant No.");
              GenJnlLine."Plant Type" := lRecFixedAsset."Plant Type";
              GenJnlLine."Plant No." := lRecFixedAsset."Plant No.";
              //C018452.sn
              IF GenJnlLine."Plant No." = '' THEN BEGIN
                lRecFixedAsset.CalcFields_PlantMainAsset(lRecFixedAsset, 0);
                IF lRecFixedAsset."Plant No. (Main Asset)" <> '' THEN BEGIN
                  GenJnlLine."Plant Type" := lRecFixedAsset."Plant Type (Main Asset)";
                  GenJnlLine."Plant No." := lRecFixedAsset."Plant No. (Main Asset)";
                END;
              END;
              //C018452.en
              PlantSetup.TESTFIELD("Cost Component Depreciation");
              GenJnlLine."Cost Component Plant" := PlantSetup."Cost Component Depreciation";

              //>> LAHE 130425
              IF GenJnlLine."Plant No." = '' THEN BEGIN
                FA := lRecFixedAsset;
                IF (FA."Main Asset/Component" = FA."Main Asset/Component"::Component)
                  AND (FA."Plant No." = '')
                THEN BEGIN
                  FAMain.GET(FA."Component of Main Asset"); // delib error
                  FAMain.CALCFIELDS("Plant Type", "Plant No.");
                  IF FAMain."Plant No." <> '' THEN BEGIN
                    GenJnlLine."Plant Type" := FAMain."Plant Type";
                    GenJnlLine."Plant No." := FAMain."Plant No.";
                  END;
                END;
              END;
              //<< LAHE 130425
            END;

        IF (GenJnlLine."Plant Type" = '') OR (GenJnlLine."Receiving Company" <> '') THEN
          EXIT;

        GenJnlLine.TESTFIELD("Cost Component Plant");

        PlantSetup.GET;
        IF PlantSetup."Integration Fixed Assets" THEN BEGIN
          lvPlantTypeRec.GET(GenJnlLine."Plant Type");
          IF lvPlantTypeRec."Integration Fixed Assets" THEN BEGIN
            IF (GenJnlLine.CheckPlantAcqOrRent() = 1) THEN
              EXIT;
          END;
        END;

        IF GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation THEN
          lSign := -1
        ELSE
          lSign := 1;
        INIT;
        "Document No." := GenJnlLine5."Document No.";
        "Posting Date" := GenJnlLine."Posting Date";
        "Document Date" := GenJnlLine."Document Date";
        "Account No." := GenJnlLine."Account No.";
        Description := GenJnlLine.Description;
        "Description 2" := GenJnlLine."Description 2";  //**4PS01.n
        Quantity := lSign * GenJnlLine.Quantity;
        IF GenJnlLine.Quantity = 0 THEN
          "Direct Unit Cost" := lSign * GenJnlLine."VAT Base Amount (LCY)"
        ELSE
          "Direct Unit Cost" := GenJnlLine."VAT Base Amount (LCY)"/Quantity;
        "Unit Cost" := "Direct Unit Cost";
        "Total Cost" := lSign * ROUND(GenJnlLine."VAT Base Amount (LCY)");
        "Unit of Measure Code" := GenJnlLine."Unit of Measure Code";
        "Department Code" := GenJnlLine."Shortcut Dimension 1 Code";
        "Cost Object" := GenJnlLine."Shortcut Dimension 2 Code";
        "Dimension Set ID" := GenJnlLine."Dimension Set ID";
        "Source Code" := GenJnlLine."Source Code";
        "Reason Code" := GenJnlLine."Reason Code";
        "Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
        //"Plant Posting Group" := GenJnlLine."Posting Group";  //*27818.o
        "No. Series" := GenJnlLine."Posting No. Series";
        "Plant Type" := GenJnlLine."Plant Type";
        "Plant No." := GenJnlLine."Plant No.";
        "Cost Component" := GenJnlLine."Cost Component Plant";
        //*27818.sn
        IF "Plant Type" <> '' THEN BEGIN
          IF lvPlantTypeRec.GET("Plant Type") THEN
            "Plant Posting Group" := lvPlantTypeRec.PlantPostingGrp("Plant No.", '', '');
        END;
        //*27818.en
        PostPlantEntry.RUN(PlantLedgerEntry);
      END;

      //C001519.sn
      IF (GenJnlLine."Cost Component Plant" <> '') THEN BEGIN
        PlantCostComp.GET(GenJnlLine."Cost Component Plant");
        IF PlantCostComp."Charge Purchase" THEN BEGIN
          GenJnlLine.TESTFIELD("Plant Location");
          PlantOrderNo := '';
          IF PlantCostComp."Immediately Post Charge Purch." THEN
            Immediately := 1;
          IF TmpPlantLocChargePO.GET(GenJnlLine."Plant Location", Immediately) THEN
            PlantOrderNo := TmpPlantLocChargePO."Document No.";
          InsertPlantOrderMgt.InsertPlantOrderOnChargePurch(PlantOrderNo,GenJnlLine."Plant Location",PlantLedgerEntry,PlantCostComp);
          IF NOT TmpPlantLocChargePO.GET(GenJnlLine."Plant Location", Immediately) THEN BEGIN
            TmpPlantLocChargePO.INIT;
            TmpPlantLocChargePO.Location := GenJnlLine."Plant Location";
            TmpPlantLocChargePO."Line No." := Immediately;
              // Field used for 'Immediately Posting' of the created Plant Order(s)
            TmpPlantLocChargePO."Delete Remainder" := PlantSetup."Extended Picking Procedure";
              //Field used for 'Release Plant Order' needed
            TmpPlantLocChargePO."Document No." := PlantOrderNo;  // Doc.No is used for Plant Order No.
            TmpPlantLocChargePO.INSERT;
          END;
        END;
      END;
      //C001519.en
    END;

    PROCEDURE PostPlantOrderChargePurch@1100409001();
    VAR
      PlantOrder@1100409001 : Record 11012556;
      ExtentedPlantOrdeFunc@1100409000 : Codeunit 11020503;
      PostPlantOrder@1100409002 : Codeunit 11012553;
    BEGIN
      //**4PS (C001519)
      TmpPlantLocChargePO.RESET;
      TmpPlantLocChargePO.SETRANGE("Line No.", 1);
      IF TmpPlantLocChargePO.FINDSET THEN BEGIN
        REPEAT
          PlantOrder.GET(TmpPlantLocChargePO."Document No.");
          IF TmpPlantLocChargePO."Delete Remainder" THEN BEGIN
            ExtentedPlantOrdeFunc.SetChargePurchRun();
            ExtentedPlantOrdeFunc.RunReleasePlantOrder(PlantOrder);
          END;
          PostPlantOrder.SetChargePurchRun();
          PostPlantOrder.RUN(PlantOrder);
        UNTIL TmpPlantLocChargePO.NEXT = 0;
      END;
      TmpPlantLocChargePO.RESET;
      TmpPlantLocChargePO.DELETEALL;
    END;

    PROCEDURE PostSurcharge@1210190009(GenJnlLine@1100528400 : Record 81;Origin@1210190002 : 'Project,Service');
    VAR
      PostingMgt@1100525000 : Codeunit 11012360;
      SurchargePostingBuffer@1100525003 : ARRAY [2] OF TEMPORARY Record 49;
      ComplWIPPostingBuffer@1100525001 : ARRAY [2] OF TEMPORARY Record 49;
      Counter@1100525002 : Integer;
    BEGIN
      //**4PS
      PostingMgt.BufferSurcharges(
        Origin,GenJnlLine,JobJnlLine,ServJnlLine,JobJnlPostLine,ServJnlPostLine,SurchargePostingBuffer,ComplWIPPostingBuffer);

      PostingMgt.PostSurchargesFromGenJnlLine(GenJnlLine,GenJnlPostLine,SurchargePostingBuffer,Counter);
      PostingMgt.PostSurchargesFromGenJnlLine(GenJnlLine,GenJnlPostLine,ComplWIPPostingBuffer,Counter);
    END;

    PROCEDURE PostSurchargeIC@1100525000(GenJnlLine@1100525007 : Record 81;lvOrigin@1210190000 : 'Project,Service,Indirect,InterCompany');
    VAR
      ICRec@1100525000 : Record 11012057;
      lvPostingSetup@1100525002 : Record 11020565;
      lvGenJnlLineSaveBeforeICRec1@1100525003 : Record 81;
      lvGenJnlLineSaveBeforeICRec2@1100525005 : Record 81;
      DimMgt@1100525006 : Codeunit 408;
      lvType@1210190008 : Code[20];
      lvOrigDim1@1210190007 : Code[20];
      lvOrigDim2@1210190006 : Code[20];
      lvDim1@1210190005 : Code[20];
      lvDim2@1210190004 : Code[20];
      lvAccount@1210190003 : Code[20];
      lvDesc@1210190002 : Text[100];
      lvCostTotal@1210190001 : Decimal;
      lvcostComp@1100485001 : Code[20];
      lvTotSurchAmount@1100485002 : Decimal;
      lvSourceType@1100525001 : 'Fixed,EmplOrFixed';
      lvICPosting@1100525004 : Boolean;
    BEGIN
      //Surcharges in supplying company should also be calculated at IC postings and an IC posting should be created.
      //Surcharge is set in SUPPLYING company.

      ICRec.GET(COMPANYNAME, GenJnlLine."Receiving Company");

      IF lvOrigin = lvOrigin::Project THEN BEGIN
        IF GenJnlLine."Service Order No." <> '' THEN EXIT;
        ProjRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        DimValRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        ProjRec.GET(GenJnlLine."Job No.");
        lvType := ProjRec."Project Type";
      //  ProjTypeRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
      //  ProjTypeRec.GET(lvType);
        lvOrigDim1 := ProjRec."Global Dimension 1 Code";
      END;

      IF lvOrigin = lvOrigin::Service THEN BEGIN
        ServOrderRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        DimValRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
        ServOrderRec.GET(GenJnlLine."Service Order No.");
        IF GenJnlLine."Additional Cost (Service)" = TRUE THEN
          lvType := ServOrderRec."Service Type (Other)"
        ELSE
          lvType := ServOrderRec."Service Type";
      //  ServTypeRec.CHANGECOMPANY(GenJnlLine."Receiving Company");
      //  ServTypeRec.GET(lvType);
        lvOrigDim1 := ServOrderRec."Global Dimension 1 Code";
      END;

      lvOrigDim2 := GenJnlLine."Shortcut Dimension 2 Code";
      DimMgt.GetDimValueRec(2, lvOrigDim2, DimValRec, TRUE, '');

      IF SurchargeRec.GetSurchargesIC(
        lvOrigin::InterCompany,lvType, GenJnlLine."Job No.",
        (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
        DimValRec."Cost Type", DimValRec.Code, '',
        lvOrigDim1, '', GenJnlLine."Cost Component", GenJnlLine."Posting Date",
        SurchargeRec, COMPANYNAME, lvSourceType::Fixed) THEN
      BEGIN
        REPEAT
          SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
          SurchargeRec.TESTFIELD("Coverage Account");

          IF lvOrigin = lvOrigin::Project THEN BEGIN

            JobJnlLine2."Job No." := GenJnlLine."Job No.";
            JobJnlLine2."Total Cost (LCY)" := GenJnlLine.Amount;
            JobJnlLine2."Quantity (Base)" := GenJnlLine.Quantity;
            JobJnlLine2.Quantity := GenJnlLine.Quantity;

            JobJnlLine2.InitSurchargeIC(JobJnlLine2, DimValRec, SurchDimValRec, SurchargeRec, lvOrigDim1, lvType,
                                        lvTotSurchAmount, GenJnlLine."Receiving Company");

            lvDim1 := JobJnlLine2."Shortcut Dimension 1 Code";
            lvDim2 := JobJnlLine2."Shortcut Dimension 2 Code";
            lvcostComp := JobJnlLine2."Cost Component";
            lvDesc := JobJnlLine2.Description;
            lvCostTotal := JobJnlLine2."Total Cost (LCY)";
            lvAccount:= JobJnlLine2."No.";
          END;

          IF lvOrigin = lvOrigin::Service THEN BEGIN

            ServJnlLine2."Service Order No." := GenJnlLine."Service Order No.";
            ServJnlLine2."Service Category" := GenJnlLine."Service Category";
            ServJnlLine2."Total Cost (LCY)" := GenJnlLine.Amount;
            ServJnlLine2.Quantity := GenJnlLine.Quantity;

            ServJnlLine2.InitSurchargeIC(ServJnlLine2, DimValRec, SurchDimValRec, SurchargeRec, lvOrigDim1,
                                         lvType, lvTotSurchAmount, GenJnlLine."Receiving Company");

            lvDim1 := ServJnlLine2."Shortcut Dimension 1 Code";
            lvDim2 := ServJnlLine2."Shortcut Dimension 2 Code";
            lvcostComp := ServJnlLine2."Cost Component";
            lvDesc := ServJnlLine2.Description;
            lvCostTotal := ServJnlLine2."Total Cost (LCY)";
            lvAccount:= ServJnlLine2."G/L Account";
          END;

          //Post Debit Line
            GenJnlLine6.INIT;
            GenJnlLine6."Source Code" := GenJnlLine3."Source Code";
            GenJnlLine6."Reason Code" := GenJnlLine3."Reason Code";
            GenJnlLine6."Journal Template Name" := GenJnlLine3."Journal Template Name";
            GenJnlLine6."Journal Batch Name" := GenJnlLine3."Journal Batch Name";
            GenJnlLine6."Line No." := GenJnlLine3."Line No.";
            GenJnlLine6."Account Type" := GenJnlLine6."Account Type"::"G/L Account";
            GenJnlLine6."Account No." := lvAccount;
            GenJnlLine6."Posting Date" := GenJnlLine3."Posting Date";
            GenJnlLine6."Document Type" := GenJnlLine3."Document Type";
            GenJnlLine6."Document No." := GenJnlLine3."Document No.";
            GenJnlLine6."Document Date" := GenJnlLine3."Document Date";
            GenJnlLine6."System-Created Entry" := TRUE;
      // GenJnlLine3 replaced by GenJnlLine several times
      // because project data not in ..3 anymore after reversal posting.
      // M23183 s
            GenJnlLine6."Receiving Company" := GenJnlLine."Receiving Company";
            GenJnlLine6."Job No." := GenJnlLine."Job No.";
            IF (GenJnlLine."Job No." <> '') AND (SurchargeRec."Element Surcharge" <> '') THEN
              GenJnlLine6.Element := SurchargeRec."Element Surcharge"
            ELSE
              GenJnlLine6.Element := GenJnlLine.Element;
            GenJnlLine6."Extension Contract" := GenJnlLine."Extension Contract";
            GenJnlLine6."Service Order No." := GenJnlLine."Service Order No.";
            GenJnlLine6."Service Contract No." := GenJnlLine."Service Contract No.";
            GenJnlLine6."Service Location No." := GenJnlLine."Service Location No.";
            GenJnlLine6."Service Category" := GenJnlLine."Service Category";
      // M23183 e
            GenJnlLine6."Shortcut Dimension 1 Code" := lvDim1;
            GenJnlLine6."Shortcut Dimension 2 Code" := lvDim2;
            GenJnlLine6."Cost Component" := lvcostComp;
            GenJnlLine6.Description := lvDesc;
      //      GenJnlLine6."Description 2" := lvDesc2;  //**4PS01.n
            GenJnlLine6.Amount := lvCostTotal;
            GenJnlLine6.VALIDATE(Amount);

            DimMgt.SetCompany(GenJnlLine6."Receiving Company");                                                           //**4PS DP00387 sn
            DimMgt.ValidateShortcutDimValues(1,GenJnlLine6."Shortcut Dimension 1 Code",GenJnlLine6."Dimension Set ID");
            DimMgt.ValidateShortcutDimValues(2,GenJnlLine6."Shortcut Dimension 2 Code",GenJnlLine6."Dimension Set ID");
            DimMgt.SetCompany(COMPANYNAME);                                                                              //**4PS DP00387 en
            //Post Debit Line
            //M23183 sn
            lvGenJnlLineSaveBeforeICRec1 := GenJnlLine3; //GenJnlLine3 used in checkpostic
            lvGenJnlLineSaveBeforeICRec2 := GenJnlLine; //GenJnlLine used in createic

      //    GenJnlLine := GenJnlLine6; //C039400.o
            lvICPosting := CheckPostIC(GenJnlLine6,FALSE); //C039400.c
            //GenJnlLine6 := GenJnlLine3; //restore values for rest of function
            GenJnlLine6."Account No." := GenJnlLine3."Account No.";
            GenJnlLine6.VALIDATE(Amount);
            GenJnlLine3 := lvGenJnlLineSaveBeforeICRec1; //restore values for rest of function
            GenJnlLine  := lvGenJnlLineSaveBeforeICRec2; //restore values for rest of function


            GenJnlLine6."Cost Component" := '';                                                                          //**4PS DP00387 sn
            GenJnlLine6."Job No." := '';
            GenJnlLine6.Element := '';
            GenJnlLine6."Extension Contract" := '';
            GenJnlLine6."Service Order No." := '';
            GenJnlLine6."Service Contract No." := '';
            GenJnlLine6."Service Location No." := '';
            GenJnlLine6."Service Category" := '';
            GenJnlLine6."Shortcut Dimension 1 Code" := '';
            GenJnlLine6."Shortcut Dimension 2 Code" := '';
            DimMgt.SetCompany(GenJnlLine6."Receiving Company");
            DimMgt.ValidateShortcutDimValues(1,GenJnlLine6."Shortcut Dimension 1 Code",GenJnlLine6."Dimension Set ID");
            DimMgt.ValidateShortcutDimValues(2,GenJnlLine6."Shortcut Dimension 2 Code",GenJnlLine6."Dimension Set ID");
            DimMgt.SetCompany(COMPANYNAME);                                                                              //**4PS DP00387 en

            GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
            //M23183 en
            GenJnlPostLine.RunWithoutCheck(GenJnlLine6);


            lvPostingSetup.INIT;

            IF (lvOrigin = lvOrigin::Project) AND
               (lvPostingSetup.GET(GenJnlLine."Source Code", COMPANYNAME, GenJnlLine."Receiving Company")) THEN
            BEGIN
              lvPostingSetup.TESTFIELD("Prod. Account Debit");
              lvPostingSetup.TESTFIELD("Prod. Account Credit");
              PostComplementaryWIPSurcharge(lvOrigin, lvPostingSetup."Prod. Account Debit", GenJnlLine6);
            END;

            IF (lvOrigin = lvOrigin::Service) AND
               (lvPostingSetup.GET(GenJnlLine."Source Code", COMPANYNAME, GenJnlLine."Receiving Company")) THEN
            BEGIN
              lvPostingSetup.TESTFIELD("Prod. Account Debit");
              lvPostingSetup.TESTFIELD("Prod. Account Credit");
              PostComplementaryWIPSurcharge(lvOrigin, lvPostingSetup."Prod. Account Debit", GenJnlLine6);
            END;

            //Post Credit Line
            GenJnlLine6."Account No." := SurchargeRec."Coverage Account";
            GenJnlLine6."Shortcut Dimension 1 Code" := '';
            //CASE SurchargeRec."Source Type Department" OF          //**4PS DP00387 old
              //SurchargeRec."Source Type Department"::Job:          //**4PS DP00387 old
              //  GenJnlLine6."Shortcut Dimension 1 Code" := lvDim1; //**4PS DP00387 old
              //SurchargeRec."Source Type Department"::Fixed:        //**4PS DP00387 old
            IF SurchargeRec."Source Type Department" = SurchargeRec."Source Type Department"::Fixed THEN BEGIN //**4PS DP00387 new
                GenJnlLine6."Shortcut Dimension 1 Code" := SurchargeRec."Coverage Department"
            END;
            //GenJnlLine6."Shortcut Dimension 2 Code" := lvDim2;     //**4PS DP00387 old

            IF SurchargeRec."Compress Coverage Posting" THEN BEGIN  //Call C006064 newline
              GenJnlLine6."Cost Component" := '';
              GenJnlLine6."Job No." := '';
              GenJnlLine6.Element := '';
              GenJnlLine6."Extension Contract" := '';
              GenJnlLine6."Service Order No." := '';
              GenJnlLine6."Service Contract No." := '';
              GenJnlLine6."Service Location No." := '';
              GenJnlLine6."Service Category" := '';
            END;                                                   //Call C006064 newline

            GenJnlLine6.Amount := lvCostTotal * -1;
            //Post in current company.
            DimMgt.ValidateShortcutDimValues(1,GenJnlLine6."Shortcut Dimension 1 Code",GenJnlLine6."Dimension Set ID");  //**4PS DP00387 sn
            DimMgt.ValidateShortcutDimValues(2,GenJnlLine6."Shortcut Dimension 2 Code",GenJnlLine6."Dimension Set ID"); //**4PS DP00387 en

            GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
            GenJnlPostLine.RunWithoutCheck(GenJnlLine6);

            GenJnlLine6."Shortcut Dimension 1 Code" := lvDim1;
            GenJnlLine6."Shortcut Dimension 2 Code" := lvDim2;
            GenJnlLine6."Cost Component" := lvcostComp;

            IF lvOrigin = lvOrigin::Project THEN BEGIN
              GenJnlLine6."Closed Project No." := JobJnlLine."Job No.";
              GenJnlLine6."Closed Service Order No." := JobJnlLine."Service Order No.";
              GenJnlLine6."Closed Service Contract No." := JobJnlLine."Service Contract No.";
            END;
            IF lvOrigin = lvOrigin::Service THEN BEGIN
              GenJnlLine6."Closed Project No." := ServJnlLine."Project No.";
              GenJnlLine6."Closed Service Order No." := ServJnlLine."Service Order No.";
              GenJnlLine6."Closed Service Contract No." := ServJnlLine."Service Contract No.";
            END;

            IF (lvOrigin = lvOrigin::Project) AND (lvPostingSetup."Prod. Account Credit" <> '') THEN BEGIN
              PostComplementaryWIPSurcharge(lvOrigin, lvPostingSetup."Prod. Account Credit", GenJnlLine6);
            END;
            IF (lvOrigin = lvOrigin::Service) AND (lvPostingSetup."Prod. Account Credit" <> '')  THEN BEGIN
              PostComplementaryWIPSurcharge(lvOrigin, lvPostingSetup."Prod. Account Credit", GenJnlLine6);
            END;

        UNTIL SurchargeRec.NEXT = 0;
      END;

      ProjRec.CHANGECOMPANY(COMPANYNAME);
      ServOrderRec.CHANGECOMPANY(COMPANYNAME);
      DimValRec.CHANGECOMPANY(COMPANYNAME);
    END;

    PROCEDURE SelectFirstValidGenJnlLine@1210190004(VAR GenJnlLine@1100525000 : Record 81;Which@1210190001 : Text[30]) rvLineFound@1210190000 : Boolean;
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN
        rvLineFound := FALSE;
        IF Which = '-' THEN
          Ok := FINDSET(TRUE,FALSE)
        ELSE
          Ok := FIND(Which);
        IF Ok THEN BEGIN
          StartLineNo2 := "Line No.";   //* Not 'StartLineNo' because also used at 'CheckBalance'
          rvLineFound := TRUE;
          IF GenJnlTemplate.Recurring THEN BEGIN
            //**4PS 06-04-2010 test on recurringmethod added (filter on amount was removed)
            IF ((GenJnlLine."Recurring Method" <> GenJnlLine."Recurring Method"::"B  Balance") AND
                (GenJnlLine."Recurring Method" <> GenJnlLine."Recurring Method"::"RB Reversing Balance") AND
                (Amount = 0)) OR
               (("Expiration Date" <> 0D) AND ("Posting Date" > "Expiration Date")) THEN
              rvLineFound := SelectNextValidGenJnlLine(GenJnlLine);
          END;
        END;
      END;
    END;

    PROCEDURE SelectNextValidGenJnlLine@1210190003(VAR GenJnlLine@1100525000 : Record 81) rvLineFound@1210190000 : Boolean;
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN
        rvLineFound := FALSE;
        IF NEXT = 0 THEN
          FINDFIRST;
        IF "Line No." <> StartLineNo2 THEN BEGIN
          rvLineFound := TRUE;
          IF GenJnlTemplate.Recurring THEN BEGIN
            //**4PS 06-04-2010 test on recurringmethod added (filter on amount was removed)
            WHILE (((GenJnlLine."Recurring Method" <> GenJnlLine."Recurring Method"::"B  Balance") AND
                   (GenJnlLine."Recurring Method" <> GenJnlLine."Recurring Method"::"RB Reversing Balance") AND
                   (Amount = 0)) OR
                   (("Expiration Date" <> 0D) AND ("Posting Date" > "Expiration Date"))) AND
                  (rvLineFound = TRUE) DO BEGIN
              IF NEXT = 0 THEN
                FINDFIRST;
              IF "Line No." = StartLineNo2 THEN
                rvLineFound := FALSE;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PostComplementaryWIPProj@1100485002(lvGenJnlLine@1100485004 : Record 81);
    VAR
      ProjectType@1100485003 : Record 11012009;
      GenJnlLine1@1100485006 : Record 81;
      AccountNo@1100485005 : Code[20];
      Dim1@1100485007 : Code[20];
      lvPostingSetup@1100525000 : Record 11020565;
      DimMgt@1100525001 : Codeunit 408;
      lvVendorPostingGroup@1100528200 : Code[20];
      lvCustomerPostingGroup@1100528201 : Code[20];
    BEGIN
      //**4PS
      IF lvGenJnlLine."Account No." = '' THEN
        EXIT;

      IF (JobJnlLine."Total Cost (LCY)" = 0) AND
         (JobJnlLine."Total Price (LCY)" = 0) THEN
        EXIT;

      WITH lvGenJnlLine DO BEGIN

        IF "Receiving Company" = '' THEN BEGIN
          ProjRec.GET("Job No.");
          ProjRec.TESTFIELD("Project Type");
          ProjectType.GET(ProjRec."Project Type");

          DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimValRec,TRUE,'');
          IF DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue THEN BEGIN
            IF (JobJnlLine."Total Cost (LCY)" = 0) OR
               (NOT ProjectType."Post Complementary Costs") THEN
              EXIT;
          END ELSE BEGIN
            IF (JobJnlLine."Total Price (LCY)" = 0) OR
               (NOT ProjectType."Post Complementary Revenues") OR
               JobJnlLine."Advance Payment"
            THEN
              EXIT;
          END;
        END ELSE BEGIN
          IF (JobJnlLine."Total Cost (LCY)" = 0) THEN
            EXIT;
          IF NOT lvPostingSetup.GET("Source Code",COMPANYNAME,"Receiving Company") THEN
            EXIT;
        END;

        DeterminePostingGroup(lvGenJnlLine,lvVendorPostingGroup,lvCustomerPostingGroup);

        IF "Receiving Company" = '' THEN
          DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimValRec,TRUE,'')
        ELSE
          "Shortcut Dimension 2 Code" := '';

        //Dimensions
        Dim1 := '';

        IF "Receiving Company" = '' THEN     //**4PS 13-04-2010
          Dim1 := JobJnlLine."Shortcut Dimension 1 Code";

        //Post Debit Line
        IF "Receiving Company" = '' THEN
          AccountNo := ProjectType.GetComplWIPCoverAcc(DimValRec."Cost Type",lvVendorPostingGroup,lvCustomerPostingGroup)
        ELSE
          IF lvPostingSetup.GET("Source Code",COMPANYNAME,"Receiving Company") THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Debit");
            AccountNo := lvPostingSetup."Prod. Account Debit";
          END;

        GenJnlLine1.INIT;
        GenJnlLine1."Journal Template Name" := "Journal Template Name";
        GenJnlLine1."Journal Batch Name" := "Journal Batch Name";
        GenJnlLine1."Source Code" := "Source Code";
        GenJnlLine1."Reason Code" := "Reason Code";
        GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
        GenJnlLine1."Account No." := AccountNo;
        GenJnlLine1."Posting Date" := "Posting Date";
        GenJnlLine1."Document Type" := "Document Type";
        GenJnlLine1."Document No." := "Document No.";
        GenJnlLine1."System-Created Entry" := TRUE;
        GenJnlLine1."Document Date" := "Document Date";
        GenJnlLine1.Description := Description;
        GenJnlLine1."Description 2" := "Description 2";  //**4PS01.n
        GenJnlLine1."Bal. Account No." := '';
        IF ("Receiving Company" = '') AND
           (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) THEN
          GenJnlLine1.Amount := -JobJnlLine."Total Price (LCY)"
        ELSE
          GenJnlLine1.Amount := -JobJnlLine."Total Cost (LCY)";
        GenJnlLine1.VALIDATE(Amount);

        GenJnlLine1."Shortcut Dimension 1 Code" := Dim1;
        GenJnlLine1."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine1."Dimension Set ID" := "Dimension Set ID";
        DimMgt.ValidateShortcutDimValues(1,GenJnlLine1."Shortcut Dimension 1 Code",GenJnlLine1."Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,GenJnlLine1."Shortcut Dimension 2 Code",GenJnlLine1."Dimension Set ID");

        GenJnlLine1."Closed Project No." := "Job No.";
        GenJnlLine1."Origin Type" := "Origin Type";
        GenJnlLine1."Cost Component" := "Cost Component";

        GenJnlPostLine.RunWithCheck(GenJnlLine1);

        //Post Credit Line
        IF "Receiving Company" = '' THEN
          AccountNo := ProjectType.GetComplWipAcc(DimValRec."Cost Type",lvVendorPostingGroup,lvCustomerPostingGroup)
        ELSE
          IF lvPostingSetup.GET("Source Code", COMPANYNAME,"Receiving Company") THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Credit");
            AccountNo := lvPostingSetup."Prod. Account Credit";
          END;

        GenJnlLine1.INIT;
        GenJnlLine1."Journal Template Name" := "Journal Template Name";  //db, 07-04-10: M18772
        GenJnlLine1."Journal Batch Name" := "Journal Batch Name";        //db, 07-04-10: M18772
        GenJnlLine1."Source Code" := "Source Code";
        GenJnlLine1."Reason Code" := "Reason Code";
        GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
        GenJnlLine1."Account No." := AccountNo;
        GenJnlLine1."Posting Date" := "Posting Date";
        GenJnlLine1."Document Type" := "Document Type";
        GenJnlLine1."Document No." := "Document No.";
        GenJnlLine1."System-Created Entry" := TRUE;
        GenJnlLine1."Document Date" := "Document Date";
        GenJnlLine1.Description := Description;
        GenJnlLine1."Description 2" := "Description 2";  //**4PS01.n
        GenJnlLine1."Bal. Account No." := '';
        IF ("Receiving Company" = '') AND
           (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) THEN
          GenJnlLine1.Amount := JobJnlLine."Total Price (LCY)"
        ELSE
          GenJnlLine1.Amount := JobJnlLine."Total Cost (LCY)";
        GenJnlLine1.VALIDATE(Amount);

        GenJnlLine1."Shortcut Dimension 1 Code" := Dim1;
        GenJnlLine1."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine1."Dimension Set ID" := "Dimension Set ID";
        DimMgt.ValidateShortcutDimValues(1,GenJnlLine1."Shortcut Dimension 1 Code",GenJnlLine1."Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,GenJnlLine1."Shortcut Dimension 2 Code",GenJnlLine1."Dimension Set ID");

        GenJnlLine1."Closed Project No." := "Job No.";
        GenJnlLine1."Origin Type" := "Origin Type";
        GenJnlLine1."Cost Component" := "Cost Component";

        GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
        GenJnlPostLine.RunWithCheck(GenJnlLine1);
      END;
    END;

    PROCEDURE PostComplementaryWIPServ@1100485005(lvGenJnlLine@1100485004 : Record 81);
    VAR
      ServiceType@1100485003 : Record 11012814;
      GenJnlLine1@1100485006 : Record 81;
      AccountNo@1100485005 : Code[20];
      Dim1@1100485007 : Code[20];
      lvPostingSetup@1100525000 : Record 11020565;
      DimMgt@1100525001 : Codeunit 408;
      lvVendorPostingGroup@1100528201 : Code[20];
      lvCustomerPostingGroup@1100528200 : Code[20];
    BEGIN
      //**4PS
      IF lvGenJnlLine."Account No." = '' THEN
        EXIT;


      IF (ServJnlLine."Total Cost (LCY)" = 0) AND
         (ServJnlLine."Total Revenue (LCY)" = 0) THEN
        EXIT;

      WITH lvGenJnlLine DO BEGIN

        IF "Receiving Company" = '' THEN BEGIN
          ServOrderRec.GET("Service Order No.");
          ServOrderRec.TESTFIELD("Service Type");
          ServiceType.GET(ServOrderRec."Service Type");

          DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimValRec,TRUE,'');
          IF DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue THEN BEGIN
            IF (ServJnlLine."Total Cost (LCY)" = 0) OR
               (NOT ServiceType."Post Complementary Costs") THEN
              EXIT;
          END ELSE BEGIN
            IF (ServJnlLine."Total Revenue (LCY)" = 0) OR
               (NOT ServiceType."Post Complementary Revenues") THEN
              EXIT;
          END;
        END ELSE BEGIN
          IF (ServJnlLine."Total Cost (LCY)" = 0) THEN
            EXIT;
          IF NOT lvPostingSetup.GET("Source Code",COMPANYNAME,"Receiving Company") THEN
            EXIT;
        END;

        DeterminePostingGroup(lvGenJnlLine,lvVendorPostingGroup,lvCustomerPostingGroup);

        IF "Receiving Company" = '' THEN
          DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimValRec,TRUE,'')
        ELSE
          "Shortcut Dimension 2 Code" := '';

        //Dimensions
        Dim1 := '';

        IF "Receiving Company" = '' THEN
          Dim1 := ServJnlLine."Shortcut Dimension 1 Code";

        //Post Debit Line
        IF "Receiving Company" = '' THEN
          AccountNo := ServiceType.GetComplWIPCoverAcc(DimValRec."Cost Type",lvVendorPostingGroup,lvCustomerPostingGroup,ServOrderRec)
        ELSE
          IF lvPostingSetup.GET("Source Code",COMPANYNAME,"Receiving Company") THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Debit");
            AccountNo := lvPostingSetup."Prod. Account Debit";
          END;

        GenJnlLine1.INIT;
        GenJnlLine1."Journal Template Name" := "Journal Template Name";  //db, 07-04-10: M18772
        GenJnlLine1."Journal Batch Name" := "Journal Batch Name";        //db, 07-04-10: M18772
        GenJnlLine1."Source Code" := "Source Code";
        GenJnlLine1."Reason Code" := "Reason Code";
        GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
        GenJnlLine1."Account No." := AccountNo;
        GenJnlLine1."Posting Date" := "Posting Date";
        GenJnlLine1."Document Type" := "Document Type";
        GenJnlLine1."Document No." := "Document No.";
        GenJnlLine1."System-Created Entry" := TRUE;
        GenJnlLine1."Document Date" := "Document Date";
        GenJnlLine1.Description := Description;
        GenJnlLine1."Bal. Account No." := '';
        IF ("Receiving Company" = '') AND
           (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) THEN
          GenJnlLine1.Amount := -ServJnlLine."Total Revenue (LCY)"
        ELSE
          GenJnlLine1.Amount := -ServJnlLine."Total Cost (LCY)";
        GenJnlLine1.VALIDATE(Amount);

        GenJnlLine1."Shortcut Dimension 1 Code" := Dim1;
        GenJnlLine1."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine1."Dimension Set ID" := "Dimension Set ID";
        DimMgt.ValidateShortcutDimValues(1,GenJnlLine1."Shortcut Dimension 1 Code",GenJnlLine1."Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,GenJnlLine1."Shortcut Dimension 2 Code",GenJnlLine1."Dimension Set ID");

        GenJnlLine1."Closed Service Contract No." := "Service Contract No.";
        GenJnlLine1."Closed Service Order No." := "Service Order No.";
        GenJnlLine1."Origin Type" := "Origin Type";
        GenJnlLine1."Cost Component" := "Cost Component";
        GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
        GenJnlPostLine.RunWithCheck(GenJnlLine1);

        //Post Credit Line
        IF "Receiving Company" = '' THEN
          AccountNo := ServiceType.GetComplWipAcc(DimValRec."Cost Type",lvVendorPostingGroup,lvCustomerPostingGroup)
        ELSE
          IF lvPostingSetup.GET("Source Code", COMPANYNAME,"Receiving Company") THEN BEGIN
            lvPostingSetup.TESTFIELD("Prod. Account Credit");
            AccountNo := lvPostingSetup."Prod. Account Credit";
          END;

        GenJnlLine1.INIT;
        GenJnlLine1."Journal Template Name" := "Journal Template Name";  //db, 07-04-10: M18772
        GenJnlLine1."Journal Batch Name" := "Journal Batch Name";        //db, 07-04-10: M18772
        GenJnlLine1."Source Code" := "Source Code";
        GenJnlLine1."Reason Code" := "Reason Code";
        GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
        GenJnlLine1."Account No." := AccountNo;
        GenJnlLine1."Posting Date" := "Posting Date";
        GenJnlLine1."Document Type" := "Document Type";
        GenJnlLine1."Document No." := "Document No.";
        GenJnlLine1."System-Created Entry" := TRUE;
        GenJnlLine1."Document Date" := "Document Date";
        GenJnlLine1.Description := Description;
        GenJnlLine1."Bal. Account No." := '';
        IF ("Receiving Company" = '') AND
           (DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue) THEN
          GenJnlLine1.Amount := ServJnlLine."Total Revenue (LCY)"
        ELSE
          GenJnlLine1.Amount := ServJnlLine."Total Cost (LCY)";
        GenJnlLine1.VALIDATE(Amount);

        GenJnlLine1."Shortcut Dimension 1 Code" := Dim1;
        GenJnlLine1."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine1."Dimension Set ID" := "Dimension Set ID";
        DimMgt.ValidateShortcutDimValues(1,GenJnlLine1."Shortcut Dimension 1 Code",GenJnlLine1."Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,GenJnlLine1."Shortcut Dimension 2 Code",GenJnlLine1."Dimension Set ID");

        GenJnlLine1."Closed Service Contract No." := "Service Contract No.";
        GenJnlLine1."Closed Service Order No." := "Service Order No.";
        GenJnlLine1."Origin Type" := "Origin Type";
        GenJnlLine1."Cost Component" := "Cost Component";
        GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
        GenJnlPostLine.RunWithCheck(GenJnlLine1);
      END;
    END;

    PROCEDURE PostComplementaryWIPSurcharge@1100485008(lvOrigin@1100485000 : Integer;lvAccount@1100485004 : Code[20];GenJnlLine@1100485002 : Record 81);
    BEGIN
      //**4PS
      //lvOrigin: 0=project, 1=service
      //Starting point is 'normal surcharge' record

      IF GenJnlLine.Amount = 0 THEN
        EXIT;

      WITH GenJnlLine DO BEGIN
        "Account No." := lvAccount;
        GenJnlPostLine.ReplacePostingDatePeriodic(gReplacePostingDatePeriodic);  //RFC135
        GenJnlPostLine.RunWithoutCheck(GenJnlLine);
      END;
    END;

    PROCEDURE SelectGLSetup@1100485000();
    BEGIN
      //**4PS
      IF NOT ReadGLSetup THEN BEGIN
        GLSetup.GET;
        ReadGLSetup := TRUE;
      END;
    END;

    LOCAL PROCEDURE HandleICApplication@1100529602(GenJournalLineCheck@1100529604 : Record 81);
    VAR
      ICClearingRelation@1100529606 : Record 11229426;
    BEGIN
      //**4PS
      ICClearingRelation.SETRANGE("Journal Template Name", GenJournalLineCheck."Journal Template Name");
      ICClearingRelation.SETRANGE("Journal Batch Name", GenJournalLineCheck."Journal Batch Name");
      ICClearingRelation.SETRANGE("Journal Line No.", GenJournalLineCheck."Line No.");
      IF ICClearingRelation.ISEMPTY THEN
        EXIT;

      IF NOT GenJournalLineCheck."IC Application" THEN BEGIN
        ICClearingRelation.DELETEALL;
        EXIT;
      END;

      ICClearingRelation.FINDSET(TRUE, TRUE);
      REPEAT
        IF CheckICClearingRelation(GenJournalLineCheck, ICClearingRelation) THEN
          ICClearingRelation.MODIFY
        ELSE
          ICClearingRelation.DELETE;
      UNTIL ICClearingRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckICClearingRelation@1100529604(GenJournalLineCheck@1100529607 : Record 81;VAR ICClearingRelation@1100529604 : Record 11229426) : Boolean;
    VAR
      GLEntryLoc@1100529601 : Record 17;
      ICGLEntryLoc@1100529602 : Record 17;
      ICCustLedgerEntry@1100529605 : Record 21;
      ICVendorLedgerEntry@1100529603 : Record 25;
      ICClearingRelationLoc@1100529606 : Record 11229426;
    BEGIN
      //**4PS
      IF (ICClearingRelation."Source Entry No." = 0) OR (ICClearingRelation."IC Source Entry No." = 0) THEN
        EXIT(FALSE);
      IF NOT GLEntryLoc.GET(ICClearingRelation."Source Entry No.") THEN
        EXIT(FALSE);
      IF (NOT GLEntryLoc."Intercompany Transaction") OR
         ((GLEntryLoc."Receiving Company" = '') AND (GLEntryLoc."Supplying Company" = '')) OR
         ((GLEntryLoc."Receiving Company" <> '') AND (GLEntryLoc."Receiving Company" <> ICClearingRelation."Receiving Company")) OR
         ((GLEntryLoc."Supplying Company" <> '') AND ( GLEntryLoc."Supplying Company" <> ICClearingRelation."Receiving Company"))
      THEN
        EXIT(FALSE);

      ICGLEntryLoc.CHANGECOMPANY(ICClearingRelation."Receiving Company");
      IF NOT ICGLEntryLoc.GET(ICClearingRelation."IC Source Entry No.") THEN
        EXIT(FALSE);

      ICClearingRelation."IC Application Entry No." := 0;
      ICClearingRelation."External Document No." := '';
      ICClearingRelation."Cust. Ledger Entry No." := 0;
      ICClearingRelation."Vendor Ledger Entry No." := 0;

      IF ICGLEntryLoc."IC Application Entry No." <> 0 THEN
        IF ICGLEntryLoc.GET(ICGLEntryLoc."IC Application Entry No.") THEN BEGIN
          ICClearingRelation."IC Application Entry No." := ICGLEntryLoc."Entry No.";
          ICClearingRelation."External Document No." := ICGLEntryLoc."Document No.";

          CASE GenJournalLineCheck."Account Type" OF
            GenJournalLineCheck."Account Type"::Customer:
              BEGIN
                ICVendorLedgerEntry.CHANGECOMPANY(ICClearingRelation."Receiving Company");
                ICVendorLedgerEntry.SETRANGE("Document No.", ICGLEntryLoc."Document No.");
                ICVendorLedgerEntry.SETRANGE("Posting Date", ICGLEntryLoc."Posting Date");
                ICVendorLedgerEntry.SETRANGE("Transaction No.", ICGLEntryLoc."Transaction No.");
                IF ICVendorLedgerEntry.FINDFIRST THEN
                  ICClearingRelation."Vendor Ledger Entry No." := ICVendorLedgerEntry."Entry No.";
              END;
            GenJournalLineCheck."Account Type"::Vendor:
              BEGIN
                ICCustLedgerEntry.CHANGECOMPANY(ICClearingRelation."Receiving Company");
                ICCustLedgerEntry.SETRANGE("Document No.", ICGLEntryLoc."Document No.");
                ICCustLedgerEntry.SETRANGE("Posting Date", ICGLEntryLoc."Posting Date");
                ICCustLedgerEntry.SETRANGE("Transaction No.", ICGLEntryLoc."Transaction No.");
                IF ICCustLedgerEntry.FINDFIRST THEN
                  ICClearingRelation."Cust. Ledger Entry No." := ICCustLedgerEntry."Entry No.";
              END;
          END;
       END;

      IF ICClearingRelation."IC Application Entry No." = 0 THEN BEGIN
        ICClearingRelationLoc.CHANGECOMPANY(ICClearingRelation."Receiving Company");
        ICClearingRelationLoc.SETRANGE("Source Entry No.", ICGLEntryLoc."Entry No.");
        IF ICClearingRelationLoc.FINDFIRST THEN BEGIN
          ICClearingRelationLoc.CALCFIELDS("Journal Document No.");
          ICClearingRelation."External Document No." := ICClearingRelationLoc."Journal Document No.";
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateICApplicationBuffer@1100529600(VAR GenJnlLine@1100529600 : Record 81);
    VAR
      ICClearingRelation@1100529601 : Record 11229426;
    BEGIN
      //**4PS
      ICClearingRelation.SETRANGE("Journal Template Name", GenJnlLine ."Journal Template Name");
      ICClearingRelation.SETRANGE("Journal Batch Name", GenJnlLine."Journal Batch Name");
      ICClearingRelation.SETRANGE("Journal Line No.", GenJnlLine."Line No.");
      IF ICClearingRelation.ISEMPTY THEN BEGIN
        GenJnlLine."IC Application" := FALSE;
        EXIT;
      END;

      ICClearingRelation.FINDFIRST;
      ICClearingRelation.SETFILTER("External Document No.", '<>%1', ICClearingRelation."External Document No.");
      IF NOT ICClearingRelation.ISEMPTY THEN BEGIN
        ICClearingRelation.SETRANGE("External Document No.");
        ICClearingRelation.DELETEALL;
        GenJnlLine."IC Application" := FALSE;
        EXIT;
      END;

      GenJnlLine."IC Application" := TRUE;
      IF ICClearingRelation."External Document No." = '' THEN
        GenJnlLine."External Document No." := GenJnlLine."Document No."
      ELSE
        GenJnlLine."External Document No." := ICClearingRelation."External Document No.";
    END;

    LOCAL PROCEDURE "***ITERO**"@1100285002();
    BEGIN
    END;

    PROCEDURE PostPeriodicService@1100285001(VAR GenJnlLine@1100583000 : Record 81);
    VAR
      PeriodicTemplate@1100285009 : Record 11128015;
      PerPostDate@1100285008 : Date;
      PeriodicCount@1100285007 : Integer;
      CalcDateExpr@1100285006 : Code[10];
      PerDiffSum@1100285005 : Decimal;
      PerDiff@1100285004 : Decimal;
      PerDiffSumAddCur@1100285003 : Decimal;
      PerDiffAddCur@1100285002 : Decimal;
      DimMgt@1000 : Codeunit 408;
    BEGIN
      // 140324 ITERO.SB Handle periodic periods when posting service
      WITH GenJnlLine DO BEGIN
        PeriodicTemplate.GET(GenJnlLine."Periodic Template Code");
        PeriodicTemplate.TESTFIELD("No. of Periods");
        PeriodicTemplate.TESTFIELD(Interval);
        PeriodicTemplate.TESTFIELD("Temp. G/L Acc.");

        IF ("Receiving Company" <> '') THEN
          DimValRec.CHANGECOMPANY("Receiving Company");

        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Job No.");

        ServJnlLine.INIT;
        ServJnlLine."Service Contract No." := "Service Contract No.";
        ServJnlLine."Service Order No." := "Service Order No.";
        ServJnlLine."Service Location No." := "Service Location No.";
        ServJnlLine."Document No." := GenJnlLine5."Document No.";
        ServJnlLine."G/L Account" := "Account No.";
        ServJnlLine."Posting Date" := "Posting Date";
        ServJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ServJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ServJnlLine.Description := PeriodicTemplate.Description;//Description;
        ServJnlLine."Description 2" := "Description 2";  //**4PS01.n
        ServJnlLine.Quantity := Quantity;
        ServJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ServJnlLine."Currency Code" := "Currency Code"; // dp00116.n
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN BEGIN
          IF Quantity = 0 THEN
            ServJnlLine.VALIDATE("Sales Price (LCY)", "VAT Base Amount (LCY)")
          ELSE
            ServJnlLine.VALIDATE("Sales Price (LCY)", "VAT Base Amount (LCY)"/Quantity);
          ServJnlLine.VALIDATE("Total Revenue (LCY)", ROUND("VAT Base Amount (LCY)"));
        END ELSE BEGIN
          IF Quantity = 0 THEN
            ServJnlLine.VALIDATE("Unit Cost (LCY)", -"VAT Base Amount (LCY)")
          ELSE
            ServJnlLine.VALIDATE("Unit Cost (LCY)", -"VAT Base Amount (LCY)" / Quantity);
          ServJnlLine.VALIDATE("Total Cost (LCY)", -ROUND("VAT Base Amount (LCY)"));
        END;
        ServJnlLine."Employee No." := "Employee No.";
        ServJnlLine."Wage Component" := "Wage Component";
        ServJnlLine."Source Code" := "Source Code";
        ServJnlLine."Reason Code" := "Reason Code";
        ServJnlLine."Item No." := "Item No.";
        ServJnlLine."Basic Item" := "Basic Item";
        ServJnlLine."Trade Item" := "Trade Item";
        ServJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ServJnlLine.Manufacturer := Manufacturer;
        ServJnlLine."Project No." := "Job No.";
        ServJnlLine."Additional Cost" := "Additional Cost (Service)";  //db, 24-11-05
        ServJnlLine."Cost Component" := "Cost Component";

        ServJnlPostLine.RunWithCheck(ServJnlLine);

      END;

      WITH GenJnlLine DO BEGIN
        CLEAR(PerDiff);
        CLEAR(PerDiffSum);
        FOR PeriodicCount := 1 TO PeriodicTemplate."No. of Periods" DO
        BEGIN
          IF PeriodicCount = 1 THEN
            IF GenJnlLine."Periodic Starting Date" = 0D THEN
              PerPostDate := GenJnlLine."Posting Date"
            ELSE
              PerPostDate := GenJnlLine."Periodic Starting Date"
          ELSE
            PerPostDate := CALCDATE(PeriodicTemplate.Interval, PerPostDate);

          IF GenJnlCheckLine.DateNotAllowed(PerPostDate) THEN
            ERROR(Text100,PerPostDate);

          PerDiffSum := PerDiffSum +
                        ROUND("VAT Base Amount (LCY)" / PeriodicTemplate."No. of Periods",
                              GLSetup."Amount Rounding Precision");

          PerDiffSumAddCur := PerDiffSumAddCur +
                        ROUND("Source Currency Amount" / PeriodicTemplate."No. of Periods",
                              Currency."Amount Rounding Precision");
          //IF "Periodic Count" = "Periodic Template"."No. of Periods" THEN
          IF PeriodicCount = PeriodicTemplate."No. of Periods" THEN BEGIN
            PerDiff := "VAT Base Amount (LCY)" - PerDiffSum;
            PerDiffAddCur := "Source Currency Amount" - PerDiffSumAddCur;
          END;
          //SÑtt in 3 rader med 100 pÜ varje..
          IF ("Receiving Company" <> '') THEN
            DimValRec.CHANGECOMPANY("Receiving Company");

          DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Job No.");

          ServJnlLine.INIT;
          ServJnlLine."Service Contract No." := "Service Contract No.";
          ServJnlLine."Service Order No." := "Service Order No.";
          ServJnlLine."Service Location No." := "Service Location No.";
          ServJnlLine."Document No." := GenJnlLine5."Document No.";
          ServJnlLine."G/L Account" := "Account No.";
          ServJnlLine."Posting Date" := PerPostDate;//"Posting Date";
          ServJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          ServJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          ServJnlLine.Description := PeriodicTemplate.Description;//Description;
          ServJnlLine."Description 2" := "Description 2";  //**4PS01.n
          ServJnlLine.Quantity := Quantity;
          ServJnlLine."Unit of Measure Code" := "Unit of Measure Code";
          ServJnlLine."Currency Code" := "Currency Code"; // dp00116.n
          IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN BEGIN
            IF Quantity = 0 THEN
              ServJnlLine.VALIDATE("Sales Price (LCY)", -"VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods")
            ELSE
              ServJnlLine.VALIDATE("Sales Price (LCY)", -("VAT Base Amount (LCY)"/Quantity)/ PeriodicTemplate."No. of Periods");
            ServJnlLine.VALIDATE("Total Revenue (LCY)", -ROUND(("VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods")+PerDiff));
          END ELSE BEGIN
            IF Quantity = 0 THEN
              ServJnlLine.VALIDATE("Unit Cost (LCY)", "VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods")
            ELSE
              ServJnlLine.VALIDATE("Unit Cost (LCY)", ("VAT Base Amount (LCY)" / Quantity)/ PeriodicTemplate."No. of Periods");
            ServJnlLine.VALIDATE("Total Cost (LCY)", ROUND(("VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods")+PerDiff));
          END;
          ServJnlLine."Employee No." := "Employee No.";
          ServJnlLine."Wage Component" := "Wage Component";
          ServJnlLine."Source Code" := "Source Code";
          ServJnlLine."Reason Code" := "Reason Code";
          ServJnlLine."Item No." := "Item No.";
          ServJnlLine."Basic Item" := "Basic Item";
          ServJnlLine."Trade Item" := "Trade Item";
          ServJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
          ServJnlLine.Manufacturer := Manufacturer;
          ServJnlLine."Project No." := "Job No.";
          ServJnlLine."Additional Cost" := "Additional Cost (Service)";  //db, 24-11-05
          ServJnlLine."Cost Component" := "Cost Component";

          ServJnlPostLine.RunWithCheck(ServJnlLine);

          GenJnlLine3."Posting Date":=PerPostDate;

          IF PeriodicCount < PeriodicTemplate."No. of Periods" THEN
            PostSurcharge(GenJnlLine3,1);

        END;
      END;
      GenJnlLine.VALIDATE(GenJnlLine."Periodic Template Code",'');
    END;

    PROCEDURE PostPeriodicProject@1100285000(VAR GenJnlLine@1100583000 : Record 81;lvPost@1100285000 : Boolean);
    VAR
      PeriodicTemplate@1100285010 : Record 11128015;
      PerPostDate@1100285009 : Date;
      PeriodicCount@1100285008 : Integer;
      CalcDateExpr@1100285007 : Code[10];
      PerDiffSum@1100285006 : Decimal;
      PerDiff@1100285005 : Decimal;
      PerDiffSumAddCur@1100285004 : Decimal;
      PerDiffAddCur@1100285003 : Decimal;
      PostingDatePre@1100285011 : Date;
      DimMgt@1000 : Codeunit 408;
    BEGIN
      // 140324 ITERO.SB Handle periodic periods when posting project

      WITH GenJnlLine DO BEGIN
        PeriodicTemplate.GET(GenJnlLine."Periodic Template Code");
        PeriodicTemplate.TESTFIELD("No. of Periods");
        PeriodicTemplate.TESTFIELD(Interval);
        PeriodicTemplate.TESTFIELD("Temp. G/L Acc.");

        IF ("Receiving Company" <> '') THEN
          DimValRec.CHANGECOMPANY("Receiving Company");

        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Job No.");

        // Post project entries
        JobJnlLine.INIT;
        JobJnlLine."Posting Date" := "Posting Date";
        JobJnlLine."Document Date" := "Document Date";
        JobJnlLine."Job No." := "Job No.";
        JobJnlLine."No." := "Account No.";
        JobJnlLine.Description := PeriodicTemplate.Description;//Description;
        JobJnlLine."Description 2" := "Description 2";  //**4PS01.n
        JobJnlLine."Posting Group" := "Posting Group";
        JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        JobJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        JobJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        JobJnlLine."Document No." := "Document No.";
        JobJnlLine."External Document No." := "External Document No.";
        JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
        JobJnlLine.Quantity := Quantity;
        JobJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN BEGIN
          JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Sale;
          IF Quantity = 0 THEN
            JobJnlLine."Unit Price (LCY)" := "VAT Base Amount (LCY)"
          ELSE
            JobJnlLine."Unit Price (LCY)" := "VAT Base Amount (LCY)"/Quantity;
          JobJnlLine."Total Price (LCY)" := ROUND("VAT Base Amount (LCY)");
          JobJnlLine."Source Currency Total Price" := ROUND("Source Curr. VAT Base Amount");
        END ELSE BEGIN
          JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
          IF Quantity = 0 THEN
            JobJnlLine."Direct Unit Cost (LCY)" := -"VAT Base Amount (LCY)"
          ELSE
            JobJnlLine."Direct Unit Cost (LCY)" := -"VAT Base Amount (LCY)"/Quantity;
          JobJnlLine."Unit Cost (LCY)" := JobJnlLine."Direct Unit Cost (LCY)";
          JobJnlLine."Total Cost (LCY)" := -ROUND("VAT Base Amount (LCY)");
          JobJnlLine."Source Currency Total Cost" := -ROUND("Source Curr. VAT Base Amount");
        END;
        JobJnlLine."Reason Code" := "Reason Code";
        JobJnlLine."Source Code" := "Source Code";
        //JobJnlLine."Post Job Entry Only" := TRUE; //Removed in NAV2009
        JobJnlLine."Posting No. Series" := "Posting No. Series";
        JobJnlLine."Source Currency Code" := "Currency Code";
        JobJnlLine."Employee No." := "Employee No.";
        JobJnlLine."Wage Component" := "Wage Component";
        JobJnlLine.Element := Element;
        JobJnlLine."Extension Contract" := "Extension Contract";
        JobJnlLine."Item No." := "Item No.";
        JobJnlLine."Basic Item" := "Basic Item";
        JobJnlLine."Trade Item" := "Trade Item";
        JobJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        JobJnlLine.Manufacturer := Manufacturer;
        JobJnlLine."Service Order No." := "Service Order No.";
        JobJnlLine."Service Contract No." := "Service Contract No.";
        JobJnlLine."Service Location No." := "Service Location No.";
        JobJnlLine."Rental Unit" := "Rental Unit";
        JobJnlLine."Purchase Action" := "Purchase Action";
        JobJnlLine."Project Interest" := "Project Interest"; //jth 09-11-2004
        JobJnlLine."Cost Component" := "Cost Component";

        JobJnlPostLine.SetOriginSalaryApplication("Origin Salary Application");
        IF lvPost THEN
          JobJnlPostLine.RunWithCheck(JobJnlLine);
        JobJnlPostLine.SetOriginSalaryApplication(FALSE);
      END;

      WITH GenJnlLine DO BEGIN

        CLEAR(PerDiff);
        CLEAR(PerDiffSum);
        FOR PeriodicCount := 1 TO PeriodicTemplate."No. of Periods" DO
        BEGIN
          IF PeriodicCount = 1 THEN
            IF GenJnlLine."Periodic Starting Date" = 0D THEN
              PerPostDate := GenJnlLine."Posting Date"
            ELSE
              PerPostDate := GenJnlLine."Periodic Starting Date"
          ELSE
            PerPostDate := CALCDATE(PeriodicTemplate.Interval, PerPostDate);

          IF GenJnlCheckLine.DateNotAllowed(PerPostDate) THEN
            ERROR(Text100,PerPostDate);

          PerDiffSum := PerDiffSum +
                        ROUND("VAT Base Amount (LCY)" / PeriodicTemplate."No. of Periods",
                              GLSetup."Amount Rounding Precision");

          PerDiffSumAddCur := PerDiffSumAddCur +
                        ROUND("Source Currency Amount" / PeriodicTemplate."No. of Periods",
                              Currency."Amount Rounding Precision");
          //IF "Periodic Count" = "Periodic Template"."No. of Periods" THEN
          IF PeriodicCount = PeriodicTemplate."No. of Periods" THEN BEGIN
            PerDiff := "VAT Base Amount (LCY)" - PerDiffSum;
            PerDiffAddCur := "Source Currency Amount" - PerDiffSumAddCur;
          END;

          IF ("Receiving Company" <> '') THEN
            DimValRec.CHANGECOMPANY("Receiving Company");

          DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Job No.");

          // Post project entries
          JobJnlLine.INIT;
          JobJnlLine."Posting Date" := PerPostDate;//"Posting Date";
          JobJnlLine."Document Date" := "Document Date";
          JobJnlLine."Job No." := "Job No.";
          JobJnlLine."No." := "Account No.";
          JobJnlLine.Description := PeriodicTemplate.Description;//Description;
          JobJnlLine."Description 2" := "Description 2";  //**4PS01.n
          JobJnlLine."Posting Group" := "Posting Group";
          JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          JobJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
          JobJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
          JobJnlLine."Document No." := "Document No.";
          JobJnlLine."External Document No." := "External Document No.";
          JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
          JobJnlLine.Quantity := Quantity;
          JobJnlLine."Unit of Measure Code" := "Unit of Measure Code";
          IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN BEGIN
            JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Sale;
            IF Quantity = 0 THEN
              JobJnlLine."Unit Price (LCY)" := -"VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods"
            ELSE
              JobJnlLine."Unit Price (LCY)" := -("VAT Base Amount (LCY)"/Quantity)/ PeriodicTemplate."No. of Periods";
            JobJnlLine."Total Price (LCY)" := -ROUND(("VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods")+PerDiff);
            JobJnlLine."Source Currency Total Price" := -ROUND(("Source Curr. VAT Base Amount"/ PeriodicTemplate."No. of Periods")
            +PerDiff);
          END ELSE BEGIN
            JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
            IF Quantity = 0 THEN
              JobJnlLine."Direct Unit Cost (LCY)" := "VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods"
            ELSE
              JobJnlLine."Direct Unit Cost (LCY)" := ("VAT Base Amount (LCY)"/Quantity)/ PeriodicTemplate."No. of Periods";
            JobJnlLine."Unit Cost (LCY)" := JobJnlLine."Direct Unit Cost (LCY)";/// PeriodicTemplate."No. of Periods";
            JobJnlLine."Total Cost (LCY)" := ROUND(("VAT Base Amount (LCY)"/ PeriodicTemplate."No. of Periods")+PerDiff);
            JobJnlLine."Source Currency Total Cost" := ROUND(("Source Curr. VAT Base Amount"/ PeriodicTemplate."No. of Periods")+PerDiff
      );
          END;
          JobJnlLine."Reason Code" := "Reason Code";
          JobJnlLine."Source Code" := "Source Code";
          //JobJnlLine."Post Job Entry Only" := TRUE; //Removed in NAV2009
          JobJnlLine."Posting No. Series" := "Posting No. Series";
          JobJnlLine."Source Currency Code" := "Currency Code";
          JobJnlLine."Employee No." := "Employee No.";
          JobJnlLine."Wage Component" := "Wage Component";
          JobJnlLine.Element := Element;
          JobJnlLine."Extension Contract" := "Extension Contract";
          JobJnlLine."Item No." := "Item No.";
          JobJnlLine."Basic Item" := "Basic Item";
          JobJnlLine."Trade Item" := "Trade Item";
          JobJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
          JobJnlLine.Manufacturer := Manufacturer;
          JobJnlLine."Service Order No." := "Service Order No.";
          JobJnlLine."Service Contract No." := "Service Contract No.";
          JobJnlLine."Service Location No." := "Service Location No.";
          JobJnlLine."Rental Unit" := "Rental Unit";
          JobJnlLine."Purchase Action" := "Purchase Action";
          JobJnlLine."Project Interest" := "Project Interest"; //jth 09-11-2004
          JobJnlLine."Cost Component" := "Cost Component";

          JobJnlPostLine.SetOriginSalaryApplication("Origin Salary Application");
          IF lvPost THEN
            JobJnlPostLine.RunWithCheck(JobJnlLine);

          JobJnlPostLine.SetOriginSalaryApplication(FALSE);

          GenJnlLine3."Posting Date":=PerPostDate;

          IF PeriodicCount < PeriodicTemplate."No. of Periods" THEN
            PostSurcharge(GenJnlLine3,0);

        END;
      END;
      GenJnlLine.VALIDATE(GenJnlLine."Periodic Template Code",'');
    END;

    PROCEDURE ReplacePostingDatePeriodic@1100285100(lv_replace@1100285100 : Boolean);
    BEGIN
      //RFC135
      gReplacePostingDatePeriodic := lv_replace;
    END;

    LOCAL PROCEDURE DeterminePostingGroup@1100528204(GenJournalLine@1100528204 : Record 81;VAR VendorPostingGroup@1100528203 : Code[20];VAR CustomerPostingGroup@1100528202 : Code[20]);
    VAR
      Customer@1100528207 : Record 18;
      Vendor@1100528206 : Record 23;
      VendorCde@1100528205 : Code[20];
    BEGIN
      //**4PS
      WITH GenJournalLine DO BEGIN

        VendorCde := '';
        IF ("Account Type" <> "Account Type"::Vendor) THEN
          VendorCde := ExternalEmployeeVendor
        ELSE
          VendorCde := "Account No.";

        IF VendorCde <> '' THEN
          Vendor.GET(VendorCde);

        IF "Account Type" = "Account Type"::Customer THEN
          Customer.GET("Account No.");

        IF ("Account Type" = "Account Type"::"G/L Account") AND (VendorCde = '') THEN BEGIN
          VendorPostingGroup := "Vendor Posting Group";
          CustomerPostingGroup := "Customer Posting Group";
        END ELSE BEGIN
          VendorPostingGroup := Vendor."Vendor Posting Group";
          CustomerPostingGroup := Customer."Customer Posting Group";
        END;
      END;
    END;

    LOCAL PROCEDURE PostLoans@1100528501(GenJnlLine@1100528500 : Record 81);
    VAR
      LoanLedgerEntry@1100528503 : Record 11229444;
    BEGIN
      //**4PS
      IF (GenJnlLine."Loan Code" = '') THEN
        EXIT;

      WITH LoanLedgerEntry DO BEGIN
        INIT;
        "Document No." := GenJnlLine."Document No.";
        Type := GenJnlLine."Gen. Posting Type";
        "Posting Date" := GenJnlLine."Posting Date";
        "Document Date" := GenJnlLine."Document Date";
        "Account No." := GenJnlLine."Account No.";
        "Loan Code" := GenJnlLine."Loan Code";
        "Loan Type" := GenJnlLine."Loan Type";
        Description := GenJnlLine.Description;
        Quantity := GenJnlLine.Quantity;
        "Amount (LCY)" := ROUND(GenJnlLine."VAT Base Amount (LCY)");
        Amount := ROUND(GenJnlLine."VAT Base Amount");
        "Currency Code" := GenJnlLine."Currency Code";
        "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
        "Dimension Set ID" := GenJnlLine."Dimension Set ID";

        LoanJnlPostLine.RUN(LoanLedgerEntry);
      END;
    END;

    BEGIN
    {
      13-03-2008, call 11414, Use "Compl. WIP Acc. Labor" in stead of "Cost Acc. (f.comm.) Labor"

      -EVRY-
      LAHE 130425 Use "plant no." of main asset
      -ITERO-
      140324 ITERO.SB Handle periodic periods when posting project/service
      160923 ITERO.DL RFC135 Supplier invoices with accrual entries in a closed period should be booked in open period, passover variable to next function

      180405 ITERO.WG Added 4PS call C040207
      190219 ORANGO.DL Support #22815 incl vendor no in job ledger entry
      190425 ORANGO.FH Support #23917 incl Principal no in job ledger entry
    }
    END.
  }
}

