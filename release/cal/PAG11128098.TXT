OBJECT Page 11128098 Project Ledger (Compr) LabourW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS6.00,RFC101;
  }
  PROPERTIES
  {
    Permissions=TableData 11072005=m;
    CaptionML=[ENU=Project Ledger (Compressed);
               NOR=Prosjektreskontro (komprimert);
               SVE=Projektreskontra (komprimerat)];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table11072005;
    SourceTableView=SORTING(Main Project No.,Job No.,Employee No.,Cost Type,Posting Date,Employee External,Entry Type)
                    ORDER(Ascending);
    DataCaptionFields=Job No.;
    PageType=List;
    OnInit=BEGIN
             "Purchase ActionVisible" := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 Compress;
               END;

    OnNextRecord=VAR
                   Step@1100525003 : Integer;
                   CurrentSteps@1100525004 : Integer;
                   NumberOfSteps@1100525005 : Integer;
                   eof@1100525001 : Boolean;
                 BEGIN
                   IF NOT CompressedBln THEN
                     EXIT(NEXT(Steps));

                   ProjectLedgEntry.COPY(Rec);

                   IF Steps < 0 THEN
                     Step := -1
                   ELSE
                     Step := 1;

                   CurrentSteps := 0;
                   IF Steps <> 0 THEN
                     eof := ProjectLedgEntry.NEXT(Step) = 0;
                   IF NOT eof THEN
                     FOR NumberOfSteps := 1 TO ABS(Steps) DO BEGIN
                       WHILE SkipRec AND NOT eof DO
                         eof := ProjectLedgEntry.NEXT(Step) = 0;
                       IF NOT eof THEN BEGIN
                         Rec := ProjectLedgEntry;
                         CurrentSteps := CurrentSteps + Step;
                       END;
                     END;

                   EXIT(CurrentSteps);
                 END;

    OnAfterGetRecord=BEGIN
                       IF CompressedBln THEN BEGIN
                         IF CURRENTKEY <> AllowedKeyCompressed THEN BEGIN
                           MESSAGE(Text001, AllowedKeyCompressed);
                           // SB! SETCURRENTKEY("Main Project No.","Job No.", "Document No.", "Posting Date");
                           SETCURRENTKEY("Main Project No.","Job No.","Employee No.","Cost Type","Posting Date","Employee External","Entry Type");

                         END;
                       END;

                       CountAmounts;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100485000;1 ;Action    ;
                      CaptionML=[ENU=S&canned Document;
                                 NOR=S&kannet dokument;
                                 SVE=S&kannade dokument];
                      Promoted=Yes;
                      Image=Documents;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPurchSetupRec@1100485000 : Record 312;
                               BEGIN
                                 lvPurchSetupRec.GET;
                                 lvPurchSetupRec.ShowScannedDocumentWithDocNo("Document No.");
                               END;
                                }
      { 24      ;1   ;Action    ;
                      CaptionML=[ENU=&Reset filter;
                                 NOR=&Nullstill filter;
                                 SVE=&èterstÑll filter];
                      Promoted=Yes;
                      Image=EditFilter;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF CompressedBln THEN
                                   UndoCompress
                                 ELSE
                                   Compress;
                               END;
                                }
      { 23      ;1   ;Action    ;
                      CaptionML=[ENU=&Specification (totals);
                                 NOR=&Spesifikasjon;
                                 SVE=&Specifikation (total)];
                      Promoted=Yes;
                      Image=Track;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProjectLedgEntry.RESET;
                                 ProjectLedgEntry.COPY(Rec);
                                 ProjectLedgEntry.SETCURRENTKEY("Document No.", "Posting Date");
                                 //ProjectLedgEntry.SETRANGE("Document No.", "Document No.");
                                 ProjectLedgEntry.SETRANGE(Compressed);
                                 PAGE.RUNMODAL(PAGE::"Job Ledger Entries", ProjectLedgEntry);
                               END;
                                }
      { 1100285101;1 ;Action    ;
                      CaptionML=[ENU="&Specification ";
                                 NOR="&Spesifikasjon ";
                                 SVE=&Specifikation (vecka/person)];
                      Promoted=Yes;
                      Image=Track;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProjectLedgEntry.RESET;
                                 ProjectLedgEntry.COPY(Rec);
                                 ProjectLedgEntry.SETCURRENTKEY("Document No.", "Posting Date");
                                 //ProjectLedgEntry.SETRANGE("Document No.", "Document No.");
                                 ProjectLedgEntry.SETRANGE("Employee No.","Employee No.");
                                 ProjectLedgEntry.SETRANGE("Week (Execution Date)","Week (Execution Date)");
                                 ProjectLedgEntry.SETRANGE(Compressed);
                                 PAGE.RUNMODAL(PAGE::"Job Ledger Entries", ProjectLedgEntry);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 1100525000;2;Field  ;
                SourceExpr="Document No.";
                Visible=false;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Posting Date";
                Editable=FALSE }

    { 1100285100;2;Field  ;
                SourceExpr="Execution Date" }

    { 1100285102;2;Field  ;
                SourceExpr="Week (Execution Date)" }

    { 6   ;2   ;Field     ;
                SourceExpr="Job No.";
                Editable=FALSE }

    { 1100285103;2;Field  ;
                SourceExpr="Employee No." }

    { 1100285104;2;Field  ;
                CaptionML=[ENU=Name;
                           NOR=Navn;
                           SVE=Namn];
                SourceExpr=GetEmployeeName }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           NOR=Antall;
                           SVE=Antal];
                SourceExpr=TotalQuantity;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                CaptionML=[ENU=Total Cost;
                           NOR=Total kost;
                           SVE=Total kostnad];
                SourceExpr=TotalCost;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Total Price;
                           NOR=Totalpris;
                           SVE=Totalpris];
                SourceExpr=TotalPrice;
                Editable=FALSE }

    { 1210190002;2;Field  ;
                CaptionML=[ENU=Actual Preclosure Result;
                           NOR=Reelle prõveregnskapsresultater;
                           SVE=Verkligt provredovisningsresultat];
                SourceExpr=TotalActualPreclosureResult;
                AutoFormatType=1;
                Visible=false;
                Editable=FALSE }

    { 1100525002;2;Field  ;
                CaptionML=[ENU=Actual Provision Result;
                           NOR=Reelt avsetningsresultat;
                           SVE=Verkligt avsÑttningsresultat];
                SourceExpr=TotalActualProvisionResult;
                AutoFormatType=1;
                Visible=false }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Closed Costs;
                           NOR=Opparbeidede koster;
                           SVE=Upparbetade kostnader];
                SourceExpr=TotalClosedCosts;
                Visible=false;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Closed Revenues;
                           NOR=Opparbeidede inntekter;
                           SVE=Upparbetade intÑkter];
                SourceExpr=TotalClosedRevenues;
                Visible=false;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Remaining Amount;
                           NOR=GjenstÜende belõp;
                           SVE=èterstÜende belopp];
                SourceExpr=TotalRemainingAmount;
                Visible=false;
                Editable=FALSE }

    { 1100485006;2;Field  ;
                SourceExpr="Vendor No.";
                Visible=false }

    { 1100485002;2;Field  ;
                SourceExpr="Vendor Name";
                Visible=false }

    { 1100485008;2;Field  ;
                SourceExpr=Principal;
                Visible=false }

    { 1100485004;2;Field  ;
                SourceExpr="Principal Name";
                Visible=false }

    { 1100525004;2;Field  ;
                SourceExpr="Purchase Action";
                Visible=false }

    { 1210190000;2;Field  ;
                SourceExpr="Source Code";
                Visible=false }

  }
  CODE
  {
    VAR
      ProjectLedgEntry@11012000 : Record 11072005;
      CompressedBln@11012001 : Boolean;
      TotalCost@1210190000 : Decimal;
      TotalPrice@1210190001 : Decimal;
      TotalClosedCosts@1210190002 : Decimal;
      TotalClosedRevenues@1210190003 : Decimal;
      TotalRemainingAmount@1210190004 : Decimal;
      TotalQuantity@1210190005 : Decimal;
      TotalActualPreclosureResult@1210190006 : Decimal;
      TotalActualProvisionResult@1100525000 : Decimal;
      TotalInvoicedAmt@1100485000 : Decimal;
      TotalInvoicedQuan@1100485001 : Decimal;
      DepAuthRec@1100000997 : Record 11012466;
      DPA_IsHardFilter@1100000999 : Boolean;
      AllowedKeyCompressed@1100525001 : Text[1024];
      Text001@1100525002 : TextConst 'ENU=For ''Compressed'' only sort allowed on ''%1''.;NOR=For ''Komprimert'' tillates kun sortering pÜ ''%1''.;SVE=Fîr Komprimerad tillÜts endast sortering pÜ ''%1''.';
      "Purchase ActionVisible"@19039042 : Boolean INDATASET;

    PROCEDURE Compress@1();
    BEGIN
      CompressedBln := TRUE;
      // SB! SETCURRENTKEY("Main Project No.","Job No.", "Document No.", "Posting Date");
      SETCURRENTKEY("Main Project No.","Job No.","Employee No.","Cost Type","Posting Date","Employee External","Entry Type");

      AllowedKeyCompressed := CURRENTKEY;

      "Purchase ActionVisible" := (NOT CompressedBln); //call C-019412
    END;

    PROCEDURE CountAmounts@2();
    BEGIN
      TotalCost := "Total Cost (LCY)";
      TotalPrice := "Total Price (LCY)";
      TotalClosedCosts := "Closed Costs";
      TotalClosedRevenues := "Closed Revenues";
      TotalQuantity := Quantity;
      TotalActualPreclosureResult := "Actual Preclosure Result";
      TotalActualProvisionResult := "Actual Provision Result";
      CALCFIELDS("Amount Invoiced (LCY)", "Quantity Invoiced");
      TotalInvoicedQuan := "Quantity Invoiced";
      TotalInvoicedAmt := "Amount Invoiced (LCY)";

      IF NOT CompressedBln THEN EXIT;

      ProjectLedgEntry.RESET;
      ProjectLedgEntry.COPY(Rec);
      // SB! ProjectLedgEntry.SETCURRENTKEY("Main Project No.","Job No.", "Document No.", "Posting Date");
      ProjectLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Employee No.","Cost Type","Posting Date","Employee External","Entry Type");
      ProjectLedgEntry.SETRANGE("Main Project No.", "Main Project No.");
      ProjectLedgEntry.SETRANGE("Job No.", "Job No.");
      //ProjectLedgEntry.SETRANGE("Document No.", "Document No.");
      ProjectLedgEntry.SETRANGE("Employee No.","Employee No.");
      ProjectLedgEntry.CALCFIELDS("Week (Execution Date)");
      ProjectLedgEntry.SETFILTER("Week (Execution Date)",'%1',"Week (Execution Date)");

      IF ProjectLedgEntry.FINDSET THEN BEGIN
        REPEAT
          IF ProjectLedgEntry."Entry No." <> "Entry No." THEN BEGIN
            TotalCost := TotalCost + ProjectLedgEntry."Total Cost (LCY)";
            TotalPrice := TotalPrice + ProjectLedgEntry."Total Price (LCY)";
            TotalClosedCosts :=  TotalClosedCosts + ProjectLedgEntry. "Closed Costs";
            TotalClosedRevenues := TotalClosedRevenues + ProjectLedgEntry."Closed Revenues";
            TotalQuantity := TotalQuantity + ProjectLedgEntry.Quantity;
            TotalActualPreclosureResult := TotalActualPreclosureResult + ProjectLedgEntry."Actual Preclosure Result";
            TotalActualProvisionResult := TotalActualProvisionResult + ProjectLedgEntry."Actual Provision Result";
            ProjectLedgEntry.CALCFIELDS("Amount Invoiced (LCY)", "Quantity Invoiced");
            TotalInvoicedQuan := TotalInvoicedQuan + ProjectLedgEntry."Quantity Invoiced";
            TotalInvoicedAmt := TotalInvoicedAmt + ProjectLedgEntry."Amount Invoiced (LCY)";
          END;
        UNTIL ProjectLedgEntry.NEXT = 0;
      END;

      "Purchase Action" := '';
    END;

    PROCEDURE UndoCompress@3();
    BEGIN
      CompressedBln := FALSE;

      "Purchase ActionVisible" := (NOT CompressedBln); //call C-019412
    END;

    PROCEDURE SkipRec@1100525002() : Boolean;
    BEGIN
      Rec.CALCFIELDS("Week (Execution Date)");
      ProjectLedgEntry.CALCFIELDS("Week (Execution Date)");

      IF (ProjectLedgEntry."Main Project No." <> Rec."Main Project No.") OR
         (ProjectLedgEntry."Job No." <>  Rec."Job No.") OR
         //(ProjectLedgEntry."Document No." <> Rec."Document No.")
         (ProjectLedgEntry."Employee No." <> Rec."Employee No.") OR
         (ProjectLedgEntry."Week (Execution Date)" <> Rec."Week (Execution Date)")

      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetWeek@1100285106(DateInput@1100285100 : Date) Week : Integer;
    BEGIN
      IF DateInput<>0D THEN
        Week := DATE2DWY(DateInput, 2)
      ELSE
        EXIT(0);
    END;

    PROCEDURE GetEmployeeName@1100285104() : Text;
    VAR
      Employee@1100285100 : Record 5200;
    BEGIN

      IF Employee.GET("Employee No.") THEN
        EXIT(Employee."Full Name");
    END;

    BEGIN
    {
      160902 ITERO.SB RAD-031 New page, show employee hours/week in project details (solution from RFC-101)
    }
    END.
  }
}

