OBJECT Codeunit 481 Check Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DimensionIsBlockedErr@1003 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Error text";ENU=The combination of dimensions used in %1 %2 is blocked;NOR=Kombinasjonen av dimensjoner som brukes i %1 %2, er sperret';
      LineDimensionBlockedErr@1002 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = LineNo., %4 = Error text";ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked;NOR=Kombinasjonen av dimensjoner som brukes i %1 %2, linjenr. %3, er sperret';
      InvalidDimensionsErr@1001 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Error text";ENU=The dimensions used in %1 %2 are invalid;NOR=Dimensjonene som brukes i %1 %2, er ugyldige';
      LineInvalidDimensionsErr@1000 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = LineNo., %4 = Error text";ENU=The dimensions used in %1 %2, line no. %3 are invalid;NOR=Dimensjonene som brukes i %1 %2, linjenr. %3, er ugyldige';
      ErrorMessageMgt@1007 : Codeunit 28;
      DimMgt@1004 : Codeunit 408;

    [External]
    PROCEDURE CheckPurchDim@1(PurchHeader@1001 : Record 38;VAR TempPurchLine@1000 : TEMPORARY Record 39);
    VAR
      TempPurchLineLocal@1002 : TEMPORARY Record 39;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckPurchDim(PurchHeader,TempPurchLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      DimMgt.SetCollectErrorsMode;
      CheckPurchDimCombHeader(PurchHeader);
      CheckPurchDimValuePostingHeader(PurchHeader);

      TempPurchLineLocal.COPY(TempPurchLine,TRUE);
      CheckPurchDimLines(PurchHeader,TempPurchLineLocal);
    END;

    LOCAL PROCEDURE CheckPurchDimCombHeader@30(PurchHeader@1002 : Record 38);
    VAR
      ContextErrorMessage@1000 : Text[250];
    BEGIN
      WITH PurchHeader DO BEGIN
        ContextErrorMessage := STRSUBSTNO(DimensionIsBlockedErr,"Document Type","No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    LOCAL PROCEDURE CheckPurchDimCombLine@49(PurchLine@1000 : Record 39);
    VAR
      ContextErrorMessage@1001 : Text[250];
    BEGIN
      WITH PurchLine DO BEGIN
        ContextErrorMessage := STRSUBSTNO(LineDimensionBlockedErr,"Document Type","Document No.","Line No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        DimMgt.SetCompany("Receiving Company"); //**4PS.n
        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    LOCAL PROCEDURE CheckPurchDimLines@168(PurchHeader@1002 : Record 38;VAR TempPurchLine@1000 : TEMPORARY Record 39);
    BEGIN
      WITH TempPurchLine DO BEGIN
        RESET;
        SETFILTER(Type,'<>%1',Type::" ");
        IF FINDSET THEN
          REPEAT
            IF (PurchHeader.Receive AND ("Qty. to Receive" <> 0)) OR
               (PurchHeader.Invoice AND ("Qty. to Invoice" <> 0)) OR
               (PurchHeader.Ship AND ("Return Qty. to Ship" <> 0))
            THEN BEGIN
              CheckPurchDimCombLine(TempPurchLine);
              CheckPurchDimValuePostingLine(TempPurchLine);
            END
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckPurchDimValuePostingHeader@28(PurchHeader@1004 : Record 38);
    VAR
      ContextErrorMessage@1000 : Text[250];
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      WITH PurchHeader DO BEGIN
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := "Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := "Purchaser Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := "Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := "Responsibility Center";
        OnCheckDimValuePostingOnAfterCreateDimTableIDs(PurchHeader,TableIDArr,NumberArr);

        DimMgt.SetSourceCode(DATABASE::"Purchase Header");
        ContextErrorMessage := STRSUBSTNO(InvalidDimensionsErr,"Document Type","No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    LOCAL PROCEDURE CheckPurchDimValuePostingLine@170(PurchLine@1000 : Record 39);
    VAR
      ContextErrorMessage@1003 : Text[250];
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1001 : ARRAY [10] OF Code[20];
    BEGIN
      WITH PurchLine DO BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(Type);
        NumberArr[1] := "No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := "Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := "Work Center No.";
        OnCheckDimValuePostingOnAfterCreateDimTableIDs(PurchLine,TableIDArr,NumberArr);

        DimMgt.SetSourceCode(DATABASE::"Purchase Line");
        ContextErrorMessage := STRSUBSTNO(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        DimMgt.SetCompany("Receiving Company"); //**4PS.n
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    [External]
    PROCEDURE CheckPurchPrepmtDim@5(PurchHeader@1001 : Record 38);
    BEGIN
      DimMgt.SetCollectErrorsMode;
      CheckPurchDimCombHeader(PurchHeader);
      CheckPurchDimValuePostingHeader(PurchHeader);

      CheckPurchPrepmtDimLines(PurchHeader);
    END;

    LOCAL PROCEDURE CheckPurchPrepmtDimLines@6(PurchHeader@1002 : Record 38);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        RESET;
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        SETFILTER("Prepayment %",'<>0');
        IF FINDSET THEN
          REPEAT
            CheckPurchDimCombLine(PurchLine);
            CheckPurchDimValuePostingLine(PurchLine);
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE CheckSalesDim@34(SalesHeader@1000 : Record 36;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    VAR
      TempSalesLineLocal@1002 : TEMPORARY Record 37;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckSalesDim(SalesHeader,TempSalesLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      DimMgt.SetCollectErrorsMode;
      CheckSalesDimCombHeader(SalesHeader);
      CheckSalesDimValuePostingHeader(SalesHeader);

      TempSalesLineLocal.COPY(TempSalesLine,TRUE);
      CheckSalesDimLines(SalesHeader,TempSalesLineLocal);
    END;

    LOCAL PROCEDURE CheckSalesDimCombHeader@178(SalesHeader@1000 : Record 36);
    VAR
      ContextErrorMessage@1001 : Text[250];
    BEGIN
      WITH SalesHeader DO BEGIN
        ContextErrorMessage := STRSUBSTNO(DimensionIsBlockedErr,"Document Type","No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    LOCAL PROCEDURE CheckSalesDimCombLine@171(SalesLine@1000 : Record 37);
    VAR
      ContextErrorMessage@1001 : Text[250];
    BEGIN
      WITH SalesLine DO BEGIN
        ContextErrorMessage := STRSUBSTNO(LineDimensionBlockedErr,"Document Type","Document No.","Line No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    LOCAL PROCEDURE CheckSalesDimLines@176(SalesHeader@1000 : Record 36;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
      WITH TempSalesLine DO BEGIN
        RESET;
        SETFILTER(Type,'<>%1',Type::" ");
        IF FINDSET THEN
          REPEAT
            IF (SalesHeader.Invoice AND ("Qty. to Invoice" <> 0)) OR
               (SalesHeader.Ship AND ("Qty. to Ship" <> 0)) OR
               (SalesHeader.Receive AND ("Return Qty. to Receive" <> 0))
            THEN BEGIN
              CheckSalesDimCombLine(TempSalesLine);
              CheckSalesDimValuePostingLine(TempSalesLine);
            END
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckSalesDimValuePostingHeader@177(SalesHeader@1000 : Record 36);
    VAR
      ContextErrorMessage@1001 : Text[250];
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      WITH SalesHeader DO BEGIN
        TableIDArr[1] := DATABASE::Customer;
        NumberArr[1] := "Bill-to Customer No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := "Salesperson Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := "Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := "Responsibility Center";
        OnCheckDimValuePostingOnAfterCreateDimTableIDs(SalesHeader,TableIDArr,NumberArr);

        DimMgt.SetSourceCode(DATABASE::"Sales Header");
        ContextErrorMessage := STRSUBSTNO(InvalidDimensionsErr,"Document Type","No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    LOCAL PROCEDURE CheckSalesDimValuePostingLine@175(SalesLine@1000 : Record 37);
    VAR
      ContextErrorMessage@1001 : Text[250];
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      WITH SalesLine DO BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(Type);
        NumberArr[1] := "No.";
        IF NOT ("Plant Invoice" AND ("Job No." <> '')) THEN BEGIN  //**4PS.n
          TableIDArr[2] := DATABASE::Job;
          NumberArr[2] := "Job No.";
        END;  //**4PS.n
        DimMgt.SetSourceCode(DATABASE::"Sales Line");
        OnCheckDimValuePostingOnAfterCreateDimTableIDs(SalesLine,TableIDArr,NumberArr);

        ContextErrorMessage := STRSUBSTNO(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.");
        ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") THEN
          ErrorMessageMgt.ThrowError(ContextErrorMessage,DimMgt.GetDimErr);
        ErrorMessageMgt.PopContext;
      END;
    END;

    [External]
    PROCEDURE CheckSalesPrepmtDim@2(SalesHeader@1000 : Record 36);
    BEGIN
      DimMgt.SetCollectErrorsMode;
      CheckSalesDimCombHeader(SalesHeader);
      CheckSalesDimValuePostingHeader(SalesHeader);

      CheckSalesPrepmtDimLines(SalesHeader);
    END;

    LOCAL PROCEDURE CheckSalesPrepmtDimLines@3(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        RESET;
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        SETFILTER("Prepayment %",'<>0');
        IF FINDSET THEN
          REPEAT
            CheckSalesDimCombLine(SalesLine);
            CheckSalesDimValuePostingLine(SalesLine);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ShowDimensionsSetup@13(RecID@1000 : RecordID) : Boolean;
    VAR
      Dimension@1001 : Record 348;
      DimensionCombination@1007 : Record 350;
      DefaultDimension@1005 : Record 352;
      DimensionValue@1004 : Record 349;
      DimensionValueCombination@1006 : Record 351;
      DimensionCombinations@1008 : Page 538;
      MyDimValueCombinations@1009 : Page 9252;
      RecRef@1002 : RecordRef;
    BEGIN
      CASE RecID.TABLENO OF
        DATABASE::Dimension:
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(Dimension);
            PAGE.RUN(PAGE::Dimensions,Dimension);
          END;
        DATABASE::"Dimension Combination":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(DimensionCombination);
            DimensionCombinations.SetSelectedRecord(DimensionCombination);
            DimensionCombinations.RUN;
          END;
        DATABASE::"Dimension Value":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(DimensionValue);
            PAGE.RUN(PAGE::"Dimension Values",DimensionValue);
          END;
        DATABASE::"Dimension Value Combination":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(DimensionValueCombination);
            MyDimValueCombinations.SetSelectedDimValueComb(DimensionValueCombination);
            MyDimValueCombinations.RUN;
          END;
        DATABASE::"Default Dimension":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN BEGIN
              RecRef.SETTABLE(DefaultDimension);
              DefaultDimension.SETRANGE("Table ID",DefaultDimension."Table ID");
              DefaultDimension.SETRANGE("No.",DefaultDimension."No.");
            END;
            PAGE.RUN(PAGE::"Default Dimensions",DefaultDimension);
          END;
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowContextDimensions@9(RecID@1000 : RecordID) : Boolean;
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      RecRef@1001 : RecordRef;
    BEGIN
      CASE RecID.TABLENO OF
        DATABASE::"Sales Header":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(SalesHeader);
            SalesHeader.ShowDocDim;
          END;
        DATABASE::"Sales Line":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(SalesLine);
            IF SalesLine.ShowDimensions THEN
              SalesLine.MODIFY;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(PurchaseHeader);
            PurchaseHeader.ShowDocDim;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            RecRef := RecID.GETRECORD;
            IF RecRef.FIND THEN
              RecRef.SETTABLE(PurchaseLine);
            IF PurchaseLine.ShowDimensions THEN
              PurchaseLine.MODIFY;
          END;
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    [EventSubscriber(Page,700,OnDrillDown)]
    LOCAL PROCEDURE OnErrorMessageDrillDown@8(ErrorMessage@1000 : Record 700;SourceFieldNo@1001 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
      IF NOT IsHandled THEN
        IF ErrorMessage."Table Number" IN [DATABASE::Dimension..DATABASE::"Default Dimension"] THEN
          CASE SourceFieldNo OF
            ErrorMessage.FIELDNO("Context Record ID"):
              IsHandled := ShowContextDimensions(ErrorMessage."Context Record ID");
            ErrorMessage.FIELDNO("Record ID"):
              IF FORMAT(ErrorMessage."Record ID") = '' THEN
                IsHandled := ShowContextDimensions(ErrorMessage."Context Record ID")
              ELSE
                IsHandled := ShowDimensionsSetup(ErrorMessage."Record ID");
          END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckPurchDim@12(PurchaseHeader@1000 : Record 38;VAR TempPurchaseLine@1001 : TEMPORARY Record 39;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckSalesDim@7(SalesHeader@1000 : Record 36;VAR TempSalesLine@1001 : TEMPORARY Record 37;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [EventSubscriber(Page,700,OnOpenRelatedRecord)]
    LOCAL PROCEDURE OnOpenRelatedRecord@10(ErrorMessage@1000 : Record 700;VAR IsHandled@1001 : Boolean);
    VAR
      PageManagement@1002 : Codeunit 700;
    BEGIN
      IF ErrorMessage."Table Number" IN [DATABASE::Dimension..DATABASE::"Default Dimension"] THEN BEGIN
        PageManagement.PageRun(ErrorMessage."Context Record ID");
        IsHandled := TRUE;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckDimValuePostingOnAfterCreateDimTableIDs@4(RecordVariant@1000 : Variant;VAR TableIDArr@1002 : ARRAY [10] OF Integer;VAR NumberArr@1001 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

