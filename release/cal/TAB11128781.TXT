OBJECT Table 11128781 LT. Maint. Plan Task OBS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Service Object No.");
               DeterminetTaskNo;
               "Creation Date" := TODAY;

               DetermineReplacementDefaults;
             END;

    OnModify=BEGIN
               DetermineReplacementDefaults;
             END;

    CaptionML=ENU=Long Term Maintenance Plan Task OBSOLETE;
    LookupPageID=Page11128785;
    DrillDownPageID=Page11128785;
  }
  FIELDS
  {
    { 10  ;   ;Service Object No.  ;Code20        ;TableRelation=Service-Object;
                                                   CaptionML=[ENU=Service Object No.;
                                                              NOR=Serviceobjektnr;
                                                              SVE=Serviceobjektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Task No.            ;Code10        ;CaptionML=[ENU=Task No.;
                                                              NOR=Oppgavenr;
                                                              SVE=Uppgiftsnr.];
                                                   NotBlank=No }
    { 30  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              NOR=Opprettelsesdato;
                                                              SVE=Uppl„ggningsdatum] }
    { 40  ;   ;Type                ;Option        ;OnValidate=VAR
                                                                DateFormula@1100528600 : DateFormula;
                                                              BEGIN
                                                                IF Type <> Type::"Condition Measurement" THEN
                                                                  TESTFIELD("Condition Measurement Date", 0D);
                                                                IF Type <> Type::Replacement THEN
                                                                  TESTFIELD(Interval, DateFormula);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Condition Measurement,Replacement,Repair;
                                                                    NOR=Tilstandsm†ling,Erstatning,Reparer];
                                                   OptionString=Condition Measurement,Replacement,Repair }
    { 50  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 60  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp] }
    { 70  ;   ;Expected Execution Year;Integer    ;CaptionML=[ENU=Expected Execution Year;
                                                              NOR=Forventet utf›relses†r];
                                                   BlankZero=Yes }
    { 80  ;   ;Interval            ;DateFormula   ;OnValidate=BEGIN
                                                                IF FORMAT(Interval) <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Repair);
                                                                  IF CALCDATE(Interval, TODAY) <= TODAY THEN
                                                                    FIELDERROR(Interval);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Interval;
                                                              NOR=Intervall;
                                                              SVE=Intervall] }
    { 90  ;   ;Condition Measurement Date;Date    ;TableRelation="NEN2767 Cond. Meas. Header OBS"."Measurement Date" WHERE (Service Object No.=FIELD(Service Object No.));
                                                   OnValidate=BEGIN
                                                                IF "Condition Measurement Date" <> 0D THEN BEGIN
                                                                  TESTFIELD(Type, Type::"Condition Measurement");
                                                                //  VALIDATE(Amount, NEN2767Management.GetCondMeasRepairCost("Service Object No.", "Condition Measurement Date"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Condition Measurement Date;
                                                              NOR=Tilstandsm†lingsdato;
                                                              SVE=M„tdatum f”r tillst†ndspo„ng] }
  }
  KEYS
  {
    {    ;Service Object No.,Task No.             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528602 : TextConst 'ENU=Replace by;NOR=Erstatt med';

    PROCEDURE DeterminetTaskNo@1100528600();
    VAR
      LTMaintPlanTask@1100528600 : Record 11128781;
    BEGIN
      IF "Task No." <> '' THEN
        EXIT;
      LTMaintPlanTask.SETRANGE("Service Object No.", "Service Object No.");
      IF NOT LTMaintPlanTask.FINDLAST THEN
        "Task No." := '001'
      ELSE
        "Task No." := INCSTR(LTMaintPlanTask."Task No.");
    END;

    PROCEDURE AssistEditConditionMeasDate@1100528601();
    VAR
      NEN2767ConditionMeasHeader@1100528600 : Record 11128776;
    BEGIN
      NEN2767ConditionMeasHeader.SETRANGE("Service Object No.", "Service Object No.");
      IF "Condition Measurement Date" <> 0D THEN BEGIN
        NEN2767ConditionMeasHeader.SETRANGE("Measurement Date", "Condition Measurement Date");
        PAGE.RUN(PAGE::"NEN2767 Condition Meas. OBS", NEN2767ConditionMeasHeader);
      END ELSE
        IF PAGE.RUNMODAL(PAGE::"NEN2767 Cond. Meas. List OBS", NEN2767ConditionMeasHeader) = ACTION::LookupOK THEN
          VALIDATE("Condition Measurement Date", NEN2767ConditionMeasHeader."Measurement Date");
    END;

    PROCEDURE DetermineReplacementDefaults@1100528602();
    VAR
      ServiceObject@1100528600 : Record 11071691;
      StandardObject@1100528602 : Record 11020334;
      NEN2767Management@1100528601 : Codeunit 11012863;
      FoundDate@1100528603 : Date;
    BEGIN
      IF Type <> Type::Replacement THEN
        EXIT;
      ServiceObject.GET("Service Object No.");
      IF ServiceObject."Replace from" <> 0D THEN
        VALIDATE("Expected Execution Year", DATE2DMY(ServiceObject."Replace from", 3));
      VALIDATE(Amount, NEN2767Management.GetReplacementValue("Service Object No.", "Creation Date", FoundDate));
      IF ServiceObject."Replace with Standard Object" <> '' THEN BEGIN
        StandardObject.GET(ServiceObject."Replace with Standard Object");
        Description := COPYSTR(STRSUBSTNO('%1 %2 %3', Text001, ServiceObject."Replace with Standard Object",
          StandardObject.Description), 1, MAXSTRLEN(Description));
      END;
    END;

    BEGIN
    END.
  }
}

