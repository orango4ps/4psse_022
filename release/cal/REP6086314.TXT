OBJECT Report 6086314 Batch Post Settlements
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW17.00.00.3.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Stapelbuchen Ausgleiche;
               ENU=Batch Post Settlements;
               NLD=Batchboeken afrekeningen];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF ReplacePostingDate AND (PostingDateReq = 0D) THEN
                    ERROR(Text000);
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;

                   IF CounterOK <> 0 THEN
                     MESSAGE(Text004,CounterOK,Counter);
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table6086339;
               DataItemTableView=SORTING(Posted,Continia User ID,Status);
               OnPreDataItem=BEGIN
                               SETRANGE(Posted,FALSE);
                               SETRANGE(Status,Status::Released);

                               CounterTotal := COUNT;

                               Window.OPEN(Text001 + Text002 + Text003);
                             END;

               OnAfterGetRecord=VAR
                                  Settlement2@1000 : Record 6086339;
                                BEGIN
                                  Counter := Counter + 1;
                                  Mileage.SETRANGE("Settlement No.","No.");
                                  IF Mileage.FINDSET THEN
                                    REPEAT
                                      CODEUNIT.RUN(CODEUNIT::"Mileage-Validate",Mileage);
                                      IF Mileage.HasErrorComment(FALSE,FALSE) OR Mileage.HasWarningComment(FALSE) THEN
                                        CurrReport.SKIP;
                                    UNTIL Mileage.NEXT = 0;

                                  Expense.SETRANGE("Settlement No.","No.");
                                  IF Expense.FINDSET THEN
                                    WITH Expense DO
                                      REPEAT
                                        IF AllocationExists THEN BEGIN
                                          CALCFIELDS("Allocated Amount (LCY)");
                                          IF "Allocated Amount (LCY)" <> "Amount (LCY)" THEN
                                            CurrReport.SKIP;
                                        END;

                                        CODEUNIT.RUN(CODEUNIT::"Expense-Validate",Expense);
                                        IF HasErrorComment(FALSE,FALSE) OR HasWarningComment(FALSE) THEN
                                          CurrReport.SKIP;

                                      UNTIL NEXT = 0;
                                  Window.UPDATE(1,ROUND(Counter / CounterTotal * 10000,1));

                                  COMMIT;

                                  Settlement2 := "Expense Header";
                                  IF ReplacePostingDate AND (PostingDateReq <> 0D) THEN
                                    Settlement2."Posting Date" := PostingDateReq;
                                  IF SettlementCheck.RUN(Settlement2) THEN BEGIN
                                    TempSettlementToPost.COPY(Settlement2);
                                    TempSettlementToPost.INSERT;

                                    IF MARKEDONLY THEN
                                      MARK(FALSE);
                                  END ELSE
                                    IF CounterTotal = 1 THEN
                                      ERROR(GETLASTERRORTEXT);
                                END;

               ReqFilterFields=Continia User ID,Posting Date }

    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               CounterTotal := TempSettlementToPost.COUNT;
                               SETRANGE(Number,1,CounterTotal);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    TempSettlementToPost.FINDFIRST
                                  ELSE
                                    TempSettlementToPost.NEXT;

                                  "Expense Header".GET(TempSettlementToPost."Document Type",TempSettlementToPost."No.");
                                  Window.UPDATE(2,ROUND(Number / CounterTotal * 10000,1));
                                  IF ReplacePostingDate THEN BEGIN
                                    TempSettlementToPost."Posting Date" := PostingDateReq;
                                    TempSettlementToPost.UpdatePostingDate(PostingDatePolicy);
                                  END;
                                  SettlementPost.RunWithoutCheck(TempSettlementToPost);

                                  CounterOK := CounterOK + 1;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=[DEU=Stapelbuchen Ausgleiche;
                 ENU=Batch Post Settlements;
                 NLD=Batchboeken afrekeningen];
      OnOpenPage=BEGIN
                   PostingDateEditable := PostingDatePolicy = PostingDatePolicy::"Specific Date";
                   PostingDatePolicyEditable :=  ReplacePostingDate;
                 END;

    }
    CONTROLS
    {
      { 5   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 4   ;1   ;Group     ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             SVE=Alternativ] }

      { 3   ;2   ;Field     ;
                  Name=Replace Posting Date;
                  CaptionML=[DEU=Buchungsdatum ersetzen;
                             ENU=Replace Posting Date;
                             NLD=Vervang boekingsdatum;
                             SVE=ErsÑtt bokfîringsdatum];
                  SourceExpr=ReplacePostingDate;
                  OnValidate=BEGIN
                               PostingDatePolicyEditable :=  ReplacePostingDate;
                               CLEAR(PostingDatePolicy);
                               CLEAR(PostingDateReq);
                             END;
                              }

      { 1160040000;2;Field  ;
                  Name=Posting Date Policy;
                  CaptionML=[DEU=Buchungsdatumpolitik;
                             ENU=Posting Date Policy;
                             NLD=Boekingsdatumbeleid];
                  OptionCaptionML=[DEU=Erste Ausgabe/Kilometerleistungsdatum,Letzte Ausgabe/Kilometerleistungsdatum,Spezifisches Datum;
                                   ENU=First Expense/Mileage Date,Last Expense/Mileage Date,Specific Date;
                                   NLD=Eerste uitgave/kilometragedatum,Laatste uitgave/kilometragedatum,Specifieke datum];
                  SourceExpr=PostingDatePolicy;
                  Editable=PostingDatePolicyEditable;
                  OnValidate=BEGIN
                               IF PostingDatePolicy <> PostingDatePolicy::"Specific Date" THEN
                                 CLEAR(PostingDateReq);

                               PostingDateEditable := PostingDatePolicy = PostingDatePolicy::"Specific Date";
                             END;
                              }

      { 2   ;2   ;Field     ;
                  Name=Posting Date;
                  CaptionML=[DEU=Buchungsdatum;
                             ENU=Posting Date;
                             NLD=Boekingsdatum;
                             SVE=Bokfîringsdatum];
                  SourceExpr=PostingDateReq;
                  Editable=PostingDateEditable }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SettlementPost@1010 : Codeunit 6086338;
      SettlementCheck@1001 : Codeunit 6086349;
      TempSettlementToPost@1000 : TEMPORARY Record 6086339;
      Window@1009 : Dialog;
      Counter@1008 : Integer;
      CounterOK@1007 : Integer;
      CounterTotal@1006 : Integer;
      PostingDateReq@1005 : Date;
      ReplacePostingDate@1004 : Boolean;
      ReplaceDocumentDate@1003 : Boolean;
      Text000@1015 : TextConst 'DEU=Bitte das Buchungsdatum eingeben.;ENU=Please enter the posting date.;NLD=Geef de boekingsdatum in a.u.b.;SVE=Skriv in bokfîringsdatum.';
      Text001@1014 : TextConst 'DEU=Ausgleiche buchen...;ENU=Posting Settlements...;NLD=Afrekeningen boeken...';
      Text002@1013 : TextConst 'DEU=\PrÅfung der Zeilen @1@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=\Checking lines @1@@@@@@@@@@@@@@@@@@@@@@@@@@;NLD=\Regels controleren @1@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text003@1012 : TextConst 'DEU=\Buchung der Zeilen @2@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=\Posting lines  @2@@@@@@@@@@@@@@@@@@@@@@@@@@;NLD=\Boeken regels      @2@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Expense@1002 : Record 6086320;
      Mileage@1016 : Record 6086338;
      PostingDatePolicy@1160040002 : 'First Expense/Mileage Date,Last Expense/Mileage Date,Specific Date';
      PostingDateEditable@1018 : Boolean INDATASET;
      Text004@6086300 : TextConst 'DEU=%1 von insgesamt %2 Ausgleichen wurden gebucht.;ENU=%1 settlements out of a total of %2 have been posted.;NLD=%1 van in totaal %2 afrekeningen zijn geboekt.';
      PostingDatePolicyEditable@6086301 : Boolean INDATASET;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

