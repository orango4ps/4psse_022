OBJECT Page 9203 Budget Matrix
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Budget Matrix;
               NOR=Budsjettmatrise;
               SVE=Budgetmatris];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=BudgetName;
    PageType=ListPart;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 IF GLAccBudgetBuf.GETFILTER("Global Dimension 1 Filter") <> '' THEN
                   GlobalDim1Filter := GLAccBudgetBuf.GETFILTER("Global Dimension 1 Filter");
                 IF GLAccBudgetBuf.GETFILTER("Global Dimension 2 Filter") <> '' THEN
                   GlobalDim2Filter := GLAccBudgetBuf.GETFILTER("Global Dimension 2 Filter");

                 GLSetup.GET;
               END;

    OnFindRecord=BEGIN
                   EXIT(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(LineDimOption,Rec,Steps));
                 END;

    OnAfterGetRecord=VAR
                       MATRIX_CurrentColumnOrdinal@1045 : Integer;
                     BEGIN
                       NameIndent := 0;
                       FOR MATRIX_CurrentColumnOrdinal := 1 TO MATRIX_CurrentNoOfMatrixColumn DO
                         MATRIX_OnAfterGetRecord(MATRIX_CurrentColumnOrdinal);
                       Amount := MatrixMgt.RoundValue(CalcAmount(FALSE),RoundingFactor);
                       FormatLine;
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;ActionGroup;
                      CaptionML=[ENU=&Balance;
                                 NOR=&Saldo;
                                 SVE=Sa&ldo];
                      Image=Balance }
      { 3       ;2   ;Action    ;
                      Name=GLAccBalanceBudget;
                      CaptionML=[ENU=G/L Account Balance/Bud&get;
                                 NOR=&Finanskontosaldo/Budsjett;
                                 SVE=Redov.kontosaldo/&budget];
                      ToolTipML=[ENU=Open a summary of the debit and credit balances for the current budget.;
                                 NOR=èpne en oversikt over debet- og kreditsaldi for det gjeldende budsjettet.;
                                 SVE=ôppna en summering av debet- och kreditsaldona fîr aktuell budget.];
                      ApplicationArea=#Suite;
                      Image=Period;
                      OnAction=BEGIN
                                 GLAccountBalanceBudget;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                IndentationColumnName=NameIndent;
                IndentationControls=Name;
                GroupType=Repeater }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the record.;
                           NOR=Angir koden for bokfõringen.;
                           SVE=Anger postens kod.];
                ApplicationArea=#Suite;
                SourceExpr=Code;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=Emphasize;
                OnLookup=BEGIN
                           LookUpCode(LineDimOption,LineDimCode,Code);
                         END;
                          }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the record.;
                           NOR=Angir navnet pÜ posten.;
                           SVE=Anger postens namn.];
                ApplicationArea=#Suite;
                SourceExpr=Name;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=Emphasize }

    { 24  ;2   ;Field     ;
                Name=TotalBudgetedAmount;
                CaptionML=[ENU=Budgeted Amount;
                           NOR=Budsjettert belõp;
                           SVE=Budget];
                ToolTipML=[ENU=Specifies the G/L account's total budget.;
                           NOR=Angir det totale budsjettet for finanskontoen.;
                           SVE=Anger redovisningskontots totala budget.];
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=Amount;
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              SetCommonFilters(GLAccBudgetBuf);
                              SetDimFilters(GLAccBudgetBuf,0);
                              BudgetDrillDown;
                            END;
                             }

    { 1012;2   ;Field     ;
                Name=Field1;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[1];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[1];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(1);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(1);
                            END;
                             }

    { 1013;2   ;Field     ;
                Name=Field2;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[2];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[2];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(2);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(2);
                            END;
                             }

    { 1014;2   ;Field     ;
                Name=Field3;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[3];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[3];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(3);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(3);
                            END;
                             }

    { 1015;2   ;Field     ;
                Name=Field4;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[4];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[4];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(4);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(4);
                            END;
                             }

    { 1016;2   ;Field     ;
                Name=Field5;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[5];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[5];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(5);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(5);
                            END;
                             }

    { 1017;2   ;Field     ;
                Name=Field6;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[6];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[6];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(6);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(6);
                            END;
                             }

    { 1018;2   ;Field     ;
                Name=Field7;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[7];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[7];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(7);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(7);
                            END;
                             }

    { 1019;2   ;Field     ;
                Name=Field8;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[8];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[8];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(8);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(8);
                            END;
                             }

    { 1020;2   ;Field     ;
                Name=Field9;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[9];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[9];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(9);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(9);
                            END;
                             }

    { 1021;2   ;Field     ;
                Name=Field10;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[10];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[10];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(10);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(10);
                            END;
                             }

    { 1022;2   ;Field     ;
                Name=Field11;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[11];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[11];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(11);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(11);
                            END;
                             }

    { 1023;2   ;Field     ;
                Name=Field12;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[12];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[12];
                Style=Strong;
                StyleExpr=Emphasize;
                OnValidate=BEGIN
                             UpdateAmount(12);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(12);
                            END;
                             }

  }
  CODE
  {
    VAR
      Text001@1082 : TextConst 'ENU=Period;NOR=Periode;SVE=Period';
      Text002@1002 : TextConst 'ENU=You may only edit column 1 to %1.;NOR=Du kan bare redigere kolonne 1 til %1.;SVE=Du kan bara redigera kolumn 1 till %1.';
      GLSetup@1093 : Record 98;
      GLAccBudgetBuf@1094 : Record 374;
      GLBudgetName@1095 : Record 95;
      MatrixRecords@1001 : ARRAY [12] OF Record 367;
      MATRIX_MatrixRecord@1000 : Record 367;
      MatrixMgt@1003 : Codeunit 9200;
      BudgetName@1097 : Code[10];
      LineDimOption@1098 : 'G/L Account,Period,Business Unit,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';
      ColumnDimOption@1099 : 'G/L Account,Period,Business Unit,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';
      LineDimCode@1100 : Text[30];
      PeriodType@1102 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      RoundingFactor@1103 : 'None,1,1000,1000000';
      DateFilter@1106 : Text[30];
      InternalDateFilter@1107 : Text[30];
      BusUnitFilter@1108 : Code[250];
      GLAccFilter@1109 : Code[250];
      IncomeBalanceGLAccFilter@1005 : ' ,Income Statement,Balance Sheet';
      GLAccCategoryFilter@1006 : ' ,Assets,Liabilities,Equity,Income,Cost of Goods Sold,Expense';
      GlobalDim1Filter@1110 : Code[250];
      GlobalDim2Filter@1111 : Code[250];
      BudgetDim1Filter@1112 : Code[250];
      BudgetDim2Filter@1113 : Code[250];
      BudgetDim3Filter@1114 : Code[250];
      BudgetDim4Filter@1115 : Code[250];
      PeriodInitialized@1117 : Boolean;
      MATRIX_CurrentNoOfMatrixColumn@1124 : Integer;
      MATRIX_CellData@1125 : ARRAY [12] OF Decimal;
      MATRIX_CaptionSet@1126 : ARRAY [12] OF Text[80];
      RoundingFactorFormatString@1004 : Text;
      Emphasize@19018670 : Boolean INDATASET;
      NameIndent@19079073 : Integer INDATASET;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      BusUnit@1001 : Record 220;
      GLAcc@1002 : Record 15;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        GLAcc.TABLECAPTION:
          EXIT(0);
        Text001:
          EXIT(1);
        BusUnit.TABLECAPTION:
          EXIT(2);
        GLSetup."Global Dimension 1 Code":
          EXIT(3);
        GLSetup."Global Dimension 2 Code":
          EXIT(4);
        GLBudgetName."Budget Dimension 1 Code":
          EXIT(5);
        GLBudgetName."Budget Dimension 2 Code":
          EXIT(6);
        GLBudgetName."Budget Dimension 3 Code":
          EXIT(7);
        GLBudgetName."Budget Dimension 4 Code":
          EXIT(8);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@1130(DimOption@1000 : 'G/L Account,Period,Business Unit,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      GLAcc@1131 : Record 15;
      BusUnit@1132 : Record 220;
      Period@1133 : Record 2000000007;
      DimVal@1134 : Record 349;
      PeriodFormMgt@1135 : Codeunit 359;
      Found@1136 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            SetIncomeBalanceGLAccFilterOnGLAcc(GLAcc);
            IF GLAccCategoryFilter <> GLAccCategoryFilter::" " THEN
              GLAcc.SETRANGE("Account Category",GLAccCategoryFilter);
            Found := GLAcc.FIND(Which);
            IF Found THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            IF Found THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Global Dimension 1":
          BEGIN
            IF GlobalDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Global Dimension 2":
          BEGIN
            IF GlobalDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 1":
          BEGIN
            IF BudgetDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim1Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 2":
          BEGIN
            IF BudgetDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim2Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 3":
          BEGIN
            IF BudgetDim3Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim3Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 4":
          BEGIN
            IF BudgetDim4Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim4Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@1137(DimOption@1000 : 'G/L Account,Period,Business Unit,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1138 : Record 15;
      BusUnit@1139 : Record 220;
      Period@1140 : Record 2000000007;
      DimVal@1141 : Record 349;
      PeriodFormMgt@1142 : Codeunit 359;
      ResultSteps@1143 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            SetIncomeBalanceGLAccFilterOnGLAcc(GLAcc);
            IF GLAccCategoryFilter <> GLAccCategoryFilter::" " THEN
              GLAcc.SETRANGE("Account Category",GLAccCategoryFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Global Dimension 1":
          BEGIN
            IF GlobalDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Global Dimension 2":
          BEGIN
            IF GlobalDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 1":
          BEGIN
            IF BudgetDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim1Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 2":
          BEGIN
            IF BudgetDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim2Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 3":
          BEGIN
            IF BudgetDim3Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim3Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Budget Dimension 4":
          BEGIN
            IF BudgetDim4Filter <> '' THEN
              DimVal.SETFILTER(Code,BudgetDim4Filter);
            DimVal."Dimension Code" := GLBudgetName."Budget Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1144(VAR TheGLAcc@1000 : Record 15;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@1145(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    VAR
      Period2@1146 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@1147(VAR TheBusUnit@1000 : Record 220;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheBusUnit.Code;
        IF TheBusUnit.Name <> '' THEN
          Name := TheBusUnit.Name
        ELSE
          Name := TheBusUnit."Company Name";
      END;
    END;

    LOCAL PROCEDURE CopyDimValToBuf@1148(VAR TheDimVal@1000 : Record 349;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE LookUpCode@1160(DimOption@1000 : 'G/L Account,Period,Business Unit,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';DimCode@1001 : Text[30];Code@1002 : Text[30]);
    VAR
      GLAcc@1161 : Record 15;
      BusUnit@1162 : Record 220;
      DimVal@1163 : Record 349;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc.GET(Code);
            PAGE.RUNMODAL(PAGE::"G/L Account List",GLAcc);
          END;
        DimOption::Period:
          ;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.GET(Code);
            PAGE.RUNMODAL(PAGE::"Business Unit List",BusUnit);
          END;
        DimOption::"Global Dimension 1",DimOption::"Global Dimension 2",
        DimOption::"Budget Dimension 1",DimOption::"Budget Dimension 2",
        DimOption::"Budget Dimension 3",DimOption::"Budget Dimension 4":
          BEGIN
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);

            PAGE.RUNMODAL(PAGE::"Dimension Value List",DimVal);
          END;
      END;
    END;

    LOCAL PROCEDURE SetCommonFilters@1168(VAR TheGLAccBudgetBuf@1000 : Record 374);
    BEGIN
      WITH TheGLAccBudgetBuf DO BEGIN
        RESET;
        SETRANGE("Budget Filter",GLBudgetName.Name);
        IF BusUnitFilter <> '' THEN
          SETFILTER("Business Unit Filter",BusUnitFilter);
        IF GLAccFilter <> '' THEN
          SETFILTER("G/L Account Filter",GLAccFilter);
        IF IncomeBalanceGLAccFilter <> IncomeBalanceGLAccFilter::" " THEN
          SETRANGE("Income/Balance",IncomeBalanceGLAccFilter);
        IF DateFilter <> '' THEN
          SETFILTER("Date Filter",DateFilter);
        IF GlobalDim1Filter <> '' THEN
          SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
        IF GlobalDim2Filter <> '' THEN
          SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
        IF BudgetDim1Filter <> '' THEN
          SETFILTER("Budget Dimension 1 Filter",BudgetDim1Filter);
        IF BudgetDim2Filter <> '' THEN
          SETFILTER("Budget Dimension 2 Filter",BudgetDim2Filter);
        IF BudgetDim3Filter <> '' THEN
          SETFILTER("Budget Dimension 3 Filter",BudgetDim3Filter);
        IF BudgetDim4Filter <> '' THEN
          SETFILTER("Budget Dimension 4 Filter",BudgetDim4Filter);
      END;
    END;

    LOCAL PROCEDURE SetDimFilters@1169(VAR TheGLAccBudgetBuf@1000 : Record 374;LineOrColumn@1001 : 'Line,Column');
    VAR
      DimCodeBuf@1002 : Record 367;
      DimOption@1170 : 'G/L Account,Period,Business Unit,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      END ELSE BEGIN
        DimCodeBuf := MATRIX_MatrixRecord;
        DimOption := ColumnDimOption;
      END;

      WITH TheGLAccBudgetBuf DO
        CASE DimOption OF
          DimOption::"G/L Account":
            IF DimCodeBuf.Totaling <> '' THEN
              GLAccBudgetBuf.SETFILTER("G/L Account Filter",DimCodeBuf.Totaling)
            ELSE
              GLAccBudgetBuf.SETRANGE("G/L Account Filter",DimCodeBuf.Code);
          DimOption::Period:
            SETRANGE("Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End");
          DimOption::"Business Unit":
            SETRANGE("Business Unit Filter",DimCodeBuf.Code);
          DimOption::"Global Dimension 1":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Global Dimension 1 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Global Dimension 1 Filter",DimCodeBuf.Code);
          DimOption::"Global Dimension 2":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Global Dimension 2 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Global Dimension 2 Filter",DimCodeBuf.Code);
          DimOption::"Budget Dimension 1":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Budget Dimension 1 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Budget Dimension 1 Filter",DimCodeBuf.Code);
          DimOption::"Budget Dimension 2":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Budget Dimension 2 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Budget Dimension 2 Filter",DimCodeBuf.Code);
          DimOption::"Budget Dimension 3":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Budget Dimension 3 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Budget Dimension 3 Filter",DimCodeBuf.Code);
          DimOption::"Budget Dimension 4":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Budget Dimension 4 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Budget Dimension 4 Filter",DimCodeBuf.Code);
        END;
    END;

    LOCAL PROCEDURE BudgetDrillDown@1172();
    VAR
      GLBudgetEntry@1173 : Record 96;
      GLBudgetEntries@1000 : Page 120;
    BEGIN
      GLBudgetEntry.SETRANGE("Budget Name",GLBudgetName.Name);
      IF GLAccBudgetBuf.GETFILTER("G/L Account Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("G/L Account Filter",GLBudgetEntry."G/L Account No.");
      IF GLAccBudgetBuf.GETFILTER("Business Unit Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Business Unit Filter",GLBudgetEntry."Business Unit Code");
      IF GLAccBudgetBuf.GETFILTER("Global Dimension 1 Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Global Dimension 1 Filter",GLBudgetEntry."Global Dimension 1 Code");
      IF GLAccBudgetBuf.GETFILTER("Global Dimension 2 Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Global Dimension 2 Filter",GLBudgetEntry."Global Dimension 2 Code");
      IF GLAccBudgetBuf.GETFILTER("Budget Dimension 1 Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Budget Dimension 1 Filter",GLBudgetEntry."Budget Dimension 1 Code");
      IF GLAccBudgetBuf.GETFILTER("Budget Dimension 2 Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Budget Dimension 2 Filter",GLBudgetEntry."Budget Dimension 2 Code");
      IF GLAccBudgetBuf.GETFILTER("Budget Dimension 3 Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Budget Dimension 3 Filter",GLBudgetEntry."Budget Dimension 3 Code");
      IF GLAccBudgetBuf.GETFILTER("Budget Dimension 4 Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Budget Dimension 4 Filter",GLBudgetEntry."Budget Dimension 4 Code");
      IF GLAccBudgetBuf.GETFILTER("Date Filter") <> '' THEN
        GLAccBudgetBuf.COPYFILTER("Date Filter",GLBudgetEntry.Date)
      ELSE
        GLBudgetEntry.SETRANGE(Date,0D,DMY2DATE(31,12,9999));
      WITH GLBudgetEntry DO
        IF (GETFILTER("Global Dimension 1 Code") <> '') OR (GETFILTER("Global Dimension 2 Code") <> '') OR
           (GETFILTER("Business Unit Code") <> '')
        THEN
          SETCURRENTKEY("Budget Name","G/L Account No.","Business Unit Code","Global Dimension 1 Code")
        ELSE
          SETCURRENTKEY("Budget Name","G/L Account No.",Date);
      GLBudgetEntries.SetEditable(TRUE);
      GLBudgetEntries.SETTABLEVIEW(GLBudgetEntry);
      GLBudgetEntries.RUN;
    END;

    LOCAL PROCEDURE CalcAmount@1184(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(GLAccBudgetBuf);
      SetDimFilters(GLAccBudgetBuf,0);
      IF SetColumnFilter THEN
        SetDimFilters(GLAccBudgetBuf,1);
      GLAccBudgetBuf.CALCFIELDS("Budgeted Amount");
      EXIT(GLAccBudgetBuf."Budgeted Amount");
    END;

    LOCAL PROCEDURE FromRoundedValue@3(OrgAmount@1000 : Decimal) : Decimal;
    VAR
      NewAmount@1001 : Decimal;
    BEGIN
      NewAmount := OrgAmount;
      CASE RoundingFactor OF
        RoundingFactor::"1000":
          NewAmount := OrgAmount * 1000;
        RoundingFactor::"1000000":
          NewAmount := OrgAmount * 1000000;
      END;
      EXIT(NewAmount);
    END;

    [External]
    PROCEDURE Load@1186(MatrixColumns1@1005 : ARRAY [32] OF Text[80];VAR MatrixRecords1@1006 : ARRAY [12] OF Record 367;CurrentNoOfMatrixColumns@1007 : Integer;_LineDimCode@1015 : Text[30];_LineDimOption@1000 : Integer;_ColumnDimOption@1002 : Integer;_GlobalDim1Filter@1001 : Code[250];_GlobalDim2Filter@1003 : Code[250];_BudgetDim1Filter@1004 : Code[250];_BudgetDim2Filter@1010 : Code[250];_BudgetDim3Filter@1009 : Code[250];_BudgetDim4Filter@1008 : Code[250];VAR _GLBudgetName@1011 : Record 95;_DateFilter@1012 : Text[30];_GLAccFilter@1013 : Code[250];_IncomeBalanceGLAccFilter@1018 : Option;_GLAccCategoryFilter@1019 : Option;_RoundingFactor@1014 : Integer;_PeriodType@1017 : 'Day,Week,Month,Quarter,Year,Accounting Period');
    VAR
      i@1016 : Integer;
    BEGIN
      FOR i := 1 TO 12 DO
        MATRIX_CellData[i] := 0;

      FOR i := 1 TO 12 DO BEGIN
        IF MatrixColumns1[i] = '' THEN
          MATRIX_CaptionSet[i] := ' '
        ELSE
          MATRIX_CaptionSet[i] := MatrixColumns1[i];
        MatrixRecords[i] := MatrixRecords1[i];
      END;
      IF CurrentNoOfMatrixColumns > ARRAYLEN(MATRIX_CellData) THEN
        MATRIX_CurrentNoOfMatrixColumn := ARRAYLEN(MATRIX_CellData)
      ELSE
        MATRIX_CurrentNoOfMatrixColumn := CurrentNoOfMatrixColumns;
      LineDimCode := _LineDimCode;
      LineDimOption := _LineDimOption;
      ColumnDimOption := _ColumnDimOption;
      GlobalDim1Filter := _GlobalDim1Filter;
      GlobalDim2Filter := _GlobalDim2Filter;
      BudgetDim1Filter := _BudgetDim1Filter;
      BudgetDim2Filter := _BudgetDim2Filter;
      BudgetDim3Filter := _BudgetDim3Filter;
      BudgetDim4Filter := _BudgetDim4Filter;
      GLBudgetName := _GLBudgetName;
      DateFilter := _DateFilter;
      GLAccFilter := _GLAccFilter;
      IncomeBalanceGLAccFilter := _IncomeBalanceGLAccFilter;
      GLAccCategoryFilter := _GLAccCategoryFilter;
      RoundingFactor := _RoundingFactor;
      PeriodType := _PeriodType;
      RoundingFactorFormatString := MatrixMgt.GetFormatString(RoundingFactor,FALSE);
      InternalDateFilter := '';
    END;

    LOCAL PROCEDURE MATRIX_OnDrillDown@1187(MATRIX_ColumnOrdinal@1008 : Integer);
    BEGIN
      MATRIX_MatrixRecord := MatrixRecords[MATRIX_ColumnOrdinal];
      SetCommonFilters(GLAccBudgetBuf);
      SetDimFilters(GLAccBudgetBuf,0);
      SetDimFilters(GLAccBudgetBuf,1);
      BudgetDrillDown;
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1189(MATRIX_ColumnOrdinal@1010 : Integer);
    BEGIN
      MATRIX_MatrixRecord := MatrixRecords[MATRIX_ColumnOrdinal];
      MATRIX_CellData[MATRIX_ColumnOrdinal] := MatrixMgt.RoundValue(CalcAmount(TRUE),RoundingFactor);
    END;

    LOCAL PROCEDURE UpdateAmount@1102601001(MATRIX_ColumnOrdinal@1102601000 : Integer);
    VAR
      NewAmount@1000 : Decimal;
    BEGIN
      IF MATRIX_ColumnOrdinal > MATRIX_CurrentNoOfMatrixColumn THEN
        ERROR(Text002,MATRIX_CurrentNoOfMatrixColumn);
      MATRIX_MatrixRecord := MatrixRecords[MATRIX_ColumnOrdinal];
      NewAmount := FromRoundedValue(MATRIX_CellData[MATRIX_ColumnOrdinal]);
      IF CalcAmount(TRUE) = 0 THEN; // To set filters correctly
      GLAccBudgetBuf.CALCFIELDS("Budgeted Amount");
      GLAccBudgetBuf.VALIDATE("Budgeted Amount",NewAmount);
      Amount := MatrixMgt.RoundValue(CalcAmount(FALSE),RoundingFactor);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE GLAccountBalanceBudget@1102601002();
    VAR
      GLAcc@1102601000 : Record 15;
    BEGIN
      IF DimCodeToOption(LineDimCode) = 0 THEN
        GLAcc.GET(Code)
      ELSE BEGIN
        IF GLAccFilter <> '' THEN
          GLAcc.SETFILTER("No.",GLAccFilter);
        SetIncomeBalanceGLAccFilterOnGLAcc(GLAcc);
        IF GLAccCategoryFilter <> GLAccCategoryFilter::" " THEN
          GLAcc.SETRANGE("Account Category",GLAccCategoryFilter);
        GLAcc.FINDFIRST;
        GLAcc.RESET;
      END;
      WITH GLAcc DO BEGIN
        SETRANGE("Budget Filter",GLBudgetName.Name);
        IF DateFilter <> '' THEN
          SETFILTER("Date Filter",DateFilter);
        IF BusUnitFilter <> '' THEN
          SETFILTER("Business Unit Filter",BusUnitFilter);
        IF GLAccFilter <> '' THEN
          SETFILTER("No.",GLAccFilter);
        SetIncomeBalanceGLAccFilterOnGLAcc(GLAcc);
        IF GLAccCategoryFilter <> GLAccCategoryFilter::" " THEN
          SETRANGE("Account Category",GLAccCategoryFilter);
        IF GlobalDim1Filter <> '' THEN
          SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
        IF GlobalDim2Filter <> '' THEN
          SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
      END;
      PAGE.RUN(PAGE::"G/L Account Balance/Budget",GLAcc);
    END;

    LOCAL PROCEDURE FormatLine@19039177();
    BEGIN
      Emphasize := "Show in Bold";
      NameIndent := Indentation;
    END;

    LOCAL PROCEDURE FormatStr@8() : Text;
    BEGIN
      EXIT(RoundingFactorFormatString);
    END;

    LOCAL PROCEDURE SetIncomeBalanceGLAccFilterOnGLAcc@5(VAR GLAccount@1000 : Record 15);
    BEGIN
      CASE IncomeBalanceGLAccFilter OF
        IncomeBalanceGLAccFilter::"Balance Sheet":
          GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
        IncomeBalanceGLAccFilter::"Income Statement":
          GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Income Statement");
      END;

      OnAfterSetIncomeBalanceGLAccFilterOnGLAcc(GLAccount);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetIncomeBalanceGLAccFilterOnGLAcc@1(VAR GLAccount@1000 : Record 15);
    BEGIN
    END;

    BEGIN
    END.
  }
}

