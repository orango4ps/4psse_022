OBJECT Table 1797 Data Migration Error
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=Data Migration Error;
               NOR=Datamigreringsfeil];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Id;
                                                              NOR=ID;
                                                              SVE=ID] }
    { 2   ;   ;Migration Type      ;Text250       ;CaptionML=[ENU=Migration Type;
                                                              NOR=Migreringstype] }
    { 3   ;   ;Destination Table ID;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Destination Table ID;
                                                              NOR=ID for m†ltabell] }
    { 4   ;   ;Source Staging Table Record ID;RecordID;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Source Staging Table Record ID;
                                                              NOR=Tabellpost-ID for kildeoppsamling] }
    { 5   ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              NOR=Feilmelding;
                                                              SVE=Felmeddelande] }
    { 6   ;   ;Scheduled For Retry ;Boolean       ;CaptionML=[ENU=Scheduled For Retry;
                                                              NOR=Planlagt for nytt fors›k] }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;Destination Table ID,Migration Type      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE CreateEntryWithMessage@8(MigrationType@1000 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1002 : RecordID;ErrorMessage@1004 : Text[250]);
    VAR
      DataMigrationError@1003 : Record 1797;
    BEGIN
      INIT;
      IF DataMigrationError.FINDLAST THEN
        Id := DataMigrationError.Id + 1
      ELSE
        Id := 1;
      VALIDATE("Migration Type",MigrationType);
      VALIDATE("Destination Table ID",DestinationTableId);
      VALIDATE("Source Staging Table Record ID",SourceStagingTableRecordId);
      VALIDATE("Error Message",ErrorMessage);
      VALIDATE("Scheduled For Retry",FALSE);
      INSERT(TRUE);

      OnAfterErrorInserted(MigrationType,ErrorMessage);
    END;

    [External]
    PROCEDURE CreateEntry@1(MigrationType@1000 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1002 : RecordID);
    BEGIN
      CreateEntryWithMessage(MigrationType,DestinationTableId,SourceStagingTableRecordId,COPYSTR(GETLASTERRORTEXT,1,250));
    END;

    [External]
    PROCEDURE CreateEntryNoStagingTable@5(MigrationType@1000 : Text[250];DestinationTableId@1001 : Integer);
    VAR
      DummyRecordId@1002 : RecordID;
    BEGIN
      CreateEntry(MigrationType,DestinationTableId,DummyRecordId);
    END;

    [External]
    PROCEDURE CreateEntryNoStagingTableWithMessage@6(MigrationType@1000 : Text[250];DestinationTableId@1001 : Integer;ErrorMessage@1003 : Text[250]);
    VAR
      DummyRecordId@1002 : RecordID;
    BEGIN
      CreateEntryWithMessage(MigrationType,DestinationTableId,DummyRecordId,ErrorMessage);
    END;

    [External]
    PROCEDURE ClearEntry@2(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1000 : RecordID);
    BEGIN
      IF FindEntry(MigrationType,DestinationTableId,SourceStagingTableRecordId) THEN
        DELETE(TRUE);
    END;

    [External]
    PROCEDURE ClearEntryNoStagingTable@7(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer);
    VAR
      DummyRecordId@1000 : RecordID;
    BEGIN
      ClearEntry(MigrationType,DestinationTableId,DummyRecordId);
    END;

    [External]
    PROCEDURE FindEntry@4(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1000 : RecordID) : Boolean;
    BEGIN
      FilterOnParameters(MigrationType,DestinationTableId,SourceStagingTableRecordId);
      EXIT(FINDFIRST);
    END;

    [External]
    PROCEDURE ExistsEntry@11(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1000 : RecordID) : Boolean;
    BEGIN
      FilterOnParameters(MigrationType,DestinationTableId,SourceStagingTableRecordId);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE FilterOnParameters@12(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1000 : RecordID);
    BEGIN
      SETRANGE("Migration Type",MigrationType);
      SETRANGE("Destination Table ID",DestinationTableId);
      SETRANGE("Source Staging Table Record ID",SourceStagingTableRecordId);
    END;

    [External]
    PROCEDURE Ignore@3();
    VAR
      DataMigrationStatusFacade@1000 : Codeunit 6101;
      RecordRef@1001 : RecordRef;
    BEGIN
      RecordRef.GET("Source Staging Table Record ID");
      RecordRef.DELETE(TRUE);
      DELETE(TRUE);
      DataMigrationStatusFacade.IgnoreErrors("Migration Type","Destination Table ID",1);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterErrorInserted@9(MigrationType@1000 : Text;ErrorMessage@1001 : Text);
    BEGIN
    END;

    [External]
    PROCEDURE GetErrorMessage@10(MigrationType@1000 : Text[250];SourceRecordId@1001 : RecordID;VAR ErrorMessage@1002 : Text[250]);
    BEGIN
      SETRANGE("Migration Type",MigrationType);
      SETRANGE("Source Staging Table Record ID",SourceRecordId);
      IF FINDFIRST THEN
        ErrorMessage := "Error Message"
      ELSE
        ErrorMessage := '';
    END;

    BEGIN
    END.
  }
}

