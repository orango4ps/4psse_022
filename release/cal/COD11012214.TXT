OBJECT Codeunit 11012214 Pstd. Purch. Doc. Func. (DMS)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm,
                TableData 122=rimd,
                TableData 124=rimd,
                TableData 11020477=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE Post@1100525002(Type@1100525003 : 'Purchase Invoice,Purchase Credit Memo';No@1100525002 : Code[20]);
    VAR
      PurchInvHeader@1100525000 : Record 122;
      PurchCrMemoHdr@1100525004 : Record 124;
      GenJournalTemplatePerRole@1100525001 : Record 11020419;
      InvoiceApprovalLine@1100525006 : Record 11012032;
      PostInvoiceApproval@1100525005 : Codeunit 11012027;
    BEGIN
      // jhoek.260511 (melding 27626)
      // PostInvoiceApproval.Post now allows posting of rejected invoices. An additional test
      // is required here to prevent external clients from posting rejected invoices/credit memos.

      CASE Type OF
        Type::"Purchase Invoice":
          BEGIN
            PurchInvHeader.GET(No);

            // jhoek.260511.begin
            IF PurchInvHeader."DMS Status" = PurchInvHeader."DMS Status"::Rejected THEN
              PurchInvHeader.FIELDERROR("DMS Status");
            // jhoek.260511.end

            GenJournalTemplatePerRole.CheckPermission(PurchInvHeader.TABLECAPTION, PurchInvHeader."Journal Template",TRUE);

            InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
            InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Purchase Invoice");
            InvoiceApprovalLine.SETRANGE("Document No.", PurchInvHeader."No.");
            IF NOT InvoiceApprovalLine.FINDFIRST THEN;
            PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
          END;
        Type::"Purchase Credit Memo":
          BEGIN
            PurchCrMemoHdr.GET(No);

            // jhoek.260511.begin
            IF PurchCrMemoHdr."DMS Status" = PurchCrMemoHdr."DMS Status"::Rejected THEN
              PurchCrMemoHdr.FIELDERROR("DMS Status");
            // jhoek.260511.end

            GenJournalTemplatePerRole.CheckPermission(PurchCrMemoHdr.TABLECAPTION, PurchCrMemoHdr."Journal Template",TRUE);

            InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchCrMemoHdr."Journal Template");
            InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Credit Memo");
            InvoiceApprovalLine.SETRANGE("Document No.", PurchCrMemoHdr."No.");
            IF NOT InvoiceApprovalLine.FINDFIRST THEN;
            PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
          END;
      END;
    END;

    [External]
    PROCEDURE SetStatus@1100525001(Type@1100525001 : 'Purchase Invoice,Purchase Credit Memo';No@1100525000 : Code[20];Status@1100525002 : 'Awaiting Line Entry,,,In Workflow,,,Approved,,,Rejected');
    VAR
      PurchInvHeader@1100525004 : Record 122;
      PurchCrMemoHdr@1100525003 : Record 124;
    BEGIN
      CASE Type OF
        Type::"Purchase Invoice":
          BEGIN
            PurchInvHeader.GET(No);

            CASE Status OF
              Status::"Awaiting Line Entry":
                PurchInvHeader."DMS Status" := PurchInvHeader."DMS Status"::"Awaiting Line Entry";
              Status::"In Workflow":
                PurchInvHeader."DMS Status" := PurchInvHeader."DMS Status"::"In Workflow";
              Status::Approved:
                PurchInvHeader."DMS Status" := PurchInvHeader."DMS Status"::Approved;
              Status::Rejected:
                PurchInvHeader."DMS Status" := PurchInvHeader."DMS Status"::Rejected;
            END;

            PurchInvHeader.MODIFY;
          END;
        Type::"Purchase Credit Memo":
          BEGIN
            PurchCrMemoHdr.GET(No);

            CASE Status OF
              Status::"Awaiting Line Entry":
                PurchCrMemoHdr."DMS Status" := PurchCrMemoHdr."DMS Status"::"Awaiting Line Entry";
              Status::"In Workflow":
                PurchCrMemoHdr."DMS Status" := PurchCrMemoHdr."DMS Status"::"In Workflow";
              Status::Approved:
                PurchCrMemoHdr."DMS Status" := PurchCrMemoHdr."DMS Status"::Approved;
              Status::Rejected:
               PurchCrMemoHdr."DMS Status" := PurchCrMemoHdr."DMS Status"::Rejected;
            END;

            PurchCrMemoHdr.MODIFY;
          END;
      END;
    END;

    [External]
    PROCEDURE SetStatusText@1100525000(Type@1100525000 : 'Purchase Invoice,Purchase Credit Memo';No@1100525001 : Code[20];StatusText@1100525002 : Text[80]);
    VAR
      PurchInvHeader@1100525003 : Record 122;
      PurchCrMemoHdr@1100525004 : Record 124;
    BEGIN
      CASE Type OF
        Type::"Purchase Invoice":
          BEGIN
            PurchInvHeader.GET(No);
            PurchInvHeader."DMS Status Text" := StatusText;
            PurchInvHeader.MODIFY;
          END;
        Type::"Purchase Credit Memo":
          BEGIN
            PurchCrMemoHdr.GET(No);
            PurchCrMemoHdr."DMS Status Text" := StatusText;
            PurchCrMemoHdr.MODIFY;
          END;
      END;
    END;

    [External]
    PROCEDURE SetRemainOnHold@1210190000(Type@1210190001 : 'Purchase Invoice,Purchase Credit Memo';No@1210190000 : Code[20];RemainOnHold@1210190002 : Boolean);
    VAR
      PurchInvHeader@1210190004 : Record 122;
      PurchCrMemoHdr@1210190003 : Record 124;
    BEGIN
      // jhoek.080611
      CASE Type OF
        Type::"Purchase Invoice":
          BEGIN
            PurchInvHeader.GET(No);
            PurchInvHeader."Remain On Hold" := RemainOnHold;
            PurchInvHeader.MODIFY;
          END;
        Type::"Purchase Credit Memo":
          BEGIN
            PurchCrMemoHdr.GET(No);
            PurchCrMemoHdr."Remain On Hold" := RemainOnHold;
            PurchCrMemoHdr.MODIFY;
          END;
      END;
    END;

    [External]
    PROCEDURE ClearOnHold@1210190001(Type@1210190001 : 'Purchase Invoice,Purchase Credit Memo';No@1210190000 : Code[20]);
    VAR
      VendorLedgerEntry@1210190004 : Record 25;
    BEGIN
      IF NOT SetDocFilterOnVendorLedgerEntry(Type, No, VendorLedgerEntry) THEN
        EXIT;

      IF VendorLedgerEntry.FINDSET(TRUE, FALSE) THEN
        REPEAT
          VendorLedgerEntry.VALIDATE("On Hold", '');
          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit", VendorLedgerEntry);
        UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE SetOnHold@1100528405(Type@1210190001 : 'Purchase Invoice,Purchase Credit Memo';No@1210190000 : Code[20];OnHoldCode@1100528400 : Code[3]);
    VAR
      VendorLedgerEntry@1210190004 : Record 25;
    BEGIN
      IF NOT SetDocFilterOnVendorLedgerEntry(Type, No, VendorLedgerEntry) THEN
        EXIT;

      IF VendorLedgerEntry.FINDSET(TRUE, FALSE) THEN
        REPEAT
          VendorLedgerEntry.VALIDATE("On Hold", OnHoldCode);
          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit", VendorLedgerEntry);
        UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE SetDueDate@1100528422(Type@1210190001 : 'Purchase Invoice,Purchase Credit Memo';No@1210190000 : Code[20];DueDate@1100528400 : Date);
    VAR
      VendorLedgerEntry@1210190004 : Record 25;
    BEGIN
      IF NOT SetDocFilterOnVendorLedgerEntry(Type, No, VendorLedgerEntry) THEN
        EXIT;

      IF VendorLedgerEntry.FINDSET(TRUE, FALSE) THEN
        REPEAT
          VendorLedgerEntry.VALIDATE("Due Date", DueDate);
          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit", VendorLedgerEntry);
        UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE SetPmtDiscountDate@1100528424(Type@1210190001 : 'Purchase Invoice,Purchase Credit Memo';No@1210190000 : Code[20];PmtDiscountDate@1100528400 : Date);
    VAR
      VendorLedgerEntry@1210190004 : Record 25;
    BEGIN
      IF NOT SetDocFilterOnVendorLedgerEntry(Type, No, VendorLedgerEntry) THEN
        EXIT;

      IF VendorLedgerEntry.FINDSET(TRUE, FALSE) THEN
        REPEAT
          VendorLedgerEntry.VALIDATE("Pmt. Discount Date", PmtDiscountDate);
          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit", VendorLedgerEntry);
        UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SetDocFilterOnVendorLedgerEntry@1100528408(Type@1210190001 : 'Purchase Invoice,Purchase Credit Memo';No@1210190000 : Code[20];VAR VendorLedgerEntry@1100528400 : Record 25) : Boolean;
    VAR
      DocumentType@1210190002 : Integer;
    BEGIN
      CASE Type OF
        Type::"Purchase Invoice":
          DocumentType := VendorLedgerEntry."Document Type"::Invoice;
        Type::"Purchase Credit Memo":
          DocumentType := VendorLedgerEntry."Document Type"::"Credit Memo";
      END;

      IF DocumentType = 0 THEN
        EXIT(FALSE);

      VendorLedgerEntry.SETCURRENTKEY("Document No.");
      VendorLedgerEntry.SETRANGE("Document No.", No);
      VendorLedgerEntry.SETRANGE("Document Type", DocumentType);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE UpdateInvoiceApprovers@1100525004(InvoiceNo@1100525000 : Code[20]);
    VAR
      PurchInvHeader@1100525005 : Record 122;
      InvoiceApprovalLine@1100525002 : Record 11012032;
    BEGIN
      PurchInvHeader.GET(InvoiceNo);
      PurchInvHeader.TESTFIELD("Journal Template");

      UpdateApprovers(
        PurchInvHeader."Journal Template",
        InvoiceApprovalLine."Document Type"::"Purchase Invoice",
        InvoiceNo,
        FALSE);
    END;

    [External]
    PROCEDURE UpdInvApproversInclPurchaser@1100528402(InvoiceNo@1100525000 : Code[20]);
    VAR
      PurchInvHeader@1100525005 : Record 122;
      InvoiceApprovalLine@1100525002 : Record 11012032;
    BEGIN
      PurchInvHeader.GET(InvoiceNo);
      PurchInvHeader.TESTFIELD("Journal Template");

      UpdateApprovers(
        PurchInvHeader."Journal Template",
        InvoiceApprovalLine."Document Type"::"Purchase Invoice",
        InvoiceNo,
        TRUE);
    END;

    [External]
    PROCEDURE UpdateCreditMemoApprovers@1100525005(CreditMemoNo@1100525000 : Code[20]);
    VAR
      InvoiceApprovalLine@1100525001 : Record 11012032;
      PurchCrMemoHdr@1100525005 : Record 124;
    BEGIN
      PurchCrMemoHdr.GET(CreditMemoNo);
      PurchCrMemoHdr.TESTFIELD("Journal Template");

      UpdateApprovers(
        PurchCrMemoHdr."Journal Template",
        InvoiceApprovalLine."Document Type"::"Credit Memo",
        CreditMemoNo,
        FALSE);
    END;

    [External]
    PROCEDURE UpdCrMApproversInclPurchaser@1100528403(CreditMemoNo@1100525000 : Code[20]);
    VAR
      InvoiceApprovalLine@1100525001 : Record 11012032;
      PurchCrMemoHdr@1100525005 : Record 124;
    BEGIN
      PurchCrMemoHdr.GET(CreditMemoNo);
      PurchCrMemoHdr.TESTFIELD("Journal Template");

      UpdateApprovers(
        PurchCrMemoHdr."Journal Template",
        InvoiceApprovalLine."Document Type"::"Credit Memo",
        CreditMemoNo,
        TRUE);
    END;

    LOCAL PROCEDURE UpdateApprovers@1100525007(JournalTemplateName@1100525000 : Code[10];DocumentType@1100525002 : Integer;DocumentNo@1100525003 : Code[20];IncludePurchaser@1100528400 : Boolean);
    VAR
      Job@1100525005 : Record 11072003;
      ServiceContract@1100525008 : Record 11012812;
      SalespersonPurchaser@1100525007 : Record 13;
      Employee@1100525006 : Record 5200;
      InvoiceApprovalLine@1100525004 : Record 11012032;
      DocumentApproverDMS@1100525001 : Record 11020477;
      PurchaseInvoiceLine@1100525009 : Record 123;
      CreditMemoLine@1100525010 : Record 125;
    BEGIN
      DocumentApproverDMS.SETRANGE("Document Type", DocumentType);
      DocumentApproverDMS.SETRANGE("Document No.", DocumentNo);
      DocumentApproverDMS.DELETEALL;

      InvoiceApprovalLine.SETRANGE("Journal Template Name", JournalTemplateName);
      InvoiceApprovalLine.SETRANGE("Document Type", DocumentType);
      InvoiceApprovalLine.SETRANGE("Document No.", DocumentNo);

      IF InvoiceApprovalLine.FINDSET THEN
        REPEAT
          IF InvoiceApprovalLine."Project No." <> '' THEN
            IF Job.GET(InvoiceApprovalLine."Project No.") THEN
              IF Job."Project Manager" <> '' THEN
                IF Employee.GET(Job."Project Manager") THEN BEGIN
                    DocumentApproverDMS.INIT;
                    DocumentApproverDMS."Document Type" := DocumentType;
                    DocumentApproverDMS."Document No." := DocumentNo;
                    DocumentApproverDMS."Approver E-Mail" := GetApproverEMailOfEmployee(Employee);
                    DocumentApproverDMS.Type := DocumentApproverDMS.Type::"Project Manager";
                    IF NOT DocumentApproverDMS.INSERT THEN;
                  END;

          IF InvoiceApprovalLine."Service Contract No." <> '' THEN
            IF ServiceContract.GET(InvoiceApprovalLine."Service Contract No.") THEN
              IF ServiceContract."Contract Manager" <> '' THEN
                IF SalespersonPurchaser.GET(ServiceContract."Contract Manager") THEN BEGIN
                  DocumentApproverDMS.INIT;
                  DocumentApproverDMS."Document Type" := DocumentType;
                  DocumentApproverDMS."Document No." := DocumentNo;
                  DocumentApproverDMS."Approver E-Mail" := GetApproverEMailOfPurchaser(SalespersonPurchaser);
                  DocumentApproverDMS.Type := DocumentApproverDMS.Type::"Service Contract Manager";
                  IF NOT DocumentApproverDMS.INSERT THEN;
                END;
        UNTIL InvoiceApprovalLine.NEXT = 0;

      //CALL C007013 snew
      IF DocumentType = InvoiceApprovalLine."Document Type"::"Purchase Invoice" THEN BEGIN
        PurchaseInvoiceLine.SETRANGE("Document No.", DocumentNo);
        IF PurchaseInvoiceLine.FINDSET THEN
          REPEAT
            IF PurchaseInvoiceLine."Job No." <> '' THEN
              IF Job.GET(PurchaseInvoiceLine."Job No.") THEN
                IF Job."Project Manager" <> '' THEN
                  IF Employee.GET(Job."Project Manager") THEN BEGIN
                      DocumentApproverDMS.INIT;
                      DocumentApproverDMS."Document Type" := DocumentType;
                      DocumentApproverDMS."Document No." := DocumentNo;
                      DocumentApproverDMS."Approver E-Mail" := GetApproverEMailOfEmployee(Employee);
                      DocumentApproverDMS.Type := DocumentApproverDMS.Type::"Project Manager";
                      IF NOT DocumentApproverDMS.INSERT THEN;
                    END;

            IF PurchaseInvoiceLine."Service Contract No." <> '' THEN
              IF ServiceContract.GET(PurchaseInvoiceLine."Service Contract No.") THEN
                IF ServiceContract."Contract Manager" <> '' THEN
                  IF SalespersonPurchaser.GET(ServiceContract."Contract Manager") THEN BEGIN
                    DocumentApproverDMS.INIT;
                    DocumentApproverDMS."Document Type" := DocumentType;
                    DocumentApproverDMS."Document No." := DocumentNo;
                    DocumentApproverDMS."Approver E-Mail" := GetApproverEMailOfPurchaser(SalespersonPurchaser);
                    DocumentApproverDMS.Type := DocumentApproverDMS.Type::"Service Contract Manager";
                    IF NOT DocumentApproverDMS.INSERT THEN;
                  END;
          UNTIL PurchaseInvoiceLine.NEXT = 0;
      END ELSE BEGIN
        CreditMemoLine.SETRANGE("Document No.", DocumentNo);
        IF CreditMemoLine.FINDSET THEN
          REPEAT
            IF CreditMemoLine."Job No." <> '' THEN
              IF Job.GET(CreditMemoLine."Job No.") THEN
                IF Job."Project Manager" <> '' THEN
                  IF Employee.GET(Job."Project Manager") THEN BEGIN
                      DocumentApproverDMS.INIT;
                      DocumentApproverDMS."Document Type" := DocumentType;
                      DocumentApproverDMS."Document No." := DocumentNo;
                      DocumentApproverDMS."Approver E-Mail" := GetApproverEMailOfEmployee(Employee);
                      DocumentApproverDMS.Type := DocumentApproverDMS.Type::"Project Manager";
                      IF NOT DocumentApproverDMS.INSERT THEN;
                    END;

            IF CreditMemoLine."Service Contract No." <> '' THEN
              IF ServiceContract.GET(CreditMemoLine."Service Contract No.") THEN
                IF ServiceContract."Contract Manager" <> '' THEN
                  IF SalespersonPurchaser.GET(ServiceContract."Contract Manager") THEN BEGIN
                    DocumentApproverDMS.INIT;
                    DocumentApproverDMS."Document Type" := DocumentType;
                    DocumentApproverDMS."Document No." := DocumentNo;
                    DocumentApproverDMS."Approver E-Mail" := GetApproverEMailOfPurchaser(SalespersonPurchaser);
                    DocumentApproverDMS.Type := DocumentApproverDMS.Type::"Service Contract Manager";
                    IF NOT DocumentApproverDMS.INSERT THEN;
                  END;
          UNTIL CreditMemoLine.NEXT = 0;

      END;
      //CALL C007013 enew

      IF IncludePurchaser THEN
        AddPurchaserToApprovers(DocumentType, DocumentNo);
    END;

    LOCAL PROCEDURE AddPurchaserToApprovers@1100528404(DocumentType@1100528400 : Integer;DocumentNo@1100528401 : Code[20]);
    VAR
      DocumentApproverDMS@1100528402 : Record 11020477;
      PurchInvHeader@1100528403 : Record 122;
      PurchCrMemoHdr@1100528404 : Record 124;
      PurchaseHeader@1100528408 : Record 38;
      SalespersonPurchaser@1100528406 : Record 13;
      PurchaseOrderNo@1100528407 : Code[20];
      PurchaserCode@1100528405 : Code[10];
    BEGIN
      CASE DocumentType OF
        DocumentApproverDMS."Document Type"::"Purchase Invoice":
          IF PurchInvHeader.GET(DocumentNo) THEN
            PurchaseOrderNo := PurchInvHeader."Related Purch. Order No.";
        DocumentApproverDMS."Document Type"::"Purchase Credit Memo":
          IF PurchCrMemoHdr.GET(DocumentNo) THEN
            PurchaseOrderNo := PurchCrMemoHdr."Related Purch. Order No.";
      END;

      IF PurchaseOrderNo <> '' THEN
        IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, PurchaseOrderNo) THEN
          PurchaserCode := PurchaseHeader."Purchaser Code";

      IF PurchaserCode <> '' THEN
        IF SalespersonPurchaser.GET(PurchaserCode) THEN BEGIN
          DocumentApproverDMS.INIT;
          DocumentApproverDMS."Document Type" := DocumentType;
          DocumentApproverDMS."Document No." := DocumentNo;
          DocumentApproverDMS."Approver E-Mail" := GetApproverEMailOfPurchaser(SalespersonPurchaser);
          DocumentApproverDMS.Type := DocumentApproverDMS.Type::Purchaser;
          IF NOT DocumentApproverDMS.INSERT THEN;
        END;
    END;

    LOCAL PROCEDURE GetApproverEMailOfEmployee@1100528400(Employee@1100528400 : Record 5200) : Text[80];
    VAR
      ScanApplicationsSetup@1100528401 : Record 11012134;
    BEGIN
      IF ScanApplicationsSetup.GET THEN
        IF ScanApplicationsSetup."Approver E-Mail (Employee)" =
           ScanApplicationsSetup."Approver E-Mail (Employee)"::"Company Email"
        THEN BEGIN
          Employee.TESTFIELD("Company E-Mail");
          EXIT(Employee."Company E-Mail");
        END;

      Employee.TESTFIELD("E-Mail");
      EXIT(Employee."E-Mail");
    END;

    LOCAL PROCEDURE GetApproverEMailOfPurchaser@1100528401(SalespersonPurchaser@1100528401 : Record 13) : Text[80];
    VAR
      ScanApplicationsSetup@1100528400 : Record 11012134;
    BEGIN
      IF ScanApplicationsSetup.GET THEN
        IF ScanApplicationsSetup."Approver E-Mail (Purchaser)" =
           ScanApplicationsSetup."Approver E-Mail (Purchaser)"::"Email 2"
        THEN BEGIN
          SalespersonPurchaser.TESTFIELD("E-Mail 2");
          EXIT(SalespersonPurchaser."E-Mail 2");
        END;

      SalespersonPurchaser.TESTFIELD("E-Mail");
      EXIT(SalespersonPurchaser."E-Mail");
    END;

    [External]
    PROCEDURE UpdateReceiptNoInInvApprLine@1210190002(JournalTemplateName@1210190003 : Code[10];DocumentType@1210190004 : 'Purchase Invoice,Credit Memo';DocumentNo@1210190002 : Code[20];LineNo@1210190006 : Integer;ReceiptNo@1210190005 : Code[20];ReceiptLineNo@1210190001 : Integer);
    VAR
      InvoiceApprovalLine@1210190000 : Record 11012032;
    BEGIN
      IF (InvoiceApprovalLine.GET(JournalTemplateName, DocumentType, DocumentNo, LineNo)) THEN BEGIN
        InvoiceApprovalLine."Receipt No." := ReceiptNo;
        InvoiceApprovalLine."Receipt Line No." := ReceiptLineNo;
        InvoiceApprovalLine.MODIFY;
      END;
    END;

    [External]
    PROCEDURE GetReceiptLines@1100525010(PurchaseInvoiceNo@1100528400 : Code[20];PurchaseOrderNo@1100525000 : Code[20]);
    BEGIN
      GetReceiptLinesForInvoice(0, PurchaseInvoiceNo, PurchaseOrderNo, 0, FALSE);
    END;

    [External]
    PROCEDURE GetReceiptLine@1100525009(PurchaseInvoiceNo@1100528401 : Code[20];PurchaseOrderNo@1100525000 : Code[20];PurchaseReceiptLineNo@1100528404 : Integer);
    BEGIN
      GetReceiptLinesForInvoice(0, PurchaseInvoiceNo, PurchaseOrderNo, PurchaseReceiptLineNo, TRUE);
    END;

    [External]
    PROCEDURE GetReceiptLinesForCreditMemo@1100525008(PurchaseCreditMemoNo@1100528400 : Code[20];PurchaseOrderNo@1100525000 : Code[20]);
    BEGIN
      GetReceiptLinesForInvoice(1, PurchaseCreditMemoNo, PurchaseOrderNo, 0, FALSE);
    END;

    [External]
    PROCEDURE GetReceiptLineForCreditMemo@1100525006(PurchaseCreditMemoNo@1100528401 : Code[20];PurchaseOrderNo@1100525000 : Code[20];PurchaseReceiptLineNo@1100528403 : Integer);
    BEGIN
      GetReceiptLinesForInvoice(1, PurchaseCreditMemoNo, PurchaseOrderNo, PurchaseReceiptLineNo, TRUE);
    END;

    LOCAL PROCEDURE GetReceiptLinesForInvoice@1100525011(DocType@1100525006 : 'Invoice,Credit Memo';DocumentNo@1100525000 : Code[20];PurchaseOrderNo@1100525009 : Code[20];LineNo@1100525008 : Integer;GetOneReceiptLine@1100525007 : Boolean);
    VAR
      PurchGetReceiptInvApprov@1100525001 : Codeunit 11012023;
      PurchRcptLine@1100525003 : Record 121;
    BEGIN
      PurchRcptLine.RESET;
      PurchRcptLine.SETRANGE("Order No.", PurchaseOrderNo);
      IF GetOneReceiptLine THEN
        PurchRcptLine.SETRANGE("Line No.", LineNo);
      IF PurchRcptLine.FINDSET THEN
        REPEAT
          PurchRcptLine.MARK(TRUE);
        UNTIL PurchRcptLine.NEXT = 0;
      PurchRcptLine.MARKEDONLY(TRUE);
      PurchGetReceiptInvApprov.SetPurchHeader(DocType, DocumentNo);
      PurchGetReceiptInvApprov.CreateInvLines(PurchRcptLine);
    END;

    BEGIN
    END.
  }
}

