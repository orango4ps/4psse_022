OBJECT Table 11012565 Rental Correction
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 PlantSetup.GET;
                 PlantSetup.TESTFIELD("Rental Correction Nos.");
                 NoSeriesMgt.InitSeries(PlantSetup."Rental Correction Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               Posted := FALSE;

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
               "Created by" := USERID;
               "Created On" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               TESTFIELD(Posted,FALSE);

               "Changed by" := USERID;
               "Changed on" := CURRENTDATETIME;
             END;

    OnDelete=BEGIN
               IF NOT DeleteAllowed THEN
                 ERROR(Text000,TABLECAPTION,"No.");

               AdjustmentLineRec.RESET;
               AdjustmentLineRec.SETRANGE("Rental  Correction No.","No.");
               AdjustmentLineRec.DELETEALL;

               //DP00183.sc
               DeleteDocumentLinks();
               DeleteCommentLines();
               //DP00183.ec
             END;

    OnRename=BEGIN
               MoveDocumentLinks(xRec, Rec, FALSE); //DP00183.n
             END;

    CaptionML=[ENU=Rental Correction;
               NOR=Korreksjonstransaksjon for utleie;
               SVE=R„ttningstransaktion f”r uthyrning];
    PasteIsValid=No;
    LookupPageID=Page11012578;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  NoSeriesMgt.TestManual(PlantSetup."Rental Correction Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Debit Location      ;Code20        ;TableRelation="Plant Location".Code;
                                                   OnValidate=BEGIN
                                                                CheckBlock("Debit Location");

                                                                CALCFIELDS("Debit Location Description");

                                                                IF "Debit Location" <> xRec."Debit Location" THEN BEGIN
                                                                  MODIFY;
                                                                  AdjustmentLineRec.RESET;
                                                                  AdjustmentLineRec.SETRANGE("Rental  Correction No.","No.");
                                                                  IF AdjustmentLineRec.COUNT > 0 THEN BEGIN
                                                                    MESSAGE(Text001,AdjustmentLineRec.TABLECAPTION);
                                                                    IF AdjustmentLineRec.FIND('-') THEN
                                                                      REPEAT
                                                                        AdjustmentLineRec.VALIDATE("Debit Rental Type");
                                                                        AdjustmentLineRec.MODIFY;
                                                                      UNTIL AdjustmentLineRec.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Debit Location;
                                                              NOR=Debetplassering;
                                                              SVE=Debetlagerst„lle] }
    { 40  ;   ;Debit Location Description;Text100 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(Debit Location)));
                                                   CaptionML=[ENU=Debit Location Description;
                                                              NOR=Beskrivelse av Debetplassering;
                                                              SVE=Debetlagerst„lle, beskrivning];
                                                   Editable=No }
    { 50  ;   ;Credit Location     ;Code20        ;TableRelation="Plant Location".Code;
                                                   OnValidate=BEGIN
                                                                CheckBlock("Credit Location");

                                                                CALCFIELDS("Credit Location Description");

                                                                IF "Credit Location" <> xRec."Credit Location" THEN BEGIN
                                                                  MODIFY;
                                                                  AdjustmentLineRec.RESET;
                                                                  AdjustmentLineRec.SETRANGE("Rental  Correction No.","No.");
                                                                  IF AdjustmentLineRec.COUNT > 0 THEN BEGIN
                                                                    MESSAGE(Text001,AdjustmentLineRec.TABLECAPTION);
                                                                    IF AdjustmentLineRec.FIND('-') THEN
                                                                      REPEAT
                                                                        AdjustmentLineRec.VALIDATE("Credit Rental Type");
                                                                        AdjustmentLineRec.MODIFY;
                                                                      UNTIL AdjustmentLineRec.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Credit Location;
                                                              NOR=Kreditplassering;
                                                              SVE=Kreditlagerst„lle] }
    { 60  ;   ;Credit Location Description;Text100;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(Credit Location)));
                                                   CaptionML=[ENU=Credit Location Description;
                                                              NOR=Beskrivelse av Kreditplassering;
                                                              SVE=Beskrivning av kreditlagerst„lle];
                                                   Editable=No }
    { 80  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr-serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 90  ;   ;Posted              ;Boolean       ;CaptionML=[ENU=Posted;
                                                              NOR=Bokf›rt;
                                                              SVE=Bokf”rd];
                                                   Editable=No }
    { 100 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum] }
    { 110 ;   ;Debet Location Invoiced;Boolean    ;CaptionML=[ENU=Debet Location Invoiced;
                                                              NOR=Debetplassering fakturert;
                                                              SVE=Debetlagerst„lle fakturerad];
                                                   Editable=No }
    { 120 ;   ;Invoice No. Debit Location;Code20  ;TableRelation=IF (Invoice Status Credit Location=CONST(Proposal)) "Sales Header".No. WHERE (Document Type=CONST(Invoice Proposal))
                                                                 ELSE IF (Invoice Status Credit Location=CONST(Temporary)) "Sales Header".No. WHERE (Document Type=CONST(Invoice))
                                                                 ELSE IF (Invoice Status Credit Location=CONST(Posted)) "Sales Invoice Header".No.;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Invoice No. Debit Location;
                                                              NOR=Fakturanr., Debetplassering;
                                                              SVE=Fakturanr, debet lagerst„lle];
                                                   Editable=No }
    { 130 ;   ;Invoice Status Debit Location;Option;
                                                   CaptionML=[ENU=Invoice Status Debit Location;
                                                              NOR=Fakturastatus, Debetplassering;
                                                              SVE=Fakturastatus, debet lagerst„lle];
                                                   OptionCaptionML=[ENU=,Proposal,Temporary,Posted;
                                                                    NOR=,Forslag,Midlertidig,Bokf›rt;
                                                                    SVE=,F”rslag,Tillf„lligt,Bokf”rt];
                                                   OptionString=,Proposal,Temporary,Posted;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 140 ;   ;Credit Location Invoiced;Boolean   ;CaptionML=[ENU=Credit Location Invoiced;
                                                              NOR=Fakturert Kreditplassering;
                                                              SVE=Fakturerat kreditlagerst„lle];
                                                   Editable=No }
    { 150 ;   ;Invoice.No.Credit Location;Code20  ;TableRelation=IF (Invoice Status Credit Location=CONST(Proposal)) "Sales Header".No. WHERE (Document Type=CONST(Invoice Proposal))
                                                                 ELSE IF (Invoice Status Credit Location=CONST(Temporary)) "Sales Header".No. WHERE (Document Type=CONST(Invoice))
                                                                 ELSE IF (Invoice Status Credit Location=CONST(Posted)) "Sales Invoice Header".No.;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Invoice.No.Credit Location;
                                                              NOR=Fakturanr., Kreditplassering;
                                                              SVE=Fakturanr, kreditlagerst„lle];
                                                   Editable=No }
    { 160 ;   ;Invoice Status Credit Location;Option;
                                                   CaptionML=[ENU=Invoice Status Credit Location;
                                                              NOR=Fakturastatus, Kreditplassering;
                                                              SVE=Fakturastatus, kreditlagerst„lle];
                                                   OptionCaptionML=[ENU=,Proposal,Temporary,Posted;
                                                                    NOR=,Forslag,Midlertidig,Bokf›rt;
                                                                    SVE=,F”rslag,Tillf„lligt,Bokf”rt];
                                                   OptionString=,Proposal,Temporary,Posted;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 170 ;   ;Completely Invoiced ;Boolean       ;CaptionML=[ENU=Completely Invoiced;
                                                              NOR="Fullstendig fakturert ";
                                                              SVE=F„rdigt fakturerat];
                                                   Editable=No }
    { 175 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1, "Department Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Avdelingskode;
                                                              SVE=Mottagande avdelningskod];
                                                   CaptionClass='1,1,1' }
    { 180 ;   ;Posted by           ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Posted by;
                                                              NOR=Bokf›rt av;
                                                              SVE=Bokf”rt av];
                                                   Editable=No }
    { 181 ;   ;Posted On           ;DateTime      ;CaptionML=[ENU=Posted On;
                                                              SVE=Bokf”rt den];
                                                   Editable=No }
    { 185 ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapades av];
                                                   Editable=No }
    { 190 ;   ;Created On          ;DateTime      ;CaptionML=[ENU=Created On;
                                                              NOR=Created On;
                                                              SVE=Created On];
                                                   Editable=No }
    { 200 ;   ;Changed by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Changed by;
                                                              NOR=Endret av;
                                                              SVE=Žndrat av];
                                                   Editable=No }
    { 210 ;   ;Changed on          ;DateTime      ;CaptionML=[ENU=Changed on;
                                                              NOR=Endret den;
                                                              SVE=Žndrat den];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Invoice Status Debit Location,Invoice No. Debit Location }
    {    ;Invoice Status Credit Location,Invoice.No.Credit Location }
    {    ;Posted,Debet Location Invoiced,Debit Location }
    {    ;Posted,Credit Location Invoiced,Credit Location }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012005 : TextConst 'ENU=%1 %2 is not deleted.;NOR=%1 %2 er ikke fjernet.;SVE=%1 %2 „r inte borttaget.';
      Text001@11012006 : TextConst 'ENU=The %1s will be recalculated.;NOR=%1 vil rekalkuleres.;SVE=%1s kommer att omber„knas.';
      Text003@11012008 : TextConst 'ENU=%1 %2 is not invoiced yet. Do you still want to delete %3?;NOR=%1 %2 er enda ikke fakturert. Vil du fortsatt fjerne %3?;SVE=%1 %2 „r „nnu inte fakturerad. Vill du fortfarande ta bort %3?';
      Text004@11012009 : TextConst 'ENU=%1 %2 is not invoiced completely. Do you still want to delete %3?;NOR=%1 %2 er ikke fullstendig fakturert. Vil du fortsatt fjerne %3?;SVE=%1 %2 „r inte helt fakturerad. Vill du fortfarande ta bort %3?';
      PlantSetup@11012000 : Record 11012550;
      AdjustmentRec@11012001 : Record 11012565;
      AdjustmentLineRec@11012002 : Record 11012566;
      PlantLocRec@11012003 : Record 11012554;
      NoSeriesMgt@11012004 : Codeunit 396;
      DimMgt@1100525008 : Codeunit 408;
      DPA_Management@1100000999 : Codeunit 11012783;
      SkipModify@1100528400 : Boolean;

    PROCEDURE AssistEdit@2(OldAdjustmentRec@11012000 : Record 11012565) : Boolean;
    BEGIN
      WITH AdjustmentRec DO BEGIN
        AdjustmentRec := Rec;
        PlantSetup.GET;
        PlantSetup.TESTFIELD("Rental Correction Nos.");
        IF NoSeriesMgt.SelectSeries(PlantSetup."Rental Correction Nos.",OldAdjustmentRec."No. Series","No. Series") THEN BEGIN
          PlantSetup.GET;
          PlantSetup.TESTFIELD("Rental Correction Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := AdjustmentRec;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE CheckBlock@1(LocNo@11012000 : Code[20]);
    BEGIN
      IF LocNo <> '' THEN BEGIN
        PlantLocRec.GET(LocNo);
        PlantLocRec.CheckBlock(2,FALSE,FALSE);
      END;
    END;

    PROCEDURE DeleteAllowed@5() : Boolean;
    BEGIN
      IF NOT Posted THEN
        EXIT(TRUE);

      IF NOT PlantLocRec.GET("Debit Location") THEN
        PlantLocRec.Depot := TRUE;
      IF NOT PlantLocRec.Depot THEN
        IF NOT "Debet Location Invoiced" THEN BEGIN
          IF NOT CONFIRM(STRSUBSTNO(
            Text003,
            PlantLocRec.TABLECAPTION,"Debit Location",TABLECAPTION))
          THEN
            EXIT(FALSE);
        END ELSE
          IF "Invoice Status Debit Location" IN ["Invoice Status Debit Location"::Proposal,"Invoice Status Debit Location"::"Temporary"
      ] THEN
            IF NOT CONFIRM(STRSUBSTNO(
              Text004,
              PlantLocRec.TABLECAPTION,"Debit Location",TABLECAPTION))
            THEN
              EXIT(FALSE);

      IF NOT PlantLocRec.GET("Credit Location") THEN
        PlantLocRec.Depot := TRUE;
      IF NOT PlantLocRec.Depot THEN
        IF NOT "Credit Location Invoiced" THEN BEGIN
          IF NOT CONFIRM(STRSUBSTNO(
            Text003,
            PlantLocRec.TABLECAPTION,"Credit Location",TABLECAPTION))
          THEN
            EXIT(FALSE);
        END ELSE
          IF "Invoice Status Credit Location" IN ["Invoice Status Credit Location"::Proposal,"Invoice Status Credit Location"::
      "Temporary"
      ] THEN
            IF NOT CONFIRM(STRSUBSTNO(
              Text004,
              PlantLocRec.TABLECAPTION,"Credit Location",TABLECAPTION))
            THEN
              EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT SkipModify THEN
        MODIFY;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Department Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Rental Correction");
      IF Dimension1Code <> '' THEN
        "Department Code" := Dimension1Code;

      IF "Department Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Department Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012565) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012565');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Rental Correction", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE ShowDocuments@1100529007();
    VAR
      RecRef@1100525000 : RecordRef;
      DocumentFilters@1100525001 : Codeunit 11012432;
    BEGIN
      //DP00183
      TESTFIELD("No.");
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
    END;

    PROCEDURE DeleteDocumentLinks@1100529006();
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00183
      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    PROCEDURE MoveDocumentLinks@1100529005(SourceRec@1100529001 : Record 11012565;TargetRec@1100529000 : Record 11012565;CopyMode@1100529003 : Boolean);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      //DP00183
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      IF NOT CopyMode THEN
        DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
      ELSE
        DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE CommentSheet@1100529004(EditableMode@1100529002 : Boolean);
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      TESTFIELD("No.");
      PlantCommentLine.EditCommentLines(DATABASE::"Rental Correction", "No.", '', 0, EditableMode);  //C005461.c
    END;

    PROCEDURE HasCommentLines@1100529002() : Boolean;
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      EXIT(PlantCommentLine.HasCommentLines(DATABASE::"Rental Correction","No.", '', 0));  //C005461.c
    END;

    PROCEDURE DeleteCommentLines@1100529003();
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      PlantCommentLine.DeleteComments(DATABASE::"Rental Correction", "No.", '', 0);  //C005461.c
    END;

    BEGIN
    END.
  }
}

