OBJECT Codeunit 11012511 Auth. Event Handling 4PS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      StandardAuthManagement@1100529200 : Codeunit 11012269;

    [EventSubscriber(Table,2000000165,OnBeforeModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeModifyTenantPermissionSet@1100527700(VAR Rec@1100527700 : Record 2000000165;VAR xRec@1100527701 : Record 2000000165;RunTrigger@1100527702 : Boolean);
    VAR
      PermissionSet@1100529200 : Record 2000000004;
    BEGIN
      IF RunTrigger THEN
        StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('M',Rec."Role ID");
    END;

    [EventSubscriber(Table,2000000165,OnBeforeDeleteEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeDeleteTenantPermissionSet@1100527709(VAR Rec@1100527700 : Record 2000000165;RunTrigger@1100527701 : Boolean);
    VAR
      FunctionProfile@1100529200 : Record 11020569;
      StandardAuthManagement@1100529201 : Codeunit 11012269;
      PermissionSet@1100529202 : Record 2000000004;
    BEGIN
      IF RunTrigger THEN BEGIN
        StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('D',Rec."Role ID");
        StandardAuthManagement.ConfirmDeleteAccessControl(Rec."Role ID");
      END;
    END;

    [EventSubscriber(Table,2000000165,OnAfterDeleteEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterDeleteTenantPermissionSet@1100527711(VAR Rec@1100527700 : Record 2000000165;RunTrigger@1100527701 : Boolean);
    VAR
      StandardAuthManagement@1100529200 : Codeunit 11012269;
    BEGIN
      IF RunTrigger THEN
        StandardAuthManagement.DeleteTenantPermissions(Rec."Role ID");
    END;

    [EventSubscriber(Table,2000000165,OnBeforeRenameEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeRenameTenantPermissionSet@1100527705(VAR Rec@1100527700 : Record 2000000165;VAR xRec@1100527701 : Record 2000000165;RunTrigger@1100527702 : Boolean);
    BEGIN
      IF RunTrigger THEN
        StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('R',Rec."Role ID");
    END;

    [EventSubscriber(Table,2000000166,OnBeforeInsertEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeInsertTenantPermission@1100527721(VAR Rec@1100527700 : Record 2000000166;RunTrigger@1100527701 : Boolean);
    VAR
      PermissionSet4PS@1100529203 : Record 11229416;
    BEGIN
      IF RunTrigger THEN
        StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('D',Rec."Role ID");

      StandardAuthManagement.UpdateFunctionProfileChanged(Rec."Role ID");
    END;

    [EventSubscriber(Table,2000000166,OnBeforeModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeModifyTenantPermission@1100527723(VAR Rec@1100527700 : Record 2000000166;VAR xRec@1100527701 : Record 2000000166;RunTrigger@1100527702 : Boolean);
    BEGIN
      IF RunTrigger THEN
        StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('M',Rec."Role ID");

      StandardAuthManagement.UpdateFunctionProfileChanged(Rec."Role ID");
    END;

    [EventSubscriber(Table,2000000166,OnBeforeDeleteEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeDeleteTenantPermission@1100527702(VAR Rec@1100527700 : Record 2000000166;RunTrigger@1100527701 : Boolean);
    BEGIN
      IF RunTrigger THEN
        StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('D',Rec."Role ID");

      StandardAuthManagement.UpdateFunctionProfileChanged(Rec."Role ID");
    END;

    [EventSubscriber(Table,2000000166,OnBeforeRenameEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeRenameTenantPermission@1100527701(VAR Rec@1100527700 : Record 2000000166;VAR xRec@1100527701 : Record 2000000166;RunTrigger@1100527702 : Boolean);
    BEGIN
      IF RunTrigger THEN
        StandardAuthManagement.GiveErrorPermissionSetIsFunctionProfilePermissionSet('R',Rec."Role ID");

      StandardAuthManagement.UpdateFunctionProfileChanged(Rec."Role ID");
    END;

    BEGIN
    END.
  }
}

