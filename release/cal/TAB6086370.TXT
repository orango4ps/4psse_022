OBJECT Table 6086370 Mileage Rate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6086365=rimd;
    DataCaptionFields=Vehicle Code,Start Date,Rate (LCY);
    OnDelete=VAR
               Mileage@1160040000 : Record 6086338;
             BEGIN
               Mileage.SETCURRENTKEY(Posted);
               Mileage.SETFILTER("Vehicle Code","Vehicle Code");
               Mileage.SETFILTER("Registration Date",'>=%1',"Start Date");
               Mileage.SETRANGE(Posted,TRUE);
               IF Mileage.FINDFIRST THEN
                 ERROR(NotAllowedToDelete,TABLECAPTION,"Vehicle Code",Mileage.TABLECAPTION);
             END;

    CaptionML=[DEU=Kilometerleistungstarif;
               ENU=Mileage Rate;
               NLD=Kilometragetarief];
  }
  FIELDS
  {
    { 1   ;   ;Vehicle Code        ;Code20        ;TableRelation="Vehicle DC";
                                                   OnValidate=BEGIN
                                                                IF xRec."Vehicle Code" <> '' THEN
                                                                  CheckPostedAndRecalc(FIELDCAPTION("Vehicle Code"));
                                                              END;

                                                   CaptionML=[DEU=Kennzeichencode;
                                                              ENU=Vehicle Code;
                                                              NLD=Voertuigcode;
                                                              NOR=Kjõretõykode;
                                                              SVE=Fordonskod];
                                                   NotBlank=Yes }
    { 2   ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Start Date" <> 0D THEN
                                                                  CheckPostedAndRecalc(FIELDCAPTION("Start Date"));
                                                              END;

                                                   CaptionML=[DEU=Startdatum;
                                                              ENU=Start Date;
                                                              NLD=Startdatum;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 4   ;   ;Starting Distance   ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Starting Distance" <> 0 THEN
                                                                  CheckPostedAndRecalc(FIELDCAPTION("Starting Distance"));
                                                              END;

                                                   CaptionML=[DEU=Startentfernung;
                                                              ENU=Starting Distance;
                                                              NLD=Startafstand];
                                                   DecimalPlaces=0:0 }
    { 5   ;   ;Rate (LCY)          ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Rate (LCY)" <> 0 THEN
                                                                  CheckPostedAndRecalc(FIELDCAPTION("Rate (LCY)"));
                                                              END;

                                                   CaptionML=[DEU=Tarif (LCY);
                                                              ENU=Rate (LCY);
                                                              NLD=Tarief (LV);
                                                              SVE=Avgift (BVA)];
                                                   AutoFormatType=1 }
    { 6   ;   ;New Mileage Year    ;Boolean       ;OnValidate=BEGIN
                                                                CheckPostedAndRecalc(FIELDCAPTION("New Mileage Year"));
                                                              END;

                                                   CaptionML=[DEU=Neues Kilometerleistungsjahr;
                                                              ENU=New Mileage Year;
                                                              NLD=Nieuw kilometragejaar] }
    { 10  ;   ;Rate ID             ;Code10        ;TableRelation="Mileage Rate ID";
                                                   CaptionML=[DEU=Tarif-ID;
                                                              ENU=Rate ID;
                                                              NLD=Tarief-id] }
    { 11  ;   ;Attendee Added Rate ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Attendee Added Rate" <> 0 THEN
                                                                  CheckPostedAndRecalc(FIELDCAPTION("Attendee Added Rate"));
                                                              END;

                                                   CaptionML=[DEU=Teilnehmer hinzugefÅgter Tarif;
                                                              ENU=Attendee Added Rate;
                                                              NLD=Deelnemer toegevoegd tarief] }
  }
  KEYS
  {
    {    ;Vehicle Code,Start Date,Starting Distance;
                                                   Clustered=Yes }
    {    ;Vehicle Code,Start Date,New Mileage Year }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CmpNameGlobal@6086300 : Text[30];
      CalcMilAcrossCompanies@6086301 : Boolean;
      NotAllowedToDelete@1160040003 : TextConst 'DEU=Es ist nicht erlaubt, %1 %2 zu lîschen, weil %3 gebuchte Transaktionen enthÑlt.;ENU=It is not allowed to delete %1 %2, because %3 has posted transactions.;NLD=Het is niet toegestaan ??om %1 %2 te verwijderen, omdat %3 geboekte transacties heeft.';
      PostedExistsErr@1160040002 : TextConst 'DEU=Eine oder mehrere Kilometerleistungen sind nach %1 gebucht owrden und deshalb kan %2 nicht geÑndert werden.;ENU=One or more mileage have been posted after %1 and %2 can therefore not be changed.;NLD=EÇn of meerdere kilometrages zijn geboekt na %1 en %2 kan daarom niet gewijzigd worden.';
      RecalculateDetails@1160040006 : TextConst 'DEU=Die Details der Kilometerleistung mÅssen aktualisiert werden.;ENU=The mileage details need to be updated.;NLD=De kilometragedetails dienen bijgewerkt te worden.';

    PROCEDURE CalcMileageDetails@1160040003(VAR Mileage@1160040000 : Record 6086338;IncludeNotPosted@1160040005 : Boolean);
    VAR
      Distance@1160040003 : Decimal;
      Previous@1160040001 : Decimal;
      TotalDistance@1160040004 : Decimal;
    BEGIN
      Mileage."Amount (LCY)" := 0;
      InitDetails(Mileage);

      Previous := PreviousTotal(Mileage,IncludeNotPosted);
      Distance := Mileage."Total Distance";
      TotalDistance := Previous + Distance;

      CalcAmtFindingRatesRecursively(
        Mileage,Distance,TotalDistance,Previous,GetMilYearStartDate(Mileage."Vehicle Code",Mileage."Registration Date"));
    END;

    LOCAL PROCEDURE CalcAmtFindingRatesRecursively@1160040000(VAR Mileage@1160040000 : Record 6086338;VAR Distance@1160040005 : Decimal;VAR TotalDistance@1160040006 : Decimal;StartDistance@1160040004 : Decimal;FinancialYearStartDate@1160040008 : Date);
    VAR
      Rate@1160040002 : Record 6086370;
      AttendeeRate@1160040009 : Decimal;
      Factor@1160040007 : Decimal;
      MaxDistance@1160040003 : Decimal;
      Previous@1160040001 : Decimal;
      CompanyCarPostingToJobs@1160040010 : Boolean;
    BEGIN
      // SCENARIO                 || REFUNDABLE || INCREASE DISTANCE || AMOUNT ON MILEAGE
      //==================================================================================
      //NO REFUND                 || NO         || YES               || 0
      //PERSOANL CAR              || YES        || YES               || BASED ON CALCULATION
      //COMPANY CAR WITH JOBS     || NO         || NO                || BASED ON CALCULATION
      //COMPANY CAR WITHOUT JOBS  || NO         || NO                || 0

      Previous := StartDistance;
      Factor := 1;

      CompanyCarPostingToJobs := IsCompanyCar(Mileage."Vehicle Code") AND (Mileage."Job No." <> '');

      IF Mileage."No Refund" AND NOT CompanyCarPostingToJobs THEN BEGIN
        //NO CALCULATIONS - BUT MANIPULATE THE DISTANCE
        Mileage."Amount (LCY)" := 0;
        IF IsCompanyCar(Mileage."Vehicle Code") AND (Mileage."Job No." = '') THEN
          InsertDetails(Mileage,'',0,0,0,Previous,Previous)
        ELSE
          InsertDetails(Mileage,'',Distance,0,0,Previous,TotalDistance);
      END ELSE BEGIN
        FindRate(Previous,Mileage,Rate,FinancialYearStartDate);
        Mileage.CALCFIELDS("No. of Attendees");
        AttendeeRate := Rate."Attendee Added Rate" * Mileage."No. of Attendees";

        IF FindNextRateAndMaxDistance(Rate,TotalDistance,MaxDistance) THEN BEGIN
          Mileage."Amount (LCY)" :=
            ROUND(Mileage."Amount (LCY)" +
            Factor * (Rate."Rate (LCY)" + AttendeeRate) * (MaxDistance - Previous));
          IF CompanyCarPostingToJobs THEN
            InsertDetails(
              Mileage,Rate."Rate ID",
              0,Factor * (Rate."Rate (LCY)" + AttendeeRate) * (MaxDistance-Previous),
              (Rate."Rate (LCY)" + AttendeeRate),Previous,StartDistance)
          ELSE
            InsertDetails(
              Mileage,Rate."Rate ID",
              MaxDistance-Previous,Factor * (Rate."Rate (LCY)" + AttendeeRate) * (MaxDistance-Previous),
              (Rate."Rate (LCY)" + AttendeeRate),Previous,MaxDistance);
          CalcAmtFindingRatesRecursively(Mileage,Distance,TotalDistance,MaxDistance,FinancialYearStartDate);
        END ELSE BEGIN
          Mileage."Amount (LCY)" :=
            ROUND(Mileage."Amount (LCY)" +
             Factor * (Rate."Rate (LCY)" + AttendeeRate) * (TotalDistance - Previous));
          IF CompanyCarPostingToJobs THEN
            InsertDetails(
              Mileage,Rate."Rate ID",0,
              Factor * (Rate."Rate (LCY)" + AttendeeRate) * (TotalDistance - Previous),
              (Rate."Rate (LCY)" + AttendeeRate),Previous,StartDistance)
          ELSE
            InsertDetails(
              Mileage,Rate."Rate ID",TotalDistance - Previous,
              Factor * (Rate."Rate (LCY)" + AttendeeRate) * (TotalDistance - Previous),
              (Rate."Rate (LCY)" + AttendeeRate),Previous,TotalDistance);
        END;
      END;
    END;

    LOCAL PROCEDURE PreviousTotal@1160040001(Mileage@1160040000 : Record 6086338;IncludeNotPosted@1160040003 : Boolean) Distance : Decimal;
    VAR
      Company@1160040004 : Record 2000000006;
      EndDate@1160040007 : Date;
      StartDate@1160040006 : Date;
    BEGIN
      StartDate := GetMilYearStartDate(Mileage."Vehicle Code",Mileage."Registration Date");
      IF GetMilYearEndDate("Vehicle Code",StartDate) <> 0D THEN
        EndDate := CALCDATE('<-1D>',GetMilYearEndDate("Vehicle Code",StartDate));

      IF GetCalcAcrossCompanies THEN BEGIN
        IF Company.FINDSET THEN
          REPEAT
            Distance := Distance + GetTotalDistanceInCompany(Company.Name,Mileage,IncludeNotPosted,StartDate,EndDate);
          UNTIL Company.NEXT = 0;
      END ELSE
        Distance := GetTotalDistanceInCompany(GetCompanyName,Mileage,IncludeNotPosted,StartDate,EndDate);
    END;

    LOCAL PROCEDURE FindRate@1160040002(StartDistance@1160040002 : Decimal;Mileage@1160040000 : Record 6086338;VAR Rate@1160040001 : Record 6086370;FinancialYearStartDate@1160040007 : Date);
    BEGIN
      Rate.CHANGECOMPANY(GetCompanyName);
      Rate.SETRANGE("Vehicle Code",Mileage."Vehicle Code");
      Rate.SETRANGE("Start Date",FinancialYearStartDate,Mileage."Registration Date");
      Rate.SETFILTER("Starting Distance",'<=%1',Max(StartDistance,0));
      Rate.FINDLAST;
    END;

    LOCAL PROCEDURE FindNextRateAndMaxDistance@1160040010(VAR Rate@1160040000 : Record 6086370;TotalDistance@1160040002 : Decimal;VAR MaxDistance@1160040001 : Decimal) : Boolean;
    VAR
      NextRate@1160040003 : Record 6086370;
      MilYearEndDate@6086300 : Date;
    BEGIN
      MilYearEndDate := GetMilYearEndDate(Rate."Vehicle Code",Rate."Start Date");

      NextRate.CHANGECOMPANY(GetCompanyName);
      NextRate.COPYFILTERS(Rate);
      IF MilYearEndDate = 0D THEN
        NextRate.SETFILTER("Start Date",'>=%1',Rate."Start Date")
      ELSE
        NextRate.SETFILTER("Start Date",'>=%1&<%2',Rate."Start Date",MilYearEndDate);
      NextRate.SETFILTER("Starting Distance",'>%1',Rate."Starting Distance");
      IF NextRate.FINDFIRST THEN
        IF TotalDistance > NextRate."Starting Distance" THEN BEGIN
          MaxDistance := NextRate."Starting Distance";
          EXIT(TRUE); // THE DISTANCE SPANS ON MORE THAN ONE RATE
        END;

      EXIT(FALSE); // THE RATE APPLIES TO THE WHOLE DISTANCE
    END;

    LOCAL PROCEDURE InsertDetails@1160040004(Mileage@1160040000 : Record 6086338;RateID@1160040001 : Code[10];Distance@1160040002 : Decimal;Amount@1160040003 : Decimal;ActualRate@1160040007 : Decimal;FromDistance@1160040005 : Decimal;ToDistance@1160040006 : Decimal);
    VAR
      MileageDetail@1160040004 : Record 6086365;
    BEGIN
      MileageDetail.CHANGECOMPANY(GetCompanyName);
      MileageDetail."Mileage Entry No." := Mileage."Entry No.";
      MileageDetail.SETRANGE("Mileage Entry No.",MileageDetail."Mileage Entry No.");
      IF MileageDetail.FINDLAST THEN;

      MileageDetail."Detail Entry No." := MileageDetail."Detail Entry No." + 1;
      MileageDetail."Continia User ID" := Mileage."Continia User ID";
      MileageDetail."Registration Date" := Mileage."Registration Date";
      MileageDetail."Rate ID" := RateID;
      MileageDetail.Distance := Distance;
      MileageDetail.Rate := ActualRate;
      MileageDetail."Amount (LCY)" := Amount;
      MileageDetail."Vehicle Code" := Mileage."Vehicle Code";
      MileageDetail.Posted := FALSE;
      MileageDetail."From Distance" := FromDistance;
      MileageDetail."To Distance" := ToDistance;
      MileageDetail.Reimbursed := FALSE;
      MileageDetail.INSERT;
    END;

    LOCAL PROCEDURE InitDetails@1160040005(Mileage@1160040000 : Record 6086338);
    VAR
      MileageDetail@1160040001 : Record 6086365;
    BEGIN
      MileageDetail.CHANGECOMPANY(GetCompanyName);
      MileageDetail.SETRANGE("Mileage Entry No.",Mileage."Entry No.");
      MileageDetail.DELETEALL;
    END;

    LOCAL PROCEDURE Max@1160040006(a@1160040000 : Decimal;b@1160040001 : Decimal) : Decimal;
    BEGIN
      IF a > b THEN
        EXIT(a);
      EXIT(b);
    END;

    LOCAL PROCEDURE GetTotalDistanceInCompany@1160040007(CompName@1160040006 : Text[50];Mileage@1160040003 : Record 6086338;IncludeNotPosted@1160040002 : Boolean;PeriodStartDate@1160040004 : Date;PeriodEndDate@1160040005 : Date) : Decimal;
    VAR
      PostedMileageDetails@1160040007 : Record 6086365;
      UnpostedMileageDetails@1160040008 : Record 6086365;
    BEGIN
      PostedMileageDetails.CHANGECOMPANY(CompName);
      PostedMileageDetails.SETCURRENTKEY("Continia User ID","Registration Date",Posted);
      PostedMileageDetails.SETRANGE("Continia User ID",Mileage."Continia User ID");
      PostedMileageDetails.SETRANGE(Posted,TRUE);
      IF PeriodEndDate <> 0D THEN
        PostedMileageDetails.SETFILTER("Registration Date",'>=%1&<=%2',PeriodStartDate,PeriodEndDate)
      ELSE
        PostedMileageDetails.SETFILTER("Registration Date",'>=%1',PeriodStartDate);
      PostedMileageDetails.CALCSUMS(Distance);

      IF IncludeNotPosted THEN BEGIN
        UnpostedMileageDetails.CHANGECOMPANY(CompName);
        UnpostedMileageDetails.SETCURRENTKEY("Continia User ID","Registration Date",Posted);
        UnpostedMileageDetails.SETRANGE("Continia User ID",Mileage."Continia User ID");
        UnpostedMileageDetails.SETRANGE(Posted,FALSE);
        UnpostedMileageDetails.SETFILTER("Mileage Entry No.",'<%1',Mileage."Entry No."); //NOT PERFECT IN MULTICOMPANY
        IF PeriodEndDate <> 0D THEN
          UnpostedMileageDetails.SETFILTER("Registration Date",'>=%1&<=%2',PeriodStartDate,PeriodEndDate)
        ELSE
          UnpostedMileageDetails.SETFILTER("Registration Date",'>=%1',PeriodStartDate);
        UnpostedMileageDetails.CALCSUMS(Distance);
      END ELSE
        UnpostedMileageDetails.Distance := 0;

      EXIT(UnpostedMileageDetails.Distance + PostedMileageDetails.Distance);
    END;

    LOCAL PROCEDURE GetMilYearStartDate@1160040008(VehicleCode@1160040003 : Code[20];CheckDate@1160040002 : Date) : Date;
    VAR
      Rate@1160040001 : Record 6086370;
    BEGIN
      IF IsCompanyCar(VehicleCode) THEN
        EXIT(0D);

      Rate.CHANGECOMPANY(GetCompanyName);
      Rate.SETRANGE("Vehicle Code",VehicleCode);
      Rate.SETFILTER("Start Date",'<=%1',CheckDate);
      Rate.SETRANGE("New Mileage Year",TRUE);
      IF COMPANYNAME = GetCompanyName THEN
        Rate.FINDLAST
      ELSE
        IF Rate.FINDLAST THEN;
      EXIT(Rate."Start Date");
    END;

    LOCAL PROCEDURE GetMilYearEndDate@1160040009(VehicleCode@1160040000 : Code[20];CheckDate@1160040002 : Date) : Date;
    VAR
      Rate@1160040001 : Record 6086370;
    BEGIN
      Rate.CHANGECOMPANY(GetCompanyName);
      Rate.SETRANGE("Vehicle Code",VehicleCode);
      Rate.SETFILTER("Start Date",'>%1',CheckDate);
      Rate.SETRANGE("New Mileage Year",TRUE);
      IF Rate.FINDLAST THEN
        EXIT(Rate."Start Date");
    END;

    LOCAL PROCEDURE CheckPostedAndRecalc@1160040015(FldCaption@1160040002 : Text[50]);
    VAR
      Mileage@1160040000 : Record 6086338;
    BEGIN
      Mileage.SETCURRENTKEY(Posted);
      Mileage.SETRANGE(Posted,TRUE);
      Mileage.SETRANGE("Vehicle Code","Vehicle Code");
      Mileage.SETFILTER("Registration Date",'>=%1',"Start Date");
      IF NOT Mileage.ISEMPTY THEN
        ERROR(PostedExistsErr,"Start Date",FldCaption);

      Mileage.SETRANGE(Posted,FALSE);
      Mileage.SETRANGE("Vehicle Code","Vehicle Code");
      Mileage.SETFILTER("Registration Date",'>=%1',"Start Date");
      IF NOT Mileage.ISEMPTY THEN
        MESSAGE(RecalculateDetails);
    END;

    PROCEDURE RecalculateMileageRate@1160040011();
    VAR
      Mileage@1160040000 : Record 6086338;
    BEGIN
      Mileage.CHANGECOMPANY(GetCompanyName);
      Mileage.SETCURRENTKEY(Posted);
      Mileage.SETRANGE(Posted,FALSE);
      Mileage.SETRANGE("Vehicle Code","Vehicle Code");
      Mileage.SETFILTER("Registration Date",'>=%1',"Start Date");
      IF NOT Mileage.ISEMPTY THEN BEGIN
        Mileage.LOCKTABLE;
        IF Mileage.FINDSET(TRUE,FALSE) THEN
          REPEAT
            CalcMileageDetails(Mileage,TRUE);
            Mileage.MODIFY;
          UNTIL Mileage.NEXT = 0;
      END;
    END;

    PROCEDURE RecalcMilAcrossComp@6086302();
    VAR
      EMSetup@6086303 : Record 6086300;
      Mileage@6086302 : Record 6086338;
      MileageRate@6086301 : Record 6086370;
      Company@6086300 : Record 2000000006;
    BEGIN
      IF Company.FINDSET THEN
        REPEAT
          EMSetup.CHANGECOMPANY(Company.Name);
          IF EMSetup.GET THEN
            IF EMSetup."Enable Mileage" THEN BEGIN
              Mileage.CHANGECOMPANY(Company.Name);
              IF NOT Mileage.ISEMPTY THEN BEGIN
                MileageRate.CHANGECOMPANY(Company.Name);
                IF MileageRate.FINDSET THEN
                  REPEAT
                    MileageRate.SetGlobalVars(Company.Name,EMSetup."Calc. mil. across companies");
                    MileageRate.RecalculateMileageRate;
                  UNTIL MileageRate.NEXT = 0;
              END;
            END;
        UNTIL Company.NEXT = 0;
    END;

    PROCEDURE SetGlobalVars@6086300(CmpName@6086300 : Text[30];CalcArcossCmp@6086301 : Boolean);
    BEGIN
      CmpNameGlobal := CmpName;
      CalcMilAcrossCompanies := CalcArcossCmp;
    END;

    LOCAL PROCEDURE GetCompanyName@6086303() : Text[30];
    BEGIN
      IF CmpNameGlobal <> '' THEN
        EXIT(CmpNameGlobal)
      ELSE
        EXIT(COMPANYNAME);
    END;

    LOCAL PROCEDURE GetCalcAcrossCompanies@6086301() : Boolean;
    VAR
      EMSetup@6086300 : Record 6086300;
    BEGIN
      IF CmpNameGlobal <> '' THEN
        EXIT(CalcMilAcrossCompanies);

      IF NOT EMSetup.GET THEN
        EXIT(FALSE);

      EXIT(EMSetup."Calc. mil. across companies");
    END;

    LOCAL PROCEDURE IsCompanyCar@1160040012(VehicleCode@1160040001 : Code[20]) : Boolean;
    VAR
      Vehicle@1160040000 : Record 6086337;
    BEGIN
      IF Vehicle.GET(VehicleCode) THEN
        EXIT(Vehicle."Company Car");
    END;

    BEGIN
    END.
  }
}

