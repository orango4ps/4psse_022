OBJECT Report 11012863 Create Maint. Prop. Serv.Contr
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Wartungsvorschlag Servicevertrag erstellen;
               ENU=Create Maintenance Proposal Service Contract;
               NLD=Onderhoudsvoorstel servicecontract aanmaken;
               NOR=Opprett vedlikeholdsforslag for servicekontrakt;
               SVE=Skapa underh†llsf”rslag, servicekontrakt];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF gvDateUntil = 0D THEN
                    ERROR(Text003);
                END;

    OnPostReport=BEGIN
                   IF ProposalCodeRange <> '' THEN
                     MESSAGE(Text000, ProposalCodeRange)
                   ELSE
                     MESSAGE(Text001);
                 END;

  }
  DATASET
  {
    { 4178;    ;DataItem;                    ;
               DataItemTable=Table11012812;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=VAR
                               MaintenanceManagementCU@1100526200 : Codeunit 11012829;
                             BEGIN
                               IF UseClusterSeqn AND UseContractClusters AND (OriginalContractFilter <> '') THEN
                                 SETFILTER("No.", OriginalContractFilter);
                               ProposalCodeRange :=
                                 MaintenanceManagementCU.CreateMaintProposalFromContracts("Service-Contract", gvDateUntil, ClusterFilter, ClusterSeqn, SplitPerContract, MaxNoOfWorkingHours);
                               CurrReport.BREAK;
                             END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[DEU=Datum bis eins.;
                             ENU=Date Until;
                             NLD=Datum t/m;
                             NOR=Dato til;
                             SVE=Datum till];
                  SourceExpr=gvDateUntil }

      { 1100528600;2;Field  ;
                  CaptionML=[DEU=Nach Vertrag trennen;
                             ENU=Split Per Contract;
                             NLD=Per contract splitsen];
                  SourceExpr=SplitPerContract }

      { 1100525003;2;Field  ;
                  CaptionML=[DEU=Nach Cluster-Sequenznr.;
                             ENU=By Cluster Seq. No.;
                             NLD=O.b.v. clustervolgnr.;
                             NOR=Av klyngesekvensnr];
                  SourceExpr=UseClusterSeqn;
                  OnValidate=BEGIN
                               RequestOptionsPage.UPDATE;
                             END;
                              }

      { 1100525004;2;Field  ;
                  CaptionML=[DEU=Vertragsnr.;
                             ENU=Contract No.;
                             NLD=Contractnr.;
                             NOR=Kontraktsnr;
                             SVE=Kontraktsnr];
                  SourceExpr=ContractFilter;
                  TableRelation=Service-Contract.No.;
                  Enabled=UseClusterSeqn AND UseContractClusters;
                  OnValidate=BEGIN
                               SingleContract := CheckSingleContract(ContractFilter);
                               IF NOT SingleContract THEN BEGIN
                                 ClusterFilter := '';
                                 ClusterSeqn := 0;
                               END;
                             END;
                              }

      { 1100525005;2;Field  ;
                  CaptionML=[DEU=Cluster-Filter;
                             ENU=Cluster Filter;
                             NLD=Clusterfilter;
                             NOR=Klyngefilter];
                  SourceExpr=ClusterFilter;
                  Enabled=UseClusterSeqn;
                  OnValidate=VAR
                               ServiceCluster@1100525000 : Record 11071742;
                               ServiceContract@1100528600 : Record 11012812;
                             BEGIN
                               IF SingleContract THEN BEGIN
                                 IF NOT ServiceContract.GET(ContractFilter) THEN
                                   ServiceContract.INIT;
                                 IF ServiceContract."Use Contract Clusters" THEN BEGIN
                                   ServiceCluster.SETRANGE(Type, ServiceCluster.Type::Contract);
                                   ServiceCluster.SETRANGE("Type Code", ContractFilter);
                                 END ELSE BEGIN
                                   ServiceCluster.SETRANGE(Type, ServiceCluster.Type::" ");
                                   ServiceCluster.SETRANGE("Type Code", '');
                                 END;
                                 ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
                                 ServiceCluster.SETFILTER(Code, ClusterFilter);
                                 ServiceCluster.FINDSET;
                               END;
                               ClusterSeqn := 0;
                             END;

                  OnLookup=VAR
                             ServiceCluster@1100525000 : Record 11071742;
                             ServiceContract@1100528601 : Record 11012812;
                             ServiceClusterList@1100528504 : Page 11125246;
                           BEGIN
                             IF SingleContract THEN BEGIN
                               IF NOT ServiceContract.GET(ContractFilter) THEN
                                 ServiceContract.INIT;
                               IF ServiceContract."Use Contract Clusters" THEN BEGIN
                                 ServiceCluster.SETRANGE(Type, ServiceCluster.Type::Contract);
                                 ServiceCluster.SETFILTER("Type Code", ContractFilter);
                               END ELSE BEGIN
                                 ServiceCluster.SETRANGE(Type, ServiceCluster.Type::" ");
                                 ServiceCluster.SETFILTER("Type Code", '');
                               END;
                               ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
                               ServiceClusterList.SETTABLEVIEW(ServiceCluster);
                               ServiceClusterList.LOOKUPMODE(TRUE);
                               IF ServiceClusterList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                 ServiceClusterList.SETSELECTIONFILTER(ServiceCluster);
                                 IF ServiceCluster.FINDFIRST THEN BEGIN
                                   ClusterFilter := '';
                                   REPEAT
                                     IF ClusterFilter <> '' THEN
                                       ClusterFilter += '|';
                                     ClusterFilter += ServiceCluster.Code;
                                   UNTIL ServiceCluster.NEXT = 0;
                                   ClusterSeqn := 0;
                                 END;
                               END;
                             END;
                           END;
                            }

      { 1100525006;2;Field  ;
                  CaptionML=[DEU=Cluster-Sequ.;
                             ENU=Cluster Seqn.;
                             NLD=Clustervolgnr.;
                             NOR=Klyngesekvens];
                  SourceExpr=ClusterSeqn;
                  Enabled=UseClusterSeqn;
                  OnValidate=VAR
                               ServiceClusterSeq@1100525000 : Record 11071966;
                               ServiceContract@1100528600 : Record 11012812;
                             BEGIN
                               IF SingleContract THEN BEGIN
                                 IF NOT ServiceContract.GET(ContractFilter) THEN
                                   ServiceContract.INIT;
                                 IF ServiceContract."Use Contract Clusters" THEN BEGIN
                                   ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::Contract);
                                   ServiceClusterSeq.SETRANGE("Type Code", ContractFilter);
                                 END ELSE BEGIN
                                   ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::" ");
                                   ServiceClusterSeq.SETRANGE("Type Code", '');
                                 END;
                                 ServiceClusterSeq.SETRANGE("Source Type", ServiceClusterSeq."Source Type"::" ");
                                 ServiceClusterSeq.SETFILTER("Cluster Code", ClusterFilter);
                                 ServiceClusterSeq.SETRANGE("Seq. No.", ClusterSeqn);
                                 ServiceClusterSeq.FINDSET;
                               END;
                             END;

                  OnLookup=VAR
                             ServiceClusterSeq@1100525000 : Record 11071966;
                             ServiceContract@1100528601 : Record 11012812;
                           BEGIN
                             IF SingleContract THEN BEGIN
                               IF NOT ServiceContract.GET(ContractFilter) THEN
                                 ServiceContract.INIT;
                               IF ServiceContract."Use Contract Clusters" THEN BEGIN
                                 ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::Contract);
                                 ServiceClusterSeq.SETRANGE("Type Code", ContractFilter);
                               END ELSE BEGIN
                                 ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::" ");
                                 ServiceClusterSeq.SETRANGE("Type Code", '');
                               END;
                               ServiceClusterSeq.SETRANGE("Source Type", ServiceClusterSeq."Source Type"::" ");
                               ServiceClusterSeq.SETFILTER("Cluster Code", ClusterFilter);
                               IF PAGE.RUNMODAL(0, ServiceClusterSeq) = ACTION::LookupOK THEN
                                 ClusterSeqn := ServiceClusterSeq."Seq. No.";
                             END;
                           END;
                            }

      { 1100529600;2;Field  ;
                  CaptionML=[DEU=Maximale Anzahl von Arbeitsstunden;
                             ENU=Maximum Number of Working Hours;
                             NLD=Maximale aantal werkuren];
                  SourceExpr=MaxNoOfWorkingHours;
                  MinValue=0 }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      gvDateUntil@1100525001 : Date;
      ContractFilter@1100528603 : Text[250];
      OriginalContractFilter@1100525000 : Text[250];
      ProposalCodeRange@1100526201 : Code[50];
      Text000@1100526202 : TextConst 'DEU=Wartung erstellt: %1;ENU=Maintenance Proposal created: %1;NLD=Onderhoud aangemaakt: %1;NOR=Vedlikeholdsforslag opprettet: %1;SVE=Underh†llsf”rslag skapades: %1';
      Text001@1100526203 : TextConst 'DEU=Keine Wartung erstellt;ENU=No Maintenance Proposal created;NLD=Geen onderhoud aangemaakt;NOR=Ingen vedlikeholdsforslag opprettet;SVE=Inget underh†llsf”rslag har skapats';
      Text003@1100528600 : TextConst 'DEU=Geben Sie ''Datum bis einschl.'' ein;ENU=Please provide Date Until;NLD=Geef datum t/m in;NOR=Angi dato frem til;SVE=Ange datum till';
      ClusterFilter@1100528601 : Code[250];
      ClusterSeqn@1100528602 : Integer;
      SingleContract@1100528604 : Boolean;
      UseClusterSeqn@1100528605 : Boolean INDATASET;
      UseContractClusters@1100525002 : Boolean INDATASET;
      SplitPerContract@1100528606 : Boolean;
      MaxNoOfWorkingHours@1100529600 : Decimal;

    PROCEDURE SetContractFilter@1100528600(IContractFilter@1100528600 : Text[250]);
    VAR
      ServiceContract@1100525000 : Record 11012812;
    BEGIN
      ContractFilter := IContractFilter;
      OriginalContractFilter := IContractFilter;
      SingleContract := CheckSingleContract(OriginalContractFilter);
      IF SingleContract THEN BEGIN
        IF ServiceContract.GET(IContractFilter) THEN
          UseContractClusters := ServiceContract."Use Contract Clusters";
        IF NOT UseContractClusters THEN
          ContractFilter := '';
      END;
      SingleContract := CheckSingleContract(ContractFilter);
    END;

    PROCEDURE CheckSingleContract@1100528601(IContractFilter@1100528600 : Text[250]) : Boolean;
    VAR
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF ContractFilter = '' THEN
        EXIT(TRUE);
      ServiceContract.SETFILTER("No.", ContractFilter);
      EXIT(ServiceContract.COUNT = 1);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

