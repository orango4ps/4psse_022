OBJECT Table 11012621 Assigned Employee- Rail
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF ("Employee No." <> '') THEN
                 CheckDateAndTime();
               CapPlanCU.UpdateCapacityPlanning(Rec);
             END;

    OnModify=BEGIN
               IF ("Employee No." <> '') THEN
                 CheckDateAndTime();
               CapPlanCU.UpdateCapacityPlanning(Rec);
             END;

    OnDelete=VAR
               lvCapPlanRec@1210190000 : Record 11012623;
             BEGIN
               lvCapPlanRec.SETCURRENTKEY("Request No.", "Request Line No.", "Assigned Employee Line No.");
               lvCapPlanRec.SETRANGE("Request No.", "Request No.");
               lvCapPlanRec.SETRANGE("Request Line No.", "Request Line No.");
               lvCapPlanRec.SETRANGE("Assigned Employee Line No.", "Line No.");
               lvCapPlanRec.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text000, TABLECAPTION);
             END;

    CaptionML=[ENU=Assigned Employee;
               NOR=Tilordnet ansatt;
               SVE=Tilldelad anst„lld];
  }
  FIELDS
  {
    { 10  ;   ;Request No.         ;Code20        ;TableRelation="Request - Rail";
                                                   CaptionML=[ENU=Request No.;
                                                              NOR=Foresp›rselnr.;
                                                              SVE=Nr f”r f”rfr†gan] }
    { 20  ;   ;Request Line No.    ;Integer       ;CaptionML=[ENU=Request Line No.;
                                                              NOR=Foresp›rselradnr.;
                                                              SVE=Radnr beg„ran] }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 40  ;   ;Date From           ;Date          ;OnValidate=BEGIN
                                                                CheckDateFrom();
                                                                IF ("Date From" <> 0D) AND ("Date To" < "Date From") THEN
                                                                  "Date To" := "Date From";
                                                                CheckHireVendor();
                                                                CheckEmployeeEmployed();
                                                                CheckCapacityPlanning();
                                                              END;

                                                   CaptionML=[ENU=Date From;
                                                              NOR=Dato fra;
                                                              SVE=Datum fr†n] }
    { 45  ;   ;Date To             ;Date          ;OnValidate=BEGIN
                                                                CheckDateTo();
                                                                CheckHireVendor();
                                                                CheckEmployeeEmployed();
                                                                CheckCapacityPlanning();
                                                              END;

                                                   CaptionML=[ENU=Date To;
                                                              NOR=Dato til;
                                                              SVE=Datum till] }
    { 50  ;   ;Time From           ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Time From");
                                                                CheckTimeFrom();
                                                                CheckCapacityPlanning();
                                                              END;

                                                   CaptionML=[ENU=Time From;
                                                              NOR=Tid fra;
                                                              SVE=Tid fr†n] }
    { 55  ;   ;Time To             ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Time To");
                                                                CheckTimeTo();
                                                                CheckCapacityPlanning();
                                                              END;

                                                   CaptionML=[ENU=Time To;
                                                              NOR=Tid til;
                                                              SVE=Tid till] }
    { 60  ;   ;External            ;Boolean       ;OnValidate=BEGIN
                                                                IF (NOT External) AND ("Vendor No." <> '') THEN
                                                                 "Vendor No." := '';

                                                                IF ("Employee No." <> '') THEN BEGIN
                                                                  EmplRec.GET("Employee No.");
                                                                  IF (EmplRec.External <> External) THEN
                                                                    "Employee No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=External;
                                                              NOR=Eksternt;
                                                              SVE=Externt] }
    { 70  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                IF ("Vendor No." = '') THEN
                                                                  EXIT;

                                                                CheckHireVendor();

                                                                IF ("Vendor No." <> '') THEN BEGIN
                                                                  IF (NOT External) THEN
                                                                    External := TRUE;
                                                                  IF ("Employee No." <> '') THEN BEGIN
                                                                    EmplRec.GET("Employee No.");
                                                                    IF (NOT EmplRec.External) OR (EmplRec.Employer <> "Vendor No.") THEN
                                                                      "Employee No." := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverand›rnr.;
                                                              SVE=Leverant”rsnr] }
    { 71  ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rsnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Editable=No }
    { 80  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF ("Employee No." = '') THEN
                                                                  EXIT;

                                                                CheckEmployeeHasFunction();
                                                                CheckEmployeeEmployed();

                                                                EmplRec.GET("Employee No.");
                                                                IF (EmplRec.External <> External) THEN
                                                                  External := EmplRec.External;
                                                                IF (NOT EmplRec.External) THEN BEGIN
                                                                  IF ("Vendor No." <> '') THEN
                                                                   "Vendor No." := '';
                                                                END ELSE BEGIN
                                                                  IF (EmplRec.Employer <> "Vendor No.") THEN
                                                                    VALIDATE("Vendor No.", EmplRec.Employer);
                                                                END;

                                                                CheckCapacityPlanning();
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=Anst„llningsnr] }
    { 90  ;   ;Note                ;Text50        ;CaptionML=[ENU=Note;
                                                              NOR=Bemerkning;
                                                              SVE=Notering] }
    { 100 ;   ;Plan on Saterday    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Plan on Saterday" AND (NOT xRec."Plan on Saterday") THEN BEGIN
                                                                  CheckEmployeeEmployed();
                                                                  CheckCapacityPlanning();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sat;
                                                              NOR=l›r;
                                                              SVE=L”r] }
    { 101 ;   ;Plan on Sunday      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Plan on Sunday" AND (NOT xRec."Plan on Sunday") THEN BEGIN
                                                                  CheckEmployeeEmployed();
                                                                  CheckCapacityPlanning();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sun;
                                                              NOR=s›n;
                                                              SVE=S”n] }
    { 102 ;   ;Plan on Monday      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Plan on Monday" AND (NOT xRec."Plan on Monday") THEN BEGIN
                                                                  CheckEmployeeEmployed();
                                                                  CheckCapacityPlanning();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Mon;
                                                              NOR=man;
                                                              SVE=M†n] }
    { 103 ;   ;Plan on Tuesday     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Plan on Tuesday" AND (NOT xRec."Plan on Tuesday") THEN BEGIN
                                                                  CheckEmployeeEmployed();
                                                                  CheckCapacityPlanning();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Tue;
                                                              NOR=tirs;
                                                              SVE=Tis] }
    { 104 ;   ;Plan on Wednesday   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Plan on Wednesday" AND (NOT xRec."Plan on Wednesday") THEN BEGIN
                                                                  CheckEmployeeEmployed();
                                                                  CheckCapacityPlanning();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Wed;
                                                              NOR=ons;
                                                              SVE=Ons] }
    { 105 ;   ;Plan on Thursday    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Plan on Thursday" AND (NOT xRec."Plan on Thursday") THEN BEGIN
                                                                  CheckEmployeeEmployed();
                                                                  CheckCapacityPlanning();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Thu;
                                                              NOR=tors;
                                                              SVE=Tor] }
    { 106 ;   ;Plan on Friday      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Plan on Friday" AND (NOT xRec."Plan on Friday") THEN BEGIN
                                                                  CheckEmployeeEmployed();
                                                                  CheckCapacityPlanning();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Fri;
                                                              NOR=fre;
                                                              SVE=Fre] }
  }
  KEYS
  {
    {    ;Request No.,Request Line No.,Line No.   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RequestRec@1100485000 : Record 11012619;
      ReqLineRec@1210190009 : Record 11012620;
      ReqLineNewRec@1210190030 : Record 11012620;
      EmplRec@1210190015 : Record 5200;
      CompByEmplRec@1210190008 : Record 11012606;
      HireVendRec@1210190001 : Record 11012622;
      HourAccFunctionsCU@1210190003 : Codeunit 11012607;
      CapPlanCU@1210190026 : Codeunit 11012610;
      Text000@1210190022 : TextConst 'ENU=Rename %1 not allowed.;NOR=Gi nytt navn %1 er ikke tillatt.;SVE=Byta namn %1 „r inte till†tet.';
      Text001@1210190007 : TextConst 'ENU=''%1'' has not the Function ''%2'' (%3);NOR=''%1'' mangler funksjonen ''%2'' (%3);SVE=''%1'' har inte funktionen ''%2'' (%3)';
      Text002@1210190010 : TextConst 'ENU=''%1'' has in period %2..%3 not the Function ''%4'' (''%5) available;NOR=''%1'' har i perioden %2..%3 ikke funksjonen ''%4'' (''%5) tilgjengelig;SVE=''%1'' har i period %2..%3 inte funktionen ''%4'' (''%5) tillg„nglig';
      Text003@1210190011 : TextConst 'ENU=''%1'' has not in whole period %2..%3 the Function ''%4'' (''%5) available;NOR=''%1'' har ikke funksjonen ''%4'' (''%5) tilgjengelig i hele perioden %2..%3;SVE=''%1'' har inte i hela perioden %2..%3 funktion ''%4'' (''%5) tillg„nglig';
      Text004@1210190014 : TextConst 'ENU=''%1'' employed from %2;NOR=''%1'' ansatt fra %2;SVE=''%1'' anst„lld fr†n %2';
      Text005@1210190013 : TextConst 'ENU=''%1'' not employed since %2;NOR=''%1'' har ikke v‘rt ansatt siden %2;SVE=''%1'' har inte varit anst„lld sedan %2';
      Text006@1210190012 : TextConst 'ENU=%1 ''%2'' inactive from %3;NOR=%1 ''%2'' inaktiv fra %3;SVE=%1 ''%2'' inaktiv fr†n %3';
      TimeFrom@1210190029 : Time;
      ReqTimeTo@1210190028 : Time;
      ReqLineCheckMode@1210190027 : Boolean;
      ReqTimeFromInt@1210190005 : Integer;
      ReqTimeToInt@1210190016 : Integer;
      TimeFromInt1@1210190019 : Integer;
      TimeFromInt2@1210190020 : Integer;
      TimeToInt1@1210190024 : Integer;
      TimeToInt2@1210190023 : Integer;
      Text007@1210190017 : TextConst 'ENU=''%1'' may not be less than %2 ''%3'';NOR=''%1'' kan ikke v‘re mindre enn %2 ''%3'';SVE=(%1) f†r inte vara mindre „n %2 (%3)';
      Text008@1210190021 : TextConst 'ENU=''%1'' may not be greater than %2 ''%3'' of the request line;NOR=''%1'' kan ikke v‘re st›rre enn %2 ''%3'' av foresp›rselraden;SVE=''%1'' f†r inte vara st”rre „n %2 ''%3'' p† beg„ransraden';
      Text009@1210190004 : TextConst 'ENU=''%1'' not allowed, allowed from %2 to %3;NOR=''%1'' ikke tillatt, tillatt fra %2 til %3;SVE=''%1'' inte till†tet, till†tet fr†n %2 till % 3';

    PROCEDURE InitRecord@1210190000();
    BEGIN
      IF NOT CheckAssignAllowed() THEN
        EXIT;
      "Date From" := ReqLineRec."Date From";
      "Date To" := ReqLineRec."Date To";
      "Time From" := ReqLineRec."Time From";
      "Time To" := ReqLineRec."Time To";
      "Plan on Saterday" := ReqLineRec."Plan on Saterday";
      "Plan on Sunday" := ReqLineRec."Plan on Sunday";
      "Plan on Monday" := ReqLineRec."Plan on Monday";
      "Plan on Tuesday" := ReqLineRec."Plan on Tuesday";
      "Plan on Wednesday" := ReqLineRec."Plan on Wednesday";
      "Plan on Thursday" := ReqLineRec."Plan on Thursday";
      "Plan on Friday" := ReqLineRec."Plan on Friday";
    END;

    PROCEDURE TimeFormat@1210190009() : Text[30];
    BEGIN
      EXIT('<Hours24,2>:<Minutes,2>');
    END;

    PROCEDURE SetModifiedReqLine@1210190014(IReqLineRec@1210190000 : Record 11012620);
    BEGIN
      //* New values of request line that are not already updated in the database.
      //* Used during modify of request lines with assigned employee lines, used for checks.
      //* After the checks are done always call the next function, to reset this mode.
      ReqLineCheckMode := TRUE;
      ReqLineNewRec := IReqLineRec;
    END;

    PROCEDURE ResetModifiedReqLine@1210190015();
    BEGIN
      ReqLineCheckMode := FALSE;
    END;

    PROCEDURE ReadRequestLine@1210190002();
    BEGIN
      IF ReqLineCheckMode THEN BEGIN
        ReqLineRec := ReqLineNewRec;
        EXIT;
      END;

      IF ReqLineRec.GET("Request No.", "Request Line No.") THEN
        ReqLineRec.CALCFIELDS("Function Name")
      ELSE
        ReqLineRec.INIT;
    END;

    PROCEDURE CheckAssignAllowed@1210190006() : Boolean;
    VAR
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      IF ("Request No." = '') OR ("Request Line No." = 0) THEN
        EXIT(FALSE);

      IF NOT RequestRec.GET("Request No.") THEN
        EXIT(FALSE);
      IF RequestRec.Status IN [RequestRec.Status::Rejected, RequestRec.Status::Expired] THEN
        EXIT(FALSE);

      lvProjRec.GET(RequestRec."Project No.");   //**4PS01.n
      //ProjSetupRec.GET;                        //**4PS01.o
      ReadRequestLine();
      IF (ReqLineRec."Request No." = '') OR
         (ReqLineRec."Line No." = 0) OR
         (ReqLineRec."Project No." = '') OR
         (lvProjRec."Posting Element Mandatory" AND (ReqLineRec.Element = '')) OR
         (ReqLineRec."Cost Component" = '') OR
         (ReqLineRec."Date From" = 0D) OR
         (ReqLineRec."Date To" = 0D) OR
         (ReqLineRec."Time From" = 0T) OR
         (ReqLineRec."Time To" = 0T) OR
         (ReqLineRec.Quantity = 0)
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CheckDateAndTime@1210190012();
    BEGIN
      CheckDateFrom();
      CheckDateTo();
      CheckTimeFrom();
      CheckTimeTo();
    END;

    PROCEDURE CheckDateFrom@1210190007();
    BEGIN
      IF ("Date From" = 0D) THEN
        EXIT;

      ReadRequestLine();
      IF ("Date From" < ReqLineRec."Date From") OR ("Date From" > ReqLineRec."Date To") THEN
        FIELDERROR("Time From", STRSUBSTNO(Text009, "Date From", ReqLineRec."Date From", ReqLineRec."Date To"));
    END;

    PROCEDURE CheckDateTo@1210190008();
    BEGIN
      IF ("Date To" = 0D) THEN
        EXIT;

      ReadRequestLine();
      IF "Date To" < "Date From" THEN
        FIELDERROR("Date To", STRSUBSTNO(Text007, "Date To", FIELDCAPTION("Date From"), "Date From"));
      IF "Date To" > ReqLineRec."Date To" THEN
        FIELDERROR("Date To", STRSUBSTNO(Text008, "Date To", ReqLineRec."Date To"));
    END;

    PROCEDURE CheckTimeFrom@1210190010();
    BEGIN
      IF ("Time From" = 0T) THEN
        EXIT;

      ReadRequestLine();
      IF ReqLineRec."Time From" <= ReqLineRec."Time To" THEN BEGIN
        IF ("Time From" < ReqLineRec."Time From") OR ("Time From" > ReqLineRec."Time To") THEN BEGIN
          FIELDERROR("Time From", STRSUBSTNO(Text009, FORMAT("Time From",0,TimeFormat()),
            FORMAT(ReqLineRec."Time From",0,TimeFormat()), FORMAT(ReqLineRec."Time To",0,TimeFormat())));
        END;
      END ELSE BEGIN
        TimeFromInt1 := HourAccFunctionsCU.TimeToInteger("Time From", 0, 0, 0);
        TimeFromInt2 := HourAccFunctionsCU.TimeToInteger("Time From", 0, 1, 0);
        ReqTimeFromInt := HourAccFunctionsCU.TimeToInteger(ReqLineRec."Time From", 0, 0, 0);
        IF ("Date From" = ReqLineRec."Date From") OR ("Date From" = 0D) THEN BEGIN
          EVALUATE(ReqTimeTo, '23 59');
          ReqTimeToInt := HourAccFunctionsCU.TimeToInteger(ReqTimeTo, 0, 0, 0);
        END ELSE BEGIN
          ReqTimeTo := ReqLineRec."Time To";
          ReqTimeToInt := HourAccFunctionsCU.TimeToInteger(ReqTimeTo, 0, 1, 0);
        END;
        IF (TimeFromInt1 < ReqTimeFromInt) AND (TimeFromInt2 > ReqTimeToInt) THEN BEGIN
          FIELDERROR("Time From", STRSUBSTNO(Text009, FORMAT("Time From",0,TimeFormat()),
            FORMAT(ReqLineRec."Time From",0,TimeFormat()), FORMAT(ReqTimeTo,0,TimeFormat())));
        END;
      END;
    END;

    PROCEDURE CheckTimeTo@1210190011();
    BEGIN
      IF ("Time To" = 0T) THEN
        EXIT;

      IF "Time From" <> 0T THEN
        TimeFrom := "Time From"
      ELSE
        TimeFrom := ReqLineRec."Time From";

      ReadRequestLine();
      IF ReqLineRec."Time From" <= ReqLineRec."Time To" THEN BEGIN
        IF "Time To" < TimeFrom THEN
          FIELDERROR("Time To", STRSUBSTNO(Text007, FORMAT("Time To",0,TimeFormat()),
            FIELDCAPTION("Time From"), FORMAT(TimeFrom,0,TimeFormat())));
        IF "Time To" > ReqLineRec."Time To" THEN
          FIELDERROR("Time To", STRSUBSTNO(Text009, FORMAT("Time To",0,TimeFormat()),
            FORMAT(TimeFrom,0,TimeFormat()), FORMAT(ReqLineRec."Time To",0,TimeFormat())));
      END ELSE BEGIN
        TimeToInt1 := HourAccFunctionsCU.TimeToInteger("Time To", 0, 0, 0);
        TimeToInt2 := HourAccFunctionsCU.TimeToInteger("Time To", 0, 1, 0);
        ReqTimeToInt := HourAccFunctionsCU.TimeToInteger(ReqLineRec."Time To", 0, 1, 0);
        IF TimeFrom >= ReqLineRec."Time From" THEN
          TimeFromInt1 := HourAccFunctionsCU.TimeToInteger(TimeFrom, 0, 0, 0)
        ELSE
          TimeFromInt1 := HourAccFunctionsCU.TimeToInteger(TimeFrom, 0, 1, 0);
        IF (TimeToInt1 < TimeFromInt1) AND (TimeToInt2 > ReqTimeToInt) THEN BEGIN
          FIELDERROR("Time To", STRSUBSTNO(Text009, FORMAT("Time To",0,TimeFormat()),
            FORMAT(TimeFrom,0,TimeFormat()), FORMAT(ReqLineRec."Time To",0,TimeFormat())));
        END;
      END;
    END;

    PROCEDURE CheckHireVendor@1210190003();
    BEGIN
      IF (NOT External) OR ("Vendor No." = '') OR ("Date From" = 0D) OR ("Date To" = 0D) THEN
        EXIT;

      ReadRequestLine();
      HireVendRec.RESET;
      HireVendRec.SETCURRENTKEY("Vendor No.", "Cost Component", "Date From");
      HireVendRec.SETRANGE("Vendor No.", "Vendor No.");
      HireVendRec.SETRANGE("Cost Component", ReqLineRec."Cost Component");
      HireVendRec.SETFILTER("Date From", '..%1', "Date From");
      HireVendRec.SETFILTER("Date To", '%1..', "Date From");
      IF NOT HireVendRec.FIND('-') THEN BEGIN
        HireVendRec.SETFILTER("Date From", '..%1', "Date To");
        IF NOT HireVendRec.FIND('-') THEN
          FIELDERROR("Vendor No.", STRSUBSTNO(
            Text002, "Vendor No.", "Date From", "Date To", ReqLineRec."Cost Component", ReqLineRec."Function Name"))
        ELSE
          FIELDERROR("Vendor No.", STRSUBSTNO(
            Text003, "Vendor No.", "Date From", "Date To", ReqLineRec."Cost Component", ReqLineRec."Function Name"));
      END;
      WHILE (HireVendRec."Date To" < "Date To") DO BEGIN
        HireVendRec.SETFILTER("Date From", '..%1', (HireVendRec."Date To" + 1));
        HireVendRec.SETFILTER("Date To", '%1..', (HireVendRec."Date To" + 1));
        IF NOT HireVendRec.FIND('-') THEN BEGIN
          FIELDERROR("Vendor No.", STRSUBSTNO(
            Text003, "Vendor No.", "Date From", "Date To", ReqLineRec."Cost Component", ReqLineRec."Function Name"));
        END;
      END;
    END;

    PROCEDURE OnLookupVendor@1210190004();
    BEGIN
      IF NOT CheckAssignAllowed() THEN
        EXIT;

      ReadRequestLine();
      HireVendRec.RESET;
      HireVendRec.SETCURRENTKEY("Cost Component", "Vendor No.", "Date From");
      HireVendRec.SETRANGE("Cost Component", ReqLineRec."Cost Component");
      HireVendRec.SETFILTER("Date From", '..%1', "Date To");
      HireVendRec.SETFILTER("Date To", '%1..', "Date From");
      HireVendRec."Vendor No." := "Vendor No.";
      HireVendRec."Cost Component" := ReqLineRec."Cost Component";
      IF PAGE.RUNMODAL(0, HireVendRec) = ACTION::LookupOK THEN BEGIN
        IF (HireVendRec."Vendor No." <> '') THEN
          VALIDATE("Vendor No.", HireVendRec."Vendor No.");
      END;
    END;

    PROCEDURE CheckEmployeeHasFunction@1210190001();
    BEGIN
      ReadRequestLine();
      IF NOT CompByEmplRec.GET("Employee No.", ReqLineRec."Cost Component") THEN BEGIN
        FIELDERROR(
          "Employee No.",
          STRSUBSTNO(Text001, "Employee No.", ReqLineRec."Cost Component", ReqLineRec."Function Name"));
      END;
    END;

    PROCEDURE CheckEmployeeEmployed@1210190005();
    BEGIN
      IF ("Employee No." = '') OR ("Date From" = 0D) OR ("Date To" = 0D) THEN
        EXIT;

      EmplRec.GET("Employee No.");
      IF ("Date From" < EmplRec."Employment Date") THEN
        FIELDERROR("Employee No.", STRSUBSTNO(Text004, "Employee No.", EmplRec."Employment Date"));
      IF (EmplRec."Termination Date" <> 0D) AND ("Date To" >= EmplRec."Termination Date") THEN
        FIELDERROR("Employee No.", STRSUBSTNO(Text005, "Employee No.", EmplRec."Termination Date"));
      IF (EmplRec.Status <> EmplRec.Status::Active) AND (EmplRec."Inactive Date" <> 0D) THEN BEGIN
        IF ("Date To" >= EmplRec."Inactive Date") THEN BEGIN
          IF (("Employee No." <> xRec."Employee No.") AND (CurrFieldNo = FIELDNO("Employee No."))) OR
             (("Date From" <> xRec."Date From") AND (CurrFieldNo = FIELDNO("Date From"))) OR
             (("Date To" <> xRec."Date To") AND (CurrFieldNo = FIELDNO("Date To")))
          THEN
            MESSAGE(Text006, FIELDCAPTION("Employee No."), "Employee No.", EmplRec."Inactive Date");
        END;
      END;
    END;

    PROCEDURE OnLookupEmployee@1210190013();
    VAR
      lvAvailableEmplFrm@1100528600 : Page 11012656;
      lvDateFrom@1210190001 : Date;
      lvDateTo@1210190002 : Date;
      lvTimeFrom@1210190003 : Time;
      lvTimeTo@1210190004 : Time;
    BEGIN
      IF NOT CheckAssignAllowed() THEN
        EXIT;

      ReadRequestLine();
      IF "Date From" <> 0D THEN
        lvDateFrom := "Date From"
      ELSE
        lvDateFrom := ReqLineRec."Date From";
      IF "Date To" <> 0D THEN
        lvDateTo := "Date To"
      ELSE
        lvDateTo := ReqLineRec."Date To";
      IF "Time From" <> 0T THEN
        lvTimeFrom := "Time From"
      ELSE
        lvTimeFrom := ReqLineRec."Time From";
      IF "Time To" <> 0T THEN
        lvTimeTo := "Time To"
      ELSE
        lvTimeTo := ReqLineRec."Time To";
      IF lvDateTo < lvDateFrom THEN
        lvDateTo := lvDateFrom;

      EmplRec.RESET;
      EmplRec.SETRANGE(External, External);
      IF External AND ("Vendor No." <> '') THEN
        EmplRec.SETRANGE(Employer, "Vendor No.");
      EmplRec."No." := "Employee No.";
      lvAvailableEmplFrm.SETTABLEVIEW(EmplRec);
      lvAvailableEmplFrm.SETRECORD(EmplRec);
      lvAvailableEmplFrm.InitSelections(ReqLineRec."Cost Component", lvDateFrom, lvDateTo, lvTimeFrom, lvTimeTo, Rec);
      lvAvailableEmplFrm.LOOKUPMODE(TRUE);
      IF lvAvailableEmplFrm.RUNMODAL= ACTION::LookupOK THEN BEGIN
        lvAvailableEmplFrm.GETRECORD(EmplRec);
        IF (EmplRec."No." <> '') THEN
          VALIDATE("Employee No.", EmplRec."No.");
      END;
    END;

    PROCEDURE CheckCapacityPlanning@1100485000();
    BEGIN
      CapPlanCU.CheckCapacityPlanningOverlap(Rec);
      CapPlanCU.CheckValidationRules(Rec);
    END;

    BEGIN
    {
      4PS01 JD, 8 aug 2007, Call 5990, "Posting Element Mandatory" also on project card
    }
    END.
  }
}

