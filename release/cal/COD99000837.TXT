OBJECT Codeunit 99000837 Prod. Order Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 99000849=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Die reservierte Menge kann nicht grî·er als %1 sein;ENU=Reserved quantity cannot be greater than %1;NLD=Gereserveerd aantal kan niet groter dan %1 zijn.;NOR=Reservert antall kan ikke vëre stõrre enn %1;SVE=Reserverat antal kan inte vara stîrre Ñn %1';
      Text002@1001 : TextConst 'DEU=muss ausgefÅllt sein, wenn eine Menge reserviert ist.;ENU=must be filled in when a quantity is reserved;NLD=moet ingevuld worden als er reserveringen zijn.;NOR=mÜ fylles ut nÜr et antall reserveres;SVE=ska fyllas i nÑr ett antal Ñr reserverade';
      Text003@1002 : TextConst 'DEU=darf nicht geÑndert werden, wenn eine Menge reserviert ist;ENU=must not be changed when a quantity is reserved;NLD=mag niet gewijzigd worden als er reserveringen zijn.;NOR=skal ikke endres nÜr et antall reserveres;SVE=fÜr inte Ñndras nÑr ett antal Ñr reserverade';
      Text004@1003 : TextConst 'DEU=Codeunit wurde nicht korrekt initialisiert.;ENU=Codeunit is not initialized correctly.;NLD=Codeunit is niet correct geãnitialiseerd.;NOR=Kodeenheten er ikke riktig initialisert.;SVE=Kodmodul har inte initierats pÜ ett korrekt sÑtt.';
      CreateReservEntry@1005 : Codeunit 99000830;
      ReservEngineMgt@1006 : Codeunit 99000831;
      ReservMgt@1007 : Codeunit 99000845;
      Blocked@1008 : Boolean;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry,Service,Job';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[50];
      SetFromLotNo@1019 : Code[50];
      SetFromQtyPerUOM@1020 : Decimal;
      Text006@1021 : TextConst 'DEU=FÅr %1 %2 %3 wurde Artikelverfolgung eingerichtet. Mîchten Sie den Lîschvorgang trotzdem ausfÅhren?;ENU=The %1 %2 %3 has item tracking. Do you want to delete it anyway?;NLD=Voor %1 %2 %3 is artikeltracering ingeschakeld. Wilt u deze toch verwijderen?;NOR=%1 %2 %3 har varesporing. Vil du slette likevel?;SVE=ArtikelspÜrning anvÑnds fîr %1 %2 %3. Vill du ta bort den?';
      Text007@1017 : TextConst 'DEU=%1 %2 %3 weist Komponenten mit Artikelverfolgung auf. Trotzdem lîschen?;ENU=The %1 %2 %3 has components with item tracking. Do you want to delete it anyway?;NLD=The %1 %2 %3 heeft onderdelen met artikeltracering. Wilt u het toch verwijderen?;NOR=%1 %2 %3 har komponenter med varesporing. Vil du slette likevel?;SVE=ArtikelspÜrning anvÑnds fîr komponenter i %1 %2 %3. Vill du ta bort den?';
      Text008@1022 : TextConst 'DEU=%1 %2 %3 und Komponenten davon weisen Artikelverfolgung auf. Trotzdem lîschen?;ENU=The %1 %2 %3 and its components have item tracking. Do you want to delete them anyway?;NLD=De %1 %2 %3 en de onderdelen ervan hebben artikeltracering. Wilt u ze toch verwijderen?;NOR=%1 %2 %3 og tilhõrende komponenter har varesporing. Vil du slette dem likevel?;SVE=ArtikelspÜrning anvÑnds fîr %1 %2 %3 och dess komponenter. Vill du ta bort den?';

    [External]
    PROCEDURE CreateReservation@1(VAR ProdOrderLine@1000 : Record 5406;Description@1001 : Text[100];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1004 : Code[50];ForLotNo@1005 : Code[50]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text004);

      ProdOrderLine.TESTFIELD("Item No.");
      ProdOrderLine.TESTFIELD("Due Date");

      ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(ProdOrderLine."Remaining Qty. (Base)") < ABS(ProdOrderLine."Reserved Qty. (Base)") + QuantityBase THEN
        ERROR(
          Text000,
          ABS(ProdOrderLine."Remaining Qty. (Base)") - ABS(ProdOrderLine."Reserved Qty. (Base)"));

      ProdOrderLine.TESTFIELD("Location Code",SetFromLocationCode);
      ProdOrderLine.TESTFIELD("Variant Code",SetFromVariantCode);

      IF QuantityBase < 0 THEN
        ShipmentDate := ProdOrderLine."Due Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ProdOrderLine."Due Date";
      END;

      IF ProdOrderLine."Planning Flexibility" <> ProdOrderLine."Planning Flexibility"::Unlimited THEN
        CreateReservEntry.SetPlanningFlexibility(ProdOrderLine."Planning Flexibility");

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Prod. Order Line",ProdOrderLine.Status,
        ProdOrderLine."Prod. Order No.",'',ProdOrderLine."Line No.",0,
        ProdOrderLine."Qty. per Unit of Measure",Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ProdOrderLine."Item No.",ProdOrderLine."Variant Code",ProdOrderLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@9(TrackingSpecificationFrom@1000 : Record 336);
    BEGIN
      WITH TrackingSpecificationFrom DO BEGIN
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      END;
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;ProdOrderLine@1001 : Record 5406);
    BEGIN
      FilterReservEntry.SetSourceFilter(DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",0,FALSE);
      FilterReservEntry.SetSourceFilter2('',ProdOrderLine."Line No.");
    END;

    [External]
    PROCEDURE Caption@30(ProdOrderLine@1001 : Record 5406) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3 %4',
          ProdOrderLine.Status,ProdOrderLine.TABLECAPTION,ProdOrderLine."Prod. Order No.",ProdOrderLine."Item No.");
    END;

    [External]
    PROCEDURE FindReservEntry@4(ProdOrderLine@1000 : Record 5406;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ProdOrderLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    VAR
      ProdOrderLine@1005 : Record 5406;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF NewProdOrderLine.Status = NewProdOrderLine.Status::Finished THEN
        EXIT;
      IF Blocked THEN
        EXIT;
      IF NewProdOrderLine."Line No." = 0 THEN
        IF NOT ProdOrderLine.GET(
             NewProdOrderLine.Status,
             NewProdOrderLine."Prod. Order No.",
             NewProdOrderLine."Line No.")
        THEN
          EXIT;

      NewProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewProdOrderLine."Reserved Qty. (Base)" <> 0;

      IF NewProdOrderLine."Due Date" = 0D THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Due Date",Text002)
        ELSE
          HasError := TRUE;

      IF NewProdOrderLine."Item No." <> OldProdOrderLine."Item No." THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Item No.",Text003)
        ELSE
          HasError := TRUE;
      IF NewProdOrderLine."Location Code" <> OldProdOrderLine."Location Code" THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Location Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewProdOrderLine."Variant Code" <> OldProdOrderLine."Variant Code" THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Variant Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewProdOrderLine."Line No." <> OldProdOrderLine."Line No." THEN
        HasError := TRUE;

      OnVerifyChangeOnBeforeHasError(NewProdOrderLine,OldProdOrderLine,HasError,ShowError);

      IF HasError THEN
        IF (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") OR
           FindReservEntry(NewProdOrderLine,TempReservEntry)
        THEN BEGIN
          IF NewProdOrderLine."Item No." <> OldProdOrderLine."Item No." THEN BEGIN
            ReservMgt.SetProdOrderLine(OldProdOrderLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetProdOrderLine(NewProdOrderLine);
          END ELSE BEGIN
            ReservMgt.SetProdOrderLine(NewProdOrderLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewProdOrderLine."Remaining Qty. (Base)");
        END;

      IF HasError OR (NewProdOrderLine."Due Date" <> OldProdOrderLine."Due Date")
      THEN BEGIN
        AssignForPlanning(NewProdOrderLine);
        IF (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") OR
           (NewProdOrderLine."Variant Code" <> OldProdOrderLine."Variant Code") OR
           (NewProdOrderLine."Location Code" <> OldProdOrderLine."Location Code")
        THEN
          AssignForPlanning(OldProdOrderLine);
      END;
    END;

    [External]
    PROCEDURE VerifyQuantity@5(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewProdOrderLine DO BEGIN
        IF Status = Status::Finished THEN
          EXIT;
        IF "Line No." = OldProdOrderLine."Line No." THEN
          IF "Quantity (Base)" = OldProdOrderLine."Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") THEN
            EXIT;
        ReservMgt.SetProdOrderLine(NewProdOrderLine);
        IF "Qty. per Unit of Measure" <> OldProdOrderLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        ReservMgt.DeleteReservEntries(FALSE,"Remaining Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Qty. (Base)");
        AssignForPlanning(NewProdOrderLine);
      END;
    END;

    [External]
    PROCEDURE UpdatePlanningFlexibility@2(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      IF FindReservEntry(ProdOrderLine,ReservEntry) THEN
        ReservEntry.MODIFYALL("Planning Flexibility",ProdOrderLine."Planning Flexibility");
    END;

    [External]
    PROCEDURE TransferPOLineToPOLine@31(VAR OldProdOrderLine@1000 : Record 5406;VAR NewProdOrderLine@1001 : Record 5406;TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record 337;
    BEGIN
      OnBeforeTransferPOLineToPOLine(OldProdOrderLine,NewProdOrderLine);

      IF NOT FindReservEntry(OldProdOrderLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewProdOrderLine.TestItemFields(OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code");

      OldReservEntry.TransferReservations(
        OldReservEntry,OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code",
        TransferAll,TransferQty,NewProdOrderLine."Qty. per Unit of Measure",
        DATABASE::"Prod. Order Line",NewProdOrderLine.Status,NewProdOrderLine."Prod. Order No.",'',NewProdOrderLine."Line No.",0);
    END;

    [External]
    PROCEDURE TransferPOLineToItemJnlLine@3(VAR OldProdOrderLine@1000 : Record 5406;VAR NewItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record 337;
      ItemTrackingFilterIsSet@1005 : Boolean;
      EndLoop@1006 : Boolean;
    BEGIN
      IF NOT FindReservEntry(OldProdOrderLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      // Handle Item Tracking on output:
      CLEAR(CreateReservEntry);
      IF NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::Output THEN
        IF NewItemJnlLine.TrackingExists THEN BEGIN
          // Try to match against Item Tracking on the prod. order line:
          OldReservEntry.SetTrackingFilterFromItemJnlLine(NewItemJnlLine);
          IF OldReservEntry.ISEMPTY THEN
            OldReservEntry.ClearTrackingFilter
          ELSE
            ItemTrackingFilterIsSet := TRUE;
        END;

      NewItemJnlLine.TestItemFields(OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN
        REPEAT
          IF NewItemJnlLine.TrackingExists THEN
            CreateReservEntry.SetNewSerialLotNo(NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.");
          OldReservEntry.TestItemFields(OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code");

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              NewItemJnlLine."Entry Type",NewItemJnlLine."Journal Template Name",NewItemJnlLine."Journal Batch Name",0,
              NewItemJnlLine."Line No.",NewItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          IF ReservEngineMgt.NEXTRecord(OldReservEntry) = 0 THEN
            IF ItemTrackingFilterIsSet THEN BEGIN
              OldReservEntry.ClearTrackingFilter;
              ItemTrackingFilterIsSet := FALSE;
              EndLoop := NOT ReservEngineMgt.InitRecordSet(OldReservEntry);
            END ELSE
              EndLoop := TRUE;

        UNTIL EndLoop OR (TransferQty = 0);
    END;

    [External]
    PROCEDURE DeleteLineConfirm@20(VAR ProdOrderLine@1000 : Record 5406) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
      ReservEntry2@1002 : Record 337;
      ConfirmMessage@1004 : Text[250];
      HasItemTracking@1003 : 'None,Line,Components,Line and Components';
    BEGIN
      WITH ReservEntry DO BEGIN
        FilterReservFor(ReservEntry,ProdOrderLine);
        SETFILTER("Item Tracking",'<> %1',"Item Tracking"::None);
        IF NOT ISEMPTY THEN
          HasItemTracking := HasItemTracking::Line;

        SETRANGE("Source Type",DATABASE::"Prod. Order Component");
        SETFILTER("Source Ref. No.",' > %1',0);
        IF NOT ISEMPTY THEN
          IF HasItemTracking = HasItemTracking::Line THEN
            HasItemTracking := HasItemTracking::"Line and Components"
          ELSE
            HasItemTracking := HasItemTracking::Components;

        IF HasItemTracking = HasItemTracking::None THEN
          EXIT(TRUE);

        CASE HasItemTracking OF
          HasItemTracking::Line:
            ConfirmMessage := Text006;
          HasItemTracking::Components:
            ConfirmMessage := Text007;
          HasItemTracking::"Line and Components":
            ConfirmMessage := Text008;
        END;

        IF NOT CONFIRM(ConfirmMessage,FALSE,ProdOrderLine.Status,ProdOrderLine.TABLECAPTION,ProdOrderLine."Line No.") THEN
          EXIT(FALSE);

        SETFILTER("Source Type",'%1|%2',DATABASE::"Prod. Order Line",DATABASE::"Prod. Order Component");
        SETRANGE("Source Ref. No.");
        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE DeleteLine@6(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH ProdOrderLine DO BEGIN
        ReservMgt.SetProdOrderLine(ProdOrderLine);
        ReservMgt.DeleteReservEntries(TRUE,0);
        OnDeleteLineOnAfterDeleteReservEntries(ProdOrderLine);
        ReservMgt.ClearActionMessageReferences;
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(ProdOrderLine);
      END;
    END;

    [External]
    PROCEDURE AssignForPlanning@7(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        IF Status = Status::Simulated THEN
          EXIT;
        IF "Item No." <> '' THEN
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code",WORKDATE);
      END;
    END;

    [External]
    PROCEDURE Block@8(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    [External]
    PROCEDURE CallItemTracking@14(VAR ProdOrderLine@1003 : Record 5406);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingDocMgt@1000 : Codeunit 6503;
      ItemTrackingLines@1002 : Page 6510;
    BEGIN
      IF ProdOrderLine.Status = ProdOrderLine.Status::Finished THEN
        ItemTrackingDocMgt.ShowItemTrackingForProdOrderComp(DATABASE::"Prod. Order Line",
          ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.",0)
      ELSE BEGIN
        ProdOrderLine.TESTFIELD("Item No.");
        TrackingSpecification.InitFromProdOrderLine(ProdOrderLine);
        ItemTrackingLines.SetSourceSpec(TrackingSpecification,ProdOrderLine."Due Date");
        ItemTrackingLines.SetInbound(ProdOrderLine.IsInbound);
        ItemTrackingLines.RUNMODAL;
      END;

      OnAfterCallItemTracking(ProdOrderLine);
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@11(ProdOrderLine@1000 : Record 5406);
    VAR
      ReservEntry@1001 : Record 337;
      CreateReservEntry@1002 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle after posting;
      ReservEntry.SetSourceFilter(DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",-1,TRUE);
      ReservEntry.SetSourceFilter2('',ProdOrderLine."Line No.");
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCallItemTracking@22(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferPOLineToPOLine@13(VAR OldProdOrderLine@1000 : Record 5406;VAR NewProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDeleteLineOnAfterDeleteReservEntries@23(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnVerifyChangeOnBeforeHasError@10(NewProdOrderLine@1000 : Record 5406;OldProdOrderLine@1001 : Record 5406;VAR HasError@1002 : Boolean;VAR ShowError@1003 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

