OBJECT Table 11012635 Project CF
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Job@1100527701 : Record 11072003;
               ProjectDevelopment@1100527702 : Record 11012915;
               ProjectCFMgt@1100527700 : Codeunit 11012901;
               ContinueLoop@1100527703 : Boolean;
             BEGIN
               Job.GET("Project No.");
               IF Job."Single/Main/Sub Project" = Job."Single/Main/Sub Project"::"Main Project" THEN
                 Job.FIELDERROR("Single/Main/Sub Project");

               IF "Prognosis Date" = 0D THEN BEGIN
                 "Prognosis Date" := ProjectCFMgt.DeterminePrognosisDate(99991231D,Job);
                 "Reference Date" := ProjectCFMgt.CalcReferenceDate("Prognosis Date");
               END;

               ProjectDevelopment.GET("Project No.");
               "Template Code" := ProjectDevelopment."Template Code";

               IF CheckMissingDatesInRubrics THEN
                 REPEAT
                   ContinueLoop := CONFIRM(Text000);
                   IF ContinueLoop THEN
                     RunCheckPage;
                   TempProjectCFDate.RESET;
                   TempProjectCFDate.DELETEALL;
                   IF ContinueLoop THEN
                     ContinueLoop := CheckMissingDatesInRubrics;
                 UNTIL (NOT ContinueLoop);

               //GetDataFromProject;
               TempProjectCFDate.RESET;
               TempProjectCFDate.DELETEALL;
             END;

    OnModify=BEGIN
               "Last Modified" := CREATEDATETIME(TODAY,TIME);
               UpdateProjectCashflowDates;
             END;

    OnDelete=VAR
               ProjectCFRubric@1100525000 : Record 11012637;
               ProjectCFDate@1100525004 : Record 11012630;
               ProjectCFParameter@1100525002 : Record 11012631;
               ProjectCFProduct@1100525001 : Record 11012633;
               ProjectCFRubricPhase@1100525005 : Record 11012636;
               ProjectCFProductPhase@1100525006 : Record 11012634;
             BEGIN
               IF NOT DeleteCompleteProject THEN
                 CheckFixed;

               ProjectCFRubric.SETRANGE("Record Type",ProjectCFRubric."Record Type"::"Cash Flow");
               ProjectCFRubric.SETRANGE("Project No.","Project No.");
               ProjectCFRubric.SETRANGE("Cash Flow","Cash Flow");
               IF ProjectCFRubric.FINDSET(TRUE, FALSE) THEN
                 REPEAT
                   ProjectCFRubric.SetDeleteCompleteProject;
                   ProjectCFRubric.DELETE(TRUE);
                 UNTIL ProjectCFRubric.NEXT = 0;

               ProjectCFDate.SETRANGE("Record Type",ProjectCFParameter."Record Type"::"Cash Flow");
               ProjectCFDate.SETRANGE("Project No.","Project No.");
               ProjectCFDate.SETRANGE("Cash Flow","Cash Flow");
               IF ProjectCFDate.FINDSET(TRUE, FALSE) THEN
                 REPEAT
                   ProjectCFDate.SetDeleteCompleteProject;
                   ProjectCFDate.DELETE(TRUE);
                 UNTIL ProjectCFDate.NEXT = 0;

               ProjectCFParameter.SETRANGE("Record Type",ProjectCFParameter."Record Type"::"Cash Flow");
               ProjectCFParameter.SETRANGE("Project No.","Project No.");
               ProjectCFParameter.SETRANGE("Cash Flow","Cash Flow");
               IF ProjectCFParameter.FINDSET(TRUE, FALSE) THEN
                 REPEAT
                   ProjectCFParameter.SetDeleteCompleteProject;
                   ProjectCFParameter.DELETE(TRUE);
                 UNTIL ProjectCFParameter.NEXT = 0;

               ProjectCFProduct.SETRANGE("Record Type",ProjectCFProduct."Record Type"::"Cash Flow");
               ProjectCFProduct.SETRANGE("Project No.","Project No.");
               ProjectCFProduct.SETRANGE("Cash Flow","Cash Flow");
               IF ProjectCFProduct.FINDSET(TRUE, FALSE) THEN
                 REPEAT
                   ProjectCFProduct.SetDeleteCompleteProject;
                   ProjectCFProduct.DELETE(TRUE);
                 UNTIL ProjectCFProduct.NEXT = 0;

               ProjectCFRubricPhase.SETRANGE("Record Type",ProjectCFRubricPhase."Record Type"::"Cash Flow");
               ProjectCFRubricPhase.SETRANGE("Project No.","Project No.");
               ProjectCFRubricPhase.SETRANGE("Cash Flow","Cash Flow");
               IF ProjectCFRubricPhase.FINDSET(TRUE, FALSE) THEN
                 REPEAT
                   ProjectCFRubricPhase.SetDeleteCompleteProject;
                   ProjectCFRubricPhase.DELETE(TRUE);
                 UNTIL ProjectCFRubricPhase.NEXT = 0;

               ProjectCFProductPhase.SETRANGE("Record Type",ProjectCFProductPhase."Record Type"::"Cash Flow");
               ProjectCFProductPhase.SETRANGE("Project No.","Project No.");
               ProjectCFProductPhase.SETRANGE("Cash Flow","Cash Flow");
               IF ProjectCFProductPhase.FINDSET(TRUE, FALSE) THEN
                 REPEAT
                   ProjectCFProductPhase.SetDeleteCompleteProject;
                   ProjectCFProductPhase.DELETE(TRUE);
                 UNTIL ProjectCFProductPhase.NEXT = 0;
             END;

    CaptionML=[ENU=Project Cash Flow;
               SVE=Projektets kassafl”de];
    LookupPageID=Page11127120;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation="Project Development";
                                                   CaptionML=[ENU=Project No.;
                                                              SVE=Projektnr] }
    { 20  ;   ;Cash Flow           ;DateTime      ;CaptionML=[ENU=Cash Flow;
                                                              SVE=Kassafl”de];
                                                   NotBlank=Yes }
    { 40  ;   ;Last Modified       ;DateTime      ;CaptionML=[ENU=Last Modified;
                                                              SVE=Žndrades senast] }
    { 50  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              SVE=Beskrivning] }
    { 60  ;   ;Reference Date      ;Date          ;CaptionML=[ENU=Reference Date;
                                                              SVE=Referensdatum] }
    { 70  ;   ;Prognosis Date      ;Date          ;CaptionML=[ENU=Prognosis Date;
                                                              SVE=Prognosdatum];
                                                   Editable=No }
    { 80  ;   ;Fixed               ;Boolean       ;CaptionML=[ENU=Fixed;
                                                              SVE=Fast] }
    { 90  ;   ;Revenues based on   ;Option        ;OnValidate=BEGIN
                                                                CheckInstallmentsAlreadyInvoiced;
                                                              END;

                                                   CaptionML=ENU=Revenues based on;
                                                   OptionCaptionML=ENU=Products,Installments;
                                                   OptionString=Products,Installments }
    { 110 ;   ;Template Code       ;Code10        ;TableRelation="Project CF Template";
                                                   CaptionML=[ENU=Template Code;
                                                              SVE=Mallkod] }
    { 120 ;   ;Expected Outcome    ;Option        ;CaptionML=ENU=Expected Outcome;
                                                   OptionCaptionML=ENU=Normal,Best Case,Worst Case;
                                                   OptionString=Normal,Best Case,Worst Case }
  }
  KEYS
  {
    {    ;Project No.,Cash Flow                   ;Clustered=Yes }
    {    ;Project No.,Reference Date,Expected Outcome }
    {    ;Cash Flow                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CopyFromProjectOrCF@1100527700 : 'From Project,From CF';
      InstallmentsInvoicedWarning@1100527701 : TextConst 'ENU=Please note some Installments are already invoiced for Project %1.';
      DeleteCompleteProject@1100527702 : Boolean;
      Text000@1100527703 : TextConst 'ENU=Not all the dates have been filled in, would you like to fill them?';
      TempProjectCFDate@1100527704 : TEMPORARY Record 11012630;

    PROCEDURE GetDataFromProject@1100527702();
    VAR
      ProjectCFParameter@1100525003 : Record 11012631;
      ProjectCFDate@1100525002 : Record 11012630;
      ProjectCFProduct@1100525000 : Record 11012633;
      ProjectCFRubricPhase@1100527700 : Record 11012636;
      ProjectCFProductPhase@1100527703 : Record 11012634;
      NewProjectCFParameter@1100525007 : Record 11012631;
      NewProjectCFDate@1100525006 : Record 11012630;
      NewProjectCFProduct@1100525004 : Record 11012633;
      NewProjectCFRubricPhase@1100527701 : Record 11012636;
      NewProjectCFProductPhase@1100527702 : Record 11012634;
    BEGIN
      ProjectCFParameter.SETRANGE("Record Type",ProjectCFParameter."Record Type"::Project);
      ProjectCFParameter.SETRANGE("Project No.","Project No.");
      ProjectCFParameter.SETRANGE("Cash Flow",0DT);
      IF ProjectCFParameter.FINDSET THEN
        REPEAT
          NewProjectCFParameter := ProjectCFParameter;
          NewProjectCFParameter."Cash Flow" := "Cash Flow";
          NewProjectCFParameter."Record Type" := NewProjectCFParameter."Record Type"::"Cash Flow";
          NewProjectCFParameter.INSERT;
        UNTIL ProjectCFParameter.NEXT = 0;

      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::Project);
      ProjectCFDate.SETRANGE("Project No.","Project No.");
      ProjectCFDate.SETRANGE("Cash Flow",0DT);
      IF ProjectCFDate.FINDSET THEN
        REPEAT
          NewProjectCFDate := ProjectCFDate;
          NewProjectCFDate."Cash Flow" := "Cash Flow";
          NewProjectCFDate."Record Type" := NewProjectCFDate."Record Type"::"Cash Flow";
          IF ProjectCFDate."Relate with" = ProjectCFDate."Relate with"::"Reference Date" THEN
            NewProjectCFDate.Date := Rec."Reference Date";
          NewProjectCFDate.INSERT;
        UNTIL ProjectCFDate.NEXT = 0;

      ProjectCFProduct.SETRANGE("Record Type",ProjectCFProduct."Record Type"::Project);
      ProjectCFProduct.SETRANGE("Project No.","Project No.");
      ProjectCFProduct.SETRANGE("Cash Flow",0DT);
      IF ProjectCFProduct.FINDSET THEN
        REPEAT
          NewProjectCFProduct := ProjectCFProduct;
          NewProjectCFProduct."Cash Flow" := "Cash Flow";
          NewProjectCFProduct."Record Type" := NewProjectCFProduct."Record Type"::"Cash Flow";
          NewProjectCFProduct.INSERT;
        UNTIL ProjectCFProduct.NEXT = 0;

      ProjectCFRubricPhase.SETRANGE("Record Type",ProjectCFRubricPhase."Record Type"::Project);
      ProjectCFRubricPhase.SETRANGE("Project No.","Project No.");
      ProjectCFRubricPhase.SETRANGE("Cash Flow",0DT);
      IF ProjectCFRubricPhase.FINDSET THEN
        REPEAT
          NewProjectCFRubricPhase := ProjectCFRubricPhase;
          NewProjectCFRubricPhase."Cash Flow" := "Cash Flow";
          NewProjectCFRubricPhase."Record Type" := NewProjectCFRubricPhase."Record Type"::"Cash Flow";
          NewProjectCFRubricPhase.INSERT;
        UNTIL ProjectCFRubricPhase.NEXT = 0;

      ProjectCFProductPhase.SETRANGE("Record Type",ProjectCFProductPhase."Record Type"::Project);
      ProjectCFProductPhase.SETRANGE("Project No.","Project No.");
      ProjectCFProductPhase.SETRANGE("Cash Flow",0DT);
      IF ProjectCFProductPhase.FINDSET THEN
        REPEAT
          NewProjectCFProductPhase := ProjectCFProductPhase;
          NewProjectCFProductPhase."Cash Flow" := "Cash Flow";
          NewProjectCFProductPhase."Record Type" := NewProjectCFProductPhase."Record Type"::"Cash Flow";
          NewProjectCFProductPhase.INSERT;
        UNTIL ProjectCFProductPhase.NEXT = 0;
    END;

    PROCEDURE GetDataFromCF@1100527703(SourceProjectCF@1100527702 : Record 11012635);
    VAR
      ProjectCFParameter@1100525003 : Record 11012631;
      ProjectCFDate@1100525002 : Record 11012630;
      ProjectCFProduct@1100525000 : Record 11012633;
      ProjectCFRubricPhase@1100527700 : Record 11012636;
      ProjectCFProductPhase@1100527703 : Record 11012634;
      NewProjectCFParameter@1100525007 : Record 11012631;
      NewProjectCFDate@1100525006 : Record 11012630;
      NewProjectCFProduct@1100525004 : Record 11012633;
      NewProjectCFRubricPhase@1100527701 : Record 11012636;
      NewProjectCFProductPhase@1100527704 : Record 11012634;
    BEGIN
      ProjectCFParameter.SETRANGE("Record Type",ProjectCFParameter."Record Type"::"Cash Flow");
      ProjectCFParameter.SETRANGE("Project No.",SourceProjectCF."Project No.");
      ProjectCFParameter.SETRANGE("Cash Flow",SourceProjectCF."Cash Flow");
      IF ProjectCFParameter.FINDSET THEN
        REPEAT
          NewProjectCFParameter := ProjectCFParameter;
          NewProjectCFParameter."Cash Flow" := "Cash Flow";
          NewProjectCFParameter."Record Type" := NewProjectCFParameter."Record Type"::"Cash Flow";
          NewProjectCFParameter.INSERT;
        UNTIL ProjectCFParameter.NEXT = 0;

      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::"Cash Flow");
      ProjectCFDate.SETRANGE("Project No.",SourceProjectCF."Project No.");
      ProjectCFDate.SETRANGE("Cash Flow",SourceProjectCF."Cash Flow");
      IF ProjectCFDate.FINDSET THEN
        REPEAT
          NewProjectCFDate := ProjectCFDate;
          NewProjectCFDate."Cash Flow" := "Cash Flow";
          NewProjectCFDate."Record Type" := NewProjectCFDate."Record Type"::"Cash Flow";
          IF ProjectCFDate."Relate with" = ProjectCFDate."Relate with"::"Reference Date" THEN
            NewProjectCFDate.Date := Rec."Reference Date";
          NewProjectCFDate.INSERT;
        UNTIL ProjectCFDate.NEXT = 0;

      ProjectCFProduct.SETRANGE("Record Type",ProjectCFProduct."Record Type"::"Cash Flow");
      ProjectCFProduct.SETRANGE("Project No.",SourceProjectCF."Project No.");
      ProjectCFProduct.SETRANGE("Cash Flow",SourceProjectCF."Cash Flow");
      IF ProjectCFProduct.FINDSET THEN
        REPEAT
          NewProjectCFProduct := ProjectCFProduct;
          NewProjectCFProduct."Cash Flow" := "Cash Flow";
          NewProjectCFProduct."Record Type" := NewProjectCFProduct."Record Type"::"Cash Flow";
          NewProjectCFProduct.INSERT;
        UNTIL ProjectCFProduct.NEXT = 0;

      ProjectCFRubricPhase.SETRANGE("Record Type",ProjectCFRubricPhase."Record Type"::"Cash Flow");
      ProjectCFRubricPhase.SETRANGE("Project No.",SourceProjectCF."Project No.");
      ProjectCFRubricPhase.SETRANGE("Cash Flow",SourceProjectCF."Cash Flow");
      IF ProjectCFRubricPhase.FINDSET THEN
        REPEAT
          NewProjectCFRubricPhase := ProjectCFRubricPhase;
          NewProjectCFRubricPhase."Cash Flow" := "Cash Flow";
          NewProjectCFRubricPhase."Record Type" := NewProjectCFRubricPhase."Record Type"::"Cash Flow";
          NewProjectCFRubricPhase.INSERT;
        UNTIL ProjectCFRubricPhase.NEXT = 0;

      ProjectCFProductPhase.SETRANGE("Record Type",ProjectCFProductPhase."Record Type"::"Cash Flow");
      ProjectCFProductPhase.SETRANGE("Project No.",SourceProjectCF."Project No.");
      ProjectCFProductPhase.SETRANGE("Cash Flow",SourceProjectCF."Cash Flow");
      IF ProjectCFProductPhase.FINDSET THEN
        REPEAT
          NewProjectCFProductPhase := ProjectCFProductPhase;
          NewProjectCFProductPhase."Cash Flow" := "Cash Flow";
          NewProjectCFProductPhase."Record Type" := NewProjectCFProductPhase."Record Type"::"Cash Flow";
          NewProjectCFProductPhase.INSERT;
        UNTIL ProjectCFProductPhase.NEXT = 0;
    END;

    PROCEDURE StartCardPage@1100527700();
    VAR
      ProjectCF@1100527700 : Record 11012635;
    BEGIN
      ProjectCF.SETRANGE("Project No.","Project No.");
      ProjectCF.SETRANGE("Cash Flow","Cash Flow");

      PAGE.RUN(PAGE::"Project CF",ProjectCF);
    END;

    LOCAL PROCEDURE UpdateProjectCashflowDates@1100527708();
    VAR
      ProjectCFDate@1100527700 : Record 11012630;
      OldDate@1100527701 : Date;
    BEGIN
      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::"Cash Flow");
      ProjectCFDate.SETRANGE("Project No.","Project No.");
      ProjectCFDate.SETRANGE("Cash Flow","Cash Flow");
      IF ProjectCFDate.FINDSET(TRUE,FALSE) THEN
        REPEAT
          OldDate := ProjectCFDate.Date;
          IF ProjectCFDate."Relate with" = ProjectCFDate."Relate with"::"Reference Date" THEN
            ProjectCFDate.Date := "Reference Date";
          IF ProjectCFDate.Date <> OldDate THEN
            ProjectCFDate.MODIFY;
        UNTIL ProjectCFDate.NEXT = 0;
    END;

    PROCEDURE SetCopyFromCF@1100527701();
    BEGIN
      CopyFromProjectOrCF := CopyFromProjectOrCF::"From CF";
    END;

    PROCEDURE CheckInstallmentsAlreadyInvoiced@1100527704();
    BEGIN
      IF GUIALLOWED AND ("Revenues based on" = "Revenues based on"::Products) THEN
        IF InstallmentsAlreadyInvoiced THEN
          MESSAGE(InstallmentsInvoicedWarning,"Project No.");
    END;

    LOCAL PROCEDURE InstallmentsAlreadyInvoiced@1100527707() : Boolean;
    VAR
      ProjectInstallment@1100527701 : Record 11012018;
      InstallmentsInvoiced@1100527700 : Boolean;
    BEGIN
      ProjectInstallment.SETRANGE("Project No.","Project No.");
      ProjectInstallment.SETAUTOCALCFIELDS("Invoiced Price (LCY)","Invoice in Process (LCY)","Credit Memo in Process (LCY)");
      IF ProjectInstallment.FINDSET THEN
        REPEAT
          InstallmentsInvoiced := (ProjectInstallment."Invoiced Price (LCY)" <> 0) OR (ProjectInstallment."Invoice in Process (LCY)" <> 0) OR (ProjectInstallment."Credit Memo in Process (LCY)" <> 0);
        UNTIL (ProjectInstallment.NEXT = 0) OR InstallmentsInvoiced;

      EXIT(InstallmentsInvoiced);
    END;

    PROCEDURE SetDeleteCompleteProject@1100527705();
    BEGIN
      DeleteCompleteProject := TRUE;
    END;

    PROCEDURE CheckFixed@1100527706();
    VAR
      ProjectCF@1100527700 : Record 11012635;
    BEGIN
      ProjectCF.GET("Project No.","Cash Flow");
      ProjectCF.TESTFIELD(Fixed,FALSE);
    END;

    PROCEDURE GetDateFilterPrognOrReference@1100527730() : Date;
    BEGIN
      IF "Prognosis Date" = 0D THEN
        EXIT("Reference Date")
      ELSE
        EXIT("Prognosis Date");
    END;

    PROCEDURE GetTemplateCode@1100527709(ProjectNo@1100527700 : Code[20];CashFlow@1100527701 : DateTime) TemplateCode : Code[10];
    VAR
      ProjectCF@1100527702 : Record 11012635;
      ProjectDevelopment@1100527703 : Record 11012915;
    BEGIN
      IF CashFlow <> 0DT THEN BEGIN
        IF ProjectCF.GET(ProjectNo,CashFlow) THEN
          EXIT(ProjectCF."Template Code");
      END;

      IF ProjectNo <> '' THEN
        IF ProjectDevelopment.GET(ProjectNo) THEN
          EXIT(ProjectDevelopment."Template Code");
    END;

    PROCEDURE ClearCashFlowData@1100527710();
    VAR
      ProjectCFParameter@1100527703 : Record 11012631;
      ProjectCFDate@1100527702 : Record 11012630;
      ProjectCFProduct@1100527701 : Record 11012633;
      ProjectCFRubricPhase@1100527700 : Record 11012636;
      ProjectCFProductPhase@1100527704 : Record 11012634;
    BEGIN
      ProjectCFProduct.SETRANGE("Cash Flow","Cash Flow");
      ProjectCFProduct.SETRANGE("Project No.","Project No.");
      ProjectCFProduct.SETRANGE("Record Type",ProjectCFProduct."Record Type"::"Cash Flow");
      ProjectCFProduct.SETRANGE("Template Code","Template Code");
      IF ProjectCFProduct.FINDSET THEN
        ProjectCFProduct.DELETEALL;

      ProjectCFParameter.SETRANGE("Cash Flow","Cash Flow");
      ProjectCFParameter.SETRANGE("Project No.","Project No.");
      ProjectCFParameter.SETRANGE("Record Type",ProjectCFParameter."Record Type"::"Cash Flow");
      ProjectCFParameter.SETRANGE("Template Code","Template Code");
      IF ProjectCFParameter.FINDSET THEN
        ProjectCFParameter.DELETEALL;

      ProjectCFDate.SETRANGE("Cash Flow","Cash Flow");
      ProjectCFDate.SETRANGE("Project No.","Project No.");
      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::"Cash Flow");
      ProjectCFDate.SETRANGE("Template Code","Template Code");
      IF ProjectCFDate.FINDSET THEN
        ProjectCFDate.DELETEALL;

      ProjectCFRubricPhase.SETRANGE("Cash Flow","Cash Flow");
      ProjectCFRubricPhase.SETRANGE("Project No.","Project No.");
      ProjectCFRubricPhase.SETRANGE("Record Type",ProjectCFRubricPhase."Record Type"::"Cash Flow");
      ProjectCFRubricPhase.SETRANGE("Template Code","Template Code");
      IF ProjectCFRubricPhase.FINDSET THEN
        ProjectCFRubricPhase.DELETEALL;

      ProjectCFProductPhase.SETRANGE("Cash Flow","Cash Flow");
      ProjectCFProductPhase.SETRANGE("Project No.","Project No.");
      ProjectCFProductPhase.SETRANGE("Record Type",ProjectCFProductPhase."Record Type"::"Cash Flow");
      ProjectCFProductPhase.SETRANGE("Template Code","Template Code");
      IF ProjectCFProductPhase.FINDSET THEN
        ProjectCFProductPhase.DELETEALL;
    END;

    LOCAL PROCEDURE CheckMissingDatesInRubrics@1100527732() MissingDate : Boolean;
    VAR
      ProjectCFParameter@1100527704 : Record 11012631;
      ProjectCFDate@1100527703 : Record 11012630;
      ProjectCFRubric@1100527705 : Record 11012637;
    BEGIN
      MissingDate := FALSE;
      ProjectCFDate.RESET;
      ProjectCFParameter.RESET;
      ProjectCFRubric.RESET;

      ProjectCFRubric.SETRANGE("Record Type",ProjectCFRubric."Record Type"::Project);
      ProjectCFRubric.SETRANGE("Project No.","Project No.");
      ProjectCFRubric.SETRANGE("Cash Flow",0DT);
      ProjectCFRubric.SETRANGE("Template Code","Template Code");
      IF ProjectCFRubric.FINDSET THEN BEGIN
        REPEAT
          IF ProjectCFParameter.GET(ProjectCFParameter."Record Type"::Project,ProjectCFRubric."Project No.",ProjectCFRubric."Cash Flow",ProjectCFRubric."Parameter Code",ProjectCFRubric."Template Code") THEN BEGIN
            ProjectCFDate.SETRANGE("Project No.",ProjectCFParameter."Project No.");
            ProjectCFDate.SETRANGE("Cash Flow",ProjectCFParameter."Cash Flow");
            ProjectCFDate.SETFILTER(Code,'%1|%2',ProjectCFParameter."From Date Code",ProjectCFParameter."Until Date Code");
            ProjectCFDate.SETRANGE("Template Code",ProjectCFParameter."Template Code");
            IF ProjectCFDate.FINDSET THEN
              REPEAT
                IF (ProjectCFDate.Date = 0D) AND (ProjectCFDate."Relate with" <> ProjectCFDate."Relate with"::"Reference Date") THEN BEGIN
                  IF NOT TempProjectCFDate.GET(ProjectCFDate."Record Type",ProjectCFDate."Project No.",ProjectCFDate."Cash Flow",ProjectCFDate.Code,ProjectCFDate."Template Code") THEN BEGIN
                    TempProjectCFDate := ProjectCFDate;
                    TempProjectCFDate.INSERT;
                    MissingDate := TRUE;
                  END;
                END;
              UNTIL ProjectCFDate.NEXT = 0;
          END;
        UNTIL ProjectCFRubric.NEXT = 0;
      END;

      EXIT(MissingDate);
    END;

    LOCAL PROCEDURE RunCheckPage@1100527721();
    VAR
      ProjectCFDate@1100527701 : Record 11012630;
    BEGIN
      ProjectCFDate.RESET;
      IF TempProjectCFDate.FINDFIRST THEN
        REPEAT
          IF ProjectCFDate.GET(TempProjectCFDate."Record Type"::Project,TempProjectCFDate."Project No.",TempProjectCFDate."Cash Flow",TempProjectCFDate.Code,TempProjectCFDate."Template Code") THEN
            ProjectCFDate.MARK(TRUE);
        UNTIL TempProjectCFDate.NEXT = 0;

      ProjectCFDate.MARKEDONLY(TRUE);
      IF ProjectCFDate.COUNT > 0 THEN
        PAGE.RUNMODAL(11130087,ProjectCFDate);
    END;

    BEGIN
    END.
  }
}

