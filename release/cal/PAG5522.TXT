OBJECT Page 5522 Order Planning
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Order Planning;
               NOR=Ordreplanlegging;
               SVE=Orderplanering];
    ApplicationArea=#Planning;
    InsertAllowed=No;
    SourceTable=Table246;
    PageType=Worksheet;
    UsageCategory=Tasks;
    AdditionalSearchTermsML=[ENU=supply planning,mrp,material requirements planning,mps,master production schedule;
                             NOR=forsyningsplanlegging,mrp,planlegging av materialbehov,mps,hovedproduksjonsplan;
                             SVE=leveransplanering,nettobehov,materialbehovsplanering,prod.program,produktionsplan];
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Line,Item,Item Availability by;
                                NOR=Ny,Prosess,Rapport,Linje,Vare,Varedisposisjon av;
                                SVE=Ny,Process,Rapport,Rad,Artikel,Artikeldisposition per];
    OnInit=BEGIN
             DemandOrderFilterCtrlEnable := TRUE;
             SupplyFromEditable := TRUE;
             ReserveEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 IF NOT MfgUserTempl.GET(USERID) THEN BEGIN
                   MfgUserTempl.INIT;
                   MfgUserTempl."User ID" := USERID;
                   MfgUserTempl."Make Orders" := MfgUserTempl."Make Orders"::"The Active Order";
                   MfgUserTempl."Create Purchase Order" := MfgUserTempl."Create Purchase Order"::"Make Purch. Orders";
                   MfgUserTempl."Create Production Order" := MfgUserTempl."Create Production Order"::"Firm Planned";
                   MfgUserTempl."Create Transfer Order" := MfgUserTempl."Create Transfer Order"::"Make Trans. Orders";
                   MfgUserTempl."Create Assembly Order" := MfgUserTempl."Create Assembly Order"::"Make Assembly Orders";
                   MfgUserTempl.INSERT;
                 END;

                 InitTempRec;
               END;

    OnAfterGetRecord=BEGIN
                       DescriptionIndent := 0;
                       StatusText := FORMAT(Status);
                       StatusTextOnFormat(StatusText);
                       DemandTypeText := FORMAT("Demand Type");
                       DemandTypeTextOnFormat(DemandTypeText);
                       DemandSubtypeText := FORMAT("Demand Subtype");
                       DemandSubtypeTextOnFormat(DemandSubtypeText);
                       DemandOrderNoOnFormat;
                       DescriptionOnFormat;
                       DemandQuantityOnFormat;
                       DemandQtyAvailableOnFormat;
                       ReplenishmentSystemOnFormat;
                       QuantityOnFormat;
                       ReserveOnFormat;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    OnModifyRecord=VAR
                     ReqLine@1000 : Record 246;
                   BEGIN
                     ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.");
                     ReqLine.TRANSFERFIELDS(Rec,FALSE);
                     ReqLine.MODIFY(TRUE);
                   END;

    OnDeleteRecord=VAR
                     xReqLine@1000 : Record 246;
                   BEGIN
                     xReqLine := Rec;
                     WHILE (NEXT <> 0) AND (Level > xReqLine.Level) DO
                       DELETE(TRUE);
                     Rec := xReqLine;
                     xReqLine.DELETE(TRUE);
                     DELETE;
                     EXIT(FALSE);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           IF ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN BEGIN
                             Rec := ReqLine;
                             MODIFY
                           END ELSE
                             IF GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN
                               DELETE;

                           UpdateSupplyFrom;
                           CalcItemAvail;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 99      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 NOR=&Linje;
                                 SVE=Ra&d];
                      Image=Line }
      { 18      ;2   ;Action    ;
                      CaptionML=[ENU=Show Document;
                                 NOR=Vis dokument;
                                 SVE=Visa dokument];
                      ToolTipML=[ENU=Open the document that the selected line exists on.;
                                 NOR=èpne dokumentet som den valgte linjen finnes i.;
                                 SVE=ôppna dokumentet som den valda raden finns i.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=View;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ShowDemandOrder;
                               END;
                                }
      { 63      ;2   ;Separator  }
      { 42      ;2   ;Action    ;
                      CaptionML=[ENU=Components;
                                 NOR=Komponenter;
                                 SVE=Komponenter];
                      ToolTipML=[ENU=View or edit the production order components of the parent item on the line.;
                                 NOR=Vis eller rediger produksjonsordrekomponentene for den overordnede varen pÜ linjen.;
                                 SVE=Visa eller redigera produktionsorderkomponenter fîr den îverordnade artikeln pÜ raden.];
                      ApplicationArea=#Planning;
                      RunObject=Page 99000862;
                      RunPageLink=Worksheet Template Name=FIELD(Worksheet Template Name),
                                  Worksheet Batch Name=FIELD(Journal Batch Name),
                                  Worksheet Line No.=FIELD(Line No.);
                      Promoted=Yes;
                      Image=Components;
                      PromotedCategory=Category4 }
      { 47      ;2   ;Action    ;
                      CaptionML=[ENU=Ro&uting;
                                 NOR=R&ute;
                                 SVE=Oper.&fîljd];
                      ToolTipML=[ENU=View or edit the operations list of the parent item on the line.;
                                 NOR=Vis eller rediger listen over operasjoner for den overordnede varen pÜ linjen.;
                                 SVE=Visa eller redigera operationslistan fîr den îverordnade artikeln pÜ raden.];
                      ApplicationArea=#Planning;
                      RunObject=Page 99000863;
                      RunPageLink=Worksheet Template Name=FIELD(Worksheet Template Name),
                                  Worksheet Batch Name=FIELD(Journal Batch Name),
                                  Worksheet Line No.=FIELD(Line No.);
                      Promoted=Yes;
                      Image=Route;
                      PromotedCategory=Category4 }
      { 101     ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 NOR=Dimensjoner;
                                 SVE=Dimensioner];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 NOR=Vis eller rediger dimensjoner, for eksempel omrÜde, prosjekt eller avdeling, som du kan tilordne til salgs- og kjõpsdokumenter for Ü distribuere kostnader og analysere transaksjonshistorikk.;
                                 SVE=Visa eller redigera dimensioner, till exempel omrÜde, projekt eller avdelning, som du kan tilldela fîrsÑljnings- och inkîpsdokument fîr att fîrdela kostnader och analysera transaktionshistorik.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Image=Dimensions;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ShowDimensions;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 100     ;1   ;ActionGroup;
                      CaptionML=[ENU=&Item;
                                 NOR=V&are;
                                 SVE=&Artikel];
                      Image=Item }
      { 19      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 NOR=Kort;
                                 SVE=Kort];
                      ToolTipML=[ENU=View or change detailed information about the record on the document or journal line.;
                                 NOR=Vis eller endre detaljert informasjon om posten i dokumentet eller pÜ kladdelinjen.;
                                 SVE=Visa eller Ñndra detaljerad information om posten pÜ dokument- eller journalraden.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=EditLines;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 Item@1000 : Record 27;
                               BEGIN
                                 TESTFIELD(Type,Type::Item);
                                 TESTFIELD("No.");
                                 Item."No." := "No.";
                                 PAGE.RUNMODAL(PAGE::"Item Card",Item);
                               END;
                                }
      { 105     ;2   ;ActionGroup;
                      CaptionML=[ENU=&Item Availability by;
                                 NOR=&Varetilgjengelighet per;
                                 SVE=Art&ikeldisp. per];
                      Image=ItemAvailability }
      { 3       ;3   ;Action    ;
                      CaptionML=[ENU=Event;
                                 NOR=Hendelse;
                                 SVE=UtstÑllning];
                      ToolTipML=[ENU=View how the actual and the projected available balance of an item will develop over time according to supply and demand events.;
                                 NOR=Vis hvordan den aktuelle og forventede disponible beholdningen for en vare vil utvikle seg over tid i henhold til tilbud og etterspõrselshendelser.;
                                 SVE=Visa hur aktuell och planerad lagerutveckling îver tiden fîr en artikel utvecklas med tiden enligt tillgÜngs- och efterfrÜgehÑndelser.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=Event;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByEvent);
                               END;
                                }
      { 106     ;3   ;Action    ;
                      CaptionML=[ENU=Period;
                                 NOR=Periode;
                                 SVE=Period];
                      ToolTipML=[ENU=View the projected quantity of the item over time according to time periods, such as day, week, or month.;
                                 NOR=Vis beregnet antall av varen over tid i henhold til tidsperioder, for eksempel dag, uke eller mÜned.;
                                 SVE=Visa planerat antal fîr artikeln îver tiden enligt tidsperioder, sÜsom dag, vecka eller mÜnad.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=Period;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByPeriod);
                               END;
                                }
      { 107     ;3   ;Action    ;
                      CaptionML=[ENU=Variant;
                                 NOR=Variant;
                                 SVE=Variant];
                      ToolTipML=[ENU=View or edit the item's variants. Instead of setting up each color of an item as a separate item, you can set up the various colors as variants of the item.;
                                 NOR=Vis eller rediger varens varianter. Du kan definere de ulike fargene som varianter av varen i stedet for Ü definere hver variant som en egen vare.;
                                 SVE=Visa eller redigera artikelns varianter. I stÑllet fîr att registrera varje fÑrg pÜ en artikel som en separat artikel, kan du registrera de olika fÑrgerna som varianter av artikeln.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=ItemVariant;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByVariant);
                               END;
                                }
      { 108     ;3   ;Action    ;
                      AccessByPermission=TableData 14=R;
                      CaptionML=[ENU=Location;
                                 NOR=Lokasjon;
                                 SVE=LagerstÑlle];
                      ToolTipML=[ENU=View the actual and projected quantity of the item per location.;
                                 NOR=Vis faktisk og beregnet antall av varen per lokasjon.;
                                 SVE=Visa aktuellt och planerat antal artiklar per lagerstÑlle.];
                      ApplicationArea=#Location;
                      Promoted=Yes;
                      Image=Warehouse;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByLocation);
                               END;
                                }
      { 5       ;3   ;Action    ;
                      CaptionML=[ENU=BOM Level;
                                 NOR=StykklistenivÜ;
                                 SVE=StrukturnivÜ];
                      ToolTipML=[ENU=View availability figures for items on bills of materials that show how many units of a parent item you can make based on the availability of child items.;
                                 NOR=Vis tilgjengelighetstall for stykklistevarer som angir hvor mange enheter av en overordnet vare du kan lage basert pÜ tilgjengeligheten av underordnede varer.;
                                 SVE=Visa tillgÑnglighetssiffror fîr artiklar i strukturer som visar hur mÜnga enheter av en îverordnad artikel som gÜr att tillverka baserat pÜ underartiklarnas tillgÑnglighet.];
                      ApplicationArea=#Assembly;
                      Promoted=Yes;
                      Image=BOMLevel;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByBOM);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 39      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 NOR=F&unksjoner;
                                 SVE=Fu&nktioner];
                      Image=Action }
      { 37      ;2   ;Action    ;
                      Name=CalculatePlan;
                      CaptionML=[ENU=&Calculate Plan;
                                 NOR=&Beregn plan;
                                 SVE=&Skapa inkîpsfîrslag];
                      ToolTipML=[ENU=Start the calculation of supply orders needed to fulfill the specified demand. Remember that each time, you choose the Calculate Plan action, only one product level is planned.;
                                 NOR=Start beregningen av forsyningsordrer som kreves for Ü dekke den angitte etterspõrselen. Husk at hver gang du velger handlingen Beregn plan, blir bare ett produktnivÜ planlagt.;
                                 SVE=Starta berÑkningen av de leveransorder som behîvs fîr att uppfylla det angivna behovet. TÑnk pÜ att varje gÜng du vÑljer ÜtgÑrden Skapa inkîpsfîrslag planeras endast en produktnivÜ.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=CalculatePlan;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalcPlan;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 48      ;2   ;Separator  }
      { 66      ;2   ;Action    ;
                      CaptionML=[ENU=&Reserve;
                                 NOR=&Reserver;
                                 SVE=&Reservera];
                      ToolTipML=[ENU=Reserve the quantity that is required on the document line that you opened this window for.;
                                 NOR=Reserver mengden som kreves pÜ dokumentlinjen som du Üpnet dette vinduet for.;
                                 SVE=Reservera antalet som krÑvs pÜ dokumentraden som du har îppnat detta fînster fîr.];
                      ApplicationArea=#Reservation;
                      Image=Reserve;
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 ShowReservation;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=OrderTracking;
                      CaptionML=[ENU=Order &Tracking;
                                 NOR=&Sporing;
                                 SVE=Order&spÜrning];
                      ToolTipML=[ENU=Tracks the connection of a supply to its corresponding demand. This can help you find the original demand that created a specific production order or purchase order.;
                                 NOR=Sporer forbindelsen mellom en forsyning og tilhõrende behov. Dette bidrar til Ü finne det opprinnelige behovet som opprettet en bestemt produksjonsordre eller bestilling.;
                                 SVE=SpÜrar anslutningen fîr en tillgÜng till dess motsvarande efterfrÜgan. Det hÑr hjÑlper dig att hitta den ursprungliga tillgÜngen som skapade en viss produktionsorder eller inkîpsorder.];
                      ApplicationArea=#Planning;
                      Image=OrderTracking;
                      OnAction=VAR
                                 TrackingForm@1001 : Page 99000822;
                               BEGIN
                                 TrackingForm.SetReqLine(Rec);
                                 TrackingForm.RUNMODAL;
                               END;
                                }
      { 77      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Refresh &Planning Line;
                                 NOR=F&orny planleggingslinje;
                                 SVE=&Uppdatera planeringsrad];
                      ToolTipML=[ENU=Update the planning components and the routing lines for the selected planning line with any changes.;
                                 NOR=Oppdater planleggingskomponentene og rutelinjene for den valgte planleggingslinjen med eventuelle endringer.;
                                 SVE=Uppdatera planeringskomponenter och operationsfîljdsrader fîr den aktuella planeringsraden med Ñndringar.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=RefreshPlanningLine;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReqLine2@1000 : Record 246;
                               BEGIN
                                 ReqLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
                                 ReqLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 ReqLine2.SETRANGE("Line No.","Line No.");

                                 REPORT.RUNMODAL(REPORT::"Refresh Planning Demand",TRUE,FALSE,ReqLine2);
                               END;
                                }
      { 36      ;2   ;Separator  }
      { 55      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Make &Orders;
                                 NOR=&Lag bestillinger;
                                 SVE=Skapa &order];
                      ToolTipML=[ENU=Create the suggested supply orders according to options that you specify in a new window.;
                                 NOR=Opprett foreslÜtte forsyningsordrer i henhold til alternativer du angir i et nytt vindu.;
                                 SVE=Skapa fîreslagna leveransorder enligt alternativen som du anger i ett nytt fînster.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NewOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MakeSupplyOrders@1001 : Codeunit 5521;
                               BEGIN
                                 MakeSupplyOrders.SetManufUserTemplate(MfgUserTempl);
                                 MakeSupplyOrders.RUN(Rec);

                                 IF MakeSupplyOrders.ActionMsgCarriedOut THEN BEGIN
                                   RefreshTempTable;
                                   SetRecFilters;
                                   CurrPage.UPDATE(FALSE);
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 78  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=AllmÑnt] }

    { 80  ;2   ;Field     ;
                Name=DemandOrderFilterCtrl;
                CaptionML=[ENU=Show Demand as;
                           NOR=Vis behov som;
                           SVE=Visa behov som];
                ToolTipML=[ENU=Specifies a filter to define which demand types you want to display in the Order Planning window.;
                           NOR=Angir et filter for Ü definere hvilke behovstyper du vil vise i vinduet Ordreplanlegging.;
                           SVE=Anger ett filter fîr att definiera vilka behovstyper som ska visas i fînstret Orderplanering.];
                OptionCaptionML=[ENU=All Demand,Production Demand,Sales Demand,Service Demand,Job Demand,Assembly Demand;
                                 NOR=Alle behov,Produksjonsbehov,Salgsbehov,Servicebehov,Prosjektbehov,Monteringsbehov;
                                 SVE=Alla behov,Produktionsbehov,FîrsÑljningsbehov,Servicebehov,Projektbehov,Monteringsbehov];
                ApplicationArea=#Planning;
                SourceExpr=DemandOrderFilter;
                Enabled=DemandOrderFilterCtrlEnable;
                OnValidate=BEGIN
                             DemandOrderFilterOnAfterValida;
                           END;
                            }

    { 1   ;1   ;Group     ;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the demanded date of the demand that the planning line represents.;
                           NOR=Angir behovsdatoen for behovet som planleggingslinjen representerer.;
                           SVE=Anger efterfrÜgedatumet fîr efterfrÜgan som visas pÜ planeringsraden.];
                ApplicationArea=#Planning;
                SourceExpr="Demand Date" }

    { 72  ;2   ;Field     ;
                ApplicationArea=#Planning;
                SourceExpr=StatusText;
                CaptionClass=FIELDCAPTION(Status);
                Editable=FALSE;
                HideValue=StatusHideValue }

    { 43  ;2   ;Field     ;
                Lookup=No;
                ApplicationArea=#Planning;
                SourceExpr=DemandTypeText;
                CaptionClass=FIELDCAPTION("Demand Type");
                Editable=FALSE;
                HideValue=DemandTypeHideValue;
                Style=Strong;
                StyleExpr=DemandTypeEmphasize }

    { 46  ;2   ;Field     ;
                ApplicationArea=#Planning;
                SourceExpr=DemandSubtypeText;
                CaptionClass=FIELDCAPTION("Demand Subtype");
                Visible=FALSE;
                Editable=FALSE }

    { 57  ;2   ;Field     ;
                CaptionML=[ENU=Order No.;
                           NOR=Ordrenr.;
                           SVE=Ordernr];
                ToolTipML=[ENU=Specifies the number of the demanded order that represents the planning line.;
                           NOR=Angir antall for behovsordren som representerer planleggingslinjen.;
                           SVE=Anger numret pÜ efterfrÜgeordern som visas pÜ planeringsraden.];
                ApplicationArea=#Planning;
                SourceExpr="Demand Order No.";
                HideValue=DemandOrderNoHideValue;
                Style=Strong;
                StyleExpr=DemandOrderNoEmphasize }

    { 87  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the line number of the demand, such as a sales order line.;
                           NOR=Angir linjenummeret for behovet, for eksempel en salgsordrelinje.;
                           SVE=Anger radnumret fîr efterfrÜgan, t.ex. en fîrsÑljningsorderrad.];
                ApplicationArea=#Planning;
                SourceExpr="Demand Line No.";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Item No.;
                           NOR=Varenr.;
                           SVE=Artikelnr];
                ToolTipML=[ENU=Specifies the number of the item with insufficient availability and must be planned.;
                           NOR=Angir antallet av varen som har utilstrekkelig tilgjengelighet, og som mÜ planlegges.;
                           SVE=Anger numret pÜ artikeln vars tillgÑnglighet inte rÑcker och som mÜste planeras.];
                ApplicationArea=#Planning;
                SourceExpr="No.";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the variant of the item on the line.;
                           NOR=Angir varianten for varen pÜ linjen.;
                           SVE=Anger varianten av artikeln pÜ raden.];
                ApplicationArea=#Planning;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a code for an inventory location where the items that are being ordered will be registered.;
                           NOR=Angir en kode for lagerlokasjonen som de bestilte varene skal registreres pÜ.;
                           SVE=Anger en kod fîr ett lagerstÑlle dÑr artiklarna som bestÑlls registreras.];
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies text that describes the entry.;
                           NOR=Angir en tekst som beskriver posten.;
                           SVE=Anger text som beskriver transaktionen.];
                ApplicationArea=#Planning;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=DescriptionEmphasize }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity on the demand that the planning line represents.;
                           NOR=Angir antallet for behovet som planleggingslinjen representerer.;
                           SVE=Anger det efterfrÜgade antalet som planeringsraden representerar.];
                ApplicationArea=#Planning;
                SourceExpr="Demand Quantity";
                Visible=FALSE;
                HideValue=DemandQuantityHideValue }

    { 95  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how many of the demand quantity are available.;
                           NOR=Angir hvor mye av behovsmengden som er tilgjengelig.;
                           SVE=Anger hur stort antal av det efterfrÜgade antalet som Ñr tillgÑngligt.];
                ApplicationArea=#Planning;
                SourceExpr="Demand Qty. Available";
                Visible=FALSE;
                HideValue=DemandQtyAvailableHideValue }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the demand quantity that is not available and must be ordered to meet the demand represented on the planning line.;
                           NOR=Angir behovsmengden som ikke er tilgjengelig, og som mÜ bestilles for Ü dekke behovet som representeres pÜ planleggingslinjen.;
                           SVE=Anger det efterfrÜgade antal som inte Ñr tillgÑngligt och som mÜste bestÑllas fîr att uppfylla efterfrÜgan som visas pÜ planeringsraden.];
                ApplicationArea=#Planning;
                SourceExpr="Needed Quantity";
                Visible=TRUE }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies which kind of order to use to create replenishment orders and order proposals.;
                           NOR=Angir hvilken type ordre du vil bruke til Ü opprette etterfyllingsordrer og ordreforslag.;
                           SVE=Anger vilken typ av order som ska anvÑndas fîr att skapa Üteranskaffningsorder och orderfîrslag.];
                ApplicationArea=#Planning;
                SourceExpr="Replenishment System";
                HideValue=ReplenishmentSystemHideValue;
                OnValidate=BEGIN
                             ReplenishmentSystemOnAfterVali;
                           END;
                            }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a value, according to the selected replenishment system, before a supply order can be created for the line.;
                           NOR=Angir en verdi i henhold til det valgte etterfyllingssystemet fõr en forsyningsordre kan opprettes for linjen.;
                           SVE=Anger ett vÑrde som îverensstÑmmer med det valda Üteranskaffningssystemet innan en leveransorder kan skapas fîr raden.];
                ApplicationArea=#Planning;
                SourceExpr="Supply From";
                Editable=SupplyFromEditable }

    { 62  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the item on the planning line has a setting of Always in the Reserve field on its item card.;
                           NOR=Angir om varen pÜ planleggingslinjen har innstillingen Alltid i feltet Reserver pÜ varekortet.;
                           SVE=Anger om instÑllningen Alltid har angetts i fÑltet Reservera pÜ artikelkortet fîr artikeln pÜ planeringsraden.];
                ApplicationArea=#Reservation;
                SourceExpr=Reserve;
                Editable=ReserveEditable }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Qty. to Order;
                           NOR=Antall for bestilling;
                           SVE=Antal i order];
                ToolTipML=[ENU=Specifies the quantity that will be ordered on the supply order, such as purchase or assembly, that you can create from the planning line.;
                           NOR=Angir antallet som skal bestilles pÜ forsyningsordren, for eksempel kjõp eller montering, som du kan opprette fra planleggingslinjen.;
                           SVE=Anger antalet som bestÑlls pÜ leveransordern, t.ex. inkîp eller montering, som du kan skapa frÜn planeringsraden.];
                ApplicationArea=#Assembly;
                SourceExpr=Quantity;
                HideValue=QuantityHideValue }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                           NOR=Angir hvordan hver enhet av varen eller ressursen mÜles, for eksempel i stykker eller timer. Verdien i feltet Lagerenhet pÜ vare- eller ressurskortet settes inn som standard.;
                           SVE=Anger hur varje enhet av artikeln eller resursen mÑts, till exempel i stycken eller timmar. Som standard infogas vÑrdet i fÑltet Basenhet pÜ artikel- eller resurskortet.];
                ApplicationArea=#Planning;
                SourceExpr="Unit of Measure Code";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the related order was created.;
                           NOR=Angir datoen da den relaterte ordren ble opprettet.;
                           SVE=Anger datumet nÑr den relaterade ordern skapades.];
                ApplicationArea=#Planning;
                SourceExpr="Order Date" }

    { 74  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the starting date of the manufacturing process, if the planned supply is a production order.;
                           NOR=Angir startdatoen for produksjonsprosessen hvis den planlagte forsyningen er en produksjonsordre.;
                           SVE=Anger startdatumet fîr produktionsprocessen om den planerade leveransen Ñr en produktionsorder.];
                ApplicationArea=#Planning;
                SourceExpr="Starting Date";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when you can expect to receive the items.;
                           NOR=Angir datoen da du kan forvente Ü motta varene.;
                           SVE=Anger det datum dÜ du kan fîrvÑnta dig att ta emot artiklarna.];
                ApplicationArea=#Planning;
                SourceExpr="Due Date" }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the cost of one unit of the item or resource on the line.;
                           NOR=Angir kostnaden for Çn enhet for varen eller ressursen pÜ linjen.;
                           SVE=Anger kostnaden fîr en enhet av artikeln eller resursen pÜ raden.];
                ApplicationArea=#Planning;
                SourceExpr="Unit Cost";
                Visible=FALSE }

    { 53  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the cost of one unit of the selected item or resource.;
                           NOR=Angir den kostnaden for Çn enhet av den valgte varen eller ressursen.;
                           SVE=Anger styckkostnaden fîr den valda artikeln eller resursen.];
                ApplicationArea=#Planning;
                SourceExpr="Direct Unit Cost";
                Visible=FALSE }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for the requisition lines.;
                           NOR=Angir valutakoden for forslagslinjene.;
                           SVE=Anger valutakoden fîr rekvisitionsraderna.];
                ApplicationArea=#Planning;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies which purchaser is assigned to the vendor.;
                           NOR=Angir hvilken innkjõper som er knyttet til leverandõren.;
                           SVE=Anger vilken inkîpare som Ñr kopplad till leverantîren.];
                ApplicationArea=#Planning;
                SourceExpr="Purchasing Code";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           NOR=Angir koden til Snarveisdimensjon 1, som er Çn av to globale dimensjonskoder som du har definert i vinduet Finansoppsett.;
                           SVE=Anger koden fîr GenvÑg dimension 1, som Ñr en av tvÜ globala dimensionskoder som du stÑller in i fînstret RedovisningsinstÑllningar.];
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE;
                OnValidate=BEGIN
                             //**4PS Generated Code. Do Not Change.sn03
                             DPA_ChkDepartmentCodeAllowed(DPA_IsHardFilter);
                             //**4PS Generated Code.en03
                           END;
                            }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           NOR=Angir koden til Snarveisdimensjon 2, som er Çn av to globale dimensjonskoder som du har definert i vinduet Finansoppsett.;
                           SVE=Anger koden fîr GenvÑg dimension 2, som Ñr en av tvÜ globala dimensionskoder som du stÑller in i fînstret RedovisningsinstÑllningar.];
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 38  ;1   ;Group      }

    { 1902204901;2;Group  ;
                GroupType=FixedLayout }

    { 1901313001;3;Group  ;
                CaptionML=[ENU=Available for Transfer;
                           NOR=Tilgjengelig for overfõring;
                           SVE=Disponibelt fîr îverfîring] }

    { 60  ;4   ;Field     ;
                Name=AvailableForTransfer;
                CaptionML=[ENU=Available For Transfer;
                           NOR=Tilgjengelig for overfõring;
                           SVE=Disponibelt fîr îverfîring];
                ToolTipML=[ENU=Specifies the quantity of the item on the active planning line, that is available on another location than the one defined.;
                           NOR=Angir antallet av varen pÜ den aktive planleggingslinjen som er tilgjengelig pÜ en annen lokasjon enn den som er angitt.;
                           SVE=Anger antalet av artikeln pÜ den aktiva planeringsraden som Ñr tillgÑngligt pÜ ett annat lagerstÑlle Ñn det som har angetts.];
                ApplicationArea=#Location;
                DecimalPlaces=0:5;
                SourceExpr=QtyOnOtherLocations;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               OrderPlanningMgt.InsertAltSupplyLocation(Rec);
                             END;
                              }

    { 1901741901;3;Group  ;
                CaptionML=[ENU=Substitutes Exist;
                           NOR=Erstatning finnes;
                           SVE=ErsÑttningar finns] }

    { 58  ;4   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Substitutes Exist;
                           NOR=Erstatning finnes;
                           SVE=ErsÑttningar finns];
                ToolTipML=[ENU=Specifies if a substitute item exists for the component on the planning line.;
                           NOR=Angir om en erstatningsvare finnes for komponenten pÜ planleggingslinjen.;
                           SVE=Anger om det finns en ersÑttningsartikel fîr komponenten pÜ planeringsraden.];
                ApplicationArea=#Planning;
                SourceExpr=SubstitionAvailable;
                Editable=FALSE;
                OnAssistEdit=VAR
                               ReqLine2@1001 : Record 246;
                               xReqLine@1002 : Record 246;
                               ReqLine3@1003 : Record 246;
                             BEGIN
                               ReqLine3 := Rec;
                               OrderPlanningMgt.InsertAltSupplySubstitution(ReqLine3);
                               Rec := ReqLine3;
                               MODIFY;

                               IF OrderPlanningMgt.DeleteLine THEN BEGIN
                                 xReqLine := Rec;
                                 ReqLine2.SETCURRENTKEY("User ID","Demand Type","Demand Subtype","Demand Order No.");
                                 ReqLine2.SETRANGE("User ID",USERID);
                                 ReqLine2.SETRANGE("Demand Type","Demand Type");
                                 ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
                                 ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
                                 ReqLine2.SETRANGE(Level,Level,Level + 1);
                                 ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                                 IF NOT ReqLine2.FINDFIRST THEN BEGIN // No other children
                                   ReqLine2.SETRANGE("Line No.");
                                   ReqLine2.SETRANGE(Level,0);
                                   IF ReqLine2.FINDFIRST THEN BEGIN // Find and delete parent
                                     Rec := ReqLine2;
                                     DELETE;
                                   END;
                                 END;

                                 Rec := xReqLine;
                                 DELETE;
                                 CurrPage.UPDATE(FALSE);
                               END ELSE
                                 CurrPage.UPDATE(TRUE);
                             END;
                              }

    { 1901741801;3;Group  ;
                CaptionML=[ENU=Quantity Available;
                           NOR=Tilgjengelig antall;
                           SVE=Disponibelt antal] }

    { 68  ;4   ;Field     ;
                Name=QuantityAvailable;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Quantity Available;
                           NOR=Tilgjengelig antall;
                           SVE=Disponibelt antal];
                ToolTipML=[ENU=Specifies the total availability of the item on the active planning line, irrespective of quantities calculated for the line.;
                           NOR=Angir samlet tilgjengelighet av varen pÜ den aktive planleggingslinjen, uavhengig av antallene som er beregnet for linjen.;
                           SVE=Anger det totala tillgÑngliga antalet av artikeln pÜ den aktiva planeringsraden, oavsett vilket antal som har berÑknats fîr raden.];
                ApplicationArea=#Planning;
                DecimalPlaces=0:5;
                SourceExpr=QtyATP;
                Editable=FALSE }

    { 1901312901;3;Group  ;
                CaptionML=[ENU=Earliest Date Available;
                           NOR=Tidligste tilgjengelige dato;
                           SVE=Tidigast disponibelt den] }

    { 70  ;4   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Earliest Date Available;
                           NOR=Tidligste tilgjengelige dato;
                           SVE=Tidigast disponibelt den];
                ToolTipML=[ENU=Specifies the arrival date of an inbound supply order that can cover the needed quantity on a date later than the demand date.;
                           NOR=Angir ankomstdatoen for en inngÜende forsyningsordre som kan dekke det nõdvendige antallet pÜ en dato senere enn behovsdatoen.;
                           SVE=Anger infîrseldatumet fîr en ankommande leveransorder som kan tÑcka det efterfrÜgade antalet, men pÜ ett datum som Ñr senare Ñn efterfrÜgedatumet.];
                ApplicationArea=#Planning;
                SourceExpr=EarliestShptDateAvailable;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ReqLine@1001 : Record 246;
      SalesHeader@1000 : Record 36;
      PlantOrder@1100485001 : Record 11012556;
      ProdOrder@1006 : Record 5405;
      AsmHeader@1013 : Record 900;
      ServHeader@1004 : Record 5900;
      Job@1010 : Record 11072003;
      MfgUserTempl@1015 : Record 5525;
      OrderPlanningMgt@1002 : Codeunit 5522;
      ItemAvailFormsMgt@1003 : Codeunit 353;
      UOMMgt@1020 : Codeunit 5402;
      DemandOrderFilter@1007 : 'All Demands,Production Demand,Sales Demand,Service Demand,Job Demand,Assembly Demand,Plant Demand';
      Text001@1008 : TextConst 'ENU=Sales;NOR=Salg;SVE=FîrsÑljning';
      Text002@1009 : TextConst 'ENU=Production;NOR=Produksjon;SVE=Produktion';
      Text003@1011 : TextConst 'ENU=Service;NOR=Service;SVE=Service';
      Text004@1012 : TextConst 'ENU=Jobs;NOR=Prosjekter;SVE=Projekt';
      Text11012000@1100485000 : TextConst 'ENU=Plant;SVE=Maskin';
      StatusHideValue@1703 : Boolean INDATASET;
      StatusText@1026 : Text[1024] INDATASET;
      DemandTypeHideValue@2820 : Boolean INDATASET;
      DemandTypeEmphasize@8137 : Boolean INDATASET;
      DemandTypeText@3831 : Text[1024] INDATASET;
      DemandSubtypeText@1093 : Text[1024] INDATASET;
      DemandOrderNoHideValue@9078 : Boolean INDATASET;
      DemandOrderNoEmphasize@3698 : Boolean INDATASET;
      DescriptionEmphasize@4350 : Boolean INDATASET;
      DescriptionIndent@1680 : Integer INDATASET;
      DemandQuantityHideValue@6712 : Boolean INDATASET;
      DemandQtyAvailableHideValue@4026 : Boolean INDATASET;
      ReplenishmentSystemHideValue@8169 : Boolean INDATASET;
      QuantityHideValue@4020 : Boolean INDATASET;
      SupplyFromEditable@5667 : Boolean INDATASET;
      ReserveEditable@1016 : Boolean INDATASET;
      DemandOrderFilterCtrlEnable@1436 : Boolean INDATASET;
      Text005@1014 : TextConst 'ENU=Assembly;NOR=Montering;SVE=Montering';
      QtyOnOtherLocations@1005 : Decimal;
      SubstitionAvailable@1017 : Boolean;
      QtyATP@1018 : Decimal;
      EarliestShptDateAvailable@1019 : Date;
      DPA_IsHardFilter@1100000999 : Boolean;

    PROCEDURE SetPlantOrder@1100485002(PlantOrder2@1001 : Record 11012556);
    BEGIN
      //**4PS
      PlantOrder := PlantOrder2;
      DemandOrderFilter := DemandOrderFilter::"Plant Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    [External]
    PROCEDURE SetSalesOrder@2(SalesHeader2@1001 : Record 36);
    BEGIN
      SalesHeader := SalesHeader2;
      DemandOrderFilter := DemandOrderFilter::"Sales Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    [External]
    PROCEDURE SetProdOrder@3(ProdOrder2@1000 : Record 5405);
    BEGIN
      ProdOrder := ProdOrder2;
      DemandOrderFilter := DemandOrderFilter::"Production Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    [External]
    PROCEDURE SetAsmOrder@23(AsmHeader2@1001 : Record 900);
    BEGIN
      AsmHeader := AsmHeader2;
      DemandOrderFilter := DemandOrderFilter::"Assembly Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    [External]
    PROCEDURE SetServOrder@19(ServHeader2@1001 : Record 5900);
    BEGIN
      ServHeader := ServHeader2;
      DemandOrderFilter := DemandOrderFilter::"Service Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    [External]
    PROCEDURE SetJobOrder@21(Job2@1001 : Record 11072003);
    BEGIN
      Job := Job2;
      DemandOrderFilter := DemandOrderFilter::"Job Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    LOCAL PROCEDURE InitTempRec@12();
    VAR
      ReqLine@1000 : Record 246;
      ReqLineWithCursor@1001 : Record 246;
    BEGIN
      DELETEALL;

      ReqLine.RESET;
      ReqLine.COPYFILTERS(Rec);
      ReqLine.SETRANGE("User ID",USERID);
      ReqLine.SETRANGE("Worksheet Template Name",'');
      IF ReqLine.FINDSET THEN
        REPEAT
          Rec := ReqLine;
          INSERT;
          IF ReqLine.Level = 0 THEN
            FindReqLineForCursor(ReqLineWithCursor,ReqLine);
        UNTIL ReqLine.NEXT = 0;

      IF FINDFIRST THEN
        IF ReqLineWithCursor."Line No." > 0 THEN
          Rec := ReqLineWithCursor;

      SetRecFilters;
    END;

    LOCAL PROCEDURE FindReqLineForCursor@22(VAR ReqLineWithCursor@1000 : Record 246;ActualReqLine@1001 : Record 246);
    BEGIN
      IF ProdOrder."No." = '' THEN
        EXIT;

      IF (ActualReqLine."Demand Type" = DATABASE::"Prod. Order Component") AND
         (ActualReqLine."Demand Subtype" = ProdOrder.Status) AND
         (ActualReqLine."Demand Order No." = ProdOrder."No.")
      THEN
        ReqLineWithCursor := ActualReqLine;
    END;

    LOCAL PROCEDURE RefreshTempTable@14();
    VAR
      TempReqLine2@1001 : Record 246;
      ReqLine@1000 : Record 246;
    BEGIN
      TempReqLine2.COPY(Rec);

      RESET;
      IF FIND('-') THEN
        REPEAT
          ReqLine := Rec;
          IF NOT ReqLine.FIND OR
             ((Level = 0) AND ((ReqLine.NEXT = 0) OR (ReqLine.Level = 0)))
          THEN BEGIN
            IF Level = 0 THEN BEGIN
              ReqLine := Rec;
              ReqLine.FIND;
              ReqLine.DELETE(TRUE);
            END;
            DELETE
          END;
        UNTIL NEXT = 0;

      COPY(TempReqLine2);
    END;

    [External]
    PROCEDURE SetRecFilters@5();
    BEGIN
      RESET;
      FILTERGROUP(2);
      SETRANGE("User ID",USERID);
      SETRANGE("Worksheet Template Name",'');

      CASE DemandOrderFilter OF
        DemandOrderFilter::"All Demands":
          BEGIN
            SETRANGE("Demand Type");
            SETCURRENTKEY("User ID","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Sales Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Sales Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Production Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Prod. Order Component");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Assembly Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Assembly Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Service Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Service Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Job Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Job Planning Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        //**4PS.sn
        DemandOrderFilter::"Plant Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Plant Order Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        //**4PS.en
      END;
      FILTERGROUP(0);

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ShowDemandOrder@15();
    VAR
      SalesHeader@1001 : Record 36;
      ProdOrder@1000 : Record 5405;
      ServHeader@1002 : Record 5900;
      Job@1003 : Record 11072003;
      AsmHeader@1004 : Record 900;
    BEGIN
      CASE "Demand Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader.GET("Demand Subtype","Demand Order No.");
            CASE SalesHeader."Document Type" OF
              SalesHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Sales Order",SalesHeader);
              SalesHeader."Document Type"::"Return Order":
                PAGE.RUN(PAGE::"Sales Return Order",SalesHeader);
            END;
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.GET("Demand Subtype","Demand Order No.");
            CASE ProdOrder.Status OF
              ProdOrder.Status::Planned:
                PAGE.RUN(PAGE::"Planned Production Order",ProdOrder);
              ProdOrder.Status::"Firm Planned":
                PAGE.RUN(PAGE::"Firm Planned Prod. Order",ProdOrder);
              ProdOrder.Status::Released:
                PAGE.RUN(PAGE::"Released Production Order",ProdOrder);
            END;
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AsmHeader.GET("Demand Subtype","Demand Order No.");
            CASE AsmHeader."Document Type" OF
              AsmHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Assembly Order",AsmHeader);
            END;
          END;
        DATABASE::"Service Line":
          BEGIN
            ServHeader.GET("Demand Subtype","Demand Order No.");
            CASE ServHeader."Document Type" OF
              ServHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Service Order",ServHeader);
            END;
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            Job.GET("Demand Order No.");
            CASE Job.Status OF
              Job.Status::Open:
                PAGE.RUN(PAGE::"Job Card",Job);
            END;
          END;
        //**4PS.sn
        DATABASE::"Plant Order Line":
          BEGIN
            PlantOrder.GET("Demand Order No.");
            PAGE.RUN(PAGE::"Plant Order",PlantOrder);
          END;
        //**4PS.en
      END;

      OnAfterShowDemandOrder(Rec);
    END;

    LOCAL PROCEDURE CalcItemAvail@16();
    BEGIN
      QtyOnOtherLocations := CalcQtyOnOtherLocations;
      SubstitionAvailable := CalcSubstitionAvailable;
      QtyATP := CalcQtyATP;
      EarliestShptDateAvailable := CalcEarliestShptDateAvailable;
    END;

    LOCAL PROCEDURE CalcQtyOnOtherLocations@6() : Decimal;
    VAR
      QtyOnOtherLocation@1000 : Decimal;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      QtyOnOtherLocation := OrderPlanningMgt.AvailQtyOnOtherLocations(Rec); // Base Unit
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      QtyOnOtherLocation := ROUND(QtyOnOtherLocation / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);

      EXIT(QtyOnOtherLocation);
    END;

    LOCAL PROCEDURE CalcQtyATP@8() : Decimal;
    VAR
      QtyATP@1000 : Decimal;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      QtyATP := OrderPlanningMgt.CalcATPQty("No.","Variant Code","Location Code","Demand Date"); // Base Unit
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      QtyATP := ROUND(QtyATP / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);

      EXIT(QtyATP);
    END;

    LOCAL PROCEDURE CalcEarliestShptDateAvailable@9() : Date;
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      Item.GET("No.");
      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
        EXIT;

      EXIT(OrderPlanningMgt.CalcATPEarliestDate("No.","Variant Code","Location Code","Demand Date","Quantity (Base)"));
    END;

    LOCAL PROCEDURE CalcSubstitionAvailable@11() : Boolean;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      EXIT(OrderPlanningMgt.SubstitutionPossible(Rec));
    END;

    LOCAL PROCEDURE CalcPlan@13();
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      RESET;
      DELETEALL;

      CLEAR(OrderPlanningMgt);
      CASE DemandOrderFilter OF
        DemandOrderFilter::"Sales Demand":
          OrderPlanningMgt.SetSalesOrder;
        DemandOrderFilter::"Assembly Demand":
          OrderPlanningMgt.SetAsmOrder;
        DemandOrderFilter::"Production Demand":
          OrderPlanningMgt.SetProdOrder;
        DemandOrderFilter::"Service Demand":
          OrderPlanningMgt.SetServOrder;
        DemandOrderFilter::"Job Demand":
          OrderPlanningMgt.SetJobOrder;
        //**4PS.sn
        DemandOrderFilter::"Plant Demand":
          OrderPlanningMgt.SetPlantOrder;
        //**4PS.en
      END;
      OrderPlanningMgt.GetOrdersToPlan(ReqLine);

      InitTempRec;
    END;

    LOCAL PROCEDURE UpdateSupplyFrom@17();
    BEGIN
      SupplyFromEditable := NOT ("Replenishment System" IN ["Replenishment System"::"Prod. Order",
                                                            "Replenishment System"::Assembly]);
    END;

    LOCAL PROCEDURE DemandOrderFilterOnAfterValida@5131();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnAfterVali@108();
    BEGIN
      UpdateSupplyFrom;
    END;

    LOCAL PROCEDURE StatusTextOnFormat@2403(VAR Text@4168 : Text[1024]);
    BEGIN
      IF "Demand Line No." = 0 THEN
        CASE "Demand Type" OF
          DATABASE::"Prod. Order Component":
            BEGIN
              ProdOrder.Status := Status;
              Text := FORMAT(ProdOrder.Status);
            END;
          DATABASE::"Sales Line":
            BEGIN
              SalesHeader.Status := Status;
              Text := FORMAT(SalesHeader.Status);
            END;
          DATABASE::"Service Line":
            BEGIN
              ServHeader.INIT;
              ServHeader.Status := Status;
              Text := FORMAT(ServHeader.Status);
            END;
          DATABASE::"Job Planning Line":
            BEGIN
              Job.INIT;
              Job.Status := Status;
              Text := FORMAT(Job.Status);
            END;
          DATABASE::"Assembly Line":
            BEGIN
              AsmHeader.Status := Status;
              Text := FORMAT(AsmHeader.Status);
            END;
        END;

      OnAfterStatusTextOnFormat(Rec,Text);

      StatusHideValue := "Demand Line No." <> 0;
    END;

    LOCAL PROCEDURE DemandTypeTextOnFormat@3246(VAR Text@8763 : Text[1024]);
    BEGIN
      IF "Demand Line No." = 0 THEN
        CASE "Demand Type" OF
          DATABASE::"Sales Line":
            Text := Text001;
          DATABASE::"Prod. Order Component":
            Text := Text002;
          DATABASE::"Service Line":
            Text := Text003;
          DATABASE::"Job Planning Line":
            Text := Text004;
          DATABASE::"Assembly Line":
            Text := Text005;
          //**4PS.sn
          DATABASE::"Plant Order Line":
            Text := Text11012000;
          //**4PS.en
        END;

      OnAfterDemandTypeTextOnFormat(Rec,Text);

      DemandTypeHideValue := "Demand Line No." <> 0;
      DemandTypeEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DemandSubtypeTextOnFormat@5102(VAR Text@3938 : Text[1024]);
    BEGIN
      CASE "Demand Type" OF
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.Status := Status;
            Text := FORMAT(ProdOrder.Status);
          END;
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(SalesHeader."Document Type");
          END;
        DATABASE::"Service Line":
          BEGIN
            ServHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(ServHeader."Document Type");
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            Job.Status := Status;
            Text := FORMAT(Job.Status);
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AsmHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(AsmHeader."Document Type");
          END;
      END
    END;

    LOCAL PROCEDURE DemandOrderNoOnFormat@5590();
    BEGIN
      DemandOrderNoHideValue := "Demand Line No." <> 0;
      DemandOrderNoEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DescriptionOnFormat@7660();
    BEGIN
      DescriptionIndent := Level + "Planning Level";
      DescriptionEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DemandQuantityOnFormat@5069();
    BEGIN
      DemandQuantityHideValue := Level = 0;
    END;

    LOCAL PROCEDURE DemandQtyAvailableOnFormat@9777();
    BEGIN
      DemandQtyAvailableHideValue := Level = 0;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnFormat@2247();
    BEGIN
      ReplenishmentSystemHideValue := "Replenishment System" = "Replenishment System"::" ";
    END;

    LOCAL PROCEDURE QuantityOnFormat@5084();
    BEGIN
      QuantityHideValue := Level = 0;
    END;

    LOCAL PROCEDURE ReserveOnFormat@26();
    BEGIN
      ReserveEditable := Level <> 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShowDemandOrder@1(VAR RequisitionLine@1000 : Record 246);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterStatusTextOnFormat@4(VAR RequisitionLine@1000 : Record 246;VAR Text@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDemandTypeTextOnFormat@10(VAR RequisitionLine@1000 : Record 246;VAR Text@1001 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

