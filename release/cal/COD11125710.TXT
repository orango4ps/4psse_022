OBJECT Codeunit 11125710 Proj. Act. Cap. Reporting Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TmpWorkDateRec@1100525011 : TEMPORARY Record 11012439;
      BuildWorkDateStart@1100525012 : Date;
      BuildWorkDateEnd@1100525013 : Date;
      ProjActCapComMgt@1100525010 : Codeunit 11125706;
      PrevStartAv@1100525001 : Date;
      PrevEndAv@1100525003 : Date;
      PrevStartAss@1100525005 : Date;
      PrevEndAss@1100525004 : Date;
      PrevCode1Av@1100525000 : Code[20];
      PrevCode2Av@1100525002 : Code[20];
      PrevCode1Ass@1100525007 : Code[20];
      PrevCode2Ass@1100525006 : Code[20];
      PrevHoursAvailable@1100525008 : Decimal;
      PrevHoursAssigned@1100525009 : Decimal;

    PROCEDURE SetSubColumnFilter@1100525005(VAR PeriodColRec@1100525000 : Record 11125713;SubColumns@1100525001 : Integer);
    BEGIN
      PeriodColRec.FILTERGROUP(6);
      PeriodColRec.SETRANGE("Sub Column No.", 1, SubColumns);  //* Allowed number of sub columns
      PeriodColRec.FILTERGROUP(0);

      PeriodColRec.PeriodControl(SubColumns);
    END;

    PROCEDURE CheckSubColumnSelected@1100525014(CurrSubColNo@1100525002 : Integer;VAR SelectedSubColumnArray@1100525004 : ARRAY [5] OF Boolean;SubColumns@1100525003 : Integer);
    VAR
      SubColsSelected@1100525001 : Boolean;
      SubColNo@1100525000 : Integer;
      lvText001@1100525005 : TextConst 'DEU=WÑhlen Sie zumindest 1 Spaltenart aus.;ENU=Select at least one column type.;NLD=Selecteer minstens 1 kolomsoort.;NOR=Velg minst Çn kolonnetype;SVE=VÑlj minst en kolumntyp.';
    BEGIN
      //* There must be selected at least one sub column
      SubColsSelected := FALSE;
      FOR SubColNo := 1 TO SubColumns DO BEGIN
        IF SelectedSubColumnArray[SubColNo] THEN
          SubColsSelected := TRUE;
      END;
      IF NOT SubColsSelected THEN BEGIN
        IF CurrSubColNo = 0 THEN BEGIN  //* Select all sub columns (init)
          FOR SubColNo := 1 TO SubColumns DO
            SelectedSubColumnArray[SubColNo] := TRUE;
        END ELSE BEGIN
          IF (SubColumns = 2) AND (CurrSubColNo IN [1, 2]) THEN BEGIN
            IF CurrSubColNo = 1 THEN
              SelectedSubColumnArray[2] := TRUE
            ELSE
              SelectedSubColumnArray[1] := TRUE;
          END ELSE
            ERROR(lvText001);
        END;
      END;
    END;

    PROCEDURE SetSelectedSubColumnsFilter@1100525013(VAR SelectedSubColumnArray@1100525005 : ARRAY [5] OF Boolean;VAR PeriodColRec@1100525003 : Record 11125713;VAR FirstSubColumnNo@1100525004 : Integer;SubColumns@1100525006 : Integer);
    VAR
      AllSubColsSelected@1100525001 : Boolean;
      SubColNo@1100525002 : Integer;
      FilterTxt@1100525000 : Text[30];
    BEGIN
      AllSubColsSelected := TRUE;
      FirstSubColumnNo := -1;
      FilterTxt := '';
      FOR SubColNo := 1 TO SubColumns DO BEGIN
        IF NOT SelectedSubColumnArray[SubColNo] THEN
          AllSubColsSelected := FALSE
        ELSE BEGIN
          IF (FirstSubColumnNo < 0) THEN
            FirstSubColumnNo := SubColNo;
          IF FilterTxt <> '' THEN
            FilterTxt := FilterTxt + '|';
          FilterTxt := FilterTxt + FORMAT(SubColNo);
        END;
      END;
      IF FirstSubColumnNo = -1 THEN  //* No sub column selected
        FilterTxt := FORMAT(-1);

      PeriodColRec.FILTERGROUP(9);  //* Do not use filtergroup 6!  See above, function 'SetSubColumnFilter'
      IF AllSubColsSelected THEN
        PeriodColRec.SETRANGE("Sub Column No.")  //* Reset filter, so all allowed sub colomuns
      ELSE
        PeriodColRec.SETFILTER("Sub Column No.", FilterTxt);  //* Selected sub columns
      PeriodColRec.FILTERGROUP(0);
    END;

    PROCEDURE FindFirstPeriod@1100525001(VAR PeriodColRec@1100525000 : Record 11125713;PeriodType@1100525001 : Option;FirstSubColNo@1100525002 : Integer) : Boolean;
    VAR
      Found@1100525003 : Boolean;
    BEGIN
      IF FirstSubColNo < 0 THEN
        EXIT(FALSE);
      PeriodColRec.FILTERGROUP(6);
      PeriodColRec.SETRANGE("Period Type", PeriodType);
      PeriodColRec.FILTERGROUP(0);
      PeriodColRec."Period Type" := PeriodType;
      IF PeriodColRec."Start Date" = 0D THEN
        PeriodColRec."Start Date" := TODAY;
      IF FirstSubColNo <> 0 THEN BEGIN
        PeriodColRec.SETRANGE("Sub Column No.", FirstSubColNo);
        PeriodColRec."Sub Column No." := FirstSubColNo;
      END;
      Found := PeriodColRec.FIND('=<>');
      PeriodColRec.SETRANGE("Sub Column No.");  //* Reset filter
      EXIT(Found);
    END;

    PROCEDURE NextPeriod@1100525003(VAR PeriodColRec@1100525000 : Record 11125713;Steps@1100525001 : Integer) : Integer;
    BEGIN
      EXIT(PeriodColRec.NEXT(Steps));
    END;

    PROCEDURE FillPeriodHeader@1100525004(PeriodColRec@1100525000 : Record 11125713) HeaderTxt : Text[100];
    VAR
      TextDay1@1100525020 : TextConst 'DEU=Mo;ENU=Mon;NLD=Ma;NOR=man;SVE=MÜn';
      TextDay2@1100525019 : TextConst 'DEU=Di;ENU=Tue;NLD=Di;NOR=tirs;SVE=Tis';
      TextDay3@1100525018 : TextConst 'DEU=Mi;ENU=Wed;NLD=Wo;NOR=ons;SVE=Ons';
      TextDay4@1100525017 : TextConst 'DEU=Do;ENU=Thu;NLD=Do;NOR=tors;SVE=Tor';
      TextDay5@1100525016 : TextConst 'DEU=Fr;ENU=Fri;NLD=Vr;NOR=fre;SVE=Fre';
      TextDay6@1100525015 : TextConst 'DEU=Sa;ENU=Sat;NLD=Za;NOR=lõr;SVE=Lîr';
      TextDay7@1100525014 : TextConst 'DEU=So;ENU=Sun;NLD=Zo;NOR=sõn;SVE=Sîn';
      TextWeek@1100525013 : TextConst 'DEU=Woche;ENU=Week;NLD=Week;NOR=Uke;SVE=Vecka';
      TextMonth1@1100525012 : TextConst 'DEU=Jan.;ENU=Jan.;NLD=Jan.;NOR=jan.;SVE=Jan.';
      TextMonth2@1100525011 : TextConst 'DEU=Febr.;ENU=Febr.;NLD=Febr.;NOR=feb.;SVE=Febr.';
      TextMonth3@1100525010 : TextConst 'DEU=MÑrz;ENU=March;NLD=Maart;NOR=mars;SVE=Mars';
      TextMonth4@1100525009 : TextConst 'DEU=April;ENU=April;NLD=April;NOR=april;SVE=April';
      TextMonth5@1100525008 : TextConst 'DEU=May;ENU=May;NLD=Mei;NOR=mai;SVE=Maj';
      TextMonth6@1100525007 : TextConst 'DEU=Juni;ENU=June;NLD=Juni;NOR=juni;SVE=Juni';
      TextMonth7@1100525006 : TextConst 'DEU=Juli;ENU=July;NLD=Juli;NOR=juli;SVE=Juli';
      TextMonth8@1100525005 : TextConst 'DEU=Aug.;ENU=Aug.;NLD=Aug.;NOR=aug.;SVE=Aug.';
      TextMonth9@1100525004 : TextConst 'DEU=Sept.;ENU=Sept.;NLD=Sept.;NOR=sept.;SVE=Sept.';
      TextMonth10@1100525003 : TextConst 'DEU=Okt.;ENU=Oct.;NLD=Okt.;NOR=okt.;SVE=Okt.';
      TextMonth11@1100525002 : TextConst 'DEU=Nov.;ENU=Nov.;NLD=Nov.;NOR=nov.;SVE=Nov.';
      TextMonth12@1100525001 : TextConst 'DEU=Dez.;ENU=Dec.;NLD=Dec.;NOR=des.;SVE=Dec.';
    BEGIN
      CASE PeriodColRec."Period Type" OF
        PeriodColRec."Period Type"::Date:
          BEGIN
            CASE DATE2DWY(PeriodColRec."Start Date", 1) OF
              1: HeaderTxt := TextDay1;
              2: HeaderTxt := TextDay2;
              3: HeaderTxt := TextDay3;
              4: HeaderTxt := TextDay4;
              5: HeaderTxt := TextDay5;
              6: HeaderTxt := TextDay6;
              7: HeaderTxt := TextDay7;
            END;
          END;
        PeriodColRec."Period Type"::Week:
          HeaderTxt := TextWeek + ' ' + FORMAT(PeriodColRec."Period No.");
        PeriodColRec."Period Type"::Month:
          BEGIN
            CASE DATE2DMY(PeriodColRec."Start Date", 2) OF
               1: HeaderTxt := TextMonth1;
               2: HeaderTxt := TextMonth2;
               3: HeaderTxt := TextMonth3;
               4: HeaderTxt := TextMonth4;
               5: HeaderTxt := TextMonth5;
               6: HeaderTxt := TextMonth6;
               7: HeaderTxt := TextMonth7;
               8: HeaderTxt := TextMonth8;
               9: HeaderTxt := TextMonth9;
              10: HeaderTxt := TextMonth10;
              11: HeaderTxt := TextMonth11;
              12: HeaderTxt := TextMonth12;
            END;
          END;
        PeriodColRec."Period Type"::Quarter:
          HeaderTxt := FORMAT(DATE2DMY(PeriodColRec."Start Date", 3)) + '-' + FORMAT(PeriodColRec."Period No.");
        PeriodColRec."Period Type"::Year:
          HeaderTxt := FORMAT(DATE2DMY(PeriodColRec."Start Date", 3));
      END;
      HeaderTxt := HeaderTxt + '\' + FORMAT(PeriodColRec."Start Date");
    END;

    PROCEDURE CaptionRequest@1100525007() : Text[30];
    VAR
      TextCaption@1100525001 : TextConst 'DEU=Anforderung;ENU=Request;NLD=Aanvraag;NOR=Forespõrsel;SVE=FîrfrÜgan';
    BEGIN
      EXIT(TextCaption);
    END;

    PROCEDURE CaptionAssigned@1100525008() : Text[30];
    VAR
      TextCaption@1100525001 : TextConst 'DEU=Geplant;ENU=Planned;NLD=Gepland;NOR=Planlagt;SVE=Planerad';
    BEGIN
      EXIT(TextCaption);
    END;

    PROCEDURE CaptionAvailable@1100525009() : Text[30];
    VAR
      TextCaption@1100525001 : TextConst 'DEU=VerfÅgbar;ENU=Available;NLD=Beschikbaar;NOR=Disponibelt;SVE=Disponibelt';
    BEGIN
      EXIT(TextCaption);
    END;

    PROCEDURE CaptionOccupancy@1100525011() : Text[30];
    VAR
      TextCaption@1100525001 : TextConst 'DEU=Besetzt. %;ENU=Occ. %;NLD=Bezet. %;NOR=Yrke. %;SVE=Bel. %';
    BEGIN
      EXIT(TextCaption);
    END;

    PROCEDURE TotalHours@1100525002(ColumnType@1100525004 : ',Request,Assign';Level@1100525003 : Option;StartDate@1100525005 : Date;EndDate@1100525006 : Date;ProjNo@1100525002 : Code[20];Code1@1100525007 : Code[20];Code2@1100525008 : Code[20]) : Decimal;
    VAR
      ReqActCapByDayRec@1100525000 : Record 11125709;
      AssignActCapByDayRec@1100525001 : Record 11125711;
    BEGIN
      //* ColumnType:
      //* 1: Hours Request
      //* 2: Hours Assign
      //*
      //* Level (always by period):
      //*   See functions 'SetRequestCellFiltersAndKey' and ''SetAssignCellFiltersAndKey'

      CASE ColumnType OF
        ColumnType::Request:
          BEGIN
            SetRequestCellFiltersAndKey(ReqActCapByDayRec, Level, StartDate, EndDate, ProjNo, Code1);
            ReqActCapByDayRec.CALCSUMS(Hours);
            EXIT(ReqActCapByDayRec.Hours);
          END;
        ColumnType::Assign:
          BEGIN
            SetAssignCellFiltersAndKey(AssignActCapByDayRec, Level, StartDate, EndDate, ProjNo, Code1, Code2);
            AssignActCapByDayRec.CALCSUMS(Hours);
            EXIT(AssignActCapByDayRec.Hours);
          END;
      END;

      EXIT(0);
    END;

    PROCEDURE Occupation@1100525012(ColumnType@1100525004 : ',Available,Assign,Occupancy';Level@1100525003 : Option;StartDate@1100525005 : Date;EndDate@1100525006 : Date;Code1@1100525002 : Code[20];Code2@1100525001 : Code[20]) : Decimal;
    VAR
      EmplRec@1100525009 : Record 5200;
      TeamRec@1100525011 : Record 11012437;
      TeamResourceRec@1100525010 : Record 11012440;
      PlantNoRec@1100525012 : Record 11012552;
      Level2@1100525000 : Integer;
      HoursAvailable@1100525007 : Decimal;
      HoursAssigned@1100525008 : Decimal;
    BEGIN
      //* ColumnType:
      //* 1: Hours Available
      //* 2: Hours Assign (planned)
      //* 3: Occupancy (%)
      //*
      //* Level (always by period):
      //* 1: Employee
      //* 2: Discipline
      //* 3: Team Type
      //* 4: Team
      //* 5: Plant Type
      //* 6: Plant Number

      IF ColumnType IN [ColumnType::Available, ColumnType::Occupancy] THEN BEGIN
        IF (Code1 = PrevCode1Av) AND (Code2 = PrevCode2Av) AND (StartDate = PrevStartAv) AND (EndDate = PrevEndAv) THEN
          HoursAvailable := PrevHoursAvailable
        ELSE BEGIN
          BuildTmpWorkingDays(StartDate, EndDate);
          CASE Level OF
            1: HoursAvailable := CalcAvailableEmployee(Code1, StartDate, EndDate, '', 0);
            2:
              BEGIN
                EmplRec.SETCURRENTKEY(Discipline);
                EmplRec.SETRANGE(Discipline, Code1);
                //EmplRec.SETFILTER(Schedule, '%1|%2', EmplRec.Schedule::Project, EmplRec.Schedule::Both);
                IF EmplRec.FINDSET(FALSE,FALSE) THEN BEGIN
                  REPEAT
                    HoursAvailable := HoursAvailable + CalcAvailableEmployee(EmplRec."No.", StartDate, EndDate, '', 0);
                  UNTIL EmplRec.NEXT = 0
                END;
              END;
            3:
              BEGIN
                TeamRec.SETCURRENTKEY("Team Type Code", Code);
                TeamRec.SETRANGE("Team Type Code", Code1);
                IF TeamRec.FINDSET(FALSE,FALSE) THEN BEGIN
                  REPEAT
                    TeamResourceRec.SETRANGE("Team Code", TeamRec.Code);
                    TeamResourceRec.SETRANGE("Resource Type", TeamResourceRec."Resource Type"::Employee);
                    TeamResourceRec.SETFILTER(Percentage, '>%1', 0);
                    IF TeamResourceRec.FINDSET(FALSE,FALSE) THEN BEGIN
                      REPEAT
                        HoursAvailable :=
                          HoursAvailable +
                          ((TeamResourceRec.Percentage/100) *
                           CalcAvailableEmployee(
                             TeamResourceRec."Resource Code", StartDate, EndDate,
                             TeamResourceRec."Team Code", TeamResourceRec."Resource Type"));
                      UNTIL TeamResourceRec.NEXT = 0;
                    END;
                  UNTIL TeamRec.NEXT = 0;
                END;

              END;
            4:
              BEGIN
                TeamResourceRec.SETRANGE("Team Code", Code1);
                TeamResourceRec.SETRANGE("Resource Type", TeamResourceRec."Resource Type"::Employee);
                TeamResourceRec.SETFILTER(Percentage, '>%1', 0);
                IF TeamResourceRec.FINDSET(FALSE,FALSE) THEN BEGIN
                  REPEAT
                    HoursAvailable :=
                      HoursAvailable +
                      ((TeamResourceRec.Percentage/100) *
                       CalcAvailableEmployee(
                         TeamResourceRec."Resource Code", StartDate, EndDate,
                         TeamResourceRec."Team Code", TeamResourceRec."Resource Type"));
                  UNTIL TeamResourceRec.NEXT = 0;
                END;
              END;
            5:
              BEGIN
                PlantNoRec.SETRANGE("Plant Type", Code1);
                PlantNoRec.SETRANGE(Bulk, FALSE);
                IF PlantNoRec.FINDSET(FALSE,FALSE) THEN BEGIN
                  REPEAT
                    HoursAvailable :=
                      HoursAvailable + CalcAvailablePlantNo(PlantNoRec, StartDate, EndDate);
                  UNTIL PlantNoRec.NEXT = 0
                END;
              END;
            6:
              BEGIN
                IF PlantNoRec.GET(Code1, Code2) THEN
                  HoursAvailable := CalcAvailablePlantNo(PlantNoRec, StartDate, EndDate);
              END;
          END;
          PrevCode1Av := Code1;
          PrevCode2Av := Code2;
          PrevStartAv := StartDate;
          PrevEndAv := EndDate;
          PrevHoursAvailable := HoursAvailable;
        END;
      END;
      IF ColumnType IN [ColumnType::Assign, ColumnType::Occupancy] THEN BEGIN
        IF (Code1 = PrevCode1Ass) AND (Code2 = PrevCode2Ass) AND (StartDate = PrevStartAss) AND (EndDate = PrevEndAss) THEN
          HoursAssigned := PrevHoursAssigned
        ELSE BEGIN
          CASE Level OF
            1: Level2 := 21;
            2: Level2 := 7;
            3: Level2 := 6;
            4: Level2 := 22;
            5: Level2 := 8;
            6: Level2 := 23;
          END;
          HoursAssigned := TotalHours(2, Level2, StartDate, EndDate, '', Code1, Code2);
          PrevCode1Ass := Code1;
          PrevCode2Ass := Code2;
          PrevStartAss := StartDate;
          PrevEndAss := EndDate;
          PrevHoursAssigned := HoursAssigned;
        END;
      END;

      CASE ColumnType OF
        ColumnType::Available:
          EXIT(HoursAvailable);
        ColumnType::Assign:
          EXIT(HoursAssigned);
        ColumnType::Occupancy:
          BEGIN
            IF HoursAvailable <> 0 THEN
              EXIT(ROUND((HoursAssigned / HoursAvailable * 100), 0.01))
            ELSE BEGIN
              IF HoursAssigned = 0 THEN
                EXIT(100)
              ELSE
                EXIT(999);
            END;
          END;
      END;

      EXIT(0);
    END;

    PROCEDURE BuildTmpWorkingDays@1100525019(StartDate@1100525001 : Date;EndDate@1100525000 : Date);
    VAR
      PeriodStart@1100525003 : ARRAY [2] OF Date;
      PeriodEnd@1100525004 : ARRAY [2] OF Date;
      PlanDate@1100525008 : Date;
      DateIsWorkingDate@1100525007 : Boolean;
      I@1100525011 : Integer;
      CalendarCode@1100525002 : Code[10];
    BEGIN
      IF (StartDate = 0D) OR (EndDate = 0D) THEN
        EXIT;
      IF (StartDate >= BuildWorkDateStart) AND (EndDate >= BuildWorkDateStart) AND
         (StartDate <= BuildWorkDateEnd) AND (EndDate <= BuildWorkDateEnd)
      THEN
        EXIT;
      CalendarCode := ProjActCapComMgt.GetCalendarCode();

      IF BuildWorkDateStart = 0D THEN BEGIN  //* First time
        PeriodStart[1] := StartDate;
        PeriodEnd[1] := EndDate;
        PeriodStart[2] := 0D;
        PeriodEnd[2] := 0D;
        BuildWorkDateStart := PeriodStart[1];
        BuildWorkDateEnd := PeriodEnd[1];
      END ELSE BEGIN
        IF (StartDate < BuildWorkDateStart) THEN BEGIN  //* Before
          PeriodStart[1] := StartDate;
          PeriodEnd[1] := BuildWorkDateStart - 1;
          BuildWorkDateStart := PeriodStart[1];
        END;
        IF (EndDate > BuildWorkDateEnd) THEN BEGIN  //* After
          PeriodStart[2] := BuildWorkDateEnd + 1;
          PeriodEnd[2] := EndDate;
          BuildWorkDateEnd := PeriodEnd[2];
        END;
      END;

      FOR I := 1 TO 2 DO BEGIN
        IF PeriodStart[I] <> 0D THEN BEGIN
          FOR PlanDate := PeriodStart[I] TO PeriodEnd[I] DO BEGIN
            DateIsWorkingDate := TRUE;
            IF CalendarCode <> '' THEN
              DateIsWorkingDate := ProjActCapComMgt.DateIsWorkingDate(CalendarCode, PlanDate);
            IF DateIsWorkingDate THEN BEGIN
              TmpWorkDateRec.Date := PlanDate;
              TmpWorkDateRec.INSERT;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE DeleteTmpWorkingDays@1100525029();
    BEGIN
      TmpWorkDateRec.RESET;
      TmpWorkDateRec.DELETEALL;
      BuildWorkDateStart := 0D;
      BuildWorkDateEnd := 0D;
    END;

    PROCEDURE GetHoursOccupationBasedOn@1100525018(VAR HoursAvailable@1100525001 : Decimal;VAR HoursAssigned@1100525000 : Decimal);
    BEGIN
      HoursAvailable :=  PrevHoursAvailable;
      HoursAssigned := PrevHoursAssigned;
    END;

    PROCEDURE CalcAvailableEmployee@1100525015(EmplNo@1100525000 : Code[20];StartDate@1100525002 : Date;EndDate@1100525001 : Date;TeamCode@1100525007 : Code[20];TeamResourceType@1100525009 : Option) : Decimal;
    VAR
      PlanDate@1100525006 : Date;
      Working@1100525003 : Boolean;
      HoursAvailable@1100525005 : Decimal;
    BEGIN
      HoursAvailable := 0;

      FOR PlanDate := StartDate TO EndDate DO BEGIN
        Working := TmpWorkDateRec.GET(PlanDate);
        IF Working AND (TeamCode <> '') THEN BEGIN
          IF NOT ProjActCapComMgt.CheckResourceInTeamOnDate(TeamCode, TeamResourceType, EmplNo, '', PlanDate) THEN
            Working := FALSE;
        END;
        IF Working THEN
          HoursAvailable := HoursAvailable + ProjActCapComMgt.CalcAvailableEmplHoursOnDate(EmplNo, PlanDate);
      END;
      EXIT(HoursAvailable);
    END;

    PROCEDURE CalcAvailablePlantNo@1100525017(PlantNoRec@1100525010 : Record 11012552;StartDate@1100525002 : Date;EndDate@1100525001 : Date) HoursAvailable : Decimal;
    VAR
      JobsSetup@1100528400 : Record 315;
      ProjectTimeTable@1100528401 : Record 11020684;
      ExitDate@1100525006 : Date;
    BEGIN
      IF PlantNoRec."Receipt Date" > EndDate THEN
        EXIT;
      ExitDate := ProjActCapComMgt.DeterminePlantNoExitDate(PlantNoRec);
      IF (ExitDate <> 0D) AND (ExitDate <= StartDate) THEN
        EXIT;

      JobsSetup.GET;
      JobsSetup.TESTFIELD("Project Time Table");
      ProjectTimeTable.GET(JobsSetup."Project Time Table");

      IF PlantNoRec."Receipt Date" > StartDate THEN
        StartDate := PlantNoRec."Receipt Date";
      IF (ExitDate <> 0D) AND (ExitDate <= EndDate) THEN
        EndDate := ExitDate - 1;

      IF EndDate >= StartDate THEN BEGIN
        TmpWorkDateRec.SETRANGE(Date, StartDate, EndDate);
        IF TmpWorkDateRec.FINDSET THEN
          REPEAT
            HoursAvailable := HoursAvailable + ProjectTimeTable.GetHoursByDay(TmpWorkDateRec.Date);
          UNTIL TmpWorkDateRec.NEXT = 0;
      END;
    END;

    PROCEDURE DrilldownOnTotalHours@1100525010(ColumnType@1100525004 : ',Request,Assign';Level@1100525003 : Option;StartDate@1100525005 : Date;EndDate@1100525006 : Date;ProjNo@1100525002 : Code[20];Code1@1100525007 : Code[20];Code2@1100525008 : Code[20]);
    VAR
      ReqActCapByDayRec@1100525000 : Record 11125709;
      AssignActCapByDayRec@1100525001 : Record 11125711;
    BEGIN
      //* ColumnType:
      //* 1: Hours Request
      //* 2: Hours Assign
      //*
      //* Level (always by period):
      //*   See function 'SetRequestCellFiltersAndKey'

      CASE ColumnType OF
        ColumnType::Request:
          BEGIN
            SetRequestCellFiltersAndKey(ReqActCapByDayRec, Level, StartDate, EndDate, ProjNo, Code1);
      // PAGE 11125711 (postponed / expired?)
            //PAGE.RUNMODAL(PAGE::"Req. Activ. Cap. by Day List", ReqActCapByDayRec);
          END;
        ColumnType::Assign:
          BEGIN
            SetAssignCellFiltersAndKey(AssignActCapByDayRec, Level, StartDate, EndDate, ProjNo, Code1, Code2);
      // PAGE 11125714 (postponed / expired?)
            //PAGE.RUNMODAL(PAGE::"Assign Activ. Cap. by Day List", AssignActCapByDayRec);
          END;
      END;
    END;

    PROCEDURE DrilldownOnOccupation@1100525016(ColumnType@1100525004 : ',Available,Assign,Occupancy';Level@1100525003 : Option;StartDate@1100525005 : Date;EndDate@1100525006 : Date;Code1@1100525007 : Code[20];Code2@1100525008 : Code[20]);
    VAR
      Level2@1100525000 : Integer;
    BEGIN
      //* ColumnType:
      //* 1: Hours Available
      //* 2: Hours Assign (planned)
      //* 3: Occupancy (%)
      //*
      //* Level (always by period):
      //*   See function 'Occupation'

      CASE ColumnType OF
        ColumnType::Available:
          BEGIN
          END;
        ColumnType::Assign,
        ColumnType::Occupancy:
          BEGIN
            CASE Level OF
              1: Level2 := 21;
              2: Level2 := 7;
              3: Level2 := 6;
              4: Level2 := 22;
              5: Level2 := 8;
              6: Level2 := 23;
            END;
            DrilldownOnTotalHours(2, Level2, StartDate, EndDate, '', Code1, Code2);
          END;
      END;
    END;

    PROCEDURE SetRequestCellFiltersAndKey@1100525000(VAR ReqActCapByDayRec@1100525006 : Record 11125709;Level@1100525005 : ',Project,ProjActivity,ProjTeamtype,ProjDiscipline,ProjPlanttype,TeamType,Discipline,PlantType';StartDate@1100525003 : Date;EndDate@1100525002 : Date;ProjNo@1100525001 : Code[20];Code1@1100525000 : Code[20]);
    BEGIN
      //* Level (always by period):
      //* 1: Project
      //* 2: Project/Activity
      //* 3: Project/Team Type
      //* 4: Project/Discipline
      //* 5: Project/Plant Type
      //* 6: Team Type
      //* 7: Discipline
      //* 8: Plant Type

      CASE Level OF
        Level::Project,
        Level::ProjDiscipline,
        Level::ProjPlanttype:
          ReqActCapByDayRec.SETCURRENTKEY("Project No.", "Resource Type", "Resource Code", Date);
        Level::ProjActivity:
          ReqActCapByDayRec.SETCURRENTKEY("Project No.", "Activity Code", "Resource Type", Date);
        Level::ProjTeamtype:
          ReqActCapByDayRec.SETCURRENTKEY("Project No.", "Team Type Code", "Resource Type", Date);
        Level::TeamType:
          ReqActCapByDayRec.SETCURRENTKEY("Project No.", "Team Type Code", "Resource Type", Date);
        Level::Discipline,
        Level::PlantType:
          ReqActCapByDayRec.SETCURRENTKEY("Resource Type", "Resource Code", Date);
      END;
      CASE Level OF
        Level::Project,
        Level::ProjActivity,
        Level::ProjTeamtype,
        Level::ProjDiscipline,
        Level::ProjPlanttype:
          ReqActCapByDayRec.SETRANGE("Project No.", ProjNo);
      END;
      CASE Level OF
        Level::ProjActivity:
          ReqActCapByDayRec.SETRANGE("Activity Code", Code1);
        Level::ProjDiscipline,
        Level::ProjPlanttype,
        Level::Discipline,
        Level::PlantType:
          ReqActCapByDayRec.SETRANGE("Resource Code", Code1);
        Level::ProjTeamtype,
        Level::TeamType:
          ReqActCapByDayRec.SETRANGE("Team Type Code", Code1);
      END;

      CASE Level OF
        Level::ProjPlanttype,
        Level::PlantType:
          ReqActCapByDayRec.SETRANGE("Resource Type", ReqActCapByDayRec."Resource Type"::Plant);
        ELSE
          ReqActCapByDayRec.SETRANGE("Resource Type", ReqActCapByDayRec."Resource Type"::Discipline);
      END;
      IF StartDate = EndDate THEN
        ReqActCapByDayRec.SETRANGE(Date, StartDate)
      ELSE
        ReqActCapByDayRec.SETRANGE(Date, StartDate, EndDate);
    END;

    PROCEDURE SetAssignCellFiltersAndKey@1100525006(VAR AssignActCapByDayRec@1100525006 : Record 11125711;Level@1100525005 : ',Project,ProjActivity,ProjTeamtype,ProjDiscipline,ProjPlanttype,TeamType,Discipline,PlantType,,,,,,,,,,,,,Employee,Team,PlantNo';StartDate@1100525003 : Date;EndDate@1100525002 : Date;ProjNo@1100525001 : Code[20];Code1@1100525000 : Code[20];Code2@1100525004 : Code[20]);
    BEGIN
      //* Level (always by period):
      //*  Same as in function 'SetRequestCellFiltersAndKey'
      //*    1: Project
      //*    2: Project/Activity
      //*    3: Project/Team Type
      //*    4: Project/Discipline
      //*    5: Project/Plant Type
      //*    6: Team Type
      //*    7: Discipline
      //*    8: Plant Type
      //*  Extra levels
      //*   21: Employee
      //*   22: Team
      //*   23: PlantNo

      CASE Level OF
        Level::Project,
        Level::ProjPlanttype:
          AssignActCapByDayRec.SETCURRENTKEY("Project No.", "Resource Type", "Resource Code", "Plant No.", Date);
        Level::ProjActivity:
          AssignActCapByDayRec.SETCURRENTKEY("Project No.", "Activity Code", "Resource Type", Date);
        Level::ProjTeamtype:
          AssignActCapByDayRec.SETCURRENTKEY("Project No.", "Team Type Code", "Resource Type", Date);
        Level::ProjDiscipline:
          AssignActCapByDayRec.SETCURRENTKEY("Project No.", Discipline, Date);
        Level::Employee,
        Level::PlantType,
        Level::PlantNo:
          AssignActCapByDayRec.SETCURRENTKEY("Resource Type", "Resource Code", "Plant No.", Date);
        Level::Discipline:
          AssignActCapByDayRec.SETCURRENTKEY(Discipline, Date);
        Level::TeamType,
        Level::Team:
          AssignActCapByDayRec.SETCURRENTKEY("Team Type Code", "Team Code", "Resource Type", Date);
      END;
      CASE Level OF
        Level::Project,
        Level::ProjActivity,
        Level::ProjTeamtype,
        Level::ProjDiscipline,
        Level::ProjPlanttype:
          AssignActCapByDayRec.SETRANGE("Project No.", ProjNo);
      END;
      CASE Level OF
        Level::ProjActivity:
          AssignActCapByDayRec.SETRANGE("Activity Code", Code1);
        Level::ProjDiscipline,
        Level::Discipline:
          AssignActCapByDayRec.SETRANGE(Discipline, Code1);
        Level::Employee,
        Level::ProjPlanttype,
        Level::PlantType,
        Level::PlantNo:
          AssignActCapByDayRec.SETRANGE("Resource Code", Code1);
        Level::ProjTeamtype,
        Level::TeamType:
          AssignActCapByDayRec.SETRANGE("Team Type Code", Code1);
        Level::Team:
          AssignActCapByDayRec.SETRANGE("Team Code", Code1);
      END;
      CASE Level OF
        Level::PlantNo:
          AssignActCapByDayRec.SETRANGE("Plant No.", Code2);
      END;

      CASE Level OF
        Level::ProjPlanttype,
        Level::PlantType,
        Level::PlantNo:
          AssignActCapByDayRec.SETRANGE("Resource Type", AssignActCapByDayRec."Resource Type"::Plant);
        Level::ProjDiscipline,
        Level::Discipline:
          AssignActCapByDayRec.SETRANGE("Resource Type");  //* Reset filter
        ELSE
          AssignActCapByDayRec.SETRANGE("Resource Type", AssignActCapByDayRec."Resource Type"::Employee);
      END;
      IF StartDate = EndDate THEN
        AssignActCapByDayRec.SETRANGE(Date, StartDate)
      ELSE
        AssignActCapByDayRec.SETRANGE(Date, StartDate, EndDate);
    END;

    BEGIN
    END.
  }
}

