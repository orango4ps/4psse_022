OBJECT Table 11229433 Item Operation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               ItemOperationFormula@1100529602 : Record 11229434;
               ItemOperationPerProject@1100529600 : Record 11229435;
               OperationCodeByItem@1100529601 : Record 11229436;
             BEGIN
               ItemOperationFormula.SETRANGE("Item Operation Code", Code);
               ItemOperationFormula.DELETEALL;

               ItemOperationPerProject.SETRANGE("Item Operation Code", Code);
               ItemOperationPerProject.DELETEALL;

               OperationCodeByItem.SETRANGE("Item Operation Code", Code);
               OperationCodeByItem.DELETEALL;
             END;

    CaptionML=ENU=Item Operation;
    LookupPageID=Page11129942;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              SVE=Pris];
                                                   AutoFormatType=2 }
    { 40  ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor;
                                                              SVE=Leverant”r] }
    { 50  ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Cost Type" <> xRec."Cost Type" THEN
                                                                  "Global Dimension 2 Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=" ,Material,Subcontracting,Plant,Sundry";
                                                                    SVE=" ,Material,Underentreprenad,Maskin,Diverse"];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
    { 60  ;   ;Global Dimension 2 Code;Code20     ;TableRelation=IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                              Global Dimension No.=CONST(2),
                                                                                                                              Blocked=CONST(No))
                                                                                                                              ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                      Global Dimension No.=CONST(2),
                                                                                                                                                                                                      Blocked=CONST(No))
                                                                                                                                                                                                      ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                                     Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                     Blocked=CONST(No))
                                                                                                                                                                                                                                                                     ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                                     Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                     Blocked=CONST(No))
                                                                                                                                                                                                                                                                                                                                     ELSE "Dimension Value".Code WHERE (Cost Type=FILTER(Material|Subcontracting|Plant|Sundry),
                                                                                                                                                                                                                                                                                                                                                                        Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                                                        Blocked=CONST(No));
                                                   OnValidate=VAR
                                                                DimMgt@1100529600 : Codeunit 408;
                                                                DimValue@1100529601 : Record 349;
                                                              BEGIN
                                                                IF "Global Dimension 2 Code" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Global Dimension 2 Code", DimValue, TRUE, '');
                                                                  DimValue.TESTFIELD(Blocked, FALSE);
                                                                  IF DimValue."Cost Type" IN [DimValue."Cost Type"::Labor, DimValue."Cost Type"::Revenue] THEN
                                                                    DimValue.FIELDERROR("Cost Type");
                                                                  "Cost Type" := DimValue."Cost Type";
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 70  ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              SVE=Enhetskod] }
    { 80  ;   ;Rounding Quantity   ;Integer       ;CaptionML=ENU=Rounding Quantity;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 90  ;   ;Minimum Quantity    ;Decimal       ;CaptionML=[ENU=Minimum Quantity;
                                                              SVE=Minimiantal] }
    { 100 ;   ;Rounding Amount     ;Integer       ;CaptionML=[ENU=Rounding Amount;
                                                              SVE=Avrundningsbelopp];
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 110 ;   ;Minimum Amount      ;Decimal       ;CaptionML=[ENU=Minimum Amount;
                                                              SVE=Minimibelopp];
                                                   AutoFormatType=1 }
    { 120 ;   ;Minimum Length      ;Decimal       ;CaptionML=ENU=Minimum Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 130 ;   ;Minimum Width       ;Decimal       ;CaptionML=ENU=Minimum Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 140 ;   ;Minimum Height      ;Decimal       ;CaptionML=ENU=Minimum Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 150 ;   ;3 Measurement Calculation;Boolean  ;CaptionML=ENU=3 Measurement Calculation }
    { 160 ;   ;New Order Line      ;Boolean       ;CaptionML=ENU=New Order Line }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1100529600 : Record 98;
      HasGotGLSetup@1100529601 : Boolean;

    PROCEDURE GetFormulaText@1100529604() FormulaText : Text;
    VAR
      LocItemOperationFormula@1100529601 : Record 11229434;
    BEGIN
      FormulaText := '';
      IF Code = '' THEN
        EXIT;
      LocItemOperationFormula.SETRANGE("Item Operation Code", Code);
      IF LocItemOperationFormula.ISEMPTY THEN
        EXIT;

      LocItemOperationFormula.SETAUTOCALCFIELDS("Field Caption");
      LocItemOperationFormula.FINDSET;
      REPEAT
        CASE LocItemOperationFormula."Line Type" OF
          LocItemOperationFormula."Line Type"::Operator:
            IF LocItemOperationFormula.Operator <> LocItemOperationFormula.Operator::" " THEN BEGIN
              IF FormulaText <> '' THEN
                FormulaText := FormulaText + ' ';
              FormulaText := FormulaText + FORMAT(LocItemOperationFormula.Operator);
            END;
          LocItemOperationFormula."Line Type"::Value:
            IF (LocItemOperationFormula."Table ID" IN [DATABASE::"Trade Item", DATABASE::"Purchase Line Detail"]) AND
               (LocItemOperationFormula."Field No." <> 0)
            THEN BEGIN
              IF FormulaText <> '' THEN
                FormulaText := FormulaText + ' ';
              IF LocItemOperationFormula."Table ID" = DATABASE::"Trade Item" THEN
                FormulaText := FormulaText + '[' + LocItemOperationFormula."Field Caption" + ']'
              ELSE
                FormulaText := FormulaText + '[Imp' + LocItemOperationFormula."Field Caption" + ']'
            END;
        END;
      UNTIL LocItemOperationFormula.NEXT = 0;
    END;

    PROCEDURE LookupFormula@1100529601();
    VAR
      ItemOperationsFormula@1100529600 : Page 11129943;
    BEGIN
      IF Code = '' THEN
        EXIT;
      ItemOperationsFormula.SetItemOperationsCode(Code);
      ItemOperationsFormula.RUNMODAL;
    END;

    PROCEDURE CalcFormulaValue@1100529607(SourceAdviceOrderLine@1100529608 : Record 11012055;VAR UpdateAdviceOrderLine@1100529607 : Record 11012055);
    VAR
      LocItemOperationFormula@1100529600 : Record 11229434;
      TmpItemOperationFormula@1100529601 : TEMPORARY Record 11229434;
      LocTradeItem@1100529606 : Record 11012317;
      LocPurchaseLineDetail@1100529605 : Record 11020660;
      ProjectCurrencyExchangeRate@1100529604 : Record 11020628;
      LocLineNo@1100529602 : Integer;
      CalculatedAmount@1100529603 : Decimal;
    BEGIN
      IF Code = '' THEN
        EXIT;

      LocItemOperationFormula.SETRANGE("Item Operation Code", Code);
      IF LocItemOperationFormula.ISEMPTY THEN
        EXIT;
      LocItemOperationFormula.CheckFormula(Code);

      IF NOT LocTradeItem.GET(SourceAdviceOrderLine."Vendor (Trade Item)", SourceAdviceOrderLine."Trade Item") THEN
        CLEAR(LocTradeItem);
      IF NOT LocPurchaseLineDetail.GET(LocPurchaseLineDetail."Line Type"::"Advice Order",
                                       SourceAdviceOrderLine."Record Type", SourceAdviceOrderLine."Project No.",
                                       SourceAdviceOrderLine."Yard No.", SourceAdviceOrderLine."System No.",
                                       SourceAdviceOrderLine."Entity Type", SourceAdviceOrderLine."Entity No.",
                                       SourceAdviceOrderLine."Service Order No.", '', SourceAdviceOrderLine."Line No.")
      THEN
        CLEAR(LocPurchaseLineDetail);

      LocItemOperationFormula.FINDSET;
      REPEAT
        LocLineNo += 1;
        TmpItemOperationFormula := LocItemOperationFormula;
        TmpItemOperationFormula."Line No." := LocLineNo;
        TmpItemOperationFormula."Line Value" := GetLineValue(LocItemOperationFormula, LocTradeItem, LocPurchaseLineDetail);
        TmpItemOperationFormula."Operand No." := 0;
        TmpItemOperationFormula.INSERT;
      UNTIL LocItemOperationFormula.NEXT = 0;

      ProcessOperator(TmpItemOperationFormula, TmpItemOperationFormula.Operator::"*");
      ProcessOperator(TmpItemOperationFormula, TmpItemOperationFormula.Operator::"/");
      ProcessOperator(TmpItemOperationFormula, TmpItemOperationFormula.Operator::"+");
      ProcessOperator(TmpItemOperationFormula, TmpItemOperationFormula.Operator::"-");
      TmpItemOperationFormula.RESET;
      IF NOT TmpItemOperationFormula.FINDFIRST THEN
        EXIT;

      IF "New Order Line" THEN BEGIN
        UpdateAdviceOrderLine."Price (LCY)" := GetUnitPrice(UpdateAdviceOrderLine."Project No.", UpdateAdviceOrderLine."Order Date");
        UpdateAdviceOrderLine."Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(UpdateAdviceOrderLine."Price (LCY)", FALSE, TRUE,
                                                                                               UpdateAdviceOrderLine."Currency Code", UpdateAdviceOrderLine."Project No.", '', 0D);
      END;

      IF "3 Measurement Calculation" THEN BEGIN
        UpdateAdviceOrderLine."Quantity (Advice)" := Get3MeasurementValue(TmpItemOperationFormula."Line Value");
        UpdateAdviceOrderLine."Amount (LCY)" := ROUND(UpdateAdviceOrderLine."Quantity (Advice)" * UpdateAdviceOrderLine."Price (LCY)", GetRounding(1));
      END ELSE BEGIN
        UpdateAdviceOrderLine."Quantity (Advice)" := ROUND(SourceAdviceOrderLine."Quantity (Advice)" *
                                                           GetMinValue(TmpItemOperationFormula."Line Value", "Minimum Quantity"),
                                                           GetRounding(0));
        CalculatedAmount := ROUND(UpdateAdviceOrderLine."Quantity (Advice)" * UpdateAdviceOrderLine."Price (LCY)", GetRounding(1));
        UpdateAdviceOrderLine."Amount (LCY)" := ROUND(GetMinValue(CalculatedAmount, "Minimum Amount"), GetRounding(1));
        IF (UpdateAdviceOrderLine."Amount (LCY)" > CalculatedAmount) AND (UpdateAdviceOrderLine."Price (LCY)" <> 0) THEN
          UpdateAdviceOrderLine."Quantity (Advice)" := ROUND(UpdateAdviceOrderLine."Amount (LCY)" / UpdateAdviceOrderLine."Price (LCY)", GetRounding(0));
      END;

      UpdateAdviceOrderLine."Amount (FCY)" := ROUND(UpdateAdviceOrderLine."Quantity (Advice)" * UpdateAdviceOrderLine."Price (FCY)", GetRounding(1));
    END;

    LOCAL PROCEDURE GetLineValue@1100529608(ItemOperationFormula@1100529602 : Record 11229434;TradeItem@1100529600 : Record 11012317;PurchaseLineDetail@1100529601 : Record 11020660) : Decimal;
    BEGIN
      CASE ItemOperationFormula."Table ID" OF
        DATABASE::"Trade Item":
          CASE ItemOperationFormula."Field No." OF
            TradeItem.FIELDNO(Length):
              EXIT(GetMinValue(TradeItem.Length, "Minimum Length"));
            TradeItem.FIELDNO(Width):
              EXIT(GetMinValue(TradeItem.Width, "Minimum Width"));
            TradeItem.FIELDNO(Height):
              EXIT(GetMinValue(TradeItem.Height, "Minimum Height"));
            TradeItem.FIELDNO("Gross Weight"):
              EXIT(TradeItem."Gross Weight");
            TradeItem.FIELDNO("Total Circumference"):
              EXIT(TradeItem."Total Circumference");
            TradeItem.FIELDNO("Outer Circumference"):
              EXIT(TradeItem."Outer Circumference");
            TradeItem.FIELDNO("Other Circumference"):
              EXIT(TradeItem."Other Circumference");
          END;

        DATABASE::"Purchase Line Detail":
          CASE ItemOperationFormula."Field No." OF
            PurchaseLineDetail.FIELDNO(Length):
              EXIT(GetMinValue(PurchaseLineDetail.Length, "Minimum Length"));
            PurchaseLineDetail.FIELDNO(Width):
              EXIT(GetMinValue(PurchaseLineDetail.Width, "Minimum Width"));
            PurchaseLineDetail.FIELDNO(Weight):
              EXIT(PurchaseLineDetail.Weight);
            PurchaseLineDetail.FIELDNO(Thickness):
              EXIT(PurchaseLineDetail.Thickness);
          END;
      END;

      EXIT(0);
    END;

    LOCAL PROCEDURE GetMinValue@1100529611(Value@1100529600 : Decimal;MinValueSetup@1100529601 : Decimal) : Decimal;
    BEGIN
      IF "3 Measurement Calculation" THEN
        EXIT(Value);
      IF (MinValueSetup <> 0) AND (Value < MinValueSetup) THEN
        EXIT(MinValueSetup);
      EXIT(Value);
    END;

    LOCAL PROCEDURE ProcessOperator@1100529606(VAR TmpItemOperationFormula@1100529600 : TEMPORARY Record 11229434;FilterOperator@1100529602 : Option);
    VAR
      LocTmpItemOperationFormula@1100529601 : TEMPORARY Record 11229434;
      LocLineNo@1100529603 : Integer;
      LocValue@1100529604 : Decimal;
    BEGIN
      TmpItemOperationFormula.SETRANGE(Operator, FilterOperator);
      IF TmpItemOperationFormula.ISEMPTY THEN
        EXIT;

      TmpItemOperationFormula.SETRANGE(Operator);
      TmpItemOperationFormula.FINDSET;
      REPEAT
        LocTmpItemOperationFormula := TmpItemOperationFormula;
        LocTmpItemOperationFormula.INSERT;

        IF TmpItemOperationFormula."Line No." = LocLineNo THEN BEGIN
          LocTmpItemOperationFormula."Operand No." := 3;
          LocTmpItemOperationFormula.MODIFY;
        END;

        IF TmpItemOperationFormula.Operator = FilterOperator THEN BEGIN
          LocTmpItemOperationFormula."Operand No." := 2;
          LocTmpItemOperationFormula.MODIFY;

          LocTmpItemOperationFormula.GET(TmpItemOperationFormula."Item Operation Code", TmpItemOperationFormula."Line No." - 1);
          LocTmpItemOperationFormula."Operand No." := 1;
          LocTmpItemOperationFormula.MODIFY;

          LocLineNo := TmpItemOperationFormula."Line No." + 1;
        END;

      UNTIL TmpItemOperationFormula.NEXT = 0;

      TmpItemOperationFormula.RESET;
      TmpItemOperationFormula.DELETEALL;
      LocLineNo := 0;

      LocTmpItemOperationFormula.RESET;
      LocTmpItemOperationFormula.FINDSET;
      REPEAT
        CASE LocTmpItemOperationFormula."Operand No." OF
          0:
            BEGIN
              LocLineNo += 1;
              TmpItemOperationFormula := LocTmpItemOperationFormula;
              TmpItemOperationFormula."Line No." := LocLineNo;
              TmpItemOperationFormula.INSERT;
            END;

          1:
            LocValue := LocTmpItemOperationFormula."Line Value";

          3:
            BEGIN
              LocLineNo += 1;
              TmpItemOperationFormula."Item Operation Code" := LocTmpItemOperationFormula."Item Operation Code";
              TmpItemOperationFormula."Line No." := LocLineNo;
              TmpItemOperationFormula."Line Type" := TmpItemOperationFormula."Line Type"::Value;
              TmpItemOperationFormula.Operator := TmpItemOperationFormula.Operator::" ";

              CASE FilterOperator OF
                TmpItemOperationFormula.Operator::"*":
                  TmpItemOperationFormula."Line Value" := LocValue * LocTmpItemOperationFormula."Line Value";
                TmpItemOperationFormula.Operator::"/":
                  TmpItemOperationFormula."Line Value" := LocValue / LocTmpItemOperationFormula."Line Value";
                TmpItemOperationFormula.Operator::"+":
                  TmpItemOperationFormula."Line Value" := LocValue + LocTmpItemOperationFormula."Line Value";
                TmpItemOperationFormula.Operator::"-":
                  TmpItemOperationFormula."Line Value" := LocValue - LocTmpItemOperationFormula."Line Value";
              END;
              TmpItemOperationFormula.INSERT;
            END;
        END;
      UNTIL LocTmpItemOperationFormula.NEXT = 0;
    END;

    LOCAL PROCEDURE GetUnitPrice@1100529600(ProjectNo@1100529600 : Code[20];SearchDate@1100529602 : Date) : Decimal;
    VAR
      ItemOperationPerProject@1100529601 : Record 11229435;
    BEGIN
      IF ProjectNo <> '' THEN BEGIN
        ItemOperationPerProject.SETRANGE("Item Operation Code", Code);
        ItemOperationPerProject.SETRANGE("Project No.", ProjectNo);
        IF SearchDate = 0D THEN
          SearchDate := TODAY;
        ItemOperationPerProject.SETFILTER("Valid From", '>=%1', SearchDate);
        IF ItemOperationPerProject.FINDLAST THEN
          EXIT(ItemOperationPerProject."Unit Price");
      END;
      EXIT("Unit Price");
    END;

    LOCAL PROCEDURE Get3MeasurementValue@1100529609(FormulaValue@1100529600 : Decimal) CalculatedValue : Decimal;
    VAR
      LocValue@1100529601 : Integer;
    BEGIN
      IF NOT "3 Measurement Calculation" THEN
        EXIT;
      IF ("Minimum Quantity" <> 0) AND (FormulaValue < "Minimum Quantity") THEN
        CalculatedValue := "Minimum Quantity"
      ELSE
        CalculatedValue := FormulaValue;
      CalculatedValue := ROUND(CalculatedValue, 0.1);
      IF CalculatedValue = 0 THEN
        EXIT;
      LocValue := CalculatedValue * 10;
      WHILE (LocValue MOD 3 <> 0) DO
        LocValue += 1;
      CalculatedValue := ROUND(LocValue / 10, 0.1);
    END;

    LOCAL PROCEDURE GetGLSetup@1100529603();
    BEGIN
      IF HasGotGLSetup THEN
        EXIT;
      GLSetup.GET;
      HasGotGLSetup := TRUE;
    END;

    LOCAL PROCEDURE GetRounding@1100529614(RoundingType@1100529601 : 'Quantity,Amount') RoundingPrecision : Decimal;
    VAR
      LocRounding@1100529600 : Integer;
      i@1100529602 : Integer;
    BEGIN
      GetGLSetup;
      CASE RoundingType OF
        RoundingType::Quantity:
          BEGIN
            LocRounding := "Rounding Quantity";
            RoundingPrecision := GLSetup."Unit-Amount Rounding Precision";
          END;
        RoundingType::Amount:
          BEGIN
            LocRounding := "Rounding Amount";
            RoundingPrecision := GLSetup."Amount Rounding Precision";
          END;
      END;

      IF LocRounding <= 0 THEN
        EXIT;

      RoundingPrecision := 1;
      FOR i := 1 TO LocRounding DO
        RoundingPrecision := RoundingPrecision / 10;
    END;

    BEGIN
    END.
  }
}

