OBJECT Codeunit 11012571 Plant Hours Costs-Post
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    TableNo=11012577;
    Permissions=TableData 36=m,
                TableData 37=m,
                TableData 39=imd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 223=imd,
                TableData 5805=imd,
                TableData 6650=imd,
                TableData 6651=imd;
    OnRun=BEGIN
            PlantHourCost.COPY(Rec);
            WITH PlantHourCost DO BEGIN
              InitProcess;
              InitProcessByHeader;

              LineCount := 0;
              Window.OPEN('#1############################\\' + Text000);

              PlantHourCostLine.RESET;
              PlantHourCostLine.SETRANGE(Year,Year);
              PlantHourCostLine.SETRANGE(Week,Week);
              PlantHourCostLine.SETRANGE("Employee Company","Employee Company");
              PlantHourCostLine.SETRANGE("Employee No.","Employee No.");
              PlantHourCostLine.SETRANGE(Status,PlantHourCostLine.Status::Open);

              IF PlantHourCostLine.FINDSET(TRUE,FALSE) THEN
                REPEAT
                  IF PlantHourCostLine."Plant Type" <> '' THEN //**4PS,sn, SR, 10-12-13 Melding C004021
                    PlantHourCostLine.ValidatePlantNo; //**4PS,en
                  Window.UPDATE(1,STRSUBSTNO('%1 %2 %3',
                    PlantHourCostLine."Plant Type",PlantHourCostLine."Plant No.",PlantHourCostLine."Cost Component"));
                  LineCount := LineCount + 1;
                  Window.UPDATE(2,LineCount);
                  ProcessLine(GenJnlPostLine, COMPANYNAME);
                UNTIL PlantHourCostLine.NEXT = 0;

              COMMIT;

              CLEAR(GenJnlPostLine);
              CLEAR(PostPlantEntry);
              Window.CLOSE;
            END;
            Rec := PlantHourCost;
          END;

  }
  CODE
  {
    VAR
      Text000@1008 : TextConst 'ENU=Posting lines         #2######;NOR=Bokf›ring rader         #2######;SVE=Bokf”ring rader            #2######';
      GLSetup@1038 : Record 98;
      GLEntry@1039 : Record 17;
      PlantHourCost@1040 : Record 11012577;
      PlantHourCostLine@1041 : Record 11012578;
      GenJnlLine@1061 : Record 81;
      GenJnlLine2@1100525005 : Record 81;
      PlantLedgerEntry@1210190000 : Record 11012572;
      PlantTypeRec@1210190006 : Record 11012551;
      PlantNoRec@1100525006 : Record 11012552;
      PlantPostingSetup@1210190005 : Record 11012570;
      PlantSetup@1210190011 : Record 11012550;
      CostCompPlantRec@1210190010 : Record 11012575;
      WageComp@1210190012 : Record 11012014;
      TradeAssRec@1210190008 : Record 11012015;
      TradeAssRateRec@1100485000 : Record 11020269;
      EmplRec@1210190004 : Record 5200;
      IcRelRec@1100525000 : Record 11012057;
      JnlTemplRec@1100485001 : Record 80;
      GenJnlPostLine@1087 : Codeunit 12;
      PostPlantEntry@1210190002 : Codeunit 11012569;
      DimMgt@1100485090 : Codeunit 408;
      Window@1102 : Dialog;
      IC@1100525001 : Boolean;
      ICHours@1100525002 : Boolean;
      GenJnlLineDocNo@1105 : Code[20];
      AccountNo@1210190007 : Code[20];
      CoverageAccountNo@1210190014 : Code[20];
      LineCount@1109 : Integer;
      DocumentDate@1210190001 : Date;
      PostingDate@1210190003 : Date;
      Text001@1210190009 : TextConst 'ENU=%1-%2;NOR=%1-%2;SVE=%1-%2';
      Text003@1100485002 : TextConst 'ENU=Hours %1;NOR=Timer %1;SVE=Timmar %1';
      gvJournalTemplateName@1100525003 : Code[20];
      gvJournalBatchName@1100525004 : Code[20];
      SaveEmplCompany@1210190013 : Text[30];

    PROCEDURE PostBatch@1100525000(VAR LineRec@1100525000 : Record 11012578);
    BEGIN
      PlantHourCostLine.COPY(LineRec);
      WITH PlantHourCostLine DO BEGIN
        InitProcess;
        CLEAR(PlantHourCost);

        LineCount := 0;
        Window.OPEN('#1############################\\' + Text000);

        PlantHourCostLine.SETRANGE(Status,PlantHourCostLine.Status::Open);
        IF PlantHourCostLine.FINDSET(TRUE,FALSE) THEN
          REPEAT
            Window.UPDATE(1,STRSUBSTNO('%1 %2 %3',
              PlantHourCostLine."Plant Type",PlantHourCostLine."Plant No.",PlantHourCostLine."Cost Component"));
            LineCount := LineCount + 1;
            Window.UPDATE(2,LineCount);
            IF (Year <> PlantHourCost.Year) OR (Week <> PlantHourCost.Week) OR
               ("Employee Company" <> PlantHourCost."Employee Company") OR ("Employee No." <> PlantHourCost."Employee No.")
            THEN BEGIN
              PlantHourCost.GET(Year, Week, "Employee Company", "Employee No.");
              InitProcessByHeader;
            END;
            ProcessLine(GenJnlPostLine, COMPANYNAME);
          UNTIL PlantHourCostLine.NEXT = 0;

        COMMIT;

        CLEAR(GenJnlPostLine);
        CLEAR(PostPlantEntry);
        Window.CLOSE;
      END;
    END;

    PROCEDURE PostHourAcc@1100485004(IYear@1100525004 : Integer;IWeek@1100525003 : Integer;IEmplComp@1100525001 : Text[30];IEmplNo@1100525002 : Code[20];ILineNo@1100525000 : Integer;IDocNo@1100485002 : Code[20];VAR GenJnlPostLine@1100485001 : Codeunit 12);
    VAR
      lvEmplComp@1100525005 : Text[30];
    BEGIN
      WITH PlantHourCostLine DO BEGIN
        InitProcess;
        IF (IEmplComp = '') OR (IEmplComp = COMPANYNAME) THEN
          lvEmplComp := ''
        ELSE
          lvEmplComp := IEmplComp;
        RESET;
        SETRANGE(Year, IYear);
        SETRANGE(Week, IWeek);
        SETRANGE("Employee Company", lvEmplComp);
        SETRANGE("Employee No.", IEmplNo);
        SETRANGE("Line No.", ILineNo);
        SETRANGE(Status,Status::Open);
        IF FINDFIRST THEN BEGIN
          PlantHourCost.GET(Year, Week, lvEmplComp, "Employee No.");
          InitProcessByHeader;
          IF IDocNo <> '' THEN
            GenJnlLineDocNo := IDocNo;  //* Zelfde als die uit HourAcc ivm Navigeren (URENJJJJ-PP ipv JJJJ-WW)
          ProcessLine(GenJnlPostLine, COMPANYNAME);
        END;
      END;
    END;

    PROCEDURE PostHourAccFromTemp@1100525002(VAR lvTempPlantHoursCostRec@1100525006 : TEMPORARY Record 11012578;IYear@1100525004 : Integer;IWeek@1100525003 : Integer;IReceivingComp@1100525001 : Text[30];IEmplNo@1100525002 : Code[20];ILineNo@1100525000 : Integer;IDocNo@1100485002 : Code[20];VAR GenJnlPostLine@1100485001 : Codeunit 12);
    BEGIN
      WITH lvTempPlantHoursCostRec DO BEGIN

        InitProcessFromTemp(IReceivingComp);

        RESET;
        SETRANGE(Year, IYear);
        SETRANGE(Week, IWeek);
        SETRANGE("Employee No.", IEmplNo);
        SETRANGE("Line No.", ILineNo);
        SETRANGE(Status,Status::Open);
        IF FINDFIRST THEN BEGIN
          PlantHourCost.INIT;
          PlantHourCost."Employee No." := IEmplNo;
          PlantHourCost.Year := IYear;
          PlantHourCost.Week := IWeek;
          //PlantHourCost Record NIET wegschrijven

          InitProcessByHeader;  //IC mag niet TRUE worden, dus moet "Employee Company" leeg blijven

          IcRelRec.GET(COMPANYNAME, IReceivingComp);
          IcRelRec.TESTFIELD("Supplying Company IC Account");
          IcRelRec.TESTFIELD("Receiving Company IC Account");

          IF IDocNo <> '' THEN
            GenJnlLineDocNo := IDocNo;  //* Zelfde als die uit HourAcc ivm Navigeren (URENJJJJ-PP ipv JJJJ-WW)

          ICHours := TRUE;
          //De bedoeling is dat er een journaalpost wordt aangemaakt in het leverende bedijf
          //En een RC mutatie in het ontvangende bedrijf.
          PlantHourCostLine.TRANSFERFIELDS(lvTempPlantHoursCostRec);

          ProcessLine(GenJnlPostLine, IReceivingComp);

          ICHours := FALSE;

        END;
      END;
    END;

    PROCEDURE InitProcess@1100485006();
    BEGIN
      GLSetup.GET;
      PlantSetup.GET;
      IF JnlTemplRec.GET(PlantSetup."Hours Costs Journal Template") THEN;

      gvJournalTemplateName := PlantSetup."Hours Costs Journal Template";
      gvJournalBatchName    := PlantSetup."Hours Costs Journal Batch";

      PlantHourCostLine.LOCKTABLE;
      GLEntry.LOCKTABLE;
      IF GLEntry.FINDLAST THEN;
    END;

    PROCEDURE InitProcessFromTemp@1100525003(IReceivingComp@1100525001 : Text[30]);
    VAR
      HumanResourcesSetup@1100525000 : Record 5218;
    BEGIN
      GLSetup.GET;
      HumanResourcesSetup.GET;

      IF JnlTemplRec.GET(HumanResourcesSetup."Hours Journal Template") THEN;

      PlantSetup.CHANGECOMPANY(IReceivingComp);
      PlantSetup.GET;

      gvJournalTemplateName := HumanResourcesSetup."Hours Journal Template";
      gvJournalBatchName    := HumanResourcesSetup."Hours Journal Batch";

      //om te vermijden dat later de verkeerde broncode wordt gebruikt.
      PlantSetup."Source Code Hours Costs" := JnlTemplRec."Source Code";

      GLEntry.LOCKTABLE;
      IF GLEntry.FINDLAST THEN;
    END;

    PROCEDURE InitProcessByHeader@1100525001();
    VAR
      EmplCompany@1210190000 : Text[30];
    BEGIN
      WITH PlantHourCost DO BEGIN
        TESTFIELD("Employee No.");
        TESTFIELD(Year);
        TESTFIELD(Week);
        DocumentDate := DWY2DATE(1, Week, Year);
        PostingDate := DWY2DATE(5, Week, Year);
        IC := FALSE;
        IF ("Employee Company" <> '') THEN BEGIN
          IC := TRUE;
      //  IcRelRec.GET(COMPANYNAME, "Employee Company"); //C037441.o
          IcRelRec.GET("Employee Company",COMPANYNAME);  //C037441.n
          IcRelRec.TESTFIELD("Supplying Company IC Account");
          IcRelRec.TESTFIELD("Receiving Company IC Account");
        END;
        IF ("Employee Company" <> SaveEmplCompany) THEN BEGIN
          SaveEmplCompany := "Employee Company";
          IF ("Employee Company" <> '') THEN
            EmplCompany := "Employee Company"
          ELSE
            EmplCompany := COMPANYNAME;
          EmplRec.CHANGECOMPANY(EmplCompany);
          TradeAssRec.CHANGECOMPANY(EmplCompany);
          TradeAssRateRec.CHANGECOMPANY(EmplCompany);
          WageComp.CHANGECOMPANY(EmplCompany);  //*C-019484
        END;

        EmplRec.GET("Employee No.");
        EmplRec.TESTFIELD("Trade Association");
        TradeAssRec.GET(EmplRec."Trade Association");
        TradeAssRec.TESTFIELD("Wage Coverage Account");

        TradeAssRateRec.SETRANGE("Trade Association", EmplRec."Trade Association");
        TradeAssRateRec.SETRANGE("Starting Date", 0D, PostingDate);
        //TradeAssRateRec.FINDLAST; //Error should occur when no fixed rate is present //OLD: Only read when needed (moved to ProcessLine)

        GenJnlLineDocNo := STRSUBSTNO(Text001, Year, FORMAT(Week,2));

      END;
    END;

    PROCEDURE ProcessLine@1100485000(VAR GenJnlPostLine@1100485002 : Codeunit 12;IReceivingComp@1100525003 : Text[30]);
    VAR
      lvIcEntryRec@1100525000 : Record 11012058;
      lvIcEntryRec2@1100525002 : Record 11012058;
      lvPostingSetup@1100525004 : Record 11020565;
      lvGenJnlLine@1100525007 : Record 81;
      IcDimVal@1210190000 : Record 349;
      SalesPriceReadOrderLine@1100529000 : Record 11020376;
      SalesPriceMgt@1100529001 : Codeunit 11012036;
      TableID@1100485001 : ARRAY [10] OF Integer;
      SalesPrice@1100529003 : Decimal;
      No@1100485000 : ARRAY [10] OF Code[40];
      lvWIPBalanceAccount@1100525006 : Code[20];
      lvWIPAccountCosts@1100525005 : Code[20];
      PriceFoundAt@1100529002 : Text;
    BEGIN
      // IC - boeking vanuit materieeluren, ontvangende kant ofd vanuit RC mutatie
      // IChours - boeking vanuit 'gewone'uren, leverende kant. De plantpost etc moet later vanuit de RC mutatie komen

      WITH PlantHourCostLine DO BEGIN
        //Similar tests in codeunit 11012003 Check Hour Line
        TESTFIELD("Plant Type");
        //TESTFIELD("Plant No."); //25-01-06 Plant No is allowed to be empty
        TESTFIELD("Cost Component");
        IF Type <> Type::Expenses THEN  //*C-019484.n
          TESTFIELD("Total Line")
        //*C-019484.sn
        ELSE BEGIN
          TESTFIELD(Quantity);
          TESTFIELD(Amount);
          TESTFIELD("Cost Object");
          TESTFIELD("Wage Component Expenses");
          WageComp.GET("Wage Component Expenses");
          WageComp.TESTFIELD("Bal. Account No.");
          VALIDATE("Posting Date (Exp.)");  //C015176.n
        END;
        //*C-019484.en
        DeterminePostingDate();  //C008224.s
        CALCFIELDS("Plant Description", "Cost Object Description", "Cost Object Unit of Measure");  //*C-019484.n
        IF NOT ICHours THEN BEGIN
          PlantTypeRec.GET("Plant Type");
          PlantPostingSetup.GET(
            PlantTypeRec.PlantPostingGrp("Plant No.",COMPANYNAME,''),
            '',                            // leveranciersboekingsgroep indien van toepassing
            "Cost Component");
        END ELSE BEGIN
          PlantTypeRec.CHANGECOMPANY(IReceivingComp);
          PlantNoRec.CHANGECOMPANY(IReceivingComp);  //*24969
          PlantPostingSetup.CHANGECOMPANY(IReceivingComp);
          PlantTypeRec.GET("Plant Type");
          PlantPostingSetup.GET(
            PlantTypeRec.PlantPostingGrp("Plant No.",IReceivingComp,''),
            IcRelRec."Vendor Posting Group",   // leveranciersboekingsgroep indien van toepassing
            "Cost Component");
          //*C-019484.sn
          IF ("Cost Object" <> '') AND (IReceivingComp <> '') AND (IReceivingComp <> COMPANYNAME) THEN BEGIN
            IcDimVal.CHANGECOMPANY(IReceivingComp);
            DimMgt.GetDimValueRec(2, "Cost Object", IcDimVal, FALSE, '');
            IF IcDimVal.Name <> '' THEN BEGIN
              "Cost Object Description" := IcDimVal.Name;  // Overrule flowfields if other company, so determine flowfields
              "Cost Object Unit of Measure" := IcDimVal."Unit of Measure";  // must be done before.
            END;
          END;
          //*C-019484.en
        END;
        //*24969.sn
        IF "Plant No." <> '' THEN
          PlantNoRec.GET("Plant Type", "Plant No.")
        ELSE BEGIN
          PlantNoRec.INIT;
          PlantNoRec."Plant Type" := '';
          PlantNoRec."No." := '';
        END;
        //*24969.en

        PlantPostingSetup.TESTFIELD("Plant Cost Account");
        AccountNo := PlantPostingSetup."Plant Cost Account";
        //*C-019484.sn
        IF Type <> Type::Expenses THEN
          CoverageAccountNo :=TradeAssRec."Wage Coverage Account"
        ELSE
          CoverageAccountNo := WageComp."Bal. Account No.";
        //*C-019484.sn

        IF (Origin <> Origin::HourAcc) AND (Type <> Type::Expenses) THEN BEGIN  //* Is already filled for Hours from the 'Hour Accounting'
          //"Unit Cost" := TradeAssRateRec."Cost Price";
          IF PlantSetup."Empl. Sales Rate as Hour Rate" THEN BEGIN  //DP00812
            SalesPrice := SalesPriceMgt.GetSalesPrice(
              SalesPriceReadOrderLine."Price Type"::Plant,
              '', '', '', '', '', '', "Employee Company", "Employee No.",
              '', '', '', '', '', '', PostingDate, 0, PriceFoundAt);
            IF PriceFoundAt <> '' THEN
              "Unit Cost" := SalesPrice;
          END;
          IF PriceFoundAt = '' THEN BEGIN
            TradeAssRateRec.FINDLAST; //Error should occur when no fixed rate is present (filter already set in InitProcessByHeader)
            "Unit Cost" := TradeAssRateRec."Cost Price";
          END;
        END;
        IF NOT ICHours THEN BEGIN
          CostCompPlantRec.GET(PlantPostingSetup."Cost Component");
          PostPlant;
        END;

        //Debet
        GenJnlLine.INIT;
        GenJnlLine."Journal Template Name" := gvJournalTemplateName;
        GenJnlLine."Journal Batch Name" := gvJournalBatchName;
        GenJnlLine."Reason Code" := JnlTemplRec."Reason Code";
        GenJnlLine."Source Code" := JnlTemplRec."Source Code";
        IF PlantSetup."Source Code Hours Costs" <> '' THEN
          GenJnlLine."Source Code" := PlantSetup."Source Code Hours Costs";
        GenJnlLine."Posting Date" := PostingDate;
        GenJnlLine."Document Date" := DocumentDate;
        //CALCFIELDS("Plant Description");  //*C-019484.o
        IF Type <> Type::Expenses THEN BEGIN  //*C-019484.n
          GenJnlLine.Description := "Plant Description";
          IF (Origin = Origin::HourAcc) THEN
            GenJnlLine.Description := COPYSTR(STRSUBSTNO(Text003, EmplRec."Full Name"),1,MAXSTRLEN(GenJnlLine.Description));
        //*C-019484.sn
        END ELSE BEGIN
          GenJnlLine.Description := "Cost Object Description";
          GenJnlLine.Description := COPYSTR(GenJnlLine.Description + ' ' + EmplRec."Full Name",1,MAXSTRLEN(GenJnlLine.Description));
        END;
        //*C-019484.en
        GenJnlLine."Document No." := GenJnlLineDocNo;

        IF NOT ICHours THEN
          GenJnlLine."Account No." := AccountNo
        ELSE
          GenJnlLine."Account No." := IcRelRec.GetICAccountOfCurrentCompany;

        GenJnlLine."System-Created Entry" := TRUE;
        IF Type <> Type::Expenses THEN BEGIN  //*C-019484.n
          GenJnlLine.Quantity := "Total Line";
          GenJnlLine.Amount := ROUND("Unit Cost" * GenJnlLine.Quantity);
        //*C-019484.sn
        END ELSE BEGIN
          GenJnlLine.Quantity := Quantity;
          GenJnlLine.Amount := Amount;
          GenJnlLine."Shortcut Dimension 2 Code" := "Cost Object";
        END;
        //*C-019484.en
        IF NOT IC THEN
          GenJnlLine."Employee No." := "Employee No.";
        //TableID[1] := DATABASE::"Plant Type";  //*24969.o
        //No[1] := "Plant Type";                 //*24969.o
        //*24969.sn
        CLEAR(TableID);
        CLEAR(No);
        TableID[1] := DATABASE::"Plant Number";
        No[1] := DimMgt.MakeCombinedPlantNo("Plant Type","Plant No.");
        TableID[2] := DATABASE::"Plant Type";
        No[2] := "Plant Type";
        //*24969.en
        GenJnlLine."Dimension Set ID" := DimMgt.GetDefaultDimID(                                 //DP000387 sn
          TableID,No,PlantSetup."Source Code Hours Costs",
          GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code",0,0);    //DP000387 en

        //*C-019484.sn
        IF (Type = Type::Expenses) AND (GenJnlLine."Shortcut Dimension 2 Code" <> "Cost Object") THEN BEGIN
          GenJnlLine."Shortcut Dimension 2 Code" := "Cost Object";
          DimMgt.ValidateShortcutDimValues(2,GenJnlLine."Shortcut Dimension 2 Code",GenJnlLine."Dimension Set ID");  //DP000387 n
        END;
        //*C-019484.sn
        //C037441.sn
        IF ICHours THEN
          IcRelRec.AddICRelationDimsOfCurrentCompany(
            GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
        //C037441.en

        //>>IME171
        DimMgt.SetDimensionValueChainsBool(TRUE);
        IF GenJnlLine."Shortcut Dimension 1 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(1,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Dimension Set ID");
        IF GenJnlLine."Shortcut Dimension 2 Code" <> '' THEN
          DimMgt.ValidateShortcutDimValues(2,GenJnlLine."Shortcut Dimension 2 Code",GenJnlLine."Dimension Set ID");
        DimMgt.SetDimensionValueChainsBool(FALSE);
        //<<IME171

        lvGenJnlLine := GenJnlLine; //**4PS-JTH 26-03-2010
        //
        GenJnlPostLine.RunWithCheck(GenJnlLine);
        lvGenJnlLine := GenJnlLine;

        //Credit
        GenJnlLine.INIT;
        GenJnlLine."Journal Template Name" := gvJournalTemplateName;
        GenJnlLine."Journal Batch Name" := gvJournalBatchName;
        GenJnlLine."Reason Code" := JnlTemplRec."Reason Code";
        GenJnlLine."Source Code" := JnlTemplRec."Source Code";
        IF PlantSetup."Source Code Hours Costs" <> '' THEN
          GenJnlLine."Source Code" := PlantSetup."Source Code Hours Costs";
        GenJnlLine."Posting Date" := PostingDate;
        GenJnlLine."Document Date" := DocumentDate;
        //CALCFIELDS("Plant Description");  //*C-019484.o
        IF Type <> Type::Expenses THEN BEGIN  //*C-019484.n
          GenJnlLine.Description := "Plant Description";
          IF (Origin = Origin::HourAcc) THEN
            GenJnlLine.Description := COPYSTR(STRSUBSTNO(Text003, EmplRec."Full Name"),1,MAXSTRLEN(GenJnlLine.Description));
        //*C-019484.sn
        END ELSE BEGIN
          GenJnlLine.Description := "Cost Object Description";
          GenJnlLine.Description := COPYSTR(GenJnlLine.Description + ' ' + EmplRec."Full Name",1,MAXSTRLEN(GenJnlLine.Description));
        END;
        //*C-019484.en
        GenJnlLine."Document No." := GenJnlLineDocNo;

        IF NOT IC THEN
          //GenJnlLine."Account No." := TradeAssRec."Wage Coverage Account"  //*C-019484.o
          GenJnlLine."Account No." := CoverageAccountNo  //*C-019484.n
        ELSE
          GenJnlLine."Account No." := IcRelRec.GetICAccountOfCurrentCompany;

        GenJnlLine."System-Created Entry" := TRUE;
        IF Type <> Type::Expenses THEN BEGIN  //*C-019484.n
          GenJnlLine.Quantity := "Total Line";
          GenJnlLine.Amount := -ROUND("Unit Cost" * GenJnlLine.Quantity);
        //*C-019484.sn
        END ELSE BEGIN
          GenJnlLine.Quantity := Quantity;
          GenJnlLine.Amount := -Amount;
          GenJnlLine."Shortcut Dimension 2 Code" := "Cost Object";
        END;
        //*C-019484.en
        GenJnlLine."Employee No." := "Employee No.";
        CLEAR(TableID);  //*24969.n
        CLEAR(No);  //*24969.n
        TableID[1] := DATABASE::Employee;
        No[1] := "Employee No.";
        GenJnlLine."Dimension Set ID" := DimMgt.GetDefaultDimID(                                //DP000387 sn
          TableID,No,PlantSetup."Source Code Hours Costs",
          GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code",0,0);   //DP000387 en

        GenJnlLine."Shortcut Dimension 1 Code" := EmplRec."Global Dimension 1 Code";
        DimMgt.ValidateShortcutDimValues(1,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Dimension Set ID");  //DP000387 n
        //*C-019484.sn
        IF (Type = Type::Expenses) AND (GenJnlLine."Shortcut Dimension 2 Code" <> "Cost Object") THEN BEGIN
          GenJnlLine."Shortcut Dimension 2 Code" := "Cost Object";
          DimMgt.ValidateShortcutDimValues(2,GenJnlLine."Shortcut Dimension 2 Code",GenJnlLine."Dimension Set ID");  //DP000387 n
        END;
        //*C-019484.sn
        //C037441.sn
        IF IC THEN
          IcRelRec.AddICRelationDimsOfCurrentCompany(
            GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
        //C037441.en
        GenJnlPostLine.RunWithCheck(GenJnlLine);

        IF ICHours THEN BEGIN
          //Extra onder handen werk boekingen in het leverende bedrijf, wordt toegepast in de urenkoppeling
          //Uren ingetoetst in het leverende bedrijf.
          //Deze boeking wordt alleen gemaakt als in het ontvangende bedrijf het veld:"??????? Type Receiving Comp." werd gevuld.
          //PlantPostingLine wordt niet in de tabel gezet.
          IF lvPostingSetup.GET(GenJnlLine."Source Code", COMPANYNAME, IReceivingComp) THEN BEGIN
            GenJnlLine2 := GenJnlLine;
            GenJnlLine2.Amount := - GenJnlLine2.Amount; //**4PS-JTH 31-03-2010

            //Post Debit Line
            lvPostingSetup.TESTFIELD("Prod. Account Debit");
            lvWIPBalanceAccount := lvPostingSetup."Prod. Account Debit";

            //Post Credit Line
            lvPostingSetup.TESTFIELD("Prod. Account Credit");
            lvWIPAccountCosts := lvPostingSetup."Prod. Account Credit";

            GenJnlLine2."Account No." := lvWIPBalanceAccount;
            GenJnlLine2."Bal. Account No." := lvWIPAccountCosts;

            GenJnlPostLine.RunWithoutCheck(GenJnlLine2);
          END;

        END;
      //

        IF IC THEN BEGIN
          lvIcEntryRec.INIT;
          lvIcEntryRec."Supplying Company" := "Employee Company";
          lvIcEntryRec."Receiving Company" := COMPANYNAME;
          lvIcEntryRec."Post in Company" := "Employee Company";
          lvIcEntryRec."Posting Date" := PostingDate;
          lvIcEntryRec."Document No." := GenJnlLine."Document No.";
          lvIcEntryRec."Account Type" := lvIcEntryRec."Account Type"::"G/L Account";
          //lvIcEntryRec."Account No." := TradeAssRec."Wage Coverage Account";  //*C-019484.o
          lvIcEntryRec."Account No." := CoverageAccountNo;  //*C-019484.n
          lvIcEntryRec."Bal. Account No." := IcRelRec."Supplying Company IC Account";
          lvIcEntryRec.Description := GenJnlLine.Description;
          lvIcEntryRec."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
          lvIcEntryRec."Cost Object" := GenJnlLine."Shortcut Dimension 2 Code";

          DimMgt.SetCompany(lvIcEntryRec."Post in Company");                                                           //DP00387 n
          DimMgt.ValidateShortcutDimValues(1,lvIcEntryRec."Global Dimension 1 Code",lvIcEntryRec."Dimension Set ID");  //DP00387 n
          DimMgt.ValidateShortcutDimValues(2,lvIcEntryRec."Cost Object",lvIcEntryRec."Dimension Set ID");              //DP00387 n
          DimMgt.SetCompany(COMPANYNAME);                                                                              //DP00387 n

          lvIcEntryRec.Quantity := GenJnlLine.Quantity;
          IF Type <> Type::Expenses THEN  //*C-019484.n
            lvIcEntryRec.Price := "Unit Cost"
          ELSE
            lvIcEntryRec.Price := "Unit Rate";  //*C-019484.n
          lvIcEntryRec.Amount := -GenJnlLine.Amount;
          lvIcEntryRec."Employee No." := "Employee No.";
          lvIcEntryRec."Origin Salary Application" := FALSE;

          lvIcEntryRec.AddICRelationDims(IcRelRec);

          IF lvIcEntryRec2.FINDLAST THEN
            lvIcEntryRec."Line No." := lvIcEntryRec2."Line No." + 1
          ELSE
            lvIcEntryRec."Line No." := 1;
          lvIcEntryRec.INSERT(TRUE);

        END;

        IF ICHours THEN BEGIN
          lvIcEntryRec.INIT;
          lvIcEntryRec."Supplying Company" := COMPANYNAME;
          lvIcEntryRec."Receiving Company" := IReceivingComp;
          lvIcEntryRec."Post in Company" := IReceivingComp;
          lvIcEntryRec."Posting Date" := PostingDate;
          lvIcEntryRec."Document No." := GenJnlLine."Document No.";
          lvIcEntryRec."Account Type" := lvIcEntryRec."Account Type"::"G/L Account";
          lvIcEntryRec."Account No." := IcRelRec."Receiving Company IC Account";
          lvIcEntryRec."Bal. Account No." := AccountNo;
          lvIcEntryRec.Description := GenJnlLine.Description;
          IF (PlantNoRec."No." <> '') AND (PlantNoRec."Department Code" <> '') THEN  //*24969.n
            lvIcEntryRec."Global Dimension 1 Code" := PlantNoRec."Department Code"   //*24969.n
          ELSE
            lvIcEntryRec."Global Dimension 1 Code" := PlantTypeRec."Department Code";
          lvIcEntryRec."Cost Object" := lvGenJnlLine."Shortcut Dimension 2 Code";

          DimMgt.SetCompany(lvIcEntryRec."Post in Company");                                                           //DP00387 n
          DimMgt.ValidateShortcutDimValues(1,lvIcEntryRec."Global Dimension 1 Code",lvIcEntryRec."Dimension Set ID");  //DP00387 n
          DimMgt.ValidateShortcutDimValues(2,lvIcEntryRec."Cost Object",lvIcEntryRec."Dimension Set ID");              //DP00387 n
          DimMgt.SetCompany(COMPANYNAME);                                                                              //DP00387 n

          lvIcEntryRec.Quantity := GenJnlLine.Quantity;
          IF Type <> Type::Expenses THEN  //*C-019484.n
            lvIcEntryRec.Price := "Unit Cost"
          ELSE
            lvIcEntryRec.Price := "Unit Rate";  //*C-019484.n
          lvIcEntryRec.Amount := -GenJnlLine.Amount;
          lvIcEntryRec."Cost Component Plant" := PlantHourCostLine."Cost Component";
          lvIcEntryRec."Employee No." := "Employee No.";
          lvIcEntryRec."Plant Type" := "Plant Type";
          lvIcEntryRec."Plant No." := "Plant No.";

          lvIcEntryRec."Origin Salary Application" := FALSE;

          IF lvPostingSetup.GET(GenJnlLine."Source Code", COMPANYNAME, IReceivingComp) THEN
            lvIcEntryRec."Use IC Vendor Posting Group" := TRUE;

          lvIcEntryRec.Year := Year;
          lvIcEntryRec.Week := Week;
          IF Type <> Type::Expenses THEN BEGIN  //*C-019484.n
            lvIcEntryRec."Type Plant Hour Cost" := lvIcEntryRec."Type Plant Hour Cost"::Hours;  //*C019484.n
            lvIcEntryRec.Monday := Monday;
            lvIcEntryRec.Tuesday := Tuesday;
            lvIcEntryRec.Wednesday := Wednesday;
            lvIcEntryRec.Thursday := Thursday;
            lvIcEntryRec.Friday := Friday;
            lvIcEntryRec.Saturday := Saturday;
            lvIcEntryRec.Sunday := Sunday;
          //*C-019484.sn
          END ELSE BEGIN
            lvIcEntryRec."Type Plant Hour Cost" := lvIcEntryRec."Type Plant Hour Cost"::Expenses;
            lvIcEntryRec."Wage Component" := "Wage Component Expenses";
          END;
          //*C-019484.en

          lvIcEntryRec.AddICRelationDims(IcRelRec);

          IF lvIcEntryRec2.FINDLAST THEN
            lvIcEntryRec."Line No." := lvIcEntryRec2."Line No." + 1
          ELSE
            lvIcEntryRec."Line No." := 1;

          lvIcEntryRec.INSERT(TRUE);
        END ELSE BEGIN
          Status := Status::Posted;
          MODIFY;                    // alleen als materieel uren geen tijdelijk record is.
        END;

      END;
    END;

    PROCEDURE PostPlant@1100485007();
    BEGIN
      WITH PlantLedgerEntry DO BEGIN
        INIT;
        "Reason Code" := JnlTemplRec."Reason Code";
        "Source Code" := JnlTemplRec."Source Code";
        IF PlantSetup."Source Code Hours Costs" <> '' THEN
          "Source Code" := PlantSetup."Source Code Hours Costs";
        "Vendor No." := '';
        "Document No." := GenJnlLineDocNo;
        "Posting Date" := PostingDate;
        "Document Date" := DocumentDate;
        "Account No." := AccountNo;
        IF PlantHourCostLine.Type <> PlantHourCostLine.Type::Expenses THEN BEGIN  //*C-019484.n
          Description := CostCompPlantRec.Description;
          IF (PlantHourCostLine.Origin = PlantHourCostLine.Origin::HourAcc) THEN
            Description := COPYSTR(STRSUBSTNO(Text003, EmplRec."Full Name"),1,MAXSTRLEN(Description));
          Quantity := PlantHourCostLine."Total Line";
          "Unit Cost" := PlantHourCostLine."Unit Cost";
          "Total Cost" := ROUND(PlantHourCostLine."Total Line" * "Unit Cost");
          "Cost Object" := PlantTypeRec."Cost Object";
          "Unit of Measure Code" := PlantSetup."Plant Hours Unit of Measure";
        //*C-019484.sn
        END ELSE BEGIN
          Description := PlantHourCostLine."Cost Object Description";
          Description := COPYSTR(Description + ' ' + EmplRec."Full Name",1,MAXSTRLEN(Description));
          Quantity := PlantHourCostLine.Quantity;
          "Unit Cost" := PlantHourCostLine."Unit Rate";
          "Total Cost" := PlantHourCostLine.Amount;
          "Cost Object" := PlantHourCostLine."Cost Object";
          "Unit of Measure Code" := PlantHourCostLine."Cost Object Unit of Measure";
        END;
        //*C-019484.en
        IF (PlantNoRec."No." <> '') AND (PlantNoRec."Department Code" <> '') THEN  //*24969.n
          "Department Code" := PlantNoRec."Department Code"   //*24969.n
        ELSE
          "Department Code" := PlantTypeRec."Department Code";
        //"Cost Object" := PlantTypeRec."Cost Object";  //*C-019484.o
        "Plant Posting Group" := PlantTypeRec.PlantPostingGrp(PlantHourCostLine."Plant No.",COMPANYNAME,'');
        "Plant Type" := PlantHourCostLine."Plant Type";
        "Plant No." := PlantHourCostLine."Plant No.";
        "Cost Component" := PlantHourCostLine."Cost Component";
        "Employee No." := PlantHourCostLine."Employee No.";
        PostPlantEntry.RUN(PlantLedgerEntry);
      END;
    END;

    PROCEDURE DeterminePostingDate@1100525004();
    VAR
      HrAccPostingDate@1100525000 : Record 11020202;
    BEGIN
      //C008224.n
      WITH PlantHourCostLine DO BEGIN
        IF Origin = Origin::HourAcc THEN BEGIN
          IF HrAccPostingDate.GET(Year, Week) THEN BEGIN
            IF HrAccPostingDate."Posting Date" <> 0D THEN BEGIN
              PostingDate := HrAccPostingDate."Posting Date";
              EXIT;
            END;
          END;
        END;
        PostingDate := DWY2DATE(5, Week, Year);
        IF Type <> Type::Expenses THEN BEGIN
          IF Monday <> 0 THEN PostingDate := DWY2DATE(1,Week,Year);
          IF Tuesday <> 0 THEN PostingDate := DWY2DATE(2,Week,Year);
          IF Wednesday <> 0 THEN PostingDate := DWY2DATE(3,Week,Year);
          IF Thursday <> 0 THEN PostingDate := DWY2DATE(4,Week,Year);
          IF Friday <> 0 THEN PostingDate := DWY2DATE(5,Week,Year);
          IF Saturday <> 0 THEN PostingDate := DWY2DATE(6,Week,Year);
          IF Sunday <> 0 THEN PostingDate := DWY2DATE(7,Week,Year);
        //C015176.sn
        END ELSE BEGIN
          IF "Posting Date (Exp.)" <> 0D THEN
            PostingDate := "Posting Date (Exp.)";
        //C015176.en

        END;
      END;
    END;

    BEGIN
    {
      140905 ITERO.DL IME171 Dimensions are not extended due to lack of VALIDATEs
    }
    END.
  }
}

