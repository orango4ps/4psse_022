OBJECT XMLport 81664 Imp. Rental rate IMSE
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS7.00Toolsv9;
  }
  PROPERTIES
  {
    DefaultFieldsValidation=No;
    OnInitXMLport=BEGIN
                    XMLNo :=81664;
                    MainTableID := 11012567;
                  END;

    OnPreXMLport=BEGIN
                   IF NOT currXMLport.IMPORTFILE THEN BEGIN
                     AddConversionFileFormatLine;
                     FillConversionXMLPortFields;
                     COMMIT;
                     ERROR('');
                   END;

                   ConvMgt.DeleteConComment(XMLNo);
                   ConvMgt.CreateConComment(XMLNo,'Start');
                 END;

    OnPostXMLport=BEGIN
                    IF NOT RunIsImportRunBln THEN
                      currXMLport.BREAK;

                    ConvMgt.CreateConComment(XMLNo,'Stop');
                    ConvMgt.CreateConComment(XMLNo,ConvMgt.CreateNoOfLinesCommentTxt(MainTableID,ImpLineCounter));
                  END;

    Format=Variable Text;
    FieldSeparator=[;];
  }
  ELEMENTS
  {
    { [{755F5B7F-F062-4834-8364-DC4CD51C5A62}];  ;Root                ;Element ;Text     }

    { [{A7DBD164-8D3E-4F8D-B3A0-89F91BC12205}];1 ;RentalRate          ;Element ;Table   ;
                                                  SourceTable=Table11012567;
                                                  SourceTableView=SORTING(Field5,Field10,Field15,Field20);
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              ClearFields;
                                                                            END;

                                                  Import::OnBeforeInsertRecord=VAR
                                                                                 ContactPerson@1100409000 : Record 5050;
                                                                               BEGIN
                                                                                 //ImportveldenStrippen;
                                                                                 CLEAR("Rental Rate");
                                                                                 CLEAR(PlantNumber2);
                                                                                 CLEAR(PlantNo);

                                                                                 PlantNumber2.SETRANGE("Plant Type",A);
                                                                                 PlantNumber2.SETRANGE("Inspection No.",B);
                                                                                 IF PlantNumber2.FINDFIRST THEN
                                                                                   PlantNo:=PlantNumber2."No."
                                                                                 ELSE
                                                                                   ERROR('Inspection no %1 not found',B);

                                                                                 WITH "Rental Rate" DO BEGIN

                                                                                     IF GET(0,A,PlantNo,CDate) THEN BEGIN
                                                                                       VALIDATE("Rental Rate (Days)",DDec);
                                                                                       MODIFY(TRUE);

                                                                                     END ELSE BEGIN

                                                                                       VALIDATE("Rental Type","Rental Rate"."Rental Type"::Rental);
                                                                                       VALIDATE("Plant Type",A);
                                                                                       VALIDATE("Plant No.",PlantNo);
                                                                                       VALIDATE("Starting Date",CDate);
                                                                                       INSERT(TRUE);
                                                                                       ImpLineCounter := ImpLineCounter + 1;

                                                                                       VALIDATE("Rental Rate (Days)",DDec);
                                                                                       MODIFY(TRUE);
                                                                                     END;
                                                                                 END;

                                                                                 ClearFields;
                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{5C900A9C-2240-4551-8D3B-A67A2D629F53}];2 ;A                   ;Element ;Text     }

    { [{5E5EE9AF-296C-4B48-B3A4-71FD1D3BDBB8}];2 ;B                   ;Element ;Text     }

    { [{F7C7EE25-4DCF-4DAB-9CB1-18C93E8DAEAF}];2 ;C                   ;Element ;Text    ;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF C <> '' THEN
                                                                                    EVALUATE(CDate,C);
                                                                                END;
                                                                                 }

    { [{0A1F70F9-EACA-4999-AD42-4C140F792879}];2 ;D                   ;Element ;Text    ;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF D <> '' THEN
                                                                                    EVALUATE(DDec,D);
                                                                                END;
                                                                                 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=ENU=<Imp. Plant Type>;
      OnOpenPage=BEGIN
                   RunIsImportRunBln := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1100409010;;Container;
                  Name=Imp. Employee;
                  ContainerType=ContentArea }

      { 1100409009;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

    }
  }
  CODE
  {
    VAR
      PlantTypeInspRec@1100525034 : Record 11012563;
      PlantRateRec@1100525033 : Record 11012567;
      ExistingPlantRateRec@1100525032 : Record 11012567;
      ConvMgt@1100525030 : Codeunit 11020212;
      NoSerieMgt@1100525029 : Codeunit 396;
      XMLNo@1100525027 : Integer;
      MainTableID@1100525026 : Integer;
      ImpLineCounter@1100525025 : Integer;
      ConversionFileFormat@1100525024 : Record 11020691;
      RunIsImportRunBln@1100525023 : Boolean;
      CDec@1100525020 : Decimal;
      Text001@1100525008 : TextConst 'ENU="<empty>=Rental, [1]=Sales/Buy Back, [2]=Both";SVE="<tom>=Uthyrning, [1]=F”rs„ljning/†terk”p, [2]=B†da"';
      HDec@1100285500 : Decimal;
      PlantTypeDeprBook@1100285501 : Record 11012658;
      PlantNumber2@1100285502 : Record 11012552;
      PostPlantNo@1100285503 : Codeunit 11012551;
      CDate@1100285504 : Date;
      DDec@1100285505 : Decimal;
      PlantNo@1100285506 : Code[10];

    PROCEDURE ImportveldenStrippen@1100485000();
    BEGIN
      B := DELCHR(B,'<>',' ');
    END;

    PROCEDURE AddConversionFileFormatLine@1100529901();
    VAR
      PlantTypeInspectionType@1100529901 : Record 11012563;
      RentalRate@1100529900 : Record 11012567;
    BEGIN
      // This function stores the file format into table [Conversion File Format].
      // There is no other standard documentation; so please maintain this function in case of customization.
      //
      // Parameters: 1: [Dataport No.],
      //             2: [csv-Column],
      //             3: [NAV Table ID],
      //             4: [NAV Field Name],
      //             5: [Data Type of dataport field],
      //             6: [extra Comment].
      //
      WITH ConversionFileFormat DO BEGIN
        ConversionFileFormat.DeleteColumnLines(XMLNo);
        InsertColumnLine(XMLNo,'A',MainTableID,"Rental Rate".FIELDNAME("Plant Type"),'Code20','');
        InsertColumnLine(XMLNo,'B',MainTableID,PlantNumber2.FIELDNAME("Inspection No."),'Code30','');
        InsertColumnLine(XMLNo,'C',MainTableID,"Rental Rate".FIELDNAME("Starting Date"),'Date','');
        InsertColumnLine(XMLNo,'D',MainTableID,"Rental Rate".FIELDNAME("Rental Rate (Days)"),'Decimal','');

      END;
    END;

    PROCEDURE ClearFields@1100529900();
    BEGIN
      CLEAR("Rental Rate");
      CLEAR(PlantNumber2);
      A := '';
      B := '';
      C := '';
      D := '';
      CDate := 0D;
      DDec := 0;
      PlantNo:='';
    END;

    PROCEDURE FillConversionXMLPortFields@1100409004();
    VAR
      ConversionXMLPort@1100409000 : Record 11020640;
    BEGIN
      ConversionXMLPort.GET(XMLNo);
      ConversionXMLPort."Main Table ID" := MainTableID;
      //ConversionXMLPort."Page ID" := 11012552;
      ConversionXMLPort.MODIFY;
    END;

    BEGIN
    {
      // Old No.'s are stored in Comment Table (97), marked with [CommentCde].
      // Object No is stored in [XMLNo]. In case of customisation (copy of dataport) change in OnInitDataport;
      //
      // Please use [AddConversionFileFormatLine] in case Import file format is changed.
    }
    END.
  }
}

