OBJECT Codeunit 11012047 Gen. Quote from Advice Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text002@1210190005 : TextConst 'DEU=Von den markierten Zeilen wurden bereits Anfragen erstellt oder Anfragen sind nicht zugelassen wegen des Status dieser Zeilen.;ENU=Already quotes created for the marked lines or not allowed for the status of the lines.;NLD=Van de gemarkeerde regels zijn al offertes aangemaakt of niet toegestaan voor de status van deze regels.;NOR=Allerede opprettet tilbud for markerte rader, eller ikke tillatt pÜ grunn av radenes status.;SVE=Redan skapade offerter fîr markerade rader, eller inte tillÜtna pÜ grund av radernas status.';
      Text003@1210190006 : TextConst 'DEU=Es wurde kein Kreditor ausgwÑhlt.;ENU=No Vendor selected;NLD=Er is geen leverancier geselecteerd.;NOR=Ingen leverandõr valgt;SVE=Ingen leverantîr har valts';
      Text004@1210190022 : TextConst 'DEU=Anfrage %1 wurde erstellt.\ \Mîchten Sie die Anfrage in andere Kreditoren kopieren?;ENU=Quote %1 is created.\\Do you want to copy the quote to other vendors?;NLD=Offerte %1 is aangemaakt.\ \Wilt u de offerte naar andere leveranciers kopiâren?;NOR=Tilbud %1 er opprettet.\\Vil du kopiere tilbudet til andre leverandõrer?;SVE=Offerten %1 har skapats.\\Vill du kopiera offerten till andra leverantîrer?';
      Text005@1210190000 : TextConst 'DEU=Keine Anfrage erstellt. FÅr die markierten Zeilen ist es nicht zugelassen/mîglicherweise eine Anfrage zu erstellen.;ENU=No quote created. It is not allowed/possible to create a quote for the marked lines.;NLD="Geen offerte aangemaakt. Voor de gemarkeerde regels is het niet toegestaan/mogelijk om een offerte aan te maken. ";NOR=Ingen tilbud er opprettet. Det er ikke tillatt/mulig Ü skape et tilbud for de markerte radene.;SVE=Ingen offert har skapats. Det Ñr inte tillÜtet/mîjligt att skapa en offert fîr markerade rader.';
      AdvOrderRec@1210190001 : Record 11012055;
      PurchHeadRec@1210190021 : Record 38;
      PurchLineRec@1210190020 : Record 39;
      ItemRec@1210190019 : Record 27;
      VendRec@1210190018 : Record 23;
      ProjElemRec@1210190002 : Record 11012010;
      DimValRec@1210190017 : Record 349;
      DimMgt@1210190016 : Codeunit 408;
      UOMMgt@1210190015 : Codeunit 5402;
      RouteRefMgtCU@1210190014 : Codeunit 11012045;
      VendNo@1210190013 : Code[20];
      LastRefNo@1210190011 : Code[20];
      NextLineNo@1210190008 : Integer;
      Text006@1210190024 : TextConst 'DEU=Neue Anfrage erstellen?;ENU=Generate New Quote?;NLD=Nieuwe offerte aanmaken?;NOR=Generere nytt tilbud?;SVE=Generera ny offert?';
      Text007@1210190025 : TextConst 'DEU=Es wurde keine Anfrage ausgewÑhlt.;ENU=No Quote selected;NLD=Er is geen offerte geselecteerd.;NOR=Ingen tilbud er valgt;SVE=Ingen offert har valts';
      Text008@1210190026 : TextConst 'DEU=Zeile(n) der Anfrage %1 hinzugefÅgt.;ENU=Line(s) added to Quote %1.;NLD=Regel(s) toegevoegd aan offerte %1.;NOR=Rad(er) lagt til i tilbud %1.;SVE=Rad(er) lades till i offert %1.';
      Text009@1210190004 : TextConst 'DEU=Zuerst Zeile(n) markieren;ENU=First select line(s);NLD=Selecteer eerst regel(s).;NOR=Velg rad(er) fõrst;SVE=VÑlj rad(er) fîrst';
      gHeaderNo@1100528901 : Code[20];
      desc1@1100528903 : Text[100];
      desc2@1100528902 : Text[100];
      Text012@1100528907 : TextConst 'DEU=Angebotsanfrage nicht zulÑssig fÅr eine Kombination von Kostenarten (Material, Subunternehmung und/oder Werkzeug), splitten Sie die Kalkulationszeile. \In Tabelle ''%1'', Kalkulation ''%2'', Zeilennr. ''%3''.;ENU="Ask for Quote not allowd  for a combination of cost types (material, subcontracting and/or plant), split the estimate line. \In Table ''%1'', Estimate ''%2'', Line No. ''%3''. ";NLD="Offerte aanvragen niet toegestaan voor een combinatie van kostensoorten (materiaal, onderaanneming en/of materieel), splits de calculatieregel. \In tabel ''%1'', calculatie ''%2'', regelnr. ''%3''. ";NOR=Be om tilbud tillates ikke for en kombinasjon av kosttyper (materiale, underleverandõr og/eller maskin). Del inn kalkyleraden. \I tabell ''%1'', kalkyle ''%2'', radnr ''%3''.;SVE="OffertefterfrÜgan tillÜts inte fîr en kombination av kostnadstyper (material, underentreprenad och/eller Maskin). Dela kalkylraden. \I tabell ''%1'', kalkyl ''%2'', radnr ''%3''. "';
      Text013@1100528906 : TextConst 'DEU=Anfrage %1 wurde erstellt.;ENU=Quote %1 is created.;NLD=Offerte %1 is aangemaakt.;NOR=Tilbud %1 er opprettet.;SVE=Offert %1 Ñr skapad.';
      Text014@1100528905 : TextConst 'DEU=Keine Anfrage erstellt. FÅr die markierten Zeilen ist es nicht zugelassen/mîglicherweise eine Anfrage zu erstellen.;ENU=No quote created. It is not allowed/possible to create a quote for the marked lines.;NLD="Geen offerte aangemaakt. Voor de gemarkeerde regels is het niet toegestaan/mogelijk om een offerte aan te maken. ";NOR=Ingen tilbud er opprettet. Det er ikke tillatt/mulig Ü skape et tilbud for de markerte radene.;SVE=Ingen offert har skapats. Det Ñr inte tillÜtet/mîjligt att skapa en offert fîr markerade rader.';
      Text015@1100528904 : TextConst 'DEU=Angebot %1 wurde erweitert;ENU=Quote %1 is expanded;NLD=Offerte %1 is uitgebreid;NOR=Tilbud %1 er utvidet.;SVE=Offert %1 har expanderats';

    [External]
    PROCEDURE GenerateQuoteFromAdvOrder@1210190000(VAR IAdvOrderRec@1210190000 : Record 11012055);
    VAR
      lvPurchQuoteRec@1210190002 : Record 38;
      lvVendListFrm@1210190001 : Page 27;
      lvPurchListFrm@1210190003 : Page 53;
    BEGIN
      AdvOrderRec.COPY(IAdvOrderRec);
      IF AdvOrderRec.ISEMPTY THEN
        ERROR(Text009);

      AdvOrderRec.SETRANGE(Transaction, AdvOrderRec.Transaction::Purchase);
      AdvOrderRec.SETRANGE(Processed, FALSE);
      AdvOrderRec.SETRANGE("Purchase Route Reference", '');
      AdvOrderRec.SETFILTER("Process Status", '%1|%2', AdvOrderRec."Process Status"::Open, AdvOrderRec."Process Status"::Released);
      AdvOrderRec.SETRANGE("Logistics on Component Level",FALSE);
      IF NOT AdvOrderRec.FINDSET(FALSE, FALSE) THEN
        ERROR(Text002);

      NextLineNo := 0;
      PurchHeadRec."No." := '';
      lvPurchQuoteRec."Document Type" := -1;
      lvPurchQuoteRec."No." := '';
      IF CONFIRM(Text006, TRUE) THEN BEGIN
        VendNo := '';
        lvVendListFrm.SETTABLEVIEW(VendRec);
        lvVendListFrm.LOOKUPMODE := TRUE;
        IF lvVendListFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          lvVendListFrm.GETRECORD(VendRec);
          VendNo := VendRec."No.";
        END;
        IF VendNo = '' THEN
          ERROR(Text003);
      END ELSE BEGIN
        lvPurchQuoteRec.FILTERGROUP(6);
        lvPurchQuoteRec.SETRANGE("Document Type", lvPurchQuoteRec."Document Type"::Quote);
        lvPurchQuoteRec.SETRANGE("Quote Status", lvPurchQuoteRec."Quote Status"::Application);
        lvPurchQuoteRec.FILTERGROUP(0);
        lvPurchListFrm.SETTABLEVIEW(lvPurchQuoteRec);
        lvPurchListFrm.LOOKUPMODE := TRUE;
        IF lvPurchListFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          lvPurchListFrm.GETRECORD(lvPurchQuoteRec);
          PurchHeadRec.GET(lvPurchQuoteRec."Document Type", lvPurchQuoteRec."No.");
        END;
        IF (lvPurchQuoteRec."No." = '') OR (lvPurchQuoteRec."Document Type" <> lvPurchQuoteRec."Document Type"::Quote) THEN
          ERROR(Text007);
      END;

      //Create Quote
      LastRefNo := RouteRefMgtCU.GetLastRefNo();

      REPEAT
        InsertPurchQuoteLine(AdvOrderRec);
      UNTIL (AdvOrderRec.NEXT = 0);

      RouteRefMgtCU.WriteLastRefNo(LastRefNo);

      IF (PurchHeadRec."No." = '') THEN
        MESSAGE(Text005)
      ELSE BEGIN
        IF (lvPurchQuoteRec."No." = '') THEN BEGIN
          IF CONFIRM(Text004, FALSE, PurchHeadRec."No.") THEN BEGIN
            COMMIT;
            CLEAR(lvVendListFrm);
            VendRec.RESET;
            VendRec.SETFILTER("No.", '<>%1', PurchHeadRec."Buy-from Vendor No.");
            lvVendListFrm.SETTABLEVIEW(VendRec);
            lvVendListFrm.InitSelectionCopyQuote(PurchHeadRec."No.");
            lvVendListFrm.RUNMODAL;
          END;
        END ELSE BEGIN
          MESSAGE(Text008, lvPurchQuoteRec."No.");
        END;
      END;
    END;

    [External]
    PROCEDURE InsertPurchQuoteLine@1210190006(IAdvOrderRec@1210190000 : Record 11012055);
    VAR
      PurchaseLineDetail@1100529000 : Record 11020660;
    BEGIN
      IF (PurchHeadRec."No." = '') THEN BEGIN
        PurchHeadRec.INIT;
        PurchHeadRec."Document Type" := PurchHeadRec."Document Type"::Quote;
        PurchHeadRec."No." := '';
        //DP01378.sn
        IF IAdvOrderRec."Record Type" = IAdvOrderRec."Record Type"::Project THEN
          PurchHeadRec.VALIDATE("Job No.", IAdvOrderRec."Project No.");
        IF IAdvOrderRec."Record Type" = IAdvOrderRec."Record Type"::ServOrder THEN
          PurchHeadRec.VALIDATE("Service Order No.", IAdvOrderRec."Service Order No.");
        //DP01378.en
        PurchHeadRec.VALIDATE("Buy-from Vendor No.", VendNo);
        PurchHeadRec."Document Date" := TODAY;
        PurchHeadRec.VALIDATE("Order Date", IAdvOrderRec."Order Date");
        PurchHeadRec.VALIDATE("Due Date", IAdvOrderRec."Receipt Date");
        PurchHeadRec.INSERT(TRUE);
        IF IAdvOrderRec."Global Dimension 1 Code" <> '' THEN BEGIN
          PurchHeadRec.VALIDATE("Shortcut Dimension 1 Code", IAdvOrderRec."Global Dimension 1 Code");
          PurchHeadRec.MODIFY;
        END;
      END;
      IF (NextLineNo = 0) THEN BEGIN
        PurchLineRec.LOCKTABLE;
        PurchLineRec.SETRANGE("Document Type", PurchHeadRec."Document Type");
        PurchLineRec.SETRANGE("Document No.", PurchHeadRec."No.");
        IF PurchLineRec.FINDLAST THEN
          NextLineNo := PurchLineRec."Line No." + 10000
        ELSE
          NextLineNo := 10000;
      END;

      PurchLineRec.INIT;
      PurchLineRec."Document Type"  := PurchHeadRec."Document Type";
      PurchLineRec."Document No." := PurchHeadRec."No.";
      PurchLineRec."Line No." := NextLineNo;
      PurchLineRec.INSERT(TRUE);

      PurchLineRec.VALIDATE("Currency Code", PurchHeadRec."Currency Code");
      IF IAdvOrderRec."Record Type" = IAdvOrderRec."Record Type"::Project THEN BEGIN  //DP01378
        PurchLineRec.VALIDATE("Job No.", IAdvOrderRec."Project No.");
        PurchLineRec.Element := IAdvOrderRec.Element;
        PurchLineRec."Extension Contract" := IAdvOrderRec."Extension Contract";
        PurchLineRec."Tender Paragraph" := IAdvOrderRec."Tender Paragraph";
        PurchLineRec."Tender Paragraph Part" := IAdvOrderRec."Tender Paragraph Part";
      END;
      IF IAdvOrderRec."Record Type" = IAdvOrderRec."Record Type"::ServOrder THEN BEGIN  //DP01378+C037549
        PurchLineRec.VALIDATE("Service Order No.", IAdvOrderRec."Service Order No.");
      END;
      IF IAdvOrderRec."Record Type" = IAdvOrderRec."Record Type"::"G/L Account" THEN BEGIN  //DP01378
        PurchLineRec.Type := PurchLineRec.Type::"G/L Account";
        PurchLineRec.VALIDATE("No.", IAdvOrderRec."G/L Account");
      END;
      PurchLineRec."Purchase Action" := IAdvOrderRec."Purchase Action";
      PurchLineRec."Purchase Phase" := IAdvOrderRec."Purchase Phase";
      PurchLineRec."Cost Type" := IAdvOrderRec."Cost Type" + 2;
      PurchLineRec."Shortcut Dimension 2 Code" := IAdvOrderRec."Cost Object";
      DimMgt.GetDimValueRec(2, PurchLineRec."Shortcut Dimension 2 Code", DimValRec, TRUE,'');

      PurchLineRec.VALIDATE("Unit of Measure Code", IAdvOrderRec."Unit of Measure");
      IF ItemRec.GET(IAdvOrderRec."Item No.") THEN
        PurchLineRec."Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec, PurchLineRec."Unit of Measure Code");
      IF PurchHeadRec."Amounts only" THEN BEGIN
        PurchLineRec."Unit Cost (LCY)" := IAdvOrderRec."Quantity (Advice)" * IAdvOrderRec."Price (LCY)";
        CalculateDirectUnitCost;
      END ELSE BEGIN
        PurchLineRec."Unit Cost (LCY)" := IAdvOrderRec."Price (LCY)";
        CalculateDirectUnitCost;
        IF IAdvOrderRec."Quantity (Advice)" < 0 THEN
          IAdvOrderRec.FIELDERROR("Quantity (Advice)");
        PurchLineRec.VALIDATE(Quantity, IAdvOrderRec."Quantity (Advice)");
      END;

      IF IAdvOrderRec."Cost Type" = IAdvOrderRec."Cost Type"::Material THEN BEGIN
        PurchLineRec."Item No." := IAdvOrderRec."Item No.";
        PurchLineRec.Manufacturer := IAdvOrderRec.Manufacturer;
        PurchLineRec."Basic Item" := IAdvOrderRec."Basic Item";
        PurchLineRec."Vendor (Trade Item)" := IAdvOrderRec."Vendor (Trade Item)";
        PurchLineRec."Trade Item" := IAdvOrderRec."Trade Item";
        IF IAdvOrderRec."Trade Item" <> '' THEN BEGIN
          PurchLineRec."Trade Item" := '';
          PurchLineRec.VALIDATE("Trade Item", IAdvOrderRec."Trade Item");
        END ELSE BEGIN
          IF IAdvOrderRec."Basic Item" <> '' THEN BEGIN
            PurchLineRec."Basic Item" := '';
            PurchLineRec.VALIDATE("Basic Item", IAdvOrderRec."Basic Item");
          END ELSE BEGIN
            IF IAdvOrderRec."Item No." <> '' THEN BEGIN
              PurchLineRec."Item No." := '';
              PurchLineRec.VALIDATE("Item No.", IAdvOrderRec."Item No.");
            END;
          END;
        END;
      END;
      PurchLineRec.VALIDATE("Shortcut Dimension 2 Code", IAdvOrderRec."Cost Object");

      PurchLineRec."Cost Component" := IAdvOrderRec."Cost Component";

      PurchLineRec."Posting Date" := PurchHeadRec."Posting Date";

      IF NOT ProjElemRec.GET(PurchLineRec."Job No.", PurchLineRec.Element) THEN ProjElemRec.INIT;
      IF ProjElemRec."Starting Date" <= TODAY THEN
        PurchLineRec.VALIDATE("Expected Receipt Date", TODAY)
      ELSE
        PurchLineRec.VALIDATE("Expected Receipt Date", ProjElemRec."Starting Date"-1);

      PurchLineRec.Description := IAdvOrderRec.Description;
      PurchLineRec."Description 2" := IAdvOrderRec."Description 2";
      PurchLineRec.VALIDATE(Text, IAdvOrderRec."External Text");
      PurchLineRec."FSC Type Code" := IAdvOrderRec."FSC Type Code";  //DP00129
      PurchLineRec."Subcontracting Activity":= IAdvOrderRec."Subcontracting Activity";  //DP01958a

      PurchLineRec.MODIFY(TRUE);

      LastRefNo := INCSTR(LastRefNo);
      PurchLineRec."Purchase Route Reference" := LastRefNo;
      PurchLineRec.MODIFY;

      PurchaseLineDetail.CopyLine(PurchaseLineDetail."Line Type"::"Advice Order",
        IAdvOrderRec."Record Type", IAdvOrderRec."Project No.", IAdvOrderRec."Yard No.", IAdvOrderRec."System No.",
        IAdvOrderRec."Entity Type", IAdvOrderRec."Entity No.", IAdvOrderRec."Service Order No.", '', IAdvOrderRec."Line No.",
        PurchaseLineDetail."Line Type"::"Purchase Order", PurchLineRec."Document No.", PurchLineRec."Line No.", FALSE);

      IF IAdvOrderRec.FIND('=') THEN BEGIN
        IAdvOrderRec."Purchase Route Reference" := LastRefNo;
        IAdvOrderRec.MODIFY;
      END;

      NextLineNo := NextLineNo + 10000;
    END;

    [External]
    PROCEDURE CalculateDirectUnitCost@1100525000();
    VAR
      Currency2@1100525000 : Record 4;
      CurrExchRate@1100525002 : Record 330;
      CurrencyDate@1100525001 : Date;
    BEGIN
      Currency2.InitRoundingPrecision;
      IF PurchHeadRec."Currency Code" <> '' THEN BEGIN
        CurrencyDate := TODAY;
        PurchLineRec."Direct Unit Cost" := ROUND(CurrExchRate.ExchangeAmtLCYToFCY(
          1, PurchHeadRec."Job No.", CurrencyDate, PurchHeadRec."Currency Code",
          PurchLineRec."Unit Cost (LCY)", PurchHeadRec."Currency Factor",FALSE),
          Currency2."Amount Rounding Precision")
      END ELSE
        PurchLineRec."Direct Unit Cost" := PurchLineRec."Unit Cost (LCY)";
    END;

    [External]
    PROCEDURE SetOrderNo@1210190001(iOrderNO@1210190000 : Code[20]);
    BEGIN
      //DP00381
      gHeaderNo := iOrderNO;
    END;

    [External]
    PROCEDURE SetVendorNo@1100525001(iVendorNo@1210190000 : Code[20]);
    BEGIN
      //DP00381
      VendNo := iVendorNo;
    END;

    [External]
    PROCEDURE GenerateQuoteFromEstimate@1210190004(VAR CompRec@1100528900 : Record 11012193);
    VAR
      CompRec2@1100528901 : Record 11012193;
      QuantityForQuote@1100528902 : Decimal;
    BEGIN
      //DP00381
      CompRec2.RESET;
      CompRec2.SETCURRENTKEY("Estimate No.","Cost Type","Text Composition");

      LastRefNo := RouteRefMgtCU.GetLastRefNo();
      NextLineNo := 0;
      PurchHeadRec."No." := '';

      REPEAT
        QuantityForQuote  := 0;
        CompRec2.SETRANGE("Estimate No.", CompRec."Estimate No.");
        CompRec2.SETRANGE("Cost Type", CompRec."Cost Type");
        CompRec2.SETRANGE("Text Composition", CompRec."Text Composition");
        IF CompRec2.FIND('-') THEN BEGIN
          REPEAT
            IF ReadEstLineOrRcpLine(CompRec2) THEN
              QuantityForQuote := QuantityForQuote + CompRec2.Quantity;
          UNTIL (CompRec2.NEXT = 0);
          IF QuantityForQuote > 0 THEN
            InsertPurchQuoteLineEstimate(CompRec,QuantityForQuote);
        END;
      UNTIL (CompRec.NEXT = 0);

      RouteRefMgtCU.WriteLastRefNo(LastRefNo);

      COMMIT;
      CompRec.LOCKTABLE;

      IF (PurchHeadRec."No." <> '') THEN
        IF (PurchHeadRec."No." <> gHeaderNo) THEN
          MESSAGE(Text013, PurchHeadRec."No.")
        ELSE
          MESSAGE(Text015, PurchHeadRec."No.")
      ELSE
        MESSAGE(Text014);
    END;

    [External]
    PROCEDURE ReadEstLineOrRcpLine@1100528901(ICompRec@1210190000 : Record 11012193) : Boolean;
    VAR
      EstRec@1100528905 : Record 11012151;
      EstimateLine@1100528903 : Record 11072072;
      EstimateRecipeLine@1100528901 : Record 11072075;
      EstimateLineRAW@1100528900 : Record 11125698;
    BEGIN
      //DP00381
      EstRec.GET(ICompRec."Estimate No.");
      IF EstRec."RAW Estimate" THEN BEGIN
          EstimateLineRAW.GET(ICompRec."Estimate No.", ICompRec."Tender Paragraph No.", ICompRec."Estimate Line");
          EstimateLineRAW.VALIDATE("Ask for Quote");
      END ELSE BEGIN
        IF (ICompRec."Recipe Line" = 0) THEN BEGIN
          EstimateLine.GET(ICompRec."Estimate No.", ICompRec."Sub-Estimate No.",
            ICompRec."Part Group", ICompRec.Part, ICompRec."Estimate Line");
          EstimateLine.VALIDATE("Ask for Quote");
        END ELSE BEGIN
          EstimateRecipeLine.GET(ICompRec."Estimate No.", ICompRec."Sub-Estimate No.",
            ICompRec."Part Group", ICompRec.Part, ICompRec."Estimate Line",
            ICompRec."Recipe Group", ICompRec.Recipe, ICompRec."Recipe Line");
          EstimateRecipeLine.VALIDATE("Ask for Quote");
        END;
      END;

      IF ((ICompRec."Material Price" <> 0) AND (ICompRec."Subcontracting Price" <> 0)) OR
         ((ICompRec."Material Price" <> 0) AND (ICompRec."Plant Price" <> 0)) OR
         ((ICompRec."Subcontracting Price" <> 0) AND (ICompRec."Plant Price" <> 0))
      THEN
        ERROR(Text012, ICompRec.TABLECAPTION, ICompRec."Estimate No.", ICompRec."Line No.");

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE InsertPurchQuoteLineEstimate@1210190002(ICompRec@1210190000 : Record 11012193;QuantityForQuote@1100528901 : Decimal);
    VAR
      QuanOld@1210190001 : Decimal;
      ItemTypeOpt@1100528900 : 'Item,Basic Item,Trade Item,Trade Vendor';
    BEGIN
      //DP00381
      IF (NextLineNo = 0) THEN BEGIN
        IF gHeaderNo = '' THEN BEGIN
          PurchHeadRec.INIT;
          PurchHeadRec."Document Type" := PurchHeadRec."Document Type"::Quote;
          PurchHeadRec."No." := '';
          PurchHeadRec.VALIDATE("Buy-from Vendor No.", VendNo);
          PurchHeadRec."Document Date" := TODAY;
          PurchHeadRec.INSERT(TRUE);
        END ELSE
          PurchHeadRec.GET(PurchHeadRec."Document Type"::Quote,gHeaderNo);

        PurchLineRec.LOCKTABLE;
        PurchLineRec.SETRANGE("Document Type", PurchHeadRec."Document Type");
        PurchLineRec.SETRANGE("Document No.", PurchHeadRec."No.");
        IF PurchLineRec.FINDLAST THEN
          NextLineNo := PurchLineRec."Line No." + 10000
        ELSE
          NextLineNo := 10000;
      END;
      PurchLineRec.INIT;
      PurchLineRec."Document Type" := PurchHeadRec."Document Type";
      PurchLineRec."Document No." := PurchHeadRec."No.";
      PurchLineRec."Line No." := NextLineNo;
      PurchLineRec.INSERT(TRUE);

      PurchLineRec.VALIDATE("Currency Code", PurchHeadRec."Currency Code");
      PurchLineRec.VALIDATE(Type, PurchLineRec.Type::"G/L Account");
      PurchLineRec."System-Created Entry"  := TRUE;

      CASE ICompRec."Cost Type" OF
        ICompRec."Cost Type"::Material:
          PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Material;
        ICompRec."Cost Type"::Subcontracting:
          PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Subcontracting;
        ICompRec."Cost Type"::Plant:
          PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Plant;
      END;
      IF (ICompRec."Cost Object" <> '') THEN BEGIN
        DimMgt.GetDimValueRec(2, ICompRec."Cost Object", DimValRec, TRUE,'');
        PurchLineRec.VALIDATE("Shortcut Dimension 2 Code", ICompRec."Cost Object");
      END;

      PurchLineRec."Item No." := ICompRec."Item No.";
      PurchLineRec.Manufacturer := ICompRec.Manufacturer;
      PurchLineRec."Basic Item" := ICompRec."Basic Item";
      PurchLineRec."Vendor (Trade Item)" := ICompRec."Vendor (Trade Item)";
      PurchLineRec."Trade Item" := ICompRec."Trade Item";
      IF PurchLineRec."Trade Item" <> '' THEN
        PurchLineRec.ValidateItem((ItemTypeOpt::"Trade Item"))
      ELSE
        IF PurchLineRec."Basic Item" <> '' THEN
          PurchLineRec.ValidateItem((ItemTypeOpt::"Basic Item"))
        ELSE
          IF PurchLineRec."Item No." <> '' THEN
            PurchLineRec.ValidateItem((ItemTypeOpt::Item));

      IF PurchLineRec.Type = PurchLineRec.Type::"G/L Account" THEN SetAccount;

      CASE PurchLineRec."Cost Type" OF
        PurchLineRec."Cost Type"::Material:
          PurchLineRec."Direct Unit Cost" := ICompRec."Material Price";
        PurchLineRec."Cost Type"::Subcontracting:
          PurchLineRec."Direct Unit Cost" := ICompRec."Subcontracting Price";
        PurchLineRec."Cost Type"::Plant:
          PurchLineRec."Direct Unit Cost" := ICompRec."Plant Price"
      END;

      PurchLineRec."Tender Paragraph" := ICompRec."Tender Paragraph No.";
      PurchLineRec.Quantity := QuantityForQuote;

      IF (PurchLineRec."Item No." <> '') THEN BEGIN
        QuanOld := PurchLineRec.Quantity;
        ItemRec.GET(PurchLineRec."Item No.");
        PurchLineRec.VALIDATE("Unit of Measure Code", ItemRec."Purch. Unit of Measure");
        PurchLineRec."Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec, PurchLineRec."Unit of Measure Code");
        PurchLineRec.Quantity := PurchLineRec.Quantity / PurchLineRec."Qty. per Unit of Measure";
        IF PurchLineRec.Quantity <> QuanOld THEN
          PurchLineRec.Quantity := ROUND(PurchLineRec.Quantity, 1, '>');
      END ELSE BEGIN
        PurchLineRec.VALIDATE("Unit of Measure Code", ICompRec."Unit of Measure");
      END;

      PurchLineRec.VALIDATE(Quantity);
      PurchLineRec."Posting Date" := PurchHeadRec."Posting Date";

      PurchLineRec.VALIDATE("Line Amount",  PurchLineRec.Quantity * PurchLineRec."Direct Unit Cost");

      PurchLineRec."Estimate No." := ICompRec."Estimate No.";

      SplitDesc(ICompRec.Description, MAXSTRLEN(PurchLineRec.Description));
      PurchLineRec.Description := desc1;
      PurchLineRec."Description 2" := desc2;

      IF ICompRec."Purchase Route Reference" = '' THEN BEGIN
        LastRefNo := INCSTR(LastRefNo);
        PurchLineRec."Purchase Route Reference" := LastRefNo;
      END ELSE BEGIN
        PurchLineRec."Purchase Route Reference" := ICompRec."Purchase Route Reference";
      END;
      PurchLineRec."Subcontracting Activity" := ICompRec."Subcontracting Activity";  //DP01958a
      PurchLineRec."Purchase Action" := ICompRec."Purchase Action";
      PurchLineRec."Purchase Phase" := ICompRec."Purchase Phase";
      PurchLineRec.MODIFY;

      IF ICompRec."Purchase Route Reference" = '' THEN
        UpdateEstLinesAndRcpLines(ICompRec);

      NextLineNo := NextLineNo + 10000;
    END;

    [External]
    PROCEDURE UpdateEstLinesAndRcpLines@1210190005(ICompRec@1210190000 : Record 11012193);
    VAR
      CompRec2@1100528900 : Record 11012193;
      EstRec@1100528906 : Record 11012151;
      EstimateLine@1100528904 : Record 11072072;
      EstimateRecipeLine@1100528902 : Record 11072075;
      EstimateLineRAW@1100528901 : Record 11125698;
    BEGIN
      //DP00381
      CompRec2.SETRANGE("Estimate No.", ICompRec."Estimate No.");
      CompRec2.SETRANGE("Cost Type", ICompRec."Cost Type");
      CompRec2.SETRANGE("Text Composition", ICompRec."Text Composition");
      IF CompRec2.FIND('-') THEN BEGIN
        REPEAT
          EstRec.GET(CompRec2."Estimate No.");
          IF EstRec."RAW Estimate" THEN BEGIN
            EstimateLineRAW.GET(CompRec2."Estimate No.", CompRec2."Tender Paragraph No.", CompRec2."Estimate Line");
            EstimateLineRAW."Purchase Route Reference" := LastRefNo;
            EstimateLineRAW.MODIFY;
          END ELSE BEGIN
            IF (CompRec2."Recipe Line" = 0) THEN BEGIN
              EstimateLine.GET(CompRec2."Estimate No.", CompRec2."Sub-Estimate No.",
                CompRec2."Part Group", CompRec2.Part, CompRec2."Estimate Line");
              EstimateLine."Purchase Route Reference" := LastRefNo;
              EstimateLine.MODIFY;
            END ELSE BEGIN
              EstimateRecipeLine.GET(CompRec2."Estimate No.", CompRec2."Sub-Estimate No.",
                CompRec2."Part Group", CompRec2.Part, CompRec2."Estimate Line",
                CompRec2."Recipe Group", CompRec2.Recipe, CompRec2."Recipe Line");
              EstimateRecipeLine."Purchase Route Reference" := LastRefNo;
              EstimateRecipeLine.MODIFY;
            END;
          END;
          CompRec2.DELETE;
        UNTIL (CompRec2.NEXT = 0);
      END;
    END;

    [External]
    PROCEDURE SetAccount@1100528900();
    VAR
      GenPostingSetup@1210190001 : Record 252;
      InventSetup@1210190000 : Record 313;
    BEGIN
      //DP00381
      InventSetup.GET;
      InventSetup.TESTFIELD("Default Item");
      ItemRec.GET(InventSetup."Default Item");
      GenPostingSetup.GET(PurchHeadRec."Gen. Bus. Posting Group", ItemRec."Gen. Prod. Posting Group");
      GenPostingSetup.TESTFIELD("Purch. Account");
      PurchLineRec."No." := GenPostingSetup."Purch. Account";
    END;

    [External]
    PROCEDURE SplitDesc@1100485000(lvDesc@1100485000 : Text[100];lvMaxLen@1100485001 : Integer);
    VAR
      sep@1210190000 : Integer;
    BEGIN
      //DP00381
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
      END ELSE BEGIN
        IF STRLEN(lvDesc) > lvMaxLen THEN BEGIN
          desc1 := COPYSTR(lvDesc, 1, lvMaxLen);
          desc2 := COPYSTR(lvDesc, lvMaxLen+1, lvMaxLen);
        END ELSE BEGIN
          desc1 := lvDesc;
          desc2 := '';
        END;
      END;

      desc1 := COPYSTR(desc1, 1, lvMaxLen);
      desc2 := COPYSTR(desc2, 1, lvMaxLen);
    END;

    BEGIN
    END.
  }
}

