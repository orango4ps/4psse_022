OBJECT Codeunit 29 Error Message Handler
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempErrorMessage@1000 : TEMPORARY Record 700;
      Active@1001 : Boolean;

    [External]
    PROCEDURE AppendTo@4(VAR TempErrorMessageBuf@1000 : TEMPORARY Record 700) : Boolean;
    VAR
      NextID@1001 : Integer;
    BEGIN
      WITH TempErrorMessage DO BEGIN
        IF ISEMPTY THEN
          EXIT(FALSE);

        LogLastError;

        NextID := 0;
        TempErrorMessageBuf.RESET;
        IF TempErrorMessageBuf.FINDLAST THEN
          NextID := TempErrorMessageBuf.ID;
        FINDSET;
        REPEAT
          NextID += 1;
          TempErrorMessageBuf := TempErrorMessage;
          TempErrorMessageBuf.ID := NextID;
          TempErrorMessageBuf.INSERT;
        UNTIL NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE Activate@2(VAR ErrorMessageHandler@1000 : Codeunit 29);
    BEGIN
      Active := BINDSUBSCRIPTION(ErrorMessageHandler);
    END;

    LOCAL PROCEDURE GetLink@1(Code@1000 : Code[30]) : Text[250];
    VAR
      NamedForwardLink@1001 : Record 1431;
    BEGIN
      IF NamedForwardLink.GET(Code) THEN
        EXIT(NamedForwardLink.Link);
    END;

    [External]
    PROCEDURE ShowErrors@3() : Boolean;
    BEGIN
      IF Active THEN
        EXIT(TempErrorMessage.ShowErrors);
    END;

    PROCEDURE HasErrors@11() : Boolean;
    BEGIN
      EXIT(TempErrorMessage.HasErrors(FALSE));
    END;

    [EventSubscriber(Codeunit,28,OnGetLastErrorID)]
    LOCAL PROCEDURE OnGetLastErrorID@6(VAR ID@1000 : Integer;VAR ErrorMessage@1001 : Text[250]);
    BEGIN
      IF Active THEN BEGIN
        ID := TempErrorMessage.GetLastID;
        ErrorMessage := TempErrorMessage.Description;
      END;
    END;

    [EventSubscriber(Codeunit,28,OnLogError)]
    LOCAL PROCEDURE OnLogErrorHandler@8(ContextFieldNo@1000 : Integer;ErrorMessage@1001 : Text;SourceVariant@1002 : Variant;SourceFieldNo@1003 : Integer;HelpArticleCode@1004 : Code[30];VAR IsLogged@1005 : Boolean);
    BEGIN
      IF Active THEN
        IsLogged :=
          TempErrorMessage.LogContextFieldError(
            ContextFieldNo,ErrorMessage,SourceVariant,SourceFieldNo,GetLink(HelpArticleCode)) <> 0
    END;

    [EventSubscriber(Codeunit,28,OnLogSimpleError)]
    LOCAL PROCEDURE OnLogSimpleErrorHandler@7(ErrorMessage@1000 : Text;VAR IsLogged@1002 : Boolean);
    BEGIN
      IF Active THEN
        IsLogged := TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,ErrorMessage) <> 0;
    END;

    [EventSubscriber(Codeunit,28,OnFindActiveSubscriber)]
    LOCAL PROCEDURE OnFindActiveSubscriberHandler@10(VAR IsFound@1000 : Boolean);
    BEGIN
      IF NOT IsFound THEN
        IsFound := Active;
    END;

    [EventSubscriber(Codeunit,28,OnPopContext)]
    LOCAL PROCEDURE OnPopContextHandler@9(VAR ID@1000 : Integer);
    BEGIN
      IF Active THEN
        ID := TempErrorMessage.PopContext;
    END;

    [EventSubscriber(Codeunit,28,OnPushContext)]
    LOCAL PROCEDURE OnPushContextHandler@5(ContextRecIDVariant@1000 : Variant;ContextFieldNo@1001 : Integer;AdditionalInfo@1002 : Text[250];VAR ID@1003 : Integer);
    BEGIN
      IF Active THEN
        ID := TempErrorMessage.PushContext(ContextRecIDVariant,ContextFieldNo,AdditionalInfo);
    END;

    BEGIN
    END.
  }
}

