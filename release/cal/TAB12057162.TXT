OBJECT Table 12057162 Ex Coding Rule Exp. Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF4PS;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Ex Coding Rule Expression Line;
               SVE=Ex Coding Rule Expression Line];
  }
  FIELDS
  {
    { 2   ;   ;Coding Rule ID      ;Integer       ;CaptionML=[ENU=ID;
                                                              SVE=ID] }
    { 3   ;   ;Coding Rule Line No.;Integer       ;CaptionML=[ENU=Line No.;
                                                              SVE=Radnr] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              SVE=Radnr.] }
    { 15  ;   ;Text Range          ;Text250       ;CaptionML=[ENU=Text Range;
                                                              SVE=Filtertext] }
  }
  KEYS
  {
    {    ;Coding Rule ID,Coding Rule Line No.,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE UpdateExpressions@1000000001(VAR CodingRuleLine@1000000000 : Record 12013663;NewRange@1000000001 : Text);
    VAR
      LineNo@1000000002 : Integer;
    BEGIN
      RESET;
      SETRANGE("Coding Rule ID",CodingRuleLine.ID);
      SETRANGE("Coding Rule Line No.",CodingRuleLine."Line No.");
      DELETEALL();

      IF STRLEN(NewRange) <= 250 THEN BEGIN
        CodingRuleLine.VALIDATE("Text Range",NewRange);
        EXIT;
      END ELSE
        CodingRuleLine.VALIDATE("Text Range",'');

      WHILE NewRange <> '' DO
        InsertExpressionLine(CodingRuleLine,NewRange,LineNo);
    END;

    LOCAL PROCEDURE InsertExpressionLine@1000000002(CodingRuleLine@1000000001 : Record 12013663;VAR NewRange@1000000000 : Text;VAR LineNo@1000000002 : Integer);
    BEGIN
      LineNo := LineNo + 10000;
      RESET();
      INIT();
      "Coding Rule ID" := CodingRuleLine.ID;
      "Coding Rule Line No." := CodingRuleLine."Line No.";
      "Line No." := LineNo;
      "Text Range" := COPYSTR(NewRange,1,MAXSTRLEN("Text Range"));
      INSERT;
      NewRange := DELSTR(NewRange,1,MAXSTRLEN("Text Range"));
    END;

    PROCEDURE GetCombinedRange@1000000007(CodingRuleLine@1000000000 : Record 12013663) CombinedRange : Text;
    BEGIN
      RESET();
      SETRANGE("Coding Rule ID",CodingRuleLine.ID);
      SETRANGE("Coding Rule Line No.",CodingRuleLine."Line No.");
      IF FINDSET() THEN
        REPEAT
          CombinedRange := CombinedRange + "Text Range";
        UNTIL NEXT = 0;

      IF CombinedRange = '' THEN
        CombinedRange := CodingRuleLine."Text Range";
    END;

    PROCEDURE GetExpression@1000000000(CodingRuleID@1000000000 : Integer;WebCompanyID@1000000002 : BigInteger;CompName@1000000003 : Text[30]) CombinedExpression : Text;
    VAR
      CodingRuleLine@1000000001 : Record 12013663;
    BEGIN
      IF CompName <> COMPANYNAME THEN BEGIN
        CodingRuleLine.CHANGECOMPANY(CompName);
        CHANGECOMPANY(CompName);
      END;

      CodingRuleLine.RESET;
      CodingRuleLine.SETRANGE(ID,CodingRuleID);
      IF CodingRuleLine.FINDSET THEN
        REPEAT
          IF CombinedExpression = '' THEN
            CombinedExpression := GetLineExpression(CodingRuleLine,WebCompanyID)
          ELSE
            CombinedExpression := CombinedExpression + ';' + GetLineExpression(CodingRuleLine,WebCompanyID);
        UNTIL CodingRuleLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetLineExpression@1000000003(CodingRuleLine@1000000000 : Record 12013663;WebCompanyID@1000000002 : BigInteger) Expression : Text;
    VAR
      CombinedRange@1000000001 : Text;
    BEGIN
      WebCompanyID := WebCompanyID + CodingRuleLine."Column ID";
      Expression := Expression + FORMAT(WebCompanyID) + '=';

      IF CodingRuleLine.All AND CodingRuleLine.Empty THEN
        EXIT(Expression + '<ALL>|<EMPTY>');

      IF CodingRuleLine.All THEN
        EXIT(Expression + '<ALL>');

      CombinedRange := GetCombinedRange(CodingRuleLine);
      IF CombinedRange = '' THEN
        CombinedRange := CodingRuleLine."Text Range";

      IF CodingRuleLine.Empty THEN BEGIN
        Expression := Expression + '<EMPTY>';
        IF CombinedRange <> '' THEN
          EXIT(Expression + '|' + CombinedRange)
        ELSE
          EXIT(Expression);
      END;

      IF CombinedRange = '' THEN
        EXIT('')
      ELSE
        EXIT(Expression + CombinedRange);
    END;

    PROCEDURE HasLines@1000000006(ID@1000000001 : Integer) : Boolean;
    BEGIN
      SETRANGE("Coding Rule ID",ID);
      EXIT(NOT ISEMPTY());
    END;

    BEGIN
    END.
  }
}

