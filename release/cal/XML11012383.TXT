OBJECT XMLport 11012383 Import Act. Wage Cost Paymast.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Actual Wage List Paymaster;
               SVE=Imp. faktisk l”nelista,Paym.];
    Direction=Import;
    DefaultFieldsValidation=No;
    TextEncoding=WINDOWS;
    OnInitXMLport=BEGIN
                    GLSetup.GET;
                    HumanResourcesSetup.GET;
                    HumanResourcesSetup.TESTFIELD("Salary Application",HumanResourcesSetup."Salary Application"::Paymaster);

                    IF HumanResourcesSetup."Calculate Wage Costs" <> HumanResourcesSetup."Calculate Wage Costs"::"Actual Rate" THEN
                      IF NOT CONFIRM(Text001, TRUE) THEN
                        ERROR(Text002)
                      ELSE
                        AskCalcMethod := TRUE;

                    HumanResourcesSetup.TESTFIELD("Actual Wage Journal Template");
                    HumanResourcesSetup.TESTFIELD("Actual Wage Journal Batch");
                    IF HumanResourcesSetup."Length Company Paymaster" = 0 THEN
                      HumanResourcesSetup."Length Company Paymaster" := 4;

                    UsePaymExtension := PaymasterRecordExtensionRec.UseExtension;

                    currXMLport.FILENAME := HumanResourcesSetup."Pathname Files from Salary";
                  END;

    OnPostXMLport=BEGIN
                    OldFile := currXMLport.FILENAME;
                    NewFile := HumanResourcesSetup.DetermineBackupFile(OldFile);
                    IF NewFile <> OldFile THEN
                      FileMgt.RenameClientFile(OldFile, NewFile, TRUE);
                  END;

    Format=Fixed Text;
  }
  ELEMENTS
  {
    { [{C90E368B-6721-4730-84C4-93C3DCC02E19}];  ;Root                ;Element ;Text     }

    { [{112F7BF2-00AE-4342-B8CA-28D171D64561}];1 ;GenJournalLine      ;Element ;Table   ;
                                                  SourceTable=Table81;
                                                  SourceTableView=SORTING(Field1,Field51,Field2);
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              "Gen. Journal Line".INIT;
                                                                              CLEAR(CompanyAndAdministration);
                                                                              CLEAR(EmployeeTxt);
                                                                              CLEAR(RecType);
                                                                              CLEAR(ProjElemCostObject);
                                                                              CLEAR(WageCode);
                                                                              CLEAR(Hours1Txt);
                                                                              CLEAR(Hours1Sign);
                                                                              CLEAR(Hours2Txt);
                                                                              CLEAR(Hours2Sign);
                                                                              CLEAR(Hours3Txt);
                                                                              CLEAR(Hours3Sign);
                                                                              CLEAR(Amount1Txt);
                                                                              CLEAR(Amount1Sign);
                                                                              CLEAR(Amount2Txt);
                                                                              CLEAR(Amount2Sign);
                                                                              CLEAR(Amount3Txt);
                                                                              CLEAR(Amount3Sign);
                                                                              CLEAR(Amount4Txt);
                                                                              CLEAR(Amount4Sign);
                                                                              CLEAR(Amount5Txt);
                                                                              CLEAR(Amount5Sign);
                                                                              CLEAR(Amount6Txt);
                                                                              CLEAR(Amount6Sign);
                                                                              CLEAR(Amount7Txt);
                                                                              CLEAR(Amount7Sign);
                                                                              CLEAR(Amount8Txt);
                                                                              CLEAR(Amount8Sign);
                                                                              CLEAR(Amount9Txt);
                                                                              CLEAR(Amount9Sign);
                                                                              CLEAR(Amount10Txt);
                                                                              CLEAR(Amount10Sign);
                                                                              CLEAR(Amount11Txt);
                                                                              CLEAR(Amount11Sign);
                                                                              CLEAR(Name);
                                                                              CLEAR("Ending Date");
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 WITH "Gen. Journal Line" DO BEGIN //With statement added because this code has been copied from dataport.

                                                                                 Company := COPYSTR(CompanyAndAdministration, 1, HumanResourcesSetup."Length Company Paymaster");
                                                                                 Administration := COPYSTR(CompanyAndAdministration, HumanResourcesSetup."Length Company Paymaster" + 1);
                                                                                 DetermineCompany;

                                                                                 PostRec.CHANGECOMPANY(CompanyOrg);
                                                                                 HumanResourcesSetupRec.CHANGECOMPANY(CompanyOrg);
                                                                                 JobsSetup.CHANGECOMPANY(CompanyOrg);
                                                                                 ProjRec.CHANGECOMPANY(CompanyOrg);
                                                                                 PtypRec.CHANGECOMPANY(CompanyOrg);
                                                                                 ElemRec.CHANGECOMPANY(CompanyOrg);
                                                                                 EmplRec.CHANGECOMPANY(CompanyOrg);
                                                                                 TradeRec.CHANGECOMPANY(CompanyOrg);
                                                                                 JnlTemplRec.CHANGECOMPANY(CompanyOrg);
                                                                                 DimValRec.CHANGECOMPANY(CompanyOrg);
                                                                                 GlAccRec.CHANGECOMPANY(CompanyOrg);
                                                                                 VATPostSetup.CHANGECOMPANY(CompanyOrg);
                                                                                 "Gen. Journal Line".CHANGECOMPANY(CompanyOrg);

                                                                                 HumanResourcesSetupRec.GET();
                                                                                 JobsSetup.GET;

                                                                                 HumanResourcesSetupRec.TESTFIELD("Salary Application",HumanResourcesSetupRec."Salary Application"::Paymaster);
                                                                                 IF HumanResourcesSetupRec."Calculate Wage Costs" <> HumanResourcesSetupRec."Calculate Wage Costs"::"Actual Rate" THEN
                                                                                   IF AskCalcMethod = FALSE THEN
                                                                                     IF NOT CONFIRM(Text001, TRUE) THEN
                                                                                       ERROR(Text002)
                                                                                     ELSE
                                                                                       AskCalcMethod := TRUE;

                                                                                 filler := "Ending Date";
                                                                                 StripZero(filler, 0);
                                                                                 IF filler <> '' THEN BEGIN
                                                                                   EVALUATE(BookYear,COPYSTR("Ending Date",5,2));
                                                                                   EVALUATE(BookMonth,COPYSTR("Ending Date",3,2));
                                                                                   EVALUATE(BookDay,COPYSTR("Ending Date",1,2));
                                                                                   PostingDate := DMY2DATE(BookDay,BookMonth,2000+BookYear);
                                                                                   BookWeek  := DATE2DWY(PostingDate, 2);
                                                                                   BookYear  := DATE2DWY(PostingDate, 3);
                                                                                   Period   := STRSUBSTNO('%1-%2', BookYear, BookWeek);
                                                                                 END ELSE BEGIN
                                                                                   PostingDate := 0D;
                                                                                   Period := '****-**';
                                                                                 END;

                                                                                 IF NOT JnlTemplRec.GET(HumanResourcesSetupRec."Actual Wage Journal Template") THEN
                                                                                   JnlTemplRec.INIT;
                                                                                 IF NOT JnlBatchRec.GET(HumanResourcesSetupRec."Actual Wage Journal Template", HumanResourcesSetupRec."Actual Wage Journal Batch") THEN
                                                                                   JnlBatchRec.INIT;

                                                                                 IF DocNo = '' THEN BEGIN
                                                                                   IF JnlBatchRec."No. Series" <> '' THEN
                                                                                     DocNo := NoSeriesMgt.GetNextNo(JnlBatchRec."No. Series",0D,FALSE)
                                                                                   ELSE
                                                                                     IF JnlTemplRec."No. Series" <> '' THEN
                                                                                       DocNo := NoSeriesMgt.GetNextNo(JnlTemplRec."No. Series",0D,FALSE);
                                                                                 END;

                                                                                 FinishedProject := '';
                                                                                 EVALUATE(ProjectCode, COPYSTR(ProjElemCostObject, 1, HumanResourcesSetupRec."Length Project (Extern)"));
                                                                                 EVALUATE(ElementCode,
                                                                                   COPYSTR(ProjElemCostObject,1 + HumanResourcesSetupRec."Length Project (Extern)",
                                                                                   HumanResourcesSetupRec."Length Element (Extern)"));
                                                                                 EVALUATE(CostObject,
                                                                                   COPYSTR(ProjElemCostObject, 1+HumanResourcesSetupRec."Length Project (Extern)"+HumanResourcesSetupRec."Length Element (Extern)",
                                                                                   18-(HumanResourcesSetupRec."Length Project (Extern)"+HumanResourcesSetupRec."Length Element (Extern)")));

                                                                                 IF RecType = 'G' THEN
                                                                                   StripZero(ProjectCode, MaxLenAcc)
                                                                                 ELSE
                                                                                   StripZero(ProjectCode, MaxLenProj);
                                                                                 StripZero(ElementCode, MaxLenElem);
                                                                                 StripZero(CostObject, MaxLenCostObject);
                                                                                 StripZero(Employee, MaxLenEmpl);

                                                                                 IF STRLEN(CostObject) > MAXSTRLEN(DimValRec.Code) THEN
                                                                                   EVALUATE(CostObject, COPYSTR(CostObject, 1, MAXSTRLEN(DimValRec.Code)));
                                                                                 IF STRLEN(ProjectCode) > MAXSTRLEN(ProjRec."No.") THEN
                                                                                   EVALUATE(ProjectCode, COPYSTR(ProjectCode, 1, MAXSTRLEN(ProjRec."No.")));
                                                                                 IF STRLEN(ElementCode) > MAXSTRLEN(ElemRec.Element) THEN
                                                                                   EVALUATE(ElementCode, COPYSTR(ElementCode, 1, MAXSTRLEN(ElemRec.Element)));

                                                                                 IF NOT DimValRec.GET(GLSetup."Shortcut Dimension 2 Code", CostObject) THEN BEGIN
                                                                                   DimValRec.INIT;
                                                                                   HandleUnknownData(CostObject, 1);
                                                                                 END;

                                                                                 IF NOT UsePaymExtension THEN BEGIN
                                                                                   ReceivingCompany := '';
                                                                                   PostedHourLine.RESET;
                                                                                   PostedHourLine.SETRANGE(Year, BookYear);
                                                                                   PostedHourLine.SETRANGE(Week, BookWeek);
                                                                                   PostedHourLine.SETRANGE("Employee No.", Employee);
                                                                                   PostedHourLine.SETRANGE("Wage Component", WageCode);
                                                                                   IF RecType <> 'G' THEN BEGIN
                                                                                     PostedHourLine.SETRANGE("Project No.", ProjectCode);
                                                                                     PostedHourLine.SETRANGE("Cost Object", CostObject);
                                                                                   END;
                                                                                   IF PostedHourLine.FINDFIRST THEN BEGIN
                                                                                     ReceivingCompany := PostedHourLine."Receiving Company";
                                                                                   END;
                                                                                 END ELSE
                                                                                   ReceivingCompany := CompanyRec;

                                                                                 IF ReceivingCompany <> '' THEN BEGIN
                                                                                   ProjRec.CHANGECOMPANY(ReceivingCompany);
                                                                                   PtypRec.CHANGECOMPANY(ReceivingCompany);
                                                                                   ElemRec.CHANGECOMPANY(ReceivingCompany);
                                                                                 END;

                                                                                 IF RecType <> 'G' THEN BEGIN
                                                                                   IF NOT ProjRec.GET(ProjectCode) THEN BEGIN
                                                                                     ProjRec.INIT;
                                                                                     HandleUnknownData(ProjectCode, 2);
                                                                                   END ELSE BEGIN
                                                                                     CheckProjectFinished;
                                                                                   END;
                                                                                   ElementFormat.FormatElem(ElementCode,2,'');
                                                                                   IF NOT ElemRec.GET(ProjectCode, ElementCode) THEN BEGIN
                                                                                     ElemRec.INIT;
                                                                                     HandleUnknownData(ElementCode, 4);
                                                                                   END;
                                                                                   IF NOT PtypRec.GET(ProjRec."Project Type") THEN
                                                                                     PtypRec.INIT;
                                                                                 END;
                                                                                 IF NOT EmplRec.GET(Employee) THEN BEGIN
                                                                                   EmplRec.INIT;
                                                                                   HandleUnknownData(Employee, 3);
                                                                                 END;
                                                                                 IF NOT TradeRec.GET(EmplRec."Trade Association") THEN
                                                                                   TradeRec.INIT;

                                                                                 LineCounter := 10000;
                                                                                 PostRec.LOCKTABLE;
                                                                                 PostRec.SETRANGE("Journal Template Name", HumanResourcesSetupRec."Actual Wage Journal Template");
                                                                                 PostRec.SETRANGE("Journal Batch Name", HumanResourcesSetupRec."Actual Wage Journal Batch");
                                                                                 IF PostRec.FIND('+') THEN
                                                                                   LineCounter := PostRec."Line No." + 10000;

                                                                                 Amount1 := Amount1 / 100.0;
                                                                                 Amount2 := Amount2 / 100.0;
                                                                                 Amount3 := Amount3 / 100.0;
                                                                                 Amount4 := Amount4 / 100.0;
                                                                                 Amount5 := Amount5 / 100.0;
                                                                                 Amount6 := Amount6 / 100.0;
                                                                                 Amount7 := Amount7 / 100.0;
                                                                                 Amount8 := Amount8 / 100.0;
                                                                                 Amount9 := Amount9 / 100.0;
                                                                                 Amount10 := Amount10 / 100.0;
                                                                                 Amount11 := Amount11 / 100.0;
                                                                                 IF Amount1Sign = '-' THEN Amount1 := (Amount1 * -1.0);
                                                                                 IF Amount2Sign = '-' THEN Amount2 := (Amount2 * -1.0);
                                                                                 IF Amount3Sign = '-' THEN Amount3 := (Amount3 * -1.0);
                                                                                 IF Amount4Sign = '-' THEN Amount4 := (Amount4 * -1.0);
                                                                                 IF Amount5Sign = '-' THEN Amount5 := (Amount5 * -1.0);
                                                                                 IF Amount6Sign = '-' THEN Amount6 := (Amount6 * -1.0);
                                                                                 IF Amount7Sign = '-' THEN Amount7 := (Amount7 * -1.0);
                                                                                 IF Amount8Sign = '-' THEN Amount8 := (Amount8 * -1.0);
                                                                                 IF Amount9Sign = '-' THEN Amount9 := (Amount9 * -1.0);
                                                                                 IF Amount10Sign = '-' THEN Amount10 := (Amount10 * -1.0);
                                                                                 IF Amount11Sign = '-' THEN Amount11 := (Amount11 * -1.0);

                                                                                 Hours1 := Hours1 / 100.0;
                                                                                 Hours2 := Hours2 / 100.0;
                                                                                 Hours3 := Hours3 / 100.0;
                                                                                 IF Hours1Sign = '-' THEN Hours1 := (Hours1 * -1.0);
                                                                                 IF Hours2Sign = '-' THEN Hours2 := (Hours2 * -1.0);
                                                                                 IF Hours3Sign = '-' THEN Hours3 := (Hours3 * -1.0);

                                                                                 INIT;
                                                                                 "Journal Template Name" := HumanResourcesSetupRec."Actual Wage Journal Template";
                                                                                 "Journal Batch Name" := HumanResourcesSetupRec."Actual Wage Journal Batch";
                                                                                 "Line No." := LineCounter;
                                                                                 "Posting Date" := PostingDate;
                                                                                 "Document Date" := PostingDate;
                                                                                 "Document No." := DocNo;
                                                                                 "Source Code" := JnlTemplRec."Source Code";
                                                                                 IF JnlBatchRec."Reason Code" <> '' THEN
                                                                                   "Reason Code" := JnlBatchRec."Reason Code"
                                                                                 ELSE
                                                                                   "Reason Code" := JnlTemplRec."Reason Code";
                                                                                 "Employee No." := Employee;
                                                                                 "Wage Component" := WageCode;
                                                                                 Quantity := Hours1 + Hours2 + Hours3;
                                                                                 "Unit of Measure Code" := Text008;
                                                                                 Amount := Amount11;
                                                                                 "Receiving Company" := ReceivingCompany;
                                                                                 IF RecType <> 'G' THEN BEGIN
                                                                                   "Job No." := ProjectCode;
                                                                                   Element := ElementCode;
                                                                                 END;
                                                                                 IF FinishedProject <> '' THEN
                                                                                   Description := COPYSTR(STRSUBSTNO(Text006,Description,FinishedProject), 1, MAXSTRLEN(Description))
                                                                                 ELSE
                                                                                   Description := COPYSTR(Text009 + EmplRec.FullName, 1, MAXSTRLEN(Description)) ;
                                                                                 IF RecType <> 'G' THEN
                                                                                   "Shortcut Dimension 1 Code" := ProjRec."Global Dimension 1 Code";
                                                                                 "Shortcut Dimension 2 Code" := CostObject;
                                                                                 IF RecType = 'G' THEN
                                                                                   "Account No." := ProjectCode
                                                                                 ELSE
                                                                                   "Account No." := WIPAcc;
                                                                                 "Bal. Account No." := TradeRec."Wage Coverage Account";
                                                                                 "Account Type" := "Account Type"::"G/L Account";
                                                                                 "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
                                                                                 "System-Created Entry" := TRUE;
                                                                                 "Amount (LCY)" := Amount;
                                                                                 IF Amount > 0 THEN
                                                                                   "Debit Amount" := Amount
                                                                                 ELSE
                                                                                   "Credit Amount" := -Amount;
                                                                                 CASE TRUE OF
                                                                                   ("Account No." <> '') AND ("Bal. Account No." <> ''):
                                                                                     "Balance (LCY)" := 0;
                                                                                   "Bal. Account No." <> '':
                                                                                     "Balance (LCY)" := -"Amount (LCY)";
                                                                                   ELSE
                                                                                     "Balance (LCY)" := "Amount (LCY)";
                                                                                 END;

                                                                                 IF NOT GlAccRec.GET("Account No.") THEN GlAccRec.INIT;
                                                                                 IF GlAccRec."Import Posting Information" = TRUE THEN BEGIN
                                                                                   "Gen. Posting Type" := GlAccRec."Gen. Posting Type";
                                                                                   "Gen. Bus. Posting Group" := GlAccRec."Gen. Bus. Posting Group";
                                                                                   "Gen. Prod. Posting Group" := GlAccRec."Gen. Prod. Posting Group";
                                                                                   "VAT Bus. Posting Group" := GlAccRec."VAT Bus. Posting Group";
                                                                                   "VAT Prod. Posting Group" := GlAccRec."VAT Prod. Posting Group";
                                                                                   "Tax Area Code" := GlAccRec."Tax Area Code";
                                                                                   "Tax Liable" := GlAccRec."Tax Liable";
                                                                                   "Tax Group Code" := GlAccRec."Tax Group Code";
                                                                                 END;

                                                                                 IF NOT GlAccRec.GET("Bal. Account No.") THEN GlAccRec.INIT;
                                                                                 IF GlAccRec."Import Posting Information" = TRUE THEN BEGIN
                                                                                   "Bal. Gen. Posting Type" := GlAccRec."Gen. Posting Type";
                                                                                   "Bal. Gen. Bus. Posting Group" := GlAccRec."Gen. Bus. Posting Group";
                                                                                   "Bal. Gen. Prod. Posting Group" := GlAccRec."Gen. Prod. Posting Group";
                                                                                   "Bal. VAT Bus. Posting Group" := GlAccRec."VAT Bus. Posting Group";
                                                                                   "Bal. VAT Prod. Posting Group" := GlAccRec."VAT Prod. Posting Group";
                                                                                   "Bal. Tax Area Code" := GlAccRec."Tax Area Code";
                                                                                   "Bal. Tax Liable" := GlAccRec."Tax Liable";
                                                                                   "Bal. Tax Group Code" := GlAccRec."Tax Group Code";
                                                                                 END;

                                                                                 IF VATPostSetup.GET("VAT Bus. Posting Group", "VAT Prod. Posting Group") THEN BEGIN
                                                                                   "VAT Calculation Type" := VATPostSetup."VAT Calculation Type";
                                                                                   IF "VAT Calculation Type" = "VAT Calculation Type"::"Normal VAT" THEN
                                                                                     "VAT %" := VATPostSetup."VAT %";
                                                                                   CASE "VAT Calculation Type" OF
                                                                                     "VAT Calculation Type"::"Normal VAT",
                                                                                     "VAT Calculation Type"::"Reverse Charge VAT":
                                                                                       "VAT Amount" := Amount - ROUND(Amount / (1 + "VAT %" / 100), 0.01);
                                                                                     "VAT Calculation Type"::"Full VAT":
                                                                                       "VAT Amount" := Amount;
                                                                                   END;
                                                                                 END;
                                                                                 "Amount (LCY)" := Amount;
                                                                                 "VAT Base Amount" := Amount - "VAT Amount";
                                                                                 "VAT Amount (LCY)" := "VAT Amount";
                                                                                 "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                                 IF VATPostSetup.GET("Bal. VAT Bus. Posting Group", "Bal. VAT Prod. Posting Group") THEN BEGIN
                                                                                   "Bal. VAT Calculation Type" := VATPostSetup."VAT Calculation Type";
                                                                                   IF "Bal. VAT Calculation Type" = "Bal. VAT Calculation Type"::"Normal VAT" THEN
                                                                                     "Bal. VAT %" := VATPostSetup."VAT %";
                                                                                   CASE "Bal. VAT Calculation Type" OF
                                                                                     "Bal. VAT Calculation Type"::"Normal VAT",
                                                                                     "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                                       "Bal. VAT Amount" := -(Amount - ROUND(Amount / (1 + "Bal. VAT %" / 100), 0.01));
                                                                                     "Bal. VAT Calculation Type"::"Full VAT":
                                                                                       "Bal. VAT Amount" := -Amount;
                                                                                   END;
                                                                                 END;
                                                                                 "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                                 "Bal. VAT Amount (LCY)" := "Bal. VAT Amount";
                                                                                 "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                                 ShowStatus("Journal Template Name", "Journal Batch Name", "Line No.");

                                                                                 IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
                                                                                   DimMgt.SetCompany("Receiving Company");
                                                                                   DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
                                                                                   DimMgt.SetCompany(COMPANYNAME);
                                                                                 END;
                                                                                 IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                                   DimMgt.SetCompany("Receiving Company");
                                                                                   DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");
                                                                                   DimMgt.SetCompany(COMPANYNAME);
                                                                                 END;


                                                                                 INSERT;

                                                                                 currXMLport.SKIP;

                                                                                 END; //Belongs to With statement.
                                                                               END;
                                                                                }

    { [{7A40D1B8-4369-48AC-85AC-9E7F67312C25}];2 ;CompanyAndAdministration;Element;Text ;
                                                  MinOccurs=Zero;
                                                  Width=7 }

    { [{C433A7FC-84D2-4545-9315-A88DCE6E3966}];2 ;Filler1             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{DF4B3265-DAFF-4DAE-8400-0267A1570D43}];2 ;EmployeeTxt         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  Employee := EmployeeTxt;
                                                                                END;

                                                  Width=9 }

    { [{16A288FE-6BAF-4739-A6CF-995451503AB6}];2 ;RecType             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{E7D1E7EB-BF9E-4F57-ADF9-7F5562F6ADD2}];2 ;ProjElemCostObject  ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=18 }

    { [{42C83ECF-3BB3-4F09-9253-2D9B14B7575B}];2 ;WageCode            ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=3 }

    { [{A284E538-5984-4075-9DC7-299FEE689EE6}];2 ;Filler2             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=9 }

    { [{1A05C948-1AD7-4694-9622-AEF07F0EA064}];2 ;Hours1Txt           ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Hours1Txt);
                                                                                  EVALUATE(Hours1, Hours1Txt);
                                                                                END;

                                                  Width=6 }

    { [{D57C4011-8F34-4DC9-9C38-0197BB16E67F}];2 ;Hours1Sign          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{0AF4D5F4-CA11-4495-81EF-3AC8BD34ED45}];2 ;Hours2Txt           ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Hours2Txt);
                                                                                  EVALUATE(Hours2, Hours2Txt);
                                                                                END;

                                                  Width=6 }

    { [{B330C7A0-E07E-4383-B9D4-8D269E6629A8}];2 ;Hours2Sign          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{7F8D2A4A-2F07-4426-9F4D-248FD471B661}];2 ;Hours3Txt           ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Hours3Txt);
                                                                                  EVALUATE(Hours3, Hours3Txt);
                                                                                END;

                                                  Width=6 }

    { [{797D033B-0CF2-402C-94E4-12548E8EFB38}];2 ;Hours3Sign          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{31C300D0-2CEA-45B7-816C-A435A3100064}];2 ;Amount1Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount1Txt);
                                                                                  EVALUATE(Amount1, Amount1Txt);
                                                                                END;

                                                  Width=9 }

    { [{D89FCBB1-428D-4324-B24B-41D276FFE78D}];2 ;Amount1Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{56876911-9639-4D81-93C8-36C20FA7B402}];2 ;Amount2Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount2Txt);
                                                                                  EVALUATE(Amount2, Amount2Txt);
                                                                                END;

                                                  Width=9 }

    { [{91033460-B466-43B1-8280-76AB3C9F4AC3}];2 ;Amount2Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{26530407-2F84-4D3A-A9EF-E6F2F5421C92}];2 ;Amount3Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount3Txt);
                                                                                  EVALUATE(Amount3, Amount3Txt);
                                                                                END;

                                                  Width=9 }

    { [{AE5B6BAA-7BB2-4ABF-B8F3-8ACCD9636103}];2 ;Amount3Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{A2994FF1-1C8D-438E-8E69-3E2A65C8AD20}];2 ;Amount4Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount4Txt);
                                                                                  EVALUATE(Amount4, Amount4Txt);
                                                                                END;

                                                  Width=9 }

    { [{9E3DC505-2516-4395-BCF5-6E554F11261F}];2 ;Amount4Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{87EB2618-DF63-4905-AC2A-3E94E5319265}];2 ;Amount5Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount5Txt);
                                                                                  EVALUATE(Amount5, Amount5Txt);
                                                                                END;

                                                  Width=9 }

    { [{3148B3A2-3B2A-4E06-8177-9CF19B4B733D}];2 ;Amount5Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{60A031FB-19DC-40F7-8DD7-5A81306EB397}];2 ;Amount6Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount6Txt);
                                                                                  EVALUATE(Amount6, Amount6Txt);
                                                                                END;

                                                  Width=9 }

    { [{5F50643B-610C-4911-95B7-A3B704E4D5A0}];2 ;Amount6Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{F9401B2F-B1FF-4709-90C0-57D5D7557107}];2 ;Amount7Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount7Txt);
                                                                                  EVALUATE(Amount7, Amount7Txt);
                                                                                END;

                                                  Width=9 }

    { [{0F24D896-9E57-4F39-96F9-A866008BAF8B}];2 ;Amount7Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{514F029A-DB97-429F-B7A4-F69FCCF92D9B}];2 ;Amount8Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount8Txt);
                                                                                  EVALUATE(Amount8, Amount8Txt);
                                                                                END;

                                                  Width=9 }

    { [{2431B21E-96BA-45A9-A01A-D97E89285648}];2 ;Amount8Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{FF88A811-D2F4-4564-A516-28F765DD5DFA}];2 ;Amount9Txt          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount9Txt);
                                                                                  EVALUATE(Amount9, Amount9Txt);
                                                                                END;

                                                  Width=9 }

    { [{6FEB948D-67BB-4487-A027-7CB8E7C1F27B}];2 ;Amount9Sign         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{F1F7E24B-934B-4193-BC1E-4D95DFBF1EBC}];2 ;Amount10Txt         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount10Txt);
                                                                                  EVALUATE(Amount10, Amount10Txt);
                                                                                END;

                                                  Width=9 }

    { [{2F5E30C4-86E7-442F-8CE6-3D1A7019C08D}];2 ;Amount10Sign        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{192F2B1F-9F60-416B-9EDE-1C228D10FDDC}];2 ;Amount11Txt         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(Amount11Txt);
                                                                                  EVALUATE(Amount11, Amount11Txt);
                                                                                END;

                                                  Width=9 }

    { [{4DF19B3E-5F01-4FCD-BEBC-57AF2AF61DCC}];2 ;Amount11Sign        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{7C557724-9FFA-4F73-A10A-94F1CD759D57}];2 ;Name                ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=25 }

    { [{1773B9E2-49F9-4454-88C7-C69C969C81BD}];2 ;Filler3             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=9 }

    { [{082A4535-C871-4306-B040-8D241DD8F003}];2 ;Filler4             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=3 }

    { [{4A68D99E-8794-4AAD-A22F-11FD81C5AFBB}];2 ;Filler5             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=2 }

    { [{A8351F73-87CD-4D75-8EF6-55F5C745C188}];2 ;Filler6             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=6 }

    { [{09F723BD-DFF6-4AFD-B3E7-37DBDD58F0EC}];2 ;EndingDate          ;Element ;Text    ;
                                                  VariableName=Ending Date;
                                                  MinOccurs=Zero;
                                                  Width=6 }

    { [{DC581A75-9E78-4FBA-AAA0-66D73B177D83}];2 ;Filler7             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=40 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100528408;;Container;
                  ContainerType=ContentArea }

      { 1100528407;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100528406;2;Field  ;
                  Name=RemZero;
                  CaptionML=[ENU=Remove Zero Prefix;
                             SVE=Ta bort nollprefix];
                  OptionCaptionML=[ENU=All,Upto Maximum Used Field Length;
                                   SVE=Alla,Upp till maximalt anv„nd f„ltl„ngd];
                  SourceExpr=RemZero;
                  OnValidate=BEGIN
                               IF RemZero = RemZero::All THEN BEGIN
                                 MaxLenProj := 0;
                                 MaxLenCostObject := 0;
                                 MaxLenEmpl := 0;
                                 MaxLenElem := 0;
                                 MaxLenAcc := 0;
                               END ELSE BEGIN
                                 MaxLenProj := HumanResourcesSetup."Length Project (Extern)";
                                 MaxLenCostObject := 18 - HumanResourcesSetup."Length Project (Extern)";
                                 MaxLenEmpl := MAXSTRLEN(EmplRec."No.");
                                 MaxLenElem := HumanResourcesSetup."Length Element (Extern)";
                                 MaxLenCostObject := 18 - (HumanResourcesSetup."Length Project (Extern)"+HumanResourcesSetup."Length Element (Extern)");
                                 MaxLenAcc := MAXSTRLEN(GlAccRec."No.");
                               END;
                             END;
                              }

      { 1100528405;2;Field  ;
                  Name=MaxLenProj;
                  CaptionML=[ENU=Project;
                             SVE=Projekt];
                  SourceExpr=MaxLenProj;
                  OnValidate=BEGIN
                               IF MaxLenProj > HumanResourcesSetup."Length Project (Extern)" THEN
                                 MaxLenProj := HumanResourcesSetup."Length Project (Extern)";
                               IF RemZero = RemZero::All THEN
                                 MaxLenProj := 0;
                             END;
                              }

      { 1100528404;2;Field  ;
                  Name=MaxLenElem;
                  CaptionML=[ENU=Element;
                             SVE=Element];
                  SourceExpr=MaxLenElem;
                  OnValidate=BEGIN
                               //**4PS.sn JTH Call 2846
                               IF MaxLenElem > HumanResourcesSetup."Length Element (Extern)" THEN
                                 MaxLenElem := HumanResourcesSetup."Length Element (Extern)";
                               IF RemZero = RemZero::All THEN
                                 MaxLenElem := 0;
                               //**4PS.en
                             END;
                              }

      { 1100528403;2;Field  ;
                  Name=MaxLenCostObject;
                  CaptionML=[ENU=Cost Object;
                             SVE=Kostnadsobjekt];
                  SourceExpr=MaxLenCostObject;
                  OnValidate=BEGIN
                               //**4PS.so JTH Call 2846
                               //IF MaxLenCostObject > 18 - HumanResourcesSetup."Length Project (Extern)" THEN
                               //  MaxLenCostObject := 18 - HumanResourcesSetup."Length Project (Extern)";
                               //**4PS.eo
                               //**4PS.sn JTH Call 2846
                               IF MaxLenCostObject > 18 - (HumanResourcesSetup."Length Project (Extern)" + HumanResourcesSetup."Length Element (Extern)") THEN
                                 MaxLenCostObject := 18 - (HumanResourcesSetup."Length Project (Extern)" + HumanResourcesSetup."Length Element (Extern)");
                               IF RemZero = RemZero::All THEN
                                 MaxLenCostObject := 0;
                               //**4PS.en
                             END;
                              }

      { 1100528402;2;Field  ;
                  Name=MaxLenEmpl;
                  CaptionML=[ENU=Employee;
                             SVE=Personal];
                  SourceExpr=MaxLenEmpl;
                  OnValidate=BEGIN
                               IF MaxLenEmpl > MAXSTRLEN(EmplRec."No.") THEN
                                 MaxLenEmpl := MAXSTRLEN(EmplRec."No.");
                               IF RemZero = RemZero::All THEN
                                 MaxLenEmpl := 0;
                             END;
                              }

      { 1100528401;2;Field  ;
                  Name=MaxLenAcc;
                  CaptionML=[ENU=Account No.;
                             SVE=Nr];
                  SourceExpr=MaxLenAcc;
                  OnValidate=BEGIN
                               IF RemZero = RemZero::All THEN
                                 MaxLenAcc := 0;
                             END;
                              }

    }
  }
  CODE
  {
    VAR
      GLSetup@1100528483 : Record 98;
      HumanResourcesSetup@1100528482 : Record 5218;
      VATPostSetup@1100528481 : Record 325;
      JnlTemplRec@1100528480 : Record 80;
      JnlBatchRec@1100528479 : Record 232;
      CompRec@1100528478 : Record 11012375;
      DimValRec@1100528477 : Record 349;
      HumanResourcesSetupRec@1100525001 : Record 5218;
      JobsSetup@1100528476 : Record 315;
      PostRec@1100528475 : Record 81;
      ProjRec@1100528474 : Record 11072003;
      ElemRec@1100528473 : Record 11012010;
      PtypRec@1100528472 : Record 11012009;
      EmplRec@1100528471 : Record 5200;
      TradeRec@1100528470 : Record 11012015;
      GlAccRec@1100528469 : Record 15;
      PostedHourLine@1100528467 : Record 11012085;
      PaymasterRecordExtensionRec@1100528466 : Record 11012384;
      FileMgt@1100528443 : Codeunit 419;
      XMLportStatusDialogMgt@1100528447 : Codeunit 11130006;
      DimMgt@1100525000 : Codeunit 408;
      LineCounter@1100528465 : Integer;
      BookYear@1100528464 : Integer;
      BookMonth@1100528463 : Integer;
      BookDay@1100528462 : Integer;
      BookWeek@1100528461 : Integer;
      PostingDate@1100528460 : Date;
      Period@1100528459 : Text[30];
      Company@1100528456 : Text[30];
      Administration@1100528455 : Text[30];
      Employee@11012023 : Code[20];
      ProjectCode@1100528451 : Code[20];
      ElementCode@1100528450 : Code[20];
      CostObject@1100528449 : Code[20];
      ReceivingCompany@1100528448 : Text[50];
      Hours1@1100528446 : Decimal;
      Hours2@1100528445 : Decimal;
      Hours3@1100528444 : Decimal;
      Amount1@1100528440 : Decimal;
      Amount2@1100528439 : Decimal;
      Amount3@1100528438 : Decimal;
      Amount4@1100528437 : Decimal;
      Amount5@1100528436 : Decimal;
      Amount6@1100528435 : Decimal;
      Amount7@1100528434 : Decimal;
      Amount8@1100528433 : Decimal;
      Amount9@1100528432 : Decimal;
      Amount10@1100528431 : Decimal;
      Amount11@1100528430 : Decimal;
      filler@1100528418 : Code[50];
      Continue@1100528417 : ARRAY [10] OF Boolean;
      AskCalcMethod@1100528416 : Boolean;
      FinishedProject@1100528415 : Code[20];
      OldFile@1100528414 : Text[250];
      NewFile@1100528413 : Text[250];
      RemZero@1100528412 : 'All,Field Length';
      MaxLenProj@1100528411 : Integer;
      MaxLenElem@1100528410 : Integer;
      MaxLenCostObject@1100528409 : Integer;
      MaxLenEmpl@1100528408 : Integer;
      MaxLenAcc@1100528407 : Integer;
      DocNo@1100528405 : Code[20];
      NoSeriesMgt@1100528404 : Codeunit 396;
      ElementFormat@1100528403 : Codeunit 11012022;
      UsePaymExtension@1100528402 : Boolean;
      CompanyOrg@1100528401 : Text[30];
      CompanyRec@1100528400 : Text[30];
      Text001@1100528441 : TextConst 'ENU=Do you want to import the Actual Wage List in spite of the Project Setup is "Fixed Rate" (i.o. "Actual Rate")?;SVE=Vill du importera den verkliga l”nelistan trots att projektinst„llnIngen „r "Fast avgift" (i st„llet f”r "Verklig avgift")?';
      Text002@1100528429 : TextConst 'ENU=Import of Actual Wage List aborted;SVE=Import av verklig l”nelista avbruten';
      Text003@1100525002 : TextConst 'ENU=Navision Company can not be determined via Company and Administration from Paymaster;SVE=Navision-f”retaget kan inte fastst„llas via f”retag och administration fr†n Paymaster';
      Text006@1100528425 : TextConst 'ENU=%1 Project %2;SVE=%1 projekt %2';
      Text008@1100528424 : TextConst 'ENU=Hour;SVE=Timme';
      Text009@1100528423 : TextConst 'ENU="Hours ";SVE=Timmar';
      Text010@1100528422 : TextConst 'ENU=Import Unknown Cost Object;SVE=Importera ok„nt kostnadsobjekt';
      Text011@1100528421 : TextConst 'ENU=Import Unknown Project;SVE=Importera ok„nt projekt.';
      Text012@1100528420 : TextConst 'ENU=Import Unknown Employee;SVE=Importera ok„nd anst„lld';
      Text013@1100528419 : TextConst 'ENU=Import Unknown Element;SVE=Importera ok„nt element';
      Text014@1100528406 : TextConst 'ENU=Paymasterregel niet gevonden in %1;SVE=Paymasterregeln hittades inte i %1';

    PROCEDURE StripZero@1(VAR convtext@11012000 : Code[20];LenFld@1210190000 : Integer);
    VAR
      Position@11012001 : Integer;
    BEGIN
      Position := STRPOS(convtext,'0');
      WHILE Position = 1 DO BEGIN
        IF LenFld <> 0 THEN
          IF STRLEN(convtext) = LenFld THEN
            EXIT;
          convtext := DELSTR(convtext,Position,1);
          Position := STRPOS(convtext,'0');
      END;
    END;

    PROCEDURE HandleUnknownData@2(importdata@11012000 : Text[30];ImportNumber@11012001 : Integer);
    BEGIN
      IF Continue[ImportNumber] = FALSE THEN BEGIN
        CASE ImportNumber OF
          1: Continue[ImportNumber] := CONFIRM(Text010);
          2: Continue[ImportNumber] := CONFIRM(Text011);
          3: Continue[ImportNumber] := CONFIRM(Text012);
          4: Continue[ImportNumber] := CONFIRM(Text013);
        END;
        IF Continue[ImportNumber] = FALSE THEN ERROR(importdata);
      END;
    END;

    PROCEDURE WIPAcc@25() : Code[20];
    BEGIN
      WITH PtypRec DO BEGIN

        IF (JobsSetup."Provisions at Closure") AND
           (ProjRec."Project Status" >= ProjRec."Project Status"::Finished) AND
           ( FinishedProject <> '') THEN
        BEGIN
          CASE DimValRec."Cost Type" OF
            DimValRec."Cost Type"::Labor:
              EXIT("Provision Account Labor");
            DimValRec."Cost Type"::Material:
              EXIT("Provision Account Material");
            DimValRec."Cost Type"::Subcontracting:
              EXIT("Provision Account Subcontr.");
            DimValRec."Cost Type"::Plant:
              EXIT("Provision Account Plant");
            DimValRec."Cost Type"::Sundry:
              EXIT("Provision Account Sundry");
          END;
        END ELSE BEGIN
          CASE DimValRec."Cost Type" OF
            DimValRec."Cost Type"::Labor:
              EXIT("WIP Account Labor");
            DimValRec."Cost Type"::Material:
              EXIT("WIP Account Material");
            DimValRec."Cost Type"::Subcontracting:
              EXIT("WIP Account Subcontracting");
            DimValRec."Cost Type"::Plant:
              EXIT("WIP Account Plant");
            DimValRec."Cost Type"::Sundry:
              EXIT("WIP Account Sundry");
          END;
        END;
      END;
    END;

    PROCEDURE CheckProjectFinished@1210190001();
    BEGIN
      IF (JobsSetup."Provisions at Closure") THEN BEGIN
        IF ProjRec."Project Status" >= ProjRec."Project Status"::Archive THEN BEGIN
          DetermineFinishedProjectCode;
        END;
      END ELSE BEGIN
        IF ProjRec."Project Status" >= ProjRec."Project Status"::Finished THEN BEGIN
          DetermineFinishedProjectCode;
        END;
      END;
    END;

    PROCEDURE DetermineFinishedProjectCode@1210190003();
    BEGIN
      FinishedProject := ProjectCode;
      ProjRec.TESTFIELD("Project Type");
      PtypRec.GET(ProjRec."Project Type");
      PtypRec.TESTFIELD("Project No.After Closure Costs");
      ProjectCode := PtypRec."Project No.After Closure Costs";
    END;

    PROCEDURE DetermineCompany@1210190002();
    BEGIN
      CompanyOrg := '';
      CompanyRec := '';

      IF NOT UsePaymExtension THEN BEGIN
        CompRec.SETRANGE("Company Salary Application", Company);
        CompRec.SETRANGE(Administration, Administration);
        IF NOT CompRec.FIND('-') THEN
          ERROR(Text003)
        ELSE
          CompanyOrg := CompRec."Navision Company";
      END ELSE BEGIN
        DetermineCompanyExtension;
      END;
    END;

    PROCEDURE DetermineCompanyExtension@1100485000();
    VAR
      HumanResourcesSetupRec@1100485000 : Record 5218;
      ProjectNo@1100485001 : Code[20];
      ElementNo@1100485002 : Code[20];
      CostObjectNo@1100485003 : Code[20];
      PostingDate@1100485004 : Date;
      YearNo@1100485005 : Integer;
      MonthNo@1100485006 : Integer;
      DayNo@1100485007 : Integer;
    BEGIN
      HumanResourcesSetupRec.GET;

      EVALUATE(ProjectNo, COPYSTR(ProjElemCostObject, 1, HumanResourcesSetupRec."Length Project (Extern)"));
      EVALUATE(ElementNo, COPYSTR(ProjElemCostObject,HumanResourcesSetupRec."Length Project (Extern)"+1, HumanResourcesSetupRec."Length Element (Extern)"));
      EVALUATE(CostObjectNo, COPYSTR(ProjElemCostObject,HumanResourcesSetupRec."Length Project (Extern)"+HumanResourcesSetupRec."Length Element (Extern)"+1,
        18-(HumanResourcesSetupRec."Length Project (Extern)"+HumanResourcesSetupRec."Length Element (Extern)")));

      IF RecType = 'G' THEN
        StripZero(ProjectNo, MaxLenAcc)
      ELSE
        StripZero(ProjectNo, MaxLenProj);
      IF ProjectNo = ' ' THEN
        ProjectNo := '';
      StripZero(ElementNo, MaxLenElem);
      IF ElementNo = ' ' THEN
        ElementNo := '';
      StripZero(CostObjectNo, MaxLenCostObject);
      IF CostObjectNo = ' ' THEN
        CostObject := '';
      StripZero(Employee, MaxLenEmpl);

      EVALUATE(YearNo,COPYSTR("Ending Date",5,2));
      EVALUATE(MonthNo,COPYSTR("Ending Date",3,2));
      EVALUATE(DayNo,COPYSTR("Ending Date",1,2));
      PostingDate := DMY2DATE(DayNo,MonthNo,2000+YearNo);

      PaymasterRecordExtensionRec.SETRANGE(Company,Company);
      PaymasterRecordExtensionRec.SETRANGE(Administration,Administration);
      PaymasterRecordExtensionRec.SETRANGE(Employee,Employee);
      PaymasterRecordExtensionRec.SETRANGE("Record Type",RecType);
      PaymasterRecordExtensionRec.SETRANGE("Project/ GL AccountNo",ProjectNo);
      PaymasterRecordExtensionRec.SETRANGE("Element Code",ElementNo);
      PaymasterRecordExtensionRec.SETRANGE("Cost Object Code",CostObjectNo);
      //PaymasterRecordExtensionRec.SETRANGE("Wage Code",WageCode);
      PaymasterRecordExtensionRec.SETRANGE("Hour Date",PostingDate);
      IF PaymasterRecordExtensionRec.FINDFIRST THEN BEGIN
        CompanyOrg := PaymasterRecordExtensionRec."Org Company";
        CompanyRec := PaymasterRecordExtensionRec."Receiving Company";
        IF CompanyOrg = '' THEN
          CompanyOrg := COMPANYNAME;
      END ELSE
        ERROR(Text014,PaymasterRecordExtensionRec.TABLECAPTION);
    END;

    PROCEDURE FillEmptyTextWithZero@1100525013(VAR Text@1100525000 : Text[1024]);
    BEGIN
      IF DELCHR(Text,'<>=',' ') = '' THEN
        Text := '0';
    END;

    LOCAL PROCEDURE ShowStatus@1100409000(JournalTemplateName@1100409000 : Code[10];JournalBatchName@1100409001 : Code[10];LineNo@1100409002 : Integer);
    VAR
      GenJournalLine@1100409004 : Record 81;
      RecRef@1100409003 : RecordRef;
    BEGIN
      GenJournalLine."Journal Template Name" := JournalTemplateName;
      GenJournalLine."Journal Batch Name" := JournalBatchName;
      GenJournalLine."Line No." := LineNo;
      RecRef.GETTABLE(GenJournalLine);
      XMLportStatusDialogMgt.ShowImportStatus(RecRef);
    END;

    PROCEDURE InitXMLport@1100529500(iRemZero@1100529505 : 'All,Field Length';iMaxLenProj@1100529504 : Integer;iMaxLenElem@1100529503 : Integer;iMaxLenCostObject@1100529502 : Integer;iMaxLenEmpl@1100529501 : Integer;iMaxLenAcc@1100529500 : Integer);
    BEGIN
      RemZero := iRemZero;
      MaxLenProj := iMaxLenProj;
      MaxLenElem := iMaxLenElem;
      MaxLenCostObject := iMaxLenCostObject;
      MaxLenEmpl := iMaxLenEmpl;
      MaxLenAcc := iMaxLenAcc;
    END;

    BEGIN
    END.
  }
}

