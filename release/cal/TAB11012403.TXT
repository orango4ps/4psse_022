OBJECT Table 11012403 Document Part
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               DocumentPart@1100528200 : Record 11012403;
             BEGIN
               DocumentPart.SETRANGE(Level, Level);
               DocumentPart.SETRANGE("Set Code", "Set Code");
               DocumentPart.SETRANGE("Full File Name", "Full File Name");
               DocumentPart.SETFILTER(Code, '<>%1', Code);
               IF DocumentPart.ISEMPTY THEN
                 DeleteWordFile;
             END;

    CaptionML=[ENU=Document Part;
               SVE=Dokumentdelar];
  }
  FIELDS
  {
    { 20  ;   ;Level               ;Option        ;CaptionML=[ENU=Level;
                                                              NOR=Niv†;
                                                              SVE=Niv†];
                                                   OptionCaptionML=[ENU=General,,Vendor,,,,,Purchase Order;
                                                                    SVE=Allm„n,,Leverant”r,,,,,Ink”psorder];
                                                   OptionString=General,,Vendor,,,,,Purchase Order }
    { 40  ;   ;Set Code            ;Code20        ;TableRelation="Document Parts Set".Code WHERE (Level=FIELD(Level));
                                                   CaptionML=[ENU=Set Code;
                                                              NOR=Still inn kode;
                                                              SVE=St„ll in kod] }
    { 50  ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 60  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 70  ;   ;File Name           ;Text80        ;CaptionML=[ENU=File Name;
                                                              NOR=Filnavn;
                                                              SVE=Filnamn];
                                                   Editable=No }
    { 80  ;   ;Full File Name      ;Text250       ;CaptionML=[ENU=Full File Name;
                                                              NOR=Fullstendig filnavn;
                                                              SVE=Fullst„ndigt filnamn];
                                                   Editable=No }
    { 90  ;   ;Source Type (Level) ;Option        ;CaptionML=ENU=Source Type (Level);
                                                   OptionCaptionML=ENU=" ,General,,Vendor,,,,,Purchase Order";
                                                   OptionString=[ ,General,,Vendor,,,,,Purchase Order];
                                                   Description=DP01292 }
    { 100 ;   ;Source Type (Set)   ;Code20        ;TableRelation="Document Parts Set".Code WHERE (Level=FIELD("Source Type (Level)"));
                                                   CaptionML=ENU=Source Type (Set);
                                                   Description=DP01292 }
  }
  KEYS
  {
    {    ;Level,Set Code,Code                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text11012001@1100528200 : TextConst 'ENU=%1 ''%2'' does not exist.;NOR=%1 ''%2'' finnes ikke.;SVE=%1 %2 finns inte.';
      Text11012002@1100528201 : TextConst 'ENU=The file %1 overwrite with %2?';
      Text11012003@1100528202 : TextConst 'ENU=The file %1 already exists. overwrite?';
      Text11012004@1100529400 : TextConst 'ENU=Document System Setup %1 is empty';

    PROCEDURE GetWordFile@1100528200();
    VAR
      FileManagement@1100528201 : Codeunit 419;
      FilterString@1100528200 : Text;
      FileName@1100528204 : Text;
      FolderName@1100528203 : Text;
      FolderAndFile@1100528202 : Text;
    BEGIN
      FilterString := FileManagement.GetToFilterText('', '');
      FolderAndFile := FileManagement.OpenFileDialog('', '', FilterString);
      IF FolderAndFile <> '' THEN BEGIN
        FolderName := FileManagement.GetDirectoryNameWithBackSlash(FolderAndFile);
        FileName := FileManagement.GetFileName(FolderAndFile);
      END ELSE
        EXIT;;

      IF DoCopyFile(FolderName,FileName) THEN BEGIN  //Returns new path and file
        VALIDATE("File Name", FileName);
        VALIDATE("Full File Name", FolderName + FileName);
      END;
    END;

    LOCAL PROCEDURE DoCopyFile@1100528101(VAR IODirectory@1100528203 : Text;VAR IOFileName@1210190003 : Text) : Boolean;
    VAR
      TargetDirectory@1210190005 : Text[250];
      TargetFileName@1199197400 : Text[250];
    BEGIN
      //lFileName: input param: the filepath of the file to register
      //           output param: the filename of file on its final destination
      IF IOFileName = '' THEN
        EXIT(FALSE);
      IODirectory := LOWERCASE(IODirectory);
      SetTargetMap(TargetDirectory);
      TargetFileName := IOFileName;
      IF CopyFile(TargetDirectory, TargetFileName, IODirectory, IOFileName) THEN BEGIN
        IOFileName := TargetFileName;
        IODirectory := TargetDirectory;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CopyFile@1210190019(TargetDirectory@1210190001 : Text[250];TargetFilename@1199197400 : Text[250];SourceDirectory@1210190002 : Text[250];SourceFilename@1210190003 : Text[250]) : Boolean;
    VAR
      FileMgt@1100528200 : Codeunit 419;
    BEGIN
      IF (TargetDirectory = SourceDirectory) AND (TargetFilename = SourceFilename) THEN
        EXIT(TRUE);

      IF "File Name" <> '' THEN
        IF FileMgt.ClientFileExists(TargetDirectory + "File Name") THEN BEGIN
          IF NOT CONFIRM(Text11012002, FALSE, "File Name", TargetFilename) THEN
            EXIT(FALSE);
          FileMgt.DeleteClientFile4PS(TargetDirectory + "File Name",TRUE);
        END;

      IF FileMgt.ClientFileExists(TargetDirectory + TargetFilename) THEN BEGIN
        IF NOT CONFIRM(Text11012003, FALSE, TargetDirectory + TargetFilename) THEN
          EXIT(FALSE);
        FileMgt.DeleteClientFile4PS(TargetDirectory + TargetFilename,TRUE);
      END;

      EXIT(FileMgt.CopyClientFile4PS(
          SourceDirectory + SourceFilename,
          TargetDirectory + TargetFilename,
          TRUE));
    END;

    PROCEDURE OpenWordFile@1100528201();
    VAR
      FileMgt@1100528200 : Codeunit 419;
      TargetDirectory@1100528202 : Text;
      TargetFileName@1100528205 : Text;
    BEGIN
      IF "File Name" = '' THEN EXIT;
      SetTargetMap(TargetDirectory);
      TargetFileName := TargetDirectory + "File Name";
      IF FileMgt.ClientFileExists(TargetFileName) THEN
        HYPERLINK(TargetFileName);
    END;

    LOCAL PROCEDURE DeleteWordFile@1100528202();
    VAR
      FileMgt@1100528200 : Codeunit 419;
    BEGIN
      IF "File Name" = '' THEN EXIT;
      IF FileMgt.ClientFileExists("Full File Name") THEN
        FileMgt.DeleteClientFile("Full File Name");
    END;

    PROCEDURE CopyFileFromCodeToCode@1100528208(FromDocumentPart@1100528200 : Record 11012403);
    VAR
      TargetDirectory@1100528205 : Text;
      TargetFileName@1100528204 : Text;
    BEGIN
      IF FromDocumentPart."Full File Name" = '' THEN EXIT;
      SetTargetMap(TargetDirectory);
      TargetFileName := FromDocumentPart."File Name";
      CopyFile(TargetDirectory, TargetFileName, FromDocumentPart."Full File Name", '');
      "Full File Name" := TargetDirectory + TargetFileName;
      "File Name" := TargetFileName;
    END;

    LOCAL PROCEDURE SetTargetMap@1100528203(VAR TargetDirectory@1100528201 : Text);
    VAR
      FileMgt@1100528204 : Codeunit 419;
      FileSystemOnPremiseSetup@1100528202 : Record 11125739;
      lvTargetFieldCaption@1100528203 : Text;
    BEGIN
      FileSystemOnPremiseSetup.GET;

      TargetDirectory := LOWERCASE(FileSystemOnPremiseSetup."Dir. Document Parts");
      lvTargetFieldCaption := FileSystemOnPremiseSetup.FIELDCAPTION("Dir. Document Parts");

      IF FileSystemOnPremiseSetup."Dir. Document Parts" = '' THEN
        ERROR(Text11012004,lvTargetFieldCaption);

      IF NOT FileMgt.ClientDirectoryExists(TargetDirectory) THEN
        ERROR(Text11012001, lvTargetFieldCaption, TargetDirectory);

      CASE Level OF
        Level::General:
          TargetDirectory := TargetDirectory + 'General' + '\';
        Level::Vendor:
          TargetDirectory := TargetDirectory + 'Vendor' + '\';
        Level::"Purchase Order":
          TargetDirectory := TargetDirectory + 'Purchase_Order' + '\';
      END;
      IF NOT FileMgt.ClientDirectoryExists(TargetDirectory) THEN
        FileMgt.CreateClientFolder(TargetDirectory);

      IF "Set Code"  <> '' THEN BEGIN
        TargetDirectory := TargetDirectory + "Set Code" + '\';
        IF NOT FileMgt.ClientDirectoryExists(TargetDirectory) THEN
          FileMgt.CreateClientFolder(TargetDirectory);
      END;
    END;

    PROCEDURE GetDocumentSet@1100525000(iAction@1100525001 : Integer) DocSet : Text[50];
    VAR
      DocumentSet@1100525000 : Record 11012402;
    BEGIN
      //db, 02-02-17 (DP01292)
      IF "Source Type (Set)" = '' THEN BEGIN
        DocumentSet.SETRANGE(Level, DocumentSet.Level::General);
        DocumentSet.SETRANGE(Code, "Set Code");
        IF NOT DocumentSet.FINDFIRST THEN
          DocumentSet.INIT;
        IF iAction = 1 THEN
          DocSet := DocumentSet.Code
        ELSE
          DocSet := DocumentSet.Description;
      END ELSE BEGIN
        IF NOT DocumentSet.GET("Source Type (Level)"-1, "Source Type (Set)") THEN
          DocumentSet.INIT;
        IF iAction = 1 THEN
          DocSet := DocumentSet.Code
        ELSE
          DocSet := DocumentSet.Description;
      END;
      EXIT(DocSet);
    END;

    PROCEDURE LookupDocumentSet@1100525001();
    VAR
      DocumentSet@1100525000 : Record 11012402;
    BEGIN
      //db, 02-02-17 (DP01292)
      DocumentSet.SETRANGE(Level, "Source Type (Level)"-1);
      DocumentSet.Code := "Source Type (Set)";
      PAGE.RUNMODAL(0, DocumentSet);
    END;

    BEGIN
    END.
  }
}

