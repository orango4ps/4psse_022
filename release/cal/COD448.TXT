OBJECT Codeunit 448 Job Queue Dispatcher
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=472;
    Permissions=TableData 472=rimd;
    OnRun=VAR
            Skip@1000 : Boolean;
          BEGIN
            OnBeforeRun(Rec,Skip);
            IF Skip THEN
              EXIT;

            SELECTLATESTVERSION;
            GET(ID);
            IF NOT IsReadyToStart THEN
              EXIT;

            IF IsExpired(CURRENTDATETIME) THEN
              DeleteTask
            ELSE
              IF WaitForOthersWithSameCategory(Rec) THEN
                Reschedule(Rec)
              ELSE
                HandleRequest(Rec);
            COMMIT;
          END;

  }
  CODE
  {
    VAR
      TypeHelper@1000 : Codeunit 10;

    LOCAL PROCEDURE HandleRequest@6(VAR JobQueueEntry@1000 : Record 472);
    VAR
      JobQueueLogEntry@1003 : Record 474;
      WasSuccess@1002 : Boolean;
      PrevStatus@1001 : Option;
    BEGIN
      JobQueueEntry.RefreshLocked;
      IF NOT JobQueueEntry.IsReadyToStart THEN
        EXIT;

      OnBeforeHandleRequest(JobQueueEntry);

      WITH JobQueueEntry DO BEGIN
        IF Status IN [Status::Ready,Status::"On Hold with Inactivity Timeout"] THEN BEGIN
          Status := Status::"In Process";
          "User Session Started" := CURRENTDATETIME;
          MODIFY;
        END;
        InsertLogEntry(JobQueueLogEntry);

        // Codeunit.Run is limited during write transactions because one or more tables will be locked.
        // To avoid NavCSideException we have either to add the COMMIT before the call or do not use a returned value.
        COMMIT;
        OnBeforeExecuteJob(JobQueueEntry);
        WasSuccess := CODEUNIT.RUN(CODEUNIT::"Job Queue Start Codeunit",JobQueueEntry);
        OnAfterExecuteJob(JobQueueEntry,WasSuccess);
        PrevStatus := Status;

        // user may have deleted it in the meantime
        IF DoesExistLocked THEN
          SetResult(WasSuccess,PrevStatus)
        ELSE
          SetResultDeletedEntry;

        //**4PS.sn
        IF "Endless Job" THEN
          DeleteOldLogEntries(JobQueueEntry);
        //**4PS.en

        COMMIT;
        FinalizeLogEntry(JobQueueLogEntry);

        IF DoesExistLocked THEN
          FinalizeRun;
      END;

      OnAfterHandleRequest(JobQueueEntry,WasSuccess);
    END;

    LOCAL PROCEDURE WaitForOthersWithSameCategory@9(VAR CurrJobQueueEntry@1000 : Record 472) : Boolean;
    VAR
      JobQueueEntry@1001 : Record 472;
      JobQueueCategory@1002 : Record 471;
    BEGIN
      OnBeforeWaitForOthersWithSameCategory(CurrJobQueueEntry,JobQueueEntry);

      IF CurrJobQueueEntry."Job Queue Category Code" = '' THEN
        EXIT(FALSE);

      // Use the Job Queue Category as a semaphore so only one checks at the time.
      JobQueueCategory.LOCKTABLE;
      IF NOT JobQueueCategory.GET(CurrJobQueueEntry."Job Queue Category Code") THEN
        EXIT(FALSE);

      WITH JobQueueEntry DO BEGIN
        SETFILTER(ID,'<>%1',CurrJobQueueEntry.ID);
        SETRANGE("Job Queue Category Code",CurrJobQueueEntry."Job Queue Category Code");
        SETRANGE(Status,Status::"In Process");
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE Reschedule@15(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
      WITH JobQueueEntry DO BEGIN
        RefreshLocked;
        RANDOMIZE;
        CLEAR("System Task ID"); // to avoid canceling this task, which has already been executed
        "Earliest Start Date/Time" := CURRENTDATETIME + 2000 + RANDOM(5000);
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
      END;
    END;

    [External]
    PROCEDURE CalcNextRunTimeForRecurringJob@1(VAR JobQueueEntry@1000 : Record 472;StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1002 : DateTime;
      NewRunDate@1001 : Date;
    BEGIN
      IF IsNextRecurringRunTimeCalculated(JobQueueEntry,StartingDateTime,NewRunDateTime) THEN
        EXIT(NewRunDateTime);

      IF JobQueueEntry.IsNextRunDateFormulaSet THEN BEGIN
        NewRunDate := CALCDATE(JobQueueEntry."Next Run Date Formula",DT2DATE(StartingDateTime));
        EXIT(CREATEDATETIME(NewRunDate,JobQueueEntry."Starting Time"));
      END;

      IF JobQueueEntry."No. of Minutes between Runs" > 0 THEN
        NewRunDateTime := TypeHelper.AddMinutesToDateTime(StartingDateTime,JobQueueEntry."No. of Minutes between Runs")
      ELSE BEGIN
        IF JobQueueEntry."Earliest Start Date/Time" <> 0DT THEN
          StartingDateTime := JobQueueEntry."Earliest Start Date/Time";
        NewRunDateTime := CREATEDATETIME(DT2DATE(StartingDateTime) + 1,0T);
      END;

      EXIT(CalcRunTimeForRecurringJob(JobQueueEntry,NewRunDateTime));
    END;

    [External]
    PROCEDURE CalcNextRunTimeHoldDuetoInactivityJob@3(VAR JobQueueEntry@1000 : Record 472;StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1002 : DateTime;
    BEGIN
      NewRunDateTime := TypeHelper.AddMinutesToDateTime(StartingDateTime,JobQueueEntry."Inactivity Timeout Period");
      EXIT(CalcRunTimeForRecurringJob(JobQueueEntry,NewRunDateTime));
    END;

    [External]
    PROCEDURE CalcInitialRunTime@4(VAR JobQueueEntry@1000 : Record 472;StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      EarliestPossibleRunTime@1001 : DateTime;
    BEGIN
      IF (JobQueueEntry."Earliest Start Date/Time" <> 0DT) AND (JobQueueEntry."Earliest Start Date/Time" > StartingDateTime) THEN
        EarliestPossibleRunTime := JobQueueEntry."Earliest Start Date/Time"
      ELSE
        EarliestPossibleRunTime := StartingDateTime;

      IF JobQueueEntry."Recurring Job" AND NOT JobQueueEntry.IsNextRunDateFormulaSet THEN
        EXIT(CalcRunTimeForRecurringJob(JobQueueEntry,EarliestPossibleRunTime));

      EXIT(EarliestPossibleRunTime);
    END;

    LOCAL PROCEDURE CalcRunTimeForRecurringJob@11(VAR JobQueueEntry@1000 : Record 472;StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1001 : DateTime;
      RunOnDate@1003 : ARRAY [7] OF Boolean;
      StartingWeekDay@1005 : Integer;
      NoOfExtraDays@1004 : Integer;
      NoOfDays@1007 : Integer;
      Found@1006 : Boolean;
    BEGIN
      WITH JobQueueEntry DO BEGIN
        TESTFIELD("Recurring Job");
        RunOnDate[1] := "Run on Mondays";
        RunOnDate[2] := "Run on Tuesdays";
        RunOnDate[3] := "Run on Wednesdays";
        RunOnDate[4] := "Run on Thursdays";
        RunOnDate[5] := "Run on Fridays";
        RunOnDate[6] := "Run on Saturdays";
        RunOnDate[7] := "Run on Sundays";

        NewRunDateTime := StartingDateTime;
        NoOfDays := 0;
        IF ("Ending Time" <> 0T) AND (NewRunDateTime > GetEndingDateTime(NewRunDateTime)) THEN BEGIN
          NewRunDateTime := GetStartingDateTime(NewRunDateTime);
          NoOfDays := NoOfDays + 1;
        END;

        StartingWeekDay := DATE2DWY(DT2DATE(StartingDateTime),1);
        Found := RunOnDate[(StartingWeekDay - 1 + NoOfDays) MOD 7 + 1];
        WHILE NOT Found AND (NoOfExtraDays < 7) DO BEGIN
          NoOfExtraDays := NoOfExtraDays + 1;
          NoOfDays := NoOfDays + 1;
          Found := RunOnDate[(StartingWeekDay - 1 + NoOfDays) MOD 7 + 1];
        END;

        IF ("Starting Time" <> 0T) AND (NewRunDateTime < GetStartingDateTime(NewRunDateTime)) THEN
          NewRunDateTime := GetStartingDateTime(NewRunDateTime);

        IF (NoOfDays > 0) AND (NewRunDateTime > GetStartingDateTime(NewRunDateTime)) THEN
          NewRunDateTime := GetStartingDateTime(NewRunDateTime);

        IF ("Starting Time" = 0T) AND (NoOfExtraDays > 0) AND ("No. of Minutes between Runs" <> 0) THEN
          NewRunDateTime := CREATEDATETIME(DT2DATE(NewRunDateTime),0T);

        IF Found THEN
          NewRunDateTime := CREATEDATETIME(DT2DATE(NewRunDateTime) + NoOfDays,DT2TIME(NewRunDateTime));
      END;
      EXIT(NewRunDateTime);
    END;

    LOCAL PROCEDURE IsNextRecurringRunTimeCalculated@7(JobQueueEntry@1000 : Record 472;StartingDateTime@1001 : DateTime;VAR NewRunDateTime@1002 : DateTime) IsHandled : Boolean;
    BEGIN
      OnBeforeCalcNextRunTimeForRecurringJob(JobQueueEntry,StartingDateTime,NewRunDateTime,IsHandled);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcNextRunTimeForRecurringJob@12(JobQueueEntry@1000 : Record 472;StartingDateTime@1001 : DateTime;VAR NewRunDateTime@1002 : DateTime;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterHandleRequest@2(VAR JobQueueEntry@1000 : Record 472;WasSuccess@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeHandleRequest@8(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeExecuteJob@10(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterExecuteJob@13(VAR JobQueueEntry@1000 : Record 472;WasSuccess@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@14(VAR JobQueueEntry@1000 : Record 472;VAR Skip@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeWaitForOthersWithSameCategory@5(VAR CurrJobQueueEntry@1000 : Record 472;VAR JobQueueEntry@1001 : Record 472);
    BEGIN
    END;

    LOCAL PROCEDURE DeleteOldLogEntries@1100528702(JobQueueEntry@1100528701 : Record 472);
    VAR
      JobQueueLogEntry@1100528700 : Record 474;
    BEGIN
      //**4PS
      JobQueueLogEntry.SETRANGE(ID, JobQueueEntry.ID);
      JobQueueLogEntry.SETFILTER(Status, '<>%1', JobQueueLogEntry.Status::"In Process");
      JobQueueLogEntry.SETFILTER("End Date/Time", '<=%1', CREATEDATETIME(TODAY, TIME-60*60*1000));
      JobQueueLogEntry.DELETEALL;
    END;

    BEGIN
    END.
  }
}

