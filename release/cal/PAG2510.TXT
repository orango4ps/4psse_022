OBJECT Page 2510 Marketplace Extn. Deployment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Extension Installation;
               NOR=Installasjon av utvidelse;
               SVE=Till„ggsinstallation];
    PageType=NavigatePage;
    OnInit=VAR
             WinLanguagesTable@1000 : Record 2000000045;
           BEGIN
             LanguageID := GLOBALLANGUAGE;
             WinLanguagesTable.SETRANGE("Language ID",LanguageID);
             IF WinLanguagesTable.FINDFIRST THEN
               LanguageName := WinLanguagesTable.Name;
           END;

    ActionList=ACTIONS
    {
      { 4       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 5       ;1   ;Action    ;
                      Name=Install;
                      CaptionML=[ENU=Install;
                                 NOR=Installer;
                                 SVE=Installera];
                      ApplicationArea=#Basic,#Suite;
                      InFooterBar=Yes;
                      OnAction=VAR
                                 NavAppTable@1002 : Record 2000000160;
                                 NavExtensionInstallationMgmt@1001 : Codeunit 2500;
                                 NavExtensionOperationMgmt@1000 : Codeunit 2503;
                                 ExtensionNotFound@1004 : Boolean;
                               BEGIN
                                 NavAppTable.SETFILTER(ID,'%1',ExtensionAppId);
                                 ExtensionNotFound := NOT NavAppTable.FINDFIRST;

                                 IF ExtensionNotFound THEN BEGIN
                                   // If extension not found sent the request to regional service
                                   NavExtensionOperationMgmt.DeployNavExtension(ExtensionAppId,LanguageID);
                                   MESSAGE(OperationProgressMsg);
                                   CurrPage.CLOSE;
                                   EXIT;
                                 END;

                                 // If extension found then check whether it is third party or first party extension
                                 IF NavExtensionInstallationMgmt.IsInstalledByAppId(ExtensionAppId) THEN BEGIN
                                   CurrPage.CLOSE;
                                   MESSAGE(STRSUBSTNO(AlreadyInstalledMsg,NavAppTable.Name));
                                   EXIT;
                                 END;

                                 // If first party extension install it locally
                                 IF NavAppTable.Publisher = 'Microsoft' THEN
                                   InstallApp(ExtensionAppId)
                                 ELSE BEGIN
                                   // If extension found but is third party then send the request to regional service
                                   NavExtensionOperationMgmt.DeployNavExtension(ExtensionAppId,LanguageID);
                                   MESSAGE(OperationProgressMsg);
                                 END;

                                 CurrPage.CLOSE;
                                 EXIT;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                GroupType=Group }

    { 6   ;1   ;Field     ;
                Name=Choose Language;
                CaptionML=[ENU=Choose Language;
                           NOR=Velg spr†k;
                           SVE=V„lj spr†k];
                ApplicationArea=#Basic,#Suite;
                Style=StandardAccent;
                StyleExpr=TRUE }

    { 3   ;1   ;Field     ;
                Name=Language;
                CaptionML=[ENU=Language;
                           NOR=Spr†k;
                           SVE=Spr†k];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=LanguageName;
                OnValidate=VAR
                             WinLanguagesTable@1000 : Record 2000000045;
                           BEGIN
                             WinLanguagesTable.SETRANGE(Name,LanguageName);
                             WinLanguagesTable.SETRANGE("Globally Enabled",TRUE);
                             WinLanguagesTable.SETRANGE("Localization Exist",TRUE);
                             IF WinLanguagesTable.FINDFIRST THEN
                               LanguageID := WinLanguagesTable."Language ID"
                             ELSE
                               ERROR(LanguageNotFoundErr,LanguageName);
                           END;

                OnLookup=VAR
                           WinLanguagesTable@1001 : Record 2000000045;
                         BEGIN
                           WinLanguagesTable.SETRANGE("Globally Enabled",TRUE);
                           WinLanguagesTable.SETRANGE("Localization Exist",TRUE);
                           IF PAGE.RUNMODAL(PAGE::"Windows Languages",WinLanguagesTable) = ACTION::LookupOK THEN BEGIN
                             LanguageID := WinLanguagesTable."Language ID";
                             LanguageName := WinLanguagesTable.Name;
                           END;
                         END;
                          }

  }
  CODE
  {
    VAR
      LanguageName@1001 : Text;
      LanguageID@1000 : Integer;
      LanguageNotFoundErr@1002 : TextConst '@@@="Error message to notify user that the entered language was not found. This could mean that the language doesn''t exist or that the language is not valid within the filter set for the lookup. %1=Entered value.";ENU=Cannot find the specified language, %1. Choose the lookup button to select a language.;NOR=Finner ikke det angitte spr†ket %1. Velg oppslagsknappen for † velge spr†k.;SVE=Det g†r inte att hitta det angivna spr†ket %1. V„lj s”kknappen och v„lj ett spr†k.';
      ExtensionAppId@1003 : GUID;
      OperationProgressMsg@1004 : TextConst 'ENU=Extension installation is in progress. Please check the status page for updates.;NOR=Installasjon av utvidelseÿp†g†r. Kontroller statussiden for oppdateringer.;SVE=Installationen av till„gget p†g†r. Kontrollera p† statussidan om det finns uppdateringar.';
      TelemetryUrl@1007 : Text;
      AlreadyInstalledMsg@1008 : TextConst '@@@="%1=name of app";ENU=The extension %1 is already installed.;NOR=Utvidelsen %1 er allerede installert.;SVE=Till„gget %1 har redan installerats.';
      DependenciesFoundQst@1009 : TextConst '@@@="%1=name of app, %2=semicolon separated list of uninstalled dependencies";ENU=The extension %1 has a dependency on one or more extensions: %2.\\Do you wish to install %1 and all of its dependencies?;NOR=Utvidelsen %1 har en avhengighet for ‚n eller flere utvidelser: %2.\\Vil du installere %1 og alle dens avhengigheter?;SVE=Till„gget %1 „r beroende av ett eller flera till„gg: %2.\\Vill du installera %1 och alla dess beroenden?';
      OperationResult@1010 : 'UserNotAuthorized,DeploymentFailedDueToPackage,DeploymentFailed,Successful,UserCancel,UserTimeOut';
      RestartActivityInstallMsg@1005 : TextConst '@@@="Indicates that users need to restart their activity to pick up new menusuite items. %1=Name of Extension";ENU=The extension %1 was successfully installed. All active users must log out and log in again to see the navigation changes.;NOR=Utvidelsen %1 ble installert. Alle aktive brukere m† logge av og p† igjen for † se navigasjonsendringene.;SVE=Till„gget %1 installerades. Alla aktiva anv„ndare m†ste logga ut och logga in igen f”r att se navigerings„ndringarna.';

    [External]
    PROCEDURE SetAppIDAndTelemetryUrl@1(AppID@1000 : GUID;Url@1001 : Text);
    BEGIN
      ExtensionAppId := AppID;
      TelemetryUrl := Url;
    END;

    LOCAL PROCEDURE MakeTelemetryCallback@4(Result@1000 : 'UserNotAuthorized,DeploymentFailedDueToPackage,DeploymentFailed,Successful,UserCancel,UserTimeOut';PackageId@1002 : GUID);
    VAR
      ExtensionMarketplaceMgmt@1001 : Codeunit 2501;
    BEGIN
      IF TelemetryUrl <> '' THEN
        ExtensionMarketplaceMgmt.MakeMarketplaceTelemetryCallback(TelemetryUrl,Result,PackageId);
    END;

    LOCAL PROCEDURE InstallApp@2(AppId@1003 : GUID);
    VAR
      NAVAppTable@1005 : Record 2000000160;
      NavExtensionInstallationMgmt@1004 : Codeunit 2500;
      Dependencies@1002 : Text;
      CanChange@1001 : Boolean;
      Result@1000 : Option;
    BEGIN
      NAVAppTable.SETRANGE("Package ID",NavExtensionInstallationMgmt.GetLatestVersionPackageId(AppId));
      NAVAppTable.FINDFIRST;

      Dependencies := NavExtensionInstallationMgmt.GetDependenciesForExtensionToInstall(NAVAppTable."Package ID");
      CanChange := (STRLEN(Dependencies) = 0);

      IF NOT CanChange THEN
        CanChange := CONFIRM(STRSUBSTNO(DependenciesFoundQst,NAVAppTable.Name,Dependencies),FALSE);

      Result := OperationResult::Successful;
      IF CanChange THEN BEGIN
        NavExtensionInstallationMgmt.InstallNavExtension(NAVAppTable."Package ID",LanguageID);

        // If successfully installed, message users to restart activity for menusuites
        IF NavExtensionInstallationMgmt.IsInstalled(NAVAppTable."Package ID") THEN
          MESSAGE(STRSUBSTNO(RestartActivityInstallMsg,NAVAppTable.Name))
        ELSE
          Result := OperationResult::DeploymentFailedDueToPackage;
      END;

      MakeTelemetryCallback(Result,NAVAppTable."Package ID");
    END;

    BEGIN
    END.
  }
}

