OBJECT Report 398 Date Compress Vendor Ledger
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 25=rimd,
                TableData 45=rimd,
                TableData 87=rimd,
                TableData 355=imd,
                TableData 380=rimd;
    CaptionML=[ENU=Date Compress Vendor Ledger;
               NOR=Datokompr. leverandõrposter;
               SVE=Datumkompr. lev.reskontra];
    ApplicationArea=#Suite;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Vendor Ledger",'',RetainDimText,Text010);
                  VendLedgEntryFilter := COPYSTR("Vendor Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

    UsageCategory=Tasks;
  }
  DATASET
  {
    { 4114;    ;DataItem;                    ;
               DataItemTable=Table25;
               DataItemTableView=SORTING(Vendor No.,Posting Date)
                                 WHERE(Open=CONST(No));
               OnPreDataItem=VAR
                               GLSetup@1000 : Record 98;
                               ConfirmManagement@1001 : Codeunit 27;
                             BEGIN
                               IF NOT ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
                                 CurrReport.BREAK;

                               IF EntrdDateComprReg."Ending Date" = 0D THEN
                                 ERROR(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date"));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Vend. Ledger");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress Vendor Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[4] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Vendor Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[5] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Vendor Ledger",'',GLSetup."Global Dimension 2 Code");

                               GLentry.LOCKTABLE;
                               NewDtldVendLedgEntry.LOCKTABLE;
                               NewVendLedgEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               IF GLentry.FINDLAST THEN;
                               LastEntryNo := GLentry."Entry No.";
                               NextTransactionNo := GLentry."Transaction No." + 1;
                               IF NewDtldVendLedgEntry.FINDLAST THEN;
                               LastDtldEntryNo := NewDtldVendLedgEntry."Entry No.";
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  VendLedgEntry2 := "Vendor Ledger Entry";
                                  WITH VendLedgEntry2 DO BEGIN
                                    IF NOT CompressDetails("Vendor Ledger Entry") THEN
                                      CurrReport.SKIP;
                                    SETCURRENTKEY("Vendor No.","Posting Date");
                                    COPYFILTERS("Vendor Ledger Entry");
                                    SETRANGE("Vendor No.","Vendor No.");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,TRUE));
                                    SETRANGE("Vendor Posting Group","Vendor Posting Group");
                                    SETRANGE("Currency Code","Currency Code");
                                    SETRANGE("Document Type","Document Type");

                                    IF RetainNo(FIELDNO("Document No.")) THEN
                                      SETRANGE("Document No.","Document No.");
                                    IF RetainNo(FIELDNO("Buy-from Vendor No.")) THEN
                                      SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
                                    IF RetainNo(FIELDNO("Purchaser Code")) THEN
                                      SETRANGE("Purchaser Code","Purchaser Code");
                                    IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
                                      SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                    IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
                                      SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");

                                    CALCFIELDS(Amount);
                                    IF Amount >= 0 THEN
                                      SummarizePositive := TRUE
                                    ELSE
                                      SummarizePositive := FALSE;

                                    InitNewEntry(NewVendLedgEntry);

                                    DimBufMgt.CollectDimEntryNo(
                                      TempSelectedDim,"Dimension Set ID","Entry No.",
                                      0,FALSE,DimEntryNo);
                                    ComprDimEntryNo := DimEntryNo;
                                    SummarizeEntry(NewVendLedgEntry,VendLedgEntry2);
                                    WHILE NEXT <> 0 DO BEGIN
                                      CALCFIELDS(Amount);
                                      IF ((Amount >= 0) AND SummarizePositive) OR
                                         ((Amount < 0) AND (NOT SummarizePositive))
                                      THEN
                                        IF CompressDetails(VendLedgEntry2) THEN BEGIN
                                          DimBufMgt.CollectDimEntryNo(
                                            TempSelectedDim,"Dimension Set ID","Entry No.",
                                            ComprDimEntryNo,TRUE,DimEntryNo);
                                          IF DimEntryNo = ComprDimEntryNo THEN
                                            SummarizeEntry(NewVendLedgEntry,VendLedgEntry2);
                                        END;
                                    END;

                                    InsertNewEntry(NewVendLedgEntry,ComprDimEntryNo);

                                    ComprCollectedEntries;
                                  END;

                                  IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                                  InsertRegisters(GLReg,DateComprReg);
                              END;

               ReqFilterFields=Vendor No.,Vendor Posting Group,Currency Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitializeParameter;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             NOR=Startdato;
                             SVE=Startdatum];
                  ToolTipML=[ENU=Specifies the date from which the report or batch job processes information.;
                             NOR=Angir datoen som rapporten eller kjõrselen behandler informasjon fra.;
                             SVE=Anger datumet frÜn vilket rapporten eller buntjobbet bearbetar information.];
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ToolTipML=[ENU=Specifies the date to which the report or batch job processes information.;
                             NOR=Angir datoen som rapporten eller kjõrselen behandler informasjon til.;
                             SVE=Anger datumet till vilket rapporten eller buntjobbet bearbetar information.];
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Period Length;
                             NOR=Periodelengde;
                             SVE=Period];
                  ToolTipML=[ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                             NOR=Angir perioden som rapporten skal vise data for. Angi for eksempel 1M for Çn mÜned, 30D for 30 dager, 3K for tre kvartaler eller 5è for fem Ür.;
                             SVE=Anger perioden som data visas fîr i rapporten. Ange till exempel "1M" fîr en mÜnad, "30D" fîr 30ˇdagar, "3K" fîr tre kvartal eller "5è" fîr fem Ür.];
                  OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                   NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;
                                   SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period];
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Description;
                             NOR=Bokfõringsbeskrivelse;
                             SVE=Bokfîringsbeskrivning];
                  ToolTipML=[ENU=Specifies a text that accompanies the entries that result from the compression. The default description is Date Compressed.;
                             NOR=Angir en tekst som fõlger med postene som er et resultat av komprimeringen. Standardbeskrivelsen er Datokomprimert.;
                             SVE=Anger en text som medfîljer transaktionerna som skapas vid komprimeringen. Standardbeskrivningen Ñr "Datumkomprimerad".];
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdVendLedgEntry.Description }

      { 1907651001;2;Group  ;
                  CaptionML=[ENU=Retain Field Contents;
                             NOR=Behold feltinnhold;
                             SVE=BibehÜll fÑlt] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             NOR=Bilagsnr.;
                             SVE=Dokumentnr];
                  ToolTipML=[ENU=Specifies the number of the document that is processed by the report or batch job.;
                             NOR=Angir nummeret for dokumentet som behandles av rapporten eller kjõrselen.;
                             SVE=Anger antalet dokument som rapporten eller buntjobbet bearbetar.];
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  CaptionML=[ENU=Buy-from Vendor No.;
                             NOR=Kjõp fra-leverandõrnr.;
                             SVE=Inkîpsleverantîrsnr];
                  ToolTipML=[ENU=Specifies a filter for the vendor or vendors that you want to compress entries for.;
                             NOR=Angir et filter for leverandõren eller leverandõrene du vil komprimere poster for.;
                             SVE=Anger ett filter fîr leverantîren eller leverantîrerna som du vill komprimera transaktioner fîr.];
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  CaptionML=[ENU=Purchaser Code;
                             NOR=Innkjõperkode;
                             SVE=Inkîparkod];
                  ToolTipML=[ENU=Specifies the purchaser for whom vendor ledger entries are date compressed;
                             NOR=Angir innkjõperen som leverandõrposter blir datokomprimert for;
                             SVE=Anger den inkîpare som leverantîrsreskontratransaktioner datumkomprimeras fîr];
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[3] }

      { 8   ;2   ;Field     ;
                  CaptionML=[ENU=Retain Dimensions;
                             NOR=Behold dimensjoner;
                             SVE=BibehÜll dimensioner];
                  ToolTipML=[ENU=Specifies which dimension information you want to retain when the entries are compressed. The more dimension information that you choose to retain, the more detailed the compressed entries are.;
                             NOR=Angir hvilken dimensjonsinformasjon du vil beholde nÜr postene komprimeres. Jo mer dimensjonsinformasjon du velger Ü beholde, jo mer detaljerte er de komprimerte postene.;
                             SVE=Anger den dimensionsinformation som du vill behÜlla nÑr transaktionerna komprimeras. Ju mer dimensionsinformation du vÑljer att behÜlla, desto mer detaljerade blir de komprimerade transaktionerna.];
                  ApplicationArea=#Dimensions;
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Vendor Ledger",RetainDimText);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?;NOR=Denne kjõrselen sletter poster. Derfor er det viktig at du tar en sikkerhetskopi av databasen fõr du starter kjõrselen.\\Vil du datokomprimere postene?;SVE=Detta batchjobb tar bort transaktioner. Det Ñr dÑrfîr viktigt att du tar en sÑkerhetskopia pÜ databasen innan du kîr batchjobbet.\\Vill du datumkomprimera transaktionerna?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;NOR=%1 mÜ angis.;SVE=%1 mÜste specificeras.';
      Text004@1004 : TextConst 'ENU=Date compressing vendor ledger entries...\\;NOR=Datokomprimerer leverandõrposter...\\;SVE=Datumkomprimerar leverantîrsreskontran...\\';
      Text005@1005 : TextConst 'ENU=Vendor No.           #1##########\;NOR=Leverandõrnr.        #1##########\;SVE=Leverantîrsnr        #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\;NOR=Dato                 #2######\\;SVE=Datum                #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\;NOR=Antall nye poster    #3######\;SVE=Antal nya trans.     #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######;NOR=Ant. slettede poster #4######;SVE=Antal bortt. trans.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed;NOR=Dato komprimert;SVE=Datumkomprimerad';
      Text010@1010 : TextConst 'ENU=Retain Dimensions;NOR=Behold dimensjoner;SVE=BibehÜll dimensioner';
      SourceCodeSetup@1011 : Record 242;
      DateComprReg@1012 : Record 87;
      EntrdDateComprReg@1013 : Record 87;
      GLReg@1014 : Record 45;
      EntrdVendLedgEntry@1015 : Record 25;
      NewVendLedgEntry@1016 : Record 25;
      VendLedgEntry2@1017 : Record 25;
      NewDtldVendLedgEntry@1018 : Record 380;
      DtldVendLedgEntryBuffer@1019 : TEMPORARY Record 380;
      GLentry@1020 : Record 17;
      SelectedDim@1021 : Record 369;
      TempSelectedDim@1022 : TEMPORARY Record 369;
      DimSelectionBuf@1023 : Record 368;
      DateComprMgt@1024 : Codeunit 356;
      DimBufMgt@1025 : Codeunit 411;
      DimMgt@1026 : Codeunit 408;
      Window@1027 : Dialog;
      VendLedgEntryFilter@1028 : Text[250];
      NoOfFields@1029 : Integer;
      Retain@1030 : ARRAY [10] OF Boolean;
      FieldNumber@1031 : ARRAY [10] OF Integer;
      FieldNameArray@1032 : ARRAY [10] OF Text[100];
      LastEntryNo@1033 : Integer;
      NextTransactionNo@1034 : Integer;
      NoOfDeleted@1035 : Integer;
      LastDtldEntryNo@1036 : Integer;
      LastTmpDtldEntryNo@1037 : Integer;
      GLRegExists@1038 : Boolean;
      i@1039 : Integer;
      ComprDimEntryNo@1040 : Integer;
      DimEntryNo@1041 : Integer;
      RetainDimText@1042 : Text[250];
      SummarizePositive@1043 : Boolean;

    LOCAL PROCEDURE InitRegisters@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      IF GLReg.FIND('+') THEN;
      GLReg.Initialize(GLReg."No." + 1,LastEntryNo + 1,0,SourceCodeSetup."Compress Vend. Ledger",'','');
      IF DateComprReg.FINDLAST THEN
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Vendor Ledger Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        VendLedgEntryFilter,GLReg."No.",SourceCodeSetup."Compress Vend. Ledger");

      FOR i := 1 TO NoOfFields DO
        IF Retain[i] THEN
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);

      GLRegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record 45;VAR DateComprReg@1001 : Record 87);
    BEGIN
      GLentry.INIT;
      LastEntryNo := LastEntryNo + 1;
      GLentry."Entry No." := LastEntryNo;
      GLentry."Posting Date" := TODAY;
      GLentry.Description := EntrdVendLedgEntry.Description;
      GLentry."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
      GLentry."System-Created Entry" := TRUE;
      GLentry."User ID" := USERID;
      GLentry."Transaction No." := NextTransactionNo;
      //>>4PSSE.I009
      //GLentry.INSERT;
      GLentry.INSERT(TRUE);
      //<<4PSSE
      GLentry.CONSISTENT(GLentry.Amount = 0);
      GLReg."To Entry No." := GLentry."Entry No.";

      IF GLRegExists THEN BEGIN
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      END ELSE BEGIN
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := TRUE;
      END;
      COMMIT;

      GLentry.LOCKTABLE;
      NewDtldVendLedgEntry.LOCKTABLE;
      NewVendLedgEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      IF GLentry.FINDLAST THEN;
      IF NewVendLedgEntry.FIND('+') THEN;
      IF (LastEntryNo <> GLentry."Entry No.") OR
         (LastEntryNo <> NewVendLedgEntry."Entry No." + 1)
      THEN BEGIN
        LastEntryNo := GLentry."Entry No.";
        NextTransactionNo := GLentry."Transaction No." + 1;
        InitRegisters;
      END;
      IF NewDtldVendLedgEntry.FINDLAST THEN;
      LastDtldEntryNo := NewDtldVendLedgEntry."Entry No.";
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      EXIT(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      FOR i := 1 TO NoOfFields DO
        IF Number = FieldNumber[i] THEN
          EXIT(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewVendLedgEntry@1000 : Record 25;VendLedgEntry@1001 : Record 25);
    VAR
      DtldVendLedgEntry@1003 : Record 380;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        NewVendLedgEntry."Purchase (LCY)" := NewVendLedgEntry."Purchase (LCY)" + "Purchase (LCY)";
        NewVendLedgEntry."Inv. Discount (LCY)" := NewVendLedgEntry."Inv. Discount (LCY)" + "Inv. Discount (LCY)";
        NewVendLedgEntry."Original Pmt. Disc. Possible" :=
          NewVendLedgEntry."Original Pmt. Disc. Possible" + "Original Pmt. Disc. Possible";
        NewVendLedgEntry."Remaining Pmt. Disc. Possible" :=
          NewVendLedgEntry."Remaining Pmt. Disc. Possible" + "Remaining Pmt. Disc. Possible";
        NewVendLedgEntry."Closed by Amount (LCY)" :=
          NewVendLedgEntry."Closed by Amount (LCY)" + "Closed by Amount (LCY)";

        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.","Entry No.");
        IF DtldVendLedgEntry.FIND('-') THEN BEGIN
          REPEAT
            SummarizeDtldEntry(DtldVendLedgEntry,NewVendLedgEntry);
          UNTIL DtldVendLedgEntry.NEXT = 0;
          DtldVendLedgEntry.DELETEALL;
        END;

        DELETE;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      END;
    END;

    LOCAL PROCEDURE ComprCollectedEntries@12();
    VAR
      VendLedgEntry@1000 : Record 25;
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      VendLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      IF DimBufMgt.FindFirstDimEntryNo(DimEntryNo,VendLedgEntryNo) THEN BEGIN
        InitNewEntry(NewVendLedgEntry);
        REPEAT
          VendLedgEntry.GET(VendLedgEntryNo);
          SummarizeEntry(NewVendLedgEntry,VendLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,VendLedgEntryNo);
          IF (OldDimEntryNo <> DimEntryNo) OR NOT Found THEN BEGIN
            InsertNewEntry(NewVendLedgEntry,OldDimEntryNo);
            IF Found THEN
              InitNewEntry(NewVendLedgEntry);
          END;
          OldDimEntryNo := DimEntryNo;
        UNTIL NOT Found;
      END;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    [External]
    PROCEDURE InitNewEntry@7(VAR NewVendLedgEntry@1000 : Record 25);
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      WITH VendLedgEntry2 DO BEGIN
        NewVendLedgEntry.INIT;
        NewVendLedgEntry."Entry No." := LastEntryNo;
        NewVendLedgEntry."Vendor No." := "Vendor No.";
        NewVendLedgEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewVendLedgEntry.Description := EntrdVendLedgEntry.Description;
        NewVendLedgEntry."Vendor Posting Group" := "Vendor Posting Group";
        NewVendLedgEntry."Currency Code" := "Currency Code";
        NewVendLedgEntry."Document Type" := "Document Type";
        NewVendLedgEntry."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
        NewVendLedgEntry."User ID" := USERID;
        NewVendLedgEntry."Transaction No." := NextTransactionNo;

        IF RetainNo(FIELDNO("Document No.")) THEN
          NewVendLedgEntry."Document No." := "Document No.";
        IF RetainNo(FIELDNO("Buy-from Vendor No.")) THEN
          NewVendLedgEntry."Buy-from Vendor No." := "Buy-from Vendor No.";
        IF RetainNo(FIELDNO("Purchaser Code")) THEN
          NewVendLedgEntry."Purchaser Code" := "Purchaser Code";
        IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
          NewVendLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
          NewVendLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewVendLedgEntry."Vendor No.");
        Window.UPDATE(2,NewVendLedgEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      END;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewVendLedgEntry@1000 : Record 25;DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
      TempDimSetEntry@1005 : TEMPORARY Record 480;
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
      NewVendLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewVendLedgEntry.INSERT;
      InsertDtldEntries;
    END;

    LOCAL PROCEDURE CompressDetails@8(VendLedgEntry@1000 : Record 25) : Boolean;
    VAR
      DtldVendLedgEntry@1001 : Record 380;
    BEGIN
      DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Posting Date");
      DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
      IF EntrdDateComprReg."Starting Date" <> 0D THEN
        DtldVendLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '..%1|%2..',
            CALCDATE('<-1D>',EntrdDateComprReg."Starting Date"),
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")))
      ELSE
        DtldVendLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '%1..',
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")));

      EXIT(NOT DtldVendLedgEntry.FINDLAST);
    END;

    LOCAL PROCEDURE SummarizeDtldEntry@9(VAR DtldVendLedgEntry@1000 : Record 380;VAR NewVendLedgEntry@1001 : Record 25);
    VAR
      NewEntry@1003 : Boolean;
      PostingDate@1004 : Date;
    BEGIN
      DtldVendLedgEntryBuffer.SETFILTER(
        "Posting Date",
        DateComprMgt.GetDateFilter(DtldVendLedgEntry."Posting Date",EntrdDateComprReg,TRUE));
      PostingDate := DtldVendLedgEntryBuffer.GETRANGEMIN("Posting Date");
      DtldVendLedgEntryBuffer.SETRANGE("Posting Date",PostingDate);
      DtldVendLedgEntryBuffer.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Document No.")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Document No.","Vendor Ledger Entry"."Document No.");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Buy-from Vendor No.")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Vendor No.","Vendor Ledger Entry"."Buy-from Vendor No.");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Global Dimension 1 Code")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 1","Vendor Ledger Entry"."Global Dimension 1 Code");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Global Dimension 2 Code")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 2","Vendor Ledger Entry"."Global Dimension 2 Code");

      IF NOT DtldVendLedgEntryBuffer.FIND('-') THEN BEGIN
        DtldVendLedgEntryBuffer.RESET;
        CLEAR(DtldVendLedgEntryBuffer);

        LastTmpDtldEntryNo := LastTmpDtldEntryNo + 1;
        DtldVendLedgEntryBuffer."Entry No." := LastTmpDtldEntryNo;
        DtldVendLedgEntryBuffer."Posting Date" := PostingDate;
        DtldVendLedgEntryBuffer."Document Type" := NewVendLedgEntry."Document Type";
        DtldVendLedgEntryBuffer."Initial Document Type" := NewVendLedgEntry."Document Type";
        DtldVendLedgEntryBuffer."Document No." := NewVendLedgEntry."Document No.";
        DtldVendLedgEntryBuffer."Entry Type" := DtldVendLedgEntry."Entry Type";
        DtldVendLedgEntryBuffer."Vendor Ledger Entry No." := NewVendLedgEntry."Entry No.";
        DtldVendLedgEntryBuffer."Vendor No." := NewVendLedgEntry."Vendor No.";
        DtldVendLedgEntryBuffer."Currency Code" := NewVendLedgEntry."Currency Code";
        DtldVendLedgEntryBuffer."User ID" := NewVendLedgEntry."User ID";
        DtldVendLedgEntryBuffer."Source Code" := NewVendLedgEntry."Source Code";
        DtldVendLedgEntryBuffer."Transaction No." := NewVendLedgEntry."Transaction No.";
        DtldVendLedgEntryBuffer."Journal Batch Name" := NewVendLedgEntry."Journal Batch Name";
        DtldVendLedgEntryBuffer."Reason Code" := NewVendLedgEntry."Reason Code";
        DtldVendLedgEntryBuffer."Initial Entry Due Date" := NewVendLedgEntry."Due Date";
        DtldVendLedgEntryBuffer."Initial Entry Global Dim. 1" := NewVendLedgEntry."Global Dimension 1 Code";
        DtldVendLedgEntryBuffer."Initial Entry Global Dim. 2" := NewVendLedgEntry."Global Dimension 2 Code";

        NewEntry := TRUE;
      END;

      DtldVendLedgEntryBuffer.Amount :=
        DtldVendLedgEntryBuffer.Amount + DtldVendLedgEntry.Amount;
      DtldVendLedgEntryBuffer."Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Amount (LCY)" + DtldVendLedgEntry."Amount (LCY)";
      DtldVendLedgEntryBuffer."Debit Amount" :=
        DtldVendLedgEntryBuffer."Debit Amount" + DtldVendLedgEntry."Debit Amount";
      DtldVendLedgEntryBuffer."Credit Amount" :=
        DtldVendLedgEntryBuffer."Credit Amount" + DtldVendLedgEntry."Credit Amount";
      DtldVendLedgEntryBuffer."Debit Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Debit Amount (LCY)" + DtldVendLedgEntry."Debit Amount (LCY)";
      DtldVendLedgEntryBuffer."Credit Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Credit Amount (LCY)" + DtldVendLedgEntry."Credit Amount (LCY)";

      IF NewEntry THEN
        DtldVendLedgEntryBuffer.INSERT
      ELSE
        DtldVendLedgEntryBuffer.MODIFY;
    END;

    LOCAL PROCEDURE InsertDtldEntries@20();
    BEGIN
      DtldVendLedgEntryBuffer.RESET;
      IF DtldVendLedgEntryBuffer.FIND('-') THEN
        REPEAT
          IF ((DtldVendLedgEntryBuffer.Amount <> 0) OR
              (DtldVendLedgEntryBuffer."Amount (LCY)" <> 0) OR
              (DtldVendLedgEntryBuffer."Debit Amount" <> 0) OR
              (DtldVendLedgEntryBuffer."Credit Amount" <> 0) OR
              (DtldVendLedgEntryBuffer."Debit Amount (LCY)" <> 0) OR
              (DtldVendLedgEntryBuffer."Credit Amount (LCY)" <> 0))
          THEN BEGIN
            LastDtldEntryNo := LastDtldEntryNo + 1;

            NewDtldVendLedgEntry := DtldVendLedgEntryBuffer;
            NewDtldVendLedgEntry."Entry No." := LastDtldEntryNo;
            NewDtldVendLedgEntry.INSERT(TRUE);
          END;
        UNTIL DtldVendLedgEntryBuffer.NEXT = 0;
      DtldVendLedgEntryBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      IF EntrdDateComprReg."Ending Date" = 0D THEN
        EntrdDateComprReg."Ending Date" := TODAY;
      IF EntrdVendLedgEntry.Description = '' THEN
        EntrdVendLedgEntry.Description := Text009;

      WITH "Vendor Ledger Entry" DO BEGIN
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Buy-from Vendor No."),FIELDCAPTION("Buy-from Vendor No."));
        InsertField(FIELDNO("Purchaser Code"),FIELDCAPTION("Purchaser Code"));
        InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
        InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
      END;

      RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Vendor Ledger",'');
    END;

    [External]
    PROCEDURE InitializeRequest@15(StartingDate@1000 : Date;EndingDate@1001 : Date;PeriodLength@1002 : Option;Description@1004 : Text[50];RetainDocumentNo@1005 : Boolean;RetainBuyfromVendorNo@1006 : Boolean;RetainPurchaserCode@1007 : Boolean;RetainDimensionText@1003 : Text[250]);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      EntrdVendLedgEntry.Description := Description;
      Retain[1] := RetainDocumentNo;
      Retain[2] := RetainBuyfromVendorNo;
      Retain[3] := RetainPurchaserCode;
      RetainDimText := RetainDimensionText;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

