OBJECT Codeunit 11012403 External Document Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text11012000@1210190000 : TextConst 'ENU=File "%1" does not exist.;NOR=Filen "%1" finnes ikke.;SVE=Filen "%1" finns inte.';
      FileMgt@1100525003 : Codeunit 419;
      Text11012004@1100525001 : TextConst 'ENU=Folder "%1" cannot be found.;SVE=Mappen "%2" kan inte hittas.';
      gForceUniqueFilename@1100529400 : Boolean;

    [External]
    PROCEDURE FileDrillDown@1100528700(DocumentProperties@1100528701 : Record 11012746);
    VAR
      FileMgt@1100528702 : Codeunit 419;
    BEGIN
      FileMgt.OpenFileDialog('', DocumentProperties.File, '');
    END;

    [External]
    PROCEDURE BrowseForFile@1210190001(DocumentTypeCode@1210190001 : Code[20];VAR FileName@1100528703 : Text);
    VAR
      DocumentMgtSetup@1100528700 : Record 11071831;
      FileAbsPathName@1210190004 : Text;
      DefaultSourceDirExtDoc@1100525000 : Text;
      ShortFileName@1100525001 : Text;
      TargetStorageType@1100527801 : Option;
      StringFunctions@1100527802 : Codeunit 11012273;
      DocumentManagement@1100527803 : Codeunit 11012406;
    BEGIN
      DocumentMgtSetup.GET;
      DocumentManagement.GetStorageLocationForSource(DefaultSourceDirExtDoc,TargetStorageType,COMPANYNAME);
      FileMgt.SelectFile('', DefaultSourceDirExtDoc, ShortFileName, FileAbsPathName);
      IF (FileAbsPathName = '') OR (StringFunctions.RSTRPOS(FileAbsPathName,'\') = 0) THEN
        EXIT;

      RegisterFile(FileAbsPathName, DocumentTypeCode, TODAY, FileName,TargetStorageType);
    END;

    [External]
    PROCEDURE RegisterFileCopyOnly@1100528100(SourceFileURI@1100528101 : Text;DocumentTypeCode@1100528100 : Code[20];CreationDate@1100528400 : Date;VAR TargetFileURI@1100527800 : Text;VAR TargetStorageType@1100527801 : Option) : Boolean;
    BEGIN
      EXIT(DoRegisterFile(SourceFileURI, DocumentTypeCode, CreationDate, TargetFileURI,TargetStorageType));
    END;

    [External]
    PROCEDURE RegisterFileByContent@1100527802(Base64Content@1100527800 : BigText;FileName@1100527801 : Text;DocumentTypeCode@1100527804 : Code[20];CreationDate@1100528400 : Date;VAR TargetFileURI@1100527803 : Text;VAR TargetStorageType@1100527802 : Option) : Boolean;
    VAR
      DocumentManagement@1100527805 : Codeunit 11012406;
    BEGIN
      IF (FileName = '') THEN
        EXIT;

      DocumentManagement.PrepareDocumentRegistration(FileName,DocumentTypeCode,CreationDate,TargetFileURI,TargetStorageType);
      EXIT(DocumentManagement.PutContentToStorageByBase64(Base64Content,TargetStorageType,TargetFileURI));
    END;

    [External]
    PROCEDURE RegisterFileByOutStream@1100527800(OutStream@1100527800 : OutStream;FileName@1100527801 : Text;DocumentTypeCode@1100527804 : Code[20];CreationDate@1100528400 : Date;VAR TargetFileURI@1100527803 : Text;VAR TargetStorageType@1100527802 : Option) : Boolean;
    VAR
      DocumentManagement@1100527805 : Codeunit 11012406;
    BEGIN
      IF (FileName = '') THEN
        EXIT;

      DocumentManagement.PrepareDocumentRegistration(FileName,DocumentTypeCode,CreationDate,TargetFileURI,TargetStorageType);
      EXIT(DocumentManagement.PutContentToStorageByStream(OutStream,TargetStorageType,TargetFileURI));
    END;

    [External]
    PROCEDURE RegisterFile@1199197400(SourceFileURI@1210190003 : Text;DocumentTypeCode@1210190001 : Code[20];CreationDate@1100528400 : Date;VAR TargetFileURI@1100528700 : Text;VAR TargetStorageType@1100527800 : Option) : Boolean;
    BEGIN
      EXIT(DoRegisterFile(SourceFileURI, DocumentTypeCode, CreationDate, TargetFileURI,TargetStorageType));
    END;

    LOCAL PROCEDURE DoRegisterFile@1100528101(SourceFileURI@1210190003 : Text;DocumentTypeCode@1210190001 : Code[20];CreationDate@1100528400 : Date;VAR TargetFileURI@1100528704 : Text;VAR TargetStorageType@1100527800 : Option) : Boolean;
    VAR
      ShortFileName@1100528705 : Text;
      Dummy@1100527803 : Text;
      DocumentManagement@1100528702 : Codeunit 11012406;
      ErrorMessage@1100527805 : Text;
      DocumentStorageTypes@1100529600 : ' ,File System on Premise,SharePoint Online,Azure File Storage';
    BEGIN
      IF SourceFileURI = '' THEN
        EXIT;

      FileMgt.SplitFileAbsPathName(SourceFileURI, Dummy, ShortFileName);
      DocumentManagement.PrepareDocumentRegistration(ShortFileName,DocumentTypeCode,CreationDate,TargetFileURI,TargetStorageType);

      IF NOT DocumentManagement.CopyStorageContent(DocumentStorageTypes::"File System on Premise", TargetStorageType,SourceFileURI, TargetFileURI,ErrorMessage) THEN BEGIN
        TargetFileURI := '';
        ERROR(ErrorMessage);
        EXIT;
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE SetForceUniqueFilename@1100529400(ForceUniqueFilename@1100529400 : Boolean);
    BEGIN
      gForceUniqueFilename := ForceUniqueFilename;
    END;

    [External]
    PROCEDURE PrintExternalDocument@1100525001(DocumentProperties@1100525006 : Record 11012746;Company@1100528700 : Text[30]) Result : Boolean;
    VAR
      ClientFileName@1100528703 : Text;
    BEGIN
      FileMgt.TestIsWindowsClient;

      DocumentProperties.WriteContentToClient(ClientFileName);
      IF ClientFileName <> '' THEN BEGIN
        Result := PrintFile(ClientFileName);
        FileMgt.DeleteClientFile(ClientFileName);
        EXIT(Result);
      END;
    END;

    LOCAL PROCEDURE PrintFile@1100525002(ClientFileName@1100525006 : Text) : Boolean;
    VAR
      Directory@1100528700 : Text;
      ShortFileName@1100528701 : Text;
      lvShell@1100525005 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
      lvShellItemEnum@1100525004 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{744129E0-CBE5-11CE-8350-444553540000}:'Microsoft Shell Controls And Automation'.FolderItems";
      lvShellFolder@1100525003 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{BBCBDE60-C3FF-11CE-8350-444553540000}:'Microsoft Shell Controls And Automation'.Folder";
      lvShellFolderItem@1100525002 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{2FE352EA-FD1F-11D2-B1F4-00C04F8EEB3E}:'Microsoft Shell Controls And Automation'.ShellFolderItem";
      lvShellVerbEnum@1100525008 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{1F8352C0-50B0-11CF-960C-0080C7F4EE85}:'Microsoft Shell Controls And Automation'.FolderItemVerbs";
      lvShellFolderVerb@1100525010 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{08EC3E00-50B0-11CF-960C-0080C7F4EE85}:'Microsoft Shell Controls And Automation'.FolderItemVerb";
      i@1100525001 : Integer;
      lvFileFound@1100525000 : Boolean;
      lvVerbFound@1100525009 : Boolean;
      lvVerb@1100525011 : Text[250];
      lvText001@1100525012 : TextConst 'ENU=Print';
      lvText002@1100525013 : TextConst 'ENU=Print';
      lvPath@1100525014 : Text[250];
      lvFile@1100525015 : Text[250];
      lvFilePath@1100525016 : Text[500];
    BEGIN
      //In: iPath the path to the file name not ending with a \
      //    iFile the filename (including extentsion
      //Ret: TRUE is the print method is called on the file
      //     FALSE if the print method doesn't exist
      //Error: If the file doesn't exist
      FileMgt.TestIsWindowsClient;

      IF NOT FileMgt.ClientFileExists(ClientFileName) THEN
        ERROR(Text11012000, ClientFileName);

      FileMgt.SplitFileAbsPathName(ClientFileName, Directory, ShortFileName);

      CREATE(lvShell, FALSE, TRUE);

      //The print function can be invoked on a FolderItem (like with right-mouse-click in the explorer)
      //It is not possible to create a FolderItem from a file name.
      // We have to: - create a Folder object from the foldername
      //             - get the FolderItem collection
      //             - loop until we have the right file

      lvShellFolder := lvShell.NameSpace(Directory);
      lvShellItemEnum := lvShellFolder.Items();
      i := 0;
      REPEAT
        //MESSAGE( '%1',lvShellItemEnum.Count);
        lvShellFolderItem := lvShellItemEnum.Item(i);
        lvFilePath :=  lvShellFolderItem.Path;
        FileMgt.SplitFileAbsPathName(lvFilePath, lvPath, lvFile);
        lvFileFound := (ShortFileName = lvFile);
        i += 1;
      UNTIL (i = lvShellItemEnum.Count()) OR lvFileFound;

      IF lvFileFound THEN BEGIN
        //check whether the "print" method is specified for this file (in the registry)
        lvShellVerbEnum := lvShellFolderItem.Verbs();
        i := 0;
        REPEAT
          lvShellFolderVerb := lvShellVerbEnum.Item(i);
          lvVerb := lvShellFolderVerb.Name;
          lvVerb := DELCHR(lvVerb, '=', '&');  //remove &
          lvVerbFound := ((lvVerb = lvText001) OR (lvVerb = lvText002));
      //this is not just in two languages!! the name of the command is
          i += 1;                                                        //dependent on the language of the application.
                                                                         //On my Dutch systems some applications have Print,
                                                                         //others have Afdrukken
        UNTIL (i = lvShellVerbEnum.Count()) OR lvVerbFound;

        IF lvVerbFound THEN BEGIN
          lvShellFolderItem.InvokeVerb('Print');                         //this is the language independent command
          SLEEP(1000);
        END;
      END;
      SLEEP(1000);

      CLEAR(lvShell);
      CLEAR(lvShellFolder);
      CLEAR(lvShellFolderItem);
      CLEAR(lvShellItemEnum);

      EXIT(lvFileFound AND lvVerbFound);
    END;

    [External]
    PROCEDURE FolderName@1100525000(DocumentTypeCode@1100485002 : Code[10];Company@1100528700 : Text[30]) : Text[250];
    VAR
      DocumentType@1100485000 : Record 11012405;
      FileSystemOnPremiseSetup@1100528701 : Record 11125739;
      FileStorageTypeSetup@1100528400 : Record 11128545;
    BEGIN
      // This function can only be used when main storage = file system on premise.
      // It returns the folder name for storing external documents with the given
      // document type code, when no date subfolders are used.
      IF Company <> '' THEN BEGIN
        FileStorageTypeSetup.CHANGECOMPANY(Company);
        DocumentType.CHANGECOMPANY(Company);
        FileSystemOnPremiseSetup.CHANGECOMPANY(Company);
      END;

      FileStorageTypeSetup.SETRANGE("File Storage Type", FileStorageTypeSetup."File Storage Type"::"File System on Premise");
      FileStorageTypeSetup.SETRANGE("Main Storage", TRUE);
      FileStorageTypeSetup.FINDFIRST;

      IF DocumentTypeCode <> '' THEN
        IF DocumentType.GET(DocumentTypeCode) THEN
          IF DocumentType."Storage Directory Attachment" <> '' THEN
            EXIT(DocumentType."Storage Directory Attachment");

      FileSystemOnPremiseSetup.GET;
      FileSystemOnPremiseSetup.TESTFIELD("Default Ext. Doc. Directory");
      EXIT(FileSystemOnPremiseSetup."Default Ext. Doc. Directory");
    END;

    [External]
    PROCEDURE SendExtDocToFolder@1100525003(iDocPropertiesRec@1100525000 : Record 11012746;TargetStorageType@1100528400 : Option;iTargetDirectory@1100525002 : Text[250];VAR TargetFileURI@1100528401 : Text);
    VAR
      DocumentManagement@1100528402 : Codeunit 11012406;
    BEGIN
      // Changed input and variable form document to document properties
      DocumentManagement.CreateStorageLocationIfNotExists(TargetStorageType, iTargetDirectory);
      CopyDocumentAttach(iDocPropertiesRec, TargetStorageType, iTargetDirectory, TargetFileURI);
    END;

    LOCAL PROCEDURE CopyDocumentAttach@1100525005(DocumentProperties@1100525001 : Record 11012746;TargetStorageType@1100528400 : Option;TargetDirectory@1100525000 : Text[250];VAR TargetFileURI@1100528401 : Text);
    VAR
      DocumentManagement@1100527800 : Codeunit 11012406;
      FileManagement@1100528402 : Codeunit 419;
      ErrorMessage@1100527802 : Text;
    BEGIN
      IF (DocumentProperties.HasStorageURI) THEN BEGIN
        TargetFileURI := TargetDirectory + FileManagement.GetFileName(DocumentProperties.GetStorageURI);
        IF (DocumentProperties."Storage Type" = TargetStorageType) AND
           (LOWERCASE(DocumentProperties.GetStorageURI) = LOWERCASE(TargetFileURI))
        THEN
          EXIT;
        IF NOT (DocumentManagement.CopyStorageContent(
          DocumentProperties."Storage Type", TargetStorageType, DocumentProperties.GetStorageURI,
          TargetFileURI, ErrorMessage))
        THEN
          ERROR(ErrorMessage);
      END;
    END;

    [External]
    PROCEDURE CheckFolderExists@1100525009(iFolder@1100525000 : Text[1024]);
    BEGIN
      IF NOT FileMgt.ClientDirectoryExists(iFolder) THEN
        ERROR(STRSUBSTNO(Text11012004, iFolder));
    END;

    [External]
    PROCEDURE AddExternalDocument@1100528623(IRecordRef@1100528600 : RecordRef;IFileName@1100527800 : Text;IDocumentType@1100528602 : Code[10]) : Code[20];
    VAR
      QueuedExternalDocument@1100528611 : Record 11012148;
      QueuedDocumentLink@1100528610 : Record 11125736;
      InitialDocumentProperties@1100528609 : Record 11012746;
      CreatedDocumentProperties@1100528608 : Record 11012746;
      FileManagement@1100528606 : Codeunit 419;
      DocumentLinkManagement@1100528605 : Codeunit 11012401;
      ErrorMessage@1100528604 : Text;
    BEGIN
      QueuedExternalDocument.SETRANGE(User, USERID);
      QueuedExternalDocument."Line No." := 0;
      QueuedExternalDocument.User := USERID;
      QueuedExternalDocument.Folder := FileManagement.GetDirectoryNameWithBackSlash(IFileName);
      QueuedExternalDocument."File Name" := FileManagement.GetFileName(IFileName);
      QueuedExternalDocument.Source := QueuedExternalDocument.Source::User;
      QueuedExternalDocument.INSERT(TRUE);

      QueuedDocumentLink.SETRANGE(User, USERID);
      IF NOT QueuedDocumentLink.FINDLAST THEN
        QueuedDocumentLink.INIT;
      QueuedDocumentLink.User := USERID;
      QueuedDocumentLink."Seq. No." := QueuedDocumentLink."Seq. No." + 10000;
      QueuedDocumentLink."Table No." := IRecordRef.NUMBER;
      QueuedDocumentLink."Filter Expression" := DocumentLinkManagement.GetFilterExpression(IRecordRef.RECORDID);
      QueuedDocumentLink."Record ID" := IRecordRef.RECORDID;
      QueuedDocumentLink.Source := TRUE;
      QueuedDocumentLink.INSERT;

      InitialDocumentProperties."Document Type" := IDocumentType;
      InitialDocumentProperties."External Document" := TRUE;

      IF NOT QueuedExternalDocument.RegisterDocument(InitialDocumentProperties, FALSE, 0, '', ErrorMessage, CreatedDocumentProperties) THEN BEGIN
        QueuedExternalDocument.DELETE(TRUE);
        IF ErrorMessage <> '' THEN
          ERROR(ErrorMessage);
      END;
      QueuedExternalDocument.DELETEALL(TRUE);
      QueuedDocumentLink.DELETEALL(TRUE);
      EXIT(CreatedDocumentProperties."No.");
    END;

    [External]
    PROCEDURE AddExternalDocumentWithContent@1100528301(RecRef@1100528303 : RecordRef;FileName@1100528319 : Text;Base64ContentTxt@1100528318 : Text;ContactNo@1100528317 : Code[20];ContactPersonNo@1100528316 : Code[20];DocType@1100528315 : Code[10];DocGroup@1100528314 : Code[10];DocDescription@1100528313 : Text;ProjectNo@1100528312 : Code[20];ProjectElement@1100528311 : Code[20];DocDate@1100528310 : Date;CreatedDate@1100528309 : Date;ModifiedDate@1100528308 : Date;DocStatus@1100528307 : Option;DptSubSite@1100528306 : Code[20]) : Code[20];
    VAR
      DocumentManagementWebservice@1100528300 : Codeunit 11012405;
      Base64Content@1100528320 : BigText;
      EntityKey@1100528304 : ARRAY [10] OF Code[20];
    BEGIN
      SetEntityKey(RecRef, EntityKey);
      Base64Content.ADDTEXT(Base64ContentTxt);
      EXIT(DocumentManagementWebservice.AddExternalDocumentAndContent(RecRef.RECORDID.TABLENO, EntityKey,
        FileName, Base64Content, ContactNo, ContactPersonNo, DocType, DocGroup, DocDescription,
        ProjectNo, ProjectElement, FORMAT(DocDate, 0, 9), FORMAT(CreatedDate, 0, 9), FORMAT(ModifiedDate, 0, 9),
        DocStatus, DptSubSite));
    END;

    [External]
    PROCEDURE SetEntityKey@1100528302(RecRef@1100528301 : RecordRef;VAR EntityKey@1100528300 : ARRAY [10] OF Code[20]);
    VAR
      Counter@1100528304 : Integer;
      EmptyRecId@1100528302 : RecordID;
      FldRef@1100528305 : FieldRef;
      KeyRef@1100528303 : KeyRef;
    BEGIN
      CLEAR(EntityKey);
      IF (RecRef.RECORDID = EmptyRecId) THEN
        EXIT;

      KeyRef := RecRef.KEYINDEX(1);
      FOR Counter := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FldRef := KeyRef.FIELDINDEX(Counter);
        EntityKey[Counter] := FORMAT(FldRef.VALUE, 0, 9);
      END;
    END;

    [External]
    PROCEDURE DateSubFolders@1100527700(CreateDate@1100527801 : Date) : Text[250];
    BEGIN
      EXIT(STRSUBSTNO('%1\%2\',DATE2DMY(CreateDate,3),DATE2DMY(CreateDate,2)));
    END;

    [External]
    PROCEDURE GetDocumentSetupPeripheralApp@1100528300(ProjectNo@1100528302 : Code[20];ApplicationOption@1100528303 : Option;EntityOption@1100528304 : Option;VAR SubSite@1100528305 : Code[20];VAR DocType@1100528306 : Code[10]);
    VAR
      DocumentSetupPeripheralApp@1100528300 : Record 11072451;
      DPTDocSetupPeripheralApp@1100528301 : Record 11072452;
    BEGIN
      SubSite:= '';
      DocType := '';

      IF (ProjectNo <> '') THEN BEGIN
        DPTDocSetupPeripheralApp.SETRANGE("Project No.", ProjectNo);
        DPTDocSetupPeripheralApp.SETRANGE(Application, ApplicationOption);
        DPTDocSetupPeripheralApp.SETRANGE(Entity, EntityOption);
        DPTDocSetupPeripheralApp.SETRANGE("Default Value Auto Processes", TRUE);
        IF (DPTDocSetupPeripheralApp.FINDFIRST) THEN BEGIN
          SubSite := DPTDocSetupPeripheralApp."Document Portal Subsite";
          DocType := DPTDocSetupPeripheralApp."Document Type";
          EXIT;
        END ELSE BEGIN
          DPTDocSetupPeripheralApp.SETRANGE("Default Value Auto Processes");
          IF (DPTDocSetupPeripheralApp.FINDFIRST) THEN BEGIN
            SubSite := DPTDocSetupPeripheralApp."Document Portal Subsite";
            DocType := DPTDocSetupPeripheralApp."Document Type";
            EXIT;
          END;
        END;
      END;

      DocumentSetupPeripheralApp.SETRANGE(Application, ApplicationOption);
      DocumentSetupPeripheralApp.SETRANGE(Entity, EntityOption);
      DocumentSetupPeripheralApp.SETRANGE("Default Value Auto Processes", TRUE);
      IF (DocumentSetupPeripheralApp.FINDFIRST) THEN BEGIN
        SubSite := DocumentSetupPeripheralApp."Document Portal Subsite";
        DocType := DocumentSetupPeripheralApp."Document Type";
      END ELSE BEGIN
        DocumentSetupPeripheralApp.SETRANGE("Default Value Auto Processes");
        IF (DocumentSetupPeripheralApp.FINDFIRST) THEN BEGIN
          SubSite := DocumentSetupPeripheralApp."Document Portal Subsite";
          DocType := DocumentSetupPeripheralApp."Document Type";
        END;
      END;
    END;

    BEGIN
    {
      4PS, MVos, 20-05-2010:
       - Changed functions:
          - SendExtDocToFolder
          - CopyDocumentAttach
          - SendExtDocToEmail
          - SendExtDocToZIP
          - MailDocumentAttach
          - ZIPDocumentAttach
          - SendExtDocToZIP
    }
    END.
  }
}

