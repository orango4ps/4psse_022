OBJECT Codeunit 396 NoSeriesManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 309=rimd;
    OnRun=BEGIN
            TryNo := GetNextNo(TryNoSeriesCode,TrySeriesDate,FALSE);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="You may not enter numbers manually. ";NOR="Du kan ikke angi numre manuelt. ";SVE="Du f†r inte registrera nr manuellt. "';
      Text001@1001 : TextConst 'ENU=If you want to enter numbers manually, please activate %1 in %2 %3.;NOR=Hvis du vil angi numrene manuelt, m† du aktivere %1 i %2 %3.;SVE=Om du vill registrera nr manuellt ska %1 aktiveras i %2 %3.';
      Text003@1003 : TextConst '@@@="%1=Default Nos. setting,%2=No. Series table caption,%3=No. Series Code";ENU=It is not possible to assign numbers automatically. If you want the program to assign numbers automatically, please activate %1 in %2 %3.;NOR=Det er ikke mulig † tilknytte numre automatisk. Hvis du vil at programmet skal tilordne numre automatisk, m† du aktivere %1 i %2 %3.;SVE=Vill du att programmet ska f”resl† nr automatiskt, ska %1 aktiveras i %2 %3.';
      Text004@1004 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.;NOR=Du kan ikke tilordne nye numre fra nummerserien %1 p† %2.;SVE=Du kan inte tilldela nya nummer fr†n nr-serierna %1 p† %2.';
      Text005@1005 : TextConst 'ENU=You cannot assign new numbers from the number series %1.;NOR=Du kan ikke tilordne nye numre fra nummerserien %1.;SVE=Du kan inte tilldela nya nummer fr†n nr-serierna %1.';
      Text006@1006 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.;NOR=Du kan ikke tilordne nye numre fra nummerserien %1 til en dato f›r %2.;SVE=Du kan inte tilldela nya nummer fr†n nr-serierna %1 p† ett datum f”re %2.';
      Text007@1007 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.;NOR=Du kan ikke tilordne numre st›rre enn %1, fra nummerserien %2.;SVE=Du kan inte tilldela nummer st”rre „n %1 fr†n nr-serierna %2.';
      Text009@1009 : TextConst 'ENU=The number format in %1 must be the same as the number format in %2.;NOR=Nummerformatet i %1 m† v‘re samme som nummerformatet i %2.;SVE=Formateringen av %1 m†ste vara densamma som i %2.';
      Text010@1010 : TextConst 'ENU=The number %1 cannot be extended to more than 20 characters.;NOR=Nummeret %1 kan ikke bli utvidet til mer enn 20 tegn.;SVE=Numret %1 kan inte vara mer „n 20 tecken.';
      NoSeries@1011 : Record 308;
      LastNoSeriesLine@1012 : Record 309;
      DepAuthRec@1100485002 : Record 11012466;
      DepAuthMgt@1100485001 : Codeunit 11012783;
      NoSeriesCode@1013 : Code[20];
      WarningNoSeriesCode@1014 : Code[20];
      TryNoSeriesCode@1015 : Code[20];
      TrySeriesDate@1016 : Date;
      TryNo@1017 : Code[20];
      PostErr@1008 : TextConst '@@@="%1=Document No.";ENU=You have one or more documents that must be posted before you post document no. %1 according to your company''s No. Series setup.;NOR=Du har ett eller flere dokumenter som m† bokf›res f›r du bokf›rer bilagsnr. %1 i henhold til selskapets nummerserieoppsett.';
      gFromOtherCompany@1100485000 : Text[30];

    [External]
    PROCEDURE TestManual@21(DefaultNoSeriesCode@1000 : Code[20]);
    BEGIN
      IF DefaultNoSeriesCode <> '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NOT NoSeries."Manual Nos." THEN
          ERROR(
            Text000 +
            Text001,
            NoSeries.FIELDCAPTION("Manual Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
      END;
    END;

    [External]
    PROCEDURE TestManualWithDocumentNo@26(DefaultNoSeriesCode@1000 : Code[20];DocumentNo@1001 : Code[20]);
    BEGIN
      IF DefaultNoSeriesCode <> '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NOT NoSeries."Manual Nos." THEN
          ERROR(PostErr,DocumentNo);
      END;
    END;

    PROCEDURE ManualNoAllowed@29(DefaultNoSeriesCode@1000 : Code[20]) : Boolean;
    BEGIN
      NoSeries.GET(DefaultNoSeriesCode);
      EXIT(NoSeries."Manual Nos.");
    END;

    PROCEDURE CheckManual@1100528800(DefaultNoSeriesCode@1100528800 : Code[10]) : Boolean;
    BEGIN
      //**4PS
      IF DefaultNoSeriesCode <> '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NoSeries."Manual Nos." THEN
          EXIT(TRUE)
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE InitSeries@3(DefaultNoSeriesCode@1000 : Code[20];OldNoSeriesCode@1001 : Code[20];NewDate@1002 : Date;VAR NewNo@1003 : Code[20];VAR NewNoSeriesCode@1004 : Code[20]);
    BEGIN
      //**4PS.sn
      IF gFromOtherCompany <> '' THEN
        NoSeries.CHANGECOMPANY(gFromOtherCompany);
      //**4PS.en
      IF NewNo = '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        { //**4PS.so  Must be checked on the Number Series that is used (16518)
        IF NOT NoSeries."Default Nos." THEN
          ERROR(
            Text003,
            NoSeries.FIELDCAPTION("Default Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
        } //**4PS.eo

      //**4PS.sn
        IF DepartmentAuthorizationActive THEN BEGIN
          NoSeriesCode := DefaultNoSeriesCode;
          //FilterSeries; //**4PS.dbeekman.o: 19247
          FilterSeriesForDefaultDpt; //**4PS.dbeekman.n: 19247
          NoSeries.Code := OldNoSeriesCode;
          IF NOT NoSeries.FIND THEN
            IF NOT NoSeries.FINDSET THEN
              NoSeries.GET(DefaultNoSeriesCode);
        END ELSE BEGIN
          IF NOT NoSeries."Default Nos." THEN
            ERROR(Text003,NoSeries.FIELDCAPTION("Default Nos."),NoSeries.TABLECAPTION,NoSeries.Code);  //*18350
      //**4PS.en
          IF OldNoSeriesCode <> '' THEN BEGIN
            NoSeriesCode := DefaultNoSeriesCode;
            FilterSeries;
            NoSeries.Code := OldNoSeriesCode;
            IF NOT NoSeries.FIND THEN
              NoSeries.GET(DefaultNoSeriesCode);
          END;
        //**4PS.sn
        END;
        IF NOT NoSeries."Default Nos." THEN
          ERROR(Text003,NoSeries.FIELDCAPTION("Default Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
        //**4PS.en

        NewNo := GetNextNo(NoSeries.Code,NewDate,TRUE);
        NewNoSeriesCode := NoSeries.Code;
      END ELSE
        TestManual(DefaultNoSeriesCode);
    END;

    [External]
    PROCEDURE SetDefaultSeries@5(VAR NewNoSeriesCode@1000 : Code[20];NoSeriesCode2@1001 : Code[20]);
    BEGIN
      //* Local (input parameter) 'NoSeriesCode' modified in 'NoSeriesCode2'. Because there is also a global   //**4PS
      //* 'NoSeriesCode', that is needed in 'FilterterSeries' (must be filled before calling this function).   //**4PS

      //**4PS.so
      //IF NoSeriesCode <> '' THEN BEGIN
      //  NoSeries.GET(NoSeriesCode);
      //  IF NoSeries."Default Nos." THEN
      //    NewNoSeriesCode := NoSeries.Code;
      //END;
      //**4PS.eo

      //**4PS.sn
      IF NOT DepartmentAuthorizationActive THEN BEGIN
        IF NoSeriesCode2 <> '' THEN BEGIN
          NoSeries.GET(NoSeriesCode2);
          IF NoSeries."Default Nos." THEN
            NewNoSeriesCode := NoSeries.Code;
        END;
      END ELSE BEGIN
        NoSeriesCode := NoSeriesCode2;
        FilterSeriesForDefaultDpt;
        NoSeries.SETRANGE("Default Nos.", TRUE);
        NoSeries.SETRANGE(Code, NoSeriesCode2);
        IF NoSeries.FINDFIRST THEN
          NewNoSeriesCode := NoSeries.Code
        ELSE BEGIN
          NoSeries.SETRANGE(Code); //reset filter on Code
          IF NoSeries.FINDFIRST THEN
            NewNoSeriesCode := NoSeries.Code;
        END;
      END;
      //**4PS.en
    END;

    [External]
    PROCEDURE SelectSeries@2(DefaultNoSeriesCode@1000 : Code[20];OldNoSeriesCode@1001 : Code[20];VAR NewNoSeriesCode@1002 : Code[20]) : Boolean;
    BEGIN
      NoSeriesCode := DefaultNoSeriesCode;
      FilterSeries;
      IF NewNoSeriesCode = '' THEN BEGIN
        IF OldNoSeriesCode <> '' THEN
          NoSeries.Code := OldNoSeriesCode;
      END ELSE
        NoSeries.Code := NewNoSeriesCode;
      IF PAGE.RUNMODAL(0,NoSeries) = ACTION::LookupOK THEN BEGIN
        NewNoSeriesCode := NoSeries.Code;
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE LookupSeries@16(DefaultNoSeriesCode@1000 : Code[20];VAR NewNoSeriesCode@1001 : Code[20]) : Boolean;
    BEGIN
      EXIT(SelectSeries(DefaultNoSeriesCode,NewNoSeriesCode,NewNoSeriesCode));
    END;

    [External]
    PROCEDURE TestSeries@8(DefaultNoSeriesCode@1000 : Code[20];NewNoSeriesCode@1001 : Code[20]);
    BEGIN
      NoSeriesCode := DefaultNoSeriesCode;
      FilterSeries;
      NoSeries.Code := NewNoSeriesCode;
      NoSeries.FIND;
    END;

    [External]
    PROCEDURE SetSeries@6(VAR NewNo@1000 : Code[20]);
    VAR
      NoSeriesCode2@1001 : Code[20];
    BEGIN
      NoSeriesCode2 := NoSeries.Code;
      FilterSeries;
      NoSeries.Code := NoSeriesCode2;
      NoSeries.FIND;
      NewNo := GetNextNo(NoSeries.Code,0D,TRUE);
    END;

    LOCAL PROCEDURE FilterSeries@1();
    VAR
      NoSeriesRelationship@1000 : Record 310;
      lDepAuthActive@1100485000 : Boolean;
      DepartmentFilter@1100525000 : Text[250];
    BEGIN
      NoSeries.RESET;
      NoSeriesRelationship.SETRANGE(Code,NoSeriesCode);
      //**4PS.sn
      lDepAuthActive := DepartmentAuthorizationActive;
      IF lDepAuthActive THEN
        DepartmentFilter := DepAuthMgt.GetUserDepartmentFilter;
        IF DepartmentFilter <> '' THEN
          DepartmentFilter := DepartmentFilter + '|''''';
        NoSeries.SETFILTER("Department Code", DepartmentFilter);
      //**4PS.en
      IF NoSeriesRelationship.FINDSET THEN
        REPEAT
          NoSeries.Code := NoSeriesRelationship."Series Code";
          NoSeries.MARK := TRUE;
        UNTIL NoSeriesRelationship.NEXT = 0;
      IF NoSeries.GET(NoSeriesCode) THEN
        //**4PS.sn
        IF lDepAuthActive THEN BEGIN
          IF DepAuthMgt.DepartmentCodeAllowed(NoSeries."Department Code") OR
             (NoSeries."Department Code" = '')
          THEN
            NoSeries.MARK := TRUE;
        END ELSE
        //**4PS.en
          NoSeries.MARK := TRUE;
      NoSeries.MARKEDONLY := TRUE;
    END;

    PROCEDURE FilterSeriesForDefaultDpt@1100526000();
    BEGIN
      //**4PS.dbeekman: 19247
      FilterSeries;

      IF DepartmentAuthorizationActive THEN BEGIN
        NoSeries.SETRANGE("Department Code", DepAuthMgt.GetUserDepartmentCode);
        IF NOT NoSeries.FINDFIRST THEN
          NoSeries.SETRANGE("Department Code");
      END;
    END;

    [External]
    PROCEDURE GetNextNo@12(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean) : Code[20];
    BEGIN
      EXIT(DoGetNextNo(NoSeriesCode,SeriesDate,ModifySeries,FALSE));
    END;

    [External]
    PROCEDURE GetNextNo3@22(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean;NoErrorsOrWarnings@1004 : Boolean) : Code[20];
    BEGIN
      // This function is deprecated. Use the function in the line below instead:
      EXIT(DoGetNextNo(NoSeriesCode,SeriesDate,ModifySeries,NoErrorsOrWarnings));
    END;

    [External]
    PROCEDURE DoGetNextNo@33(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean;NoErrorsOrWarnings@1004 : Boolean) : Code[20];
    VAR
      NoSeriesLine@1003 : Record 309;
    BEGIN
      //**4PS.sn
      IF gFromOtherCompany <> '' THEN BEGIN
        NoSeries.CHANGECOMPANY(gFromOtherCompany);
        NoSeriesLine.CHANGECOMPANY(gFromOtherCompany);
        LastNoSeriesLine.CHANGECOMPANY(gFromOtherCompany);
      END;
      //**4PS.en

      OnBeforeDoGetNextNo(NoSeriesCode,SeriesDate,ModifySeries,NoErrorsOrWarnings);

      IF SeriesDate = 0D THEN
        SeriesDate := WORKDATE;

      IF ModifySeries OR (LastNoSeriesLine."Series Code" = '') THEN BEGIN
        IF ModifySeries THEN
          NoSeriesLine.LOCKTABLE;
        NoSeries.GET(NoSeriesCode);
        SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
        IF NOT NoSeriesLine.FINDFIRST THEN BEGIN
          IF NoErrorsOrWarnings THEN
            EXIT('');
          NoSeriesLine.SETRANGE("Starting Date");
          IF NOT NoSeriesLine.ISEMPTY THEN
            ERROR(
              Text004,
              NoSeriesCode,SeriesDate);
          ERROR(
            Text005,
            NoSeriesCode);
        END;
      END ELSE
        NoSeriesLine := LastNoSeriesLine;

      IF NoSeries."Date Order" AND (SeriesDate < NoSeriesLine."Last Date Used") THEN BEGIN
        IF NoErrorsOrWarnings THEN
          EXIT('');
        ERROR(
          Text006,
          NoSeries.Code,NoSeriesLine."Last Date Used");
      END;
      NoSeriesLine."Last Date Used" := SeriesDate;
      IF NoSeriesLine."Last No. Used" = '' THEN BEGIN
        IF NoErrorsOrWarnings AND (NoSeriesLine."Starting No." = '') THEN
          EXIT('');
        NoSeriesLine.TESTFIELD("Starting No.");
        NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
      END ELSE
        IF NoSeriesLine."Increment-by No." <= 1 THEN
          NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
        ELSE
          IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.");
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
      THEN BEGIN
        IF NoErrorsOrWarnings THEN
          EXIT('');
        ERROR(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      END;
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Warning No." <> '') AND
         (NoSeriesLine."Last No. Used" >= NoSeriesLine."Warning No.") AND
         (NoSeriesCode <> WarningNoSeriesCode) AND
         (TryNoSeriesCode = '')
      THEN BEGIN
        IF NoErrorsOrWarnings THEN
          EXIT('');
        WarningNoSeriesCode := NoSeriesCode;
        MESSAGE(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      END;
      NoSeriesLine.VALIDATE(Open);

      IF ModifySeries THEN
        NoSeriesLine.MODIFY
      ELSE
        LastNoSeriesLine := NoSeriesLine;

      OnAfterGetNextNo3(NoSeriesLine,ModifySeries);

      EXIT(NoSeriesLine."Last No. Used");
    END;

    [External]
    PROCEDURE TryGetNextNo@10(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date) : Code[20];
    VAR
      NoSeriesMgt@1002 : Codeunit 396;
    BEGIN
      NoSeriesMgt.SetParametersBeforeRun(NoSeriesCode,SeriesDate);
      IF NoSeriesMgt.RUN THEN
        EXIT(NoSeriesMgt.GetNextNoAfterRun);
    END;

    [External]
    PROCEDURE GetNextNo1@19(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date);
    BEGIN
      // This function is deprecated. Use the function in the line below instead:
      SetParametersBeforeRun(NoSeriesCode,SeriesDate);
    END;

    [External]
    PROCEDURE SetParametersBeforeRun@190(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date);
    BEGIN
      TryNoSeriesCode := NoSeriesCode;
      TrySeriesDate := SeriesDate;
    END;

    [External]
    PROCEDURE GetNextNo2@17() : Code[20];
    BEGIN
      // This function is deprecated. Use the function in the line below instead:
      EXIT(GetNextNoAfterRun);
    END;

    [External]
    PROCEDURE GetNextNoAfterRun@170() : Code[20];
    BEGIN
      EXIT(TryNo);
    END;

    [External]
    PROCEDURE SaveNoSeries@18();
    BEGIN
      IF LastNoSeriesLine."Series Code" <> '' THEN
        LastNoSeriesLine.MODIFY;

      OnAfterSaveNoSeries(LastNoSeriesLine);
    END;

    [External]
    PROCEDURE SetNoSeriesLineFilter@11(VAR NoSeriesLine@1000 : Record 309;NoSeriesCode@1001 : Code[20];StartDate@1002 : Date);
    BEGIN
      IF StartDate = 0D THEN
        StartDate := WORKDATE;
      NoSeriesLine.RESET;
      NoSeriesLine.SETCURRENTKEY("Series Code","Starting Date");
      NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
      NoSeriesLine.SETRANGE("Starting Date",0D,StartDate);
      IF NoSeriesLine.FINDLAST THEN BEGIN
        NoSeriesLine.SETRANGE("Starting Date",NoSeriesLine."Starting Date");
        NoSeriesLine.SETRANGE(Open,TRUE);
      END;
    END;

    [External]
    PROCEDURE IncrementNoText@20(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal);
    VAR
      BigIntNo@1006 : BigInteger;
      BigIntIncByNo@1002 : BigInteger;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(BigIntNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      BigIntIncByNo := IncrementByNo;
      NewNo := FORMAT(BigIntNo + BigIntIncByNo,0,1);
      ReplaceNoText(No,NewNo,0,StartPos,EndPos);
    END;

    [External]
    PROCEDURE UpdateNoSeriesLine@15(VAR NoSeriesLine@1000 : Record 309;NewNo@1001 : Code[20];NewFieldName@1002 : Text[100]);
    VAR
      NoSeriesLine2@1003 : Record 309;
      TextManagement@1005 : Codeunit 41;
      Length@1004 : Integer;
    BEGIN
      IF NewNo <> '' THEN BEGIN
        TextManagement.EvaluateIncStr(NewNo,NewFieldName);
        NoSeriesLine2 := NoSeriesLine;
        IF NewNo = GetNoText(NewNo) THEN
          Length := 0
        ELSE BEGIN
          Length := STRLEN(GetNoText(NewNo));
          UpdateLength(NoSeriesLine."Starting No.",Length);
          UpdateLength(NoSeriesLine."Ending No.",Length);
          UpdateLength(NoSeriesLine."Last No. Used",Length);
          UpdateLength(NoSeriesLine."Warning No.",Length);
        END;
        UpdateNo(NoSeriesLine."Starting No.",NewNo,Length);
        UpdateNo(NoSeriesLine."Ending No.",NewNo,Length);
        UpdateNo(NoSeriesLine."Last No. Used",NewNo,Length);
        UpdateNo(NoSeriesLine."Warning No.",NewNo,Length);
        IF (NewFieldName <> NoSeriesLine.FIELDCAPTION("Last No. Used")) AND
           (NoSeriesLine."Last No. Used" <> NoSeriesLine2."Last No. Used")
        THEN
          ERROR(
            Text009,
            NewFieldName,NoSeriesLine.FIELDCAPTION("Last No. Used"));
      END;
    END;

    LOCAL PROCEDURE UpdateLength@13(No@1000 : Code[20];VAR MaxLength@1001 : Integer);
    VAR
      Length@1002 : Integer;
    BEGIN
      IF No <> '' THEN BEGIN
        Length := STRLEN(DELCHR(GetNoText(No),'<','0'));
        IF Length > MaxLength THEN
          MaxLength := Length;
      END;
    END;

    LOCAL PROCEDURE UpdateNo@14(VAR No@1000 : Code[20];NewNo@1001 : Code[20];Length@1002 : Integer);
    VAR
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      TempNo@1005 : Code[20];
    BEGIN
      IF No <> '' THEN
        IF Length <> 0 THEN BEGIN
          No := DELCHR(GetNoText(No),'<','0');
          TempNo := No;
          No := NewNo;
          NewNo := TempNo;
          GetIntegerPos(No,StartPos,EndPos);
          ReplaceNoText(No,NewNo,Length,StartPos,EndPos);
        END;
    END;

    LOCAL PROCEDURE ReplaceNoText@7(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer);
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
    BEGIN
      IF StartPos > 1 THEN
        StartNo := COPYSTR(No,1,StartPos - 1);
      IF EndPos < STRLEN(No) THEN
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      IF FixedLength > OldLength THEN
        OldLength := FixedLength;
      IF OldLength > NewLength THEN
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      IF STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo) > 20 THEN
        ERROR(
          Text010,
          No);
      No := StartNo + ZeroNo + NewNo + EndNo;
    END;

    LOCAL PROCEDURE GetNoText@9(No@1000 : Code[20]) : Code[20];
    VAR
      StartPos@1001 : Integer;
      EndPos@1002 : Integer;
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      IF StartPos <> 0 THEN
        EXIT(COPYSTR(No,StartPos,EndPos - StartPos + 1));
    END;

    LOCAL PROCEDURE GetIntegerPos@4(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      IF No <> '' THEN BEGIN
        i := STRLEN(No);
        REPEAT
          IsDigit := No[i] IN ['0'..'9'];
          IF IsDigit THEN BEGIN
            IF EndPos = 0 THEN
              EndPos := i;
            StartPos := i;
          END;
          i := i - 1;
        UNTIL (i = 0) OR (StartPos <> 0) AND NOT IsDigit;
      END;
    END;

    [External]
    PROCEDURE GetNoSeriesWithCheck@24(NewNoSeriesCode@1000 : Code[20];SelectNoSeriesAllowed@1001 : Boolean;CurrentNoSeriesCode@1002 : Code[20]) : Code[20];
    BEGIN
      IF NOT SelectNoSeriesAllowed THEN
        EXIT(NewNoSeriesCode);

      NoSeries.GET(NewNoSeriesCode);
      IF NoSeries."Default Nos." THEN
        EXIT(NewNoSeriesCode);

      IF SeriesHasRelations(NewNoSeriesCode) THEN
        IF SelectSeries(NewNoSeriesCode,'',CurrentNoSeriesCode) THEN
          EXIT(CurrentNoSeriesCode);
      EXIT(NewNoSeriesCode);
    END;

    [External]
    PROCEDURE SeriesHasRelations@23(DefaultNoSeriesCode@1000 : Code[20]) : Boolean;
    VAR
      NoSeriesRelationship@1001 : Record 310;
    BEGIN
      NoSeriesRelationship.RESET;
      NoSeriesRelationship.SETRANGE(Code,DefaultNoSeriesCode);
      EXIT(NOT NoSeriesRelationship.ISEMPTY);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetNextNo3@25(VAR NoSeriesLine@1000 : Record 309;ModifySeries@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSaveNoSeries@28(VAR NoSeriesLine@1000 : Record 309);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDoGetNextNo@27(VAR NoSeriesCode@1003 : Code[20];VAR SeriesDate@1002 : Date;VAR ModifySeries@1001 : Boolean;VAR NoErrorsOrWarnings@1000 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE ClearStateAndGetNextNo@98(NoSeriesCode@1002 : Code[20]) : Code[20];
    BEGIN
      CLEAR(LastNoSeriesLine);
      CLEAR(TryNoSeriesCode);
      CLEAR(NoSeries);

      EXIT(GetNextNo(NoSeriesCode,WORKDATE,FALSE));
    END;

    PROCEDURE SetFromOtherCompany@1100485000(ICompany@1100485000 : Text[30]);
    BEGIN
      //**4PS
      //* Determine 'No.' in other company.
      gFromOtherCompany := ICompany;
    END;

    PROCEDURE DepartmentAuthorizationActive@1100485001() : Boolean;
    VAR
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DepAuthRec) THEN
        IF DepAuthMgt.AuthorizationActive THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE SelectSeriesOnlyFormWhenMore@1100525000(DefaultNoSeriesCode@1000 : Code[10];OldNoSeriesCode@1001 : Code[10];VAR NewNoSeriesCode@1002 : Code[10]) : Boolean;
    VAR
      lvSaveNoSeriesCode@1100525000 : Code[10];
    BEGIN
      //**4PS  Copied from SelectSeries, only run the form when more than one present
      NoSeriesCode := DefaultNoSeriesCode;
      FilterSeries;
      IF NoSeries.FINDFIRST THEN BEGIN
        lvSaveNoSeriesCode := NoSeries.Code;
        IF NoSeries.NEXT = 0 THEN BEGIN
          NewNoSeriesCode := lvSaveNoSeriesCode;
          EXIT(TRUE);
        END ELSE BEGIN
          IF NewNoSeriesCode = '' THEN BEGIN
            IF OldNoSeriesCode <> '' THEN
              NoSeries.Code := OldNoSeriesCode;
          END ELSE
            NoSeries.Code := NewNoSeriesCode;
          IF PAGE.RUNMODAL(0,NoSeries) = ACTION::LookupOK THEN BEGIN
            NewNoSeriesCode := NoSeries.Code;
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE InitSeriesAltUser@1100285300(DefaultNoSeriesCode@1000 : Code[10];OldNoSeriesCode@1001 : Code[10];NewDate@1002 : Date;VAR NewNo@1003 : Code[20];VAR NewNoSeriesCode@1004 : Code[10];UseUserID@1100285300 : Code[50]);
    VAR
      lvDepartmentAuthorizationActive@1100285301 : Boolean;
    BEGIN
      //4PSSE 151104, new function (based on a copy of InitSeries())
      DepAuthMgt.SetAlternativeUserID(UseUserID);
      InitSeries(DefaultNoSeriesCode,OldNoSeriesCode,NewDate,NewNo,NewNoSeriesCode);
    END;

    BEGIN
    {
      151104 ITERO.DL select NoSeries based on user-departmentcode
    }
    END.
  }
}

