OBJECT Page 11229442 Service Call SCA WS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=;
    SourceTable=Table11012822;
    PageType=List;
    OnOpenPage=VAR
                 ServiceCallAppSetup@1100525000 : Record 11229852;
                 date@1100525001 : Date;
               BEGIN
                 ServiceCallAppSetup.GET;
                 date := TODAY - ServiceCallAppSetup."Days Visible";
                 SETFILTER("Date Closed", '''''|%1..', date);
               END;

    OnAfterGetRecord=VAR
                       DocumentManagementWebservice@1100525000 : Codeunit 11012405;
                       documentNos@1100525001 : ARRAY [250] OF Code[20];
                       entityKey@1100525002 : ARRAY [5] OF Code[10];
                       FilterFor@1100525003 : 'SPT,MOB,,,,,,,,,NotApplicable';
                       ServiceContractPriority@1100525004 : Record 11012880;
                     BEGIN
                       SetProblemText;
                       SetResolveText;

                       entityKey[1] := "No.";
                       DocumentManagementWebservice.DoGetDocumentNos2(11012822,entityKey,documentNos,FilterFor::NotApplicable);
                       Doc := documentNos[1];

                       PriorityDescription := '';
                       ServiceContractPriority.SETRANGE("Service Contract No.","Service Contract No.");
                       ServiceContractPriority.SETRANGE(ServiceContractPriority.Priority, Priority);
                       IF ServiceContractPriority.FINDFIRST THEN BEGIN
                         ServiceContractPriority.CALCFIELDS(ServiceContractPriority."Priority Description");
                         PriorityDescription := ServiceContractPriority."Priority Description";
                       END;
                     END;

    OnInsertRecord=VAR
                     ServiceCallAppSetup@1100525000 : Record 11229852;
                   BEGIN
                     IF ServiceCallAppSetup.GET THEN
                       "Call Type" := ServiceCallAppSetup."Call Type";
                     Origin := Origin::"4PS Service Call App";
                   END;

    OnModifyRecord=VAR
                     ServiceText@1100528104 : Record 11012882;
                     MaxLineLength@1100528100 : Integer;
                     CurrPos@1100528103 : Integer;
                     TextLineLength@1100528102 : Integer;
                     TekstRegelTekst@1100528101 : Text;
                   BEGIN
                     Status := Status::Received;
                     MaxLineLength := 80;
                     CurrPos := 1;
                     REPEAT
                       TextLineLength := SplitLength(COPYSTR(ProblemText,CurrPos,80));
                       TekstRegelTekst := COPYSTR(ProblemText,CurrPos,TextLineLength);
                       CurrPos += TextLineLength;

                       ServiceText.INIT;
                       ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
                       ServiceText."No." := "No.";
                       ServiceText."Table Field" := 60;
                       ServiceText.Date := TODAY;
                       ServiceText."Time Created" :=TIME;
                       ServiceText."Line No." += 10000;
                       ServiceText.Comment := TekstRegelTekst;
                       IF ServiceText.INSERT THEN;

                     UNTIL CurrPos >= STRLEN(ProblemText);
                   END;

  }
  CONTROLS
  {
    { 1100525000;;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Group  ;
                GroupType=Repeater }

    { 1100525002;2;Field  ;
                Name=No;
                SourceExpr="No." }

    { 1100525003;2;Field  ;
                Name=CustomerNo;
                SourceExpr="Customer No." }

    { 1100525004;2;Field  ;
                SourceExpr=Address }

    { 1100525005;2;Field  ;
                SourceExpr=City }

    { 1100525006;2;Field  ;
                Name=PostCode;
                SourceExpr="Post Code" }

    { 1100525007;2;Field  ;
                SourceExpr=Description }

    { 1100525009;2;Field  ;
                SourceExpr=Status }

    { 1100525010;2;Field  ;
                Name=ProblemText;
                SourceExpr=ProblemText }

    { 1100525015;2;Field  ;
                Name=ResolveText;
                SourceExpr=ResolveText }

    { 1100525011;2;Field  ;
                Name=ModifiedOn;
                SourceExpr="Modified on" }

    { 1100528100;2;Field  ;
                Name=ServiceLocationNo;
                SourceExpr="Service Location No." }

    { 1100528101;2;Field  ;
                Name=ObjectNo;
                CaptionML=NLD=Objectnr.;
                SourceExpr="Object No." }

    { 1100525012;2;Field  ;
                Name=CallingContact;
                SourceExpr="Calling Contact" }

    { 1100528102;2;Field  ;
                Name=CallingPhoneNo;
                SourceExpr="Calling Phone No." }

    { 1100525013;2;Field  ;
                Name=OrderNoCustomer;
                SourceExpr="Order No. Customer" }

    { 1100525008;2;Field  ;
                Name=Company;
                SourceExpr=COMPANYNAME }

    { 1100525014;2;Field  ;
                SourceExpr=Priority }

    { 1100525021;2;Field  ;
                Name=PriorityDescription;
                SourceExpr=PriorityDescription }

    { 1100525016;2;Field  ;
                Name=DateClosed;
                SourceExpr="Date Closed" }

    { 1100525017;2;Field  ;
                Name=ServiceContractNo;
                SourceExpr="Service Contract No." }

    { 1100525018;2;Field  ;
                Name=Email;
                SourceExpr="E-Mail" }

    { 1100525019;2;Field  ;
                Name=ReceivingDate;
                SourceExpr="Receiving Date" }

    { 1100525020;2;Field  ;
                Name=Doc;
                SourceExpr=Doc }

    { 1100525022;2;Field  ;
                Name=Commision Date;
                SourceExpr="Commision Date" }

  }
  CODE
  {
    VAR
      ProblemText@1100528100 : Text;
      ResolveText@1100525000 : Text;
      PriorityDescription@1100525002 : Text;
      Doc@1100525001 : Code[20];

    PROCEDURE SplitLength@7(Text@1210190000 : Text[1024]) : Integer;
    VAR
      Pos@1210190001 : Integer;
    BEGIN
      Text := Reverse(COPYSTR(Text,1,80));
      Pos := STRPOS(Text,' ');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,';');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,',');
      IF Pos = 0 THEN
        Pos := 80
      ELSE
        Pos := 80 - Pos + 1;
      EXIT(Pos);
    END;

    LOCAL PROCEDURE Reverse@4(Text1@1210190000 : Text[1024]) : Text[1024];
    VAR
      Text2@1210190001 : Text[250];
      Length@1210190002 : Integer;
      i@1210190003 : Integer;
    BEGIN
      Length := STRLEN(Text1);
      Text2 := '';
      FOR i := 1 TO Length DO
        Text2[i] := Text1[Length - i + 1];
      EXIT(Text2);
    END;

    LOCAL PROCEDURE SetProblemText@1100525001();
    VAR
      ServiceText@1100525000 : Record 11012882;
    BEGIN
      ProblemText := '';
      ServiceText.INIT;
      ServiceText.SETRANGE(ServiceText."Table Name", ServiceText."Table Name"::"Service Call");
      ServiceText.SETRANGE(ServiceText."No.", "No.");
      ServiceText.SETRANGE(ServiceText."Table Field", 60);
      IF ServiceText.FINDFIRST() THEN BEGIN
        REPEAT
           ProblemText += ' ' + ServiceText.Comment;
        UNTIL ServiceText.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetResolveText@1100525002();
    VAR
      ServiceText@1100525000 : Record 11012882;
      ServiceOrder@1100525001 : Record 11012823;
      NewLineStarted@1100525002 : Boolean;
    BEGIN
      ServiceOrder.SETFILTER("Call No.", "No.");
      ResolveText := '';
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceText.INIT;
          ServiceText.SETRANGE(ServiceText."Table Name", ServiceText."Table Name"::"Service Order");
          ServiceText.SETRANGE(ServiceText."No.", ServiceOrder."No.");
          ServiceText.SETRANGE(ServiceText."Table Field", 92);
          IF ServiceText.FINDFIRST() THEN BEGIN
            REPEAT
              IF NOT NewLineStarted THEN
                ResolveText += ' ';
              ResolveText += ServiceText.Comment;
              IF ServiceText."Line Break" THEN BEGIN
                ResolveText += LineBreak();
                NewLineStarted := TRUE;
              END ELSE BEGIN
                NewLineStarted := FALSE;
              END;
            UNTIL ServiceText.NEXT = 0;
          END;
        UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE LineBreak@1100525000() : Text;
    VAR
      CRLF@1100525000 : Text[2];
    BEGIN
      CRLF[1] := 13;
      CRLF[2] := 10;
      EXIT(CRLF);
    END;

    BEGIN
    END.
  }
}

