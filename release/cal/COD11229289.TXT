OBJECT Codeunit 11229289 4PS License Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11012357=rid,
                TableData 11012449=rim;
    OnRun=VAR
            NumberOfFSAUsers@1100528001 : Integer;
            NumberOfHPTUsers@1100528002 : Integer;
            FilterText@1100528004 : Text;
            FileMgt@1100528003 : Codeunit 419;
            FileName@1100528005 : Text[500];
            NumberOfMOBUsers@1100528000 : Integer;
            NumberOfHraUsers@1100528300 : Integer;
            NumberOfCCAUsers@1100526200 : Integer;
            NumberOfPLAUsers@1100526201 : Integer;
            NumberOfWHAUsers@1100528006 : Integer;
            NumberOfOSAUsers@1100526000 : Integer;
          BEGIN
            FilterText := FileMgt.GetToFilterText('', '.lic');
            FileName := FileMgt.OpenFileDialog(Text005, '', FilterText);
            IF FileName = '' THEN
              EXIT;

            NumberOfFSAUsers := LoadFSALicense(FileName);
            NumberOfPLAUsers := LoadPLALicense(FileName);
            NumberOfCCAUsers := LoadCCALicense(FileName);
            NumberOfHPTUsers := LoadHPTLicense(FileName);
            NumberOfHraUsers := LoadHraLicense(FileName);
            NumberOfMOBUsers := LoadMOBLicense(FileName);
            NumberOfWHAUsers := LoadWHALicense(FileName);
            NumberOfOSAUsers := LoadOSALicense(FileName);

            MESSAGE(Text006, NumberOfFSAUsers, NumberOfPLAUsers, NumberOfCCAUsers, NumberOfHPTUsers, NumberOfHraUsers, NumberOfMOBUsers, NumberOfWHAUsers, NumberOfOSAUsers);
          END;

  }
  CODE
  {
    VAR
      "4PS_HRA_App"@1100528302 : TextConst 'ENU=_4PS.HRA.App';
      "4PS_HPT_Web"@1100528301 : TextConst 'ENU=_4PS.HPT.Web';
      Text000@1100528300 : TextConst 'ENU=%1 has an invalid Value and cann''t be validated.';
      Text001@1100528304 : TextConst 'ENU=The License File allows for %1 4PS Hour App Users while you currently have %2 Users in the System.';
      Text003@1100525003 : TextConst 'ENU=The version of the 4PS License Validator is not correct. Please contact 4PS Support.';
      Text005@1100525004 : TextConst 'ENU=Select a license file';
      Text006@1100525006 : TextConst 'ENU=The License File is succesfully imported. \%1 4PS Field Service App Users allowed. \%2 4PS Plant App Users allowed. \%3 4PS Civil Construction App Users allowed. \%4 4PS Hour Portal Users allowed. \%5 4PS Hour App Users allowed. \%6 4PS Mobile Users allowed. \%7 4PS Warehouse App Users allowed \%8 4PS On Site App Users allowed.';
      Text008@1100525000 : TextConst 'ENU=The License File allows for %1 4PS Hour Portal Users while you currently have %2 Users in the System.';
      Text009@1100528000 : TextConst 'ENU=The License File allows for %1 4PS Field Service App users while you currently have %2 users set active in the system.';
      Text010@1100528100 : TextConst 'ENU=The license file for %1 expired on %2. Please contact 4PS Support.';
      Text011@1100528101 : TextConst 'ENU=Warning!\\The license for %1 will expire on %2.\Please contact 4PS Support.';
      Text012@1100528102 : TextConst 'ENU=There is an error in the 4PS license file. Please contact 4PS Support.';
      Text004@1100528001 : TextConst 'ENU=The license file allows for %1 4PS Mobile users while you currently have %2 users in the system.';
      LicenseType@1100528303 : ',,4PS Mobile,,4PS HPT,4PS HRA,4PS FSA,4PS CCA,4PS PLA,4PS WHA,4PS OSA';
      Text013@1100526200 : TextConst 'ENU=No or invalid Product Code has been specified';
      Text014@1100526000 : TextConst 'ENU=The License File allows for %1 %2 users while you currently have %3 users set active in the system.';
      ProductsGAP@1100526001 : Record 11124990;
      Text015@1100528700 : TextConst 'ENU=User license count not implemented for product %1.';
      PermissionManager@1100525001 : Codeunit 9002;

    LOCAL PROCEDURE LoadFSALicense@1100528001(FileName@1100528003 : Text[500]) : Integer;
    VAR
      ProductId@1100528001 : Text[20];
      NoOfUsers@1100528000 : Integer;
      ValidationMode@1100528004 : ',WebService,UserInput,NoError';
    BEGIN
      LicenseType := LicenseType::"4PS FSA";
      ProductId := 'Fps.Fsa.App';
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      ValidateUserCountFSA(FALSE, ValidationMode::NoError);
      CheckFSALicenseExpired(ValidationMode::NoError);
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE LoadOSALicense@1100526000(FileName@1100528003 : Text[500]) : Integer;
    VAR
      ProductId@1100528001 : Text[20];
      NoOfUsers@1100528000 : Integer;
      ValidationMode@1100528004 : ',WebService,UserInput,NoError';
      ConstructCustomLicense@1100528700 : Record 11012449;
    BEGIN
      LicenseType := LicenseType::"4PS OSA";
      ProductId := 'Fps.Osa.App';
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      ValidateUserCountOSA(FALSE, ValidationMode::NoError);
      CheckAppsLicenseExpired(ValidationMode::NoError, ConstructCustomLicense."Licence Type"::"4PS OSA");
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE LoadWHALicense@1100528005(FileName@1100528003 : Text[500]) : Integer;
    VAR
      ProductId@1100528001 : Text[20];
      NoOfUsers@1100528000 : Integer;
      ValidationMode@1100528004 : ',WebService,UserInput,NoError';
      ConstructCustomLicense@1100528700 : Record 11012449;
    BEGIN
      LicenseType := LicenseType::"4PS WHA";
      ProductId := 'Fps.Wha.App';
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      ValidateUserCountWHA(FALSE, ValidationMode::NoError);
      CheckAppsLicenseExpired(ValidationMode::NoError, ConstructCustomLicense."Licence Type"::"4PS WHA");
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE LoadCCALicense@1100526201(FileName@1100528003 : Text[500]) : Integer;
    VAR
      ProductId@1100528001 : Text[20];
      NoOfUsers@1100528000 : Integer;
      ValidationMode@1100528004 : ',WebService,UserInput,NoError';
      CCAAppSetup@1100528700 : Record 11128520;
    BEGIN
      LicenseType := LicenseType::"4PS CCA";
      ProductId := 'Fps.Cca.App';
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      CCAAppSetup.GET;
      IF CCAAppSetup."Use Generic User Management" THEN
        ValidateUserCountCCA(FALSE, ValidationMode::NoError)
      ELSE
        ValidateUserCountBase(FALSE, ValidationMode::NoError, 'CCA');
      CheckBaseLicenseExpired(ValidationMode::NoError, 'CCA');
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE LoadPLALicense@1100526202(FileName@1100528003 : Text[500]) : Integer;
    VAR
      ProductId@1100528001 : Text[20];
      NoOfUsers@1100528000 : Integer;
      ValidationMode@1100528004 : ',WebService,UserInput,NoError';
      PlantAppSetup@1100528700 : Record 11124924;
    BEGIN
      LicenseType := LicenseType::"4PS PLA";
      ProductId := 'Fps.Pla.App';
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      PlantAppSetup.GET;
      IF PlantAppSetup."Use Generic User Management" THEN
        ValidateUserCountPLA(FALSE, ValidationMode::NoError)
      ELSE
        ValidateUserCountBase(FALSE, ValidationMode::NoError, 'PLA');
      CheckBaseLicenseExpired(ValidationMode::NoError, 'PLA');
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE LoadHPTLicense@1100528000(FileName@1100528003 : Text[500]) : Integer;
    VAR
      ConstructCustomLicense@1100528300 : Record 11012449;
      ProductId@1100528002 : Text[20];
      NoOfUsers@1100528000 : Integer;
      ValidationMode@1100528004 : ',WebService,UserInput,NoError';
    BEGIN
      LicenseType := LicenseType::"4PS HPT";
      ProductId := "4PS_HPT_Web";
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      ConstructCustomLicense.GET(LicenseType);
      CheckIfLicenseValid(ConstructCustomLicense);
      CheckHPTLicenseExpired(ValidationMode::NoError);
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE LoadHraLicense@1100528308(FileName@1100528003 : Text[500]) : Integer;
    VAR
      ConstructCustomLicense@1100528300 : Record 11012449;
      ProductId@1100528002 : Text[20];
      NoOfUsers@1100528000 : Integer;
      ValidationMode@1100528004 : ',WebService,UserInput,NoError';
    BEGIN
      LicenseType := LicenseType::"4PS HRA";
      ProductId := "4PS_HRA_App";
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      ConstructCustomLicense.GET(LicenseType);
      CheckIfLicenseValid(ConstructCustomLicense);
      CheckHraLicenseExpired(ValidationMode::NoError);
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE LoadLicense@1100525000(LicenseType@1100528000 : Option;ProductId@1100528001 : Text[50];FileName@1100528002 : Text[500]) : Integer;
    VAR
      ConstructCustomLicense@1100525001 : Record 11012449;
      NoOfUsers@1100525002 : Integer;
      LicenseValidator@1100525003 : DotNet "'_4PS.LicenseValidator, Version=3.13.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'._4PS.LicenseValidator.Validator" RUNONCLIENT;
      ExpiryDate@1100528100 : Text;
    BEGIN
      LicenseValidator := LicenseValidator.Validator(ProductId);

      LicenseValidator.LoadLicense(FileName);

      NoOfUsers := LicenseValidator.GetConcurrentUsers();
      ExpiryDate := LicenseValidator.GetExpiryDate();

      IF ConstructCustomLicense.GET(LicenseType) THEN BEGIN
        FillLicenseRec(ConstructCustomLicense, LicenseType, NoOfUsers, ExpiryDate);
        ConstructCustomLicense.MODIFY(TRUE);
      END ELSE BEGIN
        ConstructCustomLicense."Licence Type" := LicenseType;
        FillLicenseRec(ConstructCustomLicense, LicenseType, NoOfUsers, ExpiryDate);
        ConstructCustomLicense.INSERT(TRUE);
      END;
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE IsLicenseInFile@1100528100(ProductId@1100528100 : Text[100];FileName@1100528103 : Text[500]) : Boolean;
    VAR
      XmlDocument@1100528101 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocumentNode@1100528105 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMManagement4PS@1100528104 : Codeunit 11020220;
    BEGIN
      XmlDocument := XmlDocument.XmlDocument;
      XMLDOMManagement4PS.LoadXMLFromClientFile(XmlDocument, FileName, TRUE);
      RootNode := XmlDocument.DocumentElement;
      EXIT(XMLDOMManagement4PS.FindNode(RootNode, STRSUBSTNO('.//Product[LicensedComponent="%1"]', ProductId), DocumentNode));
    END;

    LOCAL PROCEDURE CheckHashLicenseCreator@1100525002(ProductId@1100528000 : Text[50]);
    VAR
      TempBlob@1100525002 : Record 99008535;
      LicenseValidator@1100525015 : DotNet "'_4PS.LicenseValidator, Version=3.13.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'._4PS.LicenseValidator.Validator" RUNONCLIENT;
      IStream@1100525007 : InStream;
      EncryptionMgt@1100525000 : Codeunit 11012367;
      FileMgt@1100525014 : Codeunit 419;
      Base64String@1100525016 : Text;
      LicenseValidatorFileName@1100525005 : Text[250];
      PartOfBase64String@1100525006 : Text[1024];
      Hash@1100525003 : ARRAY [50] OF Text[100];
      HashReference@1100525009 : ARRAY [50] OF Text[100];
      I@1100525013 : Integer;
      StartPos@1100525017 : Integer;
      MyFile@1100528001 : File;
      MyOutStream@1100528002 : OutStream;
    BEGIN
      LicenseValidator := LicenseValidator.Validator(ProductId);
      LicenseValidatorFileName := LicenseValidator.GetType.Assembly.Location;

      FileMgt.BLOBImport4PS(TempBlob, LicenseValidatorFileName, FALSE);
      TempBlob.Blob.CREATEINSTREAM(IStream);
      Base64EncodeStream(IStream, Base64String);

      HashReference[1] := '8e2d16ad6d075ac2e5c6c2e70bbfd114';
      HashReference[2] := 'c53b44af4b452a6ba6e4dd2167c26b18';
      HashReference[3] := '4e5ddf8cbbf4e769b6707f4effb1bee7';
      HashReference[4] := '54b61a16af0df7e99028fe20f51e6f73';
      HashReference[5] := '678859f03fa731f9ac6146f8500bf10f';
      HashReference[6] := 'd35083d45ff25bd83355534019568b6e';
      HashReference[7] := 'f5e3f4b461ae8cee9b313b13cd107004';
      HashReference[8] := '4633c9eb1ddb82dedd49f9929b6c9d72';
      HashReference[9] := '19cf6f056211fdf19d51036abc12cb11';
      HashReference[10] := '8d5a61c794ec93c78eda88248924db10';
      HashReference[11] := '1ef208cb6be9bc0b2d1ceab147d6864d';
      HashReference[12] := '506e4fd76bcceaa9011903e9a6f50328';
      HashReference[13] := '3522d41df6fc3a5df6f808e3235c0c5c';
      HashReference[14] := 'e16b85db9b914b89a0d93d94ec16ea3d';
      HashReference[15] := '6e0f36ca4e90fb94ad9fc192cbee53c3';
      HashReference[16] := '624f61bea61b87711ffccc963c8d329b';
      HashReference[17] := 'b45863c8f585bf3bddc478899e39ac8b';
      HashReference[18] := '794980b1fe22b9065c523cd78e3e2820';
      HashReference[19] := 'cd64d7703143b7abb4ac76f28b4a0a08';
      HashReference[20] := 'cb4f1a1c40a3968c00df02d74fc596f5';
      HashReference[21] := 'b086d5831d1bbcb48103e6858e487582';
      HashReference[22] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[23] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[24] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[25] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[26] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[27] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[28] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[29] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[30] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[31] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[32] := 'd47b127bc2de2d687ddc82dac354c415';

      //MyFile.CREATE('c:\temp\jmol\dump.txt');
      //MyFile.CREATEOUTSTREAM(MyOutStream);

      I := 1;
      StartPos := 1;
      WHILE StartPos < STRLEN(Base64String) DO BEGIN
        PartOfBase64String := COPYSTR(Base64String, StartPos, MAXSTRLEN(PartOfBase64String));
        IF PartOfBase64String <> '' THEN BEGIN
          Hash[I] := EncryptionMgt.CalculateStringMD5(PartOfBase64String);
          IF Hash[I] <> HashReference[I] THEN
            ERROR(Text003);
          //MyOutStream.WRITETEXT(STRSUBSTNO('HashReference[%1] := ''%2'';', I, Hash[I]));
          //MyOutStream.WRITETEXT();
        END;

        I := I + 1;
        StartPos := StartPos + MAXSTRLEN(PartOfBase64String);
      END;

      //MyFile.CLOSE;
    END;

    LOCAL PROCEDURE Base64EncodeStream@1100525003(VAR IStream@1100525000 : InStream;VAR Base64String@1100525001 : Text);
    VAR
      MemoryStream@1100525008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Bytes@1100525007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1100525006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Encoding@1100528000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      MemoryStream := MemoryStream.MemoryStream;
      COPYSTREAM(MemoryStream, IStream);
      Bytes := MemoryStream.GetBuffer;
      Base64String := Encoding.UTF8.GetString(Bytes);
      Base64String := Convert.ToBase64String(Bytes);
    END;

    LOCAL PROCEDURE GetHashOfUsers@1100525001(NumberOfUsers@1100525000 : Integer) : Text[32];
    VAR
      EncryptionMgt@1100525001 : Codeunit 11012367;
      UsersString@1100525002 : Text[100];
    BEGIN
      UsersString := STRSUBSTNO('Dit is de sleutel!%1', NumberOfUsers);
      EXIT(EncryptionMgt.CalculateStringMD5(UsersString));
    END;

    [External]
    PROCEDURE GetHashOfExpiryDate@1100528102(ExpiryDate@1100528100 : Date) : Text[32];
    VAR
      EncryptionMgt@1100525001 : Codeunit 11012367;
      DateString@1100525002 : Text[100];
    BEGIN
      DateString := STRSUBSTNO('Dit is de sleutel!%1', FORMAT(ExpiryDate, 0, '<Day,2>-<Month,2>-<Year4>'));
      EXIT(EncryptionMgt.CalculateStringMD5(DateString));
    END;

    [External]
    PROCEDURE IsLicenseValid@1210190135(CustomLicense@1100528100 : Record 11012449) : Boolean;
    VAR
      Hash@1100528101 : Text[32];
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
          EXIT(TRUE);

      Hash := GetHashOfExpiryDate(CustomLicense."Expiry Date");
      IF (Hash <> CustomLicense."Expiry Date Hash") THEN
        EXIT(FALSE);

      Hash := GetHashOfUsers(CustomLicense."Number of Licenses");
      EXIT(Hash = CustomLicense."No. of Licenses Hash");
    END;

    [External]
    PROCEDURE CheckIfLicenseValid@1100528106(CustomLicense@1100528100 : Record 11012449) : Boolean;
    BEGIN
      IF NOT IsLicenseValid(CustomLicense) THEN
        ERROR(Text012);
    END;

    [External]
    PROCEDURE ValidateUserCountHRA@1100528300(VAR TmpHourPortalUser@1100528000 : TEMPORARY Record 11020453;ValidationMode@1100528002 : ',WebService,UserInput,NoError');
    VAR
      HourPortalUser@1100525000 : Record 11020453;
      ConstructCustomLicense@1100525004 : Record 11012449;
      HourPortalUserCount@1100525003 : Integer;
      MaxActive@1100525006 : Integer;
      NewUserCount@1100528001 : Integer;
    BEGIN
      ValidateUserCountHptOrHra(TmpHourPortalUser, ValidationMode, LicenseType::"4PS HRA");
    END;

    [External]
    PROCEDURE ValidateUserCountHPT@1100525004(VAR TmpHourPortalUser@1100528300 : TEMPORARY Record 11020453;ValidationMode@1100528002 : ',WebService,UserInput,NoError');
    VAR
      HourPortalUser@1100525000 : Record 11020453;
      ConstructCustomLicense@1100525004 : Record 11012449;
      HourPortalUserCount@1100525003 : Integer;
      MaxActive@1100525006 : Integer;
      NewUserCount@1100528001 : Integer;
    BEGIN
      ValidateUserCountHptOrHra(TmpHourPortalUser, ValidationMode, LicenseType::"4PS HPT");
    END;

    [External]
    PROCEDURE ValidateUserCountHptOrHra@1100528301(VAR TmpHourPortalUser@1100528301 : TEMPORARY Record 11020453;ValidationMode@1100528002 : ',WebService,UserInput,NoError';LicenseTypeIn@1100528300 : Option);
    VAR
      ConstructCustomLicense@1100525004 : Record 11012449;
      HourPortalUserCount@1100525003 : Integer;
      MaxActive@1100525006 : Integer;
      TextStr@1100528302 : Text;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
        EXIT;

      CASE LicenseTypeIn OF
        LicenseType::"4PS HPT": BEGIN
          TmpHourPortalUser.SETFILTER("License Type", '%1|%2', TmpHourPortalUser."License Type"::Portal, TmpHourPortalUser."License Type"::Both);
        END;
        LicenseType::"4PS HRA": BEGIN
          TmpHourPortalUser.SETFILTER("License Type", '%1|%2', TmpHourPortalUser."License Type"::App, TmpHourPortalUser."License Type"::Both);
        END;
         ELSE ERROR(Text000, TmpHourPortalUser.FIELDCAPTION("License Type"));
      END;

      HourPortalUserCount := TmpHourPortalUser.COUNT;
      ConstructCustomLicense.GET(LicenseTypeIn);
      CheckIfLicenseValid(ConstructCustomLicense);

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF HourPortalUserCount >= MaxActive THEN BEGIN
        CASE LicenseTypeIn OF
          LicenseType::"4PS HPT":
            TextStr := STRSUBSTNO(Text008, MaxActive, HourPortalUserCount, MaxActive-HourPortalUserCount);
          LicenseType::"4PS HRA":
            TextStr := STRSUBSTNO(Text001, MaxActive, HourPortalUserCount, MaxActive-HourPortalUserCount);
        END;

        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(TextStr)
        ELSE
          ERROR(TextStr);
      END;
    END;

    [External]
    PROCEDURE ValidateUserCountFSA@1100528003(CheckForInsertOfNew@1100528003 : Boolean;ValidationMode@1100528006 : ',WebService,UserInput,NoError');
    VAR
      FSAUserSetupGAP@1100528000 : Record 11229875;
      FSAUserCount@1100528001 : Integer;
      ConstructCustomLicense@1100528004 : Record 11012449;
      MaxActive@1100528002 : Integer;
      NewUserCount@1100528005 : Integer;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
        EXIT;
      IF CheckForInsertOfNew THEN
        NewUserCount := 1;
      FSAUserSetupGAP.SETRANGE(Active, FSAUserSetupGAP.Active::Yes);
      FSAUserSetupGAP.SETFILTER(Username, '<>%1', '');
      FSAUserCount := FSAUserSetupGAP.COUNT;
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS FSA");
      CheckIfLicenseValid(ConstructCustomLicense);

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF FSAUserCount + NewUserCount > MaxActive THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text009, MaxActive, FSAUserCount)
        ELSE
          ERROR(Text009, MaxActive, FSAUserCount);
      END;
    END;

    [External]
    PROCEDURE ValidateUserCountOSA@1100526001(CheckForInsertOfNew@1100528003 : Boolean;ValidationMode@1100528006 : ',WebService,UserInput,NoError');
    VAR
      GAPOSAUserSetup@1100528000 : Record 11124993;
      OSAUserCount@1100528001 : Integer;
      ConstructCustomLicense@1100528004 : Record 11012449;
      MaxActive@1100528002 : Integer;
      NewUserCount@1100528005 : Integer;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
        EXIT;
      IF CheckForInsertOfNew THEN
        NewUserCount := 1;
      GAPOSAUserSetup.SETRANGE(Active, GAPOSAUserSetup.Active::Yes);
      GAPOSAUserSetup.SETFILTER(Username, '<>%1','');
      OSAUserCount := GAPOSAUserSetup.COUNT;
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS OSA");
      CheckIfLicenseValid(ConstructCustomLicense);

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF OSAUserCount + NewUserCount > MaxActive THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text014, MaxActive, ProductsGAP.GetProductNameOSA, OSAUserCount)
        ELSE
          ERROR(Text014, MaxActive, ProductsGAP.GetProductNameOSA, OSAUserCount);
      END;
    END;

    [External]
    PROCEDURE ValidateUserCountWHA@1100528008(CheckForInsertOfNew@1100528003 : Boolean;ValidationMode@1100528006 : ',WebService,UserInput,NoError');
    VAR
      GAPWHAUserSetup@1100528000 : Record 11124979;
      WHAUserCount@1100528001 : Integer;
      ConstructCustomLicense@1100528004 : Record 11012449;
      MaxActive@1100528002 : Integer;
      NewUserCount@1100528005 : Integer;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
        EXIT;
      IF CheckForInsertOfNew THEN
        NewUserCount := 1;
      GAPWHAUserSetup.SETRANGE(Active, GAPWHAUserSetup.Active::Yes);
      GAPWHAUserSetup.SETFILTER(Username, '<>%1','');
      WHAUserCount := GAPWHAUserSetup.COUNT;
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS WHA");
      CheckIfLicenseValid(ConstructCustomLicense);

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF WHAUserCount + NewUserCount > MaxActive THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text014, MaxActive, ProductsGAP.GetProductNameWHA, WHAUserCount)
        ELSE
          ERROR(Text014, MaxActive, ProductsGAP.GetProductNameWHA, WHAUserCount);
      END;
    END;

    [External]
    PROCEDURE ValidateUserCountPLA@1100526003(CheckForInsertOfNew@1100528003 : Boolean;ValidationMode@1100528006 : ',WebService,UserInput,NoError');
    VAR
      GAPPLAUserSetup@1100528000 : Record 11124977;
      PLAUserCount@1100528001 : Integer;
      ConstructCustomLicense@1100528004 : Record 11012449;
      MaxActive@1100528002 : Integer;
      NewUserCount@1100528005 : Integer;
      PlantAppSetup@1100526000 : Record 11124924;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
        EXIT;
      PlantAppSetup.GET;
      PlantAppSetup.TESTFIELD("Use Generic User Management", TRUE);

      IF CheckForInsertOfNew THEN
        NewUserCount := 1;
      GAPPLAUserSetup.SETRANGE(Active, GAPPLAUserSetup.Active::Yes);
      GAPPLAUserSetup.SETFILTER(Username, '<>%1','');
      PLAUserCount := GAPPLAUserSetup.COUNT;
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS PLA");
      CheckIfLicenseValid(ConstructCustomLicense);

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF PLAUserCount + NewUserCount > MaxActive THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text014, MaxActive, ProductsGAP.GetProductNamePLA, PLAUserCount)
        ELSE
          ERROR(Text014, MaxActive, ProductsGAP.GetProductNamePLA, PLAUserCount);
      END;
    END;

    [External]
    PROCEDURE ValidateUserCountCCA@1100526004(CheckForInsertOfNew@1100528003 : Boolean;ValidationMode@1100528006 : ',WebService,UserInput,NoError');
    VAR
      GAPCCAUserSetup@1100528000 : Record 11124978;
      CCAUserCount@1100528001 : Integer;
      ConstructCustomLicense@1100528004 : Record 11012449;
      MaxActive@1100528002 : Integer;
      NewUserCount@1100528005 : Integer;
      CCAAppSetup@1100526000 : Record 11128520;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
        EXIT;
      CCAAppSetup.GET;
      CCAAppSetup.TESTFIELD("Use Generic User Management", TRUE);

      IF CheckForInsertOfNew THEN
        NewUserCount := 1;
      GAPCCAUserSetup.SETRANGE(Active, GAPCCAUserSetup.Active::Yes);
      GAPCCAUserSetup.SETFILTER(Username, '<>%1','');
      CCAUserCount := GAPCCAUserSetup.COUNT;
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS CCA");
      CheckIfLicenseValid(ConstructCustomLicense);

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF CCAUserCount + NewUserCount > MaxActive THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text014, MaxActive, ProductsGAP.GetProductNameCCA, CCAUserCount)
        ELSE
          ERROR(Text014, MaxActive, ProductsGAP.GetProductNameCCA, CCAUserCount);
      END;
    END;

    [External]
    PROCEDURE ValidateUserCountBase@1100526200(CheckForInsertOfNew@1100528003 : Boolean;ValidationMode@1100528006 : ',WebService,UserInput,NoError';ProductCode@1100526200 : Code[20]);
    VAR
      AppUser@1100528000 : Record 11130031;
      AppUserCount@1100528001 : Integer;
      ConstructCustomLicense@1100528004 : Record 11012449;
      MaxActive@1100528002 : Integer;
      NewUserCount@1100528005 : Integer;
      ResourceWOP@1100526202 : Record 11229278;
      CCAAppSetup@1100526000 : Record 11128520;
      PlantAppSetup@1100526001 : Record 11124924;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
        EXIT;
      IF ProductCode = 'PLA' THEN BEGIN
        PlantAppSetup.GET;
        PlantAppSetup.TESTFIELD("Use Generic User Management", FALSE);
      END ELSE IF ProductCode = 'CCA' THEN BEGIN
        CCAAppSetup.GET;
        CCAAppSetup.TESTFIELD("Use Generic User Management", FALSE);
      END;
      IF CheckForInsertOfNew THEN
        NewUserCount := 1;

      AppUserCount := 0;

      IF ProductCode = 'PLA' THEN
        ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS PLA")
      ELSE IF ProductCode = 'CCA' THEN
        ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS CCA")
      ELSE
        ERROR(Text013);

      CheckIfLicenseValid(ConstructCustomLicense);

      AppUser.SETRANGE(Active, TRUE);

      IF AppUser.FINDSET THEN BEGIN
        REPEAT
          IF ResourceWOP.GET(AppUser."Resource No.") THEN BEGIN
            IF ResourceWOP."Active in CCA" AND (ProductCode = 'CCA') THEN
              AppUserCount += 1;
            IF ResourceWOP."Active in PLA" AND (ProductCode = 'PLA') THEN
              AppUserCount += 1;
          END;
        UNTIL AppUser.NEXT = 0;
      END;

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF AppUserCount + NewUserCount > MaxActive THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text009, MaxActive, AppUserCount, AppUserCount-MaxActive)
        ELSE
          ERROR(Text009, MaxActive, AppUserCount, AppUserCount-MaxActive);
      END;
    END;

    LOCAL PROCEDURE FillLicenseRec@1100528110(VAR ConstructCustomLicense@1100528101 : Record 11012449;LicenseType@1100528000 : Option;NoOfUsers@1100528001 : Integer;ExpiryDate@1100528002 : Text[500]);
    BEGIN
      ConstructCustomLicense."Number of Licenses" := NoOfUsers;
      ConstructCustomLicense."No. of Licenses Hash" := GetHashOfUsers(NoOfUsers);
      ConstructCustomLicense."Expiry Date" := CalculateExpiryDate(ExpiryDate);
      ConstructCustomLicense."Expiry Date Hash":= GetHashOfExpiryDate(ConstructCustomLicense."Expiry Date");

      SetWarningDate(ConstructCustomLicense);
    END;

    LOCAL PROCEDURE CalculateExpiryDate@1100528101(Input@1100528100 : Text) : Date;
    BEGIN
      IF Input = '' THEN
        EXIT(0D);

      EXIT(DMY2DATE(GetDatePartFromString(Input, 3), GetDatePartFromString(Input, 2), GetDatePartFromString(Input, 1))); //Assume date format YYYY-MM-DD (ISO 8601)
    END;

    LOCAL PROCEDURE GetDatePartFromString@1100528105(Input@1100528100 : Text;PartNo@1100528102 : Integer) : Integer;
    VAR
      DateStrings@1100528103 : Text;
      Result@1100528101 : Integer;
    BEGIN
      DateStrings := CONVERTSTR(Input, '-', ','); //Assume date format YYYY-MM-DD (ISO 8601)

      IF (EVALUATE(Result, SELECTSTR(PartNo, DateStrings))) THEN
        EXIT(Result);
    END;

    [External]
    PROCEDURE CheckFSALicenseExpired@1100528103(ValidationMode@1100528102 : ',WebService,UserInput,NoError');
    VAR
      ConstructCustomLicense@1100528004 : Record 11012449;
    BEGIN
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS FSA");
      CheckLicenseExpired(ValidationMode, ConstructCustomLicense);
    END;

    [External]
    PROCEDURE CheckAppsLicenseExpired@1100528011(ValidationMode@1100528102 : ',WebService,UserInput,NoError';LicenceType@1100528700 : Option);
    VAR
      ConstructCustomLicense@1100528004 : Record 11012449;
    BEGIN
      ConstructCustomLicense.GET(LicenceType);
      CheckLicenseExpired(ValidationMode, ConstructCustomLicense);
    END;

    [External]
    PROCEDURE CheckBaseLicenseExpired@1100526204(ValidationMode@1100528102 : ',WebService,UserInput,NoError';ProductCode@1100526200 : Code[20]);
    VAR
      ConstructCustomLicense@1100528004 : Record 11012449;
    BEGIN
      IF ProductCode = 'PLA' THEN
        ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS PLA")
      ELSE IF ProductCode = 'CCA' THEN
        ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS CCA")
      ELSE
       ERROR(Text013);

      CheckLicenseExpired(ValidationMode, ConstructCustomLicense);
    END;

    LOCAL PROCEDURE WarningShouldPopUp@1100528104(ConstructCustomLicense@1100528100 : Record 11012449) : Boolean;
    VAR
      NextWarningDate@1100528101 : Date;
    BEGIN
      IF NOT IsExpiryDateEnabledOnLicense(ConstructCustomLicense) THEN
        EXIT(FALSE);

      IF ConstructCustomLicense."Next Warning Date" = 0D THEN BEGIN
        SetWarningDate(ConstructCustomLicense);
        ConstructCustomLicense.MODIFY(FALSE);
      END;

      NextWarningDate := ConstructCustomLicense."Next Warning Date";

      IF (TODAY >= NextWarningDate) OR (WORKDATE >= NextWarningDate) THEN BEGIN
        ConstructCustomLicense."Next Warning Date" := CALCDATE('<1D>', TODAY);
        ConstructCustomLicense.MODIFY(FALSE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetWarningDate@1100528109(VAR ConstructCustomLicense@1100528100 : Record 11012449);
    BEGIN
      IF ConstructCustomLicense."Expiry Date" <> 0D THEN
      //  ConstructCustomLicense."Next Warning Date" := CALCDATE('-1M', ConstructCustomLicense."Expiry Date")
        ConstructCustomLicense."Next Warning Date" := CALCDATE('<-1M>', ConstructCustomLicense."Expiry Date")
      ELSE
        ConstructCustomLicense."Next Warning Date" := 0D;
    END;

    LOCAL PROCEDURE IsExpiryDateEnabledOnLicense@1100528112(ConstructCustomLicense@1100528100 : Record 11012449) : Boolean;
    BEGIN
      IF (PermissionManager.SoftwareAsAService) THEN
          EXIT(TRUE);

      EXIT(ConstructCustomLicense."Expiry Date Hash" <> GetHashOfExpiryDate(0D));
    END;

    LOCAL PROCEDURE CheckLicenseExpired@1100528009(ValidationMode@1100528000 : ',WebService,UserInput,NoError';ConstructCustomLicense@1100528001 : Record 11012449);
    VAR
      ExpiryDate@1100528002 : Date;
    BEGIN
      IF NOT IsExpiryDateEnabledOnLicense(ConstructCustomLicense) THEN
        EXIT;

      ExpiryDate := ConstructCustomLicense."Expiry Date";

      IF (TODAY > ExpiryDate) OR (WORKDATE > ExpiryDate) THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text010, ConstructCustomLicense."Licence Type", ExpiryDate)
        ELSE
          ERROR(Text010, ConstructCustomLicense."Licence Type", ExpiryDate);
        EXIT;
      END;

      IF WarningShouldPopUp(ConstructCustomLicense) THEN
        CASE ValidationMode OF
          ValidationMode::UserInput, ValidationMode::NoError:
            MESSAGE(Text011, ConstructCustomLicense."Licence Type", ExpiryDate);
          ValidationMode::WebService:
            ERROR(Text011, ConstructCustomLicense."Licence Type", ExpiryDate);
          ELSE
            ERROR(Text011, ConstructCustomLicense."Licence Type", ExpiryDate);
        END;
    END;

    [External]
    PROCEDURE CheckHPTLicenseExpired@1100528010(ValidationMode@1100528000 : ',WebService,UserInput,NoError');
    VAR
      ConstructCustomLicense@1100528001 : Record 11012449;
    BEGIN
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS HPT");
      CheckLicenseExpired(ValidationMode, ConstructCustomLicense);
    END;

    [External]
    PROCEDURE CheckHraLicenseExpired@1100528302(ValidationMode@1100528000 : ',WebService,UserInput,NoError');
    VAR
      ConstructCustomLicense@1100528001 : Record 11012449;
    BEGIN
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS HRA");
      CheckLicenseExpired(ValidationMode, ConstructCustomLicense);
    END;

    LOCAL PROCEDURE DeleteLicense@1100528002(LicenseType@1100528000 : Option);
    VAR
      ConstructCustomLicense@1100528001 : Record 11012449;
    BEGIN
      IF ConstructCustomLicense.GET(LicenseType) THEN
        ConstructCustomLicense.DELETE;
    END;

    LOCAL PROCEDURE LoadMOBLicense@1100528004(FileName@1100528000 : Text[500]) : Integer;
    VAR
      LicenseType@1100528004 : ',,4PS Mobile,,4PS HPT,,4PS FSA';
      ProductId@1100528003 : Text[50];
      NoOfUsers@1100528002 : Integer;
      ValidationMode@1100528001 : ',WebService,UserInput,NoError';
    BEGIN
      LicenseType := LicenseType::"4PS Mobile";
      ProductId := '_4PS.Mobile.LicenseValidator.Validator';
      IF NOT IsLicenseInFile(ProductId, FileName) THEN BEGIN
        DeleteLicense(LicenseType);
        EXIT(0);
      END;

      CheckHashLicenseCreator(ProductId);
      NoOfUsers := LoadLicense(LicenseType, ProductId, FileName);
      ValidateUserCountMOB(FALSE, ValidationMode::NoError);
      CheckMOBLicenseExpired(ValidationMode::NoError);
      EXIT(NoOfUsers);
    END;

    [External]
    PROCEDURE ValidateUserCountMOB@1100528006(CheckForInsertOfNew@1100528003 : Boolean;ValidationMode@1100528006 : ',WebService,UserInput,NoError');
    VAR
      MOBUser@1100528000 : Record 11125654;
      MOBUserCount@1100528001 : Integer;
      ConstructCustomLicense@1100528004 : Record 11012449;
      MaxActive@1100528002 : Integer;
      NewUserCount@1100528005 : Integer;
    BEGIN
      IF CheckForInsertOfNew THEN
        NewUserCount := 1;
      MOBUser.SETRANGE(Active, TRUE);

      MOBUserCount := MOBUser.COUNT;
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS Mobile");
      CheckIfLicenseValid(ConstructCustomLicense);

      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF MOBUserCount + NewUserCount > MaxActive THEN BEGIN
        IF ValidationMode = ValidationMode::NoError THEN
          MESSAGE(Text004, MaxActive, MOBUserCount, MOBUserCount-MaxActive)
        ELSE
          ERROR(Text004, MaxActive, MOBUserCount, MOBUserCount-MaxActive);
      END;
    END;

    [External]
    PROCEDURE CheckMOBLicenseExpired@1100528007(ValidationMode@1100528000 : ',WebService,UserInput,NoError');
    VAR
      ConstructCustomLicense@1100528001 : Record 11012449;
    BEGIN
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS Mobile");
      CheckLicenseExpired(ValidationMode, ConstructCustomLicense);
    END;

    [External]
    PROCEDURE LicenseAndReadPermissionForTable@1100528500(SourceVariant@1100528500 : Variant) : Boolean;
    VAR
      LicensePermission@1100528501 : Record 2000000043;
      RecRef@1100528502 : RecordRef;
    BEGIN
      IF SourceVariant.ISRECORD OR SourceVariant.ISRECORDREF THEN
        RecRef.GETTABLE(SourceVariant);

      IF LicensePermission.GET(LicensePermission."Object Type"::Table, RecRef.NUMBER) THEN BEGIN
        IF LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::Yes THEN
          IF RecRef.READPERMISSION THEN
            EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE GetLicenseCountByProductCode@1100528700(ProductCode@1100528700 : Code[10]) Licenses : Integer;
    VAR
      ProductsGAP@1100528701 : Record 11124990;
      ConstructCustomLicense@1100528702 : Record 11012449;
    BEGIN
      CASE ProductCode OF
        ProductsGAP.GetProductCodeWHA:
          BEGIN
            ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS WHA");
            CheckIfLicenseValid(ConstructCustomLicense);
            EXIT(ConstructCustomLicense."Number of Licenses");
          END;
        ProductsGAP.GetProductCodeOSA:
          BEGIN
            ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS OSA");
            CheckIfLicenseValid(ConstructCustomLicense);
            EXIT(ConstructCustomLicense."Number of Licenses");
          END;
        ProductsGAP.GetProductCodeCCA:
          BEGIN
            ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS CCA");
            CheckIfLicenseValid(ConstructCustomLicense);
            EXIT(ConstructCustomLicense."Number of Licenses");
          END;
        ProductsGAP.GetProductCodePLA:
          BEGIN
            ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS PLA");
            CheckIfLicenseValid(ConstructCustomLicense);
            EXIT(ConstructCustomLicense."Number of Licenses");
          END;
        ProductsGAP.GetProductCodeFSA:
          BEGIN
            ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS FSA");
            CheckIfLicenseValid(ConstructCustomLicense);
            EXIT(ConstructCustomLicense."Number of Licenses");
          END;
      ELSE
        MESSAGE(Text015,ProductCode);
      END;
    END;

    BEGIN
    {
      190722 ORANGO.DL #25132 wrong in calcdate, expexted ENU
    }
    END.
  }
}

