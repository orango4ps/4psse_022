OBJECT Codeunit 11020505 IMOS Time Record Doc. XML Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11020534;
    OnRun=VAR
            InboundDocument@1000000002 : Record 11020538;
          BEGIN
            CASE Action OF
              Action::"Receive Document":
                BEGIN
                  GetInboundDocument(InboundDocument);  // Function in table, gets record
                  ReceiveDocument(InboundDocument);
                END;
            END;
          END;

  }
  CODE
  {
    VAR
      iMOSSetUp@1100485000 : Record 11020549;
      XMLDOMDocument@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Text002@1000000010 : TextConst 'DEU=Es ist kein XML verfÅgbar fÅr eingehende Belegnr. %1;ENU=No XML is available for Inbound Document No. %1;NLD=Er is geen XML beschikbaar voor inkomend documentnr. %1;NOR=Det finnes ingen XML tilgjengelig for inkommende dokumentnr %1;SVE=Det finns ingen XML tillgÑnglig fîr ankommande dokumentnr %1';
      ScannerSetup@1100485001 : Record 11020527;
      XMLDOMManagement4PS@1100525001 : Codeunit 11020220;
      XMLFormat4PS@1100525000 : Codeunit 11020221;

    PROCEDURE ReceiveDocument@1000000011(InboundDocument@1000000000 : Record 11020538);
    BEGIN
      IF NOT InboundDocument.GetInboundXMLDOM(XMLDOMDocument) THEN
        ERROR(Text002,InboundDocument."Entry No.");

      ReceiveXML(InboundDocument);
    END;

    PROCEDURE ReceiveXML@1000000013(InboundDocument@1000000012 : Record 11020538);
    VAR
      DocumentNode@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TimeRecordNodeList@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TimeRecordNode@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CustomDataNode@1000000004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InboundHourLine@1000000006 : Record 11020542;
      TempInboundRec@1100485005 : TEMPORARY Record 11020542;
      JobNoticeRec@1000000009 : Record 11020536;
      InboundJobNoticeRec@1100485002 : Record 11020539;
      HourHeaderRec@1100485000 : Record 11012038;
      HourLineRec@1100485001 : Record 11012039;
      JobRec@1100485003 : Record 11072003;
      SkipLine@1100485004 : Boolean;
      lTimeVar@1100485006 : Time;
      I@1100525000 : Integer;
      tekst@1100525001 : Text;
      tellertje@1100525002 : Integer;
    BEGIN
      iMOSSetUp.GET;

      DocumentNode := XMLDOMDocument.DocumentElement;

      tekst := DocumentNode.Name;
      WITH InboundHourLine DO BEGIN
        LOCKTABLE;
        IF FIND('+') THEN;
        XMLDOMManagement4PS.FindNodes(DocumentNode,'TimeRecord',TimeRecordNodeList);
        tellertje :=  TimeRecordNodeList.Count;
        IF NOT ISNULL(TimeRecordNodeList) THEN BEGIN
          FOR I := 0 TO (TimeRecordNodeList.Count - 1) DO BEGIN
            TimeRecordNode := TimeRecordNodeList.Item(I);
            INIT;
            "Entry No." += 1;
            XMLDOMManagement4PS.FindNode(TimeRecordNode,'customdata',CustomDataNode);
            "Job Notice No." := XMLDOMManagement4PS.GetAttributeValue(CustomDataNode,'erp_serviceorder');
            "Job Notice Line No." := XMLFormat4PS.FormatXMLInteger(XMLDOMManagement4PS.GetAttributeValue(CustomDataNode,'erp_activiteit'));
            DT_start := XMLFormat4PS.FormatXMLDateTime(XMLDOMManagement4PS.GetAttributeValue(TimeRecordNode,'dt_start'));
            DT_end := XMLFormat4PS.FormatXMLDateTime(XMLDOMManagement4PS.GetAttributeValue(TimeRecordNode,'dt_end'));
            Duration := XMLFormat4PS.FormatXMLDecimal(XMLDOMManagement4PS.GetAttributeValue(TimeRecordNode,'duration'));
            Engineer := XMLDOMManagement4PS.GetAttributeValue(CustomDataNode,'erp_engineer_id');
            "Wage Component" := XMLDOMManagement4PS.GetAttributeValue(CustomDataNode,'taak');
            INSERT;
            IF Engineer <> '' THEN BEGIN
              InboundJobNoticeRec.RESET;
              InboundJobNoticeRec.SETRANGE("No.", "Job Notice No.");
              IF InboundJobNoticeRec.FIND('+') THEN BEGIN
                InboundJobNoticeRec."Processed Engineer" := Engineer;
                InboundJobNoticeRec.MODIFY;
              END;
            END;
            IF (DT2DATE(DT_start)) <> (DT2DATE(DT_end )) THEN BEGIN
              TempInboundRec := InboundHourLine;
              //lTimeVar := 000000T + ((Hours * 60 + Minutes) * 60 + Seconds) * 1000 + miliSeconds;
              lTimeVar := 000000T + ((23 * 60 + 59) * 60 + 59) * 1000 + 0;
              DT_end := CREATEDATETIME((DT2DATE(DT_start)), lTimeVar);

              HourLineRec."Time From"  := DT2TIME(DT_start);
              HourLineRec."Time Until" := DT2TIME(DT_end);
              HourLineRec.Duration := HourLineRec."Time Until" - HourLineRec."Time From";
              Duration := ROUND(HourLineRec.Duration / 60000, 1);

              MODIFY;
              lTimeVar := 000000T + ((0 * 60 + 0) * 60 + 1) * 1000 + 0;
              DT_start := CREATEDATETIME((DT2DATE(TempInboundRec.DT_end)), lTimeVar);
              DT_end := TempInboundRec.DT_end;
              Duration := TempInboundRec.Duration - Duration;
              IF Duration > 0 THEN BEGIN
                "Entry No." += 1;
                INSERT;
              END;
            END;
          END;
        END;
      END;

      InboundHourLine.SETRANGE("in TimeSheet",FALSE);

      IF InboundHourLine.FIND('-') THEN BEGIN
        REPEAT
          HourLineRec.INIT;
          HourLineRec."Employee No." := InboundHourLine.Engineer;
          HourLineRec.Week := DATE2DWY(DT2DATE(InboundHourLine.DT_start),2);
          HourLineRec.Year := DATE2DWY(DT2DATE(InboundHourLine.DT_start),3);
          HourLineRec."Job Notice Entry Date" := DT2DATE(InboundHourLine.DT_start);
          HourLineRec.Day := DATE2DWY(HourLineRec."Job Notice Entry Date", 1);

          IF NOT SkipTravelHours(InboundHourLine."Wage Component", HourLineRec) THEN BEGIN

            IF NOT HourHeaderRec.GET(HourLineRec.Year,HourLineRec.Week,HourLineRec."Employee No.") THEN BEGIN
              HourHeaderRec.VALIDATE(Year,HourLineRec.Year);
              HourHeaderRec.VALIDATE(Week,HourLineRec.Week);
              HourHeaderRec.VALIDATE("Employee No.",HourLineRec."Employee No.");
              HourHeaderRec.INSERT(TRUE);
            END;

            SkipLine := FALSE;
            JobNoticeRec.INIT;
            IF JobNoticeRec.GET(InboundHourLine."Job Notice No.") THEN;
            IF JobNoticeRec."Project No." <> '' THEN
              IF JobRec.GET(JobNoticeRec."Project No.") THEN BEGIN
                IF JobRec."Project Status" <> JobRec."Project Status"::Production THEN
                   SkipLine := TRUE;
              END ELSE
                SkipLine := TRUE;

            IF NOT SkipLine THEN BEGIN

              HourLineRec."Line No." := GetLastLineNo(HourLineRec) + 10000;
              HourLineRec.INSERT(TRUE);

              HourLineRec.VALIDATE(Type,HourLineRec.Type::Indirect);

              IF JobNoticeRec."Project No." <> '' THEN BEGIN
                HourLineRec.VALIDATE(Type,HourLineRec.Type::Project);
                HourLineRec.VALIDATE("Project No.",JobNoticeRec."Project No.");
                HourLineRec.VALIDATE("Cost Object",iMOSSetUp."Cost Object");
              END;

              IF (JobNoticeRec."Plant Type" <> '') THEN BEGIN
                HourLineRec.VALIDATE(Type, HourLineRec.Type::Plant);
                HourLineRec.VALIDATE("Plant Type", JobNoticeRec."Plant Type");
                HourLineRec.VALIDATE("Plant No.", JobNoticeRec."Plant No.");
                //IF JobNoticeRec."Bon Type" < JobNoticeRec."Bon Type"::Maintenance THEN
                //  HourLineRec.VALIDATE("Cost Component Plant", iMOSSetUp."Cost Component")
                //ELSE
                HourLineRec.VALIDATE("Cost Component Plant", iMOSSetUp."Cost Component Other");
              END;

              IF HourLineRec.Type = HourLineRec.Type::Indirect THEN BEGIN
                HourLineRec.VALIDATE("Cost Object",iMOSSetUp."Cost Object");
                HourLineRec.VALIDATE("Cost Code",iMOSSetUp."Cost Code");
              END;

              IF InboundHourLine."Wage Component" <> '' THEN
                HourLineRec.VALIDATE("Wage Component",InboundHourLine."Wage Component");

      //     IF ("Wage Component" = iMOSSetUp."Wage Component Travel") AND
      //       (iMOS_SetUp."Reisuren aan Afdeling") THEN
      //         VALIDATE(SEZ.Kostenstellencode,MW.Kostenstellencode);

              HourLineRec."Job Notice No." := InboundHourLine."Job Notice No.";
              HourLineRec."Job Notice Entry" := InboundHourLine."Entry No.";

              EvaluateHourMatrix(
                InboundHourLine.DT_start,
                InboundHourLine.DT_end,
                InboundHourLine.Duration,
                HourHeaderRec,
                HourLineRec);

              InboundHourLine."in TimeSheet" := TRUE;
              InboundHourLine.MODIFY;
            END;

            COMMIT;

          END;
        UNTIL InboundHourLine.NEXT = 0;
      END;
    END;

    PROCEDURE EvaluateHourMatrix@1100485000(lDT_start@1100485000 : DateTime;lDT_end@1100485004 : DateTime;lDuration@1100485005 : Decimal;VAR HourHeaderRec@1100485001 : Record 11012038;VAR HourLineRec@1100485002 : Record 11012039);
    VAR
      EmployeeRec@1100485022 : Record 5200;
      HourMatrix@1100485021 : Record 11020531;
      HourMatrix2@1100485011 : Record 11020531;
      Time1@1100485018 : Time;
      Time2@1100485017 : Time;
      Duration1@1100485008 : Decimal;
      Duration2@1100485007 : Decimal;
      Matrix1Found@1100485020 : Boolean;
      Matrix2Found@1100485023 : Boolean;
      DurationTest@1100485003 : Decimal;
    BEGIN
      //* Check on starting time if other wage component should be used.

      Time1 := 0T;
      Time2 := 0T;
      Duration1 := 0;
      Duration2 := 0;

      Matrix1Found := FALSE;
      Matrix2Found := FALSE;

      HourLineRec."Job Notice Entry Date" := DT2DATE(lDT_start);
      HourLineRec."Time From"  := DT2TIME(lDT_start);
      HourLineRec."Time Until" := DT2TIME(lDT_end);
      HourLineRec.Day := DATE2DWY(HourLineRec."Job Notice Entry Date", 1);

      HourLineRec.VALIDATE(Duration, lDuration * 60000);

      EmployeeRec.GET(HourLineRec."Employee No.");

      HourMatrix.RESET;
      HourMatrix.SETCURRENTKEY("Hour Model", "Date From", "Wage Component",
                               "Time From", "Hours From", "New Wage Component");
      HourMatrix.SETRANGE("Hour Model", EmployeeRec."Imos Hour Model");
      HourMatrix.SETRANGE("Date From", 0D, HourLineRec."Job Notice Entry Date");
      HourMatrix.SETRANGE("Wage Component", HourLineRec."Wage Component");
      SetFilterOnMatrixDay(HourMatrix, HourLineRec.Day);
      HourMatrix.SETRANGE("Time From", 0T, HourLineRec."Time From");
      HourMatrix.SETRANGE("Hours From", 0);
      IF HourMatrix.FIND('+') THEN Matrix1Found := TRUE;

      HourMatrix2.RESET;
      HourMatrix2.SETCURRENTKEY("Hour Model", "Date From", "Wage Component",
                               "Time From", "Hours From", "New Wage Component");
      HourMatrix2.COPYFILTERS(HourMatrix);
      HourMatrix2.SETFILTER("Time From", '>%1', HourLineRec."Time From");
      IF HourMatrix2.FIND('-') THEN Matrix2Found := TRUE;

      IF Matrix2Found THEN BEGIN
        Time1 := HourMatrix2."Time From";
        Time2 := HourLineRec."Time From";
        Duration1 := (Time1 - Time2);
        DurationTest := 0 + HourLineRec.Duration;
        IF HourLineRec.Duration <= Duration1 THEN BEGIN
          IF Matrix1Found THEN
            HourLineRec.VALIDATE("Wage Component",HourMatrix."New Wage Component");
        END ELSE BEGIN
          Duration2 := HourLineRec.Duration - Duration1;
          HourLineRec.VALIDATE(Duration, Duration1);
          HourLineRec."Split (iMOS)" := TRUE;
          IF Matrix1Found THEN
            HourLineRec.VALIDATE("Wage Component",HourMatrix."New Wage Component");

          SaveHourLine(lDT_end, HourLineRec, EmployeeRec);

          HourLineRec."Line No." := GetLastLineNo(HourLineRec) + 10000;
          HourLineRec."Time From" := HourLineRec."Time Until";
          HourLineRec.VALIDATE(Duration, 0);
          HourLineRec.INSERT;
          HourLineRec."Time Until" := DT2TIME(lDT_end);
          HourLineRec.VALIDATE(Duration, Duration2);
          HourLineRec.VALIDATE("Wage Component",HourMatrix2."New Wage Component");

        END;
      END ELSE BEGIN
        IF Matrix1Found THEN
          HourLineRec.VALIDATE("Wage Component",HourMatrix."New Wage Component");
      END;

      SaveHourLine(lDT_end, HourLineRec, EmployeeRec);
    END;

    PROCEDURE SaveHourLine@1100485003(lDT_end@1100485009 : DateTime;VAR HourLineRec@1100485000 : Record 11012039;EmployeeRec@1100485003 : Record 5200);
    VAR
      HourMatrix3@1100485001 : Record 11020531;
      HourMatrix4@1100485002 : Record 11020531;
      HourLineRec3@1100485004 : Record 11012039;
      Hours1@1100485005 : Decimal;
      Duration1@1100485006 : Decimal;
      Duration2@1100485007 : Decimal;
    BEGIN
      //* Check on total hours per day if other overtime wage component should be used.

      HourMatrix3.RESET;
      HourMatrix3.SETCURRENTKEY("Hour Model", "Date From", "Wage Component",
                               "Time From", "Hours From", "New Wage Component");
      HourMatrix3.SETRANGE("Hour Model", EmployeeRec."Imos Hour Model");
      HourMatrix3.SETRANGE("Date From", 0D, HourLineRec."Job Notice Entry Date");
      HourMatrix3.SETRANGE("Wage Component", HourLineRec."Wage Component");
      SetFilterOnMatrixDay(HourMatrix3, HourLineRec.Day);
      HourMatrix3.SETFILTER("Hours From", '<>0');

      IF HourMatrix3.FIND('-') THEN BEGIN
        Hours1 := HourLineRec.Duration/3600000;
        HourLineRec3.RESET;
        HourLineRec3.SETRANGE(Year,HourLineRec.Year);
        HourLineRec3.SETRANGE(Week,HourLineRec.Week);
        HourLineRec3.SETRANGE("Employee No.",HourLineRec."Employee No.");
        SetFilterOnHourLineHours(HourLineRec3,HourLineRec.Day);
        IF HourLineRec3.FIND('-') THEN BEGIN
          REPEAT
            Hours1 := Hours1 + GetHoursPerDay(HourLineRec3,HourLineRec.Day);
          UNTIL HourLineRec3.NEXT = 0;
        END;
        Hours1 := ROUND(Hours1, 0.0001);

        IF Hours1 > HourMatrix3."Hours From" THEN BEGIN
          Duration1 := (Hours1 - HourMatrix3."Hours From") * 3600000;
          IF HourLineRec.Duration > Duration1 THEN BEGIN
            HourLineRec.VALIDATE("Wage Component",HourMatrix3."Wage Component");
            Duration2 := HourLineRec.Duration - Duration1;
            HourLineRec.VALIDATE(Duration, Duration2);
            HourLineRec."Split (iMOS)" := TRUE;
            HourLineRec.Duration := 0;  //**4PS 28-8-2007 because of edit problem in hours page
            HourLineRec.MODIFY(TRUE);

            HourLineRec."Line No." := GetLastLineNo(HourLineRec) + 10000;
            HourLineRec."Time From" := HourLineRec."Time Until";
            HourLineRec.VALIDATE(Duration, 0);
            HourLineRec.INSERT;
            HourLineRec.VALIDATE("Wage Component",HourMatrix3."New Wage Component");
            HourLineRec."Time Until" := DT2TIME(lDT_end);
            HourLineRec.VALIDATE(Duration, Duration1);
          END ELSE BEGIN
            HourLineRec.VALIDATE("Wage Component",HourMatrix3."New Wage Component");
          END;
        END;

        HourMatrix4.RESET;
        HourMatrix4.SETCURRENTKEY("Hour Model", "Date From", "Wage Component",
                                 "Time From", "Hours From", "New Wage Component");
        HourMatrix4.COPYFILTERS(HourMatrix3);
        HourMatrix4.SETFILTER("Hours From",'>%1',HourMatrix3."Hours From");

        IF HourMatrix4.FIND('-') THEN BEGIN
          IF Hours1 > HourMatrix4."Hours From" THEN BEGIN
            Duration1 := (Hours1 - HourMatrix4."Hours From") * 3600000;
            IF HourLineRec.Duration > Duration1 THEN BEGIN
              Duration2 := HourLineRec.Duration - Duration1;
              HourLineRec.VALIDATE(Duration, Duration2);
              HourLineRec."Split (iMOS)" := TRUE;
              HourLineRec.VALIDATE("Wage Component",HourMatrix3."New Wage Component");
              HourLineRec.Duration := 0;  //**4PS 28-8-2007 because of edit problem in hours page
              HourLineRec.MODIFY(TRUE);

              HourLineRec."Line No." := GetLastLineNo(HourLineRec) + 10000;
              HourLineRec."Time From" := HourLineRec."Time Until";
              HourLineRec.VALIDATE(Duration, 0);
              HourLineRec.INSERT;
              HourLineRec."Time Until" := DT2TIME(lDT_end);
              HourLineRec.VALIDATE(Duration, Duration1);
              HourLineRec.VALIDATE("Wage Component",HourMatrix4."New Wage Component");
            END;
          END;
        END;
      END;

      HourLineRec.Duration := 0;  //**4PS 28-8-2007 because of edit problem in hours page
      HourLineRec.MODIFY(TRUE);
    END;

    PROCEDURE SetFilterOnHourLineHours@1100485001(VAR ioHourLineRec@1100485000 : Record 11012039;iDay@1100485001 : ' ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday');
    BEGIN
      CASE iDay OF
        iDay::" ":     ;
        iDay::Monday:
          ioHourLineRec.SETFILTER(Monday, '<> 0');
        iDay::Tuesday:
          ioHourLineRec.SETFILTER(Tuesday, '<> 0');
        iDay::Wednesday:
          ioHourLineRec.SETFILTER(Wednesday, '<> 0');
        iDay::Thursday:
          ioHourLineRec.SETFILTER(Thursday, '<> 0');
        iDay::Friday:
          ioHourLineRec.SETFILTER(Friday, '<> 0');
        iDay::Saturday:
          ioHourLineRec.SETFILTER(Saturday, '<> 0');
        iDay::Sunday:
          ioHourLineRec.SETFILTER(Sunday, '<> 0');
      END;
    END;

    PROCEDURE SetFilterOnMatrixDay@1100485002(VAR ioHourMatrix@1100485000 : Record 11020531;iDay@1100485001 : ' ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday');
    BEGIN
      CASE iDay OF
        iDay::" ":     ;
        iDay::Monday:
          ioHourMatrix.SETRANGE(Monday, TRUE);
        iDay::Tuesday:
          ioHourMatrix.SETRANGE(Tuesday, TRUE);
        iDay::Wednesday:
          ioHourMatrix.SETRANGE(Wednesday, TRUE);
        iDay::Thursday:
          ioHourMatrix.SETRANGE(Thursday, TRUE);
        iDay::Friday:
          ioHourMatrix.SETRANGE(Friday, TRUE);
        iDay::Saturday:
          ioHourMatrix.SETRANGE(Saturday, TRUE);
        iDay::Sunday:
          ioHourMatrix.SETRANGE(Sunday, TRUE);
      END;
    END;

    PROCEDURE GetHoursPerDay@1100485004(iHourLineRec@1100485001 : Record 11012039;iDay@1100485000 : ' ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday') : Decimal;
    BEGIN
      CASE iDay OF
        iDay::" ": EXIT(0);
        iDay::Monday:
          EXIT(iHourLineRec.Monday);
        iDay::Tuesday:
          EXIT(iHourLineRec.Tuesday);
        iDay::Wednesday:
          EXIT(iHourLineRec.Wednesday);
        iDay::Thursday:
          EXIT(iHourLineRec.Thursday);
        iDay::Friday:
          EXIT(iHourLineRec.Friday);
        iDay::Saturday:
          EXIT(iHourLineRec.Saturday);
        iDay::Sunday:
          EXIT(iHourLineRec.Sunday);
      END;
      EXIT(0);
    END;

    PROCEDURE SkipTravelHours@1100485007(lWageComp@1100485002 : Code[20];HourLineRec@1100485001 : Record 11012039) SkipTravelHours : Boolean;
    VAR
      HourLineRec2@1100485000 : Record 11012039;
    BEGIN
      SkipTravelHours := FALSE;
      HourLineRec2.RESET;
      HourLineRec2.SETRANGE(Year,HourLineRec.Year);
      HourLineRec2.SETRANGE(Week,HourLineRec.Week);
      HourLineRec2.SETRANGE("Employee No.",HourLineRec."Employee No.");
      SetFilterOnHourLineHours(HourLineRec2,HourLineRec.Day);
      IF NOT HourLineRec2.FIND('-') THEN BEGIN
        IF (iMOSSetUp."Calc First Travel Hours" = TRUE) AND
           (lWageComp = iMOSSetUp."Wage Component Travel") THEN
          SkipTravelHours := TRUE;
      END;
    END;

    PROCEDURE GetLastLineNo@1100485011(HourlineRec@1100485001 : Record 11012039) : Integer;
    VAR
      lHourline@1100485000 : Record 11012039;
    BEGIN
      lHourline.SETRANGE(Year,HourlineRec.Year);
      lHourline.SETRANGE(Week,HourlineRec.Week);
      lHourline.SETRANGE("Employee No.",HourlineRec."Employee No.");
      IF NOT lHourline.FIND('+') THEN
        lHourline."Line No." := 0;

      EXIT(lHourline."Line No.");
    END;

    PROCEDURE HandleScannerLines@1100485005();
    VAR
      ScannerLine@1000000006 : Record 11020529;
      HourHeaderRec@1100485000 : Record 11012038;
      HourLineRec@1100485001 : Record 11012039;
      JobRec@1100485003 : Record 11072003;
      SkipLine@1100485004 : Boolean;
    BEGIN
      ScannerSetup.GET;

      ScannerLine.SETRANGE(Posted, FALSE);
      ScannerLine.SETRANGE(Approved, TRUE);

      IF ScannerLine.FIND('-') THEN BEGIN
        REPEAT

          HourLineRec.INIT;
          HourLineRec."Employee No." := ScannerLine.Employee;
          HourLineRec.Week := DATE2DWY(DT2DATE(ScannerLine.DT_start),2);
          HourLineRec.Year := DATE2DWY(DT2DATE(ScannerLine.DT_start),3);
          HourLineRec."Job Notice Entry Date" := DT2DATE(ScannerLine.DT_start);
          HourLineRec.Day := DATE2DWY(HourLineRec."Job Notice Entry Date", 1);
          HourLineRec.Comment := ScannerLine.Comment;

          IF NOT HourHeaderRec.GET(HourLineRec.Year,HourLineRec.Week,HourLineRec."Employee No.") THEN BEGIN
            HourHeaderRec.VALIDATE(Year,HourLineRec.Year);
            HourHeaderRec.VALIDATE(Week,HourLineRec.Week);
            HourHeaderRec.VALIDATE("Employee No.",HourLineRec."Employee No.");
            HourHeaderRec.INSERT(TRUE);
          END;


          SkipLine := FALSE;
          JobRec.INIT;
          IF ScannerLine."Job No." <> '' THEN BEGIN
            IF JobRec.GET(ScannerLine."Job No.") THEN BEGIN
              IF JobRec."Project Status" <> JobRec."Project Status"::Production THEN
                SkipLine := TRUE;
            END ELSE
              SkipLine := TRUE;
          END;

          IF NOT SkipLine THEN BEGIN

            HourLineRec."Line No." := GetLastLineNo(HourLineRec) + 10000;
            HourLineRec.INSERT(TRUE);

            HourLineRec.VALIDATE(Type,HourLineRec.Type::Indirect);

            IF ScannerLine."Job No." <> '' THEN BEGIN
              HourLineRec.VALIDATE(Type, HourLineRec.Type::Project);
              HourLineRec.VALIDATE("Project No.", ScannerLine."Job No.");
              HourLineRec.VALIDATE("Cost Object", ScannerSetup."Cost Object");
            END;

            IF (ScannerLine."Plant Type" <> '') THEN BEGIN
              HourLineRec.VALIDATE(Type, HourLineRec.Type::Plant);
              HourLineRec.VALIDATE("Plant Type", ScannerLine."Plant Type");
              HourLineRec.VALIDATE("Plant No.", ScannerLine."Plant No.");
              IF ScannerLine."Cost Component Wages" <> '' THEN
                HourLineRec.VALIDATE("Cost Component Plant",  ScannerLine."Cost Component Wages")
              ELSE
                HourLineRec.VALIDATE("Cost Component Plant", ScannerSetup."Cost Component Wages");
            END;

            IF HourLineRec.Type = HourLineRec.Type::Indirect THEN BEGIN
              HourLineRec.VALIDATE("Cost Code",ScannerLine."Cost Code");
              HourLineRec.VALIDATE("Cost Object",ScannerSetup."Cost Object");
            END;

            HourLineRec.VALIDATE("Wage Component",ScannerSetup."Wage Component");

            EvaluateHourMatrix(ScannerLine.DT_start, ScannerLine.DT_end, (ScannerLine.Duration * 60),
                                 HourHeaderRec, HourLineRec);

            ScannerLine.Posted := TRUE;
            ScannerLine.MODIFY;
          END;

          COMMIT;

        UNTIL ScannerLine.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

